using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using Il2CppDummyDll;
using NLayer;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.Rendering;
using UnityEngine.UI;
using uAudio;
using uAudio.uAudio_backend;
using uAudioDemo.Mp3StreamingDemo;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class HxSimpleRotate : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 RotateSpeed;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x1204EA8", Offset = "0x1204EA8", VA = "0x1204EA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x1204F14", Offset = "0x1204F14", VA = "0x1204F14")]
	public HxSimpleRotate()
	{
	}
}
[Token(Token = "0x2000003")]
[ExecuteInEditMode]
public class HxDensityVolume : MonoBehaviour
{
	[Token(Token = "0x2000004")]
	public enum DensityBlendMode
	{
		[Token(Token = "0x4000013")]
		Max,
		[Token(Token = "0x4000014")]
		Add,
		[Token(Token = "0x4000015")]
		Min,
		[Token(Token = "0x4000016")]
		Sub
	}

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HxOctree<HxDensityVolume> DensityOctree;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HxOctreeNode<HxDensityVolume>.NodeObject octreeNode;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DensityBlendMode BlendMode;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public Vector3 minBounds;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Vector3 maxBounds;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public Matrix4x4 ToLocalSpace;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float Density;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Color gizmoColor;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Vector3 c1;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static Vector3 c2;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Vector3 c3;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static Vector3 c4;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static Vector3 c5;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static Vector3 c6;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static Vector3 c7;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private static Vector3 c8;

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x12040F0", Offset = "0x12040F0", VA = "0x12040F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x12048A4", Offset = "0x12048A4", VA = "0x12048A4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x1204910", Offset = "0x1204910", VA = "0x1204910")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x1204A14", Offset = "0x1204A14", VA = "0x1204A14")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x1204B34", Offset = "0x1204B34", VA = "0x1204B34")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x1204C54", Offset = "0x1204C54", VA = "0x1204C54")]
	public void UpdateVolume()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x120429C", Offset = "0x120429C", VA = "0x120429C")]
	private void CalculateBounds()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x1204D38", Offset = "0x1204D38", VA = "0x1204D38")]
	public HxDensityVolume()
	{
	}
}
[Token(Token = "0x2000005")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D324", Offset = "0x97D324")]
public class HxDummyLight : MonoBehaviour
{
	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LightType type;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float range;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FA7C", Offset = "0x97FA7C")]
	public float spotAngle;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color color;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FA98", Offset = "0x97FA98")]
	public float intensity;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture cookie;

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x1204E54", Offset = "0x1204E54", VA = "0x1204E54")]
	public void Update()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x1204E58", Offset = "0x1204E58", VA = "0x1204E58")]
	public HxDummyLight()
	{
	}
}
[Token(Token = "0x2000006")]
public class HxOctree<T>
{
	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97FAB0", Offset = "0x97FAB0")]
	private int <Count>k__BackingField;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private HxOctreeNode<T> Root;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float Overlap;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float InitialSize;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float MinNodeSize;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Dictionary<T, HxOctreeNode<T>.NodeObject> NodeMap;

	[Token(Token = "0x17000001")]
	public int Count
	{
		[Token(Token = "0x600000E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980F70", Offset = "0x980F70")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600000F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980F80", Offset = "0x980F80")]
		private set
		{
		}
	}

	[Token(Token = "0x6000010")]
	public HxOctree([Optional] Vector3 origin, float initialSize = 10f, float overlap = 0f, float minNodeSize = 1f)
	{
	}

	[Token(Token = "0x6000011")]
	public HxOctreeNode<T>.NodeObject Add(T value, Vector3 boundsMin, Vector3 boundsMax)
	{
		return null;
	}

	[Token(Token = "0x6000012")]
	public void Print()
	{
	}

	[Token(Token = "0x6000013")]
	public void Move(HxOctreeNode<T>.NodeObject value, Vector3 boundsMin, Vector3 boundsMax)
	{
	}

	[Token(Token = "0x6000014")]
	public void Move(T value, Vector3 boundsMin, Vector3 boundsMax)
	{
	}

	[Token(Token = "0x6000015")]
	public void TryShrink()
	{
	}

	[Token(Token = "0x6000016")]
	public bool Remove(T value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000017")]
	private void ExpandRoot(Vector3 center)
	{
	}

	[Token(Token = "0x6000018")]
	public void GetObjects(Vector3 boundsMin, Vector3 boundsMax, List<T> items)
	{
	}

	[Token(Token = "0x6000019")]
	public void GetObjectsBoundsPlane(ref Plane[] planes, Vector3 min, Vector3 max, List<T> items)
	{
	}

	[Token(Token = "0x600001A")]
	public void Draw()
	{
	}
}
[Serializable]
[Token(Token = "0x2000007")]
public class HxOctreeNode<T>
{
	[Serializable]
	[Token(Token = "0x2000008")]
	public class NodeObject
	{
		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HxOctreeNode<T> Node;

		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T Value;

		[Token(Token = "0x4000034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 BoundsMin;

		[Token(Token = "0x4000035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 BoundsMax;

		[Token(Token = "0x4000036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Center;

		[Token(Token = "0x6000035")]
		public NodeObject(T value, Vector3 boundsMin, Vector3 boundsMax)
		{
		}
	}

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97FAC0", Offset = "0x97FAC0")]
	private Vector3 <Origin>k__BackingField;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97FAD0", Offset = "0x97FAD0")]
	private float <Size>k__BackingField;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public HxOctreeNode<T> Parent;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float MinSize;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float Overlap;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float SizeWithOverlap;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 BoundsMin;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 BoundsMax;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly List<NodeObject> Objects;

	[Token(Token = "0x400002C")]
	private const int MaxObjectCount = 8;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public HxOctreeNode<T>[] Children;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Vector3[] ChildrenBoundsMin;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Vector3[] ChildrenBoundsMax;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int ID;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int _idCtr;

	[Token(Token = "0x17000002")]
	public Vector3 Origin
	{
		[Token(Token = "0x600001B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980F90", Offset = "0x980F90")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600001C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980FA0", Offset = "0x980FA0")]
		private set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public float Size
	{
		[Token(Token = "0x600001D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980FB0", Offset = "0x980FB0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600001E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980FC0", Offset = "0x980FC0")]
		private set
		{
		}
	}

	[Token(Token = "0x600001F")]
	public HxOctreeNode(float size, float overlap, float minSize, Vector3 origin, HxOctreeNode<T> parent)
	{
	}

	[Token(Token = "0x6000020")]
	private void Init(float size, float overlap, float minSize, Vector3 origin, HxOctreeNode<T> parent)
	{
	}

	[Token(Token = "0x6000021")]
	public void Add(NodeObject node)
	{
	}

	[Token(Token = "0x6000022")]
	public bool Remove(T value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000023")]
	public void GetObjects(Vector3 boundsMin, Vector3 boundsMax, List<T> items)
	{
	}

	[Token(Token = "0x6000024")]
	public void GetObjects2(Vector3 boundsMin, Vector3 boundsMax, List<T> items)
	{
	}

	[Token(Token = "0x6000025")]
	public void GetObjects2BoundsPlane(ref Plane[] planes, Vector3 boundsMin, Vector3 boundsMax, List<T> items)
	{
	}

	[Token(Token = "0x6000026")]
	private void DrawBounds(Vector3 min, Vector3 max)
	{
	}

	[Token(Token = "0x6000027")]
	private int BoundsInPlanes(Vector3 min, Vector3 max, ref Plane[] planes)
	{
		return default(int);
	}

	[Token(Token = "0x6000028")]
	private bool ObjectInPlanes(Vector3 min, Vector3 max, ref Plane[] planes)
	{
		return default(bool);
	}

	[Token(Token = "0x6000029")]
	private Vector3 GetVertexP(Vector3 min, Vector3 max, Vector3 normal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600002A")]
	private Vector3 GetVertexN(Vector3 min, Vector3 max, Vector3 normal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600002B")]
	private void addAllObjectsToList(List<T> items)
	{
	}

	[Token(Token = "0x600002C")]
	private void addAllObjectsToList(List<T> items, ref Vector3 min, ref Vector3 max)
	{
	}

	[Token(Token = "0x600002D")]
	public HxOctreeNode<T> TryShrink(float minSize)
	{
		return null;
	}

	[Token(Token = "0x600002E")]
	private Vector3 GetVertexP(Vector3 normal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600002F")]
	private bool HasObjects()
	{
		return default(bool);
	}

	[Token(Token = "0x6000030")]
	public static bool BoundsIntersects(Vector3 aMin, Vector3 aMax, Vector3 bMin, Vector3 bMax)
	{
		return default(bool);
	}

	[Token(Token = "0x6000031")]
	public static bool BoundsContains(Vector3 outerMin, Vector3 outerMax, Vector3 innerMin, Vector3 innerMax)
	{
		return default(bool);
	}

	[Token(Token = "0x6000032")]
	private int OctantIndex(Vector3 point)
	{
		return default(int);
	}

	[Token(Token = "0x6000033")]
	public void Draw(int counter = 0)
	{
	}
}
[Token(Token = "0x2000009")]
[ExecuteInEditMode]
public class HxVolumetricCamera : MonoBehaviour
{
	[Token(Token = "0x200000A")]
	public enum hxRenderOrder
	{
		[Token(Token = "0x4000108")]
		ImageEffect,
		[Token(Token = "0x4000109")]
		ImageEffectOpaque
	}

	[Token(Token = "0x200000B")]
	public enum TransparencyQualities
	{
		[Token(Token = "0x400010B")]
		Low,
		[Token(Token = "0x400010C")]
		Medium,
		[Token(Token = "0x400010D")]
		High,
		[Token(Token = "0x400010E")]
		VeryHigh
	}

	[Token(Token = "0x200000C")]
	public enum DensityParticleQualities
	{
		[Token(Token = "0x4000110")]
		Low,
		[Token(Token = "0x4000111")]
		Medium,
		[Token(Token = "0x4000112")]
		High,
		[Token(Token = "0x4000113")]
		VeryHigh
	}

	[Token(Token = "0x200000D")]
	public enum HxAmbientMode
	{
		[Token(Token = "0x4000115")]
		UseRenderSettings,
		[Token(Token = "0x4000116")]
		Color,
		[Token(Token = "0x4000117")]
		Gradient
	}

	[Token(Token = "0x200000E")]
	public enum HxTintMode
	{
		[Token(Token = "0x4000119")]
		Off,
		[Token(Token = "0x400011A")]
		Color,
		[Token(Token = "0x400011B")]
		Edge,
		[Token(Token = "0x400011C")]
		Gradient
	}

	[Token(Token = "0x200000F")]
	public enum Resolution
	{
		[Token(Token = "0x400011E")]
		full,
		[Token(Token = "0x400011F")]
		half,
		[Token(Token = "0x4000120")]
		quarter
	}

	[Token(Token = "0x2000010")]
	public enum DensityResolution
	{
		[Token(Token = "0x4000122")]
		full,
		[Token(Token = "0x4000123")]
		half,
		[Token(Token = "0x4000124")]
		quarter,
		[Token(Token = "0x4000125")]
		eighth
	}

	[Token(Token = "0x2000011")]
	private struct TriangleIndices
	{
		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int v1;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int v2;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int v3;

		[Token(Token = "0x600007B")]
		[Address(RVA = "0x168AA6C", Offset = "0x168AA6C", VA = "0x168AA6C")]
		public TriangleIndices(int v1, int v2, int v3)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000012")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97D394", Offset = "0x97D394")]
	private sealed class <>c
	{
		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<HxDensityVolume> <>9__219_0;

		[Token(Token = "0x600007D")]
		[Address(RVA = "0x168AA24", Offset = "0x168AA24", VA = "0x168AA24")]
		public <>c()
		{
		}

		[Token(Token = "0x600007E")]
		[Address(RVA = "0x168AA2C", Offset = "0x168AA2C", VA = "0x168AA2C")]
		internal int <FindActiveLights>b__219_0(HxDensityVolume a, HxDensityVolume b)
		{
			return default(int);
		}
	}

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private hxRenderOrder RenderOrder;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HxVolumetricRenderCallback callBackImageEffect;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HxVolumetricRenderCallback callBackImageEffectOpaque;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool TemporalFirst;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool TemporalSampling;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FAE0", Offset = "0x97FAE0")]
	public float DitherSpeed;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FAF8", Offset = "0x97FAF8")]
	public float FeedbackMin;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FB10", Offset = "0x97FB10")]
	public float FeedbackMax;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FB28", Offset = "0x97FB28")]
	public float NoiseContrast;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Shader directionalShader;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Shader pointShader;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Shader spotShader;

	[NonSerialized]
	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool FullUsed;

	[NonSerialized]
	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool LowResUsed;

	[NonSerialized]
	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	public bool HeightFogUsed;

	[NonSerialized]
	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	public bool HeightFogOffUsed;

	[NonSerialized]
	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool NoiseUsed;

	[NonSerialized]
	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool NoiseOffUsed;

	[NonSerialized]
	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool TransparencyUsed;

	[NonSerialized]
	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	public bool TransparencyOffUsed;

	[NonSerialized]
	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool DensityParticlesUsed;

	[NonSerialized]
	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool PointUsed;

	[NonSerialized]
	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	public bool SpotUsed;

	[NonSerialized]
	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
	public bool DirectionalUsed;

	[NonSerialized]
	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool SinglePassStereoUsed;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static TransparencyQualities TransparencyBufferDepth;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static DensityParticleQualities DensityBufferDepth;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int EnumBufferDepthLength;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Matrix4x4 CurrentView;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Matrix4x4 CurrentProj;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Matrix4x4 CurrentInvers;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Matrix4x4 CurrentView2;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Matrix4x4 CurrentProj2;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private Matrix4x4 CurrentInvers2;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private RenderTexture TemporalTexture;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private RenderTargetIdentifier TemporalTextureRTID;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static RenderTexture VolumetricTexture;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static RenderTexture FullBlurRT;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static RenderTargetIdentifier FullBlurRTID;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static RenderTexture downScaledBlurRT;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static RenderTargetIdentifier downScaledBlurRTID;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static RenderTexture FullBlurRT2;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static RenderTargetIdentifier FullBlurRT2ID;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static RenderTargetIdentifier[] VolumetricUpsampledBlurTextures;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static RenderTexture[] VolumetricDensityTextures;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private static int[] VolumetricDensityPID;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private static int[] VolumetricTransparencyPID;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private static RenderTexture[] VolumetricTransparencyTextures;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static RenderTargetIdentifier[][] VolumetricDensity;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static RenderTargetIdentifier[][] VolumetricTransparency;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static RenderTargetIdentifier[][] VolumetricTransparencyI;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private static RenderTexture[] ScaledDepthTexture;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private static ShaderVariantCollection CollectionAll;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public static Texture2D Tile5x5;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private static int VolumetricTexturePID;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private static int ScaledDepthTexturePID;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public static int ShadowMapTexturePID;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public static RenderTargetIdentifier VolumetricTextureRTID;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public static RenderTargetIdentifier[] ScaledDepthTextureRTID;

	[NonSerialized]
	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public static Material DownSampleMaterial;

	[NonSerialized]
	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public static Material VolumeBlurMaterial;

	[NonSerialized]
	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public static Material TransparencyBlurMaterial;

	[NonSerialized]
	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public static Material ApplyMaterial;

	[NonSerialized]
	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public static Material ApplyDirectMaterial;

	[NonSerialized]
	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public static Material ApplyQueueMaterial;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	public Texture3D NoiseTexture3D;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public static Matrix4x4 BlitMatrix;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public static Matrix4x4 BlitMatrixMV;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public static Matrix4x4 BlitMatrixMVP;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public static Vector3 BlitScale;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FB40", Offset = "0x97FB40")]
	public Resolution resolution;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FB78", Offset = "0x97FB78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FB78", Offset = "0x97FB78")]
	public int SampleCount;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FBD0", Offset = "0x97FBD0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FBD0", Offset = "0x97FBD0")]
	public int DirectionalSampleCount;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FC28", Offset = "0x97FC28")]
	public float MaxDirectionalRayDistance;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FC60", Offset = "0x97FC60")]
	public float MaxLightDistance;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FC98", Offset = "0x97FC98")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FC98", Offset = "0x97FC98")]
	public float Density;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FCEC", Offset = "0x97FCEC")]
	public float AmbientLightingStrength;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FD04", Offset = "0x97FD04")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FD04", Offset = "0x97FD04")]
	public float MieScattering;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FD5C", Offset = "0x97FD5C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FD5C", Offset = "0x97FD5C")]
	public float SunSize;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FDB0", Offset = "0x97FDB0")]
	public bool SunBleed;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FDE8", Offset = "0x97FDE8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FDE8", Offset = "0x97FDE8")]
	public float Extinction;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FE3C", Offset = "0x97FE3C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FE3C", Offset = "0x97FE3C")]
	public float ExtinctionEffect;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public bool FogHeightEnabled;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
	public float FogHeight;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	public float FogTransitionSize;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	public float AboveFogPercent;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FE90", Offset = "0x97FE90")]
	public HxAmbientMode Ambient;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	public Color AmbientSky;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	public Color AmbientEquator;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
	public Color AmbientGround;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FEC8", Offset = "0x97FEC8")]
	public float AmbientIntensity;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	public HxTintMode TintMode;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
	public Color TintColor;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
	public Color TintColor2;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
	public float TintIntensity;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x97FEE0", Offset = "0x97FEE0")]
	public float TintGradient;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
	public Vector3 CurrentTint;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	public Vector3 CurrentTintEdge;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FEF8", Offset = "0x97FEF8")]
	public bool NoiseEnabled;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FF30", Offset = "0x97FF30")]
	public Vector3 NoiseScale;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FF68", Offset = "0x97FF68")]
	public Vector3 NoiseVelocity;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FFA0", Offset = "0x97FFA0")]
	public bool ParticleDensitySupport;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x97FFD8", Offset = "0x97FFD8")]
	public DensityResolution densityResolution;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980010", Offset = "0x980010")]
	public float densityDistance;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
	private float densityBias;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980048", Offset = "0x980048")]
	public bool TransparencySupport;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980080", Offset = "0x980080")]
	public float transparencyDistance;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9800B8", Offset = "0x9800B8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9800B8", Offset = "0x9800B8")]
	public int BlurTransparency;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
	private float transparencyBias;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x98010C", Offset = "0x98010C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x98010C", Offset = "0x98010C")]
	public int blurCount;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980160", Offset = "0x980160")]
	public float BlurDepthFalloff;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980198", Offset = "0x980198")]
	public float DownsampledBlurDepthFalloff;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9801D0", Offset = "0x9801D0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9801D0", Offset = "0x9801D0")]
	public int UpSampledblurCount;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980224", Offset = "0x980224")]
	public float DepthThreshold;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x98025C", Offset = "0x98025C")]
	public bool GaussianWeights;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31D")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980294", Offset = "0x980294")]
	[HideInInspector]
	public bool MapToLDR;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31E")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9802E0", Offset = "0x9802E0")]
	public bool RemoveColorBanding;

	[NonSerialized]
	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
	public Vector3 Offset;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	private static int DepthThresholdPID;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private static int BlurDepthFalloffPID;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	private static int VolumeScalePID;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private static int InverseViewMatrixPID;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
	private static int InverseProjectionMatrixPID;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private static int InverseProjectionMatrix2PID;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	private static int NoiseOffsetPID;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private static int ShadowDistancePID;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private static HxVolumetricShadersUsed UsedShaderSettings;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private static List<string> ShaderVariantList;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[HideInInspector]
	public static List<HxDensityVolume> ActiveVolumes;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	public static List<HxVolumetricLight> ActiveLights;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	public static List<HxVolumetricParticleSystem> ActiveParticleSystems;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	public static HxOctree<HxVolumetricLight> LightOctree;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	public static HxOctree<HxVolumetricParticleSystem> ParticleOctree;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	public static HashSet<HxDensityVolume> AllDensityVolumes;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	public static HashSet<HxVolumetricLight> AllVolumetricLight;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	public static HashSet<HxVolumetricParticleSystem> AllParticleSystems;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
	private bool test;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	public static Mesh QuadMesh;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	public static Mesh BoxMesh;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	public static Mesh SphereMesh;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	public static Mesh SpotLightMesh;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
	[HideInInspector]
	private Camera Mycamera;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	private static float[] ResolutionScale;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	public static float[] SampleScale;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
	private CommandBuffer BufferSetup;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
	private CommandBuffer BufferRender;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
	private CommandBuffer BufferRenderLights;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
	private CommandBuffer BufferFinalize;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
	private bool dirty;

	[NonSerialized]
	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	public static bool PIDCreated;

	[NonSerialized]
	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	private static Dictionary<int, Material> DirectionalMaterial;

	[NonSerialized]
	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	private static Dictionary<int, Material> PointMaterial;

	[NonSerialized]
	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	private static Dictionary<int, Material> SpotMaterial;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	public static ShaderVariantCollection.ShaderVariant[] DirectionalVariant;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
	public static ShaderVariantCollection.ShaderVariant[] PointVariant;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
	public static ShaderVariantCollection.ShaderVariant[] SpotVariant;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
	public static Material ShadowMaterial;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
	public static Material DensityMaterial;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
	[HideInInspector]
	public Matrix4x4 MatrixVP;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39C")]
	public Matrix4x4 LastMatrixVP;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3DC")]
	public Matrix4x4 LastMatrixVPInv;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41C")]
	public Matrix4x4 LastMatrixVP2;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
	public Matrix4x4 LastMatrixVPInv2;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49C")]
	[HideInInspector]
	public Matrix4x4 MatrixV;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4DC")]
	private bool OffsetUpdated;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
	[HideInInspector]
	private static Texture2D _SpotLightCookie;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
	private int ParticleDensityRenderCount;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
	private static Matrix4x4 particleMatrix;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
	public static HxVolumetricCamera Active;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
	public static Camera ActiveCamera;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E4")]
	private CameraEvent LightRenderEvent;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
	private CameraEvent SetupEvent;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4EC")]
	private CameraEvent RenderEvent;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
	private CameraEvent FinalizeEvent;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
	public static List<HxVolumetricLight> ActiveDirectionalLights;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
	private static Vector3 MinBounds;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A4")]
	private static Vector3 MaxBounds;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
	private static Plane[] CameraPlanes;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F4")]
	private bool preCullEventAdded;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F5")]
	private bool BuffersBuilt;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F6")]
	private bool LightBufferAdded;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F7")]
	private bool SetupBufferAdded;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
	private bool SetupBufferDirty;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F9")]
	private bool FinalizeBufferAdded;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4FA")]
	private bool FinalizeBufferDirty;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4FC")]
	private CameraEvent lastApply;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
	private CameraEvent lastRender;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x504")]
	private CameraEvent lastSetup;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
	private CameraEvent lastFinalize;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50C")]
	private CameraEvent lastLightRender;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
	private bool LastPlaying;

	[NonSerialized]
	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
	private static int lastRes;

	[NonSerialized]
	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x514")]
	private int lastBlurCount;

	[NonSerialized]
	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
	private int lastupSampleBlurCount;

	[NonSerialized]
	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51C")]
	private int lastLDR;

	[NonSerialized]
	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
	private int lastBanding;

	[NonSerialized]
	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x524")]
	private int lastH;

	[NonSerialized]
	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
	private int lastW;

	[NonSerialized]
	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52C")]
	private int lastPath;

	[NonSerialized]
	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x530")]
	private int lastGaussian;

	[NonSerialized]
	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x534")]
	private int lastTransparency;

	[NonSerialized]
	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x538")]
	private int lastDensity;

	[NonSerialized]
	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53C")]
	private int lastDensityRes;

	[NonSerialized]
	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
	private float lastDepthFalloff;

	[NonSerialized]
	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x544")]
	private float lastDownDepthFalloff;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
	private float currentDitherOffset;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
	public static bool FirstDirectional;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
	private static int[] Tile5x5int;

	[Token(Token = "0x17000004")]
	[HideInInspector]
	public Texture2D SpotLightCookie
	{
		[Token(Token = "0x600004C")]
		[Address(RVA = "0x1209ACC", Offset = "0x1209ACC", VA = "0x1209ACC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600004D")]
		[Address(RVA = "0x1209C9C", Offset = "0x1209C9C", VA = "0x1209C9C")]
		set
		{
		}
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x1204F1C", Offset = "0x1204F1C", VA = "0x1204F1C")]
	private void SetUpRenderOrder()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x12051F8", Offset = "0x12051F8", VA = "0x12051F8")]
	public static Material GetDirectionalMaterial(int mid)
	{
		return null;
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x1205614", Offset = "0x1205614", VA = "0x1205614")]
	public static Material GetSpotMaterial(int mid)
	{
		return null;
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x12057E0", Offset = "0x12057E0", VA = "0x12057E0")]
	public static Material GetPointMaterial(int mid)
	{
		return null;
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x12059AC", Offset = "0x12059AC", VA = "0x12059AC")]
	public TransparencyQualities compatibleTBuffer()
	{
		return default(TransparencyQualities);
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x1205A74", Offset = "0x1205A74", VA = "0x1205A74")]
	private bool IsRenderBoth()
	{
		return default(bool);
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x1205AC4", Offset = "0x1205AC4", VA = "0x1205AC4")]
	private DensityParticleQualities compatibleDBuffer()
	{
		return default(DensityParticleQualities);
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x1205B28", Offset = "0x1205B28", VA = "0x1205B28")]
	private void MyPreCull(Camera cam)
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x1205D24", Offset = "0x1205D24", VA = "0x1205D24")]
	public bool renderDensityParticleCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x1205D34", Offset = "0x1205D34", VA = "0x1205D34")]
	private void WarmUp()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x12060FC", Offset = "0x12060FC", VA = "0x12060FC")]
	private void CreateShaderVariant(Shader source, int i, ref Material[] material, ref ShaderVariantCollection.ShaderVariant[] Variant, bool point = true)
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x12053BC", Offset = "0x12053BC", VA = "0x12053BC")]
	private static void CreateShader(Shader source, int i, out Material outMaterial, bool point = true)
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x12066D0", Offset = "0x12066D0", VA = "0x12066D0")]
	private void CreatePIDs()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x12093B0", Offset = "0x12093B0", VA = "0x12093B0")]
	public static bool ActiveFull()
	{
		return default(bool);
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x1209428", Offset = "0x1209428", VA = "0x1209428")]
	private void DefineFull()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x120942C", Offset = "0x120942C", VA = "0x120942C")]
	private static void UpdateLight(HxOctreeNode<HxVolumetricLight>.NodeObject node, Vector3 boundsMin, Vector3 boundsMax)
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x1209500", Offset = "0x1209500", VA = "0x1209500")]
	public static HxOctreeNode<HxVolumetricLight>.NodeObject AddLightOctree(HxVolumetricLight light, Vector3 boundsMin, Vector3 boundsMax)
	{
		return null;
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x12096A4", Offset = "0x12096A4", VA = "0x12096A4")]
	public static HxOctreeNode<HxVolumetricParticleSystem>.NodeObject AddParticleOctree(HxVolumetricParticleSystem particle, Vector3 boundsMin, Vector3 boundsMax)
	{
		return null;
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x1209848", Offset = "0x1209848", VA = "0x1209848")]
	public static void RemoveLightOctree(HxVolumetricLight light)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x1209908", Offset = "0x1209908", VA = "0x1209908")]
	public static void RemoveParticletOctree(HxVolumetricParticleSystem Particle)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x12099C8", Offset = "0x12099C8", VA = "0x12099C8")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x1209A2C", Offset = "0x1209A2C", VA = "0x1209A2C")]
	public Camera GetCamera()
	{
		return null;
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x1209D04", Offset = "0x1209D04", VA = "0x1209D04")]
	private Vector4 CalculateDensityDistance(int i)
	{
		return default(Vector4);
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x1209EE8", Offset = "0x1209EE8", VA = "0x1209EE8")]
	private Vector4 CalculateTransparencyDistance(int i)
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x120A07C", Offset = "0x120A07C", VA = "0x120A07C")]
	private void RenderParticles()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x120B87C", Offset = "0x120B87C", VA = "0x120B87C")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x120ADF0", Offset = "0x120ADF0", VA = "0x120ADF0")]
	private int RenderSlices()
	{
		return default(int);
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x120B8C4", Offset = "0x120B8C4", VA = "0x120B8C4")]
	private int GetCamPixelHeight()
	{
		return default(int);
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x120B92C", Offset = "0x120B92C", VA = "0x120B92C")]
	private int GetCamPixelWidth()
	{
		return default(int);
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x120B9F0", Offset = "0x120B9F0", VA = "0x120B9F0")]
	private void CreateTempTextures()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x120A5EC", Offset = "0x120A5EC", VA = "0x120A5EC")]
	public static void ConstructPlanes(Camera cam, float near, float far)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x120C998", Offset = "0x120C998", VA = "0x120C998")]
	private void FindActiveLights()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x120ACEC", Offset = "0x120ACEC", VA = "0x120ACEC")]
	private void FindActiveParticleSystems()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x120CD58", Offset = "0x120CD58", VA = "0x120CD58")]
	public void Update()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x120D15C", Offset = "0x120D15C", VA = "0x120D15C")]
	private void Start()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x120D250", Offset = "0x120D250", VA = "0x120D250")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x120D344", Offset = "0x120D344", VA = "0x120D344")]
	private void CreateApplyBuffer()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x120D348", Offset = "0x120D348", VA = "0x120D348")]
	private void CreateSetupBuffer()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x120D6B8", Offset = "0x120D6B8", VA = "0x120D6B8")]
	private bool CheckBufferDirty()
	{
		return default(bool);
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x120D8B8", Offset = "0x120D8B8", VA = "0x120D8B8")]
	private void CreateFinalizeBuffer()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x1210A9C", Offset = "0x1210A9C", VA = "0x1210A9C")]
	private void BuildBuffer()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x1213550", Offset = "0x1213550", VA = "0x1213550")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x12137C4", Offset = "0x12137C4", VA = "0x12137C4")]
	private void SaveUsedShaderVarience()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x12137C8", Offset = "0x12137C8", VA = "0x12137C8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x1212768", Offset = "0x1212768", VA = "0x1212768")]
	private void CalculateEvent()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x1213A44", Offset = "0x1213A44", VA = "0x1213A44")]
	public void EventOnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x1213B2C", Offset = "0x1213B2C", VA = "0x1213B2C")]
	private int ScalePass()
	{
		return default(int);
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x1213B50", Offset = "0x1213B50", VA = "0x1213B50")]
	private void DownSampledFullBlur(RenderTexture mainColor, RenderBuffer NewColor, RenderBuffer depth, int pass)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x121284C", Offset = "0x121284C", VA = "0x121284C")]
	private void CheckTemporalTextures()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x1212A30", Offset = "0x1212A30", VA = "0x1212A30")]
	public static void ReleaseTempTextures()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x1213D04", Offset = "0x1213D04", VA = "0x1213D04")]
	private void OnPreCull()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x1213DA0", Offset = "0x1213DA0", VA = "0x1213DA0")]
	private void UpdateLightPoistions()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x1214010", Offset = "0x1214010", VA = "0x1214010")]
	private void UpdateParticlePoistions()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x1214830", Offset = "0x1214830", VA = "0x1214830")]
	private void Awake()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x121498C", Offset = "0x121498C", VA = "0x121498C")]
	private void start()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x1205BF8", Offset = "0x1205BF8", VA = "0x1205BF8")]
	public void ReleaseLightBuffers()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x12131D8", Offset = "0x12131D8", VA = "0x12131D8")]
	private void CreateLightbuffers()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x1207A74", Offset = "0x1207A74", VA = "0x1207A74")]
	private static void CreateTileTexture()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x1208F30", Offset = "0x1208F30", VA = "0x1208F30")]
	public static Mesh CreateCone(int sides, bool inner = true)
	{
		return null;
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x1207E38", Offset = "0x1207E38", VA = "0x1207E38")]
	public static Mesh CreateQuad()
	{
		return null;
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x1207FD0", Offset = "0x1207FD0", VA = "0x1207FD0")]
	public static Mesh CreateBox()
	{
		return null;
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x12080B0", Offset = "0x12080B0", VA = "0x12080B0")]
	public static Mesh CreateIcoSphere(int recursionLevel, float radius)
	{
		return null;
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x1214B38", Offset = "0x1214B38", VA = "0x1214B38")]
	private static int getMiddlePoint(int p1, int p2, ref List<Vector3> vertices, ref Dictionary<long, int> cache, float radius)
	{
		return default(int);
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x1207688", Offset = "0x1207688", VA = "0x1207688")]
	public void Create3DNoiseTexture()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x1214D14", Offset = "0x1214D14", VA = "0x1214D14")]
	private int PostoIndex(Vector3 pos)
	{
		return default(int);
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x1214D9C", Offset = "0x1214D9C", VA = "0x1214D9C")]
	public HxVolumetricCamera()
	{
	}
}
[Token(Token = "0x2000013")]
[ExecuteInEditMode]
public class HxVolumetricImageEffect : HxVolumetricRenderCallback
{
	[Token(Token = "0x600007F")]
	[Address(RVA = "0x1215AD0", Offset = "0x1215AD0", VA = "0x1215AD0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x1215B6C", Offset = "0x1215B6C", VA = "0x1215B6C")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x1215CB4", Offset = "0x1215CB4", VA = "0x1215CB4")]
	public HxVolumetricImageEffect()
	{
	}
}
[Token(Token = "0x2000014")]
[ExecuteInEditMode]
public class HxVolumetricImageEffectOpaque : HxVolumetricRenderCallback
{
	[Token(Token = "0x6000082")]
	[Address(RVA = "0x1215CBC", Offset = "0x1215CBC", VA = "0x1215CBC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x1215D5C", Offset = "0x1215D5C", VA = "0x1215D5C")]
	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x1215EA4", Offset = "0x1215EA4", VA = "0x1215EA4")]
	public HxVolumetricImageEffectOpaque()
	{
	}
}
[Token(Token = "0x2000015")]
[ExecuteInEditMode]
public class HxVolumetricLight : MonoBehaviour
{
	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float ShadowDistanceExtra;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Light myLight;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HxDummyLight myDummyLight;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture3D NoiseTexture3D;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CommandBuffer BufferRender;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CommandBuffer BufferCopy;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 NoiseScale;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 NoiseVelocity;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool dirty;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float NearPlane;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool NoiseEnabled;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool CustomMieScatter;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool CustomExtinction;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool CustomExtinctionEffect;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool CustomDensity;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool CustomSampleCount;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	public bool CustomColor;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	public bool CustomNoiseEnabled;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool CustomNoiseTexture;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool CustomNoiseScale;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	public bool CustomNoiseVelocity;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	public bool CustomNoiseContrast;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool CustomFogHeightEnabled;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	public bool CustomFogHeight;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
	public bool CustomFogTransitionSize;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
	public bool CustomAboveFogPercent;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool CustomSunSize;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool CustomSunBleed;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool ShadowCasting;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
	public bool CustomStrength;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public bool CustomIntensity;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	public bool CustomTintMode;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
	public bool CustomTintColor;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x77")]
	public bool CustomTintColor2;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool CustomTintGradient;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool CustomTintIntensity;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	public bool CustomMaxLightDistance;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980368", Offset = "0x980368")]
	public float NoiseContrast;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public HxVolumetricCamera.HxTintMode TintMode;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Color TintColor;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Color TintColor2;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float TintIntensity;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980380", Offset = "0x980380")]
	public float TintGradient;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980398", Offset = "0x980398")]
	public float Intensity;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9803B0", Offset = "0x9803B0")]
	public float Strength;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public Color Color;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9803C8", Offset = "0x9803C8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9803C8", Offset = "0x9803C8")]
	public float MieScattering;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980420", Offset = "0x980420")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980420", Offset = "0x980420")]
	public float SunSize;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980474", Offset = "0x980474")]
	public bool SunBleed;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9804AC", Offset = "0x9804AC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9804AC", Offset = "0x9804AC")]
	public float Extinction;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980500", Offset = "0x980500")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980500", Offset = "0x980500")]
	public float Density;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980554", Offset = "0x980554")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980554", Offset = "0x980554")]
	public float ExtraDensity;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9805A8", Offset = "0x9805A8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9805A8", Offset = "0x9805A8")]
	public int SampleCount;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x980600", Offset = "0x980600")]
	public bool Shadows;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	public bool FogHeightEnabled;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float FogHeight;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float FogTransitionSize;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float MaxLightDistance;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float AboveFogPercent;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private bool OffsetUpdated;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Vector3 Offset;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private bool bufferBuilt;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int VolumetricBMVPPID;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static int VolumetricMVPPID;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static int VolumetricMVP2PID;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static int VolumetricMVPID;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int LightColourPID;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static int LightColour2PID;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static int FogHeightsPID;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private static int PhasePID;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static int _LightParamsPID;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private static int DensityPID;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static int ShadowBiasPID;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static int _CustomLightPositionPID;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static int hxNearPlanePID;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private static int NoiseScalePID;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static int NoiseOffsetPID;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private static int _SpotLightParamsPID;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static int _LightTexture0PID;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
	private bool LastBufferDirectional;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float LastSpotAngle;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private float LastRange;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private LightType lastType;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private Matrix4x4 LightMatrix;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private Bounds lastBounds;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private Vector3 minBounds;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Vector3 maxBounds;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private HxOctreeNode<HxVolumetricLight>.NodeObject octreeNode;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Vector4 TopFrustumNormal;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private Vector4 BottomFrustumNormal;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private Vector4 LeftFrustumNormal;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private Vector4 RightFrustumNormal;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static Matrix4x4[] VolumeMatrixArrays;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static Vector4[] VolumeSettingsArrays;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static Matrix4x4[] VolumeMatrixArraysOld;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static Vector4[] VolumeSettingsArraysOld;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private bool matrixReconstruct;

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x1215EAC", Offset = "0x1215EAC", VA = "0x1215EAC")]
	public Light LightSafe()
	{
		return null;
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x1215F4C", Offset = "0x1215F4C", VA = "0x1215F4C")]
	public HxDummyLight DummyLightSafe()
	{
		return null;
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x1215FEC", Offset = "0x1215FEC", VA = "0x1215FEC")]
	private LightType GetLightType()
	{
		return default(LightType);
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x12160CC", Offset = "0x12160CC", VA = "0x12160CC")]
	private LightShadows LightShadow()
	{
		return default(LightShadows);
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x1216160", Offset = "0x1216160", VA = "0x1216160")]
	private bool HasLight()
	{
		return default(bool);
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x1216218", Offset = "0x1216218", VA = "0x1216218")]
	private Texture LightCookie()
	{
		return null;
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x12162F8", Offset = "0x12162F8", VA = "0x12162F8")]
	private float LightShadowBias()
	{
		return default(float);
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x1216398", Offset = "0x1216398", VA = "0x1216398")]
	private Color LightColor()
	{
		return default(Color);
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x12164C0", Offset = "0x12164C0", VA = "0x12164C0")]
	private float LightSpotAngle()
	{
		return default(float);
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x12165A0", Offset = "0x12165A0", VA = "0x12165A0")]
	private bool LightEnabled()
	{
		return default(bool);
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x1216720", Offset = "0x1216720", VA = "0x1216720")]
	private float LightRange()
	{
		return default(float);
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x12167FC", Offset = "0x12167FC", VA = "0x12167FC")]
	private float LightShadowStrength()
	{
		return default(float);
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x12168D4", Offset = "0x12168D4", VA = "0x12168D4")]
	private float LightIntensity()
	{
		return default(float);
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x12169B0", Offset = "0x12169B0", VA = "0x12169B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x1216B6C", Offset = "0x1216B6C", VA = "0x1216B6C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x1216C80", Offset = "0x1216C80", VA = "0x1216C80")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x1216DA0", Offset = "0x1216DA0", VA = "0x1216DA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x1214AAC", Offset = "0x1214AAC", VA = "0x1214AAC")]
	public void BuildBuffer(CommandBuffer CameraBuffer)
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x12149E0", Offset = "0x12149E0", VA = "0x12149E0")]
	public void ReleaseBuffer()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x1207728", Offset = "0x1207728", VA = "0x1207728")]
	public static void CreatePID()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x121A104", Offset = "0x121A104", VA = "0x121A104")]
	private float LightNearPlane()
	{
		return default(float);
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x121A19C", Offset = "0x121A19C", VA = "0x121A19C")]
	private int DirectionalPass(CommandBuffer buffer)
	{
		return default(int);
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x121A564", Offset = "0x121A564", VA = "0x121A564")]
	private float getContrast()
	{
		return default(float);
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x121A5EC", Offset = "0x121A5EC", VA = "0x121A5EC")]
	private bool ShaderModel4()
	{
		return default(bool);
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x1216E18", Offset = "0x1216E18", VA = "0x1216E18")]
	private void BuildDirectionalBuffer(CommandBuffer CameraBuffer)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x121AAD8", Offset = "0x121AAD8", VA = "0x121AAD8")]
	private void LoadVolumeDateIntoBuffer(CommandBuffer buffer)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x121B380", Offset = "0x121B380", VA = "0x121B380")]
	private float CalcLightInstensityDistance(float distance)
	{
		return default(float);
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x1217F38", Offset = "0x1217F38", VA = "0x1217F38")]
	private void BuildSpotLightBuffer(CommandBuffer cameraBuffer)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x121B878", Offset = "0x121B878", VA = "0x121B878")]
	private void SetColors(CommandBuffer buffer, float distance)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x121ABB4", Offset = "0x121ABB4", VA = "0x121ABB4")]
	private void SetColors(CommandBuffer buffer)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x121C110", Offset = "0x121C110", VA = "0x121C110")]
	private Vector3 CalcTintColor(Vector4 c)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x121C2D0", Offset = "0x121C2D0", VA = "0x121C2D0")]
	private Vector3 CalcTintColorEdge(Vector4 c)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x12190D0", Offset = "0x12190D0", VA = "0x12190D0")]
	private void BuildPointBuffer(CommandBuffer cameraBuffer)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x121B0E0", Offset = "0x121B0E0", VA = "0x121B0E0")]
	public int MID(bool RenderShadows, bool full)
	{
		return default(int);
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x121C48C", Offset = "0x121C48C", VA = "0x121C48C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x121A628", Offset = "0x121A628", VA = "0x121A628")]
	private float GetFogDensity()
	{
		return default(float);
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x121B2BC", Offset = "0x121B2BC", VA = "0x121B2BC")]
	private Texture3D GetNoiseTexture()
	{
		return null;
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x121B010", Offset = "0x121B010", VA = "0x121B010")]
	private int GetSampleCount(bool RenderShadows)
	{
		return default(int);
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x121C494", Offset = "0x121C494", VA = "0x121C494")]
	public static Vector3 ClosestPointOnLine(Vector3 vA, Vector3 vB, Vector3 vPoint)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x121B49C", Offset = "0x121B49C", VA = "0x121B49C")]
	private float ClosestDistanceToCone(Vector3 Point)
	{
		return default(float);
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x121C5C0", Offset = "0x121C5C0", VA = "0x121C5C0")]
	private void UpdateLightMatrix()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x121C834", Offset = "0x121C834", VA = "0x121C834")]
	private void CheckLightType()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x121A6B8", Offset = "0x121A6B8", VA = "0x121A6B8")]
	private void LoadVolumeData()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x121C9C4", Offset = "0x121C9C4", VA = "0x121C9C4")]
	private bool BoundsIntersect(HxDensityVolume vol)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x121BDA4", Offset = "0x121BDA4", VA = "0x121BDA4")]
	private void LoadVolumeDataBounds()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x121CA40", Offset = "0x121CA40", VA = "0x121CA40")]
	private Vector4 NormalOfTriangle(Vector3 a, Vector3 b, Vector3 c)
	{
		return default(Vector4);
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x121CAC4", Offset = "0x121CAC4", VA = "0x121CAC4")]
	private void DrawIntersect()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x1214168", Offset = "0x1214168", VA = "0x1214168")]
	public void UpdatePosition(bool first = false)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x121D2D8", Offset = "0x121D2D8", VA = "0x121D2D8")]
	public void DrawBounds()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x121D67C", Offset = "0x121D67C", VA = "0x121D67C")]
	public HxVolumetricLight()
	{
	}
}
[Token(Token = "0x2000016")]
[ExecuteInEditMode]
public class HxVolumetricParticleSystem : MonoBehaviour
{
	[Token(Token = "0x2000017")]
	public enum ParticleBlendMode
	{
		[Token(Token = "0x4000195")]
		Max,
		[Token(Token = "0x4000196")]
		Add,
		[Token(Token = "0x4000197")]
		Min,
		[Token(Token = "0x4000198")]
		Sub
	}

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980638", Offset = "0x980638")]
	public float DensityStrength;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HxOctreeNode<HxVolumetricParticleSystem>.NodeObject octreeNode;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public Renderer particleRenderer;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleBlendMode BlendMode;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 minBounds;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 maxBounds;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Bounds LastBounds;

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xE36E2C", Offset = "0xE36E2C", VA = "0xE36E2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xE36F64", Offset = "0xE36F64", VA = "0xE36F64")]
	public void UpdatePosition()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xE37098", Offset = "0xE37098", VA = "0xE37098")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xE37140", Offset = "0xE37140", VA = "0xE37140")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xE371E8", Offset = "0xE371E8", VA = "0xE371E8")]
	public HxVolumetricParticleSystem()
	{
	}
}
[Token(Token = "0x2000018")]
public class HxVolumetricRenderCallback : MonoBehaviour
{
	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected HxVolumetricCamera volumetricCamera;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public HxVolumetricCamera.hxRenderOrder RenderOrder;

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xE37200", Offset = "0xE37200", VA = "0xE37200")]
	public HxVolumetricRenderCallback()
	{
	}
}
[Token(Token = "0x2000019")]
public class HxVolumetricShadersUsed : ScriptableObject
{
	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HxVolumetricCamera.TransparencyQualities TransperencyQuality;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public HxVolumetricCamera.DensityParticleQualities DensityParticleQuality;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public HxVolumetricCamera.DensityParticleQualities LastDensityParticleQuality;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public HxVolumetricCamera.TransparencyQualities LastTransperencyQuality;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HxVolumetricShadersUsed instance;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool Full;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool LowRes;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool HeightFog;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool HeightFogOff;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool Noise;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool NoiseOff;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool Transparency;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public bool TransparencyOff;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool DensityParticles;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool Point;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool Spot;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool Directional;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool SinglePassStereo;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[HideInInspector]
	public bool FullLast;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	[HideInInspector]
	public bool LowResLast;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	[HideInInspector]
	public bool HeightFogLast;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public bool HeightFogOffLast;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[HideInInspector]
	public bool NoiseLast;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[HideInInspector]
	public bool NoiseOffLast;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	[HideInInspector]
	public bool TransparencyLast;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public bool TransparencyOffLast;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[HideInInspector]
	public bool DensityParticlesLast;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	[HideInInspector]
	public bool PointLast;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
	[HideInInspector]
	public bool SpotLast;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public bool DirectionalLast;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[HideInInspector]
	public bool SinglePassStereoLast;

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xE37208", Offset = "0xE37208", VA = "0xE37208")]
	private bool CheckDirty()
	{
		return default(bool);
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xE37510", Offset = "0xE37510", VA = "0xE37510")]
	public HxVolumetricShadersUsed()
	{
	}
}
[Token(Token = "0x200001A")]
public class loopSong : MonoBehaviour
{
	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public uAudioPlayer_UI my_uAudioPlayer_UI;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public dirLoop_UI my_dirLoop_UI;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uAudioPlayer my_uAudioPlayer;

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x1684AA0", Offset = "0x1684AA0", VA = "0x1684AA0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x1684B74", Offset = "0x1684B74", VA = "0x1684B74")]
	private void songDone(PlayBackState valIN)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x1684C54", Offset = "0x1684C54", VA = "0x1684C54")]
	public loopSong()
	{
	}
}
[Token(Token = "0x200001B")]
public class uVisualizer : MonoBehaviour
{
	[Token(Token = "0x200001C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97D3E4", Offset = "0x97D3E4")]
	private sealed class <updateViz>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uVisualizer <>4__this;

		[Token(Token = "0x17000005")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000CC")]
			[Address(RVA = "0x24A9FE0", Offset = "0x24A9FE0", VA = "0x24A9FE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000CE")]
			[Address(RVA = "0x24AA028", Offset = "0x24AA028", VA = "0x24AA028", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000C9")]
		[Address(RVA = "0x24A9EF8", Offset = "0x24A9EF8", VA = "0x24A9EF8")]
		[DebuggerHidden]
		public <updateViz>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60000CA")]
		[Address(RVA = "0x24A9F24", Offset = "0x24A9F24", VA = "0x24A9F24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000CB")]
		[Address(RVA = "0x24A9F28", Offset = "0x24A9F28", VA = "0x24A9F28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000CD")]
		[Address(RVA = "0x24A9FE8", Offset = "0x24A9FE8", VA = "0x24A9FE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float[] _SamplesLeft;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] _SamplesRight;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] _SpectrumLeft;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float[] _SpectrumRight;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource theAudioSource;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Slider[] SliderList;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Slider[] SliderList2;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Slider aSliderLeft;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider aSliderRight;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FFTWindow myFFTWindow;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float Viz_Scale;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float[] freqData;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float[] band;

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x16892F8", Offset = "0x16892F8", VA = "0x16892F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x16893D4", Offset = "0x16893D4", VA = "0x16893D4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x980FE0", Offset = "0x980FE0")]
	private IEnumerator updateViz()
	{
		return null;
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x1689440", Offset = "0x1689440", VA = "0x1689440")]
	private void updateSectrumViz(float[] _Spectrum)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x1689570", Offset = "0x1689570", VA = "0x1689570")]
	private float splitSamples(int index, float[] samples, int samplesPerItem)
	{
		return default(float);
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x1689620", Offset = "0x1689620", VA = "0x1689620")]
	private float GetYPosLog(float c)
	{
		return default(float);
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x168964C", Offset = "0x168964C", VA = "0x168964C")]
	public uVisualizer()
	{
	}
}
[Token(Token = "0x200001D")]
public class WAV
{
	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980760", Offset = "0x980760")]
	private float[] <LeftChannel>k__BackingField;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980770", Offset = "0x980770")]
	private float[] <RightChannel>k__BackingField;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980780", Offset = "0x980780")]
	private int <ChannelCount>k__BackingField;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980790", Offset = "0x980790")]
	private int <SampleCount>k__BackingField;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9807A0", Offset = "0x9807A0")]
	private int <Frequency>k__BackingField;

	[Token(Token = "0x17000007")]
	public float[] LeftChannel
	{
		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x167F4D8", Offset = "0x167F4D8", VA = "0x167F4D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981090", Offset = "0x981090")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000D2")]
		[Address(RVA = "0x167F4E0", Offset = "0x167F4E0", VA = "0x167F4E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9810A0", Offset = "0x9810A0")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public float[] RightChannel
	{
		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x167F4E8", Offset = "0x167F4E8", VA = "0x167F4E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9810B0", Offset = "0x9810B0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000D4")]
		[Address(RVA = "0x167F4F0", Offset = "0x167F4F0", VA = "0x167F4F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9810C0", Offset = "0x9810C0")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000009")]
	public int ChannelCount
	{
		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x167F4F8", Offset = "0x167F4F8", VA = "0x167F4F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9810D0", Offset = "0x9810D0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000D6")]
		[Address(RVA = "0x167F500", Offset = "0x167F500", VA = "0x167F500")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9810E0", Offset = "0x9810E0")]
		internal set
		{
		}
	}

	[Token(Token = "0x1700000A")]
	public int SampleCount
	{
		[Token(Token = "0x60000D7")]
		[Address(RVA = "0x167F508", Offset = "0x167F508", VA = "0x167F508")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9810F0", Offset = "0x9810F0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000D8")]
		[Address(RVA = "0x167F510", Offset = "0x167F510", VA = "0x167F510")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981100", Offset = "0x981100")]
		internal set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	public int Frequency
	{
		[Token(Token = "0x60000D9")]
		[Address(RVA = "0x167F518", Offset = "0x167F518", VA = "0x167F518")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981110", Offset = "0x981110")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000DA")]
		[Address(RVA = "0x167F520", Offset = "0x167F520", VA = "0x167F520")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981120", Offset = "0x981120")]
		internal set
		{
		}
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x167F444", Offset = "0x167F444", VA = "0x167F444")]
	private static float bytesToFloat(byte firstByte, byte secondByte)
	{
		return default(float);
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x167F460", Offset = "0x167F460", VA = "0x167F460")]
	private static int bytesToInt(byte[] bytes, int offset = 0)
	{
		return default(int);
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x167F528", Offset = "0x167F528", VA = "0x167F528")]
	public WAV(byte[] wav)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x167F7E0", Offset = "0x167F7E0", VA = "0x167F7E0", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x200001E")]
public class log : MonoBehaviour
{
	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputField text;

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x16849E0", Offset = "0x16849E0", VA = "0x16849E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x1684A5C", Offset = "0x1684A5C", VA = "0x1684A5C")]
	private void Application_logMessageReceived(string condition, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x1684A98", Offset = "0x1684A98", VA = "0x1684A98")]
	public log()
	{
	}
}
[Token(Token = "0x200001F")]
public class AlphaButtonClickMask : MonoBehaviour, ICanvasRaycastFilter
{
	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Image _image;

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x206E20C", Offset = "0x206E20C", VA = "0x206E20C")]
	public void Start()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x206E3F8", Offset = "0x206E3F8", VA = "0x206E3F8", Slot = "4")]
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x206E6F0", Offset = "0x206E6F0", VA = "0x206E6F0")]
	public AlphaButtonClickMask()
	{
	}
}
[Token(Token = "0x2000020")]
public class EventSystemChecker : MonoBehaviour
{
	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x1202340", Offset = "0x1202340", VA = "0x1202340")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x1202454", Offset = "0x1202454", VA = "0x1202454")]
	public EventSystemChecker()
	{
	}
}
namespace UnityStandardAssets.Utility
{
	[Token(Token = "0x2000021")]
	public class ActivateTrigger : MonoBehaviour
	{
		[Token(Token = "0x2000022")]
		public enum Mode
		{
			[Token(Token = "0x40001DA")]
			Trigger,
			[Token(Token = "0x40001DB")]
			Replace,
			[Token(Token = "0x40001DC")]
			Activate,
			[Token(Token = "0x40001DD")]
			Enable,
			[Token(Token = "0x40001DE")]
			Animate,
			[Token(Token = "0x40001DF")]
			Deactivate
		}

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode action;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object target;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject source;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int triggerCount;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool repeatTrigger;

		[Token(Token = "0x60000E5")]
		[Address(RVA = "0x206DD50", Offset = "0x206DD50", VA = "0x206DD50")]
		private void DoActivateTrigger()
		{
		}

		[Token(Token = "0x60000E6")]
		[Address(RVA = "0x206E1F0", Offset = "0x206E1F0", VA = "0x206E1F0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60000E7")]
		[Address(RVA = "0x206E1F4", Offset = "0x206E1F4", VA = "0x206E1F4")]
		public ActivateTrigger()
		{
		}
	}
	[Token(Token = "0x2000023")]
	public class AutoMobileShaderSwitch : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000024")]
		public class ReplacementDefinition
		{
			[Token(Token = "0x40001E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Shader original;

			[Token(Token = "0x40001E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Shader replacement;

			[Token(Token = "0x60000EA")]
			[Address(RVA = "0x168965C", Offset = "0x168965C", VA = "0x168965C")]
			public ReplacementDefinition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000025")]
		public class ReplacementList
		{
			[Token(Token = "0x40001E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ReplacementDefinition[] items;

			[Token(Token = "0x60000EB")]
			[Address(RVA = "0x1689664", Offset = "0x1689664", VA = "0x1689664")]
			public ReplacementList()
			{
			}
		}

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ReplacementList m_ReplacementList;

		[Token(Token = "0x60000E8")]
		[Address(RVA = "0x206EFB8", Offset = "0x206EFB8", VA = "0x206EFB8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x206F9C8", Offset = "0x206F9C8", VA = "0x206F9C8")]
		public AutoMobileShaderSwitch()
		{
		}
	}
	[Token(Token = "0x2000026")]
	public class AutoMoveAndRotate : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000027")]
		public class Vector3andSpace
		{
			[Token(Token = "0x40001E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 value;

			[Token(Token = "0x40001E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Space space;

			[Token(Token = "0x60000EF")]
			[Address(RVA = "0x16896C0", Offset = "0x16896C0", VA = "0x16896C0")]
			public Vector3andSpace()
			{
			}
		}

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3andSpace moveUnitsPerSecond;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3andSpace rotateDegreesPerSecond;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool ignoreTimescale;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_LastRealTime;

		[Token(Token = "0x60000EC")]
		[Address(RVA = "0x206F9D0", Offset = "0x206F9D0", VA = "0x206F9D0")]
		private void Start()
		{
		}

		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x206F9F8", Offset = "0x206F9F8", VA = "0x206F9F8")]
		private void Update()
		{
		}

		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x206FAC8", Offset = "0x206FAC8", VA = "0x206FAC8")]
		public AutoMoveAndRotate()
		{
		}
	}
	[Token(Token = "0x2000028")]
	public class CameraRefocus
	{
		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Lookatpoint;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform Parent;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OrigCameraPos;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_Refocus;

		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x2077284", Offset = "0x2077284", VA = "0x2077284")]
		public CameraRefocus(Camera camera, Transform parent, Vector3 origCameraPos)
		{
		}

		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x20772E4", Offset = "0x20772E4", VA = "0x20772E4")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x20772EC", Offset = "0x20772EC", VA = "0x20772EC")]
		public void ChangeParent(Transform parent)
		{
		}

		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x20772F4", Offset = "0x20772F4", VA = "0x20772F4")]
		public void GetFocusPoint()
		{
		}

		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x20773F0", Offset = "0x20773F0", VA = "0x20773F0")]
		public void SetFocusPoint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000029")]
	public class CurveControlledBob
	{
		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float HorizontalBobRange;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float VerticalBobRange;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve Bobcurve;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float VerticaltoHorizontalRatio;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_CyclePositionX;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_CyclePositionY;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_BobBaseInterval;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_Time;

		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x207B204", Offset = "0x207B204", VA = "0x207B204")]
		public void Setup(Camera camera, float bobBaseInterval)
		{
		}

		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x207B2A8", Offset = "0x207B2A8", VA = "0x207B2A8")]
		public Vector3 DoHeadBob(float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x207B3A4", Offset = "0x207B3A4", VA = "0x207B3A4")]
		public CurveControlledBob()
		{
		}
	}
	[Token(Token = "0x200002A")]
	public class DragRigidbody : MonoBehaviour
	{
		[Token(Token = "0x200002B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97D3F4", Offset = "0x97D3F4")]
		private sealed class <DragObject>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40001FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragRigidbody <>4__this;

			[Token(Token = "0x4000202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float distance;

			[Token(Token = "0x4000203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <oldDrag>5__2;

			[Token(Token = "0x4000204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <oldAngularDrag>5__3;

			[Token(Token = "0x4000205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Camera <mainCamera>5__4;

			[Token(Token = "0x1700000C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60000FF")]
				[Address(RVA = "0x168A600", Offset = "0x168A600", VA = "0x168A600", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700000D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000101")]
				[Address(RVA = "0x168A648", Offset = "0x168A648", VA = "0x168A648", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60000FC")]
			[Address(RVA = "0x168A390", Offset = "0x168A390", VA = "0x168A390")]
			[DebuggerHidden]
			public <DragObject>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60000FD")]
			[Address(RVA = "0x168A3BC", Offset = "0x168A3BC", VA = "0x168A3BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60000FE")]
			[Address(RVA = "0x168A3C0", Offset = "0x168A3C0", VA = "0x168A3C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000100")]
			[Address(RVA = "0x168A608", Offset = "0x168A608", VA = "0x168A608", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40001F8")]
		private const float k_Spring = 50f;

		[Token(Token = "0x40001F9")]
		private const float k_Damper = 5f;

		[Token(Token = "0x40001FA")]
		private const float k_Drag = 10f;

		[Token(Token = "0x40001FB")]
		private const float k_AngularDrag = 5f;

		[Token(Token = "0x40001FC")]
		private const float k_Distance = 0.2f;

		[Token(Token = "0x40001FD")]
		private const bool k_AttachToCenterOfMass = false;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SpringJoint m_SpringJoint;

		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x120188C", Offset = "0x120188C", VA = "0x120188C")]
		private void Update()
		{
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x1201CCC", Offset = "0x1201CCC", VA = "0x1201CCC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981130", Offset = "0x981130")]
		private IEnumerator DragObject(float distance)
		{
			return null;
		}

		[Token(Token = "0x60000FA")]
		[Address(RVA = "0x1201C14", Offset = "0x1201C14", VA = "0x1201C14")]
		private Camera FindCamera()
		{
			return null;
		}

		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x1201D48", Offset = "0x1201D48", VA = "0x1201D48")]
		public DragRigidbody()
		{
		}
	}
	[Token(Token = "0x200002C")]
	public class DynamicShadowSettings : MonoBehaviour
	{
		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Light sunLight;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minHeight;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minShadowDistance;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minShadowBias;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxHeight;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxShadowDistance;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxShadowBias;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float adaptTime;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_SmoothHeight;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_ChangeSpeed;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_OriginalStrength;

		[Token(Token = "0x6000102")]
		[Address(RVA = "0x1201D50", Offset = "0x1201D50", VA = "0x1201D50")]
		private void Start()
		{
		}

		[Token(Token = "0x6000103")]
		[Address(RVA = "0x1201D84", Offset = "0x1201D84", VA = "0x1201D84")]
		private void Update()
		{
		}

		[Token(Token = "0x6000104")]
		[Address(RVA = "0x1201F40", Offset = "0x1201F40", VA = "0x1201F40")]
		public DynamicShadowSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200002D")]
	public class FOVKick
	{
		[Token(Token = "0x200002E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97D404", Offset = "0x97D404")]
		private sealed class <FOVKickUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000217")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000218")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000219")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x400021A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x1700000E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600010E")]
				[Address(RVA = "0x168A974", Offset = "0x168A974", VA = "0x168A974", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700000F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000110")]
				[Address(RVA = "0x168A9BC", Offset = "0x168A9BC", VA = "0x168A9BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600010B")]
			[Address(RVA = "0x168A814", Offset = "0x168A814", VA = "0x168A814")]
			[DebuggerHidden]
			public <FOVKickUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600010C")]
			[Address(RVA = "0x168A840", Offset = "0x168A840", VA = "0x168A840", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600010D")]
			[Address(RVA = "0x168A844", Offset = "0x168A844", VA = "0x168A844", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600010F")]
			[Address(RVA = "0x168A97C", Offset = "0x168A97C", VA = "0x168A97C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200002F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97D414", Offset = "0x97D414")]
		private sealed class <FOVKickDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400021B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400021C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400021D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x400021E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x17000010")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000114")]
				[Address(RVA = "0x168A7C4", Offset = "0x168A7C4", VA = "0x168A7C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000011")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000116")]
				[Address(RVA = "0x168A80C", Offset = "0x168A80C", VA = "0x168A80C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000111")]
			[Address(RVA = "0x168A650", Offset = "0x168A650", VA = "0x168A650")]
			[DebuggerHidden]
			public <FOVKickDown>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000112")]
			[Address(RVA = "0x168A67C", Offset = "0x168A67C", VA = "0x168A67C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000113")]
			[Address(RVA = "0x168A680", Offset = "0x168A680", VA = "0x168A680", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000115")]
			[Address(RVA = "0x168A7CC", Offset = "0x168A7CC", VA = "0x168A7CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float originalFov;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FOVIncrease;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float TimeToIncrease;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TimeToDecrease;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve IncreaseCurve;

		[Token(Token = "0x6000105")]
		[Address(RVA = "0x12026A4", Offset = "0x12026A4", VA = "0x12026A4")]
		public void Setup(Camera camera)
		{
		}

		[Token(Token = "0x6000106")]
		[Address(RVA = "0x12026E4", Offset = "0x12026E4", VA = "0x12026E4")]
		private void CheckStatus(Camera camera)
		{
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0x12027D0", Offset = "0x12027D0", VA = "0x12027D0")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x6000108")]
		[Address(RVA = "0x12027D8", Offset = "0x12027D8", VA = "0x12027D8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9811E0", Offset = "0x9811E0")]
		public IEnumerator FOVKickUp()
		{
			return null;
		}

		[Token(Token = "0x6000109")]
		[Address(RVA = "0x1202844", Offset = "0x1202844", VA = "0x1202844")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981240", Offset = "0x981240")]
		public IEnumerator FOVKickDown()
		{
			return null;
		}

		[Token(Token = "0x600010A")]
		[Address(RVA = "0x12028B0", Offset = "0x12028B0", VA = "0x12028B0")]
		public FOVKick()
		{
		}
	}
	[Token(Token = "0x2000030")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D424", Offset = "0x97D424")]
	public class FPSCounter : MonoBehaviour
	{
		[Token(Token = "0x400021F")]
		private const float fpsMeasurePeriod = 0.5f;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_FpsAccumulator;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_FpsNextPeriod;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_CurrentFps;

		[Token(Token = "0x4000223")]
		private const string display = "{0} FPS";

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text m_Text;

		[Token(Token = "0x6000117")]
		[Address(RVA = "0x12028CC", Offset = "0x12028CC", VA = "0x12028CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000118")]
		[Address(RVA = "0x1202934", Offset = "0x1202934", VA = "0x1202934")]
		private void Update()
		{
		}

		[Token(Token = "0x6000119")]
		[Address(RVA = "0x1202A38", Offset = "0x1202A38", VA = "0x1202A38")]
		public FPSCounter()
		{
		}
	}
	[Token(Token = "0x2000031")]
	public class FollowTarget : MonoBehaviour
	{
		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x600011A")]
		[Address(RVA = "0x1202C34", Offset = "0x1202C34", VA = "0x1202C34")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600011B")]
		[Address(RVA = "0x1202C94", Offset = "0x1202C94", VA = "0x1202C94")]
		public FollowTarget()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000032")]
	public class LerpControlledBob
	{
		[Token(Token = "0x2000033")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97D484", Offset = "0x97D484")]
		private sealed class <DoBobCycle>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400022A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400022B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400022C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LerpControlledBob <>4__this;

			[Token(Token = "0x400022D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x17000012")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000122")]
				[Address(RVA = "0x24A8C54", Offset = "0x24A8C54", VA = "0x24A8C54", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000013")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000124")]
				[Address(RVA = "0x24A8C9C", Offset = "0x24A8C9C", VA = "0x24A8C9C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600011F")]
			[Address(RVA = "0x24A8A98", Offset = "0x24A8A98", VA = "0x24A8A98")]
			[DebuggerHidden]
			public <DoBobCycle>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000120")]
			[Address(RVA = "0x24A8AC4", Offset = "0x24A8AC4", VA = "0x24A8AC4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000121")]
			[Address(RVA = "0x24A8AC8", Offset = "0x24A8AC8", VA = "0x24A8AC8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000123")]
			[Address(RVA = "0x24A8C5C", Offset = "0x24A8C5C", VA = "0x24A8C5C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float BobDuration;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float BobAmount;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Offset;

		[Token(Token = "0x600011C")]
		[Address(RVA = "0xE3EBD8", Offset = "0xE3EBD8", VA = "0xE3EBD8")]
		public float Offset()
		{
			return default(float);
		}

		[Token(Token = "0x600011D")]
		[Address(RVA = "0xE3EBE0", Offset = "0xE3EBE0", VA = "0xE3EBE0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981340", Offset = "0x981340")]
		public IEnumerator DoBobCycle()
		{
			return null;
		}

		[Token(Token = "0x600011E")]
		[Address(RVA = "0xE3EC4C", Offset = "0xE3EC4C", VA = "0xE3EC4C")]
		public LerpControlledBob()
		{
		}
	}
	[Token(Token = "0x2000034")]
	public class ObjectResetter : MonoBehaviour
	{
		[Token(Token = "0x2000035")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97D494", Offset = "0x97D494")]
		private sealed class <ResetCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000232")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000233")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000234")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4000235")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ObjectResetter <>4__this;

			[Token(Token = "0x17000014")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600012C")]
				[Address(RVA = "0x24A8F10", Offset = "0x24A8F10", VA = "0x24A8F10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000015")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600012E")]
				[Address(RVA = "0x24A8F58", Offset = "0x24A8F58", VA = "0x24A8F58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000129")]
			[Address(RVA = "0x24A8CA4", Offset = "0x24A8CA4", VA = "0x24A8CA4")]
			[DebuggerHidden]
			public <ResetCoroutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600012A")]
			[Address(RVA = "0x24A8CD0", Offset = "0x24A8CD0", VA = "0x24A8CD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600012B")]
			[Address(RVA = "0x24A8CD4", Offset = "0x24A8CD4", VA = "0x24A8CD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600012D")]
			[Address(RVA = "0x24A8F18", Offset = "0x24A8F18", VA = "0x24A8F18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 originalPosition;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion originalRotation;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Transform> originalStructure;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x6000125")]
		[Address(RVA = "0xE5EE2C", Offset = "0xE5EE2C", VA = "0xE5EE2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000126")]
		[Address(RVA = "0xE5EF38", Offset = "0xE5EF38", VA = "0xE5EF38")]
		public void DelayedReset(float delay)
		{
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0xE5EF64", Offset = "0xE5EF64", VA = "0xE5EF64")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9813F0", Offset = "0x9813F0")]
		public IEnumerator ResetCoroutine(float delay)
		{
			return null;
		}

		[Token(Token = "0x6000128")]
		[Address(RVA = "0xE5EFE0", Offset = "0xE5EFE0", VA = "0xE5EFE0")]
		public ObjectResetter()
		{
		}
	}
	[Token(Token = "0x2000036")]
	public class PlatformSpecificContent : MonoBehaviour
	{
		[Token(Token = "0x2000037")]
		private enum BuildTargetGroup
		{
			[Token(Token = "0x400023B")]
			Standalone,
			[Token(Token = "0x400023C")]
			Mobile
		}

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BuildTargetGroup m_BuildTargetGroup;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject[] m_Content;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MonoBehaviour[] m_MonoBehaviours;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool m_ChildrenOfThisObject;

		[Token(Token = "0x600012F")]
		[Address(RVA = "0x112D9D4", Offset = "0x112D9D4", VA = "0x112D9D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000130")]
		[Address(RVA = "0x112D9D8", Offset = "0x112D9D8", VA = "0x112D9D8")]
		private void CheckEnableContent()
		{
		}

		[Token(Token = "0x6000131")]
		[Address(RVA = "0x112D9F4", Offset = "0x112D9F4", VA = "0x112D9F4")]
		private void EnableContent(bool enabled)
		{
		}

		[Token(Token = "0x6000132")]
		[Address(RVA = "0x112DDA4", Offset = "0x112DDA4", VA = "0x112DDA4")]
		public PlatformSpecificContent()
		{
		}
	}
	[Token(Token = "0x2000038")]
	public class SimpleMouseRotator : MonoBehaviour
	{
		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 rotationRange;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotationSpeed;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float dampingTime;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool autoZeroVerticalOnMobile;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool autoZeroHorizontalOnMobile;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool relative;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_TargetAngles;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_FollowAngles;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_FollowVelocity;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion m_OriginalRotation;

		[Token(Token = "0x6000133")]
		[Address(RVA = "0x1131E30", Offset = "0x1131E30", VA = "0x1131E30")]
		private void Start()
		{
		}

		[Token(Token = "0x6000134")]
		[Address(RVA = "0x1131E6C", Offset = "0x1131E6C", VA = "0x1131E6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000135")]
		[Address(RVA = "0x1132144", Offset = "0x1132144", VA = "0x1132144")]
		public SimpleMouseRotator()
		{
		}
	}
	[Token(Token = "0x2000039")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x6000136")]
		[Address(RVA = "0x1132244", Offset = "0x1132244", VA = "0x1132244")]
		private void Start()
		{
		}

		[Token(Token = "0x6000137")]
		[Address(RVA = "0x1132248", Offset = "0x1132248", VA = "0x1132248")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000138")]
		[Address(RVA = "0x11324F0", Offset = "0x11324F0", VA = "0x11324F0")]
		public SmoothFollow()
		{
		}
	}
	[Token(Token = "0x200003A")]
	public class TimedObjectActivator : MonoBehaviour
	{
		[Token(Token = "0x200003B")]
		public enum Action
		{
			[Token(Token = "0x400024E")]
			Activate,
			[Token(Token = "0x400024F")]
			Deactivate,
			[Token(Token = "0x4000250")]
			Destroy,
			[Token(Token = "0x4000251")]
			ReloadLevel,
			[Token(Token = "0x4000252")]
			Call
		}

		[Serializable]
		[Token(Token = "0x200003C")]
		public class Entry
		{
			[Token(Token = "0x4000253")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject target;

			[Token(Token = "0x4000254")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action action;

			[Token(Token = "0x4000255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float delay;

			[Token(Token = "0x600013E")]
			[Address(RVA = "0x24A9378", Offset = "0x24A9378", VA = "0x24A9378")]
			public Entry()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200003D")]
		public class Entries
		{
			[Token(Token = "0x4000256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Entry[] entries;

			[Token(Token = "0x600013F")]
			[Address(RVA = "0x24A9370", Offset = "0x24A9370", VA = "0x24A9370")]
			public Entries()
			{
			}
		}

		[Token(Token = "0x200003E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97D4A4", Offset = "0x97D4A4")]
		private sealed class <Activate>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000258")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x17000016")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000143")]
				[Address(RVA = "0x24A905C", Offset = "0x24A905C", VA = "0x24A905C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000017")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000145")]
				[Address(RVA = "0x24A90A4", Offset = "0x24A90A4", VA = "0x24A90A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000140")]
			[Address(RVA = "0x24A8F68", Offset = "0x24A8F68", VA = "0x24A8F68")]
			[DebuggerHidden]
			public <Activate>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000141")]
			[Address(RVA = "0x24A8F94", Offset = "0x24A8F94", VA = "0x24A8F94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000142")]
			[Address(RVA = "0x24A8F98", Offset = "0x24A8F98", VA = "0x24A8F98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000144")]
			[Address(RVA = "0x24A9064", Offset = "0x24A9064", VA = "0x24A9064", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200003F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97D4B4", Offset = "0x97D4B4")]
		private sealed class <Deactivate>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400025A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400025B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400025C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x17000018")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000149")]
				[Address(RVA = "0x24A91A0", Offset = "0x24A91A0", VA = "0x24A91A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000019")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600014B")]
				[Address(RVA = "0x24A91E8", Offset = "0x24A91E8", VA = "0x24A91E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000146")]
			[Address(RVA = "0x24A90AC", Offset = "0x24A90AC", VA = "0x24A90AC")]
			[DebuggerHidden]
			public <Deactivate>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000147")]
			[Address(RVA = "0x24A90D8", Offset = "0x24A90D8", VA = "0x24A90D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000148")]
			[Address(RVA = "0x24A90DC", Offset = "0x24A90DC", VA = "0x24A90DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600014A")]
			[Address(RVA = "0x24A91A8", Offset = "0x24A91A8", VA = "0x24A91A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000040")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97D4C4", Offset = "0x97D4C4")]
		private sealed class <ReloadLevel>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400025D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400025E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400025F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x1700001A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600014F")]
				[Address(RVA = "0x24A9320", Offset = "0x24A9320", VA = "0x24A9320", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700001B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000151")]
				[Address(RVA = "0x24A9368", Offset = "0x24A9368", VA = "0x24A9368", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600014C")]
			[Address(RVA = "0x24A91F0", Offset = "0x24A91F0", VA = "0x24A91F0")]
			[DebuggerHidden]
			public <ReloadLevel>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600014D")]
			[Address(RVA = "0x24A921C", Offset = "0x24A921C", VA = "0x24A921C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600014E")]
			[Address(RVA = "0x24A9220", Offset = "0x24A9220", VA = "0x24A9220", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000150")]
			[Address(RVA = "0x24A9328", Offset = "0x24A9328", VA = "0x24A9328", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Entries entries;

		[Token(Token = "0x6000139")]
		[Address(RVA = "0x167BDE4", Offset = "0x167BDE4", VA = "0x167BDE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600013A")]
		[Address(RVA = "0x167BF0C", Offset = "0x167BF0C", VA = "0x167BF0C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9814A0", Offset = "0x9814A0")]
		private IEnumerator Activate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x600013B")]
		[Address(RVA = "0x167BF78", Offset = "0x167BF78", VA = "0x167BF78")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981500", Offset = "0x981500")]
		private IEnumerator Deactivate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x600013C")]
		[Address(RVA = "0x167BFE4", Offset = "0x167BFE4", VA = "0x167BFE4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981560", Offset = "0x981560")]
		private IEnumerator ReloadLevel(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x600013D")]
		[Address(RVA = "0x167C050", Offset = "0x167C050", VA = "0x167C050")]
		public TimedObjectActivator()
		{
		}
	}
	[Token(Token = "0x2000041")]
	public class TimedObjectDestructor : MonoBehaviour
	{
		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_TimeOut;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool m_DetachChildren;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool overrideTimeoutOnSpawn;

		[Token(Token = "0x6000152")]
		[Address(RVA = "0x167C0B4", Offset = "0x167C0B4", VA = "0x167C0B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000153")]
		[Address(RVA = "0x167C11C", Offset = "0x167C11C", VA = "0x167C11C")]
		public void setTimeout(float timeout)
		{
		}

		[Token(Token = "0x6000154")]
		[Address(RVA = "0x167C17C", Offset = "0x167C17C", VA = "0x167C17C")]
		private void DestroyNow()
		{
		}

		[Token(Token = "0x6000155")]
		[Address(RVA = "0x167C218", Offset = "0x167C218", VA = "0x167C218")]
		public TimedObjectDestructor()
		{
		}
	}
	[Token(Token = "0x2000042")]
	public class WaypointCircuit : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000043")]
		public class WaypointList
		{
			[Token(Token = "0x4000273")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public WaypointCircuit circuit;

			[Token(Token = "0x4000274")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform[] items;

			[Token(Token = "0x6000162")]
			[Address(RVA = "0x24A9390", Offset = "0x24A9390", VA = "0x24A9390")]
			public WaypointList()
			{
			}
		}

		[Token(Token = "0x2000044")]
		public struct RoutePoint
		{
			[Token(Token = "0x4000275")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4000276")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 direction;

			[Token(Token = "0x6000163")]
			[Address(RVA = "0x24A9380", Offset = "0x24A9380", VA = "0x24A9380")]
			public RoutePoint(Vector3 position, Vector3 direction)
			{
			}
		}

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaypointList waypointList;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool smoothRoute;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int numPoints;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] points;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] distances;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float editorVisualisationSubsteps;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980890", Offset = "0x980890")]
		private float <Length>k__BackingField;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int p0n;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int p1n;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int p2n;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int p3n;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float i;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 P0;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 P1;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 P2;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 P3;

		[Token(Token = "0x1700001C")]
		public float Length
		{
			[Token(Token = "0x6000156")]
			[Address(RVA = "0x1682348", Offset = "0x1682348", VA = "0x1682348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9816B0", Offset = "0x9816B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000157")]
			[Address(RVA = "0x1682350", Offset = "0x1682350", VA = "0x1682350")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9816C0", Offset = "0x9816C0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700001D")]
		public Transform[] Waypoints
		{
			[Token(Token = "0x6000158")]
			[Address(RVA = "0x1682358", Offset = "0x1682358", VA = "0x1682358")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0x1682374", Offset = "0x1682374", VA = "0x1682374")]
		private void Awake()
		{
		}

		[Token(Token = "0x600015A")]
		[Address(RVA = "0x168267C", Offset = "0x168267C", VA = "0x168267C")]
		public RoutePoint GetRoutePoint(float dist)
		{
			return default(RoutePoint);
		}

		[Token(Token = "0x600015B")]
		[Address(RVA = "0x1682728", Offset = "0x1682728", VA = "0x1682728")]
		public Vector3 GetRoutePosition(float dist)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600015C")]
		[Address(RVA = "0x16829B4", Offset = "0x16829B4", VA = "0x16829B4")]
		private Vector3 CatmullRom(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float i)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600015D")]
		[Address(RVA = "0x16823D0", Offset = "0x16823D0", VA = "0x16823D0")]
		private void CachePositionsAndDistances()
		{
		}

		[Token(Token = "0x600015E")]
		[Address(RVA = "0x1682AC0", Offset = "0x1682AC0", VA = "0x1682AC0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600015F")]
		[Address(RVA = "0x1682D40", Offset = "0x1682D40", VA = "0x1682D40")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000160")]
		[Address(RVA = "0x1682AC8", Offset = "0x1682AC8", VA = "0x1682AC8")]
		private void DrawGizmos(bool selected)
		{
		}

		[Token(Token = "0x6000161")]
		[Address(RVA = "0x1682D48", Offset = "0x1682D48", VA = "0x1682D48")]
		public WaypointCircuit()
		{
		}
	}
	[Token(Token = "0x2000045")]
	public class WaypointProgressTracker : MonoBehaviour
	{
		[Token(Token = "0x2000046")]
		public enum ProgressStyle
		{
			[Token(Token = "0x4000287")]
			SmoothAlongRoute,
			[Token(Token = "0x4000288")]
			PointToPoint
		}

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private WaypointCircuit circuit;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float lookAheadForTargetOffset;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float lookAheadForTargetFactor;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float lookAheadForSpeedOffset;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float lookAheadForSpeedFactor;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ProgressStyle progressStyle;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float pointToPointThreshold;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980910", Offset = "0x980910")]
		private WaypointCircuit.RoutePoint <targetPoint>k__BackingField;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980920", Offset = "0x980920")]
		private WaypointCircuit.RoutePoint <speedPoint>k__BackingField;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980930", Offset = "0x980930")]
		private WaypointCircuit.RoutePoint <progressPoint>k__BackingField;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform target;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float progressDistance;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int progressNum;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float speed;

		[Token(Token = "0x1700001E")]
		public WaypointCircuit.RoutePoint targetPoint
		{
			[Token(Token = "0x6000164")]
			[Address(RVA = "0x1682DBC", Offset = "0x1682DBC", VA = "0x1682DBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9816D0", Offset = "0x9816D0")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x6000165")]
			[Address(RVA = "0x1682DD0", Offset = "0x1682DD0", VA = "0x1682DD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9816E0", Offset = "0x9816E0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700001F")]
		public WaypointCircuit.RoutePoint speedPoint
		{
			[Token(Token = "0x6000166")]
			[Address(RVA = "0x1682DE4", Offset = "0x1682DE4", VA = "0x1682DE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9816F0", Offset = "0x9816F0")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x6000167")]
			[Address(RVA = "0x1682DF8", Offset = "0x1682DF8", VA = "0x1682DF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981700", Offset = "0x981700")]
			private set
			{
			}
		}

		[Token(Token = "0x17000020")]
		public WaypointCircuit.RoutePoint progressPoint
		{
			[Token(Token = "0x6000168")]
			[Address(RVA = "0x1682E0C", Offset = "0x1682E0C", VA = "0x1682E0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981710", Offset = "0x981710")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x6000169")]
			[Address(RVA = "0x1682E20", Offset = "0x1682E20", VA = "0x1682E20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981720", Offset = "0x981720")]
			private set
			{
			}
		}

		[Token(Token = "0x600016A")]
		[Address(RVA = "0x1682E34", Offset = "0x1682E34", VA = "0x1682E34")]
		private void Start()
		{
		}

		[Token(Token = "0x600016B")]
		[Address(RVA = "0x1682F2C", Offset = "0x1682F2C", VA = "0x1682F2C")]
		public void Reset()
		{
		}

		[Token(Token = "0x600016C")]
		[Address(RVA = "0x1683004", Offset = "0x1683004", VA = "0x1683004")]
		private void Update()
		{
		}

		[Token(Token = "0x600016D")]
		[Address(RVA = "0x1683418", Offset = "0x1683418", VA = "0x1683418")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600016E")]
		[Address(RVA = "0x1683568", Offset = "0x1683568", VA = "0x1683568")]
		public WaypointProgressTracker()
		{
		}
	}
}
namespace UnityStandardAssets.Water
{
	[Token(Token = "0x2000047")]
	[ExecuteInEditMode]
	public class WaterBasic : MonoBehaviour
	{
		[Token(Token = "0x600016F")]
		[Address(RVA = "0x1681E40", Offset = "0x1681E40", VA = "0x1681E40")]
		private void Update()
		{
		}

		[Token(Token = "0x6000170")]
		[Address(RVA = "0x168206C", Offset = "0x168206C", VA = "0x168206C")]
		public WaterBasic()
		{
		}
	}
	[Token(Token = "0x2000048")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D4E4", Offset = "0x97D4E4")]
	[ExecuteInEditMode]
	public class Displace : MonoBehaviour
	{
		[Token(Token = "0x6000171")]
		[Address(RVA = "0x1201780", Offset = "0x1201780", VA = "0x1201780")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000172")]
		[Address(RVA = "0x12017A4", Offset = "0x12017A4", VA = "0x12017A4")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000173")]
		[Address(RVA = "0x120180C", Offset = "0x120180C", VA = "0x120180C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0x1201874", Offset = "0x1201874", VA = "0x1201874")]
		public Displace()
		{
		}
	}
	[Token(Token = "0x2000049")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D554", Offset = "0x97D554")]
	public class GerstnerDisplace : Displace
	{
		[Token(Token = "0x6000175")]
		[Address(RVA = "0x1203154", Offset = "0x1203154", VA = "0x1203154")]
		public GerstnerDisplace()
		{
		}
	}
	[Token(Token = "0x200004A")]
	public class MeshContainer
	{
		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] vertices;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] normals;

		[Token(Token = "0x6000176")]
		[Address(RVA = "0xE4348C", Offset = "0xE4348C", VA = "0xE4348C")]
		public MeshContainer(Mesh m)
		{
		}

		[Token(Token = "0x6000177")]
		[Address(RVA = "0xE434E0", Offset = "0xE434E0", VA = "0xE434E0")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x200004B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D5C4", Offset = "0x97D5C4")]
	public class PlanarReflection : MonoBehaviour
	{
		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask reflectionMask;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool reflectSkybox;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color clearColor;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string reflectionSampler;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float clipPlaneOffset;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 m_Oldpos;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_ReflectionCamera;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_SharedMaterial;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Camera, bool> m_HelperCameras;

		[Token(Token = "0x6000178")]
		[Address(RVA = "0xE5F0EC", Offset = "0xE5F0EC", VA = "0xE5F0EC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000179")]
		[Address(RVA = "0xE5F1F0", Offset = "0xE5F1F0", VA = "0xE5F1F0")]
		private Camera CreateReflectionCameraFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x600017A")]
		[Address(RVA = "0xE5F53C", Offset = "0xE5F53C", VA = "0xE5F53C")]
		private void SetStandardCameraParameter(Camera cam, LayerMask mask)
		{
		}

		[Token(Token = "0x600017B")]
		[Address(RVA = "0xE5F5EC", Offset = "0xE5F5EC", VA = "0xE5F5EC")]
		private RenderTexture CreateTextureFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x600017C")]
		[Address(RVA = "0xE5F6C8", Offset = "0xE5F6C8", VA = "0xE5F6C8")]
		public void RenderHelpCameras(Camera currentCam)
		{
		}

		[Token(Token = "0x600017D")]
		[Address(RVA = "0xE5FF7C", Offset = "0xE5FF7C", VA = "0xE5FF7C")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x600017E")]
		[Address(RVA = "0xE5FFD8", Offset = "0xE5FFD8", VA = "0xE5FFD8")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x600017F")]
		[Address(RVA = "0xE600CC", Offset = "0xE600CC", VA = "0xE600CC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000180")]
		[Address(RVA = "0xE60134", Offset = "0xE60134", VA = "0xE60134")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000181")]
		[Address(RVA = "0xE5F874", Offset = "0xE5F874", VA = "0xE5F874")]
		private void RenderReflectionFor(Camera cam, Camera reflectCamera)
		{
		}

		[Token(Token = "0x6000182")]
		[Address(RVA = "0xE6019C", Offset = "0xE6019C", VA = "0xE6019C")]
		private void SaneCameraSettings(Camera helperCam)
		{
		}

		[Token(Token = "0x6000183")]
		[Address(RVA = "0xE605E4", Offset = "0xE605E4", VA = "0xE605E4")]
		private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000184")]
		[Address(RVA = "0xE60200", Offset = "0xE60200", VA = "0xE60200")]
		private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000185")]
		[Address(RVA = "0xE607A8", Offset = "0xE607A8", VA = "0xE607A8")]
		private static float Sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x6000186")]
		[Address(RVA = "0xE604B8", Offset = "0xE604B8", VA = "0xE604B8")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000187")]
		[Address(RVA = "0xE607C8", Offset = "0xE607C8", VA = "0xE607C8")]
		public PlanarReflection()
		{
		}
	}
	[Token(Token = "0x200004C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D634", Offset = "0x97D634")]
	public class SpecularLighting : MonoBehaviour
	{
		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform specularLight;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WaterBase m_WaterBase;

		[Token(Token = "0x6000188")]
		[Address(RVA = "0x1132504", Offset = "0x1132504", VA = "0x1132504")]
		public void Start()
		{
		}

		[Token(Token = "0x6000189")]
		[Address(RVA = "0x1132604", Offset = "0x1132604", VA = "0x1132604")]
		public void Update()
		{
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0x1132808", Offset = "0x1132808", VA = "0x1132808")]
		public SpecularLighting()
		{
		}
	}
	[Token(Token = "0x200004D")]
	[ExecuteInEditMode]
	public class Water : MonoBehaviour
	{
		[Token(Token = "0x200004E")]
		public enum WaterMode
		{
			[Token(Token = "0x40002A6")]
			Simple,
			[Token(Token = "0x40002A7")]
			Reflective,
			[Token(Token = "0x40002A8")]
			Refractive
		}

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaterMode waterMode;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disablePixelLights;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int textureSize;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float clipPlaneOffset;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask reflectLayers;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask refractLayers;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, Camera> m_RefractionCameras;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_RefractionTexture;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterMode m_HardwareWaterSupport;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_OldRefractionTextureSize;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_InsideWater;

		[Token(Token = "0x600018B")]
		[Address(RVA = "0x167F9B0", Offset = "0x167F9B0", VA = "0x167F9B0")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x600018C")]
		[Address(RVA = "0x1681438", Offset = "0x1681438", VA = "0x1681438")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600018D")]
		[Address(RVA = "0x16817B0", Offset = "0x16817B0", VA = "0x16817B0")]
		private void Update()
		{
		}

		[Token(Token = "0x600018E")]
		[Address(RVA = "0x1680E04", Offset = "0x1680E04", VA = "0x1680E04")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x600018F")]
		[Address(RVA = "0x16804E8", Offset = "0x16804E8", VA = "0x16804E8")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
		{
		}

		[Token(Token = "0x6000190")]
		[Address(RVA = "0x16804D4", Offset = "0x16804D4", VA = "0x16804D4")]
		private WaterMode GetWaterMode()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6000191")]
		[Address(RVA = "0x1680360", Offset = "0x1680360", VA = "0x1680360")]
		private WaterMode FindHardwareWaterSupport()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6000192")]
		[Address(RVA = "0x168130C", Offset = "0x168130C", VA = "0x168130C")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000193")]
		[Address(RVA = "0x1681068", Offset = "0x1681068", VA = "0x1681068")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x6000194")]
		[Address(RVA = "0x1681A80", Offset = "0x1681A80", VA = "0x1681A80")]
		public Water()
		{
		}
	}
	[Token(Token = "0x200004F")]
	public enum WaterQuality
	{
		[Token(Token = "0x40002AA")]
		High = 2,
		[Token(Token = "0x40002AB")]
		Medium = 1,
		[Token(Token = "0x40002AC")]
		Low = 0
	}
	[Token(Token = "0x2000050")]
	[ExecuteInEditMode]
	public class WaterBase : MonoBehaviour
	{
		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material sharedMaterial;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterQuality waterQuality;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool edgeBlend;

		[Token(Token = "0x6000195")]
		[Address(RVA = "0x1681B64", Offset = "0x1681B64", VA = "0x1681B64")]
		public void UpdateShader()
		{
		}

		[Token(Token = "0x6000196")]
		[Address(RVA = "0x1681CF8", Offset = "0x1681CF8", VA = "0x1681CF8")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6000197")]
		[Address(RVA = "0x1681DA8", Offset = "0x1681DA8", VA = "0x1681DA8")]
		public void Update()
		{
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0x1681E28", Offset = "0x1681E28", VA = "0x1681E28")]
		public WaterBase()
		{
		}
	}
	[Token(Token = "0x2000051")]
	[ExecuteInEditMode]
	public class WaterTile : MonoBehaviour
	{
		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlanarReflection reflection;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterBase waterBase;

		[Token(Token = "0x6000199")]
		[Address(RVA = "0x1682074", Offset = "0x1682074", VA = "0x1682074")]
		public void Start()
		{
		}

		[Token(Token = "0x600019A")]
		[Address(RVA = "0x1682078", Offset = "0x1682078", VA = "0x1682078")]
		private void AcquireComponents()
		{
		}

		[Token(Token = "0x600019B")]
		[Address(RVA = "0x1682230", Offset = "0x1682230", VA = "0x1682230")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x600019C")]
		[Address(RVA = "0x1682340", Offset = "0x1682340", VA = "0x1682340")]
		public WaterTile()
		{
		}
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x2000052")]
	public enum AAMode
	{
		[Token(Token = "0x40002B3")]
		FXAA2,
		[Token(Token = "0x40002B4")]
		FXAA3Console,
		[Token(Token = "0x40002B5")]
		FXAA1PresetA,
		[Token(Token = "0x40002B6")]
		FXAA1PresetB,
		[Token(Token = "0x40002B7")]
		NFAA,
		[Token(Token = "0x40002B8")]
		SSAA,
		[Token(Token = "0x40002B9")]
		DLAA
	}
	[Token(Token = "0x2000053")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97D6D4", Offset = "0x97D6D4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D6D4", Offset = "0x97D6D4")]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AAMode mode;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool showGeneratedNormals;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float offsetScale;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float blurRadius;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float edgeThresholdMin;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float edgeThreshold;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float edgeSharpness;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool dlaaSharp;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader ssaaShader;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material ssaa;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dlaaShader;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dlaa;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader nfaaShader;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material nfaa;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader shaderFXAAII;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material materialFXAAII;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Material materialFXAAIII;

		[Token(Token = "0x600019D")]
		[Address(RVA = "0x206E6F8", Offset = "0x206E6F8", VA = "0x206E6F8")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0x206E75C", Offset = "0x206E75C", VA = "0x206E75C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600019F")]
		[Address(RVA = "0x206E848", Offset = "0x206E848", VA = "0x206E848")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x206EDD4", Offset = "0x206EDD4", VA = "0x206EDD4")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x2000054")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D768", Offset = "0x97D768")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97D768", Offset = "0x97D768")]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x2000055")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x40002EF")]
			Ghosting,
			[Token(Token = "0x40002F0")]
			Anamorphic,
			[Token(Token = "0x40002F1")]
			Combined
		}

		[Token(Token = "0x2000056")]
		public enum TweakMode
		{
			[Token(Token = "0x40002F3")]
			Basic,
			[Token(Token = "0x40002F4")]
			Complex
		}

		[Token(Token = "0x2000057")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x40002F6")]
			Auto,
			[Token(Token = "0x40002F7")]
			On,
			[Token(Token = "0x40002F8")]
			Off
		}

		[Token(Token = "0x2000058")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x40002FA")]
			Screen,
			[Token(Token = "0x40002FB")]
			Add
		}

		[Token(Token = "0x2000059")]
		public enum BloomQuality
		{
			[Token(Token = "0x40002FD")]
			Cheap,
			[Token(Token = "0x40002FE")]
			High
		}

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TweakMode tweakMode;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HDRBloomMode hdr;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool doHdr;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float sepBlurSpread;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BloomQuality quality;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float bloomIntensity;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bloomThreshold;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color bloomThresholdColor;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int bloomBlurIterations;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float flareRotation;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float hollyStretchWidth;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float lensflareIntensity;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lensflareThreshold;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lensFlareSaturation;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color flareColorA;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color flareColorB;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color flareColorC;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color flareColorD;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader lensFlareShader;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader screenBlendShader;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material screenBlend;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x2070064", Offset = "0x2070064", VA = "0x2070064", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x2070104", Offset = "0x2070104", VA = "0x2070104")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001A3")]
		[Address(RVA = "0x20715B4", Offset = "0x20715B4", VA = "0x20715B4")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001A4")]
		[Address(RVA = "0x2071334", Offset = "0x2071334", VA = "0x2071334")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x2071020", Offset = "0x2071020", VA = "0x2071020")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x2070F34", Offset = "0x2070F34", VA = "0x2070F34")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x2071114", Offset = "0x2071114", VA = "0x2071114")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x2071684", Offset = "0x2071684", VA = "0x2071684")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x200005A")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x4000300")]
		Ghosting,
		[Token(Token = "0x4000301")]
		Anamorphic,
		[Token(Token = "0x4000302")]
		Combined
	}
	[Token(Token = "0x200005B")]
	public enum TweakMode34
	{
		[Token(Token = "0x4000304")]
		Basic,
		[Token(Token = "0x4000305")]
		Complex
	}
	[Token(Token = "0x200005C")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x4000307")]
		Auto,
		[Token(Token = "0x4000308")]
		On,
		[Token(Token = "0x4000309")]
		Off
	}
	[Token(Token = "0x200005D")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x400030B")]
		Screen,
		[Token(Token = "0x400030C")]
		Add
	}
	[Token(Token = "0x200005E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D7FC", Offset = "0x97D7FC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97D7FC", Offset = "0x97D7FC")]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool doHdr;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float sepBlurSpread;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float bloomIntensity;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bloomThreshold;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int bloomBlurIterations;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool lensflares;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float hollyStretchWidth;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float lensflareIntensity;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensflareThreshold;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color flareColorA;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color flareColorB;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Color flareColorC;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Color flareColorD;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader lensFlareShader;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader vignetteShader;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material vignetteMaterial;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader screenBlendShader;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material screenBlend;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x20717C4", Offset = "0x20717C4", VA = "0x20717C4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x20718A0", Offset = "0x20718A0", VA = "0x20718A0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001AB")]
		[Address(RVA = "0x207290C", Offset = "0x207290C", VA = "0x207290C")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x207269C", Offset = "0x207269C", VA = "0x207269C")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001AD")]
		[Address(RVA = "0x20723EC", Offset = "0x20723EC", VA = "0x20723EC")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x2072528", Offset = "0x2072528", VA = "0x2072528")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0x20729C8", Offset = "0x20729C8", VA = "0x20729C8")]
		public BloomAndFlares()
		{
		}
	}
	[Token(Token = "0x200005F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D890", Offset = "0x97D890")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97D890", Offset = "0x97D890")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000060")]
		public enum Resolution
		{
			[Token(Token = "0x4000338")]
			Low,
			[Token(Token = "0x4000339")]
			High
		}

		[Token(Token = "0x2000061")]
		public enum BlurType
		{
			[Token(Token = "0x400033B")]
			Standard,
			[Token(Token = "0x400033C")]
			Sgx
		}

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980940", Offset = "0x980940")]
		public float threshold;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980958", Offset = "0x980958")]
		public float intensity;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980970", Offset = "0x980970")]
		public float blurSize;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Resolution resolution;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980988", Offset = "0x980988")]
		public int blurIterations;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurType blurType;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader fastBloomShader;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material fastBloomMaterial;

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0x2072AF8", Offset = "0x2072AF8", VA = "0x2072AF8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001B1")]
		[Address(RVA = "0x2072B5C", Offset = "0x2072B5C", VA = "0x2072B5C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0x2072C08", Offset = "0x2072C08", VA = "0x2072C08")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001B3")]
		[Address(RVA = "0x2072FE8", Offset = "0x2072FE8", VA = "0x2072FE8")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x2000062")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97D924", Offset = "0x97D924")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9809A0", Offset = "0x9809A0")]
		public int iterations;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9809B8", Offset = "0x9809B8")]
		public float blurSpread;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x17000021")]
		protected Material material
		{
			[Token(Token = "0x60001B4")]
			[Address(RVA = "0x207300C", Offset = "0x207300C", VA = "0x207300C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B5")]
		[Address(RVA = "0x2073158", Offset = "0x2073158", VA = "0x2073158")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x207325C", Offset = "0x207325C", VA = "0x207325C")]
		protected void Start()
		{
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x2073318", Offset = "0x2073318", VA = "0x2073318")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x207343C", Offset = "0x207343C", VA = "0x207343C")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x207354C", Offset = "0x207354C", VA = "0x207354C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x20736B4", Offset = "0x20736B4", VA = "0x20736B4")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x2000063")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97D970", Offset = "0x97D970")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97D970", Offset = "0x97D970")]
	[ExecuteInEditMode]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000064")]
		public enum BlurType
		{
			[Token(Token = "0x4000348")]
			StandardGauss,
			[Token(Token = "0x4000349")]
			SgxGauss
		}

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9809D0", Offset = "0x9809D0")]
		public int downsample;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9809E8", Offset = "0x9809E8")]
		public float blurSize;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980A00", Offset = "0x980A00")]
		public int blurIterations;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public BlurType blurType;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader blurShader;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material blurMaterial;

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x20736D0", Offset = "0x20736D0", VA = "0x20736D0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x2073734", Offset = "0x2073734", VA = "0x2073734")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x20737E0", Offset = "0x20737E0", VA = "0x20737E0")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x2073B8C", Offset = "0x2073B8C", VA = "0x2073B8C")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x2000065")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97DA04", Offset = "0x97DA04")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DA04", Offset = "0x97DA04")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x2000066")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x400036B")]
			CameraMotion,
			[Token(Token = "0x400036C")]
			LocalBlur,
			[Token(Token = "0x400036D")]
			Reconstruction,
			[Token(Token = "0x400036E")]
			ReconstructionDX11,
			[Token(Token = "0x400036F")]
			ReconstructionDisc
		}

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool preview;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 previewScale;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float movementScale;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float rotationScale;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float maxVelocity;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minVelocity;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float velocityScale;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float softZDistance;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int velocityDownsample;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject tmpCam;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shader;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader replacementClear;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material motionBlurMaterial;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture2D noiseTexture;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float jitter;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool showVelocity;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float showVelocityScale;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Matrix4x4[] currentStereoViewProjMat;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Matrix4x4[] prevStereoViewProjMat;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int prevFrameCount;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool wasActive;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Camera _camera;

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x2074CE4", Offset = "0x2074CE4", VA = "0x2074CE4")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x2074F40", Offset = "0x2074F40", VA = "0x2074F40")]
		private new void Start()
		{
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x20751B0", Offset = "0x20751B0", VA = "0x20751B0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x2075278", Offset = "0x2075278", VA = "0x2075278")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x20753D8", Offset = "0x20753D8", VA = "0x20753D8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x2075470", Offset = "0x2075470", VA = "0x2075470")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x2075054", Offset = "0x2075054", VA = "0x2075054")]
		private void Remember()
		{
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x2076DF0", Offset = "0x2076DF0", VA = "0x2076DF0")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x2076D60", Offset = "0x2076D60", VA = "0x2076D60")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x2076DE0", Offset = "0x2076DE0", VA = "0x2076DE0")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x207717C", Offset = "0x207717C", VA = "0x207717C")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x2000067")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DA98", Offset = "0x97DA98")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x2000068")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x4000389")]
			Simple,
			[Token(Token = "0x400038A")]
			Advanced
		}

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve redChannel;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useDepthCorrection;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve zCurve;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccMaterial;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material ccDepthMaterial;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Texture2D zCurveTex;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float saturation;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool selectiveCc;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color selectiveFromColor;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Color selectiveToColor;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool updateTextures;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x2077600", Offset = "0x2077600", VA = "0x2077600")]
		private new void Start()
		{
		}

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x207762C", Offset = "0x207762C", VA = "0x207762C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x2077630", Offset = "0x2077630", VA = "0x2077630", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x20778AC", Offset = "0x20778AC", VA = "0x20778AC")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x2077C6C", Offset = "0x2077C6C", VA = "0x2077C6C")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0x2077C70", Offset = "0x2077C70", VA = "0x2077C70")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x2077FBC", Offset = "0x2077FBC", VA = "0x2077FBC")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x2000069")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DAE4", Offset = "0x97DAE4")]
	[ExecuteInEditMode]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shader;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material material;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture3D converted3DLut;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string basedOnTempTex;

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x20785F8", Offset = "0x20785F8", VA = "0x20785F8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x2078658", Offset = "0x2078658", VA = "0x2078658")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x20786FC", Offset = "0x20786FC", VA = "0x20786FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x20787A0", Offset = "0x20787A0", VA = "0x20787A0")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x20789BC", Offset = "0x20789BC", VA = "0x20789BC")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x2078A84", Offset = "0x2078A84", VA = "0x2078A84")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x2078DE0", Offset = "0x2078DE0", VA = "0x2078DE0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x2078FF8", Offset = "0x2078FF8", VA = "0x2078FF8")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x200006A")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DB30", Offset = "0x97DB30")]
	[ExecuteInEditMode]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x207904C", Offset = "0x207904C", VA = "0x207904C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x2079114", Offset = "0x2079114", VA = "0x2079114")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x200006B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97DB7C", Offset = "0x97DB7C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DB7C", Offset = "0x97DB7C")]
	[ExecuteInEditMode]
	public class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980A18", Offset = "0x980A18")]
		public float intensity;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980A30", Offset = "0x980A30")]
		public float threshold;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980A4C", Offset = "0x980A4C")]
		public float blurSpread;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x207911C", Offset = "0x207911C", VA = "0x207911C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x207919C", Offset = "0x207919C", VA = "0x207919C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x2079530", Offset = "0x2079530", VA = "0x2079530")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x200006C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DC10", Offset = "0x97DC10")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980A64", Offset = "0x980A64")]
		public float adaptationSpeed;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980A80", Offset = "0x980A80")]
		public float limitMinimum;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980A98", Offset = "0x980A98")]
		public float limitMaximum;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x17000022")]
		protected Material materialLum
		{
			[Token(Token = "0x60001E0")]
			[Address(RVA = "0x2079548", Offset = "0x2079548", VA = "0x2079548")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		protected Material materialReduce
		{
			[Token(Token = "0x60001E1")]
			[Address(RVA = "0x2079614", Offset = "0x2079614", VA = "0x2079614")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		protected Material materialAdapt
		{
			[Token(Token = "0x60001E2")]
			[Address(RVA = "0x20796E0", Offset = "0x20796E0", VA = "0x20796E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		protected Material materialApply
		{
			[Token(Token = "0x60001E3")]
			[Address(RVA = "0x20797AC", Offset = "0x20797AC", VA = "0x20797AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x2079878", Offset = "0x2079878", VA = "0x2079878")]
		private void Start()
		{
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x207990C", Offset = "0x207990C", VA = "0x207990C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x2079A64", Offset = "0x2079A64", VA = "0x2079A64")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x2079C88", Offset = "0x2079C88", VA = "0x2079C88")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x2079EEC", Offset = "0x2079EEC", VA = "0x2079EEC")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x207A0E8", Offset = "0x207A0E8", VA = "0x207A0E8")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x200006D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DC5C", Offset = "0x97DC5C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97DC5C", Offset = "0x97DC5C")]
	public class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float intensity;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int softness;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spread;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader blurShader;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material blurMaterial;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader depthFetchShader;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material depthFetchMaterial;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader creaseApplyShader;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x207A4AC", Offset = "0x207A4AC", VA = "0x207A4AC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x207A538", Offset = "0x207A538", VA = "0x207A538")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x207A90C", Offset = "0x207A90C", VA = "0x207A90C")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x200006E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97DCF0", Offset = "0x97DCF0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DCF0", Offset = "0x97DCF0")]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x200006F")]
		public enum BlurType
		{
			[Token(Token = "0x40003C7")]
			DiscBlur,
			[Token(Token = "0x40003C8")]
			DX11
		}

		[Token(Token = "0x2000070")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x40003CA")]
			Low,
			[Token(Token = "0x40003CB")]
			Medium,
			[Token(Token = "0x40003CC")]
			High
		}

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool visualizeFocus;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float focalLength;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalSize;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float aperture;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform focalTransform;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxBlurSize;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool highResolution;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BlurType blurType;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool nearBlur;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float foregroundOverlap;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dofHdrShader;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dofHdrMaterial;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader dx11BokehShader;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehThreshold;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float dx11BokehScale;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float focalDistance01;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float internalBlurWidth;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Camera cachedCamera;

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x207B7AC", Offset = "0x207B7AC", VA = "0x207B7AC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x207B964", Offset = "0x207B964", VA = "0x207B964")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x207B9D8", Offset = "0x207B9D8", VA = "0x207B9D8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x207BADC", Offset = "0x207BADC", VA = "0x207BADC")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x207B840", Offset = "0x207B840", VA = "0x207B840")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x207BB20", Offset = "0x207BB20", VA = "0x207BB20")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x207BC10", Offset = "0x207BC10", VA = "0x207BC10")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x207BF44", Offset = "0x207BF44", VA = "0x207BF44")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x207D564", Offset = "0x207D564", VA = "0x207D564")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x2000071")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97DD84", Offset = "0x97DD84")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DD84", Offset = "0x97DD84")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x2000072")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x40003F9")]
			OnlyBackground = 1,
			[Token(Token = "0x40003FA")]
			BackgroundAndForeground
		}

		[Token(Token = "0x2000073")]
		public enum DofResolution
		{
			[Token(Token = "0x40003FC")]
			High = 2,
			[Token(Token = "0x40003FD")]
			Medium,
			[Token(Token = "0x40003FE")]
			Low
		}

		[Token(Token = "0x2000074")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4000400")]
			Low = 1,
			[Token(Token = "0x4000401")]
			High = 2,
			[Token(Token = "0x4000402")]
			VeryHigh = 4
		}

		[Token(Token = "0x2000075")]
		public enum BokehDestination
		{
			[Token(Token = "0x4000404")]
			Background = 1,
			[Token(Token = "0x4000405")]
			Foreground,
			[Token(Token = "0x4000406")]
			BackgroundAndForeground
		}

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public DofResolution resolution;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool simpleTweakMode;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalPoint;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float smoothness;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float focalZDistance;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float focalZStartCurve;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float focalZEndCurve;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float focalStartCurve;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float focalEndCurve;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float focalDistance01;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform objectFocus;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float focalSize;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public DofBlurriness bluriness;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float maxBlurSpread;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofBlurShader;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofBlurMaterial;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader dofShader;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dofMaterial;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool visualize;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float widthOverHeight;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float oneOverBaseSize;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool bokeh;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool bokehSupport;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Shader bokehShader;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float bokehScale;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float bokehIntensity;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int bokehDownsample;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material bokehMaterial;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Camera _camera;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private RenderTexture bokehSource;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x207D5BC", Offset = "0x207D5BC", VA = "0x207D5BC")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x207D698", Offset = "0x207D698", VA = "0x207D698", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x207D7AC", Offset = "0x207D7AC", VA = "0x207D7AC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x207D808", Offset = "0x207D808", VA = "0x207D808")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x207D87C", Offset = "0x207D87C", VA = "0x207D87C")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x207D96C", Offset = "0x207D96C", VA = "0x207D96C")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x207D990", Offset = "0x207D990", VA = "0x207D990")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x207D9B4", Offset = "0x207D9B4", VA = "0x207D9B4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x207E7F0", Offset = "0x207E7F0", VA = "0x207E7F0")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x207EEE4", Offset = "0x207EEE4", VA = "0x207EEE4")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6000200")]
		[Address(RVA = "0x207F35C", Offset = "0x207F35C", VA = "0x207F35C")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0x207E690", Offset = "0x207E690", VA = "0x207E690")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0x207EA94", Offset = "0x207EA94", VA = "0x207EA94")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x6000203")]
		[Address(RVA = "0x207F1B4", Offset = "0x207F1B4", VA = "0x207F1B4")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0x207E360", Offset = "0x207E360", VA = "0x207E360")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0x207F58C", Offset = "0x207F58C", VA = "0x207F58C")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x2000076")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97DE18", Offset = "0x97DE18")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DE18", Offset = "0x97DE18")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x2000077")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4000413")]
			TriangleDepthNormals,
			[Token(Token = "0x4000414")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4000415")]
			SobelDepth,
			[Token(Token = "0x4000416")]
			SobelDepthThin,
			[Token(Token = "0x4000417")]
			TriangleLuminance
		}

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EdgeDetectMode mode;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sensitivityDepth;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sensitivityNormals;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float lumThreshold;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float edgeExp;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sampleDist;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float edgesOnly;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader edgeDetectShader;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x6000207")]
		[Address(RVA = "0x1201F74", Offset = "0x1201F74", VA = "0x1201F74", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0x12020B4", Offset = "0x12020B4", VA = "0x12020B4")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000209")]
		[Address(RVA = "0x1201FF8", Offset = "0x1201FF8", VA = "0x1201FF8")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x600020A")]
		[Address(RVA = "0x12020C0", Offset = "0x12020C0", VA = "0x12020C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0x12020C4", Offset = "0x12020C4", VA = "0x12020C4")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600020C")]
		[Address(RVA = "0x12022EC", Offset = "0x12022EC", VA = "0x12022EC")]
		public EdgeDetection()
		{
		}
	}
	[Token(Token = "0x2000078")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DEAC", Offset = "0x97DEAC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97DEAC", Offset = "0x97DEAC")]
	[ExecuteInEditMode]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980AB0", Offset = "0x980AB0")]
		public float strengthX;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980AC8", Offset = "0x980AC8")]
		public float strengthY;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fishEyeShader;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fisheyeMaterial;

		[Token(Token = "0x600020D")]
		[Address(RVA = "0x1202A40", Offset = "0x1202A40", VA = "0x1202A40", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0x1202AA4", Offset = "0x1202AA4", VA = "0x1202AA4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0x1202C1C", Offset = "0x1202C1C", VA = "0x1202C1C")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x2000079")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DF40", Offset = "0x97DF40")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980AE0", Offset = "0x980AE0")]
		public float rampOffset;

		[Token(Token = "0x6000210")]
		[Address(RVA = "0x120315C", Offset = "0x120315C", VA = "0x120315C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0x1203258", Offset = "0x1203258", VA = "0x1203258")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x200007A")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97DF8C", Offset = "0x97DF8C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97DF8C", Offset = "0x97DF8C")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x17000026")]
		protected Material material
		{
			[Token(Token = "0x6000213")]
			[Address(RVA = "0xE387A0", Offset = "0xE387A0", VA = "0xE387A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0xE386F4", Offset = "0xE386F4", VA = "0xE386F4", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0xE3886C", Offset = "0xE3886C", VA = "0xE3886C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0xE38918", Offset = "0xE38918", VA = "0xE38918")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x200007B")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E010", Offset = "0x97E010")]
	public class ImageEffects
	{
		[Token(Token = "0x6000216")]
		[Address(RVA = "0xE38920", Offset = "0xE38920", VA = "0xE38920")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0xE38B6C", Offset = "0xE38B6C", VA = "0xE38B6C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x981740", Offset = "0x981740")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0xE38BE0", Offset = "0xE38BE0", VA = "0xE38BE0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x981778", Offset = "0x981778")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0xE38C5C", Offset = "0xE38C5C", VA = "0xE38C5C")]
		public ImageEffects()
		{
		}
	}
	[Token(Token = "0x200007C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E048", Offset = "0x97E048")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E048", Offset = "0x97E048")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980AF8", Offset = "0x980AF8")]
		public float blurAmount;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x600021A")]
		[Address(RVA = "0xE440BC", Offset = "0xE440BC", VA = "0xE440BC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600021B")]
		[Address(RVA = "0xE440C0", Offset = "0xE440C0", VA = "0xE440C0", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600021C")]
		[Address(RVA = "0xE44130", Offset = "0xE44130", VA = "0xE44130")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600021D")]
		[Address(RVA = "0xE444B4", Offset = "0xE444B4", VA = "0xE444B4")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x200007D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E0DC", Offset = "0x97E0DC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E0DC", Offset = "0x97E0DC")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float intensityMultiplier;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float generalIntensity;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blackIntensity;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float whiteIntensity;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float midGrey;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool dx11Grain;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float softness;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool monochrome;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 intensities;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 tiling;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float monochromeTiling;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public FilterMode filterMode;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader noiseShader;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material noiseMaterial;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x600021E")]
		[Address(RVA = "0xE5D95C", Offset = "0xE5D95C", VA = "0xE5D95C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0xE5D9E4", Offset = "0xE5D9E4", VA = "0xE5D9E4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0xE5E1E8", Offset = "0xE5E1E8", VA = "0xE5E1E8")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0xE5E53C", Offset = "0xE5E53C", VA = "0xE5E53C")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x200007E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E170", Offset = "0x97E170")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E170", Offset = "0x97E170")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool monochrome;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool rgbFallback;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980B14", Offset = "0x980B14")]
		public float grainIntensityMin;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980B2C", Offset = "0x980B2C")]
		public float grainIntensityMax;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980B44", Offset = "0x980B44")]
		public float grainSize;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980B64", Offset = "0x980B64")]
		public float scratchIntensityMin;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980B7C", Offset = "0x980B7C")]
		public float scratchIntensityMax;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980B94", Offset = "0x980B94")]
		public float scratchFPS;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980BAC", Offset = "0x980BAC")]
		public float scratchJitter;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture grainTexture;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture scratchTexture;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderRGB;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader shaderYUV;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_MaterialRGB;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_MaterialYUV;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float scratchTimeLeft;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scratchX;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scratchY;

		[Token(Token = "0x17000027")]
		protected Material material
		{
			[Token(Token = "0x6000224")]
			[Address(RVA = "0xE5E720", Offset = "0xE5E720", VA = "0xE5E720")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0xE5E5CC", Offset = "0xE5E5CC", VA = "0xE5E5CC")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0xE5E884", Offset = "0xE5E884", VA = "0xE5E884")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0xE5E984", Offset = "0xE5E984", VA = "0xE5E984")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x6000227")]
		[Address(RVA = "0xE5EA78", Offset = "0xE5EA78", VA = "0xE5EA78")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0xE5EDF8", Offset = "0xE5EDF8", VA = "0xE5EDF8")]
		public NoiseAndScratches()
		{
		}
	}
	[Token(Token = "0x200007F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E204", Offset = "0x97E204")]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Material> createdMaterials;

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x112DE24", Offset = "0x112DE24", VA = "0x112DE24")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0x112E228", Offset = "0x112E228", VA = "0x112E228")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0x112E430", Offset = "0x112E430", VA = "0x112E430")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x112E43C", Offset = "0x112E43C", VA = "0x112E43C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x112E440", Offset = "0x112E440", VA = "0x112E440")]
		private void RemoveCreatedMaterials()
		{
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x112E510", Offset = "0x112E510", VA = "0x112E510")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x112E61C", Offset = "0x112E61C", VA = "0x112E61C", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0x112E6E0", Offset = "0x112E6E0", VA = "0x112E6E0")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x112E518", Offset = "0x112E518", VA = "0x112E518")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x112E6EC", Offset = "0x112E6EC", VA = "0x112E6EC")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x112E748", Offset = "0x112E748", VA = "0x112E748")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0x112E750", Offset = "0x112E750", VA = "0x112E750")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x112E80C", Offset = "0x112E80C", VA = "0x112E80C")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x112E1FC", Offset = "0x112E1FC", VA = "0x112E1FC")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x112EA38", Offset = "0x112EA38", VA = "0x112EA38")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x112EDB4", Offset = "0x112EDB4", VA = "0x112EDB4")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x2000080")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E274", Offset = "0x97E274")]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x6000239")]
		[Address(RVA = "0x112EE38", Offset = "0x112EE38", VA = "0x112EE38")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x112EEAC", Offset = "0x112EEAC", VA = "0x112EEAC")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x112F104", Offset = "0x112F104", VA = "0x112F104")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x112F47C", Offset = "0x112F47C", VA = "0x112F47C")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x112F624", Offset = "0x112F624", VA = "0x112F624")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x2000081")]
	internal class Quads
	{
		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x600023E")]
		[Address(RVA = "0x112F9A8", Offset = "0x112F9A8", VA = "0x112F9A8")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x112FAD4", Offset = "0x112FAD4", VA = "0x112FAD4")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0x112FCAC", Offset = "0x112FCAC", VA = "0x112FCAC")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x112FF34", Offset = "0x112FF34", VA = "0x112FF34")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x11302F4", Offset = "0x11302F4", VA = "0x11302F4")]
		public Quads()
		{
		}
	}
	[Token(Token = "0x2000082")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E2E4", Offset = "0x97E2E4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E2E4", Offset = "0x97E2E4")]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x2000083")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x4000453")]
			Additive,
			[Token(Token = "0x4000454")]
			ScreenBlend,
			[Token(Token = "0x4000455")]
			Multiply,
			[Token(Token = "0x4000456")]
			Overlay,
			[Token(Token = "0x4000457")]
			AlphaBlend
		}

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float intensity;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D texture;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader overlayShader;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material overlayMaterial;

		[Token(Token = "0x6000244")]
		[Address(RVA = "0x11304B0", Offset = "0x11304B0", VA = "0x11304B0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0x1130508", Offset = "0x1130508", VA = "0x1130508")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0x1130690", Offset = "0x1130690", VA = "0x1130690")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x2000084")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E378", Offset = "0x97E378")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E378", Offset = "0x97E378")]
	[ExecuteInEditMode]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980BC4", Offset = "0x980BC4")]
		public float intensity;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980BDC", Offset = "0x980BDC")]
		public float radius;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980BF8", Offset = "0x980BF8")]
		public int blurIterations;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980C10", Offset = "0x980C10")]
		public float blurFilterDistance;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980C28", Offset = "0x980C28")]
		public int downsample;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture2D rand;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader aoShader;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material aoMaterial;

		[Token(Token = "0x6000247")]
		[Address(RVA = "0x11306A0", Offset = "0x11306A0", VA = "0x11306A0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0x11306F8", Offset = "0x11306F8", VA = "0x11306F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0x113079C", Offset = "0x113079C", VA = "0x113079C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0x1130FDC", Offset = "0x1130FDC", VA = "0x1130FDC")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x2000085")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E40C", Offset = "0x97E40C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E40C", Offset = "0x97E40C")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x2000086")]
		public enum SSAOSamples
		{
			[Token(Token = "0x400046C")]
			Low,
			[Token(Token = "0x400046D")]
			Medium,
			[Token(Token = "0x400046E")]
			High
		}

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980C40", Offset = "0x980C40")]
		public float m_Radius;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980C5C", Offset = "0x980C5C")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980C74", Offset = "0x980C74")]
		public int m_Blur;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980C8C", Offset = "0x980C8C")]
		public int m_Downsampling;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980CA4", Offset = "0x980CA4")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980CC0", Offset = "0x980CC0")]
		public float m_MinZ;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x600024B")]
		[Address(RVA = "0x1130FF8", Offset = "0x1130FF8", VA = "0x1130FF8")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0x11310B0", Offset = "0x11310B0", VA = "0x11310B0")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0x1131148", Offset = "0x1131148", VA = "0x1131148")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600024E")]
		[Address(RVA = "0x1131150", Offset = "0x1131150", VA = "0x1131150")]
		private void Start()
		{
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0x11312E8", Offset = "0x11312E8", VA = "0x11312E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000250")]
		[Address(RVA = "0x1131224", Offset = "0x1131224", VA = "0x1131224")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0x1131358", Offset = "0x1131358", VA = "0x1131358")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000252")]
		[Address(RVA = "0x11319D0", Offset = "0x11319D0", VA = "0x11319D0")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x2000087")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E4A0", Offset = "0x97E4A0")]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x6000253")]
		[Address(RVA = "0x1131BC4", Offset = "0x1131BC4", VA = "0x1131BC4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0x1131C54", Offset = "0x1131C54", VA = "0x1131C54")]
		public SepiaTone()
		{
		}
	}
	[Token(Token = "0x2000088")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E4EC", Offset = "0x97E4EC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E4EC", Offset = "0x97E4EC")]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x2000089")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x400047E")]
			Low,
			[Token(Token = "0x400047F")]
			Normal,
			[Token(Token = "0x4000480")]
			High
		}

		[Token(Token = "0x200008A")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4000482")]
			Screen,
			[Token(Token = "0x4000483")]
			Add
		}

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform sunTransform;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int radialBlurIterations;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color sunColor;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color sunThreshold;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float sunShaftIntensity;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float maxRadius;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useDepthTexture;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader sunShaftsShader;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader simpleClearShader;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material simpleClearMaterial;

		[Token(Token = "0x6000255")]
		[Address(RVA = "0x167ADF8", Offset = "0x167ADF8", VA = "0x167ADF8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000256")]
		[Address(RVA = "0x167AE70", Offset = "0x167AE70", VA = "0x167AE70")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x167B658", Offset = "0x167B658", VA = "0x167B658")]
		public SunShafts()
		{
		}
	}
	[Token(Token = "0x200008B")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E580", Offset = "0x97E580")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E580", Offset = "0x97E580")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x200008C")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x400048C")]
			TiltShiftMode,
			[Token(Token = "0x400048D")]
			IrisMode
		}

		[Token(Token = "0x200008D")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x400048F")]
			Preview,
			[Token(Token = "0x4000490")]
			Low,
			[Token(Token = "0x4000491")]
			Normal,
			[Token(Token = "0x4000492")]
			High
		}

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TiltShiftMode mode;

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TiltShiftQuality quality;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980CDC", Offset = "0x980CDC")]
		public float blurArea;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980CF4", Offset = "0x980CF4")]
		public float maxBlurSize;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980D0C", Offset = "0x980D0C")]
		public int downsample;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader tiltShiftShader;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x167BAA8", Offset = "0x167BAA8", VA = "0x167BAA8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0x167BB0C", Offset = "0x167BB0C", VA = "0x167BB0C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600025A")]
		[Address(RVA = "0x167BDC8", Offset = "0x167BDC8", VA = "0x167BDC8")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x200008E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E604", Offset = "0x97E604")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E604", Offset = "0x97E604")]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x200008F")]
		public enum TonemapperType
		{
			[Token(Token = "0x40004A1")]
			SimpleReinhard,
			[Token(Token = "0x40004A2")]
			UserCurve,
			[Token(Token = "0x40004A3")]
			Hable,
			[Token(Token = "0x40004A4")]
			Photographic,
			[Token(Token = "0x40004A5")]
			OptimizedHejiDawson,
			[Token(Token = "0x40004A6")]
			AdaptiveReinhard,
			[Token(Token = "0x40004A7")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x2000090")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x40004A9")]
			Square16 = 0x10,
			[Token(Token = "0x40004AA")]
			Square32 = 0x20,
			[Token(Token = "0x40004AB")]
			Square64 = 0x40,
			[Token(Token = "0x40004AC")]
			Square128 = 0x80,
			[Token(Token = "0x40004AD")]
			Square256 = 0x100,
			[Token(Token = "0x40004AE")]
			Square512 = 0x200,
			[Token(Token = "0x40004AF")]
			Square1024 = 0x400
		}

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TonemapperType type;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Texture2D curveTex;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float exposureAdjustment;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float middleGrey;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float white;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float adaptionSpeed;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader tonemapper;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material tonemapMaterial;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTexture rt;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x600025B")]
		[Address(RVA = "0x167C228", Offset = "0x167C228", VA = "0x167C228", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x167C378", Offset = "0x167C378", VA = "0x167C378")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0x167C61C", Offset = "0x167C61C", VA = "0x167C61C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0x167C770", Offset = "0x167C770", VA = "0x167C770")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0x167C868", Offset = "0x167C868", VA = "0x167C868")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0x167D0CC", Offset = "0x167D0CC", VA = "0x167D0CC")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x2000091")]
	internal class Triangles
	{
		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentTris;

		[Token(Token = "0x6000261")]
		[Address(RVA = "0x167D664", Offset = "0x167D664", VA = "0x167D664")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0x167D7A8", Offset = "0x167D7A8", VA = "0x167D7A8")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0x167D980", Offset = "0x167D980", VA = "0x167D980")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0x167DC08", Offset = "0x167DC08", VA = "0x167DC08")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000265")]
		[Address(RVA = "0x167DF24", Offset = "0x167DF24", VA = "0x167DF24")]
		public Triangles()
		{
		}
	}
	[Token(Token = "0x2000092")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E698", Offset = "0x97E698")]
	[ExecuteInEditMode]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x980D24", Offset = "0x980D24")]
		public float angle;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6000267")]
		[Address(RVA = "0x167DF30", Offset = "0x167DF30", VA = "0x167DF30")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0x167DF7C", Offset = "0x167DF7C", VA = "0x167DF7C")]
		public Twirl()
		{
		}
	}
	[Token(Token = "0x2000093")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E6E4", Offset = "0x97E6E4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E6E4", Offset = "0x97E6E4")]
	[ExecuteInEditMode]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x2000094")]
		public enum AberrationMode
		{
			[Token(Token = "0x40004C4")]
			Simple,
			[Token(Token = "0x40004C5")]
			Advanced
		}

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AberrationMode mode;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float intensity;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float chromaticAberration;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float axialAberration;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blur;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float blurSpread;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float luminanceDependency;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float blurDistance;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader vignetteShader;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader separableBlurShader;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader chromAberrationShader;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6000269")]
		[Address(RVA = "0x167E698", Offset = "0x167E698", VA = "0x167E698", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0x167E730", Offset = "0x167E730", VA = "0x167E730")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0x167ED20", Offset = "0x167ED20", VA = "0x167ED20")]
		public VignetteAndChromaticAberration()
		{
		}
	}
	[Token(Token = "0x2000095")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x97E778", Offset = "0x97E778")]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x600026C")]
		[Address(RVA = "0x167F3DC", Offset = "0x167F3DC", VA = "0x167F3DC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0x167F428", Offset = "0x167F428", VA = "0x167F428")]
		public Vortex()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput
{
	[Token(Token = "0x2000096")]
	public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axisName;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axisValue;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float responseSpeed;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float returnToCentreSpeed;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AxisTouchButton m_PairedWith;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrossPlatformInputManager.VirtualAxis m_Axis;

		[Token(Token = "0x600026E")]
		[Address(RVA = "0x206FAD0", Offset = "0x206FAD0", VA = "0x206FAD0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0x206FD2C", Offset = "0x206FD2C", VA = "0x206FD2C")]
		private void FindPairedButton()
		{
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0x206FECC", Offset = "0x206FECC", VA = "0x206FECC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0x206FEE8", Offset = "0x206FEE8", VA = "0x206FEE8", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000272")]
		[Address(RVA = "0x206FFA8", Offset = "0x206FFA8", VA = "0x206FFA8", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0x206FFFC", Offset = "0x206FFFC", VA = "0x206FFFC")]
		public AxisTouchButton()
		{
		}
	}
	[Token(Token = "0x2000097")]
	public class ButtonHandler : MonoBehaviour
	{
		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x6000274")]
		[Address(RVA = "0x2073BA8", Offset = "0x2073BA8", VA = "0x2073BA8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0x2073BAC", Offset = "0x2073BAC", VA = "0x2073BAC")]
		public void SetDownState()
		{
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0x2073C8C", Offset = "0x2073C8C", VA = "0x2073C8C")]
		public void SetUpState()
		{
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0x2073D6C", Offset = "0x2073D6C", VA = "0x2073D6C")]
		public void SetAxisPositiveState()
		{
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0x2073E4C", Offset = "0x2073E4C", VA = "0x2073E4C")]
		public void SetAxisNeutralState()
		{
		}

		[Token(Token = "0x6000279")]
		[Address(RVA = "0x2073F2C", Offset = "0x2073F2C", VA = "0x2073F2C")]
		public void SetAxisNegativeState()
		{
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0x207400C", Offset = "0x207400C", VA = "0x207400C")]
		public void Update()
		{
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0x2074010", Offset = "0x2074010", VA = "0x2074010")]
		public ButtonHandler()
		{
		}
	}
	[Token(Token = "0x2000098")]
	public static class CrossPlatformInputManager
	{
		[Token(Token = "0x2000099")]
		public enum ActiveInputMethod
		{
			[Token(Token = "0x40004D4")]
			Hardware,
			[Token(Token = "0x40004D5")]
			Touch
		}

		[Token(Token = "0x200009A")]
		public class VirtualAxis
		{
			[Token(Token = "0x40004D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980D40", Offset = "0x980D40")]
			private string <name>k__BackingField;

			[Token(Token = "0x40004D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private float m_Value;

			[Token(Token = "0x40004D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980D50", Offset = "0x980D50")]
			private bool <matchWithInputManager>k__BackingField;

			[Token(Token = "0x17000029")]
			public string name
			{
				[Token(Token = "0x6000295")]
				[Address(RVA = "0x168A134", Offset = "0x168A134", VA = "0x168A134")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9817E0", Offset = "0x9817E0")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000296")]
				[Address(RVA = "0x168A13C", Offset = "0x168A13C", VA = "0x168A13C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9817F0", Offset = "0x9817F0")]
				private set
				{
				}
			}

			[Token(Token = "0x1700002A")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x6000297")]
				[Address(RVA = "0x168A144", Offset = "0x168A144", VA = "0x168A144")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981800", Offset = "0x981800")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000298")]
				[Address(RVA = "0x168A14C", Offset = "0x168A14C", VA = "0x168A14C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981810", Offset = "0x981810")]
				private set
				{
				}
			}

			[Token(Token = "0x1700002B")]
			public float GetValue
			{
				[Token(Token = "0x600029D")]
				[Address(RVA = "0x168A1A0", Offset = "0x168A1A0", VA = "0x168A1A0")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700002C")]
			public float GetValueRaw
			{
				[Token(Token = "0x600029E")]
				[Address(RVA = "0x168A1A8", Offset = "0x168A1A8", VA = "0x168A1A8")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000299")]
			[Address(RVA = "0x167B7BC", Offset = "0x167B7BC", VA = "0x167B7BC")]
			public VirtualAxis(string name)
			{
			}

			[Token(Token = "0x600029A")]
			[Address(RVA = "0x168A158", Offset = "0x168A158", VA = "0x168A158")]
			public VirtualAxis(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x600029B")]
			[Address(RVA = "0x167BA30", Offset = "0x167BA30", VA = "0x167BA30")]
			public void Remove()
			{
			}

			[Token(Token = "0x600029C")]
			[Address(RVA = "0x168A198", Offset = "0x168A198", VA = "0x168A198")]
			public void Update(float value)
			{
			}
		}

		[Token(Token = "0x200009B")]
		public class VirtualButton
		{
			[Token(Token = "0x40004D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980D60", Offset = "0x980D60")]
			private string <name>k__BackingField;

			[Token(Token = "0x40004DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980D70", Offset = "0x980D70")]
			private bool <matchWithInputManager>k__BackingField;

			[Token(Token = "0x40004DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int m_LastPressedFrame;

			[Token(Token = "0x40004DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_ReleasedFrame;

			[Token(Token = "0x40004DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool m_Pressed;

			[Token(Token = "0x1700002D")]
			public string name
			{
				[Token(Token = "0x600029F")]
				[Address(RVA = "0x168A1B0", Offset = "0x168A1B0", VA = "0x168A1B0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981820", Offset = "0x981820")]
				get
				{
					return null;
				}
				[Token(Token = "0x60002A0")]
				[Address(RVA = "0x168A1B8", Offset = "0x168A1B8", VA = "0x168A1B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981830", Offset = "0x981830")]
				private set
				{
				}
			}

			[Token(Token = "0x1700002E")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x60002A1")]
				[Address(RVA = "0x168A1C0", Offset = "0x168A1C0", VA = "0x168A1C0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981840", Offset = "0x981840")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60002A2")]
				[Address(RVA = "0x168A1C8", Offset = "0x168A1C8", VA = "0x168A1C8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981850", Offset = "0x981850")]
				private set
				{
				}
			}

			[Token(Token = "0x1700002F")]
			public bool GetButton
			{
				[Token(Token = "0x60002A8")]
				[Address(RVA = "0x168A328", Offset = "0x168A328", VA = "0x168A328")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000030")]
			public bool GetButtonDown
			{
				[Token(Token = "0x60002A9")]
				[Address(RVA = "0x168A330", Offset = "0x168A330", VA = "0x168A330")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000031")]
			public bool GetButtonUp
			{
				[Token(Token = "0x60002AA")]
				[Address(RVA = "0x168A360", Offset = "0x168A360", VA = "0x168A360")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60002A3")]
			[Address(RVA = "0x168A1D4", Offset = "0x168A1D4", VA = "0x168A1D4")]
			public VirtualButton(string name)
			{
			}

			[Token(Token = "0x60002A4")]
			[Address(RVA = "0x168A210", Offset = "0x168A210", VA = "0x168A210")]
			public VirtualButton(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x60002A5")]
			[Address(RVA = "0x168A258", Offset = "0x168A258", VA = "0x168A258")]
			public void Pressed()
			{
			}

			[Token(Token = "0x60002A6")]
			[Address(RVA = "0x168A294", Offset = "0x168A294", VA = "0x168A294")]
			public void Released()
			{
			}

			[Token(Token = "0x60002A7")]
			[Address(RVA = "0x168A2C0", Offset = "0x168A2C0", VA = "0x168A2C0")]
			public void Remove()
			{
			}
		}

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VirtualInput activeInput;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VirtualInput s_TouchInput;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VirtualInput s_HardwareInput;

		[Token(Token = "0x17000028")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x6000291")]
			[Address(RVA = "0x207B00C", Offset = "0x207B00C", VA = "0x207B00C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0x207A928", Offset = "0x207A928", VA = "0x207A928")]
		static CrossPlatformInputManager()
		{
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0x207A9DC", Offset = "0x207A9DC", VA = "0x207A9DC")]
		public static void SwitchActiveInputMethod(ActiveInputMethod activeInputMethod)
		{
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0x206FBC4", Offset = "0x206FBC4", VA = "0x206FBC4")]
		public static bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0x207AA88", Offset = "0x207AA88", VA = "0x207AA88")]
		public static bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0x206FC3C", Offset = "0x206FC3C", VA = "0x206FC3C")]
		public static void RegisterVirtualAxis(VirtualAxis axis)
		{
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0x207AB00", Offset = "0x207AB00", VA = "0x207AB00")]
		public static void RegisterVirtualButton(VirtualButton button)
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0x207AB78", Offset = "0x207AB78", VA = "0x207AB78")]
		public static void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0x207AC3C", Offset = "0x207AC3C", VA = "0x207AC3C")]
		public static void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0x206FCB4", Offset = "0x206FCB4", VA = "0x206FCB4")]
		public static VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0x207ACB4", Offset = "0x207ACB4", VA = "0x207ACB4")]
		public static float GetAxis(string name)
		{
			return default(float);
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0x207ADA4", Offset = "0x207ADA4", VA = "0x207ADA4")]
		public static float GetAxisRaw(string name)
		{
			return default(float);
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0x207AD18", Offset = "0x207AD18", VA = "0x207AD18")]
		private static float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0x207AE08", Offset = "0x207AE08", VA = "0x207AE08")]
		public static bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0x207AE84", Offset = "0x207AE84", VA = "0x207AE84")]
		public static bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0x207AF00", Offset = "0x207AF00", VA = "0x207AF00")]
		public static bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0x2073C10", Offset = "0x2073C10", VA = "0x2073C10")]
		public static void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0x2073CF0", Offset = "0x2073CF0", VA = "0x2073CF0")]
		public static void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0x2073DD0", Offset = "0x2073DD0", VA = "0x2073DD0")]
		public static void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0x2073F90", Offset = "0x2073F90", VA = "0x2073F90")]
		public static void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x600028F")]
		[Address(RVA = "0x2073EB0", Offset = "0x2073EB0", VA = "0x2073EB0")]
		public static void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0x207AF7C", Offset = "0x207AF7C", VA = "0x207AF7C")]
		public static void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0x207B084", Offset = "0x207B084", VA = "0x207B084")]
		public static void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0x207B104", Offset = "0x207B104", VA = "0x207B104")]
		public static void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0x207B184", Offset = "0x207B184", VA = "0x207B184")]
		public static void SetVirtualMousePositionZ(float f)
		{
		}
	}
	[Token(Token = "0x200009C")]
	public class InputAxisScrollbar : MonoBehaviour
	{
		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axis;

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xE38C64", Offset = "0xE38C64", VA = "0xE38C64")]
		private void Update()
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xE38C68", Offset = "0xE38C68", VA = "0xE38C68")]
		public void HandleInput(float value)
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xE38CE8", Offset = "0xE38CE8", VA = "0xE38CE8")]
		public InputAxisScrollbar()
		{
		}
	}
	[Token(Token = "0x200009D")]
	public class Joystick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x200009E")]
		public enum AxisOption
		{
			[Token(Token = "0x40004E9")]
			Both,
			[Token(Token = "0x40004EA")]
			OnlyHorizontal,
			[Token(Token = "0x40004EB")]
			OnlyVertical
		}

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int MovementRange;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AxisOption axesToUse;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_StartPos;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_UseX;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_UseY;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xE3E2D8", Offset = "0xE3E2D8", VA = "0xE3E2D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xE3E418", Offset = "0xE3E418", VA = "0xE3E418")]
		private void Start()
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xE3E454", Offset = "0xE3E454", VA = "0xE3E454")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xE3E2DC", Offset = "0xE3E2DC", VA = "0xE3E2DC")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xE3E4B8", Offset = "0xE3E4B8", VA = "0xE3E4B8", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xE3E5DC", Offset = "0xE3E5DC", VA = "0xE3E5DC", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xE3E624", Offset = "0xE3E624", VA = "0xE3E624", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xE3E628", Offset = "0xE3E628", VA = "0xE3E628")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xE3E680", Offset = "0xE3E680", VA = "0xE3E680")]
		public Joystick()
		{
		}
	}
	[Token(Token = "0x200009F")]
	[ExecuteInEditMode]
	public class MobileControlRig : MonoBehaviour
	{
		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xE43524", Offset = "0xE43524", VA = "0xE43524")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0xE43534", Offset = "0xE43534", VA = "0xE43534")]
		private void Start()
		{
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0xE4352C", Offset = "0xE4352C", VA = "0xE4352C")]
		private void CheckEnableControlRig()
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0xE43648", Offset = "0xE43648", VA = "0xE43648")]
		private void EnableControlRig(bool enabled)
		{
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0xE43904", Offset = "0xE43904", VA = "0xE43904")]
		public MobileControlRig()
		{
		}
	}
	[Token(Token = "0x20000A0")]
	public class TiltInput : MonoBehaviour
	{
		[Token(Token = "0x20000A1")]
		public enum AxisOptions
		{
			[Token(Token = "0x40004F2")]
			ForwardAxis,
			[Token(Token = "0x40004F3")]
			SidewaysAxis
		}

		[Serializable]
		[Token(Token = "0x20000A2")]
		public class AxisMapping
		{
			[Token(Token = "0x20000A3")]
			public enum MappingType
			{
				[Token(Token = "0x40004F7")]
				NamedAxis,
				[Token(Token = "0x40004F8")]
				MousePositionX,
				[Token(Token = "0x40004F9")]
				MousePositionY,
				[Token(Token = "0x40004FA")]
				MousePositionZ
			}

			[Token(Token = "0x40004F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MappingType type;

			[Token(Token = "0x40004F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string axisName;

			[Token(Token = "0x60002C0")]
			[Address(RVA = "0x24A8F60", Offset = "0x24A8F60", VA = "0x24A8F60")]
			public AxisMapping()
			{
			}
		}

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisMapping mapping;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AxisOptions tiltAroundAxis;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fullTiltAngle;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float centreAngleOffset;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CrossPlatformInputManager.VirtualAxis m_SteerAxis;

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x167B6F0", Offset = "0x167B6F0", VA = "0x167B6F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x167B7F0", Offset = "0x167B7F0", VA = "0x167B7F0")]
		private void Update()
		{
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x167BA18", Offset = "0x167BA18", VA = "0x167BA18")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x167BA98", Offset = "0x167BA98", VA = "0x167BA98")]
		public TiltInput()
		{
		}
	}
	[Token(Token = "0x20000A4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x97E7D4", Offset = "0x97E7D4")]
	public class TouchPad : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x20000A5")]
		public enum AxisOption
		{
			[Token(Token = "0x400050E")]
			Both,
			[Token(Token = "0x400050F")]
			OnlyHorizontal,
			[Token(Token = "0x4000510")]
			OnlyVertical
		}

		[Token(Token = "0x20000A6")]
		public enum ControlStyle
		{
			[Token(Token = "0x4000512")]
			Absolute,
			[Token(Token = "0x4000513")]
			Relative,
			[Token(Token = "0x4000514")]
			Swipe
		}

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisOption axesToUse;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ControlStyle controlStyle;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Xsensitivity;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Ysensitivity;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_StartPos;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 m_PreviousDelta;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_JoytickOutput;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_UseX;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_UseY;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_Dragging;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_Id;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 m_PreviousTouchPos;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Center;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Image m_Image;

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x167D0FC", Offset = "0x167D0FC", VA = "0x167D0FC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x167D24C", Offset = "0x167D24C", VA = "0x167D24C")]
		private void Start()
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x167D100", Offset = "0x167D100", VA = "0x167D100")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x167D2C4", Offset = "0x167D2C4", VA = "0x167D2C4")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x167D330", Offset = "0x167D330", VA = "0x167D330", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x167D368", Offset = "0x167D368", VA = "0x167D368")]
		private void Update()
		{
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x167D4B0", Offset = "0x167D4B0", VA = "0x167D4B0", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x167D4E4", Offset = "0x167D4E4", VA = "0x167D4E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x167D5E4", Offset = "0x167D5E4", VA = "0x167D5E4")]
		public TouchPad()
		{
		}
	}
	[Token(Token = "0x20000A7")]
	public abstract class VirtualInput
	{
		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980D80", Offset = "0x980D80")]
		private Vector3 <virtualMousePosition>k__BackingField;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualAxis> m_VirtualAxes;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualButton> m_VirtualButtons;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<string> m_AlwaysUseVirtual;

		[Token(Token = "0x17000032")]
		public Vector3 virtualMousePosition
		{
			[Token(Token = "0x60002CA")]
			[Address(RVA = "0x167ED50", Offset = "0x167ED50", VA = "0x167ED50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981860", Offset = "0x981860")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60002CB")]
			[Address(RVA = "0x167ED5C", Offset = "0x167ED5C", VA = "0x167ED5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981870", Offset = "0x981870")]
			private set
			{
			}
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x167ED68", Offset = "0x167ED68", VA = "0x167ED68")]
		public bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x167EDCC", Offset = "0x167EDCC", VA = "0x167EDCC")]
		public bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x167EE30", Offset = "0x167EE30", VA = "0x167EE30")]
		public void RegisterVirtualAxis(CrossPlatformInputManager.VirtualAxis axis)
		{
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x167EF90", Offset = "0x167EF90", VA = "0x167EF90")]
		public void RegisterVirtualButton(CrossPlatformInputManager.VirtualButton button)
		{
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x167F0F0", Offset = "0x167F0F0", VA = "0x167F0F0")]
		public void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x167F190", Offset = "0x167F190", VA = "0x167F190")]
		public void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x167F230", Offset = "0x167F230", VA = "0x167F230")]
		public CrossPlatformInputManager.VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x167F2CC", Offset = "0x167F2CC", VA = "0x167F2CC")]
		public void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x167F2D4", Offset = "0x167F2D4", VA = "0x167F2D4")]
		public void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x167F2DC", Offset = "0x167F2DC", VA = "0x167F2DC")]
		public void SetVirtualMousePositionZ(float f)
		{
		}

		[Token(Token = "0x60002D6")]
		public abstract float GetAxis(string name, bool raw);

		[Token(Token = "0x60002D7")]
		public abstract bool GetButton(string name);

		[Token(Token = "0x60002D8")]
		public abstract bool GetButtonDown(string name);

		[Token(Token = "0x60002D9")]
		public abstract bool GetButtonUp(string name);

		[Token(Token = "0x60002DA")]
		public abstract void SetButtonDown(string name);

		[Token(Token = "0x60002DB")]
		public abstract void SetButtonUp(string name);

		[Token(Token = "0x60002DC")]
		public abstract void SetAxisPositive(string name);

		[Token(Token = "0x60002DD")]
		public abstract void SetAxisNegative(string name);

		[Token(Token = "0x60002DE")]
		public abstract void SetAxisZero(string name);

		[Token(Token = "0x60002DF")]
		public abstract void SetAxis(string name, float value);

		[Token(Token = "0x60002E0")]
		public abstract Vector3 MousePosition();

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x167F2E4", Offset = "0x167F2E4", VA = "0x167F2E4")]
		protected VirtualInput()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput.PlatformSpecific
{
	[Token(Token = "0x20000A8")]
	public class MobileInput : VirtualInput
	{
		[Token(Token = "0x60002E2")]
		[Address(RVA = "0xE4390C", Offset = "0xE4390C", VA = "0xE4390C")]
		private void AddButton(string name)
		{
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0xE4399C", Offset = "0xE4399C", VA = "0xE4399C")]
		private void AddAxes(string name)
		{
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0xE43A2C", Offset = "0xE43A2C", VA = "0xE43A2C", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xE43AD0", Offset = "0xE43AD0", VA = "0xE43AD0", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xE43B74", Offset = "0xE43B74", VA = "0xE43B74", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0xE43C18", Offset = "0xE43C18", VA = "0xE43C18", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0xE43CC0", Offset = "0xE43CC0", VA = "0xE43CC0", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0xE43D68", Offset = "0xE43D68", VA = "0xE43D68", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0xE43E0C", Offset = "0xE43E0C", VA = "0xE43E0C", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0xE43EBC", Offset = "0xE43EBC", VA = "0xE43EBC", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0xE43F60", Offset = "0xE43F60", VA = "0xE43F60", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0xE44004", Offset = "0xE44004", VA = "0xE44004", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0xE440A8", Offset = "0xE440A8", VA = "0xE440A8", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0xE440B4", Offset = "0xE440B4", VA = "0xE440B4")]
		public MobileInput()
		{
		}
	}
	[Token(Token = "0x20000A9")]
	public class StandaloneInput : VirtualInput
	{
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x1132810", Offset = "0x1132810", VA = "0x1132810", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x1132824", Offset = "0x1132824", VA = "0x1132824", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x1132830", Offset = "0x1132830", VA = "0x1132830", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x113283C", Offset = "0x113283C", VA = "0x113283C", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x1132848", Offset = "0x1132848", VA = "0x1132848", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x113289C", Offset = "0x113289C", VA = "0x113289C", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x11328F0", Offset = "0x11328F0", VA = "0x11328F0", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x1132944", Offset = "0x1132944", VA = "0x1132944", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x1132998", Offset = "0x1132998", VA = "0x1132998", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x11329EC", Offset = "0x11329EC", VA = "0x11329EC", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x1132A40", Offset = "0x1132A40", VA = "0x1132A40", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x1132A48", Offset = "0x1132A48", VA = "0x1132A48")]
		public StandaloneInput()
		{
		}
	}
}
namespace Helper
{
	[Token(Token = "0x20000AA")]
	internal class CollectionMap<TKey, TValue> : ThreadSafeDictionary<TKey, TValue> where TValue : new()
	{
		[Token(Token = "0x60002FC")]
		public bool TryAddDefault(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FD")]
		public CollectionMap()
		{
		}
	}
	[Token(Token = "0x20000AB")]
	public static class ExceptionHelper
	{
		[Token(Token = "0x4000519")]
		private const int E_NOTIMPL = -2147467263;

		[Token(Token = "0x400051A")]
		private const int E_OUTOFMEMORY = -2147024882;

		[Token(Token = "0x400051B")]
		private const int E_INVALIDARG = -2147024809;

		[Token(Token = "0x400051C")]
		private const int E_POINTER = -2147467261;

		[Token(Token = "0x400051D")]
		private const int E_PENDING = -2147483638;

		[Token(Token = "0x400051E")]
		private const int E_FAIL = -2147467259;

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x120245C", Offset = "0x120245C", VA = "0x120245C")]
		public static void CheckLastError()
		{
		}
	}
	[Token(Token = "0x20000AC")]
	internal interface INativeWrapper
	{
		[Token(Token = "0x17000033")]
		IntPtr nativePtr
		{
			[Token(Token = "0x60002FF")]
			get;
		}
	}
	[Token(Token = "0x20000AD")]
	public static class NativeObjectCache
	{
		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Type, Dictionary<IntPtr, WeakReference>> _objectCache;

		[Token(Token = "0x6000300")]
		public static void AddObject<T>(IntPtr nativePtr, T obj) where T : class
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0xE5D4AC", Offset = "0xE5D4AC", VA = "0xE5D4AC")]
		public static void Flush()
		{
		}

		[Token(Token = "0x6000302")]
		public static void RemoveObject<T>(IntPtr nativePtr)
		{
		}

		[Token(Token = "0x6000303")]
		public static T GetObject<T>(IntPtr nativePtr) where T : class
		{
			return null;
		}

		[Token(Token = "0x6000304")]
		public static T CreateOrGetObject<T>(IntPtr nativePtr, Func<IntPtr, T> create) where T : class
		{
			return null;
		}
	}
	[Token(Token = "0x20000AE")]
	public static class NativeWrapper
	{
		[Token(Token = "0x6000306")]
		[Address(RVA = "0xE5D840", Offset = "0xE5D840", VA = "0xE5D840")]
		public static IntPtr GetNativePtr(object obj)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000AF")]
	public class SmartGCHandle : IDisposable
	{
		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle handle;

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x1132164", Offset = "0x1132164", VA = "0x1132164")]
		public SmartGCHandle(GCHandle handle)
		{
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x1132190", Offset = "0x1132190", VA = "0x1132190", Slot = "1")]
		~SmartGCHandle()
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x1132204", Offset = "0x1132204", VA = "0x1132204")]
		public IntPtr AddrOfPinnedObject()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x1132210", Offset = "0x1132210", VA = "0x1132210", Slot = "5")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x1132220", Offset = "0x1132220", VA = "0x1132220", Slot = "6")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x113222C", Offset = "0x113222C", VA = "0x113222C")]
		public static implicit operator GCHandle(SmartGCHandle other)
		{
			return default(GCHandle);
		}
	}
	[Token(Token = "0x20000B0")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x97E834", Offset = "0x97E834")]
	public class ThreadSafeDictionary<TKey, TValue>
	{
		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly Dictionary<TKey, TValue> _impl;

		[Token(Token = "0x17000034")]
		public TValue Item
		{
			[Token(Token = "0x600030D")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x600030E")]
			set
			{
			}
		}

		[Token(Token = "0x600030F")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000310")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000311")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000312")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000313")]
		public ThreadSafeDictionary()
		{
		}
	}
}
namespace Windows.Kinect
{
	[Token(Token = "0x20000B1")]
	public struct CameraIntrinsics
	{
		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980D90", Offset = "0x980D90")]
		private float <FocalLengthX>k__BackingField;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980DA0", Offset = "0x980DA0")]
		private float <FocalLengthY>k__BackingField;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980DB0", Offset = "0x980DB0")]
		private float <PrincipalPointX>k__BackingField;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980DC0", Offset = "0x980DC0")]
		private float <PrincipalPointY>k__BackingField;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980DD0", Offset = "0x980DD0")]
		private float <RadialDistortionSecondOrder>k__BackingField;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980DE0", Offset = "0x980DE0")]
		private float <RadialDistortionFourthOrder>k__BackingField;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980DF0", Offset = "0x980DF0")]
		private float <RadialDistortionSixthOrder>k__BackingField;

		[Token(Token = "0x17000035")]
		public float FocalLengthX
		{
			[Token(Token = "0x6000314")]
			[Address(RVA = "0x2074988", Offset = "0x2074988", VA = "0x2074988")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981880", Offset = "0x981880")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000315")]
			[Address(RVA = "0x2074990", Offset = "0x2074990", VA = "0x2074990")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9818B8", Offset = "0x9818B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000036")]
		public float FocalLengthY
		{
			[Token(Token = "0x6000316")]
			[Address(RVA = "0x2074998", Offset = "0x2074998", VA = "0x2074998")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9818C8", Offset = "0x9818C8")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000317")]
			[Address(RVA = "0x20749A0", Offset = "0x20749A0", VA = "0x20749A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981900", Offset = "0x981900")]
			set
			{
			}
		}

		[Token(Token = "0x17000037")]
		public float PrincipalPointX
		{
			[Token(Token = "0x6000318")]
			[Address(RVA = "0x20749A8", Offset = "0x20749A8", VA = "0x20749A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981910", Offset = "0x981910")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000319")]
			[Address(RVA = "0x20749B0", Offset = "0x20749B0", VA = "0x20749B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981948", Offset = "0x981948")]
			set
			{
			}
		}

		[Token(Token = "0x17000038")]
		public float PrincipalPointY
		{
			[Token(Token = "0x600031A")]
			[Address(RVA = "0x20749B8", Offset = "0x20749B8", VA = "0x20749B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981958", Offset = "0x981958")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x600031B")]
			[Address(RVA = "0x20749C0", Offset = "0x20749C0", VA = "0x20749C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981990", Offset = "0x981990")]
			set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public float RadialDistortionSecondOrder
		{
			[Token(Token = "0x600031C")]
			[Address(RVA = "0x20749C8", Offset = "0x20749C8", VA = "0x20749C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9819A0", Offset = "0x9819A0")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x600031D")]
			[Address(RVA = "0x20749D0", Offset = "0x20749D0", VA = "0x20749D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9819D8", Offset = "0x9819D8")]
			set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public float RadialDistortionFourthOrder
		{
			[Token(Token = "0x600031E")]
			[Address(RVA = "0x20749D8", Offset = "0x20749D8", VA = "0x20749D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9819E8", Offset = "0x9819E8")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x600031F")]
			[Address(RVA = "0x20749E0", Offset = "0x20749E0", VA = "0x20749E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981A20", Offset = "0x981A20")]
			set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public float RadialDistortionSixthOrder
		{
			[Token(Token = "0x6000320")]
			[Address(RVA = "0x20749E8", Offset = "0x20749E8", VA = "0x20749E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981A30", Offset = "0x981A30")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000321")]
			[Address(RVA = "0x20749F0", Offset = "0x20749F0", VA = "0x20749F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981A68", Offset = "0x981A68")]
			set
			{
			}
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x20749F8", Offset = "0x20749F8", VA = "0x20749F8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0x2074AE8", Offset = "0x2074AE8", VA = "0x2074AE8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x2074B84", Offset = "0x2074B84", VA = "0x2074B84")]
		public bool Equals(CameraIntrinsics obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0x2074C78", Offset = "0x2074C78", VA = "0x2074C78")]
		public static bool operator ==(CameraIntrinsics a, CameraIntrinsics b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0x2074CAC", Offset = "0x2074CAC", VA = "0x2074CAC")]
		public static bool operator !=(CameraIntrinsics a, CameraIntrinsics b)
		{
			return default(bool);
		}
	}
}
namespace uAudio
{
	[Token(Token = "0x20000B2")]
	public class dirLoop_UI : MonoBehaviour
	{
		[Token(Token = "0x20000B3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97E86C", Offset = "0x97E86C")]
		private sealed class <runNextSong>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000532")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000533")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000534")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public dirLoop_UI <>4__this;

			[Token(Token = "0x1700003C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000338")]
				[Address(RVA = "0x24A9578", Offset = "0x24A9578", VA = "0x24A9578", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700003D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600033A")]
				[Address(RVA = "0x24A95C0", Offset = "0x24A95C0", VA = "0x24A95C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000335")]
			[Address(RVA = "0x24A93EC", Offset = "0x24A93EC", VA = "0x24A93EC")]
			[DebuggerHidden]
			public <runNextSong>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6000336")]
			[Address(RVA = "0x24A9418", Offset = "0x24A9418", VA = "0x24A9418", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000337")]
			[Address(RVA = "0x24A941C", Offset = "0x24A941C", VA = "0x24A941C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000339")]
			[Address(RVA = "0x24A9580", Offset = "0x24A9580", VA = "0x24A9580", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20000B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97E87C", Offset = "0x97E87C")]
		private sealed class <spinPlay>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000535")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000536")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000537")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public dirLoop_UI <>4__this;

			[Token(Token = "0x1700003E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600033E")]
				[Address(RVA = "0x24A972C", Offset = "0x24A972C", VA = "0x24A972C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700003F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000340")]
				[Address(RVA = "0x24A9774", Offset = "0x24A9774", VA = "0x24A9774", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600033B")]
			[Address(RVA = "0x24A95C8", Offset = "0x24A95C8", VA = "0x24A95C8")]
			[DebuggerHidden]
			public <spinPlay>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600033C")]
			[Address(RVA = "0x24A95F4", Offset = "0x24A95F4", VA = "0x24A95F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600033D")]
			[Address(RVA = "0x24A95F8", Offset = "0x24A95F8", VA = "0x24A95F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600033F")]
			[Address(RVA = "0x24A9734", Offset = "0x24A9734", VA = "0x24A9734", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uAudioPlayer_UI my_uAudioPlayer_UI;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputField song_dirFilePath;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button bn_song_pre;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button bn_song_next;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button bn_dir_update;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<FileInfo> songs;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool readyNextSong;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int currentSong_index;

		[Token(Token = "0x6000327")]
		[Address(RVA = "0x1683584", Offset = "0x1683584", VA = "0x1683584")]
		private void Start()
		{
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x1683A4C", Offset = "0x1683A4C", VA = "0x1683A4C")]
		private void OnPlayBackState(PlayBackState valIN)
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0x1683BE4", Offset = "0x1683BE4", VA = "0x1683BE4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981A78", Offset = "0x981A78")]
		private IEnumerator runNextSong()
		{
			return null;
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0x1683C50", Offset = "0x1683C50", VA = "0x1683C50")]
		private void LoadSongList(DirectoryInfo dirIN)
		{
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0x1683EF0", Offset = "0x1683EF0", VA = "0x1683EF0")]
		private DirectoryInfo getTargetDir()
		{
			return null;
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0x1683888", Offset = "0x1683888", VA = "0x1683888")]
		private void LoadSongs()
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0x1684014", Offset = "0x1684014", VA = "0x1684014")]
		private FileInfo getNextSong()
		{
			return null;
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0x16840D4", Offset = "0x16840D4", VA = "0x16840D4")]
		private FileInfo getPreSong()
		{
			return null;
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0x16839C4", Offset = "0x16839C4", VA = "0x16839C4")]
		private FileInfo getCurrentSong()
		{
			return null;
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0x1684198", Offset = "0x1684198", VA = "0x1684198")]
		public void MoveNextSong()
		{
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0x1684298", Offset = "0x1684298", VA = "0x1684298")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981AD8", Offset = "0x981AD8")]
		private IEnumerator spinPlay()
		{
			return null;
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0x1684304", Offset = "0x1684304", VA = "0x1684304")]
		private void MovePreSong()
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0x168439C", Offset = "0x168439C", VA = "0x168439C")]
		private void Update_dir()
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0x16843A0", Offset = "0x16843A0", VA = "0x16843A0")]
		public dirLoop_UI()
		{
		}
	}
	[Token(Token = "0x20000B5")]
	public class uAudioPlayer : MonoBehaviour, IAudioPlayer, IDisposable
	{
		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uAudio.uAudio_backend.uAudio _uAudio;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource myAudioSource;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> Update_UI_songTime;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string targetFile;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Action<PlayBackState> _sendPlaybackState;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool updateTime;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private PlayBackState State;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool SongDone;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool flare_SongEnd;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float[] _getAudioData_sampler;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MpegFile playbackDevice;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ReadFullyStream readFullyStream;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float start_volume_Offset;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _loadedTarget;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private TimeSpan endSongTime;

		[Token(Token = "0x17000040")]
		public Action<PlayBackState> sendPlaybackState
		{
			[Token(Token = "0x6000341")]
			[Address(RVA = "0x1685128", Offset = "0x1685128", VA = "0x1685128", Slot = "21")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000342")]
			[Address(RVA = "0x1685130", Offset = "0x1685130", VA = "0x1685130", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000041")]
		public int SongLength
		{
			[Token(Token = "0x6000343")]
			[Address(RVA = "0x1685138", Offset = "0x1685138", VA = "0x1685138", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000042")]
		public float Volume_Offset
		{
			[Token(Token = "0x6000344")]
			[Address(RVA = "0x1685154", Offset = "0x1685154", VA = "0x1685154")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000345")]
			[Address(RVA = "0x168515C", Offset = "0x168515C", VA = "0x168515C")]
			set
			{
			}
		}

		[Token(Token = "0x17000043")]
		public uAudio.uAudio_backend.uAudio UAudio
		{
			[Token(Token = "0x6000346")]
			[Address(RVA = "0x168519C", Offset = "0x168519C", VA = "0x168519C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000044")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000347")]
			[Address(RVA = "0x1684264", Offset = "0x1684264", VA = "0x1684264")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000045")]
		private Action uAudio.uAudio_backend.IAudioPlayer.SLEEP
		{
			[Token(Token = "0x6000348")]
			[Address(RVA = "0x1685294", Offset = "0x1685294", VA = "0x1685294", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000349")]
			[Address(RVA = "0x1685320", Offset = "0x1685320", VA = "0x1685320", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000046")]
		public string AudioTitle
		{
			[Token(Token = "0x600034B")]
			[Address(RVA = "0x16853B4", Offset = "0x16853B4", VA = "0x16853B4", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000047")]
		public TimeSpan CurrentTime
		{
			[Token(Token = "0x600034C")]
			[Address(RVA = "0x1683BC0", Offset = "0x1683BC0", VA = "0x1683BC0", Slot = "10")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x600034D")]
			[Address(RVA = "0x168541C", Offset = "0x168541C", VA = "0x168541C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000048")]
		public float Pan
		{
			[Token(Token = "0x600034E")]
			[Address(RVA = "0x1685430", Offset = "0x1685430", VA = "0x1685430", Slot = "23")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600034F")]
			[Address(RVA = "0x16854C4", Offset = "0x16854C4", VA = "0x16854C4", Slot = "24")]
			set
			{
			}
		}

		[Token(Token = "0x17000049")]
		public TimeSpan TotalTime
		{
			[Token(Token = "0x6000350")]
			[Address(RVA = "0x1683B40", Offset = "0x1683B40", VA = "0x1683B40", Slot = "9")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x1700004A")]
		public float Volume
		{
			[Token(Token = "0x6000351")]
			[Address(RVA = "0x1685568", Offset = "0x1685568", VA = "0x1685568", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000352")]
			[Address(RVA = "0x1685584", Offset = "0x1685584", VA = "0x1685584", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700004B")]
		public float Volume_BackEnd
		{
			[Token(Token = "0x6000353")]
			[Address(RVA = "0x16855A0", Offset = "0x16855A0", VA = "0x16855A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000354")]
			[Address(RVA = "0x16855BC", Offset = "0x16855BC", VA = "0x16855BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700004C")]
		public PlayBackState PlaybackState
		{
			[Token(Token = "0x6000355")]
			[Address(RVA = "0x1685610", Offset = "0x1685610", VA = "0x1685610", Slot = "5")]
			get
			{
				return default(PlayBackState);
			}
		}

		[Token(Token = "0x1700004D")]
		private string uAudio.uAudio_backend.IAudioPlayer.current_TargetFile_Loaded
		{
			[Token(Token = "0x6000357")]
			[Address(RVA = "0x1685634", Offset = "0x1685634", VA = "0x1685634", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x16853AC", Offset = "0x16853AC", VA = "0x16853AC")]
		private void uAudio_stopped()
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x1685618", Offset = "0x1685618", VA = "0x1685618")]
		public void ChangeCurrentVolume(float volumeIN)
		{
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x168563C", Offset = "0x168563C", VA = "0x168563C", Slot = "25")]
		public void ChangeCurrentTime(TimeSpan timeIN)
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x1685650", Offset = "0x1685650", VA = "0x1685650")]
		private void Update()
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x168597C", Offset = "0x168597C", VA = "0x168597C", Slot = "16")]
		public void LoadFile(string targetFileIN)
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x16859E4", Offset = "0x16859E4", VA = "0x16859E4", Slot = "17")]
		public void SetFile(string targetFileIN)
		{
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x1685708", Offset = "0x1685708", VA = "0x1685708")]
		private void SongEnd()
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x16859EC", Offset = "0x16859EC", VA = "0x16859EC", Slot = "14")]
		public void Play([Optional] TimeSpan? startOff)
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x168639C", Offset = "0x168639C", VA = "0x168639C")]
		private void Song_Stream_Loop(float[] data)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x1686170", Offset = "0x1686170", VA = "0x1686170", Slot = "13")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x1686548", Offset = "0x1686548", VA = "0x1686548", Slot = "15")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x1686558", Offset = "0x1686558", VA = "0x1686558")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x168655C", Offset = "0x168655C", VA = "0x168655C", Slot = "20")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x16865A8", Offset = "0x16865A8", VA = "0x16865A8")]
		public void Resume()
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0x16865E8", Offset = "0x16865E8", VA = "0x16865E8")]
		public uAudioPlayer()
		{
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0x1686664", Offset = "0x1686664", VA = "0x1686664")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981BD8", Offset = "0x981BD8")]
		private void <get_UAudio>b__22_0(PlayBackState c)
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public class uAudioPlayer_UI : MonoBehaviour
	{
		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uAudioPlayer my_uAudioPlayer;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputField songFilePath;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Slider songTime;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text songCurrentTime;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text songMaxTime;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button bn_play;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button bn_pause;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button bn_stop;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Slider songVolume;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Toggle DontResetTime;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string targetFile;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float myLastSetTime;

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x16866C8", Offset = "0x16866C8", VA = "0x16866C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0x1686D78", Offset = "0x1686D78", VA = "0x1686D78")]
		public void send_data(PlayBackState songState)
		{
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0x1686D7C", Offset = "0x1686D7C", VA = "0x1686D7C")]
		public void Play()
		{
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0x1684274", Offset = "0x1684274", VA = "0x1684274")]
		public void Stop()
		{
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x168703C", Offset = "0x168703C", VA = "0x168703C")]
		public void onSongVolume_Change(float volumeIN)
		{
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x1687064", Offset = "0x1687064", VA = "0x1687064")]
		public void onSongTime_Change(float timeIN)
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x1686D5C", Offset = "0x1686D5C", VA = "0x1686D5C")]
		private void onSongPath_Change(string PathIN)
		{
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0x1683A30", Offset = "0x1683A30", VA = "0x1683A30")]
		public void setSongPath_Change(string PathIN)
		{
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x1687110", Offset = "0x1687110", VA = "0x1687110")]
		public void Update_UI_songTime(float newTimeIN)
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x168733C", Offset = "0x168733C", VA = "0x168733C")]
		public uAudioPlayer_UI()
		{
		}
	}
	[Token(Token = "0x20000B7")]
	public class uAudioStreamer : MonoBehaviour, IAudioPlayer, IDisposable
	{
		[Token(Token = "0x20000B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97E88C", Offset = "0x97E88C")]
		private sealed class <LoopRead>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400055F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000560")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000561")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uAudioStreamer <>4__this;

			[Token(Token = "0x1700005C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60003A5")]
				[Address(RVA = "0x24A99CC", Offset = "0x24A99CC", VA = "0x24A99CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700005D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60003A7")]
				[Address(RVA = "0x24A9A14", Offset = "0x24A9A14", VA = "0x24A9A14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60003A2")]
			[Address(RVA = "0x24A977C", Offset = "0x24A977C", VA = "0x24A977C")]
			[DebuggerHidden]
			public <LoopRead>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x60003A3")]
			[Address(RVA = "0x24A97A8", Offset = "0x24A97A8", VA = "0x24A97A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60003A4")]
			[Address(RVA = "0x24A97AC", Offset = "0x24A97AC", VA = "0x24A97AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60003A6")]
			[Address(RVA = "0x24A99D4", Offset = "0x24A99D4", VA = "0x24A99D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20000B9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97E89C", Offset = "0x97E89C")]
		private sealed class <firePlay>d__56 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000562")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000563")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000564")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uAudioStreamer <>4__this;

			[Token(Token = "0x4000565")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TimeSpan? OffsetStart;

			[Token(Token = "0x1700005E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60003AB")]
				[Address(RVA = "0x24A9D24", Offset = "0x24A9D24", VA = "0x24A9D24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700005F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60003AD")]
				[Address(RVA = "0x24A9D6C", Offset = "0x24A9D6C", VA = "0x24A9D6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60003A8")]
			[Address(RVA = "0x24A9A1C", Offset = "0x24A9A1C", VA = "0x24A9A1C")]
			[DebuggerHidden]
			public <firePlay>d__56(int <>1__state)
			{
			}

			[Token(Token = "0x60003A9")]
			[Address(RVA = "0x24A9A48", Offset = "0x24A9A48", VA = "0x24A9A48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60003AA")]
			[Address(RVA = "0x24A9A4C", Offset = "0x24A9A4C", VA = "0x24A9A4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60003AC")]
			[Address(RVA = "0x24A9D2C", Offset = "0x24A9D2C", VA = "0x24A9D2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action<PlayBackState> _sendPlaybackState;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool betaNativeThreadBuffering;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string targetFilePath;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string theUrl;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Thread myThreadPump;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Thread myThreadPump2;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool callUpdateNeeded;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public uAudioPlayer my_uAudioPlayer;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float minBufferTime;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float maxBufferTime;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private uAudio_Streaming _theAudioStream;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private IEnumerator myLoopRead;

		[Token(Token = "0x1700004E")]
		public Action<PlayBackState> sendPlaybackState
		{
			[Token(Token = "0x6000370")]
			[Address(RVA = "0x1687344", Offset = "0x1687344", VA = "0x1687344", Slot = "21")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000371")]
			[Address(RVA = "0x168734C", Offset = "0x168734C", VA = "0x168734C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700004F")]
		private uAudio_Streaming TheAudioStream
		{
			[Token(Token = "0x6000374")]
			[Address(RVA = "0x168735C", Offset = "0x168735C", VA = "0x168735C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		private Action uAudio.uAudio_backend.IAudioPlayer.SLEEP
		{
			[Token(Token = "0x6000375")]
			[Address(RVA = "0x16876B4", Offset = "0x16876B4", VA = "0x16876B4", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000376")]
			[Address(RVA = "0x1687740", Offset = "0x1687740", VA = "0x1687740", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000051")]
		public string AudioTitle
		{
			[Token(Token = "0x6000377")]
			[Address(RVA = "0x16877CC", Offset = "0x16877CC", VA = "0x16877CC", Slot = "23")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		private string uAudio.uAudio_backend.IAudioPlayer.current_TargetFile_Loaded
		{
			[Token(Token = "0x6000378")]
			[Address(RVA = "0x16877D4", Offset = "0x16877D4", VA = "0x16877D4", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		public PlayBackState PlaybackState
		{
			[Token(Token = "0x6000379")]
			[Address(RVA = "0x16877DC", Offset = "0x16877DC", VA = "0x16877DC", Slot = "5")]
			get
			{
				return default(PlayBackState);
			}
		}

		[Token(Token = "0x17000054")]
		public float Volume
		{
			[Token(Token = "0x600037A")]
			[Address(RVA = "0x1687850", Offset = "0x1687850", VA = "0x1687850", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600037B")]
			[Address(RVA = "0x1687878", Offset = "0x1687878", VA = "0x1687878", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000055")]
		public TimeSpan TotalTime
		{
			[Token(Token = "0x600037C")]
			[Address(RVA = "0x16878A0", Offset = "0x16878A0", VA = "0x16878A0", Slot = "9")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x17000056")]
		public int SongLength
		{
			[Token(Token = "0x600037D")]
			[Address(RVA = "0x1687904", Offset = "0x1687904", VA = "0x1687904", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000057")]
		public TimeSpan CurrentTime
		{
			[Token(Token = "0x600037E")]
			[Address(RVA = "0x168790C", Offset = "0x168790C", VA = "0x168790C", Slot = "10")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x600037F")]
			[Address(RVA = "0x1687970", Offset = "0x1687970", VA = "0x1687970", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000058")]
		public float Pan
		{
			[Token(Token = "0x6000380")]
			[Address(RVA = "0x1687974", Offset = "0x1687974", VA = "0x1687974", Slot = "24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000381")]
			[Address(RVA = "0x168798C", Offset = "0x168798C", VA = "0x168798C", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x17000059")]
		public bool ForceBuffering
		{
			[Token(Token = "0x6000382")]
			[Address(RVA = "0x16879A4", Offset = "0x16879A4", VA = "0x16879A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000383")]
			[Address(RVA = "0x16879DC", Offset = "0x16879DC", VA = "0x16879DC")]
			set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public bool BetaNativeThreadBuffering
		{
			[Token(Token = "0x6000384")]
			[Address(RVA = "0x1687A1C", Offset = "0x1687A1C", VA = "0x1687A1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000385")]
			[Address(RVA = "0x1687A64", Offset = "0x1687A64", VA = "0x1687A64")]
			set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public double BufferedTime
		{
			[Token(Token = "0x6000388")]
			[Address(RVA = "0x1687AE0", Offset = "0x1687AE0", VA = "0x1687AE0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0x1687354", Offset = "0x1687354", VA = "0x1687354")]
		private void theAudioStream_sendPlaying()
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x1687358", Offset = "0x1687358", VA = "0x1687358", Slot = "22")]
		public void ChangeCurrentTime(TimeSpan timeIN)
		{
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0x1687A70", Offset = "0x1687A70", VA = "0x1687A70")]
		private void onSongVolume_Change(float volumeIN)
		{
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0x168738C", Offset = "0x168738C", VA = "0x168738C")]
		private void build_theAudioStream()
		{
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0x1687AFC", Offset = "0x1687AFC", VA = "0x1687AFC")]
		private void loadAudio()
		{
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0x1687A74", Offset = "0x1687A74", VA = "0x1687A74")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981BE8", Offset = "0x981BE8")]
		private IEnumerator LoopRead()
		{
			return null;
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x1687BF0", Offset = "0x1687BF0", VA = "0x1687BF0")]
		private void theAudioStream_sendStartLoopPump()
		{
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0x1687BFC", Offset = "0x1687BFC", VA = "0x1687BFC")]
		private void theAudioStream_sendStopLoopPump()
		{
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0x1687C00", Offset = "0x1687C00", VA = "0x1687C00")]
		private void Update()
		{
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x1687CD8", Offset = "0x1687CD8", VA = "0x1687CD8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981C48", Offset = "0x981C48")]
		private IEnumerator firePlay(TimeSpan? OffsetStart)
		{
			return null;
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0x1687D58", Offset = "0x1687D58", VA = "0x1687D58")]
		public void PlayAudioFile(InputField FileNameIN, TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0x1687D70", Offset = "0x1687D70", VA = "0x1687D70")]
		public void PlayAudioStream(string FileNameIN, TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x1687E44", Offset = "0x1687E44", VA = "0x1687E44")]
		public void SetStreamURL(string streamURL)
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x1687E4C", Offset = "0x1687E4C", VA = "0x1687E4C")]
		public void PlayPauseAudio()
		{
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x1687F04", Offset = "0x1687F04", VA = "0x1687F04")]
		private string loadLinkFile(string fileIN)
		{
			return null;
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x1687E00", Offset = "0x1687E00", VA = "0x1687E00", Slot = "14")]
		public void Play([Optional] TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x1687FE0", Offset = "0x1687FE0", VA = "0x1687FE0")]
		private void RunPlay()
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x1688100", Offset = "0x1688100", VA = "0x1688100", Slot = "13")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x1688114", Offset = "0x1688114", VA = "0x1688114", Slot = "15")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x1688188", Offset = "0x1688188", VA = "0x1688188")]
		public void Halt()
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x1687DD8", Offset = "0x1687DD8", VA = "0x1687DD8", Slot = "16")]
		public void LoadFile(string targetFile)
		{
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x16881B8", Offset = "0x16881B8", VA = "0x16881B8", Slot = "17")]
		public void SetFile(string targetFile)
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x16881C0", Offset = "0x16881C0", VA = "0x16881C0")]
		public void SetURL(string targetFile)
		{
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x16881C8", Offset = "0x16881C8", VA = "0x16881C8")]
		private void theAudioStream_Disposed(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x16881FC", Offset = "0x16881FC", VA = "0x16881FC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x1688200", Offset = "0x1688200", VA = "0x1688200", Slot = "20")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x16882B0", Offset = "0x16882B0", VA = "0x16882B0")]
		public uAudioStreamer()
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x1688318", Offset = "0x1688318", VA = "0x1688318")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981CA8", Offset = "0x981CA8")]
		private void <build_theAudioStream>b__47_0(PlayBackState c)
		{
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x168837C", Offset = "0x168837C", VA = "0x168837C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981CB8", Offset = "0x981CB8")]
		private void <loadAudio>b__50_0()
		{
		}
	}
	[Token(Token = "0x20000BA")]
	public class uAudioStreamer_UI : MonoBehaviour, IAudioPlayer, IDisposable
	{
		[Token(Token = "0x20000BB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97E8AC", Offset = "0x97E8AC")]
		private sealed class <updateBuffer>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uAudioStreamer_UI <>4__this;

			[Token(Token = "0x1700006B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60003D6")]
				[Address(RVA = "0x24A9EA8", Offset = "0x24A9EA8", VA = "0x24A9EA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700006C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60003D8")]
				[Address(RVA = "0x24A9EF0", Offset = "0x24A9EF0", VA = "0x24A9EF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60003D3")]
			[Address(RVA = "0x24A9D74", Offset = "0x24A9D74", VA = "0x24A9D74")]
			[DebuggerHidden]
			public <updateBuffer>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x60003D4")]
			[Address(RVA = "0x24A9DA0", Offset = "0x24A9DA0", VA = "0x24A9DA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60003D5")]
			[Address(RVA = "0x24A9DA4", Offset = "0x24A9DA4", VA = "0x24A9DA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60003D7")]
			[Address(RVA = "0x24A9EB0", Offset = "0x24A9EB0", VA = "0x24A9EB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputField urlInput;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Slider Buffer;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button bn_play;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button bn_pause;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button bn_stop;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Slider SongVolume;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string targetFilePath;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public uAudioStreamer my_uAudioStreamer;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool force_buffer;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Coroutine bufferLoop;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool halt;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private IEnumerator updateBufferLoop;

		[Token(Token = "0x17000060")]
		public Action<PlayBackState> sendPlaybackState
		{
			[Token(Token = "0x60003AF")]
			[Address(RVA = "0x16884C4", Offset = "0x16884C4", VA = "0x16884C4", Slot = "21")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003B0")]
			[Address(RVA = "0x16884E0", Offset = "0x16884E0", VA = "0x16884E0", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000061")]
		private Action uAudio.uAudio_backend.IAudioPlayer.SLEEP
		{
			[Token(Token = "0x60003B1")]
			[Address(RVA = "0x16884FC", Offset = "0x16884FC", VA = "0x16884FC", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003B2")]
			[Address(RVA = "0x1688588", Offset = "0x1688588", VA = "0x1688588", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000062")]
		public string AudioTitle
		{
			[Token(Token = "0x60003B3")]
			[Address(RVA = "0x1688614", Offset = "0x1688614", VA = "0x1688614", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		private string uAudio.uAudio_backend.IAudioPlayer.current_TargetFile_Loaded
		{
			[Token(Token = "0x60003B4")]
			[Address(RVA = "0x168861C", Offset = "0x168861C", VA = "0x168861C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000064")]
		public PlayBackState PlaybackState
		{
			[Token(Token = "0x60003B5")]
			[Address(RVA = "0x1688624", Offset = "0x1688624", VA = "0x1688624", Slot = "5")]
			get
			{
				return default(PlayBackState);
			}
		}

		[Token(Token = "0x17000065")]
		public float Volume
		{
			[Token(Token = "0x60003B8")]
			[Address(RVA = "0x1688698", Offset = "0x1688698", VA = "0x1688698", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003B9")]
			[Address(RVA = "0x16886B0", Offset = "0x16886B0", VA = "0x16886B0", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public TimeSpan TotalTime
		{
			[Token(Token = "0x60003BA")]
			[Address(RVA = "0x16886C8", Offset = "0x16886C8", VA = "0x16886C8", Slot = "9")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x17000067")]
		public int SongLength
		{
			[Token(Token = "0x60003BB")]
			[Address(RVA = "0x168872C", Offset = "0x168872C", VA = "0x168872C", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000068")]
		public TimeSpan CurrentTime
		{
			[Token(Token = "0x60003BC")]
			[Address(RVA = "0x1688734", Offset = "0x1688734", VA = "0x1688734", Slot = "10")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x60003BD")]
			[Address(RVA = "0x1688798", Offset = "0x1688798", VA = "0x1688798", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public float Pan
		{
			[Token(Token = "0x60003BE")]
			[Address(RVA = "0x168879C", Offset = "0x168879C", VA = "0x168879C", Slot = "23")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003BF")]
			[Address(RVA = "0x16887C0", Offset = "0x16887C0", VA = "0x16887C0", Slot = "24")]
			set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public bool ForceBuffering
		{
			[Token(Token = "0x60003C0")]
			[Address(RVA = "0x16887E4", Offset = "0x16887E4", VA = "0x16887E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003C1")]
			[Address(RVA = "0x16887FC", Offset = "0x16887FC", VA = "0x16887FC")]
			set
			{
			}
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x1688458", Offset = "0x1688458", VA = "0x1688458")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981D68", Offset = "0x981D68")]
		private IEnumerator updateBuffer()
		{
			return null;
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x168863C", Offset = "0x168863C", VA = "0x168863C")]
		public void ChangeCurrentVolume(Slider volumeSlider)
		{
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x1688680", Offset = "0x1688680", VA = "0x1688680")]
		public void ChangeCurrentVolume(float volumeIN)
		{
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x1688818", Offset = "0x1688818", VA = "0x1688818")]
		private void Start()
		{
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x1688C9C", Offset = "0x1688C9C", VA = "0x1688C9C")]
		public void Play(PlayBackState v)
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x1688D9C", Offset = "0x1688D9C", VA = "0x1688D9C")]
		private void onSongVolume_Change(float volumeIN)
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x1688DB4", Offset = "0x1688DB4", VA = "0x1688DB4")]
		private void onSongPath_Change(string PathIN)
		{
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x1688DBC", Offset = "0x1688DBC", VA = "0x1688DBC")]
		public void SetStreamURL(string streamURL)
		{
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x1688DD8", Offset = "0x1688DD8", VA = "0x1688DD8")]
		private string loadLinkFile(string fileIN)
		{
			return null;
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x1688EE8", Offset = "0x1688EE8", VA = "0x1688EE8")]
		private void startPlay()
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x1689058", Offset = "0x1689058", VA = "0x1689058", Slot = "14")]
		public void Play([Optional] TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x168910C", Offset = "0x168910C", VA = "0x168910C", Slot = "13")]
		public void Pause()
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x1689134", Offset = "0x1689134", VA = "0x1689134", Slot = "15")]
		public void Stop()
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x16891E8", Offset = "0x16891E8", VA = "0x16891E8", Slot = "25")]
		public void ChangeCurrentTime(TimeSpan timeIN)
		{
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x1688ECC", Offset = "0x1688ECC", VA = "0x1688ECC", Slot = "16")]
		public void LoadFile(string targetFile)
		{
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x16891EC", Offset = "0x16891EC", VA = "0x16891EC", Slot = "17")]
		public void SetFile(string targetFile)
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x1689208", Offset = "0x1689208", VA = "0x1689208")]
		public void SetURL(string targetFile)
		{
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x1689224", Offset = "0x1689224", VA = "0x1689224")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x16892D8", Offset = "0x16892D8", VA = "0x16892D8", Slot = "20")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x16892F0", Offset = "0x16892F0", VA = "0x16892F0")]
		public uAudioStreamer_UI()
		{
		}
	}
}
namespace Steamworks
{
	[Token(Token = "0x20000BC")]
	public static class CallbackDispatcher
	{
		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x20748A8", Offset = "0x20748A8", VA = "0x20748A8")]
		public static void ExceptionHandler(Exception e)
		{
		}
	}
	[Token(Token = "0x20000BD")]
	public sealed class Callback<T> : IDisposable
	{
		[Token(Token = "0x20000BE")]
		public delegate void DispatchDelegate(T param);

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bGameServer;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bDisposed;

		[Token(Token = "0x14000001")]
		private event DispatchDelegate m_Func
		{
			[Token(Token = "0x60003DA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981E18", Offset = "0x981E18")]
			add
			{
			}
			[Token(Token = "0x60003DB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981E28", Offset = "0x981E28")]
			remove
			{
			}
		}

		[Token(Token = "0x60003DC")]
		public static Callback<T> Create(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60003DD")]
		public static Callback<T> CreateGameServer(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60003DE")]
		public Callback(DispatchDelegate func, bool bGameServer = false)
		{
		}

		[Token(Token = "0x60003DF")]
		~Callback()
		{
		}

		[Token(Token = "0x60003E0")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60003E1")]
		public void Register(DispatchDelegate func)
		{
		}

		[Token(Token = "0x60003E2")]
		public void Unregister()
		{
		}

		[Token(Token = "0x60003E3")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x60003E4")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x60003E5")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x60003E6")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x60003E7")]
		private void BuildCCallbackBase()
		{
		}
	}
	[Token(Token = "0x20000BF")]
	public sealed class CallResult<T> : IDisposable
	{
		[Token(Token = "0x20000C0")]
		public delegate void APIDispatchDelegate(T param, bool bIOFailure);

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private SteamAPICall_t m_hAPICall;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bDisposed;

		[Token(Token = "0x1700006D")]
		public SteamAPICall_t Handle
		{
			[Token(Token = "0x60003EE")]
			get
			{
				return default(SteamAPICall_t);
			}
		}

		[Token(Token = "0x14000002")]
		private event APIDispatchDelegate m_Func
		{
			[Token(Token = "0x60003EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981E38", Offset = "0x981E38")]
			add
			{
			}
			[Token(Token = "0x60003ED")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981E48", Offset = "0x981E48")]
			remove
			{
			}
		}

		[Token(Token = "0x60003EF")]
		public static CallResult<T> Create([Optional] APIDispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60003F0")]
		public CallResult([Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x60003F1")]
		~CallResult()
		{
		}

		[Token(Token = "0x60003F2")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60003F3")]
		public void Set(SteamAPICall_t hAPICall, [Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x60003F4")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x60003F5")]
		public void Cancel()
		{
		}

		[Token(Token = "0x60003F6")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x60003F7")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x60003F8")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall_)
		{
		}

		[Token(Token = "0x60003F9")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x60003FA")]
		private void BuildCCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x20000C1")]
	internal class CCallbackBase
	{
		[Token(Token = "0x4000585")]
		public const byte k_ECallbackFlagsRegistered = 1;

		[Token(Token = "0x4000586")]
		public const byte k_ECallbackFlagsGameServer = 2;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_vfptr;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte m_nCallbackFlags;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_iCallback;

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x2074018", Offset = "0x2074018", VA = "0x2074018")]
		public CCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x20000C2")]
	internal class CCallbackBaseVTable
	{
		[Token(Token = "0x20000C3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E8BC", Offset = "0x97E8BC")]
		public delegate void RunCBDel(IntPtr thisptr, IntPtr pvParam);

		[Token(Token = "0x20000C4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E8D0", Offset = "0x97E8D0")]
		public delegate void RunCRDel(IntPtr thisptr, IntPtr pvParam, bool bIOFailure, ulong hSteamAPICall);

		[Token(Token = "0x20000C5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E8E4", Offset = "0x97E8E4")]
		public delegate int GetCallbackSizeBytesDel(IntPtr thisptr);

		[Token(Token = "0x400058A")]
		private const CallingConvention cc = CallingConvention.Cdecl;

		[NonSerialized]
		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RunCBDel m_RunCallback;

		[NonSerialized]
		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RunCRDel m_RunCallResult;

		[NonSerialized]
		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GetCallbackSizeBytesDel m_GetCallbackSizeBytes;

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x2074020", Offset = "0x2074020", VA = "0x2074020")]
		public CCallbackBaseVTable()
		{
		}
	}
	[Token(Token = "0x20000C6")]
	internal class CallbackIdentities
	{
		[Token(Token = "0x600040D")]
		[Address(RVA = "0x20748AC", Offset = "0x20748AC", VA = "0x20748AC")]
		public static int GetCallbackIdentity(Type callbackStruct)
		{
			return default(int);
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x2074944", Offset = "0x2074944", VA = "0x2074944")]
		public CallbackIdentities()
		{
		}
	}
	[Token(Token = "0x20000C7")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x97E8F8", Offset = "0x97E8F8")]
	internal class CallbackIdentityAttribute : Attribute
	{
		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980E30", Offset = "0x980E30")]
		private int <Identity>k__BackingField;

		[Token(Token = "0x1700006E")]
		public int Identity
		{
			[Token(Token = "0x600040F")]
			[Address(RVA = "0x207494C", Offset = "0x207494C", VA = "0x207494C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981E58", Offset = "0x981E58")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000410")]
			[Address(RVA = "0x2074954", Offset = "0x2074954", VA = "0x2074954")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981E68", Offset = "0x981E68")]
			set
			{
			}
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x207495C", Offset = "0x207495C", VA = "0x207495C")]
		public CallbackIdentityAttribute(int callbackNum)
		{
		}
	}
	[Token(Token = "0x20000C8")]
	public class ISteamMatchmakingServerListResponse
	{
		[Token(Token = "0x20000C9")]
		public delegate void ServerResponded(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20000CA")]
		public delegate void ServerFailedToRespond(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20000CB")]
		public delegate void RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response);

		[Token(Token = "0x20000CC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E92C", Offset = "0x97E92C")]
		private delegate void InternalServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20000CD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E940", Offset = "0x97E940")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20000CE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E954", Offset = "0x97E954")]
		private delegate void InternalRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response);

		[StructLayout(0)]
		[Token(Token = "0x20000CF")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x4000596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4000597")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRefreshComplete m_VTRefreshComplete;

			[Token(Token = "0x6000430")]
			[Address(RVA = "0x168F4B4", Offset = "0x168F4B4", VA = "0x168F4B4")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RefreshComplete m_RefreshComplete;

		[Token(Token = "0x6000412")]
		[Address(RVA = "0xE382C4", Offset = "0xE382C4", VA = "0xE382C4")]
		public ISteamMatchmakingServerListResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond, RefreshComplete onRefreshComplete)
		{
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0xE3856C", Offset = "0xE3856C", VA = "0xE3856C", Slot = "1")]
		~ISteamMatchmakingServerListResponse()
		{
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0xE3866C", Offset = "0xE3866C", VA = "0xE3866C")]
		private void InternalOnServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0xE38690", Offset = "0xE38690", VA = "0xE38690")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0xE386B4", Offset = "0xE386B4", VA = "0xE386B4")]
		private void InternalOnRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
		{
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0xE386D8", Offset = "0xE386D8", VA = "0xE386D8")]
		public static explicit operator IntPtr(ISteamMatchmakingServerListResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000D0")]
	public class ISteamMatchmakingPingResponse
	{
		[Token(Token = "0x20000D1")]
		public delegate void ServerResponded(gameserveritem_t server);

		[Token(Token = "0x20000D2")]
		public delegate void ServerFailedToRespond();

		[Token(Token = "0x20000D3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E968", Offset = "0x97E968")]
		private delegate void InternalServerResponded(IntPtr thisptr, gameserveritem_t server);

		[Token(Token = "0x20000D4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E97C", Offset = "0x97E97C")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x20000D5")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x400059D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x400059E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[Token(Token = "0x6000446")]
			[Address(RVA = "0x168B780", Offset = "0x168B780", VA = "0x168B780")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x6000431")]
		[Address(RVA = "0xE37524", Offset = "0xE37524", VA = "0xE37524")]
		public ISteamMatchmakingPingResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond)
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0xE37778", Offset = "0xE37778", VA = "0xE37778", Slot = "1")]
		~ISteamMatchmakingPingResponse()
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0xE37878", Offset = "0xE37878", VA = "0xE37878")]
		private void InternalOnServerResponded(IntPtr thisptr, gameserveritem_t server)
		{
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0xE37898", Offset = "0xE37898", VA = "0xE37898")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0xE378B4", Offset = "0xE378B4", VA = "0xE378B4")]
		public static explicit operator IntPtr(ISteamMatchmakingPingResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000D6")]
	public class ISteamMatchmakingPlayersResponse
	{
		[Token(Token = "0x20000D7")]
		public delegate void AddPlayerToList(string pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x20000D8")]
		public delegate void PlayersFailedToRespond();

		[Token(Token = "0x20000D9")]
		public delegate void PlayersRefreshComplete();

		[Token(Token = "0x20000DA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E990", Offset = "0x97E990")]
		public delegate void InternalAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x20000DB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E9A4", Offset = "0x97E9A4")]
		public delegate void InternalPlayersFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x20000DC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E9B8", Offset = "0x97E9B8")]
		public delegate void InternalPlayersRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x20000DD")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x40005A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalAddPlayerToList m_VTAddPlayerToList;

			[NonSerialized]
			[Token(Token = "0x40005A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalPlayersFailedToRespond m_VTPlayersFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x40005A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalPlayersRefreshComplete m_VTPlayersRefreshComplete;

			[Token(Token = "0x6000465")]
			[Address(RVA = "0x168CBD4", Offset = "0x168CBD4", VA = "0x168CBD4")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AddPlayerToList m_AddPlayerToList;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayersFailedToRespond m_PlayersFailedToRespond;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlayersRefreshComplete m_PlayersRefreshComplete;

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xE378D0", Offset = "0xE378D0", VA = "0xE378D0")]
		public ISteamMatchmakingPlayersResponse(AddPlayerToList onAddPlayerToList, PlayersFailedToRespond onPlayersFailedToRespond, PlayersRefreshComplete onPlayersRefreshComplete)
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0xE37B78", Offset = "0xE37B78", VA = "0xE37B78", Slot = "1")]
		~ISteamMatchmakingPlayersResponse()
		{
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0xE37C78", Offset = "0xE37C78", VA = "0xE37C78")]
		private void InternalOnAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed)
		{
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0xE37E20", Offset = "0xE37E20", VA = "0xE37E20")]
		private void InternalOnPlayersFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xE37E3C", Offset = "0xE37E3C", VA = "0xE37E3C")]
		private void InternalOnPlayersRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0xE37E58", Offset = "0xE37E58", VA = "0xE37E58")]
		public static explicit operator IntPtr(ISteamMatchmakingPlayersResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000DE")]
	public class ISteamMatchmakingRulesResponse
	{
		[Token(Token = "0x20000DF")]
		public delegate void RulesResponded(string pchRule, string pchValue);

		[Token(Token = "0x20000E0")]
		public delegate void RulesFailedToRespond();

		[Token(Token = "0x20000E1")]
		public delegate void RulesRefreshComplete();

		[Token(Token = "0x20000E2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E9CC", Offset = "0x97E9CC")]
		public delegate void InternalRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue);

		[Token(Token = "0x20000E3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E9E0", Offset = "0x97E9E0")]
		public delegate void InternalRulesFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x20000E4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97E9F4", Offset = "0x97E9F4")]
		public delegate void InternalRulesRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x20000E5")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x40005AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalRulesResponded m_VTRulesResponded;

			[NonSerialized]
			[Token(Token = "0x40005AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalRulesFailedToRespond m_VTRulesFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x40005B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRulesRefreshComplete m_VTRulesRefreshComplete;

			[Token(Token = "0x6000484")]
			[Address(RVA = "0x168DF10", Offset = "0x168DF10", VA = "0x168DF10")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RulesResponded m_RulesResponded;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RulesFailedToRespond m_RulesFailedToRespond;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RulesRefreshComplete m_RulesRefreshComplete;

		[Token(Token = "0x6000466")]
		[Address(RVA = "0xE37E74", Offset = "0xE37E74", VA = "0xE37E74")]
		public ISteamMatchmakingRulesResponse(RulesResponded onRulesResponded, RulesFailedToRespond onRulesFailedToRespond, RulesRefreshComplete onRulesRefreshComplete)
		{
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0xE3811C", Offset = "0xE3811C", VA = "0xE3811C", Slot = "1")]
		~ISteamMatchmakingRulesResponse()
		{
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0xE3821C", Offset = "0xE3821C", VA = "0xE3821C")]
		private void InternalOnRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue)
		{
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0xE38270", Offset = "0xE38270", VA = "0xE38270")]
		private void InternalOnRulesFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0xE3828C", Offset = "0xE3828C", VA = "0xE3828C")]
		private void InternalOnRulesRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0xE382A8", Offset = "0xE382A8", VA = "0xE382A8")]
		public static explicit operator IntPtr(ISteamMatchmakingRulesResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000E6")]
	public class InteropHelp
	{
		[Token(Token = "0x20000E7")]
		public class UTF8StringHandle : IDisposable
		{
			[Token(Token = "0x600048A")]
			[Address(RVA = "0x167A854", Offset = "0x167A854", VA = "0x167A854")]
			public UTF8StringHandle(string str)
			{
			}

			[Token(Token = "0x600048B")]
			[Address(RVA = "0x168FBB4", Offset = "0x168FBB4", VA = "0x168FBB4", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x20000E8")]
		public class SteamParamStringArray
		{
			[Token(Token = "0x40005B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private IntPtr[] m_Strings;

			[Token(Token = "0x40005B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IntPtr m_ptrStrings;

			[Token(Token = "0x40005B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private IntPtr m_pSteamParamStringArray;

			[Token(Token = "0x600048C")]
			[Address(RVA = "0x168F4BC", Offset = "0x168F4BC", VA = "0x168F4BC")]
			public SteamParamStringArray(IList<string> strings)
			{
			}

			[Token(Token = "0x600048D")]
			[Address(RVA = "0x168F9DC", Offset = "0x168F9DC", VA = "0x168F9DC", Slot = "1")]
			~SteamParamStringArray()
			{
			}

			[Token(Token = "0x600048E")]
			[Address(RVA = "0x168FB9C", Offset = "0x168FB9C", VA = "0x168FB9C")]
			public static implicit operator IntPtr(SteamParamStringArray that)
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0xE38CF0", Offset = "0xE38CF0", VA = "0xE38CF0")]
		public static void TestIfPlatformSupported()
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0xE38D44", Offset = "0xE38D44", VA = "0xE38D44")]
		public static void TestIfAvailableClient()
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0xE38DE8", Offset = "0xE38DE8", VA = "0xE38DE8")]
		public static void TestIfAvailableGameServer()
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0xE37CC8", Offset = "0xE37CC8", VA = "0xE37CC8")]
		public static string PtrToStringUTF8(IntPtr nativeUtf8)
		{
			return null;
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0xE38E8C", Offset = "0xE38E8C", VA = "0xE38E8C")]
		public InteropHelp()
		{
		}
	}
	[Token(Token = "0x20000E9")]
	public class MMKVPMarshaller
	{
		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr m_pNativeArray;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pArrayEntries;

		[Token(Token = "0x600048F")]
		[Address(RVA = "0xE3ECC8", Offset = "0xE3ECC8", VA = "0xE3ECC8")]
		public MMKVPMarshaller(MatchMakingKeyValuePair_t[] filters)
		{
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0xE3EF10", Offset = "0xE3EF10", VA = "0xE3EF10", Slot = "1")]
		~MMKVPMarshaller()
		{
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0xE3F034", Offset = "0xE3F034", VA = "0xE3F034")]
		public static implicit operator IntPtr(MMKVPMarshaller that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000EA")]
	public class DllCheck
	{
		[Token(Token = "0x6000492")]
		[Address(RVA = "0x120187C", Offset = "0x120187C", VA = "0x120187C")]
		public static bool Test()
		{
			return default(bool);
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x1201884", Offset = "0x1201884", VA = "0x1201884")]
		public DllCheck()
		{
		}
	}
	[Token(Token = "0x20000EB")]
	public static class Packsize
	{
		[Token(Token = "0x20000EC")]
		private struct ValvePackingSentinel_t
		{
			[Token(Token = "0x40005B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private uint m_u32;

			[Token(Token = "0x40005B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private ulong m_u64;

			[Token(Token = "0x40005B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private ushort m_u16;

			[Token(Token = "0x40005BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private double m_d;
		}

		[Token(Token = "0x40005B6")]
		public const int value = 4;

		[Token(Token = "0x6000494")]
		[Address(RVA = "0xE5EFE8", Offset = "0xE5EFE8", VA = "0xE5EFE8")]
		public static bool Test()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000ED")]
	public static class Version
	{
		[Token(Token = "0x40005BB")]
		public const string SteamworksNETVersion = "10.0.0";

		[Token(Token = "0x40005BC")]
		public const string SteamworksSDKVersion = "1.40";

		[Token(Token = "0x40005BD")]
		public const string SteamAPIDLLVersion = "03.92.72.58";

		[Token(Token = "0x40005BE")]
		public const int SteamAPIDLLSize = 221984;

		[Token(Token = "0x40005BF")]
		public const int SteamAPI64DLLSize = 245536;
	}
	[Token(Token = "0x20000EE")]
	public static class SteamAPI
	{
		[Token(Token = "0x6000495")]
		[Address(RVA = "0x1132A50", Offset = "0x1132A50", VA = "0x1132A50")]
		public static bool InitSafe()
		{
			return default(bool);
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x1132A6C", Offset = "0x1132A6C", VA = "0x1132A6C")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x1132A88", Offset = "0x1132A88", VA = "0x1132A88")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x1132AA4", Offset = "0x1132AA4", VA = "0x1132AA4")]
		public static bool RestartAppIfNecessary(AppId_t unOwnAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x1132AD0", Offset = "0x1132AD0", VA = "0x1132AD0")]
		public static void ReleaseCurrentThreadMemory()
		{
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x1132AEC", Offset = "0x1132AEC", VA = "0x1132AEC")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x1132B08", Offset = "0x1132B08", VA = "0x1132B08")]
		public static bool IsSteamRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x1132B24", Offset = "0x1132B24", VA = "0x1132B24")]
		public static HSteamUser GetHSteamUserCurrent()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x1132B50", Offset = "0x1132B50", VA = "0x1132B50")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x1132B7C", Offset = "0x1132B7C", VA = "0x1132B7C")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x20000EF")]
	public static class GameServer
	{
		[Token(Token = "0x600049F")]
		[Address(RVA = "0x1202E78", Offset = "0x1202E78", VA = "0x1202E78")]
		public static bool Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x1203014", Offset = "0x1203014", VA = "0x1203014")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x1203030", Offset = "0x1203030", VA = "0x1203030")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x120304C", Offset = "0x120304C", VA = "0x120304C")]
		public static void ReleaseCurrentThreadMemory()
		{
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x1203068", Offset = "0x1203068", VA = "0x1203068")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x1203084", Offset = "0x1203084", VA = "0x1203084")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x12030FC", Offset = "0x12030FC", VA = "0x12030FC")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x1203128", Offset = "0x1203128", VA = "0x1203128")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x20000F0")]
	public static class SteamEncryptedAppTicket
	{
		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x1136D5C", Offset = "0x1136D5C", VA = "0x1136D5C")]
		public static bool BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x1136DC0", Offset = "0x1136DC0", VA = "0x1136DC0")]
		public static bool BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x1136E04", Offset = "0x1136E04", VA = "0x1136E04")]
		public static uint GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x1136E38", Offset = "0x1136E38", VA = "0x1136E38")]
		public static void GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID)
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x1136E7C", Offset = "0x1136E7C", VA = "0x1136E7C")]
		public static uint GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x1136EB0", Offset = "0x1136EB0", VA = "0x1136EB0")]
		public static bool BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x1136EF4", Offset = "0x1136EF4", VA = "0x1136EF4")]
		public static bool BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x1136F28", Offset = "0x1136F28", VA = "0x1136F28")]
		public static byte[] GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F1")]
	internal static class NativeMethods
	{
		[Token(Token = "0x40005C0")]
		internal const string NativeLibraryName = "CSteamworks";

		[Token(Token = "0x40005C1")]
		internal const string NativeLibrary_SDKEncryptedAppTicket = "sdkencryptedappticket";

		[PreserveSig]
		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xE444C8", Offset = "0xE444C8", VA = "0xE444C8")]
		public static extern bool SteamAPI_Init();

		[PreserveSig]
		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xE44544", Offset = "0xE44544", VA = "0xE44544")]
		public static extern void SteamAPI_Shutdown();

		[PreserveSig]
		[Token(Token = "0x60004B1")]
		[Address(RVA = "0xE445B4", Offset = "0xE445B4", VA = "0xE445B4")]
		public static extern bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID);

		[PreserveSig]
		[Token(Token = "0x60004B2")]
		[Address(RVA = "0xE4463C", Offset = "0xE4463C", VA = "0xE4463C")]
		public static extern void SteamAPI_ReleaseCurrentThreadMemory();

		[PreserveSig]
		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xE446AC", Offset = "0xE446AC", VA = "0xE446AC")]
		public static extern void SteamAPI_WriteMiniDump(uint uStructuredExceptionCode, IntPtr pvExceptionInfo, uint uBuildID);

		[PreserveSig]
		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xE44744", Offset = "0xE44744", VA = "0xE44744")]
		public static extern void SteamAPI_SetMiniDumpComment(InteropHelp.UTF8StringHandle pchMsg);

		[PreserveSig]
		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xE44760", Offset = "0xE44760", VA = "0xE44760")]
		public static extern void SteamAPI_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xE447D0", Offset = "0xE447D0", VA = "0xE447D0")]
		public static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback);

		[PreserveSig]
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xE44860", Offset = "0xE44860", VA = "0xE44860")]
		public static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

		[PreserveSig]
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xE448E0", Offset = "0xE448E0", VA = "0xE448E0")]
		public static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xE44970", Offset = "0xE44970", VA = "0xE44970")]
		public static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xE44A00", Offset = "0xE44A00", VA = "0xE44A00")]
		public static extern bool SteamAPI_IsSteamRunning();

		[PreserveSig]
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xE44A7C", Offset = "0xE44A7C", VA = "0xE44A7C")]
		public static extern void Steam_RunCallbacks(HSteamPipe hSteamPipe, bool bGameServerCallbacks);

		[PreserveSig]
		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xE44B0C", Offset = "0xE44B0C", VA = "0xE44B0C")]
		public static extern void Steam_RegisterInterfaceFuncs(IntPtr hModule);

		[PreserveSig]
		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xE44B8C", Offset = "0xE44B8C", VA = "0xE44B8C")]
		public static extern int Steam_GetHSteamUserCurrent();

		[PreserveSig]
		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xE44C00", Offset = "0xE44C00", VA = "0xE44C00")]
		public static extern int SteamAPI_GetSteamInstallPath();

		[PreserveSig]
		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xE44C74", Offset = "0xE44C74", VA = "0xE44C74")]
		public static extern int SteamAPI_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xE44CE8", Offset = "0xE44CE8", VA = "0xE44CE8")]
		public static extern void SteamAPI_SetTryCatchCallbacks(bool bTryCatchCallbacks);

		[PreserveSig]
		[Token(Token = "0x60004C1")]
		[Address(RVA = "0xE44D68", Offset = "0xE44D68", VA = "0xE44D68")]
		public static extern int SteamAPI_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x60004C2")]
		[Address(RVA = "0xE44DDC", Offset = "0xE44DDC", VA = "0xE44DDC")]
		public static extern void SteamInternal_CreateInterface(IntPtr ver);

		[PreserveSig]
		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xE44E5C", Offset = "0xE44E5C", VA = "0xE44E5C")]
		public static extern void SteamAPI_UseBreakpadCrashHandler(InteropHelp.UTF8StringHandle pchVersion, InteropHelp.UTF8StringHandle pchDate, InteropHelp.UTF8StringHandle pchTime, bool bFullMemoryDumps, IntPtr pvContext, IntPtr m_pfnPreMinidumpCallback);

		[PreserveSig]
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xE44E78", Offset = "0xE44E78", VA = "0xE44E78")]
		public static extern void SteamAPI_SetBreakpadAppID(uint unAppID);

		[PreserveSig]
		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xE44EF8", Offset = "0xE44EF8", VA = "0xE44EF8")]
		public static extern bool SteamGameServer_Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x60004C6")]
		[Address(RVA = "0xE44F14", Offset = "0xE44F14", VA = "0xE44F14")]
		public static extern void SteamGameServer_Shutdown();

		[PreserveSig]
		[Token(Token = "0x60004C7")]
		[Address(RVA = "0xE44F84", Offset = "0xE44F84", VA = "0xE44F84")]
		public static extern void SteamGameServer_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x60004C8")]
		[Address(RVA = "0xE44FF4", Offset = "0xE44FF4", VA = "0xE44FF4")]
		public static extern void SteamGameServer_ReleaseCurrentThreadMemory();

		[PreserveSig]
		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xE45064", Offset = "0xE45064", VA = "0xE45064")]
		public static extern bool SteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xE450E0", Offset = "0xE450E0", VA = "0xE450E0")]
		public static extern ulong SteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x60004CB")]
		[Address(RVA = "0xE45154", Offset = "0xE45154", VA = "0xE45154")]
		public static extern int SteamGameServer_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60004CC")]
		[Address(RVA = "0xE451C8", Offset = "0xE451C8", VA = "0xE451C8")]
		public static extern int SteamGameServer_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xE4523C", Offset = "0xE4523C", VA = "0xE4523C")]
		public static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x60004CE")]
		[Address(RVA = "0xE38D74", Offset = "0xE38D74", VA = "0xE38D74")]
		public static extern IntPtr SteamClient();

		[PreserveSig]
		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xE38E18", Offset = "0xE38E18", VA = "0xE38E18")]
		public static extern IntPtr SteamGameServerClient();

		[PreserveSig]
		[Token(Token = "0x60004D0")]
		[Address(RVA = "0xE45258", Offset = "0xE45258", VA = "0xE45258")]
		public static extern bool SteamEncryptedAppTicket_BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey);

		[PreserveSig]
		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xE45338", Offset = "0xE45338", VA = "0xE45338")]
		public static extern bool SteamEncryptedAppTicket_BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60004D2")]
		[Address(RVA = "0xE453E0", Offset = "0xE453E0", VA = "0xE453E0")]
		public static extern uint SteamEncryptedAppTicket_GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xE45478", Offset = "0xE45478", VA = "0xE45478")]
		public static extern void SteamEncryptedAppTicket_GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID);

		[PreserveSig]
		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xE45518", Offset = "0xE45518", VA = "0xE45518")]
		public static extern uint SteamEncryptedAppTicket_GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60004D5")]
		[Address(RVA = "0xE455B0", Offset = "0xE455B0", VA = "0xE455B0")]
		public static extern bool SteamEncryptedAppTicket_BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60004D6")]
		[Address(RVA = "0xE45658", Offset = "0xE45658", VA = "0xE45658")]
		public static extern bool SteamEncryptedAppTicket_BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xE456F8", Offset = "0xE456F8", VA = "0xE456F8")]
		public static extern IntPtr SteamEncryptedAppTicket_GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData);

		[PreserveSig]
		[Token(Token = "0x60004D8")]
		[Address(RVA = "0xE45798", Offset = "0xE45798", VA = "0xE45798")]
		public static extern uint ISteamAppList_GetNumInstalledApps();

		[PreserveSig]
		[Token(Token = "0x60004D9")]
		[Address(RVA = "0xE4580C", Offset = "0xE4580C", VA = "0xE4580C")]
		public static extern uint ISteamAppList_GetInstalledApps([In][Out] AppId_t[] pvecAppID, uint unMaxAppIDs);

		[PreserveSig]
		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xE458A4", Offset = "0xE458A4", VA = "0xE458A4")]
		public static extern int ISteamAppList_GetAppName(AppId_t nAppID, IntPtr pchName, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xE4593C", Offset = "0xE4593C", VA = "0xE4593C")]
		public static extern int ISteamAppList_GetAppInstallDir(AppId_t nAppID, IntPtr pchDirectory, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xE459D4", Offset = "0xE459D4", VA = "0xE459D4")]
		public static extern int ISteamAppList_GetAppBuildId(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xE45A54", Offset = "0xE45A54", VA = "0xE45A54")]
		public static extern bool ISteamApps_BIsSubscribed();

		[PreserveSig]
		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xE45AD0", Offset = "0xE45AD0", VA = "0xE45AD0")]
		public static extern bool ISteamApps_BIsLowViolence();

		[PreserveSig]
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xE45B4C", Offset = "0xE45B4C", VA = "0xE45B4C")]
		public static extern bool ISteamApps_BIsCybercafe();

		[PreserveSig]
		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xE45BC8", Offset = "0xE45BC8", VA = "0xE45BC8")]
		public static extern bool ISteamApps_BIsVACBanned();

		[PreserveSig]
		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xE45C44", Offset = "0xE45C44", VA = "0xE45C44")]
		public static extern IntPtr ISteamApps_GetCurrentGameLanguage();

		[PreserveSig]
		[Token(Token = "0x60004E2")]
		[Address(RVA = "0xE45CB8", Offset = "0xE45CB8", VA = "0xE45CB8")]
		public static extern IntPtr ISteamApps_GetAvailableGameLanguages();

		[PreserveSig]
		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xE45D2C", Offset = "0xE45D2C", VA = "0xE45D2C")]
		public static extern bool ISteamApps_BIsSubscribedApp(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xE45DB4", Offset = "0xE45DB4", VA = "0xE45DB4")]
		public static extern bool ISteamApps_BIsDlcInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60004E5")]
		[Address(RVA = "0xE45E3C", Offset = "0xE45E3C", VA = "0xE45E3C")]
		public static extern uint ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60004E6")]
		[Address(RVA = "0xE45EBC", Offset = "0xE45EBC", VA = "0xE45EBC")]
		public static extern bool ISteamApps_BIsSubscribedFromFreeWeekend();

		[PreserveSig]
		[Token(Token = "0x60004E7")]
		[Address(RVA = "0xE45F38", Offset = "0xE45F38", VA = "0xE45F38")]
		public static extern int ISteamApps_GetDLCCount();

		[PreserveSig]
		[Token(Token = "0x60004E8")]
		[Address(RVA = "0xE45FAC", Offset = "0xE45FAC", VA = "0xE45FAC")]
		public static extern bool ISteamApps_BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xE46078", Offset = "0xE46078", VA = "0xE46078")]
		public static extern void ISteamApps_InstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xE460F8", Offset = "0xE460F8", VA = "0xE460F8")]
		public static extern void ISteamApps_UninstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xE46178", Offset = "0xE46178", VA = "0xE46178")]
		public static extern void ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xE461F8", Offset = "0xE461F8", VA = "0xE461F8")]
		public static extern bool ISteamApps_GetCurrentBetaName(IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xE46290", Offset = "0xE46290", VA = "0xE46290")]
		public static extern bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly);

		[PreserveSig]
		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xE46318", Offset = "0xE46318", VA = "0xE46318")]
		public static extern uint ISteamApps_GetInstalledDepots(AppId_t appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots);

		[PreserveSig]
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xE463B8", Offset = "0xE463B8", VA = "0xE463B8")]
		public static extern uint ISteamApps_GetAppInstallDir(AppId_t appID, IntPtr pchFolder, uint cchFolderBufferSize);

		[PreserveSig]
		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xE46450", Offset = "0xE46450", VA = "0xE46450")]
		public static extern bool ISteamApps_BIsAppInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xE464D8", Offset = "0xE464D8", VA = "0xE464D8")]
		public static extern ulong ISteamApps_GetAppOwner();

		[PreserveSig]
		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xE4654C", Offset = "0xE4654C", VA = "0xE4654C")]
		public static extern IntPtr ISteamApps_GetLaunchQueryParam(InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xE46568", Offset = "0xE46568", VA = "0xE46568")]
		public static extern bool ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xE46608", Offset = "0xE46608", VA = "0xE46608")]
		public static extern int ISteamApps_GetAppBuildId();

		[PreserveSig]
		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xE4667C", Offset = "0xE4667C", VA = "0xE4667C")]
		public static extern void ISteamApps_RequestAllProofOfPurchaseKeys();

		[PreserveSig]
		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xE466EC", Offset = "0xE466EC", VA = "0xE466EC")]
		public static extern ulong ISteamApps_GetFileDetails(InteropHelp.UTF8StringHandle pszFileName);

		[PreserveSig]
		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xE46708", Offset = "0xE46708", VA = "0xE46708")]
		public static extern int ISteamClient_CreateSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xE4677C", Offset = "0xE4677C", VA = "0xE4677C")]
		public static extern bool ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xE46804", Offset = "0xE46804", VA = "0xE46804")]
		public static extern int ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xE46884", Offset = "0xE46884", VA = "0xE46884")]
		public static extern int ISteamClient_CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType);

		[PreserveSig]
		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xE46914", Offset = "0xE46914", VA = "0xE46914")]
		public static extern void ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser);

		[PreserveSig]
		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xE469A4", Offset = "0xE469A4", VA = "0xE469A4")]
		public static extern IntPtr ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60004FD")]
		[Address(RVA = "0xE469C0", Offset = "0xE469C0", VA = "0xE469C0")]
		public static extern IntPtr ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60004FE")]
		[Address(RVA = "0xE469DC", Offset = "0xE469DC", VA = "0xE469DC")]
		public static extern void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

		[PreserveSig]
		[Token(Token = "0x60004FF")]
		[Address(RVA = "0xE46A6C", Offset = "0xE46A6C", VA = "0xE46A6C")]
		public static extern IntPtr ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000500")]
		[Address(RVA = "0xE46A88", Offset = "0xE46A88", VA = "0xE46A88")]
		public static extern IntPtr ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000501")]
		[Address(RVA = "0xE46AA4", Offset = "0xE46AA4", VA = "0xE46AA4")]
		public static extern IntPtr ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000502")]
		[Address(RVA = "0xE46AC0", Offset = "0xE46AC0", VA = "0xE46AC0")]
		public static extern IntPtr ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000503")]
		[Address(RVA = "0xE46ADC", Offset = "0xE46ADC", VA = "0xE46ADC")]
		public static extern IntPtr ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000504")]
		[Address(RVA = "0xE46AF8", Offset = "0xE46AF8", VA = "0xE46AF8")]
		public static extern IntPtr ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000505")]
		[Address(RVA = "0xE46B14", Offset = "0xE46B14", VA = "0xE46B14")]
		public static extern IntPtr ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000506")]
		[Address(RVA = "0xE46B30", Offset = "0xE46B30", VA = "0xE46B30")]
		public static extern IntPtr ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000507")]
		[Address(RVA = "0xE46B4C", Offset = "0xE46B4C", VA = "0xE46B4C")]
		public static extern IntPtr ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000508")]
		[Address(RVA = "0xE46B68", Offset = "0xE46B68", VA = "0xE46B68")]
		public static extern IntPtr ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000509")]
		[Address(RVA = "0xE46B84", Offset = "0xE46B84", VA = "0xE46B84")]
		public static extern IntPtr ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600050A")]
		[Address(RVA = "0xE46BA0", Offset = "0xE46BA0", VA = "0xE46BA0")]
		public static extern uint ISteamClient_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x600050B")]
		[Address(RVA = "0xE46C14", Offset = "0xE46C14", VA = "0xE46C14")]
		public static extern void ISteamClient_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x600050C")]
		[Address(RVA = "0xE46C98", Offset = "0xE46C98", VA = "0xE46C98")]
		public static extern bool ISteamClient_BShutdownIfAllPipesClosed();

		[PreserveSig]
		[Token(Token = "0x600050D")]
		[Address(RVA = "0xE46D14", Offset = "0xE46D14", VA = "0xE46D14")]
		public static extern IntPtr ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600050E")]
		[Address(RVA = "0xE46D30", Offset = "0xE46D30", VA = "0xE46D30")]
		public static extern IntPtr ISteamClient_GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600050F")]
		[Address(RVA = "0xE46D4C", Offset = "0xE46D4C", VA = "0xE46D4C")]
		public static extern IntPtr ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000510")]
		[Address(RVA = "0xE46D68", Offset = "0xE46D68", VA = "0xE46D68")]
		public static extern IntPtr ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000511")]
		[Address(RVA = "0xE46D84", Offset = "0xE46D84", VA = "0xE46D84")]
		public static extern IntPtr ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000512")]
		[Address(RVA = "0xE46DA0", Offset = "0xE46DA0", VA = "0xE46DA0")]
		public static extern IntPtr ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000513")]
		[Address(RVA = "0xE46DBC", Offset = "0xE46DBC", VA = "0xE46DBC")]
		public static extern IntPtr ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000514")]
		[Address(RVA = "0xE46DD8", Offset = "0xE46DD8", VA = "0xE46DD8")]
		public static extern IntPtr ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000515")]
		[Address(RVA = "0xE46DF4", Offset = "0xE46DF4", VA = "0xE46DF4")]
		public static extern IntPtr ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000516")]
		[Address(RVA = "0xE46E10", Offset = "0xE46E10", VA = "0xE46E10")]
		public static extern IntPtr ISteamClient_GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000517")]
		[Address(RVA = "0xE46E2C", Offset = "0xE46E2C", VA = "0xE46E2C")]
		public static extern bool ISteamController_Init();

		[PreserveSig]
		[Token(Token = "0x6000518")]
		[Address(RVA = "0xE46EA8", Offset = "0xE46EA8", VA = "0xE46EA8")]
		public static extern bool ISteamController_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000519")]
		[Address(RVA = "0xE46F24", Offset = "0xE46F24", VA = "0xE46F24")]
		public static extern void ISteamController_RunFrame();

		[PreserveSig]
		[Token(Token = "0x600051A")]
		[Address(RVA = "0xE46F94", Offset = "0xE46F94", VA = "0xE46F94")]
		public static extern int ISteamController_GetConnectedControllers([In][Out] ControllerHandle_t[] handlesOut);

		[PreserveSig]
		[Token(Token = "0x600051B")]
		[Address(RVA = "0xE4701C", Offset = "0xE4701C", VA = "0xE4701C")]
		public static extern bool ISteamController_ShowBindingPanel(ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x600051C")]
		[Address(RVA = "0xE470A4", Offset = "0xE470A4", VA = "0xE470A4")]
		public static extern ulong ISteamController_GetActionSetHandle(InteropHelp.UTF8StringHandle pszActionSetName);

		[PreserveSig]
		[Token(Token = "0x600051D")]
		[Address(RVA = "0xE470C0", Offset = "0xE470C0", VA = "0xE470C0")]
		public static extern void ISteamController_ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle);

		[PreserveSig]
		[Token(Token = "0x600051E")]
		[Address(RVA = "0xE47150", Offset = "0xE47150", VA = "0xE47150")]
		public static extern ulong ISteamController_GetCurrentActionSet(ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x600051F")]
		[Address(RVA = "0xE471D0", Offset = "0xE471D0", VA = "0xE471D0")]
		public static extern ulong ISteamController_GetDigitalActionHandle(InteropHelp.UTF8StringHandle pszActionName);

		[PreserveSig]
		[Token(Token = "0x6000520")]
		[Address(RVA = "0xE471EC", Offset = "0xE471EC", VA = "0xE471EC")]
		public static extern ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle);

		[PreserveSig]
		[Token(Token = "0x6000521")]
		[Address(RVA = "0xE47280", Offset = "0xE47280", VA = "0xE47280")]
		public static extern int ISteamController_GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, [In][Out] EControllerActionOrigin[] originsOut);

		[PreserveSig]
		[Token(Token = "0x6000522")]
		[Address(RVA = "0xE47330", Offset = "0xE47330", VA = "0xE47330")]
		public static extern ulong ISteamController_GetAnalogActionHandle(InteropHelp.UTF8StringHandle pszActionName);

		[PreserveSig]
		[Token(Token = "0x6000523")]
		[Address(RVA = "0xE4734C", Offset = "0xE4734C", VA = "0xE4734C")]
		public static extern ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle);

		[PreserveSig]
		[Token(Token = "0x6000524")]
		[Address(RVA = "0xE473E0", Offset = "0xE473E0", VA = "0xE473E0")]
		public static extern int ISteamController_GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, [In][Out] EControllerActionOrigin[] originsOut);

		[PreserveSig]
		[Token(Token = "0x6000525")]
		[Address(RVA = "0xE47490", Offset = "0xE47490", VA = "0xE47490")]
		public static extern void ISteamController_StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction);

		[PreserveSig]
		[Token(Token = "0x6000526")]
		[Address(RVA = "0xE47520", Offset = "0xE47520", VA = "0xE47520")]
		public static extern void ISteamController_TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec);

		[PreserveSig]
		[Token(Token = "0x6000527")]
		[Address(RVA = "0xE475B8", Offset = "0xE475B8", VA = "0xE475B8")]
		public static extern void ISteamController_TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

		[PreserveSig]
		[Token(Token = "0x6000528")]
		[Address(RVA = "0xE47678", Offset = "0xE47678", VA = "0xE47678")]
		public static extern void ISteamController_TriggerVibration(ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

		[PreserveSig]
		[Token(Token = "0x6000529")]
		[Address(RVA = "0xE47710", Offset = "0xE47710", VA = "0xE47710")]
		public static extern void ISteamController_SetLEDColor(ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

		[PreserveSig]
		[Token(Token = "0x600052A")]
		[Address(RVA = "0xE477C0", Offset = "0xE477C0", VA = "0xE477C0")]
		public static extern int ISteamController_GetGamepadIndexForController(ControllerHandle_t ulControllerHandle);

		[PreserveSig]
		[Token(Token = "0x600052B")]
		[Address(RVA = "0xE47840", Offset = "0xE47840", VA = "0xE47840")]
		public static extern ulong ISteamController_GetControllerForGamepadIndex(int nIndex);

		[PreserveSig]
		[Token(Token = "0x600052C")]
		[Address(RVA = "0xE478C0", Offset = "0xE478C0", VA = "0xE478C0")]
		public static extern ControllerMotionData_t ISteamController_GetMotionData(ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x600052D")]
		[Address(RVA = "0xE47950", Offset = "0xE47950", VA = "0xE47950")]
		public static extern bool ISteamController_ShowDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle, float flScale, float flXPosition, float flYPosition);

		[PreserveSig]
		[Token(Token = "0x600052E")]
		[Address(RVA = "0xE47A10", Offset = "0xE47A10", VA = "0xE47A10")]
		public static extern bool ISteamController_ShowAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle, float flScale, float flXPosition, float flYPosition);

		[PreserveSig]
		[Token(Token = "0x600052F")]
		[Address(RVA = "0xE47AD0", Offset = "0xE47AD0", VA = "0xE47AD0")]
		public static extern IntPtr ISteamController_GetStringForActionOrigin(EControllerActionOrigin eOrigin);

		[PreserveSig]
		[Token(Token = "0x6000530")]
		[Address(RVA = "0xE47B50", Offset = "0xE47B50", VA = "0xE47B50")]
		public static extern IntPtr ISteamController_GetGlyphForActionOrigin(EControllerActionOrigin eOrigin);

		[PreserveSig]
		[Token(Token = "0x6000531")]
		[Address(RVA = "0xE47BD0", Offset = "0xE47BD0", VA = "0xE47BD0")]
		public static extern IntPtr ISteamFriends_GetPersonaName();

		[PreserveSig]
		[Token(Token = "0x6000532")]
		[Address(RVA = "0xE47C44", Offset = "0xE47C44", VA = "0xE47C44")]
		public static extern ulong ISteamFriends_SetPersonaName(InteropHelp.UTF8StringHandle pchPersonaName);

		[PreserveSig]
		[Token(Token = "0x6000533")]
		[Address(RVA = "0xE47C60", Offset = "0xE47C60", VA = "0xE47C60")]
		public static extern EPersonaState ISteamFriends_GetPersonaState();

		[PreserveSig]
		[Token(Token = "0x6000534")]
		[Address(RVA = "0xE47CD4", Offset = "0xE47CD4", VA = "0xE47CD4")]
		public static extern int ISteamFriends_GetFriendCount(EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x6000535")]
		[Address(RVA = "0xE47D54", Offset = "0xE47D54", VA = "0xE47D54")]
		public static extern ulong ISteamFriends_GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x6000536")]
		[Address(RVA = "0xE47DE4", Offset = "0xE47DE4", VA = "0xE47DE4")]
		public static extern EFriendRelationship ISteamFriends_GetFriendRelationship(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000537")]
		[Address(RVA = "0xE47E64", Offset = "0xE47E64", VA = "0xE47E64")]
		public static extern EPersonaState ISteamFriends_GetFriendPersonaState(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000538")]
		[Address(RVA = "0xE47EE4", Offset = "0xE47EE4", VA = "0xE47EE4")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaName(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000539")]
		[Address(RVA = "0xE47F64", Offset = "0xE47F64", VA = "0xE47F64")]
		public static extern bool ISteamFriends_GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo);

		[PreserveSig]
		[Token(Token = "0x600053A")]
		[Address(RVA = "0xE47FFC", Offset = "0xE47FFC", VA = "0xE47FFC")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName);

		[PreserveSig]
		[Token(Token = "0x600053B")]
		[Address(RVA = "0xE4808C", Offset = "0xE4808C", VA = "0xE4808C")]
		public static extern int ISteamFriends_GetFriendSteamLevel(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600053C")]
		[Address(RVA = "0xE4810C", Offset = "0xE4810C", VA = "0xE4810C")]
		public static extern IntPtr ISteamFriends_GetPlayerNickname(CSteamID steamIDPlayer);

		[PreserveSig]
		[Token(Token = "0x600053D")]
		[Address(RVA = "0xE4818C", Offset = "0xE4818C", VA = "0xE4818C")]
		public static extern int ISteamFriends_GetFriendsGroupCount();

		[PreserveSig]
		[Token(Token = "0x600053E")]
		[Address(RVA = "0xE48200", Offset = "0xE48200", VA = "0xE48200")]
		public static extern short ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

		[PreserveSig]
		[Token(Token = "0x600053F")]
		[Address(RVA = "0xE48280", Offset = "0xE48280", VA = "0xE48280")]
		public static extern IntPtr ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x6000540")]
		[Address(RVA = "0xE48300", Offset = "0xE48300", VA = "0xE48300")]
		public static extern int ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x6000541")]
		[Address(RVA = "0xE48380", Offset = "0xE48380", VA = "0xE48380")]
		public static extern void ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, [In][Out] CSteamID[] pOutSteamIDMembers, int nMembersCount);

		[PreserveSig]
		[Token(Token = "0x6000542")]
		[Address(RVA = "0xE48420", Offset = "0xE48420", VA = "0xE48420")]
		public static extern bool ISteamFriends_HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x6000543")]
		[Address(RVA = "0xE484B8", Offset = "0xE484B8", VA = "0xE484B8")]
		public static extern int ISteamFriends_GetClanCount();

		[PreserveSig]
		[Token(Token = "0x6000544")]
		[Address(RVA = "0xE4852C", Offset = "0xE4852C", VA = "0xE4852C")]
		public static extern ulong ISteamFriends_GetClanByIndex(int iClan);

		[PreserveSig]
		[Token(Token = "0x6000545")]
		[Address(RVA = "0xE485AC", Offset = "0xE485AC", VA = "0xE485AC")]
		public static extern IntPtr ISteamFriends_GetClanName(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000546")]
		[Address(RVA = "0xE4862C", Offset = "0xE4862C", VA = "0xE4862C")]
		public static extern IntPtr ISteamFriends_GetClanTag(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000547")]
		[Address(RVA = "0xE486AC", Offset = "0xE486AC", VA = "0xE486AC")]
		public static extern bool ISteamFriends_GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

		[PreserveSig]
		[Token(Token = "0x6000548")]
		[Address(RVA = "0xE4875C", Offset = "0xE4875C", VA = "0xE4875C")]
		public static extern ulong ISteamFriends_DownloadClanActivityCounts([In][Out] CSteamID[] psteamIDClans, int cClansToRequest);

		[PreserveSig]
		[Token(Token = "0x6000549")]
		[Address(RVA = "0xE487F4", Offset = "0xE487F4", VA = "0xE487F4")]
		public static extern int ISteamFriends_GetFriendCountFromSource(CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x600054A")]
		[Address(RVA = "0xE48874", Offset = "0xE48874", VA = "0xE48874")]
		public static extern ulong ISteamFriends_GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend);

		[PreserveSig]
		[Token(Token = "0x600054B")]
		[Address(RVA = "0xE48904", Offset = "0xE48904", VA = "0xE48904")]
		public static extern bool ISteamFriends_IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x600054C")]
		[Address(RVA = "0xE4899C", Offset = "0xE4899C", VA = "0xE4899C")]
		public static extern void ISteamFriends_SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking);

		[PreserveSig]
		[Token(Token = "0x600054D")]
		[Address(RVA = "0xE48A2C", Offset = "0xE48A2C", VA = "0xE48A2C")]
		public static extern void ISteamFriends_ActivateGameOverlay(InteropHelp.UTF8StringHandle pchDialog);

		[PreserveSig]
		[Token(Token = "0x600054E")]
		[Address(RVA = "0xE48A48", Offset = "0xE48A48", VA = "0xE48A48")]
		public static extern void ISteamFriends_ActivateGameOverlayToUser(InteropHelp.UTF8StringHandle pchDialog, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600054F")]
		[Address(RVA = "0xE48A64", Offset = "0xE48A64", VA = "0xE48A64")]
		public static extern void ISteamFriends_ActivateGameOverlayToWebPage(InteropHelp.UTF8StringHandle pchURL);

		[PreserveSig]
		[Token(Token = "0x6000550")]
		[Address(RVA = "0xE48A80", Offset = "0xE48A80", VA = "0xE48A80")]
		public static extern void ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag);

		[PreserveSig]
		[Token(Token = "0x6000551")]
		[Address(RVA = "0xE48B10", Offset = "0xE48B10", VA = "0xE48B10")]
		public static extern void ISteamFriends_SetPlayedWith(CSteamID steamIDUserPlayedWith);

		[PreserveSig]
		[Token(Token = "0x6000552")]
		[Address(RVA = "0xE48B90", Offset = "0xE48B90", VA = "0xE48B90")]
		public static extern void ISteamFriends_ActivateGameOverlayInviteDialog(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000553")]
		[Address(RVA = "0xE48C10", Offset = "0xE48C10", VA = "0xE48C10")]
		public static extern int ISteamFriends_GetSmallFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000554")]
		[Address(RVA = "0xE48C90", Offset = "0xE48C90", VA = "0xE48C90")]
		public static extern int ISteamFriends_GetMediumFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000555")]
		[Address(RVA = "0xE48D10", Offset = "0xE48D10", VA = "0xE48D10")]
		public static extern int ISteamFriends_GetLargeFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000556")]
		[Address(RVA = "0xE48D90", Offset = "0xE48D90", VA = "0xE48D90")]
		public static extern bool ISteamFriends_RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly);

		[PreserveSig]
		[Token(Token = "0x6000557")]
		[Address(RVA = "0xE48E28", Offset = "0xE48E28", VA = "0xE48E28")]
		public static extern ulong ISteamFriends_RequestClanOfficerList(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000558")]
		[Address(RVA = "0xE48EA8", Offset = "0xE48EA8", VA = "0xE48EA8")]
		public static extern ulong ISteamFriends_GetClanOwner(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000559")]
		[Address(RVA = "0xE48F28", Offset = "0xE48F28", VA = "0xE48F28")]
		public static extern int ISteamFriends_GetClanOfficerCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600055A")]
		[Address(RVA = "0xE48FA8", Offset = "0xE48FA8", VA = "0xE48FA8")]
		public static extern ulong ISteamFriends_GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer);

		[PreserveSig]
		[Token(Token = "0x600055B")]
		[Address(RVA = "0xE49038", Offset = "0xE49038", VA = "0xE49038")]
		public static extern uint ISteamFriends_GetUserRestrictions();

		[PreserveSig]
		[Token(Token = "0x600055C")]
		[Address(RVA = "0xE490AC", Offset = "0xE490AC", VA = "0xE490AC")]
		public static extern bool ISteamFriends_SetRichPresence(InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x600055D")]
		[Address(RVA = "0xE490C8", Offset = "0xE490C8", VA = "0xE490C8")]
		public static extern void ISteamFriends_ClearRichPresence();

		[PreserveSig]
		[Token(Token = "0x600055E")]
		[Address(RVA = "0xE49138", Offset = "0xE49138", VA = "0xE49138")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresence(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600055F")]
		[Address(RVA = "0xE49154", Offset = "0xE49154", VA = "0xE49154")]
		public static extern int ISteamFriends_GetFriendRichPresenceKeyCount(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000560")]
		[Address(RVA = "0xE491D4", Offset = "0xE491D4", VA = "0xE491D4")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey);

		[PreserveSig]
		[Token(Token = "0x6000561")]
		[Address(RVA = "0xE49264", Offset = "0xE49264", VA = "0xE49264")]
		public static extern void ISteamFriends_RequestFriendRichPresence(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000562")]
		[Address(RVA = "0xE492E4", Offset = "0xE492E4", VA = "0xE492E4")]
		public static extern bool ISteamFriends_InviteUserToGame(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchConnectString);

		[PreserveSig]
		[Token(Token = "0x6000563")]
		[Address(RVA = "0xE49300", Offset = "0xE49300", VA = "0xE49300")]
		public static extern int ISteamFriends_GetCoplayFriendCount();

		[PreserveSig]
		[Token(Token = "0x6000564")]
		[Address(RVA = "0xE49374", Offset = "0xE49374", VA = "0xE49374")]
		public static extern ulong ISteamFriends_GetCoplayFriend(int iCoplayFriend);

		[PreserveSig]
		[Token(Token = "0x6000565")]
		[Address(RVA = "0xE493F4", Offset = "0xE493F4", VA = "0xE493F4")]
		public static extern int ISteamFriends_GetFriendCoplayTime(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000566")]
		[Address(RVA = "0xE49474", Offset = "0xE49474", VA = "0xE49474")]
		public static extern uint ISteamFriends_GetFriendCoplayGame(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000567")]
		[Address(RVA = "0xE494F4", Offset = "0xE494F4", VA = "0xE494F4")]
		public static extern ulong ISteamFriends_JoinClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000568")]
		[Address(RVA = "0xE49574", Offset = "0xE49574", VA = "0xE49574")]
		public static extern bool ISteamFriends_LeaveClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000569")]
		[Address(RVA = "0xE495FC", Offset = "0xE495FC", VA = "0xE495FC")]
		public static extern int ISteamFriends_GetClanChatMemberCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600056A")]
		[Address(RVA = "0xE4967C", Offset = "0xE4967C", VA = "0xE4967C")]
		public static extern ulong ISteamFriends_GetChatMemberByIndex(CSteamID steamIDClan, int iUser);

		[PreserveSig]
		[Token(Token = "0x600056B")]
		[Address(RVA = "0xE4970C", Offset = "0xE4970C", VA = "0xE4970C")]
		public static extern bool ISteamFriends_SendClanChatMessage(CSteamID steamIDClanChat, InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x600056C")]
		[Address(RVA = "0xE49728", Offset = "0xE49728", VA = "0xE49728")]
		public static extern int ISteamFriends_GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter);

		[PreserveSig]
		[Token(Token = "0x600056D")]
		[Address(RVA = "0xE497E8", Offset = "0xE497E8", VA = "0xE497E8")]
		public static extern bool ISteamFriends_IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x600056E")]
		[Address(RVA = "0xE49880", Offset = "0xE49880", VA = "0xE49880")]
		public static extern bool ISteamFriends_IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x600056F")]
		[Address(RVA = "0xE49908", Offset = "0xE49908", VA = "0xE49908")]
		public static extern bool ISteamFriends_OpenClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x6000570")]
		[Address(RVA = "0xE49990", Offset = "0xE49990", VA = "0xE49990")]
		public static extern bool ISteamFriends_CloseClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x6000571")]
		[Address(RVA = "0xE49A18", Offset = "0xE49A18", VA = "0xE49A18")]
		public static extern bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled);

		[PreserveSig]
		[Token(Token = "0x6000572")]
		[Address(RVA = "0xE49AA0", Offset = "0xE49AA0", VA = "0xE49AA0")]
		public static extern bool ISteamFriends_ReplyToFriendMessage(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchMsgToSend);

		[PreserveSig]
		[Token(Token = "0x6000573")]
		[Address(RVA = "0xE49ABC", Offset = "0xE49ABC", VA = "0xE49ABC")]
		public static extern int ISteamFriends_GetFriendMessage(CSteamID steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x6000574")]
		[Address(RVA = "0xE49B6C", Offset = "0xE49B6C", VA = "0xE49B6C")]
		public static extern ulong ISteamFriends_GetFollowerCount(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000575")]
		[Address(RVA = "0xE49BEC", Offset = "0xE49BEC", VA = "0xE49BEC")]
		public static extern ulong ISteamFriends_IsFollowing(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000576")]
		[Address(RVA = "0xE49C6C", Offset = "0xE49C6C", VA = "0xE49C6C")]
		public static extern ulong ISteamFriends_EnumerateFollowingList(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000577")]
		[Address(RVA = "0xE49CEC", Offset = "0xE49CEC", VA = "0xE49CEC")]
		public static extern bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x6000578")]
		[Address(RVA = "0xE49D08", Offset = "0xE49D08", VA = "0xE49D08")]
		public static extern void ISteamGameServer_SetProduct(InteropHelp.UTF8StringHandle pszProduct);

		[PreserveSig]
		[Token(Token = "0x6000579")]
		[Address(RVA = "0xE49D24", Offset = "0xE49D24", VA = "0xE49D24")]
		public static extern void ISteamGameServer_SetGameDescription(InteropHelp.UTF8StringHandle pszGameDescription);

		[PreserveSig]
		[Token(Token = "0x600057A")]
		[Address(RVA = "0xE49D40", Offset = "0xE49D40", VA = "0xE49D40")]
		public static extern void ISteamGameServer_SetModDir(InteropHelp.UTF8StringHandle pszModDir);

		[PreserveSig]
		[Token(Token = "0x600057B")]
		[Address(RVA = "0xE49D5C", Offset = "0xE49D5C", VA = "0xE49D5C")]
		public static extern void ISteamGameServer_SetDedicatedServer(bool bDedicated);

		[PreserveSig]
		[Token(Token = "0x600057C")]
		[Address(RVA = "0xE49DDC", Offset = "0xE49DDC", VA = "0xE49DDC")]
		public static extern void ISteamGameServer_LogOn(InteropHelp.UTF8StringHandle pszToken);

		[PreserveSig]
		[Token(Token = "0x600057D")]
		[Address(RVA = "0xE49DF8", Offset = "0xE49DF8", VA = "0xE49DF8")]
		public static extern void ISteamGameServer_LogOnAnonymous();

		[PreserveSig]
		[Token(Token = "0x600057E")]
		[Address(RVA = "0xE49E68", Offset = "0xE49E68", VA = "0xE49E68")]
		public static extern void ISteamGameServer_LogOff();

		[PreserveSig]
		[Token(Token = "0x600057F")]
		[Address(RVA = "0xE49ED8", Offset = "0xE49ED8", VA = "0xE49ED8")]
		public static extern bool ISteamGameServer_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x6000580")]
		[Address(RVA = "0xE49F54", Offset = "0xE49F54", VA = "0xE49F54")]
		public static extern bool ISteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x6000581")]
		[Address(RVA = "0xE49FD0", Offset = "0xE49FD0", VA = "0xE49FD0")]
		public static extern ulong ISteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x6000582")]
		[Address(RVA = "0xE4A044", Offset = "0xE4A044", VA = "0xE4A044")]
		public static extern bool ISteamGameServer_WasRestartRequested();

		[PreserveSig]
		[Token(Token = "0x6000583")]
		[Address(RVA = "0xE4A0C0", Offset = "0xE4A0C0", VA = "0xE4A0C0")]
		public static extern void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

		[PreserveSig]
		[Token(Token = "0x6000584")]
		[Address(RVA = "0xE4A140", Offset = "0xE4A140", VA = "0xE4A140")]
		public static extern void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

		[PreserveSig]
		[Token(Token = "0x6000585")]
		[Address(RVA = "0xE4A1C0", Offset = "0xE4A1C0", VA = "0xE4A1C0")]
		public static extern void ISteamGameServer_SetServerName(InteropHelp.UTF8StringHandle pszServerName);

		[PreserveSig]
		[Token(Token = "0x6000586")]
		[Address(RVA = "0xE4A1DC", Offset = "0xE4A1DC", VA = "0xE4A1DC")]
		public static extern void ISteamGameServer_SetMapName(InteropHelp.UTF8StringHandle pszMapName);

		[PreserveSig]
		[Token(Token = "0x6000587")]
		[Address(RVA = "0xE4A1F8", Offset = "0xE4A1F8", VA = "0xE4A1F8")]
		public static extern void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected);

		[PreserveSig]
		[Token(Token = "0x6000588")]
		[Address(RVA = "0xE4A278", Offset = "0xE4A278", VA = "0xE4A278")]
		public static extern void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

		[PreserveSig]
		[Token(Token = "0x6000589")]
		[Address(RVA = "0xE4A2F8", Offset = "0xE4A2F8", VA = "0xE4A2F8")]
		public static extern void ISteamGameServer_SetSpectatorServerName(InteropHelp.UTF8StringHandle pszSpectatorServerName);

		[PreserveSig]
		[Token(Token = "0x600058A")]
		[Address(RVA = "0xE4A314", Offset = "0xE4A314", VA = "0xE4A314")]
		public static extern void ISteamGameServer_ClearAllKeyValues();

		[PreserveSig]
		[Token(Token = "0x600058B")]
		[Address(RVA = "0xE4A384", Offset = "0xE4A384", VA = "0xE4A384")]
		public static extern void ISteamGameServer_SetKeyValue(InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x600058C")]
		[Address(RVA = "0xE4A3A0", Offset = "0xE4A3A0", VA = "0xE4A3A0")]
		public static extern void ISteamGameServer_SetGameTags(InteropHelp.UTF8StringHandle pchGameTags);

		[PreserveSig]
		[Token(Token = "0x600058D")]
		[Address(RVA = "0xE4A3BC", Offset = "0xE4A3BC", VA = "0xE4A3BC")]
		public static extern void ISteamGameServer_SetGameData(InteropHelp.UTF8StringHandle pchGameData);

		[PreserveSig]
		[Token(Token = "0x600058E")]
		[Address(RVA = "0xE4A3D8", Offset = "0xE4A3D8", VA = "0xE4A3D8")]
		public static extern void ISteamGameServer_SetRegion(InteropHelp.UTF8StringHandle pszRegion);

		[PreserveSig]
		[Token(Token = "0x600058F")]
		[Address(RVA = "0xE4A3F4", Offset = "0xE4A3F4", VA = "0xE4A3F4")]
		public static extern bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000590")]
		[Address(RVA = "0xE4A4AC", Offset = "0xE4A4AC", VA = "0xE4A4AC")]
		public static extern ulong ISteamGameServer_CreateUnauthenticatedUserConnection();

		[PreserveSig]
		[Token(Token = "0x6000591")]
		[Address(RVA = "0xE4A520", Offset = "0xE4A520", VA = "0xE4A520")]
		public static extern void ISteamGameServer_SendUserDisconnect(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000592")]
		[Address(RVA = "0xE4A5A0", Offset = "0xE4A5A0", VA = "0xE4A5A0")]
		public static extern bool ISteamGameServer_BUpdateUserData(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchPlayerName, uint uScore);

		[PreserveSig]
		[Token(Token = "0x6000593")]
		[Address(RVA = "0xE4A5BC", Offset = "0xE4A5BC", VA = "0xE4A5BC")]
		public static extern uint ISteamGameServer_GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6000594")]
		[Address(RVA = "0xE4A65C", Offset = "0xE4A65C", VA = "0xE4A65C")]
		public static extern EBeginAuthSessionResult ISteamGameServer_BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000595")]
		[Address(RVA = "0xE4A6FC", Offset = "0xE4A6FC", VA = "0xE4A6FC")]
		public static extern void ISteamGameServer_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000596")]
		[Address(RVA = "0xE4A77C", Offset = "0xE4A77C", VA = "0xE4A77C")]
		public static extern void ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x6000597")]
		[Address(RVA = "0xE4A7FC", Offset = "0xE4A7FC", VA = "0xE4A7FC")]
		public static extern EUserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000598")]
		[Address(RVA = "0xE4A88C", Offset = "0xE4A88C", VA = "0xE4A88C")]
		public static extern bool ISteamGameServer_RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup);

		[PreserveSig]
		[Token(Token = "0x6000599")]
		[Address(RVA = "0xE4A924", Offset = "0xE4A924", VA = "0xE4A924")]
		public static extern void ISteamGameServer_GetGameplayStats();

		[PreserveSig]
		[Token(Token = "0x600059A")]
		[Address(RVA = "0xE4A994", Offset = "0xE4A994", VA = "0xE4A994")]
		public static extern ulong ISteamGameServer_GetServerReputation();

		[PreserveSig]
		[Token(Token = "0x600059B")]
		[Address(RVA = "0xE4AA08", Offset = "0xE4AA08", VA = "0xE4AA08")]
		public static extern uint ISteamGameServer_GetPublicIP();

		[PreserveSig]
		[Token(Token = "0x600059C")]
		[Address(RVA = "0xE4AA7C", Offset = "0xE4AA7C", VA = "0xE4AA7C")]
		public static extern bool ISteamGameServer_HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort);

		[PreserveSig]
		[Token(Token = "0x600059D")]
		[Address(RVA = "0xE4AB34", Offset = "0xE4AB34", VA = "0xE4AB34")]
		public static extern int ISteamGameServer_GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

		[PreserveSig]
		[Token(Token = "0x600059E")]
		[Address(RVA = "0xE4ABE4", Offset = "0xE4ABE4", VA = "0xE4ABE4")]
		public static extern void ISteamGameServer_EnableHeartbeats(bool bActive);

		[PreserveSig]
		[Token(Token = "0x600059F")]
		[Address(RVA = "0xE4AC64", Offset = "0xE4AC64", VA = "0xE4AC64")]
		public static extern void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

		[PreserveSig]
		[Token(Token = "0x60005A0")]
		[Address(RVA = "0xE4ACE4", Offset = "0xE4ACE4", VA = "0xE4ACE4")]
		public static extern void ISteamGameServer_ForceHeartbeat();

		[PreserveSig]
		[Token(Token = "0x60005A1")]
		[Address(RVA = "0xE4AD54", Offset = "0xE4AD54", VA = "0xE4AD54")]
		public static extern ulong ISteamGameServer_AssociateWithClan(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60005A2")]
		[Address(RVA = "0xE4ADD4", Offset = "0xE4ADD4", VA = "0xE4ADD4")]
		public static extern ulong ISteamGameServer_ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer);

		[PreserveSig]
		[Token(Token = "0x60005A3")]
		[Address(RVA = "0xE4AE54", Offset = "0xE4AE54", VA = "0xE4AE54")]
		public static extern ulong ISteamGameServerStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60005A4")]
		[Address(RVA = "0xE4AED4", Offset = "0xE4AED4", VA = "0xE4AED4")]
		public static extern bool ISteamGameServerStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x60005A5")]
		[Address(RVA = "0xE4AEF0", Offset = "0xE4AEF0", VA = "0xE4AEF0")]
		public static extern bool ISteamGameServerStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x60005A6")]
		[Address(RVA = "0xE4AF0C", Offset = "0xE4AF0C", VA = "0xE4AF0C")]
		public static extern bool ISteamGameServerStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60005A7")]
		[Address(RVA = "0xE4AF28", Offset = "0xE4AF28", VA = "0xE4AF28")]
		public static extern bool ISteamGameServerStats_SetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xE4AF44", Offset = "0xE4AF44", VA = "0xE4AF44")]
		public static extern bool ISteamGameServerStats_SetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x60005A9")]
		[Address(RVA = "0xE4AF60", Offset = "0xE4AF60", VA = "0xE4AF60")]
		public static extern bool ISteamGameServerStats_UpdateUserAvgRateStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xE4AF7C", Offset = "0xE4AF7C", VA = "0xE4AF7C")]
		public static extern bool ISteamGameServerStats_SetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xE4AF98", Offset = "0xE4AF98", VA = "0xE4AF98")]
		public static extern bool ISteamGameServerStats_ClearUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60005AC")]
		[Address(RVA = "0xE4AFB4", Offset = "0xE4AFB4", VA = "0xE4AFB4")]
		public static extern ulong ISteamGameServerStats_StoreUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60005AD")]
		[Address(RVA = "0xE4B034", Offset = "0xE4B034", VA = "0xE4B034")]
		public static extern bool ISteamHTMLSurface_Init();

		[PreserveSig]
		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xE4B0B0", Offset = "0xE4B0B0", VA = "0xE4B0B0")]
		public static extern bool ISteamHTMLSurface_Shutdown();

		[PreserveSig]
		[Token(Token = "0x60005AF")]
		[Address(RVA = "0xE4B12C", Offset = "0xE4B12C", VA = "0xE4B12C")]
		public static extern ulong ISteamHTMLSurface_CreateBrowser(InteropHelp.UTF8StringHandle pchUserAgent, InteropHelp.UTF8StringHandle pchUserCSS);

		[PreserveSig]
		[Token(Token = "0x60005B0")]
		[Address(RVA = "0xE4B148", Offset = "0xE4B148", VA = "0xE4B148")]
		public static extern void ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60005B1")]
		[Address(RVA = "0xE4B1C8", Offset = "0xE4B1C8", VA = "0xE4B1C8")]
		public static extern void ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchURL, InteropHelp.UTF8StringHandle pchPostData);

		[PreserveSig]
		[Token(Token = "0x60005B2")]
		[Address(RVA = "0xE4B1E4", Offset = "0xE4B1E4", VA = "0xE4B1E4")]
		public static extern void ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight);

		[PreserveSig]
		[Token(Token = "0x60005B3")]
		[Address(RVA = "0xE4B27C", Offset = "0xE4B27C", VA = "0xE4B27C")]
		public static extern void ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xE4B2FC", Offset = "0xE4B2FC", VA = "0xE4B2FC")]
		public static extern void ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xE4B37C", Offset = "0xE4B37C", VA = "0xE4B37C")]
		public static extern void ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xE4B3FC", Offset = "0xE4B3FC", VA = "0xE4B3FC")]
		public static extern void ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60005B7")]
		[Address(RVA = "0xE4B47C", Offset = "0xE4B47C", VA = "0xE4B47C")]
		public static extern void ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60005B8")]
		[Address(RVA = "0xE4B498", Offset = "0xE4B498", VA = "0xE4B498")]
		public static extern void ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchScript);

		[PreserveSig]
		[Token(Token = "0x60005B9")]
		[Address(RVA = "0xE4B4B4", Offset = "0xE4B4B4", VA = "0xE4B4B4")]
		public static extern void ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x60005BA")]
		[Address(RVA = "0xE4B544", Offset = "0xE4B544", VA = "0xE4B544")]
		public static extern void ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x60005BB")]
		[Address(RVA = "0xE4B5D4", Offset = "0xE4B5D4", VA = "0xE4B5D4")]
		public static extern void ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x60005BC")]
		[Address(RVA = "0xE4B664", Offset = "0xE4B664", VA = "0xE4B664")]
		public static extern void ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x60005BD")]
		[Address(RVA = "0xE4B6FC", Offset = "0xE4B6FC", VA = "0xE4B6FC")]
		public static extern void ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta);

		[PreserveSig]
		[Token(Token = "0x60005BE")]
		[Address(RVA = "0xE4B78C", Offset = "0xE4B78C", VA = "0xE4B78C")]
		public static extern void ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x60005BF")]
		[Address(RVA = "0xE4B824", Offset = "0xE4B824", VA = "0xE4B824")]
		public static extern void ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x60005C0")]
		[Address(RVA = "0xE4B8BC", Offset = "0xE4B8BC", VA = "0xE4B8BC")]
		public static extern void ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x60005C1")]
		[Address(RVA = "0xE4B954", Offset = "0xE4B954", VA = "0xE4B954")]
		public static extern void ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x60005C2")]
		[Address(RVA = "0xE4B9E4", Offset = "0xE4B9E4", VA = "0xE4B9E4")]
		public static extern void ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x60005C3")]
		[Address(RVA = "0xE4BA74", Offset = "0xE4BA74", VA = "0xE4BA74")]
		public static extern void ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);

		[PreserveSig]
		[Token(Token = "0x60005C4")]
		[Address(RVA = "0xE4BB04", Offset = "0xE4BB04", VA = "0xE4BB04")]
		public static extern void ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60005C5")]
		[Address(RVA = "0xE4BB84", Offset = "0xE4BB84", VA = "0xE4BB84")]
		public static extern void ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60005C6")]
		[Address(RVA = "0xE4BC04", Offset = "0xE4BC04", VA = "0xE4BC04")]
		public static extern void ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60005C7")]
		[Address(RVA = "0xE4BC84", Offset = "0xE4BC84", VA = "0xE4BC84")]
		public static extern void ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchSearchStr, bool bCurrentlyInFind, bool bReverse);

		[PreserveSig]
		[Token(Token = "0x60005C8")]
		[Address(RVA = "0xE4BCA0", Offset = "0xE4BCA0", VA = "0xE4BCA0")]
		public static extern void ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xE4BD20", Offset = "0xE4BD20", VA = "0xE4BD20")]
		public static extern void ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xE4BDB8", Offset = "0xE4BDB8", VA = "0xE4BDB8")]
		public static extern void ISteamHTMLSurface_SetCookie(InteropHelp.UTF8StringHandle pchHostname, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue, InteropHelp.UTF8StringHandle pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

		[PreserveSig]
		[Token(Token = "0x60005CB")]
		[Address(RVA = "0xE4BDD4", Offset = "0xE4BDD4", VA = "0xE4BDD4")]
		public static extern void ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);

		[PreserveSig]
		[Token(Token = "0x60005CC")]
		[Address(RVA = "0xE4BE7C", Offset = "0xE4BE7C", VA = "0xE4BE7C")]
		public static extern void ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode);

		[PreserveSig]
		[Token(Token = "0x60005CD")]
		[Address(RVA = "0xE4BF0C", Offset = "0xE4BF0C", VA = "0xE4BF0C")]
		public static extern void ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed);

		[PreserveSig]
		[Token(Token = "0x60005CE")]
		[Address(RVA = "0xE4BF9C", Offset = "0xE4BF9C", VA = "0xE4BF9C")]
		public static extern void ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult);

		[PreserveSig]
		[Token(Token = "0x60005CF")]
		[Address(RVA = "0xE4C02C", Offset = "0xE4C02C", VA = "0xE4C02C")]
		public static extern void ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles);

		[PreserveSig]
		[Token(Token = "0x60005D0")]
		[Address(RVA = "0xE4C0BC", Offset = "0xE4C0BC", VA = "0xE4C0BC")]
		public static extern uint ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x60005D1")]
		[Address(RVA = "0xE4C0D8", Offset = "0xE4C0D8", VA = "0xE4C0D8")]
		public static extern bool ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x60005D2")]
		[Address(RVA = "0xE4C170", Offset = "0xE4C170", VA = "0xE4C170")]
		public static extern bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x60005D3")]
		[Address(RVA = "0xE4C208", Offset = "0xE4C208", VA = "0xE4C208")]
		public static extern bool ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x60005D4")]
		[Address(RVA = "0xE4C224", Offset = "0xE4C224", VA = "0xE4C224")]
		public static extern bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x60005D5")]
		[Address(RVA = "0xE4C240", Offset = "0xE4C240", VA = "0xE4C240")]
		public static extern bool ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x60005D6")]
		[Address(RVA = "0xE4C2D8", Offset = "0xE4C2D8", VA = "0xE4C2D8")]
		public static extern bool ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x60005D7")]
		[Address(RVA = "0xE4C370", Offset = "0xE4C370", VA = "0xE4C370")]
		public static extern bool ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60005D8")]
		[Address(RVA = "0xE4C3F8", Offset = "0xE4C3F8", VA = "0xE4C3F8")]
		public static extern bool ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60005D9")]
		[Address(RVA = "0xE4C480", Offset = "0xE4C480", VA = "0xE4C480")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x60005DA")]
		[Address(RVA = "0xE4C49C", Offset = "0xE4C49C", VA = "0xE4C49C")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60005DB")]
		[Address(RVA = "0xE4C4B8", Offset = "0xE4C4B8", VA = "0xE4C4B8")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x60005DC")]
		[Address(RVA = "0xE4C550", Offset = "0xE4C550", VA = "0xE4C550")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60005DD")]
		[Address(RVA = "0xE4C5F8", Offset = "0xE4C5F8", VA = "0xE4C5F8")]
		public static extern bool ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60005DE")]
		[Address(RVA = "0xE4C6B0", Offset = "0xE4C6B0", VA = "0xE4C6B0")]
		public static extern bool ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60005DF")]
		[Address(RVA = "0xE4C738", Offset = "0xE4C738", VA = "0xE4C738")]
		public static extern bool ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x60005E0")]
		[Address(RVA = "0xE4C7D0", Offset = "0xE4C7D0", VA = "0xE4C7D0")]
		public static extern bool ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x60005E1")]
		[Address(RVA = "0xE4C7EC", Offset = "0xE4C7EC", VA = "0xE4C7EC")]
		public static extern uint ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x60005E2")]
		[Address(RVA = "0xE4C86C", Offset = "0xE4C86C", VA = "0xE4C86C")]
		public static extern bool ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x60005E3")]
		[Address(RVA = "0xE4C8F4", Offset = "0xE4C8F4", VA = "0xE4C8F4")]
		public static extern bool ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x60005E4")]
		[Address(RVA = "0xE4C910", Offset = "0xE4C910", VA = "0xE4C910")]
		public static extern bool ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x60005E5")]
		[Address(RVA = "0xE4C9A8", Offset = "0xE4C9A8", VA = "0xE4C9A8")]
		public static extern bool ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x60005E6")]
		[Address(RVA = "0xE4C9C4", Offset = "0xE4C9C4", VA = "0xE4C9C4")]
		public static extern bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x60005E7")]
		[Address(RVA = "0xE4CA5C", Offset = "0xE4CA5C", VA = "0xE4CA5C")]
		public static extern bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x60005E8")]
		[Address(RVA = "0xE4CAF4", Offset = "0xE4CAF4", VA = "0xE4CAF4")]
		public static extern bool ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x60005E9")]
		[Address(RVA = "0xE4CBA0", Offset = "0xE4CBA0", VA = "0xE4CBA0")]
		public static extern EResult ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60005EA")]
		[Address(RVA = "0xE4CC20", Offset = "0xE4CC20", VA = "0xE4CC20")]
		public static extern bool ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x60005EB")]
		[Address(RVA = "0xE4CCC8", Offset = "0xE4CCC8", VA = "0xE4CCC8")]
		public static extern bool ISteamInventory_GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x60005EC")]
		[Address(RVA = "0xE4CCE4", Offset = "0xE4CCE4", VA = "0xE4CCE4")]
		public static extern uint ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60005ED")]
		[Address(RVA = "0xE4CD64", Offset = "0xE4CD64", VA = "0xE4CD64")]
		public static extern bool ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0xE4CDFC", Offset = "0xE4CDFC", VA = "0xE4CDFC")]
		public static extern void ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xE4CE7C", Offset = "0xE4CE7C", VA = "0xE4CE7C")]
		public static extern bool ISteamInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xE4CF04", Offset = "0xE4CF04", VA = "0xE4CF04")]
		public static extern bool ISteamInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xE4CFAC", Offset = "0xE4CFAC", VA = "0xE4CFAC")]
		public static extern bool ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xE4D054", Offset = "0xE4D054", VA = "0xE4D054")]
		public static extern bool ISteamInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x60005F3")]
		[Address(RVA = "0xE4D10C", Offset = "0xE4D10C", VA = "0xE4D10C")]
		public static extern bool ISteamInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xE4D1CC", Offset = "0xE4D1CC", VA = "0xE4D1CC")]
		public static extern bool ISteamInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xE4D254", Offset = "0xE4D254", VA = "0xE4D254")]
		public static extern bool ISteamInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xE4D2EC", Offset = "0xE4D2EC", VA = "0xE4D2EC")]
		public static extern bool ISteamInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xE4D394", Offset = "0xE4D394", VA = "0xE4D394")]
		public static extern bool ISteamInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xE4D434", Offset = "0xE4D434", VA = "0xE4D434")]
		public static extern bool ISteamInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xE4D524", Offset = "0xE4D524", VA = "0xE4D524")]
		public static extern bool ISteamInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xE4D5D4", Offset = "0xE4D5D4", VA = "0xE4D5D4")]
		public static extern void ISteamInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xE4D644", Offset = "0xE4D644", VA = "0xE4D644")]
		public static extern bool ISteamInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xE4D6DC", Offset = "0xE4D6DC", VA = "0xE4D6DC")]
		public static extern bool ISteamInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xE4D7DC", Offset = "0xE4D7DC", VA = "0xE4D7DC")]
		public static extern bool ISteamInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xE4D858", Offset = "0xE4D858", VA = "0xE4D858")]
		public static extern bool ISteamInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xE4D8F8", Offset = "0xE4D8F8", VA = "0xE4D8F8")]
		public static extern bool ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x6000600")]
		[Address(RVA = "0xE4D914", Offset = "0xE4D914", VA = "0xE4D914")]
		public static extern ulong ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000601")]
		[Address(RVA = "0xE4D994", Offset = "0xE4D994", VA = "0xE4D994")]
		public static extern bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(CSteamID steamID, [In][Out] SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000602")]
		[Address(RVA = "0xE4DA3C", Offset = "0xE4DA3C", VA = "0xE4DA3C")]
		public static extern int ISteamMatchmaking_GetFavoriteGameCount();

		[PreserveSig]
		[Token(Token = "0x6000603")]
		[Address(RVA = "0xE4DAB0", Offset = "0xE4DAB0", VA = "0xE4DAB0")]
		public static extern bool ISteamMatchmaking_GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x6000604")]
		[Address(RVA = "0xE4DB80", Offset = "0xE4DB80", VA = "0xE4DB80")]
		public static extern int ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x6000605")]
		[Address(RVA = "0xE4DC40", Offset = "0xE4DC40", VA = "0xE4DC40")]
		public static extern bool ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

		[PreserveSig]
		[Token(Token = "0x6000606")]
		[Address(RVA = "0xE4DCF8", Offset = "0xE4DCF8", VA = "0xE4DCF8")]
		public static extern ulong ISteamMatchmaking_RequestLobbyList();

		[PreserveSig]
		[Token(Token = "0x6000607")]
		[Address(RVA = "0xE4DD6C", Offset = "0xE4DD6C", VA = "0xE4DD6C")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListStringFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, InteropHelp.UTF8StringHandle pchValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x6000608")]
		[Address(RVA = "0xE4DD88", Offset = "0xE4DD88", VA = "0xE4DD88")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x6000609")]
		[Address(RVA = "0xE4DDA4", Offset = "0xE4DDA4", VA = "0xE4DDA4")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToBeCloseTo);

		[PreserveSig]
		[Token(Token = "0x600060A")]
		[Address(RVA = "0xE4DDC0", Offset = "0xE4DDC0", VA = "0xE4DDC0")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

		[PreserveSig]
		[Token(Token = "0x600060B")]
		[Address(RVA = "0xE4DE40", Offset = "0xE4DE40", VA = "0xE4DE40")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter);

		[PreserveSig]
		[Token(Token = "0x600060C")]
		[Address(RVA = "0xE4DEC0", Offset = "0xE4DEC0", VA = "0xE4DEC0")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

		[PreserveSig]
		[Token(Token = "0x600060D")]
		[Address(RVA = "0xE4DF40", Offset = "0xE4DF40", VA = "0xE4DF40")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600060E")]
		[Address(RVA = "0xE4DFC0", Offset = "0xE4DFC0", VA = "0xE4DFC0")]
		public static extern ulong ISteamMatchmaking_GetLobbyByIndex(int iLobby);

		[PreserveSig]
		[Token(Token = "0x600060F")]
		[Address(RVA = "0xE4E040", Offset = "0xE4E040", VA = "0xE4E040")]
		public static extern ulong ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x6000610")]
		[Address(RVA = "0xE4E0D0", Offset = "0xE4E0D0", VA = "0xE4E0D0")]
		public static extern ulong ISteamMatchmaking_JoinLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000611")]
		[Address(RVA = "0xE4E150", Offset = "0xE4E150", VA = "0xE4E150")]
		public static extern void ISteamMatchmaking_LeaveLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000612")]
		[Address(RVA = "0xE4E1D0", Offset = "0xE4E1D0", VA = "0xE4E1D0")]
		public static extern bool ISteamMatchmaking_InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee);

		[PreserveSig]
		[Token(Token = "0x6000613")]
		[Address(RVA = "0xE4E268", Offset = "0xE4E268", VA = "0xE4E268")]
		public static extern int ISteamMatchmaking_GetNumLobbyMembers(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000614")]
		[Address(RVA = "0xE4E2E8", Offset = "0xE4E2E8", VA = "0xE4E2E8")]
		public static extern ulong ISteamMatchmaking_GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember);

		[PreserveSig]
		[Token(Token = "0x6000615")]
		[Address(RVA = "0xE4E378", Offset = "0xE4E378", VA = "0xE4E378")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000616")]
		[Address(RVA = "0xE4E394", Offset = "0xE4E394", VA = "0xE4E394")]
		public static extern bool ISteamMatchmaking_SetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000617")]
		[Address(RVA = "0xE4E3B0", Offset = "0xE4E3B0", VA = "0xE4E3B0")]
		public static extern int ISteamMatchmaking_GetLobbyDataCount(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000618")]
		[Address(RVA = "0xE4E430", Offset = "0xE4E430", VA = "0xE4E430")]
		public static extern bool ISteamMatchmaking_GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000619")]
		[Address(RVA = "0xE4E4F8", Offset = "0xE4E4F8", VA = "0xE4E4F8")]
		public static extern bool ISteamMatchmaking_DeleteLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600061A")]
		[Address(RVA = "0xE4E514", Offset = "0xE4E514", VA = "0xE4E514")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600061B")]
		[Address(RVA = "0xE4E530", Offset = "0xE4E530", VA = "0xE4E530")]
		public static extern void ISteamMatchmaking_SetLobbyMemberData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x600061C")]
		[Address(RVA = "0xE4E54C", Offset = "0xE4E54C", VA = "0xE4E54C")]
		public static extern bool ISteamMatchmaking_SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody);

		[PreserveSig]
		[Token(Token = "0x600061D")]
		[Address(RVA = "0xE4E5F4", Offset = "0xE4E5F4", VA = "0xE4E5F4")]
		public static extern int ISteamMatchmaking_GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x600061E")]
		[Address(RVA = "0xE4E6BC", Offset = "0xE4E6BC", VA = "0xE4E6BC")]
		public static extern bool ISteamMatchmaking_RequestLobbyData(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600061F")]
		[Address(RVA = "0xE4E744", Offset = "0xE4E744", VA = "0xE4E744")]
		public static extern void ISteamMatchmaking_SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x6000620")]
		[Address(RVA = "0xE4E7EC", Offset = "0xE4E7EC", VA = "0xE4E7EC")]
		public static extern bool ISteamMatchmaking_GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x6000621")]
		[Address(RVA = "0xE4E89C", Offset = "0xE4E89C", VA = "0xE4E89C")]
		public static extern bool ISteamMatchmaking_SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x6000622")]
		[Address(RVA = "0xE4E934", Offset = "0xE4E934", VA = "0xE4E934")]
		public static extern int ISteamMatchmaking_GetLobbyMemberLimit(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000623")]
		[Address(RVA = "0xE4E9B4", Offset = "0xE4E9B4", VA = "0xE4E9B4")]
		public static extern bool ISteamMatchmaking_SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType);

		[PreserveSig]
		[Token(Token = "0x6000624")]
		[Address(RVA = "0xE4EA4C", Offset = "0xE4EA4C", VA = "0xE4EA4C")]
		public static extern bool ISteamMatchmaking_SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable);

		[PreserveSig]
		[Token(Token = "0x6000625")]
		[Address(RVA = "0xE4EAE4", Offset = "0xE4EAE4", VA = "0xE4EAE4")]
		public static extern ulong ISteamMatchmaking_GetLobbyOwner(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000626")]
		[Address(RVA = "0xE4EB64", Offset = "0xE4EB64", VA = "0xE4EB64")]
		public static extern bool ISteamMatchmaking_SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner);

		[PreserveSig]
		[Token(Token = "0x6000627")]
		[Address(RVA = "0xE4EBFC", Offset = "0xE4EBFC", VA = "0xE4EBFC")]
		public static extern bool ISteamMatchmaking_SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent);

		[PreserveSig]
		[Token(Token = "0x6000628")]
		[Address(RVA = "0xE4EC94", Offset = "0xE4EC94", VA = "0xE4EC94")]
		public static extern IntPtr ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000629")]
		[Address(RVA = "0xE4ED3C", Offset = "0xE4ED3C", VA = "0xE4ED3C")]
		public static extern IntPtr ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600062A")]
		[Address(RVA = "0xE4EDCC", Offset = "0xE4EDCC", VA = "0xE4EDCC")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600062B")]
		[Address(RVA = "0xE4EE74", Offset = "0xE4EE74", VA = "0xE4EE74")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600062C")]
		[Address(RVA = "0xE4EF1C", Offset = "0xE4EF1C", VA = "0xE4EF1C")]
		public static extern IntPtr ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600062D")]
		[Address(RVA = "0xE4EFC4", Offset = "0xE4EFC4", VA = "0xE4EFC4")]
		public static extern IntPtr ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600062E")]
		[Address(RVA = "0xE4F06C", Offset = "0xE4F06C", VA = "0xE4F06C")]
		public static extern void ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest);

		[PreserveSig]
		[Token(Token = "0x600062F")]
		[Address(RVA = "0xE4F0EC", Offset = "0xE4F0EC", VA = "0xE4F0EC")]
		public static extern IntPtr ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x6000630")]
		[Address(RVA = "0xE4F17C", Offset = "0xE4F17C", VA = "0xE4F17C")]
		public static extern void ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000631")]
		[Address(RVA = "0xE4F1FC", Offset = "0xE4F1FC", VA = "0xE4F1FC")]
		public static extern void ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000632")]
		[Address(RVA = "0xE4F27C", Offset = "0xE4F27C", VA = "0xE4F27C")]
		public static extern bool ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000633")]
		[Address(RVA = "0xE4F304", Offset = "0xE4F304", VA = "0xE4F304")]
		public static extern int ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000634")]
		[Address(RVA = "0xE4F384", Offset = "0xE4F384", VA = "0xE4F384")]
		public static extern void ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x6000635")]
		[Address(RVA = "0xE4F414", Offset = "0xE4F414", VA = "0xE4F414")]
		public static extern int ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000636")]
		[Address(RVA = "0xE4F4AC", Offset = "0xE4F4AC", VA = "0xE4F4AC")]
		public static extern int ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000637")]
		[Address(RVA = "0xE4F544", Offset = "0xE4F544", VA = "0xE4F544")]
		public static extern int ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000638")]
		[Address(RVA = "0xE4F5DC", Offset = "0xE4F5DC", VA = "0xE4F5DC")]
		public static extern void ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery);

		[PreserveSig]
		[Token(Token = "0x6000639")]
		[Address(RVA = "0xE4F65C", Offset = "0xE4F65C", VA = "0xE4F65C")]
		public static extern bool ISteamMusic_BIsEnabled();

		[PreserveSig]
		[Token(Token = "0x600063A")]
		[Address(RVA = "0xE4F6D8", Offset = "0xE4F6D8", VA = "0xE4F6D8")]
		public static extern bool ISteamMusic_BIsPlaying();

		[PreserveSig]
		[Token(Token = "0x600063B")]
		[Address(RVA = "0xE4F754", Offset = "0xE4F754", VA = "0xE4F754")]
		public static extern AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

		[PreserveSig]
		[Token(Token = "0x600063C")]
		[Address(RVA = "0xE4F7C8", Offset = "0xE4F7C8", VA = "0xE4F7C8")]
		public static extern void ISteamMusic_Play();

		[PreserveSig]
		[Token(Token = "0x600063D")]
		[Address(RVA = "0xE4F838", Offset = "0xE4F838", VA = "0xE4F838")]
		public static extern void ISteamMusic_Pause();

		[PreserveSig]
		[Token(Token = "0x600063E")]
		[Address(RVA = "0xE4F8A8", Offset = "0xE4F8A8", VA = "0xE4F8A8")]
		public static extern void ISteamMusic_PlayPrevious();

		[PreserveSig]
		[Token(Token = "0x600063F")]
		[Address(RVA = "0xE4F918", Offset = "0xE4F918", VA = "0xE4F918")]
		public static extern void ISteamMusic_PlayNext();

		[PreserveSig]
		[Token(Token = "0x6000640")]
		[Address(RVA = "0xE4F988", Offset = "0xE4F988", VA = "0xE4F988")]
		public static extern void ISteamMusic_SetVolume(float flVolume);

		[PreserveSig]
		[Token(Token = "0x6000641")]
		[Address(RVA = "0xE4FA0C", Offset = "0xE4FA0C", VA = "0xE4FA0C")]
		public static extern float ISteamMusic_GetVolume();

		[PreserveSig]
		[Token(Token = "0x6000642")]
		[Address(RVA = "0xE4FA7C", Offset = "0xE4FA7C", VA = "0xE4FA7C")]
		public static extern bool ISteamMusicRemote_RegisterSteamMusicRemote(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000643")]
		[Address(RVA = "0xE4FA98", Offset = "0xE4FA98", VA = "0xE4FA98")]
		public static extern bool ISteamMusicRemote_DeregisterSteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x6000644")]
		[Address(RVA = "0xE4FB14", Offset = "0xE4FB14", VA = "0xE4FB14")]
		public static extern bool ISteamMusicRemote_BIsCurrentMusicRemote();

		[PreserveSig]
		[Token(Token = "0x6000645")]
		[Address(RVA = "0xE4FB90", Offset = "0xE4FB90", VA = "0xE4FB90")]
		public static extern bool ISteamMusicRemote_BActivationSuccess(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000646")]
		[Address(RVA = "0xE4FC18", Offset = "0xE4FC18", VA = "0xE4FC18")]
		public static extern bool ISteamMusicRemote_SetDisplayName(InteropHelp.UTF8StringHandle pchDisplayName);

		[PreserveSig]
		[Token(Token = "0x6000647")]
		[Address(RVA = "0xE4FC34", Offset = "0xE4FC34", VA = "0xE4FC34")]
		public static extern bool ISteamMusicRemote_SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x6000648")]
		[Address(RVA = "0xE4FCD4", Offset = "0xE4FCD4", VA = "0xE4FCD4")]
		public static extern bool ISteamMusicRemote_EnablePlayPrevious(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000649")]
		[Address(RVA = "0xE4FD5C", Offset = "0xE4FD5C", VA = "0xE4FD5C")]
		public static extern bool ISteamMusicRemote_EnablePlayNext(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600064A")]
		[Address(RVA = "0xE4FDE4", Offset = "0xE4FDE4", VA = "0xE4FDE4")]
		public static extern bool ISteamMusicRemote_EnableShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600064B")]
		[Address(RVA = "0xE4FE6C", Offset = "0xE4FE6C", VA = "0xE4FE6C")]
		public static extern bool ISteamMusicRemote_EnableLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600064C")]
		[Address(RVA = "0xE4FEF4", Offset = "0xE4FEF4", VA = "0xE4FEF4")]
		public static extern bool ISteamMusicRemote_EnableQueue(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600064D")]
		[Address(RVA = "0xE4FF7C", Offset = "0xE4FF7C", VA = "0xE4FF7C")]
		public static extern bool ISteamMusicRemote_EnablePlaylists(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600064E")]
		[Address(RVA = "0xE50004", Offset = "0xE50004", VA = "0xE50004")]
		public static extern bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

		[PreserveSig]
		[Token(Token = "0x600064F")]
		[Address(RVA = "0xE5008C", Offset = "0xE5008C", VA = "0xE5008C")]
		public static extern bool ISteamMusicRemote_UpdateShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000650")]
		[Address(RVA = "0xE50114", Offset = "0xE50114", VA = "0xE50114")]
		public static extern bool ISteamMusicRemote_UpdateLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000651")]
		[Address(RVA = "0xE5019C", Offset = "0xE5019C", VA = "0xE5019C")]
		public static extern bool ISteamMusicRemote_UpdateVolume(float flValue);

		[PreserveSig]
		[Token(Token = "0x6000652")]
		[Address(RVA = "0xE5022C", Offset = "0xE5022C", VA = "0xE5022C")]
		public static extern bool ISteamMusicRemote_CurrentEntryWillChange();

		[PreserveSig]
		[Token(Token = "0x6000653")]
		[Address(RVA = "0xE502A8", Offset = "0xE502A8", VA = "0xE502A8")]
		public static extern bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable);

		[PreserveSig]
		[Token(Token = "0x6000654")]
		[Address(RVA = "0xE50330", Offset = "0xE50330", VA = "0xE50330")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryText(InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x6000655")]
		[Address(RVA = "0xE5034C", Offset = "0xE5034C", VA = "0xE5034C")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

		[PreserveSig]
		[Token(Token = "0x6000656")]
		[Address(RVA = "0xE503D4", Offset = "0xE503D4", VA = "0xE503D4")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x6000657")]
		[Address(RVA = "0xE50474", Offset = "0xE50474", VA = "0xE50474")]
		public static extern bool ISteamMusicRemote_CurrentEntryDidChange();

		[PreserveSig]
		[Token(Token = "0x6000658")]
		[Address(RVA = "0xE504F0", Offset = "0xE504F0", VA = "0xE504F0")]
		public static extern bool ISteamMusicRemote_QueueWillChange();

		[PreserveSig]
		[Token(Token = "0x6000659")]
		[Address(RVA = "0xE5056C", Offset = "0xE5056C", VA = "0xE5056C")]
		public static extern bool ISteamMusicRemote_ResetQueueEntries();

		[PreserveSig]
		[Token(Token = "0x600065A")]
		[Address(RVA = "0xE505E8", Offset = "0xE505E8", VA = "0xE505E8")]
		public static extern bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x600065B")]
		[Address(RVA = "0xE50604", Offset = "0xE50604", VA = "0xE50604")]
		public static extern bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x600065C")]
		[Address(RVA = "0xE5068C", Offset = "0xE5068C", VA = "0xE5068C")]
		public static extern bool ISteamMusicRemote_QueueDidChange();

		[PreserveSig]
		[Token(Token = "0x600065D")]
		[Address(RVA = "0xE50708", Offset = "0xE50708", VA = "0xE50708")]
		public static extern bool ISteamMusicRemote_PlaylistWillChange();

		[PreserveSig]
		[Token(Token = "0x600065E")]
		[Address(RVA = "0xE50784", Offset = "0xE50784", VA = "0xE50784")]
		public static extern bool ISteamMusicRemote_ResetPlaylistEntries();

		[PreserveSig]
		[Token(Token = "0x600065F")]
		[Address(RVA = "0xE50800", Offset = "0xE50800", VA = "0xE50800")]
		public static extern bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6000660")]
		[Address(RVA = "0xE5081C", Offset = "0xE5081C", VA = "0xE5081C")]
		public static extern bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x6000661")]
		[Address(RVA = "0xE508A4", Offset = "0xE508A4", VA = "0xE508A4")]
		public static extern bool ISteamMusicRemote_PlaylistDidChange();

		[PreserveSig]
		[Token(Token = "0x6000662")]
		[Address(RVA = "0xE50920", Offset = "0xE50920", VA = "0xE50920")]
		public static extern bool ISteamNetworking_SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000663")]
		[Address(RVA = "0xE509E0", Offset = "0xE509E0", VA = "0xE509E0")]
		public static extern bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000664")]
		[Address(RVA = "0xE50A78", Offset = "0xE50A78", VA = "0xE50A78")]
		public static extern bool ISteamNetworking_ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000665")]
		[Address(RVA = "0xE50B38", Offset = "0xE50B38", VA = "0xE50B38")]
		public static extern bool ISteamNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x6000666")]
		[Address(RVA = "0xE50BC0", Offset = "0xE50BC0", VA = "0xE50BC0")]
		public static extern bool ISteamNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x6000667")]
		[Address(RVA = "0xE50C48", Offset = "0xE50C48", VA = "0xE50C48")]
		public static extern bool ISteamNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000668")]
		[Address(RVA = "0xE50CE0", Offset = "0xE50CE0", VA = "0xE50CE0")]
		public static extern bool ISteamNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x6000669")]
		[Address(RVA = "0xE50D78", Offset = "0xE50D78", VA = "0xE50D78")]
		public static extern bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x600066A")]
		[Address(RVA = "0xE50E00", Offset = "0xE50E00", VA = "0xE50E00")]
		public static extern uint ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x600066B")]
		[Address(RVA = "0xE50EA8", Offset = "0xE50EA8", VA = "0xE50EA8")]
		public static extern uint ISteamNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x600066C")]
		[Address(RVA = "0xE50F50", Offset = "0xE50F50", VA = "0xE50F50")]
		public static extern uint ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x600066D")]
		[Address(RVA = "0xE50FE8", Offset = "0xE50FE8", VA = "0xE50FE8")]
		public static extern bool ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x600066E")]
		[Address(RVA = "0xE51080", Offset = "0xE51080", VA = "0xE51080")]
		public static extern bool ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x600066F")]
		[Address(RVA = "0xE51118", Offset = "0xE51118", VA = "0xE51118")]
		public static extern bool ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x6000670")]
		[Address(RVA = "0xE511D0", Offset = "0xE511D0", VA = "0xE511D0")]
		public static extern bool ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000671")]
		[Address(RVA = "0xE51268", Offset = "0xE51268", VA = "0xE51268")]
		public static extern bool ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000672")]
		[Address(RVA = "0xE51320", Offset = "0xE51320", VA = "0xE51320")]
		public static extern bool ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x6000673")]
		[Address(RVA = "0xE513C0", Offset = "0xE513C0", VA = "0xE513C0")]
		public static extern bool ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x6000674")]
		[Address(RVA = "0xE51480", Offset = "0xE51480", VA = "0xE51480")]
		public static extern bool ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x6000675")]
		[Address(RVA = "0xE51538", Offset = "0xE51538", VA = "0xE51538")]
		public static extern bool ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x6000676")]
		[Address(RVA = "0xE515D8", Offset = "0xE515D8", VA = "0xE515D8")]
		public static extern ESNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x6000677")]
		[Address(RVA = "0xE51658", Offset = "0xE51658", VA = "0xE51658")]
		public static extern int ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x6000678")]
		[Address(RVA = "0xE516D8", Offset = "0xE516D8", VA = "0xE516D8")]
		public static extern bool ISteamRemoteStorage_FileWrite(InteropHelp.UTF8StringHandle pchFile, byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000679")]
		[Address(RVA = "0xE516F4", Offset = "0xE516F4", VA = "0xE516F4")]
		public static extern int ISteamRemoteStorage_FileRead(InteropHelp.UTF8StringHandle pchFile, byte[] pvData, int cubDataToRead);

		[PreserveSig]
		[Token(Token = "0x600067A")]
		[Address(RVA = "0xE51710", Offset = "0xE51710", VA = "0xE51710")]
		public static extern ulong ISteamRemoteStorage_FileWriteAsync(InteropHelp.UTF8StringHandle pchFile, byte[] pvData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x600067B")]
		[Address(RVA = "0xE5172C", Offset = "0xE5172C", VA = "0xE5172C")]
		public static extern ulong ISteamRemoteStorage_FileReadAsync(InteropHelp.UTF8StringHandle pchFile, uint nOffset, uint cubToRead);

		[PreserveSig]
		[Token(Token = "0x600067C")]
		[Address(RVA = "0xE51748", Offset = "0xE51748", VA = "0xE51748")]
		public static extern bool ISteamRemoteStorage_FileReadAsyncComplete(SteamAPICall_t hReadCall, byte[] pvBuffer, uint cubToRead);

		[PreserveSig]
		[Token(Token = "0x600067D")]
		[Address(RVA = "0xE517F0", Offset = "0xE517F0", VA = "0xE517F0")]
		public static extern bool ISteamRemoteStorage_FileForget(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600067E")]
		[Address(RVA = "0xE5180C", Offset = "0xE5180C", VA = "0xE5180C")]
		public static extern bool ISteamRemoteStorage_FileDelete(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600067F")]
		[Address(RVA = "0xE51828", Offset = "0xE51828", VA = "0xE51828")]
		public static extern ulong ISteamRemoteStorage_FileShare(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000680")]
		[Address(RVA = "0xE51844", Offset = "0xE51844", VA = "0xE51844")]
		public static extern bool ISteamRemoteStorage_SetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);

		[PreserveSig]
		[Token(Token = "0x6000681")]
		[Address(RVA = "0xE51860", Offset = "0xE51860", VA = "0xE51860")]
		public static extern ulong ISteamRemoteStorage_FileWriteStreamOpen(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000682")]
		[Address(RVA = "0xE5187C", Offset = "0xE5187C", VA = "0xE5187C")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000683")]
		[Address(RVA = "0xE51924", Offset = "0xE51924", VA = "0xE51924")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x6000684")]
		[Address(RVA = "0xE519AC", Offset = "0xE519AC", VA = "0xE519AC")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x6000685")]
		[Address(RVA = "0xE51A34", Offset = "0xE51A34", VA = "0xE51A34")]
		public static extern bool ISteamRemoteStorage_FileExists(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000686")]
		[Address(RVA = "0xE51A50", Offset = "0xE51A50", VA = "0xE51A50")]
		public static extern bool ISteamRemoteStorage_FilePersisted(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000687")]
		[Address(RVA = "0xE51A6C", Offset = "0xE51A6C", VA = "0xE51A6C")]
		public static extern int ISteamRemoteStorage_GetFileSize(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000688")]
		[Address(RVA = "0xE51A88", Offset = "0xE51A88", VA = "0xE51A88")]
		public static extern long ISteamRemoteStorage_GetFileTimestamp(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000689")]
		[Address(RVA = "0xE51AA4", Offset = "0xE51AA4", VA = "0xE51AA4")]
		public static extern ERemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600068A")]
		[Address(RVA = "0xE51AC0", Offset = "0xE51AC0", VA = "0xE51AC0")]
		public static extern int ISteamRemoteStorage_GetFileCount();

		[PreserveSig]
		[Token(Token = "0x600068B")]
		[Address(RVA = "0xE51B34", Offset = "0xE51B34", VA = "0xE51B34")]
		public static extern IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

		[PreserveSig]
		[Token(Token = "0x600068C")]
		[Address(RVA = "0xE51BC4", Offset = "0xE51BC4", VA = "0xE51BC4")]
		public static extern bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes);

		[PreserveSig]
		[Token(Token = "0x600068D")]
		[Address(RVA = "0xE51C5C", Offset = "0xE51C5C", VA = "0xE51C5C")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForAccount();

		[PreserveSig]
		[Token(Token = "0x600068E")]
		[Address(RVA = "0xE51CD8", Offset = "0xE51CD8", VA = "0xE51CD8")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForApp();

		[PreserveSig]
		[Token(Token = "0x600068F")]
		[Address(RVA = "0xE51D54", Offset = "0xE51D54", VA = "0xE51D54")]
		public static extern void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x6000690")]
		[Address(RVA = "0xE51DD4", Offset = "0xE51DD4", VA = "0xE51DD4")]
		public static extern ulong ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x6000691")]
		[Address(RVA = "0xE51E64", Offset = "0xE51E64", VA = "0xE51E64")]
		public static extern bool ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected);

		[PreserveSig]
		[Token(Token = "0x6000692")]
		[Address(RVA = "0xE51F04", Offset = "0xE51F04", VA = "0xE51F04")]
		public static extern bool ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out IntPtr ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner);

		[PreserveSig]
		[Token(Token = "0x6000693")]
		[Address(RVA = "0xE51FBC", Offset = "0xE51FBC", VA = "0xE51FBC")]
		public static extern int ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction);

		[PreserveSig]
		[Token(Token = "0x6000694")]
		[Address(RVA = "0xE52074", Offset = "0xE52074", VA = "0xE52074")]
		public static extern int ISteamRemoteStorage_GetCachedUGCCount();

		[PreserveSig]
		[Token(Token = "0x6000695")]
		[Address(RVA = "0xE520E8", Offset = "0xE520E8", VA = "0xE520E8")]
		public static extern ulong ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

		[PreserveSig]
		[Token(Token = "0x6000696")]
		[Address(RVA = "0xE52168", Offset = "0xE52168", VA = "0xE52168")]
		public static extern ulong ISteamRemoteStorage_PublishWorkshopFile(InteropHelp.UTF8StringHandle pchFile, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags, EWorkshopFileType eWorkshopFileType);

		[PreserveSig]
		[Token(Token = "0x6000697")]
		[Address(RVA = "0xE52184", Offset = "0xE52184", VA = "0xE52184")]
		public static extern ulong ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000698")]
		[Address(RVA = "0xE52204", Offset = "0xE52204", VA = "0xE52204")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000699")]
		[Address(RVA = "0xE52220", Offset = "0xE52220", VA = "0xE52220")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchPreviewFile);

		[PreserveSig]
		[Token(Token = "0x600069A")]
		[Address(RVA = "0xE5223C", Offset = "0xE5223C", VA = "0xE5223C")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x600069B")]
		[Address(RVA = "0xE52258", Offset = "0xE52258", VA = "0xE52258")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x600069C")]
		[Address(RVA = "0xE52274", Offset = "0xE52274", VA = "0xE52274")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x600069D")]
		[Address(RVA = "0xE5230C", Offset = "0xE5230C", VA = "0xE5230C")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x600069E")]
		[Address(RVA = "0xE523A4", Offset = "0xE523A4", VA = "0xE523A4")]
		public static extern ulong ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle);

		[PreserveSig]
		[Token(Token = "0x600069F")]
		[Address(RVA = "0xE52424", Offset = "0xE52424", VA = "0xE52424")]
		public static extern ulong ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld);

		[PreserveSig]
		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xE524B4", Offset = "0xE524B4", VA = "0xE524B4")]
		public static extern ulong ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xE52534", Offset = "0xE52534", VA = "0xE52534")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60006A2")]
		[Address(RVA = "0xE525B4", Offset = "0xE525B4", VA = "0xE525B4")]
		public static extern ulong ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xE52634", Offset = "0xE52634", VA = "0xE52634")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xE526B4", Offset = "0xE526B4", VA = "0xE526B4")]
		public static extern ulong ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xE52734", Offset = "0xE52734", VA = "0xE52734")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchChangeDescription);

		[PreserveSig]
		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xE52750", Offset = "0xE52750", VA = "0xE52750")]
		public static extern ulong ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xE527D0", Offset = "0xE527D0", VA = "0xE527D0")]
		public static extern ulong ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xE52860", Offset = "0xE52860", VA = "0xE52860")]
		public static extern ulong ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xE528E0", Offset = "0xE528E0", VA = "0xE528E0")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IntPtr pRequiredTags, IntPtr pExcludedTags);

		[PreserveSig]
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xE52988", Offset = "0xE52988", VA = "0xE52988")]
		public static extern ulong ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, InteropHelp.UTF8StringHandle pchVideoAccount, InteropHelp.UTF8StringHandle pchVideoIdentifier, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xE529A4", Offset = "0xE529A4", VA = "0xE529A4")]
		public static extern ulong ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction);

		[PreserveSig]
		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xE52A34", Offset = "0xE52A34", VA = "0xE52A34")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xE52AC4", Offset = "0xE52AC4", VA = "0xE52AC4")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IntPtr pTags, IntPtr pUserTags);

		[PreserveSig]
		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xE52B84", Offset = "0xE52B84", VA = "0xE52B84")]
		public static extern ulong ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, InteropHelp.UTF8StringHandle pchLocation, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xE52BA0", Offset = "0xE52BA0", VA = "0xE52BA0")]
		public static extern uint ISteamScreenshots_WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xE52C50", Offset = "0xE52C50", VA = "0xE52C50")]
		public static extern uint ISteamScreenshots_AddScreenshotToLibrary(InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchThumbnailFilename, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xE52C6C", Offset = "0xE52C6C", VA = "0xE52C6C")]
		public static extern void ISteamScreenshots_TriggerScreenshot();

		[PreserveSig]
		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xE52CDC", Offset = "0xE52CDC", VA = "0xE52CDC")]
		public static extern void ISteamScreenshots_HookScreenshots(bool bHook);

		[PreserveSig]
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xE52D5C", Offset = "0xE52D5C", VA = "0xE52D5C")]
		public static extern bool ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, InteropHelp.UTF8StringHandle pchLocation);

		[PreserveSig]
		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xE52D78", Offset = "0xE52D78", VA = "0xE52D78")]
		public static extern bool ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0xE52E10", Offset = "0xE52E10", VA = "0xE52E10")]
		public static extern bool ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60006B6")]
		[Address(RVA = "0xE52EA8", Offset = "0xE52EA8", VA = "0xE52EA8")]
		public static extern bool ISteamScreenshots_IsScreenshotsHooked();

		[PreserveSig]
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xE52F24", Offset = "0xE52F24", VA = "0xE52F24")]
		public static extern uint ISteamScreenshots_AddVRScreenshotToLibrary(EVRScreenshotType eType, InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchVRFilename);

		[PreserveSig]
		[Token(Token = "0x60006B8")]
		[Address(RVA = "0xE52F40", Offset = "0xE52F40", VA = "0xE52F40")]
		public static extern ulong ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0xE53008", Offset = "0xE53008", VA = "0xE53008")]
		public static extern ulong ISteamUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xE530B8", Offset = "0xE530B8", VA = "0xE530B8")]
		public static extern ulong ISteamUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xE53150", Offset = "0xE53150", VA = "0xE53150")]
		public static extern ulong ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60006BC")]
		[Address(RVA = "0xE531D0", Offset = "0xE531D0", VA = "0xE531D0")]
		public static extern bool ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0xE532C8", Offset = "0xE532C8", VA = "0xE532C8")]
		public static extern bool ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x60006BE")]
		[Address(RVA = "0xE53378", Offset = "0xE53378", VA = "0xE53378")]
		public static extern bool ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xE53428", Offset = "0xE53428", VA = "0xE53428")]
		public static extern bool ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xE534E0", Offset = "0xE534E0", VA = "0xE534E0")]
		public static extern bool ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue);

		[PreserveSig]
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xE53590", Offset = "0xE53590", VA = "0xE53590")]
		public static extern uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xE53620", Offset = "0xE53620", VA = "0xE53620")]
		public static extern bool ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, IntPtr pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType);

		[PreserveSig]
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xE53700", Offset = "0xE53700", VA = "0xE53700")]
		public static extern uint ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xE53790", Offset = "0xE53790", VA = "0xE53790")]
		public static extern bool ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xE53860", Offset = "0xE53860", VA = "0xE53860")]
		public static extern bool ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xE538E8", Offset = "0xE538E8", VA = "0xE538E8")]
		public static extern bool ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0xE53904", Offset = "0xE53904", VA = "0xE53904")]
		public static extern bool ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0xE53920", Offset = "0xE53920", VA = "0xE53920")]
		public static extern bool ISteamUGC_SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs);

		[PreserveSig]
		[Token(Token = "0x60006C9")]
		[Address(RVA = "0xE539B8", Offset = "0xE539B8", VA = "0xE539B8")]
		public static extern bool ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x60006CA")]
		[Address(RVA = "0xE53A50", Offset = "0xE53A50", VA = "0xE53A50")]
		public static extern bool ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xE53AE8", Offset = "0xE53AE8", VA = "0xE53AE8")]
		public static extern bool ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xE53B80", Offset = "0xE53B80", VA = "0xE53B80")]
		public static extern bool ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xE53C18", Offset = "0xE53C18", VA = "0xE53C18")]
		public static extern bool ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xE53CB0", Offset = "0xE53CB0", VA = "0xE53CB0")]
		public static extern bool ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xE53D48", Offset = "0xE53D48", VA = "0xE53D48")]
		public static extern bool ISteamUGC_SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xE53DE0", Offset = "0xE53DE0", VA = "0xE53DE0")]
		public static extern bool ISteamUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xE53DFC", Offset = "0xE53DFC", VA = "0xE53DFC")]
		public static extern bool ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xE53E94", Offset = "0xE53E94", VA = "0xE53E94")]
		public static extern bool ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xE53EB0", Offset = "0xE53EB0", VA = "0xE53EB0")]
		public static extern bool ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xE53F48", Offset = "0xE53F48", VA = "0xE53F48")]
		public static extern bool ISteamUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xE53F64", Offset = "0xE53F64", VA = "0xE53F64")]
		public static extern bool ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xE53FFC", Offset = "0xE53FFC", VA = "0xE53FFC")]
		public static extern bool ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xE54018", Offset = "0xE54018", VA = "0xE54018")]
		public static extern ulong ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xE540A8", Offset = "0xE540A8", VA = "0xE540A8")]
		public static extern ulong ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xE54138", Offset = "0xE54138", VA = "0xE54138")]
		public static extern ulong ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xE541C8", Offset = "0xE541C8", VA = "0xE541C8")]
		public static extern bool ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xE541E4", Offset = "0xE541E4", VA = "0xE541E4")]
		public static extern bool ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x60006DC")]
		[Address(RVA = "0xE54200", Offset = "0xE54200", VA = "0xE54200")]
		public static extern bool ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xE5421C", Offset = "0xE5421C", VA = "0xE5421C")]
		public static extern bool ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x60006DE")]
		[Address(RVA = "0xE54238", Offset = "0xE54238", VA = "0xE54238")]
		public static extern bool ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xE542D0", Offset = "0xE542D0", VA = "0xE542D0")]
		public static extern bool ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0xE54368", Offset = "0xE54368", VA = "0xE54368")]
		public static extern bool ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x60006E1")]
		[Address(RVA = "0xE54384", Offset = "0xE54384", VA = "0xE54384")]
		public static extern bool ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60006E2")]
		[Address(RVA = "0xE543A0", Offset = "0xE543A0", VA = "0xE543A0")]
		public static extern bool ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60006E3")]
		[Address(RVA = "0xE543BC", Offset = "0xE543BC", VA = "0xE543BC")]
		public static extern bool ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xE543D8", Offset = "0xE543D8", VA = "0xE543D8")]
		public static extern bool ISteamUGC_AddItemPreviewFile(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile, EItemPreviewType type);

		[PreserveSig]
		[Token(Token = "0x60006E5")]
		[Address(RVA = "0xE543F4", Offset = "0xE543F4", VA = "0xE543F4")]
		public static extern bool ISteamUGC_AddItemPreviewVideo(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x60006E6")]
		[Address(RVA = "0xE54410", Offset = "0xE54410", VA = "0xE54410")]
		public static extern bool ISteamUGC_UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60006E7")]
		[Address(RVA = "0xE5442C", Offset = "0xE5442C", VA = "0xE5442C")]
		public static extern bool ISteamUGC_UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x60006E8")]
		[Address(RVA = "0xE54448", Offset = "0xE54448", VA = "0xE54448")]
		public static extern bool ISteamUGC_RemoveItemPreview(UGCUpdateHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0xE544E0", Offset = "0xE544E0", VA = "0xE544E0")]
		public static extern ulong ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0xE544FC", Offset = "0xE544FC", VA = "0xE544FC")]
		public static extern EItemUpdateStatus ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xE54594", Offset = "0xE54594", VA = "0xE54594")]
		public static extern ulong ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xE54624", Offset = "0xE54624", VA = "0xE54624")]
		public static extern ulong ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0xE546A4", Offset = "0xE546A4", VA = "0xE546A4")]
		public static extern ulong ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xE54734", Offset = "0xE54734", VA = "0xE54734")]
		public static extern ulong ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xE547C4", Offset = "0xE547C4", VA = "0xE547C4")]
		public static extern ulong ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xE54844", Offset = "0xE54844", VA = "0xE54844")]
		public static extern ulong ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xE548C4", Offset = "0xE548C4", VA = "0xE548C4")]
		public static extern uint ISteamUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0xE54938", Offset = "0xE54938", VA = "0xE54938")]
		public static extern uint ISteamUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0xE549D0", Offset = "0xE549D0", VA = "0xE549D0")]
		public static extern uint ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xE54A50", Offset = "0xE54A50", VA = "0xE54A50")]
		public static extern bool ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0xE54B08", Offset = "0xE54B08", VA = "0xE54B08")]
		public static extern bool ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xE54BA8", Offset = "0xE54BA8", VA = "0xE54BA8")]
		public static extern bool ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x60006F7")]
		[Address(RVA = "0xE54C40", Offset = "0xE54C40", VA = "0xE54C40")]
		public static extern bool ISteamUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, InteropHelp.UTF8StringHandle pszFolder);

		[PreserveSig]
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0xE54C5C", Offset = "0xE54C5C", VA = "0xE54C5C")]
		public static extern void ISteamUGC_SuspendDownloads(bool bSuspend);

		[PreserveSig]
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0xE54CDC", Offset = "0xE54CDC", VA = "0xE54CDC")]
		public static extern ulong ISteamUGC_StartPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60006FA")]
		[Address(RVA = "0xE54D74", Offset = "0xE54D74", VA = "0xE54D74")]
		public static extern ulong ISteamUGC_StopPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0xE54E0C", Offset = "0xE54E0C", VA = "0xE54E0C")]
		public static extern ulong ISteamUGC_StopPlaytimeTrackingForAllItems();

		[PreserveSig]
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0xE54E80", Offset = "0xE54E80", VA = "0xE54E80")]
		public static extern ulong ISteamUGC_AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0xE54F10", Offset = "0xE54F10", VA = "0xE54F10")]
		public static extern ulong ISteamUGC_RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0xE54FA0", Offset = "0xE54FA0", VA = "0xE54FA0")]
		public static extern ulong ISteamUnifiedMessages_SendMethod(InteropHelp.UTF8StringHandle pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext);

		[PreserveSig]
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0xE54FBC", Offset = "0xE54FBC", VA = "0xE54FBC")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult);

		[PreserveSig]
		[Token(Token = "0x6000700")]
		[Address(RVA = "0xE5505C", Offset = "0xE5505C", VA = "0xE5505C")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease);

		[PreserveSig]
		[Token(Token = "0x6000701")]
		[Address(RVA = "0xE55114", Offset = "0xE55114", VA = "0xE55114")]
		public static extern bool ISteamUnifiedMessages_ReleaseMethod(ClientUnifiedMessageHandle hHandle);

		[PreserveSig]
		[Token(Token = "0x6000702")]
		[Address(RVA = "0xE5519C", Offset = "0xE5519C", VA = "0xE5519C")]
		public static extern bool ISteamUnifiedMessages_SendNotification(InteropHelp.UTF8StringHandle pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000703")]
		[Address(RVA = "0xE551B8", Offset = "0xE551B8", VA = "0xE551B8")]
		public static extern int ISteamUser_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x6000704")]
		[Address(RVA = "0xE5522C", Offset = "0xE5522C", VA = "0xE5522C")]
		public static extern bool ISteamUser_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x6000705")]
		[Address(RVA = "0xE552A8", Offset = "0xE552A8", VA = "0xE552A8")]
		public static extern ulong ISteamUser_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x6000706")]
		[Address(RVA = "0xE5531C", Offset = "0xE5531C", VA = "0xE5531C")]
		public static extern int ISteamUser_InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

		[PreserveSig]
		[Token(Token = "0x6000707")]
		[Address(RVA = "0xE553E4", Offset = "0xE553E4", VA = "0xE553E4")]
		public static extern void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x6000708")]
		[Address(RVA = "0xE55474", Offset = "0xE55474", VA = "0xE55474")]
		public static extern void ISteamUser_TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, InteropHelp.UTF8StringHandle pchExtraInfo);

		[PreserveSig]
		[Token(Token = "0x6000709")]
		[Address(RVA = "0xE55490", Offset = "0xE55490", VA = "0xE55490")]
		public static extern bool ISteamUser_GetUserDataFolder(IntPtr pchBuffer, int cubBuffer);

		[PreserveSig]
		[Token(Token = "0x600070A")]
		[Address(RVA = "0xE55528", Offset = "0xE55528", VA = "0xE55528")]
		public static extern void ISteamUser_StartVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x600070B")]
		[Address(RVA = "0xE55598", Offset = "0xE55598", VA = "0xE55598")]
		public static extern void ISteamUser_StopVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x600070C")]
		[Address(RVA = "0xE55608", Offset = "0xE55608", VA = "0xE55608")]
		public static extern EVoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, IntPtr pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

		[PreserveSig]
		[Token(Token = "0x600070D")]
		[Address(RVA = "0xE556A0", Offset = "0xE556A0", VA = "0xE556A0")]
		public static extern EVoiceResult ISteamUser_GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, IntPtr nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

		[PreserveSig]
		[Token(Token = "0x600070E")]
		[Address(RVA = "0xE55788", Offset = "0xE55788", VA = "0xE55788")]
		public static extern EVoiceResult ISteamUser_DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x600070F")]
		[Address(RVA = "0xE55858", Offset = "0xE55858", VA = "0xE55858")]
		public static extern uint ISteamUser_GetVoiceOptimalSampleRate();

		[PreserveSig]
		[Token(Token = "0x6000710")]
		[Address(RVA = "0xE558CC", Offset = "0xE558CC", VA = "0xE558CC")]
		public static extern uint ISteamUser_GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6000711")]
		[Address(RVA = "0xE5596C", Offset = "0xE5596C", VA = "0xE5596C")]
		public static extern EBeginAuthSessionResult ISteamUser_BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000712")]
		[Address(RVA = "0xE55A0C", Offset = "0xE55A0C", VA = "0xE55A0C")]
		public static extern void ISteamUser_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000713")]
		[Address(RVA = "0xE55A8C", Offset = "0xE55A8C", VA = "0xE55A8C")]
		public static extern void ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x6000714")]
		[Address(RVA = "0xE55B0C", Offset = "0xE55B0C", VA = "0xE55B0C")]
		public static extern EUserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000715")]
		[Address(RVA = "0xE55B9C", Offset = "0xE55B9C", VA = "0xE55B9C")]
		public static extern bool ISteamUser_BIsBehindNAT();

		[PreserveSig]
		[Token(Token = "0x6000716")]
		[Address(RVA = "0xE55C18", Offset = "0xE55C18", VA = "0xE55C18")]
		public static extern void ISteamUser_AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x6000717")]
		[Address(RVA = "0xE55CB0", Offset = "0xE55CB0", VA = "0xE55CB0")]
		public static extern ulong ISteamUser_RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude);

		[PreserveSig]
		[Token(Token = "0x6000718")]
		[Address(RVA = "0xE55D48", Offset = "0xE55D48", VA = "0xE55D48")]
		public static extern bool ISteamUser_GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6000719")]
		[Address(RVA = "0xE55DF0", Offset = "0xE55DF0", VA = "0xE55DF0")]
		public static extern int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil);

		[PreserveSig]
		[Token(Token = "0x600071A")]
		[Address(RVA = "0xE55E80", Offset = "0xE55E80", VA = "0xE55E80")]
		public static extern int ISteamUser_GetPlayerSteamLevel();

		[PreserveSig]
		[Token(Token = "0x600071B")]
		[Address(RVA = "0xE55EF4", Offset = "0xE55EF4", VA = "0xE55EF4")]
		public static extern ulong ISteamUser_RequestStoreAuthURL(InteropHelp.UTF8StringHandle pchRedirectURL);

		[PreserveSig]
		[Token(Token = "0x600071C")]
		[Address(RVA = "0xE55F10", Offset = "0xE55F10", VA = "0xE55F10")]
		public static extern bool ISteamUser_BIsPhoneVerified();

		[PreserveSig]
		[Token(Token = "0x600071D")]
		[Address(RVA = "0xE55F8C", Offset = "0xE55F8C", VA = "0xE55F8C")]
		public static extern bool ISteamUser_BIsTwoFactorEnabled();

		[PreserveSig]
		[Token(Token = "0x600071E")]
		[Address(RVA = "0xE56008", Offset = "0xE56008", VA = "0xE56008")]
		public static extern bool ISteamUser_BIsPhoneIdentifying();

		[PreserveSig]
		[Token(Token = "0x600071F")]
		[Address(RVA = "0xE56084", Offset = "0xE56084", VA = "0xE56084")]
		public static extern bool ISteamUser_BIsPhoneRequiringVerification();

		[PreserveSig]
		[Token(Token = "0x6000720")]
		[Address(RVA = "0xE56100", Offset = "0xE56100", VA = "0xE56100")]
		public static extern bool ISteamUserStats_RequestCurrentStats();

		[PreserveSig]
		[Token(Token = "0x6000721")]
		[Address(RVA = "0xE5617C", Offset = "0xE5617C", VA = "0xE5617C")]
		public static extern bool ISteamUserStats_GetStat(InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6000722")]
		[Address(RVA = "0xE56198", Offset = "0xE56198", VA = "0xE56198")]
		public static extern bool ISteamUserStats_GetStat_(InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6000723")]
		[Address(RVA = "0xE561B4", Offset = "0xE561B4", VA = "0xE561B4")]
		public static extern bool ISteamUserStats_SetStat(InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x6000724")]
		[Address(RVA = "0xE561D0", Offset = "0xE561D0", VA = "0xE561D0")]
		public static extern bool ISteamUserStats_SetStat_(InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x6000725")]
		[Address(RVA = "0xE561EC", Offset = "0xE561EC", VA = "0xE561EC")]
		public static extern bool ISteamUserStats_UpdateAvgRateStat(InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x6000726")]
		[Address(RVA = "0xE56208", Offset = "0xE56208", VA = "0xE56208")]
		public static extern bool ISteamUserStats_GetAchievement(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000727")]
		[Address(RVA = "0xE56224", Offset = "0xE56224", VA = "0xE56224")]
		public static extern bool ISteamUserStats_SetAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000728")]
		[Address(RVA = "0xE56240", Offset = "0xE56240", VA = "0xE56240")]
		public static extern bool ISteamUserStats_ClearAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000729")]
		[Address(RVA = "0xE5625C", Offset = "0xE5625C", VA = "0xE5625C")]
		public static extern bool ISteamUserStats_GetAchievementAndUnlockTime(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x600072A")]
		[Address(RVA = "0xE56278", Offset = "0xE56278", VA = "0xE56278")]
		public static extern bool ISteamUserStats_StoreStats();

		[PreserveSig]
		[Token(Token = "0x600072B")]
		[Address(RVA = "0xE562F4", Offset = "0xE562F4", VA = "0xE562F4")]
		public static extern int ISteamUserStats_GetAchievementIcon(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x600072C")]
		[Address(RVA = "0xE56310", Offset = "0xE56310", VA = "0xE56310")]
		public static extern IntPtr ISteamUserStats_GetAchievementDisplayAttribute(InteropHelp.UTF8StringHandle pchName, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600072D")]
		[Address(RVA = "0xE5632C", Offset = "0xE5632C", VA = "0xE5632C")]
		public static extern bool ISteamUserStats_IndicateAchievementProgress(InteropHelp.UTF8StringHandle pchName, uint nCurProgress, uint nMaxProgress);

		[PreserveSig]
		[Token(Token = "0x600072E")]
		[Address(RVA = "0xE56348", Offset = "0xE56348", VA = "0xE56348")]
		public static extern uint ISteamUserStats_GetNumAchievements();

		[PreserveSig]
		[Token(Token = "0x600072F")]
		[Address(RVA = "0xE563BC", Offset = "0xE563BC", VA = "0xE563BC")]
		public static extern IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

		[PreserveSig]
		[Token(Token = "0x6000730")]
		[Address(RVA = "0xE5643C", Offset = "0xE5643C", VA = "0xE5643C")]
		public static extern ulong ISteamUserStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000731")]
		[Address(RVA = "0xE564BC", Offset = "0xE564BC", VA = "0xE564BC")]
		public static extern bool ISteamUserStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6000732")]
		[Address(RVA = "0xE564D8", Offset = "0xE564D8", VA = "0xE564D8")]
		public static extern bool ISteamUserStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6000733")]
		[Address(RVA = "0xE564F4", Offset = "0xE564F4", VA = "0xE564F4")]
		public static extern bool ISteamUserStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000734")]
		[Address(RVA = "0xE56510", Offset = "0xE56510", VA = "0xE56510")]
		public static extern bool ISteamUserStats_GetUserAchievementAndUnlockTime(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x6000735")]
		[Address(RVA = "0xE5652C", Offset = "0xE5652C", VA = "0xE5652C")]
		public static extern bool ISteamUserStats_ResetAllStats(bool bAchievementsToo);

		[PreserveSig]
		[Token(Token = "0x6000736")]
		[Address(RVA = "0xE565B4", Offset = "0xE565B4", VA = "0xE565B4")]
		public static extern ulong ISteamUserStats_FindOrCreateLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);

		[PreserveSig]
		[Token(Token = "0x6000737")]
		[Address(RVA = "0xE565D0", Offset = "0xE565D0", VA = "0xE565D0")]
		public static extern ulong ISteamUserStats_FindLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName);

		[PreserveSig]
		[Token(Token = "0x6000738")]
		[Address(RVA = "0xE565EC", Offset = "0xE565EC", VA = "0xE565EC")]
		public static extern IntPtr ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x6000739")]
		[Address(RVA = "0xE5666C", Offset = "0xE5666C", VA = "0xE5666C")]
		public static extern int ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600073A")]
		[Address(RVA = "0xE566EC", Offset = "0xE566EC", VA = "0xE566EC")]
		public static extern ELeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600073B")]
		[Address(RVA = "0xE5676C", Offset = "0xE5676C", VA = "0xE5676C")]
		public static extern ELeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600073C")]
		[Address(RVA = "0xE567EC", Offset = "0xE567EC", VA = "0xE567EC")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

		[PreserveSig]
		[Token(Token = "0x600073D")]
		[Address(RVA = "0xE56894", Offset = "0xE56894", VA = "0xE56894")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, [In][Out] CSteamID[] prgUsers, int cUsers);

		[PreserveSig]
		[Token(Token = "0x600073E")]
		[Address(RVA = "0xE56934", Offset = "0xE56934", VA = "0xE56934")]
		public static extern bool ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, [In][Out] int[] pDetails, int cDetailsMax);

		[PreserveSig]
		[Token(Token = "0x600073F")]
		[Address(RVA = "0xE569F4", Offset = "0xE569F4", VA = "0xE569F4")]
		public static extern ulong ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, [In][Out] int[] pScoreDetails, int cScoreDetailsCount);

		[PreserveSig]
		[Token(Token = "0x6000740")]
		[Address(RVA = "0xE56AAC", Offset = "0xE56AAC", VA = "0xE56AAC")]
		public static extern ulong ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);

		[PreserveSig]
		[Token(Token = "0x6000741")]
		[Address(RVA = "0xE56B3C", Offset = "0xE56B3C", VA = "0xE56B3C")]
		public static extern ulong ISteamUserStats_GetNumberOfCurrentPlayers();

		[PreserveSig]
		[Token(Token = "0x6000742")]
		[Address(RVA = "0xE56BB0", Offset = "0xE56BB0", VA = "0xE56BB0")]
		public static extern ulong ISteamUserStats_RequestGlobalAchievementPercentages();

		[PreserveSig]
		[Token(Token = "0x6000743")]
		[Address(RVA = "0xE56C24", Offset = "0xE56C24", VA = "0xE56C24")]
		public static extern int ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000744")]
		[Address(RVA = "0xE56CE0", Offset = "0xE56CE0", VA = "0xE56CE0")]
		public static extern int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000745")]
		[Address(RVA = "0xE56DA4", Offset = "0xE56DA4", VA = "0xE56DA4")]
		public static extern bool ISteamUserStats_GetAchievementAchievedPercent(InteropHelp.UTF8StringHandle pchName, out float pflPercent);

		[PreserveSig]
		[Token(Token = "0x6000746")]
		[Address(RVA = "0xE56DC0", Offset = "0xE56DC0", VA = "0xE56DC0")]
		public static extern ulong ISteamUserStats_RequestGlobalStats(int nHistoryDays);

		[PreserveSig]
		[Token(Token = "0x6000747")]
		[Address(RVA = "0xE56E40", Offset = "0xE56E40", VA = "0xE56E40")]
		public static extern bool ISteamUserStats_GetGlobalStat(InteropHelp.UTF8StringHandle pchStatName, out long pData);

		[PreserveSig]
		[Token(Token = "0x6000748")]
		[Address(RVA = "0xE56E5C", Offset = "0xE56E5C", VA = "0xE56E5C")]
		public static extern bool ISteamUserStats_GetGlobalStat_(InteropHelp.UTF8StringHandle pchStatName, out double pData);

		[PreserveSig]
		[Token(Token = "0x6000749")]
		[Address(RVA = "0xE56E78", Offset = "0xE56E78", VA = "0xE56E78")]
		public static extern int ISteamUserStats_GetGlobalStatHistory(InteropHelp.UTF8StringHandle pchStatName, [In][Out] long[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x600074A")]
		[Address(RVA = "0xE56E94", Offset = "0xE56E94", VA = "0xE56E94")]
		public static extern int ISteamUserStats_GetGlobalStatHistory_(InteropHelp.UTF8StringHandle pchStatName, [In][Out] double[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x600074B")]
		[Address(RVA = "0xE56EB0", Offset = "0xE56EB0", VA = "0xE56EB0")]
		public static extern uint ISteamUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x600074C")]
		[Address(RVA = "0xE56F24", Offset = "0xE56F24", VA = "0xE56F24")]
		public static extern uint ISteamUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x600074D")]
		[Address(RVA = "0xE56F98", Offset = "0xE56F98", VA = "0xE56F98")]
		public static extern EUniverse ISteamUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x600074E")]
		[Address(RVA = "0xE5700C", Offset = "0xE5700C", VA = "0xE5700C")]
		public static extern uint ISteamUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x600074F")]
		[Address(RVA = "0xE57080", Offset = "0xE57080", VA = "0xE57080")]
		public static extern IntPtr ISteamUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x6000750")]
		[Address(RVA = "0xE570F4", Offset = "0xE570F4", VA = "0xE570F4")]
		public static extern bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x6000751")]
		[Address(RVA = "0xE57194", Offset = "0xE57194", VA = "0xE57194")]
		public static extern bool ISteamUtils_GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000752")]
		[Address(RVA = "0xE5723C", Offset = "0xE5723C", VA = "0xE5723C")]
		public static extern bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x6000753")]
		[Address(RVA = "0xE572D4", Offset = "0xE572D4", VA = "0xE572D4")]
		public static extern byte ISteamUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x6000754")]
		[Address(RVA = "0xE57348", Offset = "0xE57348", VA = "0xE57348")]
		public static extern uint ISteamUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x6000755")]
		[Address(RVA = "0xE573BC", Offset = "0xE573BC", VA = "0xE573BC")]
		public static extern void ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x6000756")]
		[Address(RVA = "0xE5743C", Offset = "0xE5743C", VA = "0xE5743C")]
		public static extern bool ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000757")]
		[Address(RVA = "0xE574E8", Offset = "0xE574E8", VA = "0xE574E8")]
		public static extern ESteamAPICallFailure ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x6000758")]
		[Address(RVA = "0xE57568", Offset = "0xE57568", VA = "0xE57568")]
		public static extern bool ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000759")]
		[Address(RVA = "0xE57634", Offset = "0xE57634", VA = "0xE57634")]
		public static extern uint ISteamUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x600075A")]
		[Address(RVA = "0xE576A8", Offset = "0xE576A8", VA = "0xE576A8")]
		public static extern void ISteamUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x600075B")]
		[Address(RVA = "0xE5772C", Offset = "0xE5772C", VA = "0xE5772C")]
		public static extern bool ISteamUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x600075C")]
		[Address(RVA = "0xE577A8", Offset = "0xE577A8", VA = "0xE577A8")]
		public static extern bool ISteamUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x600075D")]
		[Address(RVA = "0xE57824", Offset = "0xE57824", VA = "0xE57824")]
		public static extern ulong ISteamUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x600075E")]
		[Address(RVA = "0xE57840", Offset = "0xE57840", VA = "0xE57840")]
		public static extern bool ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x600075F")]
		[Address(RVA = "0xE5785C", Offset = "0xE5785C", VA = "0xE5785C")]
		public static extern uint ISteamUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x6000760")]
		[Address(RVA = "0xE578D0", Offset = "0xE578D0", VA = "0xE578D0")]
		public static extern bool ISteamUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x6000761")]
		[Address(RVA = "0xE57968", Offset = "0xE57968", VA = "0xE57968")]
		public static extern IntPtr ISteamUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x6000762")]
		[Address(RVA = "0xE579DC", Offset = "0xE579DC", VA = "0xE579DC")]
		public static extern bool ISteamUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x6000763")]
		[Address(RVA = "0xE57A58", Offset = "0xE57A58", VA = "0xE57A58")]
		public static extern void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

		[PreserveSig]
		[Token(Token = "0x6000764")]
		[Address(RVA = "0xE57AE8", Offset = "0xE57AE8", VA = "0xE57AE8")]
		public static extern bool ISteamUtils_IsSteamInBigPictureMode();

		[PreserveSig]
		[Token(Token = "0x6000765")]
		[Address(RVA = "0xE57B64", Offset = "0xE57B64", VA = "0xE57B64")]
		public static extern void ISteamUtils_StartVRDashboard();

		[PreserveSig]
		[Token(Token = "0x6000766")]
		[Address(RVA = "0xE57BD4", Offset = "0xE57BD4", VA = "0xE57BD4")]
		public static extern bool ISteamUtils_IsVRHeadsetStreamingEnabled();

		[PreserveSig]
		[Token(Token = "0x6000767")]
		[Address(RVA = "0xE57C50", Offset = "0xE57C50", VA = "0xE57C50")]
		public static extern void ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x6000768")]
		[Address(RVA = "0xE57CD0", Offset = "0xE57CD0", VA = "0xE57CD0")]
		public static extern void ISteamVideo_GetVideoURL(AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x6000769")]
		[Address(RVA = "0xE57D50", Offset = "0xE57D50", VA = "0xE57D50")]
		public static extern bool ISteamVideo_IsBroadcasting(out int pnNumViewers);

		[PreserveSig]
		[Token(Token = "0x600076A")]
		[Address(RVA = "0xE57DD8", Offset = "0xE57DD8", VA = "0xE57DD8")]
		public static extern void ISteamVideo_GetOPFSettings(AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x600076B")]
		[Address(RVA = "0xE57E58", Offset = "0xE57E58", VA = "0xE57E58")]
		public static extern bool ISteamVideo_GetOPFStringForApp(AppId_t unVideoAppID, IntPtr pchBuffer, ref int pnBufferSize);

		[PreserveSig]
		[Token(Token = "0x600076C")]
		[Address(RVA = "0xE57EF8", Offset = "0xE57EF8", VA = "0xE57EF8")]
		public static extern uint ISteamGameServerHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x600076D")]
		[Address(RVA = "0xE57F14", Offset = "0xE57F14", VA = "0xE57F14")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x600076E")]
		[Address(RVA = "0xE57FAC", Offset = "0xE57FAC", VA = "0xE57FAC")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x600076F")]
		[Address(RVA = "0xE58044", Offset = "0xE58044", VA = "0xE58044")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x6000770")]
		[Address(RVA = "0xE58060", Offset = "0xE58060", VA = "0xE58060")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x6000771")]
		[Address(RVA = "0xE5807C", Offset = "0xE5807C", VA = "0xE5807C")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x6000772")]
		[Address(RVA = "0xE58114", Offset = "0xE58114", VA = "0xE58114")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x6000773")]
		[Address(RVA = "0xE581AC", Offset = "0xE581AC", VA = "0xE581AC")]
		public static extern bool ISteamGameServerHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000774")]
		[Address(RVA = "0xE58234", Offset = "0xE58234", VA = "0xE58234")]
		public static extern bool ISteamGameServerHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000775")]
		[Address(RVA = "0xE582BC", Offset = "0xE582BC", VA = "0xE582BC")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x6000776")]
		[Address(RVA = "0xE582D8", Offset = "0xE582D8", VA = "0xE582D8")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000777")]
		[Address(RVA = "0xE582F4", Offset = "0xE582F4", VA = "0xE582F4")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x6000778")]
		[Address(RVA = "0xE5838C", Offset = "0xE5838C", VA = "0xE5838C")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000779")]
		[Address(RVA = "0xE58434", Offset = "0xE58434", VA = "0xE58434")]
		public static extern bool ISteamGameServerHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x600077A")]
		[Address(RVA = "0xE584EC", Offset = "0xE584EC", VA = "0xE584EC")]
		public static extern bool ISteamGameServerHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600077B")]
		[Address(RVA = "0xE58574", Offset = "0xE58574", VA = "0xE58574")]
		public static extern bool ISteamGameServerHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x600077C")]
		[Address(RVA = "0xE5860C", Offset = "0xE5860C", VA = "0xE5860C")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x600077D")]
		[Address(RVA = "0xE58628", Offset = "0xE58628", VA = "0xE58628")]
		public static extern uint ISteamGameServerHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x600077E")]
		[Address(RVA = "0xE586A8", Offset = "0xE586A8", VA = "0xE586A8")]
		public static extern bool ISteamGameServerHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600077F")]
		[Address(RVA = "0xE58730", Offset = "0xE58730", VA = "0xE58730")]
		public static extern bool ISteamGameServerHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x6000780")]
		[Address(RVA = "0xE5874C", Offset = "0xE5874C", VA = "0xE5874C")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x6000781")]
		[Address(RVA = "0xE587E4", Offset = "0xE587E4", VA = "0xE587E4")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x6000782")]
		[Address(RVA = "0xE58800", Offset = "0xE58800", VA = "0xE58800")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x6000783")]
		[Address(RVA = "0xE58898", Offset = "0xE58898", VA = "0xE58898")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x6000784")]
		[Address(RVA = "0xE58930", Offset = "0xE58930", VA = "0xE58930")]
		public static extern bool ISteamGameServerHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x6000785")]
		[Address(RVA = "0xE589DC", Offset = "0xE589DC", VA = "0xE589DC")]
		public static extern EResult ISteamGameServerInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000786")]
		[Address(RVA = "0xE58A5C", Offset = "0xE58A5C", VA = "0xE58A5C")]
		public static extern bool ISteamGameServerInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000787")]
		[Address(RVA = "0xE58B04", Offset = "0xE58B04", VA = "0xE58B04")]
		public static extern bool ISteamGameServerInventory_GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x6000788")]
		[Address(RVA = "0xE58B20", Offset = "0xE58B20", VA = "0xE58B20")]
		public static extern uint ISteamGameServerInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000789")]
		[Address(RVA = "0xE58BA0", Offset = "0xE58BA0", VA = "0xE58BA0")]
		public static extern bool ISteamGameServerInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x600078A")]
		[Address(RVA = "0xE58C38", Offset = "0xE58C38", VA = "0xE58C38")]
		public static extern void ISteamGameServerInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x600078B")]
		[Address(RVA = "0xE58CB8", Offset = "0xE58CB8", VA = "0xE58CB8")]
		public static extern bool ISteamGameServerInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x600078C")]
		[Address(RVA = "0xE58D40", Offset = "0xE58D40", VA = "0xE58D40")]
		public static extern bool ISteamGameServerInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x600078D")]
		[Address(RVA = "0xE58DE8", Offset = "0xE58DE8", VA = "0xE58DE8")]
		public static extern bool ISteamGameServerInventory_SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x600078E")]
		[Address(RVA = "0xE58E90", Offset = "0xE58E90", VA = "0xE58E90")]
		public static extern bool ISteamGameServerInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x600078F")]
		[Address(RVA = "0xE58F48", Offset = "0xE58F48", VA = "0xE58F48")]
		public static extern bool ISteamGameServerInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x6000790")]
		[Address(RVA = "0xE59008", Offset = "0xE59008", VA = "0xE59008")]
		public static extern bool ISteamGameServerInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x6000791")]
		[Address(RVA = "0xE59090", Offset = "0xE59090", VA = "0xE59090")]
		public static extern bool ISteamGameServerInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x6000792")]
		[Address(RVA = "0xE59128", Offset = "0xE59128", VA = "0xE59128")]
		public static extern bool ISteamGameServerInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x6000793")]
		[Address(RVA = "0xE591D0", Offset = "0xE591D0", VA = "0xE591D0")]
		public static extern bool ISteamGameServerInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x6000794")]
		[Address(RVA = "0xE59270", Offset = "0xE59270", VA = "0xE59270")]
		public static extern bool ISteamGameServerInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x6000795")]
		[Address(RVA = "0xE59360", Offset = "0xE59360", VA = "0xE59360")]
		public static extern bool ISteamGameServerInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x6000796")]
		[Address(RVA = "0xE59410", Offset = "0xE59410", VA = "0xE59410")]
		public static extern void ISteamGameServerInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x6000797")]
		[Address(RVA = "0xE59480", Offset = "0xE59480", VA = "0xE59480")]
		public static extern bool ISteamGameServerInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x6000798")]
		[Address(RVA = "0xE59518", Offset = "0xE59518", VA = "0xE59518")]
		public static extern bool ISteamGameServerInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x6000799")]
		[Address(RVA = "0xE59618", Offset = "0xE59618", VA = "0xE59618")]
		public static extern bool ISteamGameServerInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x600079A")]
		[Address(RVA = "0xE59694", Offset = "0xE59694", VA = "0xE59694")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x600079B")]
		[Address(RVA = "0xE59734", Offset = "0xE59734", VA = "0xE59734")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x600079C")]
		[Address(RVA = "0xE59750", Offset = "0xE59750", VA = "0xE59750")]
		public static extern ulong ISteamGameServerInventory_RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600079D")]
		[Address(RVA = "0xE597D0", Offset = "0xE597D0", VA = "0xE597D0")]
		public static extern bool ISteamGameServerInventory_GetEligiblePromoItemDefinitionIDs(CSteamID steamID, [In][Out] SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x600079E")]
		[Address(RVA = "0xE59878", Offset = "0xE59878", VA = "0xE59878")]
		public static extern bool ISteamGameServerNetworking_SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600079F")]
		[Address(RVA = "0xE59938", Offset = "0xE59938", VA = "0xE59938")]
		public static extern bool ISteamGameServerNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xE599D0", Offset = "0xE599D0", VA = "0xE599D0")]
		public static extern bool ISteamGameServerNetworking_ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xE59A90", Offset = "0xE59A90", VA = "0xE59A90")]
		public static extern bool ISteamGameServerNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xE59B18", Offset = "0xE59B18", VA = "0xE59B18")]
		public static extern bool ISteamGameServerNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xE59BA0", Offset = "0xE59BA0", VA = "0xE59BA0")]
		public static extern bool ISteamGameServerNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xE59C38", Offset = "0xE59C38", VA = "0xE59C38")]
		public static extern bool ISteamGameServerNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xE59CD0", Offset = "0xE59CD0", VA = "0xE59CD0")]
		public static extern bool ISteamGameServerNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xE59D58", Offset = "0xE59D58", VA = "0xE59D58")]
		public static extern uint ISteamGameServerNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xE59E00", Offset = "0xE59E00", VA = "0xE59E00")]
		public static extern uint ISteamGameServerNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xE59EA8", Offset = "0xE59EA8", VA = "0xE59EA8")]
		public static extern uint ISteamGameServerNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xE59F40", Offset = "0xE59F40", VA = "0xE59F40")]
		public static extern bool ISteamGameServerNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xE59FD8", Offset = "0xE59FD8", VA = "0xE59FD8")]
		public static extern bool ISteamGameServerNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xE5A070", Offset = "0xE5A070", VA = "0xE5A070")]
		public static extern bool ISteamGameServerNetworking_SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xE5A128", Offset = "0xE5A128", VA = "0xE5A128")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xE5A1C0", Offset = "0xE5A1C0", VA = "0xE5A1C0")]
		public static extern bool ISteamGameServerNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xE5A278", Offset = "0xE5A278", VA = "0xE5A278")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xE5A318", Offset = "0xE5A318", VA = "0xE5A318")]
		public static extern bool ISteamGameServerNetworking_RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xE5A3D8", Offset = "0xE5A3D8", VA = "0xE5A3D8")]
		public static extern bool ISteamGameServerNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xE5A490", Offset = "0xE5A490", VA = "0xE5A490")]
		public static extern bool ISteamGameServerNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xE5A530", Offset = "0xE5A530", VA = "0xE5A530")]
		public static extern ESNetSocketConnectionType ISteamGameServerNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xE5A5B0", Offset = "0xE5A5B0", VA = "0xE5A5B0")]
		public static extern int ISteamGameServerNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xE5A630", Offset = "0xE5A630", VA = "0xE5A630")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xE5A6F8", Offset = "0xE5A6F8", VA = "0xE5A6F8")]
		public static extern ulong ISteamGameServerUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xE5A7A8", Offset = "0xE5A7A8", VA = "0xE5A7A8")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xE5A840", Offset = "0xE5A840", VA = "0xE5A840")]
		public static extern ulong ISteamGameServerUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xE5A8C0", Offset = "0xE5A8C0", VA = "0xE5A8C0")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xE5A9B8", Offset = "0xE5A9B8", VA = "0xE5A9B8")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xE5AA68", Offset = "0xE5AA68", VA = "0xE5AA68")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xE5AB18", Offset = "0xE5AB18", VA = "0xE5AB18")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xE5ABD0", Offset = "0xE5ABD0", VA = "0xE5ABD0")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue);

		[PreserveSig]
		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xE5AC80", Offset = "0xE5AC80", VA = "0xE5AC80")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xE5AD10", Offset = "0xE5AD10", VA = "0xE5AD10")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, IntPtr pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType);

		[PreserveSig]
		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xE5ADEC", Offset = "0xE5ADEC", VA = "0xE5ADEC")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xE5AE7C", Offset = "0xE5AE7C", VA = "0xE5AE7C")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xE5AF4C", Offset = "0xE5AF4C", VA = "0xE5AF4C")]
		public static extern bool ISteamGameServerUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xE5AFD4", Offset = "0xE5AFD4", VA = "0xE5AFD4")]
		public static extern bool ISteamGameServerUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xE5AFF0", Offset = "0xE5AFF0", VA = "0xE5AFF0")]
		public static extern bool ISteamGameServerUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xE5B00C", Offset = "0xE5B00C", VA = "0xE5B00C")]
		public static extern bool ISteamGameServerUGC_SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs);

		[PreserveSig]
		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xE5B0A4", Offset = "0xE5B0A4", VA = "0xE5B0A4")]
		public static extern bool ISteamGameServerUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xE5B13C", Offset = "0xE5B13C", VA = "0xE5B13C")]
		public static extern bool ISteamGameServerUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xE5B1D4", Offset = "0xE5B1D4", VA = "0xE5B1D4")]
		public static extern bool ISteamGameServerUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xE5B26C", Offset = "0xE5B26C", VA = "0xE5B26C")]
		public static extern bool ISteamGameServerUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xE5B304", Offset = "0xE5B304", VA = "0xE5B304")]
		public static extern bool ISteamGameServerUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xE5B39C", Offset = "0xE5B39C", VA = "0xE5B39C")]
		public static extern bool ISteamGameServerUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xE5B434", Offset = "0xE5B434", VA = "0xE5B434")]
		public static extern bool ISteamGameServerUGC_SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xE5B4CC", Offset = "0xE5B4CC", VA = "0xE5B4CC")]
		public static extern bool ISteamGameServerUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xE5B4E8", Offset = "0xE5B4E8", VA = "0xE5B4E8")]
		public static extern bool ISteamGameServerUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xE5B580", Offset = "0xE5B580", VA = "0xE5B580")]
		public static extern bool ISteamGameServerUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xE5B59C", Offset = "0xE5B59C", VA = "0xE5B59C")]
		public static extern bool ISteamGameServerUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xE5B634", Offset = "0xE5B634", VA = "0xE5B634")]
		public static extern bool ISteamGameServerUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xE5B650", Offset = "0xE5B650", VA = "0xE5B650")]
		public static extern bool ISteamGameServerUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xE5B6E8", Offset = "0xE5B6E8", VA = "0xE5B6E8")]
		public static extern bool ISteamGameServerUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xE5B704", Offset = "0xE5B704", VA = "0xE5B704")]
		public static extern ulong ISteamGameServerUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xE5B794", Offset = "0xE5B794", VA = "0xE5B794")]
		public static extern ulong ISteamGameServerUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xE5B824", Offset = "0xE5B824", VA = "0xE5B824")]
		public static extern ulong ISteamGameServerUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xE5B8B4", Offset = "0xE5B8B4", VA = "0xE5B8B4")]
		public static extern bool ISteamGameServerUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xE5B8D0", Offset = "0xE5B8D0", VA = "0xE5B8D0")]
		public static extern bool ISteamGameServerUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xE5B8EC", Offset = "0xE5B8EC", VA = "0xE5B8EC")]
		public static extern bool ISteamGameServerUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xE5B908", Offset = "0xE5B908", VA = "0xE5B908")]
		public static extern bool ISteamGameServerUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xE5B924", Offset = "0xE5B924", VA = "0xE5B924")]
		public static extern bool ISteamGameServerUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xE5B9BC", Offset = "0xE5B9BC", VA = "0xE5B9BC")]
		public static extern bool ISteamGameServerUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xE5BA54", Offset = "0xE5BA54", VA = "0xE5BA54")]
		public static extern bool ISteamGameServerUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xE5BA70", Offset = "0xE5BA70", VA = "0xE5BA70")]
		public static extern bool ISteamGameServerUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xE5BA8C", Offset = "0xE5BA8C", VA = "0xE5BA8C")]
		public static extern bool ISteamGameServerUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xE5BAA8", Offset = "0xE5BAA8", VA = "0xE5BAA8")]
		public static extern bool ISteamGameServerUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xE5BAC4", Offset = "0xE5BAC4", VA = "0xE5BAC4")]
		public static extern bool ISteamGameServerUGC_AddItemPreviewFile(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile, EItemPreviewType type);

		[PreserveSig]
		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xE5BAE0", Offset = "0xE5BAE0", VA = "0xE5BAE0")]
		public static extern bool ISteamGameServerUGC_AddItemPreviewVideo(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xE5BAFC", Offset = "0xE5BAFC", VA = "0xE5BAFC")]
		public static extern bool ISteamGameServerUGC_UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xE5BB18", Offset = "0xE5BB18", VA = "0xE5BB18")]
		public static extern bool ISteamGameServerUGC_UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xE5BB34", Offset = "0xE5BB34", VA = "0xE5BB34")]
		public static extern bool ISteamGameServerUGC_RemoveItemPreview(UGCUpdateHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xE5BBCC", Offset = "0xE5BBCC", VA = "0xE5BBCC")]
		public static extern ulong ISteamGameServerUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xE5BBE8", Offset = "0xE5BBE8", VA = "0xE5BBE8")]
		public static extern EItemUpdateStatus ISteamGameServerUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xE5BC80", Offset = "0xE5BC80", VA = "0xE5BC80")]
		public static extern ulong ISteamGameServerUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xE5BD10", Offset = "0xE5BD10", VA = "0xE5BD10")]
		public static extern ulong ISteamGameServerUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xE5BD90", Offset = "0xE5BD90", VA = "0xE5BD90")]
		public static extern ulong ISteamGameServerUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xE5BE20", Offset = "0xE5BE20", VA = "0xE5BE20")]
		public static extern ulong ISteamGameServerUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xE5BEB0", Offset = "0xE5BEB0", VA = "0xE5BEB0")]
		public static extern ulong ISteamGameServerUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xE5BF30", Offset = "0xE5BF30", VA = "0xE5BF30")]
		public static extern ulong ISteamGameServerUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xE5BFB0", Offset = "0xE5BFB0", VA = "0xE5BFB0")]
		public static extern uint ISteamGameServerUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xE5C024", Offset = "0xE5C024", VA = "0xE5C024")]
		public static extern uint ISteamGameServerUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xE5C0BC", Offset = "0xE5C0BC", VA = "0xE5C0BC")]
		public static extern uint ISteamGameServerUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xE5C13C", Offset = "0xE5C13C", VA = "0xE5C13C")]
		public static extern bool ISteamGameServerUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xE5C1F4", Offset = "0xE5C1F4", VA = "0xE5C1F4")]
		public static extern bool ISteamGameServerUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xE5C294", Offset = "0xE5C294", VA = "0xE5C294")]
		public static extern bool ISteamGameServerUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xE5C32C", Offset = "0xE5C32C", VA = "0xE5C32C")]
		public static extern bool ISteamGameServerUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, InteropHelp.UTF8StringHandle pszFolder);

		[PreserveSig]
		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xE5C348", Offset = "0xE5C348", VA = "0xE5C348")]
		public static extern void ISteamGameServerUGC_SuspendDownloads(bool bSuspend);

		[PreserveSig]
		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xE5C3C8", Offset = "0xE5C3C8", VA = "0xE5C3C8")]
		public static extern ulong ISteamGameServerUGC_StartPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xE5C460", Offset = "0xE5C460", VA = "0xE5C460")]
		public static extern ulong ISteamGameServerUGC_StopPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xE5C4F8", Offset = "0xE5C4F8", VA = "0xE5C4F8")]
		public static extern ulong ISteamGameServerUGC_StopPlaytimeTrackingForAllItems();

		[PreserveSig]
		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xE5C56C", Offset = "0xE5C56C", VA = "0xE5C56C")]
		public static extern ulong ISteamGameServerUGC_AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xE5C5FC", Offset = "0xE5C5FC", VA = "0xE5C5FC")]
		public static extern ulong ISteamGameServerUGC_RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xE5C68C", Offset = "0xE5C68C", VA = "0xE5C68C")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xE5C700", Offset = "0xE5C700", VA = "0xE5C700")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xE5C774", Offset = "0xE5C774", VA = "0xE5C774")]
		public static extern EUniverse ISteamGameServerUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xE5C7E8", Offset = "0xE5C7E8", VA = "0xE5C7E8")]
		public static extern uint ISteamGameServerUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xE5C85C", Offset = "0xE5C85C", VA = "0xE5C85C")]
		public static extern IntPtr ISteamGameServerUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xE5C8D0", Offset = "0xE5C8D0", VA = "0xE5C8D0")]
		public static extern bool ISteamGameServerUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x6000800")]
		[Address(RVA = "0xE5C970", Offset = "0xE5C970", VA = "0xE5C970")]
		public static extern bool ISteamGameServerUtils_GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000801")]
		[Address(RVA = "0xE5CA18", Offset = "0xE5CA18", VA = "0xE5CA18")]
		public static extern bool ISteamGameServerUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x6000802")]
		[Address(RVA = "0xE5CAB0", Offset = "0xE5CAB0", VA = "0xE5CAB0")]
		public static extern byte ISteamGameServerUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x6000803")]
		[Address(RVA = "0xE5CB24", Offset = "0xE5CB24", VA = "0xE5CB24")]
		public static extern uint ISteamGameServerUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x6000804")]
		[Address(RVA = "0xE5CB98", Offset = "0xE5CB98", VA = "0xE5CB98")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x6000805")]
		[Address(RVA = "0xE5CC18", Offset = "0xE5CC18", VA = "0xE5CC18")]
		public static extern bool ISteamGameServerUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000806")]
		[Address(RVA = "0xE5CCC4", Offset = "0xE5CCC4", VA = "0xE5CCC4")]
		public static extern ESteamAPICallFailure ISteamGameServerUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x6000807")]
		[Address(RVA = "0xE5CD44", Offset = "0xE5CD44", VA = "0xE5CD44")]
		public static extern bool ISteamGameServerUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000808")]
		[Address(RVA = "0xE5CE10", Offset = "0xE5CE10", VA = "0xE5CE10")]
		public static extern uint ISteamGameServerUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x6000809")]
		[Address(RVA = "0xE5CE84", Offset = "0xE5CE84", VA = "0xE5CE84")]
		public static extern void ISteamGameServerUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x600080A")]
		[Address(RVA = "0xE5CF08", Offset = "0xE5CF08", VA = "0xE5CF08")]
		public static extern bool ISteamGameServerUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x600080B")]
		[Address(RVA = "0xE5CF84", Offset = "0xE5CF84", VA = "0xE5CF84")]
		public static extern bool ISteamGameServerUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x600080C")]
		[Address(RVA = "0xE5D000", Offset = "0xE5D000", VA = "0xE5D000")]
		public static extern ulong ISteamGameServerUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x600080D")]
		[Address(RVA = "0xE5D01C", Offset = "0xE5D01C", VA = "0xE5D01C")]
		public static extern bool ISteamGameServerUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x600080E")]
		[Address(RVA = "0xE5D038", Offset = "0xE5D038", VA = "0xE5D038")]
		public static extern uint ISteamGameServerUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x600080F")]
		[Address(RVA = "0xE5D0AC", Offset = "0xE5D0AC", VA = "0xE5D0AC")]
		public static extern bool ISteamGameServerUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x6000810")]
		[Address(RVA = "0xE5D144", Offset = "0xE5D144", VA = "0xE5D144")]
		public static extern IntPtr ISteamGameServerUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x6000811")]
		[Address(RVA = "0xE5D1B8", Offset = "0xE5D1B8", VA = "0xE5D1B8")]
		public static extern bool ISteamGameServerUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x6000812")]
		[Address(RVA = "0xE5D234", Offset = "0xE5D234", VA = "0xE5D234")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

		[PreserveSig]
		[Token(Token = "0x6000813")]
		[Address(RVA = "0xE5D2C4", Offset = "0xE5D2C4", VA = "0xE5D2C4")]
		public static extern bool ISteamGameServerUtils_IsSteamInBigPictureMode();

		[PreserveSig]
		[Token(Token = "0x6000814")]
		[Address(RVA = "0xE5D340", Offset = "0xE5D340", VA = "0xE5D340")]
		public static extern void ISteamGameServerUtils_StartVRDashboard();

		[PreserveSig]
		[Token(Token = "0x6000815")]
		[Address(RVA = "0xE5D3B0", Offset = "0xE5D3B0", VA = "0xE5D3B0")]
		public static extern bool ISteamGameServerUtils_IsVRHeadsetStreamingEnabled();

		[PreserveSig]
		[Token(Token = "0x6000816")]
		[Address(RVA = "0xE5D42C", Offset = "0xE5D42C", VA = "0xE5D42C")]
		public static extern void ISteamGameServerUtils_SetVRHeadsetStreamingEnabled(bool bEnabled);
	}
	[Token(Token = "0x20000F2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EA08", Offset = "0x97EA08")]
	public struct SteamAppInstalled_t
	{
		[Token(Token = "0x40005C2")]
		public const int k_iCallback = 3901;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000F3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EA1C", Offset = "0x97EA1C")]
	public struct SteamAppUninstalled_t
	{
		[Token(Token = "0x40005C4")]
		public const int k_iCallback = 3902;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000F4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EA30", Offset = "0x97EA30")]
	public struct DlcInstalled_t
	{
		[Token(Token = "0x40005C6")]
		public const int k_iCallback = 1005;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000F5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EA44", Offset = "0x97EA44")]
	public struct RegisterActivationCodeResponse_t
	{
		[Token(Token = "0x40005C8")]
		public const int k_iCallback = 1008;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ERegisterActivationCodeResult m_eResult;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unPackageRegistered;
	}
	[Token(Token = "0x20000F6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EA58", Offset = "0x97EA58")]
	public struct NewLaunchQueryParameters_t
	{
		[Token(Token = "0x40005CB")]
		public const int k_iCallback = 1014;
	}
	[Token(Token = "0x20000F7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EA6C", Offset = "0x97EA6C")]
	public struct AppProofOfPurchaseKeyResponse_t
	{
		[Token(Token = "0x40005CC")]
		public const int k_iCallback = 1021;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nAppID;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_cchKeyLength;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchKey;
	}
	[Token(Token = "0x20000F8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EA80", Offset = "0x97EA80")]
	public struct FileDetailsResult_t
	{
		[Token(Token = "0x40005D1")]
		public const int k_iCallback = 1023;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulFileSize;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] m_FileSHA;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_unFlags;
	}
	[Token(Token = "0x20000F9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EA94", Offset = "0x97EA94")]
	public struct PersonaStateChange_t
	{
		[Token(Token = "0x40005D6")]
		public const int k_iCallback = 304;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamID;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EPersonaChange m_nChangeFlags;
	}
	[Token(Token = "0x20000FA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EAA8", Offset = "0x97EAA8")]
	public struct GameOverlayActivated_t
	{
		[Token(Token = "0x40005D9")]
		public const int k_iCallback = 331;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bActive;
	}
	[Token(Token = "0x20000FB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EABC", Offset = "0x97EABC")]
	public struct GameServerChangeRequested_t
	{
		[Token(Token = "0x40005DB")]
		public const int k_iCallback = 332;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchServer;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchPassword;
	}
	[Token(Token = "0x20000FC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EAD0", Offset = "0x97EAD0")]
	public struct GameLobbyJoinRequested_t
	{
		[Token(Token = "0x40005DE")]
		public const int k_iCallback = 333;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDLobby;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDFriend;
	}
	[Token(Token = "0x20000FD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EAE4", Offset = "0x97EAE4")]
	public struct AvatarImageLoaded_t
	{
		[Token(Token = "0x40005E1")]
		public const int k_iCallback = 334;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamID;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iImage;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_iWide;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iTall;
	}
	[Token(Token = "0x20000FE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EAF8", Offset = "0x97EAF8")]
	public struct ClanOfficerListResponse_t
	{
		[Token(Token = "0x40005E6")]
		public const int k_iCallback = 335;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClan;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cOfficers;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x20000FF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EB0C", Offset = "0x97EB0C")]
	public struct FriendRichPresenceUpdate_t
	{
		[Token(Token = "0x40005EA")]
		public const int k_iCallback = 336;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000100")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EB20", Offset = "0x97EB20")]
	public struct GameRichPresenceJoinRequested_t
	{
		[Token(Token = "0x40005ED")]
		public const int k_iCallback = 337;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchConnect;
	}
	[Token(Token = "0x2000101")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EB34", Offset = "0x97EB34")]
	public struct GameConnectedClanChatMsg_t
	{
		[Token(Token = "0x40005F0")]
		public const int k_iCallback = 338;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iMessageID;
	}
	[Token(Token = "0x2000102")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EB48", Offset = "0x97EB48")]
	public struct GameConnectedChatJoin_t
	{
		[Token(Token = "0x40005F4")]
		public const int k_iCallback = 339;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000103")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EB5C", Offset = "0x97EB5C")]
	public struct GameConnectedChatLeave_t
	{
		[Token(Token = "0x40005F7")]
		public const int k_iCallback = 340;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bKicked;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bDropped;
	}
	[Token(Token = "0x2000104")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EB70", Offset = "0x97EB70")]
	public struct DownloadClanActivityCountsResult_t
	{
		[Token(Token = "0x40005FC")]
		public const int k_iCallback = 341;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;
	}
	[Token(Token = "0x2000105")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EB84", Offset = "0x97EB84")]
	public struct JoinClanChatRoomCompletionResult_t
	{
		[Token(Token = "0x40005FE")]
		public const int k_iCallback = 342;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EChatRoomEnterResponse m_eChatRoomEnterResponse;
	}
	[Token(Token = "0x2000106")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EB98", Offset = "0x97EB98")]
	public struct GameConnectedFriendChatMsg_t
	{
		[Token(Token = "0x4000601")]
		public const int k_iCallback = 343;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iMessageID;
	}
	[Token(Token = "0x2000107")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EBAC", Offset = "0x97EBAC")]
	public struct FriendsGetFollowerCount_t
	{
		[Token(Token = "0x4000604")]
		public const int k_iCallback = 344;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nCount;
	}
	[Token(Token = "0x2000108")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EBC0", Offset = "0x97EBC0")]
	public struct FriendsIsFollowing_t
	{
		[Token(Token = "0x4000608")]
		public const int k_iCallback = 345;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bIsFollowing;
	}
	[Token(Token = "0x2000109")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EBD4", Offset = "0x97EBD4")]
	public struct FriendsEnumerateFollowingList_t
	{
		[Token(Token = "0x400060C")]
		public const int k_iCallback = 346;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID[] m_rgSteamID;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nTotalResultCount;
	}
	[Token(Token = "0x200010A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EBE8", Offset = "0x97EBE8")]
	public struct SetPersonaNameResponse_t
	{
		[Token(Token = "0x4000611")]
		public const int k_iCallback = 347;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool m_bLocalSuccess;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x200010B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EBFC", Offset = "0x97EBFC")]
	public struct GCMessageAvailable_t
	{
		[Token(Token = "0x4000615")]
		public const int k_iCallback = 1701;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nMessageSize;
	}
	[Token(Token = "0x200010C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EC10", Offset = "0x97EC10")]
	public struct GCMessageFailed_t
	{
		[Token(Token = "0x4000617")]
		public const int k_iCallback = 1702;
	}
	[Token(Token = "0x200010D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EC24", Offset = "0x97EC24")]
	public struct GSClientApprove_t
	{
		[Token(Token = "0x4000618")]
		public const int k_iCallback = 201;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x200010E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EC38", Offset = "0x97EC38")]
	public struct GSClientDeny_t
	{
		[Token(Token = "0x400061B")]
		public const int k_iCallback = 202;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchOptionalText;
	}
	[Token(Token = "0x200010F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EC4C", Offset = "0x97EC4C")]
	public struct GSClientKick_t
	{
		[Token(Token = "0x400061F")]
		public const int k_iCallback = 203;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;
	}
	[Token(Token = "0x2000110")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EC60", Offset = "0x97EC60")]
	public struct GSClientAchievementStatus_t
	{
		[Token(Token = "0x4000622")]
		public const int k_iCallback = 206;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_pchAchievement;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUnlocked;
	}
	[Token(Token = "0x2000111")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EC74", Offset = "0x97EC74")]
	public struct GSPolicyResponse_t
	{
		[Token(Token = "0x4000626")]
		public const int k_iCallback = 115;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSecure;
	}
	[Token(Token = "0x2000112")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EC88", Offset = "0x97EC88")]
	public struct GSGameplayStats_t
	{
		[Token(Token = "0x4000628")]
		public const int k_iCallback = 207;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nRank;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unTotalConnects;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unTotalMinutesPlayed;
	}
	[Token(Token = "0x2000113")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EC9C", Offset = "0x97EC9C")]
	public struct GSClientGroupStatus_t
	{
		[Token(Token = "0x400062D")]
		public const int k_iCallback = 208;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamIDUser;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_SteamIDGroup;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bMember;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bOfficer;
	}
	[Token(Token = "0x2000114")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ECB0", Offset = "0x97ECB0")]
	public struct GSReputation_t
	{
		[Token(Token = "0x4000632")]
		public const int k_iCallback = 209;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unReputationScore;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bBanned;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unBannedIP;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_usBannedPort;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ulong m_ulBannedGameID;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_unBanExpires;
	}
	[Token(Token = "0x2000115")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ECC4", Offset = "0x97ECC4")]
	public struct AssociateWithClanResult_t
	{
		[Token(Token = "0x400063A")]
		public const int k_iCallback = 210;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000116")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ECD8", Offset = "0x97ECD8")]
	public struct ComputeNewPlayerCompatibilityResult_t
	{
		[Token(Token = "0x400063C")]
		public const int k_iCallback = 211;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayersThatDontLikeCandidate;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cPlayersThatCandidateDoesntLike;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_cClanPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_SteamIDCandidate;
	}
	[Token(Token = "0x2000117")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ECEC", Offset = "0x97ECEC")]
	public struct GSStatsReceived_t
	{
		[Token(Token = "0x4000642")]
		public const int k_iCallback = 1800;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000118")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ED00", Offset = "0x97ED00")]
	public struct GSStatsStored_t
	{
		[Token(Token = "0x4000645")]
		public const int k_iCallback = 1801;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000119")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ED14", Offset = "0x97ED14")]
	public struct GSStatsUnloaded_t
	{
		[Token(Token = "0x4000648")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x200011A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ED28", Offset = "0x97ED28")]
	public struct HTML_BrowserReady_t
	{
		[Token(Token = "0x400064A")]
		public const int k_iCallback = 4501;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x200011B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ED3C", Offset = "0x97ED3C")]
	public struct HTML_NeedsPaint_t
	{
		[Token(Token = "0x400064C")]
		public const int k_iCallback = 4502;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr pBGRA;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unWide;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unTall;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unUpdateX;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unUpdateY;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unUpdateWide;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint unUpdateTall;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint unScrollX;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint unScrollY;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float flPageScale;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint unPageSerial;
	}
	[Token(Token = "0x200011C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ED50", Offset = "0x97ED50")]
	public struct HTML_StartRequest_t
	{
		[Token(Token = "0x4000659")]
		public const int k_iCallback = 4503;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchTarget;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string pchPostData;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool bIsRedirect;
	}
	[Token(Token = "0x200011D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ED64", Offset = "0x97ED64")]
	public struct HTML_CloseBrowser_t
	{
		[Token(Token = "0x400065F")]
		public const int k_iCallback = 4504;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x200011E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ED78", Offset = "0x97ED78")]
	public struct HTML_URLChanged_t
	{
		[Token(Token = "0x4000661")]
		public const int k_iCallback = 4505;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPostData;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bIsRedirect;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string pchPageTitle;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bNewNavigation;
	}
	[Token(Token = "0x200011F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97ED8C", Offset = "0x97ED8C")]
	public struct HTML_FinishedRequest_t
	{
		[Token(Token = "0x4000668")]
		public const int k_iCallback = 4506;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPageTitle;
	}
	[Token(Token = "0x2000120")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EDA0", Offset = "0x97EDA0")]
	public struct HTML_OpenLinkInNewTab_t
	{
		[Token(Token = "0x400066C")]
		public const int k_iCallback = 4507;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;
	}
	[Token(Token = "0x2000121")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EDB4", Offset = "0x97EDB4")]
	public struct HTML_ChangedTitle_t
	{
		[Token(Token = "0x400066F")]
		public const int k_iCallback = 4508;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;
	}
	[Token(Token = "0x2000122")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EDC8", Offset = "0x97EDC8")]
	public struct HTML_SearchResults_t
	{
		[Token(Token = "0x4000672")]
		public const int k_iCallback = 4509;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unResults;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unCurrentMatch;
	}
	[Token(Token = "0x2000123")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EDDC", Offset = "0x97EDDC")]
	public struct HTML_CanGoBackAndForward_t
	{
		[Token(Token = "0x4000676")]
		public const int k_iCallback = 4510;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool bCanGoBack;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool bCanGoForward;
	}
	[Token(Token = "0x2000124")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EDF0", Offset = "0x97EDF0")]
	public struct HTML_HorizontalScroll_t
	{
		[Token(Token = "0x400067A")]
		public const int k_iCallback = 4511;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x2000125")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EE04", Offset = "0x97EE04")]
	public struct HTML_VerticalScroll_t
	{
		[Token(Token = "0x4000681")]
		public const int k_iCallback = 4512;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x2000126")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EE18", Offset = "0x97EE18")]
	public struct HTML_LinkAtPosition_t
	{
		[Token(Token = "0x4000688")]
		public const int k_iCallback = 4513;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint x;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint y;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchURL;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bInput;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool bLiveLink;
	}
	[Token(Token = "0x2000127")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EE2C", Offset = "0x97EE2C")]
	public struct HTML_JSAlert_t
	{
		[Token(Token = "0x400068F")]
		public const int k_iCallback = 4514;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x2000128")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EE40", Offset = "0x97EE40")]
	public struct HTML_JSConfirm_t
	{
		[Token(Token = "0x4000692")]
		public const int k_iCallback = 4515;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x2000129")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EE54", Offset = "0x97EE54")]
	public struct HTML_FileOpenDialog_t
	{
		[Token(Token = "0x4000695")]
		public const int k_iCallback = 4516;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchInitialFile;
	}
	[Token(Token = "0x200012A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EE68", Offset = "0x97EE68")]
	public struct HTML_NewWindow_t
	{
		[Token(Token = "0x4000699")]
		public const int k_iCallback = 4521;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unX;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unY;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unWide;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unTall;

		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HHTMLBrowser unNewWindow_BrowserHandle;
	}
	[Token(Token = "0x200012B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EE7C", Offset = "0x97EE7C")]
	public struct HTML_SetCursor_t
	{
		[Token(Token = "0x40006A1")]
		public const int k_iCallback = 4522;

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint eMouseCursor;
	}
	[Token(Token = "0x200012C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EE90", Offset = "0x97EE90")]
	public struct HTML_StatusText_t
	{
		[Token(Token = "0x40006A4")]
		public const int k_iCallback = 4523;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x200012D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EEA4", Offset = "0x97EEA4")]
	public struct HTML_ShowToolTip_t
	{
		[Token(Token = "0x40006A7")]
		public const int k_iCallback = 4524;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x200012E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EEB8", Offset = "0x97EEB8")]
	public struct HTML_UpdateToolTip_t
	{
		[Token(Token = "0x40006AA")]
		public const int k_iCallback = 4525;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x200012F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EECC", Offset = "0x97EECC")]
	public struct HTML_HideToolTip_t
	{
		[Token(Token = "0x40006AD")]
		public const int k_iCallback = 4526;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x2000130")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EEE0", Offset = "0x97EEE0")]
	public struct HTTPRequestCompleted_t
	{
		[Token(Token = "0x40006AF")]
		public const int k_iCallback = 2101;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bRequestSuccessful;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EHTTPStatusCode m_eStatusCode;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unBodySize;
	}
	[Token(Token = "0x2000131")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EEF4", Offset = "0x97EEF4")]
	public struct HTTPRequestHeadersReceived_t
	{
		[Token(Token = "0x40006B5")]
		public const int k_iCallback = 2102;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;
	}
	[Token(Token = "0x2000132")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EF08", Offset = "0x97EF08")]
	public struct HTTPRequestDataReceived_t
	{
		[Token(Token = "0x40006B8")]
		public const int k_iCallback = 2103;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_cOffset;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cBytesReceived;
	}
	[Token(Token = "0x2000133")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EF1C", Offset = "0x97EF1C")]
	public struct SteamInventoryResultReady_t
	{
		[Token(Token = "0x40006BD")]
		public const int k_iCallback = 4700;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x2000134")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EF30", Offset = "0x97EF30")]
	public struct SteamInventoryFullUpdate_t
	{
		[Token(Token = "0x40006C0")]
		public const int k_iCallback = 4701;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;
	}
	[Token(Token = "0x2000135")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EF44", Offset = "0x97EF44")]
	public struct SteamInventoryDefinitionUpdate_t
	{
		[Token(Token = "0x40006C2")]
		public const int k_iCallback = 4702;
	}
	[Token(Token = "0x2000136")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EF58", Offset = "0x97EF58")]
	public struct SteamInventoryEligiblePromoItemDefIDs_t
	{
		[Token(Token = "0x40006C3")]
		public const int k_iCallback = 4703;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_result;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_numEligiblePromoItemDefs;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x2000137")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EF6C", Offset = "0x97EF6C")]
	public struct FavoritesListChanged_t
	{
		[Token(Token = "0x40006C8")]
		public const int k_iCallback = 502;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nIP;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nQueryPort;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nConnPort;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nAppID;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nFlags;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bAdd;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AccountID_t m_unAccountId;
	}
	[Token(Token = "0x2000138")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EF80", Offset = "0x97EF80")]
	public struct LobbyInvite_t
	{
		[Token(Token = "0x40006D0")]
		public const int k_iCallback = 503;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulGameID;
	}
	[Token(Token = "0x2000139")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EF94", Offset = "0x97EF94")]
	public struct LobbyEnter_t
	{
		[Token(Token = "0x40006D4")]
		public const int k_iCallback = 504;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_rgfChatPermissions;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bLocked;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_EChatRoomEnterResponse;
	}
	[Token(Token = "0x200013A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EFA8", Offset = "0x97EFA8")]
	public struct LobbyDataUpdate_t
	{
		[Token(Token = "0x40006D9")]
		public const int k_iCallback = 505;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDMember;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x200013B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EFBC", Offset = "0x97EFBC")]
	public struct LobbyChatUpdate_t
	{
		[Token(Token = "0x40006DD")]
		public const int k_iCallback = 506;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUserChanged;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulSteamIDMakingChange;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_rgfChatMemberStateChange;
	}
	[Token(Token = "0x200013C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EFD0", Offset = "0x97EFD0")]
	public struct LobbyChatMsg_t
	{
		[Token(Token = "0x40006E2")]
		public const int k_iCallback = 507;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_eChatEntryType;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_iChatID;
	}
	[Token(Token = "0x200013D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EFE4", Offset = "0x97EFE4")]
	public struct LobbyGameCreated_t
	{
		[Token(Token = "0x40006E7")]
		public const int k_iCallback = 509;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDGameServer;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unIP;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort m_usPort;
	}
	[Token(Token = "0x200013E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97EFF8", Offset = "0x97EFF8")]
	public struct LobbyMatchList_t
	{
		[Token(Token = "0x40006EC")]
		public const int k_iCallback = 510;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nLobbiesMatching;
	}
	[Token(Token = "0x200013F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F00C", Offset = "0x97F00C")]
	public struct LobbyKicked_t
	{
		[Token(Token = "0x40006EE")]
		public const int k_iCallback = 512;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDAdmin;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bKickedDueToDisconnect;
	}
	[Token(Token = "0x2000140")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F020", Offset = "0x97F020")]
	public struct LobbyCreated_t
	{
		[Token(Token = "0x40006F2")]
		public const int k_iCallback = 513;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulSteamIDLobby;
	}
	[Token(Token = "0x2000141")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F034", Offset = "0x97F034")]
	public struct FavoritesListAccountsUpdated_t
	{
		[Token(Token = "0x40006F5")]
		public const int k_iCallback = 516;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000142")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F048", Offset = "0x97F048")]
	public struct PlaybackStatusHasChanged_t
	{
		[Token(Token = "0x40006F7")]
		public const int k_iCallback = 4001;
	}
	[Token(Token = "0x2000143")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F05C", Offset = "0x97F05C")]
	public struct VolumeHasChanged_t
	{
		[Token(Token = "0x40006F8")]
		public const int k_iCallback = 4002;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x2000144")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F070", Offset = "0x97F070")]
	public struct MusicPlayerRemoteWillActivate_t
	{
		[Token(Token = "0x40006FA")]
		public const int k_iCallback = 4101;
	}
	[Token(Token = "0x2000145")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F084", Offset = "0x97F084")]
	public struct MusicPlayerRemoteWillDeactivate_t
	{
		[Token(Token = "0x40006FB")]
		public const int k_iCallback = 4102;
	}
	[Token(Token = "0x2000146")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F098", Offset = "0x97F098")]
	public struct MusicPlayerRemoteToFront_t
	{
		[Token(Token = "0x40006FC")]
		public const int k_iCallback = 4103;
	}
	[Token(Token = "0x2000147")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F0AC", Offset = "0x97F0AC")]
	public struct MusicPlayerWillQuit_t
	{
		[Token(Token = "0x40006FD")]
		public const int k_iCallback = 4104;
	}
	[Token(Token = "0x2000148")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F0C0", Offset = "0x97F0C0")]
	public struct MusicPlayerWantsPlay_t
	{
		[Token(Token = "0x40006FE")]
		public const int k_iCallback = 4105;
	}
	[Token(Token = "0x2000149")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F0D4", Offset = "0x97F0D4")]
	public struct MusicPlayerWantsPause_t
	{
		[Token(Token = "0x40006FF")]
		public const int k_iCallback = 4106;
	}
	[Token(Token = "0x200014A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F0E8", Offset = "0x97F0E8")]
	public struct MusicPlayerWantsPlayPrevious_t
	{
		[Token(Token = "0x4000700")]
		public const int k_iCallback = 4107;
	}
	[Token(Token = "0x200014B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F0FC", Offset = "0x97F0FC")]
	public struct MusicPlayerWantsPlayNext_t
	{
		[Token(Token = "0x4000701")]
		public const int k_iCallback = 4108;
	}
	[Token(Token = "0x200014C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F110", Offset = "0x97F110")]
	public struct MusicPlayerWantsShuffled_t
	{
		[Token(Token = "0x4000702")]
		public const int k_iCallback = 4109;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bShuffled;
	}
	[Token(Token = "0x200014D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F124", Offset = "0x97F124")]
	public struct MusicPlayerWantsLooped_t
	{
		[Token(Token = "0x4000704")]
		public const int k_iCallback = 4110;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bLooped;
	}
	[Token(Token = "0x200014E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F138", Offset = "0x97F138")]
	public struct MusicPlayerWantsVolume_t
	{
		[Token(Token = "0x4000706")]
		public const int k_iCallback = 4011;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x200014F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F14C", Offset = "0x97F14C")]
	public struct MusicPlayerSelectsQueueEntry_t
	{
		[Token(Token = "0x4000708")]
		public const int k_iCallback = 4012;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x2000150")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F160", Offset = "0x97F160")]
	public struct MusicPlayerSelectsPlaylistEntry_t
	{
		[Token(Token = "0x400070A")]
		public const int k_iCallback = 4013;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x2000151")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F174", Offset = "0x97F174")]
	public struct MusicPlayerWantsPlayingRepeatStatus_t
	{
		[Token(Token = "0x400070C")]
		public const int k_iCallback = 4114;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_nPlayingRepeatStatus;
	}
	[Token(Token = "0x2000152")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F188", Offset = "0x97F188")]
	public struct P2PSessionRequest_t
	{
		[Token(Token = "0x400070E")]
		public const int k_iCallback = 1202;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;
	}
	[Token(Token = "0x2000153")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F19C", Offset = "0x97F19C")]
	public struct P2PSessionConnectFail_t
	{
		[Token(Token = "0x4000710")]
		public const int k_iCallback = 1203;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_eP2PSessionError;
	}
	[Token(Token = "0x2000154")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F1B0", Offset = "0x97F1B0")]
	public struct SocketStatusCallback_t
	{
		[Token(Token = "0x4000713")]
		public const int k_iCallback = 1201;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SNetSocket_t m_hSocket;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SNetListenSocket_t m_hListenSocket;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_eSNetSocketState;
	}
	[Token(Token = "0x2000155")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F1C4", Offset = "0x97F1C4")]
	public struct RemoteStorageAppSyncedClient_t
	{
		[Token(Token = "0x4000718")]
		public const int k_iCallback = 1301;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumDownloads;
	}
	[Token(Token = "0x2000156")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F1D8", Offset = "0x97F1D8")]
	public struct RemoteStorageAppSyncedServer_t
	{
		[Token(Token = "0x400071C")]
		public const int k_iCallback = 1302;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumUploads;
	}
	[Token(Token = "0x2000157")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F1EC", Offset = "0x97F1EC")]
	public struct RemoteStorageAppSyncProgress_t
	{
		[Token(Token = "0x4000720")]
		public const int k_iCallback = 1303;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchCurrentFile;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uBytesTransferredThisChunk;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double m_dAppPercentComplete;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_bUploading;
	}
	[Token(Token = "0x2000158")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F200", Offset = "0x97F200")]
	public struct RemoteStorageAppSyncStatusCheck_t
	{
		[Token(Token = "0x4000726")]
		public const int k_iCallback = 1305;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000159")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F214", Offset = "0x97F214")]
	public struct RemoteStorageFileShareResult_t
	{
		[Token(Token = "0x4000729")]
		public const int k_iCallback = 1307;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchFilename;
	}
	[Token(Token = "0x200015A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F228", Offset = "0x97F228")]
	public struct RemoteStoragePublishFileResult_t
	{
		[Token(Token = "0x400072D")]
		public const int k_iCallback = 1309;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200015B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F23C", Offset = "0x97F23C")]
	public struct RemoteStorageDeletePublishedFileResult_t
	{
		[Token(Token = "0x4000731")]
		public const int k_iCallback = 1311;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200015C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F250", Offset = "0x97F250")]
	public struct RemoteStorageEnumerateUserPublishedFilesResult_t
	{
		[Token(Token = "0x4000734")]
		public const int k_iCallback = 1312;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x200015D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F264", Offset = "0x97F264")]
	public struct RemoteStorageSubscribePublishedFileResult_t
	{
		[Token(Token = "0x4000739")]
		public const int k_iCallback = 1313;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200015E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F278", Offset = "0x97F278")]
	public struct RemoteStorageEnumerateUserSubscribedFilesResult_t
	{
		[Token(Token = "0x400073C")]
		public const int k_iCallback = 1314;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeSubscribed;
	}
	[Token(Token = "0x200015F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F28C", Offset = "0x97F28C")]
	public struct RemoteStorageUnsubscribePublishedFileResult_t
	{
		[Token(Token = "0x4000742")]
		public const int k_iCallback = 1315;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000160")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F2A0", Offset = "0x97F2A0")]
	public struct RemoteStorageUpdatePublishedFileResult_t
	{
		[Token(Token = "0x4000745")]
		public const int k_iCallback = 1316;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000161")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F2B4", Offset = "0x97F2B4")]
	public struct RemoteStorageDownloadUGCResult_t
	{
		[Token(Token = "0x4000749")]
		public const int k_iCallback = 1317;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nSizeInBytes;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_pchFileName;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong m_ulSteamIDOwner;
	}
	[Token(Token = "0x2000162")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F2C8", Offset = "0x97F2C8")]
	public struct RemoteStorageGetPublishedFileDetailsResult_t
	{
		[Token(Token = "0x4000750")]
		public const int k_iCallback = 1318;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint m_rtimeCreated;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool m_bBanned;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_rgchTags;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool m_bAcceptedForUse;
	}
	[Token(Token = "0x2000163")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F2DC", Offset = "0x97F2DC")]
	public struct RemoteStorageEnumerateWorkshopFilesResult_t
	{
		[Token(Token = "0x4000766")]
		public const int k_iCallback = 1319;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] m_rgScore;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AppId_t m_nAppId;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_unStartIndex;
	}
	[Token(Token = "0x2000164")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F2F0", Offset = "0x97F2F0")]
	public struct RemoteStorageGetPublishedItemVoteDetailsResult_t
	{
		[Token(Token = "0x400076E")]
		public const int k_iCallback = 1320;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_unPublishedFileId;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nVotesFor;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nVotesAgainst;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nReports;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_fScore;
	}
	[Token(Token = "0x2000165")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F304", Offset = "0x97F304")]
	public struct RemoteStoragePublishedFileSubscribed_t
	{
		[Token(Token = "0x4000775")]
		public const int k_iCallback = 1321;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000166")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F318", Offset = "0x97F318")]
	public struct RemoteStoragePublishedFileUnsubscribed_t
	{
		[Token(Token = "0x4000778")]
		public const int k_iCallback = 1322;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000167")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F32C", Offset = "0x97F32C")]
	public struct RemoteStoragePublishedFileDeleted_t
	{
		[Token(Token = "0x400077B")]
		public const int k_iCallback = 1323;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000168")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F340", Offset = "0x97F340")]
	public struct RemoteStorageUpdateUserPublishedItemVoteResult_t
	{
		[Token(Token = "0x400077E")]
		public const int k_iCallback = 1324;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000169")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F354", Offset = "0x97F354")]
	public struct RemoteStorageUserVoteDetails_t
	{
		[Token(Token = "0x4000781")]
		public const int k_iCallback = 1325;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopVote m_eVote;
	}
	[Token(Token = "0x200016A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F368", Offset = "0x97F368")]
	public struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
	{
		[Token(Token = "0x4000785")]
		public const int k_iCallback = 1326;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x200016B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F37C", Offset = "0x97F37C")]
	public struct RemoteStorageSetUserPublishedFileActionResult_t
	{
		[Token(Token = "0x400078A")]
		public const int k_iCallback = 1327;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileAction m_eAction;
	}
	[Token(Token = "0x200016C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F390", Offset = "0x97F390")]
	public struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t
	{
		[Token(Token = "0x400078E")]
		public const int k_iCallback = 1328;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EWorkshopFileAction m_eAction;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeUpdated;
	}
	[Token(Token = "0x200016D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F3A4", Offset = "0x97F3A4")]
	public struct RemoteStoragePublishFileProgress_t
	{
		[Token(Token = "0x4000795")]
		public const int k_iCallback = 1329;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double m_dPercentFile;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bPreview;
	}
	[Token(Token = "0x200016E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F3B8", Offset = "0x97F3B8")]
	public struct RemoteStoragePublishedFileUpdated_t
	{
		[Token(Token = "0x4000798")]
		public const int k_iCallback = 1330;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ulong m_ulUnused;
	}
	[Token(Token = "0x200016F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F3CC", Offset = "0x97F3CC")]
	public struct RemoteStorageFileWriteAsyncComplete_t
	{
		[Token(Token = "0x400079C")]
		public const int k_iCallback = 1331;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000170")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F3E0", Offset = "0x97F3E0")]
	public struct RemoteStorageFileReadAsyncComplete_t
	{
		[Token(Token = "0x400079E")]
		public const int k_iCallback = 1332;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hFileReadAsync;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nOffset;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cubRead;
	}
	[Token(Token = "0x2000171")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F3F4", Offset = "0x97F3F4")]
	public struct ScreenshotReady_t
	{
		[Token(Token = "0x40007A3")]
		public const int k_iCallback = 2301;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ScreenshotHandle m_hLocal;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000172")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F408", Offset = "0x97F408")]
	public struct ScreenshotRequested_t
	{
		[Token(Token = "0x40007A6")]
		public const int k_iCallback = 2302;
	}
	[Token(Token = "0x2000173")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F41C", Offset = "0x97F41C")]
	public struct SteamUGCQueryCompleted_t
	{
		[Token(Token = "0x40007A7")]
		public const int k_iCallback = 3401;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UGCQueryHandle_t m_handle;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unNumResultsReturned;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unTotalMatchingResults;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x2000174")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F430", Offset = "0x97F430")]
	public struct SteamUGCRequestUGCDetailsResult_t
	{
		[Token(Token = "0x40007AD")]
		public const int k_iCallback = 3402;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamUGCDetails_t m_details;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x2000175")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F444", Offset = "0x97F444")]
	public struct CreateItemResult_t
	{
		[Token(Token = "0x40007B0")]
		public const int k_iCallback = 3403;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000176")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F458", Offset = "0x97F458")]
	public struct SubmitItemUpdateResult_t
	{
		[Token(Token = "0x40007B4")]
		public const int k_iCallback = 3404;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000177")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F46C", Offset = "0x97F46C")]
	public struct ItemInstalled_t
	{
		[Token(Token = "0x40007B7")]
		public const int k_iCallback = 3405;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000178")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F480", Offset = "0x97F480")]
	public struct DownloadItemResult_t
	{
		[Token(Token = "0x40007BA")]
		public const int k_iCallback = 3406;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000179")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F494", Offset = "0x97F494")]
	public struct UserFavoriteItemsListChanged_t
	{
		[Token(Token = "0x40007BE")]
		public const int k_iCallback = 3407;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bWasAddRequest;
	}
	[Token(Token = "0x200017A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F4A8", Offset = "0x97F4A8")]
	public struct SetUserItemVoteResult_t
	{
		[Token(Token = "0x40007C2")]
		public const int k_iCallback = 3408;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVoteUp;
	}
	[Token(Token = "0x200017B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F4BC", Offset = "0x97F4BC")]
	public struct GetUserItemVoteResult_t
	{
		[Token(Token = "0x40007C6")]
		public const int k_iCallback = 3409;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVotedUp;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool m_bVotedDown;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool m_bVoteSkipped;
	}
	[Token(Token = "0x200017C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F4D0", Offset = "0x97F4D0")]
	public struct StartPlaytimeTrackingResult_t
	{
		[Token(Token = "0x40007CC")]
		public const int k_iCallback = 3410;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200017D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F4E4", Offset = "0x97F4E4")]
	public struct StopPlaytimeTrackingResult_t
	{
		[Token(Token = "0x40007CE")]
		public const int k_iCallback = 3411;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200017E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F4F8", Offset = "0x97F4F8")]
	public struct AddUGCDependencyResult_t
	{
		[Token(Token = "0x40007D0")]
		public const int k_iCallback = 3412;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t m_nChildPublishedFileId;
	}
	[Token(Token = "0x200017F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F50C", Offset = "0x97F50C")]
	public struct RemoveUGCDependencyResult_t
	{
		[Token(Token = "0x40007D4")]
		public const int k_iCallback = 3413;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t m_nChildPublishedFileId;
	}
	[Token(Token = "0x2000180")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F520", Offset = "0x97F520")]
	public struct SteamUnifiedMessagesSendMethodResult_t
	{
		[Token(Token = "0x40007D8")]
		public const int k_iCallback = 2501;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ClientUnifiedMessageHandle m_hHandle;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_unContext;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unResponseSize;
	}
	[Token(Token = "0x2000181")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F534", Offset = "0x97F534")]
	public struct SteamServersConnected_t
	{
		[Token(Token = "0x40007DD")]
		public const int k_iCallback = 101;
	}
	[Token(Token = "0x2000182")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F548", Offset = "0x97F548")]
	public struct SteamServerConnectFailure_t
	{
		[Token(Token = "0x40007DE")]
		public const int k_iCallback = 102;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bStillRetrying;
	}
	[Token(Token = "0x2000183")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F55C", Offset = "0x97F55C")]
	public struct SteamServersDisconnected_t
	{
		[Token(Token = "0x40007E1")]
		public const int k_iCallback = 103;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000184")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F570", Offset = "0x97F570")]
	public struct ClientGameServerDeny_t
	{
		[Token(Token = "0x40007E3")]
		public const int k_iCallback = 113;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uAppID;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unGameServerIP;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort m_usGameServerPort;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort m_bSecure;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uReason;
	}
	[Token(Token = "0x2000185")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F584", Offset = "0x97F584")]
	public struct IPCFailure_t
	{
		[Token(Token = "0x40007E9")]
		public const int k_iCallback = 117;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_eFailureType;
	}
	[Token(Token = "0x2000186")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F598", Offset = "0x97F598")]
	public struct LicensesUpdated_t
	{
		[Token(Token = "0x40007EB")]
		public const int k_iCallback = 125;
	}
	[Token(Token = "0x2000187")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F5AC", Offset = "0x97F5AC")]
	public struct ValidateAuthTicketResponse_t
	{
		[Token(Token = "0x40007EC")]
		public const int k_iCallback = 143;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EAuthSessionResponse m_eAuthSessionResponse;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x2000188")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F5C0", Offset = "0x97F5C0")]
	public struct MicroTxnAuthorizationResponse_t
	{
		[Token(Token = "0x40007F0")]
		public const int k_iCallback = 152;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_unAppID;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulOrderID;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bAuthorized;
	}
	[Token(Token = "0x2000189")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F5D4", Offset = "0x97F5D4")]
	public struct EncryptedAppTicketResponse_t
	{
		[Token(Token = "0x40007F4")]
		public const int k_iCallback = 154;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200018A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F5E8", Offset = "0x97F5E8")]
	public struct GetAuthSessionTicketResponse_t
	{
		[Token(Token = "0x40007F6")]
		public const int k_iCallback = 163;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HAuthTicket m_hAuthTicket;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200018B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F5FC", Offset = "0x97F5FC")]
	public struct GameWebCallback_t
	{
		[Token(Token = "0x40007F9")]
		public const int k_iCallback = 164;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[Token(Token = "0x200018C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F610", Offset = "0x97F610")]
	public struct StoreAuthURLResponse_t
	{
		[Token(Token = "0x40007FB")]
		public const int k_iCallback = 165;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[StructLayout(2)]
	[Token(Token = "0x200018D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F624", Offset = "0x97F624")]
	public struct UserStatsReceived_t
	{
		[Token(Token = "0x40007FD")]
		public const int k_iCallback = 1101;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x200018E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F638", Offset = "0x97F638")]
	public struct UserStatsStored_t
	{
		[Token(Token = "0x4000801")]
		public const int k_iCallback = 1102;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200018F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F64C", Offset = "0x97F64C")]
	public struct UserAchievementStored_t
	{
		[Token(Token = "0x4000804")]
		public const int k_iCallback = 1103;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bGroupAchievement;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchAchievementName;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nCurProgress;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nMaxProgress;
	}
	[Token(Token = "0x2000190")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F660", Offset = "0x97F660")]
	public struct LeaderboardFindResult_t
	{
		[Token(Token = "0x400080A")]
		public const int k_iCallback = 1104;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_bLeaderboardFound;
	}
	[Token(Token = "0x2000191")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F674", Offset = "0x97F674")]
	public struct LeaderboardScoresDownloaded_t
	{
		[Token(Token = "0x400080D")]
		public const int k_iCallback = 1105;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboardEntries_t m_hSteamLeaderboardEntries;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cEntryCount;
	}
	[Token(Token = "0x2000192")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F688", Offset = "0x97F688")]
	public struct LeaderboardScoreUploaded_t
	{
		[Token(Token = "0x4000811")]
		public const int k_iCallback = 1106;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bScoreChanged;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nGlobalRankNew;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nGlobalRankPrevious;
	}
	[Token(Token = "0x2000193")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F69C", Offset = "0x97F69C")]
	public struct NumberOfCurrentPlayers_t
	{
		[Token(Token = "0x4000818")]
		public const int k_iCallback = 1107;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayers;
	}
	[Token(Token = "0x2000194")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F6B0", Offset = "0x97F6B0")]
	public struct UserStatsUnloaded_t
	{
		[Token(Token = "0x400081B")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000195")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F6C4", Offset = "0x97F6C4")]
	public struct UserAchievementIconFetched_t
	{
		[Token(Token = "0x400081D")]
		public const int k_iCallback = 1109;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_nGameID;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchAchievementName;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bAchieved;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nIconHandle;
	}
	[Token(Token = "0x2000196")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F6D8", Offset = "0x97F6D8")]
	public struct GlobalAchievementPercentagesReady_t
	{
		[Token(Token = "0x4000822")]
		public const int k_iCallback = 1110;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000197")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F6EC", Offset = "0x97F6EC")]
	public struct LeaderboardUGCSet_t
	{
		[Token(Token = "0x4000825")]
		public const int k_iCallback = 1111;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SteamLeaderboard_t m_hSteamLeaderboard;
	}
	[Token(Token = "0x2000198")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F700", Offset = "0x97F700")]
	public struct GlobalStatsReceived_t
	{
		[Token(Token = "0x4000828")]
		public const int k_iCallback = 1112;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000199")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F714", Offset = "0x97F714")]
	public struct IPCountry_t
	{
		[Token(Token = "0x400082B")]
		public const int k_iCallback = 701;
	}
	[Token(Token = "0x200019A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F728", Offset = "0x97F728")]
	public struct LowBatteryPower_t
	{
		[Token(Token = "0x400082C")]
		public const int k_iCallback = 702;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_nMinutesBatteryLeft;
	}
	[Token(Token = "0x200019B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F73C", Offset = "0x97F73C")]
	public struct SteamAPICallCompleted_t
	{
		[Token(Token = "0x400082E")]
		public const int k_iCallback = 703;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hAsyncCall;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iCallback;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_cubParam;
	}
	[Token(Token = "0x200019C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F750", Offset = "0x97F750")]
	public struct SteamShutdown_t
	{
		[Token(Token = "0x4000832")]
		public const int k_iCallback = 704;
	}
	[Token(Token = "0x200019D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F764", Offset = "0x97F764")]
	public struct CheckFileSignature_t
	{
		[Token(Token = "0x4000833")]
		public const int k_iCallback = 705;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ECheckFileSignature m_eCheckFileSignature;
	}
	[Token(Token = "0x200019E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F778", Offset = "0x97F778")]
	public struct GamepadTextInputDismissed_t
	{
		[Token(Token = "0x4000835")]
		public const int k_iCallback = 714;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSubmitted;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unSubmittedText;
	}
	[Token(Token = "0x200019F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F78C", Offset = "0x97F78C")]
	public struct BroadcastUploadStart_t
	{
		[Token(Token = "0x4000838")]
		public const int k_iCallback = 4604;
	}
	[Token(Token = "0x20001A0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F7A0", Offset = "0x97F7A0")]
	public struct BroadcastUploadStop_t
	{
		[Token(Token = "0x4000839")]
		public const int k_iCallback = 4605;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EBroadcastUploadResult m_eResult;
	}
	[Token(Token = "0x20001A1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F7B4", Offset = "0x97F7B4")]
	public struct GetVideoURLResult_t
	{
		[Token(Token = "0x400083B")]
		public const int k_iCallback = 4611;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchURL;
	}
	[Token(Token = "0x20001A2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x97F7C8", Offset = "0x97F7C8")]
	public struct GetOPFSettingsResult_t
	{
		[Token(Token = "0x400083F")]
		public const int k_iCallback = 4624;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;
	}
	[Token(Token = "0x20001A3")]
	public static class Constants
	{
		[Token(Token = "0x4000842")]
		public const string STEAMAPPLIST_INTERFACE_VERSION = "STEAMAPPLIST_INTERFACE_VERSION001";

		[Token(Token = "0x4000843")]
		public const string STEAMAPPS_INTERFACE_VERSION = "STEAMAPPS_INTERFACE_VERSION008";

		[Token(Token = "0x4000844")]
		public const string STEAMAPPTICKET_INTERFACE_VERSION = "STEAMAPPTICKET_INTERFACE_VERSION001";

		[Token(Token = "0x4000845")]
		public const string STEAMCLIENT_INTERFACE_VERSION = "SteamClient017";

		[Token(Token = "0x4000846")]
		public const string STEAMCONTROLLER_INTERFACE_VERSION = "SteamController005";

		[Token(Token = "0x4000847")]
		public const string STEAMFRIENDS_INTERFACE_VERSION = "SteamFriends015";

		[Token(Token = "0x4000848")]
		public const string STEAMGAMECOORDINATOR_INTERFACE_VERSION = "SteamGameCoordinator001";

		[Token(Token = "0x4000849")]
		public const string STEAMGAMESERVER_INTERFACE_VERSION = "SteamGameServer012";

		[Token(Token = "0x400084A")]
		public const string STEAMGAMESERVERSTATS_INTERFACE_VERSION = "SteamGameServerStats001";

		[Token(Token = "0x400084B")]
		public const string STEAMHTMLSURFACE_INTERFACE_VERSION = "STEAMHTMLSURFACE_INTERFACE_VERSION_003";

		[Token(Token = "0x400084C")]
		public const string STEAMHTTP_INTERFACE_VERSION = "STEAMHTTP_INTERFACE_VERSION002";

		[Token(Token = "0x400084D")]
		public const string STEAMINVENTORY_INTERFACE_VERSION = "STEAMINVENTORY_INTERFACE_V002";

		[Token(Token = "0x400084E")]
		public const string STEAMMATCHMAKING_INTERFACE_VERSION = "SteamMatchMaking009";

		[Token(Token = "0x400084F")]
		public const string STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION = "SteamMatchMakingServers002";

		[Token(Token = "0x4000850")]
		public const string STEAMMUSIC_INTERFACE_VERSION = "STEAMMUSIC_INTERFACE_VERSION001";

		[Token(Token = "0x4000851")]
		public const string STEAMMUSICREMOTE_INTERFACE_VERSION = "STEAMMUSICREMOTE_INTERFACE_VERSION001";

		[Token(Token = "0x4000852")]
		public const string STEAMNETWORKING_INTERFACE_VERSION = "SteamNetworking005";

		[Token(Token = "0x4000853")]
		public const string STEAMREMOTESTORAGE_INTERFACE_VERSION = "STEAMREMOTESTORAGE_INTERFACE_VERSION014";

		[Token(Token = "0x4000854")]
		public const string STEAMSCREENSHOTS_INTERFACE_VERSION = "STEAMSCREENSHOTS_INTERFACE_VERSION003";

		[Token(Token = "0x4000855")]
		public const string STEAMUGC_INTERFACE_VERSION = "STEAMUGC_INTERFACE_VERSION010";

		[Token(Token = "0x4000856")]
		public const string STEAMUNIFIEDMESSAGES_INTERFACE_VERSION = "STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001";

		[Token(Token = "0x4000857")]
		public const string STEAMUSER_INTERFACE_VERSION = "SteamUser019";

		[Token(Token = "0x4000858")]
		public const string STEAMUSERSTATS_INTERFACE_VERSION = "STEAMUSERSTATS_INTERFACE_VERSION011";

		[Token(Token = "0x4000859")]
		public const string STEAMUTILS_INTERFACE_VERSION = "SteamUtils009";

		[Token(Token = "0x400085A")]
		public const string STEAMVIDEO_INTERFACE_VERSION = "STEAMVIDEO_INTERFACE_V002";

		[Token(Token = "0x400085B")]
		public const int k_cubAppProofOfPurchaseKeyMax = 240;

		[Token(Token = "0x400085C")]
		public const int k_iSteamUserCallbacks = 100;

		[Token(Token = "0x400085D")]
		public const int k_iSteamGameServerCallbacks = 200;

		[Token(Token = "0x400085E")]
		public const int k_iSteamFriendsCallbacks = 300;

		[Token(Token = "0x400085F")]
		public const int k_iSteamBillingCallbacks = 400;

		[Token(Token = "0x4000860")]
		public const int k_iSteamMatchmakingCallbacks = 500;

		[Token(Token = "0x4000861")]
		public const int k_iSteamContentServerCallbacks = 600;

		[Token(Token = "0x4000862")]
		public const int k_iSteamUtilsCallbacks = 700;

		[Token(Token = "0x4000863")]
		public const int k_iClientFriendsCallbacks = 800;

		[Token(Token = "0x4000864")]
		public const int k_iClientUserCallbacks = 900;

		[Token(Token = "0x4000865")]
		public const int k_iSteamAppsCallbacks = 1000;

		[Token(Token = "0x4000866")]
		public const int k_iSteamUserStatsCallbacks = 1100;

		[Token(Token = "0x4000867")]
		public const int k_iSteamNetworkingCallbacks = 1200;

		[Token(Token = "0x4000868")]
		public const int k_iClientRemoteStorageCallbacks = 1300;

		[Token(Token = "0x4000869")]
		public const int k_iClientDepotBuilderCallbacks = 1400;

		[Token(Token = "0x400086A")]
		public const int k_iSteamGameServerItemsCallbacks = 1500;

		[Token(Token = "0x400086B")]
		public const int k_iClientUtilsCallbacks = 1600;

		[Token(Token = "0x400086C")]
		public const int k_iSteamGameCoordinatorCallbacks = 1700;

		[Token(Token = "0x400086D")]
		public const int k_iSteamGameServerStatsCallbacks = 1800;

		[Token(Token = "0x400086E")]
		public const int k_iSteam2AsyncCallbacks = 1900;

		[Token(Token = "0x400086F")]
		public const int k_iSteamGameStatsCallbacks = 2000;

		[Token(Token = "0x4000870")]
		public const int k_iClientHTTPCallbacks = 2100;

		[Token(Token = "0x4000871")]
		public const int k_iClientScreenshotsCallbacks = 2200;

		[Token(Token = "0x4000872")]
		public const int k_iSteamScreenshotsCallbacks = 2300;

		[Token(Token = "0x4000873")]
		public const int k_iClientAudioCallbacks = 2400;

		[Token(Token = "0x4000874")]
		public const int k_iClientUnifiedMessagesCallbacks = 2500;

		[Token(Token = "0x4000875")]
		public const int k_iSteamStreamLauncherCallbacks = 2600;

		[Token(Token = "0x4000876")]
		public const int k_iClientControllerCallbacks = 2700;

		[Token(Token = "0x4000877")]
		public const int k_iSteamControllerCallbacks = 2800;

		[Token(Token = "0x4000878")]
		public const int k_iClientParentalSettingsCallbacks = 2900;

		[Token(Token = "0x4000879")]
		public const int k_iClientDeviceAuthCallbacks = 3000;

		[Token(Token = "0x400087A")]
		public const int k_iClientNetworkDeviceManagerCallbacks = 3100;

		[Token(Token = "0x400087B")]
		public const int k_iClientMusicCallbacks = 3200;

		[Token(Token = "0x400087C")]
		public const int k_iClientRemoteClientManagerCallbacks = 3300;

		[Token(Token = "0x400087D")]
		public const int k_iClientUGCCallbacks = 3400;

		[Token(Token = "0x400087E")]
		public const int k_iSteamStreamClientCallbacks = 3500;

		[Token(Token = "0x400087F")]
		public const int k_IClientProductBuilderCallbacks = 3600;

		[Token(Token = "0x4000880")]
		public const int k_iClientShortcutsCallbacks = 3700;

		[Token(Token = "0x4000881")]
		public const int k_iClientRemoteControlManagerCallbacks = 3800;

		[Token(Token = "0x4000882")]
		public const int k_iSteamAppListCallbacks = 3900;

		[Token(Token = "0x4000883")]
		public const int k_iSteamMusicCallbacks = 4000;

		[Token(Token = "0x4000884")]
		public const int k_iSteamMusicRemoteCallbacks = 4100;

		[Token(Token = "0x4000885")]
		public const int k_iClientVRCallbacks = 4200;

		[Token(Token = "0x4000886")]
		public const int k_iClientGameNotificationCallbacks = 4300;

		[Token(Token = "0x4000887")]
		public const int k_iSteamGameNotificationCallbacks = 4400;

		[Token(Token = "0x4000888")]
		public const int k_iSteamHTMLSurfaceCallbacks = 4500;

		[Token(Token = "0x4000889")]
		public const int k_iClientVideoCallbacks = 4600;

		[Token(Token = "0x400088A")]
		public const int k_iClientInventoryCallbacks = 4700;

		[Token(Token = "0x400088B")]
		public const int k_iClientBluetoothManagerCallbacks = 4800;

		[Token(Token = "0x400088C")]
		public const int k_cchMaxFriendsGroupName = 64;

		[Token(Token = "0x400088D")]
		public const int k_cFriendsGroupLimit = 100;

		[Token(Token = "0x400088E")]
		public const int k_cEnumerateFollowersMax = 50;

		[Token(Token = "0x400088F")]
		public const int k_cchPersonaNameMax = 128;

		[Token(Token = "0x4000890")]
		public const int k_cwchPersonaNameMax = 32;

		[Token(Token = "0x4000891")]
		public const int k_cubChatMetadataMax = 8192;

		[Token(Token = "0x4000892")]
		public const int k_cchMaxRichPresenceKeys = 20;

		[Token(Token = "0x4000893")]
		public const int k_cchMaxRichPresenceKeyLength = 64;

		[Token(Token = "0x4000894")]
		public const int k_cchMaxRichPresenceValueLength = 256;

		[Token(Token = "0x4000895")]
		public const int k_unServerFlagNone = 0;

		[Token(Token = "0x4000896")]
		public const int k_unServerFlagActive = 1;

		[Token(Token = "0x4000897")]
		public const int k_unServerFlagSecure = 2;

		[Token(Token = "0x4000898")]
		public const int k_unServerFlagDedicated = 4;

		[Token(Token = "0x4000899")]
		public const int k_unServerFlagLinux = 8;

		[Token(Token = "0x400089A")]
		public const int k_unServerFlagPassworded = 16;

		[Token(Token = "0x400089B")]
		public const int k_unServerFlagPrivate = 32;

		[Token(Token = "0x400089C")]
		public const int k_unFavoriteFlagNone = 0;

		[Token(Token = "0x400089D")]
		public const int k_unFavoriteFlagFavorite = 1;

		[Token(Token = "0x400089E")]
		public const int k_unFavoriteFlagHistory = 2;

		[Token(Token = "0x400089F")]
		public const int k_unMaxCloudFileChunkSize = 104857600;

		[Token(Token = "0x40008A0")]
		public const int k_cchPublishedDocumentTitleMax = 129;

		[Token(Token = "0x40008A1")]
		public const int k_cchPublishedDocumentDescriptionMax = 8000;

		[Token(Token = "0x40008A2")]
		public const int k_cchPublishedDocumentChangeDescriptionMax = 8000;

		[Token(Token = "0x40008A3")]
		public const int k_unEnumeratePublishedFilesMaxResults = 50;

		[Token(Token = "0x40008A4")]
		public const int k_cchTagListMax = 1025;

		[Token(Token = "0x40008A5")]
		public const int k_cchFilenameMax = 260;

		[Token(Token = "0x40008A6")]
		public const int k_cchPublishedFileURLMax = 256;

		[Token(Token = "0x40008A7")]
		public const int k_nScreenshotMaxTaggedUsers = 32;

		[Token(Token = "0x40008A8")]
		public const int k_nScreenshotMaxTaggedPublishedFiles = 32;

		[Token(Token = "0x40008A9")]
		public const int k_cubUFSTagTypeMax = 255;

		[Token(Token = "0x40008AA")]
		public const int k_cubUFSTagValueMax = 255;

		[Token(Token = "0x40008AB")]
		public const int k_ScreenshotThumbWidth = 200;

		[Token(Token = "0x40008AC")]
		public const int kNumUGCResultsPerPage = 50;

		[Token(Token = "0x40008AD")]
		public const int k_cchDeveloperMetadataMax = 5000;

		[Token(Token = "0x40008AE")]
		public const int k_cchStatNameMax = 128;

		[Token(Token = "0x40008AF")]
		public const int k_cchLeaderboardNameMax = 128;

		[Token(Token = "0x40008B0")]
		public const int k_cLeaderboardDetailsMax = 64;

		[Token(Token = "0x40008B1")]
		public const int k_cbMaxGameServerGameDir = 32;

		[Token(Token = "0x40008B2")]
		public const int k_cbMaxGameServerMapName = 32;

		[Token(Token = "0x40008B3")]
		public const int k_cbMaxGameServerGameDescription = 64;

		[Token(Token = "0x40008B4")]
		public const int k_cbMaxGameServerName = 64;

		[Token(Token = "0x40008B5")]
		public const int k_cbMaxGameServerTags = 128;

		[Token(Token = "0x40008B6")]
		public const int k_cbMaxGameServerGameData = 2048;

		[Token(Token = "0x40008B7")]
		public const int k_unSteamAccountIDMask = -1;

		[Token(Token = "0x40008B8")]
		public const int k_unSteamAccountInstanceMask = 1048575;

		[Token(Token = "0x40008B9")]
		public const int k_unSteamUserDesktopInstance = 1;

		[Token(Token = "0x40008BA")]
		public const int k_unSteamUserConsoleInstance = 2;

		[Token(Token = "0x40008BB")]
		public const int k_unSteamUserWebInstance = 4;

		[Token(Token = "0x40008BC")]
		public const int k_cchGameExtraInfoMax = 64;

		[Token(Token = "0x40008BD")]
		public const int k_nSteamEncryptedAppTicketSymmetricKeyLen = 32;

		[Token(Token = "0x40008BE")]
		public const int k_cubSaltSize = 8;

		[Token(Token = "0x40008BF")]
		public const ulong k_GIDNil = ulong.MaxValue;

		[Token(Token = "0x40008C0")]
		public const ulong k_TxnIDNil = ulong.MaxValue;

		[Token(Token = "0x40008C1")]
		public const ulong k_TxnIDUnknown = 0uL;

		[Token(Token = "0x40008C2")]
		public const int k_uPackageIdFreeSub = 0;

		[Token(Token = "0x40008C3")]
		public const int k_uPackageIdInvalid = -1;

		[Token(Token = "0x40008C4")]
		public const ulong k_ulAssetClassIdInvalid = 0uL;

		[Token(Token = "0x40008C5")]
		public const int k_uPhysicalItemIdInvalid = 0;

		[Token(Token = "0x40008C6")]
		public const int k_uCellIDInvalid = -1;

		[Token(Token = "0x40008C7")]
		public const int k_uPartnerIdInvalid = 0;

		[Token(Token = "0x40008C8")]
		public const int STEAM_CONTROLLER_MAX_COUNT = 16;

		[Token(Token = "0x40008C9")]
		public const int STEAM_CONTROLLER_MAX_ANALOG_ACTIONS = 16;

		[Token(Token = "0x40008CA")]
		public const int STEAM_CONTROLLER_MAX_DIGITAL_ACTIONS = 128;

		[Token(Token = "0x40008CB")]
		public const int STEAM_CONTROLLER_MAX_ORIGINS = 8;

		[Token(Token = "0x40008CC")]
		public const ulong STEAM_CONTROLLER_HANDLE_ALL_CONTROLLERS = ulong.MaxValue;

		[Token(Token = "0x40008CD")]
		public const float STEAM_CONTROLLER_MIN_ANALOG_ACTION_DATA = -1f;

		[Token(Token = "0x40008CE")]
		public const float STEAM_CONTROLLER_MAX_ANALOG_ACTION_DATA = 1f;

		[Token(Token = "0x40008CF")]
		public const ushort MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE = ushort.MaxValue;

		[Token(Token = "0x40008D0")]
		public const int INVALID_HTTPREQUEST_HANDLE = 0;

		[Token(Token = "0x40008D1")]
		public const byte k_nMaxLobbyKeyLength = byte.MaxValue;

		[Token(Token = "0x40008D2")]
		public const int k_SteamMusicNameMaxLength = 255;

		[Token(Token = "0x40008D3")]
		public const int k_SteamMusicPNGMaxLength = 65535;

		[Token(Token = "0x40008D4")]
		public const int QUERY_PORT_NOT_INITIALIZED = 65535;

		[Token(Token = "0x40008D5")]
		public const int QUERY_PORT_ERROR = 65534;
	}
	[Token(Token = "0x20001A4")]
	public enum ERegisterActivationCodeResult
	{
		[Token(Token = "0x40008D7")]
		k_ERegisterActivationCodeResultOK,
		[Token(Token = "0x40008D8")]
		k_ERegisterActivationCodeResultFail,
		[Token(Token = "0x40008D9")]
		k_ERegisterActivationCodeResultAlreadyRegistered,
		[Token(Token = "0x40008DA")]
		k_ERegisterActivationCodeResultTimeout,
		[Token(Token = "0x40008DB")]
		k_ERegisterActivationCodeAlreadyOwned
	}
	[Token(Token = "0x20001A5")]
	public enum ESteamControllerPad
	{
		[Token(Token = "0x40008DD")]
		k_ESteamControllerPad_Left,
		[Token(Token = "0x40008DE")]
		k_ESteamControllerPad_Right
	}
	[Token(Token = "0x20001A6")]
	public enum EControllerSource
	{
		[Token(Token = "0x40008E0")]
		k_EControllerSource_None,
		[Token(Token = "0x40008E1")]
		k_EControllerSource_LeftTrackpad,
		[Token(Token = "0x40008E2")]
		k_EControllerSource_RightTrackpad,
		[Token(Token = "0x40008E3")]
		k_EControllerSource_Joystick,
		[Token(Token = "0x40008E4")]
		k_EControllerSource_ABXY,
		[Token(Token = "0x40008E5")]
		k_EControllerSource_Switch,
		[Token(Token = "0x40008E6")]
		k_EControllerSource_LeftTrigger,
		[Token(Token = "0x40008E7")]
		k_EControllerSource_RightTrigger,
		[Token(Token = "0x40008E8")]
		k_EControllerSource_Gyro,
		[Token(Token = "0x40008E9")]
		k_EControllerSource_CenterTrackpad,
		[Token(Token = "0x40008EA")]
		k_EControllerSource_RightJoystick,
		[Token(Token = "0x40008EB")]
		k_EControllerSource_DPad,
		[Token(Token = "0x40008EC")]
		k_EControllerSource_Count
	}
	[Token(Token = "0x20001A7")]
	public enum EControllerSourceMode
	{
		[Token(Token = "0x40008EE")]
		k_EControllerSourceMode_None,
		[Token(Token = "0x40008EF")]
		k_EControllerSourceMode_Dpad,
		[Token(Token = "0x40008F0")]
		k_EControllerSourceMode_Buttons,
		[Token(Token = "0x40008F1")]
		k_EControllerSourceMode_FourButtons,
		[Token(Token = "0x40008F2")]
		k_EControllerSourceMode_AbsoluteMouse,
		[Token(Token = "0x40008F3")]
		k_EControllerSourceMode_RelativeMouse,
		[Token(Token = "0x40008F4")]
		k_EControllerSourceMode_JoystickMove,
		[Token(Token = "0x40008F5")]
		k_EControllerSourceMode_JoystickMouse,
		[Token(Token = "0x40008F6")]
		k_EControllerSourceMode_JoystickCamera,
		[Token(Token = "0x40008F7")]
		k_EControllerSourceMode_ScrollWheel,
		[Token(Token = "0x40008F8")]
		k_EControllerSourceMode_Trigger,
		[Token(Token = "0x40008F9")]
		k_EControllerSourceMode_TouchMenu,
		[Token(Token = "0x40008FA")]
		k_EControllerSourceMode_MouseJoystick,
		[Token(Token = "0x40008FB")]
		k_EControllerSourceMode_MouseRegion,
		[Token(Token = "0x40008FC")]
		k_EControllerSourceMode_RadialMenu,
		[Token(Token = "0x40008FD")]
		k_EControllerSourceMode_SingleButton,
		[Token(Token = "0x40008FE")]
		k_EControllerSourceMode_Switches
	}
	[Token(Token = "0x20001A8")]
	public enum EControllerActionOrigin
	{
		[Token(Token = "0x4000900")]
		k_EControllerActionOrigin_None,
		[Token(Token = "0x4000901")]
		k_EControllerActionOrigin_A,
		[Token(Token = "0x4000902")]
		k_EControllerActionOrigin_B,
		[Token(Token = "0x4000903")]
		k_EControllerActionOrigin_X,
		[Token(Token = "0x4000904")]
		k_EControllerActionOrigin_Y,
		[Token(Token = "0x4000905")]
		k_EControllerActionOrigin_LeftBumper,
		[Token(Token = "0x4000906")]
		k_EControllerActionOrigin_RightBumper,
		[Token(Token = "0x4000907")]
		k_EControllerActionOrigin_LeftGrip,
		[Token(Token = "0x4000908")]
		k_EControllerActionOrigin_RightGrip,
		[Token(Token = "0x4000909")]
		k_EControllerActionOrigin_Start,
		[Token(Token = "0x400090A")]
		k_EControllerActionOrigin_Back,
		[Token(Token = "0x400090B")]
		k_EControllerActionOrigin_LeftPad_Touch,
		[Token(Token = "0x400090C")]
		k_EControllerActionOrigin_LeftPad_Swipe,
		[Token(Token = "0x400090D")]
		k_EControllerActionOrigin_LeftPad_Click,
		[Token(Token = "0x400090E")]
		k_EControllerActionOrigin_LeftPad_DPadNorth,
		[Token(Token = "0x400090F")]
		k_EControllerActionOrigin_LeftPad_DPadSouth,
		[Token(Token = "0x4000910")]
		k_EControllerActionOrigin_LeftPad_DPadWest,
		[Token(Token = "0x4000911")]
		k_EControllerActionOrigin_LeftPad_DPadEast,
		[Token(Token = "0x4000912")]
		k_EControllerActionOrigin_RightPad_Touch,
		[Token(Token = "0x4000913")]
		k_EControllerActionOrigin_RightPad_Swipe,
		[Token(Token = "0x4000914")]
		k_EControllerActionOrigin_RightPad_Click,
		[Token(Token = "0x4000915")]
		k_EControllerActionOrigin_RightPad_DPadNorth,
		[Token(Token = "0x4000916")]
		k_EControllerActionOrigin_RightPad_DPadSouth,
		[Token(Token = "0x4000917")]
		k_EControllerActionOrigin_RightPad_DPadWest,
		[Token(Token = "0x4000918")]
		k_EControllerActionOrigin_RightPad_DPadEast,
		[Token(Token = "0x4000919")]
		k_EControllerActionOrigin_LeftTrigger_Pull,
		[Token(Token = "0x400091A")]
		k_EControllerActionOrigin_LeftTrigger_Click,
		[Token(Token = "0x400091B")]
		k_EControllerActionOrigin_RightTrigger_Pull,
		[Token(Token = "0x400091C")]
		k_EControllerActionOrigin_RightTrigger_Click,
		[Token(Token = "0x400091D")]
		k_EControllerActionOrigin_LeftStick_Move,
		[Token(Token = "0x400091E")]
		k_EControllerActionOrigin_LeftStick_Click,
		[Token(Token = "0x400091F")]
		k_EControllerActionOrigin_LeftStick_DPadNorth,
		[Token(Token = "0x4000920")]
		k_EControllerActionOrigin_LeftStick_DPadSouth,
		[Token(Token = "0x4000921")]
		k_EControllerActionOrigin_LeftStick_DPadWest,
		[Token(Token = "0x4000922")]
		k_EControllerActionOrigin_LeftStick_DPadEast,
		[Token(Token = "0x4000923")]
		k_EControllerActionOrigin_Gyro_Move,
		[Token(Token = "0x4000924")]
		k_EControllerActionOrigin_Gyro_Pitch,
		[Token(Token = "0x4000925")]
		k_EControllerActionOrigin_Gyro_Yaw,
		[Token(Token = "0x4000926")]
		k_EControllerActionOrigin_Gyro_Roll,
		[Token(Token = "0x4000927")]
		k_EControllerActionOrigin_PS4_X,
		[Token(Token = "0x4000928")]
		k_EControllerActionOrigin_PS4_Circle,
		[Token(Token = "0x4000929")]
		k_EControllerActionOrigin_PS4_Triangle,
		[Token(Token = "0x400092A")]
		k_EControllerActionOrigin_PS4_Square,
		[Token(Token = "0x400092B")]
		k_EControllerActionOrigin_PS4_LeftBumper,
		[Token(Token = "0x400092C")]
		k_EControllerActionOrigin_PS4_RightBumper,
		[Token(Token = "0x400092D")]
		k_EControllerActionOrigin_PS4_Options,
		[Token(Token = "0x400092E")]
		k_EControllerActionOrigin_PS4_Share,
		[Token(Token = "0x400092F")]
		k_EControllerActionOrigin_PS4_LeftPad_Touch,
		[Token(Token = "0x4000930")]
		k_EControllerActionOrigin_PS4_LeftPad_Swipe,
		[Token(Token = "0x4000931")]
		k_EControllerActionOrigin_PS4_LeftPad_Click,
		[Token(Token = "0x4000932")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadNorth,
		[Token(Token = "0x4000933")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadSouth,
		[Token(Token = "0x4000934")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadWest,
		[Token(Token = "0x4000935")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadEast,
		[Token(Token = "0x4000936")]
		k_EControllerActionOrigin_PS4_RightPad_Touch,
		[Token(Token = "0x4000937")]
		k_EControllerActionOrigin_PS4_RightPad_Swipe,
		[Token(Token = "0x4000938")]
		k_EControllerActionOrigin_PS4_RightPad_Click,
		[Token(Token = "0x4000939")]
		k_EControllerActionOrigin_PS4_RightPad_DPadNorth,
		[Token(Token = "0x400093A")]
		k_EControllerActionOrigin_PS4_RightPad_DPadSouth,
		[Token(Token = "0x400093B")]
		k_EControllerActionOrigin_PS4_RightPad_DPadWest,
		[Token(Token = "0x400093C")]
		k_EControllerActionOrigin_PS4_RightPad_DPadEast,
		[Token(Token = "0x400093D")]
		k_EControllerActionOrigin_PS4_CenterPad_Touch,
		[Token(Token = "0x400093E")]
		k_EControllerActionOrigin_PS4_CenterPad_Swipe,
		[Token(Token = "0x400093F")]
		k_EControllerActionOrigin_PS4_CenterPad_Click,
		[Token(Token = "0x4000940")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadNorth,
		[Token(Token = "0x4000941")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadSouth,
		[Token(Token = "0x4000942")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadWest,
		[Token(Token = "0x4000943")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadEast,
		[Token(Token = "0x4000944")]
		k_EControllerActionOrigin_PS4_LeftTrigger_Pull,
		[Token(Token = "0x4000945")]
		k_EControllerActionOrigin_PS4_LeftTrigger_Click,
		[Token(Token = "0x4000946")]
		k_EControllerActionOrigin_PS4_RightTrigger_Pull,
		[Token(Token = "0x4000947")]
		k_EControllerActionOrigin_PS4_RightTrigger_Click,
		[Token(Token = "0x4000948")]
		k_EControllerActionOrigin_PS4_LeftStick_Move,
		[Token(Token = "0x4000949")]
		k_EControllerActionOrigin_PS4_LeftStick_Click,
		[Token(Token = "0x400094A")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadNorth,
		[Token(Token = "0x400094B")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadSouth,
		[Token(Token = "0x400094C")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadWest,
		[Token(Token = "0x400094D")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadEast,
		[Token(Token = "0x400094E")]
		k_EControllerActionOrigin_PS4_RightStick_Move,
		[Token(Token = "0x400094F")]
		k_EControllerActionOrigin_PS4_RightStick_Click,
		[Token(Token = "0x4000950")]
		k_EControllerActionOrigin_PS4_RightStick_DPadNorth,
		[Token(Token = "0x4000951")]
		k_EControllerActionOrigin_PS4_RightStick_DPadSouth,
		[Token(Token = "0x4000952")]
		k_EControllerActionOrigin_PS4_RightStick_DPadWest,
		[Token(Token = "0x4000953")]
		k_EControllerActionOrigin_PS4_RightStick_DPadEast,
		[Token(Token = "0x4000954")]
		k_EControllerActionOrigin_PS4_DPad_North,
		[Token(Token = "0x4000955")]
		k_EControllerActionOrigin_PS4_DPad_South,
		[Token(Token = "0x4000956")]
		k_EControllerActionOrigin_PS4_DPad_West,
		[Token(Token = "0x4000957")]
		k_EControllerActionOrigin_PS4_DPad_East,
		[Token(Token = "0x4000958")]
		k_EControllerActionOrigin_PS4_Gyro_Move,
		[Token(Token = "0x4000959")]
		k_EControllerActionOrigin_PS4_Gyro_Pitch,
		[Token(Token = "0x400095A")]
		k_EControllerActionOrigin_PS4_Gyro_Yaw,
		[Token(Token = "0x400095B")]
		k_EControllerActionOrigin_PS4_Gyro_Roll,
		[Token(Token = "0x400095C")]
		k_EControllerActionOrigin_XBoxOne_A,
		[Token(Token = "0x400095D")]
		k_EControllerActionOrigin_XBoxOne_B,
		[Token(Token = "0x400095E")]
		k_EControllerActionOrigin_XBoxOne_X,
		[Token(Token = "0x400095F")]
		k_EControllerActionOrigin_XBoxOne_Y,
		[Token(Token = "0x4000960")]
		k_EControllerActionOrigin_XBoxOne_LeftBumper,
		[Token(Token = "0x4000961")]
		k_EControllerActionOrigin_XBoxOne_RightBumper,
		[Token(Token = "0x4000962")]
		k_EControllerActionOrigin_XBoxOne_Menu,
		[Token(Token = "0x4000963")]
		k_EControllerActionOrigin_XBoxOne_View,
		[Token(Token = "0x4000964")]
		k_EControllerActionOrigin_XBoxOne_LeftTrigger_Pull,
		[Token(Token = "0x4000965")]
		k_EControllerActionOrigin_XBoxOne_LeftTrigger_Click,
		[Token(Token = "0x4000966")]
		k_EControllerActionOrigin_XBoxOne_RightTrigger_Pull,
		[Token(Token = "0x4000967")]
		k_EControllerActionOrigin_XBoxOne_RightTrigger_Click,
		[Token(Token = "0x4000968")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_Move,
		[Token(Token = "0x4000969")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_Click,
		[Token(Token = "0x400096A")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadNorth,
		[Token(Token = "0x400096B")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadSouth,
		[Token(Token = "0x400096C")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadWest,
		[Token(Token = "0x400096D")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadEast,
		[Token(Token = "0x400096E")]
		k_EControllerActionOrigin_XBoxOne_RightStick_Move,
		[Token(Token = "0x400096F")]
		k_EControllerActionOrigin_XBoxOne_RightStick_Click,
		[Token(Token = "0x4000970")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadNorth,
		[Token(Token = "0x4000971")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadSouth,
		[Token(Token = "0x4000972")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadWest,
		[Token(Token = "0x4000973")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadEast,
		[Token(Token = "0x4000974")]
		k_EControllerActionOrigin_XBoxOne_DPad_North,
		[Token(Token = "0x4000975")]
		k_EControllerActionOrigin_XBoxOne_DPad_South,
		[Token(Token = "0x4000976")]
		k_EControllerActionOrigin_XBoxOne_DPad_West,
		[Token(Token = "0x4000977")]
		k_EControllerActionOrigin_XBoxOne_DPad_East,
		[Token(Token = "0x4000978")]
		k_EControllerActionOrigin_XBox360_A,
		[Token(Token = "0x4000979")]
		k_EControllerActionOrigin_XBox360_B,
		[Token(Token = "0x400097A")]
		k_EControllerActionOrigin_XBox360_X,
		[Token(Token = "0x400097B")]
		k_EControllerActionOrigin_XBox360_Y,
		[Token(Token = "0x400097C")]
		k_EControllerActionOrigin_XBox360_LeftBumper,
		[Token(Token = "0x400097D")]
		k_EControllerActionOrigin_XBox360_RightBumper,
		[Token(Token = "0x400097E")]
		k_EControllerActionOrigin_XBox360_Start,
		[Token(Token = "0x400097F")]
		k_EControllerActionOrigin_XBox360_Back,
		[Token(Token = "0x4000980")]
		k_EControllerActionOrigin_XBox360_LeftTrigger_Pull,
		[Token(Token = "0x4000981")]
		k_EControllerActionOrigin_XBox360_LeftTrigger_Click,
		[Token(Token = "0x4000982")]
		k_EControllerActionOrigin_XBox360_RightTrigger_Pull,
		[Token(Token = "0x4000983")]
		k_EControllerActionOrigin_XBox360_RightTrigger_Click,
		[Token(Token = "0x4000984")]
		k_EControllerActionOrigin_XBox360_LeftStick_Move,
		[Token(Token = "0x4000985")]
		k_EControllerActionOrigin_XBox360_LeftStick_Click,
		[Token(Token = "0x4000986")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadNorth,
		[Token(Token = "0x4000987")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadSouth,
		[Token(Token = "0x4000988")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadWest,
		[Token(Token = "0x4000989")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadEast,
		[Token(Token = "0x400098A")]
		k_EControllerActionOrigin_XBox360_RightStick_Move,
		[Token(Token = "0x400098B")]
		k_EControllerActionOrigin_XBox360_RightStick_Click,
		[Token(Token = "0x400098C")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadNorth,
		[Token(Token = "0x400098D")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadSouth,
		[Token(Token = "0x400098E")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadWest,
		[Token(Token = "0x400098F")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadEast,
		[Token(Token = "0x4000990")]
		k_EControllerActionOrigin_XBox360_DPad_North,
		[Token(Token = "0x4000991")]
		k_EControllerActionOrigin_XBox360_DPad_South,
		[Token(Token = "0x4000992")]
		k_EControllerActionOrigin_XBox360_DPad_West,
		[Token(Token = "0x4000993")]
		k_EControllerActionOrigin_XBox360_DPad_East,
		[Token(Token = "0x4000994")]
		k_EControllerActionOrigin_SteamV2_A,
		[Token(Token = "0x4000995")]
		k_EControllerActionOrigin_SteamV2_B,
		[Token(Token = "0x4000996")]
		k_EControllerActionOrigin_SteamV2_X,
		[Token(Token = "0x4000997")]
		k_EControllerActionOrigin_SteamV2_Y,
		[Token(Token = "0x4000998")]
		k_EControllerActionOrigin_SteamV2_LeftBumper,
		[Token(Token = "0x4000999")]
		k_EControllerActionOrigin_SteamV2_RightBumper,
		[Token(Token = "0x400099A")]
		k_EControllerActionOrigin_SteamV2_LeftGrip,
		[Token(Token = "0x400099B")]
		k_EControllerActionOrigin_SteamV2_RightGrip,
		[Token(Token = "0x400099C")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Upper,
		[Token(Token = "0x400099D")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Upper,
		[Token(Token = "0x400099E")]
		k_EControllerActionOrigin_SteamV2_LeftBumper_Pressure,
		[Token(Token = "0x400099F")]
		k_EControllerActionOrigin_SteamV2_RightBumper_Pressure,
		[Token(Token = "0x40009A0")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Pressure,
		[Token(Token = "0x40009A1")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Pressure,
		[Token(Token = "0x40009A2")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Upper_Pressure,
		[Token(Token = "0x40009A3")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Upper_Pressure,
		[Token(Token = "0x40009A4")]
		k_EControllerActionOrigin_SteamV2_Start,
		[Token(Token = "0x40009A5")]
		k_EControllerActionOrigin_SteamV2_Back,
		[Token(Token = "0x40009A6")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Touch,
		[Token(Token = "0x40009A7")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Swipe,
		[Token(Token = "0x40009A8")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Click,
		[Token(Token = "0x40009A9")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Pressure,
		[Token(Token = "0x40009AA")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadNorth,
		[Token(Token = "0x40009AB")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadSouth,
		[Token(Token = "0x40009AC")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadWest,
		[Token(Token = "0x40009AD")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadEast,
		[Token(Token = "0x40009AE")]
		k_EControllerActionOrigin_SteamV2_RightPad_Touch,
		[Token(Token = "0x40009AF")]
		k_EControllerActionOrigin_SteamV2_RightPad_Swipe,
		[Token(Token = "0x40009B0")]
		k_EControllerActionOrigin_SteamV2_RightPad_Click,
		[Token(Token = "0x40009B1")]
		k_EControllerActionOrigin_SteamV2_RightPad_Pressure,
		[Token(Token = "0x40009B2")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadNorth,
		[Token(Token = "0x40009B3")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadSouth,
		[Token(Token = "0x40009B4")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadWest,
		[Token(Token = "0x40009B5")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadEast,
		[Token(Token = "0x40009B6")]
		k_EControllerActionOrigin_SteamV2_LeftTrigger_Pull,
		[Token(Token = "0x40009B7")]
		k_EControllerActionOrigin_SteamV2_LeftTrigger_Click,
		[Token(Token = "0x40009B8")]
		k_EControllerActionOrigin_SteamV2_RightTrigger_Pull,
		[Token(Token = "0x40009B9")]
		k_EControllerActionOrigin_SteamV2_RightTrigger_Click,
		[Token(Token = "0x40009BA")]
		k_EControllerActionOrigin_SteamV2_LeftStick_Move,
		[Token(Token = "0x40009BB")]
		k_EControllerActionOrigin_SteamV2_LeftStick_Click,
		[Token(Token = "0x40009BC")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadNorth,
		[Token(Token = "0x40009BD")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadSouth,
		[Token(Token = "0x40009BE")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadWest,
		[Token(Token = "0x40009BF")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadEast,
		[Token(Token = "0x40009C0")]
		k_EControllerActionOrigin_SteamV2_Gyro_Move,
		[Token(Token = "0x40009C1")]
		k_EControllerActionOrigin_SteamV2_Gyro_Pitch,
		[Token(Token = "0x40009C2")]
		k_EControllerActionOrigin_SteamV2_Gyro_Yaw,
		[Token(Token = "0x40009C3")]
		k_EControllerActionOrigin_SteamV2_Gyro_Roll,
		[Token(Token = "0x40009C4")]
		k_EControllerActionOrigin_Count
	}
	[Token(Token = "0x20001A9")]
	public enum ESteamControllerLEDFlag
	{
		[Token(Token = "0x40009C6")]
		k_ESteamControllerLEDFlag_SetColor,
		[Token(Token = "0x40009C7")]
		k_ESteamControllerLEDFlag_RestoreUserDefault
	}
	[Token(Token = "0x20001AA")]
	public enum EFriendRelationship
	{
		[Token(Token = "0x40009C9")]
		k_EFriendRelationshipNone,
		[Token(Token = "0x40009CA")]
		k_EFriendRelationshipBlocked,
		[Token(Token = "0x40009CB")]
		k_EFriendRelationshipRequestRecipient,
		[Token(Token = "0x40009CC")]
		k_EFriendRelationshipFriend,
		[Token(Token = "0x40009CD")]
		k_EFriendRelationshipRequestInitiator,
		[Token(Token = "0x40009CE")]
		k_EFriendRelationshipIgnored,
		[Token(Token = "0x40009CF")]
		k_EFriendRelationshipIgnoredFriend,
		[Token(Token = "0x40009D0")]
		k_EFriendRelationshipSuggested_DEPRECATED,
		[Token(Token = "0x40009D1")]
		k_EFriendRelationshipMax
	}
	[Token(Token = "0x20001AB")]
	public enum EPersonaState
	{
		[Token(Token = "0x40009D3")]
		k_EPersonaStateOffline,
		[Token(Token = "0x40009D4")]
		k_EPersonaStateOnline,
		[Token(Token = "0x40009D5")]
		k_EPersonaStateBusy,
		[Token(Token = "0x40009D6")]
		k_EPersonaStateAway,
		[Token(Token = "0x40009D7")]
		k_EPersonaStateSnooze,
		[Token(Token = "0x40009D8")]
		k_EPersonaStateLookingToTrade,
		[Token(Token = "0x40009D9")]
		k_EPersonaStateLookingToPlay,
		[Token(Token = "0x40009DA")]
		k_EPersonaStateMax
	}
	[Token(Token = "0x20001AC")]
	[Flags]
	public enum EFriendFlags
	{
		[Token(Token = "0x40009DC")]
		k_EFriendFlagNone = 0,
		[Token(Token = "0x40009DD")]
		k_EFriendFlagBlocked = 1,
		[Token(Token = "0x40009DE")]
		k_EFriendFlagFriendshipRequested = 2,
		[Token(Token = "0x40009DF")]
		k_EFriendFlagImmediate = 4,
		[Token(Token = "0x40009E0")]
		k_EFriendFlagClanMember = 8,
		[Token(Token = "0x40009E1")]
		k_EFriendFlagOnGameServer = 0x10,
		[Token(Token = "0x40009E2")]
		k_EFriendFlagRequestingFriendship = 0x80,
		[Token(Token = "0x40009E3")]
		k_EFriendFlagRequestingInfo = 0x100,
		[Token(Token = "0x40009E4")]
		k_EFriendFlagIgnored = 0x200,
		[Token(Token = "0x40009E5")]
		k_EFriendFlagIgnoredFriend = 0x400,
		[Token(Token = "0x40009E6")]
		k_EFriendFlagChatMember = 0x1000,
		[Token(Token = "0x40009E7")]
		k_EFriendFlagAll = 0xFFFF
	}
	[Token(Token = "0x20001AD")]
	public enum EUserRestriction
	{
		[Token(Token = "0x40009E9")]
		k_nUserRestrictionNone = 0,
		[Token(Token = "0x40009EA")]
		k_nUserRestrictionUnknown = 1,
		[Token(Token = "0x40009EB")]
		k_nUserRestrictionAnyChat = 2,
		[Token(Token = "0x40009EC")]
		k_nUserRestrictionVoiceChat = 4,
		[Token(Token = "0x40009ED")]
		k_nUserRestrictionGroupChat = 8,
		[Token(Token = "0x40009EE")]
		k_nUserRestrictionRating = 0x10,
		[Token(Token = "0x40009EF")]
		k_nUserRestrictionGameInvites = 0x20,
		[Token(Token = "0x40009F0")]
		k_nUserRestrictionTrading = 0x40
	}
	[Token(Token = "0x20001AE")]
	public enum EOverlayToStoreFlag
	{
		[Token(Token = "0x40009F2")]
		k_EOverlayToStoreFlag_None,
		[Token(Token = "0x40009F3")]
		k_EOverlayToStoreFlag_AddToCart,
		[Token(Token = "0x40009F4")]
		k_EOverlayToStoreFlag_AddToCartAndShow
	}
	[Token(Token = "0x20001AF")]
	[Flags]
	public enum EPersonaChange
	{
		[Token(Token = "0x40009F6")]
		k_EPersonaChangeName = 1,
		[Token(Token = "0x40009F7")]
		k_EPersonaChangeStatus = 2,
		[Token(Token = "0x40009F8")]
		k_EPersonaChangeComeOnline = 4,
		[Token(Token = "0x40009F9")]
		k_EPersonaChangeGoneOffline = 8,
		[Token(Token = "0x40009FA")]
		k_EPersonaChangeGamePlayed = 0x10,
		[Token(Token = "0x40009FB")]
		k_EPersonaChangeGameServer = 0x20,
		[Token(Token = "0x40009FC")]
		k_EPersonaChangeAvatar = 0x40,
		[Token(Token = "0x40009FD")]
		k_EPersonaChangeJoinedSource = 0x80,
		[Token(Token = "0x40009FE")]
		k_EPersonaChangeLeftSource = 0x100,
		[Token(Token = "0x40009FF")]
		k_EPersonaChangeRelationshipChanged = 0x200,
		[Token(Token = "0x4000A00")]
		k_EPersonaChangeNameFirstSet = 0x400,
		[Token(Token = "0x4000A01")]
		k_EPersonaChangeFacebookInfo = 0x800,
		[Token(Token = "0x4000A02")]
		k_EPersonaChangeNickname = 0x1000,
		[Token(Token = "0x4000A03")]
		k_EPersonaChangeSteamLevel = 0x2000
	}
	[Token(Token = "0x20001B0")]
	public enum EGCResults
	{
		[Token(Token = "0x4000A05")]
		k_EGCResultOK,
		[Token(Token = "0x4000A06")]
		k_EGCResultNoMessage,
		[Token(Token = "0x4000A07")]
		k_EGCResultBufferTooSmall,
		[Token(Token = "0x4000A08")]
		k_EGCResultNotLoggedOn,
		[Token(Token = "0x4000A09")]
		k_EGCResultInvalidMessage
	}
	[Token(Token = "0x20001B1")]
	public enum EHTMLMouseButton
	{
		[Token(Token = "0x4000A0B")]
		eHTMLMouseButton_Left,
		[Token(Token = "0x4000A0C")]
		eHTMLMouseButton_Right,
		[Token(Token = "0x4000A0D")]
		eHTMLMouseButton_Middle
	}
	[Token(Token = "0x20001B2")]
	public enum EMouseCursor
	{
		[Token(Token = "0x4000A0F")]
		dc_user,
		[Token(Token = "0x4000A10")]
		dc_none,
		[Token(Token = "0x4000A11")]
		dc_arrow,
		[Token(Token = "0x4000A12")]
		dc_ibeam,
		[Token(Token = "0x4000A13")]
		dc_hourglass,
		[Token(Token = "0x4000A14")]
		dc_waitarrow,
		[Token(Token = "0x4000A15")]
		dc_crosshair,
		[Token(Token = "0x4000A16")]
		dc_up,
		[Token(Token = "0x4000A17")]
		dc_sizenw,
		[Token(Token = "0x4000A18")]
		dc_sizese,
		[Token(Token = "0x4000A19")]
		dc_sizene,
		[Token(Token = "0x4000A1A")]
		dc_sizesw,
		[Token(Token = "0x4000A1B")]
		dc_sizew,
		[Token(Token = "0x4000A1C")]
		dc_sizee,
		[Token(Token = "0x4000A1D")]
		dc_sizen,
		[Token(Token = "0x4000A1E")]
		dc_sizes,
		[Token(Token = "0x4000A1F")]
		dc_sizewe,
		[Token(Token = "0x4000A20")]
		dc_sizens,
		[Token(Token = "0x4000A21")]
		dc_sizeall,
		[Token(Token = "0x4000A22")]
		dc_no,
		[Token(Token = "0x4000A23")]
		dc_hand,
		[Token(Token = "0x4000A24")]
		dc_blank,
		[Token(Token = "0x4000A25")]
		dc_middle_pan,
		[Token(Token = "0x4000A26")]
		dc_north_pan,
		[Token(Token = "0x4000A27")]
		dc_north_east_pan,
		[Token(Token = "0x4000A28")]
		dc_east_pan,
		[Token(Token = "0x4000A29")]
		dc_south_east_pan,
		[Token(Token = "0x4000A2A")]
		dc_south_pan,
		[Token(Token = "0x4000A2B")]
		dc_south_west_pan,
		[Token(Token = "0x4000A2C")]
		dc_west_pan,
		[Token(Token = "0x4000A2D")]
		dc_north_west_pan,
		[Token(Token = "0x4000A2E")]
		dc_alias,
		[Token(Token = "0x4000A2F")]
		dc_cell,
		[Token(Token = "0x4000A30")]
		dc_colresize,
		[Token(Token = "0x4000A31")]
		dc_copycur,
		[Token(Token = "0x4000A32")]
		dc_verticaltext,
		[Token(Token = "0x4000A33")]
		dc_rowresize,
		[Token(Token = "0x4000A34")]
		dc_zoomin,
		[Token(Token = "0x4000A35")]
		dc_zoomout,
		[Token(Token = "0x4000A36")]
		dc_help,
		[Token(Token = "0x4000A37")]
		dc_custom,
		[Token(Token = "0x4000A38")]
		dc_last
	}
	[Token(Token = "0x20001B3")]
	[Flags]
	public enum EHTMLKeyModifiers
	{
		[Token(Token = "0x4000A3A")]
		k_eHTMLKeyModifier_None = 0,
		[Token(Token = "0x4000A3B")]
		k_eHTMLKeyModifier_AltDown = 1,
		[Token(Token = "0x4000A3C")]
		k_eHTMLKeyModifier_CtrlDown = 2,
		[Token(Token = "0x4000A3D")]
		k_eHTMLKeyModifier_ShiftDown = 4
	}
	[Token(Token = "0x20001B4")]
	[Flags]
	public enum ESteamItemFlags
	{
		[Token(Token = "0x4000A3F")]
		k_ESteamItemNoTrade = 1,
		[Token(Token = "0x4000A40")]
		k_ESteamItemRemoved = 0x100,
		[Token(Token = "0x4000A41")]
		k_ESteamItemConsumed = 0x200
	}
	[Token(Token = "0x20001B5")]
	public enum ELobbyType
	{
		[Token(Token = "0x4000A43")]
		k_ELobbyTypePrivate,
		[Token(Token = "0x4000A44")]
		k_ELobbyTypeFriendsOnly,
		[Token(Token = "0x4000A45")]
		k_ELobbyTypePublic,
		[Token(Token = "0x4000A46")]
		k_ELobbyTypeInvisible
	}
	[Token(Token = "0x20001B6")]
	public enum ELobbyComparison
	{
		[Token(Token = "0x4000A48")]
		k_ELobbyComparisonEqualToOrLessThan = -2,
		[Token(Token = "0x4000A49")]
		k_ELobbyComparisonLessThan,
		[Token(Token = "0x4000A4A")]
		k_ELobbyComparisonEqual,
		[Token(Token = "0x4000A4B")]
		k_ELobbyComparisonGreaterThan,
		[Token(Token = "0x4000A4C")]
		k_ELobbyComparisonEqualToOrGreaterThan,
		[Token(Token = "0x4000A4D")]
		k_ELobbyComparisonNotEqual
	}
	[Token(Token = "0x20001B7")]
	public enum ELobbyDistanceFilter
	{
		[Token(Token = "0x4000A4F")]
		k_ELobbyDistanceFilterClose,
		[Token(Token = "0x4000A50")]
		k_ELobbyDistanceFilterDefault,
		[Token(Token = "0x4000A51")]
		k_ELobbyDistanceFilterFar,
		[Token(Token = "0x4000A52")]
		k_ELobbyDistanceFilterWorldwide
	}
	[Token(Token = "0x20001B8")]
	[Flags]
	public enum EChatMemberStateChange
	{
		[Token(Token = "0x4000A54")]
		k_EChatMemberStateChangeEntered = 1,
		[Token(Token = "0x4000A55")]
		k_EChatMemberStateChangeLeft = 2,
		[Token(Token = "0x4000A56")]
		k_EChatMemberStateChangeDisconnected = 4,
		[Token(Token = "0x4000A57")]
		k_EChatMemberStateChangeKicked = 8,
		[Token(Token = "0x4000A58")]
		k_EChatMemberStateChangeBanned = 0x10
	}
	[Token(Token = "0x20001B9")]
	public enum AudioPlayback_Status
	{
		[Token(Token = "0x4000A5A")]
		AudioPlayback_Undefined,
		[Token(Token = "0x4000A5B")]
		AudioPlayback_Playing,
		[Token(Token = "0x4000A5C")]
		AudioPlayback_Paused,
		[Token(Token = "0x4000A5D")]
		AudioPlayback_Idle
	}
	[Token(Token = "0x20001BA")]
	public enum EP2PSessionError
	{
		[Token(Token = "0x4000A5F")]
		k_EP2PSessionErrorNone,
		[Token(Token = "0x4000A60")]
		k_EP2PSessionErrorNotRunningApp,
		[Token(Token = "0x4000A61")]
		k_EP2PSessionErrorNoRightsToApp,
		[Token(Token = "0x4000A62")]
		k_EP2PSessionErrorDestinationNotLoggedIn,
		[Token(Token = "0x4000A63")]
		k_EP2PSessionErrorTimeout,
		[Token(Token = "0x4000A64")]
		k_EP2PSessionErrorMax
	}
	[Token(Token = "0x20001BB")]
	public enum EP2PSend
	{
		[Token(Token = "0x4000A66")]
		k_EP2PSendUnreliable,
		[Token(Token = "0x4000A67")]
		k_EP2PSendUnreliableNoDelay,
		[Token(Token = "0x4000A68")]
		k_EP2PSendReliable,
		[Token(Token = "0x4000A69")]
		k_EP2PSendReliableWithBuffering
	}
	[Token(Token = "0x20001BC")]
	public enum ESNetSocketState
	{
		[Token(Token = "0x4000A6B")]
		k_ESNetSocketStateInvalid = 0,
		[Token(Token = "0x4000A6C")]
		k_ESNetSocketStateConnected = 1,
		[Token(Token = "0x4000A6D")]
		k_ESNetSocketStateInitiated = 10,
		[Token(Token = "0x4000A6E")]
		k_ESNetSocketStateLocalCandidatesFound = 11,
		[Token(Token = "0x4000A6F")]
		k_ESNetSocketStateReceivedRemoteCandidates = 12,
		[Token(Token = "0x4000A70")]
		k_ESNetSocketStateChallengeHandshake = 15,
		[Token(Token = "0x4000A71")]
		k_ESNetSocketStateDisconnecting = 21,
		[Token(Token = "0x4000A72")]
		k_ESNetSocketStateLocalDisconnect = 22,
		[Token(Token = "0x4000A73")]
		k_ESNetSocketStateTimeoutDuringConnect = 23,
		[Token(Token = "0x4000A74")]
		k_ESNetSocketStateRemoteEndDisconnected = 24,
		[Token(Token = "0x4000A75")]
		k_ESNetSocketStateConnectionBroken = 25
	}
	[Token(Token = "0x20001BD")]
	public enum ESNetSocketConnectionType
	{
		[Token(Token = "0x4000A77")]
		k_ESNetSocketConnectionTypeNotConnected,
		[Token(Token = "0x4000A78")]
		k_ESNetSocketConnectionTypeUDP,
		[Token(Token = "0x4000A79")]
		k_ESNetSocketConnectionTypeUDPRelay
	}
	[Token(Token = "0x20001BE")]
	[Flags]
	public enum ERemoteStoragePlatform
	{
		[Token(Token = "0x4000A7B")]
		k_ERemoteStoragePlatformNone = 0,
		[Token(Token = "0x4000A7C")]
		k_ERemoteStoragePlatformWindows = 1,
		[Token(Token = "0x4000A7D")]
		k_ERemoteStoragePlatformOSX = 2,
		[Token(Token = "0x4000A7E")]
		k_ERemoteStoragePlatformPS3 = 4,
		[Token(Token = "0x4000A7F")]
		k_ERemoteStoragePlatformLinux = 8,
		[Token(Token = "0x4000A80")]
		k_ERemoteStoragePlatformReserved2 = 0x10,
		[Token(Token = "0x4000A81")]
		k_ERemoteStoragePlatformAll = -1
	}
	[Token(Token = "0x20001BF")]
	public enum ERemoteStoragePublishedFileVisibility
	{
		[Token(Token = "0x4000A83")]
		k_ERemoteStoragePublishedFileVisibilityPublic,
		[Token(Token = "0x4000A84")]
		k_ERemoteStoragePublishedFileVisibilityFriendsOnly,
		[Token(Token = "0x4000A85")]
		k_ERemoteStoragePublishedFileVisibilityPrivate
	}
	[Token(Token = "0x20001C0")]
	public enum EWorkshopFileType
	{
		[Token(Token = "0x4000A87")]
		k_EWorkshopFileTypeFirst = 0,
		[Token(Token = "0x4000A88")]
		k_EWorkshopFileTypeCommunity = 0,
		[Token(Token = "0x4000A89")]
		k_EWorkshopFileTypeMicrotransaction = 1,
		[Token(Token = "0x4000A8A")]
		k_EWorkshopFileTypeCollection = 2,
		[Token(Token = "0x4000A8B")]
		k_EWorkshopFileTypeArt = 3,
		[Token(Token = "0x4000A8C")]
		k_EWorkshopFileTypeVideo = 4,
		[Token(Token = "0x4000A8D")]
		k_EWorkshopFileTypeScreenshot = 5,
		[Token(Token = "0x4000A8E")]
		k_EWorkshopFileTypeGame = 6,
		[Token(Token = "0x4000A8F")]
		k_EWorkshopFileTypeSoftware = 7,
		[Token(Token = "0x4000A90")]
		k_EWorkshopFileTypeConcept = 8,
		[Token(Token = "0x4000A91")]
		k_EWorkshopFileTypeWebGuide = 9,
		[Token(Token = "0x4000A92")]
		k_EWorkshopFileTypeIntegratedGuide = 10,
		[Token(Token = "0x4000A93")]
		k_EWorkshopFileTypeMerch = 11,
		[Token(Token = "0x4000A94")]
		k_EWorkshopFileTypeControllerBinding = 12,
		[Token(Token = "0x4000A95")]
		k_EWorkshopFileTypeSteamworksAccessInvite = 13,
		[Token(Token = "0x4000A96")]
		k_EWorkshopFileTypeSteamVideo = 14,
		[Token(Token = "0x4000A97")]
		k_EWorkshopFileTypeGameManagedItem = 15,
		[Token(Token = "0x4000A98")]
		k_EWorkshopFileTypeMax = 16
	}
	[Token(Token = "0x20001C1")]
	public enum EWorkshopVote
	{
		[Token(Token = "0x4000A9A")]
		k_EWorkshopVoteUnvoted,
		[Token(Token = "0x4000A9B")]
		k_EWorkshopVoteFor,
		[Token(Token = "0x4000A9C")]
		k_EWorkshopVoteAgainst,
		[Token(Token = "0x4000A9D")]
		k_EWorkshopVoteLater
	}
	[Token(Token = "0x20001C2")]
	public enum EWorkshopFileAction
	{
		[Token(Token = "0x4000A9F")]
		k_EWorkshopFileActionPlayed,
		[Token(Token = "0x4000AA0")]
		k_EWorkshopFileActionCompleted
	}
	[Token(Token = "0x20001C3")]
	public enum EWorkshopEnumerationType
	{
		[Token(Token = "0x4000AA2")]
		k_EWorkshopEnumerationTypeRankedByVote,
		[Token(Token = "0x4000AA3")]
		k_EWorkshopEnumerationTypeRecent,
		[Token(Token = "0x4000AA4")]
		k_EWorkshopEnumerationTypeTrending,
		[Token(Token = "0x4000AA5")]
		k_EWorkshopEnumerationTypeFavoritesOfFriends,
		[Token(Token = "0x4000AA6")]
		k_EWorkshopEnumerationTypeVotedByFriends,
		[Token(Token = "0x4000AA7")]
		k_EWorkshopEnumerationTypeContentByFriends,
		[Token(Token = "0x4000AA8")]
		k_EWorkshopEnumerationTypeRecentFromFollowedUsers
	}
	[Token(Token = "0x20001C4")]
	public enum EWorkshopVideoProvider
	{
		[Token(Token = "0x4000AAA")]
		k_EWorkshopVideoProviderNone,
		[Token(Token = "0x4000AAB")]
		k_EWorkshopVideoProviderYoutube
	}
	[Token(Token = "0x20001C5")]
	public enum EUGCReadAction
	{
		[Token(Token = "0x4000AAD")]
		k_EUGCRead_ContinueReadingUntilFinished,
		[Token(Token = "0x4000AAE")]
		k_EUGCRead_ContinueReading,
		[Token(Token = "0x4000AAF")]
		k_EUGCRead_Close
	}
	[Token(Token = "0x20001C6")]
	public enum EVRScreenshotType
	{
		[Token(Token = "0x4000AB1")]
		k_EVRScreenshotType_None,
		[Token(Token = "0x4000AB2")]
		k_EVRScreenshotType_Mono,
		[Token(Token = "0x4000AB3")]
		k_EVRScreenshotType_Stereo,
		[Token(Token = "0x4000AB4")]
		k_EVRScreenshotType_MonoCubemap,
		[Token(Token = "0x4000AB5")]
		k_EVRScreenshotType_MonoPanorama,
		[Token(Token = "0x4000AB6")]
		k_EVRScreenshotType_StereoPanorama
	}
	[Token(Token = "0x20001C7")]
	public enum EUGCMatchingUGCType
	{
		[Token(Token = "0x4000AB8")]
		k_EUGCMatchingUGCType_Items = 0,
		[Token(Token = "0x4000AB9")]
		k_EUGCMatchingUGCType_Items_Mtx = 1,
		[Token(Token = "0x4000ABA")]
		k_EUGCMatchingUGCType_Items_ReadyToUse = 2,
		[Token(Token = "0x4000ABB")]
		k_EUGCMatchingUGCType_Collections = 3,
		[Token(Token = "0x4000ABC")]
		k_EUGCMatchingUGCType_Artwork = 4,
		[Token(Token = "0x4000ABD")]
		k_EUGCMatchingUGCType_Videos = 5,
		[Token(Token = "0x4000ABE")]
		k_EUGCMatchingUGCType_Screenshots = 6,
		[Token(Token = "0x4000ABF")]
		k_EUGCMatchingUGCType_AllGuides = 7,
		[Token(Token = "0x4000AC0")]
		k_EUGCMatchingUGCType_WebGuides = 8,
		[Token(Token = "0x4000AC1")]
		k_EUGCMatchingUGCType_IntegratedGuides = 9,
		[Token(Token = "0x4000AC2")]
		k_EUGCMatchingUGCType_UsableInGame = 10,
		[Token(Token = "0x4000AC3")]
		k_EUGCMatchingUGCType_ControllerBindings = 11,
		[Token(Token = "0x4000AC4")]
		k_EUGCMatchingUGCType_GameManagedItems = 12,
		[Token(Token = "0x4000AC5")]
		k_EUGCMatchingUGCType_All = -1
	}
	[Token(Token = "0x20001C8")]
	public enum EUserUGCList
	{
		[Token(Token = "0x4000AC7")]
		k_EUserUGCList_Published,
		[Token(Token = "0x4000AC8")]
		k_EUserUGCList_VotedOn,
		[Token(Token = "0x4000AC9")]
		k_EUserUGCList_VotedUp,
		[Token(Token = "0x4000ACA")]
		k_EUserUGCList_VotedDown,
		[Token(Token = "0x4000ACB")]
		k_EUserUGCList_WillVoteLater,
		[Token(Token = "0x4000ACC")]
		k_EUserUGCList_Favorited,
		[Token(Token = "0x4000ACD")]
		k_EUserUGCList_Subscribed,
		[Token(Token = "0x4000ACE")]
		k_EUserUGCList_UsedOrPlayed,
		[Token(Token = "0x4000ACF")]
		k_EUserUGCList_Followed
	}
	[Token(Token = "0x20001C9")]
	public enum EUserUGCListSortOrder
	{
		[Token(Token = "0x4000AD1")]
		k_EUserUGCListSortOrder_CreationOrderDesc,
		[Token(Token = "0x4000AD2")]
		k_EUserUGCListSortOrder_CreationOrderAsc,
		[Token(Token = "0x4000AD3")]
		k_EUserUGCListSortOrder_TitleAsc,
		[Token(Token = "0x4000AD4")]
		k_EUserUGCListSortOrder_LastUpdatedDesc,
		[Token(Token = "0x4000AD5")]
		k_EUserUGCListSortOrder_SubscriptionDateDesc,
		[Token(Token = "0x4000AD6")]
		k_EUserUGCListSortOrder_VoteScoreDesc,
		[Token(Token = "0x4000AD7")]
		k_EUserUGCListSortOrder_ForModeration
	}
	[Token(Token = "0x20001CA")]
	public enum EUGCQuery
	{
		[Token(Token = "0x4000AD9")]
		k_EUGCQuery_RankedByVote,
		[Token(Token = "0x4000ADA")]
		k_EUGCQuery_RankedByPublicationDate,
		[Token(Token = "0x4000ADB")]
		k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate,
		[Token(Token = "0x4000ADC")]
		k_EUGCQuery_RankedByTrend,
		[Token(Token = "0x4000ADD")]
		k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4000ADE")]
		k_EUGCQuery_CreatedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4000ADF")]
		k_EUGCQuery_RankedByNumTimesReported,
		[Token(Token = "0x4000AE0")]
		k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate,
		[Token(Token = "0x4000AE1")]
		k_EUGCQuery_NotYetRated,
		[Token(Token = "0x4000AE2")]
		k_EUGCQuery_RankedByTotalVotesAsc,
		[Token(Token = "0x4000AE3")]
		k_EUGCQuery_RankedByVotesUp,
		[Token(Token = "0x4000AE4")]
		k_EUGCQuery_RankedByTextSearch,
		[Token(Token = "0x4000AE5")]
		k_EUGCQuery_RankedByTotalUniqueSubscriptions,
		[Token(Token = "0x4000AE6")]
		k_EUGCQuery_RankedByPlaytimeTrend,
		[Token(Token = "0x4000AE7")]
		k_EUGCQuery_RankedByTotalPlaytime,
		[Token(Token = "0x4000AE8")]
		k_EUGCQuery_RankedByAveragePlaytimeTrend,
		[Token(Token = "0x4000AE9")]
		k_EUGCQuery_RankedByLifetimeAveragePlaytime,
		[Token(Token = "0x4000AEA")]
		k_EUGCQuery_RankedByPlaytimeSessionsTrend,
		[Token(Token = "0x4000AEB")]
		k_EUGCQuery_RankedByLifetimePlaytimeSessions
	}
	[Token(Token = "0x20001CB")]
	public enum EItemUpdateStatus
	{
		[Token(Token = "0x4000AED")]
		k_EItemUpdateStatusInvalid,
		[Token(Token = "0x4000AEE")]
		k_EItemUpdateStatusPreparingConfig,
		[Token(Token = "0x4000AEF")]
		k_EItemUpdateStatusPreparingContent,
		[Token(Token = "0x4000AF0")]
		k_EItemUpdateStatusUploadingContent,
		[Token(Token = "0x4000AF1")]
		k_EItemUpdateStatusUploadingPreviewFile,
		[Token(Token = "0x4000AF2")]
		k_EItemUpdateStatusCommittingChanges
	}
	[Token(Token = "0x20001CC")]
	[Flags]
	public enum EItemState
	{
		[Token(Token = "0x4000AF4")]
		k_EItemStateNone = 0,
		[Token(Token = "0x4000AF5")]
		k_EItemStateSubscribed = 1,
		[Token(Token = "0x4000AF6")]
		k_EItemStateLegacyItem = 2,
		[Token(Token = "0x4000AF7")]
		k_EItemStateInstalled = 4,
		[Token(Token = "0x4000AF8")]
		k_EItemStateNeedsUpdate = 8,
		[Token(Token = "0x4000AF9")]
		k_EItemStateDownloading = 0x10,
		[Token(Token = "0x4000AFA")]
		k_EItemStateDownloadPending = 0x20
	}
	[Token(Token = "0x20001CD")]
	public enum EItemStatistic
	{
		[Token(Token = "0x4000AFC")]
		k_EItemStatistic_NumSubscriptions,
		[Token(Token = "0x4000AFD")]
		k_EItemStatistic_NumFavorites,
		[Token(Token = "0x4000AFE")]
		k_EItemStatistic_NumFollowers,
		[Token(Token = "0x4000AFF")]
		k_EItemStatistic_NumUniqueSubscriptions,
		[Token(Token = "0x4000B00")]
		k_EItemStatistic_NumUniqueFavorites,
		[Token(Token = "0x4000B01")]
		k_EItemStatistic_NumUniqueFollowers,
		[Token(Token = "0x4000B02")]
		k_EItemStatistic_NumUniqueWebsiteViews,
		[Token(Token = "0x4000B03")]
		k_EItemStatistic_ReportScore,
		[Token(Token = "0x4000B04")]
		k_EItemStatistic_NumSecondsPlayed,
		[Token(Token = "0x4000B05")]
		k_EItemStatistic_NumPlaytimeSessions,
		[Token(Token = "0x4000B06")]
		k_EItemStatistic_NumComments,
		[Token(Token = "0x4000B07")]
		k_EItemStatistic_NumSecondsPlayedDuringTimePeriod,
		[Token(Token = "0x4000B08")]
		k_EItemStatistic_NumPlaytimeSessionsDuringTimePeriod
	}
	[Token(Token = "0x20001CE")]
	public enum EItemPreviewType
	{
		[Token(Token = "0x4000B0A")]
		k_EItemPreviewType_Image = 0,
		[Token(Token = "0x4000B0B")]
		k_EItemPreviewType_YouTubeVideo = 1,
		[Token(Token = "0x4000B0C")]
		k_EItemPreviewType_Sketchfab = 2,
		[Token(Token = "0x4000B0D")]
		k_EItemPreviewType_EnvironmentMap_HorizontalCross = 3,
		[Token(Token = "0x4000B0E")]
		k_EItemPreviewType_EnvironmentMap_LatLong = 4,
		[Token(Token = "0x4000B0F")]
		k_EItemPreviewType_ReservedMax = 255
	}
	[Token(Token = "0x20001CF")]
	public enum EFailureType
	{
		[Token(Token = "0x4000B11")]
		k_EFailureFlushedCallbackQueue,
		[Token(Token = "0x4000B12")]
		k_EFailurePipeFail
	}
	[Token(Token = "0x20001D0")]
	public enum ELeaderboardDataRequest
	{
		[Token(Token = "0x4000B14")]
		k_ELeaderboardDataRequestGlobal,
		[Token(Token = "0x4000B15")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Token(Token = "0x4000B16")]
		k_ELeaderboardDataRequestFriends,
		[Token(Token = "0x4000B17")]
		k_ELeaderboardDataRequestUsers
	}
	[Token(Token = "0x20001D1")]
	public enum ELeaderboardSortMethod
	{
		[Token(Token = "0x4000B19")]
		k_ELeaderboardSortMethodNone,
		[Token(Token = "0x4000B1A")]
		k_ELeaderboardSortMethodAscending,
		[Token(Token = "0x4000B1B")]
		k_ELeaderboardSortMethodDescending
	}
	[Token(Token = "0x20001D2")]
	public enum ELeaderboardDisplayType
	{
		[Token(Token = "0x4000B1D")]
		k_ELeaderboardDisplayTypeNone,
		[Token(Token = "0x4000B1E")]
		k_ELeaderboardDisplayTypeNumeric,
		[Token(Token = "0x4000B1F")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Token(Token = "0x4000B20")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	[Token(Token = "0x20001D3")]
	public enum ELeaderboardUploadScoreMethod
	{
		[Token(Token = "0x4000B22")]
		k_ELeaderboardUploadScoreMethodNone,
		[Token(Token = "0x4000B23")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Token(Token = "0x4000B24")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	[Token(Token = "0x20001D4")]
	public enum ESteamAPICallFailure
	{
		[Token(Token = "0x4000B26")]
		k_ESteamAPICallFailureNone = -1,
		[Token(Token = "0x4000B27")]
		k_ESteamAPICallFailureSteamGone,
		[Token(Token = "0x4000B28")]
		k_ESteamAPICallFailureNetworkFailure,
		[Token(Token = "0x4000B29")]
		k_ESteamAPICallFailureInvalidHandle,
		[Token(Token = "0x4000B2A")]
		k_ESteamAPICallFailureMismatchedCallback
	}
	[Token(Token = "0x20001D5")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x4000B2C")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x4000B2D")]
		k_EGamepadTextInputModePassword
	}
	[Token(Token = "0x20001D6")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x4000B2F")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x4000B30")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x20001D7")]
	public enum ECheckFileSignature
	{
		[Token(Token = "0x4000B32")]
		k_ECheckFileSignatureInvalidSignature,
		[Token(Token = "0x4000B33")]
		k_ECheckFileSignatureValidSignature,
		[Token(Token = "0x4000B34")]
		k_ECheckFileSignatureFileNotFound,
		[Token(Token = "0x4000B35")]
		k_ECheckFileSignatureNoSignaturesFoundForThisApp,
		[Token(Token = "0x4000B36")]
		k_ECheckFileSignatureNoSignaturesFoundForThisFile
	}
	[Token(Token = "0x20001D8")]
	public enum EMatchMakingServerResponse
	{
		[Token(Token = "0x4000B38")]
		eServerResponded,
		[Token(Token = "0x4000B39")]
		eServerFailedToRespond,
		[Token(Token = "0x4000B3A")]
		eNoServersListedOnMasterServer
	}
	[Token(Token = "0x20001D9")]
	public enum EServerMode
	{
		[Token(Token = "0x4000B3C")]
		eServerModeInvalid,
		[Token(Token = "0x4000B3D")]
		eServerModeNoAuthentication,
		[Token(Token = "0x4000B3E")]
		eServerModeAuthentication,
		[Token(Token = "0x4000B3F")]
		eServerModeAuthenticationAndSecure
	}
	[Token(Token = "0x20001DA")]
	public enum EResult
	{
		[Token(Token = "0x4000B41")]
		k_EResultOK = 1,
		[Token(Token = "0x4000B42")]
		k_EResultFail = 2,
		[Token(Token = "0x4000B43")]
		k_EResultNoConnection = 3,
		[Token(Token = "0x4000B44")]
		k_EResultInvalidPassword = 5,
		[Token(Token = "0x4000B45")]
		k_EResultLoggedInElsewhere = 6,
		[Token(Token = "0x4000B46")]
		k_EResultInvalidProtocolVer = 7,
		[Token(Token = "0x4000B47")]
		k_EResultInvalidParam = 8,
		[Token(Token = "0x4000B48")]
		k_EResultFileNotFound = 9,
		[Token(Token = "0x4000B49")]
		k_EResultBusy = 10,
		[Token(Token = "0x4000B4A")]
		k_EResultInvalidState = 11,
		[Token(Token = "0x4000B4B")]
		k_EResultInvalidName = 12,
		[Token(Token = "0x4000B4C")]
		k_EResultInvalidEmail = 13,
		[Token(Token = "0x4000B4D")]
		k_EResultDuplicateName = 14,
		[Token(Token = "0x4000B4E")]
		k_EResultAccessDenied = 15,
		[Token(Token = "0x4000B4F")]
		k_EResultTimeout = 16,
		[Token(Token = "0x4000B50")]
		k_EResultBanned = 17,
		[Token(Token = "0x4000B51")]
		k_EResultAccountNotFound = 18,
		[Token(Token = "0x4000B52")]
		k_EResultInvalidSteamID = 19,
		[Token(Token = "0x4000B53")]
		k_EResultServiceUnavailable = 20,
		[Token(Token = "0x4000B54")]
		k_EResultNotLoggedOn = 21,
		[Token(Token = "0x4000B55")]
		k_EResultPending = 22,
		[Token(Token = "0x4000B56")]
		k_EResultEncryptionFailure = 23,
		[Token(Token = "0x4000B57")]
		k_EResultInsufficientPrivilege = 24,
		[Token(Token = "0x4000B58")]
		k_EResultLimitExceeded = 25,
		[Token(Token = "0x4000B59")]
		k_EResultRevoked = 26,
		[Token(Token = "0x4000B5A")]
		k_EResultExpired = 27,
		[Token(Token = "0x4000B5B")]
		k_EResultAlreadyRedeemed = 28,
		[Token(Token = "0x4000B5C")]
		k_EResultDuplicateRequest = 29,
		[Token(Token = "0x4000B5D")]
		k_EResultAlreadyOwned = 30,
		[Token(Token = "0x4000B5E")]
		k_EResultIPNotFound = 31,
		[Token(Token = "0x4000B5F")]
		k_EResultPersistFailed = 32,
		[Token(Token = "0x4000B60")]
		k_EResultLockingFailed = 33,
		[Token(Token = "0x4000B61")]
		k_EResultLogonSessionReplaced = 34,
		[Token(Token = "0x4000B62")]
		k_EResultConnectFailed = 35,
		[Token(Token = "0x4000B63")]
		k_EResultHandshakeFailed = 36,
		[Token(Token = "0x4000B64")]
		k_EResultIOFailure = 37,
		[Token(Token = "0x4000B65")]
		k_EResultRemoteDisconnect = 38,
		[Token(Token = "0x4000B66")]
		k_EResultShoppingCartNotFound = 39,
		[Token(Token = "0x4000B67")]
		k_EResultBlocked = 40,
		[Token(Token = "0x4000B68")]
		k_EResultIgnored = 41,
		[Token(Token = "0x4000B69")]
		k_EResultNoMatch = 42,
		[Token(Token = "0x4000B6A")]
		k_EResultAccountDisabled = 43,
		[Token(Token = "0x4000B6B")]
		k_EResultServiceReadOnly = 44,
		[Token(Token = "0x4000B6C")]
		k_EResultAccountNotFeatured = 45,
		[Token(Token = "0x4000B6D")]
		k_EResultAdministratorOK = 46,
		[Token(Token = "0x4000B6E")]
		k_EResultContentVersion = 47,
		[Token(Token = "0x4000B6F")]
		k_EResultTryAnotherCM = 48,
		[Token(Token = "0x4000B70")]
		k_EResultPasswordRequiredToKickSession = 49,
		[Token(Token = "0x4000B71")]
		k_EResultAlreadyLoggedInElsewhere = 50,
		[Token(Token = "0x4000B72")]
		k_EResultSuspended = 51,
		[Token(Token = "0x4000B73")]
		k_EResultCancelled = 52,
		[Token(Token = "0x4000B74")]
		k_EResultDataCorruption = 53,
		[Token(Token = "0x4000B75")]
		k_EResultDiskFull = 54,
		[Token(Token = "0x4000B76")]
		k_EResultRemoteCallFailed = 55,
		[Token(Token = "0x4000B77")]
		k_EResultPasswordUnset = 56,
		[Token(Token = "0x4000B78")]
		k_EResultExternalAccountUnlinked = 57,
		[Token(Token = "0x4000B79")]
		k_EResultPSNTicketInvalid = 58,
		[Token(Token = "0x4000B7A")]
		k_EResultExternalAccountAlreadyLinked = 59,
		[Token(Token = "0x4000B7B")]
		k_EResultRemoteFileConflict = 60,
		[Token(Token = "0x4000B7C")]
		k_EResultIllegalPassword = 61,
		[Token(Token = "0x4000B7D")]
		k_EResultSameAsPreviousValue = 62,
		[Token(Token = "0x4000B7E")]
		k_EResultAccountLogonDenied = 63,
		[Token(Token = "0x4000B7F")]
		k_EResultCannotUseOldPassword = 64,
		[Token(Token = "0x4000B80")]
		k_EResultInvalidLoginAuthCode = 65,
		[Token(Token = "0x4000B81")]
		k_EResultAccountLogonDeniedNoMail = 66,
		[Token(Token = "0x4000B82")]
		k_EResultHardwareNotCapableOfIPT = 67,
		[Token(Token = "0x4000B83")]
		k_EResultIPTInitError = 68,
		[Token(Token = "0x4000B84")]
		k_EResultParentalControlRestricted = 69,
		[Token(Token = "0x4000B85")]
		k_EResultFacebookQueryError = 70,
		[Token(Token = "0x4000B86")]
		k_EResultExpiredLoginAuthCode = 71,
		[Token(Token = "0x4000B87")]
		k_EResultIPLoginRestrictionFailed = 72,
		[Token(Token = "0x4000B88")]
		k_EResultAccountLockedDown = 73,
		[Token(Token = "0x4000B89")]
		k_EResultAccountLogonDeniedVerifiedEmailRequired = 74,
		[Token(Token = "0x4000B8A")]
		k_EResultNoMatchingURL = 75,
		[Token(Token = "0x4000B8B")]
		k_EResultBadResponse = 76,
		[Token(Token = "0x4000B8C")]
		k_EResultRequirePasswordReEntry = 77,
		[Token(Token = "0x4000B8D")]
		k_EResultValueOutOfRange = 78,
		[Token(Token = "0x4000B8E")]
		k_EResultUnexpectedError = 79,
		[Token(Token = "0x4000B8F")]
		k_EResultDisabled = 80,
		[Token(Token = "0x4000B90")]
		k_EResultInvalidCEGSubmission = 81,
		[Token(Token = "0x4000B91")]
		k_EResultRestrictedDevice = 82,
		[Token(Token = "0x4000B92")]
		k_EResultRegionLocked = 83,
		[Token(Token = "0x4000B93")]
		k_EResultRateLimitExceeded = 84,
		[Token(Token = "0x4000B94")]
		k_EResultAccountLoginDeniedNeedTwoFactor = 85,
		[Token(Token = "0x4000B95")]
		k_EResultItemDeleted = 86,
		[Token(Token = "0x4000B96")]
		k_EResultAccountLoginDeniedThrottle = 87,
		[Token(Token = "0x4000B97")]
		k_EResultTwoFactorCodeMismatch = 88,
		[Token(Token = "0x4000B98")]
		k_EResultTwoFactorActivationCodeMismatch = 89,
		[Token(Token = "0x4000B99")]
		k_EResultAccountAssociatedToMultiplePartners = 90,
		[Token(Token = "0x4000B9A")]
		k_EResultNotModified = 91,
		[Token(Token = "0x4000B9B")]
		k_EResultNoMobileDevice = 92,
		[Token(Token = "0x4000B9C")]
		k_EResultTimeNotSynced = 93,
		[Token(Token = "0x4000B9D")]
		k_EResultSmsCodeFailed = 94,
		[Token(Token = "0x4000B9E")]
		k_EResultAccountLimitExceeded = 95,
		[Token(Token = "0x4000B9F")]
		k_EResultAccountActivityLimitExceeded = 96,
		[Token(Token = "0x4000BA0")]
		k_EResultPhoneActivityLimitExceeded = 97,
		[Token(Token = "0x4000BA1")]
		k_EResultRefundToWallet = 98,
		[Token(Token = "0x4000BA2")]
		k_EResultEmailSendFailure = 99,
		[Token(Token = "0x4000BA3")]
		k_EResultNotSettled = 100,
		[Token(Token = "0x4000BA4")]
		k_EResultNeedCaptcha = 101,
		[Token(Token = "0x4000BA5")]
		k_EResultGSLTDenied = 102,
		[Token(Token = "0x4000BA6")]
		k_EResultGSOwnerDenied = 103,
		[Token(Token = "0x4000BA7")]
		k_EResultInvalidItemType = 104,
		[Token(Token = "0x4000BA8")]
		k_EResultIPBanned = 105,
		[Token(Token = "0x4000BA9")]
		k_EResultGSLTExpired = 106,
		[Token(Token = "0x4000BAA")]
		k_EResultInsufficientFunds = 107,
		[Token(Token = "0x4000BAB")]
		k_EResultTooManyPending = 108
	}
	[Token(Token = "0x20001DB")]
	public enum EVoiceResult
	{
		[Token(Token = "0x4000BAD")]
		k_EVoiceResultOK,
		[Token(Token = "0x4000BAE")]
		k_EVoiceResultNotInitialized,
		[Token(Token = "0x4000BAF")]
		k_EVoiceResultNotRecording,
		[Token(Token = "0x4000BB0")]
		k_EVoiceResultNoData,
		[Token(Token = "0x4000BB1")]
		k_EVoiceResultBufferTooSmall,
		[Token(Token = "0x4000BB2")]
		k_EVoiceResultDataCorrupted,
		[Token(Token = "0x4000BB3")]
		k_EVoiceResultRestricted,
		[Token(Token = "0x4000BB4")]
		k_EVoiceResultUnsupportedCodec,
		[Token(Token = "0x4000BB5")]
		k_EVoiceResultReceiverOutOfDate,
		[Token(Token = "0x4000BB6")]
		k_EVoiceResultReceiverDidNotAnswer
	}
	[Token(Token = "0x20001DC")]
	public enum EDenyReason
	{
		[Token(Token = "0x4000BB8")]
		k_EDenyInvalid,
		[Token(Token = "0x4000BB9")]
		k_EDenyInvalidVersion,
		[Token(Token = "0x4000BBA")]
		k_EDenyGeneric,
		[Token(Token = "0x4000BBB")]
		k_EDenyNotLoggedOn,
		[Token(Token = "0x4000BBC")]
		k_EDenyNoLicense,
		[Token(Token = "0x4000BBD")]
		k_EDenyCheater,
		[Token(Token = "0x4000BBE")]
		k_EDenyLoggedInElseWhere,
		[Token(Token = "0x4000BBF")]
		k_EDenyUnknownText,
		[Token(Token = "0x4000BC0")]
		k_EDenyIncompatibleAnticheat,
		[Token(Token = "0x4000BC1")]
		k_EDenyMemoryCorruption,
		[Token(Token = "0x4000BC2")]
		k_EDenyIncompatibleSoftware,
		[Token(Token = "0x4000BC3")]
		k_EDenySteamConnectionLost,
		[Token(Token = "0x4000BC4")]
		k_EDenySteamConnectionError,
		[Token(Token = "0x4000BC5")]
		k_EDenySteamResponseTimedOut,
		[Token(Token = "0x4000BC6")]
		k_EDenySteamValidationStalled,
		[Token(Token = "0x4000BC7")]
		k_EDenySteamOwnerLeftGuestUser
	}
	[Token(Token = "0x20001DD")]
	public enum EBeginAuthSessionResult
	{
		[Token(Token = "0x4000BC9")]
		k_EBeginAuthSessionResultOK,
		[Token(Token = "0x4000BCA")]
		k_EBeginAuthSessionResultInvalidTicket,
		[Token(Token = "0x4000BCB")]
		k_EBeginAuthSessionResultDuplicateRequest,
		[Token(Token = "0x4000BCC")]
		k_EBeginAuthSessionResultInvalidVersion,
		[Token(Token = "0x4000BCD")]
		k_EBeginAuthSessionResultGameMismatch,
		[Token(Token = "0x4000BCE")]
		k_EBeginAuthSessionResultExpiredTicket
	}
	[Token(Token = "0x20001DE")]
	public enum EAuthSessionResponse
	{
		[Token(Token = "0x4000BD0")]
		k_EAuthSessionResponseOK,
		[Token(Token = "0x4000BD1")]
		k_EAuthSessionResponseUserNotConnectedToSteam,
		[Token(Token = "0x4000BD2")]
		k_EAuthSessionResponseNoLicenseOrExpired,
		[Token(Token = "0x4000BD3")]
		k_EAuthSessionResponseVACBanned,
		[Token(Token = "0x4000BD4")]
		k_EAuthSessionResponseLoggedInElseWhere,
		[Token(Token = "0x4000BD5")]
		k_EAuthSessionResponseVACCheckTimedOut,
		[Token(Token = "0x4000BD6")]
		k_EAuthSessionResponseAuthTicketCanceled,
		[Token(Token = "0x4000BD7")]
		k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed,
		[Token(Token = "0x4000BD8")]
		k_EAuthSessionResponseAuthTicketInvalid,
		[Token(Token = "0x4000BD9")]
		k_EAuthSessionResponsePublisherIssuedBan
	}
	[Token(Token = "0x20001DF")]
	public enum EUserHasLicenseForAppResult
	{
		[Token(Token = "0x4000BDB")]
		k_EUserHasLicenseResultHasLicense,
		[Token(Token = "0x4000BDC")]
		k_EUserHasLicenseResultDoesNotHaveLicense,
		[Token(Token = "0x4000BDD")]
		k_EUserHasLicenseResultNoAuth
	}
	[Token(Token = "0x20001E0")]
	public enum EAccountType
	{
		[Token(Token = "0x4000BDF")]
		k_EAccountTypeInvalid,
		[Token(Token = "0x4000BE0")]
		k_EAccountTypeIndividual,
		[Token(Token = "0x4000BE1")]
		k_EAccountTypeMultiseat,
		[Token(Token = "0x4000BE2")]
		k_EAccountTypeGameServer,
		[Token(Token = "0x4000BE3")]
		k_EAccountTypeAnonGameServer,
		[Token(Token = "0x4000BE4")]
		k_EAccountTypePending,
		[Token(Token = "0x4000BE5")]
		k_EAccountTypeContentServer,
		[Token(Token = "0x4000BE6")]
		k_EAccountTypeClan,
		[Token(Token = "0x4000BE7")]
		k_EAccountTypeChat,
		[Token(Token = "0x4000BE8")]
		k_EAccountTypeConsoleUser,
		[Token(Token = "0x4000BE9")]
		k_EAccountTypeAnonUser,
		[Token(Token = "0x4000BEA")]
		k_EAccountTypeMax
	}
	[Token(Token = "0x20001E1")]
	public enum EAppReleaseState
	{
		[Token(Token = "0x4000BEC")]
		k_EAppReleaseState_Unknown,
		[Token(Token = "0x4000BED")]
		k_EAppReleaseState_Unavailable,
		[Token(Token = "0x4000BEE")]
		k_EAppReleaseState_Prerelease,
		[Token(Token = "0x4000BEF")]
		k_EAppReleaseState_PreloadOnly,
		[Token(Token = "0x4000BF0")]
		k_EAppReleaseState_Released
	}
	[Token(Token = "0x20001E2")]
	[Flags]
	public enum EAppOwnershipFlags
	{
		[Token(Token = "0x4000BF2")]
		k_EAppOwnershipFlags_None = 0,
		[Token(Token = "0x4000BF3")]
		k_EAppOwnershipFlags_OwnsLicense = 1,
		[Token(Token = "0x4000BF4")]
		k_EAppOwnershipFlags_FreeLicense = 2,
		[Token(Token = "0x4000BF5")]
		k_EAppOwnershipFlags_RegionRestricted = 4,
		[Token(Token = "0x4000BF6")]
		k_EAppOwnershipFlags_LowViolence = 8,
		[Token(Token = "0x4000BF7")]
		k_EAppOwnershipFlags_InvalidPlatform = 0x10,
		[Token(Token = "0x4000BF8")]
		k_EAppOwnershipFlags_SharedLicense = 0x20,
		[Token(Token = "0x4000BF9")]
		k_EAppOwnershipFlags_FreeWeekend = 0x40,
		[Token(Token = "0x4000BFA")]
		k_EAppOwnershipFlags_RetailLicense = 0x80,
		[Token(Token = "0x4000BFB")]
		k_EAppOwnershipFlags_LicenseLocked = 0x100,
		[Token(Token = "0x4000BFC")]
		k_EAppOwnershipFlags_LicensePending = 0x200,
		[Token(Token = "0x4000BFD")]
		k_EAppOwnershipFlags_LicenseExpired = 0x400,
		[Token(Token = "0x4000BFE")]
		k_EAppOwnershipFlags_LicensePermanent = 0x800,
		[Token(Token = "0x4000BFF")]
		k_EAppOwnershipFlags_LicenseRecurring = 0x1000,
		[Token(Token = "0x4000C00")]
		k_EAppOwnershipFlags_LicenseCanceled = 0x2000,
		[Token(Token = "0x4000C01")]
		k_EAppOwnershipFlags_AutoGrant = 0x4000,
		[Token(Token = "0x4000C02")]
		k_EAppOwnershipFlags_PendingGift = 0x8000,
		[Token(Token = "0x4000C03")]
		k_EAppOwnershipFlags_RentalNotActivated = 0x10000,
		[Token(Token = "0x4000C04")]
		k_EAppOwnershipFlags_Rental = 0x20000,
		[Token(Token = "0x4000C05")]
		k_EAppOwnershipFlags_SiteLicense = 0x40000
	}
	[Token(Token = "0x20001E3")]
	[Flags]
	public enum EAppType
	{
		[Token(Token = "0x4000C07")]
		k_EAppType_Invalid = 0,
		[Token(Token = "0x4000C08")]
		k_EAppType_Game = 1,
		[Token(Token = "0x4000C09")]
		k_EAppType_Application = 2,
		[Token(Token = "0x4000C0A")]
		k_EAppType_Tool = 4,
		[Token(Token = "0x4000C0B")]
		k_EAppType_Demo = 8,
		[Token(Token = "0x4000C0C")]
		k_EAppType_Media_DEPRECATED = 0x10,
		[Token(Token = "0x4000C0D")]
		k_EAppType_DLC = 0x20,
		[Token(Token = "0x4000C0E")]
		k_EAppType_Guide = 0x40,
		[Token(Token = "0x4000C0F")]
		k_EAppType_Driver = 0x80,
		[Token(Token = "0x4000C10")]
		k_EAppType_Config = 0x100,
		[Token(Token = "0x4000C11")]
		k_EAppType_Hardware = 0x200,
		[Token(Token = "0x4000C12")]
		k_EAppType_Franchise = 0x400,
		[Token(Token = "0x4000C13")]
		k_EAppType_Video = 0x800,
		[Token(Token = "0x4000C14")]
		k_EAppType_Plugin = 0x1000,
		[Token(Token = "0x4000C15")]
		k_EAppType_Music = 0x2000,
		[Token(Token = "0x4000C16")]
		k_EAppType_Series = 0x4000,
		[Token(Token = "0x4000C17")]
		k_EAppType_Shortcut = 0x40000000,
		[Token(Token = "0x4000C18")]
		k_EAppType_DepotOnly = -2147483647
	}
	[Token(Token = "0x20001E4")]
	public enum ESteamUserStatType
	{
		[Token(Token = "0x4000C1A")]
		k_ESteamUserStatTypeINVALID,
		[Token(Token = "0x4000C1B")]
		k_ESteamUserStatTypeINT,
		[Token(Token = "0x4000C1C")]
		k_ESteamUserStatTypeFLOAT,
		[Token(Token = "0x4000C1D")]
		k_ESteamUserStatTypeAVGRATE,
		[Token(Token = "0x4000C1E")]
		k_ESteamUserStatTypeACHIEVEMENTS,
		[Token(Token = "0x4000C1F")]
		k_ESteamUserStatTypeGROUPACHIEVEMENTS,
		[Token(Token = "0x4000C20")]
		k_ESteamUserStatTypeMAX
	}
	[Token(Token = "0x20001E5")]
	public enum EChatEntryType
	{
		[Token(Token = "0x4000C22")]
		k_EChatEntryTypeInvalid = 0,
		[Token(Token = "0x4000C23")]
		k_EChatEntryTypeChatMsg = 1,
		[Token(Token = "0x4000C24")]
		k_EChatEntryTypeTyping = 2,
		[Token(Token = "0x4000C25")]
		k_EChatEntryTypeInviteGame = 3,
		[Token(Token = "0x4000C26")]
		k_EChatEntryTypeEmote = 4,
		[Token(Token = "0x4000C27")]
		k_EChatEntryTypeLeftConversation = 6,
		[Token(Token = "0x4000C28")]
		k_EChatEntryTypeEntered = 7,
		[Token(Token = "0x4000C29")]
		k_EChatEntryTypeWasKicked = 8,
		[Token(Token = "0x4000C2A")]
		k_EChatEntryTypeWasBanned = 9,
		[Token(Token = "0x4000C2B")]
		k_EChatEntryTypeDisconnected = 10,
		[Token(Token = "0x4000C2C")]
		k_EChatEntryTypeHistoricalChat = 11,
		[Token(Token = "0x4000C2D")]
		k_EChatEntryTypeLinkBlocked = 14
	}
	[Token(Token = "0x20001E6")]
	public enum EChatRoomEnterResponse
	{
		[Token(Token = "0x4000C2F")]
		k_EChatRoomEnterResponseSuccess = 1,
		[Token(Token = "0x4000C30")]
		k_EChatRoomEnterResponseDoesntExist,
		[Token(Token = "0x4000C31")]
		k_EChatRoomEnterResponseNotAllowed,
		[Token(Token = "0x4000C32")]
		k_EChatRoomEnterResponseFull,
		[Token(Token = "0x4000C33")]
		k_EChatRoomEnterResponseError,
		[Token(Token = "0x4000C34")]
		k_EChatRoomEnterResponseBanned,
		[Token(Token = "0x4000C35")]
		k_EChatRoomEnterResponseLimited,
		[Token(Token = "0x4000C36")]
		k_EChatRoomEnterResponseClanDisabled,
		[Token(Token = "0x4000C37")]
		k_EChatRoomEnterResponseCommunityBan,
		[Token(Token = "0x4000C38")]
		k_EChatRoomEnterResponseMemberBlockedYou,
		[Token(Token = "0x4000C39")]
		k_EChatRoomEnterResponseYouBlockedMember
	}
	[Token(Token = "0x20001E7")]
	[Flags]
	public enum EChatSteamIDInstanceFlags
	{
		[Token(Token = "0x4000C3B")]
		k_EChatAccountInstanceMask = 0xFFF,
		[Token(Token = "0x4000C3C")]
		k_EChatInstanceFlagClan = 0x80000,
		[Token(Token = "0x4000C3D")]
		k_EChatInstanceFlagLobby = 0x40000,
		[Token(Token = "0x4000C3E")]
		k_EChatInstanceFlagMMSLobby = 0x20000
	}
	[Token(Token = "0x20001E8")]
	[Flags]
	public enum EMarketingMessageFlags
	{
		[Token(Token = "0x4000C40")]
		k_EMarketingMessageFlagsNone = 0,
		[Token(Token = "0x4000C41")]
		k_EMarketingMessageFlagsHighPriority = 1,
		[Token(Token = "0x4000C42")]
		k_EMarketingMessageFlagsPlatformWindows = 2,
		[Token(Token = "0x4000C43")]
		k_EMarketingMessageFlagsPlatformMac = 4,
		[Token(Token = "0x4000C44")]
		k_EMarketingMessageFlagsPlatformLinux = 8,
		[Token(Token = "0x4000C45")]
		k_EMarketingMessageFlagsPlatformRestrictions = 0xE
	}
	[Token(Token = "0x20001E9")]
	public enum ENotificationPosition
	{
		[Token(Token = "0x4000C47")]
		k_EPositionTopLeft,
		[Token(Token = "0x4000C48")]
		k_EPositionTopRight,
		[Token(Token = "0x4000C49")]
		k_EPositionBottomLeft,
		[Token(Token = "0x4000C4A")]
		k_EPositionBottomRight
	}
	[Token(Token = "0x20001EA")]
	public enum EBroadcastUploadResult
	{
		[Token(Token = "0x4000C4C")]
		k_EBroadcastUploadResultNone,
		[Token(Token = "0x4000C4D")]
		k_EBroadcastUploadResultOK,
		[Token(Token = "0x4000C4E")]
		k_EBroadcastUploadResultInitFailed,
		[Token(Token = "0x4000C4F")]
		k_EBroadcastUploadResultFrameFailed,
		[Token(Token = "0x4000C50")]
		k_EBroadcastUploadResultTimeout,
		[Token(Token = "0x4000C51")]
		k_EBroadcastUploadResultBandwidthExceeded,
		[Token(Token = "0x4000C52")]
		k_EBroadcastUploadResultLowFPS,
		[Token(Token = "0x4000C53")]
		k_EBroadcastUploadResultMissingKeyFrames,
		[Token(Token = "0x4000C54")]
		k_EBroadcastUploadResultNoConnection,
		[Token(Token = "0x4000C55")]
		k_EBroadcastUploadResultRelayFailed,
		[Token(Token = "0x4000C56")]
		k_EBroadcastUploadResultSettingsChanged,
		[Token(Token = "0x4000C57")]
		k_EBroadcastUploadResultMissingAudio,
		[Token(Token = "0x4000C58")]
		k_EBroadcastUploadResultTooFarBehind,
		[Token(Token = "0x4000C59")]
		k_EBroadcastUploadResultTranscodeBehind
	}
	[Token(Token = "0x20001EB")]
	public enum ELaunchOptionType
	{
		[Token(Token = "0x4000C5B")]
		k_ELaunchOptionType_None = 0,
		[Token(Token = "0x4000C5C")]
		k_ELaunchOptionType_Default = 1,
		[Token(Token = "0x4000C5D")]
		k_ELaunchOptionType_SafeMode = 2,
		[Token(Token = "0x4000C5E")]
		k_ELaunchOptionType_Multiplayer = 3,
		[Token(Token = "0x4000C5F")]
		k_ELaunchOptionType_Config = 4,
		[Token(Token = "0x4000C60")]
		k_ELaunchOptionType_OpenVR = 5,
		[Token(Token = "0x4000C61")]
		k_ELaunchOptionType_Server = 6,
		[Token(Token = "0x4000C62")]
		k_ELaunchOptionType_Editor = 7,
		[Token(Token = "0x4000C63")]
		k_ELaunchOptionType_Manual = 8,
		[Token(Token = "0x4000C64")]
		k_ELaunchOptionType_Benchmark = 9,
		[Token(Token = "0x4000C65")]
		k_ELaunchOptionType_Option1 = 10,
		[Token(Token = "0x4000C66")]
		k_ELaunchOptionType_Option2 = 11,
		[Token(Token = "0x4000C67")]
		k_ELaunchOptionType_Option3 = 12,
		[Token(Token = "0x4000C68")]
		k_ELaunchOptionType_OculusVR = 13,
		[Token(Token = "0x4000C69")]
		k_ELaunchOptionType_OpenVROverlay = 14,
		[Token(Token = "0x4000C6A")]
		k_ELaunchOptionType_OSVR = 15,
		[Token(Token = "0x4000C6B")]
		k_ELaunchOptionType_Dialog = 1000
	}
	[Token(Token = "0x20001EC")]
	public enum EVRHMDType
	{
		[Token(Token = "0x4000C6D")]
		k_eEVRHMDType_None = -1,
		[Token(Token = "0x4000C6E")]
		k_eEVRHMDType_Unknown = 0,
		[Token(Token = "0x4000C6F")]
		k_eEVRHMDType_HTC_Dev = 1,
		[Token(Token = "0x4000C70")]
		k_eEVRHMDType_HTC_VivePre = 2,
		[Token(Token = "0x4000C71")]
		k_eEVRHMDType_HTC_Vive = 3,
		[Token(Token = "0x4000C72")]
		k_eEVRHMDType_HTC_Unknown = 20,
		[Token(Token = "0x4000C73")]
		k_eEVRHMDType_Oculus_DK1 = 21,
		[Token(Token = "0x4000C74")]
		k_eEVRHMDType_Oculus_DK2 = 22,
		[Token(Token = "0x4000C75")]
		k_eEVRHMDType_Oculus_Rift = 23,
		[Token(Token = "0x4000C76")]
		k_eEVRHMDType_Oculus_Unknown = 40
	}
	[Token(Token = "0x20001ED")]
	public enum EHTTPMethod
	{
		[Token(Token = "0x4000C78")]
		k_EHTTPMethodInvalid,
		[Token(Token = "0x4000C79")]
		k_EHTTPMethodGET,
		[Token(Token = "0x4000C7A")]
		k_EHTTPMethodHEAD,
		[Token(Token = "0x4000C7B")]
		k_EHTTPMethodPOST,
		[Token(Token = "0x4000C7C")]
		k_EHTTPMethodPUT,
		[Token(Token = "0x4000C7D")]
		k_EHTTPMethodDELETE,
		[Token(Token = "0x4000C7E")]
		k_EHTTPMethodOPTIONS,
		[Token(Token = "0x4000C7F")]
		k_EHTTPMethodPATCH
	}
	[Token(Token = "0x20001EE")]
	public enum EHTTPStatusCode
	{
		[Token(Token = "0x4000C81")]
		k_EHTTPStatusCodeInvalid = 0,
		[Token(Token = "0x4000C82")]
		k_EHTTPStatusCode100Continue = 100,
		[Token(Token = "0x4000C83")]
		k_EHTTPStatusCode101SwitchingProtocols = 101,
		[Token(Token = "0x4000C84")]
		k_EHTTPStatusCode200OK = 200,
		[Token(Token = "0x4000C85")]
		k_EHTTPStatusCode201Created = 201,
		[Token(Token = "0x4000C86")]
		k_EHTTPStatusCode202Accepted = 202,
		[Token(Token = "0x4000C87")]
		k_EHTTPStatusCode203NonAuthoritative = 203,
		[Token(Token = "0x4000C88")]
		k_EHTTPStatusCode204NoContent = 204,
		[Token(Token = "0x4000C89")]
		k_EHTTPStatusCode205ResetContent = 205,
		[Token(Token = "0x4000C8A")]
		k_EHTTPStatusCode206PartialContent = 206,
		[Token(Token = "0x4000C8B")]
		k_EHTTPStatusCode300MultipleChoices = 300,
		[Token(Token = "0x4000C8C")]
		k_EHTTPStatusCode301MovedPermanently = 301,
		[Token(Token = "0x4000C8D")]
		k_EHTTPStatusCode302Found = 302,
		[Token(Token = "0x4000C8E")]
		k_EHTTPStatusCode303SeeOther = 303,
		[Token(Token = "0x4000C8F")]
		k_EHTTPStatusCode304NotModified = 304,
		[Token(Token = "0x4000C90")]
		k_EHTTPStatusCode305UseProxy = 305,
		[Token(Token = "0x4000C91")]
		k_EHTTPStatusCode307TemporaryRedirect = 307,
		[Token(Token = "0x4000C92")]
		k_EHTTPStatusCode400BadRequest = 400,
		[Token(Token = "0x4000C93")]
		k_EHTTPStatusCode401Unauthorized = 401,
		[Token(Token = "0x4000C94")]
		k_EHTTPStatusCode402PaymentRequired = 402,
		[Token(Token = "0x4000C95")]
		k_EHTTPStatusCode403Forbidden = 403,
		[Token(Token = "0x4000C96")]
		k_EHTTPStatusCode404NotFound = 404,
		[Token(Token = "0x4000C97")]
		k_EHTTPStatusCode405MethodNotAllowed = 405,
		[Token(Token = "0x4000C98")]
		k_EHTTPStatusCode406NotAcceptable = 406,
		[Token(Token = "0x4000C99")]
		k_EHTTPStatusCode407ProxyAuthRequired = 407,
		[Token(Token = "0x4000C9A")]
		k_EHTTPStatusCode408RequestTimeout = 408,
		[Token(Token = "0x4000C9B")]
		k_EHTTPStatusCode409Conflict = 409,
		[Token(Token = "0x4000C9C")]
		k_EHTTPStatusCode410Gone = 410,
		[Token(Token = "0x4000C9D")]
		k_EHTTPStatusCode411LengthRequired = 411,
		[Token(Token = "0x4000C9E")]
		k_EHTTPStatusCode412PreconditionFailed = 412,
		[Token(Token = "0x4000C9F")]
		k_EHTTPStatusCode413RequestEntityTooLarge = 413,
		[Token(Token = "0x4000CA0")]
		k_EHTTPStatusCode414RequestURITooLong = 414,
		[Token(Token = "0x4000CA1")]
		k_EHTTPStatusCode415UnsupportedMediaType = 415,
		[Token(Token = "0x4000CA2")]
		k_EHTTPStatusCode416RequestedRangeNotSatisfiable = 416,
		[Token(Token = "0x4000CA3")]
		k_EHTTPStatusCode417ExpectationFailed = 417,
		[Token(Token = "0x4000CA4")]
		k_EHTTPStatusCode4xxUnknown = 418,
		[Token(Token = "0x4000CA5")]
		k_EHTTPStatusCode429TooManyRequests = 429,
		[Token(Token = "0x4000CA6")]
		k_EHTTPStatusCode500InternalServerError = 500,
		[Token(Token = "0x4000CA7")]
		k_EHTTPStatusCode501NotImplemented = 501,
		[Token(Token = "0x4000CA8")]
		k_EHTTPStatusCode502BadGateway = 502,
		[Token(Token = "0x4000CA9")]
		k_EHTTPStatusCode503ServiceUnavailable = 503,
		[Token(Token = "0x4000CAA")]
		k_EHTTPStatusCode504GatewayTimeout = 504,
		[Token(Token = "0x4000CAB")]
		k_EHTTPStatusCode505HTTPVersionNotSupported = 505,
		[Token(Token = "0x4000CAC")]
		k_EHTTPStatusCode5xxUnknown = 599
	}
	[Token(Token = "0x20001EF")]
	public enum EUniverse
	{
		[Token(Token = "0x4000CAE")]
		k_EUniverseInvalid,
		[Token(Token = "0x4000CAF")]
		k_EUniversePublic,
		[Token(Token = "0x4000CB0")]
		k_EUniverseBeta,
		[Token(Token = "0x4000CB1")]
		k_EUniverseInternal,
		[Token(Token = "0x4000CB2")]
		k_EUniverseDev,
		[Token(Token = "0x4000CB3")]
		k_EUniverseMax
	}
	[Token(Token = "0x20001F0")]
	public struct ControllerAnalogActionData_t
	{
		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EControllerSourceMode eMode;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float x;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float y;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte bActive;
	}
	[Token(Token = "0x20001F1")]
	public struct ControllerDigitalActionData_t
	{
		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte bState;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte bActive;
	}
	[Token(Token = "0x20001F2")]
	public struct ControllerMotionData_t
	{
		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float rotQuatX;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rotQuatY;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float rotQuatZ;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rotQuatW;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float posAccelX;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float posAccelY;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float posAccelZ;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotVelX;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotVelY;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotVelZ;
	}
	[Token(Token = "0x20001F3")]
	public struct FriendGameInfo_t
	{
		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_gameID;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unGameIP;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_usGamePort;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_usQueryPort;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_steamIDLobby;
	}
	[Token(Token = "0x20001F4")]
	public struct FriendSessionStateInfo_t
	{
		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uiOnlineSessionInstances;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte m_uiPublishedToFriendsSessionInstance;
	}
	[Token(Token = "0x20001F5")]
	public struct SteamItemDetails_t
	{
		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamItemInstanceID_t m_itemId;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamItemDef_t m_iDefinition;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_unQuantity;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_unFlags;
	}
	[Token(Token = "0x20001F6")]
	public struct P2PSessionState_t
	{
		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bConnectionActive;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte m_bConnecting;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte m_eP2PSessionError;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte m_bUsingRelay;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nBytesQueuedForSend;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nPacketsQueuedForSend;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nRemoteIP;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_nRemotePort;
	}
	[Token(Token = "0x20001F7")]
	public struct SteamParamStringArray_t
	{
		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_ppStrings;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nNumStrings;
	}
	[Token(Token = "0x20001F8")]
	public struct SteamUGCDetails_t
	{
		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_rtimeCreated;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_rtimeAddedToUserList;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool m_bBanned;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool m_bAcceptedForUse;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_rgchTags;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public uint m_unVotesUp;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public uint m_unVotesDown;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float m_flScore;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public uint m_unNumChildren;
	}
	[Token(Token = "0x20001F9")]
	public struct CallbackMsg_t
	{
		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_hSteamUser;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_iCallback;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pubParam;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cubParam;
	}
	[Token(Token = "0x20001FA")]
	public struct LeaderboardEntry_t
	{
		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nGlobalRank;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cDetails;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UGCHandle_t m_hUGC;
	}
	[Token(Token = "0x20001FB")]
	public struct MatchMakingKeyValuePair_t
	{
		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szKey;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_szValue;

		[Token(Token = "0x6000817")]
		[Address(RVA = "0xE3F208", Offset = "0xE3F208", VA = "0xE3F208")]
		private MatchMakingKeyValuePair_t(string strKey, string strValue)
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public static class SteamAppList
	{
		[Token(Token = "0x6000818")]
		[Address(RVA = "0x11333C4", Offset = "0x11333C4", VA = "0x11333C4")]
		public static uint GetNumInstalledApps()
		{
			return default(uint);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x11333E0", Offset = "0x11333E0", VA = "0x11333E0")]
		public static uint GetInstalledApps(AppId_t[] pvecAppID, uint unMaxAppIDs)
		{
			return default(uint);
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x1133414", Offset = "0x1133414", VA = "0x1133414")]
		public static int GetAppName(AppId_t nAppID, out string pchName, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x1133500", Offset = "0x1133500", VA = "0x1133500")]
		public static int GetAppInstallDir(AppId_t nAppID, out string pchDirectory, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x11335EC", Offset = "0x11335EC", VA = "0x11335EC")]
		public static int GetAppBuildId(AppId_t nAppID)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001FD")]
	public static class SteamApps
	{
		[Token(Token = "0x600081D")]
		[Address(RVA = "0x1133618", Offset = "0x1133618", VA = "0x1133618")]
		public static bool BIsSubscribed()
		{
			return default(bool);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x1133634", Offset = "0x1133634", VA = "0x1133634")]
		public static bool BIsLowViolence()
		{
			return default(bool);
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x1133650", Offset = "0x1133650", VA = "0x1133650")]
		public static bool BIsCybercafe()
		{
			return default(bool);
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x113366C", Offset = "0x113366C", VA = "0x113366C")]
		public static bool BIsVACBanned()
		{
			return default(bool);
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x1133688", Offset = "0x1133688", VA = "0x1133688")]
		public static string GetCurrentGameLanguage()
		{
			return null;
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x11336AC", Offset = "0x11336AC", VA = "0x11336AC")]
		public static string GetAvailableGameLanguages()
		{
			return null;
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x11336D0", Offset = "0x11336D0", VA = "0x11336D0")]
		public static bool BIsSubscribedApp(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x11336FC", Offset = "0x11336FC", VA = "0x11336FC")]
		public static bool BIsDlcInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x1133728", Offset = "0x1133728", VA = "0x1133728")]
		public static uint GetEarliestPurchaseUnixTime(AppId_t nAppID)
		{
			return default(uint);
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x1133754", Offset = "0x1133754", VA = "0x1133754")]
		public static bool BIsSubscribedFromFreeWeekend()
		{
			return default(bool);
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x1133770", Offset = "0x1133770", VA = "0x1133770")]
		public static int GetDLCCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x113378C", Offset = "0x113378C", VA = "0x113378C")]
		public static bool BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x1133888", Offset = "0x1133888", VA = "0x1133888")]
		public static void InstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x11338B4", Offset = "0x11338B4", VA = "0x11338B4")]
		public static void UninstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x11338E0", Offset = "0x11338E0", VA = "0x11338E0")]
		public static void RequestAppProofOfPurchaseKey(AppId_t nAppID)
		{
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x113390C", Offset = "0x113390C", VA = "0x113390C")]
		public static bool GetCurrentBetaName(out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x11339DC", Offset = "0x11339DC", VA = "0x11339DC")]
		public static bool MarkContentCorrupt(bool bMissingFilesOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x1133A08", Offset = "0x1133A08", VA = "0x1133A08")]
		public static uint GetInstalledDepots(AppId_t appID, DepotId_t[] pvecDepots, uint cMaxDepots)
		{
			return default(uint);
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x1133A4C", Offset = "0x1133A4C", VA = "0x1133A4C")]
		public static uint GetAppInstallDir(AppId_t appID, out string pchFolder, uint cchFolderBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x1133B34", Offset = "0x1133B34", VA = "0x1133B34")]
		public static bool BIsAppInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x1133B60", Offset = "0x1133B60", VA = "0x1133B60")]
		public static CSteamID GetAppOwner()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x1133BD8", Offset = "0x1133BD8", VA = "0x1133BD8")]
		public static string GetLaunchQueryParam(string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x1133D50", Offset = "0x1133D50", VA = "0x1133D50")]
		public static bool GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x1133D94", Offset = "0x1133D94", VA = "0x1133D94")]
		public static int GetAppBuildId()
		{
			return default(int);
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x1133DB0", Offset = "0x1133DB0", VA = "0x1133DB0")]
		public static void RequestAllProofOfPurchaseKeys()
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x1133DCC", Offset = "0x1133DCC", VA = "0x1133DCC")]
		public static SteamAPICall_t GetFileDetails(string pszFileName)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001FE")]
	public static class SteamClient
	{
		[Token(Token = "0x6000837")]
		[Address(RVA = "0x1133F64", Offset = "0x1133F64", VA = "0x1133F64")]
		public static HSteamPipe CreateSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x1133F90", Offset = "0x1133F90", VA = "0x1133F90")]
		public static bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
		{
			return default(bool);
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x1133FBC", Offset = "0x1133FBC", VA = "0x1133FBC")]
		public static HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x1133FF8", Offset = "0x1133FF8", VA = "0x1133FF8")]
		public static HSteamUser CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x113403C", Offset = "0x113403C", VA = "0x113403C")]
		public static void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x1134070", Offset = "0x1134070", VA = "0x1134070")]
		public static IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x11341EC", Offset = "0x11341EC", VA = "0x11341EC")]
		public static IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x1134368", Offset = "0x1134368", VA = "0x1134368")]
		public static void SetLocalIPBinding(uint unIP, ushort usPort)
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x113439C", Offset = "0x113439C", VA = "0x113439C")]
		public static IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x1134518", Offset = "0x1134518", VA = "0x1134518")]
		public static IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x113468C", Offset = "0x113468C", VA = "0x113468C")]
		public static IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x1134808", Offset = "0x1134808", VA = "0x1134808")]
		public static IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x1134984", Offset = "0x1134984", VA = "0x1134984")]
		public static IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x1134B00", Offset = "0x1134B00", VA = "0x1134B00")]
		public static IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x1134C7C", Offset = "0x1134C7C", VA = "0x1134C7C")]
		public static IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x1134DF8", Offset = "0x1134DF8", VA = "0x1134DF8")]
		public static IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x1134F74", Offset = "0x1134F74", VA = "0x1134F74")]
		public static IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x11350F0", Offset = "0x11350F0", VA = "0x11350F0")]
		public static IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x113526C", Offset = "0x113526C", VA = "0x113526C")]
		public static IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x11353E8", Offset = "0x11353E8", VA = "0x11353E8")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x1135404", Offset = "0x1135404", VA = "0x1135404")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x1135430", Offset = "0x1135430", VA = "0x1135430")]
		public static bool BShutdownIfAllPipesClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x113544C", Offset = "0x113544C", VA = "0x113544C")]
		public static IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x11355C8", Offset = "0x11355C8", VA = "0x11355C8")]
		public static IntPtr GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x1135744", Offset = "0x1135744", VA = "0x1135744")]
		public static IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x11358C0", Offset = "0x11358C0", VA = "0x11358C0")]
		public static IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x1135A3C", Offset = "0x1135A3C", VA = "0x1135A3C")]
		public static IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x1135BB8", Offset = "0x1135BB8", VA = "0x1135BB8")]
		public static IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x1135D34", Offset = "0x1135D34", VA = "0x1135D34")]
		public static IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x1135EB0", Offset = "0x1135EB0", VA = "0x1135EB0")]
		public static IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x113602C", Offset = "0x113602C", VA = "0x113602C")]
		public static IntPtr GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x11361A8", Offset = "0x11361A8", VA = "0x11361A8")]
		public static IntPtr GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001FF")]
	public static class SteamController
	{
		[Token(Token = "0x6000857")]
		[Address(RVA = "0x1136324", Offset = "0x1136324", VA = "0x1136324")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x1136340", Offset = "0x1136340", VA = "0x1136340")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x113635C", Offset = "0x113635C", VA = "0x113635C")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x1136378", Offset = "0x1136378", VA = "0x1136378")]
		public static int GetConnectedControllers(ControllerHandle_t[] handlesOut)
		{
			return default(int);
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x1136400", Offset = "0x1136400", VA = "0x1136400")]
		public static bool ShowBindingPanel(ControllerHandle_t controllerHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x113642C", Offset = "0x113642C", VA = "0x113642C")]
		public static ControllerActionSetHandle_t GetActionSetHandle(string pszActionSetName)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x11365A4", Offset = "0x11365A4", VA = "0x11365A4")]
		public static void ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
		{
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x11365D8", Offset = "0x11365D8", VA = "0x11365D8")]
		public static ControllerActionSetHandle_t GetCurrentActionSet(ControllerHandle_t controllerHandle)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0x113660C", Offset = "0x113660C", VA = "0x113660C")]
		public static ControllerDigitalActionHandle_t GetDigitalActionHandle(string pszActionName)
		{
			return default(ControllerDigitalActionHandle_t);
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x1136784", Offset = "0x1136784", VA = "0x1136784")]
		public static ControllerDigitalActionData_t GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
		{
			return default(ControllerDigitalActionData_t);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0x11367C0", Offset = "0x11367C0", VA = "0x11367C0")]
		public static int GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin[] originsOut)
		{
			return default(int);
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x113680C", Offset = "0x113680C", VA = "0x113680C")]
		public static ControllerAnalogActionHandle_t GetAnalogActionHandle(string pszActionName)
		{
			return default(ControllerAnalogActionHandle_t);
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x1136984", Offset = "0x1136984", VA = "0x1136984")]
		public static ControllerAnalogActionData_t GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
		{
			return default(ControllerAnalogActionData_t);
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x11369C0", Offset = "0x11369C0", VA = "0x11369C0")]
		public static int GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin[] originsOut)
		{
			return default(int);
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0x1136A0C", Offset = "0x1136A0C", VA = "0x1136A0C")]
		public static void StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
		{
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0x1136A40", Offset = "0x1136A40", VA = "0x1136A40")]
		public static void TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec)
		{
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x1136A84", Offset = "0x1136A84", VA = "0x1136A84")]
		public static void TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
		{
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x1136AE8", Offset = "0x1136AE8", VA = "0x1136AE8")]
		public static void TriggerVibration(ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x1136B2C", Offset = "0x1136B2C", VA = "0x1136B2C")]
		public static void SetLEDColor(ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
		{
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x1136B88", Offset = "0x1136B88", VA = "0x1136B88")]
		public static int GetGamepadIndexForController(ControllerHandle_t ulControllerHandle)
		{
			return default(int);
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x1136BB4", Offset = "0x1136BB4", VA = "0x1136BB4")]
		public static ControllerHandle_t GetControllerForGamepadIndex(int nIndex)
		{
			return default(ControllerHandle_t);
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x1136BE8", Offset = "0x1136BE8", VA = "0x1136BE8")]
		public static ControllerMotionData_t GetMotionData(ControllerHandle_t controllerHandle)
		{
			return default(ControllerMotionData_t);
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x1136C3C", Offset = "0x1136C3C", VA = "0x1136C3C")]
		public static bool ShowDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle, float flScale, float flXPosition, float flYPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x1136C98", Offset = "0x1136C98", VA = "0x1136C98")]
		public static bool ShowAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle, float flScale, float flXPosition, float flYPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x1136CF4", Offset = "0x1136CF4", VA = "0x1136CF4")]
		public static string GetStringForActionOrigin(EControllerActionOrigin eOrigin)
		{
			return null;
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x1136D28", Offset = "0x1136D28", VA = "0x1136D28")]
		public static string GetGlyphForActionOrigin(EControllerActionOrigin eOrigin)
		{
			return null;
		}
	}
	[Token(Token = "0x2000200")]
	public static class SteamFriends
	{
		[Token(Token = "0x6000871")]
		[Address(RVA = "0x1137000", Offset = "0x1137000", VA = "0x1137000")]
		public static string GetPersonaName()
		{
			return null;
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x1137024", Offset = "0x1137024", VA = "0x1137024")]
		public static SteamAPICall_t SetPersonaName(string pchPersonaName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x11371BC", Offset = "0x11371BC", VA = "0x11371BC")]
		public static EPersonaState GetPersonaState()
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x11371D8", Offset = "0x11371D8", VA = "0x11371D8")]
		public static int GetFriendCount(EFriendFlags iFriendFlags)
		{
			return default(int);
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x1137204", Offset = "0x1137204", VA = "0x1137204")]
		public static CSteamID GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x1137294", Offset = "0x1137294", VA = "0x1137294")]
		public static EFriendRelationship GetFriendRelationship(CSteamID steamIDFriend)
		{
			return default(EFriendRelationship);
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x11372C0", Offset = "0x11372C0", VA = "0x11372C0")]
		public static EPersonaState GetFriendPersonaState(CSteamID steamIDFriend)
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x11372EC", Offset = "0x11372EC", VA = "0x11372EC")]
		public static string GetFriendPersonaName(CSteamID steamIDFriend)
		{
			return null;
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x1137320", Offset = "0x1137320", VA = "0x1137320")]
		public static bool GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x1137354", Offset = "0x1137354", VA = "0x1137354")]
		public static string GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName)
		{
			return null;
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x1137390", Offset = "0x1137390", VA = "0x1137390")]
		public static int GetFriendSteamLevel(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x11373BC", Offset = "0x11373BC", VA = "0x11373BC")]
		public static string GetPlayerNickname(CSteamID steamIDPlayer)
		{
			return null;
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x11373F0", Offset = "0x11373F0", VA = "0x11373F0")]
		public static int GetFriendsGroupCount()
		{
			return default(int);
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x113740C", Offset = "0x113740C", VA = "0x113740C")]
		public static FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x1137494", Offset = "0x1137494", VA = "0x1137494")]
		public static string GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
		{
			return null;
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x11374C8", Offset = "0x11374C8", VA = "0x11374C8")]
		public static int GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
		{
			return default(int);
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x11374F4", Offset = "0x11374F4", VA = "0x11374F4")]
		public static void GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID[] pOutSteamIDMembers, int nMembersCount)
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x1137538", Offset = "0x1137538", VA = "0x1137538")]
		public static bool HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x113756C", Offset = "0x113756C", VA = "0x113756C")]
		public static int GetClanCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x1137588", Offset = "0x1137588", VA = "0x1137588")]
		public static CSteamID GetClanByIndex(int iClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x1137608", Offset = "0x1137608", VA = "0x1137608")]
		public static string GetClanName(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x113763C", Offset = "0x113763C", VA = "0x113763C")]
		public static string GetClanTag(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x1137670", Offset = "0x1137670", VA = "0x1137670")]
		public static bool GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
		{
			return default(bool);
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x11376BC", Offset = "0x11376BC", VA = "0x11376BC")]
		public static SteamAPICall_t DownloadClanActivityCounts(CSteamID[] psteamIDClans, int cClansToRequest)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x1137748", Offset = "0x1137748", VA = "0x1137748")]
		public static int GetFriendCountFromSource(CSteamID steamIDSource)
		{
			return default(int);
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x1137774", Offset = "0x1137774", VA = "0x1137774")]
		public static CSteamID GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x1137804", Offset = "0x1137804", VA = "0x1137804")]
		public static bool IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource)
		{
			return default(bool);
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x1137838", Offset = "0x1137838", VA = "0x1137838")]
		public static void SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking)
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x113786C", Offset = "0x113786C", VA = "0x113786C")]
		public static void ActivateGameOverlay(string pchDialog)
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x11379C4", Offset = "0x11379C4", VA = "0x11379C4")]
		public static void ActivateGameOverlayToUser(string pchDialog, CSteamID steamID)
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x1137B24", Offset = "0x1137B24", VA = "0x1137B24")]
		public static void ActivateGameOverlayToWebPage(string pchURL)
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x1137C7C", Offset = "0x1137C7C", VA = "0x1137C7C")]
		public static void ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
		{
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x1137CB0", Offset = "0x1137CB0", VA = "0x1137CB0")]
		public static void SetPlayedWith(CSteamID steamIDUserPlayedWith)
		{
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x1137CDC", Offset = "0x1137CDC", VA = "0x1137CDC")]
		public static void ActivateGameOverlayInviteDialog(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x1137D08", Offset = "0x1137D08", VA = "0x1137D08")]
		public static int GetSmallFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x1137D34", Offset = "0x1137D34", VA = "0x1137D34")]
		public static int GetMediumFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x1137D60", Offset = "0x1137D60", VA = "0x1137D60")]
		public static int GetLargeFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x1137D8C", Offset = "0x1137D8C", VA = "0x1137D8C")]
		public static bool RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x1137DC0", Offset = "0x1137DC0", VA = "0x1137DC0")]
		public static SteamAPICall_t RequestClanOfficerList(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x1137E3C", Offset = "0x1137E3C", VA = "0x1137E3C")]
		public static CSteamID GetClanOwner(CSteamID steamIDClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x1137EBC", Offset = "0x1137EBC", VA = "0x1137EBC")]
		public static int GetClanOfficerCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x1137EE8", Offset = "0x1137EE8", VA = "0x1137EE8")]
		public static CSteamID GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x1137F78", Offset = "0x1137F78", VA = "0x1137F78")]
		public static uint GetUserRestrictions()
		{
			return default(uint);
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x1137F94", Offset = "0x1137F94", VA = "0x1137F94")]
		public static bool SetRichPresence(string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x11381DC", Offset = "0x11381DC", VA = "0x11381DC")]
		public static void ClearRichPresence()
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x11381F8", Offset = "0x11381F8", VA = "0x11381F8")]
		public static string GetFriendRichPresence(CSteamID steamIDFriend, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x1138378", Offset = "0x1138378", VA = "0x1138378")]
		public static int GetFriendRichPresenceKeyCount(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x11383A4", Offset = "0x11383A4", VA = "0x11383A4")]
		public static string GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey)
		{
			return null;
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x11383E0", Offset = "0x11383E0", VA = "0x11383E0")]
		public static void RequestFriendRichPresence(CSteamID steamIDFriend)
		{
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x113840C", Offset = "0x113840C", VA = "0x113840C")]
		public static bool InviteUserToGame(CSteamID steamIDFriend, string pchConnectString)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x1138580", Offset = "0x1138580", VA = "0x1138580")]
		public static int GetCoplayFriendCount()
		{
			return default(int);
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x113859C", Offset = "0x113859C", VA = "0x113859C")]
		public static CSteamID GetCoplayFriend(int iCoplayFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x113861C", Offset = "0x113861C", VA = "0x113861C")]
		public static int GetFriendCoplayTime(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x1138648", Offset = "0x1138648", VA = "0x1138648")]
		public static AppId_t GetFriendCoplayGame(CSteamID steamIDFriend)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x11386D0", Offset = "0x11386D0", VA = "0x11386D0")]
		public static SteamAPICall_t JoinClanChatRoom(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x113874C", Offset = "0x113874C", VA = "0x113874C")]
		public static bool LeaveClanChatRoom(CSteamID steamIDClan)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x1138778", Offset = "0x1138778", VA = "0x1138778")]
		public static int GetClanChatMemberCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x11387A4", Offset = "0x11387A4", VA = "0x11387A4")]
		public static CSteamID GetChatMemberByIndex(CSteamID steamIDClan, int iUser)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x1138834", Offset = "0x1138834", VA = "0x1138834")]
		public static bool SendClanChatMessage(CSteamID steamIDClanChat, string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x11389A8", Offset = "0x11389A8", VA = "0x11389A8")]
		public static int GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, out string prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter)
		{
			return default(int);
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x1138AB0", Offset = "0x1138AB0", VA = "0x1138AB0")]
		public static bool IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x1138AE4", Offset = "0x1138AE4", VA = "0x1138AE4")]
		public static bool IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x1138B10", Offset = "0x1138B10", VA = "0x1138B10")]
		public static bool OpenClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x1138B3C", Offset = "0x1138B3C", VA = "0x1138B3C")]
		public static bool CloseClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x1138B68", Offset = "0x1138B68", VA = "0x1138B68")]
		public static bool SetListenForFriendsMessages(bool bInterceptEnabled)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x1138B94", Offset = "0x1138B94", VA = "0x1138B94")]
		public static bool ReplyToFriendMessage(CSteamID steamIDFriend, string pchMsgToSend)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x1138D08", Offset = "0x1138D08", VA = "0x1138D08")]
		public static int GetFriendMessage(CSteamID steamIDFriend, int iMessageID, out string pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x1138E08", Offset = "0x1138E08", VA = "0x1138E08")]
		public static SteamAPICall_t GetFollowerCount(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x1138E84", Offset = "0x1138E84", VA = "0x1138E84")]
		public static SteamAPICall_t IsFollowing(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x1138F00", Offset = "0x1138F00", VA = "0x1138F00")]
		public static SteamAPICall_t EnumerateFollowingList(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000201")]
	public static class SteamGameServer
	{
		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x1138F7C", Offset = "0x1138F7C", VA = "0x1138F7C")]
		public static bool InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x1139118", Offset = "0x1139118", VA = "0x1139118")]
		public static void SetProduct(string pszProduct)
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x1139270", Offset = "0x1139270", VA = "0x1139270")]
		public static void SetGameDescription(string pszGameDescription)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x11393C8", Offset = "0x11393C8", VA = "0x11393C8")]
		public static void SetModDir(string pszModDir)
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x1139520", Offset = "0x1139520", VA = "0x1139520")]
		public static void SetDedicatedServer(bool bDedicated)
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x113954C", Offset = "0x113954C", VA = "0x113954C")]
		public static void LogOn(string pszToken)
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x11396A4", Offset = "0x11396A4", VA = "0x11396A4")]
		public static void LogOnAnonymous()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x11396C0", Offset = "0x11396C0", VA = "0x11396C0")]
		public static void LogOff()
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x11396DC", Offset = "0x11396DC", VA = "0x11396DC")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x11396F8", Offset = "0x11396F8", VA = "0x11396F8")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x1139714", Offset = "0x1139714", VA = "0x1139714")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x113978C", Offset = "0x113978C", VA = "0x113978C")]
		public static bool WasRestartRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x11397A8", Offset = "0x11397A8", VA = "0x11397A8")]
		public static void SetMaxPlayerCount(int cPlayersMax)
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x11397D4", Offset = "0x11397D4", VA = "0x11397D4")]
		public static void SetBotPlayerCount(int cBotplayers)
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x1139800", Offset = "0x1139800", VA = "0x1139800")]
		public static void SetServerName(string pszServerName)
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x1139958", Offset = "0x1139958", VA = "0x1139958")]
		public static void SetMapName(string pszMapName)
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x1139AB0", Offset = "0x1139AB0", VA = "0x1139AB0")]
		public static void SetPasswordProtected(bool bPasswordProtected)
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x1139ADC", Offset = "0x1139ADC", VA = "0x1139ADC")]
		public static void SetSpectatorPort(ushort unSpectatorPort)
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x1139B08", Offset = "0x1139B08", VA = "0x1139B08")]
		public static void SetSpectatorServerName(string pszSpectatorServerName)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x1139C60", Offset = "0x1139C60", VA = "0x1139C60")]
		public static void ClearAllKeyValues()
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x1139C7C", Offset = "0x1139C7C", VA = "0x1139C7C")]
		public static void SetKeyValue(string pKey, string pValue)
		{
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x1139EA8", Offset = "0x1139EA8", VA = "0x1139EA8")]
		public static void SetGameTags(string pchGameTags)
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x113A000", Offset = "0x113A000", VA = "0x113A000")]
		public static void SetGameData(string pchGameData)
		{
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x113A158", Offset = "0x113A158", VA = "0x113A158")]
		public static void SetRegion(string pszRegion)
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x113A2B0", Offset = "0x113A2B0", VA = "0x113A2B0")]
		public static bool SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x113A2FC", Offset = "0x113A2FC", VA = "0x113A2FC")]
		public static CSteamID CreateUnauthenticatedUserConnection()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x113A374", Offset = "0x113A374", VA = "0x113A374")]
		public static void SendUserDisconnect(CSteamID steamIDUser)
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x113A3A0", Offset = "0x113A3A0", VA = "0x113A3A0")]
		public static bool BUpdateUserData(CSteamID steamIDUser, string pchPlayerName, uint uScore)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x113A51C", Offset = "0x113A51C", VA = "0x113A51C")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x113A5BC", Offset = "0x113A5BC", VA = "0x113A5BC")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x113A600", Offset = "0x113A600", VA = "0x113A600")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x113A62C", Offset = "0x113A62C", VA = "0x113A62C")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x113A658", Offset = "0x113A658", VA = "0x113A658")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x113A68C", Offset = "0x113A68C", VA = "0x113A68C")]
		public static bool RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x113A6C0", Offset = "0x113A6C0", VA = "0x113A6C0")]
		public static void GetGameplayStats()
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x113A6DC", Offset = "0x113A6DC", VA = "0x113A6DC")]
		public static SteamAPICall_t GetServerReputation()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x113A750", Offset = "0x113A750", VA = "0x113A750")]
		public static uint GetPublicIP()
		{
			return default(uint);
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x113A76C", Offset = "0x113A76C", VA = "0x113A76C")]
		public static bool HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x113A7B8", Offset = "0x113A7B8", VA = "0x113A7B8")]
		public static int GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
		{
			return default(int);
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x113A804", Offset = "0x113A804", VA = "0x113A804")]
		public static void EnableHeartbeats(bool bActive)
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x113A830", Offset = "0x113A830", VA = "0x113A830")]
		public static void SetHeartbeatInterval(int iHeartbeatInterval)
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x113A85C", Offset = "0x113A85C", VA = "0x113A85C")]
		public static void ForceHeartbeat()
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x113A878", Offset = "0x113A878", VA = "0x113A878")]
		public static SteamAPICall_t AssociateWithClan(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x113A8F4", Offset = "0x113A8F4", VA = "0x113A8F4")]
		public static SteamAPICall_t ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000202")]
	public static class SteamGameServerHTTP
	{
		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x113A970", Offset = "0x113A970", VA = "0x113A970")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x113AB24", Offset = "0x113AB24", VA = "0x113AB24")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x113AB58", Offset = "0x113AB58", VA = "0x113AB58")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x113AB8C", Offset = "0x113AB8C", VA = "0x113AB8C")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x113ADDC", Offset = "0x113ADDC", VA = "0x113ADDC")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x113B02C", Offset = "0x113B02C", VA = "0x113B02C")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x113B060", Offset = "0x113B060", VA = "0x113B060")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x113B094", Offset = "0x113B094", VA = "0x113B094")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x113B0C0", Offset = "0x113B0C0", VA = "0x113B0C0")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x113B0EC", Offset = "0x113B0EC", VA = "0x113B0EC")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x113B268", Offset = "0x113B268", VA = "0x113B268")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x113B3EC", Offset = "0x113B3EC", VA = "0x113B3EC")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x113B420", Offset = "0x113B420", VA = "0x113B420")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x113B464", Offset = "0x113B464", VA = "0x113B464")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x113B4B0", Offset = "0x113B4B0", VA = "0x113B4B0")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x113B4DC", Offset = "0x113B4DC", VA = "0x113B4DC")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x113B510", Offset = "0x113B510", VA = "0x113B510")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x113B694", Offset = "0x113B694", VA = "0x113B694")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x113B71C", Offset = "0x113B71C", VA = "0x113B71C")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x113B748", Offset = "0x113B748", VA = "0x113B748")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x113BA78", Offset = "0x113BA78", VA = "0x113BA78")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x113BAAC", Offset = "0x113BAAC", VA = "0x113BAAC")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x113BC20", Offset = "0x113BC20", VA = "0x113BC20")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x113BC54", Offset = "0x113BC54", VA = "0x113BC54")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x113BC88", Offset = "0x113BC88", VA = "0x113BC88")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000203")]
	public static class SteamGameServerInventory
	{
		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x113BCBC", Offset = "0x113BCBC", VA = "0x113BCBC")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x113BCE8", Offset = "0x113BCE8", VA = "0x113BCE8")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x113BD2C", Offset = "0x113BD2C", VA = "0x113BD2C")]
		public static bool GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x113BF54", Offset = "0x113BF54", VA = "0x113BF54")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x113BF80", Offset = "0x113BF80", VA = "0x113BF80")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x113BFB4", Offset = "0x113BFB4", VA = "0x113BFB4")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x113BFE0", Offset = "0x113BFE0", VA = "0x113BFE0")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x113C00C", Offset = "0x113C00C", VA = "0x113C00C")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x113C050", Offset = "0x113C050", VA = "0x113C050")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x113C094", Offset = "0x113C094", VA = "0x113C094")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x113C0E0", Offset = "0x113C0E0", VA = "0x113C0E0")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x113C12C", Offset = "0x113C12C", VA = "0x113C12C")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x113C158", Offset = "0x113C158", VA = "0x113C158")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x113C18C", Offset = "0x113C18C", VA = "0x113C18C")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x113C1D0", Offset = "0x113C1D0", VA = "0x113C1D0")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x113C214", Offset = "0x113C214", VA = "0x113C214")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x113C288", Offset = "0x113C288", VA = "0x113C288")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x113C2D4", Offset = "0x113C2D4", VA = "0x113C2D4")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x113C2F0", Offset = "0x113C2F0", VA = "0x113C2F0")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x113C324", Offset = "0x113C324", VA = "0x113C324")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x113C3A0", Offset = "0x113C3A0", VA = "0x113C3A0")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x113C3BC", Offset = "0x113C3BC", VA = "0x113C3BC")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x113C3F0", Offset = "0x113C3F0", VA = "0x113C3F0")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x113C608", Offset = "0x113C608", VA = "0x113C608")]
		public static SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x113C684", Offset = "0x113C684", VA = "0x113C684")]
		public static bool GetEligiblePromoItemDefinitionIDs(CSteamID steamID, SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000204")]
	public static class SteamGameServerNetworking
	{
		[Token(Token = "0x6000915")]
		[Address(RVA = "0x113C6C8", Offset = "0x113C6C8", VA = "0x113C6C8")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x113C724", Offset = "0x113C724", VA = "0x113C724")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x113C758", Offset = "0x113C758", VA = "0x113C758")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x113C7B4", Offset = "0x113C7B4", VA = "0x113C7B4")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x113C7E0", Offset = "0x113C7E0", VA = "0x113C7E0")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0x113C80C", Offset = "0x113C80C", VA = "0x113C80C")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0x113C840", Offset = "0x113C840", VA = "0x113C840")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0x113C874", Offset = "0x113C874", VA = "0x113C874")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0x113C8A0", Offset = "0x113C8A0", VA = "0x113C8A0")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x113C8F4", Offset = "0x113C8F4", VA = "0x113C8F4")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x113C948", Offset = "0x113C948", VA = "0x113C948")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x113C994", Offset = "0x113C994", VA = "0x113C994")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x113C9C8", Offset = "0x113C9C8", VA = "0x113C9C8")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x113C9FC", Offset = "0x113C9FC", VA = "0x113C9FC")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x113CA48", Offset = "0x113CA48", VA = "0x113CA48")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x113CA7C", Offset = "0x113CA7C", VA = "0x113CA7C")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x113CAC8", Offset = "0x113CAC8", VA = "0x113CAC8")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x113CB0C", Offset = "0x113CB0C", VA = "0x113CB0C")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x113CB68", Offset = "0x113CB68", VA = "0x113CB68")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x113CBC4", Offset = "0x113CBC4", VA = "0x113CBC4")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x113CC08", Offset = "0x113CC08", VA = "0x113CC08")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x113CC34", Offset = "0x113CC34", VA = "0x113CC34")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000205")]
	public static class SteamGameServerStats
	{
		[Token(Token = "0x600092B")]
		[Address(RVA = "0x113CC60", Offset = "0x113CC60", VA = "0x113CC60")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x113CCDC", Offset = "0x113CCDC", VA = "0x113CCDC")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x113CE58", Offset = "0x113CE58", VA = "0x113CE58")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x113CFD4", Offset = "0x113CFD4", VA = "0x113CFD4")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x113D150", Offset = "0x113D150", VA = "0x113D150")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x113D2CC", Offset = "0x113D2CC", VA = "0x113D2CC")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x113D448", Offset = "0x113D448", VA = "0x113D448")]
		public static bool UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x113D5D4", Offset = "0x113D5D4", VA = "0x113D5D4")]
		public static bool SetUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x113D748", Offset = "0x113D748", VA = "0x113D748")]
		public static bool ClearUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x113D8BC", Offset = "0x113D8BC", VA = "0x113D8BC")]
		public static SteamAPICall_t StoreUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000206")]
	public static class SteamGameServerUGC
	{
		[Token(Token = "0x6000935")]
		[Address(RVA = "0x113D938", Offset = "0x113D938", VA = "0x113D938")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x113DA00", Offset = "0x113DA00", VA = "0x113DA00")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x113DAB0", Offset = "0x113DAB0", VA = "0x113DAB0")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x113DB40", Offset = "0x113DB40", VA = "0x113DB40")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x113DBBC", Offset = "0x113DBBC", VA = "0x113DBBC")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x113DC00", Offset = "0x113DC00", VA = "0x113DC00")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x113DCEC", Offset = "0x113DCEC", VA = "0x113DCEC")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x113DDD8", Offset = "0x113DDD8", VA = "0x113DDD8")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x113DE24", Offset = "0x113DE24", VA = "0x113DE24")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x113DE70", Offset = "0x113DE70", VA = "0x113DE70")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x113DEA4", Offset = "0x113DEA4", VA = "0x113DEA4")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out string pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x113E018", Offset = "0x113E018", VA = "0x113E018")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x113E04C", Offset = "0x113E04C", VA = "0x113E04C")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x113E1AC", Offset = "0x113E1AC", VA = "0x113E1AC")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x113E1D8", Offset = "0x113E1D8", VA = "0x113E1D8")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x113E34C", Offset = "0x113E34C", VA = "0x113E34C")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x113E4C0", Offset = "0x113E4C0", VA = "0x113E4C0")]
		public static bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x113E4F4", Offset = "0x113E4F4", VA = "0x113E4F4")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x113E528", Offset = "0x113E528", VA = "0x113E528")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x113E55C", Offset = "0x113E55C", VA = "0x113E55C")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x113E590", Offset = "0x113E590", VA = "0x113E590")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x113E5C4", Offset = "0x113E5C4", VA = "0x113E5C4")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x113E5F8", Offset = "0x113E5F8", VA = "0x113E5F8")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x113E62C", Offset = "0x113E62C", VA = "0x113E62C")]
		public static bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x113E660", Offset = "0x113E660", VA = "0x113E660")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x113E7D4", Offset = "0x113E7D4", VA = "0x113E7D4")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x113E808", Offset = "0x113E808", VA = "0x113E808")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x113E97C", Offset = "0x113E97C", VA = "0x113E97C")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x113E9B0", Offset = "0x113E9B0", VA = "0x113E9B0")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x113EB24", Offset = "0x113EB24", VA = "0x113EB24")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x113EB58", Offset = "0x113EB58", VA = "0x113EB58")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x113EDA8", Offset = "0x113EDA8", VA = "0x113EDA8")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x113EE34", Offset = "0x113EE34", VA = "0x113EE34")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x113EEC0", Offset = "0x113EEC0", VA = "0x113EEC0")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x113EF50", Offset = "0x113EF50", VA = "0x113EF50")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x113F0C4", Offset = "0x113F0C4", VA = "0x113F0C4")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x113F238", Offset = "0x113F238", VA = "0x113F238")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x113F3AC", Offset = "0x113F3AC", VA = "0x113F3AC")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x113F520", Offset = "0x113F520", VA = "0x113F520")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x113F554", Offset = "0x113F554", VA = "0x113F554")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x113F5D8", Offset = "0x113F5D8", VA = "0x113F5D8")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x113F74C", Offset = "0x113F74C", VA = "0x113F74C")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x113F8C0", Offset = "0x113F8C0", VA = "0x113F8C0")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x113FA34", Offset = "0x113FA34", VA = "0x113FA34")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x113FC84", Offset = "0x113FC84", VA = "0x113FC84")]
		public static bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, EItemPreviewType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x113FE00", Offset = "0x113FE00", VA = "0x113FE00")]
		public static bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x113FF74", Offset = "0x113FF74", VA = "0x113FF74")]
		public static bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x11400F0", Offset = "0x11400F0", VA = "0x11400F0")]
		public static bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x114026C", Offset = "0x114026C", VA = "0x114026C")]
		public static bool RemoveItemPreview(UGCUpdateHandle_t handle, uint index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x11402A0", Offset = "0x11402A0", VA = "0x11402A0")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x1140440", Offset = "0x1140440", VA = "0x1140440")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x1140484", Offset = "0x1140484", VA = "0x1140484")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x1140510", Offset = "0x1140510", VA = "0x1140510")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x114058C", Offset = "0x114058C", VA = "0x114058C")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x1140618", Offset = "0x1140618", VA = "0x1140618")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x11406A4", Offset = "0x11406A4", VA = "0x11406A4")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x1140720", Offset = "0x1140720", VA = "0x1140720")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x114079C", Offset = "0x114079C", VA = "0x114079C")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x11407B8", Offset = "0x11407B8", VA = "0x11407B8")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x11407EC", Offset = "0x11407EC", VA = "0x11407EC")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x1140818", Offset = "0x1140818", VA = "0x1140818")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x1140914", Offset = "0x1140914", VA = "0x1140914")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x1140958", Offset = "0x1140958", VA = "0x1140958")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x114098C", Offset = "0x114098C", VA = "0x114098C")]
		public static bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x1140B00", Offset = "0x1140B00", VA = "0x1140B00")]
		public static void SuspendDownloads(bool bSuspend)
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x1140B2C", Offset = "0x1140B2C", VA = "0x1140B2C")]
		public static SteamAPICall_t StartPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x1140BB8", Offset = "0x1140BB8", VA = "0x1140BB8")]
		public static SteamAPICall_t StopPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x1140C44", Offset = "0x1140C44", VA = "0x1140C44")]
		public static SteamAPICall_t StopPlaytimeTrackingForAllItems()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x1140CB8", Offset = "0x1140CB8", VA = "0x1140CB8")]
		public static SteamAPICall_t AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x1140D44", Offset = "0x1140D44", VA = "0x1140D44")]
		public static SteamAPICall_t RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000207")]
	public static class SteamGameServerUtils
	{
		[Token(Token = "0x600097B")]
		[Address(RVA = "0x1140DD0", Offset = "0x1140DD0", VA = "0x1140DD0")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x1140DEC", Offset = "0x1140DEC", VA = "0x1140DEC")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x1140E08", Offset = "0x1140E08", VA = "0x1140E08")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x1140E24", Offset = "0x1140E24", VA = "0x1140E24")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x1140E40", Offset = "0x1140E40", VA = "0x1140E40")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x1140E64", Offset = "0x1140E64", VA = "0x1140E64")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x1140EA8", Offset = "0x1140EA8", VA = "0x1140EA8")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x1140EEC", Offset = "0x1140EEC", VA = "0x1140EEC")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x1140F20", Offset = "0x1140F20", VA = "0x1140F20")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x1140F3C", Offset = "0x1140F3C", VA = "0x1140F3C")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x1140FBC", Offset = "0x1140FBC", VA = "0x1140FBC")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x1140FE8", Offset = "0x1140FE8", VA = "0x1140FE8")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x114101C", Offset = "0x114101C", VA = "0x114101C")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x1141048", Offset = "0x1141048", VA = "0x1141048")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x11410A4", Offset = "0x11410A4", VA = "0x11410A4")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x11410C0", Offset = "0x11410C0", VA = "0x11410C0")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x11410EC", Offset = "0x11410EC", VA = "0x11410EC")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x1141108", Offset = "0x1141108", VA = "0x1141108")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x1141124", Offset = "0x1141124", VA = "0x1141124")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x11412BC", Offset = "0x11412BC", VA = "0x11412BC")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x1141524", Offset = "0x1141524", VA = "0x1141524")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x1141540", Offset = "0x1141540", VA = "0x1141540")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x1141610", Offset = "0x1141610", VA = "0x1141610")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x1141634", Offset = "0x1141634", VA = "0x1141634")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x1141650", Offset = "0x1141650", VA = "0x1141650")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x1141684", Offset = "0x1141684", VA = "0x1141684")]
		public static bool IsSteamInBigPictureMode()
		{
			return default(bool);
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x11416A0", Offset = "0x11416A0", VA = "0x11416A0")]
		public static void StartVRDashboard()
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x11416BC", Offset = "0x11416BC", VA = "0x11416BC")]
		public static bool IsVRHeadsetStreamingEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x11416D8", Offset = "0x11416D8", VA = "0x11416D8")]
		public static void SetVRHeadsetStreamingEnabled(bool bEnabled)
		{
		}
	}
	[Token(Token = "0x2000208")]
	public static class SteamHTMLSurface
	{
		[Token(Token = "0x6000998")]
		[Address(RVA = "0x1141704", Offset = "0x1141704", VA = "0x1141704")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x1141720", Offset = "0x1141720", VA = "0x1141720")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x114173C", Offset = "0x114173C", VA = "0x114173C")]
		public static SteamAPICall_t CreateBrowser(string pchUserAgent, string pchUserCSS)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x11419A4", Offset = "0x11419A4", VA = "0x11419A4")]
		public static void RemoveBrowser(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x11419D0", Offset = "0x11419D0", VA = "0x11419D0")]
		public static void LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x1141C04", Offset = "0x1141C04", VA = "0x1141C04")]
		public static void SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight)
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x1141C48", Offset = "0x1141C48", VA = "0x1141C48")]
		public static void StopLoad(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x1141C74", Offset = "0x1141C74", VA = "0x1141C74")]
		public static void Reload(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x1141CA0", Offset = "0x1141CA0", VA = "0x1141CA0")]
		public static void GoBack(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x1141CCC", Offset = "0x1141CCC", VA = "0x1141CCC")]
		public static void GoForward(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x1141CF8", Offset = "0x1141CF8", VA = "0x1141CF8")]
		public static void AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x1141F2C", Offset = "0x1141F2C", VA = "0x1141F2C")]
		public static void ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript)
		{
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x114208C", Offset = "0x114208C", VA = "0x114208C")]
		public static void MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x11420C0", Offset = "0x11420C0", VA = "0x11420C0")]
		public static void MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x11420F4", Offset = "0x11420F4", VA = "0x11420F4")]
		public static void MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x1142128", Offset = "0x1142128", VA = "0x1142128")]
		public static void MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x114216C", Offset = "0x114216C", VA = "0x114216C")]
		public static void MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta)
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x11421A0", Offset = "0x11421A0", VA = "0x11421A0")]
		public static void KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x11421E4", Offset = "0x11421E4", VA = "0x11421E4")]
		public static void KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x1142228", Offset = "0x1142228", VA = "0x1142228")]
		public static void KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x114226C", Offset = "0x114226C", VA = "0x114226C")]
		public static void SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x11422A0", Offset = "0x11422A0", VA = "0x11422A0")]
		public static void SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x11422D4", Offset = "0x11422D4", VA = "0x11422D4")]
		public static void SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x1142308", Offset = "0x1142308", VA = "0x1142308")]
		public static void ViewSource(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x1142334", Offset = "0x1142334", VA = "0x1142334")]
		public static void CopyToClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x1142360", Offset = "0x1142360", VA = "0x1142360")]
		public static void PasteFromClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x114238C", Offset = "0x114238C", VA = "0x114238C")]
		public static void Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x1142504", Offset = "0x1142504", VA = "0x1142504")]
		public static void StopFind(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x1142530", Offset = "0x1142530", VA = "0x1142530")]
		public static void GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x1142574", Offset = "0x1142574", VA = "0x1142574")]
		public static void SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath = "/", uint nExpires = 0u, bool bSecure = false, bool bHTTPOnly = false)
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x1142958", Offset = "0x1142958", VA = "0x1142958")]
		public static void SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x11429AC", Offset = "0x11429AC", VA = "0x11429AC")]
		public static void SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x11429E0", Offset = "0x11429E0", VA = "0x11429E0")]
		public static void AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x1142A14", Offset = "0x1142A14", VA = "0x1142A14")]
		public static void JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x1142A48", Offset = "0x1142A48", VA = "0x1142A48")]
		public static void FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles)
		{
		}
	}
	[Token(Token = "0x2000209")]
	public static class SteamHTTP
	{
		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x1142A7C", Offset = "0x1142A7C", VA = "0x1142A7C")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x1142C30", Offset = "0x1142C30", VA = "0x1142C30")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x1142C64", Offset = "0x1142C64", VA = "0x1142C64")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x1142C98", Offset = "0x1142C98", VA = "0x1142C98")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x1142EE8", Offset = "0x1142EE8", VA = "0x1142EE8")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x1143138", Offset = "0x1143138", VA = "0x1143138")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x114316C", Offset = "0x114316C", VA = "0x114316C")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x11431A0", Offset = "0x11431A0", VA = "0x11431A0")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x11431CC", Offset = "0x11431CC", VA = "0x11431CC")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x11431F8", Offset = "0x11431F8", VA = "0x11431F8")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x1143374", Offset = "0x1143374", VA = "0x1143374")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x11434F8", Offset = "0x11434F8", VA = "0x11434F8")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x114352C", Offset = "0x114352C", VA = "0x114352C")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x1143570", Offset = "0x1143570", VA = "0x1143570")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x11435BC", Offset = "0x11435BC", VA = "0x11435BC")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x11435E8", Offset = "0x11435E8", VA = "0x11435E8")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x114361C", Offset = "0x114361C", VA = "0x114361C")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x11437A0", Offset = "0x11437A0", VA = "0x11437A0")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x1143828", Offset = "0x1143828", VA = "0x1143828")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x1143854", Offset = "0x1143854", VA = "0x1143854")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x1143B84", Offset = "0x1143B84", VA = "0x1143B84")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x1143BB8", Offset = "0x1143BB8", VA = "0x1143BB8")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x1143D2C", Offset = "0x1143D2C", VA = "0x1143D2C")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x1143D60", Offset = "0x1143D60", VA = "0x1143D60")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x1143D94", Offset = "0x1143D94", VA = "0x1143D94")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200020A")]
	public static class SteamInventory
	{
		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x1143DC8", Offset = "0x1143DC8", VA = "0x1143DC8")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x1143DF4", Offset = "0x1143DF4", VA = "0x1143DF4")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x1143E38", Offset = "0x1143E38", VA = "0x1143E38")]
		public static bool GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x1144060", Offset = "0x1144060", VA = "0x1144060")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x114408C", Offset = "0x114408C", VA = "0x114408C")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x11440C0", Offset = "0x11440C0", VA = "0x11440C0")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x11440EC", Offset = "0x11440EC", VA = "0x11440EC")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x1144118", Offset = "0x1144118", VA = "0x1144118")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x114415C", Offset = "0x114415C", VA = "0x114415C")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x11441A0", Offset = "0x11441A0", VA = "0x11441A0")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x11441EC", Offset = "0x11441EC", VA = "0x11441EC")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x1144238", Offset = "0x1144238", VA = "0x1144238")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x1144264", Offset = "0x1144264", VA = "0x1144264")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x1144298", Offset = "0x1144298", VA = "0x1144298")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x11442DC", Offset = "0x11442DC", VA = "0x11442DC")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x1144320", Offset = "0x1144320", VA = "0x1144320")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x1144394", Offset = "0x1144394", VA = "0x1144394")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x11443E0", Offset = "0x11443E0", VA = "0x11443E0")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x11443FC", Offset = "0x11443FC", VA = "0x11443FC")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x1144430", Offset = "0x1144430", VA = "0x1144430")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x11444AC", Offset = "0x11444AC", VA = "0x11444AC")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x11444C8", Offset = "0x11444C8", VA = "0x11444C8")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x11444FC", Offset = "0x11444FC", VA = "0x11444FC")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x1144714", Offset = "0x1144714", VA = "0x1144714")]
		public static SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x1144790", Offset = "0x1144790", VA = "0x1144790")]
		public static bool GetEligiblePromoItemDefinitionIDs(CSteamID steamID, SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200020B")]
	public static class SteamMatchmaking
	{
		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x1144DD8", Offset = "0x1144DD8", VA = "0x1144DD8")]
		public static int GetFavoriteGameCount()
		{
			return default(int);
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x1144DF4", Offset = "0x1144DF4", VA = "0x1144DF4")]
		public static bool GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x1144E68", Offset = "0x1144E68", VA = "0x1144E68")]
		public static int AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
		{
			return default(int);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x1144ECC", Offset = "0x1144ECC", VA = "0x1144ECC")]
		public static bool RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x1144F28", Offset = "0x1144F28", VA = "0x1144F28")]
		public static SteamAPICall_t RequestLobbyList()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x1144F9C", Offset = "0x1144F9C", VA = "0x1144F9C")]
		public static void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x11451D0", Offset = "0x11451D0", VA = "0x11451D0")]
		public static void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x1145340", Offset = "0x1145340", VA = "0x1145340")]
		public static void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x11454A0", Offset = "0x11454A0", VA = "0x11454A0")]
		public static void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x11454CC", Offset = "0x11454CC", VA = "0x11454CC")]
		public static void AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x11454F8", Offset = "0x11454F8", VA = "0x11454F8")]
		public static void AddRequestLobbyListResultCountFilter(int cMaxResults)
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x1145524", Offset = "0x1145524", VA = "0x1145524")]
		public static void AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x1145550", Offset = "0x1145550", VA = "0x1145550")]
		public static CSteamID GetLobbyByIndex(int iLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x11455D0", Offset = "0x11455D0", VA = "0x11455D0")]
		public static SteamAPICall_t CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x114565C", Offset = "0x114565C", VA = "0x114565C")]
		public static SteamAPICall_t JoinLobby(CSteamID steamIDLobby)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x11456D8", Offset = "0x11456D8", VA = "0x11456D8")]
		public static void LeaveLobby(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x1145704", Offset = "0x1145704", VA = "0x1145704")]
		public static bool InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x1145738", Offset = "0x1145738", VA = "0x1145738")]
		public static int GetNumLobbyMembers(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x1145764", Offset = "0x1145764", VA = "0x1145764")]
		public static CSteamID GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x11457F4", Offset = "0x11457F4", VA = "0x11457F4")]
		public static string GetLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x1145974", Offset = "0x1145974", VA = "0x1145974")]
		public static bool SetLobbyData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x1145BC4", Offset = "0x1145BC4", VA = "0x1145BC4")]
		public static int GetLobbyDataCount(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x1145BF0", Offset = "0x1145BF0", VA = "0x1145BF0")]
		public static bool GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, out string pchKey, int cchKeyBufferSize, out string pchValue, int cchValueBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x1145D48", Offset = "0x1145D48", VA = "0x1145D48")]
		public static bool DeleteLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x1145EBC", Offset = "0x1145EBC", VA = "0x1145EBC")]
		public static string GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x1146044", Offset = "0x1146044", VA = "0x1146044")]
		public static void SetLobbyMemberData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x1146278", Offset = "0x1146278", VA = "0x1146278")]
		public static bool SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x11462BC", Offset = "0x11462BC", VA = "0x11462BC")]
		public static int GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x1146320", Offset = "0x1146320", VA = "0x1146320")]
		public static bool RequestLobbyData(CSteamID steamIDLobby)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x114634C", Offset = "0x114634C", VA = "0x114634C")]
		public static void SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer)
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x1146398", Offset = "0x1146398", VA = "0x1146398")]
		public static bool GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x11463E4", Offset = "0x11463E4", VA = "0x11463E4")]
		public static bool SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x1146418", Offset = "0x1146418", VA = "0x1146418")]
		public static int GetLobbyMemberLimit(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x1146444", Offset = "0x1146444", VA = "0x1146444")]
		public static bool SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x1146478", Offset = "0x1146478", VA = "0x1146478")]
		public static bool SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x11464AC", Offset = "0x11464AC", VA = "0x11464AC")]
		public static CSteamID GetLobbyOwner(CSteamID steamIDLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x114652C", Offset = "0x114652C", VA = "0x114652C")]
		public static bool SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x1146560", Offset = "0x1146560", VA = "0x1146560")]
		public static bool SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200020C")]
	public static class SteamMatchmakingServers
	{
		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x1146594", Offset = "0x1146594", VA = "0x1146594")]
		public static HServerListRequest RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x1146680", Offset = "0x1146680", VA = "0x1146680")]
		public static HServerListRequest RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x114671C", Offset = "0x114671C", VA = "0x114671C")]
		public static HServerListRequest RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x1146808", Offset = "0x1146808", VA = "0x1146808")]
		public static HServerListRequest RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x11468F4", Offset = "0x11468F4", VA = "0x11468F4")]
		public static HServerListRequest RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x11469E0", Offset = "0x11469E0", VA = "0x11469E0")]
		public static HServerListRequest RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x1146ACC", Offset = "0x1146ACC", VA = "0x1146ACC")]
		public static void ReleaseRequest(HServerListRequest hServerListRequest)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x1146AF8", Offset = "0x1146AF8", VA = "0x1146AF8")]
		public static gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
		{
			return null;
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x1146C30", Offset = "0x1146C30", VA = "0x1146C30")]
		public static void CancelQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x1146C5C", Offset = "0x1146C5C", VA = "0x1146C5C")]
		public static void RefreshQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x1146C88", Offset = "0x1146C88", VA = "0x1146C88")]
		public static bool IsRefreshing(HServerListRequest hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x1146CB4", Offset = "0x1146CB4", VA = "0x1146CB4")]
		public static int GetServerCount(HServerListRequest hRequest)
		{
			return default(int);
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x1146CE0", Offset = "0x1146CE0", VA = "0x1146CE0")]
		public static void RefreshServer(HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x1146D14", Offset = "0x1146D14", VA = "0x1146D14")]
		public static HServerQuery PingServer(uint unIP, ushort usPort, ISteamMatchmakingPingResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x1146DC0", Offset = "0x1146DC0", VA = "0x1146DC0")]
		public static HServerQuery PlayerDetails(uint unIP, ushort usPort, ISteamMatchmakingPlayersResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x1146E6C", Offset = "0x1146E6C", VA = "0x1146E6C")]
		public static HServerQuery ServerRules(uint unIP, ushort usPort, ISteamMatchmakingRulesResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x1146F18", Offset = "0x1146F18", VA = "0x1146F18")]
		public static void CancelServerQuery(HServerQuery hServerQuery)
		{
		}
	}
	[Token(Token = "0x200020D")]
	public static class SteamMusic
	{
		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x1146F44", Offset = "0x1146F44", VA = "0x1146F44")]
		public static bool BIsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x1146F60", Offset = "0x1146F60", VA = "0x1146F60")]
		public static bool BIsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x1146F7C", Offset = "0x1146F7C", VA = "0x1146F7C")]
		public static AudioPlayback_Status GetPlaybackStatus()
		{
			return default(AudioPlayback_Status);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x1146F98", Offset = "0x1146F98", VA = "0x1146F98")]
		public static void Play()
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x1146FB4", Offset = "0x1146FB4", VA = "0x1146FB4")]
		public static void Pause()
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x1146FD0", Offset = "0x1146FD0", VA = "0x1146FD0")]
		public static void PlayPrevious()
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x1146FEC", Offset = "0x1146FEC", VA = "0x1146FEC")]
		public static void PlayNext()
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x1147008", Offset = "0x1147008", VA = "0x1147008")]
		public static void SetVolume(float flVolume)
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x1147034", Offset = "0x1147034", VA = "0x1147034")]
		public static float GetVolume()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200020E")]
	public static class SteamMusicRemote
	{
		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x1147050", Offset = "0x1147050", VA = "0x1147050")]
		public static bool RegisterSteamMusicRemote(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x11471BC", Offset = "0x11471BC", VA = "0x11471BC")]
		public static bool DeregisterSteamMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x11471D8", Offset = "0x11471D8", VA = "0x11471D8")]
		public static bool BIsCurrentMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x11471F4", Offset = "0x11471F4", VA = "0x11471F4")]
		public static bool BActivationSuccess(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x1147220", Offset = "0x1147220", VA = "0x1147220")]
		public static bool SetDisplayName(string pchDisplayName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x114738C", Offset = "0x114738C", VA = "0x114738C")]
		public static bool SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x11473C0", Offset = "0x11473C0", VA = "0x11473C0")]
		public static bool EnablePlayPrevious(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x11473EC", Offset = "0x11473EC", VA = "0x11473EC")]
		public static bool EnablePlayNext(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x1147418", Offset = "0x1147418", VA = "0x1147418")]
		public static bool EnableShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x1147444", Offset = "0x1147444", VA = "0x1147444")]
		public static bool EnableLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x1147470", Offset = "0x1147470", VA = "0x1147470")]
		public static bool EnableQueue(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x114749C", Offset = "0x114749C", VA = "0x114749C")]
		public static bool EnablePlaylists(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x11474C8", Offset = "0x11474C8", VA = "0x11474C8")]
		public static bool UpdatePlaybackStatus(AudioPlayback_Status nStatus)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x11474F4", Offset = "0x11474F4", VA = "0x11474F4")]
		public static bool UpdateShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x1147520", Offset = "0x1147520", VA = "0x1147520")]
		public static bool UpdateLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x114754C", Offset = "0x114754C", VA = "0x114754C")]
		public static bool UpdateVolume(float flValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x1147578", Offset = "0x1147578", VA = "0x1147578")]
		public static bool CurrentEntryWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x1147594", Offset = "0x1147594", VA = "0x1147594")]
		public static bool CurrentEntryIsAvailable(bool bAvailable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x11475C0", Offset = "0x11475C0", VA = "0x11475C0")]
		public static bool UpdateCurrentEntryText(string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x114772C", Offset = "0x114772C", VA = "0x114772C")]
		public static bool UpdateCurrentEntryElapsedSeconds(int nValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x1147758", Offset = "0x1147758", VA = "0x1147758")]
		public static bool UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x114778C", Offset = "0x114778C", VA = "0x114778C")]
		public static bool CurrentEntryDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x11477A8", Offset = "0x11477A8", VA = "0x11477A8")]
		public static bool QueueWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x11477C4", Offset = "0x11477C4", VA = "0x11477C4")]
		public static bool ResetQueueEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x11477E0", Offset = "0x11477E0", VA = "0x11477E0")]
		public static bool SetQueueEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x114795C", Offset = "0x114795C", VA = "0x114795C")]
		public static bool SetCurrentQueueEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x1147988", Offset = "0x1147988", VA = "0x1147988")]
		public static bool QueueDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x11479A4", Offset = "0x11479A4", VA = "0x11479A4")]
		public static bool PlaylistWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x11479C0", Offset = "0x11479C0", VA = "0x11479C0")]
		public static bool ResetPlaylistEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x11479DC", Offset = "0x11479DC", VA = "0x11479DC")]
		public static bool SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x1147B58", Offset = "0x1147B58", VA = "0x1147B58")]
		public static bool SetCurrentPlaylistEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x1147B84", Offset = "0x1147B84", VA = "0x1147B84")]
		public static bool PlaylistDidChange()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200020F")]
	public static class SteamNetworking
	{
		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x1147BA0", Offset = "0x1147BA0", VA = "0x1147BA0")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x1147BFC", Offset = "0x1147BFC", VA = "0x1147BFC")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x1147C30", Offset = "0x1147C30", VA = "0x1147C30")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x1147C8C", Offset = "0x1147C8C", VA = "0x1147C8C")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x1147CB8", Offset = "0x1147CB8", VA = "0x1147CB8")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x1147CE4", Offset = "0x1147CE4", VA = "0x1147CE4")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x1147D18", Offset = "0x1147D18", VA = "0x1147D18")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x1147D4C", Offset = "0x1147D4C", VA = "0x1147D4C")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x1147D78", Offset = "0x1147D78", VA = "0x1147D78")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x1147DCC", Offset = "0x1147DCC", VA = "0x1147DCC")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x1147E20", Offset = "0x1147E20", VA = "0x1147E20")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x1147E6C", Offset = "0x1147E6C", VA = "0x1147E6C")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x1147EA0", Offset = "0x1147EA0", VA = "0x1147EA0")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x1147ED4", Offset = "0x1147ED4", VA = "0x1147ED4")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x1147F20", Offset = "0x1147F20", VA = "0x1147F20")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x1147F54", Offset = "0x1147F54", VA = "0x1147F54")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x1147FA0", Offset = "0x1147FA0", VA = "0x1147FA0")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x1147FE4", Offset = "0x1147FE4", VA = "0x1147FE4")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x1148040", Offset = "0x1148040", VA = "0x1148040")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x114809C", Offset = "0x114809C", VA = "0x114809C")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x11480E0", Offset = "0x11480E0", VA = "0x11480E0")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x114810C", Offset = "0x114810C", VA = "0x114810C")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000210")]
	public static class SteamRemoteStorage
	{
		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x1148138", Offset = "0x1148138", VA = "0x1148138")]
		public static bool FileWrite(string pchFile, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x11482B4", Offset = "0x11482B4", VA = "0x11482B4")]
		public static int FileRead(string pchFile, byte[] pvData, int cubDataToRead)
		{
			return default(int);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x1148430", Offset = "0x1148430", VA = "0x1148430")]
		public static SteamAPICall_t FileWriteAsync(string pchFile, byte[] pvData, uint cubData)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x11485D8", Offset = "0x11485D8", VA = "0x11485D8")]
		public static SteamAPICall_t FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x1148780", Offset = "0x1148780", VA = "0x1148780")]
		public static bool FileReadAsyncComplete(SteamAPICall_t hReadCall, byte[] pvBuffer, uint cubToRead)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x11487C4", Offset = "0x11487C4", VA = "0x11487C4")]
		public static bool FileForget(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x1148930", Offset = "0x1148930", VA = "0x1148930")]
		public static bool FileDelete(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x1148A9C", Offset = "0x1148A9C", VA = "0x1148A9C")]
		public static SteamAPICall_t FileShare(string pchFile)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x1148C34", Offset = "0x1148C34", VA = "0x1148C34")]
		public static bool SetSyncPlatforms(string pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x1148DA8", Offset = "0x1148DA8", VA = "0x1148DA8")]
		public static UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x1148F54", Offset = "0x1148F54", VA = "0x1148F54")]
		public static bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x1148F98", Offset = "0x1148F98", VA = "0x1148F98")]
		public static bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x1148FC4", Offset = "0x1148FC4", VA = "0x1148FC4")]
		public static bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x1148FF0", Offset = "0x1148FF0", VA = "0x1148FF0")]
		public static bool FileExists(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x114915C", Offset = "0x114915C", VA = "0x114915C")]
		public static bool FilePersisted(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x11492C8", Offset = "0x11492C8", VA = "0x11492C8")]
		public static int GetFileSize(string pchFile)
		{
			return default(int);
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x1149434", Offset = "0x1149434", VA = "0x1149434")]
		public static long GetFileTimestamp(string pchFile)
		{
			return default(long);
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x11495A0", Offset = "0x11495A0", VA = "0x11495A0")]
		public static ERemoteStoragePlatform GetSyncPlatforms(string pchFile)
		{
			return default(ERemoteStoragePlatform);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x114970C", Offset = "0x114970C", VA = "0x114970C")]
		public static int GetFileCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x1149728", Offset = "0x1149728", VA = "0x1149728")]
		public static string GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
		{
			return null;
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x1149764", Offset = "0x1149764", VA = "0x1149764")]
		public static bool GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x1149798", Offset = "0x1149798", VA = "0x1149798")]
		public static bool IsCloudEnabledForAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x11497B4", Offset = "0x11497B4", VA = "0x11497B4")]
		public static bool IsCloudEnabledForApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x11497D0", Offset = "0x11497D0", VA = "0x11497D0")]
		public static void SetCloudEnabledForApp(bool bEnabled)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x11497FC", Offset = "0x11497FC", VA = "0x11497FC")]
		public static SteamAPICall_t UGCDownload(UGCHandle_t hContent, uint unPriority)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x1149888", Offset = "0x1149888", VA = "0x1149888")]
		public static bool GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x11498CC", Offset = "0x11498CC", VA = "0x11498CC")]
		public static bool GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out string ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x1149954", Offset = "0x1149954", VA = "0x1149954")]
		public static int UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction)
		{
			return default(int);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x11499B0", Offset = "0x11499B0", VA = "0x11499B0")]
		public static int GetCachedUGCCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x11499CC", Offset = "0x11499CC", VA = "0x11499CC")]
		public static UGCHandle_t GetCachedUGCHandle(int iCachedContent)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x1149A4C", Offset = "0x1149A4C", VA = "0x1149A4C")]
		public static SteamAPICall_t PublishWorkshopFile(string pchFile, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags, EWorkshopFileType eWorkshopFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x1149EC0", Offset = "0x1149EC0", VA = "0x1149EC0")]
		public static PublishedFileUpdateHandle_t CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x1149F3C", Offset = "0x1149F3C", VA = "0x1149F3C")]
		public static bool UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x114A0B0", Offset = "0x114A0B0", VA = "0x114A0B0")]
		public static bool UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, string pchPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x114A224", Offset = "0x114A224", VA = "0x114A224")]
		public static bool UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x114A398", Offset = "0x114A398", VA = "0x114A398")]
		public static bool UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x114A50C", Offset = "0x114A50C", VA = "0x114A50C")]
		public static bool UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x114A540", Offset = "0x114A540", VA = "0x114A540")]
		public static bool UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x114A5C4", Offset = "0x114A5C4", VA = "0x114A5C4")]
		public static SteamAPICall_t CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x114A640", Offset = "0x114A640", VA = "0x114A640")]
		public static SteamAPICall_t GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x114A6CC", Offset = "0x114A6CC", VA = "0x114A6CC")]
		public static SteamAPICall_t DeletePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x114A748", Offset = "0x114A748", VA = "0x114A748")]
		public static SteamAPICall_t EnumerateUserPublishedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x114A7C4", Offset = "0x114A7C4", VA = "0x114A7C4")]
		public static SteamAPICall_t SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x114A840", Offset = "0x114A840", VA = "0x114A840")]
		public static SteamAPICall_t EnumerateUserSubscribedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x114A8BC", Offset = "0x114A8BC", VA = "0x114A8BC")]
		public static SteamAPICall_t UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x114A938", Offset = "0x114A938", VA = "0x114A938")]
		public static bool UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, string pchChangeDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x114AAAC", Offset = "0x114AAAC", VA = "0x114AAAC")]
		public static SteamAPICall_t GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x114AB28", Offset = "0x114AB28", VA = "0x114AB28")]
		public static SteamAPICall_t UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x114ABB4", Offset = "0x114ABB4", VA = "0x114ABB4")]
		public static SteamAPICall_t GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x114AC30", Offset = "0x114AC30", VA = "0x114AC30")]
		public static SteamAPICall_t EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IList<string> pRequiredTags, IList<string> pExcludedTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x114AD28", Offset = "0x114AD28", VA = "0x114AD28")]
		public static SteamAPICall_t PublishVideo(EWorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x114B264", Offset = "0x114B264", VA = "0x114B264")]
		public static SteamAPICall_t SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x114B2F0", Offset = "0x114B2F0", VA = "0x114B2F0")]
		public static SteamAPICall_t EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x114B37C", Offset = "0x114B37C", VA = "0x114B37C")]
		public static SteamAPICall_t EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IList<string> pTags, IList<string> pUserTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x114B48C", Offset = "0x114B48C", VA = "0x114B48C")]
		public static SteamAPICall_t UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, uint unPriority)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000211")]
	public static class SteamScreenshots
	{
		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x114B634", Offset = "0x114B634", VA = "0x114B634")]
		public static ScreenshotHandle WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x114B6D8", Offset = "0x114B6D8", VA = "0x114B6D8")]
		public static ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x114B958", Offset = "0x114B958", VA = "0x114B958")]
		public static void TriggerScreenshot()
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x114B974", Offset = "0x114B974", VA = "0x114B974")]
		public static void HookScreenshots(bool bHook)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x114B9A0", Offset = "0x114B9A0", VA = "0x114B9A0")]
		public static bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x114BB14", Offset = "0x114BB14", VA = "0x114BB14")]
		public static bool TagUser(ScreenshotHandle hScreenshot, CSteamID steamID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x114BB48", Offset = "0x114BB48", VA = "0x114BB48")]
		public static bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x114BB7C", Offset = "0x114BB7C", VA = "0x114BB7C")]
		public static bool IsScreenshotsHooked()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x114BB98", Offset = "0x114BB98", VA = "0x114BB98")]
		public static ScreenshotHandle AddVRScreenshotToLibrary(EVRScreenshotType eType, string pchFilename, string pchVRFilename)
		{
			return default(ScreenshotHandle);
		}
	}
	[Token(Token = "0x2000212")]
	public static class SteamUGC
	{
		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x114BE08", Offset = "0x114BE08", VA = "0x114BE08")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x114BED0", Offset = "0x114BED0", VA = "0x114BED0")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x114BF80", Offset = "0x114BF80", VA = "0x114BF80")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x114C010", Offset = "0x114C010", VA = "0x114C010")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x114C08C", Offset = "0x114C08C", VA = "0x114C08C")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x114C0D0", Offset = "0x114C0D0", VA = "0x114C0D0")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x114C1BC", Offset = "0x114C1BC", VA = "0x114C1BC")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x114C2A8", Offset = "0x114C2A8", VA = "0x114C2A8")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x114C2F4", Offset = "0x114C2F4", VA = "0x114C2F4")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x114C340", Offset = "0x114C340", VA = "0x114C340")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x114C374", Offset = "0x114C374", VA = "0x114C374")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out string pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x114C4E8", Offset = "0x114C4E8", VA = "0x114C4E8")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x114C51C", Offset = "0x114C51C", VA = "0x114C51C")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x114C67C", Offset = "0x114C67C", VA = "0x114C67C")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x114C6A8", Offset = "0x114C6A8", VA = "0x114C6A8")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x114C81C", Offset = "0x114C81C", VA = "0x114C81C")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x114C990", Offset = "0x114C990", VA = "0x114C990")]
		public static bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x114C9C4", Offset = "0x114C9C4", VA = "0x114C9C4")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x114C9F8", Offset = "0x114C9F8", VA = "0x114C9F8")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x114CA2C", Offset = "0x114CA2C", VA = "0x114CA2C")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x114CA60", Offset = "0x114CA60", VA = "0x114CA60")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x114CA94", Offset = "0x114CA94", VA = "0x114CA94")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x114CAC8", Offset = "0x114CAC8", VA = "0x114CAC8")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x114CAFC", Offset = "0x114CAFC", VA = "0x114CAFC")]
		public static bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x114CB30", Offset = "0x114CB30", VA = "0x114CB30")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x114CCA4", Offset = "0x114CCA4", VA = "0x114CCA4")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x114CCD8", Offset = "0x114CCD8", VA = "0x114CCD8")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x114CE4C", Offset = "0x114CE4C", VA = "0x114CE4C")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x114CE80", Offset = "0x114CE80", VA = "0x114CE80")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x114CFF4", Offset = "0x114CFF4", VA = "0x114CFF4")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x114D028", Offset = "0x114D028", VA = "0x114D028")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x114D278", Offset = "0x114D278", VA = "0x114D278")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x114D304", Offset = "0x114D304", VA = "0x114D304")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x114D390", Offset = "0x114D390", VA = "0x114D390")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x114D420", Offset = "0x114D420", VA = "0x114D420")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x114D594", Offset = "0x114D594", VA = "0x114D594")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x114D708", Offset = "0x114D708", VA = "0x114D708")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x114D87C", Offset = "0x114D87C", VA = "0x114D87C")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x114D9F0", Offset = "0x114D9F0", VA = "0x114D9F0")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x114DA24", Offset = "0x114DA24", VA = "0x114DA24")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x114DAA8", Offset = "0x114DAA8", VA = "0x114DAA8")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x114DC1C", Offset = "0x114DC1C", VA = "0x114DC1C")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x114DD90", Offset = "0x114DD90", VA = "0x114DD90")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x114DF04", Offset = "0x114DF04", VA = "0x114DF04")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x114E154", Offset = "0x114E154", VA = "0x114E154")]
		public static bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, EItemPreviewType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x114E2D0", Offset = "0x114E2D0", VA = "0x114E2D0")]
		public static bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x114E444", Offset = "0x114E444", VA = "0x114E444")]
		public static bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x114E5C0", Offset = "0x114E5C0", VA = "0x114E5C0")]
		public static bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x114E73C", Offset = "0x114E73C", VA = "0x114E73C")]
		public static bool RemoveItemPreview(UGCUpdateHandle_t handle, uint index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x114E770", Offset = "0x114E770", VA = "0x114E770")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x114E910", Offset = "0x114E910", VA = "0x114E910")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x114E954", Offset = "0x114E954", VA = "0x114E954")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x114E9E0", Offset = "0x114E9E0", VA = "0x114E9E0")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x114EA5C", Offset = "0x114EA5C", VA = "0x114EA5C")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x114EAE8", Offset = "0x114EAE8", VA = "0x114EAE8")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x114EB74", Offset = "0x114EB74", VA = "0x114EB74")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x114EBF0", Offset = "0x114EBF0", VA = "0x114EBF0")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x114EC6C", Offset = "0x114EC6C", VA = "0x114EC6C")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x114EC88", Offset = "0x114EC88", VA = "0x114EC88")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x114ECBC", Offset = "0x114ECBC", VA = "0x114ECBC")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x114ECE8", Offset = "0x114ECE8", VA = "0x114ECE8")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x114EDE4", Offset = "0x114EDE4", VA = "0x114EDE4")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x114EE28", Offset = "0x114EE28", VA = "0x114EE28")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x114EE5C", Offset = "0x114EE5C", VA = "0x114EE5C")]
		public static bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x114EFD0", Offset = "0x114EFD0", VA = "0x114EFD0")]
		public static void SuspendDownloads(bool bSuspend)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x114EFFC", Offset = "0x114EFFC", VA = "0x114EFFC")]
		public static SteamAPICall_t StartPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x114F088", Offset = "0x114F088", VA = "0x114F088")]
		public static SteamAPICall_t StopPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x114F114", Offset = "0x114F114", VA = "0x114F114")]
		public static SteamAPICall_t StopPlaytimeTrackingForAllItems()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x114F188", Offset = "0x114F188", VA = "0x114F188")]
		public static SteamAPICall_t AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x114F214", Offset = "0x114F214", VA = "0x114F214")]
		public static SteamAPICall_t RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000213")]
	public static class SteamUnifiedMessages
	{
		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x114F2A0", Offset = "0x114F2A0", VA = "0x114F2A0")]
		public static ClientUnifiedMessageHandle SendMethod(string pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x114F464", Offset = "0x114F464", VA = "0x114F464")]
		public static bool GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x114F4A8", Offset = "0x114F4A8", VA = "0x114F4A8")]
		public static bool GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x114F4F4", Offset = "0x114F4F4", VA = "0x114F4F4")]
		public static bool ReleaseMethod(ClientUnifiedMessageHandle hHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x114F520", Offset = "0x114F520", VA = "0x114F520")]
		public static bool SendNotification(string pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000214")]
	public static class SteamUser
	{
		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x114F69C", Offset = "0x114F69C", VA = "0x114F69C")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x114F6C8", Offset = "0x114F6C8", VA = "0x114F6C8")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x114F6E4", Offset = "0x114F6E4", VA = "0x114F6E4")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x114F75C", Offset = "0x114F75C", VA = "0x114F75C")]
		public static int InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
		{
			return default(int);
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x114F7C0", Offset = "0x114F7C0", VA = "0x114F7C0")]
		public static void TerminateGameConnection(uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x114F7F4", Offset = "0x114F7F4", VA = "0x114F7F4")]
		public static void TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, string pchExtraInfo = "")
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x114F964", Offset = "0x114F964", VA = "0x114F964")]
		public static bool GetUserDataFolder(out string pchBuffer, int cubBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x114FA34", Offset = "0x114FA34", VA = "0x114FA34")]
		public static void StartVoiceRecording()
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x114FA50", Offset = "0x114FA50", VA = "0x114FA50")]
		public static void StopVoiceRecording()
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x114FA6C", Offset = "0x114FA6C", VA = "0x114FA6C")]
		public static EVoiceResult GetAvailableVoice(out uint pcbCompressed)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x114FAC0", Offset = "0x114FAC0", VA = "0x114FAC0")]
		public static EVoiceResult GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x114FB54", Offset = "0x114FB54", VA = "0x114FB54")]
		public static EVoiceResult DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x114FBB8", Offset = "0x114FBB8", VA = "0x114FBB8")]
		public static uint GetVoiceOptimalSampleRate()
		{
			return default(uint);
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x114FBD4", Offset = "0x114FBD4", VA = "0x114FBD4")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x114FC74", Offset = "0x114FC74", VA = "0x114FC74")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x114FCB8", Offset = "0x114FCB8", VA = "0x114FCB8")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x114FCE4", Offset = "0x114FCE4", VA = "0x114FCE4")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x114FD10", Offset = "0x114FD10", VA = "0x114FD10")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x114FD44", Offset = "0x114FD44", VA = "0x114FD44")]
		public static bool BIsBehindNAT()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x114FD60", Offset = "0x114FD60", VA = "0x114FD60")]
		public static void AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x114FDA4", Offset = "0x114FDA4", VA = "0x114FDA4")]
		public static SteamAPICall_t RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x114FE30", Offset = "0x114FE30", VA = "0x114FE30")]
		public static bool GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x114FE74", Offset = "0x114FE74", VA = "0x114FE74")]
		public static int GetGameBadgeLevel(int nSeries, bool bFoil)
		{
			return default(int);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x114FEA8", Offset = "0x114FEA8", VA = "0x114FEA8")]
		public static int GetPlayerSteamLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x114FEC4", Offset = "0x114FEC4", VA = "0x114FEC4")]
		public static SteamAPICall_t RequestStoreAuthURL(string pchRedirectURL)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x115005C", Offset = "0x115005C", VA = "0x115005C")]
		public static bool BIsPhoneVerified()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x1150078", Offset = "0x1150078", VA = "0x1150078")]
		public static bool BIsTwoFactorEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x1150094", Offset = "0x1150094", VA = "0x1150094")]
		public static bool BIsPhoneIdentifying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x11500B0", Offset = "0x11500B0", VA = "0x11500B0")]
		public static bool BIsPhoneRequiringVerification()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000215")]
	public static class SteamUserStats
	{
		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x11500CC", Offset = "0x11500CC", VA = "0x11500CC")]
		public static bool RequestCurrentStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x11500E8", Offset = "0x11500E8", VA = "0x11500E8")]
		public static bool GetStat(string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x115025C", Offset = "0x115025C", VA = "0x115025C")]
		public static bool GetStat(string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x11503D0", Offset = "0x11503D0", VA = "0x11503D0")]
		public static bool SetStat(string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x1150544", Offset = "0x1150544", VA = "0x1150544")]
		public static bool SetStat(string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x11506B8", Offset = "0x11506B8", VA = "0x11506B8")]
		public static bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x115083C", Offset = "0x115083C", VA = "0x115083C")]
		public static bool GetAchievement(string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x11509B0", Offset = "0x11509B0", VA = "0x11509B0")]
		public static bool SetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x1150B1C", Offset = "0x1150B1C", VA = "0x1150B1C")]
		public static bool ClearAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x1150C88", Offset = "0x1150C88", VA = "0x1150C88")]
		public static bool GetAchievementAndUnlockTime(string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x1150E04", Offset = "0x1150E04", VA = "0x1150E04")]
		public static bool StoreStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x1150E20", Offset = "0x1150E20", VA = "0x1150E20")]
		public static int GetAchievementIcon(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x1150F8C", Offset = "0x1150F8C", VA = "0x1150F8C")]
		public static string GetAchievementDisplayAttribute(string pchName, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x11511D4", Offset = "0x11511D4", VA = "0x11511D4")]
		public static bool IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x1151350", Offset = "0x1151350", VA = "0x1151350")]
		public static uint GetNumAchievements()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x115136C", Offset = "0x115136C", VA = "0x115136C")]
		public static string GetAchievementName(uint iAchievement)
		{
			return null;
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x11513A0", Offset = "0x11513A0", VA = "0x11513A0")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x115141C", Offset = "0x115141C", VA = "0x115141C")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x1151598", Offset = "0x1151598", VA = "0x1151598")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x1151714", Offset = "0x1151714", VA = "0x1151714")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x1151890", Offset = "0x1151890", VA = "0x1151890")]
		public static bool GetUserAchievementAndUnlockTime(CSteamID steamIDUser, string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x1151A14", Offset = "0x1151A14", VA = "0x1151A14")]
		public static bool ResetAllStats(bool bAchievementsToo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x1151A40", Offset = "0x1151A40", VA = "0x1151A40")]
		public static SteamAPICall_t FindOrCreateLeaderboard(string pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x1151BE8", Offset = "0x1151BE8", VA = "0x1151BE8")]
		public static SteamAPICall_t FindLeaderboard(string pchLeaderboardName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x1151D80", Offset = "0x1151D80", VA = "0x1151D80")]
		public static string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
		{
			return null;
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x1151DB4", Offset = "0x1151DB4", VA = "0x1151DB4")]
		public static int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(int);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x1151DE0", Offset = "0x1151DE0", VA = "0x1151DE0")]
		public static ELeaderboardSortMethod GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardSortMethod);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x1151E0C", Offset = "0x1151E0C", VA = "0x1151E0C")]
		public static ELeaderboardDisplayType GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardDisplayType);
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x1151E38", Offset = "0x1151E38", VA = "0x1151E38")]
		public static SteamAPICall_t DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x1151EDC", Offset = "0x1151EDC", VA = "0x1151EDC")]
		public static SteamAPICall_t DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID[] prgUsers, int cUsers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x1151F70", Offset = "0x1151F70", VA = "0x1151F70")]
		public static bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, int[] pDetails, int cDetailsMax)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x1151FCC", Offset = "0x1151FCC", VA = "0x1151FCC")]
		public static SteamAPICall_t UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x1152078", Offset = "0x1152078", VA = "0x1152078")]
		public static SteamAPICall_t AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x1152104", Offset = "0x1152104", VA = "0x1152104")]
		public static SteamAPICall_t GetNumberOfCurrentPlayers()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x1152178", Offset = "0x1152178", VA = "0x1152178")]
		public static SteamAPICall_t RequestGlobalAchievementPercentages()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x11521EC", Offset = "0x11521EC", VA = "0x11521EC")]
		public static int GetMostAchievedAchievementInfo(out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x11522DC", Offset = "0x11522DC", VA = "0x11522DC")]
		public static int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x11523E0", Offset = "0x11523E0", VA = "0x11523E0")]
		public static bool GetAchievementAchievedPercent(string pchName, out float pflPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x1152554", Offset = "0x1152554", VA = "0x1152554")]
		public static SteamAPICall_t RequestGlobalStats(int nHistoryDays)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x11525D0", Offset = "0x11525D0", VA = "0x11525D0")]
		public static bool GetGlobalStat(string pchStatName, out long pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x1152744", Offset = "0x1152744", VA = "0x1152744")]
		public static bool GetGlobalStat(string pchStatName, out double pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x11528B8", Offset = "0x11528B8", VA = "0x11528B8")]
		public static int GetGlobalStatHistory(string pchStatName, long[] pData, uint cubData)
		{
			return default(int);
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x1152A34", Offset = "0x1152A34", VA = "0x1152A34")]
		public static int GetGlobalStatHistory(string pchStatName, double[] pData, uint cubData)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000216")]
	public static class SteamUtils
	{
		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x167A35C", Offset = "0x167A35C", VA = "0x167A35C")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x167A378", Offset = "0x167A378", VA = "0x167A378")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x167A394", Offset = "0x167A394", VA = "0x167A394")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x167A3B0", Offset = "0x167A3B0", VA = "0x167A3B0")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x167A3CC", Offset = "0x167A3CC", VA = "0x167A3CC")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x167A3F0", Offset = "0x167A3F0", VA = "0x167A3F0")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x167A434", Offset = "0x167A434", VA = "0x167A434")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x167A478", Offset = "0x167A478", VA = "0x167A478")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x167A4AC", Offset = "0x167A4AC", VA = "0x167A4AC")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x167A4C8", Offset = "0x167A4C8", VA = "0x167A4C8")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x167A548", Offset = "0x167A548", VA = "0x167A548")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x167A574", Offset = "0x167A574", VA = "0x167A574")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x167A5A8", Offset = "0x167A5A8", VA = "0x167A5A8")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x167A5D4", Offset = "0x167A5D4", VA = "0x167A5D4")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x167A630", Offset = "0x167A630", VA = "0x167A630")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x167A64C", Offset = "0x167A64C", VA = "0x167A64C")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x167A678", Offset = "0x167A678", VA = "0x167A678")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x167A694", Offset = "0x167A694", VA = "0x167A694")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x167A6B0", Offset = "0x167A6B0", VA = "0x167A6B0")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x167A85C", Offset = "0x167A85C", VA = "0x167A85C")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x167AAAC", Offset = "0x167AAAC", VA = "0x167AAAC")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x167AAC8", Offset = "0x167AAC8", VA = "0x167AAC8")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x167AB98", Offset = "0x167AB98", VA = "0x167AB98")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x167ABBC", Offset = "0x167ABBC", VA = "0x167ABBC")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x167ABD8", Offset = "0x167ABD8", VA = "0x167ABD8")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x167AC0C", Offset = "0x167AC0C", VA = "0x167AC0C")]
		public static bool IsSteamInBigPictureMode()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x167AC28", Offset = "0x167AC28", VA = "0x167AC28")]
		public static void StartVRDashboard()
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x167AC44", Offset = "0x167AC44", VA = "0x167AC44")]
		public static bool IsVRHeadsetStreamingEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x167AC60", Offset = "0x167AC60", VA = "0x167AC60")]
		public static void SetVRHeadsetStreamingEnabled(bool bEnabled)
		{
		}
	}
	[Token(Token = "0x2000217")]
	public static class SteamVideo
	{
		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x167AC8C", Offset = "0x167AC8C", VA = "0x167AC8C")]
		public static void GetVideoURL(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x167ACB8", Offset = "0x167ACB8", VA = "0x167ACB8")]
		public static bool IsBroadcasting(out int pnNumViewers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x167ACE4", Offset = "0x167ACE4", VA = "0x167ACE4")]
		public static void GetOPFSettings(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x167AD10", Offset = "0x167AD10", VA = "0x167AD10")]
		public static bool GetOPFStringForApp(AppId_t unVideoAppID, out string pchBuffer, ref int pnBufferSize)
		{
			return default(bool);
		}
	}
	[Serializable]
	[StructLayout(0)]
	[Token(Token = "0x2000218")]
	public class gameserveritem_t
	{
		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public servernetadr_t m_NetAdr;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nPing;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool m_bHadSuccessfulResponse;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool m_bDoNotRefresh;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] m_szGameDir;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] m_szMap;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] m_szGameDescription;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nAppID;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_nPlayers;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int m_nMaxPlayers;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int m_nBotPlayers;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool m_bPassword;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool m_bSecure;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public uint m_ulTimeLastPlayed;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int m_nServerVersion;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] m_szServerName;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte[] m_szGameTags;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CSteamID m_steamID;

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x1684418", Offset = "0x1684418", VA = "0x1684418")]
		public string GetGameDir()
		{
			return null;
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x16844A0", Offset = "0x16844A0", VA = "0x16844A0")]
		public void SetGameDir(string dir)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x1684530", Offset = "0x1684530", VA = "0x1684530")]
		public string GetMap()
		{
			return null;
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x16845B8", Offset = "0x16845B8", VA = "0x16845B8")]
		public void SetMap(string map)
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x1684648", Offset = "0x1684648", VA = "0x1684648")]
		public string GetGameDescription()
		{
			return null;
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x16846D0", Offset = "0x16846D0", VA = "0x16846D0")]
		public void SetGameDescription(string desc)
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x1684760", Offset = "0x1684760", VA = "0x1684760")]
		public string GetServerName()
		{
			return null;
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x1684830", Offset = "0x1684830", VA = "0x1684830")]
		public void SetServerName(string name)
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x16848C0", Offset = "0x16848C0", VA = "0x16848C0")]
		public string GetGameTags()
		{
			return null;
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x1684948", Offset = "0x1684948", VA = "0x1684948")]
		public void SetGameTags(string tags)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x16849D8", Offset = "0x16849D8", VA = "0x16849D8")]
		public gameserveritem_t()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000219")]
	public struct servernetadr_t
	{
		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort m_usConnectionPort;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private ushort m_usQueryPort;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private uint m_unIP;

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x1684C5C", Offset = "0x1684C5C", VA = "0x1684C5C")]
		public void Init(uint ip, ushort usQueryPort, ushort usConnectionPort)
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x1684C6C", Offset = "0x1684C6C", VA = "0x1684C6C")]
		public ushort GetQueryPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x1684C74", Offset = "0x1684C74", VA = "0x1684C74")]
		public void SetQueryPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x1684C7C", Offset = "0x1684C7C", VA = "0x1684C7C")]
		public ushort GetConnectionPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x1684C84", Offset = "0x1684C84", VA = "0x1684C84")]
		public void SetConnectionPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x1684C8C", Offset = "0x1684C8C", VA = "0x1684C8C")]
		public uint GetIP()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x1684C94", Offset = "0x1684C94", VA = "0x1684C94")]
		public void SetIP(uint unIP)
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x1684820", Offset = "0x1684820", VA = "0x1684820")]
		public string GetConnectionAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x1684EB0", Offset = "0x1684EB0", VA = "0x1684EB0")]
		public string GetQueryAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x1684C9C", Offset = "0x1684C9C", VA = "0x1684C9C")]
		public static string ToString(uint unIP, ushort usPort)
		{
			return null;
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x1684EC0", Offset = "0x1684EC0", VA = "0x1684EC0")]
		public static bool operator <(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x1684EF4", Offset = "0x1684EF4", VA = "0x1684EF4")]
		public static bool operator >(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x1684F28", Offset = "0x1684F28", VA = "0x1684F28", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x1685000", Offset = "0x1685000", VA = "0x1685000", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x1684FCC", Offset = "0x1684FCC", VA = "0x1684FCC")]
		public static bool operator ==(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x1685058", Offset = "0x1685058", VA = "0x1685058")]
		public static bool operator !=(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x168508C", Offset = "0x168508C", VA = "0x168508C")]
		public bool Equals(servernetadr_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x16850C0", Offset = "0x16850C0", VA = "0x16850C0")]
		public int CompareTo(servernetadr_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200021A")]
	public struct HSteamPipe : IEquatable<HSteamPipe>, IComparable<HSteamPipe>
	{
		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamPipe;

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x1203BD0", Offset = "0x1203BD0", VA = "0x1203BD0")]
		public HSteamPipe(int value)
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x1203BD8", Offset = "0x1203BD8", VA = "0x1203BD8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x1203BE0", Offset = "0x1203BE0", VA = "0x1203BE0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x1203C70", Offset = "0x1203C70", VA = "0x1203C70", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x1203C64", Offset = "0x1203C64", VA = "0x1203C64")]
		public static bool operator ==(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x1203C78", Offset = "0x1203C78", VA = "0x1203C78")]
		public static bool operator !=(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x1203120", Offset = "0x1203120", VA = "0x1203120")]
		public static explicit operator HSteamPipe(int value)
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x1203C84", Offset = "0x1203C84", VA = "0x1203C84")]
		public static explicit operator int(HSteamPipe that)
		{
			return default(int);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x1203C88", Offset = "0x1203C88", VA = "0x1203C88", Slot = "4")]
		public bool Equals(HSteamPipe other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x1203C98", Offset = "0x1203C98", VA = "0x1203C98", Slot = "5")]
		public int CompareTo(HSteamPipe other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200021B")]
	public struct HSteamUser : IEquatable<HSteamUser>, IComparable<HSteamUser>
	{
		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamUser;

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x1203CA0", Offset = "0x1203CA0", VA = "0x1203CA0")]
		public HSteamUser(int value)
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x1203CA8", Offset = "0x1203CA8", VA = "0x1203CA8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x1203CB0", Offset = "0x1203CB0", VA = "0x1203CB0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x1203D40", Offset = "0x1203D40", VA = "0x1203D40", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x1203D34", Offset = "0x1203D34", VA = "0x1203D34")]
		public static bool operator ==(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x1203D48", Offset = "0x1203D48", VA = "0x1203D48")]
		public static bool operator !=(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x120314C", Offset = "0x120314C", VA = "0x120314C")]
		public static explicit operator HSteamUser(int value)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x1203D54", Offset = "0x1203D54", VA = "0x1203D54")]
		public static explicit operator int(HSteamUser that)
		{
			return default(int);
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x1203D58", Offset = "0x1203D58", VA = "0x1203D58", Slot = "4")]
		public bool Equals(HSteamUser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x1203D68", Offset = "0x1203D68", VA = "0x1203D68", Slot = "5")]
		public int CompareTo(HSteamUser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200021C")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97F88C", Offset = "0x97F88C")]
	public delegate void SteamAPIWarningMessageHook_t(int nSeverity, StringBuilder pchDebugText);
	[Token(Token = "0x200021D")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x97F8A0", Offset = "0x97F8A0")]
	public delegate void SteamAPI_CheckCallbackRegistered_t(int iCallbackNum);
	[Serializable]
	[Token(Token = "0x200021E")]
	public struct CGameID : IEquatable<CGameID>, IComparable<CGameID>
	{
		[Token(Token = "0x200021F")]
		public enum EGameIDType
		{
			[Token(Token = "0x4000D17")]
			k_EGameIDTypeApp,
			[Token(Token = "0x4000D18")]
			k_EGameIDTypeGameMod,
			[Token(Token = "0x4000D19")]
			k_EGameIDTypeShortcut,
			[Token(Token = "0x4000D1A")]
			k_EGameIDTypeP2P
		}

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_GameID;

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x2074028", Offset = "0x2074028", VA = "0x2074028")]
		public CGameID(ulong GameID)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x2074030", Offset = "0x2074030", VA = "0x2074030")]
		public CGameID(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x20740B0", Offset = "0x20740B0", VA = "0x20740B0")]
		public CGameID(AppId_t nAppID, uint nModID)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x2074100", Offset = "0x2074100", VA = "0x2074100")]
		public bool IsSteamApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x2074118", Offset = "0x2074118", VA = "0x2074118")]
		public bool IsMod()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x2074130", Offset = "0x2074130", VA = "0x2074130")]
		public bool IsShortcut()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x2074148", Offset = "0x2074148", VA = "0x2074148")]
		public bool IsP2PFile()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x2074160", Offset = "0x2074160", VA = "0x2074160")]
		public AppId_t AppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x2074110", Offset = "0x2074110", VA = "0x2074110")]
		public EGameIDType Type()
		{
			return default(EGameIDType);
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x207416C", Offset = "0x207416C", VA = "0x207416C")]
		public uint ModID()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x2074174", Offset = "0x2074174", VA = "0x2074174")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x20742AC", Offset = "0x20742AC", VA = "0x20742AC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x20742B4", Offset = "0x20742B4", VA = "0x20742B4")]
		public void Set(ulong GameID)
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x207403C", Offset = "0x207403C", VA = "0x207403C")]
		private void SetAppID(AppId_t other)
		{
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x20740F0", Offset = "0x20740F0", VA = "0x20740F0")]
		private void SetType(EGameIDType other)
		{
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x20740F8", Offset = "0x20740F8", VA = "0x20740F8")]
		private void SetModID(uint other)
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x20742BC", Offset = "0x20742BC", VA = "0x20742BC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x20742C4", Offset = "0x20742C4", VA = "0x20742C4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x2074354", Offset = "0x2074354", VA = "0x2074354", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x2074348", Offset = "0x2074348", VA = "0x2074348")]
		public static bool operator ==(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x207435C", Offset = "0x207435C", VA = "0x207435C")]
		public static bool operator !=(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x2074368", Offset = "0x2074368", VA = "0x2074368")]
		public static explicit operator CGameID(ulong value)
		{
			return default(CGameID);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x207436C", Offset = "0x207436C", VA = "0x207436C")]
		public static explicit operator ulong(CGameID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x2074370", Offset = "0x2074370", VA = "0x2074370", Slot = "4")]
		public bool Equals(CGameID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x2074380", Offset = "0x2074380", VA = "0x2074380", Slot = "5")]
		public int CompareTo(CGameID other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000220")]
	public struct CSteamID : IEquatable<CSteamID>, IComparable<CSteamID>
	{
		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CSteamID Nil;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly CSteamID OutofDateGS;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly CSteamID LanModeGS;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly CSteamID NotInitYetGS;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly CSteamID NonSteamGS;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x2074388", Offset = "0x2074388", VA = "0x2074388")]
		public CSteamID(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x20743EC", Offset = "0x20743EC", VA = "0x20743EC")]
		public CSteamID(AccountID_t unAccountID, uint unAccountInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x207442C", Offset = "0x207442C", VA = "0x207442C")]
		public CSteamID(ulong ulSteamID)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x20743B4", Offset = "0x20743B4", VA = "0x20743B4")]
		public void Set(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x207440C", Offset = "0x207440C", VA = "0x207440C")]
		public void InstancedSet(AccountID_t unAccountID, uint unInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x207446C", Offset = "0x207446C", VA = "0x207446C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x2074474", Offset = "0x2074474", VA = "0x2074474")]
		public void CreateBlankAnonLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x2074484", Offset = "0x2074484", VA = "0x2074484")]
		public void CreateBlankAnonUserLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x2074494", Offset = "0x2074494", VA = "0x2074494")]
		public bool BBlankAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x20744F8", Offset = "0x20744F8", VA = "0x20744F8")]
		public bool BGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x207451C", Offset = "0x207451C", VA = "0x207451C")]
		public bool BPersistentGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x2074534", Offset = "0x2074534", VA = "0x2074534")]
		public bool BAnonGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x207454C", Offset = "0x207454C", VA = "0x207454C")]
		public bool BContentServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x2074564", Offset = "0x2074564", VA = "0x2074564")]
		public bool BClanAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x207457C", Offset = "0x207457C", VA = "0x207457C")]
		public bool BChatAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x2074594", Offset = "0x2074594", VA = "0x2074594")]
		public bool IsLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x20745B0", Offset = "0x20745B0", VA = "0x20745B0")]
		public bool BIndividualAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x20744CC", Offset = "0x20744CC", VA = "0x20744CC")]
		public bool BAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x20745C8", Offset = "0x20745C8", VA = "0x20745C8")]
		public bool BAnonUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x20745E0", Offset = "0x20745E0", VA = "0x20745E0")]
		public bool BConsoleUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x2074434", Offset = "0x2074434", VA = "0x2074434")]
		public void SetAccountID(AccountID_t other)
		{
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x2074458", Offset = "0x2074458", VA = "0x2074458")]
		public void SetAccountInstance(uint other)
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x2074444", Offset = "0x2074444", VA = "0x2074444")]
		public void SetEAccountType(EAccountType other)
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x207443C", Offset = "0x207443C", VA = "0x207443C")]
		public void SetEUniverse(EUniverse other)
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x20745F8", Offset = "0x20745F8", VA = "0x20745F8")]
		public void ClearIndividualInstance()
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x2074618", Offset = "0x2074618", VA = "0x2074618")]
		public bool HasNoIndividualInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x20744C4", Offset = "0x20744C4", VA = "0x20744C4")]
		public AccountID_t GetAccountID()
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x20744EC", Offset = "0x20744EC", VA = "0x20744EC")]
		public uint GetUnAccountInstance()
		{
			return default(uint);
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x2074510", Offset = "0x2074510", VA = "0x2074510")]
		public EAccountType GetEAccountType()
		{
			return default(EAccountType);
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x207463C", Offset = "0x207463C", VA = "0x207463C")]
		public EUniverse GetEUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x2074644", Offset = "0x2074644", VA = "0x2074644")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x20746C4", Offset = "0x20746C4", VA = "0x20746C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x20746CC", Offset = "0x20746CC", VA = "0x20746CC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x2074794", Offset = "0x2074794", VA = "0x2074794", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x2074788", Offset = "0x2074788", VA = "0x2074788")]
		public static bool operator ==(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x207479C", Offset = "0x207479C", VA = "0x207479C")]
		public static bool operator !=(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x207480C", Offset = "0x207480C", VA = "0x207480C")]
		public static explicit operator CSteamID(ulong value)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x2074810", Offset = "0x2074810", VA = "0x2074810")]
		public static explicit operator ulong(CSteamID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x2074814", Offset = "0x2074814", VA = "0x2074814", Slot = "4")]
		public bool Equals(CSteamID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x2074824", Offset = "0x2074824", VA = "0x2074824", Slot = "5")]
		public int CompareTo(CSteamID other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000221")]
	public struct HAuthTicket : IEquatable<HAuthTicket>, IComparable<HAuthTicket>
	{
		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HAuthTicket Invalid;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HAuthTicket;

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x12034B8", Offset = "0x12034B8", VA = "0x12034B8")]
		public HAuthTicket(uint value)
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x12034C0", Offset = "0x12034C0", VA = "0x12034C0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x12034C8", Offset = "0x12034C8", VA = "0x12034C8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x1203590", Offset = "0x1203590", VA = "0x1203590", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x1203584", Offset = "0x1203584", VA = "0x1203584")]
		public static bool operator ==(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x1203598", Offset = "0x1203598", VA = "0x1203598")]
		public static bool operator !=(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x1203608", Offset = "0x1203608", VA = "0x1203608")]
		public static explicit operator HAuthTicket(uint value)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x1203610", Offset = "0x1203610", VA = "0x1203610")]
		public static explicit operator uint(HAuthTicket that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x1203614", Offset = "0x1203614", VA = "0x1203614", Slot = "4")]
		public bool Equals(HAuthTicket other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x1203624", Offset = "0x1203624", VA = "0x1203624", Slot = "5")]
		public int CompareTo(HAuthTicket other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000222")]
	public struct ControllerActionSetHandle_t : IEquatable<ControllerActionSetHandle_t>, IComparable<ControllerActionSetHandle_t>
	{
		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerActionSetHandle;

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x207A15C", Offset = "0x207A15C", VA = "0x207A15C")]
		public ControllerActionSetHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x207A164", Offset = "0x207A164", VA = "0x207A164", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x207A16C", Offset = "0x207A16C", VA = "0x207A16C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x207A1FC", Offset = "0x207A1FC", VA = "0x207A1FC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x207A1F0", Offset = "0x207A1F0", VA = "0x207A1F0")]
		public static bool operator ==(ControllerActionSetHandle_t x, ControllerActionSetHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x207A204", Offset = "0x207A204", VA = "0x207A204")]
		public static bool operator !=(ControllerActionSetHandle_t x, ControllerActionSetHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x207A210", Offset = "0x207A210", VA = "0x207A210")]
		public static explicit operator ControllerActionSetHandle_t(ulong value)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x207A214", Offset = "0x207A214", VA = "0x207A214")]
		public static explicit operator ulong(ControllerActionSetHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x207A218", Offset = "0x207A218", VA = "0x207A218", Slot = "4")]
		public bool Equals(ControllerActionSetHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x207A228", Offset = "0x207A228", VA = "0x207A228", Slot = "5")]
		public int CompareTo(ControllerActionSetHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000223")]
	public struct ControllerAnalogActionHandle_t : IEquatable<ControllerAnalogActionHandle_t>, IComparable<ControllerAnalogActionHandle_t>
	{
		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerAnalogActionHandle;

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x207A230", Offset = "0x207A230", VA = "0x207A230")]
		public ControllerAnalogActionHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x207A238", Offset = "0x207A238", VA = "0x207A238", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x207A240", Offset = "0x207A240", VA = "0x207A240", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x207A2D0", Offset = "0x207A2D0", VA = "0x207A2D0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x207A2C4", Offset = "0x207A2C4", VA = "0x207A2C4")]
		public static bool operator ==(ControllerAnalogActionHandle_t x, ControllerAnalogActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x207A2D8", Offset = "0x207A2D8", VA = "0x207A2D8")]
		public static bool operator !=(ControllerAnalogActionHandle_t x, ControllerAnalogActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x207A2E4", Offset = "0x207A2E4", VA = "0x207A2E4")]
		public static explicit operator ControllerAnalogActionHandle_t(ulong value)
		{
			return default(ControllerAnalogActionHandle_t);
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x207A2E8", Offset = "0x207A2E8", VA = "0x207A2E8")]
		public static explicit operator ulong(ControllerAnalogActionHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x207A2EC", Offset = "0x207A2EC", VA = "0x207A2EC", Slot = "4")]
		public bool Equals(ControllerAnalogActionHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x207A2FC", Offset = "0x207A2FC", VA = "0x207A2FC", Slot = "5")]
		public int CompareTo(ControllerAnalogActionHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000224")]
	public struct ControllerDigitalActionHandle_t : IEquatable<ControllerDigitalActionHandle_t>, IComparable<ControllerDigitalActionHandle_t>
	{
		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerDigitalActionHandle;

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x207A304", Offset = "0x207A304", VA = "0x207A304")]
		public ControllerDigitalActionHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x207A30C", Offset = "0x207A30C", VA = "0x207A30C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x207A314", Offset = "0x207A314", VA = "0x207A314", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x207A3A4", Offset = "0x207A3A4", VA = "0x207A3A4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x207A398", Offset = "0x207A398", VA = "0x207A398")]
		public static bool operator ==(ControllerDigitalActionHandle_t x, ControllerDigitalActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x207A3AC", Offset = "0x207A3AC", VA = "0x207A3AC")]
		public static bool operator !=(ControllerDigitalActionHandle_t x, ControllerDigitalActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x207A3B8", Offset = "0x207A3B8", VA = "0x207A3B8")]
		public static explicit operator ControllerDigitalActionHandle_t(ulong value)
		{
			return default(ControllerDigitalActionHandle_t);
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x207A3BC", Offset = "0x207A3BC", VA = "0x207A3BC")]
		public static explicit operator ulong(ControllerDigitalActionHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x207A3C0", Offset = "0x207A3C0", VA = "0x207A3C0", Slot = "4")]
		public bool Equals(ControllerDigitalActionHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x207A3D0", Offset = "0x207A3D0", VA = "0x207A3D0", Slot = "5")]
		public int CompareTo(ControllerDigitalActionHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000225")]
	public struct ControllerHandle_t : IEquatable<ControllerHandle_t>, IComparable<ControllerHandle_t>
	{
		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerHandle;

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x207A3D8", Offset = "0x207A3D8", VA = "0x207A3D8")]
		public ControllerHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x207A3E0", Offset = "0x207A3E0", VA = "0x207A3E0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x207A3E8", Offset = "0x207A3E8", VA = "0x207A3E8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x207A478", Offset = "0x207A478", VA = "0x207A478", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x207A46C", Offset = "0x207A46C", VA = "0x207A46C")]
		public static bool operator ==(ControllerHandle_t x, ControllerHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x207A480", Offset = "0x207A480", VA = "0x207A480")]
		public static bool operator !=(ControllerHandle_t x, ControllerHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x207A48C", Offset = "0x207A48C", VA = "0x207A48C")]
		public static explicit operator ControllerHandle_t(ulong value)
		{
			return default(ControllerHandle_t);
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x207A490", Offset = "0x207A490", VA = "0x207A490")]
		public static explicit operator ulong(ControllerHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x207A494", Offset = "0x207A494", VA = "0x207A494", Slot = "4")]
		public bool Equals(ControllerHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x207A4A4", Offset = "0x207A4A4", VA = "0x207A4A4", Slot = "5")]
		public int CompareTo(ControllerHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000226")]
	public struct FriendsGroupID_t : IEquatable<FriendsGroupID_t>, IComparable<FriendsGroupID_t>
	{
		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly FriendsGroupID_t Invalid;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short m_FriendsGroupID;

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x1202CAC", Offset = "0x1202CAC", VA = "0x1202CAC")]
		public FriendsGroupID_t(short value)
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x1202CB4", Offset = "0x1202CB4", VA = "0x1202CB4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x1202CBC", Offset = "0x1202CBC", VA = "0x1202CBC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x1202D88", Offset = "0x1202D88", VA = "0x1202D88", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x1202D78", Offset = "0x1202D78", VA = "0x1202D78")]
		public static bool operator ==(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x1202D90", Offset = "0x1202D90", VA = "0x1202D90")]
		public static bool operator !=(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x1202E04", Offset = "0x1202E04", VA = "0x1202E04")]
		public static explicit operator FriendsGroupID_t(short value)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x1202E0C", Offset = "0x1202E0C", VA = "0x1202E0C")]
		public static explicit operator short(FriendsGroupID_t that)
		{
			return default(short);
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x1202E10", Offset = "0x1202E10", VA = "0x1202E10", Slot = "4")]
		public bool Equals(FriendsGroupID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x1202E20", Offset = "0x1202E20", VA = "0x1202E20", Slot = "5")]
		public int CompareTo(FriendsGroupID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000227")]
	public struct HHTMLBrowser : IEquatable<HHTMLBrowser>, IComparable<HHTMLBrowser>
	{
		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HHTMLBrowser Invalid;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HHTMLBrowser;

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x1203678", Offset = "0x1203678", VA = "0x1203678")]
		public HHTMLBrowser(uint value)
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x1203680", Offset = "0x1203680", VA = "0x1203680", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x1203688", Offset = "0x1203688", VA = "0x1203688", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x1203750", Offset = "0x1203750", VA = "0x1203750", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x1203744", Offset = "0x1203744", VA = "0x1203744")]
		public static bool operator ==(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x1203758", Offset = "0x1203758", VA = "0x1203758")]
		public static bool operator !=(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x12037C8", Offset = "0x12037C8", VA = "0x12037C8")]
		public static explicit operator HHTMLBrowser(uint value)
		{
			return default(HHTMLBrowser);
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x12037D0", Offset = "0x12037D0", VA = "0x12037D0")]
		public static explicit operator uint(HHTMLBrowser that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x12037D4", Offset = "0x12037D4", VA = "0x12037D4", Slot = "4")]
		public bool Equals(HHTMLBrowser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x12037E4", Offset = "0x12037E4", VA = "0x12037E4", Slot = "5")]
		public int CompareTo(HHTMLBrowser other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000228")]
	public struct HTTPCookieContainerHandle : IEquatable<HTTPCookieContainerHandle>, IComparable<HTTPCookieContainerHandle>
	{
		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPCookieContainerHandle Invalid;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPCookieContainerHandle;

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x1203D70", Offset = "0x1203D70", VA = "0x1203D70")]
		public HTTPCookieContainerHandle(uint value)
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x1203D78", Offset = "0x1203D78", VA = "0x1203D78", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x1203D80", Offset = "0x1203D80", VA = "0x1203D80", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x1203E48", Offset = "0x1203E48", VA = "0x1203E48", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x1203E3C", Offset = "0x1203E3C", VA = "0x1203E3C")]
		public static bool operator ==(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x1203E50", Offset = "0x1203E50", VA = "0x1203E50")]
		public static bool operator !=(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x1203EC0", Offset = "0x1203EC0", VA = "0x1203EC0")]
		public static explicit operator HTTPCookieContainerHandle(uint value)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x1203EC8", Offset = "0x1203EC8", VA = "0x1203EC8")]
		public static explicit operator uint(HTTPCookieContainerHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x1203ECC", Offset = "0x1203ECC", VA = "0x1203ECC", Slot = "4")]
		public bool Equals(HTTPCookieContainerHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x1203EDC", Offset = "0x1203EDC", VA = "0x1203EDC", Slot = "5")]
		public int CompareTo(HTTPCookieContainerHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000229")]
	public struct HTTPRequestHandle : IEquatable<HTTPRequestHandle>, IComparable<HTTPRequestHandle>
	{
		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPRequestHandle Invalid;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPRequestHandle;

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x1203F30", Offset = "0x1203F30", VA = "0x1203F30")]
		public HTTPRequestHandle(uint value)
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x1203F38", Offset = "0x1203F38", VA = "0x1203F38", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x1203F40", Offset = "0x1203F40", VA = "0x1203F40", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x1204008", Offset = "0x1204008", VA = "0x1204008", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x1203FFC", Offset = "0x1203FFC", VA = "0x1203FFC")]
		public static bool operator ==(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x1204010", Offset = "0x1204010", VA = "0x1204010")]
		public static bool operator !=(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x1204080", Offset = "0x1204080", VA = "0x1204080")]
		public static explicit operator HTTPRequestHandle(uint value)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x1204088", Offset = "0x1204088", VA = "0x1204088")]
		public static explicit operator uint(HTTPRequestHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x120408C", Offset = "0x120408C", VA = "0x120408C", Slot = "4")]
		public bool Equals(HTTPRequestHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x120409C", Offset = "0x120409C", VA = "0x120409C", Slot = "5")]
		public int CompareTo(HTTPRequestHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200022A")]
	public struct SteamInventoryResult_t : IEquatable<SteamInventoryResult_t>, IComparable<SteamInventoryResult_t>
	{
		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamInventoryResult_t Invalid;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamInventoryResult;

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x11447D4", Offset = "0x11447D4", VA = "0x11447D4")]
		public SteamInventoryResult_t(int value)
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x11447DC", Offset = "0x11447DC", VA = "0x11447DC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x11447E4", Offset = "0x11447E4", VA = "0x11447E4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x11448AC", Offset = "0x11448AC", VA = "0x11448AC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x11448A0", Offset = "0x11448A0", VA = "0x11448A0")]
		public static bool operator ==(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x11448B4", Offset = "0x11448B4", VA = "0x11448B4")]
		public static bool operator !=(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x1144924", Offset = "0x1144924", VA = "0x1144924")]
		public static explicit operator SteamInventoryResult_t(int value)
		{
			return default(SteamInventoryResult_t);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x114492C", Offset = "0x114492C", VA = "0x114492C")]
		public static explicit operator int(SteamInventoryResult_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x1144930", Offset = "0x1144930", VA = "0x1144930", Slot = "4")]
		public bool Equals(SteamInventoryResult_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x1144940", Offset = "0x1144940", VA = "0x1144940", Slot = "5")]
		public int CompareTo(SteamInventoryResult_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200022B")]
	public struct SteamItemDef_t : IEquatable<SteamItemDef_t>, IComparable<SteamItemDef_t>
	{
		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamItemDef;

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x1144998", Offset = "0x1144998", VA = "0x1144998")]
		public SteamItemDef_t(int value)
		{
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x11449A0", Offset = "0x11449A0", VA = "0x11449A0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x11449A8", Offset = "0x11449A8", VA = "0x11449A8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x1144A38", Offset = "0x1144A38", VA = "0x1144A38", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x1144A2C", Offset = "0x1144A2C", VA = "0x1144A2C")]
		public static bool operator ==(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x1144A40", Offset = "0x1144A40", VA = "0x1144A40")]
		public static bool operator !=(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x1144A4C", Offset = "0x1144A4C", VA = "0x1144A4C")]
		public static explicit operator SteamItemDef_t(int value)
		{
			return default(SteamItemDef_t);
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x1144A54", Offset = "0x1144A54", VA = "0x1144A54")]
		public static explicit operator int(SteamItemDef_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x1144A58", Offset = "0x1144A58", VA = "0x1144A58", Slot = "4")]
		public bool Equals(SteamItemDef_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x1144A68", Offset = "0x1144A68", VA = "0x1144A68", Slot = "5")]
		public int CompareTo(SteamItemDef_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200022C")]
	public struct SteamItemInstanceID_t : IEquatable<SteamItemInstanceID_t>, IComparable<SteamItemInstanceID_t>
	{
		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamItemInstanceID_t Invalid;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamItemInstanceID;

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x1144A70", Offset = "0x1144A70", VA = "0x1144A70")]
		public SteamItemInstanceID_t(ulong value)
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x1144A78", Offset = "0x1144A78", VA = "0x1144A78", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x1144A80", Offset = "0x1144A80", VA = "0x1144A80", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x1144B48", Offset = "0x1144B48", VA = "0x1144B48", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x1144B3C", Offset = "0x1144B3C", VA = "0x1144B3C")]
		public static bool operator ==(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x1144B50", Offset = "0x1144B50", VA = "0x1144B50")]
		public static bool operator !=(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x1144BC0", Offset = "0x1144BC0", VA = "0x1144BC0")]
		public static explicit operator SteamItemInstanceID_t(ulong value)
		{
			return default(SteamItemInstanceID_t);
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x1144BC4", Offset = "0x1144BC4", VA = "0x1144BC4")]
		public static explicit operator ulong(SteamItemInstanceID_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x1144BC8", Offset = "0x1144BC8", VA = "0x1144BC8", Slot = "4")]
		public bool Equals(SteamItemInstanceID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x1144BD8", Offset = "0x1144BD8", VA = "0x1144BD8", Slot = "5")]
		public int CompareTo(SteamItemInstanceID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200022D")]
	public struct HServerListRequest : IEquatable<HServerListRequest>
	{
		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerListRequest Invalid;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_HServerListRequest;

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x1203838", Offset = "0x1203838", VA = "0x1203838")]
		public HServerListRequest(IntPtr value)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x1203840", Offset = "0x1203840", VA = "0x1203840", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x1203848", Offset = "0x1203848", VA = "0x1203848", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x1203918", Offset = "0x1203918", VA = "0x1203918", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x1203910", Offset = "0x1203910", VA = "0x1203910")]
		public static bool operator ==(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x1203920", Offset = "0x1203920", VA = "0x1203920")]
		public static bool operator !=(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x12039A0", Offset = "0x12039A0", VA = "0x12039A0")]
		public static explicit operator HServerListRequest(IntPtr value)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x12039A4", Offset = "0x12039A4", VA = "0x12039A4")]
		public static explicit operator IntPtr(HServerListRequest that)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x12039A8", Offset = "0x12039A8", VA = "0x12039A8", Slot = "4")]
		public bool Equals(HServerListRequest other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x200022E")]
	public struct HServerQuery : IEquatable<HServerQuery>, IComparable<HServerQuery>
	{
		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerQuery Invalid;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HServerQuery;

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x1203A0C", Offset = "0x1203A0C", VA = "0x1203A0C")]
		public HServerQuery(int value)
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x1203A14", Offset = "0x1203A14", VA = "0x1203A14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x1203A1C", Offset = "0x1203A1C", VA = "0x1203A1C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x1203AE4", Offset = "0x1203AE4", VA = "0x1203AE4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x1203AD8", Offset = "0x1203AD8", VA = "0x1203AD8")]
		public static bool operator ==(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x1203AEC", Offset = "0x1203AEC", VA = "0x1203AEC")]
		public static bool operator !=(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x1203B5C", Offset = "0x1203B5C", VA = "0x1203B5C")]
		public static explicit operator HServerQuery(int value)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x1203B64", Offset = "0x1203B64", VA = "0x1203B64")]
		public static explicit operator int(HServerQuery that)
		{
			return default(int);
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x1203B68", Offset = "0x1203B68", VA = "0x1203B68", Slot = "4")]
		public bool Equals(HServerQuery other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x1203B78", Offset = "0x1203B78", VA = "0x1203B78", Slot = "5")]
		public int CompareTo(HServerQuery other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200022F")]
	public struct SNetListenSocket_t : IEquatable<SNetListenSocket_t>, IComparable<SNetListenSocket_t>
	{
		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetListenSocket;

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x1130300", Offset = "0x1130300", VA = "0x1130300")]
		public SNetListenSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x1130308", Offset = "0x1130308", VA = "0x1130308", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x1130310", Offset = "0x1130310", VA = "0x1130310", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x11303A0", Offset = "0x11303A0", VA = "0x11303A0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x1130394", Offset = "0x1130394", VA = "0x1130394")]
		public static bool operator ==(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x11303A8", Offset = "0x11303A8", VA = "0x11303A8")]
		public static bool operator !=(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x11303B4", Offset = "0x11303B4", VA = "0x11303B4")]
		public static explicit operator SNetListenSocket_t(uint value)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x11303BC", Offset = "0x11303BC", VA = "0x11303BC")]
		public static explicit operator uint(SNetListenSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x11303C0", Offset = "0x11303C0", VA = "0x11303C0", Slot = "4")]
		public bool Equals(SNetListenSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x11303D0", Offset = "0x11303D0", VA = "0x11303D0", Slot = "5")]
		public int CompareTo(SNetListenSocket_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000230")]
	public struct SNetSocket_t : IEquatable<SNetSocket_t>, IComparable<SNetSocket_t>
	{
		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetSocket;

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x11303D8", Offset = "0x11303D8", VA = "0x11303D8")]
		public SNetSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x11303E0", Offset = "0x11303E0", VA = "0x11303E0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x11303E8", Offset = "0x11303E8", VA = "0x11303E8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x1130478", Offset = "0x1130478", VA = "0x1130478", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x113046C", Offset = "0x113046C", VA = "0x113046C")]
		public static bool operator ==(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x1130480", Offset = "0x1130480", VA = "0x1130480")]
		public static bool operator !=(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x113048C", Offset = "0x113048C", VA = "0x113048C")]
		public static explicit operator SNetSocket_t(uint value)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x1130494", Offset = "0x1130494", VA = "0x1130494")]
		public static explicit operator uint(SNetSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x1130498", Offset = "0x1130498", VA = "0x1130498", Slot = "4")]
		public bool Equals(SNetSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x11304A8", Offset = "0x11304A8", VA = "0x11304A8", Slot = "5")]
		public int CompareTo(SNetSocket_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000231")]
	public struct PublishedFileId_t : IEquatable<PublishedFileId_t>, IComparable<PublishedFileId_t>
	{
		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileId_t Invalid;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileId;

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x112F62C", Offset = "0x112F62C", VA = "0x112F62C")]
		public PublishedFileId_t(ulong value)
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x112F634", Offset = "0x112F634", VA = "0x112F634", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x112F63C", Offset = "0x112F63C", VA = "0x112F63C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x112F704", Offset = "0x112F704", VA = "0x112F704", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x112F6F8", Offset = "0x112F6F8", VA = "0x112F6F8")]
		public static bool operator ==(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x112F70C", Offset = "0x112F70C", VA = "0x112F70C")]
		public static bool operator !=(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x112F77C", Offset = "0x112F77C", VA = "0x112F77C")]
		public static explicit operator PublishedFileId_t(ulong value)
		{
			return default(PublishedFileId_t);
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x112F780", Offset = "0x112F780", VA = "0x112F780")]
		public static explicit operator ulong(PublishedFileId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x112F784", Offset = "0x112F784", VA = "0x112F784", Slot = "4")]
		public bool Equals(PublishedFileId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x112F794", Offset = "0x112F794", VA = "0x112F794", Slot = "5")]
		public int CompareTo(PublishedFileId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000232")]
	public struct PublishedFileUpdateHandle_t : IEquatable<PublishedFileUpdateHandle_t>, IComparable<PublishedFileUpdateHandle_t>
	{
		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileUpdateHandle_t Invalid;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileUpdateHandle;

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x112F7E8", Offset = "0x112F7E8", VA = "0x112F7E8")]
		public PublishedFileUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x112F7F0", Offset = "0x112F7F0", VA = "0x112F7F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x112F7F8", Offset = "0x112F7F8", VA = "0x112F7F8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x112F8C0", Offset = "0x112F8C0", VA = "0x112F8C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x112F8B4", Offset = "0x112F8B4", VA = "0x112F8B4")]
		public static bool operator ==(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x112F8C8", Offset = "0x112F8C8", VA = "0x112F8C8")]
		public static bool operator !=(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x112F938", Offset = "0x112F938", VA = "0x112F938")]
		public static explicit operator PublishedFileUpdateHandle_t(ulong value)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x112F93C", Offset = "0x112F93C", VA = "0x112F93C")]
		public static explicit operator ulong(PublishedFileUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x112F940", Offset = "0x112F940", VA = "0x112F940", Slot = "4")]
		public bool Equals(PublishedFileUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x112F950", Offset = "0x112F950", VA = "0x112F950", Slot = "5")]
		public int CompareTo(PublishedFileUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000233")]
	public struct UGCFileWriteStreamHandle_t : IEquatable<UGCFileWriteStreamHandle_t>, IComparable<UGCFileWriteStreamHandle_t>
	{
		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCFileWriteStreamHandle_t Invalid;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCFileWriteStreamHandle;

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x167DF98", Offset = "0x167DF98", VA = "0x167DF98")]
		public UGCFileWriteStreamHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x167DFA0", Offset = "0x167DFA0", VA = "0x167DFA0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x167DFA8", Offset = "0x167DFA8", VA = "0x167DFA8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x167E070", Offset = "0x167E070", VA = "0x167E070", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x167E064", Offset = "0x167E064", VA = "0x167E064")]
		public static bool operator ==(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x167E078", Offset = "0x167E078", VA = "0x167E078")]
		public static bool operator !=(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x167E0E8", Offset = "0x167E0E8", VA = "0x167E0E8")]
		public static explicit operator UGCFileWriteStreamHandle_t(ulong value)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x167E0EC", Offset = "0x167E0EC", VA = "0x167E0EC")]
		public static explicit operator ulong(UGCFileWriteStreamHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x167E0F0", Offset = "0x167E0F0", VA = "0x167E0F0", Slot = "4")]
		public bool Equals(UGCFileWriteStreamHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x167E100", Offset = "0x167E100", VA = "0x167E100", Slot = "5")]
		public int CompareTo(UGCFileWriteStreamHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000234")]
	public struct UGCHandle_t : IEquatable<UGCHandle_t>, IComparable<UGCHandle_t>
	{
		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCHandle_t Invalid;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCHandle;

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x167E158", Offset = "0x167E158", VA = "0x167E158")]
		public UGCHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x167E160", Offset = "0x167E160", VA = "0x167E160", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x167E168", Offset = "0x167E168", VA = "0x167E168", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x167E230", Offset = "0x167E230", VA = "0x167E230", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x167E224", Offset = "0x167E224", VA = "0x167E224")]
		public static bool operator ==(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x167E238", Offset = "0x167E238", VA = "0x167E238")]
		public static bool operator !=(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x167E2A8", Offset = "0x167E2A8", VA = "0x167E2A8")]
		public static explicit operator UGCHandle_t(ulong value)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x167E2AC", Offset = "0x167E2AC", VA = "0x167E2AC")]
		public static explicit operator ulong(UGCHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x167E2B0", Offset = "0x167E2B0", VA = "0x167E2B0", Slot = "4")]
		public bool Equals(UGCHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x167E2C0", Offset = "0x167E2C0", VA = "0x167E2C0", Slot = "5")]
		public int CompareTo(UGCHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000235")]
	public struct ScreenshotHandle : IEquatable<ScreenshotHandle>, IComparable<ScreenshotHandle>
	{
		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ScreenshotHandle Invalid;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_ScreenshotHandle;

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x1131A04", Offset = "0x1131A04", VA = "0x1131A04")]
		public ScreenshotHandle(uint value)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x1131A0C", Offset = "0x1131A0C", VA = "0x1131A0C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x1131A14", Offset = "0x1131A14", VA = "0x1131A14", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x1131ADC", Offset = "0x1131ADC", VA = "0x1131ADC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x1131AD0", Offset = "0x1131AD0", VA = "0x1131AD0")]
		public static bool operator ==(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x1131AE4", Offset = "0x1131AE4", VA = "0x1131AE4")]
		public static bool operator !=(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x1131B54", Offset = "0x1131B54", VA = "0x1131B54")]
		public static explicit operator ScreenshotHandle(uint value)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x1131B5C", Offset = "0x1131B5C", VA = "0x1131B5C")]
		public static explicit operator uint(ScreenshotHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x1131B60", Offset = "0x1131B60", VA = "0x1131B60", Slot = "4")]
		public bool Equals(ScreenshotHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x1131B70", Offset = "0x1131B70", VA = "0x1131B70", Slot = "5")]
		public int CompareTo(ScreenshotHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000236")]
	public struct AccountID_t : IEquatable<AccountID_t>, IComparable<AccountID_t>
	{
		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AccountID;

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x206DC78", Offset = "0x206DC78", VA = "0x206DC78")]
		public AccountID_t(uint value)
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x206DC80", Offset = "0x206DC80", VA = "0x206DC80", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x206DC88", Offset = "0x206DC88", VA = "0x206DC88", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x206DD18", Offset = "0x206DD18", VA = "0x206DD18", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x206DD0C", Offset = "0x206DD0C", VA = "0x206DD0C")]
		public static bool operator ==(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x206DD20", Offset = "0x206DD20", VA = "0x206DD20")]
		public static bool operator !=(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x206DD2C", Offset = "0x206DD2C", VA = "0x206DD2C")]
		public static explicit operator AccountID_t(uint value)
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x206DD34", Offset = "0x206DD34", VA = "0x206DD34")]
		public static explicit operator uint(AccountID_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x206DD38", Offset = "0x206DD38", VA = "0x206DD38", Slot = "4")]
		public bool Equals(AccountID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x206DD48", Offset = "0x206DD48", VA = "0x206DD48", Slot = "5")]
		public int CompareTo(AccountID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000237")]
	public struct AppId_t : IEquatable<AppId_t>, IComparable<AppId_t>
	{
		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly AppId_t Invalid;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AppId;

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x206EDF8", Offset = "0x206EDF8", VA = "0x206EDF8")]
		public AppId_t(uint value)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x206EE00", Offset = "0x206EE00", VA = "0x206EE00", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x206EE08", Offset = "0x206EE08", VA = "0x206EE08", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x206EED0", Offset = "0x206EED0", VA = "0x206EED0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x206EEC4", Offset = "0x206EEC4", VA = "0x206EEC4")]
		public static bool operator ==(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x206EED8", Offset = "0x206EED8", VA = "0x206EED8")]
		public static bool operator !=(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x206EF48", Offset = "0x206EF48", VA = "0x206EF48")]
		public static explicit operator AppId_t(uint value)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x206EF50", Offset = "0x206EF50", VA = "0x206EF50")]
		public static explicit operator uint(AppId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x206EF54", Offset = "0x206EF54", VA = "0x206EF54", Slot = "4")]
		public bool Equals(AppId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x206EF64", Offset = "0x206EF64", VA = "0x206EF64", Slot = "5")]
		public int CompareTo(AppId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000238")]
	public struct DepotId_t : IEquatable<DepotId_t>, IComparable<DepotId_t>
	{
		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DepotId_t Invalid;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_DepotId;

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x207B5EC", Offset = "0x207B5EC", VA = "0x207B5EC")]
		public DepotId_t(uint value)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x207B5F4", Offset = "0x207B5F4", VA = "0x207B5F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x207B5FC", Offset = "0x207B5FC", VA = "0x207B5FC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x207B6C4", Offset = "0x207B6C4", VA = "0x207B6C4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x207B6B8", Offset = "0x207B6B8", VA = "0x207B6B8")]
		public static bool operator ==(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x207B6CC", Offset = "0x207B6CC", VA = "0x207B6CC")]
		public static bool operator !=(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x207B73C", Offset = "0x207B73C", VA = "0x207B73C")]
		public static explicit operator DepotId_t(uint value)
		{
			return default(DepotId_t);
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x207B744", Offset = "0x207B744", VA = "0x207B744")]
		public static explicit operator uint(DepotId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x207B748", Offset = "0x207B748", VA = "0x207B748", Slot = "4")]
		public bool Equals(DepotId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x207B758", Offset = "0x207B758", VA = "0x207B758", Slot = "5")]
		public int CompareTo(DepotId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000239")]
	public struct ManifestId_t : IEquatable<ManifestId_t>, IComparable<ManifestId_t>
	{
		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ManifestId_t Invalid;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ManifestId;

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xE3F04C", Offset = "0xE3F04C", VA = "0xE3F04C")]
		public ManifestId_t(ulong value)
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xE3F054", Offset = "0xE3F054", VA = "0xE3F054", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xE3F05C", Offset = "0xE3F05C", VA = "0xE3F05C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xE3F124", Offset = "0xE3F124", VA = "0xE3F124", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xE3F118", Offset = "0xE3F118", VA = "0xE3F118")]
		public static bool operator ==(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xE3F12C", Offset = "0xE3F12C", VA = "0xE3F12C")]
		public static bool operator !=(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xE3F19C", Offset = "0xE3F19C", VA = "0xE3F19C")]
		public static explicit operator ManifestId_t(ulong value)
		{
			return default(ManifestId_t);
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xE3F1A0", Offset = "0xE3F1A0", VA = "0xE3F1A0")]
		public static explicit operator ulong(ManifestId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xE3F1A4", Offset = "0xE3F1A4", VA = "0xE3F1A4", Slot = "4")]
		public bool Equals(ManifestId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xE3F1B4", Offset = "0xE3F1B4", VA = "0xE3F1B4", Slot = "5")]
		public int CompareTo(ManifestId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200023A")]
	public struct SteamAPICall_t : IEquatable<SteamAPICall_t>, IComparable<SteamAPICall_t>
	{
		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamAPICall_t Invalid;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamAPICall;

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x1132BA8", Offset = "0x1132BA8", VA = "0x1132BA8")]
		public SteamAPICall_t(ulong value)
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x1132BB0", Offset = "0x1132BB0", VA = "0x1132BB0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x1132BB8", Offset = "0x1132BB8", VA = "0x1132BB8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x1132C80", Offset = "0x1132C80", VA = "0x1132C80", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x1132C74", Offset = "0x1132C74", VA = "0x1132C74")]
		public static bool operator ==(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x1132C88", Offset = "0x1132C88", VA = "0x1132C88")]
		public static bool operator !=(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x1132CF8", Offset = "0x1132CF8", VA = "0x1132CF8")]
		public static explicit operator SteamAPICall_t(ulong value)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x1132CFC", Offset = "0x1132CFC", VA = "0x1132CFC")]
		public static explicit operator ulong(SteamAPICall_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x1132D00", Offset = "0x1132D00", VA = "0x1132D00", Slot = "4")]
		public bool Equals(SteamAPICall_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x1132D10", Offset = "0x1132D10", VA = "0x1132D10", Slot = "5")]
		public int CompareTo(SteamAPICall_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200023B")]
	public struct UGCQueryHandle_t : IEquatable<UGCQueryHandle_t>, IComparable<UGCQueryHandle_t>
	{
		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCQueryHandle_t Invalid;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCQueryHandle;

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x167E318", Offset = "0x167E318", VA = "0x167E318")]
		public UGCQueryHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x167E320", Offset = "0x167E320", VA = "0x167E320", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x167E328", Offset = "0x167E328", VA = "0x167E328", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x167E3F0", Offset = "0x167E3F0", VA = "0x167E3F0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x167E3E4", Offset = "0x167E3E4", VA = "0x167E3E4")]
		public static bool operator ==(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x167E3F8", Offset = "0x167E3F8", VA = "0x167E3F8")]
		public static bool operator !=(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x167E468", Offset = "0x167E468", VA = "0x167E468")]
		public static explicit operator UGCQueryHandle_t(ulong value)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x167E46C", Offset = "0x167E46C", VA = "0x167E46C")]
		public static explicit operator ulong(UGCQueryHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x167E470", Offset = "0x167E470", VA = "0x167E470", Slot = "4")]
		public bool Equals(UGCQueryHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x167E480", Offset = "0x167E480", VA = "0x167E480", Slot = "5")]
		public int CompareTo(UGCQueryHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200023C")]
	public struct UGCUpdateHandle_t : IEquatable<UGCUpdateHandle_t>, IComparable<UGCUpdateHandle_t>
	{
		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCUpdateHandle_t Invalid;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCUpdateHandle;

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x167E4D8", Offset = "0x167E4D8", VA = "0x167E4D8")]
		public UGCUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x167E4E0", Offset = "0x167E4E0", VA = "0x167E4E0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x167E4E8", Offset = "0x167E4E8", VA = "0x167E4E8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x167E5B0", Offset = "0x167E5B0", VA = "0x167E5B0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x167E5A4", Offset = "0x167E5A4", VA = "0x167E5A4")]
		public static bool operator ==(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x167E5B8", Offset = "0x167E5B8", VA = "0x167E5B8")]
		public static bool operator !=(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x167E628", Offset = "0x167E628", VA = "0x167E628")]
		public static explicit operator UGCUpdateHandle_t(ulong value)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x167E62C", Offset = "0x167E62C", VA = "0x167E62C")]
		public static explicit operator ulong(UGCUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x167E630", Offset = "0x167E630", VA = "0x167E630", Slot = "4")]
		public bool Equals(UGCUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x167E640", Offset = "0x167E640", VA = "0x167E640", Slot = "5")]
		public int CompareTo(UGCUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200023D")]
	public struct ClientUnifiedMessageHandle : IEquatable<ClientUnifiedMessageHandle>, IComparable<ClientUnifiedMessageHandle>
	{
		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ClientUnifiedMessageHandle Invalid;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ClientUnifiedMessageHandle;

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x2077444", Offset = "0x2077444", VA = "0x2077444")]
		public ClientUnifiedMessageHandle(ulong value)
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x207744C", Offset = "0x207744C", VA = "0x207744C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x2077454", Offset = "0x2077454", VA = "0x2077454", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x207751C", Offset = "0x207751C", VA = "0x207751C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x2077510", Offset = "0x2077510", VA = "0x2077510")]
		public static bool operator ==(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x2077524", Offset = "0x2077524", VA = "0x2077524")]
		public static bool operator !=(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x2077594", Offset = "0x2077594", VA = "0x2077594")]
		public static explicit operator ClientUnifiedMessageHandle(ulong value)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x2077598", Offset = "0x2077598", VA = "0x2077598")]
		public static explicit operator ulong(ClientUnifiedMessageHandle that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x207759C", Offset = "0x207759C", VA = "0x207759C", Slot = "4")]
		public bool Equals(ClientUnifiedMessageHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x20775AC", Offset = "0x20775AC", VA = "0x20775AC", Slot = "5")]
		public int CompareTo(ClientUnifiedMessageHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200023E")]
	public struct SteamLeaderboardEntries_t : IEquatable<SteamLeaderboardEntries_t>, IComparable<SteamLeaderboardEntries_t>
	{
		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboardEntries;

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x1144C30", Offset = "0x1144C30", VA = "0x1144C30")]
		public SteamLeaderboardEntries_t(ulong value)
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x1144C38", Offset = "0x1144C38", VA = "0x1144C38", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x1144C40", Offset = "0x1144C40", VA = "0x1144C40", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x1144CD0", Offset = "0x1144CD0", VA = "0x1144CD0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x1144CC4", Offset = "0x1144CC4", VA = "0x1144CC4")]
		public static bool operator ==(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x1144CD8", Offset = "0x1144CD8", VA = "0x1144CD8")]
		public static bool operator !=(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x1144CE4", Offset = "0x1144CE4", VA = "0x1144CE4")]
		public static explicit operator SteamLeaderboardEntries_t(ulong value)
		{
			return default(SteamLeaderboardEntries_t);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x1144CE8", Offset = "0x1144CE8", VA = "0x1144CE8")]
		public static explicit operator ulong(SteamLeaderboardEntries_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x1144CEC", Offset = "0x1144CEC", VA = "0x1144CEC", Slot = "4")]
		public bool Equals(SteamLeaderboardEntries_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x1144CFC", Offset = "0x1144CFC", VA = "0x1144CFC", Slot = "5")]
		public int CompareTo(SteamLeaderboardEntries_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200023F")]
	public struct SteamLeaderboard_t : IEquatable<SteamLeaderboard_t>, IComparable<SteamLeaderboard_t>
	{
		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboard;

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x1144D04", Offset = "0x1144D04", VA = "0x1144D04")]
		public SteamLeaderboard_t(ulong value)
		{
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x1144D0C", Offset = "0x1144D0C", VA = "0x1144D0C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x1144D14", Offset = "0x1144D14", VA = "0x1144D14", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x1144DA4", Offset = "0x1144DA4", VA = "0x1144DA4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x1144D98", Offset = "0x1144D98", VA = "0x1144D98")]
		public static bool operator ==(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x1144DAC", Offset = "0x1144DAC", VA = "0x1144DAC")]
		public static bool operator !=(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x1144DB8", Offset = "0x1144DB8", VA = "0x1144DB8")]
		public static explicit operator SteamLeaderboard_t(ulong value)
		{
			return default(SteamLeaderboard_t);
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x1144DBC", Offset = "0x1144DBC", VA = "0x1144DBC")]
		public static explicit operator ulong(SteamLeaderboard_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x1144DC0", Offset = "0x1144DC0", VA = "0x1144DC0", Slot = "4")]
		public bool Equals(SteamLeaderboard_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x1144DD0", Offset = "0x1144DD0", VA = "0x1144DD0", Slot = "5")]
		public int CompareTo(SteamLeaderboard_t other)
		{
			return default(int);
		}
	}
}
namespace SimpleJSON
{
	[Token(Token = "0x2000240")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x4000D56")]
		Array = 1,
		[Token(Token = "0x4000D57")]
		Class,
		[Token(Token = "0x4000D58")]
		Value,
		[Token(Token = "0x4000D59")]
		IntValue,
		[Token(Token = "0x4000D5A")]
		DoubleValue,
		[Token(Token = "0x4000D5B")]
		BoolValue,
		[Token(Token = "0x4000D5C")]
		FloatValue
	}
	[Token(Token = "0x2000241")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x97F8B4", Offset = "0x97F8B4")]
	public abstract class JSONNode
	{
		[Token(Token = "0x2000242")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97F8EC", Offset = "0x97F8EC")]
		private sealed class <get_Children>d__17 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4000D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x1700007C")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6000D55")]
				[Address(RVA = "0x16907A0", Offset = "0x16907A0", VA = "0x16907A0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700007D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D57")]
				[Address(RVA = "0x16907E8", Offset = "0x16907E8", VA = "0x16907E8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D52")]
			[Address(RVA = "0x169074C", Offset = "0x169074C", VA = "0x169074C")]
			[DebuggerHidden]
			public <get_Children>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x1690784", Offset = "0x1690784", VA = "0x1690784", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x1690788", Offset = "0x1690788", VA = "0x1690788", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D56")]
			[Address(RVA = "0x16907A8", Offset = "0x16907A8", VA = "0x16907A8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x16907F0", Offset = "0x16907F0", VA = "0x16907F0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000D59")]
			[Address(RVA = "0x1690884", Offset = "0x1690884", VA = "0x1690884", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000243")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97F8FC", Offset = "0x97F8FC")]
		private sealed class <get_DeepChildren>d__19 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4000D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000D64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONNode <>4__this;

			[Token(Token = "0x4000D65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JSONNode> <>7__wrap1;

			[Token(Token = "0x4000D66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<JSONNode> <>7__wrap2;

			[Token(Token = "0x1700007E")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6000D5F")]
				[Address(RVA = "0x1690F00", Offset = "0x1690F00", VA = "0x1690F00", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700007F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D61")]
				[Address(RVA = "0x1690F48", Offset = "0x1690F48", VA = "0x1690F48", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0x1690888", Offset = "0x1690888", VA = "0x1690888")]
			[DebuggerHidden]
			public <get_DeepChildren>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0x16908C0", Offset = "0x16908C0", VA = "0x16908C0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0x1690AC8", Offset = "0x1690AC8", VA = "0x1690AC8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0x1690A0C", Offset = "0x1690A0C", VA = "0x1690A0C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000D5E")]
			[Address(RVA = "0x1690950", Offset = "0x1690950", VA = "0x1690950")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6000D60")]
			[Address(RVA = "0x1690F08", Offset = "0x1690F08", VA = "0x1690F08", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000D62")]
			[Address(RVA = "0x1690F50", Offset = "0x1690F50", VA = "0x1690F50", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000D63")]
			[Address(RVA = "0x1690FF8", Offset = "0x1690FF8", VA = "0x1690FF8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980E40", Offset = "0x980E40")]
		private JSONBinaryTag <Tag>k__BackingField;

		[Token(Token = "0x1700006F")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xE3CA74", Offset = "0xE3CA74", VA = "0xE3CA74", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0xE3CA7C", Offset = "0xE3CA7C", VA = "0xE3CA7C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000070")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0xE3CA80", Offset = "0xE3CA80", VA = "0xE3CA80", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D20")]
			[Address(RVA = "0xE3CA88", Offset = "0xE3CA88", VA = "0xE3CA88", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public virtual string Value
		{
			[Token(Token = "0x6000D21")]
			[Address(RVA = "0xE3CA8C", Offset = "0xE3CA8C", VA = "0xE3CA8C", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xE3CAD0", Offset = "0xE3CAD0", VA = "0xE3CAD0", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000072")]
		public virtual int Count
		{
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0xE3CAD4", Offset = "0xE3CAD4", VA = "0xE3CAD4", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000073")]
		public virtual IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6000D28")]
			[Address(RVA = "0xE3CB58", Offset = "0xE3CB58", VA = "0xE3CB58", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981E78", Offset = "0x981E78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		public IEnumerable<JSONNode> DeepChildren
		{
			[Token(Token = "0x6000D29")]
			[Address(RVA = "0xE3CBB4", Offset = "0xE3CBB4", VA = "0xE3CBB4")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x981ED8", Offset = "0x981ED8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		public virtual JSONBinaryTag Tag
		{
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0xE3CCA8", Offset = "0xE3CCA8", VA = "0xE3CCA8", Slot = "19")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981F38", Offset = "0x981F38")]
			get
			{
				return default(JSONBinaryTag);
			}
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0xE3CCB0", Offset = "0xE3CCB0", VA = "0xE3CCB0", Slot = "20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x981F48", Offset = "0x981F48")]
			set
			{
			}
		}

		[Token(Token = "0x17000076")]
		public virtual int AsInt
		{
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0xE3CCB8", Offset = "0xE3CCB8", VA = "0xE3CCB8", Slot = "21")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D30")]
			[Address(RVA = "0xE3CCF8", Offset = "0xE3CCF8", VA = "0xE3CCF8", Slot = "22")]
			set
			{
			}
		}

		[Token(Token = "0x17000077")]
		public virtual float AsFloat
		{
			[Token(Token = "0x6000D31")]
			[Address(RVA = "0xE3CD50", Offset = "0xE3CD50", VA = "0xE3CD50", Slot = "23")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D32")]
			[Address(RVA = "0xE3CD94", Offset = "0xE3CD94", VA = "0xE3CD94", Slot = "24")]
			set
			{
			}
		}

		[Token(Token = "0x17000078")]
		public virtual double AsDouble
		{
			[Token(Token = "0x6000D33")]
			[Address(RVA = "0xE3CDEC", Offset = "0xE3CDEC", VA = "0xE3CDEC", Slot = "25")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000D34")]
			[Address(RVA = "0xE3CE8C", Offset = "0xE3CE8C", VA = "0xE3CE8C", Slot = "26")]
			set
			{
			}
		}

		[Token(Token = "0x17000079")]
		public virtual bool AsBool
		{
			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xE3CEE4", Offset = "0xE3CEE4", VA = "0xE3CEE4", Slot = "27")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D36")]
			[Address(RVA = "0xE3CFA8", Offset = "0xE3CFA8", VA = "0xE3CFA8", Slot = "28")]
			set
			{
			}
		}

		[Token(Token = "0x1700007A")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0xE3D044", Offset = "0xE3D044", VA = "0xE3D044", Slot = "29")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0xE3D0C0", Offset = "0xE3D0C0", VA = "0xE3D0C0", Slot = "30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xE3CA70", Offset = "0xE3CA70", VA = "0xE3CA70", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xE3CADC", Offset = "0xE3CADC", VA = "0xE3CADC", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xE3CB40", Offset = "0xE3CB40", VA = "0xE3CB40", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xE3CB48", Offset = "0xE3CB48", VA = "0xE3CB48", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xE3CB50", Offset = "0xE3CB50", VA = "0xE3CB50", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xE3CC20", Offset = "0xE3CC20", VA = "0xE3CC20", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xE3CC64", Offset = "0xE3CC64", VA = "0xE3CC64", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000D2C")]
		public abstract string ToJSON(int prefix);

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xE3D13C", Offset = "0xE3D13C", VA = "0xE3D13C")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xE3D1B4", Offset = "0xE3D1B4", VA = "0xE3D1B4")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xE3D200", Offset = "0xE3D200", VA = "0xE3D200")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xE3D294", Offset = "0xE3D294", VA = "0xE3D294")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xE3D2B0", Offset = "0xE3D2B0", VA = "0xE3D2B0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xE3C4C4", Offset = "0xE3C4C4", VA = "0xE3C4C4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xE3AFAC", Offset = "0xE3AFAC", VA = "0xE3AFAC")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xE3D2BC", Offset = "0xE3D2BC", VA = "0xE3D2BC")]
		private static JSONData Numberize(string token)
		{
			return null;
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xE3D488", Offset = "0xE3D488", VA = "0xE3D488")]
		private static void AddElement(JSONNode ctx, string token, string tokenName, bool tokenIsString)
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xE38E98", Offset = "0xE38E98", VA = "0xE38E98")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xE3D5C8", Offset = "0xE3D5C8", VA = "0xE3D5C8", Slot = "31")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xE3D5CC", Offset = "0xE3D5CC", VA = "0xE3D5CC")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xE3D648", Offset = "0xE3D648", VA = "0xE3D648")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xE3D69C", Offset = "0xE3D69C", VA = "0xE3D69C")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xE3D6F0", Offset = "0xE3D6F0", VA = "0xE3D6F0")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xE3D744", Offset = "0xE3D744", VA = "0xE3D744")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xE3D8D4", Offset = "0xE3D8D4", VA = "0xE3D8D4")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xE3DAA8", Offset = "0xE3DAA8", VA = "0xE3DAA8")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xE3DE80", Offset = "0xE3DE80", VA = "0xE3DE80")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xE3DED4", Offset = "0xE3DED4", VA = "0xE3DED4")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xE3DF28", Offset = "0xE3DF28", VA = "0xE3DF28")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xE3DF7C", Offset = "0xE3DF7C", VA = "0xE3DF7C")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xE3E0DC", Offset = "0xE3E0DC", VA = "0xE3E0DC")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xE3E21C", Offset = "0xE3E21C", VA = "0xE3E21C")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xE3A25C", Offset = "0xE3A25C", VA = "0xE3A25C")]
		protected JSONNode()
		{
		}
	}
	[Token(Token = "0x2000244")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x97F90C", Offset = "0x97F90C")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000245")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97F944", Offset = "0x97F944")]
		private sealed class <get_Children>d__13 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4000D6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000D6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONArray <>4__this;

			[Token(Token = "0x4000D6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000084")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6000D77")]
				[Address(RVA = "0x1690034", Offset = "0x1690034", VA = "0x1690034", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000085")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D79")]
				[Address(RVA = "0x169007C", Offset = "0x169007C", VA = "0x169007C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D73")]
			[Address(RVA = "0x168FE18", Offset = "0x168FE18", VA = "0x168FE18")]
			[DebuggerHidden]
			public <get_Children>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000D74")]
			[Address(RVA = "0x168FE50", Offset = "0x168FE50", VA = "0x168FE50", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x168FEC0", Offset = "0x168FEC0", VA = "0x168FEC0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D76")]
			[Address(RVA = "0x168FE6C", Offset = "0x168FE6C", VA = "0x168FE6C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000D78")]
			[Address(RVA = "0x169003C", Offset = "0x169003C", VA = "0x169003C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0x1690084", Offset = "0x1690084", VA = "0x1690084", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0x169012C", Offset = "0x169012C", VA = "0x169012C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000246")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97F954", Offset = "0x97F954")]
		private sealed class <GetEnumerator>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONArray <>4__this;

			[Token(Token = "0x4000D70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000086")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D80")]
				[Address(RVA = "0x168FDC8", Offset = "0x168FDC8", VA = "0x168FDC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000087")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D82")]
				[Address(RVA = "0x168FE10", Offset = "0x168FE10", VA = "0x168FE10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0x168FBB8", Offset = "0x168FBB8", VA = "0x168FBB8")]
			[DebuggerHidden]
			public <GetEnumerator>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0x168FBE4", Offset = "0x168FBE4", VA = "0x168FBE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0x168FC54", Offset = "0x168FC54", VA = "0x168FC54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0x168FC00", Offset = "0x168FC00", VA = "0x168FC00")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x168FDD0", Offset = "0x168FDD0", VA = "0x168FDD0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<JSONNode> m_List;

		[Token(Token = "0x17000080")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0xE39574", Offset = "0xE39574", VA = "0xE39574", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D65")]
			[Address(RVA = "0xE3965C", Offset = "0xE3965C", VA = "0xE3965C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000D66")]
			[Address(RVA = "0xE39714", Offset = "0xE39714", VA = "0xE39714", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D67")]
			[Address(RVA = "0xE39774", Offset = "0xE39774", VA = "0xE39774", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public override int Count
		{
			[Token(Token = "0x6000D68")]
			[Address(RVA = "0xE397D8", Offset = "0xE397D8", VA = "0xE397D8", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000083")]
		public override IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0xE399B4", Offset = "0xE399B4", VA = "0xE399B4", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x982038", Offset = "0x982038")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xE39824", Offset = "0xE39824", VA = "0xE39824", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xE39888", Offset = "0xE39888", VA = "0xE39888", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xE39948", Offset = "0xE39948", VA = "0xE39948", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xE39A20", Offset = "0xE39A20", VA = "0xE39A20", Slot = "32")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x982098", Offset = "0x982098")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xE39A8C", Offset = "0xE39A8C", VA = "0xE39A8C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xE39C68", Offset = "0xE39C68", VA = "0xE39C68", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xE39EC0", Offset = "0xE39EC0", VA = "0xE39EC0", Slot = "18")]
		public override string ToJSON(int prefix)
		{
			return null;
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xE3A0FC", Offset = "0xE3A0FC", VA = "0xE3A0FC", Slot = "31")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xE3A1E4", Offset = "0xE3A1E4", VA = "0xE3A1E4")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x2000247")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x97F964", Offset = "0x97F964")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000248")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97F99C", Offset = "0x97F99C")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x4000D72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public JSONNode aNode;

			[Token(Token = "0x6000D93")]
			[Address(RVA = "0x1690130", Offset = "0x1690130", VA = "0x1690130")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x6000D94")]
			[Address(RVA = "0x1690138", Offset = "0x1690138", VA = "0x1690138")]
			internal bool <Remove>b__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000249")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97F9AC", Offset = "0x97F9AC")]
		private sealed class <get_Children>d__14 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4000D75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000D76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONClass <>4__this;

			[Token(Token = "0x4000D77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x1700008C")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6000D99")]
				[Address(RVA = "0x1690650", Offset = "0x1690650", VA = "0x1690650", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D9B")]
				[Address(RVA = "0x1690698", Offset = "0x1690698", VA = "0x1690698", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D95")]
			[Address(RVA = "0x1690420", Offset = "0x1690420", VA = "0x1690420")]
			[DebuggerHidden]
			public <get_Children>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000D96")]
			[Address(RVA = "0x1690458", Offset = "0x1690458", VA = "0x1690458", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D97")]
			[Address(RVA = "0x16904C8", Offset = "0x16904C8", VA = "0x16904C8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D98")]
			[Address(RVA = "0x1690474", Offset = "0x1690474", VA = "0x1690474")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0x1690658", Offset = "0x1690658", VA = "0x1690658", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0x16906A0", Offset = "0x16906A0", VA = "0x16906A0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0x1690748", Offset = "0x1690748", VA = "0x1690748", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200024A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x97F9BC", Offset = "0x97F9BC")]
		private sealed class <GetEnumerator>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONClass <>4__this;

			[Token(Token = "0x4000D7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x1700008E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DA2")]
				[Address(RVA = "0x16903D0", Offset = "0x16903D0", VA = "0x16903D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DA4")]
				[Address(RVA = "0x1690418", Offset = "0x1690418", VA = "0x1690418", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0x169018C", Offset = "0x169018C", VA = "0x169018C")]
			[DebuggerHidden]
			public <GetEnumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0x16901B8", Offset = "0x16901B8", VA = "0x16901B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0x1690228", Offset = "0x1690228", VA = "0x1690228", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0x16901D4", Offset = "0x16901D4", VA = "0x16901D4")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0x16903D8", Offset = "0x16903D8", VA = "0x16903D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x17000088")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0xE3A264", Offset = "0xE3A264", VA = "0xE3A264", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0xE3A36C", Offset = "0xE3A36C", VA = "0xE3A36C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0xE3A43C", Offset = "0xE3A43C", VA = "0xE3A43C", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0xE3A4E8", Offset = "0xE3A4E8", VA = "0xE3A4E8", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public override int Count
		{
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0xE3A5C8", Offset = "0xE3A5C8", VA = "0xE3A5C8", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700008B")]
		public override IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0xE3AAEC", Offset = "0xE3AAEC", VA = "0xE3AAEC", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9821B8", Offset = "0x9821B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xE3A61C", Offset = "0xE3A61C", VA = "0xE3A61C", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xE3A768", Offset = "0xE3A768", VA = "0xE3A768", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xE3A838", Offset = "0xE3A838", VA = "0xE3A838", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xE3A920", Offset = "0xE3A920", VA = "0xE3A920", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xE3AB58", Offset = "0xE3AB58", VA = "0xE3AB58", Slot = "32")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x982218", Offset = "0x982218")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xE3ABC4", Offset = "0xE3ABC4", VA = "0xE3ABC4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xE3B178", Offset = "0xE3B178", VA = "0xE3B178", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xE3B5D0", Offset = "0xE3B5D0", VA = "0xE3B5D0", Slot = "18")]
		public override string ToJSON(int prefix)
		{
			return null;
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xE3B870", Offset = "0xE3B870", VA = "0xE3B870", Slot = "31")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xE3BA6C", Offset = "0xE3BA6C", VA = "0xE3BA6C")]
		public JSONClass()
		{
		}
	}
	[Token(Token = "0x200024B")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Data;

		[Token(Token = "0x17000090")]
		public override string Value
		{
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0xE3BAE4", Offset = "0xE3BAE4", VA = "0xE3BAE4", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0xE3BAEC", Offset = "0xE3BAEC", VA = "0xE3BAEC", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xE3BB04", Offset = "0xE3BB04", VA = "0xE3BB04")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xE3BB44", Offset = "0xE3BB44", VA = "0xE3BB44")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xE3BB88", Offset = "0xE3BB88", VA = "0xE3BB88")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xE3BBCC", Offset = "0xE3BBCC", VA = "0xE3BBCC")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xE3BC08", Offset = "0xE3BC08", VA = "0xE3BC08")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xE3BC44", Offset = "0xE3BC44", VA = "0xE3BC44", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xE3BCA0", Offset = "0xE3BCA0", VA = "0xE3BCA0", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0xE3BCFC", Offset = "0xE3BCFC", VA = "0xE3BCFC", Slot = "18")]
		public override string ToJSON(int prefix)
		{
			return null;
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0xE3BE4C", Offset = "0xE3BE4C", VA = "0xE3BE4C", Slot = "31")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x200024C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x97F9CC", Offset = "0x97F9CC")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private JSONNode m_Node;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string m_Key;

		[Token(Token = "0x17000091")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0xE3C188", Offset = "0xE3C188", VA = "0xE3C188", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0xE3C1E8", Offset = "0xE3C1E8", VA = "0xE3C1E8", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0xE3C26C", Offset = "0xE3C26C", VA = "0xE3C26C", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0xE3C2D8", Offset = "0xE3C2D8", VA = "0xE3C2D8", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public override int AsInt
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0xE3C598", Offset = "0xE3C598", VA = "0xE3C598", Slot = "21")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0xE3C618", Offset = "0xE3C618", VA = "0xE3C618", Slot = "22")]
			set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public override float AsFloat
		{
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0xE3C69C", Offset = "0xE3C69C", VA = "0xE3C69C", Slot = "23")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0xE3C71C", Offset = "0xE3C71C", VA = "0xE3C71C", Slot = "24")]
			set
			{
			}
		}

		[Token(Token = "0x17000095")]
		public override double AsDouble
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0xE3C7A0", Offset = "0xE3C7A0", VA = "0xE3C7A0", Slot = "25")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0xE3C820", Offset = "0xE3C820", VA = "0xE3C820", Slot = "26")]
			set
			{
			}
		}

		[Token(Token = "0x17000096")]
		public override bool AsBool
		{
			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0xE3C8A4", Offset = "0xE3C8A4", VA = "0xE3C8A4", Slot = "27")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0xE3C924", Offset = "0xE3C924", VA = "0xE3C924", Slot = "28")]
			set
			{
			}
		}

		[Token(Token = "0x17000097")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0xE3C9A8", Offset = "0xE3C9A8", VA = "0xE3C9A8", Slot = "29")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0xE3CA0C", Offset = "0xE3CA0C", VA = "0xE3CA0C", Slot = "30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xE39630", Offset = "0xE39630", VA = "0xE39630")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xE3A334", Offset = "0xE3A334", VA = "0xE3A334")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xE3C128", Offset = "0xE3C128", VA = "0xE3C128")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xE3C364", Offset = "0xE3C364", VA = "0xE3C364", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xE3C3E8", Offset = "0xE3C3E8", VA = "0xE3C3E8", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xE3C474", Offset = "0xE3C474", VA = "0xE3C474")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xE3C48C", Offset = "0xE3C48C", VA = "0xE3C48C")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xE3C4A4", Offset = "0xE3C4A4", VA = "0xE3C4A4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xE3C4BC", Offset = "0xE3C4BC", VA = "0xE3C4BC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xE3C4CC", Offset = "0xE3C4CC", VA = "0xE3C4CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xE3C510", Offset = "0xE3C510", VA = "0xE3C510", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xE3C554", Offset = "0xE3C554", VA = "0xE3C554", Slot = "18")]
		public override string ToJSON(int prefix)
		{
			return null;
		}
	}
	[Token(Token = "0x200024D")]
	public static class JSON
	{
		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xE38E94", Offset = "0xE38E94", VA = "0xE38E94")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace Kalman
{
	[Token(Token = "0x200024E")]
	public interface IKalmanWrapper : IDisposable
	{
		[Token(Token = "0x6000DCB")]
		Vector3 Update(Vector3 current);
	}
	[Token(Token = "0x200024F")]
	public sealed class KalmanFilter
	{
		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980E50", Offset = "0x980E50")]
		private Matrix <X0>k__BackingField;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980E60", Offset = "0x980E60")]
		private Matrix <P0>k__BackingField;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980E70", Offset = "0x980E70")]
		private Matrix <F>k__BackingField;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980E80", Offset = "0x980E80")]
		private Matrix <B>k__BackingField;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980E90", Offset = "0x980E90")]
		private Matrix <U>k__BackingField;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980EA0", Offset = "0x980EA0")]
		private Matrix <Q>k__BackingField;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980EB0", Offset = "0x980EB0")]
		private Matrix <H>k__BackingField;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980EC0", Offset = "0x980EC0")]
		private Matrix <R>k__BackingField;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980ED0", Offset = "0x980ED0")]
		private Matrix <State>k__BackingField;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980EE0", Offset = "0x980EE0")]
		private Matrix <Covariance>k__BackingField;

		[Token(Token = "0x17000099")]
		public Matrix X0
		{
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0xE3E6F8", Offset = "0xE3E6F8", VA = "0xE3E6F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982338", Offset = "0x982338")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0xE3E700", Offset = "0xE3E700", VA = "0xE3E700")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982348", Offset = "0x982348")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009A")]
		public Matrix P0
		{
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0xE3E708", Offset = "0xE3E708", VA = "0xE3E708")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982358", Offset = "0x982358")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0xE3E710", Offset = "0xE3E710", VA = "0xE3E710")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982368", Offset = "0x982368")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009B")]
		public Matrix F
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0xE3E718", Offset = "0xE3E718", VA = "0xE3E718")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982378", Offset = "0x982378")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0xE3E720", Offset = "0xE3E720", VA = "0xE3E720")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982388", Offset = "0x982388")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009C")]
		public Matrix B
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0xE3E728", Offset = "0xE3E728", VA = "0xE3E728")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982398", Offset = "0x982398")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0xE3E730", Offset = "0xE3E730", VA = "0xE3E730")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9823A8", Offset = "0x9823A8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009D")]
		public Matrix U
		{
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0xE3E738", Offset = "0xE3E738", VA = "0xE3E738")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9823B8", Offset = "0x9823B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0xE3E740", Offset = "0xE3E740", VA = "0xE3E740")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9823C8", Offset = "0x9823C8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public Matrix Q
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0xE3E748", Offset = "0xE3E748", VA = "0xE3E748")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9823D8", Offset = "0x9823D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0xE3E750", Offset = "0xE3E750", VA = "0xE3E750")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9823E8", Offset = "0x9823E8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009F")]
		public Matrix H
		{
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0xE3E758", Offset = "0xE3E758", VA = "0xE3E758")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9823F8", Offset = "0x9823F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0xE3E760", Offset = "0xE3E760", VA = "0xE3E760")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982408", Offset = "0x982408")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A0")]
		public Matrix R
		{
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0xE3E768", Offset = "0xE3E768", VA = "0xE3E768")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982418", Offset = "0x982418")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0xE3E770", Offset = "0xE3E770", VA = "0xE3E770")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982428", Offset = "0x982428")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A1")]
		public Matrix State
		{
			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0xE3E778", Offset = "0xE3E778", VA = "0xE3E778")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982438", Offset = "0x982438")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0xE3E780", Offset = "0xE3E780", VA = "0xE3E780")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982448", Offset = "0x982448")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public Matrix Covariance
		{
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0xE3E788", Offset = "0xE3E788", VA = "0xE3E788")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982458", Offset = "0x982458")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0xE3E790", Offset = "0xE3E790", VA = "0xE3E790")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982468", Offset = "0x982468")]
			private set
			{
			}
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xE3E798", Offset = "0xE3E798", VA = "0xE3E798")]
		public KalmanFilter(Matrix f, Matrix b, Matrix u, Matrix q, Matrix h, Matrix r)
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xE3E7F8", Offset = "0xE3E7F8", VA = "0xE3E7F8")]
		public void SetState(Matrix state, Matrix covariance)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xE3E800", Offset = "0xE3E800", VA = "0xE3E800")]
		public void Correct(Matrix z)
		{
		}
	}
	[Token(Token = "0x2000250")]
	internal class KalmanFilterSimple1D
	{
		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980EF0", Offset = "0x980EF0")]
		private double <X0>k__BackingField;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980F00", Offset = "0x980F00")]
		private double <P0>k__BackingField;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980F10", Offset = "0x980F10")]
		private double <F>k__BackingField;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980F20", Offset = "0x980F20")]
		private double <Q>k__BackingField;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980F30", Offset = "0x980F30")]
		private double <H>k__BackingField;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980F40", Offset = "0x980F40")]
		private double <R>k__BackingField;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980F50", Offset = "0x980F50")]
		private double <State>k__BackingField;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x980F60", Offset = "0x980F60")]
		private double <Covariance>k__BackingField;

		[Token(Token = "0x170000A3")]
		public double X0
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0xE3EAA8", Offset = "0xE3EAA8", VA = "0xE3EAA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982478", Offset = "0x982478")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0xE3EAB0", Offset = "0xE3EAB0", VA = "0xE3EAB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982488", Offset = "0x982488")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A4")]
		public double P0
		{
			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0xE3EAB8", Offset = "0xE3EAB8", VA = "0xE3EAB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982498", Offset = "0x982498")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DE6")]
			[Address(RVA = "0xE3EAC0", Offset = "0xE3EAC0", VA = "0xE3EAC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9824A8", Offset = "0x9824A8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A5")]
		public double F
		{
			[Token(Token = "0x6000DE7")]
			[Address(RVA = "0xE3EAC8", Offset = "0xE3EAC8", VA = "0xE3EAC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9824B8", Offset = "0x9824B8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DE8")]
			[Address(RVA = "0xE3EAD0", Offset = "0xE3EAD0", VA = "0xE3EAD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9824C8", Offset = "0x9824C8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A6")]
		public double Q
		{
			[Token(Token = "0x6000DE9")]
			[Address(RVA = "0xE3EAD8", Offset = "0xE3EAD8", VA = "0xE3EAD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9824D8", Offset = "0x9824D8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DEA")]
			[Address(RVA = "0xE3EAE0", Offset = "0xE3EAE0", VA = "0xE3EAE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9824E8", Offset = "0x9824E8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		public double H
		{
			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0xE3EAE8", Offset = "0xE3EAE8", VA = "0xE3EAE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9824F8", Offset = "0x9824F8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0xE3EAF0", Offset = "0xE3EAF0", VA = "0xE3EAF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982508", Offset = "0x982508")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		public double R
		{
			[Token(Token = "0x6000DED")]
			[Address(RVA = "0xE3EAF8", Offset = "0xE3EAF8", VA = "0xE3EAF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982518", Offset = "0x982518")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0xE3EB00", Offset = "0xE3EB00", VA = "0xE3EB00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982528", Offset = "0x982528")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A9")]
		public double State
		{
			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0xE3EB08", Offset = "0xE3EB08", VA = "0xE3EB08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982538", Offset = "0x982538")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0xE3EB10", Offset = "0xE3EB10", VA = "0xE3EB10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982548", Offset = "0x982548")]
			private set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		public double Covariance
		{
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0xE3EB18", Offset = "0xE3EB18", VA = "0xE3EB18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982558", Offset = "0x982558")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0xE3EB20", Offset = "0xE3EB20", VA = "0xE3EB20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x982568", Offset = "0x982568")]
			private set
			{
			}
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xE3EB28", Offset = "0xE3EB28", VA = "0xE3EB28")]
		public KalmanFilterSimple1D(double q, double r, double f = 1.0, double h = 1.0)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xE3EB74", Offset = "0xE3EB74", VA = "0xE3EB74")]
		public void SetState(double state, double covariance)
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xE3EB7C", Offset = "0xE3EB7C", VA = "0xE3EB7C")]
		public void Correct(double data)
		{
		}
	}
	[Token(Token = "0x2000251")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x97FA04", Offset = "0x97FA04")]
	public class Matrix
	{
		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int rows;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int cols;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double[,] mat;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Matrix L;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Matrix U;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] pi;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double detOfP;

		[Token(Token = "0x170000AB")]
		public double Item
		{
			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0xE3F318", Offset = "0xE3F318", VA = "0xE3F318")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0xE3F370", Offset = "0xE3F370", VA = "0xE3F370")]
			set
			{
			}
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xE3F210", Offset = "0xE3F210", VA = "0xE3F210")]
		public Matrix(int iRows, int iCols)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xE3F2A4", Offset = "0xE3F2A4", VA = "0xE3F2A4")]
		public Matrix(double[,] matrix)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xE3F308", Offset = "0xE3F308", VA = "0xE3F308")]
		public bool IsSquare()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xE3F3C8", Offset = "0xE3F3C8", VA = "0xE3F3C8")]
		public Matrix GetCol(int k)
		{
			return null;
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xE3F4B8", Offset = "0xE3F4B8", VA = "0xE3F4B8")]
		public void SetCol(Matrix v, int k)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xE3F564", Offset = "0xE3F564", VA = "0xE3F564")]
		public void MakeLU()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xE3FB90", Offset = "0xE3FB90", VA = "0xE3FB90")]
		public Matrix SolveWith(Matrix v)
		{
			return null;
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xE3E984", Offset = "0xE3E984", VA = "0xE3E984")]
		public Matrix Invert()
		{
			return null;
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xE400B8", Offset = "0xE400B8", VA = "0xE400B8")]
		public double Det()
		{
			return default(double);
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xE40130", Offset = "0xE40130", VA = "0xE40130")]
		public Matrix GetP()
		{
			return null;
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xE3FA90", Offset = "0xE3FA90", VA = "0xE3FA90")]
		public Matrix Duplicate()
		{
			return null;
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xE3FD10", Offset = "0xE3FD10", VA = "0xE3FD10")]
		public static Matrix SubsForth(Matrix A, Matrix b)
		{
			return null;
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xE3FE84", Offset = "0xE3FE84", VA = "0xE3FE84")]
		public static Matrix SubsBack(Matrix A, Matrix b)
		{
			return null;
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xE3FFF8", Offset = "0xE3FFF8", VA = "0xE3FFF8")]
		public static Matrix ZeroMatrix(int iRows, int iCols)
		{
			return null;
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xE3F9C0", Offset = "0xE3F9C0", VA = "0xE3F9C0")]
		public static Matrix IdentityMatrix(int iRows, int iCols)
		{
			return null;
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xE3EAA0", Offset = "0xE3EAA0", VA = "0xE3EAA0")]
		public static Matrix IdentityMatrix(int size)
		{
			return null;
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xE401E0", Offset = "0xE401E0", VA = "0xE401E0")]
		public static Matrix RandomMatrix(int iRows, int iCols, int dispersion)
		{
			return null;
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xE402F4", Offset = "0xE402F4", VA = "0xE402F4")]
		public static Matrix Parse(string ps)
		{
			return null;
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xE407E4", Offset = "0xE407E4", VA = "0xE407E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xE40970", Offset = "0xE40970", VA = "0xE40970")]
		public static Matrix Transpose(Matrix m)
		{
			return null;
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xE3E97C", Offset = "0xE3E97C", VA = "0xE3E97C")]
		public Matrix Transpose()
		{
			return null;
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xE40A48", Offset = "0xE40A48", VA = "0xE40A48")]
		public static Matrix Power(Matrix m, int pow)
		{
			return null;
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xE40B34", Offset = "0xE40B34", VA = "0xE40B34")]
		private static void SafeAplusBintoC(Matrix A, int xa, int ya, Matrix B, int xb, int yb, Matrix C, int size)
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xE40CA8", Offset = "0xE40CA8", VA = "0xE40CA8")]
		private static void SafeAminusBintoC(Matrix A, int xa, int ya, Matrix B, int xb, int yb, Matrix C, int size)
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xE40E1C", Offset = "0xE40E1C", VA = "0xE40E1C")]
		private static void SafeACopytoC(Matrix A, int xa, int ya, Matrix C, int size)
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xE40F10", Offset = "0xE40F10", VA = "0xE40F10")]
		private static void AplusBintoC(Matrix A, int xa, int ya, Matrix B, int xb, int yb, Matrix C, int size)
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xE40FEC", Offset = "0xE40FEC", VA = "0xE40FEC")]
		private static void AminusBintoC(Matrix A, int xa, int ya, Matrix B, int xb, int yb, Matrix C, int size)
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xE410C8", Offset = "0xE410C8", VA = "0xE410C8")]
		private static void ACopytoC(Matrix A, int xa, int ya, Matrix C, int size)
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xE41164", Offset = "0xE41164", VA = "0xE41164")]
		private static Matrix StrassenMultiply(Matrix A, Matrix B)
		{
			return null;
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xE41E0C", Offset = "0xE41E0C", VA = "0xE41E0C")]
		private static void StrassenMultiplyRun(Matrix A, Matrix B, Matrix C, int l, Matrix[,] f)
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xE42900", Offset = "0xE42900", VA = "0xE42900")]
		public static Matrix StupidMultiply(Matrix m1, Matrix m2)
		{
			return null;
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xE42A60", Offset = "0xE42A60", VA = "0xE42A60")]
		private static Matrix Multiply(double n, Matrix m)
		{
			return null;
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xE42B48", Offset = "0xE42B48", VA = "0xE42B48")]
		private static Matrix Add(Matrix m1, Matrix m2)
		{
			return null;
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xE40664", Offset = "0xE40664", VA = "0xE40664")]
		public static string NormalizeMatrixString(string matStr)
		{
			return null;
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xE42CB0", Offset = "0xE42CB0", VA = "0xE42CB0")]
		public static Matrix CreateVector(params double[] values)
		{
			return null;
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xE42DB4", Offset = "0xE42DB4", VA = "0xE42DB4")]
		public static Matrix operator -(Matrix m)
		{
			return null;
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xE3E980", Offset = "0xE3E980", VA = "0xE3E980")]
		public static Matrix operator +(Matrix m1, Matrix m2)
		{
			return null;
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xE3EA70", Offset = "0xE3EA70", VA = "0xE3EA70")]
		public static Matrix operator -(Matrix m1, Matrix m2)
		{
			return null;
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xE3E978", Offset = "0xE3E978", VA = "0xE3E978")]
		public static Matrix operator *(Matrix m1, Matrix m2)
		{
			return null;
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xE42DBC", Offset = "0xE42DBC", VA = "0xE42DBC")]
		public static Matrix operator *(double n, Matrix m)
		{
			return null;
		}
	}
	[Token(Token = "0x2000252")]
	public class MException : Exception
	{
		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xE3EC54", Offset = "0xE3EC54", VA = "0xE3EC54")]
		public MException(string Message)
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class MatrixKalmanWrapper : IKalmanWrapper, IDisposable
	{
		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private KalmanFilter kX;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private KalmanFilter kY;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private KalmanFilter kZ;

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xE42DC0", Offset = "0xE42DC0", VA = "0xE42DC0")]
		public MatrixKalmanWrapper()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xE43254", Offset = "0xE43254", VA = "0xE43254", Slot = "4")]
		public Vector3 Update(Vector3 current)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xE43488", Offset = "0xE43488", VA = "0xE43488", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xE4305C", Offset = "0xE4305C", VA = "0xE4305C")]
		private KalmanFilter makeKalmanFilter(Matrix f, Matrix b, Matrix u, Matrix q, Matrix h, Matrix r)
		{
			return null;
		}
	}
	[Token(Token = "0x2000254")]
	public class SimpleKalmanWrapper : IKalmanWrapper, IDisposable
	{
		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private KalmanFilterSimple1D kX;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private KalmanFilterSimple1D kY;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private KalmanFilterSimple1D kZ;

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x1131C5C", Offset = "0x1131C5C", VA = "0x1131C5C")]
		public SimpleKalmanWrapper()
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x1131D90", Offset = "0x1131D90", VA = "0x1131D90", Slot = "4")]
		public Vector3 Update(Vector3 current)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x1131E2C", Offset = "0x1131E2C", VA = "0x1131E2C", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x1131CE8", Offset = "0x1131CE8", VA = "0x1131CE8")]
		private KalmanFilterSimple1D makeKalmanFilter(double q, double r, double f, double h)
		{
			return null;
		}
	}
}
namespace Kalman.Simulate
{
	[Token(Token = "0x2000255")]
	public sealed class GuassianRandom
	{
		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _hasDeviate;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double _storedDeviate;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random _random;

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x1203260", Offset = "0x1203260", VA = "0x1203260")]
		public GuassianRandom()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x12032F4", Offset = "0x12032F4", VA = "0x12032F4")]
		public double NextGuassian(double mu = 0.0, double sigma = 1.0)
		{
			return default(double);
		}
	}
}
