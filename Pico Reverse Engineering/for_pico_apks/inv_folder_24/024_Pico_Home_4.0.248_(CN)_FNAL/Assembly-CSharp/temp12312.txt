[variableName] Body: m_BoneLength
[variableName] Body: m_BoneTotalLength
[variableName] Body: dynamicBoneColliderBase
[variableName] Environment: roomInListIndex
[methodName] Head: HeadCallBack
[variableName] Environment: roomCg
[variableName] Environment: roomCg
[methodName] Hand: ChangeHandNess
[variableName] Head: HeadSetController
[variableName] Hand: mainHandID
[methodName] Head: ResetHeadSensorForController
[variableName] Hand: ChangeHandNessCallBackEvent
[variableName] Hand: mainHand
[variableName] Eye: leftEyeOffset
[variableName] Eye: rightEyeOffset
[variableName] Eye: leftEyeRect
[variableName] Eye: rightEyeRect
[variableName] Eye: leftEyeView
[variableName] Eye: rightEyeView
[methodName] Eye: EyeOffset
[methodName] Eye: EyeRect
[methodName] Eye: CleanEyeMask
[methodName] Eye: EyeRender
[variableName] Eye: LeftEyeCamera
[variableName] Eye: RightEyeCamera
[variableName] Eye: MonoEyeCamera
[variableName] Eye: BothEyeCamera
[variableName] Eye: MonoEyeTextureID
[variableName] Head: isHeadLocked
[variableName] Eye: EyeTracking
[variableName] Eye: supportEyeTracking
[methodName] Eye: MonoEyeRender
[methodName] Eye: SetEyeTrackingMode
[methodName] Eye: GetEyeTrackingPos
[variableName] Eye: layerEyeCamera
[variableName] Eye: currEyeTextureIdx
[variableName] Eye: nextEyeTextureIdx
[variableName] Eye: lastEyeTextureIdx
[methodName] Eye: CreateEyeBuffer
[methodName] Eye: GetEyeVFOV
[methodName] Eye: GetEyeHFOV
[methodName] Eye: ConfigureEyeBuffer
[methodName] Eye: ReCreateEyeBuffer
[methodName] Eye: GetEyeBufferResolution
[methodName] Eye: InitEye
[methodName] Eye: SetEyeProjection
[methodName] Eye: InitEye
[methodName] Head: UpdateHead
[variableName] Eye: EyeFovChanged
[variableName] Head: HeadPose
[methodName] Head: RefreshHeadData
[methodName] Eye: GetLeftEyeVisibleTanAngles
[methodName] Eye: GetLeftEyeNoLensTanAngles
[methodName] Eye: GetLeftEyeVisibleScreenRect
[variableName] Body: canvasRigidBody
[variableName] Head: autoUntiltHead
[variableName] Eye: leftEyeUndistortedProj
[variableName] Eye: rightEyeUndistortedProj
[variableName] Eye: leftEyeProj
[variableName] Eye: rightEyeProj
[methodName] Eye: InitEyePara
[variableName] Eye: leftEyeVisibleTanAngles
[variableName] Eye: leftEyeRect
[variableName] Eye: rightEyeRect
[methodName] Eye: InitForEye
[methodName] Head: MatchAvatarByHead
[variableName] Head: currentHead
[variableName] Head: receiveHead
[methodName] Head: CustomHead
[variableName] Face: isFace
[variableName] Face: maleFaceList
[variableName] Face: femaleFaceList
[variableName] Hand: shakeHand
[variableName] Eye: LeftEyeBone
[variableName] Eye: rightEyeBone
[variableName] Body: defaultLeftBoneAngles
[variableName] Body: defaultRightBoneAngles
[variableName] Hand: shakeHandPoint
[variableName] Hand: vRTKHand
[variableName] Face: hasFace
[variableName] Hand: shakeHandIndex
[methodName] Hand: GetHandPos
[methodName] Hand: SetHandShake
[methodName] Hand: SetHandShakeStop
[variableName] Hand: currentHand
[variableName] Hand: currentHandQuat
[variableName] Hand: hasShakeHandTip
[variableName] Hand: allowHand
[variableName] Head: socialCinemaHeadSptie
[methodName] Head: SetHeadSprite
[variableName] Environment: roomKey
[variableName] Environment: roomID
[variableName] Environment: roomName
[variableName] Environment: roomId
[variableName] Hand: m_Hand
[variableName] Environment: roomListTypes
[variableName] Environment: roomInListIndex
[variableName] Environment: roomMessage
[variableName] Head: posHead
[variableName] Body: MessageBodyPath
[variableName] Environment: ChatroomQueueListCallback
[variableName] Environment: ChatroomQueueDropCallback
[variableName] Environment: ChatroomQueuePollCallback
[variableName] Environment: ChatroomQueueOfferCallback
[variableName] Environment: ChatroomQueueHeaderCallback
[methodName] Hand: MirrorHand
[variableName] Hand: controllerHand
[variableName] Face: alwaysFaceHeadset
[methodName] Hand: GetControllerLeftHand
[methodName] Hand: GetControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: GetControllerModelHand
[methodName] Hand: GetSDKManagerControllerLeftHand
[methodName] Hand: GetSDKManagerControllerRightHand
[methodName] Hand: CheckActualOrScriptAliasControllerIsLeftHand
[methodName] Hand: CheckActualOrScriptAliasControllerIsRightHand
[methodName] Hand: CheckControllerLeftHand
[methodName] Hand: CheckControllerRightHand
[methodName] Hand: GetSDKManagerControllerModelForHand
[methodName] Hand: GetControllerLeftHand
[methodName] Hand: GetControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: GetControllerLeftHand
[methodName] Hand: GetControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[variableName] Hand: controllerHand
[variableName] Hand: showHandAxisHelpers
[variableName] Hand: leftHandColor
[variableName] Hand: rightHandColor
[variableName] Hand: isHand
[variableName] Hand: rightHand
[variableName] Hand: leftHand
[variableName] Hand: currentHand
[variableName] Hand: leftHandHorizontalAxisGuide
[variableName] Hand: leftHandVerticalAxisGuide
[variableName] Hand: rightHandHorizontalAxisGuide
[variableName] Hand: rightHandVerticalAxisGuide
[methodName] Hand: SetHandColor
[methodName] Hand: SetHand
[methodName] Hand: GetControllerLeftHand
[methodName] Hand: GetControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: GetControllerLeftHand
[methodName] Hand: GetControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: IsAxisOnHandButtonPress
[methodName] Hand: GetControllerLeftHand
[methodName] Hand: GetControllerRightHand
[methodName] Hand: GetControllerByHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: GetControllerModelHand
[variableName] Body: connectedBody
[methodName] Body: InitBody
[methodName] Body: InitBody
[methodName] Body: GetBody
[variableName] Hand: controllerHandType
[variableName] Body: highlightBody
[variableName] Body: lastHighlightBody
[variableName] Hand: controllerHand
[variableName] Hand: controllerHand
[variableName] Body: createRigidBodyWhenNotTouching
[variableName] Hand: controllerHand
[variableName] Body: rigidBodyForcedActive
[variableName] Body: touchRigidBody
[methodName] Body: ToggleControllerRigidBody
[methodName] Body: IsRigidBodyActive
[methodName] Body: IsRigidBodyForcedActive
[methodName] Body: CustomRigidBodyIsChild
[methodName] Body: CreateTouchRigidBody
[variableName] Hand: validObjectFromHand
[methodName] Hand: GetValidObjectFromHand
[methodName] Hand: GetControllerHand
[variableName] Environment: roomExtender
[variableName] Hand: controllerReferenceLeftHand
[variableName] Hand: controllerReferenceRightHand
[methodName] Hand: RegisterHandControllerListener
[variableName] Body: internalBodyPhysics
[variableName] Head: playerHeadPositionBeforeRotation
[variableName] Hand: controllerLeftHand
[variableName] Hand: controllerRightHand
[variableName] Hand: controllerLeftHand
[variableName] Hand: controllerRightHand
[methodName] Body: IsBodyColliding
[methodName] Head: MoveHeadCircle
[methodName] Head: MoveHeadCircleNonLinearDrift
[methodName] Head: MoveHeadCircle
[methodName] Head: MoveHeadCircleNonLinearDrift
[variableName] Hand: cachedAttachedHand
[variableName] Environment: boundaryRenderers
[variableName] Body: enableBodyCollisions
[variableName] Body: customBodyColliderContainer
[variableName] Body: currentBodyCollisionsSetting
[variableName] Body: enableBodyCollisionsStartingValue
[methodName] Body: ApplyBodyVelocity
[methodName] Body: GetBodyColliderContainer
[methodName] Body: SetBodyPhysicsEvent
[methodName] Body: CheckBodyCollisionsSetting
[methodName] Body: EnableBodyPhysics
[methodName] Body: DisableBodyPhysics
[methodName] Body: GenerateBodyCollider
[variableName] Hand: controllerRightHand
[variableName] Hand: controllerLeftHand
[methodName] Body: ApplyBodyMomentum
[variableName] Head: HeadOffset
[variableName] Head: playerHead
[methodName] Body: BodyCollisionsEnabled
[methodName] Body: BodyListen
[variableName] Body: canvasRigidBody
[variableName] Hand: cachedAttachedHand
[methodName] Hand: GetControllerHandType
[methodName] Hand: GetControllerHand
[methodName] Hand: GetControllerLeftHand
[methodName] Hand: GetControllerRightHand
[methodName] Hand: GetControllerReferenceLeftHand
[methodName] Hand: GetControllerReferenceRightHand
[methodName] Hand: GetControllerReferenceForHand
[methodName] Hand: IsControllerOfHand
[methodName] Hand: IsControllerLeftHand
[methodName] Hand: IsControllerRightHand
[methodName] Hand: GetOppositeHand
[methodName] Hand: GetModelAliasControllerHand
[methodName] Eye: GetEyeTextureResolutionScale
[methodName] Eye: SetEyeTextureResolutionScale
[variableName] Body: grabbedObjectRigidBody
[variableName] Hand: leftHandAvatar
[variableName] Hand: rightHandAvatar
[variableName] Hand: controllerLeftHand
[variableName] Hand: controllerRightHand
[methodName] Face: ExplodeFace
[variableName] Body: highlightBodyOnlyOnCollision
[variableName] Environment: roomExtender
[variableName] Hand: actualControllerHand
[methodName] Hand: TestStaticHand
[variableName] Body: rigidBody
[variableName] Hand: controllerRightHand
[variableName] Hand: controllerLeftHand
[methodName] Hand: GetPullHand
[variableName] Hand: controllerRightHand
[variableName] Hand: controllerRightHand
[variableName] Body: EntityBodyData
[variableName] Body: entityBody
[variableName] Body: entityBody
[methodName] Body: readHandshakeEntityBody
[methodName] Body: writeBody
[variableName] Body: _remainingBody
[variableName] Head: currentHeadLightColor01
[variableName] Head: currentHeadLightColor02
[variableName] Head: receiveHeadLightColor01
[variableName] Head: receiveHeadLightColor02
[variableName] Head: receiveHeadLight01Active
[variableName] Head: receiveHeadLight02Active
[variableName] Head: receiveHeadLight01Msg
[variableName] Head: receiveHeadLight02Msg
[methodName] Head: SetHeadLight
[methodName] Head: SetHeadLightColor01Active
[methodName] Head: SetHeadLightColor02Active
[variableName] Environment: roomConfig
[variableName] Environment: roomConfig
[variableName] Environment: roomType
[variableName] Environment: roomConfig
[variableName] Environment: roomConfig
[variableName] Environment: roomID
[variableName] Environment: _roomCount
[variableName] Environment: boundarySystemCallback
[variableName] Environment: boundarySystemCallbackShrink
[variableName] Environment: boundaryPoints
[variableName] Environment: boundaryPoints
[methodName] Hand: UPvr_SetHandNess
[methodName] Hand: UPvr_GetHandNess
[methodName] Hand: UPvr_GetMainHandNess
[methodName] Hand: UPvr_SetMainHandNess
[variableName] Eye: leftEyePoseStatus
[variableName] Eye: rightEyePoseStatus
[variableName] Eye: combinedEyePoseStatus
[variableName] Eye: leftEyeGazePoint
[variableName] Eye: rightEyeGazePoint
[variableName] Eye: combinedEyeGazePoint
[variableName] Eye: leftEyeGazeVector
[variableName] Eye: rightEyeGazeVector
[variableName] Eye: combinedEyeGazeVector
[variableName] Eye: leftEyeOpenness
[variableName] Eye: rightEyeOpenness
[variableName] Eye: leftEyePupilDilation
[variableName] Eye: rightEyePupilDilation
[variableName] Eye: leftEyePositionGuide
[variableName] Eye: rightEyePositionGuide
[methodName] Eye: Pvr_GetEyeTrackingData
[methodName] Eye: Pvr_GetEyeTrackingAutoIPD
[methodName] Eye: UPvr_GetEyeTrackingAutoIPD
[methodName] Eye: UPvr_GetEyeBufferData
[methodName] Eye: UPvr_getEyeTrackingData
[methodName] Eye: UPvr_getEyeTrackingGazeRay
[methodName] Eye: UPvr_getEyeTrackingGazeRayWorld
[methodName] Eye: UPvr_getEyeTrackingPos
[variableName] Body: rigidBody
[variableName] Environment: roomId
[variableName] Environment: roomStatusText
[methodName] Body: CopyBoneWeightsFromSeamMeshToOtherMeshes
[variableName] Body: _tmpCachedBoneWeights
[methodName] Body: GetBoneWeights
[methodName] Body: _getBoneWeights
[methodName] Body: _buildBoneIdx2dgoMap
[variableName] Body: tmpCachedBoneWeights
