using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using DarkTonic.MasterAudio;
using FMOD;
using FMOD.Studio;
using Il2CppDummyDll;
using NLayer;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Networking;
using UnityEngine.UI;
using uAudio;
using uAudio.uAudio_backend;
using uAudioDemo.Mp3StreamingDemo;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class MA_Bootstrapper : MonoBehaviour
{
	[Token(Token = "0x6000001")]
	[Address(RVA = "0x21BF618", Offset = "0x21BF618", VA = "0x21BF618")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x21BF61C", Offset = "0x21BF61C", VA = "0x21BF61C")]
	public MA_Bootstrapper()
	{
	}
}
[Token(Token = "0x2000003")]
public class MA_DestroyFinishedParticle : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem particles;

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x21BF624", Offset = "0x21BF624", VA = "0x21BF624")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x21BF694", Offset = "0x21BF694", VA = "0x21BF694")]
	private void Update()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x21BF734", Offset = "0x21BF734", VA = "0x21BF734")]
	public MA_DestroyFinishedParticle()
	{
	}
}
[Token(Token = "0x2000004")]
public class MA_EnemyOne : MonoBehaviour
{
	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ExplosionParticlePrefab;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform _trans;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _speed;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _horizSpeed;

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x21BF73C", Offset = "0x21BF73C", VA = "0x21BF73C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x21BF7D0", Offset = "0x21BF7D0", VA = "0x21BF7D0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x21BF8D8", Offset = "0x21BF8D8", VA = "0x21BF8D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x21BFA3C", Offset = "0x21BFA3C", VA = "0x21BFA3C")]
	public MA_EnemyOne()
	{
	}
}
[Token(Token = "0x2000005")]
public class MA_EnemySpawner : MonoBehaviour
{
	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Enemy;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool spawnerEnabled;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform trans;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float nextSpawnTime;

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x21BFA44", Offset = "0x21BFA44", VA = "0x21BFA44")]
	private void Awake()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x21BFABC", Offset = "0x21BFABC", VA = "0x21BFABC")]
	private void Update()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x21BFC5C", Offset = "0x21BFC5C", VA = "0x21BFC5C")]
	public MA_EnemySpawner()
	{
	}
}
[Token(Token = "0x2000006")]
public class MA_GameScene : MonoBehaviour
{
	[Token(Token = "0x600000D")]
	[Address(RVA = "0x21BFC64", Offset = "0x21BFC64", VA = "0x21BFC64")]
	public MA_GameScene()
	{
	}
}
[Token(Token = "0x2000007")]
public class MA_Laser : MonoBehaviour
{
	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform _trans;

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x21BFC6C", Offset = "0x21BFC6C", VA = "0x21BFC6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x21BFCAC", Offset = "0x21BFCAC", VA = "0x21BFCAC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x21BFD94", Offset = "0x21BFD94", VA = "0x21BFD94")]
	private void Update()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x21BFE80", Offset = "0x21BFE80", VA = "0x21BFE80")]
	public MA_Laser()
	{
	}
}
[Token(Token = "0x2000008")]
public class MA_LocalizationUI : MonoBehaviour
{
	[Token(Token = "0x6000012")]
	[Address(RVA = "0x21BFE88", Offset = "0x21BFE88", VA = "0x21BFE88")]
	public MA_LocalizationUI()
	{
	}
}
[Token(Token = "0x2000009")]
public class MA_PlayerControl : MonoBehaviour
{
	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ProjectilePrefab;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool canShoot;

	[Token(Token = "0x400000D")]
	private const float MoveSpeed = 10f;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _trans;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _lastMoveAmt;

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x21BFE90", Offset = "0x21BFE90", VA = "0x21BFE90")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x21BFED0", Offset = "0x21BFED0", VA = "0x21BFED0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x21BFF80", Offset = "0x21BFF80", VA = "0x21BFF80")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x21BFF84", Offset = "0x21BFF84", VA = "0x21BFF84")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x21BFF88", Offset = "0x21BFF88", VA = "0x21BFF88")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x21BFF8C", Offset = "0x21BFF8C", VA = "0x21BFF8C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x21C01A4", Offset = "0x21C01A4", VA = "0x21C01A4")]
	public MA_PlayerControl()
	{
	}
}
[Token(Token = "0x200000A")]
public class MA_PlayerSpawnerControl : MonoBehaviour
{
	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Player;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float nextSpawnTime;

	[Token(Token = "0x17000001")]
	private bool PlayerActive
	{
		[Token(Token = "0x600001B")]
		[Address(RVA = "0x21C01E4", Offset = "0x21C01E4", VA = "0x21C01E4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x21C01B4", Offset = "0x21C01B4", VA = "0x21C01B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x21C0200", Offset = "0x21C0200", VA = "0x21C0200")]
	private void Update()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x21C0284", Offset = "0x21C0284", VA = "0x21C0284")]
	public MA_PlayerSpawnerControl()
	{
	}
}
[Token(Token = "0x200000B")]
public class MA_SampleICustomEventReceiver : MonoBehaviour, ICustomEventReceiver
{
	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly List<string> _eventsSubscribedTo;

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x21C028C", Offset = "0x21C028C", VA = "0x21C028C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x21C0290", Offset = "0x21C0290", VA = "0x21C0290")]
	private void Start()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x21C03CC", Offset = "0x21C03CC", VA = "0x21C03CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x21C0450", Offset = "0x21C0450", VA = "0x21C0450")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x21C0294", Offset = "0x21C0294", VA = "0x21C0294", Slot = "4")]
	public void CheckForIllegalCustomEvents()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x21C05DC", Offset = "0x21C05DC", VA = "0x21C05DC", Slot = "5")]
	public void ReceiveEvent(string customEventName, Vector3 originPoint)
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x21C06EC", Offset = "0x21C06EC", VA = "0x21C06EC", Slot = "6")]
	public bool SubscribesToEvent(string customEventName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x21C03D0", Offset = "0x21C03D0", VA = "0x21C03D0", Slot = "7")]
	public void RegisterReceiver()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x21C0574", Offset = "0x21C0574", VA = "0x21C0574", Slot = "8")]
	public void UnregisterReceiver()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x21C0778", Offset = "0x21C0778", VA = "0x21C0778", Slot = "9")]
	public IList<AudioEventGroup> GetAllEvents()
	{
		return null;
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x21C0890", Offset = "0x21C0890", VA = "0x21C0890")]
	public MA_SampleICustomEventReceiver()
	{
	}
}
[Token(Token = "0x200000C")]
public class MA_TestUI : MonoBehaviour
{
	[Token(Token = "0x6000029")]
	[Address(RVA = "0x21C0954", Offset = "0x21C0954", VA = "0x21C0954")]
	public MA_TestUI()
	{
	}
}
[Token(Token = "0x200000D")]
public static class AudioLoaderOptimizer
{
	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Dictionary<string, List<GameObject>> PlayingGameObjectsByClipName;

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x1667B0C", Offset = "0x1667B0C", VA = "0x1667B0C")]
	public static void AddNonPreloadedPlayingClip(AudioClip clip, GameObject maHolderGameObject)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x1667D00", Offset = "0x1667D00", VA = "0x1667D00")]
	public static void RemoveNonPreloadedPlayingClip(AudioClip clip, GameObject maHolderGameObject)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x1667E8C", Offset = "0x1667E8C", VA = "0x1667E8C")]
	public static bool IsAnyOfNonPreloadedClipPlaying(AudioClip clip)
	{
		return default(bool);
	}
}
[Token(Token = "0x200000E")]
[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x12F11AC", Offset = "0x12F11AC")]
public class ListenerFollower : MonoBehaviour
{
	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform _transToFollow;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _goToFollow;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _trans;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject _go;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SphereCollider _collider;

	[Token(Token = "0x17000002")]
	public SphereCollider Trigger
	{
		[Token(Token = "0x6000032")]
		[Address(RVA = "0x21BF16C", Offset = "0x21BF16C", VA = "0x21BF16C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000003")]
	public GameObject GameObj
	{
		[Token(Token = "0x6000033")]
		[Address(RVA = "0x21BF56C", Offset = "0x21BF56C", VA = "0x21BF56C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000004")]
	public Transform Trans
	{
		[Token(Token = "0x6000034")]
		[Address(RVA = "0x21BF4C8", Offset = "0x21BF4C8", VA = "0x21BF4C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x21BF0F0", Offset = "0x21BF0F0", VA = "0x21BF0F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x21BF238", Offset = "0x21BF238", VA = "0x21BF238")]
	public void StartFollowing(Transform transToFollow, float trigRadius)
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x21BF2A4", Offset = "0x21BF2A4", VA = "0x21BF2A4")]
	public void ManualUpdate()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x21BF36C", Offset = "0x21BF36C", VA = "0x21BF36C")]
	private void BatchOcclusionRaycasts()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x21BF610", Offset = "0x21BF610", VA = "0x21BF610")]
	public ListenerFollower()
	{
	}
}
[Token(Token = "0x200000F")]
public static class OculusAudioHelper
{
	[Token(Token = "0x6000036")]
	[Address(RVA = "0x21C095C", Offset = "0x21C095C", VA = "0x21C095C")]
	public static bool DarkTonicOculusAudioPackageInstalled()
	{
		return default(bool);
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x21C0964", Offset = "0x21C0964", VA = "0x21C0964")]
	public static void AddOculusAudioSourceToVariation(SoundGroupVariation variation)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x21C0968", Offset = "0x21C0968", VA = "0x21C0968")]
	public static void AddOculusAudioSourceToAllVariations()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x21C096C", Offset = "0x21C096C", VA = "0x21C096C")]
	public static void RemoveOculusAudioSourceFromAllVariations()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x21C0970", Offset = "0x21C0970", VA = "0x21C0970")]
	public static void CopyOculusAudioSource(DynamicGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x21C0974", Offset = "0x21C0974", VA = "0x21C0974")]
	public static void CopyOculusAudioSource(DynamicGroupVariation sourceVariation, SoundGroupVariation destVariation)
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x21C0978", Offset = "0x21C0978", VA = "0x21C0978")]
	public static void CopyOculusAudioSource(SoundGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}
}
[Token(Token = "0x2000010")]
public static class ResonanceAudioHelper
{
	[Token(Token = "0x17000005")]
	public static bool ResonanceAudioOptionExists
	{
		[Token(Token = "0x600003D")]
		[Address(RVA = "0x21C0994", Offset = "0x21C0994", VA = "0x21C0994")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x21C099C", Offset = "0x21C099C", VA = "0x21C099C")]
	public static bool DarkTonicResonanceAudioPackageInstalled()
	{
		return default(bool);
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x21C09A4", Offset = "0x21C09A4", VA = "0x21C09A4")]
	public static void AddResonanceAudioSourceToVariation(SoundGroupVariation variation)
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x21C09A8", Offset = "0x21C09A8", VA = "0x21C09A8")]
	public static void AddResonanceAudioSourceToAllVariations()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x21C09AC", Offset = "0x21C09AC", VA = "0x21C09AC")]
	public static void RemoveResonanceAudioSourceFromAllVariations()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x21C09B0", Offset = "0x21C09B0", VA = "0x21C09B0")]
	public static void CopyResonanceAudioSource(DynamicGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x21C09B4", Offset = "0x21C09B4", VA = "0x21C09B4")]
	public static void CopyResonanceAudioSource(DynamicGroupVariation sourceVariation, SoundGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x21C09B8", Offset = "0x21C09B8", VA = "0x21C09B8")]
	public static void CopyResonanceAudioSource(SoundGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}
}
[Token(Token = "0x2000011")]
public class TransformFollower : MonoBehaviour
{
	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F3CF4", Offset = "0x12F3CF4")]
	public Transform RuntimeFollowingTransform;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _goToFollow;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _trans;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject _go;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SphereCollider _collider;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string _soundType;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string _variationName;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _willFollowSource;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool _isInsideTrigger;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	private bool _hasPlayedSound;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	private bool _groupLoadFailed;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private MasterAudioGroup _groupToPlay;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _playVolume;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool _positionAtClosestColliderPoint;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private MasterAudio.AmbientSoundExitMode _exitMode;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float _exitFadeTime;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private MasterAudio.AmbientSoundReEnterMode _reEnterMode;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float _reEnterFadeTime;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly List<Collider> _actorColliders;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly List<Collider2D> _actorColliders2D;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 _lastListenerPos;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private readonly Dictionary<Collider, Vector3> _lastPositionByCollider;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private readonly Dictionary<Collider2D, Vector3> _lastPositionByCollider2D;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private PlaySoundResult playingVariation;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private PlaySoundResult fadingVariation;

	[Token(Token = "0x17000006")]
	public SphereCollider Trigger
	{
		[Token(Token = "0x6000050")]
		[Address(RVA = "0x21C0ADC", Offset = "0x21C0ADC", VA = "0x21C0ADC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000007")]
	public GameObject GameObj
	{
		[Token(Token = "0x6000051")]
		[Address(RVA = "0x21C1BA8", Offset = "0x21C1BA8", VA = "0x21C1BA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000008")]
	public Transform Trans
	{
		[Token(Token = "0x6000052")]
		[Address(RVA = "0x21C23C4", Offset = "0x21C23C4", VA = "0x21C23C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x21C09BC", Offset = "0x21C09BC", VA = "0x21C09BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x21C0BA8", Offset = "0x21C0BA8", VA = "0x21C0BA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x21C0C28", Offset = "0x21C0C28", VA = "0x21C0C28")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x21C0E08", Offset = "0x21C0E08", VA = "0x21C0E08")]
	public void StartFollowing(Transform transToFollow, string soundType, string variationName, float volume, float trigRadius, bool willFollowSource, bool positionAtClosestColliderPoint, bool useTopCollider, bool useChildColliders, MasterAudio.AmbientSoundExitMode exitMode, float exitFadeTime, MasterAudio.AmbientSoundReEnterMode reEnterMode, float reEnterFadeTime)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x21C1B20", Offset = "0x21C1B20", VA = "0x21C1B20")]
	private void StopFollowing()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x21C1C4C", Offset = "0x21C1C4C", VA = "0x21C1C4C")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x21C20B0", Offset = "0x21C20B0", VA = "0x21C20B0")]
	public void ManualUpdate()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x21C1384", Offset = "0x21C1384", VA = "0x21C1384")]
	public bool RecalcClosestColliderPosition(bool forceRecalc = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x21C2468", Offset = "0x21C2468", VA = "0x21C2468")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x21C27B0", Offset = "0x21C27B0", VA = "0x21C27B0")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x21C0C98", Offset = "0x21C0C98", VA = "0x21C0C98")]
	private void PerformTriggerExit()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x21C28A0", Offset = "0x21C28A0", VA = "0x21C28A0")]
	public TransformFollower()
	{
	}
}
[Token(Token = "0x2000012")]
public class iTween : MonoBehaviour
{
	[Token(Token = "0x20001BC")]
	private delegate float EasingFunction(float start, float end, float Value);

	[Token(Token = "0x20001BD")]
	private delegate void ApplyTween();

	[Token(Token = "0x20001BE")]
	public enum EaseType
	{
		[Token(Token = "0x4000CA5")]
		easeInQuad,
		[Token(Token = "0x4000CA6")]
		easeOutQuad,
		[Token(Token = "0x4000CA7")]
		easeInOutQuad,
		[Token(Token = "0x4000CA8")]
		easeInCubic,
		[Token(Token = "0x4000CA9")]
		easeOutCubic,
		[Token(Token = "0x4000CAA")]
		easeInOutCubic,
		[Token(Token = "0x4000CAB")]
		easeInQuart,
		[Token(Token = "0x4000CAC")]
		easeOutQuart,
		[Token(Token = "0x4000CAD")]
		easeInOutQuart,
		[Token(Token = "0x4000CAE")]
		easeInQuint,
		[Token(Token = "0x4000CAF")]
		easeOutQuint,
		[Token(Token = "0x4000CB0")]
		easeInOutQuint,
		[Token(Token = "0x4000CB1")]
		easeInSine,
		[Token(Token = "0x4000CB2")]
		easeOutSine,
		[Token(Token = "0x4000CB3")]
		easeInOutSine,
		[Token(Token = "0x4000CB4")]
		easeInExpo,
		[Token(Token = "0x4000CB5")]
		easeOutExpo,
		[Token(Token = "0x4000CB6")]
		easeInOutExpo,
		[Token(Token = "0x4000CB7")]
		easeInCirc,
		[Token(Token = "0x4000CB8")]
		easeOutCirc,
		[Token(Token = "0x4000CB9")]
		easeInOutCirc,
		[Token(Token = "0x4000CBA")]
		linear,
		[Token(Token = "0x4000CBB")]
		spring,
		[Token(Token = "0x4000CBC")]
		easeInBounce,
		[Token(Token = "0x4000CBD")]
		easeOutBounce,
		[Token(Token = "0x4000CBE")]
		easeInOutBounce,
		[Token(Token = "0x4000CBF")]
		easeInBack,
		[Token(Token = "0x4000CC0")]
		easeOutBack,
		[Token(Token = "0x4000CC1")]
		easeInOutBack,
		[Token(Token = "0x4000CC2")]
		easeInElastic,
		[Token(Token = "0x4000CC3")]
		easeOutElastic,
		[Token(Token = "0x4000CC4")]
		easeInOutElastic,
		[Token(Token = "0x4000CC5")]
		punch
	}

	[Token(Token = "0x20001BF")]
	public enum LoopType
	{
		[Token(Token = "0x4000CC7")]
		none,
		[Token(Token = "0x4000CC8")]
		loop,
		[Token(Token = "0x4000CC9")]
		pingPong
	}

	[Token(Token = "0x20001C0")]
	public enum NamedValueColor
	{
		[Token(Token = "0x4000CCB")]
		_Color,
		[Token(Token = "0x4000CCC")]
		_SpecColor,
		[Token(Token = "0x4000CCD")]
		_Emission,
		[Token(Token = "0x4000CCE")]
		_ReflectColor
	}

	[Token(Token = "0x20001C1")]
	public static class Defaults
	{
		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float time;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float delay;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static NamedValueColor namedColorValue;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static LoopType loopType;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static EaseType easeType;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float lookSpeed;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static bool isLocal;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static Space space;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static bool orientToPath;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static Color color;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static float updateTimePercentage;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static float updateTime;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static float lookAhead;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static bool useRealTime;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static Vector3 up;
	}

	[Token(Token = "0x20001C2")]
	private class CRSpline
	{
		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] pts;

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x37E66AC", Offset = "0x37E66AC", VA = "0x37E66AC")]
		public CRSpline(params Vector3[] pts)
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x37E6740", Offset = "0x37E6740", VA = "0x37E6740")]
		public Vector3 Interp(float t)
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x20001C3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F38E4", Offset = "0x12F38E4")]
	private sealed class <TweenDelay>d__145 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000125")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0x37E625C", Offset = "0x37E625C", VA = "0x37E625C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0x37E62C4", Offset = "0x37E62C4", VA = "0x37E62C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x37E614C", Offset = "0x37E614C", VA = "0x37E614C")]
		[DebuggerHidden]
		public <TweenDelay>d__145(int <>1__state)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x37E6178", Offset = "0x37E6178", VA = "0x37E6178", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x37E617C", Offset = "0x37E617C", VA = "0x37E617C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x37E6264", Offset = "0x37E6264", VA = "0x37E6264", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F38F4", Offset = "0x12F38F4")]
	private sealed class <TweenRestart>d__147 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000127")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0x37E63E4", Offset = "0x37E63E4", VA = "0x37E63E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000128")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0x37E644C", Offset = "0x37E644C", VA = "0x37E644C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x37E62CC", Offset = "0x37E62CC", VA = "0x37E62CC")]
		[DebuggerHidden]
		public <TweenRestart>d__147(int <>1__state)
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x37E62F8", Offset = "0x37E62F8", VA = "0x37E62F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x37E62FC", Offset = "0x37E62FC", VA = "0x37E62FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x37E63EC", Offset = "0x37E63EC", VA = "0x37E63EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3904", Offset = "0x12F3904")]
	private sealed class <Start>d__229 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000129")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0x37E60DC", Offset = "0x37E60DC", VA = "0x37E60DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0x37E6144", Offset = "0x37E6144", VA = "0x37E6144", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x37E5FF4", Offset = "0x37E5FF4", VA = "0x37E5FF4")]
		[DebuggerHidden]
		public <Start>d__229(int <>1__state)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x37E6020", Offset = "0x37E6020", VA = "0x37E6020", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x37E6024", Offset = "0x37E6024", VA = "0x37E6024", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x37E60E4", Offset = "0x37E60E4", VA = "0x37E60E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Hashtable> tweens;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string id;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string type;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string method;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EaseType easeType;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float time;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float delay;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LoopType loopType;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isRunning;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool isPaused;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string _name;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float runningTime;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float percentage;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float delayStarted;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool kinematic;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool isLocal;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	private bool loop;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	private bool reverse;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool wasPaused;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool physics;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Hashtable tweenArguments;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Space space;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private EasingFunction ease;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ApplyTween apply;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private AudioSource audioSource;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3[] vector3s;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector2[] vector2s;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Color[,] colors;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float[] floats;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rect[] rects;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private CRSpline path;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 preUpdate;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Vector3 postUpdate;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private NamedValueColor namedcolorvalue;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float lastRealTime;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool useRealTime;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Transform thisTransform;

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x1D4FE3C", Offset = "0x1D4FE3C", VA = "0x1D4FE3C")]
	public static void Init(GameObject target)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x1D500F8", Offset = "0x1D500F8", VA = "0x1D500F8")]
	public static void ValueTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x1D510C8", Offset = "0x1D510C8", VA = "0x1D510C8")]
	public static void FadeFrom(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x1D513E0", Offset = "0x1D513E0", VA = "0x1D513E0")]
	public static void FadeFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x1D51E34", Offset = "0x1D51E34", VA = "0x1D51E34")]
	public static void FadeTo(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x1D5201C", Offset = "0x1D5201C", VA = "0x1D5201C")]
	public static void FadeTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x1D5257C", Offset = "0x1D5257C", VA = "0x1D5257C")]
	public static void ColorFrom(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x1D51454", Offset = "0x1D51454", VA = "0x1D51454")]
	public static void ColorFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x1D52790", Offset = "0x1D52790", VA = "0x1D52790")]
	public static void ColorTo(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x1D52090", Offset = "0x1D52090", VA = "0x1D52090")]
	public static void ColorTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x1D529A4", Offset = "0x1D529A4", VA = "0x1D529A4")]
	public static void AudioFrom(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x1D52C24", Offset = "0x1D52C24", VA = "0x1D52C24")]
	public static void AudioFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x1D5302C", Offset = "0x1D5302C", VA = "0x1D5302C")]
	public static void AudioTo(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x1D532AC", Offset = "0x1D532AC", VA = "0x1D532AC")]
	public static void AudioTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x1D53408", Offset = "0x1D53408", VA = "0x1D53408")]
	public static void Stab(GameObject target, AudioClip audioclip, float delay)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x1D535D4", Offset = "0x1D535D4", VA = "0x1D535D4")]
	public static void Stab(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x1D53684", Offset = "0x1D53684", VA = "0x1D53684")]
	public static void LookFrom(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x1D53888", Offset = "0x1D53888", VA = "0x1D53888")]
	public static void LookFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x1D53EE8", Offset = "0x1D53EE8", VA = "0x1D53EE8")]
	public static void LookTo(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x1D540EC", Offset = "0x1D540EC", VA = "0x1D540EC")]
	public static void LookTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x1D5440C", Offset = "0x1D5440C", VA = "0x1D5440C")]
	public static void MoveTo(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x1D54610", Offset = "0x1D54610", VA = "0x1D54610")]
	public static void MoveTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x1D549B0", Offset = "0x1D549B0", VA = "0x1D549B0")]
	public static void MoveFrom(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x1D54BB4", Offset = "0x1D54BB4", VA = "0x1D54BB4")]
	public static void MoveFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x1D554B4", Offset = "0x1D554B4", VA = "0x1D554B4")]
	public static void MoveAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x1D556B8", Offset = "0x1D556B8", VA = "0x1D556B8")]
	public static void MoveAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x1D4FEF4", Offset = "0x1D4FEF4", VA = "0x1D4FEF4")]
	public static void MoveBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x1D55794", Offset = "0x1D55794", VA = "0x1D55794")]
	public static void MoveBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x1D55870", Offset = "0x1D55870", VA = "0x1D55870")]
	public static void ScaleTo(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x1D55A74", Offset = "0x1D55A74", VA = "0x1D55A74")]
	public static void ScaleTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x1D55E0C", Offset = "0x1D55E0C", VA = "0x1D55E0C")]
	public static void ScaleFrom(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x1D56010", Offset = "0x1D56010", VA = "0x1D56010")]
	public static void ScaleFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x1D564BC", Offset = "0x1D564BC", VA = "0x1D564BC")]
	public static void ScaleAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x1D566C0", Offset = "0x1D566C0", VA = "0x1D566C0")]
	public static void ScaleAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x1D5679C", Offset = "0x1D5679C", VA = "0x1D5679C")]
	public static void ScaleBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x1D569A0", Offset = "0x1D569A0", VA = "0x1D569A0")]
	public static void ScaleBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x1D56A7C", Offset = "0x1D56A7C", VA = "0x1D56A7C")]
	public static void RotateTo(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x1D56C80", Offset = "0x1D56C80", VA = "0x1D56C80")]
	public static void RotateTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x1D57020", Offset = "0x1D57020", VA = "0x1D57020")]
	public static void RotateFrom(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x1D57224", Offset = "0x1D57224", VA = "0x1D57224")]
	public static void RotateFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x1D57788", Offset = "0x1D57788", VA = "0x1D57788")]
	public static void RotateAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x1D5798C", Offset = "0x1D5798C", VA = "0x1D5798C")]
	public static void RotateAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x1D57A68", Offset = "0x1D57A68", VA = "0x1D57A68")]
	public static void RotateBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x1D57C6C", Offset = "0x1D57C6C", VA = "0x1D57C6C")]
	public static void RotateBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x1D57D48", Offset = "0x1D57D48", VA = "0x1D57D48")]
	public static void ShakePosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x1D57F4C", Offset = "0x1D57F4C", VA = "0x1D57F4C")]
	public static void ShakePosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x1D58028", Offset = "0x1D58028", VA = "0x1D58028")]
	public static void ShakeScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x1D5822C", Offset = "0x1D5822C", VA = "0x1D5822C")]
	public static void ShakeScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x1D58308", Offset = "0x1D58308", VA = "0x1D58308")]
	public static void ShakeRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x1D5850C", Offset = "0x1D5850C", VA = "0x1D5850C")]
	public static void ShakeRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x1D585E8", Offset = "0x1D585E8", VA = "0x1D585E8")]
	public static void PunchPosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x1D587EC", Offset = "0x1D587EC", VA = "0x1D587EC")]
	public static void PunchPosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x1D5890C", Offset = "0x1D5890C", VA = "0x1D5890C")]
	public static void PunchRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x1D58B10", Offset = "0x1D58B10", VA = "0x1D58B10")]
	public static void PunchRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x1D58C30", Offset = "0x1D58C30", VA = "0x1D58C30")]
	public static void PunchScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x1D58E34", Offset = "0x1D58E34", VA = "0x1D58E34")]
	public static void PunchScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x1D58F54", Offset = "0x1D58F54", VA = "0x1D58F54")]
	private void GenerateTargets()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x1D5A018", Offset = "0x1D5A018", VA = "0x1D5A018")]
	private void GenerateRectTargets()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x1D59EA0", Offset = "0x1D59EA0", VA = "0x1D59EA0")]
	private void GenerateColorTargets()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x1D59C34", Offset = "0x1D59C34", VA = "0x1D59C34")]
	private void GenerateVector3Targets()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x1D59994", Offset = "0x1D59994", VA = "0x1D59994")]
	private void GenerateVector2Targets()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x1D59794", Offset = "0x1D59794", VA = "0x1D59794")]
	private void GenerateFloatTargets()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x1D5A160", Offset = "0x1D5A160", VA = "0x1D5A160")]
	private void GenerateColorToTargets()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x1D5AAE0", Offset = "0x1D5AAE0", VA = "0x1D5AAE0")]
	private void GenerateAudioToTargets()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x1D5F990", Offset = "0x1D5F990", VA = "0x1D5F990")]
	private void GenerateStabTargets()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x1D5F158", Offset = "0x1D5F158", VA = "0x1D5F158")]
	private void GenerateLookToTargets()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x1D5AE08", Offset = "0x1D5AE08", VA = "0x1D5AE08")]
	private void GenerateMoveToPathTargets()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x1D5B55C", Offset = "0x1D5B55C", VA = "0x1D5B55C")]
	private void GenerateMoveToTargets()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x1D5BBAC", Offset = "0x1D5BBAC", VA = "0x1D5BBAC")]
	private void GenerateMoveByTargets()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x1D5C1BC", Offset = "0x1D5C1BC", VA = "0x1D5C1BC")]
	private void GenerateScaleToTargets()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x1D5C718", Offset = "0x1D5C718", VA = "0x1D5C718")]
	private void GenerateScaleByTargets()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x1D5CB80", Offset = "0x1D5CB80", VA = "0x1D5CB80")]
	private void GenerateScaleAddTargets()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x1D5CFDC", Offset = "0x1D5CFDC", VA = "0x1D5CFDC")]
	private void GenerateRotateToTargets()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x1D5D610", Offset = "0x1D5D610", VA = "0x1D5D610")]
	private void GenerateRotateAddTargets()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x1D5DA74", Offset = "0x1D5DA74", VA = "0x1D5DA74")]
	private void GenerateRotateByTargets()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x1D5DF44", Offset = "0x1D5DF44", VA = "0x1D5DF44")]
	private void GenerateShakePositionTargets()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x1D5E244", Offset = "0x1D5E244", VA = "0x1D5E244")]
	private void GenerateShakeScaleTargets()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x1D5E518", Offset = "0x1D5E518", VA = "0x1D5E518")]
	private void GenerateShakeRotationTargets()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x1D5E7EC", Offset = "0x1D5E7EC", VA = "0x1D5E7EC")]
	private void GeneratePunchPositionTargets()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x1D5EB30", Offset = "0x1D5EB30", VA = "0x1D5EB30")]
	private void GeneratePunchRotationTargets()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x1D5EE48", Offset = "0x1D5EE48", VA = "0x1D5EE48")]
	private void GeneratePunchScaleTargets()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x1D600AC", Offset = "0x1D600AC", VA = "0x1D600AC")]
	private void ApplyRectTargets()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x1D603AC", Offset = "0x1D603AC", VA = "0x1D603AC")]
	private void ApplyColorTargets()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x1D605DC", Offset = "0x1D605DC", VA = "0x1D605DC")]
	private void ApplyVector3Targets()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x1D607D0", Offset = "0x1D607D0", VA = "0x1D607D0")]
	private void ApplyVector2Targets()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x1D60970", Offset = "0x1D60970", VA = "0x1D60970")]
	private void ApplyFloatTargets()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x1D60AC8", Offset = "0x1D60AC8", VA = "0x1D60AC8")]
	private void ApplyColorToTargets()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x1D61028", Offset = "0x1D61028", VA = "0x1D61028")]
	private void ApplyAudioToTargets()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x1D61194", Offset = "0x1D61194", VA = "0x1D61194")]
	private void ApplyStabTargets()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x1D61198", Offset = "0x1D61198", VA = "0x1D61198")]
	private void ApplyMoveToPathTargets()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x1D614F8", Offset = "0x1D614F8", VA = "0x1D614F8")]
	private void ApplyMoveToTargets()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x1D61704", Offset = "0x1D61704", VA = "0x1D61704")]
	private void ApplyMoveByTargets()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x1D61A44", Offset = "0x1D61A44", VA = "0x1D61A44")]
	private void ApplyScaleToTargets()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x1D61BAC", Offset = "0x1D61BAC", VA = "0x1D61BAC")]
	private void ApplyLookToTargets()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x1D61D84", Offset = "0x1D61D84", VA = "0x1D61D84")]
	private void ApplyRotateToTargets()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x1D620B4", Offset = "0x1D620B4", VA = "0x1D620B4")]
	private void ApplyRotateAddTargets()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x1D62348", Offset = "0x1D62348", VA = "0x1D62348")]
	private void ApplyShakePositionTargets()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x1D62760", Offset = "0x1D62760", VA = "0x1D62760")]
	private void ApplyShakeScaleTargets()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x1D62974", Offset = "0x1D62974", VA = "0x1D62974")]
	private void ApplyShakeRotationTargets()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x1D62BE4", Offset = "0x1D62BE4", VA = "0x1D62BE4")]
	private void ApplyPunchPositionTargets()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x1D63098", Offset = "0x1D63098", VA = "0x1D63098")]
	private void ApplyPunchRotationTargets()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x1D633E0", Offset = "0x1D633E0", VA = "0x1D633E0")]
	private void ApplyPunchScaleTargets()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x1D63640", Offset = "0x1D63640", VA = "0x1D63640")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F529C", Offset = "0x12F529C")]
	private IEnumerator TweenDelay()
	{
		return null;
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x1D636BC", Offset = "0x1D636BC", VA = "0x1D636BC")]
	private void TweenStart()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x1D64050", Offset = "0x1D64050", VA = "0x1D64050")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5300", Offset = "0x12F5300")]
	private IEnumerator TweenRestart()
	{
		return null;
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x1D640CC", Offset = "0x1D640CC", VA = "0x1D640CC")]
	private void TweenUpdate()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x1D641B0", Offset = "0x1D641B0", VA = "0x1D641B0")]
	private void TweenComplete()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x1D64280", Offset = "0x1D64280", VA = "0x1D64280")]
	private void TweenLoop()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x1D64324", Offset = "0x1D64324", VA = "0x1D64324")]
	public static Rect RectUpdate(Rect currentValue, Rect targetValue, float speed)
	{
		return default(Rect);
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x1D644EC", Offset = "0x1D644EC", VA = "0x1D644EC")]
	public static Vector3 Vector3Update(Vector3 currentValue, Vector3 targetValue, float speed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x1D645F8", Offset = "0x1D645F8", VA = "0x1D645F8")]
	public static Vector2 Vector2Update(Vector2 currentValue, Vector2 targetValue, float speed)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x1D644AC", Offset = "0x1D644AC", VA = "0x1D644AC")]
	public static float FloatUpdate(float currentValue, float targetValue, float speed)
	{
		return default(float);
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x1D646DC", Offset = "0x1D646DC", VA = "0x1D646DC")]
	public static void FadeUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x1D65158", Offset = "0x1D65158", VA = "0x1D65158")]
	public static void FadeUpdate(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x1D6479C", Offset = "0x1D6479C", VA = "0x1D6479C")]
	public static void ColorUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x1D65340", Offset = "0x1D65340", VA = "0x1D65340")]
	public static void ColorUpdate(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x1D65554", Offset = "0x1D65554", VA = "0x1D65554")]
	public static void AudioUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x1D65A04", Offset = "0x1D65A04", VA = "0x1D65A04")]
	public static void AudioUpdate(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x1D65C84", Offset = "0x1D65C84", VA = "0x1D65C84")]
	public static void RotateUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x1D662AC", Offset = "0x1D662AC", VA = "0x1D662AC")]
	public static void RotateUpdate(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x1D664B0", Offset = "0x1D664B0", VA = "0x1D664B0")]
	public static void ScaleUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x1D66A98", Offset = "0x1D66A98", VA = "0x1D66A98")]
	public static void ScaleUpdate(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x1D66C9C", Offset = "0x1D66C9C", VA = "0x1D66C9C")]
	public static void MoveUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x1D67E0C", Offset = "0x1D67E0C", VA = "0x1D67E0C")]
	public static void MoveUpdate(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x1D67500", Offset = "0x1D67500", VA = "0x1D67500")]
	public static void LookUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x1D68010", Offset = "0x1D68010", VA = "0x1D68010")]
	public static void LookUpdate(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x1D68214", Offset = "0x1D68214", VA = "0x1D68214")]
	public static float PathLength(Transform[] path)
	{
		return default(float);
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x1D5FF34", Offset = "0x1D5FF34", VA = "0x1D5FF34")]
	public static float PathLength(Vector3[] path)
	{
		return default(float);
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x1D68AF8", Offset = "0x1D68AF8", VA = "0x1D68AF8")]
	public static void PutOnPath(GameObject target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x1D68BA8", Offset = "0x1D68BA8", VA = "0x1D68BA8")]
	public static void PutOnPath(Transform target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x1D68C40", Offset = "0x1D68C40", VA = "0x1D68C40")]
	public static void PutOnPath(GameObject target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x1D68D78", Offset = "0x1D68D78", VA = "0x1D68D78")]
	public static void PutOnPath(Transform target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x1D68E98", Offset = "0x1D68E98", VA = "0x1D68E98")]
	public static Vector3 PointOnPath(Transform[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x1D68FA4", Offset = "0x1D68FA4", VA = "0x1D68FA4")]
	public static void DrawLine(Vector3[] line)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x1D69208", Offset = "0x1D69208", VA = "0x1D69208")]
	public static void DrawLine(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x1D692CC", Offset = "0x1D692CC", VA = "0x1D692CC")]
	public static void DrawLine(Transform[] line)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x1D69440", Offset = "0x1D69440", VA = "0x1D69440")]
	public static void DrawLine(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x1D69594", Offset = "0x1D69594", VA = "0x1D69594")]
	public static void DrawLineGizmos(Vector3[] line)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x1D69678", Offset = "0x1D69678", VA = "0x1D69678")]
	public static void DrawLineGizmos(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x1D6973C", Offset = "0x1D6973C", VA = "0x1D6973C")]
	public static void DrawLineGizmos(Transform[] line)
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x1D698B0", Offset = "0x1D698B0", VA = "0x1D698B0")]
	public static void DrawLineGizmos(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x1D69A04", Offset = "0x1D69A04", VA = "0x1D69A04")]
	public static void DrawLineHandles(Vector3[] line)
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x1D69AE8", Offset = "0x1D69AE8", VA = "0x1D69AE8")]
	public static void DrawLineHandles(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x1D69BAC", Offset = "0x1D69BAC", VA = "0x1D69BAC")]
	public static void DrawLineHandles(Transform[] line)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x1D69D20", Offset = "0x1D69D20", VA = "0x1D69D20")]
	public static void DrawLineHandles(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x1D69E74", Offset = "0x1D69E74", VA = "0x1D69E74")]
	public static Vector3 PointOnPath(Vector3[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x1D69EEC", Offset = "0x1D69EEC", VA = "0x1D69EEC")]
	public static void DrawPath(Vector3[] path)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x1D6A1C4", Offset = "0x1D6A1C4", VA = "0x1D6A1C4")]
	public static void DrawPath(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x1D6A288", Offset = "0x1D6A288", VA = "0x1D6A288")]
	public static void DrawPath(Transform[] path)
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x1D6A3FC", Offset = "0x1D6A3FC", VA = "0x1D6A3FC")]
	public static void DrawPath(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x1D6A550", Offset = "0x1D6A550", VA = "0x1D6A550")]
	public static void DrawPathGizmos(Vector3[] path)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x1D6A634", Offset = "0x1D6A634", VA = "0x1D6A634")]
	public static void DrawPathGizmos(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x1D6A6F8", Offset = "0x1D6A6F8", VA = "0x1D6A6F8")]
	public static void DrawPathGizmos(Transform[] path)
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x1D6A86C", Offset = "0x1D6A86C", VA = "0x1D6A86C")]
	public static void DrawPathGizmos(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x1D6A9C0", Offset = "0x1D6A9C0", VA = "0x1D6A9C0")]
	public static void DrawPathHandles(Vector3[] path)
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x1D6AAA4", Offset = "0x1D6AAA4", VA = "0x1D6AAA4")]
	public static void DrawPathHandles(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x1D6AB68", Offset = "0x1D6AB68", VA = "0x1D6AB68")]
	public static void DrawPathHandles(Transform[] path)
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x1D6ACDC", Offset = "0x1D6ACDC", VA = "0x1D6ACDC")]
	public static void DrawPathHandles(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x1D6AE30", Offset = "0x1D6AE30", VA = "0x1D6AE30")]
	public static void Resume(GameObject target)
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x1D6AF20", Offset = "0x1D6AF20", VA = "0x1D6AF20")]
	public static void Resume(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x1D6B1CC", Offset = "0x1D6B1CC", VA = "0x1D6B1CC")]
	public static void Resume(GameObject target, string type)
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x1D6B324", Offset = "0x1D6B324", VA = "0x1D6B324")]
	public static void Resume(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x1D6B6C0", Offset = "0x1D6B6C0", VA = "0x1D6B6C0")]
	public static void Resume()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x1D6B7E0", Offset = "0x1D6B7E0", VA = "0x1D6B7E0")]
	public static void Resume(string type)
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x1D6BA10", Offset = "0x1D6BA10", VA = "0x1D6BA10")]
	public static void Pause(GameObject target)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x1D6BB5C", Offset = "0x1D6BB5C", VA = "0x1D6BB5C")]
	public static void Pause(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x1D6BE08", Offset = "0x1D6BE08", VA = "0x1D6BE08")]
	public static void Pause(GameObject target, string type)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x1D6BFB4", Offset = "0x1D6BFB4", VA = "0x1D6BFB4")]
	public static void Pause(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x1D6C3A4", Offset = "0x1D6C3A4", VA = "0x1D6C3A4")]
	public static void Pause()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x1D6C4C4", Offset = "0x1D6C4C4", VA = "0x1D6C4C4")]
	public static void Pause(string type)
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x1D6C6F4", Offset = "0x1D6C6F4", VA = "0x1D6C6F4")]
	public static int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x1D6C768", Offset = "0x1D6C768", VA = "0x1D6C768")]
	public static int Count(string type)
	{
		return default(int);
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x1D6C944", Offset = "0x1D6C944", VA = "0x1D6C944")]
	public static int Count(GameObject target)
	{
		return default(int);
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x1D6C9A8", Offset = "0x1D6C9A8", VA = "0x1D6C9A8")]
	public static int Count(GameObject target, string type)
	{
		return default(int);
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x1D6CB04", Offset = "0x1D6CB04", VA = "0x1D6CB04")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x1D6CD3C", Offset = "0x1D6CD3C", VA = "0x1D6CD3C")]
	public static void Stop(string type)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x1D6D0BC", Offset = "0x1D6D0BC", VA = "0x1D6D0BC")]
	public static void StopByName(string name)
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x1D6CC54", Offset = "0x1D6CC54", VA = "0x1D6CC54")]
	public static void Stop(GameObject target)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x1D6D3FC", Offset = "0x1D6D3FC", VA = "0x1D6D3FC")]
	public static void Stop(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x1D6CF6C", Offset = "0x1D6CF6C", VA = "0x1D6CF6C")]
	public static void Stop(GameObject target, string type)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x1D6D2EC", Offset = "0x1D6D2EC", VA = "0x1D6D2EC")]
	public static void StopByName(GameObject target, string name)
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x1D6D6A8", Offset = "0x1D6D6A8", VA = "0x1D6D6A8")]
	public static void Stop(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x1D6DA3C", Offset = "0x1D6DA3C", VA = "0x1D6DA3C")]
	public static void StopByName(GameObject target, string name, bool includechildren)
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x1D512B0", Offset = "0x1D512B0", VA = "0x1D512B0")]
	public static Hashtable Hash(params object[] args)
	{
		return null;
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x1D6DD90", Offset = "0x1D6DD90", VA = "0x1D6DD90")]
	private iTween(Hashtable h)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x1D6DDC4", Offset = "0x1D6DDC4", VA = "0x1D6DDC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x1D6EE90", Offset = "0x1D6EE90", VA = "0x1D6EE90")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5364", Offset = "0x12F5364")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x1D6EF0C", Offset = "0x1D6EF0C", VA = "0x1D6EF0C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x1D6EF4C", Offset = "0x1D6EF4C", VA = "0x1D6EF4C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x1D6EF8C", Offset = "0x1D6EF8C", VA = "0x1D6EF8C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x1D6F0A0", Offset = "0x1D6F0A0", VA = "0x1D6F0A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x1D6F11C", Offset = "0x1D6F11C", VA = "0x1D6F11C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x1D69088", Offset = "0x1D69088", VA = "0x1D69088")]
	private static void DrawLineHelper(Vector3[] line, Color color, string method)
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x1D69FD0", Offset = "0x1D69FD0", VA = "0x1D69FD0")]
	private static void DrawPathHelper(Vector3[] path, Color color, string method)
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x1D68408", Offset = "0x1D68408", VA = "0x1D68408")]
	private static Vector3[] PathControlPointGenerator(Vector3[] path)
	{
		return null;
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x1D686CC", Offset = "0x1D686CC", VA = "0x1D686CC")]
	private static Vector3 Interp(Vector3[] pts, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x1D50F74", Offset = "0x1D50F74", VA = "0x1D50F74")]
	private static void Launch(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x1D505D4", Offset = "0x1D505D4", VA = "0x1D505D4")]
	private static Hashtable CleanArgs(Hashtable args)
	{
		return null;
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x1D6F120", Offset = "0x1D6F120", VA = "0x1D6F120")]
	private static string GenerateID()
	{
		return null;
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x1D6DE0C", Offset = "0x1D6DE0C", VA = "0x1D6DE0C")]
	private void RetrieveArgs()
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x1D6F1A0", Offset = "0x1D6F1A0", VA = "0x1D6F1A0")]
	private void GetEasingFunction()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x1D64138", Offset = "0x1D64138", VA = "0x1D64138")]
	private void UpdatePercentage()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x1D63834", Offset = "0x1D63834", VA = "0x1D63834")]
	private void CallBack(string callbackType)
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x1D5FCC4", Offset = "0x1D5FCC4", VA = "0x1D5FCC4")]
	private void Dispose()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x1D63B0C", Offset = "0x1D63B0C", VA = "0x1D63B0C")]
	private void ConflictCheck()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x1D6404C", Offset = "0x1D6404C", VA = "0x1D6404C")]
	private void EnableKinematic()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x1D64320", Offset = "0x1D64320", VA = "0x1D64320")]
	private void DisableKinematic()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x1D6F0C8", Offset = "0x1D6F0C8", VA = "0x1D6F0C8")]
	private void ResumeDelay()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x1D6F5A8", Offset = "0x1D6F5A8", VA = "0x1D6F5A8")]
	private float linear(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x1D5FE60", Offset = "0x1D5FE60", VA = "0x1D5FE60")]
	private float clerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x1D6F630", Offset = "0x1D6F630", VA = "0x1D6F630")]
	private float spring(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x1D6F734", Offset = "0x1D6F734", VA = "0x1D6F734")]
	private float easeInQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x1D6F748", Offset = "0x1D6F748", VA = "0x1D6F748")]
	private float easeOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x1D6F764", Offset = "0x1D6F764", VA = "0x1D6F764")]
	private float easeInOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x1D6F7B8", Offset = "0x1D6F7B8", VA = "0x1D6F7B8")]
	private float easeInCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x1D6F7D0", Offset = "0x1D6F7D0", VA = "0x1D6F7D0")]
	private float easeOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x1D6F7F8", Offset = "0x1D6F7F8", VA = "0x1D6F7F8")]
	private float easeInOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x1D6F850", Offset = "0x1D6F850", VA = "0x1D6F850")]
	private float easeInQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x1D6F86C", Offset = "0x1D6F86C", VA = "0x1D6F86C")]
	private float easeOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x1D6F894", Offset = "0x1D6F894", VA = "0x1D6F894")]
	private float easeInOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x1D6F8F0", Offset = "0x1D6F8F0", VA = "0x1D6F8F0")]
	private float easeInQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x1D6F910", Offset = "0x1D6F910", VA = "0x1D6F910")]
	private float easeOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x1D6F940", Offset = "0x1D6F940", VA = "0x1D6F940")]
	private float easeInOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x1D6F9A8", Offset = "0x1D6F9A8", VA = "0x1D6F9A8")]
	private float easeInSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x1D6FA40", Offset = "0x1D6FA40", VA = "0x1D6FA40")]
	private float easeOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x1D6FAD4", Offset = "0x1D6FAD4", VA = "0x1D6FAD4")]
	private float easeInOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x1D6FB78", Offset = "0x1D6FB78", VA = "0x1D6FB78")]
	private float easeInExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x1D6FC10", Offset = "0x1D6FC10", VA = "0x1D6FC10")]
	private float easeOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x1D6FCA8", Offset = "0x1D6FCA8", VA = "0x1D6FCA8")]
	private float easeInOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x1D6FD98", Offset = "0x1D6FD98", VA = "0x1D6FD98")]
	private float easeInCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x1D6FE44", Offset = "0x1D6FE44", VA = "0x1D6FE44")]
	private float easeOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x1D6FEF0", Offset = "0x1D6FEF0", VA = "0x1D6FEF0")]
	private float easeInOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x1D6FFE8", Offset = "0x1D6FFE8", VA = "0x1D6FFE8")]
	private float easeInBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x1D70024", Offset = "0x1D70024", VA = "0x1D70024")]
	private float easeOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x1D700F0", Offset = "0x1D700F0", VA = "0x1D700F0")]
	private float easeInOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x1D70174", Offset = "0x1D70174", VA = "0x1D70174")]
	private float easeInBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x1D701A4", Offset = "0x1D701A4", VA = "0x1D701A4")]
	private float easeOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x1D701E4", Offset = "0x1D701E4", VA = "0x1D701E4")]
	private float easeInOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x1D62FD8", Offset = "0x1D62FD8", VA = "0x1D62FD8")]
	private float punch(float amplitude, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x1D70268", Offset = "0x1D70268", VA = "0x1D70268")]
	private float easeInElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x1D70350", Offset = "0x1D70350", VA = "0x1D70350")]
	private float easeOutElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x1D70434", Offset = "0x1D70434", VA = "0x1D70434")]
	private float easeInOutElastic(float start, float end, float value)
	{
		return default(float);
	}
}
[Token(Token = "0x2000013")]
public class loopSong : MonoBehaviour
{
	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public uAudioPlayer_UI my_uAudioPlayer_UI;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public dirLoop_UI my_dirLoop_UI;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uAudioPlayer my_uAudioPlayer;

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x37E70EC", Offset = "0x37E70EC", VA = "0x37E70EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x37E71BC", Offset = "0x37E71BC", VA = "0x37E71BC")]
	private void songDone(PlayBackState valIN)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x37E7414", Offset = "0x37E7414", VA = "0x37E7414")]
	public loopSong()
	{
	}
}
[Token(Token = "0x2000014")]
public class uVisualizer : MonoBehaviour
{
	[Token(Token = "0x20001C6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3914", Offset = "0x12F3914")]
	private sealed class <updateViz>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uVisualizer <>4__this;

		[Token(Token = "0x1700012B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0x37ED274", Offset = "0x37ED274", VA = "0x37ED274", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0x37ED2DC", Offset = "0x37ED2DC", VA = "0x37ED2DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x37ECEE4", Offset = "0x37ECEE4", VA = "0x37ECEE4")]
		[DebuggerHidden]
		public <updateViz>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x37ED1AC", Offset = "0x37ED1AC", VA = "0x37ED1AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x37ED1B0", Offset = "0x37ED1B0", VA = "0x37ED1B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x37ED27C", Offset = "0x37ED27C", VA = "0x37ED27C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float[] _SamplesLeft;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] _SamplesRight;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] _SpectrumLeft;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float[] _SpectrumRight;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource theAudioSource;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Slider[] SliderList;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Slider[] SliderList2;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Slider aSliderLeft;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider aSliderRight;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FFTWindow myFFTWindow;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float Viz_Scale;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float[] freqData;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float[] band;

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x37ECD50", Offset = "0x37ECD50", VA = "0x37ECD50")]
	private void Start()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x37ECE68", Offset = "0x37ECE68", VA = "0x37ECE68")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F53C8", Offset = "0x12F53C8")]
	private IEnumerator updateViz()
	{
		return null;
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x37ECF10", Offset = "0x37ECF10", VA = "0x37ECF10")]
	private void updateSectrumViz(float[] _Spectrum)
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x37ED084", Offset = "0x37ED084", VA = "0x37ED084")]
	private float splitSamples(int index, float[] samples, int samplesPerItem)
	{
		return default(float);
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x37ED114", Offset = "0x37ED114", VA = "0x37ED114")]
	private float GetYPosLog(float c)
	{
		return default(float);
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x37ED19C", Offset = "0x37ED19C", VA = "0x37ED19C")]
	public uVisualizer()
	{
	}
}
[Token(Token = "0x2000015")]
public class log : MonoBehaviour
{
	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputField text;

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x37E7034", Offset = "0x37E7034", VA = "0x37E7034")]
	private void Start()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x37E70A8", Offset = "0x37E70A8", VA = "0x37E70A8")]
	private void Application_logMessageReceived(string condition, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x37E70E4", Offset = "0x37E70E4", VA = "0x37E70E4")]
	public log()
	{
	}
}
[Token(Token = "0x2000016")]
public class EventSystemChecker : MonoBehaviour
{
	[Token(Token = "0x6000153")]
	[Address(RVA = "0x23547D4", Offset = "0x23547D4", VA = "0x23547D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x23548B0", Offset = "0x23548B0", VA = "0x23548B0")]
	public EventSystemChecker()
	{
	}
}
namespace UnityStandardAssets.Utility
{
	[Token(Token = "0x2000017")]
	public class ActivateTrigger : MonoBehaviour
	{
		[Token(Token = "0x20001C7")]
		public enum Mode
		{
			[Token(Token = "0x4000CEC")]
			Trigger,
			[Token(Token = "0x4000CED")]
			Replace,
			[Token(Token = "0x4000CEE")]
			Activate,
			[Token(Token = "0x4000CEF")]
			Enable,
			[Token(Token = "0x4000CF0")]
			Animate,
			[Token(Token = "0x4000CF1")]
			Deactivate
		}

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode action;

		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object target;

		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject source;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int triggerCount;

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool repeatTrigger;

		[Token(Token = "0x6000155")]
		[Address(RVA = "0x1D49C60", Offset = "0x1D49C60", VA = "0x1D49C60")]
		private void DoActivateTrigger()
		{
		}

		[Token(Token = "0x6000156")]
		[Address(RVA = "0x1D4A0C8", Offset = "0x1D4A0C8", VA = "0x1D4A0C8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000157")]
		[Address(RVA = "0x1D4A0CC", Offset = "0x1D4A0CC", VA = "0x1D4A0CC")]
		public ActivateTrigger()
		{
		}
	}
	[Token(Token = "0x2000018")]
	public class AutoMobileShaderSwitch : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001C8")]
		public class ReplacementDefinition
		{
			[Token(Token = "0x4000CF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Shader original;

			[Token(Token = "0x4000CF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Shader replacement;

			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0x1D4AB18", Offset = "0x1D4AB18", VA = "0x1D4AB18")]
			public ReplacementDefinition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C9")]
		public class ReplacementList
		{
			[Token(Token = "0x4000CF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ReplacementDefinition[] items;

			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0x1D4AB20", Offset = "0x1D4AB20", VA = "0x1D4AB20")]
			public ReplacementList()
			{
			}
		}

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ReplacementList m_ReplacementList;

		[Token(Token = "0x6000158")]
		[Address(RVA = "0x1D4A0E4", Offset = "0x1D4A0E4", VA = "0x1D4A0E4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0x1D4AB10", Offset = "0x1D4AB10", VA = "0x1D4AB10")]
		public AutoMobileShaderSwitch()
		{
		}
	}
	[Token(Token = "0x2000019")]
	public class AutoMoveAndRotate : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001CA")]
		public class Vector3andSpace
		{
			[Token(Token = "0x4000CF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 value;

			[Token(Token = "0x4000CF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Space space;

			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0x1D4ACFC", Offset = "0x1D4ACFC", VA = "0x1D4ACFC")]
			public Vector3andSpace()
			{
			}
		}

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3andSpace moveUnitsPerSecond;

		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3andSpace rotateDegreesPerSecond;

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool ignoreTimescale;

		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_LastRealTime;

		[Token(Token = "0x600015A")]
		[Address(RVA = "0x1D4AB8C", Offset = "0x1D4AB8C", VA = "0x1D4AB8C")]
		private void Start()
		{
		}

		[Token(Token = "0x600015B")]
		[Address(RVA = "0x1D4ABB4", Offset = "0x1D4ABB4", VA = "0x1D4ABB4")]
		private void Update()
		{
		}

		[Token(Token = "0x600015C")]
		[Address(RVA = "0x1D4ACF4", Offset = "0x1D4ACF4", VA = "0x1D4ACF4")]
		public AutoMoveAndRotate()
		{
		}
	}
	[Token(Token = "0x200001A")]
	public class CameraRefocus
	{
		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Lookatpoint;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform Parent;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OrigCameraPos;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_Refocus;

		[Token(Token = "0x600015D")]
		[Address(RVA = "0x1D4AD0C", Offset = "0x1D4AD0C", VA = "0x1D4AD0C")]
		public CameraRefocus(Camera camera, Transform parent, Vector3 origCameraPos)
		{
		}

		[Token(Token = "0x600015E")]
		[Address(RVA = "0x1D4AD80", Offset = "0x1D4AD80", VA = "0x1D4AD80")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x600015F")]
		[Address(RVA = "0x1D4AD88", Offset = "0x1D4AD88", VA = "0x1D4AD88")]
		public void ChangeParent(Transform parent)
		{
		}

		[Token(Token = "0x6000160")]
		[Address(RVA = "0x1D4AD90", Offset = "0x1D4AD90", VA = "0x1D4AD90")]
		public void GetFocusPoint()
		{
		}

		[Token(Token = "0x6000161")]
		[Address(RVA = "0x1D4AEF0", Offset = "0x1D4AEF0", VA = "0x1D4AEF0")]
		public void SetFocusPoint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200001B")]
	public class CurveControlledBob
	{
		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float HorizontalBobRange;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float VerticalBobRange;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve Bobcurve;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float VerticaltoHorizontalRatio;

		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_CyclePositionX;

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_CyclePositionY;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_BobBaseInterval;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_Time;

		[Token(Token = "0x6000162")]
		[Address(RVA = "0x1D4AF44", Offset = "0x1D4AF44", VA = "0x1D4AF44")]
		public void Setup(Camera camera, float bobBaseInterval)
		{
		}

		[Token(Token = "0x6000163")]
		[Address(RVA = "0x1D4AFE8", Offset = "0x1D4AFE8", VA = "0x1D4AFE8")]
		public Vector3 DoHeadBob(float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000164")]
		[Address(RVA = "0x1D4B108", Offset = "0x1D4B108", VA = "0x1D4B108")]
		public CurveControlledBob()
		{
		}
	}
	[Token(Token = "0x200001C")]
	public class DragRigidbody : MonoBehaviour
	{
		[Token(Token = "0x20001CB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3924", Offset = "0x12F3924")]
		private sealed class <DragObject>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragRigidbody <>4__this;

			[Token(Token = "0x4000CFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float distance;

			[Token(Token = "0x4000CFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <oldDrag>5__2;

			[Token(Token = "0x4000CFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <oldAngularDrag>5__3;

			[Token(Token = "0x4000CFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Camera <mainCamera>5__4;

			[Token(Token = "0x1700012D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DE7")]
				[Address(RVA = "0x1D4BA94", Offset = "0x1D4BA94", VA = "0x1D4BA94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DE9")]
				[Address(RVA = "0x1D4BAFC", Offset = "0x1D4BAFC", VA = "0x1D4BAFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0x1D4B804", Offset = "0x1D4B804", VA = "0x1D4B804")]
			[DebuggerHidden]
			public <DragObject>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0x1D4B838", Offset = "0x1D4B838", VA = "0x1D4B838", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DE6")]
			[Address(RVA = "0x1D4B83C", Offset = "0x1D4B83C", VA = "0x1D4B83C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DE8")]
			[Address(RVA = "0x1D4BA9C", Offset = "0x1D4BA9C", VA = "0x1D4BA9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000080")]
		private const float k_Spring = 50f;

		[Token(Token = "0x4000081")]
		private const float k_Damper = 5f;

		[Token(Token = "0x4000082")]
		private const float k_Drag = 10f;

		[Token(Token = "0x4000083")]
		private const float k_AngularDrag = 5f;

		[Token(Token = "0x4000084")]
		private const float k_Distance = 0.2f;

		[Token(Token = "0x4000085")]
		private const bool k_AttachToCenterOfMass = false;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SpringJoint m_SpringJoint;

		[Token(Token = "0x6000165")]
		[Address(RVA = "0x1D4B354", Offset = "0x1D4B354", VA = "0x1D4B354")]
		private void Update()
		{
		}

		[Token(Token = "0x6000166")]
		[Address(RVA = "0x1D4B778", Offset = "0x1D4B778", VA = "0x1D4B778")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F542C", Offset = "0x12F542C")]
		private IEnumerator DragObject(float distance)
		{
			return null;
		}

		[Token(Token = "0x6000167")]
		[Address(RVA = "0x1D4B6C8", Offset = "0x1D4B6C8", VA = "0x1D4B6C8")]
		private Camera FindCamera()
		{
			return null;
		}

		[Token(Token = "0x6000168")]
		[Address(RVA = "0x1D4B830", Offset = "0x1D4B830", VA = "0x1D4B830")]
		public DragRigidbody()
		{
		}
	}
	[Token(Token = "0x200001D")]
	public class DynamicShadowSettings : MonoBehaviour
	{
		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Light sunLight;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minHeight;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minShadowDistance;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minShadowBias;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxHeight;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxShadowDistance;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxShadowBias;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float adaptTime;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_SmoothHeight;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_ChangeSpeed;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_OriginalStrength;

		[Token(Token = "0x6000169")]
		[Address(RVA = "0x1D4BB04", Offset = "0x1D4BB04", VA = "0x1D4BB04")]
		private void Start()
		{
		}

		[Token(Token = "0x600016A")]
		[Address(RVA = "0x1D4BB38", Offset = "0x1D4BB38", VA = "0x1D4BB38")]
		private void Update()
		{
		}

		[Token(Token = "0x600016B")]
		[Address(RVA = "0x1D4BDAC", Offset = "0x1D4BDAC", VA = "0x1D4BDAC")]
		public DynamicShadowSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200001E")]
	public class FOVKick
	{
		[Token(Token = "0x20001CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3934", Offset = "0x12F3934")]
		private sealed class <FOVKickUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x4000D01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x1700012F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DED")]
				[Address(RVA = "0x1D4C3F4", Offset = "0x1D4C3F4", VA = "0x1D4C3F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000130")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DEF")]
				[Address(RVA = "0x1D4C45C", Offset = "0x1D4C45C", VA = "0x1D4C45C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DEA")]
			[Address(RVA = "0x1D4BFA0", Offset = "0x1D4BFA0", VA = "0x1D4BFA0")]
			[DebuggerHidden]
			public <FOVKickUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0x1D4C284", Offset = "0x1D4C284", VA = "0x1D4C284", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0x1D4C288", Offset = "0x1D4C288", VA = "0x1D4C288", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0x1D4C3FC", Offset = "0x1D4C3FC", VA = "0x1D4C3FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001CD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3944", Offset = "0x12F3944")]
		private sealed class <FOVKickDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x4000D05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x17000131")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DF3")]
				[Address(RVA = "0x1D4C214", Offset = "0x1D4C214", VA = "0x1D4C214", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000132")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DF5")]
				[Address(RVA = "0x1D4C27C", Offset = "0x1D4C27C", VA = "0x1D4C27C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0x1D4C048", Offset = "0x1D4C048", VA = "0x1D4C048")]
			[DebuggerHidden]
			public <FOVKickDown>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0x1D4C090", Offset = "0x1D4C090", VA = "0x1D4C090", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0x1D4C094", Offset = "0x1D4C094", VA = "0x1D4C094", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0x1D4C21C", Offset = "0x1D4C21C", VA = "0x1D4C21C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float originalFov;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FOVIncrease;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float TimeToIncrease;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TimeToDecrease;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve IncreaseCurve;

		[Token(Token = "0x600016C")]
		[Address(RVA = "0x1D4BDE0", Offset = "0x1D4BDE0", VA = "0x1D4BDE0")]
		public void Setup(Camera camera, float defaultFOV)
		{
		}

		[Token(Token = "0x600016D")]
		[Address(RVA = "0x1D4BE3C", Offset = "0x1D4BE3C", VA = "0x1D4BE3C")]
		private void CheckStatus(Camera camera)
		{
		}

		[Token(Token = "0x600016E")]
		[Address(RVA = "0x1D4BF1C", Offset = "0x1D4BF1C", VA = "0x1D4BF1C")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x600016F")]
		[Address(RVA = "0x1D4BF24", Offset = "0x1D4BF24", VA = "0x1D4BF24")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5490", Offset = "0x12F5490")]
		public IEnumerator FOVKickUp()
		{
			return null;
		}

		[Token(Token = "0x6000170")]
		[Address(RVA = "0x1D4BFCC", Offset = "0x1D4BFCC", VA = "0x1D4BFCC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F54F4", Offset = "0x12F54F4")]
		public IEnumerator FOVKickDown()
		{
			return null;
		}

		[Token(Token = "0x6000171")]
		[Address(RVA = "0x1D4C074", Offset = "0x1D4C074", VA = "0x1D4C074")]
		public FOVKick()
		{
		}
	}
	[Token(Token = "0x200001F")]
	public class FPSCounter : MonoBehaviour
	{
		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color[] Colors;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool IsBlock;

		[Token(Token = "0x400009A")]
		private const float fpsMeasurePeriod = 0.5f;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int m_FpsAccumulator;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_FpsNextPeriod;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int m_CurrentFps;

		[Token(Token = "0x400009E")]
		private const string display = "{0} FPS";

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Text m_Text;

		[Token(Token = "0x6000172")]
		[Address(RVA = "0x1D4C464", Offset = "0x1D4C464", VA = "0x1D4C464")]
		private void Start()
		{
		}

		[Token(Token = "0x6000173")]
		[Address(RVA = "0x1D4C4D8", Offset = "0x1D4C4D8", VA = "0x1D4C4D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0x1D4C6E0", Offset = "0x1D4C6E0", VA = "0x1D4C6E0")]
		public FPSCounter()
		{
		}
	}
	[Token(Token = "0x2000020")]
	public class FollowTarget : MonoBehaviour
	{
		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x6000175")]
		[Address(RVA = "0x1D4C6E8", Offset = "0x1D4C6E8", VA = "0x1D4C6E8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000176")]
		[Address(RVA = "0x1D4C7FC", Offset = "0x1D4C7FC", VA = "0x1D4C7FC")]
		public FollowTarget()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000021")]
	public class LerpControlledBob
	{
		[Token(Token = "0x20001CE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3954", Offset = "0x12F3954")]
		private sealed class <DoBobCycle>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LerpControlledBob <>4__this;

			[Token(Token = "0x4000D09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x17000133")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DF9")]
				[Address(RVA = "0x1D4CB10", Offset = "0x1D4CB10", VA = "0x1D4CB10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000134")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DFB")]
				[Address(RVA = "0x1D4CB78", Offset = "0x1D4CB78", VA = "0x1D4CB78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0x1D4C8E0", Offset = "0x1D4C8E0", VA = "0x1D4C8E0")]
			[DebuggerHidden]
			public <DoBobCycle>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000DF7")]
			[Address(RVA = "0x1D4C914", Offset = "0x1D4C914", VA = "0x1D4C914", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0x1D4C918", Offset = "0x1D4C918", VA = "0x1D4C918", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0x1D4CB18", Offset = "0x1D4CB18", VA = "0x1D4CB18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float BobDuration;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float BobAmount;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Offset;

		[Token(Token = "0x6000177")]
		[Address(RVA = "0x1D4C85C", Offset = "0x1D4C85C", VA = "0x1D4C85C")]
		public float Offset()
		{
			return default(float);
		}

		[Token(Token = "0x6000178")]
		[Address(RVA = "0x1D4C864", Offset = "0x1D4C864", VA = "0x1D4C864")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5558", Offset = "0x12F5558")]
		public IEnumerator DoBobCycle()
		{
			return null;
		}

		[Token(Token = "0x6000179")]
		[Address(RVA = "0x1D4C90C", Offset = "0x1D4C90C", VA = "0x1D4C90C")]
		public LerpControlledBob()
		{
		}
	}
	[Token(Token = "0x2000022")]
	public class ObjectResetter : MonoBehaviour
	{
		[Token(Token = "0x20001CF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3964", Offset = "0x12F3964")]
		private sealed class <ResetCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4000D0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ObjectResetter <>4__this;

			[Token(Token = "0x17000135")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DFF")]
				[Address(RVA = "0x1D4CFAC", Offset = "0x1D4CFAC", VA = "0x1D4CFAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000136")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E01")]
				[Address(RVA = "0x1D4D014", Offset = "0x1D4D014", VA = "0x1D4D014", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0x1D4CD38", Offset = "0x1D4CD38", VA = "0x1D4CD38")]
			[DebuggerHidden]
			public <ResetCoroutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0x1D4CD6C", Offset = "0x1D4CD6C", VA = "0x1D4CD6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0x1D4CD70", Offset = "0x1D4CD70", VA = "0x1D4CD70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E00")]
			[Address(RVA = "0x1D4CFB4", Offset = "0x1D4CFB4", VA = "0x1D4CFB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 originalPosition;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion originalRotation;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Transform> originalStructure;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x600017A")]
		[Address(RVA = "0x1D4CB80", Offset = "0x1D4CB80", VA = "0x1D4CB80")]
		private void Start()
		{
		}

		[Token(Token = "0x600017B")]
		[Address(RVA = "0x1D4CC80", Offset = "0x1D4CC80", VA = "0x1D4CC80")]
		public void DelayedReset(float delay)
		{
		}

		[Token(Token = "0x600017C")]
		[Address(RVA = "0x1D4CCAC", Offset = "0x1D4CCAC", VA = "0x1D4CCAC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F55BC", Offset = "0x12F55BC")]
		public IEnumerator ResetCoroutine(float delay)
		{
			return null;
		}

		[Token(Token = "0x600017D")]
		[Address(RVA = "0x1D4CD64", Offset = "0x1D4CD64", VA = "0x1D4CD64")]
		public ObjectResetter()
		{
		}
	}
	[Token(Token = "0x2000023")]
	public class ParticleSystemDestroyer : MonoBehaviour
	{
		[Token(Token = "0x20001D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3974", Offset = "0x12F3974")]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ParticleSystemDestroyer <>4__this;

			[Token(Token = "0x4000D11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ParticleSystem[] <systems>5__2;

			[Token(Token = "0x4000D12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <stopTime>5__3;

			[Token(Token = "0x17000137")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E05")]
				[Address(RVA = "0x1D4D400", Offset = "0x1D4D400", VA = "0x1D4D400", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000138")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E07")]
				[Address(RVA = "0x1D4D468", Offset = "0x1D4D468", VA = "0x1D4D468", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E02")]
			[Address(RVA = "0x1D4D098", Offset = "0x1D4D098", VA = "0x1D4D098")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000E03")]
			[Address(RVA = "0x1D4D0E4", Offset = "0x1D4D0E4", VA = "0x1D4D0E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E04")]
			[Address(RVA = "0x1D4D0E8", Offset = "0x1D4D0E8", VA = "0x1D4D0E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x1D4D408", Offset = "0x1D4D408", VA = "0x1D4D408", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minDuration;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxDuration;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_MaxLifetime;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool m_EarlyStop;

		[Token(Token = "0x600017E")]
		[Address(RVA = "0x1D4D01C", Offset = "0x1D4D01C", VA = "0x1D4D01C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5620", Offset = "0x12F5620")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600017F")]
		[Address(RVA = "0x1D4D0C4", Offset = "0x1D4D0C4", VA = "0x1D4D0C4")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000180")]
		[Address(RVA = "0x1D4D0D0", Offset = "0x1D4D0D0", VA = "0x1D4D0D0")]
		public ParticleSystemDestroyer()
		{
		}
	}
	[Token(Token = "0x2000024")]
	public class PlatformSpecificContent : MonoBehaviour
	{
		[Token(Token = "0x20001D1")]
		private enum BuildTargetGroup
		{
			[Token(Token = "0x4000D14")]
			Standalone,
			[Token(Token = "0x4000D15")]
			Mobile
		}

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BuildTargetGroup m_BuildTargetGroup;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject[] m_Content;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MonoBehaviour[] m_MonoBehaviours;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool m_ChildrenOfThisObject;

		[Token(Token = "0x6000181")]
		[Address(RVA = "0x1D4D470", Offset = "0x1D4D470", VA = "0x1D4D470")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000182")]
		[Address(RVA = "0x1D4D474", Offset = "0x1D4D474", VA = "0x1D4D474")]
		private void CheckEnableContent()
		{
		}

		[Token(Token = "0x6000183")]
		[Address(RVA = "0x1D4D490", Offset = "0x1D4D490", VA = "0x1D4D490")]
		private void EnableContent(bool enabled)
		{
		}

		[Token(Token = "0x6000184")]
		[Address(RVA = "0x1D4D7EC", Offset = "0x1D4D7EC", VA = "0x1D4D7EC")]
		public PlatformSpecificContent()
		{
		}
	}
	[Token(Token = "0x2000025")]
	public class SimpleActivatorMenu : MonoBehaviour
	{
		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text camSwitchButton;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] objects;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_CurrentActiveObject;

		[Token(Token = "0x6000185")]
		[Address(RVA = "0x1D4D87C", Offset = "0x1D4D87C", VA = "0x1D4D87C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000186")]
		[Address(RVA = "0x1D4D8E8", Offset = "0x1D4D8E8", VA = "0x1D4D8E8")]
		public void NextCamera()
		{
		}

		[Token(Token = "0x6000187")]
		[Address(RVA = "0x1D4D9C0", Offset = "0x1D4D9C0", VA = "0x1D4D9C0")]
		public SimpleActivatorMenu()
		{
		}
	}
	[Token(Token = "0x2000026")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x6000188")]
		[Address(RVA = "0x1D4D9C8", Offset = "0x1D4D9C8", VA = "0x1D4D9C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000189")]
		[Address(RVA = "0x1D4D9CC", Offset = "0x1D4D9CC", VA = "0x1D4D9CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0x1D4DCF8", Offset = "0x1D4DCF8", VA = "0x1D4DCF8")]
		public SmoothFollow()
		{
		}
	}
	[Token(Token = "0x2000027")]
	public class TimedObjectActivator : MonoBehaviour
	{
		[Token(Token = "0x20001D2")]
		public enum Action
		{
			[Token(Token = "0x4000D17")]
			Activate,
			[Token(Token = "0x4000D18")]
			Deactivate,
			[Token(Token = "0x4000D19")]
			Destroy,
			[Token(Token = "0x4000D1A")]
			ReloadLevel,
			[Token(Token = "0x4000D1B")]
			Call
		}

		[Serializable]
		[Token(Token = "0x20001D3")]
		public class Entry
		{
			[Token(Token = "0x4000D1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject target;

			[Token(Token = "0x4000D1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action action;

			[Token(Token = "0x4000D1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float delay;

			[Token(Token = "0x6000E08")]
			[Address(RVA = "0x1D4E4B4", Offset = "0x1D4E4B4", VA = "0x1D4E4B4")]
			public Entry()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D4")]
		public class Entries
		{
			[Token(Token = "0x4000D1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Entry[] entries;

			[Token(Token = "0x6000E09")]
			[Address(RVA = "0x1D4E0A4", Offset = "0x1D4E0A4", VA = "0x1D4E0A4")]
			public Entries()
			{
			}
		}

		[Token(Token = "0x20001D5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3984", Offset = "0x12F3984")]
		private sealed class <Activate>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x17000139")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E0D")]
				[Address(RVA = "0x1D4E184", Offset = "0x1D4E184", VA = "0x1D4E184", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E0F")]
				[Address(RVA = "0x1D4E1EC", Offset = "0x1D4E1EC", VA = "0x1D4E1EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0x1D4DFAC", Offset = "0x1D4DFAC", VA = "0x1D4DFAC")]
			[DebuggerHidden]
			public <Activate>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000E0B")]
			[Address(RVA = "0x1D4E0AC", Offset = "0x1D4E0AC", VA = "0x1D4E0AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0x1D4E0B0", Offset = "0x1D4E0B0", VA = "0x1D4E0B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x1D4E18C", Offset = "0x1D4E18C", VA = "0x1D4E18C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001D6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3994", Offset = "0x12F3994")]
		private sealed class <Deactivate>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x1700013B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E13")]
				[Address(RVA = "0x1D4E2CC", Offset = "0x1D4E2CC", VA = "0x1D4E2CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E15")]
				[Address(RVA = "0x1D4E334", Offset = "0x1D4E334", VA = "0x1D4E334", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E10")]
			[Address(RVA = "0x1D4DFD8", Offset = "0x1D4DFD8", VA = "0x1D4DFD8")]
			[DebuggerHidden]
			public <Deactivate>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000E11")]
			[Address(RVA = "0x1D4E1F4", Offset = "0x1D4E1F4", VA = "0x1D4E1F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E12")]
			[Address(RVA = "0x1D4E1F8", Offset = "0x1D4E1F8", VA = "0x1D4E1F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E14")]
			[Address(RVA = "0x1D4E2D4", Offset = "0x1D4E2D4", VA = "0x1D4E2D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001D7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F39A4", Offset = "0x12F39A4")]
		private sealed class <ReloadLevel>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x1700013D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E19")]
				[Address(RVA = "0x1D4E444", Offset = "0x1D4E444", VA = "0x1D4E444", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E1B")]
				[Address(RVA = "0x1D4E4AC", Offset = "0x1D4E4AC", VA = "0x1D4E4AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x1D4E004", Offset = "0x1D4E004", VA = "0x1D4E004")]
			[DebuggerHidden]
			public <ReloadLevel>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000E17")]
			[Address(RVA = "0x1D4E33C", Offset = "0x1D4E33C", VA = "0x1D4E33C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E18")]
			[Address(RVA = "0x1D4E340", Offset = "0x1D4E340", VA = "0x1D4E340", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0x1D4E44C", Offset = "0x1D4E44C", VA = "0x1D4E44C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Entries entries;

		[Token(Token = "0x600018B")]
		[Address(RVA = "0x1D4DD0C", Offset = "0x1D4DD0C", VA = "0x1D4DD0C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600018C")]
		[Address(RVA = "0x1D4DE38", Offset = "0x1D4DE38", VA = "0x1D4DE38")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5684", Offset = "0x12F5684")]
		private IEnumerator Activate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x600018D")]
		[Address(RVA = "0x1D4DEB4", Offset = "0x1D4DEB4", VA = "0x1D4DEB4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F56E8", Offset = "0x12F56E8")]
		private IEnumerator Deactivate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x600018E")]
		[Address(RVA = "0x1D4DF30", Offset = "0x1D4DF30", VA = "0x1D4DF30")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F574C", Offset = "0x12F574C")]
		private IEnumerator ReloadLevel(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x600018F")]
		[Address(RVA = "0x1D4E030", Offset = "0x1D4E030", VA = "0x1D4E030")]
		public TimedObjectActivator()
		{
		}
	}
	[Token(Token = "0x2000028")]
	public class TimedObjectDestructor : MonoBehaviour
	{
		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_TimeOut;

		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool m_DetachChildren;

		[Token(Token = "0x6000190")]
		[Address(RVA = "0x1D4E4BC", Offset = "0x1D4E4BC", VA = "0x1D4E4BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000191")]
		[Address(RVA = "0x1D4E514", Offset = "0x1D4E514", VA = "0x1D4E514")]
		private void DestroyNow()
		{
		}

		[Token(Token = "0x6000192")]
		[Address(RVA = "0x1D4E5B4", Offset = "0x1D4E5B4", VA = "0x1D4E5B4")]
		public TimedObjectDestructor()
		{
		}
	}
	[Token(Token = "0x2000029")]
	public class WaypointCircuit : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001D8")]
		public class WaypointList
		{
			[Token(Token = "0x4000D29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public WaypointCircuit circuit;

			[Token(Token = "0x4000D2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform[] items;

			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0x1D4F430", Offset = "0x1D4F430", VA = "0x1D4F430")]
			public WaypointList()
			{
			}
		}

		[Token(Token = "0x20001D9")]
		public struct RoutePoint
		{
			[Token(Token = "0x4000D2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4000D2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 direction;

			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0x1D4EDA8", Offset = "0x1D4EDA8", VA = "0x1D4EDA8")]
			public RoutePoint(Vector3 position, Vector3 direction)
			{
			}
		}

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaypointList waypointList;

		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool smoothRoute;

		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int numPoints;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] points;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] distances;

		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float editorVisualisationSubsteps;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3E0C", Offset = "0x12F3E0C")]
		private float <Length>k__BackingField;

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int p0n;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int p1n;

		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int p2n;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int p3n;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float i;

		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 P0;

		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 P1;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 P2;

		[Token(Token = "0x40000CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 P3;

		[Token(Token = "0x17000009")]
		public float Length
		{
			[Token(Token = "0x6000193")]
			[Address(RVA = "0x1D4E5C4", Offset = "0x1D4E5C4", VA = "0x1D4E5C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F57B0", Offset = "0x12F57B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000194")]
			[Address(RVA = "0x1D4E5CC", Offset = "0x1D4E5CC", VA = "0x1D4E5CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F57C0", Offset = "0x12F57C0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700000A")]
		public Transform[] Waypoints
		{
			[Token(Token = "0x6000195")]
			[Address(RVA = "0x1D4E5D4", Offset = "0x1D4E5D4", VA = "0x1D4E5D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000196")]
		[Address(RVA = "0x1D4E5F0", Offset = "0x1D4E5F0", VA = "0x1D4E5F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000197")]
		[Address(RVA = "0x1D4E940", Offset = "0x1D4E940", VA = "0x1D4E940")]
		public RoutePoint GetRoutePoint(float dist)
		{
			return default(RoutePoint);
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0x1D4EA50", Offset = "0x1D4EA50", VA = "0x1D4EA50")]
		public Vector3 GetRoutePosition(float dist)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000199")]
		[Address(RVA = "0x1D4EDB8", Offset = "0x1D4EDB8", VA = "0x1D4EDB8")]
		private Vector3 CatmullRom(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float i)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600019A")]
		[Address(RVA = "0x1D4E64C", Offset = "0x1D4E64C", VA = "0x1D4E64C")]
		private void CachePositionsAndDistances()
		{
		}

		[Token(Token = "0x600019B")]
		[Address(RVA = "0x1D4F120", Offset = "0x1D4F120", VA = "0x1D4F120")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600019C")]
		[Address(RVA = "0x1D4F3A8", Offset = "0x1D4F3A8", VA = "0x1D4F3A8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600019D")]
		[Address(RVA = "0x1D4F128", Offset = "0x1D4F128", VA = "0x1D4F128")]
		private void DrawGizmos(bool selected)
		{
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0x1D4F3B0", Offset = "0x1D4F3B0", VA = "0x1D4F3B0")]
		public WaypointCircuit()
		{
		}
	}
	[Token(Token = "0x200002A")]
	public class WaypointProgressTracker : MonoBehaviour
	{
		[Token(Token = "0x20001DA")]
		public enum ProgressStyle
		{
			[Token(Token = "0x4000D2E")]
			SmoothAlongRoute,
			[Token(Token = "0x4000D2F")]
			PointToPoint
		}

		[Token(Token = "0x40000CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private WaypointCircuit circuit;

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float lookAheadForTargetOffset;

		[Token(Token = "0x40000CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float lookAheadForTargetFactor;

		[Token(Token = "0x40000CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float lookAheadForSpeedOffset;

		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float lookAheadForSpeedFactor;

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ProgressStyle progressStyle;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float pointToPointThreshold;

		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3E8C", Offset = "0x12F3E8C")]
		private WaypointCircuit.RoutePoint <targetPoint>k__BackingField;

		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3E9C", Offset = "0x12F3E9C")]
		private WaypointCircuit.RoutePoint <speedPoint>k__BackingField;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3EAC", Offset = "0x12F3EAC")]
		private WaypointCircuit.RoutePoint <progressPoint>k__BackingField;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform target;

		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float progressDistance;

		[Token(Token = "0x40000D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int progressNum;

		[Token(Token = "0x40000D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 lastPosition;

		[Token(Token = "0x40000DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float speed;

		[Token(Token = "0x1700000B")]
		public WaypointCircuit.RoutePoint targetPoint
		{
			[Token(Token = "0x600019F")]
			[Address(RVA = "0x1D4F49C", Offset = "0x1D4F49C", VA = "0x1D4F49C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F57D0", Offset = "0x12F57D0")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x60001A0")]
			[Address(RVA = "0x1D4F4B0", Offset = "0x1D4F4B0", VA = "0x1D4F4B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F57E0", Offset = "0x12F57E0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700000C")]
		public WaypointCircuit.RoutePoint speedPoint
		{
			[Token(Token = "0x60001A1")]
			[Address(RVA = "0x1D4F4C4", Offset = "0x1D4F4C4", VA = "0x1D4F4C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F57F0", Offset = "0x12F57F0")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x60001A2")]
			[Address(RVA = "0x1D4F4D8", Offset = "0x1D4F4D8", VA = "0x1D4F4D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5800", Offset = "0x12F5800")]
			private set
			{
			}
		}

		[Token(Token = "0x1700000D")]
		public WaypointCircuit.RoutePoint progressPoint
		{
			[Token(Token = "0x60001A3")]
			[Address(RVA = "0x1D4F4EC", Offset = "0x1D4F4EC", VA = "0x1D4F4EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5810", Offset = "0x12F5810")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x60001A4")]
			[Address(RVA = "0x1D4F500", Offset = "0x1D4F500", VA = "0x1D4F500")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5820", Offset = "0x12F5820")]
			private set
			{
			}
		}

		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x1D4F514", Offset = "0x1D4F514", VA = "0x1D4F514")]
		private void Start()
		{
		}

		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x1D4F608", Offset = "0x1D4F608", VA = "0x1D4F608")]
		public void Reset()
		{
		}

		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x1D4F6E0", Offset = "0x1D4F6E0", VA = "0x1D4F6E0")]
		private void Update()
		{
		}

		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x1D4FC48", Offset = "0x1D4FC48", VA = "0x1D4FC48")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x1D4FE20", Offset = "0x1D4FE20", VA = "0x1D4FE20")]
		public WaypointProgressTracker()
		{
		}
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x200002B")]
	public enum AAMode
	{
		[Token(Token = "0x40000DC")]
		FXAA2,
		[Token(Token = "0x40000DD")]
		FXAA3Console,
		[Token(Token = "0x40000DE")]
		FXAA1PresetA,
		[Token(Token = "0x40000DF")]
		FXAA1PresetB,
		[Token(Token = "0x40000E0")]
		NFAA,
		[Token(Token = "0x40000E1")]
		SSAA,
		[Token(Token = "0x40000E2")]
		DLAA
	}
	[Token(Token = "0x200002C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F11C0", Offset = "0x12F11C0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F11C0", Offset = "0x12F11C0")]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AAMode mode;

		[Token(Token = "0x40000E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showGeneratedNormals;

		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float offsetScale;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurRadius;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeThresholdMin;

		[Token(Token = "0x40000E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float edgeThreshold;

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgeSharpness;

		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool dlaaSharp;

		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader ssaaShader;

		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material ssaa;

		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader dlaaShader;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material dlaa;

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader nfaaShader;

		[Token(Token = "0x40000F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material nfaa;

		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x40000F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x40000F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x40000F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x40000F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Shader shaderFXAAII;

		[Token(Token = "0x40000F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material materialFXAAII;

		[Token(Token = "0x40000F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x40000F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material materialFXAAIII;

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x21C29F8", Offset = "0x21C29F8", VA = "0x21C29F8")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x60001AB")]
		[Address(RVA = "0x21C2A5C", Offset = "0x21C2A5C", VA = "0x21C2A5C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x21C2BD0", Offset = "0x21C2BD0", VA = "0x21C2BD0")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001AD")]
		[Address(RVA = "0x21C3118", Offset = "0x21C3118", VA = "0x21C3118")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x200002D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1258", Offset = "0x12F1258")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1258", Offset = "0x12F1258")]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x20001DB")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4000D31")]
			Ghosting,
			[Token(Token = "0x4000D32")]
			Anamorphic,
			[Token(Token = "0x4000D33")]
			Combined
		}

		[Token(Token = "0x20001DC")]
		public enum TweakMode
		{
			[Token(Token = "0x4000D35")]
			Basic,
			[Token(Token = "0x4000D36")]
			Complex
		}

		[Token(Token = "0x20001DD")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4000D38")]
			Auto,
			[Token(Token = "0x4000D39")]
			On,
			[Token(Token = "0x4000D3A")]
			Off
		}

		[Token(Token = "0x20001DE")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4000D3C")]
			Screen,
			[Token(Token = "0x4000D3D")]
			Add
		}

		[Token(Token = "0x20001DF")]
		public enum BloomQuality
		{
			[Token(Token = "0x4000D3F")]
			Cheap,
			[Token(Token = "0x4000D40")]
			High
		}

		[Token(Token = "0x40000F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode tweakMode;

		[Token(Token = "0x40000FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x40000FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x40000FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomQuality quality;

		[Token(Token = "0x40000FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x4000101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x4000102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4000103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4000104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float flareRotation;

		[Token(Token = "0x4000105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensflareIntensity;

		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float lensflareThreshold;

		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float lensFlareSaturation;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Color flareColorA;

		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorB;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorC;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorD;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Shader lensFlareShader;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader screenBlendShader;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material screenBlend;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x21C313C", Offset = "0x21C313C", VA = "0x21C313C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0x21C322C", Offset = "0x21C322C", VA = "0x21C322C")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0x21C45E8", Offset = "0x21C45E8", VA = "0x21C45E8")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001B1")]
		[Address(RVA = "0x21C43E8", Offset = "0x21C43E8", VA = "0x21C43E8")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0x21C40F0", Offset = "0x21C40F0", VA = "0x21C40F0")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001B3")]
		[Address(RVA = "0x21C400C", Offset = "0x21C400C", VA = "0x21C400C")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001B4")]
		[Address(RVA = "0x21C41DC", Offset = "0x21C41DC", VA = "0x21C41DC")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001B5")]
		[Address(RVA = "0x21C46B0", Offset = "0x21C46B0", VA = "0x21C46B0")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x200002E")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x4000118")]
		Ghosting,
		[Token(Token = "0x4000119")]
		Anamorphic,
		[Token(Token = "0x400011A")]
		Combined
	}
	[Token(Token = "0x200002F")]
	public enum TweakMode34
	{
		[Token(Token = "0x400011C")]
		Basic,
		[Token(Token = "0x400011D")]
		Complex
	}
	[Token(Token = "0x2000030")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x400011F")]
		Auto,
		[Token(Token = "0x4000120")]
		On,
		[Token(Token = "0x4000121")]
		Off
	}
	[Token(Token = "0x2000031")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x4000123")]
		Screen,
		[Token(Token = "0x4000124")]
		Add
	}
	[Token(Token = "0x2000032")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F12F0", Offset = "0x12F12F0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F12F0", Offset = "0x12F12F0")]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x4000125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int bloomBlurIterations;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool lensflares;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float lensflareIntensity;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float lensflareThreshold;

		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color flareColorA;

		[Token(Token = "0x4000135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color flareColorB;

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color flareColorC;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color flareColorD;

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader lensFlareShader;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader vignetteShader;

		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material vignetteMaterial;

		[Token(Token = "0x400013D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader separableBlurShader;

		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x400013F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x4000141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader screenBlendShader;

		[Token(Token = "0x4000142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material screenBlend;

		[Token(Token = "0x4000143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x4000144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x4000145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x21C47F0", Offset = "0x21C47F0", VA = "0x21C47F0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x21C4954", Offset = "0x21C4954", VA = "0x21C4954")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x21C58A0", Offset = "0x21C58A0", VA = "0x21C58A0")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x21C56B0", Offset = "0x21C56B0", VA = "0x21C56B0")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x21C5434", Offset = "0x21C5434", VA = "0x21C5434")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x21C555C", Offset = "0x21C555C", VA = "0x21C555C")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x21C5954", Offset = "0x21C5954", VA = "0x21C5954")]
		public BloomAndFlares()
		{
		}
	}
	[Token(Token = "0x2000033")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1388", Offset = "0x12F1388")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1388", Offset = "0x12F1388")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x20001E0")]
		public enum Resolution
		{
			[Token(Token = "0x4000D42")]
			Low,
			[Token(Token = "0x4000D43")]
			High
		}

		[Token(Token = "0x20001E1")]
		public enum BlurType
		{
			[Token(Token = "0x4000D45")]
			Standard,
			[Token(Token = "0x4000D46")]
			Sgx
		}

		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3EBC", Offset = "0x12F3EBC")]
		public float threshold;

		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3ED4", Offset = "0x12F3ED4")]
		public float intensity;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3EEC", Offset = "0x12F3EEC")]
		public float blurSize;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Resolution resolution;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3F04", Offset = "0x12F3F04")]
		public int blurIterations;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BlurType blurType;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader fastBloomShader;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material fastBloomMaterial;

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x21C5A88", Offset = "0x21C5A88", VA = "0x21C5A88", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x21C5B00", Offset = "0x21C5B00", VA = "0x21C5B00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x21C5BB0", Offset = "0x21C5BB0", VA = "0x21C5BB0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x21C5F7C", Offset = "0x21C5F7C", VA = "0x21C5F7C")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x2000034")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1420", Offset = "0x12F1420")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3F1C", Offset = "0x12F3F1C")]
		public int iterations;

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3F34", Offset = "0x12F3F34")]
		public float blurSpread;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x1700000E")]
		protected Material material
		{
			[Token(Token = "0x60001C1")]
			[Address(RVA = "0x21C5FA0", Offset = "0x21C5FA0", VA = "0x21C5FA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x21C60E0", Offset = "0x21C60E0", VA = "0x21C60E0")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x21C61DC", Offset = "0x21C61DC", VA = "0x21C61DC")]
		protected void Start()
		{
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x21C629C", Offset = "0x21C629C", VA = "0x21C629C")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x21C6440", Offset = "0x21C6440", VA = "0x21C6440")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x21C65B8", Offset = "0x21C65B8", VA = "0x21C65B8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x21C6724", Offset = "0x21C6724", VA = "0x21C6724")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x2000035")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F146C", Offset = "0x12F146C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F146C", Offset = "0x12F146C")]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x20001E2")]
		public enum BlurType
		{
			[Token(Token = "0x4000D48")]
			StandardGauss,
			[Token(Token = "0x4000D49")]
			SgxGauss
		}

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3F4C", Offset = "0x12F3F4C")]
		public int downsample;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3F64", Offset = "0x12F3F64")]
		public float blurSize;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3F7C", Offset = "0x12F3F7C")]
		public int blurIterations;

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlurType blurType;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader blurShader;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material blurMaterial;

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x21C6740", Offset = "0x21C6740", VA = "0x21C6740", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x21C67B8", Offset = "0x21C67B8", VA = "0x21C67B8")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x21C6868", Offset = "0x21C6868", VA = "0x21C6868")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x21C6C0C", Offset = "0x21C6C0C", VA = "0x21C6C0C")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x2000036")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1504", Offset = "0x12F1504")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1504", Offset = "0x12F1504")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x20001E3")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x4000D4B")]
			CameraMotion,
			[Token(Token = "0x4000D4C")]
			LocalBlur,
			[Token(Token = "0x4000D4D")]
			Reconstruction,
			[Token(Token = "0x4000D4E")]
			ReconstructionDX11,
			[Token(Token = "0x4000D4F")]
			ReconstructionDisc
		}

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preview;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 previewScale;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float movementScale;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationScale;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxVelocity;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float minVelocity;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float velocityScale;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float softZDistance;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int velocityDownsample;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject tmpCam;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shader;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader replacementClear;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material motionBlurMaterial;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D noiseTexture;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float jitter;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool showVelocity;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float showVelocityScale;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int prevFrameCount;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool wasActive;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Camera _camera;

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x21C6C28", Offset = "0x21C6C28", VA = "0x21C6C28")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x21C6D74", Offset = "0x21C6D74", VA = "0x21C6D74")]
		private new void Start()
		{
		}

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x21C6F08", Offset = "0x21C6F08", VA = "0x21C6F08")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x21C6FD4", Offset = "0x21C6FD4", VA = "0x21C6FD4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0x21C7170", Offset = "0x21C7170", VA = "0x21C7170", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x21C7228", Offset = "0x21C7228", VA = "0x21C7228")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x21C6E5C", Offset = "0x21C6E5C", VA = "0x21C6E5C")]
		private void Remember()
		{
		}

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x21C88B0", Offset = "0x21C88B0", VA = "0x21C88B0")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x21C87C4", Offset = "0x21C87C4", VA = "0x21C87C4")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x21C88A0", Offset = "0x21C88A0", VA = "0x21C88A0")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x21C8C14", Offset = "0x21C8C14", VA = "0x21C8C14")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x2000037")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F159C", Offset = "0x12F159C")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x20001E4")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x4000D51")]
			Simple,
			[Token(Token = "0x4000D52")]
			Advanced
		}

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve redChannel;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useDepthCorrection;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve zCurve;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material ccMaterial;

		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccDepthMaterial;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D zCurveTex;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float saturation;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool selectiveCc;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color selectiveFromColor;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color selectiveToColor;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool updateTextures;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x21C8D64", Offset = "0x21C8D64", VA = "0x21C8D64")]
		private new void Start()
		{
		}

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x21C8D90", Offset = "0x21C8D90", VA = "0x21C8D90")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x21C8D94", Offset = "0x21C8D94", VA = "0x21C8D94", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x21C9070", Offset = "0x21C9070", VA = "0x21C9070")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x21C9480", Offset = "0x21C9480", VA = "0x21C9480")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x21C9484", Offset = "0x21C9484", VA = "0x21C9484")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x21C9780", Offset = "0x21C9780", VA = "0x21C9780")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x2000038")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F15E8", Offset = "0x12F15E8")]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shader;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material material;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture3D converted3DLut;

		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string basedOnTempTex;

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x21C9E08", Offset = "0x21C9E08", VA = "0x21C9E08", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x21C9E7C", Offset = "0x21C9E7C", VA = "0x21C9E7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x21C9F3C", Offset = "0x21C9F3C", VA = "0x21C9F3C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x21C9FEC", Offset = "0x21C9FEC", VA = "0x21C9FEC")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x21CA200", Offset = "0x21CA200", VA = "0x21CA200")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x21CA2F4", Offset = "0x21CA2F4", VA = "0x21CA2F4")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x21CA628", Offset = "0x21CA628", VA = "0x21CA628")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x21CA814", Offset = "0x21CA814", VA = "0x21CA814")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x2000039")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1634", Offset = "0x12F1634")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x1D3AFA8", Offset = "0x1D3AFA8", VA = "0x1D3AFA8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x1D3B134", Offset = "0x1D3B134", VA = "0x1D3B134")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x200003A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1680", Offset = "0x12F1680")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1680", Offset = "0x12F1680")]
	public class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3F94", Offset = "0x12F3F94")]
		public float intensity;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3FAC", Offset = "0x12F3FAC")]
		public float threshold;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3FC8", Offset = "0x12F3FC8")]
		public float blurSpread;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader separableBlurShader;

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x1D3B144", Offset = "0x1D3B144", VA = "0x1D3B144", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x1D3B76C", Offset = "0x1D3B76C", VA = "0x1D3B76C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x1D3BAD4", Offset = "0x1D3BAD4", VA = "0x1D3BAD4")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x200003B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1718", Offset = "0x12F1718")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3FE0", Offset = "0x12F3FE0")]
		public float adaptationSpeed;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F3FFC", Offset = "0x12F3FFC")]
		public float limitMinimum;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4014", Offset = "0x12F4014")]
		public float limitMaximum;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x1700000F")]
		protected Material materialLum
		{
			[Token(Token = "0x60001ED")]
			[Address(RVA = "0x1D3BB0C", Offset = "0x1D3BB0C", VA = "0x1D3BB0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000010")]
		protected Material materialReduce
		{
			[Token(Token = "0x60001EE")]
			[Address(RVA = "0x1D3BBE0", Offset = "0x1D3BBE0", VA = "0x1D3BBE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000011")]
		protected Material materialAdapt
		{
			[Token(Token = "0x60001EF")]
			[Address(RVA = "0x1D3BCB4", Offset = "0x1D3BCB4", VA = "0x1D3BCB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000012")]
		protected Material materialApply
		{
			[Token(Token = "0x60001F0")]
			[Address(RVA = "0x1D3BD88", Offset = "0x1D3BD88", VA = "0x1D3BD88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x1D3BE5C", Offset = "0x1D3BE5C", VA = "0x1D3BE5C")]
		private void Start()
		{
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x1D3BEF0", Offset = "0x1D3BEF0", VA = "0x1D3BEF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x1D3C048", Offset = "0x1D3C048", VA = "0x1D3C048")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x1D3C278", Offset = "0x1D3C278", VA = "0x1D3C278")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x1D3C4D4", Offset = "0x1D3C4D4", VA = "0x1D3C4D4")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x1D3C6E4", Offset = "0x1D3C6E4", VA = "0x1D3C6E4")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x200003C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1764", Offset = "0x12F1764")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1764", Offset = "0x12F1764")]
	public class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int softness;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float spread;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader blurShader;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material blurMaterial;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader depthFetchShader;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material depthFetchMaterial;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader creaseApplyShader;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x1D3C768", Offset = "0x1D3C768", VA = "0x1D3C768", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x1D3C824", Offset = "0x1D3C824", VA = "0x1D3C824")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x1D3CBCC", Offset = "0x1D3CBCC", VA = "0x1D3CBCC")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x200003D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F17FC", Offset = "0x12F17FC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F17FC", Offset = "0x12F17FC")]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x20001E5")]
		public enum BlurType
		{
			[Token(Token = "0x4000D54")]
			DiscBlur,
			[Token(Token = "0x4000D55")]
			DX11
		}

		[Token(Token = "0x20001E6")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x4000D57")]
			Low,
			[Token(Token = "0x4000D58")]
			Medium,
			[Token(Token = "0x4000D59")]
			High
		}

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool visualizeFocus;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float focalLength;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float focalSize;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float aperture;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform focalTransform;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxBlurSize;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool highResolution;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BlurType blurType;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool nearBlur;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float foregroundOverlap;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader dofHdrShader;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material dofHdrMaterial;

		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dx11BokehShader;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float dx11BokehThreshold;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehScale;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float focalDistance01;

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float internalBlurWidth;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Camera cachedCamera;

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x1D3CBF4", Offset = "0x1D3CBF4", VA = "0x1D3CBF4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x1D3CDEC", Offset = "0x1D3CDEC", VA = "0x1D3CDEC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x1D3CE74", Offset = "0x1D3CE74", VA = "0x1D3CE74")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x1D3CF94", Offset = "0x1D3CF94", VA = "0x1D3CF94")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x1D3CCA0", Offset = "0x1D3CCA0", VA = "0x1D3CCA0")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x1D3CFF0", Offset = "0x1D3CFF0", VA = "0x1D3CFF0")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6000200")]
		[Address(RVA = "0x1D3D14C", Offset = "0x1D3D14C", VA = "0x1D3D14C")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0x1D3D46C", Offset = "0x1D3D46C", VA = "0x1D3D46C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0x1D3EAC4", Offset = "0x1D3EAC4", VA = "0x1D3EAC4")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x200003E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1894", Offset = "0x12F1894")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1894", Offset = "0x12F1894")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x20001E7")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x4000D5B")]
			OnlyBackground = 1,
			[Token(Token = "0x4000D5C")]
			BackgroundAndForeground
		}

		[Token(Token = "0x20001E8")]
		public enum DofResolution
		{
			[Token(Token = "0x4000D5E")]
			High = 2,
			[Token(Token = "0x4000D5F")]
			Medium,
			[Token(Token = "0x4000D60")]
			Low
		}

		[Token(Token = "0x20001E9")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4000D62")]
			Low = 1,
			[Token(Token = "0x4000D63")]
			High = 2,
			[Token(Token = "0x4000D64")]
			VeryHigh = 4
		}

		[Token(Token = "0x20001EA")]
		public enum BokehDestination
		{
			[Token(Token = "0x4000D66")]
			Background = 1,
			[Token(Token = "0x4000D67")]
			Foreground,
			[Token(Token = "0x4000D68")]
			BackgroundAndForeground
		}

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DofResolution resolution;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool simpleTweakMode;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float focalPoint;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothness;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalZDistance;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalZStartCurve;

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float focalZEndCurve;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float focalStartCurve;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float focalEndCurve;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float focalDistance01;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform objectFocus;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float focalSize;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public DofBlurriness bluriness;

		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxBlurSpread;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dofBlurShader;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material dofBlurMaterial;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofShader;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofMaterial;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool visualize;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float widthOverHeight;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float oneOverBaseSize;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool bokeh;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool bokehSupport;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader bokehShader;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float bokehScale;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float bokehIntensity;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int bokehDownsample;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material bokehMaterial;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Camera _camera;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture bokehSource;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x6000203")]
		[Address(RVA = "0x1D3EB28", Offset = "0x1D3EB28", VA = "0x1D3EB28")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0x1D3EC38", Offset = "0x1D3EC38", VA = "0x1D3EC38", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0x1D3ED70", Offset = "0x1D3ED70", VA = "0x1D3ED70")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0x1D3EFBC", Offset = "0x1D3EFBC", VA = "0x1D3EFBC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000207")]
		[Address(RVA = "0x1D3F044", Offset = "0x1D3F044", VA = "0x1D3F044")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0x1D3F1A0", Offset = "0x1D3F1A0", VA = "0x1D3F1A0")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x6000209")]
		[Address(RVA = "0x1D3F1C4", Offset = "0x1D3F1C4", VA = "0x1D3F1C4")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x600020A")]
		[Address(RVA = "0x1D3F1E8", Offset = "0x1D3F1E8", VA = "0x1D3F1E8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0x1D40068", Offset = "0x1D40068", VA = "0x1D40068")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x600020C")]
		[Address(RVA = "0x1D4071C", Offset = "0x1D4071C", VA = "0x1D4071C")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0x1D40B84", Offset = "0x1D40B84", VA = "0x1D40B84")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0x1D3FF1C", Offset = "0x1D3FF1C", VA = "0x1D3FF1C")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0x1D40304", Offset = "0x1D40304", VA = "0x1D40304")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0x1D409D8", Offset = "0x1D409D8", VA = "0x1D409D8")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0x1D3FB4C", Offset = "0x1D3FB4C", VA = "0x1D3FB4C")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0x1D41080", Offset = "0x1D41080", VA = "0x1D41080")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x200003F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F192C", Offset = "0x12F192C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F192C", Offset = "0x12F192C")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x20001EB")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4000D6A")]
			TriangleDepthNormals,
			[Token(Token = "0x4000D6B")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4000D6C")]
			SobelDepth,
			[Token(Token = "0x4000D6D")]
			SobelDepthThin,
			[Token(Token = "0x4000D6E")]
			TriangleLuminance
		}

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public EdgeDetectMode mode;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sensitivityDepth;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sensitivityNormals;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lumThreshold;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeExp;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sampleDist;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgesOnly;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader edgeDetectShader;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x6000214")]
		[Address(RVA = "0x1D41164", Offset = "0x1D41164", VA = "0x1D41164", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0x1D412B0", Offset = "0x1D412B0", VA = "0x1D412B0")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x1D411F0", Offset = "0x1D411F0", VA = "0x1D411F0")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0x1D412BC", Offset = "0x1D412BC", VA = "0x1D412BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0x1D412C0", Offset = "0x1D412C0", VA = "0x1D412C0")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0x1D414AC", Offset = "0x1D414AC", VA = "0x1D414AC")]
		public EdgeDetection()
		{
		}
	}
	[Token(Token = "0x2000040")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F19C4", Offset = "0x12F19C4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F19C4", Offset = "0x12F19C4")]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F402C", Offset = "0x12F402C")]
		public float strengthX;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4044", Offset = "0x12F4044")]
		public float strengthY;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader fishEyeShader;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material fisheyeMaterial;

		[Token(Token = "0x600021A")]
		[Address(RVA = "0x1D4150C", Offset = "0x1D4150C", VA = "0x1D4150C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600021B")]
		[Address(RVA = "0x1D41578", Offset = "0x1D41578", VA = "0x1D41578")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600021C")]
		[Address(RVA = "0x1D416E8", Offset = "0x1D416E8", VA = "0x1D416E8")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x2000041")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1A5C", Offset = "0x12F1A5C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1A5C", Offset = "0x12F1A5C")]
	internal class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F405C", Offset = "0x12F405C")]
		public bool distanceFog;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4094", Offset = "0x12F4094")]
		public bool excludeFarPixels;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F40CC", Offset = "0x12F40CC")]
		public bool useRadialDistance;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4104", Offset = "0x12F4104")]
		public bool heightFog;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F413C", Offset = "0x12F413C")]
		public float height;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4174", Offset = "0x12F4174")]
		public float heightDensity;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4190", Offset = "0x12F4190")]
		public float startDistance;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fogShader;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fogMaterial;

		[Token(Token = "0x600021D")]
		[Address(RVA = "0x1D4170C", Offset = "0x1D4170C", VA = "0x1D4170C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600021E")]
		[Address(RVA = "0x1D41780", Offset = "0x1D41780", VA = "0x1D41780")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0x1D41FA8", Offset = "0x1D41FA8", VA = "0x1D41FA8")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
		{
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0x1D42118", Offset = "0x1D42118", VA = "0x1D42118")]
		public GlobalFog()
		{
		}
	}
	[Token(Token = "0x2000042")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1AF4", Offset = "0x12F1AF4")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F41C8", Offset = "0x12F41C8")]
		public float rampOffset;

		[Token(Token = "0x6000221")]
		[Address(RVA = "0x1D42144", Offset = "0x1D42144", VA = "0x1D42144")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0x1D42220", Offset = "0x1D42220", VA = "0x1D42220")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x2000043")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1B40", Offset = "0x12F1B40")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1B40", Offset = "0x12F1B40")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x17000013")]
		protected Material material
		{
			[Token(Token = "0x6000224")]
			[Address(RVA = "0x1D3B060", Offset = "0x1D3B060", VA = "0x1D3B060")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0x1D42228", Offset = "0x1D42228", VA = "0x1D42228", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0x1D422D8", Offset = "0x1D422D8", VA = "0x1D422D8", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0x1D3B13C", Offset = "0x1D3B13C", VA = "0x1D3B13C")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x2000044")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1BC8", Offset = "0x12F1BC8")]
	public class ImageEffects
	{
		[Token(Token = "0x6000227")]
		[Address(RVA = "0x1D42388", Offset = "0x1D42388", VA = "0x1D42388")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x1D42604", Offset = "0x1D42604", VA = "0x1D42604")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x12F5850", Offset = "0x12F5850")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x1D4267C", Offset = "0x1D4267C", VA = "0x1D4267C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x12F5888", Offset = "0x12F5888")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0x1D426FC", Offset = "0x1D426FC", VA = "0x1D426FC")]
		public ImageEffects()
		{
		}
	}
	[Token(Token = "0x2000045")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1C00", Offset = "0x12F1C00")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1C00", Offset = "0x12F1C00")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F41E0", Offset = "0x12F41E0")]
		public float blurAmount;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x600022B")]
		[Address(RVA = "0x1D42704", Offset = "0x1D42704", VA = "0x1D42704", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x1D42748", Offset = "0x1D42748", VA = "0x1D42748", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x1D427BC", Offset = "0x1D427BC", VA = "0x1D427BC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x1D42B58", Offset = "0x1D42B58", VA = "0x1D42B58")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x2000046")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1C98", Offset = "0x12F1C98")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1C98", Offset = "0x12F1C98")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensityMultiplier;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float generalIntensity;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blackIntensity;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float whiteIntensity;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float midGrey;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool dx11Grain;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float softness;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool monochrome;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 intensities;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 tiling;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float monochromeTiling;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FilterMode filterMode;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader noiseShader;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material noiseMaterial;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x1D42B6C", Offset = "0x1D42B6C", VA = "0x1D42B6C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0x1D42C0C", Offset = "0x1D42C0C", VA = "0x1D42C0C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x1D43574", Offset = "0x1D43574", VA = "0x1D43574")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x1D438F0", Offset = "0x1D438F0", VA = "0x1D438F0")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x2000047")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1D30", Offset = "0x12F1D30")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1D30", Offset = "0x12F1D30")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool monochrome;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool rgbFallback;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F41FC", Offset = "0x12F41FC")]
		public float grainIntensityMin;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4214", Offset = "0x12F4214")]
		public float grainIntensityMax;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F422C", Offset = "0x12F422C")]
		public float grainSize;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F424C", Offset = "0x12F424C")]
		public float scratchIntensityMin;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4264", Offset = "0x12F4264")]
		public float scratchIntensityMax;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F427C", Offset = "0x12F427C")]
		public float scratchFPS;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4294", Offset = "0x12F4294")]
		public float scratchJitter;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture grainTexture;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture scratchTexture;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderRGB;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader shaderYUV;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_MaterialRGB;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_MaterialYUV;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float scratchTimeLeft;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scratchX;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scratchY;

		[Token(Token = "0x17000014")]
		protected Material material
		{
			[Token(Token = "0x6000235")]
			[Address(RVA = "0x1D43B48", Offset = "0x1D43B48", VA = "0x1D43B48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0x1D43A08", Offset = "0x1D43A08", VA = "0x1D43A08")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x1D43CBC", Offset = "0x1D43CBC", VA = "0x1D43CBC")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x1D43DC0", Offset = "0x1D43DC0", VA = "0x1D43DC0")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x1D43EFC", Offset = "0x1D43EFC", VA = "0x1D43EFC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x1D44244", Offset = "0x1D44244", VA = "0x1D44244")]
		public NoiseAndScratches()
		{
		}
	}
	[Token(Token = "0x2000048")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1DC8", Offset = "0x12F1DC8")]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x1D3B2E8", Offset = "0x1D3B2E8", VA = "0x1D3B2E8")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x1D442A4", Offset = "0x1D442A4", VA = "0x1D442A4")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x1D44494", Offset = "0x1D44494", VA = "0x1D44494")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x1D444A0", Offset = "0x1D444A0", VA = "0x1D444A0")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0x1D444A8", Offset = "0x1D444A8", VA = "0x1D444A8", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x1D44558", Offset = "0x1D44558", VA = "0x1D44558")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0x1D3B1D4", Offset = "0x1D3B1D4", VA = "0x1D3B1D4")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x1D44564", Offset = "0x1D44564", VA = "0x1D44564")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x1D445C0", Offset = "0x1D445C0", VA = "0x1D445C0")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0x1D3B6C4", Offset = "0x1D3B6C4", VA = "0x1D3B6C4")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0x1D445C8", Offset = "0x1D445C8", VA = "0x1D445C8")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0x1D44278", Offset = "0x1D44278", VA = "0x1D44278")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0x1D44810", Offset = "0x1D44810", VA = "0x1D44810")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000247")]
		[Address(RVA = "0x1D3BAF8", Offset = "0x1D3BAF8", VA = "0x1D3BAF8")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x2000049")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1E3C", Offset = "0x12F1E3C")]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x6000248")]
		[Address(RVA = "0x1D44B8C", Offset = "0x1D44B8C", VA = "0x1D44B8C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0x1D44BF8", Offset = "0x1D44BF8", VA = "0x1D44BF8")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0x1D44E74", Offset = "0x1D44E74", VA = "0x1D44E74")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0x1D451EC", Offset = "0x1D451EC", VA = "0x1D451EC")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0x1D45398", Offset = "0x1D45398", VA = "0x1D45398")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x200004A")]
	internal class Quads
	{
		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x600024D")]
		[Address(RVA = "0x1D453A0", Offset = "0x1D453A0", VA = "0x1D453A0")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x600024E")]
		[Address(RVA = "0x1D3EDCC", Offset = "0x1D3EDCC", VA = "0x1D3EDCC")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0x1D40DAC", Offset = "0x1D40DAC", VA = "0x1D40DAC")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000250")]
		[Address(RVA = "0x1D454C4", Offset = "0x1D454C4", VA = "0x1D454C4")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0x1D459F8", Offset = "0x1D459F8", VA = "0x1D459F8")]
		public Quads()
		{
		}
	}
	[Token(Token = "0x200004B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1EB0", Offset = "0x12F1EB0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1EB0", Offset = "0x12F1EB0")]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x20001EC")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x4000D70")]
			Additive,
			[Token(Token = "0x4000D71")]
			ScreenBlend,
			[Token(Token = "0x4000D72")]
			Multiply,
			[Token(Token = "0x4000D73")]
			Overlay,
			[Token(Token = "0x4000D74")]
			AlphaBlend
		}

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture2D texture;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader overlayShader;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material overlayMaterial;

		[Token(Token = "0x6000253")]
		[Address(RVA = "0x1D45A04", Offset = "0x1D45A04", VA = "0x1D45A04", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0x1D45A70", Offset = "0x1D45A70", VA = "0x1D45A70")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0x1D45BD8", Offset = "0x1D45BD8", VA = "0x1D45BD8")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x200004C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1F48", Offset = "0x12F1F48")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1F48", Offset = "0x12F1F48")]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F42AC", Offset = "0x12F42AC")]
		public float intensity;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F42C4", Offset = "0x12F42C4")]
		public float radius;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F42E0", Offset = "0x12F42E0")]
		public int blurIterations;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F42F8", Offset = "0x12F42F8")]
		public float blurFilterDistance;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4310", Offset = "0x12F4310")]
		public int downsample;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D rand;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader aoShader;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material aoMaterial;

		[Token(Token = "0x6000256")]
		[Address(RVA = "0x1D45BF8", Offset = "0x1D45BF8", VA = "0x1D45BF8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x1D45C6C", Offset = "0x1D45C6C", VA = "0x1D45C6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x1D45D1C", Offset = "0x1D45D1C", VA = "0x1D45D1C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0x1D462F0", Offset = "0x1D462F0", VA = "0x1D462F0")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x200004D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F1FE0", Offset = "0x12F1FE0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F1FE0", Offset = "0x12F1FE0")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x20001ED")]
		public enum SSAOSamples
		{
			[Token(Token = "0x4000D76")]
			Low,
			[Token(Token = "0x4000D77")]
			Medium,
			[Token(Token = "0x4000D78")]
			High
		}

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4328", Offset = "0x12F4328")]
		public float m_Radius;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4344", Offset = "0x12F4344")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F435C", Offset = "0x12F435C")]
		public int m_Blur;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4374", Offset = "0x12F4374")]
		public int m_Downsampling;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F438C", Offset = "0x12F438C")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F43A8", Offset = "0x12F43A8")]
		public float m_MinZ;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x600025A")]
		[Address(RVA = "0x1D4631C", Offset = "0x1D4631C", VA = "0x1D4631C")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0x1D463CC", Offset = "0x1D463CC", VA = "0x1D463CC")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x1D46468", Offset = "0x1D46468", VA = "0x1D46468")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0x1D46470", Offset = "0x1D46470", VA = "0x1D46470")]
		private void Start()
		{
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0x1D46624", Offset = "0x1D46624", VA = "0x1D46624")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0x1D46548", Offset = "0x1D46548", VA = "0x1D46548")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0x1D46698", Offset = "0x1D46698", VA = "0x1D46698")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0x1D46D54", Offset = "0x1D46D54", VA = "0x1D46D54")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x200004E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F3078", Offset = "0x12F3078")]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x6000262")]
		[Address(RVA = "0x1D46D88", Offset = "0x1D46D88", VA = "0x1D46D88")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0x1D46E18", Offset = "0x1D46E18", VA = "0x1D46E18")]
		public SepiaTone()
		{
		}
	}
	[Token(Token = "0x200004F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F30C4", Offset = "0x12F30C4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F30C4", Offset = "0x12F30C4")]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x20001EE")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x4000D7A")]
			Low,
			[Token(Token = "0x4000D7B")]
			Normal,
			[Token(Token = "0x4000D7C")]
			High
		}

		[Token(Token = "0x20001EF")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4000D7E")]
			Screen,
			[Token(Token = "0x4000D7F")]
			Add
		}

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform sunTransform;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int radialBlurIterations;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color sunColor;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color sunThreshold;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float sunShaftIntensity;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float maxRadius;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useDepthTexture;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader sunShaftsShader;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader simpleClearShader;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material simpleClearMaterial;

		[Token(Token = "0x6000264")]
		[Address(RVA = "0x1D46E20", Offset = "0x1D46E20", VA = "0x1D46E20", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000265")]
		[Address(RVA = "0x1D46EB0", Offset = "0x1D46EB0", VA = "0x1D46EB0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0x1D4769C", Offset = "0x1D4769C", VA = "0x1D4769C")]
		public SunShafts()
		{
		}
	}
	[Token(Token = "0x2000050")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F315C", Offset = "0x12F315C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F315C", Offset = "0x12F315C")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x20001F0")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x4000D81")]
			TiltShiftMode,
			[Token(Token = "0x4000D82")]
			IrisMode
		}

		[Token(Token = "0x20001F1")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x4000D84")]
			Preview,
			[Token(Token = "0x4000D85")]
			Normal,
			[Token(Token = "0x4000D86")]
			High
		}

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TiltShiftMode mode;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TiltShiftQuality quality;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F43C4", Offset = "0x12F43C4")]
		public float blurArea;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F43DC", Offset = "0x12F43DC")]
		public float maxBlurSize;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F43F4", Offset = "0x12F43F4")]
		public int downsample;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader tiltShiftShader;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x6000267")]
		[Address(RVA = "0x1D4773C", Offset = "0x1D4773C", VA = "0x1D4773C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0x1D477B0", Offset = "0x1D477B0", VA = "0x1D477B0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0x1D47A40", Offset = "0x1D47A40", VA = "0x1D47A40")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x2000051")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F31E4", Offset = "0x12F31E4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F31E4", Offset = "0x12F31E4")]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x20001F2")]
		public enum TonemapperType
		{
			[Token(Token = "0x4000D88")]
			SimpleReinhard,
			[Token(Token = "0x4000D89")]
			UserCurve,
			[Token(Token = "0x4000D8A")]
			Hable,
			[Token(Token = "0x4000D8B")]
			Photographic,
			[Token(Token = "0x4000D8C")]
			OptimizedHejiDawson,
			[Token(Token = "0x4000D8D")]
			AdaptiveReinhard,
			[Token(Token = "0x4000D8E")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x20001F3")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x4000D90")]
			Square16 = 0x10,
			[Token(Token = "0x4000D91")]
			Square32 = 0x20,
			[Token(Token = "0x4000D92")]
			Square64 = 0x40,
			[Token(Token = "0x4000D93")]
			Square128 = 0x80,
			[Token(Token = "0x4000D94")]
			Square256 = 0x100,
			[Token(Token = "0x4000D95")]
			Square512 = 0x200,
			[Token(Token = "0x4000D96")]
			Square1024 = 0x400
		}

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TonemapperType type;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D curveTex;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exposureAdjustment;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float middleGrey;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float white;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float adaptionSpeed;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader tonemapper;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material tonemapMaterial;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture rt;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x600026A")]
		[Address(RVA = "0x1D47A64", Offset = "0x1D47A64", VA = "0x1D47A64", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0x1D47BC8", Offset = "0x1D47BC8", VA = "0x1D47BC8")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0x1D47E9C", Offset = "0x1D47E9C", VA = "0x1D47E9C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0x1D4802C", Offset = "0x1D4802C", VA = "0x1D4802C")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0x1D4812C", Offset = "0x1D4812C", VA = "0x1D4812C")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0x1D48950", Offset = "0x1D48950", VA = "0x1D48950")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x2000052")]
	internal class Triangles
	{
		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentTris;

		[Token(Token = "0x6000270")]
		[Address(RVA = "0x1D48988", Offset = "0x1D48988", VA = "0x1D48988")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0x1D48AC4", Offset = "0x1D48AC4", VA = "0x1D48AC4")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x6000272")]
		[Address(RVA = "0x1D48CB4", Offset = "0x1D48CB4", VA = "0x1D48CB4")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0x1D48F88", Offset = "0x1D48F88", VA = "0x1D48F88")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0x1D493B8", Offset = "0x1D493B8", VA = "0x1D493B8")]
		public Triangles()
		{
		}
	}
	[Token(Token = "0x2000053")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F327C", Offset = "0x12F327C")]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F440C", Offset = "0x12F440C")]
		public float angle;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6000276")]
		[Address(RVA = "0x1D493C4", Offset = "0x1D493C4", VA = "0x1D493C4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0x1D49408", Offset = "0x1D49408", VA = "0x1D49408")]
		public Twirl()
		{
		}
	}
	[Token(Token = "0x2000054")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F32C8", Offset = "0x12F32C8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F32C8", Offset = "0x12F32C8")]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x20001F4")]
		public enum AberrationMode
		{
			[Token(Token = "0x4000D98")]
			Simple,
			[Token(Token = "0x4000D99")]
			Advanced
		}

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AberrationMode mode;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float chromaticAberration;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float axialAberration;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float blur;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blurSpread;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float luminanceDependency;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurDistance;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader vignetteShader;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader chromAberrationShader;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6000278")]
		[Address(RVA = "0x1D49484", Offset = "0x1D49484", VA = "0x1D49484", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000279")]
		[Address(RVA = "0x1D49538", Offset = "0x1D49538", VA = "0x1D49538")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0x1D49B64", Offset = "0x1D49B64", VA = "0x1D49B64")]
		public VignetteAndChromaticAberration()
		{
		}
	}
	[Token(Token = "0x2000055")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F3360", Offset = "0x12F3360")]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x600027B")]
		[Address(RVA = "0x1D49BA0", Offset = "0x1D49BA0", VA = "0x1D49BA0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0x1D49BE4", Offset = "0x1D49BE4", VA = "0x1D49BE4")]
		public Vortex()
		{
		}
	}
}
namespace uAudio
{
	[Token(Token = "0x2000056")]
	public class dirLoop_UI : MonoBehaviour
	{
		[Token(Token = "0x20001F5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F39B4", Offset = "0x12F39B4")]
		private sealed class <runNextSong>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public dirLoop_UI <>4__this;

			[Token(Token = "0x1700013F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E21")]
				[Address(RVA = "0x37E82C8", Offset = "0x37E82C8", VA = "0x37E82C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000140")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E23")]
				[Address(RVA = "0x37E8330", Offset = "0x37E8330", VA = "0x37E8330", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0x37E7A2C", Offset = "0x37E7A2C", VA = "0x37E7A2C")]
			[DebuggerHidden]
			public <runNextSong>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0x37E810C", Offset = "0x37E810C", VA = "0x37E810C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E20")]
			[Address(RVA = "0x37E8110", Offset = "0x37E8110", VA = "0x37E8110", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E22")]
			[Address(RVA = "0x37E82D0", Offset = "0x37E82D0", VA = "0x37E82D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001F6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F39C4", Offset = "0x12F39C4")]
		private sealed class <spinPlay>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public dirLoop_UI <>4__this;

			[Token(Token = "0x17000141")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E27")]
				[Address(RVA = "0x37E8788", Offset = "0x37E8788", VA = "0x37E8788", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000142")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E29")]
				[Address(RVA = "0x37E87F0", Offset = "0x37E87F0", VA = "0x37E87F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E24")]
			[Address(RVA = "0x37E7FC8", Offset = "0x37E7FC8", VA = "0x37E7FC8")]
			[DebuggerHidden]
			public <spinPlay>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000E25")]
			[Address(RVA = "0x37E8338", Offset = "0x37E8338", VA = "0x37E8338", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E26")]
			[Address(RVA = "0x37E833C", Offset = "0x37E833C", VA = "0x37E833C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E28")]
			[Address(RVA = "0x37E8790", Offset = "0x37E8790", VA = "0x37E8790", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uAudioPlayer_UI my_uAudioPlayer_UI;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputField song_dirFilePath;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button bn_song_pre;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button bn_song_next;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button bn_dir_update;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<FileInfo> songs;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool readyNextSong;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int currentSong_index;

		[Token(Token = "0x600027D")]
		[Address(RVA = "0x37E741C", Offset = "0x37E741C", VA = "0x37E741C")]
		private void Start()
		{
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0x37E78B8", Offset = "0x37E78B8", VA = "0x37E78B8")]
		private void OnPlayBackState(PlayBackState valIN)
		{
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0x37E79B0", Offset = "0x37E79B0", VA = "0x37E79B0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F58F0", Offset = "0x12F58F0")]
		private IEnumerator runNextSong()
		{
			return null;
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0x37E7A58", Offset = "0x37E7A58", VA = "0x37E7A58")]
		private void LoadSongList(DirectoryInfo dirIN)
		{
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0x37E7CA0", Offset = "0x37E7CA0", VA = "0x37E7CA0")]
		private DirectoryInfo getTargetDir()
		{
			return null;
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0x37E76E0", Offset = "0x37E76E0", VA = "0x37E76E0")]
		private void LoadSongs()
		{
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0x37E7DA4", Offset = "0x37E7DA4", VA = "0x37E7DA4")]
		private FileInfo getNextSong()
		{
			return null;
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0x37E7E5C", Offset = "0x37E7E5C", VA = "0x37E7E5C")]
		private FileInfo getPreSong()
		{
			return null;
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0x37E782C", Offset = "0x37E782C", VA = "0x37E782C")]
		private FileInfo getCurrentSong()
		{
			return null;
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0x37E7348", Offset = "0x37E7348", VA = "0x37E7348")]
		public void MoveNextSong()
		{
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0x37E7F4C", Offset = "0x37E7F4C", VA = "0x37E7F4C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5954", Offset = "0x12F5954")]
		private IEnumerator spinPlay()
		{
			return null;
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0x37E7FF4", Offset = "0x37E7FF4", VA = "0x37E7FF4")]
		private void MovePreSong()
		{
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0x37E808C", Offset = "0x37E808C", VA = "0x37E808C")]
		private void Update_dir()
		{
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0x37E8090", Offset = "0x37E8090", VA = "0x37E8090")]
		public dirLoop_UI()
		{
		}
	}
	[Token(Token = "0x2000057")]
	public class uAudioPlayer : MonoBehaviour, IAudioPlayer, IDisposable
	{
		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uAudio.uAudio_backend.uAudio _uAudio;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource myAudioSource;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> Update_UI_songTime;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string targetFile;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Action<PlayBackState> _sendPlaybackState;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool updateTime;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private PlayBackState State;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool SongDone;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool flare_SongEnd;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float[] _getAudioData_sampler;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MpegFile playbackDevice;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ReadFullyStream readFullyStream;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float start_volume_Offset;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _loadedTarget;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private TimeSpan endSongTime;

		[Token(Token = "0x17000015")]
		public Action<PlayBackState> sendPlaybackState
		{
			[Token(Token = "0x600028B")]
			[Address(RVA = "0x37E87F8", Offset = "0x37E87F8", VA = "0x37E87F8", Slot = "21")]
			get
			{
				return null;
			}
			[Token(Token = "0x600028C")]
			[Address(RVA = "0x37E8800", Offset = "0x37E8800", VA = "0x37E8800", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000016")]
		public int SongLength
		{
			[Token(Token = "0x600028D")]
			[Address(RVA = "0x37E8808", Offset = "0x37E8808", VA = "0x37E8808", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000017")]
		public float Volume_Offset
		{
			[Token(Token = "0x600028E")]
			[Address(RVA = "0x37E8824", Offset = "0x37E8824", VA = "0x37E8824")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600028F")]
			[Address(RVA = "0x37E882C", Offset = "0x37E882C", VA = "0x37E882C")]
			set
			{
			}
		}

		[Token(Token = "0x17000018")]
		public uAudio.uAudio_backend.uAudio UAudio
		{
			[Token(Token = "0x6000290")]
			[Address(RVA = "0x37E886C", Offset = "0x37E886C", VA = "0x37E886C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000291")]
			[Address(RVA = "0x37E7F18", Offset = "0x37E7F18", VA = "0x37E7F18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700001A")]
		private Action uAudio.uAudio_backend.IAudioPlayer.SLEEP
		{
			[Token(Token = "0x6000292")]
			[Address(RVA = "0x37E8968", Offset = "0x37E8968", VA = "0x37E8968", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000293")]
			[Address(RVA = "0x37E89FC", Offset = "0x37E89FC", VA = "0x37E89FC", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700001B")]
		public string AudioTitle
		{
			[Token(Token = "0x6000295")]
			[Address(RVA = "0x37E8A98", Offset = "0x37E8A98", VA = "0x37E8A98", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001C")]
		public TimeSpan CurrentTime
		{
			[Token(Token = "0x6000296")]
			[Address(RVA = "0x37E72A0", Offset = "0x37E72A0", VA = "0x37E72A0", Slot = "10")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6000297")]
			[Address(RVA = "0x37E8B04", Offset = "0x37E8B04", VA = "0x37E8B04", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x1700001D")]
		public float Pan
		{
			[Token(Token = "0x6000298")]
			[Address(RVA = "0x37E8B18", Offset = "0x37E8B18", VA = "0x37E8B18", Slot = "23")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000299")]
			[Address(RVA = "0x37E8BB0", Offset = "0x37E8BB0", VA = "0x37E8BB0", Slot = "24")]
			set
			{
			}
		}

		[Token(Token = "0x1700001E")]
		public TimeSpan TotalTime
		{
			[Token(Token = "0x600029A")]
			[Address(RVA = "0x37E72C4", Offset = "0x37E72C4", VA = "0x37E72C4", Slot = "9")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x1700001F")]
		public float Volume
		{
			[Token(Token = "0x600029B")]
			[Address(RVA = "0x37E8C58", Offset = "0x37E8C58", VA = "0x37E8C58", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600029C")]
			[Address(RVA = "0x37E8C74", Offset = "0x37E8C74", VA = "0x37E8C74", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000020")]
		public float Volume_BackEnd
		{
			[Token(Token = "0x600029D")]
			[Address(RVA = "0x37E8C90", Offset = "0x37E8C90", VA = "0x37E8C90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600029E")]
			[Address(RVA = "0x37E8CAC", Offset = "0x37E8CAC", VA = "0x37E8CAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000021")]
		public PlayBackState PlaybackState
		{
			[Token(Token = "0x600029F")]
			[Address(RVA = "0x37E8D00", Offset = "0x37E8D00", VA = "0x37E8D00", Slot = "5")]
			get
			{
				return default(PlayBackState);
			}
		}

		[Token(Token = "0x17000022")]
		private string uAudio.uAudio_backend.IAudioPlayer.current_TargetFile_Loaded
		{
			[Token(Token = "0x60002A1")]
			[Address(RVA = "0x37E8D24", Offset = "0x37E8D24", VA = "0x37E8D24", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0x37E8A90", Offset = "0x37E8A90", VA = "0x37E8A90")]
		private void uAudio_stopped()
		{
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x37E8D08", Offset = "0x37E8D08", VA = "0x37E8D08")]
		public void ChangeCurrentVolume(float volumeIN)
		{
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x37E8D2C", Offset = "0x37E8D2C", VA = "0x37E8D2C", Slot = "25")]
		public void ChangeCurrentTime(TimeSpan timeIN)
		{
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x37E8D40", Offset = "0x37E8D40", VA = "0x37E8D40")]
		private void Update()
		{
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x37E9050", Offset = "0x37E9050", VA = "0x37E9050", Slot = "16")]
		public void LoadFile(string targetFileIN)
		{
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x37E90E0", Offset = "0x37E90E0", VA = "0x37E90E0", Slot = "17")]
		public void SetFile(string targetFileIN)
		{
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x37E8DFC", Offset = "0x37E8DFC", VA = "0x37E8DFC")]
		private void SongEnd()
		{
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x37E90E8", Offset = "0x37E90E8", VA = "0x37E90E8", Slot = "14")]
		public void Play([Optional] TimeSpan? startOff)
		{
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x37E9970", Offset = "0x37E9970", VA = "0x37E9970")]
		private void Song_Stream_Loop(float[] data)
		{
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x37E9770", Offset = "0x37E9770", VA = "0x37E9770", Slot = "13")]
		public void Pause()
		{
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x37E9AB8", Offset = "0x37E9AB8", VA = "0x37E9AB8", Slot = "15")]
		public void Stop()
		{
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x37E9AC8", Offset = "0x37E9AC8", VA = "0x37E9AC8")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x37E9ACC", Offset = "0x37E9ACC", VA = "0x37E9ACC", Slot = "20")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x37E9B28", Offset = "0x37E9B28", VA = "0x37E9B28")]
		public void Resume()
		{
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x37E9B88", Offset = "0x37E9B88", VA = "0x37E9B88")]
		public uAudioPlayer()
		{
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x37E9C08", Offset = "0x37E9C08", VA = "0x37E9C08")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F59B8", Offset = "0x12F59B8")]
		private void <get_UAudio>b__22_0(PlayBackState c)
		{
		}
	}
	[Token(Token = "0x2000058")]
	public class uAudioPlayer_UI : MonoBehaviour
	{
		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uAudioPlayer my_uAudioPlayer;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputField songFilePath;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Slider songTime;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text songCurrentTime;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text songMaxTime;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button bn_play;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button bn_pause;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button bn_stop;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Slider songVolume;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Toggle DontResetTime;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string targetFile;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float myLastSetTime;

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x37E9C70", Offset = "0x37E9C70", VA = "0x37E9C70")]
		private void Start()
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x37EA2D4", Offset = "0x37EA2D4", VA = "0x37EA2D4")]
		public void send_data(PlayBackState songState)
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x37E84A8", Offset = "0x37E84A8", VA = "0x37E84A8")]
		public void Play()
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x37E7F28", Offset = "0x37E7F28", VA = "0x37E7F28")]
		public void Stop()
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x37EA2D8", Offset = "0x37EA2D8", VA = "0x37EA2D8")]
		public void onSongVolume_Change(float volumeIN)
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x37EA300", Offset = "0x37EA300", VA = "0x37EA300")]
		public void onSongTime_Change(float timeIN)
		{
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x37EA2B8", Offset = "0x37EA2B8", VA = "0x37EA2B8")]
		private void onSongPath_Change(string PathIN)
		{
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x37E789C", Offset = "0x37E789C", VA = "0x37E789C")]
		public void setSongPath_Change(string PathIN)
		{
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x37EA3B0", Offset = "0x37EA3B0", VA = "0x37EA3B0")]
		public void Update_UI_songTime(float newTimeIN)
		{
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x37EA5BC", Offset = "0x37EA5BC", VA = "0x37EA5BC")]
		public uAudioPlayer_UI()
		{
		}
	}
	[Token(Token = "0x2000059")]
	public class uAudioStreamer : MonoBehaviour, IAudioPlayer, IDisposable
	{
		[Token(Token = "0x20001F7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F39D4", Offset = "0x12F39D4")]
		private sealed class <LoopRead>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uAudioStreamer <>4__this;

			[Token(Token = "0x17000143")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E2D")]
				[Address(RVA = "0x37EBAE0", Offset = "0x37EBAE0", VA = "0x37EBAE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000144")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E2F")]
				[Address(RVA = "0x37EBB48", Offset = "0x37EBB48", VA = "0x37EBB48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0x37EAEEC", Offset = "0x37EAEEC", VA = "0x37EAEEC")]
			[DebuggerHidden]
			public <LoopRead>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6000E2B")]
			[Address(RVA = "0x37EB8CC", Offset = "0x37EB8CC", VA = "0x37EB8CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E2C")]
			[Address(RVA = "0x37EB8D0", Offset = "0x37EB8D0", VA = "0x37EB8D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E2E")]
			[Address(RVA = "0x37EBAE8", Offset = "0x37EBAE8", VA = "0x37EBAE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F39E4", Offset = "0x12F39E4")]
		private sealed class <firePlay>d__56 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uAudioStreamer <>4__this;

			[Token(Token = "0x4000DA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TimeSpan? OffsetStart;

			[Token(Token = "0x17000145")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E33")]
				[Address(RVA = "0x37EBE30", Offset = "0x37EBE30", VA = "0x37EBE30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000146")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E35")]
				[Address(RVA = "0x37EBE98", Offset = "0x37EBE98", VA = "0x37EBE98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E30")]
			[Address(RVA = "0x37EB098", Offset = "0x37EB098", VA = "0x37EB098")]
			[DebuggerHidden]
			public <firePlay>d__56(int <>1__state)
			{
			}

			[Token(Token = "0x6000E31")]
			[Address(RVA = "0x37EBB50", Offset = "0x37EBB50", VA = "0x37EBB50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E32")]
			[Address(RVA = "0x37EBB54", Offset = "0x37EBB54", VA = "0x37EBB54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E34")]
			[Address(RVA = "0x37EBE38", Offset = "0x37EBE38", VA = "0x37EBE38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action<PlayBackState> _sendPlaybackState;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool betaNativeThreadBuffering;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string targetFilePath;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string theUrl;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private System.Threading.Thread myThreadPump;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private System.Threading.Thread myThreadPump2;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool callUpdateNeeded;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public uAudioPlayer my_uAudioPlayer;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float minBufferTime;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float maxBufferTime;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private uAudio_Streaming _theAudioStream;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private IEnumerator myLoopRead;

		[Token(Token = "0x17000023")]
		public Action<PlayBackState> sendPlaybackState
		{
			[Token(Token = "0x60002BA")]
			[Address(RVA = "0x37EA5C4", Offset = "0x37EA5C4", VA = "0x37EA5C4", Slot = "21")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002BB")]
			[Address(RVA = "0x37EA5CC", Offset = "0x37EA5CC", VA = "0x37EA5CC", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000024")]
		private uAudio_Streaming TheAudioStream
		{
			[Token(Token = "0x60002BE")]
			[Address(RVA = "0x37EA5DC", Offset = "0x37EA5DC", VA = "0x37EA5DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private Action uAudio.uAudio_backend.IAudioPlayer.SLEEP
		{
			[Token(Token = "0x60002BF")]
			[Address(RVA = "0x37EA98C", Offset = "0x37EA98C", VA = "0x37EA98C", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002C0")]
			[Address(RVA = "0x37EAA20", Offset = "0x37EAA20", VA = "0x37EAA20", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000026")]
		public string AudioTitle
		{
			[Token(Token = "0x60002C1")]
			[Address(RVA = "0x37EAAB4", Offset = "0x37EAAB4", VA = "0x37EAAB4", Slot = "23")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000027")]
		private string uAudio.uAudio_backend.IAudioPlayer.current_TargetFile_Loaded
		{
			[Token(Token = "0x60002C2")]
			[Address(RVA = "0x37EAABC", Offset = "0x37EAABC", VA = "0x37EAABC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		public PlayBackState PlaybackState
		{
			[Token(Token = "0x60002C3")]
			[Address(RVA = "0x37EAAC4", Offset = "0x37EAAC4", VA = "0x37EAAC4", Slot = "5")]
			get
			{
				return default(PlayBackState);
			}
		}

		[Token(Token = "0x17000029")]
		public float Volume
		{
			[Token(Token = "0x60002C4")]
			[Address(RVA = "0x37EAB38", Offset = "0x37EAB38", VA = "0x37EAB38", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002C5")]
			[Address(RVA = "0x37EAB60", Offset = "0x37EAB60", VA = "0x37EAB60", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700002A")]
		public TimeSpan TotalTime
		{
			[Token(Token = "0x60002C6")]
			[Address(RVA = "0x37EAB88", Offset = "0x37EAB88", VA = "0x37EAB88", Slot = "9")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x1700002B")]
		public int SongLength
		{
			[Token(Token = "0x60002C7")]
			[Address(RVA = "0x37EABF0", Offset = "0x37EABF0", VA = "0x37EABF0", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700002C")]
		public TimeSpan CurrentTime
		{
			[Token(Token = "0x60002C8")]
			[Address(RVA = "0x37EABF8", Offset = "0x37EABF8", VA = "0x37EABF8", Slot = "10")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x60002C9")]
			[Address(RVA = "0x37EAC60", Offset = "0x37EAC60", VA = "0x37EAC60", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x1700002D")]
		public float Pan
		{
			[Token(Token = "0x60002CA")]
			[Address(RVA = "0x37EAC64", Offset = "0x37EAC64", VA = "0x37EAC64", Slot = "24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002CB")]
			[Address(RVA = "0x37EAC7C", Offset = "0x37EAC7C", VA = "0x37EAC7C", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700002E")]
		public bool ForceBuffering
		{
			[Token(Token = "0x60002CC")]
			[Address(RVA = "0x37EAC94", Offset = "0x37EAC94", VA = "0x37EAC94")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60002CD")]
			[Address(RVA = "0x37EACCC", Offset = "0x37EACCC", VA = "0x37EACCC")]
			set
			{
			}
		}

		[Token(Token = "0x1700002F")]
		public bool BetaNativeThreadBuffering
		{
			[Token(Token = "0x60002CE")]
			[Address(RVA = "0x37EAD0C", Offset = "0x37EAD0C", VA = "0x37EAD0C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60002CF")]
			[Address(RVA = "0x37EAD54", Offset = "0x37EAD54", VA = "0x37EAD54")]
			set
			{
			}
		}

		[Token(Token = "0x17000030")]
		public double BufferedTime
		{
			[Token(Token = "0x60002D2")]
			[Address(RVA = "0x37EADE0", Offset = "0x37EADE0", VA = "0x37EADE0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x37EA5D4", Offset = "0x37EA5D4", VA = "0x37EA5D4")]
		private void theAudioStream_sendPlaying()
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x37EA5D8", Offset = "0x37EA5D8", VA = "0x37EA5D8", Slot = "22")]
		public void ChangeCurrentTime(TimeSpan timeIN)
		{
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x37EAD60", Offset = "0x37EAD60", VA = "0x37EAD60")]
		private void onSongVolume_Change(float volumeIN)
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x37EA60C", Offset = "0x37EA60C", VA = "0x37EA60C")]
		private void build_theAudioStream()
		{
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x37EADFC", Offset = "0x37EADFC", VA = "0x37EADFC")]
		private void loadAudio()
		{
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x37EAD64", Offset = "0x37EAD64", VA = "0x37EAD64")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F59C8", Offset = "0x12F59C8")]
		private IEnumerator LoopRead()
		{
			return null;
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x37EAF18", Offset = "0x37EAF18", VA = "0x37EAF18")]
		private void theAudioStream_sendStartLoopPump()
		{
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x37EAF24", Offset = "0x37EAF24", VA = "0x37EAF24")]
		private void theAudioStream_sendStopLoopPump()
		{
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x37EAF28", Offset = "0x37EAF28", VA = "0x37EAF28")]
		private void Update()
		{
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x37EB008", Offset = "0x37EB008", VA = "0x37EB008")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5A2C", Offset = "0x12F5A2C")]
		private IEnumerator firePlay(TimeSpan? OffsetStart)
		{
			return null;
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x37EB0C4", Offset = "0x37EB0C4", VA = "0x37EB0C4")]
		public void PlayAudioFile(InputField FileNameIN, TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x37EB0DC", Offset = "0x37EB0DC", VA = "0x37EB0DC")]
		public void PlayAudioStream(string FileNameIN, TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x37EB1C8", Offset = "0x37EB1C8", VA = "0x37EB1C8")]
		public void SetStreamURL(string streamURL)
		{
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x37EB1D0", Offset = "0x37EB1D0", VA = "0x37EB1D0")]
		public void PlayPauseAudio()
		{
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x37EB2A0", Offset = "0x37EB2A0", VA = "0x37EB2A0")]
		private string loadLinkFile(string fileIN)
		{
			return null;
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x37EB184", Offset = "0x37EB184", VA = "0x37EB184", Slot = "14")]
		public void Play([Optional] TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x37EB38C", Offset = "0x37EB38C", VA = "0x37EB38C")]
		private void RunPlay()
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x37EB498", Offset = "0x37EB498", VA = "0x37EB498", Slot = "13")]
		public void Pause()
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x37EB4AC", Offset = "0x37EB4AC", VA = "0x37EB4AC", Slot = "15")]
		public void Stop()
		{
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x37EB51C", Offset = "0x37EB51C", VA = "0x37EB51C")]
		public void Halt()
		{
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x37EB140", Offset = "0x37EB140", VA = "0x37EB140", Slot = "16")]
		public void LoadFile(string targetFile)
		{
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x37EB584", Offset = "0x37EB584", VA = "0x37EB584", Slot = "17")]
		public void SetFile(string targetFile)
		{
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x37EB58C", Offset = "0x37EB58C", VA = "0x37EB58C")]
		public void SetURL(string targetFile)
		{
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x37EB594", Offset = "0x37EB594", VA = "0x37EB594")]
		private void theAudioStream_Disposed(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x37EB5E0", Offset = "0x37EB5E0", VA = "0x37EB5E0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x37EB5E4", Offset = "0x37EB5E4", VA = "0x37EB5E4", Slot = "20")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x37EB700", Offset = "0x37EB700", VA = "0x37EB700")]
		public uAudioStreamer()
		{
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x37EB774", Offset = "0x37EB774", VA = "0x37EB774")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5A90", Offset = "0x12F5A90")]
		private void <build_theAudioStream>b__47_0(PlayBackState c)
		{
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x37EB7DC", Offset = "0x37EB7DC", VA = "0x37EB7DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5AA0", Offset = "0x12F5AA0")]
		private void <loadAudio>b__50_0()
		{
		}
	}
	[Token(Token = "0x200005A")]
	public class uAudioStreamer_UI : MonoBehaviour, IAudioPlayer, IDisposable
	{
		[Token(Token = "0x20001F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F39F4", Offset = "0x12F39F4")]
		private sealed class <updateBuffer>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uAudioStreamer_UI <>4__this;

			[Token(Token = "0x17000147")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E39")]
				[Address(RVA = "0x37ECCE0", Offset = "0x37ECCE0", VA = "0x37ECCE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000148")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E3B")]
				[Address(RVA = "0x37ECD48", Offset = "0x37ECD48", VA = "0x37ECD48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E36")]
			[Address(RVA = "0x37EBF1C", Offset = "0x37EBF1C", VA = "0x37EBF1C")]
			[DebuggerHidden]
			public <updateBuffer>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6000E37")]
			[Address(RVA = "0x37ECB9C", Offset = "0x37ECB9C", VA = "0x37ECB9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E38")]
			[Address(RVA = "0x37ECBA0", Offset = "0x37ECBA0", VA = "0x37ECBA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0x37ECCE8", Offset = "0x37ECCE8", VA = "0x37ECCE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputField urlInput;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Slider Buffer;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button bn_play;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button bn_pause;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button bn_stop;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Slider SongVolume;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string targetFilePath;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public uAudioStreamer my_uAudioStreamer;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool force_buffer;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Coroutine bufferLoop;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool halt;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private IEnumerator updateBufferLoop;

		[Token(Token = "0x17000031")]
		public Action<PlayBackState> sendPlaybackState
		{
			[Token(Token = "0x60002ED")]
			[Address(RVA = "0x37EBF48", Offset = "0x37EBF48", VA = "0x37EBF48", Slot = "21")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002EE")]
			[Address(RVA = "0x37EBF64", Offset = "0x37EBF64", VA = "0x37EBF64", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000032")]
		private Action uAudio.uAudio_backend.IAudioPlayer.SLEEP
		{
			[Token(Token = "0x60002EF")]
			[Address(RVA = "0x37EBF80", Offset = "0x37EBF80", VA = "0x37EBF80", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002F0")]
			[Address(RVA = "0x37EC014", Offset = "0x37EC014", VA = "0x37EC014", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000033")]
		public string AudioTitle
		{
			[Token(Token = "0x60002F1")]
			[Address(RVA = "0x37EC0A8", Offset = "0x37EC0A8", VA = "0x37EC0A8", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private string uAudio.uAudio_backend.IAudioPlayer.current_TargetFile_Loaded
		{
			[Token(Token = "0x60002F2")]
			[Address(RVA = "0x37EC0B0", Offset = "0x37EC0B0", VA = "0x37EC0B0", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		public PlayBackState PlaybackState
		{
			[Token(Token = "0x60002F3")]
			[Address(RVA = "0x37EC0B8", Offset = "0x37EC0B8", VA = "0x37EC0B8", Slot = "5")]
			get
			{
				return default(PlayBackState);
			}
		}

		[Token(Token = "0x17000036")]
		public float Volume
		{
			[Token(Token = "0x60002F6")]
			[Address(RVA = "0x37EC12C", Offset = "0x37EC12C", VA = "0x37EC12C", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002F7")]
			[Address(RVA = "0x37EC144", Offset = "0x37EC144", VA = "0x37EC144", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000037")]
		public TimeSpan TotalTime
		{
			[Token(Token = "0x60002F8")]
			[Address(RVA = "0x37EC15C", Offset = "0x37EC15C", VA = "0x37EC15C", Slot = "9")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x17000038")]
		public int SongLength
		{
			[Token(Token = "0x60002F9")]
			[Address(RVA = "0x37EC1C4", Offset = "0x37EC1C4", VA = "0x37EC1C4", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000039")]
		public TimeSpan CurrentTime
		{
			[Token(Token = "0x60002FA")]
			[Address(RVA = "0x37EC1CC", Offset = "0x37EC1CC", VA = "0x37EC1CC", Slot = "10")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x60002FB")]
			[Address(RVA = "0x37EC234", Offset = "0x37EC234", VA = "0x37EC234", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public float Pan
		{
			[Token(Token = "0x60002FC")]
			[Address(RVA = "0x37EC238", Offset = "0x37EC238", VA = "0x37EC238", Slot = "23")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002FD")]
			[Address(RVA = "0x37EC25C", Offset = "0x37EC25C", VA = "0x37EC25C", Slot = "24")]
			set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public bool ForceBuffering
		{
			[Token(Token = "0x60002FE")]
			[Address(RVA = "0x37EC280", Offset = "0x37EC280", VA = "0x37EC280")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60002FF")]
			[Address(RVA = "0x37EC298", Offset = "0x37EC298", VA = "0x37EC298")]
			set
			{
			}
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x37EBEA0", Offset = "0x37EBEA0", VA = "0x37EBEA0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5AB0", Offset = "0x12F5AB0")]
		private IEnumerator updateBuffer()
		{
			return null;
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x37EC0D0", Offset = "0x37EC0D0", VA = "0x37EC0D0")]
		public void ChangeCurrentVolume(Slider volumeSlider)
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x37EC114", Offset = "0x37EC114", VA = "0x37EC114")]
		public void ChangeCurrentVolume(float volumeIN)
		{
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x37EC2B4", Offset = "0x37EC2B4", VA = "0x37EC2B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x37EC6C4", Offset = "0x37EC6C4", VA = "0x37EC6C4")]
		public void Play(PlayBackState v)
		{
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x37EC6C8", Offset = "0x37EC6C8", VA = "0x37EC6C8")]
		private void onSongVolume_Change(float volumeIN)
		{
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0x37EC6E0", Offset = "0x37EC6E0", VA = "0x37EC6E0")]
		private void onSongPath_Change(string PathIN)
		{
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x37EC6E8", Offset = "0x37EC6E8", VA = "0x37EC6E8")]
		public void SetStreamURL(string streamURL)
		{
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x37EC704", Offset = "0x37EC704", VA = "0x37EC704")]
		private string loadLinkFile(string fileIN)
		{
			return null;
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0x37EC814", Offset = "0x37EC814", VA = "0x37EC814")]
		private void startPlay()
		{
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x37EC984", Offset = "0x37EC984", VA = "0x37EC984", Slot = "14")]
		public void Play([Optional] TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x37ECA50", Offset = "0x37ECA50", VA = "0x37ECA50", Slot = "13")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x37ECA78", Offset = "0x37ECA78", VA = "0x37ECA78", Slot = "15")]
		public void Stop()
		{
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x37ECB40", Offset = "0x37ECB40", VA = "0x37ECB40", Slot = "25")]
		public void ChangeCurrentTime(TimeSpan timeIN)
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x37EC7F8", Offset = "0x37EC7F8", VA = "0x37EC7F8", Slot = "16")]
		public void LoadFile(string targetFile)
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x37ECB44", Offset = "0x37ECB44", VA = "0x37ECB44", Slot = "17")]
		public void SetFile(string targetFile)
		{
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0x37ECB60", Offset = "0x37ECB60", VA = "0x37ECB60")]
		public void SetURL(string targetFile)
		{
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x37ECB7C", Offset = "0x37ECB7C", VA = "0x37ECB7C", Slot = "20")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x37ECB94", Offset = "0x37ECB94", VA = "0x37ECB94")]
		public uAudioStreamer_UI()
		{
		}
	}
}
namespace RelationsInspector.Backend.AutoBackend
{
	[Token(Token = "0x200005B")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x12F33AC", Offset = "0x12F33AC")]
	public class AutoBackendAttribute : Attribute
	{
		[Token(Token = "0x6000310")]
		[Address(RVA = "0x21C097C", Offset = "0x21C097C", VA = "0x21C097C")]
		public AutoBackendAttribute()
		{
		}
	}
	[Token(Token = "0x200005C")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x12F33C0", Offset = "0x12F33C0")]
	public class RelatedAttribute : Attribute
	{
		[Token(Token = "0x6000311")]
		[Address(RVA = "0x21C0984", Offset = "0x21C0984", VA = "0x21C0984")]
		public RelatedAttribute()
		{
		}
	}
	[Token(Token = "0x200005D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x12F33D4", Offset = "0x12F33D4")]
	public class RelatingAttribute : Attribute
	{
		[Token(Token = "0x6000312")]
		[Address(RVA = "0x21C098C", Offset = "0x21C098C", VA = "0x21C098C")]
		public RelatingAttribute()
		{
		}
	}
}
namespace FMODUnity
{
	[Token(Token = "0x200005E")]
	public class PlatformAndroid : Platform
	{
		[Token(Token = "0x1700003C")]
		public override string DisplayName
		{
			[Token(Token = "0x6000314")]
			[Address(RVA = "0x21B3A7C", Offset = "0x21B3A7C", VA = "0x21B3A7C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x21B3A08", Offset = "0x21B3A08", VA = "0x21B3A08")]
		static PlatformAndroid()
		{
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0x21B3AC4", Offset = "0x21B3AC4", VA = "0x21B3AC4", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0x21B3C88", Offset = "0x21B3C88", VA = "0x21B3C88", Slot = "11")]
		public override string GetBankFolder()
		{
			return null;
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0x21B3CE4", Offset = "0x21B3CE4", VA = "0x21B3CE4")]
		public static string StaticGetBankFolder()
		{
			return null;
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x21B3FEC", Offset = "0x21B3FEC", VA = "0x21B3FEC", Slot = "14")]
		public override string GetPluginPath(string pluginName)
		{
			return null;
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x21B4050", Offset = "0x21B4050", VA = "0x21B4050")]
		public static string StaticGetPluginPath(string pluginName)
		{
			return null;
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x21B40A4", Offset = "0x21B40A4", VA = "0x21B40A4")]
		public PlatformAndroid()
		{
		}
	}
	[Token(Token = "0x200005F")]
	public class PlatformWebGL : Platform
	{
		[Token(Token = "0x1700003D")]
		public override string DisplayName
		{
			[Token(Token = "0x600031C")]
			[Address(RVA = "0x21B5500", Offset = "0x21B5500", VA = "0x21B5500", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x21B548C", Offset = "0x21B548C", VA = "0x21B548C")]
		static PlatformWebGL()
		{
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0x21B5548", Offset = "0x21B5548", VA = "0x21B5548", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0x21B556C", Offset = "0x21B556C", VA = "0x21B556C", Slot = "14")]
		public override string GetPluginPath(string pluginName)
		{
			return null;
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0x21B55E4", Offset = "0x21B55E4", VA = "0x21B55E4")]
		public PlatformWebGL()
		{
		}
	}
	[Token(Token = "0x2000060")]
	public class PlatformIOS : Platform
	{
		[Token(Token = "0x1700003E")]
		public override string DisplayName
		{
			[Token(Token = "0x6000321")]
			[Address(RVA = "0x21B4698", Offset = "0x21B4698", VA = "0x21B4698", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x21B4624", Offset = "0x21B4624", VA = "0x21B4624")]
		static PlatformIOS()
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x21B46E0", Offset = "0x21B46E0", VA = "0x21B46E0", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0x21B4704", Offset = "0x21B4704", VA = "0x21B4704", Slot = "15")]
		public override void LoadPlugins(FMOD.System coreSystem, Action<RESULT, string> reportResult)
		{
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x21B4278", Offset = "0x21B4278", VA = "0x21B4278")]
		public static void StaticLoadPlugins(Platform platform, FMOD.System coreSystem, Action<RESULT, string> reportResult)
		{
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0x21B4794", Offset = "0x21B4794", VA = "0x21B4794")]
		public PlatformIOS()
		{
		}
	}
	[Token(Token = "0x2000061")]
	public class PlatformLinux : Platform
	{
		[Token(Token = "0x1700003F")]
		public override string DisplayName
		{
			[Token(Token = "0x6000327")]
			[Address(RVA = "0x21B486C", Offset = "0x21B486C", VA = "0x21B486C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0x21B47F8", Offset = "0x21B47F8", VA = "0x21B47F8")]
		static PlatformLinux()
		{
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x21B48B4", Offset = "0x21B48B4", VA = "0x21B48B4", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0x21B48D8", Offset = "0x21B48D8", VA = "0x21B48D8", Slot = "14")]
		public override string GetPluginPath(string pluginName)
		{
			return null;
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0x21B4950", Offset = "0x21B4950", VA = "0x21B4950")]
		public PlatformLinux()
		{
		}
	}
	[Token(Token = "0x2000062")]
	public class PlatformMac : Platform
	{
		[Token(Token = "0x17000040")]
		public override string DisplayName
		{
			[Token(Token = "0x600032C")]
			[Address(RVA = "0x21B4A28", Offset = "0x21B4A28", VA = "0x21B4A28", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0x21B49B4", Offset = "0x21B49B4", VA = "0x21B49B4")]
		static PlatformMac()
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0x21B4A70", Offset = "0x21B4A70", VA = "0x21B4A70", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0x21B4A94", Offset = "0x21B4A94", VA = "0x21B4A94", Slot = "14")]
		public override string GetPluginPath(string pluginName)
		{
			return null;
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0x21B4B0C", Offset = "0x21B4B0C", VA = "0x21B4B0C")]
		public PlatformMac()
		{
		}
	}
	[Token(Token = "0x2000063")]
	public class PlatformAppleTV : Platform
	{
		[Token(Token = "0x17000041")]
		public override string DisplayName
		{
			[Token(Token = "0x6000331")]
			[Address(RVA = "0x21B417C", Offset = "0x21B417C", VA = "0x21B417C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0x21B4108", Offset = "0x21B4108", VA = "0x21B4108")]
		static PlatformAppleTV()
		{
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0x21B41C4", Offset = "0x21B41C4", VA = "0x21B41C4", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0x21B41E8", Offset = "0x21B41E8", VA = "0x21B41E8", Slot = "15")]
		public override void LoadPlugins(FMOD.System coreSystem, Action<RESULT, string> reportResult)
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0x21B4298", Offset = "0x21B4298", VA = "0x21B4298")]
		public PlatformAppleTV()
		{
		}
	}
	[Token(Token = "0x2000064")]
	public class PlatformWindows : Platform
	{
		[Token(Token = "0x17000042")]
		public override string DisplayName
		{
			[Token(Token = "0x6000336")]
			[Address(RVA = "0x21B56BC", Offset = "0x21B56BC", VA = "0x21B56BC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0x21B5648", Offset = "0x21B5648", VA = "0x21B5648")]
		static PlatformWindows()
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0x21B5704", Offset = "0x21B5704", VA = "0x21B5704", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0x21B5768", Offset = "0x21B5768", VA = "0x21B5768", Slot = "14")]
		public override string GetPluginPath(string pluginName)
		{
			return null;
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0x21B57BC", Offset = "0x21B57BC", VA = "0x21B57BC")]
		public PlatformWindows()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000065")]
	public struct AutomatableSlots
	{
		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float slot00;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float slot01;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float slot02;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float slot03;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float slot04;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float slot05;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float slot06;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float slot07;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float slot08;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slot09;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float slot10;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slot11;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float slot12;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float slot13;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float slot14;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float slot15;

		[Token(Token = "0x40002D8")]
		public const int Count = 16;

		[Token(Token = "0x600033A")]
		[Address(RVA = "0x21B0D7C", Offset = "0x21B0D7C", VA = "0x21B0D7C")]
		public float GetValue(int index)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000066")]
	public class BankRefAttribute : PropertyAttribute
	{
		[Token(Token = "0x600033B")]
		[Address(RVA = "0x21B10A0", Offset = "0x21B10A0", VA = "0x21B10A0")]
		public BankRefAttribute()
		{
		}
	}
	[Token(Token = "0x2000067")]
	public abstract class EventHandler : MonoBehaviour
	{
		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string CollisionTag;

		[Token(Token = "0x600033C")]
		[Address(RVA = "0x21B1164", Offset = "0x21B1164", VA = "0x21B1164")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x21B1174", Offset = "0x21B1174", VA = "0x21B1174")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0x21B1184", Offset = "0x21B1184", VA = "0x21B1184")]
		private void OnCollisionEnter()
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x21B1194", Offset = "0x21B1194", VA = "0x21B1194")]
		private void OnCollisionExit()
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x21B11A4", Offset = "0x21B11A4", VA = "0x21B11A4")]
		private void OnCollisionEnter2D()
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x21B11B4", Offset = "0x21B11B4", VA = "0x21B11B4")]
		private void OnCollisionExit2D()
		{
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0x21B11C4", Offset = "0x21B11C4", VA = "0x21B11C4")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x21B11D4", Offset = "0x21B11D4", VA = "0x21B11D4")]
		private void OnMouseExit()
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x21B11E4", Offset = "0x21B11E4", VA = "0x21B11E4")]
		private void OnMouseDown()
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0x21B11F4", Offset = "0x21B11F4", VA = "0x21B11F4")]
		private void OnMouseUp()
		{
		}

		[Token(Token = "0x6000346")]
		protected abstract void HandleGameEvent(EmitterGameEvent gameEvent);

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x21B1204", Offset = "0x21B1204", VA = "0x21B1204")]
		protected EventHandler()
		{
		}
	}
	[Token(Token = "0x2000068")]
	public class EventRefAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000348")]
		[Address(RVA = "0x21B13EC", Offset = "0x21B13EC", VA = "0x21B13EC")]
		public EventRefAttribute()
		{
		}
	}
	[Token(Token = "0x2000069")]
	public class FMODRuntimeManagerOnGUIHelper : MonoBehaviour
	{
		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RuntimeManager TargetRuntimeManager;

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x21B13F4", Offset = "0x21B13F4", VA = "0x21B13F4")]
		public FMODRuntimeManagerOnGUIHelper()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006A")]
	public class ParamRef
	{
		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Value;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PARAMETER_ID ID;

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x21B1694", Offset = "0x21B1694", VA = "0x21B1694")]
		public ParamRef()
		{
		}
	}
	[Token(Token = "0x200006B")]
	public class ParamRefAttribute : PropertyAttribute
	{
		[Token(Token = "0x600034B")]
		[Address(RVA = "0x21B169C", Offset = "0x21B169C", VA = "0x21B169C")]
		public ParamRefAttribute()
		{
		}
	}
	[Token(Token = "0x200006C")]
	public class PlatformCallbackHandler : ScriptableObject
	{
		[Token(Token = "0x600034C")]
		[Address(RVA = "0x21B42FC", Offset = "0x21B42FC", VA = "0x21B42FC", Slot = "4")]
		public virtual void PreInitialize(FMOD.Studio.System system, Action<RESULT, string> reportResult)
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x21B4300", Offset = "0x21B4300", VA = "0x21B4300")]
		public PlatformCallbackHandler()
		{
		}
	}
	[Token(Token = "0x200006D")]
	public abstract class Platform : ScriptableObject
	{
		[Token(Token = "0x20001FA")]
		public class Property<T>
		{
			[Token(Token = "0x4000DAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T Value;

			[Token(Token = "0x4000DAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool HasValue;

			[Token(Token = "0x6000E3C")]
			public Property()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001FB")]
		public class PropertyBool : Property<TriStateBool>
		{
			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0x21B3828", Offset = "0x21B3828", VA = "0x21B3828")]
			public PropertyBool()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001FC")]
		public class PropertyInt : Property<int>
		{
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0x21B38C8", Offset = "0x21B38C8", VA = "0x21B38C8")]
			public PropertyInt()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001FD")]
		public class PropertySpeakerMode : Property<SPEAKERMODE>
		{
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0x21B3918", Offset = "0x21B3918", VA = "0x21B3918")]
			public PropertySpeakerMode()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001FE")]
		public class PropertyString : Property<string>
		{
			[Token(Token = "0x6000E40")]
			[Address(RVA = "0x21B3968", Offset = "0x21B3968", VA = "0x21B3968")]
			public PropertyString()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001FF")]
		public class PropertyStringList : Property<List<string>>
		{
			[Token(Token = "0x6000E41")]
			[Address(RVA = "0x21B39B8", Offset = "0x21B39B8", VA = "0x21B39B8")]
			public PropertyStringList()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000200")]
		public class PropertyCallbackHandler : Property<PlatformCallbackHandler>
		{
			[Token(Token = "0x6000E42")]
			[Address(RVA = "0x21B3878", Offset = "0x21B3878", VA = "0x21B3878")]
			public PropertyCallbackHandler()
			{
			}
		}

		[Token(Token = "0x2000201")]
		public interface PropertyOverrideControl
		{
			[Token(Token = "0x6000E43")]
			bool HasValue(Platform platform);

			[Token(Token = "0x6000E44")]
			void Clear(Platform platform);
		}

		[Token(Token = "0x2000202")]
		public struct PropertyAccessor<T> : PropertyOverrideControl
		{
			[Token(Token = "0x4000DAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<PropertyStorage, Property<T>> Getter;

			[Token(Token = "0x4000DAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly T DefaultValue;

			[Token(Token = "0x6000E45")]
			public PropertyAccessor(Func<PropertyStorage, Property<T>> getter, T defaultValue)
			{
			}

			[Token(Token = "0x6000E46")]
			public bool HasValue(Platform platform)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E47")]
			public T Get(Platform platform)
			{
				return (T)null;
			}

			[Token(Token = "0x6000E48")]
			public void Set(Platform platform, T value)
			{
			}

			[Token(Token = "0x6000E49")]
			public void Clear(Platform platform)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000203")]
		public class PropertyStorage
		{
			[Token(Token = "0x4000DAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PropertyBool LiveUpdate;

			[Token(Token = "0x4000DAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PropertyInt LiveUpdatePort;

			[Token(Token = "0x4000DB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PropertyBool Overlay;

			[Token(Token = "0x4000DB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PropertyBool Logging;

			[Token(Token = "0x4000DB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PropertyInt SampleRate;

			[Token(Token = "0x4000DB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public PropertyString BuildDirectory;

			[Token(Token = "0x4000DB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public PropertySpeakerMode SpeakerMode;

			[Token(Token = "0x4000DB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public PropertyInt VirtualChannelCount;

			[Token(Token = "0x4000DB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public PropertyInt RealChannelCount;

			[Token(Token = "0x4000DB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public PropertyInt DSPBufferLength;

			[Token(Token = "0x4000DB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public PropertyInt DSPBufferCount;

			[Token(Token = "0x4000DB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public PropertyStringList Plugins;

			[Token(Token = "0x4000DBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public PropertyStringList StaticPlugins;

			[Token(Token = "0x4000DBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public PropertyCallbackHandler CallbackHandler;

			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0x21B1FD0", Offset = "0x21B1FD0", VA = "0x21B1FD0")]
			public PropertyStorage()
			{
			}
		}

		[Token(Token = "0x2000204")]
		public static class PropertyAccessors
		{
			[Serializable]
			[Token(Token = "0x2000286")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3CE4", Offset = "0x12F3CE4")]
			private sealed class <>c
			{
				[Token(Token = "0x4000FEF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly <>c <>9;

				[Token(Token = "0x6000F1B")]
				[Address(RVA = "0x21B36D0", Offset = "0x21B36D0", VA = "0x21B36D0")]
				public <>c()
				{
				}

				[Token(Token = "0x6000F1C")]
				[Address(RVA = "0x21B36D8", Offset = "0x21B36D8", VA = "0x21B36D8")]
				internal Property<TriStateBool> <.cctor>b__14_0(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F1D")]
				[Address(RVA = "0x21B36F0", Offset = "0x21B36F0", VA = "0x21B36F0")]
				internal Property<int> <.cctor>b__14_1(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F1E")]
				[Address(RVA = "0x21B3708", Offset = "0x21B3708", VA = "0x21B3708")]
				internal Property<TriStateBool> <.cctor>b__14_2(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F1F")]
				[Address(RVA = "0x21B3720", Offset = "0x21B3720", VA = "0x21B3720")]
				internal Property<TriStateBool> <.cctor>b__14_3(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F20")]
				[Address(RVA = "0x21B3738", Offset = "0x21B3738", VA = "0x21B3738")]
				internal Property<int> <.cctor>b__14_4(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F21")]
				[Address(RVA = "0x21B3750", Offset = "0x21B3750", VA = "0x21B3750")]
				internal Property<string> <.cctor>b__14_5(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F22")]
				[Address(RVA = "0x21B3768", Offset = "0x21B3768", VA = "0x21B3768")]
				internal Property<SPEAKERMODE> <.cctor>b__14_6(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F23")]
				[Address(RVA = "0x21B3780", Offset = "0x21B3780", VA = "0x21B3780")]
				internal Property<int> <.cctor>b__14_7(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F24")]
				[Address(RVA = "0x21B3798", Offset = "0x21B3798", VA = "0x21B3798")]
				internal Property<int> <.cctor>b__14_8(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F25")]
				[Address(RVA = "0x21B37B0", Offset = "0x21B37B0", VA = "0x21B37B0")]
				internal Property<int> <.cctor>b__14_9(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F26")]
				[Address(RVA = "0x21B37C8", Offset = "0x21B37C8", VA = "0x21B37C8")]
				internal Property<int> <.cctor>b__14_10(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F27")]
				[Address(RVA = "0x21B37E0", Offset = "0x21B37E0", VA = "0x21B37E0")]
				internal Property<List<string>> <.cctor>b__14_11(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F28")]
				[Address(RVA = "0x21B37F8", Offset = "0x21B37F8", VA = "0x21B37F8")]
				internal Property<List<string>> <.cctor>b__14_12(PropertyStorage properties)
				{
					return null;
				}

				[Token(Token = "0x6000F29")]
				[Address(RVA = "0x21B3810", Offset = "0x21B3810", VA = "0x21B3810")]
				internal Property<PlatformCallbackHandler> <.cctor>b__14_13(PropertyStorage properties)
				{
					return null;
				}
			}

			[Token(Token = "0x4000DBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly PropertyAccessor<TriStateBool> LiveUpdate;

			[Token(Token = "0x4000DBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static readonly PropertyAccessor<int> LiveUpdatePort;

			[Token(Token = "0x4000DBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static readonly PropertyAccessor<TriStateBool> Overlay;

			[Token(Token = "0x4000DBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static readonly PropertyAccessor<TriStateBool> Logging;

			[Token(Token = "0x4000DC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static readonly PropertyAccessor<int> SampleRate;

			[Token(Token = "0x4000DC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static readonly PropertyAccessor<string> BuildDirectory;

			[Token(Token = "0x4000DC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public static readonly PropertyAccessor<SPEAKERMODE> SpeakerMode;

			[Token(Token = "0x4000DC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public static readonly PropertyAccessor<int> VirtualChannelCount;

			[Token(Token = "0x4000DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public static readonly PropertyAccessor<int> RealChannelCount;

			[Token(Token = "0x4000DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public static readonly PropertyAccessor<int> DSPBufferLength;

			[Token(Token = "0x4000DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public static readonly PropertyAccessor<int> DSPBufferCount;

			[Token(Token = "0x4000DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public static readonly PropertyAccessor<List<string>> Plugins;

			[Token(Token = "0x4000DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public static readonly PropertyAccessor<List<string>> StaticPlugins;

			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public static readonly PropertyAccessor<PlatformCallbackHandler> CallbackHandler;
		}

		[Serializable]
		[Token(Token = "0x2000205")]
		public class PropertyThreadAffinityList : Property<List<ThreadAffinityGroup>>
		{
			[Token(Token = "0x6000E4C")]
			[Address(RVA = "0x21B2F3C", Offset = "0x21B2F3C", VA = "0x21B2F3C")]
			public PropertyThreadAffinityList()
			{
			}
		}

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string identifier;

		[Token(Token = "0x40002DF")]
		public const float DefaultPriority = 0f;

		[Token(Token = "0x40002E0")]
		public const string RegisterStaticPluginsClassName = "StaticPluginManager";

		[Token(Token = "0x40002E1")]
		public const string RegisterStaticPluginsFunctionName = "Register";

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string parentIdentifier;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool active;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected PropertyStorage Properties;

		[NonSerialized]
		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Platform Parent;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public string outputType;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ThreadAffinityGroup> StaticThreadAffinities;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private PropertyThreadAffinityList threadAffinities;

		[Token(Token = "0x17000043")]
		public string Identifier
		{
			[Token(Token = "0x600034E")]
			[Address(RVA = "0x21B16A4", Offset = "0x21B16A4", VA = "0x21B16A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600034F")]
			[Address(RVA = "0x21B16AC", Offset = "0x21B16AC", VA = "0x21B16AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000044")]
		public abstract string DisplayName
		{
			[Token(Token = "0x6000350")]
			get;
		}

		[Token(Token = "0x17000045")]
		public virtual float Priority
		{
			[Token(Token = "0x6000352")]
			[Address(RVA = "0x21B16B4", Offset = "0x21B16B4", VA = "0x21B16B4", Slot = "6")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000046")]
		public virtual bool MatchesCurrentEnvironment
		{
			[Token(Token = "0x6000353")]
			[Address(RVA = "0x21B16BC", Offset = "0x21B16BC", VA = "0x21B16BC", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000047")]
		public virtual bool IsIntrinsic
		{
			[Token(Token = "0x6000354")]
			[Address(RVA = "0x21B16C4", Offset = "0x21B16C4", VA = "0x21B16C4", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000048")]
		public string ParentIdentifier
		{
			[Token(Token = "0x6000362")]
			[Address(RVA = "0x21B237C", Offset = "0x21B237C", VA = "0x21B237C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000363")]
			[Address(RVA = "0x21B2384", Offset = "0x21B2384", VA = "0x21B2384")]
			set
			{
			}
		}

		[Token(Token = "0x17000049")]
		public bool IsLiveUpdateEnabled
		{
			[Token(Token = "0x6000364")]
			[Address(RVA = "0x21B238C", Offset = "0x21B238C", VA = "0x21B238C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004A")]
		public bool IsOverlayEnabled
		{
			[Token(Token = "0x6000365")]
			[Address(RVA = "0x21B243C", Offset = "0x21B243C", VA = "0x21B243C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004B")]
		public bool Active
		{
			[Token(Token = "0x6000366")]
			[Address(RVA = "0x21B24EC", Offset = "0x21B24EC", VA = "0x21B24EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004C")]
		public bool HasAnyOverriddenProperties
		{
			[Token(Token = "0x6000367")]
			[Address(RVA = "0x21B24F4", Offset = "0x21B24F4", VA = "0x21B24F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004D")]
		public TriStateBool LiveUpdate
		{
			[Token(Token = "0x6000368")]
			[Address(RVA = "0x21B23A8", Offset = "0x21B23A8", VA = "0x21B23A8")]
			get
			{
				return default(TriStateBool);
			}
		}

		[Token(Token = "0x1700004E")]
		public int LiveUpdatePort
		{
			[Token(Token = "0x6000369")]
			[Address(RVA = "0x21B25FC", Offset = "0x21B25FC", VA = "0x21B25FC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004F")]
		public TriStateBool Overlay
		{
			[Token(Token = "0x600036A")]
			[Address(RVA = "0x21B2458", Offset = "0x21B2458", VA = "0x21B2458")]
			get
			{
				return default(TriStateBool);
			}
		}

		[Token(Token = "0x17000050")]
		public TriStateBool Logging
		{
			[Token(Token = "0x600036B")]
			[Address(RVA = "0x21B2690", Offset = "0x21B2690", VA = "0x21B2690")]
			get
			{
				return default(TriStateBool);
			}
		}

		[Token(Token = "0x17000051")]
		public int SampleRate
		{
			[Token(Token = "0x600036C")]
			[Address(RVA = "0x21B2724", Offset = "0x21B2724", VA = "0x21B2724")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000052")]
		public string BuildDirectory
		{
			[Token(Token = "0x600036D")]
			[Address(RVA = "0x21B27B8", Offset = "0x21B27B8", VA = "0x21B27B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		public SPEAKERMODE SpeakerMode
		{
			[Token(Token = "0x600036E")]
			[Address(RVA = "0x21B284C", Offset = "0x21B284C", VA = "0x21B284C")]
			get
			{
				return default(SPEAKERMODE);
			}
		}

		[Token(Token = "0x17000054")]
		public int VirtualChannelCount
		{
			[Token(Token = "0x600036F")]
			[Address(RVA = "0x21B28E0", Offset = "0x21B28E0", VA = "0x21B28E0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000055")]
		public int RealChannelCount
		{
			[Token(Token = "0x6000370")]
			[Address(RVA = "0x21B2974", Offset = "0x21B2974", VA = "0x21B2974")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000056")]
		public int DSPBufferLength
		{
			[Token(Token = "0x6000371")]
			[Address(RVA = "0x21B2A08", Offset = "0x21B2A08", VA = "0x21B2A08")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000057")]
		public int DSPBufferCount
		{
			[Token(Token = "0x6000372")]
			[Address(RVA = "0x21B2A9C", Offset = "0x21B2A9C", VA = "0x21B2A9C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000058")]
		public List<string> Plugins
		{
			[Token(Token = "0x6000373")]
			[Address(RVA = "0x21B1A1C", Offset = "0x21B1A1C", VA = "0x21B1A1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		public List<string> StaticPlugins
		{
			[Token(Token = "0x6000374")]
			[Address(RVA = "0x21B1EB0", Offset = "0x21B1EB0", VA = "0x21B1EB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005A")]
		public PlatformCallbackHandler CallbackHandler
		{
			[Token(Token = "0x6000375")]
			[Address(RVA = "0x21B2B30", Offset = "0x21B2B30", VA = "0x21B2B30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005B")]
		public virtual List<ThreadAffinityGroup> DefaultThreadAffinities
		{
			[Token(Token = "0x6000378")]
			[Address(RVA = "0x21B2E00", Offset = "0x21B2E00", VA = "0x21B2E00", Slot = "20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005C")]
		public IEnumerable<ThreadAffinityGroup> ThreadAffinities
		{
			[Token(Token = "0x6000379")]
			[Address(RVA = "0x21B2E68", Offset = "0x21B2E68", VA = "0x21B2E68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		public PropertyThreadAffinityList ThreadAffinitiesProperty
		{
			[Token(Token = "0x600037A")]
			[Address(RVA = "0x21B2E9C", Offset = "0x21B2E9C", VA = "0x21B2E9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000351")]
		public abstract void DeclareUnityMappings(Settings settings);

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x21B16CC", Offset = "0x21B16CC", VA = "0x21B16CC", Slot = "9")]
		public virtual void PreSystemCreate(Action<RESULT, string> reportResult)
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x21B16D0", Offset = "0x21B16D0", VA = "0x21B16D0", Slot = "10")]
		public virtual void PreInitialize(FMOD.Studio.System studioSystem)
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x21B16D4", Offset = "0x21B16D4", VA = "0x21B16D4", Slot = "11")]
		public virtual string GetBankFolder()
		{
			return null;
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x21B16DC", Offset = "0x21B16DC", VA = "0x21B16DC", Slot = "12")]
		protected virtual string GetPluginBasePath()
		{
			return null;
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x21B1738", Offset = "0x21B1738", VA = "0x21B1738", Slot = "13")]
		protected virtual string GetEditorPluginBasePath()
		{
			return null;
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x21B17A0", Offset = "0x21B17A0", VA = "0x21B17A0", Slot = "14")]
		public virtual string GetPluginPath(string pluginName)
		{
			return null;
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x21B1828", Offset = "0x21B1828", VA = "0x21B1828", Slot = "15")]
		public virtual void LoadPlugins(FMOD.System coreSystem, Action<RESULT, string> reportResult)
		{
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x21B187C", Offset = "0x21B187C", VA = "0x21B187C", Slot = "16")]
		public virtual void LoadDynamicPlugins(FMOD.System coreSystem, Action<RESULT, string> reportResult)
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x21B1AB0", Offset = "0x21B1AB0", VA = "0x21B1AB0", Slot = "17")]
		public virtual void LoadStaticPlugins(FMOD.System coreSystem, Action<RESULT, string> reportResult)
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x21B1F44", Offset = "0x21B1F44", VA = "0x21B1F44")]
		public void AffirmProperties()
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x21B2210", Offset = "0x21B2210", VA = "0x21B2210")]
		public void ClearProperties()
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x21B2284", Offset = "0x21B2284", VA = "0x21B2284", Slot = "18")]
		public virtual void InitializeProperties()
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x21B22F8", Offset = "0x21B22F8", VA = "0x21B22F8", Slot = "19")]
		public virtual void EnsurePropertiesAreValid()
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x21B2BC4", Offset = "0x21B2BC4", VA = "0x21B2BC4")]
		public bool InheritsFrom(Platform platform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x21B2CA0", Offset = "0x21B2CA0", VA = "0x21B2CA0")]
		public OUTPUTTYPE GetOutputType()
		{
			return default(OUTPUTTYPE);
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0x21B2EA4", Offset = "0x21B2EA4", VA = "0x21B2EA4")]
		protected Platform()
		{
		}
	}
	[Token(Token = "0x200006E")]
	public class PlatformDefault : Platform
	{
		[Token(Token = "0x40002E9")]
		public const string ConstIdentifier = "default";

		[Token(Token = "0x1700005E")]
		public override string DisplayName
		{
			[Token(Token = "0x600037E")]
			[Address(RVA = "0x21B4384", Offset = "0x21B4384", VA = "0x21B4384", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005F")]
		public override bool IsIntrinsic
		{
			[Token(Token = "0x6000380")]
			[Address(RVA = "0x21B43D0", Offset = "0x21B43D0", VA = "0x21B43D0", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0x21B4308", Offset = "0x21B4308", VA = "0x21B4308")]
		public PlatformDefault()
		{
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0x21B43CC", Offset = "0x21B43CC", VA = "0x21B43CC", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0x21B43D8", Offset = "0x21B43D8", VA = "0x21B43D8", Slot = "18")]
		public override void InitializeProperties()
		{
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0x21B44E4", Offset = "0x21B44E4", VA = "0x21B44E4", Slot = "19")]
		public override void EnsurePropertiesAreValid()
		{
		}
	}
	[Token(Token = "0x200006F")]
	public class PlatformGroup : Platform
	{
		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public string displayName;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Legacy.Platform legacyIdentifier;

		[Token(Token = "0x17000060")]
		public override string DisplayName
		{
			[Token(Token = "0x6000383")]
			[Address(RVA = "0x21B45B4", Offset = "0x21B45B4", VA = "0x21B45B4", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0x21B45BC", Offset = "0x21B45BC", VA = "0x21B45BC", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0x21B45C0", Offset = "0x21B45C0", VA = "0x21B45C0")]
		public PlatformGroup()
		{
		}
	}
	[Token(Token = "0x2000070")]
	public class PlatformMobileHigh : PlatformMobileLow
	{
		[Token(Token = "0x17000061")]
		public override string DisplayName
		{
			[Token(Token = "0x6000387")]
			[Address(RVA = "0x21B4BE4", Offset = "0x21B4BE4", VA = "0x21B4BE4", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000062")]
		public override float Priority
		{
			[Token(Token = "0x6000388")]
			[Address(RVA = "0x21B4C2C", Offset = "0x21B4C2C", VA = "0x21B4C2C", Slot = "6")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000063")]
		public override bool MatchesCurrentEnvironment
		{
			[Token(Token = "0x6000389")]
			[Address(RVA = "0x21B4C3C", Offset = "0x21B4C3C", VA = "0x21B4C3C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0x21B4B70", Offset = "0x21B4B70", VA = "0x21B4B70")]
		static PlatformMobileHigh()
		{
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0x21B4E7C", Offset = "0x21B4E7C", VA = "0x21B4E7C")]
		public PlatformMobileHigh()
		{
		}
	}
	[Token(Token = "0x2000071")]
	public class PlatformMobileLow : Platform
	{
		[Token(Token = "0x17000064")]
		public override string DisplayName
		{
			[Token(Token = "0x600038C")]
			[Address(RVA = "0x21B4FB8", Offset = "0x21B4FB8", VA = "0x21B4FB8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		public override float Priority
		{
			[Token(Token = "0x600038E")]
			[Address(RVA = "0x21B4C34", Offset = "0x21B4C34", VA = "0x21B4C34", Slot = "6")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000066")]
		public override bool MatchesCurrentEnvironment
		{
			[Token(Token = "0x600038F")]
			[Address(RVA = "0x21B5044", Offset = "0x21B5044", VA = "0x21B5044", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x21B4F44", Offset = "0x21B4F44", VA = "0x21B4F44")]
		static PlatformMobileLow()
		{
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0x21B5000", Offset = "0x21B5000", VA = "0x21B5000", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0x21B504C", Offset = "0x21B504C", VA = "0x21B504C", Slot = "11")]
		public override string GetBankFolder()
		{
			return null;
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x21B50A8", Offset = "0x21B50A8", VA = "0x21B50A8", Slot = "14")]
		public override string GetPluginPath(string pluginName)
		{
			return null;
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x21B4EE0", Offset = "0x21B4EE0", VA = "0x21B4EE0")]
		public PlatformMobileLow()
		{
		}
	}
	[Token(Token = "0x2000072")]
	public class PlatformPlayInEditor : Platform
	{
		[Token(Token = "0x17000067")]
		public override string DisplayName
		{
			[Token(Token = "0x6000394")]
			[Address(RVA = "0x21B5188", Offset = "0x21B5188", VA = "0x21B5188", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000068")]
		public override bool IsIntrinsic
		{
			[Token(Token = "0x6000396")]
			[Address(RVA = "0x21B5224", Offset = "0x21B5224", VA = "0x21B5224", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x21B510C", Offset = "0x21B510C", VA = "0x21B510C")]
		public PlatformPlayInEditor()
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x21B51D0", Offset = "0x21B51D0", VA = "0x21B51D0", Slot = "5")]
		public override void DeclareUnityMappings(Settings settings)
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x21B522C", Offset = "0x21B522C", VA = "0x21B522C", Slot = "11")]
		public override string GetBankFolder()
		{
			return null;
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x21B5344", Offset = "0x21B5344", VA = "0x21B5344", Slot = "17")]
		public override void LoadStaticPlugins(FMOD.System coreSystem, Action<RESULT, string> reportResult)
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x21B5348", Offset = "0x21B5348", VA = "0x21B5348", Slot = "18")]
		public override void InitializeProperties()
		{
		}
	}
	[Token(Token = "0x2000073")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F33E8", Offset = "0x12F33E8")]
	public class RuntimeManager : MonoBehaviour
	{
		[Token(Token = "0x2000206")]
		private struct LoadedBank
		{
			[Token(Token = "0x4000DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Bank Bank;

			[Token(Token = "0x4000DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int RefCount;
		}

		[Token(Token = "0x2000207")]
		private class GuidComparer : IEqualityComparer<Guid>
		{
			[Token(Token = "0x6000E4D")]
			[Address(RVA = "0x21BC5F4", Offset = "0x21BC5F4", VA = "0x21BC5F4", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Guid>.Equals(Guid x, Guid y)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0x21BC628", Offset = "0x21BC628", VA = "0x21BC628", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Guid>.GetHashCode(Guid obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000E4F")]
			[Address(RVA = "0x21BBC04", Offset = "0x21BBC04", VA = "0x21BBC04")]
			public GuidComparer()
			{
			}
		}

		[Token(Token = "0x2000208")]
		private class AttachedInstance
		{
			[Token(Token = "0x4000DCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EventInstance instance;

			[Token(Token = "0x4000DCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform transform;

			[Token(Token = "0x6000E50")]
			[Address(RVA = "0x21B90B8", Offset = "0x21B90B8", VA = "0x21B90B8")]
			public AttachedInstance()
			{
			}
		}

		[Token(Token = "0x2000209")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3A04", Offset = "0x12F3A04")]
		private sealed class <>c__DisplayClass35_0
		{
			[Token(Token = "0x4000DCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EventInstance instance;

			[Token(Token = "0x6000E51")]
			[Address(RVA = "0x21B90B0", Offset = "0x21B90B0", VA = "0x21B90B0")]
			public <>c__DisplayClass35_0()
			{
			}

			[Token(Token = "0x6000E52")]
			[Address(RVA = "0x21BBCA8", Offset = "0x21BBCA8", VA = "0x21BBCA8")]
			internal bool <AttachInstanceToGameObject>b__0(AttachedInstance x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200020A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3A14", Offset = "0x12F3A14")]
		private sealed class <loadFromWeb>d__49 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string bankPath;

			[Token(Token = "0x4000DD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RuntimeManager <>4__this;

			[Token(Token = "0x4000DD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string bankName;

			[Token(Token = "0x4000DD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool loadSamples;

			[Token(Token = "0x4000DD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x17000149")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E56")]
				[Address(RVA = "0x21BC584", Offset = "0x21BC584", VA = "0x21BC584", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E58")]
				[Address(RVA = "0x21BC5EC", Offset = "0x21BC5EC", VA = "0x21BC5EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E53")]
			[Address(RVA = "0x21B9E4C", Offset = "0x21B9E4C", VA = "0x21B9E4C")]
			[DebuggerHidden]
			public <loadFromWeb>d__49(int <>1__state)
			{
			}

			[Token(Token = "0x6000E54")]
			[Address(RVA = "0x21BC2A8", Offset = "0x21BC2A8", VA = "0x21BC2A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E55")]
			[Address(RVA = "0x21BC2AC", Offset = "0x21BC2AC", VA = "0x21BC2AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E57")]
			[Address(RVA = "0x21BC58C", Offset = "0x21BC58C", VA = "0x21BC58C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200020B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3A24", Offset = "0x12F3A24")]
		private sealed class <BanksToLoad>d__54 : IEnumerable<string>, IEnumerable, IEnumerator<string>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private string <>2__current;

			[Token(Token = "0x4000DD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000DD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Settings fmodSettings;

			[Token(Token = "0x4000DDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Settings <>3__fmodSettings;

			[Token(Token = "0x4000DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<string>.Enumerator <>7__wrap1;

			[Token(Token = "0x4000DDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private string <masterBankFileName>5__3;

			[Token(Token = "0x1700014B")]
			private string System.Collections.Generic.IEnumerator<System.String>.Current
			{
				[Token(Token = "0x6000E5F")]
				[Address(RVA = "0x21BC180", Offset = "0x21BC180", VA = "0x21BC180", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E61")]
				[Address(RVA = "0x21BC1E8", Offset = "0x21BC1E8", VA = "0x21BC1E8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E59")]
			[Address(RVA = "0x21BA58C", Offset = "0x21BA58C", VA = "0x21BA58C")]
			[DebuggerHidden]
			public <BanksToLoad>d__54(int <>1__state)
			{
			}

			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0x21BBCCC", Offset = "0x21BBCCC", VA = "0x21BBCCC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0x21BBE28", Offset = "0x21BBE28", VA = "0x21BBE28", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0x21BBD20", Offset = "0x21BBD20", VA = "0x21BBD20")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0x21BBD78", Offset = "0x21BBD78", VA = "0x21BBD78")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0x21BBDD0", Offset = "0x21BBDD0", VA = "0x21BBDD0")]
			private void <>m__Finally3()
			{
			}

			[Token(Token = "0x6000E60")]
			[Address(RVA = "0x21BC188", Offset = "0x21BC188", VA = "0x21BC188", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000E62")]
			[Address(RVA = "0x21BC1F0", Offset = "0x21BC1F0", VA = "0x21BC1F0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000E63")]
			[Address(RVA = "0x21BC2A4", Offset = "0x21BC2A4", VA = "0x21BC2A4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SystemNotInitializedException initException;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static RuntimeManager instance;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Platform currentPlatform;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DEBUG_CALLBACK debugCallback;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FMOD.SYSTEM_CALLBACK errorCallback;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private FMOD.Studio.System studioSystem;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FMOD.System coreSystem;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DSP mixerHead;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<string, LoadedBank> loadedBanks;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<string> sampleLoadRequests;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Guid, EventDescription> cachedDescriptions;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<StudioEventEmitter> activeEmitters;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<AttachedInstance> attachedInstances;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool listenerWarningIssued;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool isOverlayEnabled;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FMODRuntimeManagerOnGUIHelper overlayDrawer;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rect windowRect;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string lastDebugText;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastDebugUpdate;

		[Token(Token = "0x40002FF")]
		public const string BankStubPrefix = "bank stub:";

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static List<StudioListener> Listeners;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static int numListeners;

		[Token(Token = "0x17000069")]
		private static RuntimeManager Instance
		{
			[Token(Token = "0x600039C")]
			[Address(RVA = "0x21B5CE8", Offset = "0x21B5CE8", VA = "0x21B5CE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006A")]
		public static FMOD.Studio.System StudioSystem
		{
			[Token(Token = "0x600039D")]
			[Address(RVA = "0x21B6F94", Offset = "0x21B6F94", VA = "0x21B6F94")]
			get
			{
				return default(FMOD.Studio.System);
			}
		}

		[Token(Token = "0x1700006B")]
		public static FMOD.System CoreSystem
		{
			[Token(Token = "0x600039E")]
			[Address(RVA = "0x21B7000", Offset = "0x21B7000", VA = "0x21B7000")]
			get
			{
				return default(FMOD.System);
			}
		}

		[Token(Token = "0x1700006C")]
		public static bool IsInitialized
		{
			[Token(Token = "0x60003C9")]
			[Address(RVA = "0x21BB8E8", Offset = "0x21BB8E8", VA = "0x21BB8E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700006D")]
		public static bool HasBanksLoaded
		{
			[Token(Token = "0x60003CA")]
			[Address(RVA = "0x21BB79C", Offset = "0x21BB79C", VA = "0x21BB79C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x21B5820", Offset = "0x21B5820", VA = "0x21B5820")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x12F5B14", Offset = "0x12F5B14")]
		private static RESULT DEBUG_CALLBACK(DEBUG_FLAGS flags, IntPtr filePtr, int line, IntPtr funcPtr, IntPtr messagePtr)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x21B59E4", Offset = "0x21B59E4", VA = "0x21B59E4")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x12F5B78", Offset = "0x12F5B78")]
		private static RESULT ERROR_CALLBACK(IntPtr system, FMOD.SYSTEM_CALLBACK_TYPE type, IntPtr commanddata1, IntPtr commanddata2, IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x21B706C", Offset = "0x21B706C", VA = "0x21B706C")]
		private void CheckInitResult(RESULT result, string cause)
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x21B70FC", Offset = "0x21B70FC", VA = "0x21B70FC")]
		private void ReleaseStudioSystem()
		{
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x21B65D8", Offset = "0x21B65D8", VA = "0x21B65D8")]
		private RESULT Initialize()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x21B72A4", Offset = "0x21B72A4", VA = "0x21B72A4")]
		private static void SetThreadAffinities(Platform platform)
		{
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x21B7AF4", Offset = "0x21B7AF4", VA = "0x21B7AF4")]
		public static int AddListener(StudioListener listener)
		{
			return default(int);
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x21B7EFC", Offset = "0x21B7EFC", VA = "0x21B7EFC")]
		public static bool RemoveListener(StudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x21B8220", Offset = "0x21B8220", VA = "0x21B8220")]
		private void Update()
		{
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x21B8978", Offset = "0x21B8978", VA = "0x21B8978")]
		public static void RegisterActiveEmitter(StudioEventEmitter emitter)
		{
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x21B8A48", Offset = "0x21B8A48", VA = "0x21B8A48")]
		public static void DeregisterActiveEmitter(StudioEventEmitter emitter)
		{
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x21B86C0", Offset = "0x21B86C0", VA = "0x21B86C0")]
		public static void UpdateActiveEmitter(StudioEventEmitter emitter, bool force = false)
		{
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x21B8F14", Offset = "0x21B8F14", VA = "0x21B8F14")]
		public static void AttachInstanceToGameObject(EventInstance instance, Transform transform)
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x21B90C0", Offset = "0x21B90C0", VA = "0x21B90C0")]
		public static void DetachInstanceFromGameObject(EventInstance instance)
		{
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x21B9200", Offset = "0x21B9200", VA = "0x21B9200")]
		public void ExecuteOnGUI()
		{
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x21B930C", Offset = "0x21B930C", VA = "0x21B930C")]
		private void Start()
		{
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x21B9344", Offset = "0x21B9344", VA = "0x21B9344")]
		private void DrawDebugOverlay(int windowID)
		{
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x21B97B4", Offset = "0x21B97B4", VA = "0x21B97B4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x21B9854", Offset = "0x21B9854", VA = "0x21B9854")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x21B99C8", Offset = "0x21B99C8", VA = "0x21B99C8")]
		private void loadedBankRegister(LoadedBank loadedBank, string bankPath, string bankName, bool loadSamples, RESULT loadResult)
		{
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x21B9B3C", Offset = "0x21B9B3C", VA = "0x21B9B3C")]
		private void ExecuteSampleLoadRequestsIfReady()
		{
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x21B9D8C", Offset = "0x21B9D8C", VA = "0x21B9D8C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5BDC", Offset = "0x12F5BDC")]
		private IEnumerator loadFromWeb(string bankPath, string bankName, bool loadSamples)
		{
			return null;
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x21B9E78", Offset = "0x21B9E78", VA = "0x21B9E78")]
		public static void LoadBank(string bankName, bool loadSamples = false)
		{
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x21BA240", Offset = "0x21BA240", VA = "0x21BA240")]
		public static void LoadBank(TextAsset asset, bool loadSamples = false)
		{
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x21B7644", Offset = "0x21B7644", VA = "0x21B7644")]
		private void LoadBanks(Settings fmodSettings)
		{
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x21BA490", Offset = "0x21BA490", VA = "0x21BA490")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5C40", Offset = "0x12F5C40")]
		private IEnumerable<string> BanksToLoad(Settings fmodSettings)
		{
			return null;
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x21BA5C4", Offset = "0x21BA5C4", VA = "0x21BA5C4")]
		public static void UnloadBank(string bankName)
		{
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x21BA720", Offset = "0x21BA720", VA = "0x21BA720")]
		public static bool AnyBankLoading()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x21BA51C", Offset = "0x21BA51C", VA = "0x21BA51C")]
		public static void WaitForAllLoads()
		{
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x21BA870", Offset = "0x21BA870", VA = "0x21BA870")]
		public static Guid PathToGUID(string path)
		{
			return default(Guid);
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x21BA99C", Offset = "0x21BA99C", VA = "0x21BA99C")]
		public static EventInstance CreateInstance(string path)
		{
			return default(EventInstance);
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x21BAAAC", Offset = "0x21BAAAC", VA = "0x21BAAAC")]
		public static EventInstance CreateInstance(Guid guid)
		{
			return default(EventInstance);
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x21BAD4C", Offset = "0x21BAD4C", VA = "0x21BAD4C")]
		public static void PlayOneShot(string path, [Optional] Vector3 position)
		{
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x21BAEB0", Offset = "0x21BAEB0", VA = "0x21BAEB0")]
		public static void PlayOneShot(Guid guid, [Optional] Vector3 position)
		{
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x21BB064", Offset = "0x21BB064", VA = "0x21BB064")]
		public static void PlayOneShotAttached(string path, GameObject gameObject)
		{
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x21BB1AC", Offset = "0x21BB1AC", VA = "0x21BB1AC")]
		public static void PlayOneShotAttached(Guid guid, GameObject gameObject)
		{
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x21BB274", Offset = "0x21BB274", VA = "0x21BB274")]
		public static EventDescription GetEventDescription(string path)
		{
			return default(EventDescription);
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x21BAB48", Offset = "0x21BAB48", VA = "0x21BAB48")]
		public static EventDescription GetEventDescription(Guid guid)
		{
			return default(EventDescription);
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x21BB384", Offset = "0x21BB384", VA = "0x21BB384")]
		public static void SetListenerLocation(GameObject gameObject, [Optional] GameObject attenuationObject)
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x21BB3FC", Offset = "0x21BB3FC", VA = "0x21BB3FC")]
		public static void SetListenerLocation(int listenerIndex, GameObject gameObject, [Optional] GameObject attenuationObject)
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x21BB568", Offset = "0x21BB568", VA = "0x21BB568")]
		public static Bus GetBus(string path)
		{
			return default(Bus);
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x21BB628", Offset = "0x21BB628", VA = "0x21BB628")]
		public static VCA GetVCA(string path)
		{
			return default(VCA);
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x21B9904", Offset = "0x21B9904", VA = "0x21B9904")]
		public static void PauseAllEvents(bool paused)
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x21BB824", Offset = "0x21BB824", VA = "0x21BB824")]
		public static void MuteAllEvents(bool muted)
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x21BB9CC", Offset = "0x21BB9CC", VA = "0x21BB9CC")]
		public static bool HasBankLoaded(string loadedBank)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x21BBA50", Offset = "0x21BBA50", VA = "0x21BBA50")]
		public RuntimeManager()
		{
		}
	}
	[Token(Token = "0x2000074")]
	public class EventNotFoundException : Exception
	{
		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Guid Guid;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string Path;

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x21B1264", Offset = "0x21B1264", VA = "0x21B1264")]
		public EventNotFoundException(string path)
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x21B1318", Offset = "0x21B1318", VA = "0x21B1318")]
		public EventNotFoundException(Guid guid)
		{
		}
	}
	[Token(Token = "0x2000075")]
	public class BusNotFoundException : Exception
	{
		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string Path;

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x21B10A8", Offset = "0x21B10A8", VA = "0x21B10A8")]
		public BusNotFoundException(string path)
		{
		}
	}
	[Token(Token = "0x2000076")]
	public class VCANotFoundException : Exception
	{
		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string Path;

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x21BB6E8", Offset = "0x21BB6E8", VA = "0x21BB6E8")]
		public VCANotFoundException(string path)
		{
		}
	}
	[Token(Token = "0x2000077")]
	public class BankLoadException : Exception
	{
		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string Path;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RESULT Result;

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x21B0ED0", Offset = "0x21B0ED0", VA = "0x21B0ED0")]
		public BankLoadException(string path, RESULT result)
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x21B0FE4", Offset = "0x21B0FE4", VA = "0x21B0FE4")]
		public BankLoadException(string path, string error)
		{
		}
	}
	[Token(Token = "0x2000078")]
	public class SystemNotInitializedException : Exception
	{
		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public RESULT Result;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string Location;

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x21B6E80", Offset = "0x21B6E80", VA = "0x21B6E80")]
		public SystemNotInitializedException(RESULT result, string location)
		{
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x21B6DFC", Offset = "0x21B6DFC", VA = "0x21B6DFC")]
		public SystemNotInitializedException(Exception inner)
		{
		}
	}
	[Token(Token = "0x2000079")]
	public enum EmitterGameEvent
	{
		[Token(Token = "0x400030B")]
		None,
		[Token(Token = "0x400030C")]
		ObjectStart,
		[Token(Token = "0x400030D")]
		ObjectDestroy,
		[Token(Token = "0x400030E")]
		TriggerEnter,
		[Token(Token = "0x400030F")]
		TriggerExit,
		[Token(Token = "0x4000310")]
		TriggerEnter2D,
		[Token(Token = "0x4000311")]
		TriggerExit2D,
		[Token(Token = "0x4000312")]
		CollisionEnter,
		[Token(Token = "0x4000313")]
		CollisionExit,
		[Token(Token = "0x4000314")]
		CollisionEnter2D,
		[Token(Token = "0x4000315")]
		CollisionExit2D,
		[Token(Token = "0x4000316")]
		ObjectEnable,
		[Token(Token = "0x4000317")]
		ObjectDisable,
		[Token(Token = "0x4000318")]
		MouseEnter,
		[Token(Token = "0x4000319")]
		MouseExit,
		[Token(Token = "0x400031A")]
		MouseDown,
		[Token(Token = "0x400031B")]
		MouseUp
	}
	[Token(Token = "0x200007A")]
	public enum LoaderGameEvent
	{
		[Token(Token = "0x400031D")]
		None,
		[Token(Token = "0x400031E")]
		ObjectStart,
		[Token(Token = "0x400031F")]
		ObjectDestroy,
		[Token(Token = "0x4000320")]
		TriggerEnter,
		[Token(Token = "0x4000321")]
		TriggerExit,
		[Token(Token = "0x4000322")]
		TriggerEnter2D,
		[Token(Token = "0x4000323")]
		TriggerExit2D,
		[Token(Token = "0x4000324")]
		ObjectEnable,
		[Token(Token = "0x4000325")]
		ObjectDisable
	}
	[Token(Token = "0x200007B")]
	public enum ThreadType
	{
		[Token(Token = "0x4000327")]
		Mixer,
		[Token(Token = "0x4000328")]
		Feeder,
		[Token(Token = "0x4000329")]
		Stream,
		[Token(Token = "0x400032A")]
		File,
		[Token(Token = "0x400032B")]
		Nonblocking,
		[Token(Token = "0x400032C")]
		Record,
		[Token(Token = "0x400032D")]
		Geometry,
		[Token(Token = "0x400032E")]
		Profiler,
		[Token(Token = "0x400032F")]
		Studio_Update,
		[Token(Token = "0x4000330")]
		Studio_Load_Bank,
		[Token(Token = "0x4000331")]
		Studio_Load_Sample,
		[Token(Token = "0x4000332")]
		Convolution_1,
		[Token(Token = "0x4000333")]
		Convolution_2
	}
	[Token(Token = "0x200007C")]
	[Flags]
	public enum ThreadAffinity : uint
	{
		[Token(Token = "0x4000335")]
		Any = 0u,
		[Token(Token = "0x4000336")]
		Core0 = 1u,
		[Token(Token = "0x4000337")]
		Core1 = 2u,
		[Token(Token = "0x4000338")]
		Core2 = 4u,
		[Token(Token = "0x4000339")]
		Core3 = 8u,
		[Token(Token = "0x400033A")]
		Core4 = 0x10u,
		[Token(Token = "0x400033B")]
		Core5 = 0x20u,
		[Token(Token = "0x400033C")]
		Core6 = 0x40u,
		[Token(Token = "0x400033D")]
		Core7 = 0x80u,
		[Token(Token = "0x400033E")]
		Core8 = 0x100u,
		[Token(Token = "0x400033F")]
		Core9 = 0x200u,
		[Token(Token = "0x4000340")]
		Core10 = 0x400u,
		[Token(Token = "0x4000341")]
		Core11 = 0x800u,
		[Token(Token = "0x4000342")]
		Core12 = 0x1000u,
		[Token(Token = "0x4000343")]
		Core13 = 0x2000u,
		[Token(Token = "0x4000344")]
		Core14 = 0x4000u,
		[Token(Token = "0x4000345")]
		Core15 = 0x8000u
	}
	[Serializable]
	[Token(Token = "0x200007D")]
	public class ThreadAffinityGroup
	{
		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ThreadType> threads;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ThreadAffinity affinity;

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x21BEEC8", Offset = "0x21BEEC8", VA = "0x21BEEC8")]
		public ThreadAffinityGroup()
		{
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x21BEF44", Offset = "0x21BEF44", VA = "0x21BEF44")]
		public ThreadAffinityGroup(ThreadAffinityGroup other)
		{
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x21BF020", Offset = "0x21BF020", VA = "0x21BF020")]
		public ThreadAffinityGroup(ThreadAffinity affinity, params ThreadType[] threads)
		{
		}
	}
	[Token(Token = "0x200007E")]
	public static class RuntimeUtils
	{
		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x21B52F4", Offset = "0x21B52F4", VA = "0x21B52F4")]
		public static string GetCommonPlatformPath(string path)
		{
			return null;
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x21BB564", Offset = "0x21BB564", VA = "0x21BB564")]
		public static VECTOR ToFMODVector(this Vector3 vec)
		{
			return default(VECTOR);
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x21BAF90", Offset = "0x21BAF90", VA = "0x21BAF90")]
		public static ATTRIBUTES_3D To3DAttributes(this Vector3 pos)
		{
			return default(ATTRIBUTES_3D);
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x21B88CC", Offset = "0x21B88CC", VA = "0x21B88CC")]
		public static ATTRIBUTES_3D To3DAttributes(this Transform transform)
		{
			return default(ATTRIBUTES_3D);
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x21BC650", Offset = "0x21BC650", VA = "0x21BC650")]
		public static ATTRIBUTES_3D To3DAttributes(this GameObject go)
		{
			return default(ATTRIBUTES_3D);
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x21B79F4", Offset = "0x21B79F4", VA = "0x21B79F4")]
		public static THREAD_TYPE ToFMODThreadType(ThreadType threadType)
		{
			return default(THREAD_TYPE);
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x21BC680", Offset = "0x21BC680", VA = "0x21BC680")]
		public static string DisplayName(this ThreadType thread)
		{
			return null;
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x21B7AEC", Offset = "0x21B7AEC", VA = "0x21B7AEC")]
		public static THREAD_AFFINITY ToFMODThreadAffinity(ThreadAffinity affinity)
		{
			return default(THREAD_AFFINITY);
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x21BC720", Offset = "0x21BC720", VA = "0x21BC720")]
		private static void SetFMODAffinityBit(ThreadAffinity affinity, ThreadAffinity mask, THREAD_AFFINITY fmodMask, ref THREAD_AFFINITY fmodAffinity)
		{
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x21B642C", Offset = "0x21B642C", VA = "0x21B642C")]
		public static void EnforceLibraryOrder()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200007F")]
	public enum ImportType
	{
		[Token(Token = "0x4000349")]
		StreamingAssets,
		[Token(Token = "0x400034A")]
		AssetBundle
	}
	[Serializable]
	[Token(Token = "0x2000080")]
	public enum BankLoadType
	{
		[Token(Token = "0x400034C")]
		All,
		[Token(Token = "0x400034D")]
		Specified,
		[Token(Token = "0x400034E")]
		None
	}
	[Serializable]
	[Token(Token = "0x2000081")]
	public enum MeterChannelOrderingType
	{
		[Token(Token = "0x4000350")]
		Standard,
		[Token(Token = "0x4000351")]
		SeparateLFE,
		[Token(Token = "0x4000352")]
		Positional
	}
	[Token(Token = "0x2000082")]
	public enum TriStateBool
	{
		[Token(Token = "0x4000354")]
		Disabled,
		[Token(Token = "0x4000355")]
		Enabled,
		[Token(Token = "0x4000356")]
		Development
	}
	[Token(Token = "0x2000083")]
	public class Settings : ScriptableObject
	{
		[Token(Token = "0x200020C")]
		public enum SharedLibraryUpdateStages
		{
			[Token(Token = "0x4000DDE")]
			DisableExistingLibraries,
			[Token(Token = "0x4000DDF")]
			RestartUnity,
			[Token(Token = "0x4000DE0")]
			CopyNewLibraries
		}

		[Token(Token = "0x200020D")]
		private struct PlatformTemplate
		{
			[Token(Token = "0x4000DE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Identifier;

			[Token(Token = "0x4000DE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Func<Platform> CreateInstance;
		}

		[Token(Token = "0x200020E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3A34", Offset = "0x12F3A34")]
		private sealed class <>c__DisplayClass62_0
		{
			[Token(Token = "0x4000DE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string identifier;

			[Token(Token = "0x6000E64")]
			[Address(RVA = "0x21BCC8C", Offset = "0x21BCC8C", VA = "0x21BCC8C")]
			public <>c__DisplayClass62_0()
			{
			}

			[Token(Token = "0x6000E65")]
			[Address(RVA = "0x21BD860", Offset = "0x21BD860", VA = "0x21BD860")]
			internal bool <RemovePlatform>b__0(Platform p)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x200020F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3A44", Offset = "0x12F3A44")]
		private sealed class <>c
		{
			[Token(Token = "0x4000DE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000DE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<Platform> <>9__71_0;

			[Token(Token = "0x4000DE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Platform, bool> <>9__83_0;

			[Token(Token = "0x4000DE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<Platform, bool> <>9__83_1;

			[Token(Token = "0x6000E67")]
			[Address(RVA = "0x21BD6FC", Offset = "0x21BD6FC", VA = "0x21BD6FC")]
			public <>c()
			{
			}

			[Token(Token = "0x6000E68")]
			[Address(RVA = "0x21BD704", Offset = "0x21BD704", VA = "0x21BD704")]
			internal int <DeclareRuntimePlatform>b__71_0(Platform a, Platform b)
			{
				return default(int);
			}

			[Token(Token = "0x6000E69")]
			[Address(RVA = "0x21BD760", Offset = "0x21BD760", VA = "0x21BD760")]
			internal bool <OnEnable>b__83_0(Platform platform)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0x21BD7E0", Offset = "0x21BD7E0", VA = "0x21BD7E0")]
			internal bool <OnEnable>b__83_1(Platform platform)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000210")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3A54", Offset = "0x12F3A54")]
		private sealed class <>c__DisplayClass80_0<T> where T : Platform
		{
			[Token(Token = "0x4000DE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string identifier;

			[Token(Token = "0x6000E6B")]
			public <>c__DisplayClass80_0()
			{
			}

			[Token(Token = "0x6000E6C")]
			internal Platform <AddPlatformTemplate>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x4000357")]
		private const string SettingsAssetName = "FMODStudioSettings";

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Settings instance;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool isInitializing;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public bool HasSourceProject;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		public bool HasPlatforms;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string sourceProjectPath;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string sourceBankPath;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public string SourceBankPathUnformatted;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public int BankRefreshCooldown;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		public bool ShowBankRefreshWindow;

		[Token(Token = "0x4000361")]
		public const int BankRefreshPrompt = -1;

		[Token(Token = "0x4000362")]
		public const int BankRefreshManual = -2;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		public bool AutomaticEventLoading;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public BankLoadType BankLoadType;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		public bool AutomaticSampleLoading;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public string EncryptionKey;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public ImportType ImportType;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		public string TargetAssetPath;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		public string TargetBankFolder;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public DEBUG_FLAGS LoggingLevel;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		public List<Legacy.PlatformIntSetting> SpeakerModeSettings;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		public List<Legacy.PlatformIntSetting> SampleRateSettings;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		public List<Legacy.PlatformBoolSetting> LiveUpdateSettings;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		public List<Legacy.PlatformBoolSetting> OverlaySettings;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		public List<Legacy.PlatformBoolSetting> LoggingSettings;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		public List<Legacy.PlatformStringSetting> BankDirectorySettings;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		public List<Legacy.PlatformIntSetting> VirtualChannelSettings;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		public List<Legacy.PlatformIntSetting> RealChannelSettings;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		public List<string> Plugins;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		public List<string> MasterBanks;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		public List<string> Banks;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		public List<string> BanksToLoad;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		public ushort LiveUpdatePort;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		[SerializeField]
		public bool EnableMemoryTracking;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		[SerializeField]
		public bool AndroidUseOBB;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		public MeterChannelOrderingType MeterChannelOrdering;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		public bool StopEventsOutsideMaxDistance;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		[SerializeField]
		public bool BoltUnitOptionsBuildPending;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		[SerializeField]
		public bool EnableErrorCallback;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		public SharedLibraryUpdateStages SharedLibraryUpdateStage;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		public double SharedLibraryTimeSinceStart;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		public bool HideSetupWizard;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private List<Platform> Platforms;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Dictionary<RuntimePlatform, List<Platform>> PlatformForRuntimePlatform;

		[NonSerialized]
		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Platform defaultPlatform;

		[NonSerialized]
		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Platform playInEditorPlatform;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<PlatformTemplate> platformTemplates;

		[NonSerialized]
		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool hasLoaded;

		[Token(Token = "0x1700006E")]
		public static Settings Instance
		{
			[Token(Token = "0x60003E3")]
			[Address(RVA = "0x21B3D70", Offset = "0x21B3D70", VA = "0x21B3D70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		public string SourceProjectPath
		{
			[Token(Token = "0x60003E4")]
			[Address(RVA = "0x21BC738", Offset = "0x21BC738", VA = "0x21BC738")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003E5")]
			[Address(RVA = "0x21BC740", Offset = "0x21BC740", VA = "0x21BC740")]
			set
			{
			}
		}

		[Token(Token = "0x17000070")]
		public string SourceBankPath
		{
			[Token(Token = "0x60003E6")]
			[Address(RVA = "0x21BC748", Offset = "0x21BC748", VA = "0x21BC748")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003E7")]
			[Address(RVA = "0x21BC750", Offset = "0x21BC750", VA = "0x21BC750")]
			set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public string TargetPath
		{
			[Token(Token = "0x60003E8")]
			[Address(RVA = "0x21BC758", Offset = "0x21BC758", VA = "0x21BC758")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		public string TargetSubFolder
		{
			[Token(Token = "0x60003E9")]
			[Address(RVA = "0x21BA224", Offset = "0x21BA224", VA = "0x21BA224")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003EA")]
			[Address(RVA = "0x21BC804", Offset = "0x21BC804", VA = "0x21BC804")]
			set
			{
			}
		}

		[Token(Token = "0x17000073")]
		public Platform DefaultPlatform
		{
			[Token(Token = "0x60003F1")]
			[Address(RVA = "0x21BCC94", Offset = "0x21BCC94", VA = "0x21BCC94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		public Platform PlayInEditorPlatform
		{
			[Token(Token = "0x60003F2")]
			[Address(RVA = "0x21BCC9C", Offset = "0x21BCC9C", VA = "0x21BCC9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x21BC820", Offset = "0x21BC820", VA = "0x21BC820")]
		public Platform FindPlatform(string identifier)
		{
			return null;
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x21BC940", Offset = "0x21BC940", VA = "0x21BC940")]
		public bool PlatformExists(string identifier)
		{
			return default(bool);
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x21BC9CC", Offset = "0x21BC9CC", VA = "0x21BC9CC")]
		public void ForEachPlatform(Action<Platform> action)
		{
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x21BCADC", Offset = "0x21BCADC", VA = "0x21BCADC")]
		public IEnumerable<Platform> EnumeratePlatforms()
		{
			return null;
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x21BCAE4", Offset = "0x21BCAE4", VA = "0x21BCAE4")]
		private void AddPlatform(Platform platform)
		{
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x21BCBBC", Offset = "0x21BCBBC", VA = "0x21BCBBC")]
		public void RemovePlatform(string identifier)
		{
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x21BCCA4", Offset = "0x21BCCA4", VA = "0x21BCCA4")]
		private void LinkPlatform(Platform platform)
		{
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x21B3AE8", Offset = "0x21B3AE8", VA = "0x21B3AE8")]
		public void DeclareRuntimePlatform(RuntimePlatform runtimePlatform, Platform platform)
		{
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x21BCCE0", Offset = "0x21BCCE0", VA = "0x21BCCE0")]
		private void LinkPlatformToParent(Platform platform)
		{
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x21B7148", Offset = "0x21B7148", VA = "0x21B7148")]
		public Platform FindCurrentPlatform()
		{
			return null;
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x21BCD5C", Offset = "0x21BCD5C", VA = "0x21BCD5C")]
		public SPEAKERMODE GetEditorSpeakerMode()
		{
			return default(SPEAKERMODE);
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x21BCD74", Offset = "0x21BCD74", VA = "0x21BCD74")]
		private Settings()
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x21BD098", Offset = "0x21BD098", VA = "0x21BD098")]
		public void AddPlatformProperties(Platform platform)
		{
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x21BCD3C", Offset = "0x21BCD3C", VA = "0x21BCD3C")]
		public void SetPlatformParent(Platform platform, Platform newParent)
		{
		}

		[Token(Token = "0x60003FB")]
		public static void AddPlatformTemplate<T>(string identifier) where T : Platform
		{
		}

		[Token(Token = "0x60003FC")]
		private static Platform CreatePlatformInstance<T>(string identifier) where T : Platform
		{
			return null;
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x21BD0D0", Offset = "0x21BD0D0", VA = "0x21BD0D0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x21BD300", Offset = "0x21BD300", VA = "0x21BD300")]
		private void PopulatePlatformsFromAsset()
		{
		}
	}
	[Token(Token = "0x2000084")]
	public static class Legacy
	{
		[Serializable]
		[Token(Token = "0x2000211")]
		public enum Platform
		{
			[Token(Token = "0x4000DEA")]
			None,
			[Token(Token = "0x4000DEB")]
			PlayInEditor,
			[Token(Token = "0x4000DEC")]
			Default,
			[Token(Token = "0x4000DED")]
			Desktop,
			[Token(Token = "0x4000DEE")]
			Mobile,
			[Token(Token = "0x4000DEF")]
			MobileHigh,
			[Token(Token = "0x4000DF0")]
			MobileLow,
			[Token(Token = "0x4000DF1")]
			Console,
			[Token(Token = "0x4000DF2")]
			Windows,
			[Token(Token = "0x4000DF3")]
			Mac,
			[Token(Token = "0x4000DF4")]
			Linux,
			[Token(Token = "0x4000DF5")]
			iOS,
			[Token(Token = "0x4000DF6")]
			Android,
			[Token(Token = "0x4000DF7")]
			Deprecated_1,
			[Token(Token = "0x4000DF8")]
			XboxOne,
			[Token(Token = "0x4000DF9")]
			PS4,
			[Token(Token = "0x4000DFA")]
			Deprecated_2,
			[Token(Token = "0x4000DFB")]
			Deprecated_3,
			[Token(Token = "0x4000DFC")]
			AppleTV,
			[Token(Token = "0x4000DFD")]
			UWP,
			[Token(Token = "0x4000DFE")]
			Switch,
			[Token(Token = "0x4000DFF")]
			WebGL,
			[Token(Token = "0x4000E00")]
			Stadia,
			[Token(Token = "0x4000E01")]
			Reserved_1,
			[Token(Token = "0x4000E02")]
			Reserved_2,
			[Token(Token = "0x4000E03")]
			Reserved_3,
			[Token(Token = "0x4000E04")]
			Count
		}

		[Token(Token = "0x2000212")]
		public class PlatformSettingBase
		{
			[Token(Token = "0x4000E05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Platform Platform;

			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0x21B163C", Offset = "0x21B163C", VA = "0x21B163C")]
			public PlatformSettingBase()
			{
			}
		}

		[Token(Token = "0x2000213")]
		public class PlatformSetting<T> : PlatformSettingBase
		{
			[Token(Token = "0x4000E06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T Value;

			[Token(Token = "0x6000E6E")]
			public PlatformSetting()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000214")]
		public class PlatformIntSetting : PlatformSetting<int>
		{
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0x21B15EC", Offset = "0x21B15EC", VA = "0x21B15EC")]
			public PlatformIntSetting()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000215")]
		public class PlatformStringSetting : PlatformSetting<string>
		{
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0x21B1644", Offset = "0x21B1644", VA = "0x21B1644")]
			public PlatformStringSetting()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000216")]
		public class PlatformBoolSetting : PlatformSetting<TriStateBool>
		{
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0x21B159C", Offset = "0x21B159C", VA = "0x21B159C")]
			public PlatformBoolSetting()
			{
			}
		}

		[Token(Token = "0x2000217")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3A64", Offset = "0x12F3A64")]
		private sealed class <>c__DisplayClass6_0<T, U> where T : PlatformSetting<U>, new()
		{
			[Token(Token = "0x4000E07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Platform fromPlatform;

			[Token(Token = "0x4000E08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Platform toPlatform;

			[Token(Token = "0x6000E72")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6000E73")]
			internal bool <CopySetting>b__0(T x)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E74")]
			internal bool <CopySetting>b__1(T x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000400")]
		public static void CopySetting<T, U>(List<T> list, Platform fromPlatform, Platform toPlatform) where T : PlatformSetting<U>, new()
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x21B13FC", Offset = "0x21B13FC", VA = "0x21B13FC")]
		public static void CopySetting(List<PlatformBoolSetting> list, Platform fromPlatform, Platform toPlatform)
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x21B1464", Offset = "0x21B1464", VA = "0x21B1464")]
		public static void CopySetting(List<PlatformIntSetting> list, Platform fromPlatform, Platform toPlatform)
		{
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x21B14CC", Offset = "0x21B14CC", VA = "0x21B14CC")]
		public static string DisplayName(Platform platform)
		{
			return null;
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0x21B1534", Offset = "0x21B1534", VA = "0x21B1534")]
		public static float SortOrder(Platform legacyPlatform)
		{
			return default(float);
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x21B1558", Offset = "0x21B1558", VA = "0x21B1558")]
		public static Platform Parent(Platform platform)
		{
			return default(Platform);
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0x21B157C", Offset = "0x21B157C", VA = "0x21B157C")]
		public static bool IsGroup(Platform platform)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000085")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F3440", Offset = "0x12F3440")]
	public class StudioBankLoader : MonoBehaviour
	{
		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LoaderGameEvent LoadEvent;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LoaderGameEvent UnloadEvent;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[BankRef]
		public List<string> Banks;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string CollisionTag;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool PreloadSamples;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool isQuitting;

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x21BD884", Offset = "0x21BD884", VA = "0x21BD884")]
		private void HandleGameEvent(LoaderGameEvent gameEvent)
		{
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x21BDC18", Offset = "0x21BDC18", VA = "0x21BDC18")]
		private void Start()
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x21BDC40", Offset = "0x21BDC40", VA = "0x21BDC40")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x21BDC4C", Offset = "0x21BDC4C", VA = "0x21BDC4C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x21BDC60", Offset = "0x21BDC60", VA = "0x21BDC60")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x21BDC68", Offset = "0x21BDC68", VA = "0x21BDC68")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x21BD8D4", Offset = "0x21BD8D4", VA = "0x21BD8D4")]
		public void Load()
		{
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x21BDB04", Offset = "0x21BDB04", VA = "0x21BDB04")]
		public void Unload()
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x21BDC70", Offset = "0x21BDC70", VA = "0x21BDC70")]
		public StudioBankLoader()
		{
		}
	}
	[Token(Token = "0x2000086")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F3478", Offset = "0x12F3478")]
	public class StudioEventEmitter : EventHandler
	{
		[Token(Token = "0x2000218")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3A74", Offset = "0x12F3A74")]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x4000E09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x6000E75")]
			[Address(RVA = "0x21BE408", Offset = "0x21BE408", VA = "0x21BE408")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x6000E76")]
			[Address(RVA = "0x21BE6B8", Offset = "0x21BE6B8", VA = "0x21BE6B8")]
			internal bool <SetParameter>b__0(ParamRef x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000219")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3A84", Offset = "0x12F3A84")]
		private sealed class <>c__DisplayClass37_0
		{
			[Token(Token = "0x4000E0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PARAMETER_ID id;

			[Token(Token = "0x6000E77")]
			[Address(RVA = "0x21BE5EC", Offset = "0x21BE5EC", VA = "0x21BE5EC")]
			public <>c__DisplayClass37_0()
			{
			}

			[Token(Token = "0x6000E78")]
			[Address(RVA = "0x21BE6DC", Offset = "0x21BE6DC", VA = "0x21BE6DC")]
			internal bool <SetParameter>b__0(ParamRef x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[EventRef]
		public string Event;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EmitterGameEvent PlayEvent;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public EmitterGameEvent StopEvent;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool AllowFadeout;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool TriggerOnce;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool Preload;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParamRef[] Params;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool OverrideAttenuation;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float OverrideMinDistance;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float OverrideMaxDistance;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected EventDescription eventDescription;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected EventInstance instance;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasTriggered;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool isQuitting;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool isOneshot;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<ParamRef> cachedParams;

		[Token(Token = "0x400039D")]
		private const string SnapshotString = "snapshot";

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F4738", Offset = "0x12F4738")]
		private bool <IsActive>k__BackingField;

		[Token(Token = "0x17000075")]
		public EventDescription EventDescription
		{
			[Token(Token = "0x6000410")]
			[Address(RVA = "0x21BDC78", Offset = "0x21BDC78", VA = "0x21BDC78")]
			get
			{
				return default(EventDescription);
			}
		}

		[Token(Token = "0x17000076")]
		public EventInstance EventInstance
		{
			[Token(Token = "0x6000411")]
			[Address(RVA = "0x21BDC80", Offset = "0x21BDC80", VA = "0x21BDC80")]
			get
			{
				return default(EventInstance);
			}
		}

		[Token(Token = "0x17000077")]
		public bool IsActive
		{
			[Token(Token = "0x6000412")]
			[Address(RVA = "0x21BDC88", Offset = "0x21BDC88", VA = "0x21BDC88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5CF4", Offset = "0x12F5CF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000413")]
			[Address(RVA = "0x21BDC90", Offset = "0x21BDC90", VA = "0x21BDC90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5D04", Offset = "0x12F5D04")]
			private set
			{
			}
		}

		[Token(Token = "0x17000078")]
		public float MaxDistance
		{
			[Token(Token = "0x6000414")]
			[Address(RVA = "0x21B8ACC", Offset = "0x21B8ACC", VA = "0x21B8ACC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x21BDDC0", Offset = "0x21BDDC0", VA = "0x21BDDC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x21BDEA8", Offset = "0x21BDEA8", VA = "0x21BDEA8")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x21BDEB4", Offset = "0x21BDEB4", VA = "0x21BDEB4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x21BDFD0", Offset = "0x21BDFD0", VA = "0x21BDFD0", Slot = "4")]
		protected override void HandleGameEvent(EmitterGameEvent gameEvent)
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x21BDC9C", Offset = "0x21BDC9C", VA = "0x21BDC9C")]
		private void Lookup()
		{
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x21BE020", Offset = "0x21BE020", VA = "0x21BE020")]
		public void Play()
		{
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x21B8B8C", Offset = "0x21B8B8C", VA = "0x21B8B8C")]
		public void PlayInstance()
		{
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x21BE190", Offset = "0x21BE190", VA = "0x21BE190")]
		public void Stop()
		{
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x21B8E54", Offset = "0x21B8E54", VA = "0x21B8E54")]
		public void StopInstance()
		{
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x21BE21C", Offset = "0x21BE21C", VA = "0x21BE21C")]
		public void SetParameter(string name, float value, bool ignoreseekspeed = false)
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x21BE410", Offset = "0x21BE410", VA = "0x21BE410")]
		public void SetParameter(PARAMETER_ID id, float value, bool ignoreseekspeed = false)
		{
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x21B8B38", Offset = "0x21B8B38", VA = "0x21B8B38")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x21BE5F4", Offset = "0x21BE5F4", VA = "0x21BE5F4")]
		public StudioEventEmitter()
		{
		}
	}
	[Token(Token = "0x2000087")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F34B0", Offset = "0x12F34B0")]
	public class StudioGlobalParameterTrigger : EventHandler
	{
		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[ParamRef]
		public string parameter;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EmitterGameEvent TriggerEvent;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float value;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PARAMETER_DESCRIPTION parameterDescription;

		[Token(Token = "0x17000079")]
		public PARAMETER_DESCRIPTION ParameterDesctription
		{
			[Token(Token = "0x6000422")]
			[Address(RVA = "0x21BE794", Offset = "0x21BE794", VA = "0x21BE794")]
			get
			{
				return default(PARAMETER_DESCRIPTION);
			}
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x21BE7A8", Offset = "0x21BE7A8", VA = "0x21BE7A8")]
		private RESULT Lookup()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x21BE830", Offset = "0x21BE830", VA = "0x21BE830")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x21BE874", Offset = "0x21BE874", VA = "0x21BE874", Slot = "4")]
		protected override void HandleGameEvent(EmitterGameEvent gameEvent)
		{
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x21BE888", Offset = "0x21BE888", VA = "0x21BE888")]
		public void TriggerParameters()
		{
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x21BE99C", Offset = "0x21BE99C", VA = "0x21BE99C")]
		public StudioGlobalParameterTrigger()
		{
		}
	}
	[Token(Token = "0x2000088")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F34E8", Offset = "0x12F34E8")]
	public class StudioListener : MonoBehaviour
	{
		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject attenuationObject;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int ListenerNumber;

		[Token(Token = "0x6000428")]
		[Address(RVA = "0x21BE9A0", Offset = "0x21BE9A0", VA = "0x21BE9A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x21BEA10", Offset = "0x21BEA10", VA = "0x21BEA10")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x21BEA74", Offset = "0x21BEA74", VA = "0x21BEA74")]
		private void Update()
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0x21BEA88", Offset = "0x21BEA88", VA = "0x21BEA88")]
		private void SetListenerLocation()
		{
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x21BEB18", Offset = "0x21BEB18", VA = "0x21BEB18")]
		public StudioListener()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000089")]
	public class EmitterRef
	{
		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StudioEventEmitter Target;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParamRef[] Params;

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x21B115C", Offset = "0x21B115C", VA = "0x21B115C")]
		public EmitterRef()
		{
		}
	}
	[Token(Token = "0x200008A")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F3520", Offset = "0x12F3520")]
	public class StudioParameterTrigger : EventHandler
	{
		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EmitterRef[] Emitters;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EmitterGameEvent TriggerEvent;

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x21BEB28", Offset = "0x21BEB28", VA = "0x21BEB28")]
		private void Awake()
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x21BED18", Offset = "0x21BED18", VA = "0x21BED18", Slot = "4")]
		protected override void HandleGameEvent(EmitterGameEvent gameEvent)
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x21BED2C", Offset = "0x21BED2C", VA = "0x21BED2C")]
		public void TriggerParameters()
		{
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x21BEEC4", Offset = "0x21BEEC4", VA = "0x21BEEC4")]
		public StudioParameterTrigger()
		{
		}
	}
}
namespace FMOD
{
	[Token(Token = "0x200008B")]
	public class VERSION
	{
		[Token(Token = "0x40003A9")]
		public const string dll = "fmod";

		[Token(Token = "0x40003AA")]
		public const string dllSuffix = "";

		[Token(Token = "0x40003AB")]
		public const int number = 131345;

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x21B0D74", Offset = "0x21B0D74", VA = "0x21B0D74")]
		public VERSION()
		{
		}
	}
	[Token(Token = "0x200008C")]
	public class CONSTANTS
	{
		[Token(Token = "0x40003AC")]
		public const int MAX_CHANNEL_WIDTH = 32;

		[Token(Token = "0x40003AD")]
		public const int MAX_LISTENERS = 8;

		[Token(Token = "0x40003AE")]
		public const int REVERB_MAXINSTANCES = 4;

		[Token(Token = "0x40003AF")]
		public const int MAX_SYSTEMS = 8;

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x2355034", Offset = "0x2355034", VA = "0x2355034")]
		public CONSTANTS()
		{
		}
	}
	[Token(Token = "0x200008D")]
	public enum RESULT
	{
		[Token(Token = "0x40003B1")]
		OK,
		[Token(Token = "0x40003B2")]
		ERR_BADCOMMAND,
		[Token(Token = "0x40003B3")]
		ERR_CHANNEL_ALLOC,
		[Token(Token = "0x40003B4")]
		ERR_CHANNEL_STOLEN,
		[Token(Token = "0x40003B5")]
		ERR_DMA,
		[Token(Token = "0x40003B6")]
		ERR_DSP_CONNECTION,
		[Token(Token = "0x40003B7")]
		ERR_DSP_DONTPROCESS,
		[Token(Token = "0x40003B8")]
		ERR_DSP_FORMAT,
		[Token(Token = "0x40003B9")]
		ERR_DSP_INUSE,
		[Token(Token = "0x40003BA")]
		ERR_DSP_NOTFOUND,
		[Token(Token = "0x40003BB")]
		ERR_DSP_RESERVED,
		[Token(Token = "0x40003BC")]
		ERR_DSP_SILENCE,
		[Token(Token = "0x40003BD")]
		ERR_DSP_TYPE,
		[Token(Token = "0x40003BE")]
		ERR_FILE_BAD,
		[Token(Token = "0x40003BF")]
		ERR_FILE_COULDNOTSEEK,
		[Token(Token = "0x40003C0")]
		ERR_FILE_DISKEJECTED,
		[Token(Token = "0x40003C1")]
		ERR_FILE_EOF,
		[Token(Token = "0x40003C2")]
		ERR_FILE_ENDOFDATA,
		[Token(Token = "0x40003C3")]
		ERR_FILE_NOTFOUND,
		[Token(Token = "0x40003C4")]
		ERR_FORMAT,
		[Token(Token = "0x40003C5")]
		ERR_HEADER_MISMATCH,
		[Token(Token = "0x40003C6")]
		ERR_HTTP,
		[Token(Token = "0x40003C7")]
		ERR_HTTP_ACCESS,
		[Token(Token = "0x40003C8")]
		ERR_HTTP_PROXY_AUTH,
		[Token(Token = "0x40003C9")]
		ERR_HTTP_SERVER_ERROR,
		[Token(Token = "0x40003CA")]
		ERR_HTTP_TIMEOUT,
		[Token(Token = "0x40003CB")]
		ERR_INITIALIZATION,
		[Token(Token = "0x40003CC")]
		ERR_INITIALIZED,
		[Token(Token = "0x40003CD")]
		ERR_INTERNAL,
		[Token(Token = "0x40003CE")]
		ERR_INVALID_FLOAT,
		[Token(Token = "0x40003CF")]
		ERR_INVALID_HANDLE,
		[Token(Token = "0x40003D0")]
		ERR_INVALID_PARAM,
		[Token(Token = "0x40003D1")]
		ERR_INVALID_POSITION,
		[Token(Token = "0x40003D2")]
		ERR_INVALID_SPEAKER,
		[Token(Token = "0x40003D3")]
		ERR_INVALID_SYNCPOINT,
		[Token(Token = "0x40003D4")]
		ERR_INVALID_THREAD,
		[Token(Token = "0x40003D5")]
		ERR_INVALID_VECTOR,
		[Token(Token = "0x40003D6")]
		ERR_MAXAUDIBLE,
		[Token(Token = "0x40003D7")]
		ERR_MEMORY,
		[Token(Token = "0x40003D8")]
		ERR_MEMORY_CANTPOINT,
		[Token(Token = "0x40003D9")]
		ERR_NEEDS3D,
		[Token(Token = "0x40003DA")]
		ERR_NEEDSHARDWARE,
		[Token(Token = "0x40003DB")]
		ERR_NET_CONNECT,
		[Token(Token = "0x40003DC")]
		ERR_NET_SOCKET_ERROR,
		[Token(Token = "0x40003DD")]
		ERR_NET_URL,
		[Token(Token = "0x40003DE")]
		ERR_NET_WOULD_BLOCK,
		[Token(Token = "0x40003DF")]
		ERR_NOTREADY,
		[Token(Token = "0x40003E0")]
		ERR_OUTPUT_ALLOCATED,
		[Token(Token = "0x40003E1")]
		ERR_OUTPUT_CREATEBUFFER,
		[Token(Token = "0x40003E2")]
		ERR_OUTPUT_DRIVERCALL,
		[Token(Token = "0x40003E3")]
		ERR_OUTPUT_FORMAT,
		[Token(Token = "0x40003E4")]
		ERR_OUTPUT_INIT,
		[Token(Token = "0x40003E5")]
		ERR_OUTPUT_NODRIVERS,
		[Token(Token = "0x40003E6")]
		ERR_PLUGIN,
		[Token(Token = "0x40003E7")]
		ERR_PLUGIN_MISSING,
		[Token(Token = "0x40003E8")]
		ERR_PLUGIN_RESOURCE,
		[Token(Token = "0x40003E9")]
		ERR_PLUGIN_VERSION,
		[Token(Token = "0x40003EA")]
		ERR_RECORD,
		[Token(Token = "0x40003EB")]
		ERR_REVERB_CHANNELGROUP,
		[Token(Token = "0x40003EC")]
		ERR_REVERB_INSTANCE,
		[Token(Token = "0x40003ED")]
		ERR_SUBSOUNDS,
		[Token(Token = "0x40003EE")]
		ERR_SUBSOUND_ALLOCATED,
		[Token(Token = "0x40003EF")]
		ERR_SUBSOUND_CANTMOVE,
		[Token(Token = "0x40003F0")]
		ERR_TAGNOTFOUND,
		[Token(Token = "0x40003F1")]
		ERR_TOOMANYCHANNELS,
		[Token(Token = "0x40003F2")]
		ERR_TRUNCATED,
		[Token(Token = "0x40003F3")]
		ERR_UNIMPLEMENTED,
		[Token(Token = "0x40003F4")]
		ERR_UNINITIALIZED,
		[Token(Token = "0x40003F5")]
		ERR_UNSUPPORTED,
		[Token(Token = "0x40003F6")]
		ERR_VERSION,
		[Token(Token = "0x40003F7")]
		ERR_EVENT_ALREADY_LOADED,
		[Token(Token = "0x40003F8")]
		ERR_EVENT_LIVEUPDATE_BUSY,
		[Token(Token = "0x40003F9")]
		ERR_EVENT_LIVEUPDATE_MISMATCH,
		[Token(Token = "0x40003FA")]
		ERR_EVENT_LIVEUPDATE_TIMEOUT,
		[Token(Token = "0x40003FB")]
		ERR_EVENT_NOTFOUND,
		[Token(Token = "0x40003FC")]
		ERR_STUDIO_UNINITIALIZED,
		[Token(Token = "0x40003FD")]
		ERR_STUDIO_NOT_LOADED,
		[Token(Token = "0x40003FE")]
		ERR_INVALID_STRING,
		[Token(Token = "0x40003FF")]
		ERR_ALREADY_LOCKED,
		[Token(Token = "0x4000400")]
		ERR_NOT_LOCKED,
		[Token(Token = "0x4000401")]
		ERR_RECORD_DISCONNECTED,
		[Token(Token = "0x4000402")]
		ERR_TOOMANYSAMPLES
	}
	[Token(Token = "0x200008E")]
	public enum CHANNELCONTROL_TYPE
	{
		[Token(Token = "0x4000404")]
		CHANNEL,
		[Token(Token = "0x4000405")]
		CHANNELGROUP,
		[Token(Token = "0x4000406")]
		MAX
	}
	[Token(Token = "0x200008F")]
	public struct VECTOR
	{
		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;
	}
	[Token(Token = "0x2000090")]
	public struct ATTRIBUTES_3D
	{
		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VECTOR position;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VECTOR velocity;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VECTOR forward;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public VECTOR up;
	}
	[Token(Token = "0x2000091")]
	public struct ASYNCREADINFO
	{
		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint offset;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint sizebytes;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int priority;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr userdata;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr buffer;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint bytesread;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FILE_ASYNCDONE_FUNC done;
	}
	[Token(Token = "0x2000092")]
	public enum OUTPUTTYPE
	{
		[Token(Token = "0x4000417")]
		AUTODETECT,
		[Token(Token = "0x4000418")]
		UNKNOWN,
		[Token(Token = "0x4000419")]
		NOSOUND,
		[Token(Token = "0x400041A")]
		WAVWRITER,
		[Token(Token = "0x400041B")]
		NOSOUND_NRT,
		[Token(Token = "0x400041C")]
		WAVWRITER_NRT,
		[Token(Token = "0x400041D")]
		WASAPI,
		[Token(Token = "0x400041E")]
		ASIO,
		[Token(Token = "0x400041F")]
		PULSEAUDIO,
		[Token(Token = "0x4000420")]
		ALSA,
		[Token(Token = "0x4000421")]
		COREAUDIO,
		[Token(Token = "0x4000422")]
		AUDIOTRACK,
		[Token(Token = "0x4000423")]
		OPENSL,
		[Token(Token = "0x4000424")]
		AUDIOOUT,
		[Token(Token = "0x4000425")]
		AUDIO3D,
		[Token(Token = "0x4000426")]
		WEBAUDIO,
		[Token(Token = "0x4000427")]
		NNAUDIO,
		[Token(Token = "0x4000428")]
		WINSONIC,
		[Token(Token = "0x4000429")]
		AAUDIO,
		[Token(Token = "0x400042A")]
		MAX
	}
	[Token(Token = "0x2000093")]
	public enum DEBUG_MODE
	{
		[Token(Token = "0x400042C")]
		TTY,
		[Token(Token = "0x400042D")]
		FILE,
		[Token(Token = "0x400042E")]
		CALLBACK
	}
	[Token(Token = "0x2000094")]
	[Flags]
	public enum DEBUG_FLAGS : uint
	{
		[Token(Token = "0x4000430")]
		NONE = 0u,
		[Token(Token = "0x4000431")]
		ERROR = 1u,
		[Token(Token = "0x4000432")]
		WARNING = 2u,
		[Token(Token = "0x4000433")]
		LOG = 4u,
		[Token(Token = "0x4000434")]
		TYPE_MEMORY = 0x100u,
		[Token(Token = "0x4000435")]
		TYPE_FILE = 0x200u,
		[Token(Token = "0x4000436")]
		TYPE_CODEC = 0x400u,
		[Token(Token = "0x4000437")]
		TYPE_TRACE = 0x800u,
		[Token(Token = "0x4000438")]
		DISPLAY_TIMESTAMPS = 0x10000u,
		[Token(Token = "0x4000439")]
		DISPLAY_LINENUMBERS = 0x20000u,
		[Token(Token = "0x400043A")]
		DISPLAY_THREAD = 0x40000u
	}
	[Token(Token = "0x2000095")]
	[Flags]
	public enum MEMORY_TYPE : uint
	{
		[Token(Token = "0x400043C")]
		NORMAL = 0u,
		[Token(Token = "0x400043D")]
		STREAM_FILE = 1u,
		[Token(Token = "0x400043E")]
		STREAM_DECODE = 2u,
		[Token(Token = "0x400043F")]
		SAMPLEDATA = 4u,
		[Token(Token = "0x4000440")]
		DSP_BUFFER = 8u,
		[Token(Token = "0x4000441")]
		PLUGIN = 0x10u,
		[Token(Token = "0x4000442")]
		PERSISTENT = 0x200000u,
		[Token(Token = "0x4000443")]
		ALL = uint.MaxValue
	}
	[Token(Token = "0x2000096")]
	public enum SPEAKERMODE
	{
		[Token(Token = "0x4000445")]
		DEFAULT,
		[Token(Token = "0x4000446")]
		RAW,
		[Token(Token = "0x4000447")]
		MONO,
		[Token(Token = "0x4000448")]
		STEREO,
		[Token(Token = "0x4000449")]
		QUAD,
		[Token(Token = "0x400044A")]
		SURROUND,
		[Token(Token = "0x400044B")]
		_5POINT1,
		[Token(Token = "0x400044C")]
		_7POINT1,
		[Token(Token = "0x400044D")]
		_7POINT1POINT4,
		[Token(Token = "0x400044E")]
		MAX
	}
	[Token(Token = "0x2000097")]
	public enum SPEAKER
	{
		[Token(Token = "0x4000450")]
		NONE = -1,
		[Token(Token = "0x4000451")]
		FRONT_LEFT,
		[Token(Token = "0x4000452")]
		FRONT_RIGHT,
		[Token(Token = "0x4000453")]
		FRONT_CENTER,
		[Token(Token = "0x4000454")]
		LOW_FREQUENCY,
		[Token(Token = "0x4000455")]
		SURROUND_LEFT,
		[Token(Token = "0x4000456")]
		SURROUND_RIGHT,
		[Token(Token = "0x4000457")]
		BACK_LEFT,
		[Token(Token = "0x4000458")]
		BACK_RIGHT,
		[Token(Token = "0x4000459")]
		TOP_FRONT_LEFT,
		[Token(Token = "0x400045A")]
		TOP_FRONT_RIGHT,
		[Token(Token = "0x400045B")]
		TOP_BACK_LEFT,
		[Token(Token = "0x400045C")]
		TOP_BACK_RIGHT,
		[Token(Token = "0x400045D")]
		MAX
	}
	[Token(Token = "0x2000098")]
	[Flags]
	public enum CHANNELMASK : uint
	{
		[Token(Token = "0x400045F")]
		FRONT_LEFT = 1u,
		[Token(Token = "0x4000460")]
		FRONT_RIGHT = 2u,
		[Token(Token = "0x4000461")]
		FRONT_CENTER = 4u,
		[Token(Token = "0x4000462")]
		LOW_FREQUENCY = 8u,
		[Token(Token = "0x4000463")]
		SURROUND_LEFT = 0x10u,
		[Token(Token = "0x4000464")]
		SURROUND_RIGHT = 0x20u,
		[Token(Token = "0x4000465")]
		BACK_LEFT = 0x40u,
		[Token(Token = "0x4000466")]
		BACK_RIGHT = 0x80u,
		[Token(Token = "0x4000467")]
		BACK_CENTER = 0x100u,
		[Token(Token = "0x4000468")]
		MONO = 1u,
		[Token(Token = "0x4000469")]
		STEREO = 3u,
		[Token(Token = "0x400046A")]
		LRC = 7u,
		[Token(Token = "0x400046B")]
		QUAD = 0x33u,
		[Token(Token = "0x400046C")]
		SURROUND = 0x37u,
		[Token(Token = "0x400046D")]
		_5POINT1 = 0x3Fu,
		[Token(Token = "0x400046E")]
		_5POINT1_REARS = 0xCFu,
		[Token(Token = "0x400046F")]
		_7POINT0 = 0xF7u,
		[Token(Token = "0x4000470")]
		_7POINT1 = 0xFFu
	}
	[Token(Token = "0x2000099")]
	public enum CHANNELORDER
	{
		[Token(Token = "0x4000472")]
		DEFAULT,
		[Token(Token = "0x4000473")]
		WAVEFORMAT,
		[Token(Token = "0x4000474")]
		PROTOOLS,
		[Token(Token = "0x4000475")]
		ALLMONO,
		[Token(Token = "0x4000476")]
		ALLSTEREO,
		[Token(Token = "0x4000477")]
		ALSA,
		[Token(Token = "0x4000478")]
		MAX
	}
	[Token(Token = "0x200009A")]
	public enum PLUGINTYPE
	{
		[Token(Token = "0x400047A")]
		OUTPUT,
		[Token(Token = "0x400047B")]
		CODEC,
		[Token(Token = "0x400047C")]
		DSP,
		[Token(Token = "0x400047D")]
		MAX
	}
	[Token(Token = "0x200009B")]
	public struct PLUGINLIST
	{
		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PLUGINTYPE type;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr description;
	}
	[Token(Token = "0x200009C")]
	[Flags]
	public enum INITFLAGS : uint
	{
		[Token(Token = "0x4000481")]
		NORMAL = 0u,
		[Token(Token = "0x4000482")]
		STREAM_FROM_UPDATE = 1u,
		[Token(Token = "0x4000483")]
		MIX_FROM_UPDATE = 2u,
		[Token(Token = "0x4000484")]
		_3D_RIGHTHANDED = 4u,
		[Token(Token = "0x4000485")]
		CHANNEL_LOWPASS = 0x100u,
		[Token(Token = "0x4000486")]
		CHANNEL_DISTANCEFILTER = 0x200u,
		[Token(Token = "0x4000487")]
		PROFILE_ENABLE = 0x10000u,
		[Token(Token = "0x4000488")]
		VOL0_BECOMES_VIRTUAL = 0x20000u,
		[Token(Token = "0x4000489")]
		GEOMETRY_USECLOSEST = 0x40000u,
		[Token(Token = "0x400048A")]
		PREFER_DOLBY_DOWNMIX = 0x80000u,
		[Token(Token = "0x400048B")]
		THREAD_UNSAFE = 0x100000u,
		[Token(Token = "0x400048C")]
		PROFILE_METER_ALL = 0x200000u,
		[Token(Token = "0x400048D")]
		MEMORY_TRACKING = 0x400000u
	}
	[Token(Token = "0x200009D")]
	public enum SOUND_TYPE
	{
		[Token(Token = "0x400048F")]
		UNKNOWN,
		[Token(Token = "0x4000490")]
		AIFF,
		[Token(Token = "0x4000491")]
		ASF,
		[Token(Token = "0x4000492")]
		DLS,
		[Token(Token = "0x4000493")]
		FLAC,
		[Token(Token = "0x4000494")]
		FSB,
		[Token(Token = "0x4000495")]
		IT,
		[Token(Token = "0x4000496")]
		MIDI,
		[Token(Token = "0x4000497")]
		MOD,
		[Token(Token = "0x4000498")]
		MPEG,
		[Token(Token = "0x4000499")]
		OGGVORBIS,
		[Token(Token = "0x400049A")]
		PLAYLIST,
		[Token(Token = "0x400049B")]
		RAW,
		[Token(Token = "0x400049C")]
		S3M,
		[Token(Token = "0x400049D")]
		USER,
		[Token(Token = "0x400049E")]
		WAV,
		[Token(Token = "0x400049F")]
		XM,
		[Token(Token = "0x40004A0")]
		XMA,
		[Token(Token = "0x40004A1")]
		AUDIOQUEUE,
		[Token(Token = "0x40004A2")]
		AT9,
		[Token(Token = "0x40004A3")]
		VORBIS,
		[Token(Token = "0x40004A4")]
		MEDIA_FOUNDATION,
		[Token(Token = "0x40004A5")]
		MEDIACODEC,
		[Token(Token = "0x40004A6")]
		FADPCM,
		[Token(Token = "0x40004A7")]
		OPUS,
		[Token(Token = "0x40004A8")]
		MAX
	}
	[Token(Token = "0x200009E")]
	public enum SOUND_FORMAT
	{
		[Token(Token = "0x40004AA")]
		NONE,
		[Token(Token = "0x40004AB")]
		PCM8,
		[Token(Token = "0x40004AC")]
		PCM16,
		[Token(Token = "0x40004AD")]
		PCM24,
		[Token(Token = "0x40004AE")]
		PCM32,
		[Token(Token = "0x40004AF")]
		PCMFLOAT,
		[Token(Token = "0x40004B0")]
		BITSTREAM,
		[Token(Token = "0x40004B1")]
		MAX
	}
	[Token(Token = "0x200009F")]
	[Flags]
	public enum MODE : uint
	{
		[Token(Token = "0x40004B3")]
		DEFAULT = 0u,
		[Token(Token = "0x40004B4")]
		LOOP_OFF = 1u,
		[Token(Token = "0x40004B5")]
		LOOP_NORMAL = 2u,
		[Token(Token = "0x40004B6")]
		LOOP_BIDI = 4u,
		[Token(Token = "0x40004B7")]
		_2D = 8u,
		[Token(Token = "0x40004B8")]
		_3D = 0x10u,
		[Token(Token = "0x40004B9")]
		CREATESTREAM = 0x80u,
		[Token(Token = "0x40004BA")]
		CREATESAMPLE = 0x100u,
		[Token(Token = "0x40004BB")]
		CREATECOMPRESSEDSAMPLE = 0x200u,
		[Token(Token = "0x40004BC")]
		OPENUSER = 0x400u,
		[Token(Token = "0x40004BD")]
		OPENMEMORY = 0x800u,
		[Token(Token = "0x40004BE")]
		OPENMEMORY_POINT = 0x10000000u,
		[Token(Token = "0x40004BF")]
		OPENRAW = 0x1000u,
		[Token(Token = "0x40004C0")]
		OPENONLY = 0x2000u,
		[Token(Token = "0x40004C1")]
		ACCURATETIME = 0x4000u,
		[Token(Token = "0x40004C2")]
		MPEGSEARCH = 0x8000u,
		[Token(Token = "0x40004C3")]
		NONBLOCKING = 0x10000u,
		[Token(Token = "0x40004C4")]
		UNIQUE = 0x20000u,
		[Token(Token = "0x40004C5")]
		_3D_HEADRELATIVE = 0x40000u,
		[Token(Token = "0x40004C6")]
		_3D_WORLDRELATIVE = 0x80000u,
		[Token(Token = "0x40004C7")]
		_3D_INVERSEROLLOFF = 0x100000u,
		[Token(Token = "0x40004C8")]
		_3D_LINEARROLLOFF = 0x200000u,
		[Token(Token = "0x40004C9")]
		_3D_LINEARSQUAREROLLOFF = 0x400000u,
		[Token(Token = "0x40004CA")]
		_3D_INVERSETAPEREDROLLOFF = 0x800000u,
		[Token(Token = "0x40004CB")]
		_3D_CUSTOMROLLOFF = 0x4000000u,
		[Token(Token = "0x40004CC")]
		_3D_IGNOREGEOMETRY = 0x40000000u,
		[Token(Token = "0x40004CD")]
		IGNORETAGS = 0x2000000u,
		[Token(Token = "0x40004CE")]
		LOWMEM = 0x8000000u,
		[Token(Token = "0x40004CF")]
		VIRTUAL_PLAYFROMSTART = 0x80000000u
	}
	[Token(Token = "0x20000A0")]
	public enum OPENSTATE
	{
		[Token(Token = "0x40004D1")]
		READY,
		[Token(Token = "0x40004D2")]
		LOADING,
		[Token(Token = "0x40004D3")]
		ERROR,
		[Token(Token = "0x40004D4")]
		CONNECTING,
		[Token(Token = "0x40004D5")]
		BUFFERING,
		[Token(Token = "0x40004D6")]
		SEEKING,
		[Token(Token = "0x40004D7")]
		PLAYING,
		[Token(Token = "0x40004D8")]
		SETPOSITION,
		[Token(Token = "0x40004D9")]
		MAX
	}
	[Token(Token = "0x20000A1")]
	public enum SOUNDGROUP_BEHAVIOR
	{
		[Token(Token = "0x40004DB")]
		BEHAVIOR_FAIL,
		[Token(Token = "0x40004DC")]
		BEHAVIOR_MUTE,
		[Token(Token = "0x40004DD")]
		BEHAVIOR_STEALLOWEST,
		[Token(Token = "0x40004DE")]
		MAX
	}
	[Token(Token = "0x20000A2")]
	public enum CHANNELCONTROL_CALLBACK_TYPE
	{
		[Token(Token = "0x40004E0")]
		END,
		[Token(Token = "0x40004E1")]
		VIRTUALVOICE,
		[Token(Token = "0x40004E2")]
		SYNCPOINT,
		[Token(Token = "0x40004E3")]
		OCCLUSION,
		[Token(Token = "0x40004E4")]
		MAX
	}
	[Token(Token = "0x20000A3")]
	public struct CHANNELCONTROL_DSP_INDEX
	{
		[Token(Token = "0x40004E5")]
		public const int HEAD = -1;

		[Token(Token = "0x40004E6")]
		public const int FADER = -2;

		[Token(Token = "0x40004E7")]
		public const int TAIL = -3;
	}
	[Token(Token = "0x20000A4")]
	public enum ERRORCALLBACK_INSTANCETYPE
	{
		[Token(Token = "0x40004E9")]
		NONE,
		[Token(Token = "0x40004EA")]
		SYSTEM,
		[Token(Token = "0x40004EB")]
		CHANNEL,
		[Token(Token = "0x40004EC")]
		CHANNELGROUP,
		[Token(Token = "0x40004ED")]
		CHANNELCONTROL,
		[Token(Token = "0x40004EE")]
		SOUND,
		[Token(Token = "0x40004EF")]
		SOUNDGROUP,
		[Token(Token = "0x40004F0")]
		DSP,
		[Token(Token = "0x40004F1")]
		DSPCONNECTION,
		[Token(Token = "0x40004F2")]
		GEOMETRY,
		[Token(Token = "0x40004F3")]
		REVERB3D,
		[Token(Token = "0x40004F4")]
		STUDIO_SYSTEM,
		[Token(Token = "0x40004F5")]
		STUDIO_EVENTDESCRIPTION,
		[Token(Token = "0x40004F6")]
		STUDIO_EVENTINSTANCE,
		[Token(Token = "0x40004F7")]
		STUDIO_PARAMETERINSTANCE,
		[Token(Token = "0x40004F8")]
		STUDIO_BUS,
		[Token(Token = "0x40004F9")]
		STUDIO_VCA,
		[Token(Token = "0x40004FA")]
		STUDIO_BANK,
		[Token(Token = "0x40004FB")]
		STUDIO_COMMANDREPLAY
	}
	[Token(Token = "0x20000A5")]
	public struct ERRORCALLBACK_INFO
	{
		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RESULT result;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ERRORCALLBACK_INSTANCETYPE instancetype;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr instance;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StringWrapper functionname;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StringWrapper functionparams;
	}
	[Token(Token = "0x20000A6")]
	[Flags]
	public enum SYSTEM_CALLBACK_TYPE : uint
	{
		[Token(Token = "0x4000502")]
		DEVICELISTCHANGED = 1u,
		[Token(Token = "0x4000503")]
		DEVICELOST = 2u,
		[Token(Token = "0x4000504")]
		MEMORYALLOCATIONFAILED = 4u,
		[Token(Token = "0x4000505")]
		THREADCREATED = 8u,
		[Token(Token = "0x4000506")]
		BADDSPCONNECTION = 0x10u,
		[Token(Token = "0x4000507")]
		PREMIX = 0x20u,
		[Token(Token = "0x4000508")]
		POSTMIX = 0x40u,
		[Token(Token = "0x4000509")]
		ERROR = 0x80u,
		[Token(Token = "0x400050A")]
		MIDMIX = 0x100u,
		[Token(Token = "0x400050B")]
		THREADDESTROYED = 0x200u,
		[Token(Token = "0x400050C")]
		PREUPDATE = 0x400u,
		[Token(Token = "0x400050D")]
		POSTUPDATE = 0x800u,
		[Token(Token = "0x400050E")]
		RECORDLISTCHANGED = 0x1000u,
		[Token(Token = "0x400050F")]
		BUFFEREDNOMIX = 0x2000u,
		[Token(Token = "0x4000510")]
		DEVICEREINITIALIZE = 0x4000u,
		[Token(Token = "0x4000511")]
		OUTPUTUNDERRUN = 0x8000u,
		[Token(Token = "0x4000512")]
		ALL = uint.MaxValue
	}
	[Token(Token = "0x20000A7")]
	public delegate RESULT DEBUG_CALLBACK(DEBUG_FLAGS flags, IntPtr file, int line, IntPtr func, IntPtr message);
	[Token(Token = "0x20000A8")]
	public delegate RESULT SYSTEM_CALLBACK(IntPtr system, SYSTEM_CALLBACK_TYPE type, IntPtr commanddata1, IntPtr commanddata2, IntPtr userdata);
	[Token(Token = "0x20000A9")]
	public delegate RESULT CHANNELCONTROL_CALLBACK(IntPtr channelcontrol, CHANNELCONTROL_TYPE controltype, CHANNELCONTROL_CALLBACK_TYPE callbacktype, IntPtr commanddata1, IntPtr commanddata2);
	[Token(Token = "0x20000AA")]
	public delegate RESULT SOUND_NONBLOCK_CALLBACK(IntPtr sound, RESULT result);
	[Token(Token = "0x20000AB")]
	public delegate RESULT SOUND_PCMREAD_CALLBACK(IntPtr sound, IntPtr data, uint datalen);
	[Token(Token = "0x20000AC")]
	public delegate RESULT SOUND_PCMSETPOS_CALLBACK(IntPtr sound, int subsound, uint position, TIMEUNIT postype);
	[Token(Token = "0x20000AD")]
	public delegate RESULT FILE_OPEN_CALLBACK(IntPtr name, ref uint filesize, ref IntPtr handle, IntPtr userdata);
	[Token(Token = "0x20000AE")]
	public delegate RESULT FILE_CLOSE_CALLBACK(IntPtr handle, IntPtr userdata);
	[Token(Token = "0x20000AF")]
	public delegate RESULT FILE_READ_CALLBACK(IntPtr handle, IntPtr buffer, uint sizebytes, ref uint bytesread, IntPtr userdata);
	[Token(Token = "0x20000B0")]
	public delegate RESULT FILE_SEEK_CALLBACK(IntPtr handle, uint pos, IntPtr userdata);
	[Token(Token = "0x20000B1")]
	public delegate RESULT FILE_ASYNCREAD_CALLBACK(IntPtr info, IntPtr userdata);
	[Token(Token = "0x20000B2")]
	public delegate RESULT FILE_ASYNCCANCEL_CALLBACK(IntPtr info, IntPtr userdata);
	[Token(Token = "0x20000B3")]
	public delegate RESULT FILE_ASYNCDONE_FUNC(IntPtr info, RESULT result);
	[Token(Token = "0x20000B4")]
	public delegate IntPtr MEMORY_ALLOC_CALLBACK(uint size, MEMORY_TYPE type, IntPtr sourcestr);
	[Token(Token = "0x20000B5")]
	public delegate IntPtr MEMORY_REALLOC_CALLBACK(IntPtr ptr, uint size, MEMORY_TYPE type, IntPtr sourcestr);
	[Token(Token = "0x20000B6")]
	public delegate void MEMORY_FREE_CALLBACK(IntPtr ptr, MEMORY_TYPE type, IntPtr sourcestr);
	[Token(Token = "0x20000B7")]
	public delegate float CB_3D_ROLLOFF_CALLBACK(IntPtr channelcontrol, float distance);
	[Token(Token = "0x20000B8")]
	public enum DSP_RESAMPLER
	{
		[Token(Token = "0x4000514")]
		DEFAULT,
		[Token(Token = "0x4000515")]
		NOINTERP,
		[Token(Token = "0x4000516")]
		LINEAR,
		[Token(Token = "0x4000517")]
		CUBIC,
		[Token(Token = "0x4000518")]
		SPLINE,
		[Token(Token = "0x4000519")]
		MAX
	}
	[Token(Token = "0x20000B9")]
	public enum DSPCONNECTION_TYPE
	{
		[Token(Token = "0x400051B")]
		STANDARD,
		[Token(Token = "0x400051C")]
		SIDECHAIN,
		[Token(Token = "0x400051D")]
		SEND,
		[Token(Token = "0x400051E")]
		SEND_SIDECHAIN,
		[Token(Token = "0x400051F")]
		MAX
	}
	[Token(Token = "0x20000BA")]
	public enum TAGTYPE
	{
		[Token(Token = "0x4000521")]
		UNKNOWN,
		[Token(Token = "0x4000522")]
		ID3V1,
		[Token(Token = "0x4000523")]
		ID3V2,
		[Token(Token = "0x4000524")]
		VORBISCOMMENT,
		[Token(Token = "0x4000525")]
		SHOUTCAST,
		[Token(Token = "0x4000526")]
		ICECAST,
		[Token(Token = "0x4000527")]
		ASF,
		[Token(Token = "0x4000528")]
		MIDI,
		[Token(Token = "0x4000529")]
		PLAYLIST,
		[Token(Token = "0x400052A")]
		FMOD,
		[Token(Token = "0x400052B")]
		USER,
		[Token(Token = "0x400052C")]
		MAX
	}
	[Token(Token = "0x20000BB")]
	public enum TAGDATATYPE
	{
		[Token(Token = "0x400052E")]
		BINARY,
		[Token(Token = "0x400052F")]
		INT,
		[Token(Token = "0x4000530")]
		FLOAT,
		[Token(Token = "0x4000531")]
		STRING,
		[Token(Token = "0x4000532")]
		STRING_UTF16,
		[Token(Token = "0x4000533")]
		STRING_UTF16BE,
		[Token(Token = "0x4000534")]
		STRING_UTF8,
		[Token(Token = "0x4000535")]
		MAX
	}
	[Token(Token = "0x20000BC")]
	public struct TAG
	{
		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TAGTYPE type;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public TAGDATATYPE datatype;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public StringWrapper name;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr data;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint datalen;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool updated;
	}
	[Token(Token = "0x20000BD")]
	[Flags]
	public enum TIMEUNIT : uint
	{
		[Token(Token = "0x400053D")]
		MS = 1u,
		[Token(Token = "0x400053E")]
		PCM = 2u,
		[Token(Token = "0x400053F")]
		PCMBYTES = 4u,
		[Token(Token = "0x4000540")]
		RAWBYTES = 8u,
		[Token(Token = "0x4000541")]
		PCMFRACTION = 0x10u,
		[Token(Token = "0x4000542")]
		MODORDER = 0x100u,
		[Token(Token = "0x4000543")]
		MODROW = 0x200u,
		[Token(Token = "0x4000544")]
		MODPATTERN = 0x400u
	}
	[Token(Token = "0x20000BE")]
	public struct PORT_INDEX
	{
		[Token(Token = "0x4000545")]
		public const ulong NONE = ulong.MaxValue;
	}
	[Token(Token = "0x20000BF")]
	public struct CREATESOUNDEXINFO
	{
		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int cbsize;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint length;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint fileoffset;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int numchannels;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int defaultfrequency;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SOUND_FORMAT format;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint decodebuffersize;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int initialsubsound;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int numsubsounds;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr inclusionlist;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int inclusionlistnum;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SOUND_PCMREAD_CALLBACK pcmreadcallback;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SOUND_PCMSETPOS_CALLBACK pcmsetposcallback;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SOUND_NONBLOCK_CALLBACK nonblockcallback;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IntPtr dlsname;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IntPtr encryptionkey;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int maxpolyphony;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IntPtr userdata;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SOUND_TYPE suggestedsoundtype;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FILE_OPEN_CALLBACK fileuseropen;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FILE_CLOSE_CALLBACK fileuserclose;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FILE_READ_CALLBACK fileuserread;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FILE_SEEK_CALLBACK fileuserseek;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FILE_ASYNCREAD_CALLBACK fileuserasyncread;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FILE_ASYNCCANCEL_CALLBACK fileuserasynccancel;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IntPtr fileuserdata;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int filebuffersize;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public CHANNELORDER channelorder;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public IntPtr initialsoundgroup;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public uint initialseekposition;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public TIMEUNIT initialseekpostype;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int ignoresetfilesystem;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public uint audioqueuepolicy;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public uint minmidigranularity;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int nonblockthreadid;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public IntPtr fsbguid;
	}
	[Token(Token = "0x20000C0")]
	public struct REVERB_PROPERTIES
	{
		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float DecayTime;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float EarlyDelay;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float LateDelay;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float HFReference;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float HFDecayRatio;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Diffusion;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Density;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LowShelfFrequency;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LowShelfGain;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float HighCut;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float EarlyLateMix;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float WetLevel;

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x30F90CC", Offset = "0x30F90CC", VA = "0x30F90CC")]
		public REVERB_PROPERTIES(float decayTime, float earlyDelay, float lateDelay, float hfReference, float hfDecayRatio, float diffusion, float density, float lowShelfFrequency, float lowShelfGain, float highCut, float earlyLateMix, float wetLevel)
		{
		}
	}
	[Token(Token = "0x20000C1")]
	public class PRESET
	{
		[Token(Token = "0x6000479")]
		[Address(RVA = "0x30F90A8", Offset = "0x30F90A8", VA = "0x30F90A8")]
		public static REVERB_PROPERTIES OFF()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x30F90F8", Offset = "0x30F90F8", VA = "0x30F90F8")]
		public static REVERB_PROPERTIES GENERIC()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x30F911C", Offset = "0x30F911C", VA = "0x30F911C")]
		public static REVERB_PROPERTIES PADDEDCELL()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x30F9140", Offset = "0x30F9140", VA = "0x30F9140")]
		public static REVERB_PROPERTIES ROOM()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x30F9164", Offset = "0x30F9164", VA = "0x30F9164")]
		public static REVERB_PROPERTIES BATHROOM()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x30F9188", Offset = "0x30F9188", VA = "0x30F9188")]
		public static REVERB_PROPERTIES LIVINGROOM()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x30F91AC", Offset = "0x30F91AC", VA = "0x30F91AC")]
		public static REVERB_PROPERTIES STONEROOM()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x30F91D0", Offset = "0x30F91D0", VA = "0x30F91D0")]
		public static REVERB_PROPERTIES AUDITORIUM()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x30F91F4", Offset = "0x30F91F4", VA = "0x30F91F4")]
		public static REVERB_PROPERTIES CONCERTHALL()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x30F9218", Offset = "0x30F9218", VA = "0x30F9218")]
		public static REVERB_PROPERTIES CAVE()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x30F923C", Offset = "0x30F923C", VA = "0x30F923C")]
		public static REVERB_PROPERTIES ARENA()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x30F9260", Offset = "0x30F9260", VA = "0x30F9260")]
		public static REVERB_PROPERTIES HANGAR()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x30F9284", Offset = "0x30F9284", VA = "0x30F9284")]
		public static REVERB_PROPERTIES CARPETTEDHALLWAY()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x30F92A8", Offset = "0x30F92A8", VA = "0x30F92A8")]
		public static REVERB_PROPERTIES HALLWAY()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x30F92CC", Offset = "0x30F92CC", VA = "0x30F92CC")]
		public static REVERB_PROPERTIES STONECORRIDOR()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x30F92F0", Offset = "0x30F92F0", VA = "0x30F92F0")]
		public static REVERB_PROPERTIES ALLEY()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x30F9314", Offset = "0x30F9314", VA = "0x30F9314")]
		public static REVERB_PROPERTIES FOREST()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x30F9338", Offset = "0x30F9338", VA = "0x30F9338")]
		public static REVERB_PROPERTIES CITY()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x30F935C", Offset = "0x30F935C", VA = "0x30F935C")]
		public static REVERB_PROPERTIES MOUNTAINS()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x30F9380", Offset = "0x30F9380", VA = "0x30F9380")]
		public static REVERB_PROPERTIES QUARRY()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x30F93A4", Offset = "0x30F93A4", VA = "0x30F93A4")]
		public static REVERB_PROPERTIES PLAIN()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x30F93C8", Offset = "0x30F93C8", VA = "0x30F93C8")]
		public static REVERB_PROPERTIES PARKINGLOT()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x30F93EC", Offset = "0x30F93EC", VA = "0x30F93EC")]
		public static REVERB_PROPERTIES SEWERPIPE()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x30F9410", Offset = "0x30F9410", VA = "0x30F9410")]
		public static REVERB_PROPERTIES UNDERWATER()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x30F9434", Offset = "0x30F9434", VA = "0x30F9434")]
		public PRESET()
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public struct ADVANCEDSETTINGS
	{
		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int cbSize;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxMPEGCodecs;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int maxADPCMCodecs;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int maxXMACodecs;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int maxVorbisCodecs;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int maxAT9Codecs;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int maxFADPCMCodecs;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxPCMCodecs;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int ASIONumChannels;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr ASIOChannelList;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntPtr ASIOSpeakerList;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float vol0virtualvol;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint defaultDecodeBufferSize;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ushort profilePort;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public uint geometryMaxFadeTime;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float distanceFilterCenterFreq;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int reverb3Dinstance;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int DSPBufferPoolSize;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public DSP_RESAMPLER resamplerMethod;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public uint randomSeed;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int maxConvolutionThreads;
	}
	[Token(Token = "0x20000C3")]
	[Flags]
	public enum DRIVER_STATE : uint
	{
		[Token(Token = "0x400058C")]
		CONNECTED = 1u,
		[Token(Token = "0x400058D")]
		DEFAULT = 2u
	}
	[Token(Token = "0x20000C4")]
	public enum THREAD_PRIORITY
	{
		[Token(Token = "0x400058F")]
		PLATFORM_MIN = -32768,
		[Token(Token = "0x4000590")]
		PLATFORM_MAX = 32768,
		[Token(Token = "0x4000591")]
		DEFAULT = -32769,
		[Token(Token = "0x4000592")]
		LOW = -32770,
		[Token(Token = "0x4000593")]
		MEDIUM = -32771,
		[Token(Token = "0x4000594")]
		HIGH = -32772,
		[Token(Token = "0x4000595")]
		VERY_HIGH = -32773,
		[Token(Token = "0x4000596")]
		EXTREME = -32774,
		[Token(Token = "0x4000597")]
		CRITICAL = -32775,
		[Token(Token = "0x4000598")]
		MIXER = -32774,
		[Token(Token = "0x4000599")]
		FEEDER = -32775,
		[Token(Token = "0x400059A")]
		STREAM = -32773,
		[Token(Token = "0x400059B")]
		FILE = -32772,
		[Token(Token = "0x400059C")]
		NONBLOCKING = -32772,
		[Token(Token = "0x400059D")]
		RECORD = -32772,
		[Token(Token = "0x400059E")]
		GEOMETRY = -32770,
		[Token(Token = "0x400059F")]
		PROFILER = -32771,
		[Token(Token = "0x40005A0")]
		STUDIO_UPDATE = -32771,
		[Token(Token = "0x40005A1")]
		STUDIO_LOAD_BANK = -32771,
		[Token(Token = "0x40005A2")]
		STUDIO_LOAD_SAMPLE = -32771,
		[Token(Token = "0x40005A3")]
		CONVOLUTION1 = -32773,
		[Token(Token = "0x40005A4")]
		CONVOLUTION2 = -32773
	}
	[Token(Token = "0x20000C5")]
	public enum THREAD_STACK_SIZE : uint
	{
		[Token(Token = "0x40005A6")]
		DEFAULT = 0u,
		[Token(Token = "0x40005A7")]
		MIXER = 81920u,
		[Token(Token = "0x40005A8")]
		FEEDER = 16384u,
		[Token(Token = "0x40005A9")]
		STREAM = 98304u,
		[Token(Token = "0x40005AA")]
		FILE = 65536u,
		[Token(Token = "0x40005AB")]
		NONBLOCKING = 114688u,
		[Token(Token = "0x40005AC")]
		RECORD = 16384u,
		[Token(Token = "0x40005AD")]
		GEOMETRY = 49152u,
		[Token(Token = "0x40005AE")]
		PROFILER = 131072u,
		[Token(Token = "0x40005AF")]
		STUDIO_UPDATE = 98304u,
		[Token(Token = "0x40005B0")]
		STUDIO_LOAD_BANK = 98304u,
		[Token(Token = "0x40005B1")]
		STUDIO_LOAD_SAMPLE = 98304u,
		[Token(Token = "0x40005B2")]
		CONVOLUTION1 = 16384u,
		[Token(Token = "0x40005B3")]
		CONVOLUTION2 = 16384u
	}
	[Token(Token = "0x20000C6")]
	[Flags]
	public enum THREAD_AFFINITY : long
	{
		[Token(Token = "0x40005B5")]
		GROUP_DEFAULT = 0x4000000000000000L,
		[Token(Token = "0x40005B6")]
		GROUP_A = 0x4000000000000001L,
		[Token(Token = "0x40005B7")]
		GROUP_B = 0x4000000000000002L,
		[Token(Token = "0x40005B8")]
		GROUP_C = 0x4000000000000003L,
		[Token(Token = "0x40005B9")]
		MIXER = 0x4000000000000001L,
		[Token(Token = "0x40005BA")]
		FEEDER = 0x4000000000000003L,
		[Token(Token = "0x40005BB")]
		STREAM = 0x4000000000000003L,
		[Token(Token = "0x40005BC")]
		FILE = 0x4000000000000003L,
		[Token(Token = "0x40005BD")]
		NONBLOCKING = 0x4000000000000003L,
		[Token(Token = "0x40005BE")]
		RECORD = 0x4000000000000003L,
		[Token(Token = "0x40005BF")]
		GEOMETRY = 0x4000000000000003L,
		[Token(Token = "0x40005C0")]
		PROFILER = 0x4000000000000003L,
		[Token(Token = "0x40005C1")]
		STUDIO_UPDATE = 0x4000000000000002L,
		[Token(Token = "0x40005C2")]
		STUDIO_LOAD_BANK = 0x4000000000000003L,
		[Token(Token = "0x40005C3")]
		STUDIO_LOAD_SAMPLE = 0x4000000000000003L,
		[Token(Token = "0x40005C4")]
		CONVOLUTION1 = 0x4000000000000003L,
		[Token(Token = "0x40005C5")]
		CONVOLUTION2 = 0x4000000000000003L,
		[Token(Token = "0x40005C6")]
		CORE_ALL = 0L,
		[Token(Token = "0x40005C7")]
		CORE_0 = 1L,
		[Token(Token = "0x40005C8")]
		CORE_1 = 2L,
		[Token(Token = "0x40005C9")]
		CORE_2 = 4L,
		[Token(Token = "0x40005CA")]
		CORE_3 = 8L,
		[Token(Token = "0x40005CB")]
		CORE_4 = 0x10L,
		[Token(Token = "0x40005CC")]
		CORE_5 = 0x20L,
		[Token(Token = "0x40005CD")]
		CORE_6 = 0x40L,
		[Token(Token = "0x40005CE")]
		CORE_7 = 0x80L,
		[Token(Token = "0x40005CF")]
		CORE_8 = 0x100L,
		[Token(Token = "0x40005D0")]
		CORE_9 = 0x200L,
		[Token(Token = "0x40005D1")]
		CORE_10 = 0x400L,
		[Token(Token = "0x40005D2")]
		CORE_11 = 0x800L,
		[Token(Token = "0x40005D3")]
		CORE_12 = 0x1000L,
		[Token(Token = "0x40005D4")]
		CORE_13 = 0x2000L,
		[Token(Token = "0x40005D5")]
		CORE_14 = 0x4000L,
		[Token(Token = "0x40005D6")]
		CORE_15 = 0x8000L
	}
	[Token(Token = "0x20000C7")]
	public enum THREAD_TYPE
	{
		[Token(Token = "0x40005D8")]
		MIXER,
		[Token(Token = "0x40005D9")]
		FEEDER,
		[Token(Token = "0x40005DA")]
		STREAM,
		[Token(Token = "0x40005DB")]
		FILE,
		[Token(Token = "0x40005DC")]
		NONBLOCKING,
		[Token(Token = "0x40005DD")]
		RECORD,
		[Token(Token = "0x40005DE")]
		GEOMETRY,
		[Token(Token = "0x40005DF")]
		PROFILER,
		[Token(Token = "0x40005E0")]
		STUDIO_UPDATE,
		[Token(Token = "0x40005E1")]
		STUDIO_LOAD_BANK,
		[Token(Token = "0x40005E2")]
		STUDIO_LOAD_SAMPLE,
		[Token(Token = "0x40005E3")]
		CONVOLUTION1,
		[Token(Token = "0x40005E4")]
		CONVOLUTION2,
		[Token(Token = "0x40005E5")]
		MAX
	}
	[Token(Token = "0x20000C8")]
	public struct Factory
	{
		[Token(Token = "0x6000492")]
		[Address(RVA = "0x30F75C4", Offset = "0x30F75C4", VA = "0x30F75C4")]
		public static RESULT System_Create(out System system)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000493")]
		[Address(RVA = "0x30F75C8", Offset = "0x30F75C8", VA = "0x30F75C8")]
		private static extern RESULT FMOD5_System_Create(out IntPtr system);
	}
	[Token(Token = "0x20000C9")]
	public struct Memory
	{
		[Token(Token = "0x6000494")]
		[Address(RVA = "0x30F8F24", Offset = "0x30F8F24", VA = "0x30F8F24")]
		public static RESULT Initialize(IntPtr poolmem, int poollen, MEMORY_ALLOC_CALLBACK useralloc, MEMORY_REALLOC_CALLBACK userrealloc, MEMORY_FREE_CALLBACK userfree, MEMORY_TYPE memtypeflags = MEMORY_TYPE.ALL)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x30F9008", Offset = "0x30F9008", VA = "0x30F9008")]
		public static RESULT GetStats(out int currentalloced, out int maxalloced, bool blocking = true)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000496")]
		[Address(RVA = "0x30F8F28", Offset = "0x30F8F28", VA = "0x30F8F28")]
		private static extern RESULT FMOD5_Memory_Initialize(IntPtr poolmem, int poollen, MEMORY_ALLOC_CALLBACK useralloc, MEMORY_REALLOC_CALLBACK userrealloc, MEMORY_FREE_CALLBACK userfree, MEMORY_TYPE memtypeflags);

		[PreserveSig]
		[Token(Token = "0x6000497")]
		[Address(RVA = "0x30F9010", Offset = "0x30F9010", VA = "0x30F9010")]
		private static extern RESULT FMOD5_Memory_GetStats(out int currentalloced, out int maxalloced, bool blocking);
	}
	[Token(Token = "0x20000CA")]
	public struct Debug
	{
		[Token(Token = "0x6000498")]
		[Address(RVA = "0x30F5A00", Offset = "0x30F5A00", VA = "0x30F5A00")]
		public static RESULT Initialize(DEBUG_FLAGS flags, DEBUG_MODE mode = DEBUG_MODE.TTY, [Optional] DEBUG_CALLBACK callback, [Optional] string filename)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000499")]
		[Address(RVA = "0x30F5B64", Offset = "0x30F5B64", VA = "0x30F5B64")]
		private static extern RESULT FMOD5_Debug_Initialize(DEBUG_FLAGS flags, DEBUG_MODE mode, DEBUG_CALLBACK callback, byte[] filename);
	}
	[Token(Token = "0x20000CB")]
	public struct Thread
	{
		[Token(Token = "0x600049A")]
		[Address(RVA = "0x30D62D0", Offset = "0x30D62D0", VA = "0x30D62D0")]
		public static RESULT SetAttributes(THREAD_TYPE type, THREAD_AFFINITY affinity = THREAD_AFFINITY.GROUP_DEFAULT, THREAD_PRIORITY priority = THREAD_PRIORITY.DEFAULT, THREAD_STACK_SIZE stacksize = THREAD_STACK_SIZE.DEFAULT)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x600049B")]
		[Address(RVA = "0x30D62E4", Offset = "0x30D62E4", VA = "0x30D62E4")]
		private static extern RESULT FMOD5_Thread_SetAttributes(THREAD_TYPE type, THREAD_AFFINITY affinity, THREAD_PRIORITY priority, THREAD_STACK_SIZE stacksize);
	}
	[Token(Token = "0x20000CC")]
	public struct System
	{
		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x30D0CE8", Offset = "0x30D0CE8", VA = "0x30D0CE8")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x30D0D70", Offset = "0x30D0D70", VA = "0x30D0D70")]
		public RESULT setOutput(OUTPUTTYPE output)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x30D0E08", Offset = "0x30D0E08", VA = "0x30D0E08")]
		public RESULT getOutput(out OUTPUTTYPE output)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x30D0EA0", Offset = "0x30D0EA0", VA = "0x30D0EA0")]
		public RESULT getNumDrivers(out int numdrivers)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x30D0F38", Offset = "0x30D0F38", VA = "0x30D0F38")]
		public RESULT getDriverInfo(int id, out string name, int namelen, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x30D1208", Offset = "0x30D1208", VA = "0x30D1208")]
		public RESULT getDriverInfo(int id, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x30D12A0", Offset = "0x30D12A0", VA = "0x30D12A0")]
		public RESULT setDriver(int driver)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x30D1338", Offset = "0x30D1338", VA = "0x30D1338")]
		public RESULT getDriver(out int driver)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x30D13D0", Offset = "0x30D13D0", VA = "0x30D13D0")]
		public RESULT setSoftwareChannels(int numsoftwarechannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x30D1468", Offset = "0x30D1468", VA = "0x30D1468")]
		public RESULT getSoftwareChannels(out int numsoftwarechannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x30D1500", Offset = "0x30D1500", VA = "0x30D1500")]
		public RESULT setSoftwareFormat(int samplerate, SPEAKERMODE speakermode, int numrawspeakers)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x30D15B0", Offset = "0x30D15B0", VA = "0x30D15B0")]
		public RESULT getSoftwareFormat(out int samplerate, out SPEAKERMODE speakermode, out int numrawspeakers)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x30D1660", Offset = "0x30D1660", VA = "0x30D1660")]
		public RESULT setDSPBufferSize(uint bufferlength, int numbuffers)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x30D1700", Offset = "0x30D1700", VA = "0x30D1700")]
		public RESULT getDSPBufferSize(out uint bufferlength, out int numbuffers)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x30D17A0", Offset = "0x30D17A0", VA = "0x30D17A0")]
		public RESULT setFileSystem(FILE_OPEN_CALLBACK useropen, FILE_CLOSE_CALLBACK userclose, FILE_READ_CALLBACK userread, FILE_SEEK_CALLBACK userseek, FILE_ASYNCREAD_CALLBACK userasyncread, FILE_ASYNCCANCEL_CALLBACK userasynccancel, int blockalign)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x30D18C4", Offset = "0x30D18C4", VA = "0x30D18C4")]
		public RESULT attachFileSystem(FILE_OPEN_CALLBACK useropen, FILE_CLOSE_CALLBACK userclose, FILE_READ_CALLBACK userread, FILE_SEEK_CALLBACK userseek)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x30D19A8", Offset = "0x30D19A8", VA = "0x30D19A8")]
		public RESULT setAdvancedSettings(ref ADVANCEDSETTINGS settings)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x30D1AD0", Offset = "0x30D1AD0", VA = "0x30D1AD0")]
		public RESULT getAdvancedSettings(ref ADVANCEDSETTINGS settings)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x30D1BF8", Offset = "0x30D1BF8", VA = "0x30D1BF8")]
		public RESULT setCallback(SYSTEM_CALLBACK callback, SYSTEM_CALLBACK_TYPE callbackmask = SYSTEM_CALLBACK_TYPE.ALL)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x30D1CA0", Offset = "0x30D1CA0", VA = "0x30D1CA0")]
		public RESULT setPluginPath(string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x30D1E80", Offset = "0x30D1E80", VA = "0x30D1E80")]
		public RESULT loadPlugin(string filename, out uint handle, uint priority = 0u)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x30D2090", Offset = "0x30D2090", VA = "0x30D2090")]
		public RESULT unloadPlugin(uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x30D2128", Offset = "0x30D2128", VA = "0x30D2128")]
		public RESULT getNumNestedPlugins(uint handle, out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x30D21C8", Offset = "0x30D21C8", VA = "0x30D21C8")]
		public RESULT getNestedPlugin(uint handle, int index, out uint nestedhandle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x30D2278", Offset = "0x30D2278", VA = "0x30D2278")]
		public RESULT getNumPlugins(PLUGINTYPE plugintype, out int numplugins)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x30D2318", Offset = "0x30D2318", VA = "0x30D2318")]
		public RESULT getPluginHandle(PLUGINTYPE plugintype, int index, out uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x30D23C8", Offset = "0x30D23C8", VA = "0x30D23C8")]
		public RESULT getPluginInfo(uint handle, out PLUGINTYPE plugintype, out string name, int namelen, out uint version)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x30D2660", Offset = "0x30D2660", VA = "0x30D2660")]
		public RESULT getPluginInfo(uint handle, out PLUGINTYPE plugintype, out uint version)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x30D26D4", Offset = "0x30D26D4", VA = "0x30D26D4")]
		public RESULT setOutputByPlugin(uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x30D276C", Offset = "0x30D276C", VA = "0x30D276C")]
		public RESULT getOutputByPlugin(out uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x30D2804", Offset = "0x30D2804", VA = "0x30D2804")]
		public RESULT createDSPByPlugin(uint handle, out DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x30D28A4", Offset = "0x30D28A4", VA = "0x30D28A4")]
		public RESULT getDSPInfoByPlugin(uint handle, out IntPtr description)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x30D2944", Offset = "0x30D2944", VA = "0x30D2944")]
		public RESULT registerDSP(ref DSP_DESCRIPTION description, out uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x30D2A4C", Offset = "0x30D2A4C", VA = "0x30D2A4C")]
		public RESULT init(int maxchannels, INITFLAGS flags, IntPtr extradriverdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x30D2AFC", Offset = "0x30D2AFC", VA = "0x30D2AFC")]
		public RESULT close()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x30D2B84", Offset = "0x30D2B84", VA = "0x30D2B84")]
		public RESULT update()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x30D2C0C", Offset = "0x30D2C0C", VA = "0x30D2C0C")]
		public RESULT setSpeakerPosition(SPEAKER speaker, float x, float y, bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x30D2CC8", Offset = "0x30D2CC8", VA = "0x30D2CC8")]
		public RESULT getSpeakerPosition(SPEAKER speaker, out float x, out float y, out bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x30D2D94", Offset = "0x30D2D94", VA = "0x30D2D94")]
		public RESULT setStreamBufferSize(uint filebuffersize, TIMEUNIT filebuffersizetype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x30D2E34", Offset = "0x30D2E34", VA = "0x30D2E34")]
		public RESULT getStreamBufferSize(out uint filebuffersize, out TIMEUNIT filebuffersizetype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x30D2ED4", Offset = "0x30D2ED4", VA = "0x30D2ED4")]
		public RESULT set3DSettings(float dopplerscale, float distancefactor, float rolloffscale)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x30D2F84", Offset = "0x30D2F84", VA = "0x30D2F84")]
		public RESULT get3DSettings(out float dopplerscale, out float distancefactor, out float rolloffscale)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x30D3034", Offset = "0x30D3034", VA = "0x30D3034")]
		public RESULT set3DNumListeners(int numlisteners)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x30D30CC", Offset = "0x30D30CC", VA = "0x30D30CC")]
		public RESULT get3DNumListeners(out int numlisteners)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x30D3164", Offset = "0x30D3164", VA = "0x30D3164")]
		public RESULT set3DListenerAttributes(int listener, ref VECTOR pos, ref VECTOR vel, ref VECTOR forward, ref VECTOR up)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x30D322C", Offset = "0x30D322C", VA = "0x30D322C")]
		public RESULT get3DListenerAttributes(int listener, out VECTOR pos, out VECTOR vel, out VECTOR forward, out VECTOR up)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x30D32F4", Offset = "0x30D32F4", VA = "0x30D32F4")]
		public RESULT set3DRolloffCallback(CB_3D_ROLLOFF_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x30D3394", Offset = "0x30D3394", VA = "0x30D3394")]
		public RESULT mixerSuspend()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x30D341C", Offset = "0x30D341C", VA = "0x30D341C")]
		public RESULT mixerResume()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x30D34A4", Offset = "0x30D34A4", VA = "0x30D34A4")]
		public RESULT getDefaultMixMatrix(SPEAKERMODE sourcespeakermode, SPEAKERMODE targetspeakermode, float[] matrix, int matrixhop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x30D3564", Offset = "0x30D3564", VA = "0x30D3564")]
		public RESULT getSpeakerModeChannels(SPEAKERMODE mode, out int channels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x30D3604", Offset = "0x30D3604", VA = "0x30D3604")]
		public RESULT getVersion(out uint version)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x30D369C", Offset = "0x30D369C", VA = "0x30D369C")]
		public RESULT getOutputHandle(out IntPtr handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x30D3734", Offset = "0x30D3734", VA = "0x30D3734")]
		public RESULT getChannelsPlaying(out int channels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x30D3824", Offset = "0x30D3824", VA = "0x30D3824")]
		public RESULT getChannelsPlaying(out int channels, out int realchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x30D38C4", Offset = "0x30D38C4", VA = "0x30D38C4")]
		public RESULT getCPUUsage(out float dsp, out float stream, out float geometry, out float update, out float total)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x30D398C", Offset = "0x30D398C", VA = "0x30D398C")]
		public RESULT getCPUUsageEx(out float convolutionThread1, out float convolutionThread2)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x30D3A2C", Offset = "0x30D3A2C", VA = "0x30D3A2C")]
		public RESULT getFileUsage(out long sampleBytesRead, out long streamBytesRead, out long otherBytesRead)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x30D3ADC", Offset = "0x30D3ADC", VA = "0x30D3ADC")]
		public RESULT createSound(string name, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x30D3D6C", Offset = "0x30D3D6C", VA = "0x30D3D6C")]
		public RESULT createSound(byte[] data, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x30D3D74", Offset = "0x30D3D74", VA = "0x30D3D74")]
		public RESULT createSound(IntPtr name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x30D3E98", Offset = "0x30D3E98", VA = "0x30D3E98")]
		public RESULT createSound(string name, MODE mode, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x30D3F68", Offset = "0x30D3F68", VA = "0x30D3F68")]
		public RESULT createStream(string name, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x30D41F8", Offset = "0x30D41F8", VA = "0x30D41F8")]
		public RESULT createStream(byte[] data, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x30D4200", Offset = "0x30D4200", VA = "0x30D4200")]
		public RESULT createStream(IntPtr name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x30D4324", Offset = "0x30D4324", VA = "0x30D4324")]
		public RESULT createStream(string name, MODE mode, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x30D43F4", Offset = "0x30D43F4", VA = "0x30D43F4")]
		public RESULT createDSP(ref DSP_DESCRIPTION description, out DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x30D4500", Offset = "0x30D4500", VA = "0x30D4500")]
		public RESULT createDSPByType(DSP_TYPE type, out DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x30D45A0", Offset = "0x30D45A0", VA = "0x30D45A0")]
		public RESULT createChannelGroup(string name, out ChannelGroup channelgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x30D4790", Offset = "0x30D4790", VA = "0x30D4790")]
		public RESULT createSoundGroup(string name, out SoundGroup soundgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x30D4980", Offset = "0x30D4980", VA = "0x30D4980")]
		public RESULT createReverb3D(out Reverb3D reverb)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x30D4A18", Offset = "0x30D4A18", VA = "0x30D4A18")]
		public RESULT playSound(Sound sound, ChannelGroup channelgroup, bool paused, out Channel channel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x30D4AD4", Offset = "0x30D4AD4", VA = "0x30D4AD4")]
		public RESULT playDSP(DSP dsp, ChannelGroup channelgroup, bool paused, out Channel channel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x30D4B90", Offset = "0x30D4B90", VA = "0x30D4B90")]
		public RESULT getChannel(int channelid, out Channel channel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x30D4C30", Offset = "0x30D4C30", VA = "0x30D4C30")]
		public RESULT getDSPInfoByType(DSP_TYPE type, out IntPtr description)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x30D4CD0", Offset = "0x30D4CD0", VA = "0x30D4CD0")]
		public RESULT getMasterChannelGroup(out ChannelGroup channelgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x30D4D68", Offset = "0x30D4D68", VA = "0x30D4D68")]
		public RESULT getMasterSoundGroup(out SoundGroup soundgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x30D4E00", Offset = "0x30D4E00", VA = "0x30D4E00")]
		public RESULT attachChannelGroupToPort(uint portType, ulong portIndex, ChannelGroup channelgroup, bool passThru = false)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x30D4EBC", Offset = "0x30D4EBC", VA = "0x30D4EBC")]
		public RESULT detachChannelGroupFromPort(ChannelGroup channelgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x30D4F54", Offset = "0x30D4F54", VA = "0x30D4F54")]
		public RESULT setReverbProperties(int instance, ref REVERB_PROPERTIES prop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x30D4FF4", Offset = "0x30D4FF4", VA = "0x30D4FF4")]
		public RESULT getReverbProperties(int instance, out REVERB_PROPERTIES prop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x30D5094", Offset = "0x30D5094", VA = "0x30D5094")]
		public RESULT lockDSP()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x30D511C", Offset = "0x30D511C", VA = "0x30D511C")]
		public RESULT unlockDSP()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x30D51A4", Offset = "0x30D51A4", VA = "0x30D51A4")]
		public RESULT getRecordNumDrivers(out int numdrivers, out int numconnected)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x30D5244", Offset = "0x30D5244", VA = "0x30D5244")]
		public RESULT getRecordDriverInfo(int id, out string name, int namelen, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels, out DRIVER_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x30D5524", Offset = "0x30D5524", VA = "0x30D5524")]
		public RESULT getRecordDriverInfo(int id, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels, out DRIVER_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x30D55C4", Offset = "0x30D55C4", VA = "0x30D55C4")]
		public RESULT getRecordPosition(int id, out uint position)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x30D5664", Offset = "0x30D5664", VA = "0x30D5664")]
		public RESULT recordStart(int id, Sound sound, bool loop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x30D5714", Offset = "0x30D5714", VA = "0x30D5714")]
		public RESULT recordStop(int id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x30D57AC", Offset = "0x30D57AC", VA = "0x30D57AC")]
		public RESULT isRecording(int id, out bool recording)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x30D5860", Offset = "0x30D5860", VA = "0x30D5860")]
		public RESULT createGeometry(int maxpolygons, int maxvertices, out Geometry geometry)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x30D5910", Offset = "0x30D5910", VA = "0x30D5910")]
		public RESULT setGeometrySettings(float maxworldsize)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x30D59A8", Offset = "0x30D59A8", VA = "0x30D59A8")]
		public RESULT getGeometrySettings(out float maxworldsize)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x30D5A40", Offset = "0x30D5A40", VA = "0x30D5A40")]
		public RESULT loadGeometry(IntPtr data, int datasize, out Geometry geometry)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x30D5AF0", Offset = "0x30D5AF0", VA = "0x30D5AF0")]
		public RESULT getGeometryOcclusion(ref VECTOR listener, ref VECTOR source, out float direct, out float reverb)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x30D5BA8", Offset = "0x30D5BA8", VA = "0x30D5BA8")]
		public RESULT setNetworkProxy(string proxy)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x30D5D88", Offset = "0x30D5D88", VA = "0x30D5D88")]
		public RESULT getNetworkProxy(out string proxy, int proxylen)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x30D5FD8", Offset = "0x30D5FD8", VA = "0x30D5FD8")]
		public RESULT setNetworkTimeout(int timeout)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x30D6070", Offset = "0x30D6070", VA = "0x30D6070")]
		public RESULT getNetworkTimeout(out int timeout)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x30D6108", Offset = "0x30D6108", VA = "0x30D6108")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x30D61A0", Offset = "0x30D61A0", VA = "0x30D61A0")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000501")]
		[Address(RVA = "0x30D0CF0", Offset = "0x30D0CF0", VA = "0x30D0CF0")]
		private static extern RESULT FMOD5_System_Release(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000502")]
		[Address(RVA = "0x30D0D78", Offset = "0x30D0D78", VA = "0x30D0D78")]
		private static extern RESULT FMOD5_System_SetOutput(IntPtr system, OUTPUTTYPE output);

		[PreserveSig]
		[Token(Token = "0x6000503")]
		[Address(RVA = "0x30D0E10", Offset = "0x30D0E10", VA = "0x30D0E10")]
		private static extern RESULT FMOD5_System_GetOutput(IntPtr system, out OUTPUTTYPE output);

		[PreserveSig]
		[Token(Token = "0x6000504")]
		[Address(RVA = "0x30D0EA8", Offset = "0x30D0EA8", VA = "0x30D0EA8")]
		private static extern RESULT FMOD5_System_GetNumDrivers(IntPtr system, out int numdrivers);

		[PreserveSig]
		[Token(Token = "0x6000505")]
		[Address(RVA = "0x30D1130", Offset = "0x30D1130", VA = "0x30D1130")]
		private static extern RESULT FMOD5_System_GetDriverInfo(IntPtr system, int id, IntPtr name, int namelen, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels);

		[PreserveSig]
		[Token(Token = "0x6000506")]
		[Address(RVA = "0x30D12A8", Offset = "0x30D12A8", VA = "0x30D12A8")]
		private static extern RESULT FMOD5_System_SetDriver(IntPtr system, int driver);

		[PreserveSig]
		[Token(Token = "0x6000507")]
		[Address(RVA = "0x30D1340", Offset = "0x30D1340", VA = "0x30D1340")]
		private static extern RESULT FMOD5_System_GetDriver(IntPtr system, out int driver);

		[PreserveSig]
		[Token(Token = "0x6000508")]
		[Address(RVA = "0x30D13D8", Offset = "0x30D13D8", VA = "0x30D13D8")]
		private static extern RESULT FMOD5_System_SetSoftwareChannels(IntPtr system, int numsoftwarechannels);

		[PreserveSig]
		[Token(Token = "0x6000509")]
		[Address(RVA = "0x30D1470", Offset = "0x30D1470", VA = "0x30D1470")]
		private static extern RESULT FMOD5_System_GetSoftwareChannels(IntPtr system, out int numsoftwarechannels);

		[PreserveSig]
		[Token(Token = "0x600050A")]
		[Address(RVA = "0x30D1508", Offset = "0x30D1508", VA = "0x30D1508")]
		private static extern RESULT FMOD5_System_SetSoftwareFormat(IntPtr system, int samplerate, SPEAKERMODE speakermode, int numrawspeakers);

		[PreserveSig]
		[Token(Token = "0x600050B")]
		[Address(RVA = "0x30D15B8", Offset = "0x30D15B8", VA = "0x30D15B8")]
		private static extern RESULT FMOD5_System_GetSoftwareFormat(IntPtr system, out int samplerate, out SPEAKERMODE speakermode, out int numrawspeakers);

		[PreserveSig]
		[Token(Token = "0x600050C")]
		[Address(RVA = "0x30D1668", Offset = "0x30D1668", VA = "0x30D1668")]
		private static extern RESULT FMOD5_System_SetDSPBufferSize(IntPtr system, uint bufferlength, int numbuffers);

		[PreserveSig]
		[Token(Token = "0x600050D")]
		[Address(RVA = "0x30D1708", Offset = "0x30D1708", VA = "0x30D1708")]
		private static extern RESULT FMOD5_System_GetDSPBufferSize(IntPtr system, out uint bufferlength, out int numbuffers);

		[PreserveSig]
		[Token(Token = "0x600050E")]
		[Address(RVA = "0x30D17A8", Offset = "0x30D17A8", VA = "0x30D17A8")]
		private static extern RESULT FMOD5_System_SetFileSystem(IntPtr system, FILE_OPEN_CALLBACK useropen, FILE_CLOSE_CALLBACK userclose, FILE_READ_CALLBACK userread, FILE_SEEK_CALLBACK userseek, FILE_ASYNCREAD_CALLBACK userasyncread, FILE_ASYNCCANCEL_CALLBACK userasynccancel, int blockalign);

		[PreserveSig]
		[Token(Token = "0x600050F")]
		[Address(RVA = "0x30D18CC", Offset = "0x30D18CC", VA = "0x30D18CC")]
		private static extern RESULT FMOD5_System_AttachFileSystem(IntPtr system, FILE_OPEN_CALLBACK useropen, FILE_CLOSE_CALLBACK userclose, FILE_READ_CALLBACK userread, FILE_SEEK_CALLBACK userseek);

		[PreserveSig]
		[Token(Token = "0x6000510")]
		[Address(RVA = "0x30D1A40", Offset = "0x30D1A40", VA = "0x30D1A40")]
		private static extern RESULT FMOD5_System_SetAdvancedSettings(IntPtr system, ref ADVANCEDSETTINGS settings);

		[PreserveSig]
		[Token(Token = "0x6000511")]
		[Address(RVA = "0x30D1B68", Offset = "0x30D1B68", VA = "0x30D1B68")]
		private static extern RESULT FMOD5_System_GetAdvancedSettings(IntPtr system, ref ADVANCEDSETTINGS settings);

		[PreserveSig]
		[Token(Token = "0x6000512")]
		[Address(RVA = "0x30D1C00", Offset = "0x30D1C00", VA = "0x30D1C00")]
		private static extern RESULT FMOD5_System_SetCallback(IntPtr system, SYSTEM_CALLBACK callback, SYSTEM_CALLBACK_TYPE callbackmask);

		[PreserveSig]
		[Token(Token = "0x6000513")]
		[Address(RVA = "0x30D1DE8", Offset = "0x30D1DE8", VA = "0x30D1DE8")]
		private static extern RESULT FMOD5_System_SetPluginPath(IntPtr system, byte[] path);

		[PreserveSig]
		[Token(Token = "0x6000514")]
		[Address(RVA = "0x30D1FE0", Offset = "0x30D1FE0", VA = "0x30D1FE0")]
		private static extern RESULT FMOD5_System_LoadPlugin(IntPtr system, byte[] filename, out uint handle, uint priority);

		[PreserveSig]
		[Token(Token = "0x6000515")]
		[Address(RVA = "0x30D2098", Offset = "0x30D2098", VA = "0x30D2098")]
		private static extern RESULT FMOD5_System_UnloadPlugin(IntPtr system, uint handle);

		[PreserveSig]
		[Token(Token = "0x6000516")]
		[Address(RVA = "0x30D2130", Offset = "0x30D2130", VA = "0x30D2130")]
		private static extern RESULT FMOD5_System_GetNumNestedPlugins(IntPtr system, uint handle, out int count);

		[PreserveSig]
		[Token(Token = "0x6000517")]
		[Address(RVA = "0x30D21D0", Offset = "0x30D21D0", VA = "0x30D21D0")]
		private static extern RESULT FMOD5_System_GetNestedPlugin(IntPtr system, uint handle, int index, out uint nestedhandle);

		[PreserveSig]
		[Token(Token = "0x6000518")]
		[Address(RVA = "0x30D2280", Offset = "0x30D2280", VA = "0x30D2280")]
		private static extern RESULT FMOD5_System_GetNumPlugins(IntPtr system, PLUGINTYPE plugintype, out int numplugins);

		[PreserveSig]
		[Token(Token = "0x6000519")]
		[Address(RVA = "0x30D2320", Offset = "0x30D2320", VA = "0x30D2320")]
		private static extern RESULT FMOD5_System_GetPluginHandle(IntPtr system, PLUGINTYPE plugintype, int index, out uint handle);

		[PreserveSig]
		[Token(Token = "0x600051A")]
		[Address(RVA = "0x30D25A0", Offset = "0x30D25A0", VA = "0x30D25A0")]
		private static extern RESULT FMOD5_System_GetPluginInfo(IntPtr system, uint handle, out PLUGINTYPE plugintype, IntPtr name, int namelen, out uint version);

		[PreserveSig]
		[Token(Token = "0x600051B")]
		[Address(RVA = "0x30D26DC", Offset = "0x30D26DC", VA = "0x30D26DC")]
		private static extern RESULT FMOD5_System_SetOutputByPlugin(IntPtr system, uint handle);

		[PreserveSig]
		[Token(Token = "0x600051C")]
		[Address(RVA = "0x30D2774", Offset = "0x30D2774", VA = "0x30D2774")]
		private static extern RESULT FMOD5_System_GetOutputByPlugin(IntPtr system, out uint handle);

		[PreserveSig]
		[Token(Token = "0x600051D")]
		[Address(RVA = "0x30D280C", Offset = "0x30D280C", VA = "0x30D280C")]
		private static extern RESULT FMOD5_System_CreateDSPByPlugin(IntPtr system, uint handle, out IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x600051E")]
		[Address(RVA = "0x30D28AC", Offset = "0x30D28AC", VA = "0x30D28AC")]
		private static extern RESULT FMOD5_System_GetDSPInfoByPlugin(IntPtr system, uint handle, out IntPtr description);

		[PreserveSig]
		[Token(Token = "0x600051F")]
		[Address(RVA = "0x30D294C", Offset = "0x30D294C", VA = "0x30D294C")]
		private static extern RESULT FMOD5_System_RegisterDSP(IntPtr system, ref DSP_DESCRIPTION description, out uint handle);

		[PreserveSig]
		[Token(Token = "0x6000520")]
		[Address(RVA = "0x30D2A54", Offset = "0x30D2A54", VA = "0x30D2A54")]
		private static extern RESULT FMOD5_System_Init(IntPtr system, int maxchannels, INITFLAGS flags, IntPtr extradriverdata);

		[PreserveSig]
		[Token(Token = "0x6000521")]
		[Address(RVA = "0x30D2B04", Offset = "0x30D2B04", VA = "0x30D2B04")]
		private static extern RESULT FMOD5_System_Close(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000522")]
		[Address(RVA = "0x30D2B8C", Offset = "0x30D2B8C", VA = "0x30D2B8C")]
		private static extern RESULT FMOD5_System_Update(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000523")]
		[Address(RVA = "0x30D2C18", Offset = "0x30D2C18", VA = "0x30D2C18")]
		private static extern RESULT FMOD5_System_SetSpeakerPosition(IntPtr system, SPEAKER speaker, float x, float y, bool active);

		[PreserveSig]
		[Token(Token = "0x6000524")]
		[Address(RVA = "0x30D2CD0", Offset = "0x30D2CD0", VA = "0x30D2CD0")]
		private static extern RESULT FMOD5_System_GetSpeakerPosition(IntPtr system, SPEAKER speaker, out float x, out float y, out bool active);

		[PreserveSig]
		[Token(Token = "0x6000525")]
		[Address(RVA = "0x30D2D9C", Offset = "0x30D2D9C", VA = "0x30D2D9C")]
		private static extern RESULT FMOD5_System_SetStreamBufferSize(IntPtr system, uint filebuffersize, TIMEUNIT filebuffersizetype);

		[PreserveSig]
		[Token(Token = "0x6000526")]
		[Address(RVA = "0x30D2E3C", Offset = "0x30D2E3C", VA = "0x30D2E3C")]
		private static extern RESULT FMOD5_System_GetStreamBufferSize(IntPtr system, out uint filebuffersize, out TIMEUNIT filebuffersizetype);

		[PreserveSig]
		[Token(Token = "0x6000527")]
		[Address(RVA = "0x30D2EDC", Offset = "0x30D2EDC", VA = "0x30D2EDC")]
		private static extern RESULT FMOD5_System_Set3DSettings(IntPtr system, float dopplerscale, float distancefactor, float rolloffscale);

		[PreserveSig]
		[Token(Token = "0x6000528")]
		[Address(RVA = "0x30D2F8C", Offset = "0x30D2F8C", VA = "0x30D2F8C")]
		private static extern RESULT FMOD5_System_Get3DSettings(IntPtr system, out float dopplerscale, out float distancefactor, out float rolloffscale);

		[PreserveSig]
		[Token(Token = "0x6000529")]
		[Address(RVA = "0x30D303C", Offset = "0x30D303C", VA = "0x30D303C")]
		private static extern RESULT FMOD5_System_Set3DNumListeners(IntPtr system, int numlisteners);

		[PreserveSig]
		[Token(Token = "0x600052A")]
		[Address(RVA = "0x30D30D4", Offset = "0x30D30D4", VA = "0x30D30D4")]
		private static extern RESULT FMOD5_System_Get3DNumListeners(IntPtr system, out int numlisteners);

		[PreserveSig]
		[Token(Token = "0x600052B")]
		[Address(RVA = "0x30D316C", Offset = "0x30D316C", VA = "0x30D316C")]
		private static extern RESULT FMOD5_System_Set3DListenerAttributes(IntPtr system, int listener, ref VECTOR pos, ref VECTOR vel, ref VECTOR forward, ref VECTOR up);

		[PreserveSig]
		[Token(Token = "0x600052C")]
		[Address(RVA = "0x30D3234", Offset = "0x30D3234", VA = "0x30D3234")]
		private static extern RESULT FMOD5_System_Get3DListenerAttributes(IntPtr system, int listener, out VECTOR pos, out VECTOR vel, out VECTOR forward, out VECTOR up);

		[PreserveSig]
		[Token(Token = "0x600052D")]
		[Address(RVA = "0x30D32FC", Offset = "0x30D32FC", VA = "0x30D32FC")]
		private static extern RESULT FMOD5_System_Set3DRolloffCallback(IntPtr system, CB_3D_ROLLOFF_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x600052E")]
		[Address(RVA = "0x30D339C", Offset = "0x30D339C", VA = "0x30D339C")]
		private static extern RESULT FMOD5_System_MixerSuspend(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x600052F")]
		[Address(RVA = "0x30D3424", Offset = "0x30D3424", VA = "0x30D3424")]
		private static extern RESULT FMOD5_System_MixerResume(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000530")]
		[Address(RVA = "0x30D34AC", Offset = "0x30D34AC", VA = "0x30D34AC")]
		private static extern RESULT FMOD5_System_GetDefaultMixMatrix(IntPtr system, SPEAKERMODE sourcespeakermode, SPEAKERMODE targetspeakermode, float[] matrix, int matrixhop);

		[PreserveSig]
		[Token(Token = "0x6000531")]
		[Address(RVA = "0x30D356C", Offset = "0x30D356C", VA = "0x30D356C")]
		private static extern RESULT FMOD5_System_GetSpeakerModeChannels(IntPtr system, SPEAKERMODE mode, out int channels);

		[PreserveSig]
		[Token(Token = "0x6000532")]
		[Address(RVA = "0x30D360C", Offset = "0x30D360C", VA = "0x30D360C")]
		private static extern RESULT FMOD5_System_GetVersion(IntPtr system, out uint version);

		[PreserveSig]
		[Token(Token = "0x6000533")]
		[Address(RVA = "0x30D36A4", Offset = "0x30D36A4", VA = "0x30D36A4")]
		private static extern RESULT FMOD5_System_GetOutputHandle(IntPtr system, out IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6000534")]
		[Address(RVA = "0x30D378C", Offset = "0x30D378C", VA = "0x30D378C")]
		private static extern RESULT FMOD5_System_GetChannelsPlaying(IntPtr system, out int channels, IntPtr zero);

		[PreserveSig]
		[Token(Token = "0x6000535")]
		[Address(RVA = "0x30D382C", Offset = "0x30D382C", VA = "0x30D382C")]
		private static extern RESULT FMOD5_System_GetChannelsPlaying(IntPtr system, out int channels, out int realchannels);

		[PreserveSig]
		[Token(Token = "0x6000536")]
		[Address(RVA = "0x30D38CC", Offset = "0x30D38CC", VA = "0x30D38CC")]
		private static extern RESULT FMOD5_System_GetCPUUsage(IntPtr system, out float dsp, out float stream, out float geometry, out float update, out float total);

		[PreserveSig]
		[Token(Token = "0x6000537")]
		[Address(RVA = "0x30D3994", Offset = "0x30D3994", VA = "0x30D3994")]
		private static extern RESULT FMOD5_System_GetCPUUsageEx(IntPtr system, out float convolutionThread1, out float convolutionThread2);

		[PreserveSig]
		[Token(Token = "0x6000538")]
		[Address(RVA = "0x30D3A34", Offset = "0x30D3A34", VA = "0x30D3A34")]
		private static extern RESULT FMOD5_System_GetFileUsage(IntPtr system, out long sampleBytesRead, out long streamBytesRead, out long otherBytesRead);

		[PreserveSig]
		[Token(Token = "0x6000539")]
		[Address(RVA = "0x30D3C44", Offset = "0x30D3C44", VA = "0x30D3C44")]
		private static extern RESULT FMOD5_System_CreateSound(IntPtr system, byte[] name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x600053A")]
		[Address(RVA = "0x30D3D7C", Offset = "0x30D3D7C", VA = "0x30D3D7C")]
		private static extern RESULT FMOD5_System_CreateSound(IntPtr system, IntPtr name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x600053B")]
		[Address(RVA = "0x30D40D0", Offset = "0x30D40D0", VA = "0x30D40D0")]
		private static extern RESULT FMOD5_System_CreateStream(IntPtr system, byte[] name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x600053C")]
		[Address(RVA = "0x30D4208", Offset = "0x30D4208", VA = "0x30D4208")]
		private static extern RESULT FMOD5_System_CreateStream(IntPtr system, IntPtr name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x600053D")]
		[Address(RVA = "0x30D43FC", Offset = "0x30D43FC", VA = "0x30D43FC")]
		private static extern RESULT FMOD5_System_CreateDSP(IntPtr system, ref DSP_DESCRIPTION description, out IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x600053E")]
		[Address(RVA = "0x30D4508", Offset = "0x30D4508", VA = "0x30D4508")]
		private static extern RESULT FMOD5_System_CreateDSPByType(IntPtr system, DSP_TYPE type, out IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x600053F")]
		[Address(RVA = "0x30D46F0", Offset = "0x30D46F0", VA = "0x30D46F0")]
		private static extern RESULT FMOD5_System_CreateChannelGroup(IntPtr system, byte[] name, out IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x6000540")]
		[Address(RVA = "0x30D48E0", Offset = "0x30D48E0", VA = "0x30D48E0")]
		private static extern RESULT FMOD5_System_CreateSoundGroup(IntPtr system, byte[] name, out IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x6000541")]
		[Address(RVA = "0x30D4988", Offset = "0x30D4988", VA = "0x30D4988")]
		private static extern RESULT FMOD5_System_CreateReverb3D(IntPtr system, out IntPtr reverb);

		[PreserveSig]
		[Token(Token = "0x6000542")]
		[Address(RVA = "0x30D4A24", Offset = "0x30D4A24", VA = "0x30D4A24")]
		private static extern RESULT FMOD5_System_PlaySound(IntPtr system, IntPtr sound, IntPtr channelgroup, bool paused, out IntPtr channel);

		[PreserveSig]
		[Token(Token = "0x6000543")]
		[Address(RVA = "0x30D4AE0", Offset = "0x30D4AE0", VA = "0x30D4AE0")]
		private static extern RESULT FMOD5_System_PlayDSP(IntPtr system, IntPtr dsp, IntPtr channelgroup, bool paused, out IntPtr channel);

		[PreserveSig]
		[Token(Token = "0x6000544")]
		[Address(RVA = "0x30D4B98", Offset = "0x30D4B98", VA = "0x30D4B98")]
		private static extern RESULT FMOD5_System_GetChannel(IntPtr system, int channelid, out IntPtr channel);

		[PreserveSig]
		[Token(Token = "0x6000545")]
		[Address(RVA = "0x30D4C38", Offset = "0x30D4C38", VA = "0x30D4C38")]
		private static extern RESULT FMOD5_System_GetDSPInfoByType(IntPtr system, DSP_TYPE type, out IntPtr description);

		[PreserveSig]
		[Token(Token = "0x6000546")]
		[Address(RVA = "0x30D4CD8", Offset = "0x30D4CD8", VA = "0x30D4CD8")]
		private static extern RESULT FMOD5_System_GetMasterChannelGroup(IntPtr system, out IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x6000547")]
		[Address(RVA = "0x30D4D70", Offset = "0x30D4D70", VA = "0x30D4D70")]
		private static extern RESULT FMOD5_System_GetMasterSoundGroup(IntPtr system, out IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x6000548")]
		[Address(RVA = "0x30D4E0C", Offset = "0x30D4E0C", VA = "0x30D4E0C")]
		private static extern RESULT FMOD5_System_AttachChannelGroupToPort(IntPtr system, uint portType, ulong portIndex, IntPtr channelgroup, bool passThru);

		[PreserveSig]
		[Token(Token = "0x6000549")]
		[Address(RVA = "0x30D4EC4", Offset = "0x30D4EC4", VA = "0x30D4EC4")]
		private static extern RESULT FMOD5_System_DetachChannelGroupFromPort(IntPtr system, IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x600054A")]
		[Address(RVA = "0x30D4F5C", Offset = "0x30D4F5C", VA = "0x30D4F5C")]
		private static extern RESULT FMOD5_System_SetReverbProperties(IntPtr system, int instance, ref REVERB_PROPERTIES prop);

		[PreserveSig]
		[Token(Token = "0x600054B")]
		[Address(RVA = "0x30D4FFC", Offset = "0x30D4FFC", VA = "0x30D4FFC")]
		private static extern RESULT FMOD5_System_GetReverbProperties(IntPtr system, int instance, out REVERB_PROPERTIES prop);

		[PreserveSig]
		[Token(Token = "0x600054C")]
		[Address(RVA = "0x30D509C", Offset = "0x30D509C", VA = "0x30D509C")]
		private static extern RESULT FMOD5_System_LockDSP(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x600054D")]
		[Address(RVA = "0x30D5124", Offset = "0x30D5124", VA = "0x30D5124")]
		private static extern RESULT FMOD5_System_UnlockDSP(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x600054E")]
		[Address(RVA = "0x30D51AC", Offset = "0x30D51AC", VA = "0x30D51AC")]
		private static extern RESULT FMOD5_System_GetRecordNumDrivers(IntPtr system, out int numdrivers, out int numconnected);

		[PreserveSig]
		[Token(Token = "0x600054F")]
		[Address(RVA = "0x30D5444", Offset = "0x30D5444", VA = "0x30D5444")]
		private static extern RESULT FMOD5_System_GetRecordDriverInfo(IntPtr system, int id, IntPtr name, int namelen, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels, out DRIVER_STATE state);

		[PreserveSig]
		[Token(Token = "0x6000550")]
		[Address(RVA = "0x30D55CC", Offset = "0x30D55CC", VA = "0x30D55CC")]
		private static extern RESULT FMOD5_System_GetRecordPosition(IntPtr system, int id, out uint position);

		[PreserveSig]
		[Token(Token = "0x6000551")]
		[Address(RVA = "0x30D5670", Offset = "0x30D5670", VA = "0x30D5670")]
		private static extern RESULT FMOD5_System_RecordStart(IntPtr system, int id, IntPtr sound, bool loop);

		[PreserveSig]
		[Token(Token = "0x6000552")]
		[Address(RVA = "0x30D571C", Offset = "0x30D571C", VA = "0x30D571C")]
		private static extern RESULT FMOD5_System_RecordStop(IntPtr system, int id);

		[PreserveSig]
		[Token(Token = "0x6000553")]
		[Address(RVA = "0x30D57B4", Offset = "0x30D57B4", VA = "0x30D57B4")]
		private static extern RESULT FMOD5_System_IsRecording(IntPtr system, int id, out bool recording);

		[PreserveSig]
		[Token(Token = "0x6000554")]
		[Address(RVA = "0x30D5868", Offset = "0x30D5868", VA = "0x30D5868")]
		private static extern RESULT FMOD5_System_CreateGeometry(IntPtr system, int maxpolygons, int maxvertices, out IntPtr geometry);

		[PreserveSig]
		[Token(Token = "0x6000555")]
		[Address(RVA = "0x30D5918", Offset = "0x30D5918", VA = "0x30D5918")]
		private static extern RESULT FMOD5_System_SetGeometrySettings(IntPtr system, float maxworldsize);

		[PreserveSig]
		[Token(Token = "0x6000556")]
		[Address(RVA = "0x30D59B0", Offset = "0x30D59B0", VA = "0x30D59B0")]
		private static extern RESULT FMOD5_System_GetGeometrySettings(IntPtr system, out float maxworldsize);

		[PreserveSig]
		[Token(Token = "0x6000557")]
		[Address(RVA = "0x30D5A48", Offset = "0x30D5A48", VA = "0x30D5A48")]
		private static extern RESULT FMOD5_System_LoadGeometry(IntPtr system, IntPtr data, int datasize, out IntPtr geometry);

		[PreserveSig]
		[Token(Token = "0x6000558")]
		[Address(RVA = "0x30D5AF8", Offset = "0x30D5AF8", VA = "0x30D5AF8")]
		private static extern RESULT FMOD5_System_GetGeometryOcclusion(IntPtr system, ref VECTOR listener, ref VECTOR source, out float direct, out float reverb);

		[PreserveSig]
		[Token(Token = "0x6000559")]
		[Address(RVA = "0x30D5CF0", Offset = "0x30D5CF0", VA = "0x30D5CF0")]
		private static extern RESULT FMOD5_System_SetNetworkProxy(IntPtr system, byte[] proxy);

		[PreserveSig]
		[Token(Token = "0x600055A")]
		[Address(RVA = "0x30D5F40", Offset = "0x30D5F40", VA = "0x30D5F40")]
		private static extern RESULT FMOD5_System_GetNetworkProxy(IntPtr system, IntPtr proxy, int proxylen);

		[PreserveSig]
		[Token(Token = "0x600055B")]
		[Address(RVA = "0x30D5FE0", Offset = "0x30D5FE0", VA = "0x30D5FE0")]
		private static extern RESULT FMOD5_System_SetNetworkTimeout(IntPtr system, int timeout);

		[PreserveSig]
		[Token(Token = "0x600055C")]
		[Address(RVA = "0x30D6078", Offset = "0x30D6078", VA = "0x30D6078")]
		private static extern RESULT FMOD5_System_GetNetworkTimeout(IntPtr system, out int timeout);

		[PreserveSig]
		[Token(Token = "0x600055D")]
		[Address(RVA = "0x30D6110", Offset = "0x30D6110", VA = "0x30D6110")]
		private static extern RESULT FMOD5_System_SetUserData(IntPtr system, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x600055E")]
		[Address(RVA = "0x30D61A8", Offset = "0x30D61A8", VA = "0x30D61A8")]
		private static extern RESULT FMOD5_System_GetUserData(IntPtr system, out IntPtr userdata);

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x30D6238", Offset = "0x30D6238", VA = "0x30D6238")]
		public System(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x30D6240", Offset = "0x30D6240", VA = "0x30D6240")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x30D628C", Offset = "0x30D628C", VA = "0x30D628C")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x20000CD")]
	public struct Sound
	{
		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x30FA958", Offset = "0x30FA958", VA = "0x30FA958")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x30FA9E0", Offset = "0x30FA9E0", VA = "0x30FA9E0")]
		public RESULT getSystemObject(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x30FAA78", Offset = "0x30FAA78", VA = "0x30FAA78")]
		public RESULT @lock(uint offset, uint length, out IntPtr ptr1, out IntPtr ptr2, out uint len1, out uint len2)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x30FAB48", Offset = "0x30FAB48", VA = "0x30FAB48")]
		public RESULT unlock(IntPtr ptr1, IntPtr ptr2, uint len1, uint len2)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x30FAC00", Offset = "0x30FAC00", VA = "0x30FAC00")]
		public RESULT setDefaults(float frequency, int priority)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x30FACA8", Offset = "0x30FACA8", VA = "0x30FACA8")]
		public RESULT getDefaults(out float frequency, out int priority)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x30FAD48", Offset = "0x30FAD48", VA = "0x30FAD48")]
		public RESULT set3DMinMaxDistance(float min, float max)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x30FADE8", Offset = "0x30FADE8", VA = "0x30FADE8")]
		public RESULT get3DMinMaxDistance(out float min, out float max)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x30FAE88", Offset = "0x30FAE88", VA = "0x30FAE88")]
		public RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x30FAF38", Offset = "0x30FAF38", VA = "0x30FAF38")]
		public RESULT get3DConeSettings(out float insideconeangle, out float outsideconeangle, out float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x30FAFE8", Offset = "0x30FAFE8", VA = "0x30FAFE8")]
		public RESULT set3DCustomRolloff(ref VECTOR points, int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x30FB088", Offset = "0x30FB088", VA = "0x30FB088")]
		public RESULT get3DCustomRolloff(out IntPtr points, out int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x30FB128", Offset = "0x30FB128", VA = "0x30FB128")]
		public RESULT getSubSound(int index, out Sound subsound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x30FB1C8", Offset = "0x30FB1C8", VA = "0x30FB1C8")]
		public RESULT getSubSoundParent(out Sound parentsound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x30FB260", Offset = "0x30FB260", VA = "0x30FB260")]
		public RESULT getName(out string name, int namelen)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x30FB4B8", Offset = "0x30FB4B8", VA = "0x30FB4B8")]
		public RESULT getLength(out uint length, TIMEUNIT lengthtype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x30FB558", Offset = "0x30FB558", VA = "0x30FB558")]
		public RESULT getFormat(out SOUND_TYPE type, out SOUND_FORMAT format, out int channels, out int bits)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x30FB610", Offset = "0x30FB610", VA = "0x30FB610")]
		public RESULT getNumSubSounds(out int numsubsounds)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x30FB6A8", Offset = "0x30FB6A8", VA = "0x30FB6A8")]
		public RESULT getNumTags(out int numtags, out int numtagsupdated)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x30FB748", Offset = "0x30FB748", VA = "0x30FB748")]
		public RESULT getTag(string name, int index, out TAG tag)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x30FB994", Offset = "0x30FB994", VA = "0x30FB994")]
		public RESULT getOpenState(out OPENSTATE openstate, out uint percentbuffered, out bool starving, out bool diskbusy)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x30FBA70", Offset = "0x30FBA70", VA = "0x30FBA70")]
		public RESULT readData(IntPtr buffer, uint length, out uint read)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x30FBB20", Offset = "0x30FBB20", VA = "0x30FBB20")]
		public RESULT seekData(uint pcm)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x30FBBB8", Offset = "0x30FBBB8", VA = "0x30FBBB8")]
		public RESULT setSoundGroup(SoundGroup soundgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x30FBC50", Offset = "0x30FBC50", VA = "0x30FBC50")]
		public RESULT getSoundGroup(out SoundGroup soundgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x30FBCE8", Offset = "0x30FBCE8", VA = "0x30FBCE8")]
		public RESULT getNumSyncPoints(out int numsyncpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x30FBD80", Offset = "0x30FBD80", VA = "0x30FBD80")]
		public RESULT getSyncPoint(int index, out IntPtr point)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x30FBE20", Offset = "0x30FBE20", VA = "0x30FBE20")]
		public RESULT getSyncPointInfo(IntPtr point, out string name, int namelen, out uint offset, TIMEUNIT offsettype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x30FC0C0", Offset = "0x30FC0C0", VA = "0x30FC0C0")]
		public RESULT getSyncPointInfo(IntPtr point, out uint offset, TIMEUNIT offsettype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x30FC134", Offset = "0x30FC134", VA = "0x30FC134")]
		public RESULT addSyncPoint(uint offset, TIMEUNIT offsettype, string name, out IntPtr point)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x30FC35C", Offset = "0x30FC35C", VA = "0x30FC35C")]
		public RESULT deleteSyncPoint(IntPtr point)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x30FC3F4", Offset = "0x30FC3F4", VA = "0x30FC3F4")]
		public RESULT setMode(MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x30FC48C", Offset = "0x30FC48C", VA = "0x30FC48C")]
		public RESULT getMode(out MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x30FC524", Offset = "0x30FC524", VA = "0x30FC524")]
		public RESULT setLoopCount(int loopcount)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x30FC5BC", Offset = "0x30FC5BC", VA = "0x30FC5BC")]
		public RESULT getLoopCount(out int loopcount)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x30FC654", Offset = "0x30FC654", VA = "0x30FC654")]
		public RESULT setLoopPoints(uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x30FC70C", Offset = "0x30FC70C", VA = "0x30FC70C")]
		public RESULT getLoopPoints(out uint loopstart, TIMEUNIT loopstarttype, out uint loopend, TIMEUNIT loopendtype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x30FC7C4", Offset = "0x30FC7C4", VA = "0x30FC7C4")]
		public RESULT getMusicNumChannels(out int numchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x30FC85C", Offset = "0x30FC85C", VA = "0x30FC85C")]
		public RESULT setMusicChannelVolume(int channel, float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x30FC904", Offset = "0x30FC904", VA = "0x30FC904")]
		public RESULT getMusicChannelVolume(int channel, out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x30FC9A4", Offset = "0x30FC9A4", VA = "0x30FC9A4")]
		public RESULT setMusicSpeed(float speed)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x30FCA3C", Offset = "0x30FCA3C", VA = "0x30FCA3C")]
		public RESULT getMusicSpeed(out float speed)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x30FCAD4", Offset = "0x30FCAD4", VA = "0x30FCAD4")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x30FCB6C", Offset = "0x30FCB6C", VA = "0x30FCB6C")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x600058E")]
		[Address(RVA = "0x30FA960", Offset = "0x30FA960", VA = "0x30FA960")]
		private static extern RESULT FMOD5_Sound_Release(IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x600058F")]
		[Address(RVA = "0x30FA9E8", Offset = "0x30FA9E8", VA = "0x30FA9E8")]
		private static extern RESULT FMOD5_Sound_GetSystemObject(IntPtr sound, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000590")]
		[Address(RVA = "0x30FAA80", Offset = "0x30FAA80", VA = "0x30FAA80")]
		private static extern RESULT FMOD5_Sound_Lock(IntPtr sound, uint offset, uint length, out IntPtr ptr1, out IntPtr ptr2, out uint len1, out uint len2);

		[PreserveSig]
		[Token(Token = "0x6000591")]
		[Address(RVA = "0x30FAB50", Offset = "0x30FAB50", VA = "0x30FAB50")]
		private static extern RESULT FMOD5_Sound_Unlock(IntPtr sound, IntPtr ptr1, IntPtr ptr2, uint len1, uint len2);

		[PreserveSig]
		[Token(Token = "0x6000592")]
		[Address(RVA = "0x30FAC08", Offset = "0x30FAC08", VA = "0x30FAC08")]
		private static extern RESULT FMOD5_Sound_SetDefaults(IntPtr sound, float frequency, int priority);

		[PreserveSig]
		[Token(Token = "0x6000593")]
		[Address(RVA = "0x30FACB0", Offset = "0x30FACB0", VA = "0x30FACB0")]
		private static extern RESULT FMOD5_Sound_GetDefaults(IntPtr sound, out float frequency, out int priority);

		[PreserveSig]
		[Token(Token = "0x6000594")]
		[Address(RVA = "0x30FAD50", Offset = "0x30FAD50", VA = "0x30FAD50")]
		private static extern RESULT FMOD5_Sound_Set3DMinMaxDistance(IntPtr sound, float min, float max);

		[PreserveSig]
		[Token(Token = "0x6000595")]
		[Address(RVA = "0x30FADF0", Offset = "0x30FADF0", VA = "0x30FADF0")]
		private static extern RESULT FMOD5_Sound_Get3DMinMaxDistance(IntPtr sound, out float min, out float max);

		[PreserveSig]
		[Token(Token = "0x6000596")]
		[Address(RVA = "0x30FAE90", Offset = "0x30FAE90", VA = "0x30FAE90")]
		private static extern RESULT FMOD5_Sound_Set3DConeSettings(IntPtr sound, float insideconeangle, float outsideconeangle, float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000597")]
		[Address(RVA = "0x30FAF40", Offset = "0x30FAF40", VA = "0x30FAF40")]
		private static extern RESULT FMOD5_Sound_Get3DConeSettings(IntPtr sound, out float insideconeangle, out float outsideconeangle, out float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000598")]
		[Address(RVA = "0x30FAFF0", Offset = "0x30FAFF0", VA = "0x30FAFF0")]
		private static extern RESULT FMOD5_Sound_Set3DCustomRolloff(IntPtr sound, ref VECTOR points, int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000599")]
		[Address(RVA = "0x30FB090", Offset = "0x30FB090", VA = "0x30FB090")]
		private static extern RESULT FMOD5_Sound_Get3DCustomRolloff(IntPtr sound, out IntPtr points, out int numpoints);

		[PreserveSig]
		[Token(Token = "0x600059A")]
		[Address(RVA = "0x30FB130", Offset = "0x30FB130", VA = "0x30FB130")]
		private static extern RESULT FMOD5_Sound_GetSubSound(IntPtr sound, int index, out IntPtr subsound);

		[PreserveSig]
		[Token(Token = "0x600059B")]
		[Address(RVA = "0x30FB1D0", Offset = "0x30FB1D0", VA = "0x30FB1D0")]
		private static extern RESULT FMOD5_Sound_GetSubSoundParent(IntPtr sound, out IntPtr parentsound);

		[PreserveSig]
		[Token(Token = "0x600059C")]
		[Address(RVA = "0x30FB420", Offset = "0x30FB420", VA = "0x30FB420")]
		private static extern RESULT FMOD5_Sound_GetName(IntPtr sound, IntPtr name, int namelen);

		[PreserveSig]
		[Token(Token = "0x600059D")]
		[Address(RVA = "0x30FB4C0", Offset = "0x30FB4C0", VA = "0x30FB4C0")]
		private static extern RESULT FMOD5_Sound_GetLength(IntPtr sound, out uint length, TIMEUNIT lengthtype);

		[PreserveSig]
		[Token(Token = "0x600059E")]
		[Address(RVA = "0x30FB560", Offset = "0x30FB560", VA = "0x30FB560")]
		private static extern RESULT FMOD5_Sound_GetFormat(IntPtr sound, out SOUND_TYPE type, out SOUND_FORMAT format, out int channels, out int bits);

		[PreserveSig]
		[Token(Token = "0x600059F")]
		[Address(RVA = "0x30FB618", Offset = "0x30FB618", VA = "0x30FB618")]
		private static extern RESULT FMOD5_Sound_GetNumSubSounds(IntPtr sound, out int numsubsounds);

		[PreserveSig]
		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x30FB6B0", Offset = "0x30FB6B0", VA = "0x30FB6B0")]
		private static extern RESULT FMOD5_Sound_GetNumTags(IntPtr sound, out int numtags, out int numtagsupdated);

		[PreserveSig]
		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x30FB8B0", Offset = "0x30FB8B0", VA = "0x30FB8B0")]
		private static extern RESULT FMOD5_Sound_GetTag(IntPtr sound, byte[] name, int index, out TAG tag);

		[PreserveSig]
		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x30FB99C", Offset = "0x30FB99C", VA = "0x30FB99C")]
		private static extern RESULT FMOD5_Sound_GetOpenState(IntPtr sound, out OPENSTATE openstate, out uint percentbuffered, out bool starving, out bool diskbusy);

		[PreserveSig]
		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x30FBA78", Offset = "0x30FBA78", VA = "0x30FBA78")]
		private static extern RESULT FMOD5_Sound_ReadData(IntPtr sound, IntPtr buffer, uint length, out uint read);

		[PreserveSig]
		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x30FBB28", Offset = "0x30FBB28", VA = "0x30FBB28")]
		private static extern RESULT FMOD5_Sound_SeekData(IntPtr sound, uint pcm);

		[PreserveSig]
		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x30FBBC0", Offset = "0x30FBBC0", VA = "0x30FBBC0")]
		private static extern RESULT FMOD5_Sound_SetSoundGroup(IntPtr sound, IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x30FBC58", Offset = "0x30FBC58", VA = "0x30FBC58")]
		private static extern RESULT FMOD5_Sound_GetSoundGroup(IntPtr sound, out IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x30FBCF0", Offset = "0x30FBCF0", VA = "0x30FBCF0")]
		private static extern RESULT FMOD5_Sound_GetNumSyncPoints(IntPtr sound, out int numsyncpoints);

		[PreserveSig]
		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x30FBD88", Offset = "0x30FBD88", VA = "0x30FBD88")]
		private static extern RESULT FMOD5_Sound_GetSyncPoint(IntPtr sound, int index, out IntPtr point);

		[PreserveSig]
		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x30FC000", Offset = "0x30FC000", VA = "0x30FC000")]
		private static extern RESULT FMOD5_Sound_GetSyncPointInfo(IntPtr sound, IntPtr point, IntPtr name, int namelen, out uint offset, TIMEUNIT offsettype);

		[PreserveSig]
		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x30FC2A4", Offset = "0x30FC2A4", VA = "0x30FC2A4")]
		private static extern RESULT FMOD5_Sound_AddSyncPoint(IntPtr sound, uint offset, TIMEUNIT offsettype, byte[] name, out IntPtr point);

		[PreserveSig]
		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x30FC364", Offset = "0x30FC364", VA = "0x30FC364")]
		private static extern RESULT FMOD5_Sound_DeleteSyncPoint(IntPtr sound, IntPtr point);

		[PreserveSig]
		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x30FC3FC", Offset = "0x30FC3FC", VA = "0x30FC3FC")]
		private static extern RESULT FMOD5_Sound_SetMode(IntPtr sound, MODE mode);

		[PreserveSig]
		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x30FC494", Offset = "0x30FC494", VA = "0x30FC494")]
		private static extern RESULT FMOD5_Sound_GetMode(IntPtr sound, out MODE mode);

		[PreserveSig]
		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x30FC52C", Offset = "0x30FC52C", VA = "0x30FC52C")]
		private static extern RESULT FMOD5_Sound_SetLoopCount(IntPtr sound, int loopcount);

		[PreserveSig]
		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x30FC5C4", Offset = "0x30FC5C4", VA = "0x30FC5C4")]
		private static extern RESULT FMOD5_Sound_GetLoopCount(IntPtr sound, out int loopcount);

		[PreserveSig]
		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x30FC65C", Offset = "0x30FC65C", VA = "0x30FC65C")]
		private static extern RESULT FMOD5_Sound_SetLoopPoints(IntPtr sound, uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype);

		[PreserveSig]
		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x30FC714", Offset = "0x30FC714", VA = "0x30FC714")]
		private static extern RESULT FMOD5_Sound_GetLoopPoints(IntPtr sound, out uint loopstart, TIMEUNIT loopstarttype, out uint loopend, TIMEUNIT loopendtype);

		[PreserveSig]
		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x30FC7CC", Offset = "0x30FC7CC", VA = "0x30FC7CC")]
		private static extern RESULT FMOD5_Sound_GetMusicNumChannels(IntPtr sound, out int numchannels);

		[PreserveSig]
		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x30FC864", Offset = "0x30FC864", VA = "0x30FC864")]
		private static extern RESULT FMOD5_Sound_SetMusicChannelVolume(IntPtr sound, int channel, float volume);

		[PreserveSig]
		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x30FC90C", Offset = "0x30FC90C", VA = "0x30FC90C")]
		private static extern RESULT FMOD5_Sound_GetMusicChannelVolume(IntPtr sound, int channel, out float volume);

		[PreserveSig]
		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x30FC9AC", Offset = "0x30FC9AC", VA = "0x30FC9AC")]
		private static extern RESULT FMOD5_Sound_SetMusicSpeed(IntPtr sound, float speed);

		[PreserveSig]
		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x30FCA44", Offset = "0x30FCA44", VA = "0x30FCA44")]
		private static extern RESULT FMOD5_Sound_GetMusicSpeed(IntPtr sound, out float speed);

		[PreserveSig]
		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x30FCADC", Offset = "0x30FCADC", VA = "0x30FCADC")]
		private static extern RESULT FMOD5_Sound_SetUserData(IntPtr sound, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x30FCB74", Offset = "0x30FCB74", VA = "0x30FCB74")]
		private static extern RESULT FMOD5_Sound_GetUserData(IntPtr sound, out IntPtr userdata);

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x30FCC04", Offset = "0x30FCC04", VA = "0x30FCC04")]
		public Sound(IntPtr ptr)
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x30FCC0C", Offset = "0x30FCC0C", VA = "0x30FCC0C")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x30FCC58", Offset = "0x30FCC58", VA = "0x30FCC58")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x20000CE")]
	internal interface IChannelControl
	{
		[Token(Token = "0x60005BC")]
		RESULT getSystemObject(out System system);

		[Token(Token = "0x60005BD")]
		RESULT stop();

		[Token(Token = "0x60005BE")]
		RESULT setPaused(bool paused);

		[Token(Token = "0x60005BF")]
		RESULT getPaused(out bool paused);

		[Token(Token = "0x60005C0")]
		RESULT setVolume(float volume);

		[Token(Token = "0x60005C1")]
		RESULT getVolume(out float volume);

		[Token(Token = "0x60005C2")]
		RESULT setVolumeRamp(bool ramp);

		[Token(Token = "0x60005C3")]
		RESULT getVolumeRamp(out bool ramp);

		[Token(Token = "0x60005C4")]
		RESULT getAudibility(out float audibility);

		[Token(Token = "0x60005C5")]
		RESULT setPitch(float pitch);

		[Token(Token = "0x60005C6")]
		RESULT getPitch(out float pitch);

		[Token(Token = "0x60005C7")]
		RESULT setMute(bool mute);

		[Token(Token = "0x60005C8")]
		RESULT getMute(out bool mute);

		[Token(Token = "0x60005C9")]
		RESULT setReverbProperties(int instance, float wet);

		[Token(Token = "0x60005CA")]
		RESULT getReverbProperties(int instance, out float wet);

		[Token(Token = "0x60005CB")]
		RESULT setLowPassGain(float gain);

		[Token(Token = "0x60005CC")]
		RESULT getLowPassGain(out float gain);

		[Token(Token = "0x60005CD")]
		RESULT setMode(MODE mode);

		[Token(Token = "0x60005CE")]
		RESULT getMode(out MODE mode);

		[Token(Token = "0x60005CF")]
		RESULT setCallback(CHANNELCONTROL_CALLBACK callback);

		[Token(Token = "0x60005D0")]
		RESULT isPlaying(out bool isplaying);

		[Token(Token = "0x60005D1")]
		RESULT setPan(float pan);

		[Token(Token = "0x60005D2")]
		RESULT setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);

		[Token(Token = "0x60005D3")]
		RESULT setMixLevelsInput(float[] levels, int numlevels);

		[Token(Token = "0x60005D4")]
		RESULT setMixMatrix(float[] matrix, int outchannels, int inchannels, int inchannel_hop);

		[Token(Token = "0x60005D5")]
		RESULT getMixMatrix(float[] matrix, out int outchannels, out int inchannels, int inchannel_hop);

		[Token(Token = "0x60005D6")]
		RESULT getDSPClock(out ulong dspclock, out ulong parentclock);

		[Token(Token = "0x60005D7")]
		RESULT setDelay(ulong dspclock_start, ulong dspclock_end, bool stopchannels);

		[Token(Token = "0x60005D8")]
		RESULT getDelay(out ulong dspclock_start, out ulong dspclock_end);

		[Token(Token = "0x60005D9")]
		RESULT getDelay(out ulong dspclock_start, out ulong dspclock_end, out bool stopchannels);

		[Token(Token = "0x60005DA")]
		RESULT addFadePoint(ulong dspclock, float volume);

		[Token(Token = "0x60005DB")]
		RESULT setFadePointRamp(ulong dspclock, float volume);

		[Token(Token = "0x60005DC")]
		RESULT removeFadePoints(ulong dspclock_start, ulong dspclock_end);

		[Token(Token = "0x60005DD")]
		RESULT getFadePoints(ref uint numpoints, ulong[] point_dspclock, float[] point_volume);

		[Token(Token = "0x60005DE")]
		RESULT getDSP(int index, out DSP dsp);

		[Token(Token = "0x60005DF")]
		RESULT addDSP(int index, DSP dsp);

		[Token(Token = "0x60005E0")]
		RESULT removeDSP(DSP dsp);

		[Token(Token = "0x60005E1")]
		RESULT getNumDSPs(out int numdsps);

		[Token(Token = "0x60005E2")]
		RESULT setDSPIndex(DSP dsp, int index);

		[Token(Token = "0x60005E3")]
		RESULT getDSPIndex(DSP dsp, out int index);

		[Token(Token = "0x60005E4")]
		RESULT set3DAttributes(ref VECTOR pos, ref VECTOR vel);

		[Token(Token = "0x60005E5")]
		RESULT get3DAttributes(out VECTOR pos, out VECTOR vel);

		[Token(Token = "0x60005E6")]
		RESULT set3DMinMaxDistance(float mindistance, float maxdistance);

		[Token(Token = "0x60005E7")]
		RESULT get3DMinMaxDistance(out float mindistance, out float maxdistance);

		[Token(Token = "0x60005E8")]
		RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume);

		[Token(Token = "0x60005E9")]
		RESULT get3DConeSettings(out float insideconeangle, out float outsideconeangle, out float outsidevolume);

		[Token(Token = "0x60005EA")]
		RESULT set3DConeOrientation(ref VECTOR orientation);

		[Token(Token = "0x60005EB")]
		RESULT get3DConeOrientation(out VECTOR orientation);

		[Token(Token = "0x60005EC")]
		RESULT set3DCustomRolloff(ref VECTOR points, int numpoints);

		[Token(Token = "0x60005ED")]
		RESULT get3DCustomRolloff(out IntPtr points, out int numpoints);

		[Token(Token = "0x60005EE")]
		RESULT set3DOcclusion(float directocclusion, float reverbocclusion);

		[Token(Token = "0x60005EF")]
		RESULT get3DOcclusion(out float directocclusion, out float reverbocclusion);

		[Token(Token = "0x60005F0")]
		RESULT set3DSpread(float angle);

		[Token(Token = "0x60005F1")]
		RESULT get3DSpread(out float angle);

		[Token(Token = "0x60005F2")]
		RESULT set3DLevel(float level);

		[Token(Token = "0x60005F3")]
		RESULT get3DLevel(out float level);

		[Token(Token = "0x60005F4")]
		RESULT set3DDopplerLevel(float level);

		[Token(Token = "0x60005F5")]
		RESULT get3DDopplerLevel(out float level);

		[Token(Token = "0x60005F6")]
		RESULT set3DDistanceFilter(bool custom, float customLevel, float centerFreq);

		[Token(Token = "0x60005F7")]
		RESULT get3DDistanceFilter(out bool custom, out float customLevel, out float centerFreq);

		[Token(Token = "0x60005F8")]
		RESULT setUserData(IntPtr userdata);

		[Token(Token = "0x60005F9")]
		RESULT getUserData(out IntPtr userdata);
	}
	[Token(Token = "0x20000CF")]
	public struct Channel : IChannelControl
	{
		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x235503C", Offset = "0x235503C", VA = "0x235503C")]
		public RESULT setFrequency(float frequency)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x23550D4", Offset = "0x23550D4", VA = "0x23550D4")]
		public RESULT getFrequency(out float frequency)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x235516C", Offset = "0x235516C", VA = "0x235516C")]
		public RESULT setPriority(int priority)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x2355204", Offset = "0x2355204", VA = "0x2355204")]
		public RESULT getPriority(out int priority)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x235529C", Offset = "0x235529C", VA = "0x235529C")]
		public RESULT setPosition(uint position, TIMEUNIT postype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x235533C", Offset = "0x235533C", VA = "0x235533C")]
		public RESULT getPosition(out uint position, TIMEUNIT postype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x23553DC", Offset = "0x23553DC", VA = "0x23553DC")]
		public RESULT setChannelGroup(ChannelGroup channelgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x2355474", Offset = "0x2355474", VA = "0x2355474")]
		public RESULT getChannelGroup(out ChannelGroup channelgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x235550C", Offset = "0x235550C", VA = "0x235550C")]
		public RESULT setLoopCount(int loopcount)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x23555A4", Offset = "0x23555A4", VA = "0x23555A4")]
		public RESULT getLoopCount(out int loopcount)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x235563C", Offset = "0x235563C", VA = "0x235563C")]
		public RESULT setLoopPoints(uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x23556F4", Offset = "0x23556F4", VA = "0x23556F4")]
		public RESULT getLoopPoints(out uint loopstart, TIMEUNIT loopstarttype, out uint loopend, TIMEUNIT loopendtype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x23557AC", Offset = "0x23557AC", VA = "0x23557AC")]
		public RESULT isVirtual(out bool isvirtual)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x2355858", Offset = "0x2355858", VA = "0x2355858")]
		public RESULT getCurrentSound(out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x23558F0", Offset = "0x23558F0", VA = "0x23558F0")]
		public RESULT getIndex(out int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x2355988", Offset = "0x2355988", VA = "0x2355988", Slot = "4")]
		public RESULT getSystemObject(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x2355A20", Offset = "0x2355A20", VA = "0x2355A20", Slot = "5")]
		public RESULT stop()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x2355AA8", Offset = "0x2355AA8", VA = "0x2355AA8", Slot = "6")]
		public RESULT setPaused(bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x2355B44", Offset = "0x2355B44", VA = "0x2355B44", Slot = "7")]
		public RESULT getPaused(out bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x2355BF0", Offset = "0x2355BF0", VA = "0x2355BF0", Slot = "8")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x2355C88", Offset = "0x2355C88", VA = "0x2355C88", Slot = "9")]
		public RESULT getVolume(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x2355D20", Offset = "0x2355D20", VA = "0x2355D20", Slot = "10")]
		public RESULT setVolumeRamp(bool ramp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x2355DBC", Offset = "0x2355DBC", VA = "0x2355DBC", Slot = "11")]
		public RESULT getVolumeRamp(out bool ramp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x2355E68", Offset = "0x2355E68", VA = "0x2355E68", Slot = "12")]
		public RESULT getAudibility(out float audibility)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x2355F00", Offset = "0x2355F00", VA = "0x2355F00", Slot = "13")]
		public RESULT setPitch(float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x2355F98", Offset = "0x2355F98", VA = "0x2355F98", Slot = "14")]
		public RESULT getPitch(out float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x2356030", Offset = "0x2356030", VA = "0x2356030", Slot = "15")]
		public RESULT setMute(bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x23560CC", Offset = "0x23560CC", VA = "0x23560CC", Slot = "16")]
		public RESULT getMute(out bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x2356178", Offset = "0x2356178", VA = "0x2356178", Slot = "17")]
		public RESULT setReverbProperties(int instance, float wet)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x2356220", Offset = "0x2356220", VA = "0x2356220", Slot = "18")]
		public RESULT getReverbProperties(int instance, out float wet)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x23562C0", Offset = "0x23562C0", VA = "0x23562C0", Slot = "19")]
		public RESULT setLowPassGain(float gain)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x2356358", Offset = "0x2356358", VA = "0x2356358", Slot = "20")]
		public RESULT getLowPassGain(out float gain)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x23563F0", Offset = "0x23563F0", VA = "0x23563F0", Slot = "21")]
		public RESULT setMode(MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x2356488", Offset = "0x2356488", VA = "0x2356488", Slot = "22")]
		public RESULT getMode(out MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x2356520", Offset = "0x2356520", VA = "0x2356520", Slot = "23")]
		public RESULT setCallback(CHANNELCONTROL_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x23565C0", Offset = "0x23565C0", VA = "0x23565C0", Slot = "24")]
		public RESULT isPlaying(out bool isplaying)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x235666C", Offset = "0x235666C", VA = "0x235666C", Slot = "25")]
		public RESULT setPan(float pan)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x2356704", Offset = "0x2356704", VA = "0x2356704", Slot = "26")]
		public RESULT setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x23567EC", Offset = "0x23567EC", VA = "0x23567EC", Slot = "27")]
		public RESULT setMixLevelsInput(float[] levels, int numlevels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x2356894", Offset = "0x2356894", VA = "0x2356894", Slot = "28")]
		public RESULT setMixMatrix(float[] matrix, int outchannels, int inchannels, int inchannel_hop = 0)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x2356954", Offset = "0x2356954", VA = "0x2356954", Slot = "29")]
		public RESULT getMixMatrix(float[] matrix, out int outchannels, out int inchannels, int inchannel_hop = 0)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x2356A14", Offset = "0x2356A14", VA = "0x2356A14", Slot = "30")]
		public RESULT getDSPClock(out ulong dspclock, out ulong parentclock)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x2356AB4", Offset = "0x2356AB4", VA = "0x2356AB4", Slot = "31")]
		public RESULT setDelay(ulong dspclock_start, ulong dspclock_end, bool stopchannels = true)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x2356B68", Offset = "0x2356B68", VA = "0x2356B68", Slot = "32")]
		public RESULT getDelay(out ulong dspclock_start, out ulong dspclock_end)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x2356C70", Offset = "0x2356C70", VA = "0x2356C70", Slot = "33")]
		public RESULT getDelay(out ulong dspclock_start, out ulong dspclock_end, out bool stopchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x2356D34", Offset = "0x2356D34", VA = "0x2356D34", Slot = "34")]
		public RESULT addFadePoint(ulong dspclock, float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x2356DDC", Offset = "0x2356DDC", VA = "0x2356DDC", Slot = "35")]
		public RESULT setFadePointRamp(ulong dspclock, float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x2356E84", Offset = "0x2356E84", VA = "0x2356E84", Slot = "36")]
		public RESULT removeFadePoints(ulong dspclock_start, ulong dspclock_end)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x2356F24", Offset = "0x2356F24", VA = "0x2356F24", Slot = "37")]
		public RESULT getFadePoints(ref uint numpoints, ulong[] point_dspclock, float[] point_volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x2356FE4", Offset = "0x2356FE4", VA = "0x2356FE4", Slot = "38")]
		public RESULT getDSP(int index, out DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x2357080", Offset = "0x2357080", VA = "0x2357080", Slot = "39")]
		public RESULT addDSP(int index, DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x235711C", Offset = "0x235711C", VA = "0x235711C", Slot = "40")]
		public RESULT removeDSP(DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x23571B4", Offset = "0x23571B4", VA = "0x23571B4", Slot = "41")]
		public RESULT getNumDSPs(out int numdsps)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x235724C", Offset = "0x235724C", VA = "0x235724C", Slot = "42")]
		public RESULT setDSPIndex(DSP dsp, int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x23572EC", Offset = "0x23572EC", VA = "0x23572EC", Slot = "43")]
		public RESULT getDSPIndex(DSP dsp, out int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x235738C", Offset = "0x235738C", VA = "0x235738C", Slot = "44")]
		public RESULT set3DAttributes(ref VECTOR pos, ref VECTOR vel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x235742C", Offset = "0x235742C", VA = "0x235742C", Slot = "45")]
		public RESULT get3DAttributes(out VECTOR pos, out VECTOR vel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x23574CC", Offset = "0x23574CC", VA = "0x23574CC", Slot = "46")]
		public RESULT set3DMinMaxDistance(float mindistance, float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x235756C", Offset = "0x235756C", VA = "0x235756C", Slot = "47")]
		public RESULT get3DMinMaxDistance(out float mindistance, out float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x235760C", Offset = "0x235760C", VA = "0x235760C", Slot = "48")]
		public RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x23576BC", Offset = "0x23576BC", VA = "0x23576BC", Slot = "49")]
		public RESULT get3DConeSettings(out float insideconeangle, out float outsideconeangle, out float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x235776C", Offset = "0x235776C", VA = "0x235776C", Slot = "50")]
		public RESULT set3DConeOrientation(ref VECTOR orientation)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x2357804", Offset = "0x2357804", VA = "0x2357804", Slot = "51")]
		public RESULT get3DConeOrientation(out VECTOR orientation)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x235789C", Offset = "0x235789C", VA = "0x235789C", Slot = "52")]
		public RESULT set3DCustomRolloff(ref VECTOR points, int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x235793C", Offset = "0x235793C", VA = "0x235793C", Slot = "53")]
		public RESULT get3DCustomRolloff(out IntPtr points, out int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x23579DC", Offset = "0x23579DC", VA = "0x23579DC", Slot = "54")]
		public RESULT set3DOcclusion(float directocclusion, float reverbocclusion)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x2357A7C", Offset = "0x2357A7C", VA = "0x2357A7C", Slot = "55")]
		public RESULT get3DOcclusion(out float directocclusion, out float reverbocclusion)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x2357B1C", Offset = "0x2357B1C", VA = "0x2357B1C", Slot = "56")]
		public RESULT set3DSpread(float angle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x2357BB4", Offset = "0x2357BB4", VA = "0x2357BB4", Slot = "57")]
		public RESULT get3DSpread(out float angle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x2357C4C", Offset = "0x2357C4C", VA = "0x2357C4C", Slot = "58")]
		public RESULT set3DLevel(float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x2357CE4", Offset = "0x2357CE4", VA = "0x2357CE4", Slot = "59")]
		public RESULT get3DLevel(out float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x2357D7C", Offset = "0x2357D7C", VA = "0x2357D7C", Slot = "60")]
		public RESULT set3DDopplerLevel(float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x2357E14", Offset = "0x2357E14", VA = "0x2357E14", Slot = "61")]
		public RESULT get3DDopplerLevel(out float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x2357EAC", Offset = "0x2357EAC", VA = "0x2357EAC", Slot = "62")]
		public RESULT set3DDistanceFilter(bool custom, float customLevel, float centerFreq)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x2357F60", Offset = "0x2357F60", VA = "0x2357F60", Slot = "63")]
		public RESULT get3DDistanceFilter(out bool custom, out float customLevel, out float centerFreq)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x2358024", Offset = "0x2358024", VA = "0x2358024", Slot = "64")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x23580BC", Offset = "0x23580BC", VA = "0x23580BC", Slot = "65")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000647")]
		[Address(RVA = "0x2355044", Offset = "0x2355044", VA = "0x2355044")]
		private static extern RESULT FMOD5_Channel_SetFrequency(IntPtr channel, float frequency);

		[PreserveSig]
		[Token(Token = "0x6000648")]
		[Address(RVA = "0x23550DC", Offset = "0x23550DC", VA = "0x23550DC")]
		private static extern RESULT FMOD5_Channel_GetFrequency(IntPtr channel, out float frequency);

		[PreserveSig]
		[Token(Token = "0x6000649")]
		[Address(RVA = "0x2355174", Offset = "0x2355174", VA = "0x2355174")]
		private static extern RESULT FMOD5_Channel_SetPriority(IntPtr channel, int priority);

		[PreserveSig]
		[Token(Token = "0x600064A")]
		[Address(RVA = "0x235520C", Offset = "0x235520C", VA = "0x235520C")]
		private static extern RESULT FMOD5_Channel_GetPriority(IntPtr channel, out int priority);

		[PreserveSig]
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x23552A4", Offset = "0x23552A4", VA = "0x23552A4")]
		private static extern RESULT FMOD5_Channel_SetPosition(IntPtr channel, uint position, TIMEUNIT postype);

		[PreserveSig]
		[Token(Token = "0x600064C")]
		[Address(RVA = "0x2355344", Offset = "0x2355344", VA = "0x2355344")]
		private static extern RESULT FMOD5_Channel_GetPosition(IntPtr channel, out uint position, TIMEUNIT postype);

		[PreserveSig]
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x23553E4", Offset = "0x23553E4", VA = "0x23553E4")]
		private static extern RESULT FMOD5_Channel_SetChannelGroup(IntPtr channel, IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x600064E")]
		[Address(RVA = "0x235547C", Offset = "0x235547C", VA = "0x235547C")]
		private static extern RESULT FMOD5_Channel_GetChannelGroup(IntPtr channel, out IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x600064F")]
		[Address(RVA = "0x2355514", Offset = "0x2355514", VA = "0x2355514")]
		private static extern RESULT FMOD5_Channel_SetLoopCount(IntPtr channel, int loopcount);

		[PreserveSig]
		[Token(Token = "0x6000650")]
		[Address(RVA = "0x23555AC", Offset = "0x23555AC", VA = "0x23555AC")]
		private static extern RESULT FMOD5_Channel_GetLoopCount(IntPtr channel, out int loopcount);

		[PreserveSig]
		[Token(Token = "0x6000651")]
		[Address(RVA = "0x2355644", Offset = "0x2355644", VA = "0x2355644")]
		private static extern RESULT FMOD5_Channel_SetLoopPoints(IntPtr channel, uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype);

		[PreserveSig]
		[Token(Token = "0x6000652")]
		[Address(RVA = "0x23556FC", Offset = "0x23556FC", VA = "0x23556FC")]
		private static extern RESULT FMOD5_Channel_GetLoopPoints(IntPtr channel, out uint loopstart, TIMEUNIT loopstarttype, out uint loopend, TIMEUNIT loopendtype);

		[PreserveSig]
		[Token(Token = "0x6000653")]
		[Address(RVA = "0x23557B4", Offset = "0x23557B4", VA = "0x23557B4")]
		private static extern RESULT FMOD5_Channel_IsVirtual(IntPtr channel, out bool isvirtual);

		[PreserveSig]
		[Token(Token = "0x6000654")]
		[Address(RVA = "0x2355860", Offset = "0x2355860", VA = "0x2355860")]
		private static extern RESULT FMOD5_Channel_GetCurrentSound(IntPtr channel, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x6000655")]
		[Address(RVA = "0x23558F8", Offset = "0x23558F8", VA = "0x23558F8")]
		private static extern RESULT FMOD5_Channel_GetIndex(IntPtr channel, out int index);

		[PreserveSig]
		[Token(Token = "0x6000656")]
		[Address(RVA = "0x2355990", Offset = "0x2355990", VA = "0x2355990")]
		private static extern RESULT FMOD5_Channel_GetSystemObject(IntPtr channel, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000657")]
		[Address(RVA = "0x2355A28", Offset = "0x2355A28", VA = "0x2355A28")]
		private static extern RESULT FMOD5_Channel_Stop(IntPtr channel);

		[PreserveSig]
		[Token(Token = "0x6000658")]
		[Address(RVA = "0x2355AB4", Offset = "0x2355AB4", VA = "0x2355AB4")]
		private static extern RESULT FMOD5_Channel_SetPaused(IntPtr channel, bool paused);

		[PreserveSig]
		[Token(Token = "0x6000659")]
		[Address(RVA = "0x2355B4C", Offset = "0x2355B4C", VA = "0x2355B4C")]
		private static extern RESULT FMOD5_Channel_GetPaused(IntPtr channel, out bool paused);

		[PreserveSig]
		[Token(Token = "0x600065A")]
		[Address(RVA = "0x2355BF8", Offset = "0x2355BF8", VA = "0x2355BF8")]
		private static extern RESULT FMOD5_Channel_SetVolume(IntPtr channel, float volume);

		[PreserveSig]
		[Token(Token = "0x600065B")]
		[Address(RVA = "0x2355C90", Offset = "0x2355C90", VA = "0x2355C90")]
		private static extern RESULT FMOD5_Channel_GetVolume(IntPtr channel, out float volume);

		[PreserveSig]
		[Token(Token = "0x600065C")]
		[Address(RVA = "0x2355D2C", Offset = "0x2355D2C", VA = "0x2355D2C")]
		private static extern RESULT FMOD5_Channel_SetVolumeRamp(IntPtr channel, bool ramp);

		[PreserveSig]
		[Token(Token = "0x600065D")]
		[Address(RVA = "0x2355DC4", Offset = "0x2355DC4", VA = "0x2355DC4")]
		private static extern RESULT FMOD5_Channel_GetVolumeRamp(IntPtr channel, out bool ramp);

		[PreserveSig]
		[Token(Token = "0x600065E")]
		[Address(RVA = "0x2355E70", Offset = "0x2355E70", VA = "0x2355E70")]
		private static extern RESULT FMOD5_Channel_GetAudibility(IntPtr channel, out float audibility);

		[PreserveSig]
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x2355F08", Offset = "0x2355F08", VA = "0x2355F08")]
		private static extern RESULT FMOD5_Channel_SetPitch(IntPtr channel, float pitch);

		[PreserveSig]
		[Token(Token = "0x6000660")]
		[Address(RVA = "0x2355FA0", Offset = "0x2355FA0", VA = "0x2355FA0")]
		private static extern RESULT FMOD5_Channel_GetPitch(IntPtr channel, out float pitch);

		[PreserveSig]
		[Token(Token = "0x6000661")]
		[Address(RVA = "0x235603C", Offset = "0x235603C", VA = "0x235603C")]
		private static extern RESULT FMOD5_Channel_SetMute(IntPtr channel, bool mute);

		[PreserveSig]
		[Token(Token = "0x6000662")]
		[Address(RVA = "0x23560D4", Offset = "0x23560D4", VA = "0x23560D4")]
		private static extern RESULT FMOD5_Channel_GetMute(IntPtr channel, out bool mute);

		[PreserveSig]
		[Token(Token = "0x6000663")]
		[Address(RVA = "0x2356180", Offset = "0x2356180", VA = "0x2356180")]
		private static extern RESULT FMOD5_Channel_SetReverbProperties(IntPtr channel, int instance, float wet);

		[PreserveSig]
		[Token(Token = "0x6000664")]
		[Address(RVA = "0x2356228", Offset = "0x2356228", VA = "0x2356228")]
		private static extern RESULT FMOD5_Channel_GetReverbProperties(IntPtr channel, int instance, out float wet);

		[PreserveSig]
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x23562C8", Offset = "0x23562C8", VA = "0x23562C8")]
		private static extern RESULT FMOD5_Channel_SetLowPassGain(IntPtr channel, float gain);

		[PreserveSig]
		[Token(Token = "0x6000666")]
		[Address(RVA = "0x2356360", Offset = "0x2356360", VA = "0x2356360")]
		private static extern RESULT FMOD5_Channel_GetLowPassGain(IntPtr channel, out float gain);

		[PreserveSig]
		[Token(Token = "0x6000667")]
		[Address(RVA = "0x23563F8", Offset = "0x23563F8", VA = "0x23563F8")]
		private static extern RESULT FMOD5_Channel_SetMode(IntPtr channel, MODE mode);

		[PreserveSig]
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x2356490", Offset = "0x2356490", VA = "0x2356490")]
		private static extern RESULT FMOD5_Channel_GetMode(IntPtr channel, out MODE mode);

		[PreserveSig]
		[Token(Token = "0x6000669")]
		[Address(RVA = "0x2356528", Offset = "0x2356528", VA = "0x2356528")]
		private static extern RESULT FMOD5_Channel_SetCallback(IntPtr channel, CHANNELCONTROL_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x600066A")]
		[Address(RVA = "0x23565C8", Offset = "0x23565C8", VA = "0x23565C8")]
		private static extern RESULT FMOD5_Channel_IsPlaying(IntPtr channel, out bool isplaying);

		[PreserveSig]
		[Token(Token = "0x600066B")]
		[Address(RVA = "0x2356674", Offset = "0x2356674", VA = "0x2356674")]
		private static extern RESULT FMOD5_Channel_SetPan(IntPtr channel, float pan);

		[PreserveSig]
		[Token(Token = "0x600066C")]
		[Address(RVA = "0x235670C", Offset = "0x235670C", VA = "0x235670C")]
		private static extern RESULT FMOD5_Channel_SetMixLevelsOutput(IntPtr channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);

		[PreserveSig]
		[Token(Token = "0x600066D")]
		[Address(RVA = "0x23567F4", Offset = "0x23567F4", VA = "0x23567F4")]
		private static extern RESULT FMOD5_Channel_SetMixLevelsInput(IntPtr channel, float[] levels, int numlevels);

		[PreserveSig]
		[Token(Token = "0x600066E")]
		[Address(RVA = "0x235689C", Offset = "0x235689C", VA = "0x235689C")]
		private static extern RESULT FMOD5_Channel_SetMixMatrix(IntPtr channel, float[] matrix, int outchannels, int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x600066F")]
		[Address(RVA = "0x235695C", Offset = "0x235695C", VA = "0x235695C")]
		private static extern RESULT FMOD5_Channel_GetMixMatrix(IntPtr channel, float[] matrix, out int outchannels, out int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x6000670")]
		[Address(RVA = "0x2356A1C", Offset = "0x2356A1C", VA = "0x2356A1C")]
		private static extern RESULT FMOD5_Channel_GetDSPClock(IntPtr channel, out ulong dspclock, out ulong parentclock);

		[PreserveSig]
		[Token(Token = "0x6000671")]
		[Address(RVA = "0x2356AC0", Offset = "0x2356AC0", VA = "0x2356AC0")]
		private static extern RESULT FMOD5_Channel_SetDelay(IntPtr channel, ulong dspclock_start, ulong dspclock_end, bool stopchannels);

		[PreserveSig]
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x2356BC8", Offset = "0x2356BC8", VA = "0x2356BC8")]
		private static extern RESULT FMOD5_Channel_GetDelay(IntPtr channel, out ulong dspclock_start, out ulong dspclock_end, IntPtr zero);

		[PreserveSig]
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x2356C78", Offset = "0x2356C78", VA = "0x2356C78")]
		private static extern RESULT FMOD5_Channel_GetDelay(IntPtr channel, out ulong dspclock_start, out ulong dspclock_end, out bool stopchannels);

		[PreserveSig]
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x2356D3C", Offset = "0x2356D3C", VA = "0x2356D3C")]
		private static extern RESULT FMOD5_Channel_AddFadePoint(IntPtr channel, ulong dspclock, float volume);

		[PreserveSig]
		[Token(Token = "0x6000675")]
		[Address(RVA = "0x2356DE4", Offset = "0x2356DE4", VA = "0x2356DE4")]
		private static extern RESULT FMOD5_Channel_SetFadePointRamp(IntPtr channel, ulong dspclock, float volume);

		[PreserveSig]
		[Token(Token = "0x6000676")]
		[Address(RVA = "0x2356E8C", Offset = "0x2356E8C", VA = "0x2356E8C")]
		private static extern RESULT FMOD5_Channel_RemoveFadePoints(IntPtr channel, ulong dspclock_start, ulong dspclock_end);

		[PreserveSig]
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x2356F2C", Offset = "0x2356F2C", VA = "0x2356F2C")]
		private static extern RESULT FMOD5_Channel_GetFadePoints(IntPtr channel, ref uint numpoints, ulong[] point_dspclock, float[] point_volume);

		[PreserveSig]
		[Token(Token = "0x6000678")]
		[Address(RVA = "0x2356FEC", Offset = "0x2356FEC", VA = "0x2356FEC")]
		private static extern RESULT FMOD5_Channel_GetDSP(IntPtr channel, int index, out IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000679")]
		[Address(RVA = "0x2357088", Offset = "0x2357088", VA = "0x2357088")]
		private static extern RESULT FMOD5_Channel_AddDSP(IntPtr channel, int index, IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x600067A")]
		[Address(RVA = "0x2357124", Offset = "0x2357124", VA = "0x2357124")]
		private static extern RESULT FMOD5_Channel_RemoveDSP(IntPtr channel, IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x600067B")]
		[Address(RVA = "0x23571BC", Offset = "0x23571BC", VA = "0x23571BC")]
		private static extern RESULT FMOD5_Channel_GetNumDSPs(IntPtr channel, out int numdsps);

		[PreserveSig]
		[Token(Token = "0x600067C")]
		[Address(RVA = "0x2357254", Offset = "0x2357254", VA = "0x2357254")]
		private static extern RESULT FMOD5_Channel_SetDSPIndex(IntPtr channel, IntPtr dsp, int index);

		[PreserveSig]
		[Token(Token = "0x600067D")]
		[Address(RVA = "0x23572F4", Offset = "0x23572F4", VA = "0x23572F4")]
		private static extern RESULT FMOD5_Channel_GetDSPIndex(IntPtr channel, IntPtr dsp, out int index);

		[PreserveSig]
		[Token(Token = "0x600067E")]
		[Address(RVA = "0x2357394", Offset = "0x2357394", VA = "0x2357394")]
		private static extern RESULT FMOD5_Channel_Set3DAttributes(IntPtr channel, ref VECTOR pos, ref VECTOR vel);

		[PreserveSig]
		[Token(Token = "0x600067F")]
		[Address(RVA = "0x2357434", Offset = "0x2357434", VA = "0x2357434")]
		private static extern RESULT FMOD5_Channel_Get3DAttributes(IntPtr channel, out VECTOR pos, out VECTOR vel);

		[PreserveSig]
		[Token(Token = "0x6000680")]
		[Address(RVA = "0x23574D4", Offset = "0x23574D4", VA = "0x23574D4")]
		private static extern RESULT FMOD5_Channel_Set3DMinMaxDistance(IntPtr channel, float mindistance, float maxdistance);

		[PreserveSig]
		[Token(Token = "0x6000681")]
		[Address(RVA = "0x2357574", Offset = "0x2357574", VA = "0x2357574")]
		private static extern RESULT FMOD5_Channel_Get3DMinMaxDistance(IntPtr channel, out float mindistance, out float maxdistance);

		[PreserveSig]
		[Token(Token = "0x6000682")]
		[Address(RVA = "0x2357614", Offset = "0x2357614", VA = "0x2357614")]
		private static extern RESULT FMOD5_Channel_Set3DConeSettings(IntPtr channel, float insideconeangle, float outsideconeangle, float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000683")]
		[Address(RVA = "0x23576C4", Offset = "0x23576C4", VA = "0x23576C4")]
		private static extern RESULT FMOD5_Channel_Get3DConeSettings(IntPtr channel, out float insideconeangle, out float outsideconeangle, out float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000684")]
		[Address(RVA = "0x2357774", Offset = "0x2357774", VA = "0x2357774")]
		private static extern RESULT FMOD5_Channel_Set3DConeOrientation(IntPtr channel, ref VECTOR orientation);

		[PreserveSig]
		[Token(Token = "0x6000685")]
		[Address(RVA = "0x235780C", Offset = "0x235780C", VA = "0x235780C")]
		private static extern RESULT FMOD5_Channel_Get3DConeOrientation(IntPtr channel, out VECTOR orientation);

		[PreserveSig]
		[Token(Token = "0x6000686")]
		[Address(RVA = "0x23578A4", Offset = "0x23578A4", VA = "0x23578A4")]
		private static extern RESULT FMOD5_Channel_Set3DCustomRolloff(IntPtr channel, ref VECTOR points, int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000687")]
		[Address(RVA = "0x2357944", Offset = "0x2357944", VA = "0x2357944")]
		private static extern RESULT FMOD5_Channel_Get3DCustomRolloff(IntPtr channel, out IntPtr points, out int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000688")]
		[Address(RVA = "0x23579E4", Offset = "0x23579E4", VA = "0x23579E4")]
		private static extern RESULT FMOD5_Channel_Set3DOcclusion(IntPtr channel, float directocclusion, float reverbocclusion);

		[PreserveSig]
		[Token(Token = "0x6000689")]
		[Address(RVA = "0x2357A84", Offset = "0x2357A84", VA = "0x2357A84")]
		private static extern RESULT FMOD5_Channel_Get3DOcclusion(IntPtr channel, out float directocclusion, out float reverbocclusion);

		[PreserveSig]
		[Token(Token = "0x600068A")]
		[Address(RVA = "0x2357B24", Offset = "0x2357B24", VA = "0x2357B24")]
		private static extern RESULT FMOD5_Channel_Set3DSpread(IntPtr channel, float angle);

		[PreserveSig]
		[Token(Token = "0x600068B")]
		[Address(RVA = "0x2357BBC", Offset = "0x2357BBC", VA = "0x2357BBC")]
		private static extern RESULT FMOD5_Channel_Get3DSpread(IntPtr channel, out float angle);

		[PreserveSig]
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x2357C54", Offset = "0x2357C54", VA = "0x2357C54")]
		private static extern RESULT FMOD5_Channel_Set3DLevel(IntPtr channel, float level);

		[PreserveSig]
		[Token(Token = "0x600068D")]
		[Address(RVA = "0x2357CEC", Offset = "0x2357CEC", VA = "0x2357CEC")]
		private static extern RESULT FMOD5_Channel_Get3DLevel(IntPtr channel, out float level);

		[PreserveSig]
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x2357D84", Offset = "0x2357D84", VA = "0x2357D84")]
		private static extern RESULT FMOD5_Channel_Set3DDopplerLevel(IntPtr channel, float level);

		[PreserveSig]
		[Token(Token = "0x600068F")]
		[Address(RVA = "0x2357E1C", Offset = "0x2357E1C", VA = "0x2357E1C")]
		private static extern RESULT FMOD5_Channel_Get3DDopplerLevel(IntPtr channel, out float level);

		[PreserveSig]
		[Token(Token = "0x6000690")]
		[Address(RVA = "0x2357EB8", Offset = "0x2357EB8", VA = "0x2357EB8")]
		private static extern RESULT FMOD5_Channel_Set3DDistanceFilter(IntPtr channel, bool custom, float customLevel, float centerFreq);

		[PreserveSig]
		[Token(Token = "0x6000691")]
		[Address(RVA = "0x2357F68", Offset = "0x2357F68", VA = "0x2357F68")]
		private static extern RESULT FMOD5_Channel_Get3DDistanceFilter(IntPtr channel, out bool custom, out float customLevel, out float centerFreq);

		[PreserveSig]
		[Token(Token = "0x6000692")]
		[Address(RVA = "0x235802C", Offset = "0x235802C", VA = "0x235802C")]
		private static extern RESULT FMOD5_Channel_SetUserData(IntPtr channel, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000693")]
		[Address(RVA = "0x23580C4", Offset = "0x23580C4", VA = "0x23580C4")]
		private static extern RESULT FMOD5_Channel_GetUserData(IntPtr channel, out IntPtr userdata);

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x2358154", Offset = "0x2358154", VA = "0x2358154")]
		public Channel(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x235815C", Offset = "0x235815C", VA = "0x235815C")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x23581A8", Offset = "0x23581A8", VA = "0x23581A8")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x20000D0")]
	public struct ChannelGroup : IChannelControl
	{
		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x30E6AC8", Offset = "0x30E6AC8", VA = "0x30E6AC8")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x30E6B50", Offset = "0x30E6B50", VA = "0x30E6B50")]
		public RESULT addGroup(ChannelGroup group, bool propagatedspclock = true)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x30E6C58", Offset = "0x30E6C58", VA = "0x30E6C58")]
		public RESULT addGroup(ChannelGroup group, bool propagatedspclock, out DSPConnection connection)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x30E6D0C", Offset = "0x30E6D0C", VA = "0x30E6D0C")]
		public RESULT getNumGroups(out int numgroups)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x30E6DA4", Offset = "0x30E6DA4", VA = "0x30E6DA4")]
		public RESULT getGroup(int index, out ChannelGroup group)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x30E6E44", Offset = "0x30E6E44", VA = "0x30E6E44")]
		public RESULT getParentGroup(out ChannelGroup group)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x30E6EDC", Offset = "0x30E6EDC", VA = "0x30E6EDC")]
		public RESULT getName(out string name, int namelen)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x30E7134", Offset = "0x30E7134", VA = "0x30E7134")]
		public RESULT getNumChannels(out int numchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x30E71CC", Offset = "0x30E71CC", VA = "0x30E71CC")]
		public RESULT getChannel(int index, out Channel channel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x30E726C", Offset = "0x30E726C", VA = "0x30E726C", Slot = "4")]
		public RESULT getSystemObject(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x30E7304", Offset = "0x30E7304", VA = "0x30E7304", Slot = "5")]
		public RESULT stop()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x30E738C", Offset = "0x30E738C", VA = "0x30E738C", Slot = "6")]
		public RESULT setPaused(bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x30E7428", Offset = "0x30E7428", VA = "0x30E7428", Slot = "7")]
		public RESULT getPaused(out bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x30E74D4", Offset = "0x30E74D4", VA = "0x30E74D4", Slot = "8")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x30E756C", Offset = "0x30E756C", VA = "0x30E756C", Slot = "9")]
		public RESULT getVolume(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x30E7604", Offset = "0x30E7604", VA = "0x30E7604", Slot = "10")]
		public RESULT setVolumeRamp(bool ramp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x30E76A0", Offset = "0x30E76A0", VA = "0x30E76A0", Slot = "11")]
		public RESULT getVolumeRamp(out bool ramp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x30E774C", Offset = "0x30E774C", VA = "0x30E774C", Slot = "12")]
		public RESULT getAudibility(out float audibility)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x30E77E4", Offset = "0x30E77E4", VA = "0x30E77E4", Slot = "13")]
		public RESULT setPitch(float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x30E787C", Offset = "0x30E787C", VA = "0x30E787C", Slot = "14")]
		public RESULT getPitch(out float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x30E7914", Offset = "0x30E7914", VA = "0x30E7914", Slot = "15")]
		public RESULT setMute(bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x30E79B0", Offset = "0x30E79B0", VA = "0x30E79B0", Slot = "16")]
		public RESULT getMute(out bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x30E7A5C", Offset = "0x30E7A5C", VA = "0x30E7A5C", Slot = "17")]
		public RESULT setReverbProperties(int instance, float wet)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x30E7B04", Offset = "0x30E7B04", VA = "0x30E7B04", Slot = "18")]
		public RESULT getReverbProperties(int instance, out float wet)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x30E7BA4", Offset = "0x30E7BA4", VA = "0x30E7BA4", Slot = "19")]
		public RESULT setLowPassGain(float gain)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x30E7C3C", Offset = "0x30E7C3C", VA = "0x30E7C3C", Slot = "20")]
		public RESULT getLowPassGain(out float gain)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x30E7CD4", Offset = "0x30E7CD4", VA = "0x30E7CD4", Slot = "21")]
		public RESULT setMode(MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x30E7D6C", Offset = "0x30E7D6C", VA = "0x30E7D6C", Slot = "22")]
		public RESULT getMode(out MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x30E7E04", Offset = "0x30E7E04", VA = "0x30E7E04", Slot = "23")]
		public RESULT setCallback(CHANNELCONTROL_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x30E7EA4", Offset = "0x30E7EA4", VA = "0x30E7EA4", Slot = "24")]
		public RESULT isPlaying(out bool isplaying)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x30E7F50", Offset = "0x30E7F50", VA = "0x30E7F50", Slot = "25")]
		public RESULT setPan(float pan)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x30E7FE8", Offset = "0x30E7FE8", VA = "0x30E7FE8", Slot = "26")]
		public RESULT setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x30E80D0", Offset = "0x30E80D0", VA = "0x30E80D0", Slot = "27")]
		public RESULT setMixLevelsInput(float[] levels, int numlevels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x30E8178", Offset = "0x30E8178", VA = "0x30E8178", Slot = "28")]
		public RESULT setMixMatrix(float[] matrix, int outchannels, int inchannels, int inchannel_hop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x30E8238", Offset = "0x30E8238", VA = "0x30E8238", Slot = "29")]
		public RESULT getMixMatrix(float[] matrix, out int outchannels, out int inchannels, int inchannel_hop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x30E82F8", Offset = "0x30E82F8", VA = "0x30E82F8", Slot = "30")]
		public RESULT getDSPClock(out ulong dspclock, out ulong parentclock)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x30E8398", Offset = "0x30E8398", VA = "0x30E8398", Slot = "31")]
		public RESULT setDelay(ulong dspclock_start, ulong dspclock_end, bool stopchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x30E844C", Offset = "0x30E844C", VA = "0x30E844C", Slot = "32")]
		public RESULT getDelay(out ulong dspclock_start, out ulong dspclock_end)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x30E8554", Offset = "0x30E8554", VA = "0x30E8554", Slot = "33")]
		public RESULT getDelay(out ulong dspclock_start, out ulong dspclock_end, out bool stopchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x30E8618", Offset = "0x30E8618", VA = "0x30E8618", Slot = "34")]
		public RESULT addFadePoint(ulong dspclock, float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x30E86C0", Offset = "0x30E86C0", VA = "0x30E86C0", Slot = "35")]
		public RESULT setFadePointRamp(ulong dspclock, float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x30E8768", Offset = "0x30E8768", VA = "0x30E8768", Slot = "36")]
		public RESULT removeFadePoints(ulong dspclock_start, ulong dspclock_end)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x30E8808", Offset = "0x30E8808", VA = "0x30E8808", Slot = "37")]
		public RESULT getFadePoints(ref uint numpoints, ulong[] point_dspclock, float[] point_volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x30E88C4", Offset = "0x30E88C4", VA = "0x30E88C4", Slot = "38")]
		public RESULT getDSP(int index, out DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x30E8964", Offset = "0x30E8964", VA = "0x30E8964", Slot = "39")]
		public RESULT addDSP(int index, DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x30E8A04", Offset = "0x30E8A04", VA = "0x30E8A04", Slot = "40")]
		public RESULT removeDSP(DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x30E8A9C", Offset = "0x30E8A9C", VA = "0x30E8A9C", Slot = "41")]
		public RESULT getNumDSPs(out int numdsps)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x30E8B34", Offset = "0x30E8B34", VA = "0x30E8B34", Slot = "42")]
		public RESULT setDSPIndex(DSP dsp, int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x30E8BD4", Offset = "0x30E8BD4", VA = "0x30E8BD4", Slot = "43")]
		public RESULT getDSPIndex(DSP dsp, out int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x30E8C74", Offset = "0x30E8C74", VA = "0x30E8C74", Slot = "44")]
		public RESULT set3DAttributes(ref VECTOR pos, ref VECTOR vel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x30E8D14", Offset = "0x30E8D14", VA = "0x30E8D14", Slot = "45")]
		public RESULT get3DAttributes(out VECTOR pos, out VECTOR vel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x30E8DB4", Offset = "0x30E8DB4", VA = "0x30E8DB4", Slot = "46")]
		public RESULT set3DMinMaxDistance(float mindistance, float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x30E8E54", Offset = "0x30E8E54", VA = "0x30E8E54", Slot = "47")]
		public RESULT get3DMinMaxDistance(out float mindistance, out float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x30E8EF4", Offset = "0x30E8EF4", VA = "0x30E8EF4", Slot = "48")]
		public RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x30E8FA4", Offset = "0x30E8FA4", VA = "0x30E8FA4", Slot = "49")]
		public RESULT get3DConeSettings(out float insideconeangle, out float outsideconeangle, out float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x30E9054", Offset = "0x30E9054", VA = "0x30E9054", Slot = "50")]
		public RESULT set3DConeOrientation(ref VECTOR orientation)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x30E90EC", Offset = "0x30E90EC", VA = "0x30E90EC", Slot = "51")]
		public RESULT get3DConeOrientation(out VECTOR orientation)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x30E9184", Offset = "0x30E9184", VA = "0x30E9184", Slot = "52")]
		public RESULT set3DCustomRolloff(ref VECTOR points, int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x30E9224", Offset = "0x30E9224", VA = "0x30E9224", Slot = "53")]
		public RESULT get3DCustomRolloff(out IntPtr points, out int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x30E92C4", Offset = "0x30E92C4", VA = "0x30E92C4", Slot = "54")]
		public RESULT set3DOcclusion(float directocclusion, float reverbocclusion)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x30E9364", Offset = "0x30E9364", VA = "0x30E9364", Slot = "55")]
		public RESULT get3DOcclusion(out float directocclusion, out float reverbocclusion)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x30E9404", Offset = "0x30E9404", VA = "0x30E9404", Slot = "56")]
		public RESULT set3DSpread(float angle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x30E949C", Offset = "0x30E949C", VA = "0x30E949C", Slot = "57")]
		public RESULT get3DSpread(out float angle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x30E9534", Offset = "0x30E9534", VA = "0x30E9534", Slot = "58")]
		public RESULT set3DLevel(float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x30E95CC", Offset = "0x30E95CC", VA = "0x30E95CC", Slot = "59")]
		public RESULT get3DLevel(out float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x30E9664", Offset = "0x30E9664", VA = "0x30E9664", Slot = "60")]
		public RESULT set3DDopplerLevel(float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x30E96FC", Offset = "0x30E96FC", VA = "0x30E96FC", Slot = "61")]
		public RESULT get3DDopplerLevel(out float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x30E9794", Offset = "0x30E9794", VA = "0x30E9794", Slot = "62")]
		public RESULT set3DDistanceFilter(bool custom, float customLevel, float centerFreq)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x30E9848", Offset = "0x30E9848", VA = "0x30E9848", Slot = "63")]
		public RESULT get3DDistanceFilter(out bool custom, out float customLevel, out float centerFreq)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x30E990C", Offset = "0x30E990C", VA = "0x30E990C", Slot = "64")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x30E99A4", Offset = "0x30E99A4", VA = "0x30E99A4", Slot = "65")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x30E6AD0", Offset = "0x30E6AD0", VA = "0x30E6AD0")]
		private static extern RESULT FMOD5_ChannelGroup_Release(IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x30E6BB0", Offset = "0x30E6BB0", VA = "0x30E6BB0")]
		private static extern RESULT FMOD5_ChannelGroup_AddGroup(IntPtr channelgroup, IntPtr group, bool propagatedspclock, IntPtr zero);

		[PreserveSig]
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x30E6C64", Offset = "0x30E6C64", VA = "0x30E6C64")]
		private static extern RESULT FMOD5_ChannelGroup_AddGroup(IntPtr channelgroup, IntPtr group, bool propagatedspclock, out IntPtr connection);

		[PreserveSig]
		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x30E6D14", Offset = "0x30E6D14", VA = "0x30E6D14")]
		private static extern RESULT FMOD5_ChannelGroup_GetNumGroups(IntPtr channelgroup, out int numgroups);

		[PreserveSig]
		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x30E6DAC", Offset = "0x30E6DAC", VA = "0x30E6DAC")]
		private static extern RESULT FMOD5_ChannelGroup_GetGroup(IntPtr channelgroup, int index, out IntPtr group);

		[PreserveSig]
		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x30E6E4C", Offset = "0x30E6E4C", VA = "0x30E6E4C")]
		private static extern RESULT FMOD5_ChannelGroup_GetParentGroup(IntPtr channelgroup, out IntPtr group);

		[PreserveSig]
		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x30E709C", Offset = "0x30E709C", VA = "0x30E709C")]
		private static extern RESULT FMOD5_ChannelGroup_GetName(IntPtr channelgroup, IntPtr name, int namelen);

		[PreserveSig]
		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x30E713C", Offset = "0x30E713C", VA = "0x30E713C")]
		private static extern RESULT FMOD5_ChannelGroup_GetNumChannels(IntPtr channelgroup, out int numchannels);

		[PreserveSig]
		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x30E71D4", Offset = "0x30E71D4", VA = "0x30E71D4")]
		private static extern RESULT FMOD5_ChannelGroup_GetChannel(IntPtr channelgroup, int index, out IntPtr channel);

		[PreserveSig]
		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x30E7274", Offset = "0x30E7274", VA = "0x30E7274")]
		private static extern RESULT FMOD5_ChannelGroup_GetSystemObject(IntPtr channelgroup, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x30E730C", Offset = "0x30E730C", VA = "0x30E730C")]
		private static extern RESULT FMOD5_ChannelGroup_Stop(IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x30E7398", Offset = "0x30E7398", VA = "0x30E7398")]
		private static extern RESULT FMOD5_ChannelGroup_SetPaused(IntPtr channelgroup, bool paused);

		[PreserveSig]
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x30E7430", Offset = "0x30E7430", VA = "0x30E7430")]
		private static extern RESULT FMOD5_ChannelGroup_GetPaused(IntPtr channelgroup, out bool paused);

		[PreserveSig]
		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x30E74DC", Offset = "0x30E74DC", VA = "0x30E74DC")]
		private static extern RESULT FMOD5_ChannelGroup_SetVolume(IntPtr channelgroup, float volume);

		[PreserveSig]
		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x30E7574", Offset = "0x30E7574", VA = "0x30E7574")]
		private static extern RESULT FMOD5_ChannelGroup_GetVolume(IntPtr channelgroup, out float volume);

		[PreserveSig]
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x30E7610", Offset = "0x30E7610", VA = "0x30E7610")]
		private static extern RESULT FMOD5_ChannelGroup_SetVolumeRamp(IntPtr channelgroup, bool ramp);

		[PreserveSig]
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x30E76A8", Offset = "0x30E76A8", VA = "0x30E76A8")]
		private static extern RESULT FMOD5_ChannelGroup_GetVolumeRamp(IntPtr channelgroup, out bool ramp);

		[PreserveSig]
		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x30E7754", Offset = "0x30E7754", VA = "0x30E7754")]
		private static extern RESULT FMOD5_ChannelGroup_GetAudibility(IntPtr channelgroup, out float audibility);

		[PreserveSig]
		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x30E77EC", Offset = "0x30E77EC", VA = "0x30E77EC")]
		private static extern RESULT FMOD5_ChannelGroup_SetPitch(IntPtr channelgroup, float pitch);

		[PreserveSig]
		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x30E7884", Offset = "0x30E7884", VA = "0x30E7884")]
		private static extern RESULT FMOD5_ChannelGroup_GetPitch(IntPtr channelgroup, out float pitch);

		[PreserveSig]
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x30E7920", Offset = "0x30E7920", VA = "0x30E7920")]
		private static extern RESULT FMOD5_ChannelGroup_SetMute(IntPtr channelgroup, bool mute);

		[PreserveSig]
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x30E79B8", Offset = "0x30E79B8", VA = "0x30E79B8")]
		private static extern RESULT FMOD5_ChannelGroup_GetMute(IntPtr channelgroup, out bool mute);

		[PreserveSig]
		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x30E7A64", Offset = "0x30E7A64", VA = "0x30E7A64")]
		private static extern RESULT FMOD5_ChannelGroup_SetReverbProperties(IntPtr channelgroup, int instance, float wet);

		[PreserveSig]
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x30E7B0C", Offset = "0x30E7B0C", VA = "0x30E7B0C")]
		private static extern RESULT FMOD5_ChannelGroup_GetReverbProperties(IntPtr channelgroup, int instance, out float wet);

		[PreserveSig]
		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x30E7BAC", Offset = "0x30E7BAC", VA = "0x30E7BAC")]
		private static extern RESULT FMOD5_ChannelGroup_SetLowPassGain(IntPtr channelgroup, float gain);

		[PreserveSig]
		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x30E7C44", Offset = "0x30E7C44", VA = "0x30E7C44")]
		private static extern RESULT FMOD5_ChannelGroup_GetLowPassGain(IntPtr channelgroup, out float gain);

		[PreserveSig]
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x30E7CDC", Offset = "0x30E7CDC", VA = "0x30E7CDC")]
		private static extern RESULT FMOD5_ChannelGroup_SetMode(IntPtr channelgroup, MODE mode);

		[PreserveSig]
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x30E7D74", Offset = "0x30E7D74", VA = "0x30E7D74")]
		private static extern RESULT FMOD5_ChannelGroup_GetMode(IntPtr channelgroup, out MODE mode);

		[PreserveSig]
		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x30E7E0C", Offset = "0x30E7E0C", VA = "0x30E7E0C")]
		private static extern RESULT FMOD5_ChannelGroup_SetCallback(IntPtr channelgroup, CHANNELCONTROL_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x30E7EAC", Offset = "0x30E7EAC", VA = "0x30E7EAC")]
		private static extern RESULT FMOD5_ChannelGroup_IsPlaying(IntPtr channelgroup, out bool isplaying);

		[PreserveSig]
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x30E7F58", Offset = "0x30E7F58", VA = "0x30E7F58")]
		private static extern RESULT FMOD5_ChannelGroup_SetPan(IntPtr channelgroup, float pan);

		[PreserveSig]
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x30E7FF0", Offset = "0x30E7FF0", VA = "0x30E7FF0")]
		private static extern RESULT FMOD5_ChannelGroup_SetMixLevelsOutput(IntPtr channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);

		[PreserveSig]
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x30E80D8", Offset = "0x30E80D8", VA = "0x30E80D8")]
		private static extern RESULT FMOD5_ChannelGroup_SetMixLevelsInput(IntPtr channelgroup, float[] levels, int numlevels);

		[PreserveSig]
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x30E8180", Offset = "0x30E8180", VA = "0x30E8180")]
		private static extern RESULT FMOD5_ChannelGroup_SetMixMatrix(IntPtr channelgroup, float[] matrix, int outchannels, int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x6000700")]
		[Address(RVA = "0x30E8240", Offset = "0x30E8240", VA = "0x30E8240")]
		private static extern RESULT FMOD5_ChannelGroup_GetMixMatrix(IntPtr channelgroup, float[] matrix, out int outchannels, out int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x30E8300", Offset = "0x30E8300", VA = "0x30E8300")]
		private static extern RESULT FMOD5_ChannelGroup_GetDSPClock(IntPtr channelgroup, out ulong dspclock, out ulong parentclock);

		[PreserveSig]
		[Token(Token = "0x6000702")]
		[Address(RVA = "0x30E83A4", Offset = "0x30E83A4", VA = "0x30E83A4")]
		private static extern RESULT FMOD5_ChannelGroup_SetDelay(IntPtr channelgroup, ulong dspclock_start, ulong dspclock_end, bool stopchannels);

		[PreserveSig]
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x30E84AC", Offset = "0x30E84AC", VA = "0x30E84AC")]
		private static extern RESULT FMOD5_ChannelGroup_GetDelay(IntPtr channelgroup, out ulong dspclock_start, out ulong dspclock_end, IntPtr zero);

		[PreserveSig]
		[Token(Token = "0x6000704")]
		[Address(RVA = "0x30E855C", Offset = "0x30E855C", VA = "0x30E855C")]
		private static extern RESULT FMOD5_ChannelGroup_GetDelay(IntPtr channelgroup, out ulong dspclock_start, out ulong dspclock_end, out bool stopchannels);

		[PreserveSig]
		[Token(Token = "0x6000705")]
		[Address(RVA = "0x30E8620", Offset = "0x30E8620", VA = "0x30E8620")]
		private static extern RESULT FMOD5_ChannelGroup_AddFadePoint(IntPtr channelgroup, ulong dspclock, float volume);

		[PreserveSig]
		[Token(Token = "0x6000706")]
		[Address(RVA = "0x30E86C8", Offset = "0x30E86C8", VA = "0x30E86C8")]
		private static extern RESULT FMOD5_ChannelGroup_SetFadePointRamp(IntPtr channelgroup, ulong dspclock, float volume);

		[PreserveSig]
		[Token(Token = "0x6000707")]
		[Address(RVA = "0x30E8770", Offset = "0x30E8770", VA = "0x30E8770")]
		private static extern RESULT FMOD5_ChannelGroup_RemoveFadePoints(IntPtr channelgroup, ulong dspclock_start, ulong dspclock_end);

		[PreserveSig]
		[Token(Token = "0x6000708")]
		[Address(RVA = "0x30E8810", Offset = "0x30E8810", VA = "0x30E8810")]
		private static extern RESULT FMOD5_ChannelGroup_GetFadePoints(IntPtr channelgroup, ref uint numpoints, ulong[] point_dspclock, float[] point_volume);

		[PreserveSig]
		[Token(Token = "0x6000709")]
		[Address(RVA = "0x30E88CC", Offset = "0x30E88CC", VA = "0x30E88CC")]
		private static extern RESULT FMOD5_ChannelGroup_GetDSP(IntPtr channelgroup, int index, out IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x600070A")]
		[Address(RVA = "0x30E896C", Offset = "0x30E896C", VA = "0x30E896C")]
		private static extern RESULT FMOD5_ChannelGroup_AddDSP(IntPtr channelgroup, int index, IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x600070B")]
		[Address(RVA = "0x30E8A0C", Offset = "0x30E8A0C", VA = "0x30E8A0C")]
		private static extern RESULT FMOD5_ChannelGroup_RemoveDSP(IntPtr channelgroup, IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x600070C")]
		[Address(RVA = "0x30E8AA4", Offset = "0x30E8AA4", VA = "0x30E8AA4")]
		private static extern RESULT FMOD5_ChannelGroup_GetNumDSPs(IntPtr channelgroup, out int numdsps);

		[PreserveSig]
		[Token(Token = "0x600070D")]
		[Address(RVA = "0x30E8B3C", Offset = "0x30E8B3C", VA = "0x30E8B3C")]
		private static extern RESULT FMOD5_ChannelGroup_SetDSPIndex(IntPtr channelgroup, IntPtr dsp, int index);

		[PreserveSig]
		[Token(Token = "0x600070E")]
		[Address(RVA = "0x30E8BDC", Offset = "0x30E8BDC", VA = "0x30E8BDC")]
		private static extern RESULT FMOD5_ChannelGroup_GetDSPIndex(IntPtr channelgroup, IntPtr dsp, out int index);

		[PreserveSig]
		[Token(Token = "0x600070F")]
		[Address(RVA = "0x30E8C7C", Offset = "0x30E8C7C", VA = "0x30E8C7C")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DAttributes(IntPtr channelgroup, ref VECTOR pos, ref VECTOR vel);

		[PreserveSig]
		[Token(Token = "0x6000710")]
		[Address(RVA = "0x30E8D1C", Offset = "0x30E8D1C", VA = "0x30E8D1C")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DAttributes(IntPtr channelgroup, out VECTOR pos, out VECTOR vel);

		[PreserveSig]
		[Token(Token = "0x6000711")]
		[Address(RVA = "0x30E8DBC", Offset = "0x30E8DBC", VA = "0x30E8DBC")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DMinMaxDistance(IntPtr channelgroup, float mindistance, float maxdistance);

		[PreserveSig]
		[Token(Token = "0x6000712")]
		[Address(RVA = "0x30E8E5C", Offset = "0x30E8E5C", VA = "0x30E8E5C")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DMinMaxDistance(IntPtr channelgroup, out float mindistance, out float maxdistance);

		[PreserveSig]
		[Token(Token = "0x6000713")]
		[Address(RVA = "0x30E8EFC", Offset = "0x30E8EFC", VA = "0x30E8EFC")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DConeSettings(IntPtr channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000714")]
		[Address(RVA = "0x30E8FAC", Offset = "0x30E8FAC", VA = "0x30E8FAC")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DConeSettings(IntPtr channelgroup, out float insideconeangle, out float outsideconeangle, out float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000715")]
		[Address(RVA = "0x30E905C", Offset = "0x30E905C", VA = "0x30E905C")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DConeOrientation(IntPtr channelgroup, ref VECTOR orientation);

		[PreserveSig]
		[Token(Token = "0x6000716")]
		[Address(RVA = "0x30E90F4", Offset = "0x30E90F4", VA = "0x30E90F4")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DConeOrientation(IntPtr channelgroup, out VECTOR orientation);

		[PreserveSig]
		[Token(Token = "0x6000717")]
		[Address(RVA = "0x30E918C", Offset = "0x30E918C", VA = "0x30E918C")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DCustomRolloff(IntPtr channelgroup, ref VECTOR points, int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000718")]
		[Address(RVA = "0x30E922C", Offset = "0x30E922C", VA = "0x30E922C")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DCustomRolloff(IntPtr channelgroup, out IntPtr points, out int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000719")]
		[Address(RVA = "0x30E92CC", Offset = "0x30E92CC", VA = "0x30E92CC")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DOcclusion(IntPtr channelgroup, float directocclusion, float reverbocclusion);

		[PreserveSig]
		[Token(Token = "0x600071A")]
		[Address(RVA = "0x30E936C", Offset = "0x30E936C", VA = "0x30E936C")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DOcclusion(IntPtr channelgroup, out float directocclusion, out float reverbocclusion);

		[PreserveSig]
		[Token(Token = "0x600071B")]
		[Address(RVA = "0x30E940C", Offset = "0x30E940C", VA = "0x30E940C")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DSpread(IntPtr channelgroup, float angle);

		[PreserveSig]
		[Token(Token = "0x600071C")]
		[Address(RVA = "0x30E94A4", Offset = "0x30E94A4", VA = "0x30E94A4")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DSpread(IntPtr channelgroup, out float angle);

		[PreserveSig]
		[Token(Token = "0x600071D")]
		[Address(RVA = "0x30E953C", Offset = "0x30E953C", VA = "0x30E953C")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DLevel(IntPtr channelgroup, float level);

		[PreserveSig]
		[Token(Token = "0x600071E")]
		[Address(RVA = "0x30E95D4", Offset = "0x30E95D4", VA = "0x30E95D4")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DLevel(IntPtr channelgroup, out float level);

		[PreserveSig]
		[Token(Token = "0x600071F")]
		[Address(RVA = "0x30E966C", Offset = "0x30E966C", VA = "0x30E966C")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DDopplerLevel(IntPtr channelgroup, float level);

		[PreserveSig]
		[Token(Token = "0x6000720")]
		[Address(RVA = "0x30E9704", Offset = "0x30E9704", VA = "0x30E9704")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DDopplerLevel(IntPtr channelgroup, out float level);

		[PreserveSig]
		[Token(Token = "0x6000721")]
		[Address(RVA = "0x30E97A0", Offset = "0x30E97A0", VA = "0x30E97A0")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DDistanceFilter(IntPtr channelgroup, bool custom, float customLevel, float centerFreq);

		[PreserveSig]
		[Token(Token = "0x6000722")]
		[Address(RVA = "0x30E9850", Offset = "0x30E9850", VA = "0x30E9850")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DDistanceFilter(IntPtr channelgroup, out bool custom, out float customLevel, out float centerFreq);

		[PreserveSig]
		[Token(Token = "0x6000723")]
		[Address(RVA = "0x30E9914", Offset = "0x30E9914", VA = "0x30E9914")]
		private static extern RESULT FMOD5_ChannelGroup_SetUserData(IntPtr channelgroup, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000724")]
		[Address(RVA = "0x30E99AC", Offset = "0x30E99AC", VA = "0x30E99AC")]
		private static extern RESULT FMOD5_ChannelGroup_GetUserData(IntPtr channelgroup, out IntPtr userdata);

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x30E9A3C", Offset = "0x30E9A3C", VA = "0x30E9A3C")]
		public ChannelGroup(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x30E9A44", Offset = "0x30E9A44", VA = "0x30E9A44")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x30E9A90", Offset = "0x30E9A90", VA = "0x30E9A90")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public struct SoundGroup
	{
		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x30C317C", Offset = "0x30C317C", VA = "0x30C317C")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x30C3204", Offset = "0x30C3204", VA = "0x30C3204")]
		public RESULT getSystemObject(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x30C329C", Offset = "0x30C329C", VA = "0x30C329C")]
		public RESULT setMaxAudible(int maxaudible)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x30C3334", Offset = "0x30C3334", VA = "0x30C3334")]
		public RESULT getMaxAudible(out int maxaudible)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x30C33CC", Offset = "0x30C33CC", VA = "0x30C33CC")]
		public RESULT setMaxAudibleBehavior(SOUNDGROUP_BEHAVIOR behavior)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x30C3464", Offset = "0x30C3464", VA = "0x30C3464")]
		public RESULT getMaxAudibleBehavior(out SOUNDGROUP_BEHAVIOR behavior)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x30C34FC", Offset = "0x30C34FC", VA = "0x30C34FC")]
		public RESULT setMuteFadeSpeed(float speed)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x30C3594", Offset = "0x30C3594", VA = "0x30C3594")]
		public RESULT getMuteFadeSpeed(out float speed)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x30C362C", Offset = "0x30C362C", VA = "0x30C362C")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x30C36C4", Offset = "0x30C36C4", VA = "0x30C36C4")]
		public RESULT getVolume(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x30C375C", Offset = "0x30C375C", VA = "0x30C375C")]
		public RESULT stop()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x30C37E4", Offset = "0x30C37E4", VA = "0x30C37E4")]
		public RESULT getName(out string name, int namelen)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x30C3ED4", Offset = "0x30C3ED4", VA = "0x30C3ED4")]
		public RESULT getNumSounds(out int numsounds)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x30C3F6C", Offset = "0x30C3F6C", VA = "0x30C3F6C")]
		public RESULT getSound(int index, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x30C400C", Offset = "0x30C400C", VA = "0x30C400C")]
		public RESULT getNumPlaying(out int numplaying)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x30C40A4", Offset = "0x30C40A4", VA = "0x30C40A4")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x30C413C", Offset = "0x30C413C", VA = "0x30C413C")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000739")]
		[Address(RVA = "0x30C3184", Offset = "0x30C3184", VA = "0x30C3184")]
		private static extern RESULT FMOD5_SoundGroup_Release(IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x600073A")]
		[Address(RVA = "0x30C320C", Offset = "0x30C320C", VA = "0x30C320C")]
		private static extern RESULT FMOD5_SoundGroup_GetSystemObject(IntPtr soundgroup, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x30C32A4", Offset = "0x30C32A4", VA = "0x30C32A4")]
		private static extern RESULT FMOD5_SoundGroup_SetMaxAudible(IntPtr soundgroup, int maxaudible);

		[PreserveSig]
		[Token(Token = "0x600073C")]
		[Address(RVA = "0x30C333C", Offset = "0x30C333C", VA = "0x30C333C")]
		private static extern RESULT FMOD5_SoundGroup_GetMaxAudible(IntPtr soundgroup, out int maxaudible);

		[PreserveSig]
		[Token(Token = "0x600073D")]
		[Address(RVA = "0x30C33D4", Offset = "0x30C33D4", VA = "0x30C33D4")]
		private static extern RESULT FMOD5_SoundGroup_SetMaxAudibleBehavior(IntPtr soundgroup, SOUNDGROUP_BEHAVIOR behavior);

		[PreserveSig]
		[Token(Token = "0x600073E")]
		[Address(RVA = "0x30C346C", Offset = "0x30C346C", VA = "0x30C346C")]
		private static extern RESULT FMOD5_SoundGroup_GetMaxAudibleBehavior(IntPtr soundgroup, out SOUNDGROUP_BEHAVIOR behavior);

		[PreserveSig]
		[Token(Token = "0x600073F")]
		[Address(RVA = "0x30C3504", Offset = "0x30C3504", VA = "0x30C3504")]
		private static extern RESULT FMOD5_SoundGroup_SetMuteFadeSpeed(IntPtr soundgroup, float speed);

		[PreserveSig]
		[Token(Token = "0x6000740")]
		[Address(RVA = "0x30C359C", Offset = "0x30C359C", VA = "0x30C359C")]
		private static extern RESULT FMOD5_SoundGroup_GetMuteFadeSpeed(IntPtr soundgroup, out float speed);

		[PreserveSig]
		[Token(Token = "0x6000741")]
		[Address(RVA = "0x30C3634", Offset = "0x30C3634", VA = "0x30C3634")]
		private static extern RESULT FMOD5_SoundGroup_SetVolume(IntPtr soundgroup, float volume);

		[PreserveSig]
		[Token(Token = "0x6000742")]
		[Address(RVA = "0x30C36CC", Offset = "0x30C36CC", VA = "0x30C36CC")]
		private static extern RESULT FMOD5_SoundGroup_GetVolume(IntPtr soundgroup, out float volume);

		[PreserveSig]
		[Token(Token = "0x6000743")]
		[Address(RVA = "0x30C3764", Offset = "0x30C3764", VA = "0x30C3764")]
		private static extern RESULT FMOD5_SoundGroup_Stop(IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x6000744")]
		[Address(RVA = "0x30C399C", Offset = "0x30C399C", VA = "0x30C399C")]
		private static extern RESULT FMOD5_SoundGroup_GetName(IntPtr soundgroup, IntPtr name, int namelen);

		[PreserveSig]
		[Token(Token = "0x6000745")]
		[Address(RVA = "0x30C3EDC", Offset = "0x30C3EDC", VA = "0x30C3EDC")]
		private static extern RESULT FMOD5_SoundGroup_GetNumSounds(IntPtr soundgroup, out int numsounds);

		[PreserveSig]
		[Token(Token = "0x6000746")]
		[Address(RVA = "0x30C3F74", Offset = "0x30C3F74", VA = "0x30C3F74")]
		private static extern RESULT FMOD5_SoundGroup_GetSound(IntPtr soundgroup, int index, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x6000747")]
		[Address(RVA = "0x30C4014", Offset = "0x30C4014", VA = "0x30C4014")]
		private static extern RESULT FMOD5_SoundGroup_GetNumPlaying(IntPtr soundgroup, out int numplaying);

		[PreserveSig]
		[Token(Token = "0x6000748")]
		[Address(RVA = "0x30C40AC", Offset = "0x30C40AC", VA = "0x30C40AC")]
		private static extern RESULT FMOD5_SoundGroup_SetUserData(IntPtr soundgroup, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000749")]
		[Address(RVA = "0x30C4144", Offset = "0x30C4144", VA = "0x30C4144")]
		private static extern RESULT FMOD5_SoundGroup_GetUserData(IntPtr soundgroup, out IntPtr userdata);

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x30C41D4", Offset = "0x30C41D4", VA = "0x30C41D4")]
		public SoundGroup(IntPtr ptr)
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x30C41DC", Offset = "0x30C41DC", VA = "0x30C41DC")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x30C4228", Offset = "0x30C4228", VA = "0x30C4228")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x20000D2")]
	public struct DSP
	{
		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x30E9F04", Offset = "0x30E9F04", VA = "0x30E9F04")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x30E9F8C", Offset = "0x30E9F8C", VA = "0x30E9F8C")]
		public RESULT getSystemObject(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x30EA024", Offset = "0x30EA024", VA = "0x30EA024")]
		public RESULT addInput(DSP input)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x30EA128", Offset = "0x30EA128", VA = "0x30EA128")]
		public RESULT addInput(DSP input, out DSPConnection connection, DSPCONNECTION_TYPE type = DSPCONNECTION_TYPE.STANDARD)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0x30EA1D8", Offset = "0x30EA1D8", VA = "0x30EA1D8")]
		public RESULT disconnectFrom(DSP target, DSPConnection connection)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x30EA274", Offset = "0x30EA274", VA = "0x30EA274")]
		public RESULT disconnectAll(bool inputs, bool outputs)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x30EA31C", Offset = "0x30EA31C", VA = "0x30EA31C")]
		public RESULT getNumInputs(out int numinputs)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x30EA3B4", Offset = "0x30EA3B4", VA = "0x30EA3B4")]
		public RESULT getNumOutputs(out int numoutputs)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x30EA44C", Offset = "0x30EA44C", VA = "0x30EA44C")]
		public RESULT getInput(int index, out DSP input, out DSPConnection inputconnection)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x30EA4FC", Offset = "0x30EA4FC", VA = "0x30EA4FC")]
		public RESULT getOutput(int index, out DSP output, out DSPConnection outputconnection)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x30EA5AC", Offset = "0x30EA5AC", VA = "0x30EA5AC")]
		public RESULT setActive(bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x30EA648", Offset = "0x30EA648", VA = "0x30EA648")]
		public RESULT getActive(out bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x30EA6F4", Offset = "0x30EA6F4", VA = "0x30EA6F4")]
		public RESULT setBypass(bool bypass)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x30EA790", Offset = "0x30EA790", VA = "0x30EA790")]
		public RESULT getBypass(out bool bypass)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x30EA83C", Offset = "0x30EA83C", VA = "0x30EA83C")]
		public RESULT setWetDryMix(float prewet, float postwet, float dry)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x30EA8EC", Offset = "0x30EA8EC", VA = "0x30EA8EC")]
		public RESULT getWetDryMix(out float prewet, out float postwet, out float dry)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x30EA99C", Offset = "0x30EA99C", VA = "0x30EA99C")]
		public RESULT setChannelFormat(CHANNELMASK channelmask, int numchannels, SPEAKERMODE source_speakermode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x30EAA4C", Offset = "0x30EAA4C", VA = "0x30EAA4C")]
		public RESULT getChannelFormat(out CHANNELMASK channelmask, out int numchannels, out SPEAKERMODE source_speakermode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x30EAAFC", Offset = "0x30EAAFC", VA = "0x30EAAFC")]
		public RESULT getOutputChannelFormat(CHANNELMASK inmask, int inchannels, SPEAKERMODE inspeakermode, out CHANNELMASK outmask, out int outchannels, out SPEAKERMODE outspeakermode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x30EABCC", Offset = "0x30EABCC", VA = "0x30EABCC")]
		public RESULT reset()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x30EAC54", Offset = "0x30EAC54", VA = "0x30EAC54")]
		public RESULT setParameterFloat(int index, float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x30EACFC", Offset = "0x30EACFC", VA = "0x30EACFC")]
		public RESULT setParameterInt(int index, int value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x30EAD9C", Offset = "0x30EAD9C", VA = "0x30EAD9C")]
		public RESULT setParameterBool(int index, bool value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x30EAE40", Offset = "0x30EAE40", VA = "0x30EAE40")]
		public RESULT setParameterData(int index, byte[] data)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x30EAF8C", Offset = "0x30EAF8C", VA = "0x30EAF8C")]
		public RESULT getParameterFloat(int index, out float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x30EB0A0", Offset = "0x30EB0A0", VA = "0x30EB0A0")]
		public RESULT getParameterInt(int index, out int value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0x30EB1B4", Offset = "0x30EB1B4", VA = "0x30EB1B4")]
		public RESULT getParameterBool(int index, out bool value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0x30EB2DC", Offset = "0x30EB2DC", VA = "0x30EB2DC")]
		public RESULT getParameterData(int index, out IntPtr data, out uint length)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0x30EB410", Offset = "0x30EB410", VA = "0x30EB410")]
		public RESULT getNumParameters(out int numparams)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x30EB4A8", Offset = "0x30EB4A8", VA = "0x30EB4A8")]
		public RESULT getParameterInfo(int index, out DSP_PARAMETER_DESC desc)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0x30EB6C4", Offset = "0x30EB6C4", VA = "0x30EB6C4")]
		public RESULT getDataParameterIndex(int datatype, out int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x30EB764", Offset = "0x30EB764", VA = "0x30EB764")]
		public RESULT showConfigDialog(IntPtr hwnd, bool show)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x30EB808", Offset = "0x30EB808", VA = "0x30EB808")]
		public RESULT getInfo(out string name, out uint version, out int channels, out int configwidth, out int configheight)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x30EBAA8", Offset = "0x30EBAA8", VA = "0x30EBAA8")]
		public RESULT getInfo(out uint version, out int channels, out int configwidth, out int configheight)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0x30EBB20", Offset = "0x30EBB20", VA = "0x30EBB20")]
		public RESULT getType(out DSP_TYPE type)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x30EBBB8", Offset = "0x30EBBB8", VA = "0x30EBBB8")]
		public RESULT getIdle(out bool idle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0x30EBC64", Offset = "0x30EBC64", VA = "0x30EBC64")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x30EBCFC", Offset = "0x30EBCFC", VA = "0x30EBCFC")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x30EBD94", Offset = "0x30EBD94", VA = "0x30EBD94")]
		public RESULT setMeteringEnabled(bool inputEnabled, bool outputEnabled)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x30EBE3C", Offset = "0x30EBE3C", VA = "0x30EBE3C")]
		public RESULT getMeteringEnabled(out bool inputEnabled, out bool outputEnabled)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x30EBF00", Offset = "0x30EBF00", VA = "0x30EBF00")]
		public RESULT getMeteringInfo(IntPtr zero, out DSP_METERING_INFO outputInfo)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x30EBFF0", Offset = "0x30EBFF0", VA = "0x30EBFF0")]
		public RESULT getMeteringInfo(out DSP_METERING_INFO inputInfo, IntPtr zero)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x30EC0E0", Offset = "0x30EC0E0", VA = "0x30EC0E0")]
		public RESULT getMeteringInfo(out DSP_METERING_INFO inputInfo, out DSP_METERING_INFO outputInfo)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x30EC200", Offset = "0x30EC200", VA = "0x30EC200")]
		public RESULT getCPUUsage(out uint exclusive, out uint inclusive)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x30E9F0C", Offset = "0x30E9F0C", VA = "0x30E9F0C")]
		private static extern RESULT FMOD5_DSP_Release(IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x600077A")]
		[Address(RVA = "0x30E9F94", Offset = "0x30E9F94", VA = "0x30E9F94")]
		private static extern RESULT FMOD5_DSP_GetSystemObject(IntPtr dsp, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x600077B")]
		[Address(RVA = "0x30EA080", Offset = "0x30EA080", VA = "0x30EA080")]
		private static extern RESULT FMOD5_DSP_AddInput(IntPtr dsp, IntPtr input, IntPtr zero, DSPCONNECTION_TYPE type);

		[PreserveSig]
		[Token(Token = "0x600077C")]
		[Address(RVA = "0x30EA130", Offset = "0x30EA130", VA = "0x30EA130")]
		private static extern RESULT FMOD5_DSP_AddInput(IntPtr dsp, IntPtr input, out IntPtr connection, DSPCONNECTION_TYPE type);

		[PreserveSig]
		[Token(Token = "0x600077D")]
		[Address(RVA = "0x30EA1E0", Offset = "0x30EA1E0", VA = "0x30EA1E0")]
		private static extern RESULT FMOD5_DSP_DisconnectFrom(IntPtr dsp, IntPtr target, IntPtr connection);

		[PreserveSig]
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x30EA284", Offset = "0x30EA284", VA = "0x30EA284")]
		private static extern RESULT FMOD5_DSP_DisconnectAll(IntPtr dsp, bool inputs, bool outputs);

		[PreserveSig]
		[Token(Token = "0x600077F")]
		[Address(RVA = "0x30EA324", Offset = "0x30EA324", VA = "0x30EA324")]
		private static extern RESULT FMOD5_DSP_GetNumInputs(IntPtr dsp, out int numinputs);

		[PreserveSig]
		[Token(Token = "0x6000780")]
		[Address(RVA = "0x30EA3BC", Offset = "0x30EA3BC", VA = "0x30EA3BC")]
		private static extern RESULT FMOD5_DSP_GetNumOutputs(IntPtr dsp, out int numoutputs);

		[PreserveSig]
		[Token(Token = "0x6000781")]
		[Address(RVA = "0x30EA454", Offset = "0x30EA454", VA = "0x30EA454")]
		private static extern RESULT FMOD5_DSP_GetInput(IntPtr dsp, int index, out IntPtr input, out IntPtr inputconnection);

		[PreserveSig]
		[Token(Token = "0x6000782")]
		[Address(RVA = "0x30EA504", Offset = "0x30EA504", VA = "0x30EA504")]
		private static extern RESULT FMOD5_DSP_GetOutput(IntPtr dsp, int index, out IntPtr output, out IntPtr outputconnection);

		[PreserveSig]
		[Token(Token = "0x6000783")]
		[Address(RVA = "0x30EA5B8", Offset = "0x30EA5B8", VA = "0x30EA5B8")]
		private static extern RESULT FMOD5_DSP_SetActive(IntPtr dsp, bool active);

		[PreserveSig]
		[Token(Token = "0x6000784")]
		[Address(RVA = "0x30EA650", Offset = "0x30EA650", VA = "0x30EA650")]
		private static extern RESULT FMOD5_DSP_GetActive(IntPtr dsp, out bool active);

		[PreserveSig]
		[Token(Token = "0x6000785")]
		[Address(RVA = "0x30EA700", Offset = "0x30EA700", VA = "0x30EA700")]
		private static extern RESULT FMOD5_DSP_SetBypass(IntPtr dsp, bool bypass);

		[PreserveSig]
		[Token(Token = "0x6000786")]
		[Address(RVA = "0x30EA798", Offset = "0x30EA798", VA = "0x30EA798")]
		private static extern RESULT FMOD5_DSP_GetBypass(IntPtr dsp, out bool bypass);

		[PreserveSig]
		[Token(Token = "0x6000787")]
		[Address(RVA = "0x30EA844", Offset = "0x30EA844", VA = "0x30EA844")]
		private static extern RESULT FMOD5_DSP_SetWetDryMix(IntPtr dsp, float prewet, float postwet, float dry);

		[PreserveSig]
		[Token(Token = "0x6000788")]
		[Address(RVA = "0x30EA8F4", Offset = "0x30EA8F4", VA = "0x30EA8F4")]
		private static extern RESULT FMOD5_DSP_GetWetDryMix(IntPtr dsp, out float prewet, out float postwet, out float dry);

		[PreserveSig]
		[Token(Token = "0x6000789")]
		[Address(RVA = "0x30EA9A4", Offset = "0x30EA9A4", VA = "0x30EA9A4")]
		private static extern RESULT FMOD5_DSP_SetChannelFormat(IntPtr dsp, CHANNELMASK channelmask, int numchannels, SPEAKERMODE source_speakermode);

		[PreserveSig]
		[Token(Token = "0x600078A")]
		[Address(RVA = "0x30EAA54", Offset = "0x30EAA54", VA = "0x30EAA54")]
		private static extern RESULT FMOD5_DSP_GetChannelFormat(IntPtr dsp, out CHANNELMASK channelmask, out int numchannels, out SPEAKERMODE source_speakermode);

		[PreserveSig]
		[Token(Token = "0x600078B")]
		[Address(RVA = "0x30EAB04", Offset = "0x30EAB04", VA = "0x30EAB04")]
		private static extern RESULT FMOD5_DSP_GetOutputChannelFormat(IntPtr dsp, CHANNELMASK inmask, int inchannels, SPEAKERMODE inspeakermode, out CHANNELMASK outmask, out int outchannels, out SPEAKERMODE outspeakermode);

		[PreserveSig]
		[Token(Token = "0x600078C")]
		[Address(RVA = "0x30EABD4", Offset = "0x30EABD4", VA = "0x30EABD4")]
		private static extern RESULT FMOD5_DSP_Reset(IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x600078D")]
		[Address(RVA = "0x30EAC5C", Offset = "0x30EAC5C", VA = "0x30EAC5C")]
		private static extern RESULT FMOD5_DSP_SetParameterFloat(IntPtr dsp, int index, float value);

		[PreserveSig]
		[Token(Token = "0x600078E")]
		[Address(RVA = "0x30EAD04", Offset = "0x30EAD04", VA = "0x30EAD04")]
		private static extern RESULT FMOD5_DSP_SetParameterInt(IntPtr dsp, int index, int value);

		[PreserveSig]
		[Token(Token = "0x600078F")]
		[Address(RVA = "0x30EADA8", Offset = "0x30EADA8", VA = "0x30EADA8")]
		private static extern RESULT FMOD5_DSP_SetParameterBool(IntPtr dsp, int index, bool value);

		[PreserveSig]
		[Token(Token = "0x6000790")]
		[Address(RVA = "0x30EAEE4", Offset = "0x30EAEE4", VA = "0x30EAEE4")]
		private static extern RESULT FMOD5_DSP_SetParameterData(IntPtr dsp, int index, IntPtr data, uint length);

		[PreserveSig]
		[Token(Token = "0x6000791")]
		[Address(RVA = "0x30EAFF0", Offset = "0x30EAFF0", VA = "0x30EAFF0")]
		private static extern RESULT FMOD5_DSP_GetParameterFloat(IntPtr dsp, int index, out float value, IntPtr valuestr, int valuestrlen);

		[PreserveSig]
		[Token(Token = "0x6000792")]
		[Address(RVA = "0x30EB104", Offset = "0x30EB104", VA = "0x30EB104")]
		private static extern RESULT FMOD5_DSP_GetParameterInt(IntPtr dsp, int index, out int value, IntPtr valuestr, int valuestrlen);

		[PreserveSig]
		[Token(Token = "0x6000793")]
		[Address(RVA = "0x30EB218", Offset = "0x30EB218", VA = "0x30EB218")]
		private static extern RESULT FMOD5_DSP_GetParameterBool(IntPtr dsp, int index, out bool value, IntPtr valuestr, int valuestrlen);

		[PreserveSig]
		[Token(Token = "0x6000794")]
		[Address(RVA = "0x30EB350", Offset = "0x30EB350", VA = "0x30EB350")]
		private static extern RESULT FMOD5_DSP_GetParameterData(IntPtr dsp, int index, out IntPtr data, out uint length, IntPtr valuestr, int valuestrlen);

		[PreserveSig]
		[Token(Token = "0x6000795")]
		[Address(RVA = "0x30EB418", Offset = "0x30EB418", VA = "0x30EB418")]
		private static extern RESULT FMOD5_DSP_GetNumParameters(IntPtr dsp, out int numparams);

		[PreserveSig]
		[Token(Token = "0x6000796")]
		[Address(RVA = "0x30EB5B4", Offset = "0x30EB5B4", VA = "0x30EB5B4")]
		private static extern RESULT FMOD5_DSP_GetParameterInfo(IntPtr dsp, int index, out IntPtr desc);

		[PreserveSig]
		[Token(Token = "0x6000797")]
		[Address(RVA = "0x30EB6CC", Offset = "0x30EB6CC", VA = "0x30EB6CC")]
		private static extern RESULT FMOD5_DSP_GetDataParameterIndex(IntPtr dsp, int datatype, out int index);

		[PreserveSig]
		[Token(Token = "0x6000798")]
		[Address(RVA = "0x30EB770", Offset = "0x30EB770", VA = "0x30EB770")]
		private static extern RESULT FMOD5_DSP_ShowConfigDialog(IntPtr dsp, IntPtr hwnd, bool show);

		[PreserveSig]
		[Token(Token = "0x6000799")]
		[Address(RVA = "0x30EB9E8", Offset = "0x30EB9E8", VA = "0x30EB9E8")]
		private static extern RESULT FMOD5_DSP_GetInfo(IntPtr dsp, IntPtr name, out uint version, out int channels, out int configwidth, out int configheight);

		[PreserveSig]
		[Token(Token = "0x600079A")]
		[Address(RVA = "0x30EBB28", Offset = "0x30EBB28", VA = "0x30EBB28")]
		private static extern RESULT FMOD5_DSP_GetType(IntPtr dsp, out DSP_TYPE type);

		[PreserveSig]
		[Token(Token = "0x600079B")]
		[Address(RVA = "0x30EBBC0", Offset = "0x30EBBC0", VA = "0x30EBBC0")]
		private static extern RESULT FMOD5_DSP_GetIdle(IntPtr dsp, out bool idle);

		[PreserveSig]
		[Token(Token = "0x600079C")]
		[Address(RVA = "0x30EBC6C", Offset = "0x30EBC6C", VA = "0x30EBC6C")]
		private static extern RESULT FMOD5_DSP_SetUserData(IntPtr dsp, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x600079D")]
		[Address(RVA = "0x30EBD04", Offset = "0x30EBD04", VA = "0x30EBD04")]
		private static extern RESULT FMOD5_DSP_GetUserData(IntPtr dsp, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x600079E")]
		[Address(RVA = "0x30EBDA4", Offset = "0x30EBDA4", VA = "0x30EBDA4")]
		public static extern RESULT FMOD5_DSP_SetMeteringEnabled(IntPtr dsp, bool inputEnabled, bool outputEnabled);

		[PreserveSig]
		[Token(Token = "0x600079F")]
		[Address(RVA = "0x30EBE44", Offset = "0x30EBE44", VA = "0x30EBE44")]
		public static extern RESULT FMOD5_DSP_GetMeteringEnabled(IntPtr dsp, out bool inputEnabled, out bool outputEnabled);

		[PreserveSig]
		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x30EBF08", Offset = "0x30EBF08", VA = "0x30EBF08")]
		public static extern RESULT FMOD5_DSP_GetMeteringInfo(IntPtr dsp, IntPtr zero, out DSP_METERING_INFO outputInfo);

		[PreserveSig]
		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x30EBFF8", Offset = "0x30EBFF8", VA = "0x30EBFF8")]
		public static extern RESULT FMOD5_DSP_GetMeteringInfo(IntPtr dsp, out DSP_METERING_INFO inputInfo, IntPtr zero);

		[PreserveSig]
		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x30EC0E8", Offset = "0x30EC0E8", VA = "0x30EC0E8")]
		public static extern RESULT FMOD5_DSP_GetMeteringInfo(IntPtr dsp, out DSP_METERING_INFO inputInfo, out DSP_METERING_INFO outputInfo);

		[PreserveSig]
		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x30EC208", Offset = "0x30EC208", VA = "0x30EC208")]
		public static extern RESULT FMOD5_DSP_GetCPUUsage(IntPtr dsp, out uint exclusive, out uint inclusive);

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x30EC2A0", Offset = "0x30EC2A0", VA = "0x30EC2A0")]
		public DSP(IntPtr ptr)
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x30EC2A8", Offset = "0x30EC2A8", VA = "0x30EC2A8")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x30EC2F4", Offset = "0x30EC2F4", VA = "0x30EC2F4")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public struct DSPConnection
	{
		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x30EC338", Offset = "0x30EC338", VA = "0x30EC338")]
		public RESULT getInput(out DSP input)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x30EC3D0", Offset = "0x30EC3D0", VA = "0x30EC3D0")]
		public RESULT getOutput(out DSP output)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x30EC468", Offset = "0x30EC468", VA = "0x30EC468")]
		public RESULT setMix(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x30EC500", Offset = "0x30EC500", VA = "0x30EC500")]
		public RESULT getMix(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x30EC598", Offset = "0x30EC598", VA = "0x30EC598")]
		public RESULT setMixMatrix(float[] matrix, int outchannels, int inchannels, int inchannel_hop = 0)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x30EC658", Offset = "0x30EC658", VA = "0x30EC658")]
		public RESULT getMixMatrix(float[] matrix, out int outchannels, out int inchannels, int inchannel_hop = 0)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x30EC718", Offset = "0x30EC718", VA = "0x30EC718")]
		public RESULT getType(out DSPCONNECTION_TYPE type)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x30EC7B0", Offset = "0x30EC7B0", VA = "0x30EC7B0")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x30EC848", Offset = "0x30EC848", VA = "0x30EC848")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x30EC340", Offset = "0x30EC340", VA = "0x30EC340")]
		private static extern RESULT FMOD5_DSPConnection_GetInput(IntPtr dspconnection, out IntPtr input);

		[PreserveSig]
		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x30EC3D8", Offset = "0x30EC3D8", VA = "0x30EC3D8")]
		private static extern RESULT FMOD5_DSPConnection_GetOutput(IntPtr dspconnection, out IntPtr output);

		[PreserveSig]
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x30EC470", Offset = "0x30EC470", VA = "0x30EC470")]
		private static extern RESULT FMOD5_DSPConnection_SetMix(IntPtr dspconnection, float volume);

		[PreserveSig]
		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x30EC508", Offset = "0x30EC508", VA = "0x30EC508")]
		private static extern RESULT FMOD5_DSPConnection_GetMix(IntPtr dspconnection, out float volume);

		[PreserveSig]
		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x30EC5A0", Offset = "0x30EC5A0", VA = "0x30EC5A0")]
		private static extern RESULT FMOD5_DSPConnection_SetMixMatrix(IntPtr dspconnection, float[] matrix, int outchannels, int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x30EC660", Offset = "0x30EC660", VA = "0x30EC660")]
		private static extern RESULT FMOD5_DSPConnection_GetMixMatrix(IntPtr dspconnection, float[] matrix, out int outchannels, out int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x30EC720", Offset = "0x30EC720", VA = "0x30EC720")]
		private static extern RESULT FMOD5_DSPConnection_GetType(IntPtr dspconnection, out DSPCONNECTION_TYPE type);

		[PreserveSig]
		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x30EC7B8", Offset = "0x30EC7B8", VA = "0x30EC7B8")]
		private static extern RESULT FMOD5_DSPConnection_SetUserData(IntPtr dspconnection, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x30EC850", Offset = "0x30EC850", VA = "0x30EC850")]
		private static extern RESULT FMOD5_DSPConnection_GetUserData(IntPtr dspconnection, out IntPtr userdata);

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x30EC8E0", Offset = "0x30EC8E0", VA = "0x30EC8E0")]
		public DSPConnection(IntPtr ptr)
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x30EC8E8", Offset = "0x30EC8E8", VA = "0x30EC8E8")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x30EC934", Offset = "0x30EC934", VA = "0x30EC934")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x20000D4")]
	public struct Geometry
	{
		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x30F7648", Offset = "0x30F7648", VA = "0x30F7648")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x30F76D0", Offset = "0x30F76D0", VA = "0x30F76D0")]
		public RESULT addPolygon(float directocclusion, float reverbocclusion, bool doublesided, int numvertices, VECTOR[] vertices, out int polygonindex)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x30F77AC", Offset = "0x30F77AC", VA = "0x30F77AC")]
		public RESULT getNumPolygons(out int numpolygons)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x30F7844", Offset = "0x30F7844", VA = "0x30F7844")]
		public RESULT getMaxPolygons(out int maxpolygons, out int maxvertices)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x30F78E4", Offset = "0x30F78E4", VA = "0x30F78E4")]
		public RESULT getPolygonNumVertices(int index, out int numvertices)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x30F7984", Offset = "0x30F7984", VA = "0x30F7984")]
		public RESULT setPolygonVertex(int index, int vertexindex, ref VECTOR vertex)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x30F7A34", Offset = "0x30F7A34", VA = "0x30F7A34")]
		public RESULT getPolygonVertex(int index, int vertexindex, out VECTOR vertex)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x30F7AE4", Offset = "0x30F7AE4", VA = "0x30F7AE4")]
		public RESULT setPolygonAttributes(int index, float directocclusion, float reverbocclusion, bool doublesided)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x30F7BA0", Offset = "0x30F7BA0", VA = "0x30F7BA0")]
		public RESULT getPolygonAttributes(int index, out float directocclusion, out float reverbocclusion, out bool doublesided)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x30F7C6C", Offset = "0x30F7C6C", VA = "0x30F7C6C")]
		public RESULT setActive(bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x30F7D08", Offset = "0x30F7D08", VA = "0x30F7D08")]
		public RESULT getActive(out bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x30F7DB4", Offset = "0x30F7DB4", VA = "0x30F7DB4")]
		public RESULT setRotation(ref VECTOR forward, ref VECTOR up)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x30F7E54", Offset = "0x30F7E54", VA = "0x30F7E54")]
		public RESULT getRotation(out VECTOR forward, out VECTOR up)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x30F7EF4", Offset = "0x30F7EF4", VA = "0x30F7EF4")]
		public RESULT setPosition(ref VECTOR position)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x30F7F8C", Offset = "0x30F7F8C", VA = "0x30F7F8C")]
		public RESULT getPosition(out VECTOR position)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x30F8024", Offset = "0x30F8024", VA = "0x30F8024")]
		public RESULT setScale(ref VECTOR scale)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x30F80BC", Offset = "0x30F80BC", VA = "0x30F80BC")]
		public RESULT getScale(out VECTOR scale)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x30F8154", Offset = "0x30F8154", VA = "0x30F8154")]
		public RESULT save(IntPtr data, out int datasize)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x30F81F4", Offset = "0x30F81F4", VA = "0x30F81F4")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x30F828C", Offset = "0x30F828C", VA = "0x30F828C")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x30F7650", Offset = "0x30F7650", VA = "0x30F7650")]
		private static extern RESULT FMOD5_Geometry_Release(IntPtr geometry);

		[PreserveSig]
		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x30F76DC", Offset = "0x30F76DC", VA = "0x30F76DC")]
		private static extern RESULT FMOD5_Geometry_AddPolygon(IntPtr geometry, float directocclusion, float reverbocclusion, bool doublesided, int numvertices, VECTOR[] vertices, out int polygonindex);

		[PreserveSig]
		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x30F77B4", Offset = "0x30F77B4", VA = "0x30F77B4")]
		private static extern RESULT FMOD5_Geometry_GetNumPolygons(IntPtr geometry, out int numpolygons);

		[PreserveSig]
		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x30F784C", Offset = "0x30F784C", VA = "0x30F784C")]
		private static extern RESULT FMOD5_Geometry_GetMaxPolygons(IntPtr geometry, out int maxpolygons, out int maxvertices);

		[PreserveSig]
		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x30F78EC", Offset = "0x30F78EC", VA = "0x30F78EC")]
		private static extern RESULT FMOD5_Geometry_GetPolygonNumVertices(IntPtr geometry, int index, out int numvertices);

		[PreserveSig]
		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x30F798C", Offset = "0x30F798C", VA = "0x30F798C")]
		private static extern RESULT FMOD5_Geometry_SetPolygonVertex(IntPtr geometry, int index, int vertexindex, ref VECTOR vertex);

		[PreserveSig]
		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x30F7A3C", Offset = "0x30F7A3C", VA = "0x30F7A3C")]
		private static extern RESULT FMOD5_Geometry_GetPolygonVertex(IntPtr geometry, int index, int vertexindex, out VECTOR vertex);

		[PreserveSig]
		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x30F7AF0", Offset = "0x30F7AF0", VA = "0x30F7AF0")]
		private static extern RESULT FMOD5_Geometry_SetPolygonAttributes(IntPtr geometry, int index, float directocclusion, float reverbocclusion, bool doublesided);

		[PreserveSig]
		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x30F7BA8", Offset = "0x30F7BA8", VA = "0x30F7BA8")]
		private static extern RESULT FMOD5_Geometry_GetPolygonAttributes(IntPtr geometry, int index, out float directocclusion, out float reverbocclusion, out bool doublesided);

		[PreserveSig]
		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x30F7C78", Offset = "0x30F7C78", VA = "0x30F7C78")]
		private static extern RESULT FMOD5_Geometry_SetActive(IntPtr geometry, bool active);

		[PreserveSig]
		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x30F7D10", Offset = "0x30F7D10", VA = "0x30F7D10")]
		private static extern RESULT FMOD5_Geometry_GetActive(IntPtr geometry, out bool active);

		[PreserveSig]
		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x30F7DBC", Offset = "0x30F7DBC", VA = "0x30F7DBC")]
		private static extern RESULT FMOD5_Geometry_SetRotation(IntPtr geometry, ref VECTOR forward, ref VECTOR up);

		[PreserveSig]
		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x30F7E5C", Offset = "0x30F7E5C", VA = "0x30F7E5C")]
		private static extern RESULT FMOD5_Geometry_GetRotation(IntPtr geometry, out VECTOR forward, out VECTOR up);

		[PreserveSig]
		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x30F7EFC", Offset = "0x30F7EFC", VA = "0x30F7EFC")]
		private static extern RESULT FMOD5_Geometry_SetPosition(IntPtr geometry, ref VECTOR position);

		[PreserveSig]
		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x30F7F94", Offset = "0x30F7F94", VA = "0x30F7F94")]
		private static extern RESULT FMOD5_Geometry_GetPosition(IntPtr geometry, out VECTOR position);

		[PreserveSig]
		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x30F802C", Offset = "0x30F802C", VA = "0x30F802C")]
		private static extern RESULT FMOD5_Geometry_SetScale(IntPtr geometry, ref VECTOR scale);

		[PreserveSig]
		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x30F80C4", Offset = "0x30F80C4", VA = "0x30F80C4")]
		private static extern RESULT FMOD5_Geometry_GetScale(IntPtr geometry, out VECTOR scale);

		[PreserveSig]
		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x30F815C", Offset = "0x30F815C", VA = "0x30F815C")]
		private static extern RESULT FMOD5_Geometry_Save(IntPtr geometry, IntPtr data, out int datasize);

		[PreserveSig]
		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x30F81FC", Offset = "0x30F81FC", VA = "0x30F81FC")]
		private static extern RESULT FMOD5_Geometry_SetUserData(IntPtr geometry, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x30F8294", Offset = "0x30F8294", VA = "0x30F8294")]
		private static extern RESULT FMOD5_Geometry_GetUserData(IntPtr geometry, out IntPtr userdata);

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x30F8324", Offset = "0x30F8324", VA = "0x30F8324")]
		public Geometry(IntPtr ptr)
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x30F832C", Offset = "0x30F832C", VA = "0x30F832C")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x30F8378", Offset = "0x30F8378", VA = "0x30F8378")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public struct Reverb3D
	{
		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x30F943C", Offset = "0x30F943C", VA = "0x30F943C")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x30F94C4", Offset = "0x30F94C4", VA = "0x30F94C4")]
		public RESULT set3DAttributes(ref VECTOR position, float mindistance, float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x30F9574", Offset = "0x30F9574", VA = "0x30F9574")]
		public RESULT get3DAttributes(ref VECTOR position, ref float mindistance, ref float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x30F9624", Offset = "0x30F9624", VA = "0x30F9624")]
		public RESULT setProperties(ref REVERB_PROPERTIES properties)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x30F96BC", Offset = "0x30F96BC", VA = "0x30F96BC")]
		public RESULT getProperties(ref REVERB_PROPERTIES properties)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x30F9754", Offset = "0x30F9754", VA = "0x30F9754")]
		public RESULT setActive(bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x30F97F0", Offset = "0x30F97F0", VA = "0x30F97F0")]
		public RESULT getActive(out bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x30F989C", Offset = "0x30F989C", VA = "0x30F989C")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x30F9934", Offset = "0x30F9934", VA = "0x30F9934")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x30F9444", Offset = "0x30F9444", VA = "0x30F9444")]
		private static extern RESULT FMOD5_Reverb3D_Release(IntPtr reverb3d);

		[PreserveSig]
		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x30F94CC", Offset = "0x30F94CC", VA = "0x30F94CC")]
		private static extern RESULT FMOD5_Reverb3D_Set3DAttributes(IntPtr reverb3d, ref VECTOR position, float mindistance, float maxdistance);

		[PreserveSig]
		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x30F957C", Offset = "0x30F957C", VA = "0x30F957C")]
		private static extern RESULT FMOD5_Reverb3D_Get3DAttributes(IntPtr reverb3d, ref VECTOR position, ref float mindistance, ref float maxdistance);

		[PreserveSig]
		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x30F962C", Offset = "0x30F962C", VA = "0x30F962C")]
		private static extern RESULT FMOD5_Reverb3D_SetProperties(IntPtr reverb3d, ref REVERB_PROPERTIES properties);

		[PreserveSig]
		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x30F96C4", Offset = "0x30F96C4", VA = "0x30F96C4")]
		private static extern RESULT FMOD5_Reverb3D_GetProperties(IntPtr reverb3d, ref REVERB_PROPERTIES properties);

		[PreserveSig]
		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x30F9760", Offset = "0x30F9760", VA = "0x30F9760")]
		private static extern RESULT FMOD5_Reverb3D_SetActive(IntPtr reverb3d, bool active);

		[PreserveSig]
		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x30F97F8", Offset = "0x30F97F8", VA = "0x30F97F8")]
		private static extern RESULT FMOD5_Reverb3D_GetActive(IntPtr reverb3d, out bool active);

		[PreserveSig]
		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x30F98A4", Offset = "0x30F98A4", VA = "0x30F98A4")]
		private static extern RESULT FMOD5_Reverb3D_SetUserData(IntPtr reverb3d, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x30F993C", Offset = "0x30F993C", VA = "0x30F993C")]
		private static extern RESULT FMOD5_Reverb3D_GetUserData(IntPtr reverb3d, out IntPtr userdata);

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x30F99CC", Offset = "0x30F99CC", VA = "0x30F99CC")]
		public Reverb3D(IntPtr ptr)
		{
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x30F99D4", Offset = "0x30F99D4", VA = "0x30F99D4")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x30F9A20", Offset = "0x30F9A20", VA = "0x30F9A20")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x20000D6")]
	public struct StringWrapper
	{
		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr nativeUtf8Ptr;

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x30C46A0", Offset = "0x30C46A0", VA = "0x30C46A0")]
		public StringWrapper(IntPtr ptr)
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x30C46A8", Offset = "0x30C46A8", VA = "0x30C46A8")]
		public static implicit operator string(StringWrapper fstring)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D7")]
	internal static class StringHelper
	{
		[Token(Token = "0x200021A")]
		public class ThreadSafeEncoding : IDisposable
		{
			[Token(Token = "0x4000E0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private UTF8Encoding encoding;

			[Token(Token = "0x4000E0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private byte[] encodedBuffer;

			[Token(Token = "0x4000E0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private char[] decodedBuffer;

			[Token(Token = "0x4000E0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool inUse;

			[Token(Token = "0x4000E0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private GCHandle gcHandle;

			[Token(Token = "0x6000E79")]
			[Address(RVA = "0x30C43B0", Offset = "0x30C43B0", VA = "0x30C43B0")]
			public bool InUse()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E7A")]
			[Address(RVA = "0x30C4328", Offset = "0x30C4328", VA = "0x30C4328")]
			public void SetInUse()
			{
			}

			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0x30C43B8", Offset = "0x30C43B8", VA = "0x30C43B8")]
			private int roundUpPowerTwo(int number)
			{
				return default(int);
			}

			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0x30C43D0", Offset = "0x30C43D0", VA = "0x30C43D0")]
			public byte[] byteFromStringUTF8(string s)
			{
				return null;
			}

			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0x30C4520", Offset = "0x30C4520", VA = "0x30C4520")]
			public IntPtr intptrFromStringUTF8(string s)
			{
				return default(IntPtr);
			}

			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0x30C3CA4", Offset = "0x30C3CA4", VA = "0x30C3CA4")]
			public string stringFromNative(IntPtr nativePtr)
			{
				return null;
			}

			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0x30C45AC", Offset = "0x30C45AC", VA = "0x30C45AC", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000E80")]
			[Address(RVA = "0x30C426C", Offset = "0x30C426C", VA = "0x30C426C")]
			public ThreadSafeEncoding()
			{
			}
		}

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ThreadSafeEncoding> encoders;

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x30C3A34", Offset = "0x30C3A34", VA = "0x30C3A34")]
		public static ThreadSafeEncoding GetFreeHelper()
		{
			return null;
		}
	}
	[Token(Token = "0x20000D8")]
	public static class MarshalHelper
	{
		[Token(Token = "0x6000800")]
		[Address(RVA = "0x30F8EBC", Offset = "0x30F8EBC", VA = "0x30F8EBC")]
		public static int SizeOf(Type t)
		{
			return default(int);
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x30EB64C", Offset = "0x30EB64C", VA = "0x30EB64C")]
		public static object PtrToStructure(IntPtr ptr, Type structureType)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D9")]
	public struct DSP_BUFFER_ARRAY
	{
		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numbuffers;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int[] buffernumchannels;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CHANNELMASK[] bufferchannelmask;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr[] buffers;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SPEAKERMODE speakermode;
	}
	[Token(Token = "0x20000DA")]
	public enum DSP_PROCESS_OPERATION
	{
		[Token(Token = "0x40005F7")]
		PROCESS_PERFORM,
		[Token(Token = "0x40005F8")]
		PROCESS_QUERY
	}
	[Token(Token = "0x20000DB")]
	public struct COMPLEX
	{
		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float real;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float imag;
	}
	[Token(Token = "0x20000DC")]
	public enum DSP_PAN_SURROUND_FLAGS
	{
		[Token(Token = "0x40005FC")]
		DEFAULT,
		[Token(Token = "0x40005FD")]
		ROTATION_NOT_BIASED
	}
	[Token(Token = "0x20000DD")]
	public delegate RESULT DSP_CREATECALLBACK(ref DSP_STATE dsp_state);
	[Token(Token = "0x20000DE")]
	public delegate RESULT DSP_RELEASECALLBACK(ref DSP_STATE dsp_state);
	[Token(Token = "0x20000DF")]
	public delegate RESULT DSP_RESETCALLBACK(ref DSP_STATE dsp_state);
	[Token(Token = "0x20000E0")]
	public delegate RESULT DSP_SETPOSITIONCALLBACK(ref DSP_STATE dsp_state, uint pos);
	[Token(Token = "0x20000E1")]
	public delegate RESULT DSP_READCALLBACK(ref DSP_STATE dsp_state, IntPtr inbuffer, IntPtr outbuffer, uint length, int inchannels, ref int outchannels);
	[Token(Token = "0x20000E2")]
	public delegate RESULT DSP_SHOULDIPROCESS_CALLBACK(ref DSP_STATE dsp_state, bool inputsidle, uint length, CHANNELMASK inmask, int inchannels, SPEAKERMODE speakermode);
	[Token(Token = "0x20000E3")]
	public delegate RESULT DSP_PROCESS_CALLBACK(ref DSP_STATE dsp_state, uint length, ref DSP_BUFFER_ARRAY inbufferarray, ref DSP_BUFFER_ARRAY outbufferarray, bool inputsidle, DSP_PROCESS_OPERATION op);
	[Token(Token = "0x20000E4")]
	public delegate RESULT DSP_SETPARAM_FLOAT_CALLBACK(ref DSP_STATE dsp_state, int index, float value);
	[Token(Token = "0x20000E5")]
	public delegate RESULT DSP_SETPARAM_INT_CALLBACK(ref DSP_STATE dsp_state, int index, int value);
	[Token(Token = "0x20000E6")]
	public delegate RESULT DSP_SETPARAM_BOOL_CALLBACK(ref DSP_STATE dsp_state, int index, bool value);
	[Token(Token = "0x20000E7")]
	public delegate RESULT DSP_SETPARAM_DATA_CALLBACK(ref DSP_STATE dsp_state, int index, IntPtr data, uint length);
	[Token(Token = "0x20000E8")]
	public delegate RESULT DSP_GETPARAM_FLOAT_CALLBACK(ref DSP_STATE dsp_state, int index, ref float value, IntPtr valuestr);
	[Token(Token = "0x20000E9")]
	public delegate RESULT DSP_GETPARAM_INT_CALLBACK(ref DSP_STATE dsp_state, int index, ref int value, IntPtr valuestr);
	[Token(Token = "0x20000EA")]
	public delegate RESULT DSP_GETPARAM_BOOL_CALLBACK(ref DSP_STATE dsp_state, int index, ref bool value, IntPtr valuestr);
	[Token(Token = "0x20000EB")]
	public delegate RESULT DSP_GETPARAM_DATA_CALLBACK(ref DSP_STATE dsp_state, int index, ref IntPtr data, ref uint length, IntPtr valuestr);
	[Token(Token = "0x20000EC")]
	public delegate RESULT DSP_SYSTEM_REGISTER_CALLBACK(ref DSP_STATE dsp_state);
	[Token(Token = "0x20000ED")]
	public delegate RESULT DSP_SYSTEM_DEREGISTER_CALLBACK(ref DSP_STATE dsp_state);
	[Token(Token = "0x20000EE")]
	public delegate RESULT DSP_SYSTEM_MIX_CALLBACK(ref DSP_STATE dsp_state, int stage);
	[Token(Token = "0x20000EF")]
	public delegate IntPtr DSP_ALLOC_FUNC(uint size, MEMORY_TYPE type, IntPtr sourcestr);
	[Token(Token = "0x20000F0")]
	public delegate IntPtr DSP_REALLOC_FUNC(IntPtr ptr, uint size, MEMORY_TYPE type, IntPtr sourcestr);
	[Token(Token = "0x20000F1")]
	public delegate void DSP_FREE_FUNC(IntPtr ptr, MEMORY_TYPE type, IntPtr sourcestr);
	[Token(Token = "0x20000F2")]
	public delegate void DSP_LOG_FUNC(DEBUG_FLAGS level, IntPtr file, int line, IntPtr function, IntPtr format);
	[Token(Token = "0x20000F3")]
	public delegate RESULT DSP_GETSAMPLERATE_FUNC(ref DSP_STATE dsp_state, ref int rate);
	[Token(Token = "0x20000F4")]
	public delegate RESULT DSP_GETBLOCKSIZE_FUNC(ref DSP_STATE dsp_state, ref uint blocksize);
	[Token(Token = "0x20000F5")]
	public delegate RESULT DSP_GETSPEAKERMODE_FUNC(ref DSP_STATE dsp_state, ref int speakermode_mixer, ref int speakermode_output);
	[Token(Token = "0x20000F6")]
	public delegate RESULT DSP_GETCLOCK_FUNC(ref DSP_STATE dsp_state, out ulong clock, out uint offset, out uint length);
	[Token(Token = "0x20000F7")]
	public delegate RESULT DSP_GETLISTENERATTRIBUTES_FUNC(ref DSP_STATE dsp_state, ref int numlisteners, IntPtr attributes);
	[Token(Token = "0x20000F8")]
	public delegate RESULT DSP_GETUSERDATA_FUNC(ref DSP_STATE dsp_state, out IntPtr userdata);
	[Token(Token = "0x20000F9")]
	public delegate RESULT DSP_DFT_FFTREAL_FUNC(ref DSP_STATE dsp_state, int size, IntPtr signal, IntPtr dft, IntPtr window, int signalhop);
	[Token(Token = "0x20000FA")]
	public delegate RESULT DSP_DFT_IFFTREAL_FUNC(ref DSP_STATE dsp_state, int size, IntPtr dft, IntPtr signal, IntPtr window, int signalhop);
	[Token(Token = "0x20000FB")]
	public delegate RESULT DSP_PAN_SUMMONOMATRIX_FUNC(ref DSP_STATE dsp_state, int sourceSpeakerMode, float lowFrequencyGain, float overallGain, IntPtr matrix);
	[Token(Token = "0x20000FC")]
	public delegate RESULT DSP_PAN_SUMSTEREOMATRIX_FUNC(ref DSP_STATE dsp_state, int sourceSpeakerMode, float pan, float lowFrequencyGain, float overallGain, int matrixHop, IntPtr matrix);
	[Token(Token = "0x20000FD")]
	public delegate RESULT DSP_PAN_SUMSURROUNDMATRIX_FUNC(ref DSP_STATE dsp_state, int sourceSpeakerMode, int targetSpeakerMode, float direction, float extent, float rotation, float lowFrequencyGain, float overallGain, int matrixHop, IntPtr matrix, DSP_PAN_SURROUND_FLAGS flags);
	[Token(Token = "0x20000FE")]
	public delegate RESULT DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC(ref DSP_STATE dsp_state, int targetSpeakerMode, float direction, float extent, float lowFrequencyGain, float overallGain, int matrixHop, IntPtr matrix);
	[Token(Token = "0x20000FF")]
	public delegate RESULT DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC(ref DSP_STATE dsp_state, int targetSpeakerMode, float direction, float extent, float rotation, float lowFrequencyGain, float overallGain, int matrixHop, IntPtr matrix);
	[Token(Token = "0x2000100")]
	public delegate RESULT DSP_PAN_GETROLLOFFGAIN_FUNC(ref DSP_STATE dsp_state, DSP_PAN_3D_ROLLOFF_TYPE rolloff, float distance, float mindistance, float maxdistance, out float gain);
	[Token(Token = "0x2000101")]
	public enum DSP_TYPE
	{
		[Token(Token = "0x40005FF")]
		UNKNOWN,
		[Token(Token = "0x4000600")]
		MIXER,
		[Token(Token = "0x4000601")]
		OSCILLATOR,
		[Token(Token = "0x4000602")]
		LOWPASS,
		[Token(Token = "0x4000603")]
		ITLOWPASS,
		[Token(Token = "0x4000604")]
		HIGHPASS,
		[Token(Token = "0x4000605")]
		ECHO,
		[Token(Token = "0x4000606")]
		FADER,
		[Token(Token = "0x4000607")]
		FLANGE,
		[Token(Token = "0x4000608")]
		DISTORTION,
		[Token(Token = "0x4000609")]
		NORMALIZE,
		[Token(Token = "0x400060A")]
		LIMITER,
		[Token(Token = "0x400060B")]
		PARAMEQ,
		[Token(Token = "0x400060C")]
		PITCHSHIFT,
		[Token(Token = "0x400060D")]
		CHORUS,
		[Token(Token = "0x400060E")]
		VSTPLUGIN,
		[Token(Token = "0x400060F")]
		WINAMPPLUGIN,
		[Token(Token = "0x4000610")]
		ITECHO,
		[Token(Token = "0x4000611")]
		COMPRESSOR,
		[Token(Token = "0x4000612")]
		SFXREVERB,
		[Token(Token = "0x4000613")]
		LOWPASS_SIMPLE,
		[Token(Token = "0x4000614")]
		DELAY,
		[Token(Token = "0x4000615")]
		TREMOLO,
		[Token(Token = "0x4000616")]
		LADSPAPLUGIN,
		[Token(Token = "0x4000617")]
		SEND,
		[Token(Token = "0x4000618")]
		RETURN,
		[Token(Token = "0x4000619")]
		HIGHPASS_SIMPLE,
		[Token(Token = "0x400061A")]
		PAN,
		[Token(Token = "0x400061B")]
		THREE_EQ,
		[Token(Token = "0x400061C")]
		FFT,
		[Token(Token = "0x400061D")]
		LOUDNESS_METER,
		[Token(Token = "0x400061E")]
		ENVELOPEFOLLOWER,
		[Token(Token = "0x400061F")]
		CONVOLUTIONREVERB,
		[Token(Token = "0x4000620")]
		CHANNELMIX,
		[Token(Token = "0x4000621")]
		TRANSCEIVER,
		[Token(Token = "0x4000622")]
		OBJECTPAN,
		[Token(Token = "0x4000623")]
		MULTIBAND_EQ,
		[Token(Token = "0x4000624")]
		MAX
	}
	[Token(Token = "0x2000102")]
	public enum DSP_PARAMETER_TYPE
	{
		[Token(Token = "0x4000626")]
		FLOAT,
		[Token(Token = "0x4000627")]
		INT,
		[Token(Token = "0x4000628")]
		BOOL,
		[Token(Token = "0x4000629")]
		DATA,
		[Token(Token = "0x400062A")]
		MAX
	}
	[Token(Token = "0x2000103")]
	public enum DSP_PARAMETER_FLOAT_MAPPING_TYPE
	{
		[Token(Token = "0x400062C")]
		DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR,
		[Token(Token = "0x400062D")]
		DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO,
		[Token(Token = "0x400062E")]
		DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR
	}
	[Token(Token = "0x2000104")]
	public struct DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR
	{
		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numpoints;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr pointparamvalues;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr pointpositions;
	}
	[Token(Token = "0x2000105")]
	public struct DSP_PARAMETER_FLOAT_MAPPING
	{
		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_FLOAT_MAPPING_TYPE type;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR piecewiselinearmapping;
	}
	[Token(Token = "0x2000106")]
	public struct DSP_PARAMETER_DESC_FLOAT
	{
		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float min;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float max;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float defaultval;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DSP_PARAMETER_FLOAT_MAPPING mapping;
	}
	[Token(Token = "0x2000107")]
	public struct DSP_PARAMETER_DESC_INT
	{
		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int min;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int max;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int defaultval;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool goestoinf;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr valuenames;
	}
	[Token(Token = "0x2000108")]
	public struct DSP_PARAMETER_DESC_BOOL
	{
		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool defaultval;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr valuenames;
	}
	[Token(Token = "0x2000109")]
	public struct DSP_PARAMETER_DESC_DATA
	{
		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int datatype;
	}
	[StructLayout(2)]
	[Token(Token = "0x200010A")]
	public struct DSP_PARAMETER_DESC_UNION
	{
		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_DESC_FLOAT floatdesc;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_DESC_INT intdesc;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_DESC_BOOL booldesc;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_DESC_DATA datadesc;
	}
	[Token(Token = "0x200010B")]
	public struct DSP_PARAMETER_DESC
	{
		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_TYPE type;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte[] name;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] label;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string description;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DSP_PARAMETER_DESC_UNION desc;
	}
	[Token(Token = "0x200010C")]
	public enum DSP_PARAMETER_DATA_TYPE
	{
		[Token(Token = "0x400064A")]
		DSP_PARAMETER_DATA_TYPE_USER = 0,
		[Token(Token = "0x400064B")]
		DSP_PARAMETER_DATA_TYPE_OVERALLGAIN = -1,
		[Token(Token = "0x400064C")]
		DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES = -2,
		[Token(Token = "0x400064D")]
		DSP_PARAMETER_DATA_TYPE_SIDECHAIN = -3,
		[Token(Token = "0x400064E")]
		DSP_PARAMETER_DATA_TYPE_FFT = -4,
		[Token(Token = "0x400064F")]
		DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI = -5
	}
	[Token(Token = "0x200010D")]
	public struct DSP_PARAMETER_OVERALLGAIN
	{
		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float linear_gain;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float linear_gain_additive;
	}
	[Token(Token = "0x200010E")]
	public struct DSP_PARAMETER_3DATTRIBUTES
	{
		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ATTRIBUTES_3D relative;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ATTRIBUTES_3D absolute;
	}
	[Token(Token = "0x200010F")]
	public struct DSP_PARAMETER_3DATTRIBUTES_MULTI
	{
		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numlisteners;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ATTRIBUTES_3D[] relative;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] weight;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ATTRIBUTES_3D absolute;
	}
	[Token(Token = "0x2000110")]
	public struct DSP_PARAMETER_SIDECHAIN
	{
		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int sidechainenable;
	}
	[Token(Token = "0x2000111")]
	public struct DSP_PARAMETER_FFT
	{
		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int length;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numchannels;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr[] spectrum_internal;

		[Token(Token = "0x1700007A")]
		public float[][] spectrum
		{
			[Token(Token = "0x6000892")]
			[Address(RVA = "0x30F2284", Offset = "0x30F2284", VA = "0x30F2284")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x30F2400", Offset = "0x30F2400", VA = "0x30F2400")]
		public void getSpectrum(ref float[][] buffer)
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x30F24E8", Offset = "0x30F24E8", VA = "0x30F24E8")]
		public void getSpectrum(int channel, ref float[] buffer)
		{
		}
	}
	[Token(Token = "0x2000112")]
	public struct DSP_LOUDNESS_METER_INFO_TYPE
	{
		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float momentaryloudness;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float shorttermloudness;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float integratedloudness;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float loudness10thpercentile;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float loudness95thpercentile;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] loudnesshistogram;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxtruepeak;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxmomentaryloudness;
	}
	[Token(Token = "0x2000113")]
	public struct DSP_LOUDNESS_METER_WEIGHTING_TYPE
	{
		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float[] channelweight;
	}
	[Token(Token = "0x2000114")]
	public struct DSP_DESCRIPTION
	{
		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pluginsdkversion;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte[] name;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint version;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int numinputbuffers;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numoutputbuffers;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DSP_CREATECALLBACK create;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DSP_RELEASECALLBACK release;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DSP_RESETCALLBACK reset;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DSP_READCALLBACK read;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DSP_PROCESS_CALLBACK process;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DSP_SETPOSITIONCALLBACK setposition;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int numparameters;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IntPtr paramdesc;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public DSP_SETPARAM_FLOAT_CALLBACK setparameterfloat;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public DSP_SETPARAM_INT_CALLBACK setparameterint;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public DSP_SETPARAM_BOOL_CALLBACK setparameterbool;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public DSP_SETPARAM_DATA_CALLBACK setparameterdata;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public DSP_GETPARAM_FLOAT_CALLBACK getparameterfloat;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public DSP_GETPARAM_INT_CALLBACK getparameterint;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public DSP_GETPARAM_BOOL_CALLBACK getparameterbool;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public DSP_GETPARAM_DATA_CALLBACK getparameterdata;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public DSP_SHOULDIPROCESS_CALLBACK shouldiprocess;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IntPtr userdata;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public DSP_SYSTEM_REGISTER_CALLBACK sys_register;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public DSP_SYSTEM_DEREGISTER_CALLBACK sys_deregister;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public DSP_SYSTEM_MIX_CALLBACK sys_mix;
	}
	[Token(Token = "0x2000115")]
	public struct DSP_STATE_DFT_FUNCTIONS
	{
		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_DFT_FFTREAL_FUNC fftreal;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DSP_DFT_IFFTREAL_FUNC inversefftreal;
	}
	[Token(Token = "0x2000116")]
	public struct DSP_STATE_PAN_FUNCTIONS
	{
		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PAN_SUMMONOMATRIX_FUNC summonomatrix;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DSP_PAN_SUMSTEREOMATRIX_FUNC sumstereomatrix;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DSP_PAN_SUMSURROUNDMATRIX_FUNC sumsurroundmatrix;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC summonotosurroundmatrix;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC sumstereotosurroundmatrix;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DSP_PAN_GETROLLOFFGAIN_FUNC getrolloffgain;
	}
	[Token(Token = "0x2000117")]
	public struct DSP_STATE_FUNCTIONS
	{
		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_ALLOC_FUNC alloc;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DSP_REALLOC_FUNC realloc;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DSP_FREE_FUNC free;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DSP_GETSAMPLERATE_FUNC getsamplerate;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DSP_GETBLOCKSIZE_FUNC getblocksize;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr dft;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntPtr pan;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DSP_GETSPEAKERMODE_FUNC getspeakermode;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DSP_GETCLOCK_FUNC getclock;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DSP_GETLISTENERATTRIBUTES_FUNC getlistenerattributes;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public DSP_LOG_FUNC log;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public DSP_GETUSERDATA_FUNC getuserdata;
	}
	[Token(Token = "0x2000118")]
	public struct DSP_STATE
	{
		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr instance;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr plugindata;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint channelmask;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int source_speakermode;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr sidechaindata;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int sidechainchannels;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr functions;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int systemobject;
	}
	[Token(Token = "0x2000119")]
	public struct DSP_METERING_INFO
	{
		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numsamples;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] peaklevel;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] rmslevel;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public short numchannels;
	}
	[Token(Token = "0x200011A")]
	public enum DSP_OSCILLATOR
	{
		[Token(Token = "0x40006A0")]
		TYPE,
		[Token(Token = "0x40006A1")]
		RATE
	}
	[Token(Token = "0x200011B")]
	public enum DSP_LOWPASS
	{
		[Token(Token = "0x40006A3")]
		CUTOFF,
		[Token(Token = "0x40006A4")]
		RESONANCE
	}
	[Token(Token = "0x200011C")]
	public enum DSP_ITLOWPASS
	{
		[Token(Token = "0x40006A6")]
		CUTOFF,
		[Token(Token = "0x40006A7")]
		RESONANCE
	}
	[Token(Token = "0x200011D")]
	public enum DSP_HIGHPASS
	{
		[Token(Token = "0x40006A9")]
		CUTOFF,
		[Token(Token = "0x40006AA")]
		RESONANCE
	}
	[Token(Token = "0x200011E")]
	public enum DSP_ECHO
	{
		[Token(Token = "0x40006AC")]
		DELAY,
		[Token(Token = "0x40006AD")]
		FEEDBACK,
		[Token(Token = "0x40006AE")]
		DRYLEVEL,
		[Token(Token = "0x40006AF")]
		WETLEVEL
	}
	[Token(Token = "0x200011F")]
	public enum DSP_FADER
	{
		[Token(Token = "0x40006B1")]
		GAIN,
		[Token(Token = "0x40006B2")]
		OVERALL_GAIN
	}
	[Token(Token = "0x2000120")]
	public enum DSP_DELAY
	{
		[Token(Token = "0x40006B4")]
		CH0,
		[Token(Token = "0x40006B5")]
		CH1,
		[Token(Token = "0x40006B6")]
		CH2,
		[Token(Token = "0x40006B7")]
		CH3,
		[Token(Token = "0x40006B8")]
		CH4,
		[Token(Token = "0x40006B9")]
		CH5,
		[Token(Token = "0x40006BA")]
		CH6,
		[Token(Token = "0x40006BB")]
		CH7,
		[Token(Token = "0x40006BC")]
		CH8,
		[Token(Token = "0x40006BD")]
		CH9,
		[Token(Token = "0x40006BE")]
		CH10,
		[Token(Token = "0x40006BF")]
		CH11,
		[Token(Token = "0x40006C0")]
		CH12,
		[Token(Token = "0x40006C1")]
		CH13,
		[Token(Token = "0x40006C2")]
		CH14,
		[Token(Token = "0x40006C3")]
		CH15,
		[Token(Token = "0x40006C4")]
		MAXDELAY
	}
	[Token(Token = "0x2000121")]
	public enum DSP_FLANGE
	{
		[Token(Token = "0x40006C6")]
		MIX,
		[Token(Token = "0x40006C7")]
		DEPTH,
		[Token(Token = "0x40006C8")]
		RATE
	}
	[Token(Token = "0x2000122")]
	public enum DSP_TREMOLO
	{
		[Token(Token = "0x40006CA")]
		FREQUENCY,
		[Token(Token = "0x40006CB")]
		DEPTH,
		[Token(Token = "0x40006CC")]
		SHAPE,
		[Token(Token = "0x40006CD")]
		SKEW,
		[Token(Token = "0x40006CE")]
		DUTY,
		[Token(Token = "0x40006CF")]
		SQUARE,
		[Token(Token = "0x40006D0")]
		PHASE,
		[Token(Token = "0x40006D1")]
		SPREAD
	}
	[Token(Token = "0x2000123")]
	public enum DSP_DISTORTION
	{
		[Token(Token = "0x40006D3")]
		LEVEL
	}
	[Token(Token = "0x2000124")]
	public enum DSP_NORMALIZE
	{
		[Token(Token = "0x40006D5")]
		FADETIME,
		[Token(Token = "0x40006D6")]
		THRESHHOLD,
		[Token(Token = "0x40006D7")]
		MAXAMP
	}
	[Token(Token = "0x2000125")]
	public enum DSP_LIMITER
	{
		[Token(Token = "0x40006D9")]
		RELEASETIME,
		[Token(Token = "0x40006DA")]
		CEILING,
		[Token(Token = "0x40006DB")]
		MAXIMIZERGAIN,
		[Token(Token = "0x40006DC")]
		MODE
	}
	[Token(Token = "0x2000126")]
	public enum DSP_PARAMEQ
	{
		[Token(Token = "0x40006DE")]
		CENTER,
		[Token(Token = "0x40006DF")]
		BANDWIDTH,
		[Token(Token = "0x40006E0")]
		GAIN
	}
	[Token(Token = "0x2000127")]
	public enum DSP_MULTIBAND_EQ
	{
		[Token(Token = "0x40006E2")]
		A_FILTER,
		[Token(Token = "0x40006E3")]
		A_FREQUENCY,
		[Token(Token = "0x40006E4")]
		A_Q,
		[Token(Token = "0x40006E5")]
		A_GAIN,
		[Token(Token = "0x40006E6")]
		B_FILTER,
		[Token(Token = "0x40006E7")]
		B_FREQUENCY,
		[Token(Token = "0x40006E8")]
		B_Q,
		[Token(Token = "0x40006E9")]
		B_GAIN,
		[Token(Token = "0x40006EA")]
		C_FILTER,
		[Token(Token = "0x40006EB")]
		C_FREQUENCY,
		[Token(Token = "0x40006EC")]
		C_Q,
		[Token(Token = "0x40006ED")]
		C_GAIN,
		[Token(Token = "0x40006EE")]
		D_FILTER,
		[Token(Token = "0x40006EF")]
		D_FREQUENCY,
		[Token(Token = "0x40006F0")]
		D_Q,
		[Token(Token = "0x40006F1")]
		D_GAIN,
		[Token(Token = "0x40006F2")]
		E_FILTER,
		[Token(Token = "0x40006F3")]
		E_FREQUENCY,
		[Token(Token = "0x40006F4")]
		E_Q,
		[Token(Token = "0x40006F5")]
		E_GAIN
	}
	[Token(Token = "0x2000128")]
	public enum DSP_MULTIBAND_EQ_FILTER_TYPE
	{
		[Token(Token = "0x40006F7")]
		DISABLED,
		[Token(Token = "0x40006F8")]
		LOWPASS_12DB,
		[Token(Token = "0x40006F9")]
		LOWPASS_24DB,
		[Token(Token = "0x40006FA")]
		LOWPASS_48DB,
		[Token(Token = "0x40006FB")]
		HIGHPASS_12DB,
		[Token(Token = "0x40006FC")]
		HIGHPASS_24DB,
		[Token(Token = "0x40006FD")]
		HIGHPASS_48DB,
		[Token(Token = "0x40006FE")]
		LOWSHELF,
		[Token(Token = "0x40006FF")]
		HIGHSHELF,
		[Token(Token = "0x4000700")]
		PEAKING,
		[Token(Token = "0x4000701")]
		BANDPASS,
		[Token(Token = "0x4000702")]
		NOTCH,
		[Token(Token = "0x4000703")]
		ALLPASS
	}
	[Token(Token = "0x2000129")]
	public enum DSP_PITCHSHIFT
	{
		[Token(Token = "0x4000705")]
		PITCH,
		[Token(Token = "0x4000706")]
		FFTSIZE,
		[Token(Token = "0x4000707")]
		OVERLAP,
		[Token(Token = "0x4000708")]
		MAXCHANNELS
	}
	[Token(Token = "0x200012A")]
	public enum DSP_CHORUS
	{
		[Token(Token = "0x400070A")]
		MIX,
		[Token(Token = "0x400070B")]
		RATE,
		[Token(Token = "0x400070C")]
		DEPTH
	}
	[Token(Token = "0x200012B")]
	public enum DSP_ITECHO
	{
		[Token(Token = "0x400070E")]
		WETDRYMIX,
		[Token(Token = "0x400070F")]
		FEEDBACK,
		[Token(Token = "0x4000710")]
		LEFTDELAY,
		[Token(Token = "0x4000711")]
		RIGHTDELAY,
		[Token(Token = "0x4000712")]
		PANDELAY
	}
	[Token(Token = "0x200012C")]
	public enum DSP_COMPRESSOR
	{
		[Token(Token = "0x4000714")]
		THRESHOLD,
		[Token(Token = "0x4000715")]
		RATIO,
		[Token(Token = "0x4000716")]
		ATTACK,
		[Token(Token = "0x4000717")]
		RELEASE,
		[Token(Token = "0x4000718")]
		GAINMAKEUP,
		[Token(Token = "0x4000719")]
		USESIDECHAIN,
		[Token(Token = "0x400071A")]
		LINKED
	}
	[Token(Token = "0x200012D")]
	public enum DSP_SFXREVERB
	{
		[Token(Token = "0x400071C")]
		DECAYTIME,
		[Token(Token = "0x400071D")]
		EARLYDELAY,
		[Token(Token = "0x400071E")]
		LATEDELAY,
		[Token(Token = "0x400071F")]
		HFREFERENCE,
		[Token(Token = "0x4000720")]
		HFDECAYRATIO,
		[Token(Token = "0x4000721")]
		DIFFUSION,
		[Token(Token = "0x4000722")]
		DENSITY,
		[Token(Token = "0x4000723")]
		LOWSHELFFREQUENCY,
		[Token(Token = "0x4000724")]
		LOWSHELFGAIN,
		[Token(Token = "0x4000725")]
		HIGHCUT,
		[Token(Token = "0x4000726")]
		EARLYLATEMIX,
		[Token(Token = "0x4000727")]
		WETLEVEL,
		[Token(Token = "0x4000728")]
		DRYLEVEL
	}
	[Token(Token = "0x200012E")]
	public enum DSP_LOWPASS_SIMPLE
	{
		[Token(Token = "0x400072A")]
		CUTOFF
	}
	[Token(Token = "0x200012F")]
	public enum DSP_SEND
	{
		[Token(Token = "0x400072C")]
		RETURNID,
		[Token(Token = "0x400072D")]
		LEVEL
	}
	[Token(Token = "0x2000130")]
	public enum DSP_RETURN
	{
		[Token(Token = "0x400072F")]
		ID,
		[Token(Token = "0x4000730")]
		INPUT_SPEAKER_MODE
	}
	[Token(Token = "0x2000131")]
	public enum DSP_HIGHPASS_SIMPLE
	{
		[Token(Token = "0x4000732")]
		CUTOFF
	}
	[Token(Token = "0x2000132")]
	public enum DSP_PAN_2D_STEREO_MODE_TYPE
	{
		[Token(Token = "0x4000734")]
		DISTRIBUTED,
		[Token(Token = "0x4000735")]
		DISCRETE
	}
	[Token(Token = "0x2000133")]
	public enum DSP_PAN_MODE_TYPE
	{
		[Token(Token = "0x4000737")]
		MONO,
		[Token(Token = "0x4000738")]
		STEREO,
		[Token(Token = "0x4000739")]
		SURROUND
	}
	[Token(Token = "0x2000134")]
	public enum DSP_PAN_3D_ROLLOFF_TYPE
	{
		[Token(Token = "0x400073B")]
		LINEARSQUARED,
		[Token(Token = "0x400073C")]
		LINEAR,
		[Token(Token = "0x400073D")]
		INVERSE,
		[Token(Token = "0x400073E")]
		INVERSETAPERED,
		[Token(Token = "0x400073F")]
		CUSTOM
	}
	[Token(Token = "0x2000135")]
	public enum DSP_PAN_3D_EXTENT_MODE_TYPE
	{
		[Token(Token = "0x4000741")]
		AUTO,
		[Token(Token = "0x4000742")]
		USER,
		[Token(Token = "0x4000743")]
		OFF
	}
	[Token(Token = "0x2000136")]
	public enum DSP_PAN
	{
		[Token(Token = "0x4000745")]
		MODE,
		[Token(Token = "0x4000746")]
		_2D_STEREO_POSITION,
		[Token(Token = "0x4000747")]
		_2D_DIRECTION,
		[Token(Token = "0x4000748")]
		_2D_EXTENT,
		[Token(Token = "0x4000749")]
		_2D_ROTATION,
		[Token(Token = "0x400074A")]
		_2D_LFE_LEVEL,
		[Token(Token = "0x400074B")]
		_2D_STEREO_MODE,
		[Token(Token = "0x400074C")]
		_2D_STEREO_SEPARATION,
		[Token(Token = "0x400074D")]
		_2D_STEREO_AXIS,
		[Token(Token = "0x400074E")]
		ENABLED_SPEAKERS,
		[Token(Token = "0x400074F")]
		_3D_POSITION,
		[Token(Token = "0x4000750")]
		_3D_ROLLOFF,
		[Token(Token = "0x4000751")]
		_3D_MIN_DISTANCE,
		[Token(Token = "0x4000752")]
		_3D_MAX_DISTANCE,
		[Token(Token = "0x4000753")]
		_3D_EXTENT_MODE,
		[Token(Token = "0x4000754")]
		_3D_SOUND_SIZE,
		[Token(Token = "0x4000755")]
		_3D_MIN_EXTENT,
		[Token(Token = "0x4000756")]
		_3D_PAN_BLEND,
		[Token(Token = "0x4000757")]
		LFE_UPMIX_ENABLED,
		[Token(Token = "0x4000758")]
		OVERALL_GAIN,
		[Token(Token = "0x4000759")]
		SURROUND_SPEAKER_MODE,
		[Token(Token = "0x400075A")]
		_2D_HEIGHT_BLEND
	}
	[Token(Token = "0x2000137")]
	public enum DSP_THREE_EQ_CROSSOVERSLOPE_TYPE
	{
		[Token(Token = "0x400075C")]
		_12DB,
		[Token(Token = "0x400075D")]
		_24DB,
		[Token(Token = "0x400075E")]
		_48DB
	}
	[Token(Token = "0x2000138")]
	public enum DSP_THREE_EQ
	{
		[Token(Token = "0x4000760")]
		LOWGAIN,
		[Token(Token = "0x4000761")]
		MIDGAIN,
		[Token(Token = "0x4000762")]
		HIGHGAIN,
		[Token(Token = "0x4000763")]
		LOWCROSSOVER,
		[Token(Token = "0x4000764")]
		HIGHCROSSOVER,
		[Token(Token = "0x4000765")]
		CROSSOVERSLOPE
	}
	[Token(Token = "0x2000139")]
	public enum DSP_FFT_WINDOW
	{
		[Token(Token = "0x4000767")]
		RECT,
		[Token(Token = "0x4000768")]
		TRIANGLE,
		[Token(Token = "0x4000769")]
		HAMMING,
		[Token(Token = "0x400076A")]
		HANNING,
		[Token(Token = "0x400076B")]
		BLACKMAN,
		[Token(Token = "0x400076C")]
		BLACKMANHARRIS
	}
	[Token(Token = "0x200013A")]
	public enum DSP_FFT
	{
		[Token(Token = "0x400076E")]
		WINDOWSIZE,
		[Token(Token = "0x400076F")]
		WINDOWTYPE,
		[Token(Token = "0x4000770")]
		SPECTRUMDATA,
		[Token(Token = "0x4000771")]
		DOMINANT_FREQ
	}
	[Token(Token = "0x200013B")]
	public enum DSP_LOUDNESS_METER
	{
		[Token(Token = "0x4000773")]
		STATE,
		[Token(Token = "0x4000774")]
		WEIGHTING,
		[Token(Token = "0x4000775")]
		INFO
	}
	[Token(Token = "0x200013C")]
	public enum DSP_LOUDNESS_METER_STATE_TYPE
	{
		[Token(Token = "0x4000777")]
		RESET_INTEGRATED = -3,
		[Token(Token = "0x4000778")]
		RESET_MAXPEAK,
		[Token(Token = "0x4000779")]
		RESET_ALL,
		[Token(Token = "0x400077A")]
		PAUSED,
		[Token(Token = "0x400077B")]
		ANALYZING
	}
	[Token(Token = "0x200013D")]
	public enum DSP_ENVELOPEFOLLOWER
	{
		[Token(Token = "0x400077D")]
		ATTACK,
		[Token(Token = "0x400077E")]
		RELEASE,
		[Token(Token = "0x400077F")]
		ENVELOPE,
		[Token(Token = "0x4000780")]
		USESIDECHAIN
	}
	[Token(Token = "0x200013E")]
	public enum DSP_CONVOLUTION_REVERB
	{
		[Token(Token = "0x4000782")]
		IR,
		[Token(Token = "0x4000783")]
		WET,
		[Token(Token = "0x4000784")]
		DRY,
		[Token(Token = "0x4000785")]
		LINKED
	}
	[Token(Token = "0x200013F")]
	public enum DSP_CHANNELMIX_OUTPUT
	{
		[Token(Token = "0x4000787")]
		DEFAULT,
		[Token(Token = "0x4000788")]
		ALLMONO,
		[Token(Token = "0x4000789")]
		ALLSTEREO,
		[Token(Token = "0x400078A")]
		ALLQUAD,
		[Token(Token = "0x400078B")]
		ALL5POINT1,
		[Token(Token = "0x400078C")]
		ALL7POINT1,
		[Token(Token = "0x400078D")]
		ALLLFE,
		[Token(Token = "0x400078E")]
		ALL7POINT1POINT4
	}
	[Token(Token = "0x2000140")]
	public enum DSP_CHANNELMIX
	{
		[Token(Token = "0x4000790")]
		OUTPUTGROUPING,
		[Token(Token = "0x4000791")]
		GAIN_CH0,
		[Token(Token = "0x4000792")]
		GAIN_CH1,
		[Token(Token = "0x4000793")]
		GAIN_CH2,
		[Token(Token = "0x4000794")]
		GAIN_CH3,
		[Token(Token = "0x4000795")]
		GAIN_CH4,
		[Token(Token = "0x4000796")]
		GAIN_CH5,
		[Token(Token = "0x4000797")]
		GAIN_CH6,
		[Token(Token = "0x4000798")]
		GAIN_CH7,
		[Token(Token = "0x4000799")]
		GAIN_CH8,
		[Token(Token = "0x400079A")]
		GAIN_CH9,
		[Token(Token = "0x400079B")]
		GAIN_CH10,
		[Token(Token = "0x400079C")]
		GAIN_CH11,
		[Token(Token = "0x400079D")]
		GAIN_CH12,
		[Token(Token = "0x400079E")]
		GAIN_CH13,
		[Token(Token = "0x400079F")]
		GAIN_CH14,
		[Token(Token = "0x40007A0")]
		GAIN_CH15,
		[Token(Token = "0x40007A1")]
		GAIN_CH16,
		[Token(Token = "0x40007A2")]
		GAIN_CH17,
		[Token(Token = "0x40007A3")]
		GAIN_CH18,
		[Token(Token = "0x40007A4")]
		GAIN_CH19,
		[Token(Token = "0x40007A5")]
		GAIN_CH20,
		[Token(Token = "0x40007A6")]
		GAIN_CH21,
		[Token(Token = "0x40007A7")]
		GAIN_CH22,
		[Token(Token = "0x40007A8")]
		GAIN_CH23,
		[Token(Token = "0x40007A9")]
		GAIN_CH24,
		[Token(Token = "0x40007AA")]
		GAIN_CH25,
		[Token(Token = "0x40007AB")]
		GAIN_CH26,
		[Token(Token = "0x40007AC")]
		GAIN_CH27,
		[Token(Token = "0x40007AD")]
		GAIN_CH28,
		[Token(Token = "0x40007AE")]
		GAIN_CH29,
		[Token(Token = "0x40007AF")]
		GAIN_CH30,
		[Token(Token = "0x40007B0")]
		GAIN_CH31,
		[Token(Token = "0x40007B1")]
		OUTPUT_CH0,
		[Token(Token = "0x40007B2")]
		OUTPUT_CH1,
		[Token(Token = "0x40007B3")]
		OUTPUT_CH2,
		[Token(Token = "0x40007B4")]
		OUTPUT_CH3,
		[Token(Token = "0x40007B5")]
		OUTPUT_CH4,
		[Token(Token = "0x40007B6")]
		OUTPUT_CH5,
		[Token(Token = "0x40007B7")]
		OUTPUT_CH6,
		[Token(Token = "0x40007B8")]
		OUTPUT_CH7,
		[Token(Token = "0x40007B9")]
		OUTPUT_CH8,
		[Token(Token = "0x40007BA")]
		OUTPUT_CH9,
		[Token(Token = "0x40007BB")]
		OUTPUT_CH10,
		[Token(Token = "0x40007BC")]
		OUTPUT_CH11,
		[Token(Token = "0x40007BD")]
		OUTPUT_CH12,
		[Token(Token = "0x40007BE")]
		OUTPUT_CH13,
		[Token(Token = "0x40007BF")]
		OUTPUT_CH14,
		[Token(Token = "0x40007C0")]
		OUTPUT_CH15,
		[Token(Token = "0x40007C1")]
		OUTPUT_CH16,
		[Token(Token = "0x40007C2")]
		OUTPUT_CH17,
		[Token(Token = "0x40007C3")]
		OUTPUT_CH18,
		[Token(Token = "0x40007C4")]
		OUTPUT_CH19,
		[Token(Token = "0x40007C5")]
		OUTPUT_CH20,
		[Token(Token = "0x40007C6")]
		OUTPUT_CH21,
		[Token(Token = "0x40007C7")]
		OUTPUT_CH22,
		[Token(Token = "0x40007C8")]
		OUTPUT_CH23,
		[Token(Token = "0x40007C9")]
		OUTPUT_CH24,
		[Token(Token = "0x40007CA")]
		OUTPUT_CH25,
		[Token(Token = "0x40007CB")]
		OUTPUT_CH26,
		[Token(Token = "0x40007CC")]
		OUTPUT_CH27,
		[Token(Token = "0x40007CD")]
		OUTPUT_CH28,
		[Token(Token = "0x40007CE")]
		OUTPUT_CH29,
		[Token(Token = "0x40007CF")]
		OUTPUT_CH30,
		[Token(Token = "0x40007D0")]
		OUTPUT_CH31
	}
	[Token(Token = "0x2000141")]
	public enum DSP_TRANSCEIVER_SPEAKERMODE
	{
		[Token(Token = "0x40007D2")]
		AUTO = -1,
		[Token(Token = "0x40007D3")]
		MONO,
		[Token(Token = "0x40007D4")]
		STEREO,
		[Token(Token = "0x40007D5")]
		SURROUND
	}
	[Token(Token = "0x2000142")]
	public enum DSP_TRANSCEIVER
	{
		[Token(Token = "0x40007D7")]
		TRANSMIT,
		[Token(Token = "0x40007D8")]
		GAIN,
		[Token(Token = "0x40007D9")]
		CHANNEL,
		[Token(Token = "0x40007DA")]
		TRANSMITSPEAKERMODE
	}
	[Token(Token = "0x2000143")]
	public enum DSP_OBJECTPAN
	{
		[Token(Token = "0x40007DC")]
		_3D_POSITION,
		[Token(Token = "0x40007DD")]
		_3D_ROLLOFF,
		[Token(Token = "0x40007DE")]
		_3D_MIN_DISTANCE,
		[Token(Token = "0x40007DF")]
		_3D_MAX_DISTANCE,
		[Token(Token = "0x40007E0")]
		_3D_EXTENT_MODE,
		[Token(Token = "0x40007E1")]
		_3D_SOUND_SIZE,
		[Token(Token = "0x40007E2")]
		_3D_MIN_EXTENT,
		[Token(Token = "0x40007E3")]
		OVERALL_GAIN,
		[Token(Token = "0x40007E4")]
		OUTPUTGAIN
	}
	[Token(Token = "0x2000144")]
	public class Error
	{
		[Token(Token = "0x6000895")]
		[Address(RVA = "0x30F5C1C", Offset = "0x30F5C1C", VA = "0x30F5C1C")]
		public static string String(RESULT errcode)
		{
			return null;
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x30F5C80", Offset = "0x30F5C80", VA = "0x30F5C80")]
		public Error()
		{
		}
	}
}
namespace FMOD.Studio
{
	[Token(Token = "0x2000145")]
	public class STUDIO_VERSION
	{
		[Token(Token = "0x40007E5")]
		public const string dll = "fmodstudio";

		[Token(Token = "0x40007E6")]
		public const string dllSuffix = "";

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x30CC1BC", Offset = "0x30CC1BC", VA = "0x30CC1BC")]
		public STUDIO_VERSION()
		{
		}
	}
	[Token(Token = "0x2000146")]
	public enum STOP_MODE
	{
		[Token(Token = "0x40007E8")]
		ALLOWFADEOUT,
		[Token(Token = "0x40007E9")]
		IMMEDIATE
	}
	[Token(Token = "0x2000147")]
	public enum LOADING_STATE
	{
		[Token(Token = "0x40007EB")]
		UNLOADING,
		[Token(Token = "0x40007EC")]
		UNLOADED,
		[Token(Token = "0x40007ED")]
		LOADING,
		[Token(Token = "0x40007EE")]
		LOADED,
		[Token(Token = "0x40007EF")]
		ERROR
	}
	[Token(Token = "0x2000148")]
	public struct PROGRAMMER_SOUND_PROPERTIES
	{
		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper name;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr sound;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int subsoundIndex;
	}
	[Token(Token = "0x2000149")]
	public struct TIMELINE_MARKER_PROPERTIES
	{
		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper name;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int position;
	}
	[Token(Token = "0x200014A")]
	public struct TIMELINE_BEAT_PROPERTIES
	{
		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int bar;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int beat;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int position;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float tempo;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int timesignatureupper;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int timesignaturelower;
	}
	[Token(Token = "0x200014B")]
	public struct TIMELINE_NESTED_BEAT_PROPERTIES
	{
		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Guid eventid;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TIMELINE_BEAT_PROPERTIES properties;
	}
	[Token(Token = "0x200014C")]
	public struct ADVANCEDSETTINGS
	{
		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int cbsize;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int commandqueuesize;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int handleinitialsize;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int studioupdateperiod;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int idlesampledatapoolsize;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int streamingscheduledelay;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr encryptionkey;
	}
	[Token(Token = "0x200014D")]
	public struct CPU_USAGE
	{
		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float dspusage;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float streamusage;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float geometryusage;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float updateusage;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float studiousage;
	}
	[Token(Token = "0x200014E")]
	public struct BUFFER_INFO
	{
		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int currentusage;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int peakusage;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int capacity;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int stallcount;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float stalltime;
	}
	[Token(Token = "0x200014F")]
	public struct BUFFER_USAGE
	{
		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public BUFFER_INFO studiocommandqueue;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public BUFFER_INFO studiohandle;
	}
	[Token(Token = "0x2000150")]
	public struct BANK_INFO
	{
		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int size;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr userdata;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int userdatalength;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FILE_OPEN_CALLBACK opencallback;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FILE_CLOSE_CALLBACK closecallback;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FILE_READ_CALLBACK readcallback;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FILE_SEEK_CALLBACK seekcallback;
	}
	[Token(Token = "0x2000151")]
	[Flags]
	public enum SYSTEM_CALLBACK_TYPE : uint
	{
		[Token(Token = "0x4000818")]
		PREUPDATE = 1u,
		[Token(Token = "0x4000819")]
		POSTUPDATE = 2u,
		[Token(Token = "0x400081A")]
		BANK_UNLOAD = 4u,
		[Token(Token = "0x400081B")]
		LIVEUPDATE_CONNECTED = 8u,
		[Token(Token = "0x400081C")]
		LIVEUPDATE_DISCONNECTED = 0x10u,
		[Token(Token = "0x400081D")]
		ALL = uint.MaxValue
	}
	[Token(Token = "0x2000152")]
	public delegate RESULT SYSTEM_CALLBACK(IntPtr system, SYSTEM_CALLBACK_TYPE type, IntPtr commanddata, IntPtr userdata);
	[Token(Token = "0x2000153")]
	public enum PARAMETER_TYPE
	{
		[Token(Token = "0x400081F")]
		GAME_CONTROLLED,
		[Token(Token = "0x4000820")]
		AUTOMATIC_DISTANCE,
		[Token(Token = "0x4000821")]
		AUTOMATIC_EVENT_CONE_ANGLE,
		[Token(Token = "0x4000822")]
		AUTOMATIC_EVENT_ORIENTATION,
		[Token(Token = "0x4000823")]
		AUTOMATIC_DIRECTION,
		[Token(Token = "0x4000824")]
		AUTOMATIC_ELEVATION,
		[Token(Token = "0x4000825")]
		AUTOMATIC_LISTENER_ORIENTATION,
		[Token(Token = "0x4000826")]
		AUTOMATIC_SPEED,
		[Token(Token = "0x4000827")]
		AUTOMATIC_SPEED_ABSOLUTE,
		[Token(Token = "0x4000828")]
		MAX
	}
	[Token(Token = "0x2000154")]
	[Flags]
	public enum PARAMETER_FLAGS : uint
	{
		[Token(Token = "0x400082A")]
		READONLY = 1u,
		[Token(Token = "0x400082B")]
		AUTOMATIC = 2u,
		[Token(Token = "0x400082C")]
		GLOBAL = 4u,
		[Token(Token = "0x400082D")]
		DISCRETE = 8u
	}
	[Token(Token = "0x2000155")]
	public struct PARAMETER_ID
	{
		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint data1;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint data2;
	}
	[Token(Token = "0x2000156")]
	public struct PARAMETER_DESCRIPTION
	{
		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper name;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PARAMETER_ID id;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float minimum;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maximum;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float defaultvalue;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PARAMETER_TYPE type;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PARAMETER_FLAGS flags;
	}
	[Token(Token = "0x2000157")]
	internal enum LOAD_MEMORY_MODE
	{
		[Token(Token = "0x4000838")]
		LOAD_MEMORY,
		[Token(Token = "0x4000839")]
		LOAD_MEMORY_POINT
	}
	[Token(Token = "0x2000158")]
	internal enum LOAD_MEMORY_ALIGNMENT
	{
		[Token(Token = "0x400083B")]
		VALUE = 0x20
	}
	[Token(Token = "0x2000159")]
	public struct SOUND_INFO
	{
		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr name_or_data;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public MODE mode;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CREATESOUNDEXINFO exinfo;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public int subsoundindex;

		[Token(Token = "0x1700007B")]
		public string name
		{
			[Token(Token = "0x600089C")]
			[Address(RVA = "0x30CC058", Offset = "0x30CC058", VA = "0x30CC058")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x200015A")]
	public enum USER_PROPERTY_TYPE
	{
		[Token(Token = "0x4000841")]
		INTEGER,
		[Token(Token = "0x4000842")]
		BOOLEAN,
		[Token(Token = "0x4000843")]
		FLOAT,
		[Token(Token = "0x4000844")]
		STRING
	}
	[Token(Token = "0x200015B")]
	public struct USER_PROPERTY
	{
		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper name;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public USER_PROPERTY_TYPE type;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Union_IntBoolFloatString value;

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x30D0408", Offset = "0x30D0408", VA = "0x30D0408")]
		public int intValue()
		{
			return default(int);
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x30D0420", Offset = "0x30D0420", VA = "0x30D0420")]
		public bool boolValue()
		{
			return default(bool);
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x30D0444", Offset = "0x30D0444", VA = "0x30D0444")]
		public float floatValue()
		{
			return default(float);
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x30D0460", Offset = "0x30D0460", VA = "0x30D0460")]
		public string stringValue()
		{
			return null;
		}
	}
	[StructLayout(2)]
	[Token(Token = "0x200015C")]
	internal struct Union_IntBoolFloatString
	{
		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int intvalue;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool boolvalue;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float floatvalue;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper stringvalue;
	}
	[Token(Token = "0x200015D")]
	[Flags]
	public enum INITFLAGS : uint
	{
		[Token(Token = "0x400084D")]
		NORMAL = 0u,
		[Token(Token = "0x400084E")]
		LIVEUPDATE = 1u,
		[Token(Token = "0x400084F")]
		ALLOW_MISSING_PLUGINS = 2u,
		[Token(Token = "0x4000850")]
		SYNCHRONOUS_UPDATE = 4u,
		[Token(Token = "0x4000851")]
		DEFERRED_CALLBACKS = 8u,
		[Token(Token = "0x4000852")]
		LOAD_FROM_UPDATE = 0x10u,
		[Token(Token = "0x4000853")]
		MEMORY_TRACKING = 0x20u
	}
	[Token(Token = "0x200015E")]
	[Flags]
	public enum LOAD_BANK_FLAGS : uint
	{
		[Token(Token = "0x4000855")]
		NORMAL = 0u,
		[Token(Token = "0x4000856")]
		NONBLOCKING = 1u,
		[Token(Token = "0x4000857")]
		DECOMPRESS_SAMPLES = 2u,
		[Token(Token = "0x4000858")]
		UNENCRYPTED = 4u
	}
	[Token(Token = "0x200015F")]
	[Flags]
	public enum COMMANDCAPTURE_FLAGS : uint
	{
		[Token(Token = "0x400085A")]
		NORMAL = 0u,
		[Token(Token = "0x400085B")]
		FILEFLUSH = 1u,
		[Token(Token = "0x400085C")]
		SKIP_INITIAL_STATE = 2u
	}
	[Token(Token = "0x2000160")]
	[Flags]
	public enum COMMANDREPLAY_FLAGS : uint
	{
		[Token(Token = "0x400085E")]
		NORMAL = 0u,
		[Token(Token = "0x400085F")]
		SKIP_CLEANUP = 1u,
		[Token(Token = "0x4000860")]
		FAST_FORWARD = 2u,
		[Token(Token = "0x4000861")]
		SKIP_BANK_LOAD = 4u
	}
	[Token(Token = "0x2000161")]
	public enum PLAYBACK_STATE
	{
		[Token(Token = "0x4000863")]
		PLAYING,
		[Token(Token = "0x4000864")]
		SUSTAINING,
		[Token(Token = "0x4000865")]
		STOPPED,
		[Token(Token = "0x4000866")]
		STARTING,
		[Token(Token = "0x4000867")]
		STOPPING
	}
	[Token(Token = "0x2000162")]
	public enum EVENT_PROPERTY
	{
		[Token(Token = "0x4000869")]
		CHANNELPRIORITY,
		[Token(Token = "0x400086A")]
		SCHEDULE_DELAY,
		[Token(Token = "0x400086B")]
		SCHEDULE_LOOKAHEAD,
		[Token(Token = "0x400086C")]
		MINIMUM_DISTANCE,
		[Token(Token = "0x400086D")]
		MAXIMUM_DISTANCE,
		[Token(Token = "0x400086E")]
		COOLDOWN,
		[Token(Token = "0x400086F")]
		MAX
	}
	[Token(Token = "0x2000163")]
	public struct PLUGIN_INSTANCE_PROPERTIES
	{
		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr name;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr dsp;
	}
	[Token(Token = "0x2000164")]
	[Flags]
	public enum EVENT_CALLBACK_TYPE : uint
	{
		[Token(Token = "0x4000873")]
		CREATED = 1u,
		[Token(Token = "0x4000874")]
		DESTROYED = 2u,
		[Token(Token = "0x4000875")]
		STARTING = 4u,
		[Token(Token = "0x4000876")]
		STARTED = 8u,
		[Token(Token = "0x4000877")]
		RESTARTED = 0x10u,
		[Token(Token = "0x4000878")]
		STOPPED = 0x20u,
		[Token(Token = "0x4000879")]
		START_FAILED = 0x40u,
		[Token(Token = "0x400087A")]
		CREATE_PROGRAMMER_SOUND = 0x80u,
		[Token(Token = "0x400087B")]
		DESTROY_PROGRAMMER_SOUND = 0x100u,
		[Token(Token = "0x400087C")]
		PLUGIN_CREATED = 0x200u,
		[Token(Token = "0x400087D")]
		PLUGIN_DESTROYED = 0x400u,
		[Token(Token = "0x400087E")]
		TIMELINE_MARKER = 0x800u,
		[Token(Token = "0x400087F")]
		TIMELINE_BEAT = 0x1000u,
		[Token(Token = "0x4000880")]
		SOUND_PLAYED = 0x2000u,
		[Token(Token = "0x4000881")]
		SOUND_STOPPED = 0x4000u,
		[Token(Token = "0x4000882")]
		REAL_TO_VIRTUAL = 0x8000u,
		[Token(Token = "0x4000883")]
		VIRTUAL_TO_REAL = 0x10000u,
		[Token(Token = "0x4000884")]
		START_EVENT_COMMAND = 0x20000u,
		[Token(Token = "0x4000885")]
		NESTED_TIMELINE_BEAT = 0x40000u,
		[Token(Token = "0x4000886")]
		ALL = uint.MaxValue
	}
	[Token(Token = "0x2000165")]
	public delegate RESULT EVENT_CALLBACK(EVENT_CALLBACK_TYPE type, IntPtr _event, IntPtr parameters);
	[Token(Token = "0x2000166")]
	public delegate RESULT COMMANDREPLAY_FRAME_CALLBACK(IntPtr replay, int commandindex, float currenttime, IntPtr userdata);
	[Token(Token = "0x2000167")]
	public delegate RESULT COMMANDREPLAY_LOAD_BANK_CALLBACK(IntPtr replay, int commandindex, Guid bankguid, IntPtr bankfilename, LOAD_BANK_FLAGS flags, out IntPtr bank, IntPtr userdata);
	[Token(Token = "0x2000168")]
	public delegate RESULT COMMANDREPLAY_CREATE_INSTANCE_CALLBACK(IntPtr replay, int commandindex, IntPtr eventdescription, out IntPtr instance, IntPtr userdata);
	[Token(Token = "0x2000169")]
	public enum INSTANCETYPE
	{
		[Token(Token = "0x4000888")]
		NONE,
		[Token(Token = "0x4000889")]
		SYSTEM,
		[Token(Token = "0x400088A")]
		EVENTDESCRIPTION,
		[Token(Token = "0x400088B")]
		EVENTINSTANCE,
		[Token(Token = "0x400088C")]
		PARAMETERINSTANCE,
		[Token(Token = "0x400088D")]
		BUS,
		[Token(Token = "0x400088E")]
		VCA,
		[Token(Token = "0x400088F")]
		BANK,
		[Token(Token = "0x4000890")]
		COMMANDREPLAY
	}
	[Token(Token = "0x200016A")]
	public struct COMMAND_INFO
	{
		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper commandname;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int parentcommandindex;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int framenumber;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float frametime;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public INSTANCETYPE instancetype;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public INSTANCETYPE outputtype;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint instancehandle;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint outputhandle;
	}
	[Token(Token = "0x200016B")]
	public struct MEMORY_USAGE
	{
		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int exclusive;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int inclusive;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int sampledata;
	}
	[Token(Token = "0x200016C")]
	public struct Util
	{
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x30D04C8", Offset = "0x30D04C8", VA = "0x30D04C8")]
		public static RESULT parseID(string idString, out Guid id)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x30D0608", Offset = "0x30D0608", VA = "0x30D0608")]
		private static extern RESULT FMOD_Studio_ParseID(byte[] idString, out Guid id);
	}
	[Token(Token = "0x200016D")]
	public struct System
	{
		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x30CC594", Offset = "0x30CC594", VA = "0x30CC594")]
		public static RESULT create(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x30CC630", Offset = "0x30CC630", VA = "0x30CC630")]
		public RESULT setAdvancedSettings(ADVANCEDSETTINGS settings)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x30CC758", Offset = "0x30CC758", VA = "0x30CC758")]
		public RESULT setAdvancedSettings(ADVANCEDSETTINGS settings, string encryptionKey)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x30CC8C4", Offset = "0x30CC8C4", VA = "0x30CC8C4")]
		public RESULT getAdvancedSettings(out ADVANCEDSETTINGS settings)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x30CC9EC", Offset = "0x30CC9EC", VA = "0x30CC9EC")]
		public RESULT initialize(int maxchannels, INITFLAGS studioflags, FMOD.INITFLAGS flags, IntPtr extradriverdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x30CCAA4", Offset = "0x30CCAA4", VA = "0x30CCAA4")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x30CCB2C", Offset = "0x30CCB2C", VA = "0x30CCB2C")]
		public RESULT update()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x30CCBB4", Offset = "0x30CCBB4", VA = "0x30CCBB4")]
		public RESULT getCoreSystem(out FMOD.System coresystem)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x30CCC4C", Offset = "0x30CCC4C", VA = "0x30CCC4C")]
		public RESULT getEvent(string path, out EventDescription _event)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x30CCE3C", Offset = "0x30CCE3C", VA = "0x30CCE3C")]
		public RESULT getBus(string path, out Bus bus)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x30CD02C", Offset = "0x30CD02C", VA = "0x30CD02C")]
		public RESULT getVCA(string path, out VCA vca)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x30CD21C", Offset = "0x30CD21C", VA = "0x30CD21C")]
		public RESULT getBank(string path, out Bank bank)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x30CD40C", Offset = "0x30CD40C", VA = "0x30CD40C")]
		public RESULT getEventByID(Guid id, out EventDescription _event)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x30CD4D0", Offset = "0x30CD4D0", VA = "0x30CD4D0")]
		public RESULT getBusByID(Guid id, out Bus bus)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x30CD594", Offset = "0x30CD594", VA = "0x30CD594")]
		public RESULT getVCAByID(Guid id, out VCA vca)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x30CD658", Offset = "0x30CD658", VA = "0x30CD658")]
		public RESULT getBankByID(Guid id, out Bank bank)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x30CD71C", Offset = "0x30CD71C", VA = "0x30CD71C")]
		public RESULT getSoundInfo(string key, out SOUND_INFO info)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x30CD974", Offset = "0x30CD974", VA = "0x30CD974")]
		public RESULT getParameterDescriptionByName(string name, out PARAMETER_DESCRIPTION parameter)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x30CDB64", Offset = "0x30CDB64", VA = "0x30CDB64")]
		public RESULT getParameterDescriptionByID(PARAMETER_ID id, out PARAMETER_DESCRIPTION parameter)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x30CDC04", Offset = "0x30CDC04", VA = "0x30CDC04")]
		public RESULT getParameterByID(PARAMETER_ID id, out float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x30CDC2C", Offset = "0x30CDC2C", VA = "0x30CDC2C")]
		public RESULT getParameterByID(PARAMETER_ID id, out float value, out float finalvalue)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x30CDCDC", Offset = "0x30CDCDC", VA = "0x30CDCDC")]
		public RESULT setParameterByID(PARAMETER_ID id, float value, bool ignoreseekspeed = false)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x30CDD90", Offset = "0x30CDD90", VA = "0x30CDD90")]
		public RESULT setParametersByIDs(PARAMETER_ID[] ids, float[] values, int count, bool ignoreseekspeed = false)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x30CDE5C", Offset = "0x30CDE5C", VA = "0x30CDE5C")]
		public RESULT getParameterByName(string name, out float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x30CDE80", Offset = "0x30CDE80", VA = "0x30CDE80")]
		public RESULT getParameterByName(string name, out float value, out float finalvalue)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x30CE090", Offset = "0x30CE090", VA = "0x30CE090")]
		public RESULT setParameterByName(string name, float value, bool ignoreseekspeed = false)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x30CE2A0", Offset = "0x30CE2A0", VA = "0x30CE2A0")]
		public RESULT lookupID(string path, out Guid id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x30CE490", Offset = "0x30CE490", VA = "0x30CE490")]
		public RESULT lookupPath(Guid id, out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x30CE79C", Offset = "0x30CE79C", VA = "0x30CE79C")]
		public RESULT getNumListeners(out int numlisteners)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x30CE834", Offset = "0x30CE834", VA = "0x30CE834")]
		public RESULT setNumListeners(int numlisteners)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x30CE8CC", Offset = "0x30CE8CC", VA = "0x30CE8CC")]
		public RESULT getListenerAttributes(int listener, out ATTRIBUTES_3D attributes)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x30CE9D4", Offset = "0x30CE9D4", VA = "0x30CE9D4")]
		public RESULT getListenerAttributes(int listener, out ATTRIBUTES_3D attributes, out VECTOR attenuationposition)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x30CEA84", Offset = "0x30CEA84", VA = "0x30CEA84")]
		public RESULT setListenerAttributes(int listener, ATTRIBUTES_3D attributes)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x30CEB8C", Offset = "0x30CEB8C", VA = "0x30CEB8C")]
		public RESULT setListenerAttributes(int listener, ATTRIBUTES_3D attributes, VECTOR attenuationposition)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x30CEC60", Offset = "0x30CEC60", VA = "0x30CEC60")]
		public RESULT getListenerWeight(int listener, out float weight)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x30CED00", Offset = "0x30CED00", VA = "0x30CED00")]
		public RESULT setListenerWeight(int listener, float weight)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x30CEDA8", Offset = "0x30CEDA8", VA = "0x30CEDA8")]
		public RESULT loadBankFile(string filename, LOAD_BANK_FLAGS flags, out Bank bank)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x30CEFB8", Offset = "0x30CEFB8", VA = "0x30CEFB8")]
		public RESULT loadBankMemory(byte[] buffer, LOAD_BANK_FLAGS flags, out Bank bank)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x30CF108", Offset = "0x30CF108", VA = "0x30CF108")]
		public RESULT loadBankCustom(BANK_INFO info, LOAD_BANK_FLAGS flags, out Bank bank)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x30CF2C8", Offset = "0x30CF2C8", VA = "0x30CF2C8")]
		public RESULT unloadAll()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x30CF350", Offset = "0x30CF350", VA = "0x30CF350")]
		public RESULT flushCommands()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x30CF3D8", Offset = "0x30CF3D8", VA = "0x30CF3D8")]
		public RESULT flushSampleLoading()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x30CF460", Offset = "0x30CF460", VA = "0x30CF460")]
		public RESULT startCommandCapture(string filename, COMMANDCAPTURE_FLAGS flags)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x30CF650", Offset = "0x30CF650", VA = "0x30CF650")]
		public RESULT stopCommandCapture()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x30CF6D8", Offset = "0x30CF6D8", VA = "0x30CF6D8")]
		public RESULT loadCommandReplay(string filename, COMMANDREPLAY_FLAGS flags, out CommandReplay replay)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x30CF8E8", Offset = "0x30CF8E8", VA = "0x30CF8E8")]
		public RESULT getBankCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x30CF980", Offset = "0x30CF980", VA = "0x30CF980")]
		public RESULT getBankList(out Bank[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x30CFB98", Offset = "0x30CFB98", VA = "0x30CFB98")]
		public RESULT getParameterDescriptionCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x30CFC30", Offset = "0x30CFC30", VA = "0x30CFC30")]
		public RESULT getParameterDescriptionList(out PARAMETER_DESCRIPTION[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x30CFE88", Offset = "0x30CFE88", VA = "0x30CFE88")]
		public RESULT getCPUUsage(out CPU_USAGE usage)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x30CFF20", Offset = "0x30CFF20", VA = "0x30CFF20")]
		public RESULT getBufferUsage(out BUFFER_USAGE usage)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x30CFFB8", Offset = "0x30CFFB8", VA = "0x30CFFB8")]
		public RESULT resetBufferUsage()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x30D0040", Offset = "0x30D0040", VA = "0x30D0040")]
		public RESULT setCallback(SYSTEM_CALLBACK callback, SYSTEM_CALLBACK_TYPE callbackmask = SYSTEM_CALLBACK_TYPE.ALL)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x30D00E8", Offset = "0x30D00E8", VA = "0x30D00E8")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x30D0180", Offset = "0x30D0180", VA = "0x30D0180")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x30D0218", Offset = "0x30D0218", VA = "0x30D0218")]
		public RESULT getMemoryUsage(out MEMORY_USAGE memoryusage)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x30CC5A0", Offset = "0x30CC5A0", VA = "0x30CC5A0")]
		private static extern RESULT FMOD_Studio_System_Create(out IntPtr system, uint headerversion);

		[PreserveSig]
		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x30D02B0", Offset = "0x30D02B0", VA = "0x30D02B0")]
		private static extern bool FMOD_Studio_System_IsValid(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x30CC6C8", Offset = "0x30CC6C8", VA = "0x30CC6C8")]
		private static extern RESULT FMOD_Studio_System_SetAdvancedSettings(IntPtr system, ref ADVANCEDSETTINGS settings);

		[PreserveSig]
		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x30CC95C", Offset = "0x30CC95C", VA = "0x30CC95C")]
		private static extern RESULT FMOD_Studio_System_GetAdvancedSettings(IntPtr system, out ADVANCEDSETTINGS settings);

		[PreserveSig]
		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x30CC9F4", Offset = "0x30CC9F4", VA = "0x30CC9F4")]
		private static extern RESULT FMOD_Studio_System_Initialize(IntPtr system, int maxchannels, INITFLAGS studioflags, FMOD.INITFLAGS flags, IntPtr extradriverdata);

		[PreserveSig]
		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x30CCAAC", Offset = "0x30CCAAC", VA = "0x30CCAAC")]
		private static extern RESULT FMOD_Studio_System_Release(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x30CCB34", Offset = "0x30CCB34", VA = "0x30CCB34")]
		private static extern RESULT FMOD_Studio_System_Update(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x30CCBBC", Offset = "0x30CCBBC", VA = "0x30CCBBC")]
		private static extern RESULT FMOD_Studio_System_GetCoreSystem(IntPtr system, out IntPtr coresystem);

		[PreserveSig]
		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x30CCD9C", Offset = "0x30CCD9C", VA = "0x30CCD9C")]
		private static extern RESULT FMOD_Studio_System_GetEvent(IntPtr system, byte[] path, out IntPtr _event);

		[PreserveSig]
		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x30CCF8C", Offset = "0x30CCF8C", VA = "0x30CCF8C")]
		private static extern RESULT FMOD_Studio_System_GetBus(IntPtr system, byte[] path, out IntPtr bus);

		[PreserveSig]
		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x30CD17C", Offset = "0x30CD17C", VA = "0x30CD17C")]
		private static extern RESULT FMOD_Studio_System_GetVCA(IntPtr system, byte[] path, out IntPtr vca);

		[PreserveSig]
		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x30CD36C", Offset = "0x30CD36C", VA = "0x30CD36C")]
		private static extern RESULT FMOD_Studio_System_GetBank(IntPtr system, byte[] path, out IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x30CD438", Offset = "0x30CD438", VA = "0x30CD438")]
		private static extern RESULT FMOD_Studio_System_GetEventByID(IntPtr system, ref Guid id, out IntPtr _event);

		[PreserveSig]
		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x30CD4FC", Offset = "0x30CD4FC", VA = "0x30CD4FC")]
		private static extern RESULT FMOD_Studio_System_GetBusByID(IntPtr system, ref Guid id, out IntPtr bus);

		[PreserveSig]
		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x30CD5C0", Offset = "0x30CD5C0", VA = "0x30CD5C0")]
		private static extern RESULT FMOD_Studio_System_GetVCAByID(IntPtr system, ref Guid id, out IntPtr vca);

		[PreserveSig]
		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x30CD684", Offset = "0x30CD684", VA = "0x30CD684")]
		private static extern RESULT FMOD_Studio_System_GetBankByID(IntPtr system, ref Guid id, out IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x30CD86C", Offset = "0x30CD86C", VA = "0x30CD86C")]
		private static extern RESULT FMOD_Studio_System_GetSoundInfo(IntPtr system, byte[] key, out SOUND_INFO info);

		[PreserveSig]
		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x30CDAC4", Offset = "0x30CDAC4", VA = "0x30CDAC4")]
		private static extern RESULT FMOD_Studio_System_GetParameterDescriptionByName(IntPtr system, byte[] name, out PARAMETER_DESCRIPTION parameter);

		[PreserveSig]
		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x30CDB6C", Offset = "0x30CDB6C", VA = "0x30CDB6C")]
		private static extern RESULT FMOD_Studio_System_GetParameterDescriptionByID(IntPtr system, PARAMETER_ID id, out PARAMETER_DESCRIPTION parameter);

		[PreserveSig]
		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x30CDC34", Offset = "0x30CDC34", VA = "0x30CDC34")]
		private static extern RESULT FMOD_Studio_System_GetParameterByID(IntPtr system, PARAMETER_ID id, out float value, out float finalvalue);

		[PreserveSig]
		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x30CDCE8", Offset = "0x30CDCE8", VA = "0x30CDCE8")]
		private static extern RESULT FMOD_Studio_System_SetParameterByID(IntPtr system, PARAMETER_ID id, float value, bool ignoreseekspeed);

		[PreserveSig]
		[Token(Token = "0x6000900")]
		[Address(RVA = "0x30CDD9C", Offset = "0x30CDD9C", VA = "0x30CDD9C")]
		private static extern RESULT FMOD_Studio_System_SetParametersByIDs(IntPtr system, PARAMETER_ID[] ids, float[] values, int count, bool ignoreseekspeed);

		[PreserveSig]
		[Token(Token = "0x6000901")]
		[Address(RVA = "0x30CDFE0", Offset = "0x30CDFE0", VA = "0x30CDFE0")]
		private static extern RESULT FMOD_Studio_System_GetParameterByName(IntPtr system, byte[] name, out float value, out float finalvalue);

		[PreserveSig]
		[Token(Token = "0x6000902")]
		[Address(RVA = "0x30CE1F0", Offset = "0x30CE1F0", VA = "0x30CE1F0")]
		private static extern RESULT FMOD_Studio_System_SetParameterByName(IntPtr system, byte[] name, float value, bool ignoreseekspeed);

		[PreserveSig]
		[Token(Token = "0x6000903")]
		[Address(RVA = "0x30CE3F0", Offset = "0x30CE3F0", VA = "0x30CE3F0")]
		private static extern RESULT FMOD_Studio_System_LookupID(IntPtr system, byte[] path, out Guid id);

		[PreserveSig]
		[Token(Token = "0x6000904")]
		[Address(RVA = "0x30CE6EC", Offset = "0x30CE6EC", VA = "0x30CE6EC")]
		private static extern RESULT FMOD_Studio_System_LookupPath(IntPtr system, ref Guid id, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x6000905")]
		[Address(RVA = "0x30CE7A4", Offset = "0x30CE7A4", VA = "0x30CE7A4")]
		private static extern RESULT FMOD_Studio_System_GetNumListeners(IntPtr system, out int numlisteners);

		[PreserveSig]
		[Token(Token = "0x6000906")]
		[Address(RVA = "0x30CE83C", Offset = "0x30CE83C", VA = "0x30CE83C")]
		private static extern RESULT FMOD_Studio_System_SetNumListeners(IntPtr system, int numlisteners);

		[PreserveSig]
		[Token(Token = "0x6000907")]
		[Address(RVA = "0x30CE92C", Offset = "0x30CE92C", VA = "0x30CE92C")]
		private static extern RESULT FMOD_Studio_System_GetListenerAttributes(IntPtr system, int listener, out ATTRIBUTES_3D attributes, IntPtr zero);

		[PreserveSig]
		[Token(Token = "0x6000908")]
		[Address(RVA = "0x30CE9DC", Offset = "0x30CE9DC", VA = "0x30CE9DC")]
		private static extern RESULT FMOD_Studio_System_GetListenerAttributes(IntPtr system, int listener, out ATTRIBUTES_3D attributes, out VECTOR attenuationposition);

		[PreserveSig]
		[Token(Token = "0x6000909")]
		[Address(RVA = "0x30CEAE4", Offset = "0x30CEAE4", VA = "0x30CEAE4")]
		private static extern RESULT FMOD_Studio_System_SetListenerAttributes(IntPtr system, int listener, ref ATTRIBUTES_3D attributes, IntPtr zero);

		[PreserveSig]
		[Token(Token = "0x600090A")]
		[Address(RVA = "0x30CEBB8", Offset = "0x30CEBB8", VA = "0x30CEBB8")]
		private static extern RESULT FMOD_Studio_System_SetListenerAttributes(IntPtr system, int listener, ref ATTRIBUTES_3D attributes, ref VECTOR attenuationposition);

		[PreserveSig]
		[Token(Token = "0x600090B")]
		[Address(RVA = "0x30CEC68", Offset = "0x30CEC68", VA = "0x30CEC68")]
		private static extern RESULT FMOD_Studio_System_GetListenerWeight(IntPtr system, int listener, out float weight);

		[PreserveSig]
		[Token(Token = "0x600090C")]
		[Address(RVA = "0x30CED08", Offset = "0x30CED08", VA = "0x30CED08")]
		private static extern RESULT FMOD_Studio_System_SetListenerWeight(IntPtr system, int listener, float weight);

		[PreserveSig]
		[Token(Token = "0x600090D")]
		[Address(RVA = "0x30CEF08", Offset = "0x30CEF08", VA = "0x30CEF08")]
		private static extern RESULT FMOD_Studio_System_LoadBankFile(IntPtr system, byte[] filename, LOAD_BANK_FLAGS flags, out IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x600090E")]
		[Address(RVA = "0x30CF048", Offset = "0x30CF048", VA = "0x30CF048")]
		private static extern RESULT FMOD_Studio_System_LoadBankMemory(IntPtr system, IntPtr buffer, int length, LOAD_MEMORY_MODE mode, LOAD_BANK_FLAGS flags, out IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x600090F")]
		[Address(RVA = "0x30CF1B8", Offset = "0x30CF1B8", VA = "0x30CF1B8")]
		private static extern RESULT FMOD_Studio_System_LoadBankCustom(IntPtr system, ref BANK_INFO info, LOAD_BANK_FLAGS flags, out IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x6000910")]
		[Address(RVA = "0x30CF2D0", Offset = "0x30CF2D0", VA = "0x30CF2D0")]
		private static extern RESULT FMOD_Studio_System_UnloadAll(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000911")]
		[Address(RVA = "0x30CF358", Offset = "0x30CF358", VA = "0x30CF358")]
		private static extern RESULT FMOD_Studio_System_FlushCommands(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000912")]
		[Address(RVA = "0x30CF3E0", Offset = "0x30CF3E0", VA = "0x30CF3E0")]
		private static extern RESULT FMOD_Studio_System_FlushSampleLoading(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000913")]
		[Address(RVA = "0x30CF5B0", Offset = "0x30CF5B0", VA = "0x30CF5B0")]
		private static extern RESULT FMOD_Studio_System_StartCommandCapture(IntPtr system, byte[] filename, COMMANDCAPTURE_FLAGS flags);

		[PreserveSig]
		[Token(Token = "0x6000914")]
		[Address(RVA = "0x30CF658", Offset = "0x30CF658", VA = "0x30CF658")]
		private static extern RESULT FMOD_Studio_System_StopCommandCapture(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000915")]
		[Address(RVA = "0x30CF838", Offset = "0x30CF838", VA = "0x30CF838")]
		private static extern RESULT FMOD_Studio_System_LoadCommandReplay(IntPtr system, byte[] filename, COMMANDREPLAY_FLAGS flags, out IntPtr replay);

		[PreserveSig]
		[Token(Token = "0x6000916")]
		[Address(RVA = "0x30CF8F0", Offset = "0x30CF8F0", VA = "0x30CF8F0")]
		private static extern RESULT FMOD_Studio_System_GetBankCount(IntPtr system, out int count);

		[PreserveSig]
		[Token(Token = "0x6000917")]
		[Address(RVA = "0x30CFAE8", Offset = "0x30CFAE8", VA = "0x30CFAE8")]
		private static extern RESULT FMOD_Studio_System_GetBankList(IntPtr system, IntPtr[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x6000918")]
		[Address(RVA = "0x30CFBA0", Offset = "0x30CFBA0", VA = "0x30CFBA0")]
		private static extern RESULT FMOD_Studio_System_GetParameterDescriptionCount(IntPtr system, out int count);

		[PreserveSig]
		[Token(Token = "0x6000919")]
		[Address(RVA = "0x30CFD38", Offset = "0x30CFD38", VA = "0x30CFD38")]
		private static extern RESULT FMOD_Studio_System_GetParameterDescriptionList(IntPtr system, [Out] PARAMETER_DESCRIPTION[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x600091A")]
		[Address(RVA = "0x30CFE90", Offset = "0x30CFE90", VA = "0x30CFE90")]
		private static extern RESULT FMOD_Studio_System_GetCPUUsage(IntPtr system, out CPU_USAGE usage);

		[PreserveSig]
		[Token(Token = "0x600091B")]
		[Address(RVA = "0x30CFF28", Offset = "0x30CFF28", VA = "0x30CFF28")]
		private static extern RESULT FMOD_Studio_System_GetBufferUsage(IntPtr system, out BUFFER_USAGE usage);

		[PreserveSig]
		[Token(Token = "0x600091C")]
		[Address(RVA = "0x30CFFC0", Offset = "0x30CFFC0", VA = "0x30CFFC0")]
		private static extern RESULT FMOD_Studio_System_ResetBufferUsage(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x600091D")]
		[Address(RVA = "0x30D0048", Offset = "0x30D0048", VA = "0x30D0048")]
		private static extern RESULT FMOD_Studio_System_SetCallback(IntPtr system, SYSTEM_CALLBACK callback, SYSTEM_CALLBACK_TYPE callbackmask);

		[PreserveSig]
		[Token(Token = "0x600091E")]
		[Address(RVA = "0x30D00F0", Offset = "0x30D00F0", VA = "0x30D00F0")]
		private static extern RESULT FMOD_Studio_System_GetUserData(IntPtr system, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x600091F")]
		[Address(RVA = "0x30D0188", Offset = "0x30D0188", VA = "0x30D0188")]
		private static extern RESULT FMOD_Studio_System_SetUserData(IntPtr system, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000920")]
		[Address(RVA = "0x30D0220", Offset = "0x30D0220", VA = "0x30D0220")]
		private static extern RESULT FMOD_Studio_System_GetMemoryUsage(IntPtr system, out MEMORY_USAGE memoryusage);

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x30D0338", Offset = "0x30D0338", VA = "0x30D0338")]
		public System(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x30D0340", Offset = "0x30D0340", VA = "0x30D0340")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x30D038C", Offset = "0x30D038C", VA = "0x30D038C")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x30D03D0", Offset = "0x30D03D0", VA = "0x30D03D0")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200016E")]
	public struct EventDescription
	{
		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x30C8B08", Offset = "0x30C8B08", VA = "0x30C8B08")]
		public RESULT getID(out Guid id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x30C8BA0", Offset = "0x30C8BA0", VA = "0x30C8BA0")]
		public RESULT getPath(out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x30C8E98", Offset = "0x30C8E98", VA = "0x30C8E98")]
		public RESULT getParameterDescriptionCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x30C8F30", Offset = "0x30C8F30", VA = "0x30C8F30")]
		public RESULT getParameterDescriptionByIndex(int index, out PARAMETER_DESCRIPTION parameter)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x30C8FD0", Offset = "0x30C8FD0", VA = "0x30C8FD0")]
		public RESULT getParameterDescriptionByName(string name, out PARAMETER_DESCRIPTION parameter)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x30C91C0", Offset = "0x30C91C0", VA = "0x30C91C0")]
		public RESULT getParameterDescriptionByID(PARAMETER_ID id, out PARAMETER_DESCRIPTION parameter)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x30C9260", Offset = "0x30C9260", VA = "0x30C9260")]
		public RESULT getUserPropertyCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x30C92F8", Offset = "0x30C92F8", VA = "0x30C92F8")]
		public RESULT getUserPropertyByIndex(int index, out USER_PROPERTY property)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x30C93C8", Offset = "0x30C93C8", VA = "0x30C93C8")]
		public RESULT getUserProperty(string name, out USER_PROPERTY property)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x30C95E8", Offset = "0x30C95E8", VA = "0x30C95E8")]
		public RESULT getLength(out int length)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x30C9680", Offset = "0x30C9680", VA = "0x30C9680")]
		public RESULT getMinimumDistance(out float distance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x30C9718", Offset = "0x30C9718", VA = "0x30C9718")]
		public RESULT getMaximumDistance(out float distance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x30C97B0", Offset = "0x30C97B0", VA = "0x30C97B0")]
		public RESULT getSoundSize(out float size)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x30C9848", Offset = "0x30C9848", VA = "0x30C9848")]
		public RESULT isSnapshot(out bool snapshot)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x30C98F4", Offset = "0x30C98F4", VA = "0x30C98F4")]
		public RESULT isOneshot(out bool oneshot)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x30C99A0", Offset = "0x30C99A0", VA = "0x30C99A0")]
		public RESULT isStream(out bool isStream)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x30C9A4C", Offset = "0x30C9A4C", VA = "0x30C9A4C")]
		public RESULT is3D(out bool is3D)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x30C9AF8", Offset = "0x30C9AF8", VA = "0x30C9AF8")]
		public RESULT isDopplerEnabled(out bool doppler)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x30C9BA4", Offset = "0x30C9BA4", VA = "0x30C9BA4")]
		public RESULT hasCue(out bool cue)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x30C9C50", Offset = "0x30C9C50", VA = "0x30C9C50")]
		public RESULT createInstance(out EventInstance instance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x30C9CE8", Offset = "0x30C9CE8", VA = "0x30C9CE8")]
		public RESULT getInstanceCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x30C9D80", Offset = "0x30C9D80", VA = "0x30C9D80")]
		public RESULT getInstanceList(out EventInstance[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x30C9F98", Offset = "0x30C9F98", VA = "0x30C9F98")]
		public RESULT loadSampleData()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x30CA020", Offset = "0x30CA020", VA = "0x30CA020")]
		public RESULT unloadSampleData()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x30CA0A8", Offset = "0x30CA0A8", VA = "0x30CA0A8")]
		public RESULT getSampleLoadingState(out LOADING_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x30CA140", Offset = "0x30CA140", VA = "0x30CA140")]
		public RESULT releaseAllInstances()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x30CA1C8", Offset = "0x30CA1C8", VA = "0x30CA1C8")]
		public RESULT setCallback(EVENT_CALLBACK callback, EVENT_CALLBACK_TYPE callbackmask = EVENT_CALLBACK_TYPE.ALL)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x30CA270", Offset = "0x30CA270", VA = "0x30CA270")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x30CA308", Offset = "0x30CA308", VA = "0x30CA308")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000942")]
		[Address(RVA = "0x30CA3A0", Offset = "0x30CA3A0", VA = "0x30CA3A0")]
		private static extern bool FMOD_Studio_EventDescription_IsValid(IntPtr eventdescription);

		[PreserveSig]
		[Token(Token = "0x6000943")]
		[Address(RVA = "0x30C8B10", Offset = "0x30C8B10", VA = "0x30C8B10")]
		private static extern RESULT FMOD_Studio_EventDescription_GetID(IntPtr eventdescription, out Guid id);

		[PreserveSig]
		[Token(Token = "0x6000944")]
		[Address(RVA = "0x30C8DF0", Offset = "0x30C8DF0", VA = "0x30C8DF0")]
		private static extern RESULT FMOD_Studio_EventDescription_GetPath(IntPtr eventdescription, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x6000945")]
		[Address(RVA = "0x30C8EA0", Offset = "0x30C8EA0", VA = "0x30C8EA0")]
		private static extern RESULT FMOD_Studio_EventDescription_GetParameterDescriptionCount(IntPtr eventdescription, out int count);

		[PreserveSig]
		[Token(Token = "0x6000946")]
		[Address(RVA = "0x30C8F38", Offset = "0x30C8F38", VA = "0x30C8F38")]
		private static extern RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByIndex(IntPtr eventdescription, int index, out PARAMETER_DESCRIPTION parameter);

		[PreserveSig]
		[Token(Token = "0x6000947")]
		[Address(RVA = "0x30C9120", Offset = "0x30C9120", VA = "0x30C9120")]
		private static extern RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByName(IntPtr eventdescription, byte[] name, out PARAMETER_DESCRIPTION parameter);

		[PreserveSig]
		[Token(Token = "0x6000948")]
		[Address(RVA = "0x30C91C8", Offset = "0x30C91C8", VA = "0x30C91C8")]
		private static extern RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByID(IntPtr eventdescription, PARAMETER_ID id, out PARAMETER_DESCRIPTION parameter);

		[PreserveSig]
		[Token(Token = "0x6000949")]
		[Address(RVA = "0x30C9268", Offset = "0x30C9268", VA = "0x30C9268")]
		private static extern RESULT FMOD_Studio_EventDescription_GetUserPropertyCount(IntPtr eventdescription, out int count);

		[PreserveSig]
		[Token(Token = "0x600094A")]
		[Address(RVA = "0x30C9300", Offset = "0x30C9300", VA = "0x30C9300")]
		private static extern RESULT FMOD_Studio_EventDescription_GetUserPropertyByIndex(IntPtr eventdescription, int index, out USER_PROPERTY property);

		[PreserveSig]
		[Token(Token = "0x600094B")]
		[Address(RVA = "0x30C9518", Offset = "0x30C9518", VA = "0x30C9518")]
		private static extern RESULT FMOD_Studio_EventDescription_GetUserProperty(IntPtr eventdescription, byte[] name, out USER_PROPERTY property);

		[PreserveSig]
		[Token(Token = "0x600094C")]
		[Address(RVA = "0x30C95F0", Offset = "0x30C95F0", VA = "0x30C95F0")]
		private static extern RESULT FMOD_Studio_EventDescription_GetLength(IntPtr eventdescription, out int length);

		[PreserveSig]
		[Token(Token = "0x600094D")]
		[Address(RVA = "0x30C9688", Offset = "0x30C9688", VA = "0x30C9688")]
		private static extern RESULT FMOD_Studio_EventDescription_GetMinimumDistance(IntPtr eventdescription, out float distance);

		[PreserveSig]
		[Token(Token = "0x600094E")]
		[Address(RVA = "0x30C9720", Offset = "0x30C9720", VA = "0x30C9720")]
		private static extern RESULT FMOD_Studio_EventDescription_GetMaximumDistance(IntPtr eventdescription, out float distance);

		[PreserveSig]
		[Token(Token = "0x600094F")]
		[Address(RVA = "0x30C97B8", Offset = "0x30C97B8", VA = "0x30C97B8")]
		private static extern RESULT FMOD_Studio_EventDescription_GetSoundSize(IntPtr eventdescription, out float size);

		[PreserveSig]
		[Token(Token = "0x6000950")]
		[Address(RVA = "0x30C9850", Offset = "0x30C9850", VA = "0x30C9850")]
		private static extern RESULT FMOD_Studio_EventDescription_IsSnapshot(IntPtr eventdescription, out bool snapshot);

		[PreserveSig]
		[Token(Token = "0x6000951")]
		[Address(RVA = "0x30C98FC", Offset = "0x30C98FC", VA = "0x30C98FC")]
		private static extern RESULT FMOD_Studio_EventDescription_IsOneshot(IntPtr eventdescription, out bool oneshot);

		[PreserveSig]
		[Token(Token = "0x6000952")]
		[Address(RVA = "0x30C99A8", Offset = "0x30C99A8", VA = "0x30C99A8")]
		private static extern RESULT FMOD_Studio_EventDescription_IsStream(IntPtr eventdescription, out bool isStream);

		[PreserveSig]
		[Token(Token = "0x6000953")]
		[Address(RVA = "0x30C9A54", Offset = "0x30C9A54", VA = "0x30C9A54")]
		private static extern RESULT FMOD_Studio_EventDescription_Is3D(IntPtr eventdescription, out bool is3D);

		[PreserveSig]
		[Token(Token = "0x6000954")]
		[Address(RVA = "0x30C9B00", Offset = "0x30C9B00", VA = "0x30C9B00")]
		private static extern RESULT FMOD_Studio_EventDescription_IsDopplerEnabled(IntPtr eventdescription, out bool doppler);

		[PreserveSig]
		[Token(Token = "0x6000955")]
		[Address(RVA = "0x30C9BAC", Offset = "0x30C9BAC", VA = "0x30C9BAC")]
		private static extern RESULT FMOD_Studio_EventDescription_HasCue(IntPtr eventdescription, out bool cue);

		[PreserveSig]
		[Token(Token = "0x6000956")]
		[Address(RVA = "0x30C9C58", Offset = "0x30C9C58", VA = "0x30C9C58")]
		private static extern RESULT FMOD_Studio_EventDescription_CreateInstance(IntPtr eventdescription, out IntPtr instance);

		[PreserveSig]
		[Token(Token = "0x6000957")]
		[Address(RVA = "0x30C9CF0", Offset = "0x30C9CF0", VA = "0x30C9CF0")]
		private static extern RESULT FMOD_Studio_EventDescription_GetInstanceCount(IntPtr eventdescription, out int count);

		[PreserveSig]
		[Token(Token = "0x6000958")]
		[Address(RVA = "0x30C9EE8", Offset = "0x30C9EE8", VA = "0x30C9EE8")]
		private static extern RESULT FMOD_Studio_EventDescription_GetInstanceList(IntPtr eventdescription, IntPtr[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x6000959")]
		[Address(RVA = "0x30C9FA0", Offset = "0x30C9FA0", VA = "0x30C9FA0")]
		private static extern RESULT FMOD_Studio_EventDescription_LoadSampleData(IntPtr eventdescription);

		[PreserveSig]
		[Token(Token = "0x600095A")]
		[Address(RVA = "0x30CA028", Offset = "0x30CA028", VA = "0x30CA028")]
		private static extern RESULT FMOD_Studio_EventDescription_UnloadSampleData(IntPtr eventdescription);

		[PreserveSig]
		[Token(Token = "0x600095B")]
		[Address(RVA = "0x30CA0B0", Offset = "0x30CA0B0", VA = "0x30CA0B0")]
		private static extern RESULT FMOD_Studio_EventDescription_GetSampleLoadingState(IntPtr eventdescription, out LOADING_STATE state);

		[PreserveSig]
		[Token(Token = "0x600095C")]
		[Address(RVA = "0x30CA148", Offset = "0x30CA148", VA = "0x30CA148")]
		private static extern RESULT FMOD_Studio_EventDescription_ReleaseAllInstances(IntPtr eventdescription);

		[PreserveSig]
		[Token(Token = "0x600095D")]
		[Address(RVA = "0x30CA1D0", Offset = "0x30CA1D0", VA = "0x30CA1D0")]
		private static extern RESULT FMOD_Studio_EventDescription_SetCallback(IntPtr eventdescription, EVENT_CALLBACK callback, EVENT_CALLBACK_TYPE callbackmask);

		[PreserveSig]
		[Token(Token = "0x600095E")]
		[Address(RVA = "0x30CA278", Offset = "0x30CA278", VA = "0x30CA278")]
		private static extern RESULT FMOD_Studio_EventDescription_GetUserData(IntPtr eventdescription, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x600095F")]
		[Address(RVA = "0x30CA310", Offset = "0x30CA310", VA = "0x30CA310")]
		private static extern RESULT FMOD_Studio_EventDescription_SetUserData(IntPtr eventdescription, IntPtr userdata);

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x30CA428", Offset = "0x30CA428", VA = "0x30CA428")]
		public EventDescription(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x30CA430", Offset = "0x30CA430", VA = "0x30CA430")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x30CA47C", Offset = "0x30CA47C", VA = "0x30CA47C")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x30CA4C0", Offset = "0x30CA4C0", VA = "0x30CA4C0")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200016F")]
	public struct EventInstance
	{
		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x30CA4F8", Offset = "0x30CA4F8", VA = "0x30CA4F8")]
		public RESULT getDescription(out EventDescription description)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x30CA590", Offset = "0x30CA590", VA = "0x30CA590")]
		public RESULT getVolume(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x30CA680", Offset = "0x30CA680", VA = "0x30CA680")]
		public RESULT getVolume(out float volume, out float finalvolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x30CA720", Offset = "0x30CA720", VA = "0x30CA720")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x30CA7B8", Offset = "0x30CA7B8", VA = "0x30CA7B8")]
		public RESULT getPitch(out float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x30CA8A8", Offset = "0x30CA8A8", VA = "0x30CA8A8")]
		public RESULT getPitch(out float pitch, out float finalpitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x30CA948", Offset = "0x30CA948", VA = "0x30CA948")]
		public RESULT setPitch(float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x30CA9E0", Offset = "0x30CA9E0", VA = "0x30CA9E0")]
		public RESULT get3DAttributes(out ATTRIBUTES_3D attributes)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x30CAA78", Offset = "0x30CAA78", VA = "0x30CAA78")]
		public RESULT set3DAttributes(ATTRIBUTES_3D attributes)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x30CAB10", Offset = "0x30CAB10", VA = "0x30CAB10")]
		public RESULT getListenerMask(out uint mask)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x30CABA8", Offset = "0x30CABA8", VA = "0x30CABA8")]
		public RESULT setListenerMask(uint mask)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x30CAC40", Offset = "0x30CAC40", VA = "0x30CAC40")]
		public RESULT getProperty(EVENT_PROPERTY index, out float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x30CACE0", Offset = "0x30CACE0", VA = "0x30CACE0")]
		public RESULT setProperty(EVENT_PROPERTY index, float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x30CAD88", Offset = "0x30CAD88", VA = "0x30CAD88")]
		public RESULT getReverbLevel(int index, out float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x30CAE28", Offset = "0x30CAE28", VA = "0x30CAE28")]
		public RESULT setReverbLevel(int index, float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x30CAED0", Offset = "0x30CAED0", VA = "0x30CAED0")]
		public RESULT getPaused(out bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x30CAF7C", Offset = "0x30CAF7C", VA = "0x30CAF7C")]
		public RESULT setPaused(bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x30CB018", Offset = "0x30CB018", VA = "0x30CB018")]
		public RESULT start()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x30CB0A0", Offset = "0x30CB0A0", VA = "0x30CB0A0")]
		public RESULT stop(STOP_MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x30CB138", Offset = "0x30CB138", VA = "0x30CB138")]
		public RESULT getTimelinePosition(out int position)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x30CB1D0", Offset = "0x30CB1D0", VA = "0x30CB1D0")]
		public RESULT setTimelinePosition(int position)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x30CB268", Offset = "0x30CB268", VA = "0x30CB268")]
		public RESULT getPlaybackState(out PLAYBACK_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x30CB300", Offset = "0x30CB300", VA = "0x30CB300")]
		public RESULT getChannelGroup(out ChannelGroup group)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x30CB398", Offset = "0x30CB398", VA = "0x30CB398")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x30CB420", Offset = "0x30CB420", VA = "0x30CB420")]
		public RESULT isVirtual(out bool virtualstate)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x30CB4CC", Offset = "0x30CB4CC", VA = "0x30CB4CC")]
		public RESULT getParameterByID(PARAMETER_ID id, out float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x30CB4F4", Offset = "0x30CB4F4", VA = "0x30CB4F4")]
		public RESULT getParameterByID(PARAMETER_ID id, out float value, out float finalvalue)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x30CB5A4", Offset = "0x30CB5A4", VA = "0x30CB5A4")]
		public RESULT setParameterByID(PARAMETER_ID id, float value, bool ignoreseekspeed = false)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x30CB658", Offset = "0x30CB658", VA = "0x30CB658")]
		public RESULT setParametersByIDs(PARAMETER_ID[] ids, float[] values, int count, bool ignoreseekspeed = false)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x30CB724", Offset = "0x30CB724", VA = "0x30CB724")]
		public RESULT getParameterByName(string name, out float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x30CB748", Offset = "0x30CB748", VA = "0x30CB748")]
		public RESULT getParameterByName(string name, out float value, out float finalvalue)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x30CB958", Offset = "0x30CB958", VA = "0x30CB958")]
		public RESULT setParameterByName(string name, float value, bool ignoreseekspeed = false)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x30CBB68", Offset = "0x30CBB68", VA = "0x30CBB68")]
		public RESULT triggerCue()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x30CBBF0", Offset = "0x30CBBF0", VA = "0x30CBBF0")]
		public RESULT setCallback(EVENT_CALLBACK callback, EVENT_CALLBACK_TYPE callbackmask = EVENT_CALLBACK_TYPE.ALL)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x30CBC98", Offset = "0x30CBC98", VA = "0x30CBC98")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x30CBD30", Offset = "0x30CBD30", VA = "0x30CBD30")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x30CBDC8", Offset = "0x30CBDC8", VA = "0x30CBDC8")]
		public RESULT getCPUUsage(out uint exclusive, out uint inclusive)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x30CBE68", Offset = "0x30CBE68", VA = "0x30CBE68")]
		public RESULT getMemoryUsage(out MEMORY_USAGE memoryusage)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x600098A")]
		[Address(RVA = "0x30CBF00", Offset = "0x30CBF00", VA = "0x30CBF00")]
		private static extern bool FMOD_Studio_EventInstance_IsValid(IntPtr _event);

		[PreserveSig]
		[Token(Token = "0x600098B")]
		[Address(RVA = "0x30CA500", Offset = "0x30CA500", VA = "0x30CA500")]
		private static extern RESULT FMOD_Studio_EventInstance_GetDescription(IntPtr _event, out IntPtr description);

		[PreserveSig]
		[Token(Token = "0x600098C")]
		[Address(RVA = "0x30CA5E8", Offset = "0x30CA5E8", VA = "0x30CA5E8")]
		private static extern RESULT FMOD_Studio_EventInstance_GetVolume(IntPtr _event, out float volume, IntPtr zero);

		[PreserveSig]
		[Token(Token = "0x600098D")]
		[Address(RVA = "0x30CA688", Offset = "0x30CA688", VA = "0x30CA688")]
		private static extern RESULT FMOD_Studio_EventInstance_GetVolume(IntPtr _event, out float volume, out float finalvolume);

		[PreserveSig]
		[Token(Token = "0x600098E")]
		[Address(RVA = "0x30CA728", Offset = "0x30CA728", VA = "0x30CA728")]
		private static extern RESULT FMOD_Studio_EventInstance_SetVolume(IntPtr _event, float volume);

		[PreserveSig]
		[Token(Token = "0x600098F")]
		[Address(RVA = "0x30CA810", Offset = "0x30CA810", VA = "0x30CA810")]
		private static extern RESULT FMOD_Studio_EventInstance_GetPitch(IntPtr _event, out float pitch, IntPtr zero);

		[PreserveSig]
		[Token(Token = "0x6000990")]
		[Address(RVA = "0x30CA8B0", Offset = "0x30CA8B0", VA = "0x30CA8B0")]
		private static extern RESULT FMOD_Studio_EventInstance_GetPitch(IntPtr _event, out float pitch, out float finalpitch);

		[PreserveSig]
		[Token(Token = "0x6000991")]
		[Address(RVA = "0x30CA950", Offset = "0x30CA950", VA = "0x30CA950")]
		private static extern RESULT FMOD_Studio_EventInstance_SetPitch(IntPtr _event, float pitch);

		[PreserveSig]
		[Token(Token = "0x6000992")]
		[Address(RVA = "0x30CA9E8", Offset = "0x30CA9E8", VA = "0x30CA9E8")]
		private static extern RESULT FMOD_Studio_EventInstance_Get3DAttributes(IntPtr _event, out ATTRIBUTES_3D attributes);

		[PreserveSig]
		[Token(Token = "0x6000993")]
		[Address(RVA = "0x30CAA80", Offset = "0x30CAA80", VA = "0x30CAA80")]
		private static extern RESULT FMOD_Studio_EventInstance_Set3DAttributes(IntPtr _event, ref ATTRIBUTES_3D attributes);

		[PreserveSig]
		[Token(Token = "0x6000994")]
		[Address(RVA = "0x30CAB18", Offset = "0x30CAB18", VA = "0x30CAB18")]
		private static extern RESULT FMOD_Studio_EventInstance_GetListenerMask(IntPtr _event, out uint mask);

		[PreserveSig]
		[Token(Token = "0x6000995")]
		[Address(RVA = "0x30CABB0", Offset = "0x30CABB0", VA = "0x30CABB0")]
		private static extern RESULT FMOD_Studio_EventInstance_SetListenerMask(IntPtr _event, uint mask);

		[PreserveSig]
		[Token(Token = "0x6000996")]
		[Address(RVA = "0x30CAC48", Offset = "0x30CAC48", VA = "0x30CAC48")]
		private static extern RESULT FMOD_Studio_EventInstance_GetProperty(IntPtr _event, EVENT_PROPERTY index, out float value);

		[PreserveSig]
		[Token(Token = "0x6000997")]
		[Address(RVA = "0x30CACE8", Offset = "0x30CACE8", VA = "0x30CACE8")]
		private static extern RESULT FMOD_Studio_EventInstance_SetProperty(IntPtr _event, EVENT_PROPERTY index, float value);

		[PreserveSig]
		[Token(Token = "0x6000998")]
		[Address(RVA = "0x30CAD90", Offset = "0x30CAD90", VA = "0x30CAD90")]
		private static extern RESULT FMOD_Studio_EventInstance_GetReverbLevel(IntPtr _event, int index, out float level);

		[PreserveSig]
		[Token(Token = "0x6000999")]
		[Address(RVA = "0x30CAE30", Offset = "0x30CAE30", VA = "0x30CAE30")]
		private static extern RESULT FMOD_Studio_EventInstance_SetReverbLevel(IntPtr _event, int index, float level);

		[PreserveSig]
		[Token(Token = "0x600099A")]
		[Address(RVA = "0x30CAED8", Offset = "0x30CAED8", VA = "0x30CAED8")]
		private static extern RESULT FMOD_Studio_EventInstance_GetPaused(IntPtr _event, out bool paused);

		[PreserveSig]
		[Token(Token = "0x600099B")]
		[Address(RVA = "0x30CAF88", Offset = "0x30CAF88", VA = "0x30CAF88")]
		private static extern RESULT FMOD_Studio_EventInstance_SetPaused(IntPtr _event, bool paused);

		[PreserveSig]
		[Token(Token = "0x600099C")]
		[Address(RVA = "0x30CB020", Offset = "0x30CB020", VA = "0x30CB020")]
		private static extern RESULT FMOD_Studio_EventInstance_Start(IntPtr _event);

		[PreserveSig]
		[Token(Token = "0x600099D")]
		[Address(RVA = "0x30CB0A8", Offset = "0x30CB0A8", VA = "0x30CB0A8")]
		private static extern RESULT FMOD_Studio_EventInstance_Stop(IntPtr _event, STOP_MODE mode);

		[PreserveSig]
		[Token(Token = "0x600099E")]
		[Address(RVA = "0x30CB140", Offset = "0x30CB140", VA = "0x30CB140")]
		private static extern RESULT FMOD_Studio_EventInstance_GetTimelinePosition(IntPtr _event, out int position);

		[PreserveSig]
		[Token(Token = "0x600099F")]
		[Address(RVA = "0x30CB1D8", Offset = "0x30CB1D8", VA = "0x30CB1D8")]
		private static extern RESULT FMOD_Studio_EventInstance_SetTimelinePosition(IntPtr _event, int position);

		[PreserveSig]
		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x30CB270", Offset = "0x30CB270", VA = "0x30CB270")]
		private static extern RESULT FMOD_Studio_EventInstance_GetPlaybackState(IntPtr _event, out PLAYBACK_STATE state);

		[PreserveSig]
		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x30CB308", Offset = "0x30CB308", VA = "0x30CB308")]
		private static extern RESULT FMOD_Studio_EventInstance_GetChannelGroup(IntPtr _event, out IntPtr group);

		[PreserveSig]
		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x30CB3A0", Offset = "0x30CB3A0", VA = "0x30CB3A0")]
		private static extern RESULT FMOD_Studio_EventInstance_Release(IntPtr _event);

		[PreserveSig]
		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x30CB428", Offset = "0x30CB428", VA = "0x30CB428")]
		private static extern RESULT FMOD_Studio_EventInstance_IsVirtual(IntPtr _event, out bool virtualstate);

		[PreserveSig]
		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x30CB8A8", Offset = "0x30CB8A8", VA = "0x30CB8A8")]
		private static extern RESULT FMOD_Studio_EventInstance_GetParameterByName(IntPtr _event, byte[] name, out float value, out float finalvalue);

		[PreserveSig]
		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x30CBAB8", Offset = "0x30CBAB8", VA = "0x30CBAB8")]
		private static extern RESULT FMOD_Studio_EventInstance_SetParameterByName(IntPtr _event, byte[] name, float value, bool ignoreseekspeed);

		[PreserveSig]
		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x30CB4FC", Offset = "0x30CB4FC", VA = "0x30CB4FC")]
		private static extern RESULT FMOD_Studio_EventInstance_GetParameterByID(IntPtr _event, PARAMETER_ID id, out float value, out float finalvalue);

		[PreserveSig]
		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x30CB5B0", Offset = "0x30CB5B0", VA = "0x30CB5B0")]
		private static extern RESULT FMOD_Studio_EventInstance_SetParameterByID(IntPtr _event, PARAMETER_ID id, float value, bool ignoreseekspeed);

		[PreserveSig]
		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x30CB664", Offset = "0x30CB664", VA = "0x30CB664")]
		private static extern RESULT FMOD_Studio_EventInstance_SetParametersByIDs(IntPtr _event, PARAMETER_ID[] ids, float[] values, int count, bool ignoreseekspeed);

		[PreserveSig]
		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x30CBB70", Offset = "0x30CBB70", VA = "0x30CBB70")]
		private static extern RESULT FMOD_Studio_EventInstance_TriggerCue(IntPtr _event);

		[PreserveSig]
		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x30CBBF8", Offset = "0x30CBBF8", VA = "0x30CBBF8")]
		private static extern RESULT FMOD_Studio_EventInstance_SetCallback(IntPtr _event, EVENT_CALLBACK callback, EVENT_CALLBACK_TYPE callbackmask);

		[PreserveSig]
		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x30CBCA0", Offset = "0x30CBCA0", VA = "0x30CBCA0")]
		private static extern RESULT FMOD_Studio_EventInstance_GetUserData(IntPtr _event, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x30CBD38", Offset = "0x30CBD38", VA = "0x30CBD38")]
		private static extern RESULT FMOD_Studio_EventInstance_SetUserData(IntPtr _event, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x30CBDD0", Offset = "0x30CBDD0", VA = "0x30CBDD0")]
		private static extern RESULT FMOD_Studio_EventInstance_GetCPUUsage(IntPtr _event, out uint exclusive, out uint inclusive);

		[PreserveSig]
		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x30CBE70", Offset = "0x30CBE70", VA = "0x30CBE70")]
		private static extern RESULT FMOD_Studio_EventInstance_GetMemoryUsage(IntPtr _event, out MEMORY_USAGE memoryusage);

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x30CBF88", Offset = "0x30CBF88", VA = "0x30CBF88")]
		public EventInstance(IntPtr ptr)
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x30CBF90", Offset = "0x30CBF90", VA = "0x30CBF90")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x30CBFDC", Offset = "0x30CBFDC", VA = "0x30CBFDC")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x30CC020", Offset = "0x30CC020", VA = "0x30CC020")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000170")]
	public struct Bus
	{
		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x30C5CC0", Offset = "0x30C5CC0", VA = "0x30C5CC0")]
		public RESULT getID(out Guid id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x30C5D58", Offset = "0x30C5D58", VA = "0x30C5D58")]
		public RESULT getPath(out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x30C6050", Offset = "0x30C6050", VA = "0x30C6050")]
		public RESULT getVolume(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x30C6078", Offset = "0x30C6078", VA = "0x30C6078")]
		public RESULT getVolume(out float volume, out float finalvolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x30C6118", Offset = "0x30C6118", VA = "0x30C6118")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x30C61B0", Offset = "0x30C61B0", VA = "0x30C61B0")]
		public RESULT getPaused(out bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x30C625C", Offset = "0x30C625C", VA = "0x30C625C")]
		public RESULT setPaused(bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x30C62F8", Offset = "0x30C62F8", VA = "0x30C62F8")]
		public RESULT getMute(out bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x30C63A4", Offset = "0x30C63A4", VA = "0x30C63A4")]
		public RESULT setMute(bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x30C6440", Offset = "0x30C6440", VA = "0x30C6440")]
		public RESULT stopAllEvents(STOP_MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x30C64D8", Offset = "0x30C64D8", VA = "0x30C64D8")]
		public RESULT lockChannelGroup()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x30C6560", Offset = "0x30C6560", VA = "0x30C6560")]
		public RESULT unlockChannelGroup()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x30C65E8", Offset = "0x30C65E8", VA = "0x30C65E8")]
		public RESULT getChannelGroup(out ChannelGroup group)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x30C6680", Offset = "0x30C6680", VA = "0x30C6680")]
		public RESULT getCPUUsage(out uint exclusive, out uint inclusive)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x30C6720", Offset = "0x30C6720", VA = "0x30C6720")]
		public RESULT getMemoryUsage(out MEMORY_USAGE memoryusage)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x30C67B8", Offset = "0x30C67B8", VA = "0x30C67B8")]
		private static extern bool FMOD_Studio_Bus_IsValid(IntPtr bus);

		[PreserveSig]
		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x30C5CC8", Offset = "0x30C5CC8", VA = "0x30C5CC8")]
		private static extern RESULT FMOD_Studio_Bus_GetID(IntPtr bus, out Guid id);

		[PreserveSig]
		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x30C5FA8", Offset = "0x30C5FA8", VA = "0x30C5FA8")]
		private static extern RESULT FMOD_Studio_Bus_GetPath(IntPtr bus, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x30C6080", Offset = "0x30C6080", VA = "0x30C6080")]
		private static extern RESULT FMOD_Studio_Bus_GetVolume(IntPtr bus, out float volume, out float finalvolume);

		[PreserveSig]
		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x30C6120", Offset = "0x30C6120", VA = "0x30C6120")]
		private static extern RESULT FMOD_Studio_Bus_SetVolume(IntPtr bus, float volume);

		[PreserveSig]
		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x30C61B8", Offset = "0x30C61B8", VA = "0x30C61B8")]
		private static extern RESULT FMOD_Studio_Bus_GetPaused(IntPtr bus, out bool paused);

		[PreserveSig]
		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x30C6268", Offset = "0x30C6268", VA = "0x30C6268")]
		private static extern RESULT FMOD_Studio_Bus_SetPaused(IntPtr bus, bool paused);

		[PreserveSig]
		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x30C6300", Offset = "0x30C6300", VA = "0x30C6300")]
		private static extern RESULT FMOD_Studio_Bus_GetMute(IntPtr bus, out bool mute);

		[PreserveSig]
		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x30C63B0", Offset = "0x30C63B0", VA = "0x30C63B0")]
		private static extern RESULT FMOD_Studio_Bus_SetMute(IntPtr bus, bool mute);

		[PreserveSig]
		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x30C6448", Offset = "0x30C6448", VA = "0x30C6448")]
		private static extern RESULT FMOD_Studio_Bus_StopAllEvents(IntPtr bus, STOP_MODE mode);

		[PreserveSig]
		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x30C64E0", Offset = "0x30C64E0", VA = "0x30C64E0")]
		private static extern RESULT FMOD_Studio_Bus_LockChannelGroup(IntPtr bus);

		[PreserveSig]
		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x30C6568", Offset = "0x30C6568", VA = "0x30C6568")]
		private static extern RESULT FMOD_Studio_Bus_UnlockChannelGroup(IntPtr bus);

		[PreserveSig]
		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x30C65F0", Offset = "0x30C65F0", VA = "0x30C65F0")]
		private static extern RESULT FMOD_Studio_Bus_GetChannelGroup(IntPtr bus, out IntPtr group);

		[PreserveSig]
		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x30C6688", Offset = "0x30C6688", VA = "0x30C6688")]
		private static extern RESULT FMOD_Studio_Bus_GetCPUUsage(IntPtr bus, out uint exclusive, out uint inclusive);

		[PreserveSig]
		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x30C6728", Offset = "0x30C6728", VA = "0x30C6728")]
		private static extern RESULT FMOD_Studio_Bus_GetMemoryUsage(IntPtr bus, out MEMORY_USAGE memoryusage);

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x30C6840", Offset = "0x30C6840", VA = "0x30C6840")]
		public Bus(IntPtr ptr)
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x30C6848", Offset = "0x30C6848", VA = "0x30C6848")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x30C6894", Offset = "0x30C6894", VA = "0x30C6894")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x30C68D8", Offset = "0x30C68D8", VA = "0x30C68D8")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000171")]
	public struct VCA
	{
		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x30D06A0", Offset = "0x30D06A0", VA = "0x30D06A0")]
		public RESULT getID(out Guid id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x30D0738", Offset = "0x30D0738", VA = "0x30D0738")]
		public RESULT getPath(out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x30D0A30", Offset = "0x30D0A30", VA = "0x30D0A30")]
		public RESULT getVolume(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x30D0A58", Offset = "0x30D0A58", VA = "0x30D0A58")]
		public RESULT getVolume(out float volume, out float finalvolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x30D0AF8", Offset = "0x30D0AF8", VA = "0x30D0AF8")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x30D0B90", Offset = "0x30D0B90", VA = "0x30D0B90")]
		private static extern bool FMOD_Studio_VCA_IsValid(IntPtr vca);

		[PreserveSig]
		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x30D06A8", Offset = "0x30D06A8", VA = "0x30D06A8")]
		private static extern RESULT FMOD_Studio_VCA_GetID(IntPtr vca, out Guid id);

		[PreserveSig]
		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x30D0988", Offset = "0x30D0988", VA = "0x30D0988")]
		private static extern RESULT FMOD_Studio_VCA_GetPath(IntPtr vca, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x30D0A60", Offset = "0x30D0A60", VA = "0x30D0A60")]
		private static extern RESULT FMOD_Studio_VCA_GetVolume(IntPtr vca, out float volume, out float finalvolume);

		[PreserveSig]
		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x30D0B00", Offset = "0x30D0B00", VA = "0x30D0B00")]
		private static extern RESULT FMOD_Studio_VCA_SetVolume(IntPtr vca, float volume);

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x30D0C18", Offset = "0x30D0C18", VA = "0x30D0C18")]
		public VCA(IntPtr ptr)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x30D0C20", Offset = "0x30D0C20", VA = "0x30D0C20")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x30D0C6C", Offset = "0x30D0C6C", VA = "0x30D0C6C")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x30D0CB0", Offset = "0x30D0CB0", VA = "0x30D0CB0")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000172")]
	public struct Bank
	{
		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x30C47D8", Offset = "0x30C47D8", VA = "0x30C47D8")]
		public RESULT getID(out Guid id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x30C4870", Offset = "0x30C4870", VA = "0x30C4870")]
		public RESULT getPath(out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x30C4B68", Offset = "0x30C4B68", VA = "0x30C4B68")]
		public RESULT unload()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x30C4BF0", Offset = "0x30C4BF0", VA = "0x30C4BF0")]
		public RESULT loadSampleData()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x30C4C78", Offset = "0x30C4C78", VA = "0x30C4C78")]
		public RESULT unloadSampleData()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x30C4D00", Offset = "0x30C4D00", VA = "0x30C4D00")]
		public RESULT getLoadingState(out LOADING_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x30C4D98", Offset = "0x30C4D98", VA = "0x30C4D98")]
		public RESULT getSampleLoadingState(out LOADING_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x30C4E30", Offset = "0x30C4E30", VA = "0x30C4E30")]
		public RESULT getStringCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x30C4EC8", Offset = "0x30C4EC8", VA = "0x30C4EC8")]
		public RESULT getStringInfo(int index, out Guid id, out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x30C5228", Offset = "0x30C5228", VA = "0x30C5228")]
		public RESULT getEventCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x30C52C0", Offset = "0x30C52C0", VA = "0x30C52C0")]
		public RESULT getEventList(out EventDescription[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x30C54D8", Offset = "0x30C54D8", VA = "0x30C54D8")]
		public RESULT getBusCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x30C5570", Offset = "0x30C5570", VA = "0x30C5570")]
		public RESULT getBusList(out Bus[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x30C5788", Offset = "0x30C5788", VA = "0x30C5788")]
		public RESULT getVCACount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x30C5820", Offset = "0x30C5820", VA = "0x30C5820")]
		public RESULT getVCAList(out VCA[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x30C5A38", Offset = "0x30C5A38", VA = "0x30C5A38")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x30C5AD0", Offset = "0x30C5AD0", VA = "0x30C5AD0")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x30C5B68", Offset = "0x30C5B68", VA = "0x30C5B68")]
		private static extern bool FMOD_Studio_Bank_IsValid(IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x30C47E0", Offset = "0x30C47E0", VA = "0x30C47E0")]
		private static extern RESULT FMOD_Studio_Bank_GetID(IntPtr bank, out Guid id);

		[PreserveSig]
		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x30C4AC0", Offset = "0x30C4AC0", VA = "0x30C4AC0")]
		private static extern RESULT FMOD_Studio_Bank_GetPath(IntPtr bank, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x30C4B70", Offset = "0x30C4B70", VA = "0x30C4B70")]
		private static extern RESULT FMOD_Studio_Bank_Unload(IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x30C4BF8", Offset = "0x30C4BF8", VA = "0x30C4BF8")]
		private static extern RESULT FMOD_Studio_Bank_LoadSampleData(IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x30C4C80", Offset = "0x30C4C80", VA = "0x30C4C80")]
		private static extern RESULT FMOD_Studio_Bank_UnloadSampleData(IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x30C4D08", Offset = "0x30C4D08", VA = "0x30C4D08")]
		private static extern RESULT FMOD_Studio_Bank_GetLoadingState(IntPtr bank, out LOADING_STATE state);

		[PreserveSig]
		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x30C4DA0", Offset = "0x30C4DA0", VA = "0x30C4DA0")]
		private static extern RESULT FMOD_Studio_Bank_GetSampleLoadingState(IntPtr bank, out LOADING_STATE state);

		[PreserveSig]
		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x30C4E38", Offset = "0x30C4E38", VA = "0x30C4E38")]
		private static extern RESULT FMOD_Studio_Bank_GetStringCount(IntPtr bank, out int count);

		[PreserveSig]
		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x30C5168", Offset = "0x30C5168", VA = "0x30C5168")]
		private static extern RESULT FMOD_Studio_Bank_GetStringInfo(IntPtr bank, int index, out Guid id, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x30C5230", Offset = "0x30C5230", VA = "0x30C5230")]
		private static extern RESULT FMOD_Studio_Bank_GetEventCount(IntPtr bank, out int count);

		[PreserveSig]
		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x30C5428", Offset = "0x30C5428", VA = "0x30C5428")]
		private static extern RESULT FMOD_Studio_Bank_GetEventList(IntPtr bank, IntPtr[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x30C54E0", Offset = "0x30C54E0", VA = "0x30C54E0")]
		private static extern RESULT FMOD_Studio_Bank_GetBusCount(IntPtr bank, out int count);

		[PreserveSig]
		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x30C56D8", Offset = "0x30C56D8", VA = "0x30C56D8")]
		private static extern RESULT FMOD_Studio_Bank_GetBusList(IntPtr bank, IntPtr[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x30C5790", Offset = "0x30C5790", VA = "0x30C5790")]
		private static extern RESULT FMOD_Studio_Bank_GetVCACount(IntPtr bank, out int count);

		[PreserveSig]
		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x30C5988", Offset = "0x30C5988", VA = "0x30C5988")]
		private static extern RESULT FMOD_Studio_Bank_GetVCAList(IntPtr bank, IntPtr[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x30C5A40", Offset = "0x30C5A40", VA = "0x30C5A40")]
		private static extern RESULT FMOD_Studio_Bank_GetUserData(IntPtr bank, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x30C5AD8", Offset = "0x30C5AD8", VA = "0x30C5AD8")]
		private static extern RESULT FMOD_Studio_Bank_SetUserData(IntPtr bank, IntPtr userdata);

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x30C5BF0", Offset = "0x30C5BF0", VA = "0x30C5BF0")]
		public Bank(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x30C5BF8", Offset = "0x30C5BF8", VA = "0x30C5BF8")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x30C5C44", Offset = "0x30C5C44", VA = "0x30C5C44")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x30C5C88", Offset = "0x30C5C88", VA = "0x30C5C88")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000173")]
	public struct CommandReplay
	{
		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x30C75B0", Offset = "0x30C75B0", VA = "0x30C75B0")]
		public RESULT getSystem(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x30C7648", Offset = "0x30C7648", VA = "0x30C7648")]
		public RESULT getLength(out float length)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x30C76E0", Offset = "0x30C76E0", VA = "0x30C76E0")]
		public RESULT getCommandCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x30C7778", Offset = "0x30C7778", VA = "0x30C7778")]
		public RESULT getCommandInfo(int commandIndex, out COMMAND_INFO info)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x30C7818", Offset = "0x30C7818", VA = "0x30C7818")]
		public RESULT getCommandString(int commandIndex, out string buffer)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x30C7B18", Offset = "0x30C7B18", VA = "0x30C7B18")]
		public RESULT getCommandAtTime(float time, out int commandIndex)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x30C7BC0", Offset = "0x30C7BC0", VA = "0x30C7BC0")]
		public RESULT setBankPath(string bankPath)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x30C7DA0", Offset = "0x30C7DA0", VA = "0x30C7DA0")]
		public RESULT start()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x30C7E28", Offset = "0x30C7E28", VA = "0x30C7E28")]
		public RESULT stop()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x30C7EB0", Offset = "0x30C7EB0", VA = "0x30C7EB0")]
		public RESULT seekToTime(float time)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x30C7F48", Offset = "0x30C7F48", VA = "0x30C7F48")]
		public RESULT seekToCommand(int commandIndex)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x30C7FE0", Offset = "0x30C7FE0", VA = "0x30C7FE0")]
		public RESULT getPaused(out bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x30C808C", Offset = "0x30C808C", VA = "0x30C808C")]
		public RESULT setPaused(bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x30C8128", Offset = "0x30C8128", VA = "0x30C8128")]
		public RESULT getPlaybackState(out PLAYBACK_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x30C81C0", Offset = "0x30C81C0", VA = "0x30C81C0")]
		public RESULT getCurrentCommand(out int commandIndex, out float currentTime)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x30C8260", Offset = "0x30C8260", VA = "0x30C8260")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x30C82E8", Offset = "0x30C82E8", VA = "0x30C82E8")]
		public RESULT setFrameCallback(COMMANDREPLAY_FRAME_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x30C8388", Offset = "0x30C8388", VA = "0x30C8388")]
		public RESULT setLoadBankCallback(COMMANDREPLAY_LOAD_BANK_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x30C8428", Offset = "0x30C8428", VA = "0x30C8428")]
		public RESULT setCreateInstanceCallback(COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x30C84C8", Offset = "0x30C84C8", VA = "0x30C84C8")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x30C8560", Offset = "0x30C8560", VA = "0x30C8560")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x30C85F8", Offset = "0x30C85F8", VA = "0x30C85F8")]
		private static extern bool FMOD_Studio_CommandReplay_IsValid(IntPtr replay);

		[PreserveSig]
		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x30C75B8", Offset = "0x30C75B8", VA = "0x30C75B8")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetSystem(IntPtr replay, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x30C7650", Offset = "0x30C7650", VA = "0x30C7650")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetLength(IntPtr replay, out float length);

		[PreserveSig]
		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x30C76E8", Offset = "0x30C76E8", VA = "0x30C76E8")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetCommandCount(IntPtr replay, out int count);

		[PreserveSig]
		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x30C7780", Offset = "0x30C7780", VA = "0x30C7780")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetCommandInfo(IntPtr replay, int commandindex, out COMMAND_INFO info);

		[PreserveSig]
		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x30C7A70", Offset = "0x30C7A70", VA = "0x30C7A70")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetCommandString(IntPtr replay, int commandIndex, IntPtr buffer, int length);

		[PreserveSig]
		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x30C7B20", Offset = "0x30C7B20", VA = "0x30C7B20")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetCommandAtTime(IntPtr replay, float time, out int commandIndex);

		[PreserveSig]
		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x30C7D08", Offset = "0x30C7D08", VA = "0x30C7D08")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetBankPath(IntPtr replay, byte[] bankPath);

		[PreserveSig]
		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x30C7DA8", Offset = "0x30C7DA8", VA = "0x30C7DA8")]
		private static extern RESULT FMOD_Studio_CommandReplay_Start(IntPtr replay);

		[PreserveSig]
		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x30C7E30", Offset = "0x30C7E30", VA = "0x30C7E30")]
		private static extern RESULT FMOD_Studio_CommandReplay_Stop(IntPtr replay);

		[PreserveSig]
		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x30C7EB8", Offset = "0x30C7EB8", VA = "0x30C7EB8")]
		private static extern RESULT FMOD_Studio_CommandReplay_SeekToTime(IntPtr replay, float time);

		[PreserveSig]
		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x30C7F50", Offset = "0x30C7F50", VA = "0x30C7F50")]
		private static extern RESULT FMOD_Studio_CommandReplay_SeekToCommand(IntPtr replay, int commandIndex);

		[PreserveSig]
		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x30C7FE8", Offset = "0x30C7FE8", VA = "0x30C7FE8")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetPaused(IntPtr replay, out bool paused);

		[PreserveSig]
		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x30C8098", Offset = "0x30C8098", VA = "0x30C8098")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetPaused(IntPtr replay, bool paused);

		[PreserveSig]
		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x30C8130", Offset = "0x30C8130", VA = "0x30C8130")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetPlaybackState(IntPtr replay, out PLAYBACK_STATE state);

		[PreserveSig]
		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x30C81C8", Offset = "0x30C81C8", VA = "0x30C81C8")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetCurrentCommand(IntPtr replay, out int commandIndex, out float currentTime);

		[PreserveSig]
		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x30C8268", Offset = "0x30C8268", VA = "0x30C8268")]
		private static extern RESULT FMOD_Studio_CommandReplay_Release(IntPtr replay);

		[PreserveSig]
		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x30C82F0", Offset = "0x30C82F0", VA = "0x30C82F0")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetFrameCallback(IntPtr replay, COMMANDREPLAY_FRAME_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x30C8390", Offset = "0x30C8390", VA = "0x30C8390")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetLoadBankCallback(IntPtr replay, COMMANDREPLAY_LOAD_BANK_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x30C8430", Offset = "0x30C8430", VA = "0x30C8430")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetCreateInstanceCallback(IntPtr replay, COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x30C84D0", Offset = "0x30C84D0", VA = "0x30C84D0")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetUserData(IntPtr replay, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x30C8568", Offset = "0x30C8568", VA = "0x30C8568")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetUserData(IntPtr replay, IntPtr userdata);

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x30C8680", Offset = "0x30C8680", VA = "0x30C8680")]
		public CommandReplay(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x30C8688", Offset = "0x30C8688", VA = "0x30C8688")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x30C86D4", Offset = "0x30C86D4", VA = "0x30C86D4")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x30C8718", Offset = "0x30C8718", VA = "0x30C8718")]
		public bool isValid()
		{
			return default(bool);
		}
	}
}
namespace DarkTonic.MasterAudio
{
	[Token(Token = "0x2000174")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F3658", Offset = "0x12F3658")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x12F3658", Offset = "0x12F3658")]
	public class AmbientSound : MonoBehaviour
	{
		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SoundGroup]
		public string AmbientSoundGroup;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string variationName;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float playVolume;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public MasterAudio.AmbientSoundExitMode exitMode;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exitFadeTime;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AmbientSoundReEnterMode reEnterMode;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float reEnterFadeTime;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4768", Offset = "0x12F4768")]
		public bool FollowCaller;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F47A0", Offset = "0x12F47A0")]
		public bool UseClosestColliderPosition;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool UseTopCollider;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool IncludeChildColliders;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F47D8", Offset = "0x12F47D8")]
		public Transform RuntimeFollower;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _trans;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float colliderMaxDistance;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public long lastTimeMaxDistanceCalced;

		[Token(Token = "0x1700007C")]
		public bool IsValidSoundGroup
		{
			[Token(Token = "0x6000A41")]
			[Address(RVA = "0x1668684", Offset = "0x1668684", VA = "0x1668684")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007D")]
		public Transform Trans
		{
			[Token(Token = "0x6000A42")]
			[Address(RVA = "0x1668AF8", Offset = "0x1668AF8", VA = "0x1668AF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x166804C", Offset = "0x166804C", VA = "0x166804C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x166845C", Offset = "0x166845C", VA = "0x166845C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x1668EF4", Offset = "0x1668EF4", VA = "0x1668EF4")]
		public void CalculateRadius()
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x1668FE0", Offset = "0x1668FE0", VA = "0x1668FE0")]
		public AudioSource GetNamedOrFirstAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x1669368", Offset = "0x1669368", VA = "0x1669368")]
		public List<AudioSource> GetAllVariationAudioSources()
		{
			return null;
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x1669558", Offset = "0x1669558", VA = "0x1669558")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x16697B4", Offset = "0x16697B4", VA = "0x16697B4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x1668050", Offset = "0x1668050", VA = "0x1668050")]
		private void StartTrackers()
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x166A370", Offset = "0x166A370", VA = "0x166A370")]
		public AmbientSound()
		{
		}
	}
	[Token(Token = "0x2000175")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F36A8", Offset = "0x12F36A8")]
	public class ButtonClicker : MonoBehaviour
	{
		[Token(Token = "0x40008B3")]
		public const float SmallSizeMultiplier = 0.9f;

		[Token(Token = "0x40008B4")]
		public const float LargeSizeMultiplier = 1.1f;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool resizeOnClick;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool resizeClickAllSiblings;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool resizeOnHover;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool resizeHoverAllSiblings;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mouseDownSound;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string mouseUpSound;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string mouseClickSound;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string mouseOverSound;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mouseOutSound;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _originalSize;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _smallerSize;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _largerSize;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _trans;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly Dictionary<Transform, Vector3> _siblingClickScaleByTransform;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly Dictionary<Transform, Vector3> _siblingHoverScaleByTransform;

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x16722CC", Offset = "0x16722CC", VA = "0x16722CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x1672590", Offset = "0x1672590", VA = "0x1672590")]
		private void OnPress(bool isDown)
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x16729B4", Offset = "0x16729B4", VA = "0x16729B4")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x1672A50", Offset = "0x1672A50", VA = "0x1672A50")]
		private void OnHover(bool isOver)
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x1672C9C", Offset = "0x1672C9C", VA = "0x1672C9C")]
		public ButtonClicker()
		{
		}
	}
	[Token(Token = "0x2000176")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x12F36E0", Offset = "0x12F36E0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F36E0", Offset = "0x12F36E0")]
	public class EventSounds : MonoBehaviour, ICustomEventReceiver
	{
		[Token(Token = "0x200021B")]
		public enum UnityUIVersion
		{
			[Token(Token = "0x4000E11")]
			Legacy,
			[Token(Token = "0x4000E12")]
			uGUI
		}

		[Token(Token = "0x200021C")]
		public enum EventType
		{
			[Token(Token = "0x4000E14")]
			OnStart,
			[Token(Token = "0x4000E15")]
			OnVisible,
			[Token(Token = "0x4000E16")]
			OnInvisible,
			[Token(Token = "0x4000E17")]
			OnCollision,
			[Token(Token = "0x4000E18")]
			OnTriggerEnter,
			[Token(Token = "0x4000E19")]
			OnTriggerExit,
			[Token(Token = "0x4000E1A")]
			OnMouseEnter,
			[Token(Token = "0x4000E1B")]
			OnMouseClick,
			[Token(Token = "0x4000E1C")]
			OnSpawned,
			[Token(Token = "0x4000E1D")]
			OnDespawned,
			[Token(Token = "0x4000E1E")]
			OnEnable,
			[Token(Token = "0x4000E1F")]
			OnDisable,
			[Token(Token = "0x4000E20")]
			OnCollision2D,
			[Token(Token = "0x4000E21")]
			OnTriggerEnter2D,
			[Token(Token = "0x4000E22")]
			OnTriggerExit2D,
			[Token(Token = "0x4000E23")]
			OnParticleCollision,
			[Token(Token = "0x4000E24")]
			UserDefinedEvent,
			[Token(Token = "0x4000E25")]
			OnCollisionExit,
			[Token(Token = "0x4000E26")]
			OnCollisionExit2D,
			[Token(Token = "0x4000E27")]
			OnMouseUp,
			[Token(Token = "0x4000E28")]
			OnMouseExit,
			[Token(Token = "0x4000E29")]
			OnMouseDrag,
			[Token(Token = "0x4000E2A")]
			NGUIOnClick,
			[Token(Token = "0x4000E2B")]
			NGUIMouseDown,
			[Token(Token = "0x4000E2C")]
			NGUIMouseUp,
			[Token(Token = "0x4000E2D")]
			NGUIMouseEnter,
			[Token(Token = "0x4000E2E")]
			NGUIMouseExit,
			[Token(Token = "0x4000E2F")]
			MechanimStateChanged,
			[Token(Token = "0x4000E30")]
			UnitySliderChanged,
			[Token(Token = "0x4000E31")]
			UnityButtonClicked,
			[Token(Token = "0x4000E32")]
			UnityPointerDown,
			[Token(Token = "0x4000E33")]
			UnityPointerUp,
			[Token(Token = "0x4000E34")]
			UnityPointerEnter,
			[Token(Token = "0x4000E35")]
			UnityPointerExit,
			[Token(Token = "0x4000E36")]
			UnityDrag,
			[Token(Token = "0x4000E37")]
			UnityDrop,
			[Token(Token = "0x4000E38")]
			UnityScroll,
			[Token(Token = "0x4000E39")]
			UnityUpdateSelected,
			[Token(Token = "0x4000E3A")]
			UnitySelect,
			[Token(Token = "0x4000E3B")]
			UnityDeselect,
			[Token(Token = "0x4000E3C")]
			UnityMove,
			[Token(Token = "0x4000E3D")]
			UnityInitializePotentialDrag,
			[Token(Token = "0x4000E3E")]
			UnityBeginDrag,
			[Token(Token = "0x4000E3F")]
			UnityEndDrag,
			[Token(Token = "0x4000E40")]
			UnitySubmit,
			[Token(Token = "0x4000E41")]
			UnityCancel,
			[Token(Token = "0x4000E42")]
			UnityToggle,
			[Token(Token = "0x4000E43")]
			OnTriggerStay,
			[Token(Token = "0x4000E44")]
			OnTriggerStay2D
		}

		[Token(Token = "0x200021D")]
		public enum GlidePitchType
		{
			[Token(Token = "0x4000E46")]
			None,
			[Token(Token = "0x4000E47")]
			RaisePitch,
			[Token(Token = "0x4000E48")]
			LowerPitch
		}

		[Token(Token = "0x200021E")]
		public enum VariationType
		{
			[Token(Token = "0x4000E4A")]
			PlaySpecific,
			[Token(Token = "0x4000E4B")]
			PlayRandom
		}

		[Token(Token = "0x200021F")]
		public enum PreviousSoundStopMode
		{
			[Token(Token = "0x4000E4D")]
			None,
			[Token(Token = "0x4000E4E")]
			Stop,
			[Token(Token = "0x4000E4F")]
			FadeOut
		}

		[Token(Token = "0x2000220")]
		public enum RetriggerLimMode
		{
			[Token(Token = "0x4000E51")]
			None,
			[Token(Token = "0x4000E52")]
			FrameBased,
			[Token(Token = "0x4000E53")]
			TimeBased
		}

		[Token(Token = "0x2000221")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3A94", Offset = "0x12F3A94")]
		private sealed class <CoUpdate>d__123 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EventSounds <>4__this;

			[Token(Token = "0x1700014D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E84")]
				[Address(RVA = "0x16861B0", Offset = "0x16861B0", VA = "0x16861B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E86")]
				[Address(RVA = "0x1686218", Offset = "0x1686218", VA = "0x1686218", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E81")]
			[Address(RVA = "0x1678554", Offset = "0x1678554", VA = "0x1678554")]
			[DebuggerHidden]
			public <CoUpdate>d__123(int <>1__state)
			{
			}

			[Token(Token = "0x6000E82")]
			[Address(RVA = "0x1686028", Offset = "0x1686028", VA = "0x1686028", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E83")]
			[Address(RVA = "0x168602C", Offset = "0x168602C", VA = "0x168602C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E85")]
			[Address(RVA = "0x16861B8", Offset = "0x16861B8", VA = "0x16861B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000222")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3AA4", Offset = "0x12F3AA4")]
		private sealed class <>c__DisplayClass175_0
		{
			[Token(Token = "0x4000E57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string stateName;

			[Token(Token = "0x6000E87")]
			[Address(RVA = "0x167AA20", Offset = "0x167AA20", VA = "0x167AA20")]
			public <>c__DisplayClass175_0()
			{
			}

			[Token(Token = "0x6000E88")]
			[Address(RVA = "0x1686004", Offset = "0x1686004", VA = "0x1686004")]
			internal bool <GetMechanimAudioEventGroup>b__0(AudioEventGroup grp)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.SoundSpawnLocationMode soundSpawnMode;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disableSounds;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool showPoolManager;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool showNGUI;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioEvent eventToGizmo;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityUIVersion unityUIMode;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool logMissingEvents;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<string> LayerTagFilterEvents;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<MasterAudio.PlaylistCommand> PlaylistCommandsWithAll;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioEventGroup startSound;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioEventGroup visibleSound;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioEventGroup invisibleSound;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioEventGroup collisionSound;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioEventGroup collisionExitSound;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioEventGroup triggerSound;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioEventGroup triggerExitSound;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioEventGroup triggerStaySound;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioEventGroup mouseEnterSound;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioEventGroup mouseExitSound;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AudioEventGroup mouseClickSound;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AudioEventGroup mouseUpSound;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AudioEventGroup mouseDragSound;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AudioEventGroup spawnedSound;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AudioEventGroup despawnedSound;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AudioEventGroup enableSound;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AudioEventGroup disableSound;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AudioEventGroup collision2dSound;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AudioEventGroup collisionExit2dSound;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AudioEventGroup triggerEnter2dSound;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AudioEventGroup triggerStay2dSound;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AudioEventGroup triggerExit2dSound;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioEventGroup particleCollisionSound;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioEventGroup nguiOnClickSound;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public AudioEventGroup nguiMouseDownSound;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public AudioEventGroup nguiMouseUpSound;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AudioEventGroup nguiMouseEnterSound;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioEventGroup nguiMouseExitSound;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AudioEventGroup unitySliderChangedSound;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioEventGroup unityButtonClickedSound;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public AudioEventGroup unityPointerDownSound;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public AudioEventGroup unityDragSound;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public AudioEventGroup unityPointerUpSound;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public AudioEventGroup unityPointerEnterSound;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public AudioEventGroup unityPointerExitSound;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public AudioEventGroup unityDropSound;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public AudioEventGroup unityScrollSound;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public AudioEventGroup unityUpdateSelectedSound;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public AudioEventGroup unitySelectSound;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public AudioEventGroup unityDeselectSound;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public AudioEventGroup unityMoveSound;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public AudioEventGroup unityInitializePotentialDragSound;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public AudioEventGroup unityBeginDragSound;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public AudioEventGroup unityEndDragSound;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public AudioEventGroup unitySubmitSound;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public AudioEventGroup unityCancelSound;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public AudioEventGroup unityToggleSound;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public List<AudioEventGroup> userDefinedSounds;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public List<AudioEventGroup> mechanimStateChangedSounds;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public bool useStartSound;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B9")]
		public bool useVisibleSound;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BA")]
		public bool useInvisibleSound;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BB")]
		public bool useCollisionSound;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public bool useCollisionExitSound;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BD")]
		public bool useTriggerEnterSound;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BE")]
		public bool useTriggerExitSound;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BF")]
		public bool useTriggerStaySound;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public bool useMouseEnterSound;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C1")]
		public bool useMouseExitSound;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C2")]
		public bool useMouseClickSound;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C3")]
		public bool useMouseUpSound;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public bool useMouseDragSound;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C5")]
		public bool useSpawnedSound;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C6")]
		public bool useDespawnedSound;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C7")]
		public bool useEnableSound;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public bool useDisableSound;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
		public bool useCollision2dSound;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CA")]
		public bool useCollisionExit2dSound;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CB")]
		public bool useTriggerEnter2dSound;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public bool useTriggerStay2dSound;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CD")]
		public bool useTriggerExit2dSound;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CE")]
		public bool useParticleCollisionSound;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CF")]
		public bool useNguiOnClickSound;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public bool useNguiMouseDownSound;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
		public bool useNguiMouseUpSound;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D2")]
		public bool useNguiMouseEnterSound;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D3")]
		public bool useNguiMouseExitSound;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public bool useUnitySliderChangedSound;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D5")]
		public bool useUnityButtonClickedSound;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D6")]
		public bool useUnityPointerDownSound;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D7")]
		public bool useUnityDragSound;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public bool useUnityPointerUpSound;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
		public bool useUnityPointerEnterSound;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DA")]
		public bool useUnityPointerExitSound;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DB")]
		public bool useUnityDropSound;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public bool useUnityScrollSound;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DD")]
		public bool useUnityUpdateSelectedSound;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DE")]
		public bool useUnitySelectSound;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DF")]
		public bool useUnityDeselectSound;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public bool useUnityMoveSound;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
		public bool useUnityInitializePotentialDragSound;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E2")]
		public bool useUnityBeginDragSound;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E3")]
		public bool useUnityEndDragSound;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public bool useUnitySubmitSound;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
		public bool useUnityCancelSound;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E6")]
		public bool useUnityToggleSound;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Slider _slider;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Toggle _toggle;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Button _button;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private bool _isVisible;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x201")]
		private bool _needsCoroutine;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private float? _triggerEnterTime;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private float? _triggerEnter2dTime;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Transform _trans;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private readonly List<AudioEventGroup> _validMechanimStateChangedSounds;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Animator _anim;

		[Token(Token = "0x1700007E")]
		private bool IsSetToUGUI
		{
			[Token(Token = "0x6000A73")]
			[Address(RVA = "0x16781D8", Offset = "0x16781D8", VA = "0x16781D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007F")]
		private bool IsSetToLegacyUI
		{
			[Token(Token = "0x6000A74")]
			[Address(RVA = "0x167A3D0", Offset = "0x167A3D0", VA = "0x167A3D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x16780D0", Offset = "0x16780D0", VA = "0x16780D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x16783A4", Offset = "0x16783A4", VA = "0x16783A4", Slot = "10")]
		protected virtual void SpawnedOrAwake()
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x16784D8", Offset = "0x16784D8", VA = "0x16784D8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5D14", Offset = "0x12F5D14")]
		private IEnumerator CoUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x1678580", Offset = "0x1678580", VA = "0x1678580")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x1678BF4", Offset = "0x1678BF4", VA = "0x1678BF4")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x1678C1C", Offset = "0x1678C1C", VA = "0x1678C1C")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x1678C38", Offset = "0x1678C38", VA = "0x1678C38")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x1678E80", Offset = "0x1678E80", VA = "0x1678E80")]
		private void RestorePersistentSliders()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x16791CC", Offset = "0x16791CC", VA = "0x16791CC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x1679590", Offset = "0x1679590", VA = "0x1679590")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x16796C4", Offset = "0x16796C4", VA = "0x16796C4")]
		private void OnTriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x16797AC", Offset = "0x16797AC", VA = "0x16797AC")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x16798C8", Offset = "0x16798C8", VA = "0x16798C8")]
		private void OnCollisionEnter2D(Collision2D collision)
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x16799DC", Offset = "0x16799DC", VA = "0x16799DC")]
		private void OnCollisionExit2D(Collision2D collision)
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x1679AF0", Offset = "0x1679AF0", VA = "0x1679AF0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x1679C04", Offset = "0x1679C04", VA = "0x1679C04")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x1679D18", Offset = "0x1679D18", VA = "0x1679D18")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x1679E4C", Offset = "0x1679E4C", VA = "0x1679E4C")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x1679F34", Offset = "0x1679F34", VA = "0x1679F34")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x167A050", Offset = "0x167A050", VA = "0x167A050")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x167A164", Offset = "0x167A164", VA = "0x167A164")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x167A184", Offset = "0x167A184", VA = "0x167A184")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x167A1A4", Offset = "0x167A1A4", VA = "0x167A1A4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x167A1C4", Offset = "0x167A1C4", VA = "0x167A1C4")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x167A1E4", Offset = "0x167A1E4", VA = "0x167A1E4")]
		private void OnDrag(Vector2 delta)
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x167A1E8", Offset = "0x167A1E8", VA = "0x167A1E8")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x167A208", Offset = "0x167A208", VA = "0x167A208")]
		private void OnDrop(GameObject go)
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x167A20C", Offset = "0x167A20C", VA = "0x167A20C")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x167A22C", Offset = "0x167A22C", VA = "0x167A22C")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x167A24C", Offset = "0x167A24C", VA = "0x167A24C")]
		public void OnUpdateSelected(BaseEventData data)
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x167A26C", Offset = "0x167A26C", VA = "0x167A26C")]
		private void OnSelect(bool isSelected)
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x167A270", Offset = "0x167A270", VA = "0x167A270")]
		public void OnSelect(BaseEventData data)
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x167A290", Offset = "0x167A290", VA = "0x167A290")]
		public void OnDeselect(BaseEventData data)
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x167A2B0", Offset = "0x167A2B0", VA = "0x167A2B0")]
		public void OnMove(AxisEventData data)
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x167A2D0", Offset = "0x167A2D0", VA = "0x167A2D0")]
		public void OnInitializePotentialDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x167A2F0", Offset = "0x167A2F0", VA = "0x167A2F0")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x167A310", Offset = "0x167A310", VA = "0x167A310")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x167A330", Offset = "0x167A330", VA = "0x167A330")]
		public void OnSubmit(BaseEventData data)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x167A350", Offset = "0x167A350", VA = "0x167A350")]
		public void OnCancel(BaseEventData data)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x167A370", Offset = "0x167A370", VA = "0x167A370")]
		private void SliderChanged(float newValue)
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x167A3A0", Offset = "0x167A3A0", VA = "0x167A3A0")]
		private void ToggleChanged(bool newValue)
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x167A3B8", Offset = "0x167A3B8", VA = "0x167A3B8")]
		private void ButtonClicked()
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x167A3E0", Offset = "0x167A3E0", VA = "0x167A3E0")]
		private void OnPress(bool isDown)
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x167A418", Offset = "0x167A418", VA = "0x167A418")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x167A438", Offset = "0x167A438", VA = "0x167A438")]
		private void OnHover(bool isOver)
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x167A470", Offset = "0x167A470", VA = "0x167A470")]
		private void OnSpawned()
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x167A4C0", Offset = "0x167A4C0", VA = "0x167A4C0")]
		private void OnDespawned()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x167A4E0", Offset = "0x167A4E0", VA = "0x167A4E0")]
		public void CalculateRadius(AudioEvent anEvent)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x167A58C", Offset = "0x167A58C", VA = "0x167A58C")]
		public AudioSource GetNamedOrFirstAudioSource(AudioEvent anEvent)
		{
			return null;
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x167A75C", Offset = "0x167A75C", VA = "0x167A75C")]
		public List<AudioSource> GetAllVariationAudioSources(AudioEvent anEvent)
		{
			return null;
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x167A950", Offset = "0x167A950", VA = "0x167A950")]
		public AudioEventGroup GetMechanimAudioEventGroup(string stateName)
		{
			return null;
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x16789C8", Offset = "0x16789C8", VA = "0x16789C8")]
		public bool PlaySounds(AudioEventGroup eventGrp, EventType eType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x167CE38", Offset = "0x167CE38", VA = "0x167CE38")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x167D018", Offset = "0x167D018", VA = "0x167D018")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x167AA28", Offset = "0x167AA28", VA = "0x167AA28")]
		private static bool CheckForRetriggerLimit(AudioEventGroup grp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x167AB94", Offset = "0x167AB94", VA = "0x167AB94")]
		private void PerformSingleAction(AudioEventGroup grp, AudioEvent aEvent, EventType eType)
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x1684C54", Offset = "0x1684C54", VA = "0x1684C54")]
		private void LogIfCustomEventMissing(AudioEventGroup eventGroup)
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x16785C0", Offset = "0x16785C0", VA = "0x16785C0", Slot = "4")]
		public void CheckForIllegalCustomEvents()
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x1685080", Offset = "0x1685080", VA = "0x1685080", Slot = "5")]
		public void ReceiveEvent(string customEventName, Vector3 originPoint)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x1685154", Offset = "0x1685154", VA = "0x1685154", Slot = "6")]
		public bool SubscribesToEvent(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x167913C", Offset = "0x167913C", VA = "0x167913C", Slot = "7")]
		public void RegisterReceiver()
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x1679508", Offset = "0x1679508", VA = "0x1679508", Slot = "8")]
		public void UnregisterReceiver()
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x1685A78", Offset = "0x1685A78", VA = "0x1685A78", Slot = "9")]
		public IList<AudioEventGroup> GetAllEvents()
		{
			return null;
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x16781E8", Offset = "0x16781E8", VA = "0x16781E8")]
		private void AddUGUIComponents()
		{
		}

		[Token(Token = "0x6000A8B")]
		private void AddUGUIHandler<T>(bool useSound) where T : EventSoundsUGUIHandler
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x1685AD0", Offset = "0x1685AD0", VA = "0x1685AD0")]
		public EventSounds()
		{
		}
	}
	[Token(Token = "0x2000177")]
	public class EventSoundsUGUIHandler : MonoBehaviour
	{
		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F4810", Offset = "0x12F4810")]
		private EventSounds <eventSounds>k__BackingField;

		[Token(Token = "0x17000080")]
		public EventSounds eventSounds
		{
			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0x1686C78", Offset = "0x1686C78", VA = "0x1686C78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5D78", Offset = "0x12F5D78")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0x1686C80", Offset = "0x1686C80", VA = "0x1686C80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5D88", Offset = "0x12F5D88")]
			set
			{
			}
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x16862D0", Offset = "0x16862D0", VA = "0x16862D0")]
		public EventSoundsUGUIHandler()
		{
		}
	}
	[Token(Token = "0x2000178")]
	public class EventSoundsPointerEnterHandler : EventSoundsUGUIHandler, IPointerEnterHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x1686858", Offset = "0x1686858", VA = "0x1686858", Slot = "4")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x1686900", Offset = "0x1686900", VA = "0x1686900")]
		public EventSoundsPointerEnterHandler()
		{
		}
	}
	[Token(Token = "0x2000179")]
	public class EventSoundsPointerExitHandler : EventSoundsUGUIHandler, IPointerExitHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x1686908", Offset = "0x1686908", VA = "0x1686908", Slot = "4")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x16869B0", Offset = "0x16869B0", VA = "0x16869B0")]
		public EventSoundsPointerExitHandler()
		{
		}
	}
	[Token(Token = "0x200017A")]
	public class EventSoundsPointerDownHandler : EventSoundsUGUIHandler, IPointerDownHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x16867A8", Offset = "0x16867A8", VA = "0x16867A8", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x1686850", Offset = "0x1686850", VA = "0x1686850")]
		public EventSoundsPointerDownHandler()
		{
		}
	}
	[Token(Token = "0x200017B")]
	public class EventSoundsPointerUpHandler : EventSoundsUGUIHandler, IPointerUpHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x16869B8", Offset = "0x16869B8", VA = "0x16869B8", Slot = "4")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x1686A60", Offset = "0x1686A60", VA = "0x1686A60")]
		public EventSoundsPointerUpHandler()
		{
		}
	}
	[Token(Token = "0x200017C")]
	public class EventSoundsDragHandler : EventSoundsUGUIHandler, IDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x1686438", Offset = "0x1686438", VA = "0x1686438", Slot = "4")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x16864E0", Offset = "0x16864E0", VA = "0x16864E0")]
		public EventSoundsDragHandler()
		{
		}
	}
	[Token(Token = "0x200017D")]
	public class EventSoundsDropHandler : EventSoundsUGUIHandler, IDropHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x16864E8", Offset = "0x16864E8", VA = "0x16864E8", Slot = "4")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x1686590", Offset = "0x1686590", VA = "0x1686590")]
		public EventSoundsDropHandler()
		{
		}
	}
	[Token(Token = "0x200017E")]
	public class EventSoundsScrollHandler : EventSoundsUGUIHandler, IScrollHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x1686A68", Offset = "0x1686A68", VA = "0x1686A68", Slot = "4")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x1686B10", Offset = "0x1686B10", VA = "0x1686B10")]
		public EventSoundsScrollHandler()
		{
		}
	}
	[Token(Token = "0x200017F")]
	public class EventSoundsUpdateSelectedHandler : EventSoundsUGUIHandler, IUpdateSelectedHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x1686C88", Offset = "0x1686C88", VA = "0x1686C88", Slot = "4")]
		public void OnUpdateSelected(BaseEventData data)
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x1686D30", Offset = "0x1686D30", VA = "0x1686D30")]
		public EventSoundsUpdateSelectedHandler()
		{
		}
	}
	[Token(Token = "0x2000180")]
	public class EventSoundsSelectHandler : EventSoundsUGUIHandler, ISelectHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x1686B18", Offset = "0x1686B18", VA = "0x1686B18", Slot = "4")]
		public void OnSelect(BaseEventData data)
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x1686BC0", Offset = "0x1686BC0", VA = "0x1686BC0")]
		public EventSoundsSelectHandler()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public class EventSoundsDeselectHandler : EventSoundsUGUIHandler, IDeselectHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x1686388", Offset = "0x1686388", VA = "0x1686388", Slot = "4")]
		public void OnDeselect(BaseEventData data)
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x1686430", Offset = "0x1686430", VA = "0x1686430")]
		public EventSoundsDeselectHandler()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public class EventSoundsMoveHandler : EventSoundsUGUIHandler, IMoveHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x16866F8", Offset = "0x16866F8", VA = "0x16866F8", Slot = "4")]
		public void OnMove(AxisEventData data)
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x16867A0", Offset = "0x16867A0", VA = "0x16867A0")]
		public EventSoundsMoveHandler()
		{
		}
	}
	[Token(Token = "0x2000183")]
	public class EventSoundsInitializePotentialDragHandler : EventSoundsUGUIHandler, IInitializePotentialDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x1686648", Offset = "0x1686648", VA = "0x1686648", Slot = "4")]
		public void OnInitializePotentialDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x16866F0", Offset = "0x16866F0", VA = "0x16866F0")]
		public EventSoundsInitializePotentialDragHandler()
		{
		}
	}
	[Token(Token = "0x2000184")]
	public class EventSoundsBeginDragHandler : EventSoundsUGUIHandler, IBeginDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x1686220", Offset = "0x1686220", VA = "0x1686220", Slot = "4")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x16862C8", Offset = "0x16862C8", VA = "0x16862C8")]
		public EventSoundsBeginDragHandler()
		{
		}
	}
	[Token(Token = "0x2000185")]
	public class EventSoundsEndDragHandler : EventSoundsUGUIHandler, IEndDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x1686598", Offset = "0x1686598", VA = "0x1686598", Slot = "4")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x1686640", Offset = "0x1686640", VA = "0x1686640")]
		public EventSoundsEndDragHandler()
		{
		}
	}
	[Token(Token = "0x2000186")]
	public class EventSoundsSubmitHandler : EventSoundsUGUIHandler, ISubmitHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x1686BC8", Offset = "0x1686BC8", VA = "0x1686BC8", Slot = "4")]
		public void OnSubmit(BaseEventData data)
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x1686C70", Offset = "0x1686C70", VA = "0x1686C70")]
		public EventSoundsSubmitHandler()
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class EventSoundsCancelHandler : EventSoundsUGUIHandler, ICancelHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x16862D8", Offset = "0x16862D8", VA = "0x16862D8", Slot = "4")]
		public void OnCancel(BaseEventData data)
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x1686380", Offset = "0x1686380", VA = "0x1686380")]
		public EventSoundsCancelHandler()
		{
		}
	}
	[Token(Token = "0x2000188")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12F3730", Offset = "0x12F3730")]
	public class FootstepSounds : MonoBehaviour
	{
		[Token(Token = "0x2000223")]
		public enum FootstepTriggerMode
		{
			[Token(Token = "0x4000E59")]
			None,
			[Token(Token = "0x4000E5A")]
			OnCollision,
			[Token(Token = "0x4000E5B")]
			OnTriggerEnter,
			[Token(Token = "0x4000E5C")]
			OnCollision2D,
			[Token(Token = "0x4000E5D")]
			OnTriggerEnter2D
		}

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.SoundSpawnLocationMode soundSpawnMode;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public FootstepTriggerMode footstepEvent;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<FootstepGroup> footstepGroups;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EventSounds.RetriggerLimMode retriggerLimitMode;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int limitPerXFrm;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float limitPerXSec;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int triggeredLastFrame;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float triggeredLastTime;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _trans;

		[Token(Token = "0x17000081")]
		private Transform Trans
		{
			[Token(Token = "0x6000AB7")]
			[Address(RVA = "0x168932C", Offset = "0x168932C", VA = "0x168932C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x1688E68", Offset = "0x1688E68", VA = "0x1688E68")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x16891AC", Offset = "0x16891AC", VA = "0x16891AC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x16891FC", Offset = "0x16891FC", VA = "0x16891FC")]
		private void OnCollisionEnter2D(Collision2D collision)
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x168924C", Offset = "0x168924C", VA = "0x168924C")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x168929C", Offset = "0x168929C", VA = "0x168929C")]
		private bool CheckForRetriggerLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x1688EB8", Offset = "0x1688EB8", VA = "0x1688EB8")]
		private void PlaySoundsIfMatch(GameObject go)
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x16893D0", Offset = "0x16893D0", VA = "0x16893D0")]
		public FootstepSounds()
		{
		}
	}
	[Token(Token = "0x2000189")]
	public class MechanimStateCustomEvents : StateMachineBehaviour
	{
		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4820", Offset = "0x12F4820")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F4820", Offset = "0x12F4820")]
		public bool RetriggerWhenStateLoops;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4880", Offset = "0x12F4880")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F4880", Offset = "0x12F4880")]
		public bool fireEnterEvent;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[MasterCustomEvent]
		public string enterCustomEvent;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F48F0", Offset = "0x12F48F0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F48F0", Offset = "0x12F48F0")]
		public bool fireExitEvent;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[MasterCustomEvent]
		public string exitCustomEvent;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4960", Offset = "0x12F4960")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F4960", Offset = "0x12F4960")]
		public bool fireAnimTimeEvent;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F49C0", Offset = "0x12F49C0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F49C0", Offset = "0x12F49C0")]
		public float whenToFireEvent;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[MasterCustomEvent]
		public string timedCustomEvent;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4A24", Offset = "0x12F4A24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F4A24", Offset = "0x12F4A24")]
		public bool fireMultiAnimTimeEvent;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4A84", Offset = "0x12F4A84")]
		public int numOfMultiEventsToFire;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4A9C", Offset = "0x12F4A9C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4A9C", Offset = "0x12F4A9C")]
		public float whenToFireMultiEvent1;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4AF0", Offset = "0x12F4AF0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4AF0", Offset = "0x12F4AF0")]
		public float whenToFireMultiEvent2;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4B44", Offset = "0x12F4B44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4B44", Offset = "0x12F4B44")]
		public float whenToFireMultiEvent3;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4B98", Offset = "0x12F4B98")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4B98", Offset = "0x12F4B98")]
		public float whenToFireMultiEvent4;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[MasterCustomEvent]
		public string MultiTimedEvent;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _playMultiEvent1;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool _playMultiEvent2;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool _playMultiEvent3;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		private bool _playMultiEvent4;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _fireTimedEvent;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _actorTrans;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _lastRepetition;

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x2341A2C", Offset = "0x2341A2C", VA = "0x2341A2C", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x2341BC0", Offset = "0x2341BC0", VA = "0x2341BC0", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x2341EEC", Offset = "0x2341EEC", VA = "0x2341EEC", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x2341B14", Offset = "0x2341B14", VA = "0x2341B14")]
		private Transform ActorTrans(Animator anim)
		{
			return null;
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x2341FC4", Offset = "0x2341FC4", VA = "0x2341FC4")]
		public MechanimStateCustomEvents()
		{
		}
	}
	[Token(Token = "0x200018A")]
	public class MechanimStateSounds : StateMachineBehaviour
	{
		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F4BFC", Offset = "0x12F4BFC")]
		public bool SoundFollowsObject;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4C34", Offset = "0x12F4C34")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F4C34", Offset = "0x12F4C34")]
		public bool RetriggerWhenStateLoops;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4C94", Offset = "0x12F4C94")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F4C94", Offset = "0x12F4C94")]
		public bool playEnterSound;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool stopEnterSoundOnExit;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SoundGroup]
		public string enterSoundGroup;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4D04", Offset = "0x12F4D04")]
		public string enterVariationName;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool wasEnterSoundPlayed;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4D3C", Offset = "0x12F4D3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F4D3C", Offset = "0x12F4D3C")]
		public bool playExitSound;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SoundGroup]
		public string exitSoundGroup;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4DAC", Offset = "0x12F4DAC")]
		public string exitVariationName;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4DE4", Offset = "0x12F4DE4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F4DE4", Offset = "0x12F4DE4")]
		public bool playAnimTimeSound;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool stopAnimTimeSoundOnExit;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4E44", Offset = "0x12F4E44")]
		public bool useStopTime;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4E7C", Offset = "0x12F4E7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4E7C", Offset = "0x12F4E7C")]
		public float whenToStartSound;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4ED0", Offset = "0x12F4ED0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4ED0", Offset = "0x12F4ED0")]
		public float whenToStopSound;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SoundGroup]
		public string TimedSoundGroup;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4F34", Offset = "0x12F4F34")]
		public string timedVariationName;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool playSoundStart;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool playSoundStop;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4F6C", Offset = "0x12F4F6C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12F4F6C", Offset = "0x12F4F6C")]
		public bool playMultiAnimTimeSounds;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool StopMultiAnimTimeSoundsOnExit;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4FCC", Offset = "0x12F4FCC")]
		public int numOfMultiSoundsToPlay;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F4FE4", Offset = "0x12F4FE4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F4FE4", Offset = "0x12F4FE4")]
		public float whenToStartMultiSound1;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F5038", Offset = "0x12F5038")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F5038", Offset = "0x12F5038")]
		public float whenToStartMultiSound2;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F508C", Offset = "0x12F508C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F508C", Offset = "0x12F508C")]
		public float whenToStartMultiSound3;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F50E0", Offset = "0x12F50E0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F50E0", Offset = "0x12F50E0")]
		public float whenToStartMultiSound4;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SoundGroup]
		public string MultiSoundsTimedGroup;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12F5144", Offset = "0x12F5144")]
		public string multiTimedVariationName;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool playMultiSound1;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool playMultiSound2;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		private bool playMultiSound3;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		private bool playMultiSound4;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform _actorTrans;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int _lastRepetition;

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x234206C", Offset = "0x234206C", VA = "0x234206C", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x23422FC", Offset = "0x23422FC", VA = "0x23422FC", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x2342AA0", Offset = "0x2342AA0", VA = "0x2342AA0", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x23421F8", Offset = "0x23421F8", VA = "0x23421F8")]
		private Transform ActorTrans(Animator anim)
		{
			return null;
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x23422A4", Offset = "0x23422A4", VA = "0x23422A4")]
		private static string GetVariationName(string varName)
		{
			return null;
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x2342CEC", Offset = "0x2342CEC", VA = "0x2342CEC")]
		public MechanimStateSounds()
		{
		}
	}
	[Token(Token = "0x200018B")]
	[SerializeField]
	public class PlaySoundResult
	{
		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F517C", Offset = "0x12F517C")]
		private bool <SoundPlayed>k__BackingField;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F518C", Offset = "0x12F518C")]
		private bool <SoundScheduled>k__BackingField;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F519C", Offset = "0x12F519C")]
		private SoundGroupVariation <ActingVariation>k__BackingField;

		[Token(Token = "0x17000082")]
		public bool SoundPlayed
		{
			[Token(Token = "0x6000AC5")]
			[Address(RVA = "0x2344758", Offset = "0x2344758", VA = "0x2344758")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5D98", Offset = "0x12F5D98")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AC6")]
			[Address(RVA = "0x2344760", Offset = "0x2344760", VA = "0x2344760")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5DA8", Offset = "0x12F5DA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000083")]
		public bool SoundScheduled
		{
			[Token(Token = "0x6000AC7")]
			[Address(RVA = "0x234476C", Offset = "0x234476C", VA = "0x234476C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5DB8", Offset = "0x12F5DB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AC8")]
			[Address(RVA = "0x2344774", Offset = "0x2344774", VA = "0x2344774")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5DC8", Offset = "0x12F5DC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public SoundGroupVariation ActingVariation
		{
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0x2344780", Offset = "0x2344780", VA = "0x2344780")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5DD8", Offset = "0x12F5DD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0x2344788", Offset = "0x2344788", VA = "0x2344788")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5DE8", Offset = "0x12F5DE8")]
			set
			{
			}
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x2344724", Offset = "0x2344724", VA = "0x2344724")]
		public PlaySoundResult()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200018C")]
	public class AudioEvent
	{
		[Token(Token = "0x2000224")]
		public enum TargetVolumeMode
		{
			[Token(Token = "0x4000E5F")]
			UseSliderValue,
			[Token(Token = "0x4000E60")]
			UseSpecificValue
		}

		[Serializable]
		[Token(Token = "0x2000225")]
		public class MA_SnapshotInfo
		{
			[Token(Token = "0x4000E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioMixerSnapshot snapshot;

			[Token(Token = "0x4000E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float weight;

			[Token(Token = "0x6000E89")]
			[Address(RVA = "0x166B760", Offset = "0x166B760", VA = "0x166B760")]
			public MA_SnapshotInfo(AudioMixerSnapshot snap, float wt)
			{
			}
		}

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string actionName;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isExpanded;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string soundType;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool allPlaylistControllersForGroupCmd;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool allSoundTypesForGroupCmd;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool allSoundTypesForBusCmd;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float volume;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useFixedPitch;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pitch;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EventSounds.GlidePitchType glidePitchType;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float targetGlidePitch;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pitchGlideTime;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float delaySound;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MasterAudio.EventSoundFunctionType currentSoundFunctionType;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public MasterAudio.PlaylistCommand currentPlaylistCommand;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MasterAudio.SoundGroupCommand currentSoundGroupCommand;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public MasterAudio.BusCommand currentBusCommand;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MasterAudio.CustomEventCommand currentCustomEventCommand;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public MasterAudio.GlobalCommand currentGlobalCommand;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MasterAudio.UnityMixerCommand currentMixerCommand;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioMixerSnapshot snapshotToTransitionTo;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float snapshotTransitionTime;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<MA_SnapshotInfo> snapshotsToBlend;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MasterAudio.PersistentSettingsCommand currentPersistentSettingsCommand;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string busName;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string playlistName;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string playlistControllerName;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool startPlaylist;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float fadeVolume;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float fadeTime;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float minAge;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool stopAfterFade;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool restoreVolumeAfterFade;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public TargetVolumeMode targetVolMode;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string clipName;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public string variationName;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float colliderMaxDistance;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool showSphereGizmo;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string theCustomEventName;

		[Token(Token = "0x17000085")]
		public bool IsFadeCommand
		{
			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0x166B524", Offset = "0x166B524", VA = "0x166B524")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x166B58C", Offset = "0x166B58C", VA = "0x166B58C")]
		public AudioEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200018D")]
	public class AudioEventGroup
	{
		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isExpanded;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool allPlayersShouldHear;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool useLayerFilter;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool useTagFilter;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> matchingLayers;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> matchingTags;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool customSoundActive;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool isCustomEvent;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string customEventName;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool mechanimEventActive;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isMechanimStateCheckEvent;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mechanimStateName;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool mechEventPlayedForState;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<AudioEvent> SoundEvents;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public EventSounds.PreviousSoundStopMode mouseDragStopMode;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float mouseDragFadeOutTime;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EventSounds.RetriggerLimMode retriggerLimitMode;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int limitPerXFrm;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float limitPerXSec;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int triggeredLastFrame;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float triggeredLastTime;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float triggerStayForTime;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool doesTriggerStayRepeat;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float sliderValue;

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x166B7A8", Offset = "0x166B7A8", VA = "0x166B7A8")]
		public AudioEventGroup()
		{
		}
	}
	[Token(Token = "0x200018E")]
	public class AudioScriptOrder : Attribute
	{
		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Order;

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x166F6BC", Offset = "0x166F6BC", VA = "0x166F6BC")]
		public AudioScriptOrder(int order)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200018F")]
	public class BusFadeInfo
	{
		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NameOfBus;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GroupBus ActingBus;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartVolume;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TargetVolume;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float StartTime;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CompletionTime;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsActive;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool WillStopGroupAfterFade;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool WillResetVolumeAfterFade;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action completionAction;

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x16722AC", Offset = "0x16722AC", VA = "0x16722AC")]
		public BusFadeInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000190")]
	public class BusPitchGlideInfo
	{
		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NameOfBus;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float CompletionTime;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool IsActive;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SoundGroupVariation> GlidingVariations;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action completionAction;

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x16722BC", Offset = "0x16722BC", VA = "0x16722BC")]
		public BusPitchGlideInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000191")]
	public class CustomEvent
	{
		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string EventName;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string ProspectiveName;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool IsEditing;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool eventExpanded;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MasterAudio.CustomEventReceiveMode eventReceiveMode;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float distanceThreshold;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public MasterAudio.EventReceiveFilter eventRcvFilterMode;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int filterModeQty;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool isTemporary;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int frameLastFired;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string categoryName;

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x1672FB4", Offset = "0x1672FB4", VA = "0x1672FB4")]
		public CustomEvent(string eventName)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000192")]
	public class CustomEventCategory
	{
		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string CatName;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsExpanded;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool IsEditing;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool IsTemporary;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ProspectiveName;

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x167305C", Offset = "0x167305C", VA = "0x167305C")]
		public CustomEventCategory()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000193")]
	public class CustomEventToFireInfo
	{
		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string eventName;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform eventOrigin;

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x16730D4", Offset = "0x16730D4", VA = "0x16730D4")]
		public CustomEventToFireInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000194")]
	public class DuckGroupInfo
	{
		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string soundType;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float riseVolStart;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float unduckTime;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duckedVolumeCut;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isTemporary;

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x16735B4", Offset = "0x16735B4", VA = "0x16735B4")]
		public DuckGroupInfo()
		{
		}
	}
	[Token(Token = "0x2000195")]
	public class DynamicGroupVariation : MonoBehaviour
	{
		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F51AC", Offset = "0x12F51AC")]
		public int probabilityToPlay;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool useLocalization;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool useRandomPitch;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoundGroupVariation.RandomPitchMode randomPitchMode;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float randomPitchMin;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float randomPitchMax;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool useRandomVolume;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SoundGroupVariation.RandomVolumeMode randomVolumeMode;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float randomVolumeMin;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float randomVolumeMax;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int weight;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string resourceFileName;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string internetFileUrl;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool isExpanded;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool isChecked;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool useFades;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float fadeInTime;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float fadeOutTime;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool useCustomLooping;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int minCustomLoops;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int maxCustomLoops;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool useIntroSilence;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float introSilenceMin;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float introSilenceMax;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool useRandomStartTime;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float randomStartMinPercent;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float randomStartMaxPercent;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float randomEndPercent;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AudioDistortionFilter _distFilter;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AudioEchoFilter _echoFilter;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioHighPassFilter _hpFilter;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AudioLowPassFilter _lpFilter;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AudioReverbFilter _reverbFilter;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AudioChorusFilter _chorusFilter;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private DynamicSoundGroup _parentGroupScript;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Transform _trans;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AudioSource _aud;

		[Token(Token = "0x17000086")]
		public AudioDistortionFilter DistortionFilter
		{
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0x1673628", Offset = "0x1673628", VA = "0x1673628")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		public AudioReverbFilter ReverbFilter
		{
			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0x16736D4", Offset = "0x16736D4", VA = "0x16736D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		public AudioChorusFilter ChorusFilter
		{
			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0x1673780", Offset = "0x1673780", VA = "0x1673780")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		public AudioEchoFilter EchoFilter
		{
			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0x167382C", Offset = "0x167382C", VA = "0x167382C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		public AudioLowPassFilter LowPassFilter
		{
			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0x16738D8", Offset = "0x16738D8", VA = "0x16738D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008B")]
		public AudioHighPassFilter HighPassFilter
		{
			[Token(Token = "0x6000ADA")]
			[Address(RVA = "0x1673984", Offset = "0x1673984", VA = "0x1673984")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008C")]
		public DynamicSoundGroup ParentGroup
		{
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0x1673A30", Offset = "0x1673A30", VA = "0x1673A30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008D")]
		public Transform Trans
		{
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0x1673B8C", Offset = "0x1673B8C", VA = "0x1673B8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		public bool HasActiveFXFilter
		{
			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0x1673C30", Offset = "0x1673C30", VA = "0x1673C30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008F")]
		public AudioSource VarAudio
		{
			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0x1673E88", Offset = "0x1673E88", VA = "0x1673E88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x1673F34", Offset = "0x1673F34", VA = "0x1673F34")]
		public DynamicGroupVariation()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class DynamicSoundGroup : MonoBehaviour
	{
		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject variationTemplate;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool alwaysHighestPriority;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float groupMasterVolume;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int retriggerPercentage;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public MasterAudioGroup.VariationSequence curVariationSequence;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useNoRepeatRefill;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool useInactivePeriodPoolRefill;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float inactivePeriodSeconds;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MasterAudioGroup.VariationMode curVariationMode;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float chainLoopDelayMin;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float chainLoopDelayMax;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MasterAudioGroup.ChainedLoopLoopMode chainLoopMode;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int chainLoopNumLoops;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useDialogFadeOut;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float dialogFadeOutTime;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool resourceClipsAllLoadAsync;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string comments;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool logSound;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool soundPlayedEventActive;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string soundPlayedCustomEvent;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int busIndex;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float spatialBlend;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string busName;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool isExistingBus;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool isCopiedFromDGSC;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public MasterAudioGroup.LimitMode limitMode;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int limitPerXFrames;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float minimumTimeBetween;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool limitPolyphony;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int voiceLimitCount;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public MasterAudioGroup.TargetDespawnedBehavior targetDespawnedBehavior;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float despawnFadeTime;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool isUsingOcclusion;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool willOcclusionOverrideRaycastOffset;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool willOcclusionOverrideFrequencies;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool copySettingsExpanded;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		public bool expandLinkedGroups;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<string> childSoundGroups;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public List<string> endLinkedGroups;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public MasterAudio.LinkedGroupSelectionType linkedStartGroupSelectionType;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public MasterAudio.LinkedGroupSelectionType linkedStopGroupSelectionType;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public List<DynamicGroupVariation> groupVariations;

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x1673F6C", Offset = "0x1673F6C", VA = "0x1673F6C")]
		public DynamicSoundGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000197")]
	public class FootstepGroup
	{
		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isExpanded;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool useLayerFilter;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool useTagFilter;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> matchingLayers;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> matchingTags;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string soundType;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string variationName;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float volume;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useFixedPitch;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float pitch;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float delaySound;

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x1688D20", Offset = "0x1688D20", VA = "0x1688D20")]
		public FootstepGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000198")]
	public class GroupBus
	{
		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string busName;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float volume;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isSoloed;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool isMuted;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int voiceLimit;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool stopOldest;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isExisting;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool isTemporary;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool isUsingOcclusion;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color busColor;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioMixerGroup mixerChannel;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool forceTo2D;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<int> _activeAudioSourcesIds;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _originalVolume;

		[Token(Token = "0x17000090")]
		public int ActiveVoices
		{
			[Token(Token = "0x6000AE4")]
			[Address(RVA = "0x1689564", Offset = "0x1689564", VA = "0x1689564")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000091")]
		public bool BusVoiceLimitReached
		{
			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0x16895B4", Offset = "0x16895B4", VA = "0x16895B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000092")]
		public float OriginalVolume
		{
			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0x1689620", Offset = "0x1689620", VA = "0x1689620")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0x1689628", Offset = "0x1689628", VA = "0x1689628")]
			set
			{
			}
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x1689464", Offset = "0x1689464", VA = "0x1689464")]
		public void AddActiveAudioSourceId(int id)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x16894FC", Offset = "0x16894FC", VA = "0x16894FC")]
		public void RemoveActiveAudioSourceId(int id)
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x1689630", Offset = "0x1689630", VA = "0x1689630")]
		public GroupBus()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000199")]
	public class GroupFadeInfo
	{
		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MasterAudioGroup ActingGroup;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string NameOfGroup;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartVolume;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TargetVolume;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float StartTime;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CompletionTime;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsActive;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool WillStopGroupAfterFade;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool WillResetVolumeAfterFade;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action completionAction;

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x16896DC", Offset = "0x16896DC", VA = "0x16896DC")]
		public GroupFadeInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200019A")]
	public class GroupPitchGlideInfo
	{
		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MasterAudioGroup ActingGroup;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string NameOfGroup;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CompletionTime;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool IsActive;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<SoundGroupVariation> GlidingVariations;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action completionAction;

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x16896EC", Offset = "0x16896EC", VA = "0x16896EC")]
		public GroupPitchGlideInfo()
		{
		}
	}
	[Token(Token = "0x200019B")]
	public interface ICustomEventReceiver
	{
		[Token(Token = "0x6000AEB")]
		void CheckForIllegalCustomEvents();

		[Token(Token = "0x6000AEC")]
		void ReceiveEvent(string customEventName, Vector3 originPoint);

		[Token(Token = "0x6000AED")]
		bool SubscribesToEvent(string customEventName);

		[Token(Token = "0x6000AEE")]
		void RegisterReceiver();

		[Token(Token = "0x6000AEF")]
		void UnregisterReceiver();

		[Token(Token = "0x6000AF0")]
		IList<AudioEventGroup> GetAllEvents();
	}
	[Token(Token = "0x200019C")]
	public class MasterAudioGroup : MonoBehaviour
	{
		[Token(Token = "0x2000226")]
		public enum TargetDespawnedBehavior
		{
			[Token(Token = "0x4000E64")]
			None,
			[Token(Token = "0x4000E65")]
			Stop,
			[Token(Token = "0x4000E66")]
			FadeOut
		}

		[Token(Token = "0x2000227")]
		public enum VariationSequence
		{
			[Token(Token = "0x4000E68")]
			Randomized,
			[Token(Token = "0x4000E69")]
			TopToBottom
		}

		[Token(Token = "0x2000228")]
		public enum VariationMode
		{
			[Token(Token = "0x4000E6B")]
			Normal,
			[Token(Token = "0x4000E6C")]
			LoopedChain,
			[Token(Token = "0x4000E6D")]
			Dialog
		}

		[Token(Token = "0x2000229")]
		public enum ChainedLoopLoopMode
		{
			[Token(Token = "0x4000E6F")]
			Endless,
			[Token(Token = "0x4000E70")]
			NumberOfLoops
		}

		[Token(Token = "0x200022A")]
		public enum LimitMode
		{
			[Token(Token = "0x4000E72")]
			None,
			[Token(Token = "0x4000E73")]
			FrameBased,
			[Token(Token = "0x4000E74")]
			TimeBased
		}

		[Token(Token = "0x4000A62")]
		public const float UseCurveSpatialBlend = -99f;

		[Token(Token = "0x4000A63")]
		public const string NoBus = "[NO BUS]";

		[Token(Token = "0x4000A64")]
		public const int MinNoRepeatVariations = 3;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int busIndex;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spatialBlend;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isSelected;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isExpanded;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float groupMasterVolume;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int retriggerPercentage;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VariationMode curVariationMode;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool alwaysHighestPriority;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float chainLoopDelayMin;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float chainLoopDelayMax;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChainedLoopLoopMode chainLoopMode;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int chainLoopNumLoops;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool useDialogFadeOut;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float dialogFadeOutTime;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VariationSequence curVariationSequence;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool useNoRepeatRefill;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool useInactivePeriodPoolRefill;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float inactivePeriodSeconds;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SoundGroupVariation> groupVariations;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool resourceClipsAllLoadAsync;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string comments;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool logSound;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool copySettingsExpanded;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		public bool expandLinkedGroups;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<string> childSoundGroups;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<string> endLinkedGroups;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MasterAudio.LinkedGroupSelectionType linkedStartGroupSelectionType;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public MasterAudio.LinkedGroupSelectionType linkedStopGroupSelectionType;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public LimitMode limitMode;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int limitPerXFrames;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float minimumTimeBetween;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool useClipAgePriority;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		public bool limitPolyphony;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int voiceLimitCount;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public TargetDespawnedBehavior targetDespawnedBehavior;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float despawnFadeTime;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool isUsingOcclusion;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		public bool willOcclusionOverrideRaycastOffset;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool willOcclusionOverrideFrequencies;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool isSoloed;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool isMuted;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		public bool soundPlayedEventActive;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public string soundPlayedCustomEvent;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool willCleanUpDelegatesAfterStop;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public int frames;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private List<int> _activeAudioSourcesIds;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private string _objectName;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform _trans;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float _originalVolume;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F51D4", Offset = "0x12F51D4")]
		private int <ChainLoopCount>k__BackingField;

		[Token(Token = "0x17000093")]
		public MasterAudio.InternetFileLoadStatus GroupLoadStatus
		{
			[Token(Token = "0x6000AF3")]
			[Address(RVA = "0x2340ED4", Offset = "0x2340ED4", VA = "0x2340ED4")]
			get
			{
				return default(MasterAudio.InternetFileLoadStatus);
			}
		}

		[Token(Token = "0x17000094")]
		public float SpatialBlendForGroup
		{
			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0x2341564", Offset = "0x2341564", VA = "0x2341564")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000095")]
		public int ActiveVoices
		{
			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0x2341654", Offset = "0x2341654", VA = "0x2341654")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000096")]
		public int TotalVoices
		{
			[Token(Token = "0x6000AFA")]
			[Address(RVA = "0x23416A8", Offset = "0x23416A8", VA = "0x23416A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000097")]
		public bool WillCleanUpDelegatesAfterStop
		{
			[Token(Token = "0x6000AFB")]
			[Address(RVA = "0x23416CC", Offset = "0x23416CC", VA = "0x23416CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000098")]
		public GroupBus BusForGroup
		{
			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0x23413F8", Offset = "0x23413F8", VA = "0x23413F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		public float OriginalVolume
		{
			[Token(Token = "0x6000AFD")]
			[Address(RVA = "0x23416D8", Offset = "0x23416D8", VA = "0x23416D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0x23416E0", Offset = "0x23416E0", VA = "0x23416E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700009A")]
		public bool LoggingEnabledForGroup
		{
			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0x23416E8", Offset = "0x23416E8", VA = "0x23416E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009B")]
		public int ChainLoopCount
		{
			[Token(Token = "0x6000B03")]
			[Address(RVA = "0x23417B8", Offset = "0x23417B8", VA = "0x23417B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5E18", Offset = "0x12F5E18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B04")]
			[Address(RVA = "0x23417C0", Offset = "0x23417C0", VA = "0x23417C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5E28", Offset = "0x12F5E28")]
			set
			{
			}
		}

		[Token(Token = "0x1700009C")]
		public string GameObjectName
		{
			[Token(Token = "0x6000B05")]
			[Address(RVA = "0x23417C8", Offset = "0x23417C8", VA = "0x23417C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009D")]
		public bool UsesNoRepeat
		{
			[Token(Token = "0x6000B06")]
			[Address(RVA = "0x2341818", Offset = "0x2341818", VA = "0x2341818")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009E")]
		private Transform Trans
		{
			[Token(Token = "0x6000B07")]
			[Address(RVA = "0x2340FAC", Offset = "0x2340FAC", VA = "0x2340FAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		private List<int> ActiveAudioSourceIds
		{
			[Token(Token = "0x6000B08")]
			[Address(RVA = "0x2341164", Offset = "0x2341164", VA = "0x2341164")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000001")]
		public event Action LastVariationFinishedPlay
		{
			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0x2340D8C", Offset = "0x2340D8C", VA = "0x2340D8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5DF8", Offset = "0x12F5DF8")]
			add
			{
			}
			[Token(Token = "0x6000AF2")]
			[Address(RVA = "0x2340E30", Offset = "0x2340E30", VA = "0x2340E30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5E08", Offset = "0x12F5E08")]
			remove
			{
			}
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x2341050", Offset = "0x2341050", VA = "0x2341050")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x2341214", Offset = "0x2341214", VA = "0x2341214")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x2341340", Offset = "0x2341340", VA = "0x2341340")]
		public void AddActiveAudioSourceId(int varInstanceId)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x23414D0", Offset = "0x23414D0", VA = "0x23414D0")]
		public void RemoveActiveAudioSourceId(int varInstanceId)
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x2341764", Offset = "0x2341764", VA = "0x2341764")]
		public void FireLastVariationFinishedPlay()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x2341778", Offset = "0x2341778", VA = "0x2341778")]
		public void SubscribeToLastVariationFinishedPlay(Action finishedCallback)
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x23417AC", Offset = "0x23417AC", VA = "0x23417AC")]
		public void UnsubscribeFromLastVariationFinishedPlay()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x234188C", Offset = "0x234188C", VA = "0x234188C")]
		public MasterAudioGroup()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public class MasterCustomEventAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x2341A24", Offset = "0x2341A24", VA = "0x2341A24")]
		public MasterCustomEventAttribute()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200019E")]
	public class MusicSetting
	{
		[Token(Token = "0x200022B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3AB4", Offset = "0x12F3AB4")]
		private sealed class <>c__DisplayClass32_0
		{
			[Token(Token = "0x4000E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataStringValue valToClone;

			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0x23435E0", Offset = "0x23435E0", VA = "0x23435E0")]
			public <>c__DisplayClass32_0()
			{
			}

			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0x2343710", Offset = "0x2343710", VA = "0x2343710")]
			internal bool <Clone>b__0(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200022C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3AC4", Offset = "0x12F3AC4")]
		private sealed class <>c__DisplayClass32_1
		{
			[Token(Token = "0x4000E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataFloatValue valToClone;

			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0x234362C", Offset = "0x234362C", VA = "0x234362C")]
			public <>c__DisplayClass32_1()
			{
			}

			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0x234373C", Offset = "0x234373C", VA = "0x234373C")]
			internal bool <Clone>b__1(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200022D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3AD4", Offset = "0x12F3AD4")]
		private sealed class <>c__DisplayClass32_2
		{
			[Token(Token = "0x4000E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataBoolValue valToClone;

			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0x2343678", Offset = "0x2343678", VA = "0x2343678")]
			public <>c__DisplayClass32_2()
			{
			}

			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0x2343768", Offset = "0x2343768", VA = "0x2343768")]
			internal bool <Clone>b__2(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200022E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3AE4", Offset = "0x12F3AE4")]
		private sealed class <>c__DisplayClass32_3
		{
			[Token(Token = "0x4000E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataIntValue valToClone;

			[Token(Token = "0x6000E90")]
			[Address(RVA = "0x23436C4", Offset = "0x23436C4", VA = "0x23436C4")]
			public <>c__DisplayClass32_3()
			{
			}

			[Token(Token = "0x6000E91")]
			[Address(RVA = "0x2343794", Offset = "0x2343794", VA = "0x2343794")]
			internal bool <Clone>b__3(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string alias;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip clip;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string songName;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string resourceFileName;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float volume;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float pitch;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isExpanded;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool isLoop;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool isChecked;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<SongMetadataStringValue> metadataStringValues;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<SongMetadataBoolValue> metadataBoolValues;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<SongMetadataIntValue> metadataIntValues;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SongMetadataFloatValue> metadataFloatValues;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool metadataExpanded;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public MasterAudio.CustomSongStartTimeMode songStartTimeMode;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float customStartTime;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float customStartTimeMax;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int lastKnownTimePoint;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool wasLastKnownTimePointSet;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int songIndex;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool songStartedEventExpanded;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string songStartedCustomEvent;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool songChangedEventExpanded;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string songChangedCustomEvent;

		[Token(Token = "0x170000A0")]
		public bool HasMetadataProperties
		{
			[Token(Token = "0x6000B0C")]
			[Address(RVA = "0x2342F54", Offset = "0x2342F54", VA = "0x2342F54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A1")]
		public int MetadataPropertyCount
		{
			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0x2342F70", Offset = "0x2342F70", VA = "0x2342F70")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A2")]
		public float SongStartTime
		{
			[Token(Token = "0x6000B0E")]
			[Address(RVA = "0x2342FF0", Offset = "0x2342FF0", VA = "0x2342FF0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x2342D94", Offset = "0x2342D94", VA = "0x2342D94")]
		public MusicSetting()
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x234301C", Offset = "0x234301C", VA = "0x234301C")]
		public static MusicSetting Clone(MusicSetting mus, MasterAudio.Playlist aList)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200019F")]
	public class OcclusionFreqChangeInfo
	{
		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SoundGroupVariation ActingVariation;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float StartFrequency;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float TargetFrequency;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartTime;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float CompletionTime;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsActive;

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x23437C0", Offset = "0x23437C0", VA = "0x23437C0")]
		public OcclusionFreqChangeInfo()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class PlaylistAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x2344790", Offset = "0x2344790", VA = "0x2344790")]
		public PlaylistAttribute()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A1")]
	public class SongMetadataBoolValue
	{
		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Value;

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x2343680", Offset = "0x2343680", VA = "0x2343680")]
		public SongMetadataBoolValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A2")]
	public class SongMetadataFloatValue
	{
		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Value;

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x2343634", Offset = "0x2343634", VA = "0x2343634")]
		public SongMetadataFloatValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A3")]
	public class SongMetadataIntValue
	{
		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Value;

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x23436CC", Offset = "0x23436CC", VA = "0x23436CC")]
		public SongMetadataIntValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A4")]
	public class SongMetadataProperty
	{
		[Token(Token = "0x200022F")]
		public enum MetadataPropertyType
		{
			[Token(Token = "0x4000E7A")]
			Boolean,
			[Token(Token = "0x4000E7B")]
			String,
			[Token(Token = "0x4000E7C")]
			Integer,
			[Token(Token = "0x4000E7D")]
			Float
		}

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MetadataPropertyType PropertyType;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string PropertyName;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ProspectiveName;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsEditing;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool PropertyExpanded;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool AllSongsMustContain;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool CanSongHaveMultiple;

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x234C7E8", Offset = "0x234C7E8", VA = "0x234C7E8")]
		public SongMetadataProperty(string propertyName, MetadataPropertyType propertyType, bool allSongsMustContain, bool canSongHaveMultiple)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A5")]
	public class SongMetadataStringValue
	{
		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Value;

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x23435E8", Offset = "0x23435E8", VA = "0x23435E8")]
		public SongMetadataStringValue(SongMetadataProperty prop)
		{
		}
	}
	[Token(Token = "0x20001A6")]
	public class SoundGroupAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x234C868", Offset = "0x234C868", VA = "0x234C868")]
		public SoundGroupAttribute()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x12F3778", Offset = "0x12F3778")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F3778", Offset = "0x12F3778")]
	public class SoundGroupVariation : MonoBehaviour
	{
		[Token(Token = "0x2000230")]
		public delegate void SoundFinishedEventHandler();

		[Token(Token = "0x2000231")]
		public delegate void SoundLoopedEventHandler(int loopNumberStarted);

		[Token(Token = "0x2000232")]
		public class PlaySoundParams
		{
			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string SoundType;

			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float VolumePercentage;

			[Token(Token = "0x4000E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float? Pitch;

			[Token(Token = "0x4000E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public double? TimeToSchedulePlay;

			[Token(Token = "0x4000E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform SourceTrans;

			[Token(Token = "0x4000E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool AttachToSource;

			[Token(Token = "0x4000E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float DelaySoundTime;

			[Token(Token = "0x4000E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public bool IsChainLoop;

			[Token(Token = "0x4000E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
			public bool IsSingleSubscribedPlay;

			[Token(Token = "0x4000E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float GroupCalcVolume;

			[Token(Token = "0x4000E88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool IsPlaying;

			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0x2351C6C", Offset = "0x2351C6C", VA = "0x2351C6C")]
			public PlaySoundParams(string soundType, float volPercent, float groupCalcVolume, float? pitch, Transform sourceTrans, bool attach, float delaySoundTime, double? timeToSchedulePlay, bool isChainLoop, bool isSingleSubscribedPlay)
			{
			}
		}

		[Token(Token = "0x2000233")]
		public enum PitchMode
		{
			[Token(Token = "0x4000E8A")]
			None,
			[Token(Token = "0x4000E8B")]
			Gliding
		}

		[Token(Token = "0x2000234")]
		public enum FadeMode
		{
			[Token(Token = "0x4000E8D")]
			None,
			[Token(Token = "0x4000E8E")]
			FadeInOut,
			[Token(Token = "0x4000E8F")]
			FadeOutEarly,
			[Token(Token = "0x4000E90")]
			GradualFade
		}

		[Token(Token = "0x2000235")]
		public enum RandomPitchMode
		{
			[Token(Token = "0x4000E92")]
			AddToClipPitch,
			[Token(Token = "0x4000E93")]
			IgnoreClipPitch
		}

		[Token(Token = "0x2000236")]
		public enum RandomVolumeMode
		{
			[Token(Token = "0x4000E95")]
			AddToClipVolume,
			[Token(Token = "0x4000E96")]
			IgnoreClipVolume
		}

		[Token(Token = "0x2000237")]
		public enum DetectEndMode
		{
			[Token(Token = "0x4000E98")]
			None,
			[Token(Token = "0x4000E99")]
			DetectEnd
		}

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int weight;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12F51E4", Offset = "0x12F51E4")]
		public int probabilityToPlay;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useLocalization;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool useRandomPitch;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public RandomPitchMode randomPitchMode;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float randomPitchMin;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float randomPitchMax;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useRandomVolume;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public RandomVolumeMode randomVolumeMode;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float randomVolumeMin;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float randomVolumeMax;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string resourceFileName;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string internetFileUrl;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MasterAudio.InternetFileLoadStatus internetFileLoadStatus;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float original_pitch;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float original_volume;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool isExpanded;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool isChecked;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public bool useFades;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float fadeInTime;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float fadeOutTime;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool useCustomLooping;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int minCustomLoops;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int maxCustomLoops;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool useRandomStartTime;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float randomStartMinPercent;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float randomStartMaxPercent;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float randomEndPercent;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool useIntroSilence;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float introSilenceMin;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float introSilenceMax;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float fadeMaxVolume;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public FadeMode curFadeMode;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public PitchMode curPitchMode;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public DetectEndMode curDetectEndMode;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int frames;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AudioSource _audioSource;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly PlaySoundParams _playSndParam;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioDistortionFilter _distFilter;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private AudioEchoFilter _echoFilter;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AudioHighPassFilter _hpFilter;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioLowPassFilter _lpFilter;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioReverbFilter _reverbFilter;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private AudioChorusFilter _chorusFilter;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float _maxVol;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int _instanceId;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool? _audioLoops;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private int _maxLoops;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private SoundGroupVariationUpdater _varUpdater;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int _previousSoundFinishedFrame;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private string _soundGroupName;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool _isPaused;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Transform _trans;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private GameObject _go;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Transform _objectToFollow;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Transform _objectToTriggerFrom;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private MasterAudioGroup _parentGroupScript;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool _attachToSource;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private string _resFileName;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private bool _hasStartedEndLinkedGroups;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F521C", Offset = "0x12F521C")]
		private float <LastTimePlayed>k__BackingField;

		[Token(Token = "0x170000A3")]
		public AudioDistortionFilter DistortionFilter
		{
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0x2350FB8", Offset = "0x2350FB8", VA = "0x2350FB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		public AudioReverbFilter ReverbFilter
		{
			[Token(Token = "0x6000B3F")]
			[Address(RVA = "0x2351064", Offset = "0x2351064", VA = "0x2351064")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		public AudioChorusFilter ChorusFilter
		{
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0x2351110", Offset = "0x2351110", VA = "0x2351110")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		public AudioEchoFilter EchoFilter
		{
			[Token(Token = "0x6000B41")]
			[Address(RVA = "0x23511BC", Offset = "0x23511BC", VA = "0x23511BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		public AudioLowPassFilter LowPassFilter
		{
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0x2351268", Offset = "0x2351268", VA = "0x2351268")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B43")]
			[Address(RVA = "0x2351270", Offset = "0x2351270", VA = "0x2351270")]
			set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		public AudioHighPassFilter HighPassFilter
		{
			[Token(Token = "0x6000B44")]
			[Address(RVA = "0x2351278", Offset = "0x2351278", VA = "0x2351278")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		public Transform ObjectToFollow
		{
			[Token(Token = "0x6000B45")]
			[Address(RVA = "0x2351324", Offset = "0x2351324", VA = "0x2351324")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B46")]
			[Address(RVA = "0x235132C", Offset = "0x235132C", VA = "0x235132C")]
			set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		public Transform ObjectToTriggerFrom
		{
			[Token(Token = "0x6000B47")]
			[Address(RVA = "0x2351480", Offset = "0x2351480", VA = "0x2351480")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B48")]
			[Address(RVA = "0x2351488", Offset = "0x2351488", VA = "0x2351488")]
			set
			{
			}
		}

		[Token(Token = "0x170000AB")]
		public bool HasActiveFXFilter
		{
			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0x23514B8", Offset = "0x23514B8", VA = "0x23514B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AC")]
		public MasterAudioGroup ParentGroup
		{
			[Token(Token = "0x6000B4B")]
			[Address(RVA = "0x234D228", Offset = "0x234D228", VA = "0x234D228")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AD")]
		public float OriginalPitch
		{
			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0x234E774", Offset = "0x234E774", VA = "0x234E774")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000AE")]
		public float OriginalVolume
		{
			[Token(Token = "0x6000B4D")]
			[Address(RVA = "0x2351700", Offset = "0x2351700", VA = "0x2351700")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000AF")]
		public string SoundGroupName
		{
			[Token(Token = "0x6000B4E")]
			[Address(RVA = "0x2351740", Offset = "0x2351740", VA = "0x2351740")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B0")]
		public bool IsAvailableToPlay
		{
			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0x2351790", Offset = "0x2351790", VA = "0x2351790")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B1")]
		public float LastTimePlayed
		{
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0x235182C", Offset = "0x235182C", VA = "0x235182C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5E78", Offset = "0x12F5E78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0x2351834", Offset = "0x2351834", VA = "0x2351834")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5E88", Offset = "0x12F5E88")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0x234F754", Offset = "0x234F754", VA = "0x234F754")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B3")]
		public int InstanceId
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0x234EF5C", Offset = "0x234EF5C", VA = "0x234EF5C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B4")]
		public Transform Trans
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0x2350288", Offset = "0x2350288", VA = "0x2350288")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B5")]
		public GameObject GameObj
		{
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0x234CFE4", Offset = "0x234CFE4", VA = "0x234CFE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B6")]
		public AudioSource VarAudio
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0x234CF38", Offset = "0x234CF38", VA = "0x234CF38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B7")]
		public bool AudioLoops
		{
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0x234EEB4", Offset = "0x234EEB4", VA = "0x234EEB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B8")]
		public string ResFileName
		{
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0x234EAC8", Offset = "0x234EAC8", VA = "0x234EAC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B9")]
		public SoundGroupVariationUpdater VariationUpdater
		{
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0x234D958", Offset = "0x234D958", VA = "0x234D958")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		public PlaySoundParams PlaySoundParm
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0x235183C", Offset = "0x235183C", VA = "0x235183C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BB")]
		public float SetGroupVolume
		{
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0x2351844", Offset = "0x2351844", VA = "0x2351844")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0x2351860", Offset = "0x2351860", VA = "0x2351860")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public int MaxLoops
		{
			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0x235187C", Offset = "0x235187C", VA = "0x235187C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000BD")]
		private bool Is2D
		{
			[Token(Token = "0x6000B5E")]
			[Address(RVA = "0x2351884", Offset = "0x2351884", VA = "0x2351884")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BE")]
		private bool ShouldLoadAsync
		{
			[Token(Token = "0x6000B5F")]
			[Address(RVA = "0x234E6DC", Offset = "0x234E6DC", VA = "0x234E6DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BF")]
		public bool UsesOcclusion
		{
			[Token(Token = "0x6000B60")]
			[Address(RVA = "0x234DB20", Offset = "0x234DB20", VA = "0x234DB20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C0")]
		public bool IsPaused
		{
			[Token(Token = "0x6000B61")]
			[Address(RVA = "0x23518B0", Offset = "0x23518B0", VA = "0x23518B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000002")]
		public event SoundFinishedEventHandler SoundFinished
		{
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0x2340354", Offset = "0x2340354", VA = "0x2340354")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5E38", Offset = "0x12F5E38")]
			add
			{
			}
			[Token(Token = "0x6000B19")]
			[Address(RVA = "0x234CB80", Offset = "0x234CB80", VA = "0x234CB80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5E48", Offset = "0x12F5E48")]
			remove
			{
			}
		}

		[Token(Token = "0x14000003")]
		public event SoundLoopedEventHandler SoundLooped
		{
			[Token(Token = "0x6000B1A")]
			[Address(RVA = "0x234CC28", Offset = "0x234CC28", VA = "0x234CC28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5E58", Offset = "0x12F5E58")]
			add
			{
			}
			[Token(Token = "0x6000B1B")]
			[Address(RVA = "0x234CCD0", Offset = "0x234CCD0", VA = "0x234CCD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F5E68", Offset = "0x12F5E68")]
			remove
			{
			}
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x234CD78", Offset = "0x234CD78", VA = "0x234CD78")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x234D088", Offset = "0x234D088", VA = "0x234D088")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x234D4B4", Offset = "0x234D4B4", VA = "0x234D4B4")]
		public void SetMixerGroup()
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x234D508", Offset = "0x234D508", VA = "0x234D508")]
		public void SetSpatialBlend()
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x234D3D4", Offset = "0x234D3D4", VA = "0x234D3D4")]
		public void LoadInternetFile()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x234D6B8", Offset = "0x234D6B8", VA = "0x234D6B8")]
		private void SetOcclusion()
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x234D608", Offset = "0x234D608", VA = "0x234D608")]
		private void SetPriority()
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x234DC58", Offset = "0x234DC58", VA = "0x234DC58")]
		public void DisableUpdater()
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x234DD00", Offset = "0x234DD00", VA = "0x234DD00")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x234DDD4", Offset = "0x234DDD4", VA = "0x234DDD4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x234DD04", Offset = "0x234DD04", VA = "0x234DD04")]
		private void StopSoundEarly()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x234E0EC", Offset = "0x234E0EC", VA = "0x234E0EC")]
		public void Play(float? pitch, float maxVolume, string gameObjectName, float volPercent, float targetVol, float? targetPitch, Transform sourceTrans, bool attach, float delayTime, double? timeToSchedulePlay, bool isChaining, bool isSingleSubscribedPlay)
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x234E5A8", Offset = "0x234E5A8", VA = "0x234E5A8")]
		public void SetPlaySoundParams(string gameObjectName, float volPercent, float targetVol, float? targetPitch, Transform sourceTrans, bool attach, float delayTime, double? timeToSchedulePlay, bool isChaining, bool isSingleSubscribedPlay)
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x234EB74", Offset = "0x234EB74", VA = "0x234EB74")]
		private void InternetFileFailedToLoad()
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x234E550", Offset = "0x234E550", VA = "0x234E550")]
		private void MaybeCleanupFinishedDelegate()
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x234EBB8", Offset = "0x234EBB8", VA = "0x234EBB8")]
		private void InternetFileLoaded()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x234EC70", Offset = "0x234EC70", VA = "0x234EC70")]
		private void ResourceFailedToLoad()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x234E7B4", Offset = "0x234E7B4", VA = "0x234E7B4")]
		private void FinishSetupToPlay()
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x234F074", Offset = "0x234F074", VA = "0x234F074")]
		public void JumpToTime(float timeToJumpTo)
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x234F0C0", Offset = "0x234F0C0", VA = "0x234F0C0")]
		public void GlideByPitch(float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x234F3B0", Offset = "0x234F3B0", VA = "0x234F3B0")]
		public void AdjustVolume(float volumePercentage)
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x234F51C", Offset = "0x234F51C", VA = "0x234F51C")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x234F66C", Offset = "0x234F66C", VA = "0x234F66C")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x234F84C", Offset = "0x234F84C", VA = "0x234F84C")]
		public void DoNextChain(float volumePercentage, float? pitch, Transform transActor, bool attach)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x234FC48", Offset = "0x234FC48", VA = "0x234FC48")]
		public void PlayEndLinkedGroups([Optional] double? timeToPlayClip)
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x234EC7C", Offset = "0x234EC7C", VA = "0x234EC7C")]
		private void EnableUpdater(bool waitForSoundFinish = true)
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x23501DC", Offset = "0x23501DC", VA = "0x23501DC")]
		private void MaybeUnloadClip()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x234FEC8", Offset = "0x234FEC8", VA = "0x234FEC8")]
		private void PlayEndLinkedGroup(string sType, [Optional] double? timeToPlayClip)
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x234DDD8", Offset = "0x234DDD8", VA = "0x234DDD8")]
		public void Stop(bool stopEndDetection = false, bool skipLinked = false)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x2350600", Offset = "0x2350600", VA = "0x2350600")]
		public void FadeToVolume(float newVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x23509E8", Offset = "0x23509E8", VA = "0x23509E8")]
		public void FadeOutNow()
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x2350CB8", Offset = "0x2350CB8", VA = "0x2350CB8")]
		public void FadeOutNow(float fadeTime)
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x2350DF4", Offset = "0x2350DF4", VA = "0x2350DF4")]
		public bool WasTriggeredFromTransform(Transform trans)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x2350EB4", Offset = "0x2350EB4", VA = "0x2350EB4")]
		public bool WasTriggeredFromAnyOfTransformMap(HashSet<Transform> transMap)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x235135C", Offset = "0x235135C", VA = "0x235135C")]
		public void UpdateTransformTracker(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x23518B8", Offset = "0x23518B8", VA = "0x23518B8")]
		public void SoundLoopStarted(int numberOfLoops)
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x234EB80", Offset = "0x234EB80", VA = "0x234EB80")]
		public void ClearSubscribers()
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x2351B28", Offset = "0x2351B28", VA = "0x2351B28")]
		public SoundGroupVariation()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x12F37F0", Offset = "0x12F37F0")]
	public class SoundGroupVariationUpdater : MonoBehaviour
	{
		[Token(Token = "0x2000238")]
		private enum WaitForSoundFinishMode
		{
			[Token(Token = "0x4000E9B")]
			None,
			[Token(Token = "0x4000E9C")]
			Play,
			[Token(Token = "0x4000E9D")]
			WaitForEnd,
			[Token(Token = "0x4000E9E")]
			StopOrRepeat
		}

		[Token(Token = "0x4000B0B")]
		private const float TimeEarlyToScheduleNextClip = 0.1f;

		[Token(Token = "0x4000B0C")]
		private const float FakeNegativeFloatValue = -10f;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _objectToFollow;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject _objectToFollowGo;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _isFollowing;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SoundGroupVariation _variation;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _priorityLastUpdated;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool _useClipAgePriority;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private WaitForSoundFinishMode _waitMode;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioSource _varAudio;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MasterAudioGroup _parentGrp;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _trans;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _frameNum;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool _inited;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _fadeOutStartTime;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _fadeInOutWillFadeOut;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool _hasFadeInOutSetMaxVolume;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _fadeInOutInFactor;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _fadeInOutOutFactor;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _fadeOutEarlyTotalFrames;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float _fadeOutEarlyFrameVolChange;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _fadeOutEarlyFrameNumber;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float _fadeOutEarlyOrigVol;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float _fadeToTargetFrameVolChange;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int _fadeToTargetFrameNumber;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _fadeToTargetOrigVol;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int _fadeToTargetTotalFrames;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _fadeToTargetVolume;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool _fadeOutStarted;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastFrameClipTime;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isPlayingBackward;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _pitchGlideToTargetTotalFrames;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _pitchGlideToTargetFramePitchChange;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int _pitchGlideToTargetFrameNumber;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _glideToTargetPitch;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float _glideToTargetOrigPitch;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Action _glideToPitchCompletionCallback;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool _hasStartedNextInChain;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		private bool _isWaitingForQueuedOcclusionRay;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int _framesPlayed;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float? _clipStartPosition;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float? _clipEndPosition;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private double? _clipSchedEndTime;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool _hasScheduledNextClip;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		private bool _hasScheduledEndLinkedGroups;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int _lastFrameClipPosition;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private int _timesLooped;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool _isPaused;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private double _pauseTime;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _maCachedFromFrame;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MasterAudio _maThisFrame;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Transform _listenerThisFrame;

		[Token(Token = "0x170000C1")]
		public float ClipStartPosition
		{
			[Token(Token = "0x6000B82")]
			[Address(RVA = "0x235368C", Offset = "0x235368C", VA = "0x235368C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C2")]
		public float ClipEndPosition
		{
			[Token(Token = "0x6000B83")]
			[Address(RVA = "0x2351F78", Offset = "0x2351F78", VA = "0x2351F78")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C3")]
		public int FramesPlayed
		{
			[Token(Token = "0x6000B84")]
			[Address(RVA = "0x2354308", Offset = "0x2354308", VA = "0x2354308")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000C4")]
		public MasterAudio MAThisFrame
		{
			[Token(Token = "0x6000B85")]
			[Address(RVA = "0x2354310", Offset = "0x2354310", VA = "0x2354310")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		public float MaxOcclusionFreq
		{
			[Token(Token = "0x6000B86")]
			[Address(RVA = "0x2354378", Offset = "0x2354378", VA = "0x2354378")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C6")]
		public float MinOcclusionFreq
		{
			[Token(Token = "0x6000B87")]
			[Address(RVA = "0x2354430", Offset = "0x2354430", VA = "0x2354430")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C7")]
		private Transform Trans
		{
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0x23525CC", Offset = "0x23525CC", VA = "0x23525CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C8")]
		private AudioSource VarAudio
		{
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0x2351ECC", Offset = "0x2351ECC", VA = "0x2351ECC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C9")]
		private MasterAudioGroup ParentGroup
		{
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0x2352678", Offset = "0x2352678", VA = "0x2352678")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CA")]
		private SoundGroupVariation GrpVariation
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0x2351E20", Offset = "0x2351E20", VA = "0x2351E20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CB")]
		private float RayCastOriginOffset
		{
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0x23535D4", Offset = "0x23535D4", VA = "0x23535D4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000CC")]
		private bool IsOcclusionMeasuringPaused
		{
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0x2352920", Offset = "0x2352920", VA = "0x2352920")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CD")]
		private bool HasEndLinkedGroups
		{
			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0x235429C", Offset = "0x235429C", VA = "0x235429C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x234F2E8", Offset = "0x234F2E8", VA = "0x234F2E8")]
		public void GlidePitch(float targetPitch, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x235085C", Offset = "0x235085C", VA = "0x235085C")]
		public void FadeOverTimeToVolume(float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x2350B1C", Offset = "0x2350B1C", VA = "0x2350B1C")]
		public void FadeOutEarly(float fadeTime)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x2350120", Offset = "0x2350120", VA = "0x2350120")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x234ED88", Offset = "0x234ED88", VA = "0x234ED88")]
		public void FadeInOut()
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x234EF90", Offset = "0x234EF90", VA = "0x234EF90")]
		public void FollowObject(bool follow, Transform objToFollow, bool clipAgePriority)
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x2350158", Offset = "0x2350158", VA = "0x2350158")]
		public void WaitForSoundFinish()
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x23503A0", Offset = "0x23503A0", VA = "0x23503A0")]
		public void StopPitchGliding()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x2350370", Offset = "0x2350370", VA = "0x2350370")]
		public void StopFading()
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x234FC14", Offset = "0x234FC14", VA = "0x234FC14")]
		public void StopWaitingForFinish()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x235032C", Offset = "0x235032C", VA = "0x235032C")]
		public void StopFollowing()
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x2352550", Offset = "0x2352550", VA = "0x2352550")]
		private void DisableIfFinished()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x23520A8", Offset = "0x23520A8", VA = "0x23520A8")]
		private void UpdateAudioLocationAndPriority(bool rePrioritize)
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x2352724", Offset = "0x2352724", VA = "0x2352724")]
		private void ResetToNonOcclusionSetting()
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x23527D0", Offset = "0x23527D0", VA = "0x23527D0")]
		private void UpdateOcclusion()
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x23529B0", Offset = "0x23529B0", VA = "0x23529B0")]
		private void DoneWithOcclusion()
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x2352A2C", Offset = "0x2352A2C", VA = "0x2352A2C")]
		public bool RayCastForOcclusion()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x2352224", Offset = "0x2352224", VA = "0x2352224")]
		private void PlaySoundAndWait()
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x23537C8", Offset = "0x23537C8", VA = "0x23537C8")]
		private void DuckIfNotSilent()
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x2353938", Offset = "0x2353938", VA = "0x2353938")]
		private void StopOrChain()
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x234F63C", Offset = "0x234F63C", VA = "0x234F63C")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x234F770", Offset = "0x234F770", VA = "0x234F770")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x234F8FC", Offset = "0x234F8FC", VA = "0x234F8FC")]
		public void MaybeChain()
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x23539D4", Offset = "0x23539D4", VA = "0x23539D4")]
		private void UpdatePitch()
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x2353A98", Offset = "0x2353A98", VA = "0x2353A98")]
		private void PerformFading()
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x2353D58", Offset = "0x2353D58", VA = "0x2353D58")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x2353DE4", Offset = "0x2353DE4", VA = "0x2353DE4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x234DA04", Offset = "0x234DA04", VA = "0x234DA04")]
		public void UpdateCachedObjects()
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x2353ED4", Offset = "0x2353ED4", VA = "0x2353ED4")]
		public void ManualUpdate()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x23544E8", Offset = "0x23544E8", VA = "0x23544E8")]
		public SoundGroupVariationUpdater()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	public static class AudioPrioritizer
	{
		[Token(Token = "0x4000B3F")]
		private const int MaxPriority = 0;

		[Token(Token = "0x4000B40")]
		private const int HighestPriority = 16;

		[Token(Token = "0x4000B41")]
		private const int LowestPriority = 128;

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x166B930", Offset = "0x166B930", VA = "0x166B930")]
		public static void Set2DSoundPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x166B94C", Offset = "0x166B94C", VA = "0x166B94C")]
		public static void SetSoundGroupInitialPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x166B968", Offset = "0x166B968", VA = "0x166B968")]
		public static void SetPreviewPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x166B984", Offset = "0x166B984", VA = "0x166B984")]
		public static void Set3DPriority(SoundGroupVariation variation, bool useClipAgePriority)
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public static class AudioResourceOptimizer
	{
		[Token(Token = "0x2000239")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3AF4", Offset = "0x12F3AF4")]
		private sealed class <PopulateResourceSongToPlaylistControllerAsync>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string songResourceName;

			[Token(Token = "0x4000EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string playlistName;

			[Token(Token = "0x4000EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PlaylistController controller;

			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public PlaylistController.AudioPlayType playType;

			[Token(Token = "0x4000EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private ResourceRequest <asyncRes>5__2;

			[Token(Token = "0x1700014F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E9E")]
				[Address(RVA = "0x166E5F4", Offset = "0x166E5F4", VA = "0x166E5F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000150")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EA0")]
				[Address(RVA = "0x166E65C", Offset = "0x166E65C", VA = "0x166E65C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0x166CEEC", Offset = "0x166CEEC", VA = "0x166CEEC")]
			[DebuggerHidden]
			public <PopulateResourceSongToPlaylistControllerAsync>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000E9C")]
			[Address(RVA = "0x166E0B4", Offset = "0x166E0B4", VA = "0x166E0B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0x166E0B8", Offset = "0x166E0B8", VA = "0x166E0B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0x166E5FC", Offset = "0x166E5FC", VA = "0x166E5FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200023A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3B04", Offset = "0x12F3B04")]
		private sealed class <PopulateSourceWithInternetFile>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string fileUrl;

			[Token(Token = "0x4000EA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action successAction;

			[Token(Token = "0x4000EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SoundGroupVariation variation;

			[Token(Token = "0x4000EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action failureAction;

			[Token(Token = "0x4000EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x17000151")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EA5")]
				[Address(RVA = "0x166F03C", Offset = "0x166F03C", VA = "0x166F03C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000152")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EA7")]
				[Address(RVA = "0x166F0A4", Offset = "0x166F0A4", VA = "0x166F0A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EA1")]
			[Address(RVA = "0x166CFE0", Offset = "0x166CFE0", VA = "0x166CFE0")]
			[DebuggerHidden]
			public <PopulateSourceWithInternetFile>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0x166E664", Offset = "0x166E664", VA = "0x166E664", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0x166E740", Offset = "0x166E740", VA = "0x166E740", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0x166E680", Offset = "0x166E680", VA = "0x166E680")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0x166F044", Offset = "0x166F044", VA = "0x166F044", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200023B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3B14", Offset = "0x12F3B14")]
		private sealed class <PopulateSourcesWithResourceClipAsync>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string clipName;

			[Token(Token = "0x4000EB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action successAction;

			[Token(Token = "0x4000EB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action failureAction;

			[Token(Token = "0x4000EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public SoundGroupVariation variation;

			[Token(Token = "0x4000EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private ResourceRequest <asyncRes>5__2;

			[Token(Token = "0x17000153")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EAB")]
				[Address(RVA = "0x166F64C", Offset = "0x166F64C", VA = "0x166F64C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000154")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EAD")]
				[Address(RVA = "0x166F6B4", Offset = "0x166F6B4", VA = "0x166F6B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0x166D39C", Offset = "0x166D39C", VA = "0x166D39C")]
			[DebuggerHidden]
			public <PopulateSourcesWithResourceClipAsync>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0x166F0AC", Offset = "0x166F0AC", VA = "0x166F0AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EAA")]
			[Address(RVA = "0x166F0B0", Offset = "0x166F0B0", VA = "0x166F0B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0x166F654", Offset = "0x166F654", VA = "0x166F654", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, List<AudioSource>> AudioResourceTargetsByName;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Dictionary<string, AudioClip> AudioClipsByName;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Dictionary<string, List<AudioClip>> PlaylistClipsByPlaylistName;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly List<string> InternetFilesStartedLoading;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static string _supportedLanguageFolder;

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x166BE18", Offset = "0x166BE18", VA = "0x166BE18")]
		public static void ClearAudioClips()
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x166BEB4", Offset = "0x166BEB4", VA = "0x166BEB4")]
		public static string GetLocalizedDynamicSoundGroupFileName(SystemLanguage localLanguage, bool useLocalization, string resourceFileName)
		{
			return null;
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x166C004", Offset = "0x166C004", VA = "0x166C004")]
		public static string GetLocalizedFileName(bool useLocalization, string resourceFileName)
		{
			return null;
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x166C35C", Offset = "0x166C35C", VA = "0x166C35C")]
		public static void AddTargetForClip(string clipName, AudioSource source)
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x166C0A0", Offset = "0x166C0A0", VA = "0x166C0A0")]
		private static string SupportedLanguageFolder()
		{
			return null;
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x166C790", Offset = "0x166C790", VA = "0x166C790")]
		public static void ClearSupportLanguageFolder()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x166C810", Offset = "0x166C810", VA = "0x166C810")]
		public static AudioClip PopulateResourceSongToPlaylistController(string controllerName, string songResourceName, string playlistName)
		{
			return null;
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x166CCD0", Offset = "0x166CCD0", VA = "0x166CCD0")]
		private static void FinishRecordingPlaylistClip(string controllerName, AudioClip resAudioClip)
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x166CE30", Offset = "0x166CE30", VA = "0x166CE30")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5E98", Offset = "0x12F5E98")]
		public static IEnumerator PopulateResourceSongToPlaylistControllerAsync(string songResourceName, string playlistName, PlaylistController controller, PlaylistController.AudioPlayType playType)
		{
			return null;
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x166CF18", Offset = "0x166CF18", VA = "0x166CF18")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5EFC", Offset = "0x12F5EFC")]
		public static IEnumerator PopulateSourceWithInternetFile(string fileUrl, SoundGroupVariation variation, Action successAction, Action failureAction)
		{
			return null;
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x166D00C", Offset = "0x166D00C", VA = "0x166D00C")]
		public static void RemoveLoadedInternetClip(string fileUrl)
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x166D2D4", Offset = "0x166D2D4", VA = "0x166D2D4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5F60", Offset = "0x12F5F60")]
		public static IEnumerator PopulateSourcesWithResourceClipAsync(string clipName, SoundGroupVariation variation, Action successAction, Action failureAction)
		{
			return null;
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x166D3C8", Offset = "0x166D3C8", VA = "0x166D3C8")]
		public static void UnloadPlaylistSongIfUnused(string controllerName, AudioClip clipToRemove)
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x166D534", Offset = "0x166D534", VA = "0x166D534")]
		public static bool PopulateSourcesWithResourceClip(string clipName, SoundGroupVariation variation)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x166DA34", Offset = "0x166DA34", VA = "0x166DA34")]
		public static void DeleteAudioSourceFromList(string clipName, AudioSource source)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x166DBD4", Offset = "0x166DBD4", VA = "0x166DBD4")]
		public static void UnloadClipIfUnused(string clipName)
		{
		}
	}
	[Token(Token = "0x20001AB")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x12F3804", Offset = "0x12F3804")]
	public class MasterAudio : MonoBehaviour
	{
		[Token(Token = "0x200023C")]
		public enum AmbientSoundExitMode
		{
			[Token(Token = "0x4000EB5")]
			StopSound,
			[Token(Token = "0x4000EB6")]
			FadeSound
		}

		[Token(Token = "0x200023D")]
		public enum AmbientSoundReEnterMode
		{
			[Token(Token = "0x4000EB8")]
			StopExistingSound,
			[Token(Token = "0x4000EB9")]
			FadeInSameSound
		}

		[Token(Token = "0x200023E")]
		public enum VariationFollowerType
		{
			[Token(Token = "0x4000EBB")]
			LateUpdate,
			[Token(Token = "0x4000EBC")]
			FixedUpdate
		}

		[Token(Token = "0x200023F")]
		public enum LinkedGroupSelectionType
		{
			[Token(Token = "0x4000EBE")]
			All,
			[Token(Token = "0x4000EBF")]
			OneAtRandom
		}

		[Token(Token = "0x2000240")]
		public enum OcclusionSelectionType
		{
			[Token(Token = "0x4000EC1")]
			AllGroups,
			[Token(Token = "0x4000EC2")]
			TurnOnPerBusOrGroup
		}

		[Token(Token = "0x2000241")]
		public enum RaycastMode
		{
			[Token(Token = "0x4000EC4")]
			Physics3D,
			[Token(Token = "0x4000EC5")]
			Physics2D
		}

		[Token(Token = "0x2000242")]
		public enum AllMusicSpatialBlendType
		{
			[Token(Token = "0x4000EC7")]
			ForceAllTo2D,
			[Token(Token = "0x4000EC8")]
			ForceAllTo3D,
			[Token(Token = "0x4000EC9")]
			ForceAllToCustom,
			[Token(Token = "0x4000ECA")]
			AllowDifferentPerController
		}

		[Token(Token = "0x2000243")]
		public enum AllMixerSpatialBlendType
		{
			[Token(Token = "0x4000ECC")]
			ForceAllTo2D,
			[Token(Token = "0x4000ECD")]
			ForceAllTo3D,
			[Token(Token = "0x4000ECE")]
			ForceAllToCustom,
			[Token(Token = "0x4000ECF")]
			AllowDifferentPerGroup
		}

		[Token(Token = "0x2000244")]
		public enum ItemSpatialBlendType
		{
			[Token(Token = "0x4000ED1")]
			ForceTo2D,
			[Token(Token = "0x4000ED2")]
			ForceTo3D,
			[Token(Token = "0x4000ED3")]
			ForceToCustom,
			[Token(Token = "0x4000ED4")]
			UseCurveFromAudioSource
		}

		[Token(Token = "0x2000245")]
		public enum InternetFileLoadStatus
		{
			[Token(Token = "0x4000ED6")]
			Loading,
			[Token(Token = "0x4000ED7")]
			Loaded,
			[Token(Token = "0x4000ED8")]
			Failed
		}

		[Token(Token = "0x2000246")]
		public enum MixerWidthMode
		{
			[Token(Token = "0x4000EDA")]
			Narrow,
			[Token(Token = "0x4000EDB")]
			Normal,
			[Token(Token = "0x4000EDC")]
			Wide
		}

		[Token(Token = "0x2000247")]
		public enum CustomEventReceiveMode
		{
			[Token(Token = "0x4000EDE")]
			Always,
			[Token(Token = "0x4000EDF")]
			WhenDistanceLessThan,
			[Token(Token = "0x4000EE0")]
			WhenDistanceMoreThan,
			[Token(Token = "0x4000EE1")]
			Never,
			[Token(Token = "0x4000EE2")]
			OnSameGameObject,
			[Token(Token = "0x4000EE3")]
			OnChildGameObject,
			[Token(Token = "0x4000EE4")]
			OnParentGameObject,
			[Token(Token = "0x4000EE5")]
			OnSameOrChildGameObject,
			[Token(Token = "0x4000EE6")]
			OnSameOrParentGameObject
		}

		[Token(Token = "0x2000248")]
		public enum EventReceiveFilter
		{
			[Token(Token = "0x4000EE8")]
			All,
			[Token(Token = "0x4000EE9")]
			Closest,
			[Token(Token = "0x4000EEA")]
			Random
		}

		[Token(Token = "0x2000249")]
		public enum AudioLocation
		{
			[Token(Token = "0x4000EEC")]
			Clip,
			[Token(Token = "0x4000EED")]
			ResourceFile,
			[Token(Token = "0x4000EEE")]
			FileOnInternet
		}

		[Token(Token = "0x200024A")]
		public enum CustomSongStartTimeMode
		{
			[Token(Token = "0x4000EF0")]
			Beginning,
			[Token(Token = "0x4000EF1")]
			SpecificTime,
			[Token(Token = "0x4000EF2")]
			RandomTime
		}

		[Token(Token = "0x200024B")]
		public enum BusCommand
		{
			[Token(Token = "0x4000EF4")]
			None,
			[Token(Token = "0x4000EF5")]
			FadeToVolume,
			[Token(Token = "0x4000EF6")]
			Mute,
			[Token(Token = "0x4000EF7")]
			Pause,
			[Token(Token = "0x4000EF8")]
			Solo,
			[Token(Token = "0x4000EF9")]
			Unmute,
			[Token(Token = "0x4000EFA")]
			Unpause,
			[Token(Token = "0x4000EFB")]
			Unsolo,
			[Token(Token = "0x4000EFC")]
			Stop,
			[Token(Token = "0x4000EFD")]
			ChangePitch,
			[Token(Token = "0x4000EFE")]
			ToggleMute,
			[Token(Token = "0x4000EFF")]
			StopBusOfTransform,
			[Token(Token = "0x4000F00")]
			PauseBusOfTransform,
			[Token(Token = "0x4000F01")]
			UnpauseBusOfTransform,
			[Token(Token = "0x4000F02")]
			GlideByPitch,
			[Token(Token = "0x4000F03")]
			StopOldBusVoices,
			[Token(Token = "0x4000F04")]
			FadeOutOldBusVoices
		}

		[Token(Token = "0x200024C")]
		public enum DragGroupMode
		{
			[Token(Token = "0x4000F06")]
			OneGroupPerClip,
			[Token(Token = "0x4000F07")]
			OneGroupWithVariations
		}

		[Token(Token = "0x200024D")]
		public enum EventSoundFunctionType
		{
			[Token(Token = "0x4000F09")]
			PlaySound,
			[Token(Token = "0x4000F0A")]
			GroupControl,
			[Token(Token = "0x4000F0B")]
			BusControl,
			[Token(Token = "0x4000F0C")]
			PlaylistControl,
			[Token(Token = "0x4000F0D")]
			CustomEventControl,
			[Token(Token = "0x4000F0E")]
			GlobalControl,
			[Token(Token = "0x4000F0F")]
			UnityMixerControl,
			[Token(Token = "0x4000F10")]
			PersistentSettingsControl
		}

		[Token(Token = "0x200024E")]
		public enum LanguageMode
		{
			[Token(Token = "0x4000F12")]
			UseDeviceSetting,
			[Token(Token = "0x4000F13")]
			SpecificLanguage,
			[Token(Token = "0x4000F14")]
			DynamicallySet
		}

		[Token(Token = "0x200024F")]
		public enum UnityMixerCommand
		{
			[Token(Token = "0x4000F16")]
			None,
			[Token(Token = "0x4000F17")]
			TransitionToSnapshot,
			[Token(Token = "0x4000F18")]
			TransitionToSnapshotBlend
		}

		[Token(Token = "0x2000250")]
		public enum PlaylistCommand
		{
			[Token(Token = "0x4000F1A")]
			None,
			[Token(Token = "0x4000F1B")]
			ChangePlaylist,
			[Token(Token = "0x4000F1C")]
			FadeToVolume,
			[Token(Token = "0x4000F1D")]
			PlaySong,
			[Token(Token = "0x4000F1E")]
			PlayRandomSong,
			[Token(Token = "0x4000F1F")]
			PlayNextSong,
			[Token(Token = "0x4000F20")]
			Pause,
			[Token(Token = "0x4000F21")]
			Resume,
			[Token(Token = "0x4000F22")]
			Stop,
			[Token(Token = "0x4000F23")]
			Mute,
			[Token(Token = "0x4000F24")]
			Unmute,
			[Token(Token = "0x4000F25")]
			ToggleMute,
			[Token(Token = "0x4000F26")]
			Restart,
			[Token(Token = "0x4000F27")]
			Start,
			[Token(Token = "0x4000F28")]
			StopLoopingCurrentSong,
			[Token(Token = "0x4000F29")]
			StopPlaylistAfterCurrentSong,
			[Token(Token = "0x4000F2A")]
			AddSongToQueue
		}

		[Token(Token = "0x2000251")]
		public enum CustomEventCommand
		{
			[Token(Token = "0x4000F2C")]
			None,
			[Token(Token = "0x4000F2D")]
			FireEvent
		}

		[Token(Token = "0x2000252")]
		public enum GlobalCommand
		{
			[Token(Token = "0x4000F2F")]
			None,
			[Token(Token = "0x4000F30")]
			PauseMixer,
			[Token(Token = "0x4000F31")]
			UnpauseMixer,
			[Token(Token = "0x4000F32")]
			StopMixer,
			[Token(Token = "0x4000F33")]
			StopEverything,
			[Token(Token = "0x4000F34")]
			PauseEverything,
			[Token(Token = "0x4000F35")]
			UnpauseEverything,
			[Token(Token = "0x4000F36")]
			MuteEverything,
			[Token(Token = "0x4000F37")]
			UnmuteEverything,
			[Token(Token = "0x4000F38")]
			SetMasterMixerVolume,
			[Token(Token = "0x4000F39")]
			SetMasterPlaylistVolume
		}

		[Token(Token = "0x2000253")]
		public enum SoundGroupCommand
		{
			[Token(Token = "0x4000F3B")]
			None,
			[Token(Token = "0x4000F3C")]
			FadeToVolume,
			[Token(Token = "0x4000F3D")]
			FadeOutAllOfSound,
			[Token(Token = "0x4000F3E")]
			Mute,
			[Token(Token = "0x4000F3F")]
			Pause,
			[Token(Token = "0x4000F40")]
			Solo,
			[Token(Token = "0x4000F41")]
			StopAllOfSound,
			[Token(Token = "0x4000F42")]
			Unmute,
			[Token(Token = "0x4000F43")]
			Unpause,
			[Token(Token = "0x4000F44")]
			Unsolo,
			[Token(Token = "0x4000F45")]
			StopAllSoundsOfTransform,
			[Token(Token = "0x4000F46")]
			PauseAllSoundsOfTransform,
			[Token(Token = "0x4000F47")]
			UnpauseAllSoundsOfTransform,
			[Token(Token = "0x4000F48")]
			StopSoundGroupOfTransform,
			[Token(Token = "0x4000F49")]
			PauseSoundGroupOfTransform,
			[Token(Token = "0x4000F4A")]
			UnpauseSoundGroupOfTransform,
			[Token(Token = "0x4000F4B")]
			FadeOutSoundGroupOfTransform,
			[Token(Token = "0x4000F4C")]
			RefillSoundGroupPool,
			[Token(Token = "0x4000F4D")]
			RouteToBus,
			[Token(Token = "0x4000F4E")]
			GlideByPitch,
			[Token(Token = "0x4000F4F")]
			ToggleSoundGroup,
			[Token(Token = "0x4000F50")]
			ToggleSoundGroupOfTransform,
			[Token(Token = "0x4000F51")]
			FadeOutAllSoundsOfTransform,
			[Token(Token = "0x4000F52")]
			StopOldSoundGroupVoices,
			[Token(Token = "0x4000F53")]
			FadeOutOldSoundGroupVoices
		}

		[Token(Token = "0x2000254")]
		public enum PersistentSettingsCommand
		{
			[Token(Token = "0x4000F55")]
			None,
			[Token(Token = "0x4000F56")]
			SetBusVolume,
			[Token(Token = "0x4000F57")]
			SetGroupVolume,
			[Token(Token = "0x4000F58")]
			SetMixerVolume,
			[Token(Token = "0x4000F59")]
			SetMusicVolume,
			[Token(Token = "0x4000F5A")]
			MixerMuteToggle,
			[Token(Token = "0x4000F5B")]
			MusicMuteToggle
		}

		[Token(Token = "0x2000255")]
		public enum SongFadeInPosition
		{
			[Token(Token = "0x4000F5D")]
			NewClipFromBeginning = 1,
			[Token(Token = "0x4000F5E")]
			NewClipFromLastKnownPosition = 3,
			[Token(Token = "0x4000F5F")]
			SynchronizeClips = 5
		}

		[Token(Token = "0x2000256")]
		public enum SoundSpawnLocationMode
		{
			[Token(Token = "0x4000F61")]
			MasterAudioLocation,
			[Token(Token = "0x4000F62")]
			CallerLocation,
			[Token(Token = "0x4000F63")]
			AttachToCaller
		}

		[Token(Token = "0x2000257")]
		public enum VariationCommand
		{
			[Token(Token = "0x4000F65")]
			None,
			[Token(Token = "0x4000F66")]
			Stop,
			[Token(Token = "0x4000F67")]
			Pause,
			[Token(Token = "0x4000F68")]
			Unpause
		}

		[Token(Token = "0x2000258")]
		public struct CustomEventCandidate
		{
			[Token(Token = "0x4000F69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float DistanceAway;

			[Token(Token = "0x4000F6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ICustomEventReceiver Receiver;

			[Token(Token = "0x4000F6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform Trans;

			[Token(Token = "0x4000F6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int RandomId;

			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0x2340C00", Offset = "0x2340C00", VA = "0x2340C00")]
			public CustomEventCandidate(float distance, ICustomEventReceiver rec, Transform trans, int randomId)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000259")]
		public class AudioGroupInfo
		{
			[Token(Token = "0x4000F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<AudioInfo> Sources;

			[Token(Token = "0x4000F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int LastFramePlayed;

			[Token(Token = "0x4000F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float LastTimePlayed;

			[Token(Token = "0x4000F70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MasterAudioGroup Group;

			[Token(Token = "0x4000F71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool PlayedForWarming;

			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0x2340B28", Offset = "0x2340B28", VA = "0x2340B28")]
			public AudioGroupInfo(List<AudioInfo> sources, MasterAudioGroup groupScript)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200025A")]
		public class AudioInfo
		{
			[Token(Token = "0x4000F72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource Source;

			[Token(Token = "0x4000F73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float OriginalVolume;

			[Token(Token = "0x4000F74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float LastPercentageVolume;

			[Token(Token = "0x4000F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float LastRandomVolume;

			[Token(Token = "0x4000F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SoundGroupVariation Variation;

			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0x2340B90", Offset = "0x2340B90", VA = "0x2340B90")]
			public AudioInfo(SoundGroupVariation variation, AudioSource source, float origVol)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200025B")]
		public class Playlist
		{
			[Token(Token = "0x2000287")]
			public enum CrossfadeTimeMode
			{
				[Token(Token = "0x4000FF1")]
				UseMasterSetting,
				[Token(Token = "0x4000FF2")]
				Override
			}

			[Token(Token = "0x4000F77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isExpanded;

			[Token(Token = "0x4000F78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string playlistName;

			[Token(Token = "0x4000F79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SongFadeInPosition songTransitionType;

			[Token(Token = "0x4000F7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<MusicSetting> MusicSettings;

			[Token(Token = "0x4000F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AudioLocation bulkLocationMode;

			[Token(Token = "0x4000F7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public CrossfadeTimeMode crossfadeMode;

			[Token(Token = "0x4000F7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float crossFadeTime;

			[Token(Token = "0x4000F7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public bool fadeInFirstSong;

			[Token(Token = "0x4000F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
			public bool fadeOutLastSong;

			[Token(Token = "0x4000F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
			public bool bulkEditMode;

			[Token(Token = "0x4000F81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
			public bool resourceClipsAllLoadAsync;

			[Token(Token = "0x4000F82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool isTemporary;

			[Token(Token = "0x4000F83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
			public bool showMetadata;

			[Token(Token = "0x4000F84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<SongMetadataProperty> songMetadataProps;

			[Token(Token = "0x4000F85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public string newMetadataPropName;

			[Token(Token = "0x4000F86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public SongMetadataProperty.MetadataPropertyType newMetadataPropType;

			[Token(Token = "0x4000F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public bool newMetadataPropRequired;

			[Token(Token = "0x4000F88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
			public bool newMetadataPropCanHaveMult;

			[Token(Token = "0x6000EB1")]
			[Address(RVA = "0x2340C4C", Offset = "0x2340C4C", VA = "0x2340C4C")]
			public Playlist()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200025C")]
		public class SoundGroupRefillInfo
		{
			[Token(Token = "0x4000F89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float LastTimePlayed;

			[Token(Token = "0x4000F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float InactivePeriodSeconds;

			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0x2340D54", Offset = "0x2340D54", VA = "0x2340D54")]
			public SoundGroupRefillInfo(float lastTimePlayed, float inactivePeriodSeconds)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200025D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3B24", Offset = "0x12F3B24")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<OcclusionFreqChangeInfo> <>9__219_0;

			[Token(Token = "0x4000F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Predicate<BusFadeInfo> <>9__220_0;

			[Token(Token = "0x4000F8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Predicate<GroupFadeInfo> <>9__221_0;

			[Token(Token = "0x4000F8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Predicate<GroupPitchGlideInfo> <>9__222_0;

			[Token(Token = "0x4000F90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Predicate<BusPitchGlideInfo> <>9__223_0;

			[Token(Token = "0x4000F91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Comparison<CustomEventCandidate> <>9__427_0;

			[Token(Token = "0x4000F92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Comparison<CustomEventCandidate> <>9__427_1;

			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0x233FB84", Offset = "0x233FB84", VA = "0x233FB84")]
			public <>c()
			{
			}

			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0x233FB8C", Offset = "0x233FB8C", VA = "0x233FB8C")]
			internal bool <PerformOcclusionFrequencyChanges>b__219_0(OcclusionFreqChangeInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0x233FBAC", Offset = "0x233FBAC", VA = "0x233FBAC")]
			internal bool <PerformBusFades>b__220_0(BusFadeInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0x233FBCC", Offset = "0x233FBCC", VA = "0x233FBCC")]
			internal bool <PerformGroupFades>b__221_0(GroupFadeInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0x233FBEC", Offset = "0x233FBEC", VA = "0x233FBEC")]
			internal bool <PerformGroupPitchGlides>b__222_0(GroupPitchGlideInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0x233FC0C", Offset = "0x233FC0C", VA = "0x233FC0C")]
			internal bool <PerformBusPitchGlides>b__223_0(BusPitchGlideInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0x233FC2C", Offset = "0x233FC2C", VA = "0x233FC2C")]
			internal int <FireCustomEvent>b__427_0(CustomEventCandidate x, CustomEventCandidate y)
			{
				return default(int);
			}

			[Token(Token = "0x6000EBB")]
			[Address(RVA = "0x233FC3C", Offset = "0x233FC3C", VA = "0x233FC3C")]
			internal int <FireCustomEvent>b__427_1(CustomEventCandidate x, CustomEventCandidate y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x200025E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3B34", Offset = "0x12F3B34")]
		private sealed class <>c__DisplayClass233_0
		{
			[Token(Token = "0x4000F93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0x233FC50", Offset = "0x233FC50", VA = "0x233FC50")]
			public <>c__DisplayClass233_0()
			{
			}

			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0x233FC58", Offset = "0x233FC58", VA = "0x233FC58")]
			internal void <PlaySoundAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x200025F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3B44", Offset = "0x12F3B44")]
		private sealed class <PlaySoundAndWaitUntilFinished>d__233 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x4000F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float volumePercentage;

			[Token(Token = "0x4000F98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float? pitch;

			[Token(Token = "0x4000F99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float delaySoundTime;

			[Token(Token = "0x4000F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string variationName;

			[Token(Token = "0x4000F9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass233_0 <>8__1;

			[Token(Token = "0x4000F9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Action completedAction;

			[Token(Token = "0x17000155")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EC1")]
				[Address(RVA = "0x2340AB8", Offset = "0x2340AB8", VA = "0x2340AB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000156")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EC3")]
				[Address(RVA = "0x2340B20", Offset = "0x2340B20", VA = "0x2340B20", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0x23407D8", Offset = "0x23407D8", VA = "0x23407D8")]
			[DebuggerHidden]
			public <PlaySoundAndWaitUntilFinished>d__233(int <>1__state)
			{
			}

			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0x2340804", Offset = "0x2340804", VA = "0x2340804", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EC0")]
			[Address(RVA = "0x2340808", Offset = "0x2340808", VA = "0x2340808", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EC2")]
			[Address(RVA = "0x2340AC0", Offset = "0x2340AC0", VA = "0x2340AC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000260")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3B54", Offset = "0x12F3B54")]
		private sealed class <>c__DisplayClass234_0
		{
			[Token(Token = "0x4000F9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6000EC4")]
			[Address(RVA = "0x233FC64", Offset = "0x233FC64", VA = "0x233FC64")]
			public <>c__DisplayClass234_0()
			{
			}

			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0x233FC6C", Offset = "0x233FC6C", VA = "0x233FC6C")]
			internal void <PlaySound3DAtTransformAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x2000261")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3B64", Offset = "0x12F3B64")]
		private sealed class <PlaySound3DAtTransformAndWaitUntilFinished>d__234 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x4000FA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform sourceTrans;

			[Token(Token = "0x4000FA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float volumePercentage;

			[Token(Token = "0x4000FA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float? pitch;

			[Token(Token = "0x4000FA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float delaySoundTime;

			[Token(Token = "0x4000FA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string variationName;

			[Token(Token = "0x4000FA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public double? timeToSchedulePlay;

			[Token(Token = "0x4000FA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private <>c__DisplayClass234_0 <>8__1;

			[Token(Token = "0x4000FA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Action completedAction;

			[Token(Token = "0x17000157")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EC9")]
				[Address(RVA = "0x23403FC", Offset = "0x23403FC", VA = "0x23403FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000158")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ECB")]
				[Address(RVA = "0x2340464", Offset = "0x2340464", VA = "0x2340464", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0x2340044", Offset = "0x2340044", VA = "0x2340044")]
			[DebuggerHidden]
			public <PlaySound3DAtTransformAndWaitUntilFinished>d__234(int <>1__state)
			{
			}

			[Token(Token = "0x6000EC7")]
			[Address(RVA = "0x2340070", Offset = "0x2340070", VA = "0x2340070", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0x2340074", Offset = "0x2340074", VA = "0x2340074", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ECA")]
			[Address(RVA = "0x2340404", Offset = "0x2340404", VA = "0x2340404", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000262")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3B74", Offset = "0x12F3B74")]
		private sealed class <>c__DisplayClass235_0
		{
			[Token(Token = "0x4000FA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6000ECC")]
			[Address(RVA = "0x233FC78", Offset = "0x233FC78", VA = "0x233FC78")]
			public <>c__DisplayClass235_0()
			{
			}

			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0x233FC80", Offset = "0x233FC80", VA = "0x233FC80")]
			internal void <PlaySound3DFollowTransformAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x2000263")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3B84", Offset = "0x12F3B84")]
		private sealed class <PlaySound3DFollowTransformAndWaitUntilFinished>d__235 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x4000FAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform sourceTrans;

			[Token(Token = "0x4000FAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float volumePercentage;

			[Token(Token = "0x4000FAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float? pitch;

			[Token(Token = "0x4000FB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float delaySoundTime;

			[Token(Token = "0x4000FB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string variationName;

			[Token(Token = "0x4000FB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public double? timeToSchedulePlay;

			[Token(Token = "0x4000FB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private <>c__DisplayClass235_0 <>8__1;

			[Token(Token = "0x4000FB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Action completedAction;

			[Token(Token = "0x17000159")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ED1")]
				[Address(RVA = "0x2340768", Offset = "0x2340768", VA = "0x2340768", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ED3")]
				[Address(RVA = "0x23407D0", Offset = "0x23407D0", VA = "0x23407D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0x234046C", Offset = "0x234046C", VA = "0x234046C")]
			[DebuggerHidden]
			public <PlaySound3DFollowTransformAndWaitUntilFinished>d__235(int <>1__state)
			{
			}

			[Token(Token = "0x6000ECF")]
			[Address(RVA = "0x2340498", Offset = "0x2340498", VA = "0x2340498", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0x234049C", Offset = "0x234049C", VA = "0x234049C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0x2340770", Offset = "0x2340770", VA = "0x2340770", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000264")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3B94", Offset = "0x12F3B94")]
		private sealed class <>c__DisplayClass269_0
		{
			[Token(Token = "0x4000FB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string busName;

			[Token(Token = "0x6000ED4")]
			[Address(RVA = "0x233FC8C", Offset = "0x233FC8C", VA = "0x233FC8C")]
			public <>c__DisplayClass269_0()
			{
			}

			[Token(Token = "0x6000ED5")]
			[Address(RVA = "0x233FC94", Offset = "0x233FC94", VA = "0x233FC94")]
			internal bool <RouteGroupToBus>b__1(GroupBus x)
			{
				return default(bool);
			}

			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0x233FCB8", Offset = "0x233FCB8", VA = "0x233FCB8")]
			internal bool <RouteGroupToBus>b__0(GroupBus x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000265")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3BA4", Offset = "0x12F3BA4")]
		private sealed class <>c__DisplayClass279_0
		{
			[Token(Token = "0x4000FB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string sType;

			[Token(Token = "0x6000ED7")]
			[Address(RVA = "0x233FCDC", Offset = "0x233FCDC", VA = "0x233FCDC")]
			public <>c__DisplayClass279_0()
			{
			}

			[Token(Token = "0x6000ED8")]
			[Address(RVA = "0x233FCE4", Offset = "0x233FCE4", VA = "0x233FCE4")]
			internal bool <FadeSoundGroupToVolume>b__0(GroupFadeInfo obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000266")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3BB4", Offset = "0x12F3BB4")]
		private sealed class <>c__DisplayClass282_0
		{
			[Token(Token = "0x4000FB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string sType;

			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0x233FD08", Offset = "0x233FD08", VA = "0x233FD08")]
			public <>c__DisplayClass282_0()
			{
			}

			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0x233FD10", Offset = "0x233FD10", VA = "0x233FD10")]
			internal bool <GlideSoundGroupByPitch>b__0(GroupPitchGlideInfo obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000267")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3BC4", Offset = "0x12F3BC4")]
		private sealed class <>c__DisplayClass336_0
		{
			[Token(Token = "0x4000FB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string busName;

			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0x233FD34", Offset = "0x233FD34", VA = "0x233FD34")]
			public <>c__DisplayClass336_0()
			{
			}

			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0x233FD3C", Offset = "0x233FD3C", VA = "0x233FD3C")]
			internal bool <CreateBus>b__0(GroupBus obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000268")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3BD4", Offset = "0x12F3BD4")]
		private sealed class <>c__DisplayClass340_0
		{
			[Token(Token = "0x4000FB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string busName;

			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0x233FD60", Offset = "0x233FD60", VA = "0x233FD60")]
			public <>c__DisplayClass340_0()
			{
			}

			[Token(Token = "0x6000EDE")]
			[Address(RVA = "0x233FD68", Offset = "0x233FD68", VA = "0x233FD68")]
			internal bool <FadeBusToVolume>b__0(BusFadeInfo obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000269")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3BE4", Offset = "0x12F3BE4")]
		private sealed class <>c__DisplayClass343_0
		{
			[Token(Token = "0x4000FBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string busName;

			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0x233FD8C", Offset = "0x233FD8C", VA = "0x233FD8C")]
			public <>c__DisplayClass343_0()
			{
			}

			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0x233FD94", Offset = "0x233FD94", VA = "0x233FD94")]
			internal bool <GlideBusByPitch>b__0(BusPitchGlideInfo obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200026A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3BF4", Offset = "0x12F3BF4")]
		private sealed class <>c__DisplayClass423_0
		{
			[Token(Token = "0x4000FBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string categoryName;

			[Token(Token = "0x6000EE1")]
			[Address(RVA = "0x233FDB8", Offset = "0x233FDB8", VA = "0x233FDB8")]
			public <>c__DisplayClass423_0()
			{
			}

			[Token(Token = "0x6000EE2")]
			[Address(RVA = "0x233FDC0", Offset = "0x233FDC0", VA = "0x233FDC0")]
			internal bool <CreateCustomEventCategoryIfNotThere>b__0(CustomEventCategory cat)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200026B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3C04", Offset = "0x12F3C04")]
		private sealed class <>c__DisplayClass424_0
		{
			[Token(Token = "0x4000FBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string customEventName;

			[Token(Token = "0x6000EE3")]
			[Address(RVA = "0x233FDE4", Offset = "0x233FDE4", VA = "0x233FDE4")]
			public <>c__DisplayClass424_0()
			{
			}

			[Token(Token = "0x6000EE4")]
			[Address(RVA = "0x233FDEC", Offset = "0x233FDEC", VA = "0x233FDEC")]
			internal bool <CreateCustomEvent>b__0(CustomEvent obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200026C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3C14", Offset = "0x12F3C14")]
		private sealed class <>c__DisplayClass425_0
		{
			[Token(Token = "0x4000FBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string customEventName;

			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0x233FE10", Offset = "0x233FE10", VA = "0x233FE10")]
			public <>c__DisplayClass425_0()
			{
			}

			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0x233FE18", Offset = "0x233FE18", VA = "0x233FE18")]
			internal bool <DeleteCustomEvent>b__0(CustomEvent obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200026D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3C24", Offset = "0x12F3C24")]
		private sealed class <>c__DisplayClass426_0
		{
			[Token(Token = "0x4000FBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string customEventName;

			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0x233FE3C", Offset = "0x233FE3C", VA = "0x233FE3C")]
			public <>c__DisplayClass426_0()
			{
			}

			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0x233FE44", Offset = "0x233FE44", VA = "0x233FE44")]
			internal bool <GetCustomEventByName>b__0(CustomEvent obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200026E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3C34", Offset = "0x12F3C34")]
		private sealed class <>c__DisplayClass428_0
		{
			[Token(Token = "0x4000FBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string customEventName;

			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0x233FE68", Offset = "0x233FE68", VA = "0x233FE68")]
			public <>c__DisplayClass428_0()
			{
			}

			[Token(Token = "0x6000EEA")]
			[Address(RVA = "0x233FE70", Offset = "0x233FE70", VA = "0x233FE70")]
			internal bool <CustomEventExists>b__0(CustomEvent obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200026F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3C44", Offset = "0x12F3C44")]
		private sealed class <>c__DisplayClass429_0
		{
			[Token(Token = "0x4000FC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string eventName;

			[Token(Token = "0x6000EEB")]
			[Address(RVA = "0x233FE94", Offset = "0x233FE94", VA = "0x233FE94")]
			public <>c__DisplayClass429_0()
			{
			}

			[Token(Token = "0x6000EEC")]
			[Address(RVA = "0x233FE9C", Offset = "0x233FE9C", VA = "0x233FE9C")]
			internal bool <GetChildReceivers>b__0(ICustomEventReceiver rec)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000270")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3C54", Offset = "0x12F3C54")]
		private sealed class <>c__DisplayClass430_0
		{
			[Token(Token = "0x4000FC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string eventName;

			[Token(Token = "0x6000EED")]
			[Address(RVA = "0x233FF6C", Offset = "0x233FF6C", VA = "0x233FF6C")]
			public <>c__DisplayClass430_0()
			{
			}

			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0x233FF74", Offset = "0x233FF74", VA = "0x233FF74")]
			internal bool <GetParentReceivers>b__0(ICustomEventReceiver rec)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000B47")]
		public const string MasterAudioDefaultFolder = "Assets/Plugins/DarkTonic/MasterAudio";

		[Token(Token = "0x4000B48")]
		public const string PreviewText = "Random delay, custom fading & start/end position settings are ignored by preview in edit mode.";

		[Token(Token = "0x4000B49")]
		public const string LoopDisabledLoopedChain = "Loop Clip is always OFF for Looped Chain Groups";

		[Token(Token = "0x4000B4A")]
		public const string LoopDisabledCustomEnd = "Loop Clip is always OFF when using Custom End Position";

		[Token(Token = "0x4000B4B")]
		public const string DragAudioTip = "Drag Audio clips or a folder containing some here";

		[Token(Token = "0x4000B4C")]
		public const string NoCategory = "[Uncategorized]";

		[Token(Token = "0x4000B4D")]
		public const float SemiTonePitchFactor = 1.05946f;

		[Token(Token = "0x4000B4E")]
		public const float SpatialBlend_2DValue = 0f;

		[Token(Token = "0x4000B4F")]
		public const float SpatialBlend_3DValue = 1f;

		[Token(Token = "0x4000B50")]
		public const float MaxCrossFadeTimeSeconds = 120f;

		[Token(Token = "0x4000B51")]
		public const float DefaultDuckVolCut = -6f;

		[Token(Token = "0x4000B52")]
		public const int ERROR_MA_LAYER_COLLISIONS_DISABLED = 1;

		[Token(Token = "0x4000B53")]
		public const string StoredLanguageNameKey = "~MA_Language_Key~";

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly YieldInstruction EndOfFrameDelay;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly List<string> ExemptChildNames;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly HashSet<int> ErrorNumbersLogged;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Action NumberOfAudioSourcesChanged;

		[Token(Token = "0x4000B58")]
		public const int HardCodedBusOptions = 2;

		[Token(Token = "0x4000B59")]
		public const string AllBusesName = "[All]";

		[Token(Token = "0x4000B5A")]
		public const string NoGroupName = "[None]";

		[Token(Token = "0x4000B5B")]
		public const string DynamicGroupName = "[Type In]";

		[Token(Token = "0x4000B5C")]
		public const string NoPlaylistName = "[No Playlist]";

		[Token(Token = "0x4000B5D")]
		public const string NoVoiceLimitName = "[NO LMT]";

		[Token(Token = "0x4000B5E")]
		public const string OnlyPlaylistControllerName = "~only~";

		[Token(Token = "0x4000B5F")]
		public const float InnerLoopCheckInterval = 0.1f;

		[Token(Token = "0x4000B60")]
		private const int MaxComponents = 20;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioLocation bulkLocationMode;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string groupTemplateName;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string audioSourceTemplateName;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool showGroupCreation;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool useGroupTemplates;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public DragGroupMode curDragGroupMode;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<GameObject> groupTemplates;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<GameObject> audioSourceTemplates;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool mixerMuted;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool playlistsMuted;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LanguageMode langMode;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SystemLanguage testLanguage;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public SystemLanguage defaultLanguage;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<SystemLanguage> supportedLanguages;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string busFilter;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useTextGroupFilter;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string textGroupFilter;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool resourceClipsPauseDoNotUnload;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool resourceClipsAllLoadAsync;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform playlistControllerPrefab;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool persistBetweenScenes;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool shouldLogDestroys;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		public bool showBusColors;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		public bool areGroupsExpanded;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform soundGroupTemplate;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform soundGroupVariationTemplate;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<GroupBus> groupBuses;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool groupByBus;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool sortAlpha;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
		public bool showRangeSoundGizmos;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB")]
		public bool showSelectedRangeSoundGizmos;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Color rangeGizmoColor;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Color selectedRangeGizmoColor;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool showAdvancedSettings;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		public bool showLocalization;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		public bool playListExpanded;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
		public bool playlistsExpanded;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AllMusicSpatialBlendType musicSpatialBlendType;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float musicSpatialBlend;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AllMixerSpatialBlendType mixerSpatialBlendType;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float mixerSpatialBlend;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public ItemSpatialBlendType newGroupSpatialType;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float newGroupSpatialBlend;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public List<Playlist> musicPlaylists;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float _masterAudioVolume;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public bool vrSettingsExpanded;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		public bool useSpatializer;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF6")]
		public bool useSpatializerPostFX;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF7")]
		public bool addOculusAudioSources;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool addResonanceAudioSources;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		public bool ignoreTimeScale;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
		public bool useGaplessPlaylists;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFB")]
		public bool saveRuntimeChanges;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public bool prioritizeOnDistance;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public int rePrioritizeEverySecIndex;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public bool useOcclusion;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float occlusionFreqChangeSeconds;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public OcclusionSelectionType occlusionSelectType;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public int occlusionMaxRayCastsPerFrame;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool occlusionUseLayerMask;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public LayerMask occlusionLayerMask;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public bool occlusionShowRaycasts;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		public bool occlusionShowCategories;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public RaycastMode occlusionRaycastMode;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public bool occlusionIncludeStartRaycast2DCollider;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
		public bool occlusionRaycastsHitTriggers;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x132")]
		public bool ambientAdvancedExpanded;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public int ambientMaxRecalcsPerFrame;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool visualAdvancedExpanded;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x139")]
		public bool logAdvancedExpanded;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13A")]
		public bool listenerAdvancedExpanded;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13B")]
		public bool listenerFollowerHasRigidBody;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public VariationFollowerType variationFollowerType;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool showFadingSettings;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		public bool stopZeroVolumeGroups;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x142")]
		public bool stopZeroVolumeBuses;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x143")]
		public bool stopZeroVolumePlaylists;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float stopOldestBusFadeTime;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public bool resourceAdvancedExpanded;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		public bool useClipAgePriority;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		public bool logOutOfVoices;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14B")]
		public bool LogSounds;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public bool logCustomEvents;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
		public bool disableLogging;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14E")]
		public bool showMusicDucking;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14F")]
		public bool enableMusicDucking;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public List<DuckGroupInfo> musicDuckingSounds;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public float defaultRiseVolStart;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public float defaultUnduckTime;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float defaultDuckedVolumeCut;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public float crossFadeTime;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float _masterPlaylistVolume;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public bool showGroupSelect;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16D")]
		public bool hideGroupsWithNoActiveVars;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public string newEventName;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public bool showCustomEvents;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public List<CustomEvent> customEvents;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Dictionary<string, DuckGroupInfo> duckingBySoundType;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public int frames;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public bool showUnityMixerGroupAssignment;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly PlaySoundResult AndForgetSuccessResult;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly PlaySoundResult failedResultDuringInit;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private readonly Dictionary<string, AudioGroupInfo> AudioSourcesBySoundType;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Dictionary<string, List<int>> _randomizer;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Dictionary<string, List<int>> _randomizerOrigin;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Dictionary<string, List<int>> _randomizerLeftovers;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Dictionary<string, List<int>> _clipsPlayedBySoundTypeOldestFirst;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private readonly List<SoundGroupVariationUpdater> ActiveVariationUpdaters;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private readonly List<SoundGroupVariationUpdater> ActiveUpdatersToRemove;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private readonly List<CustomEventCandidate> ValidReceivers;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private readonly List<MasterAudioGroup> SoloedGroups;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private readonly Queue<CustomEventToFireInfo> CustomEventsToFire;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private readonly Queue<TransformFollower> TransFollowerColliderPositionRecalcs;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private readonly List<TransformFollower> ProcessedColliderPositionRecalcs;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private readonly List<BusFadeInfo> BusFades;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private readonly List<GroupFadeInfo> GroupFades;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private readonly List<GroupPitchGlideInfo> GroupPitchGlides;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private readonly List<BusPitchGlideInfo> BusPitchGlides;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private readonly List<OcclusionFreqChangeInfo> VariationOcclusionFreqChanges;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private readonly List<AudioSource> AllAudioSources;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private readonly Dictionary<string, Dictionary<ICustomEventReceiver, Transform>> ReceiversByEventName;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private readonly Dictionary<string, PlaylistController> PlaylistControllersByName;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private readonly Dictionary<string, SoundGroupRefillInfo> LastTimeSoundGroupPlayed;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private readonly List<GameObject> OcclusionSourcesInRange;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private readonly List<GameObject> OcclusionSourcesOutOfRange;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private readonly List<GameObject> OcclusionSourcesBlocked;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private readonly Queue<SoundGroupVariationUpdater> QueuedOcclusionRays;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private readonly List<SoundGroupVariation> VariationsStartedDuringMultiStop;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private bool _isStoppingMultiple;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		private float _repriTime;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private List<string> _groupsToRemove;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private bool _mustRescanGroups;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private Transform _trans;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private bool _soundsLoaded;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A1")]
		private bool _warming;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static MasterAudio _instance;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static string _prospectiveMAFolder;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Transform _listenerTrans;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly List<SoundGroupCommand> GroupCommandsWithNoGroupSelector;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly List<SoundGroupCommand> GroupCommandsWithNoAllGroupSelector;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F522C", Offset = "0x12F522C")]
		private static bool <AppIsShuttingDown>k__BackingField;

		[Token(Token = "0x170000CE")]
		public static float PlaylistMasterVolume
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0x1697914", Offset = "0x1697914", VA = "0x1697914")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0x16844F8", Offset = "0x16844F8", VA = "0x16844F8")]
			set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		public static bool LogSoundsEnabled
		{
			[Token(Token = "0x6000C8A")]
			[Address(RVA = "0x16987A8", Offset = "0x16987A8", VA = "0x16987A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0x1698814", Offset = "0x1698814", VA = "0x1698814")]
			set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		public static bool LogOutOfVoices
		{
			[Token(Token = "0x6000C8C")]
			[Address(RVA = "0x168F044", Offset = "0x168F044", VA = "0x168F044")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C8D")]
			[Address(RVA = "0x1698888", Offset = "0x1698888", VA = "0x1698888")]
			set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public static List<AudioSource> MasterAudioSources
		{
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0x1699954", Offset = "0x1699954", VA = "0x1699954")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D2")]
		public static Transform ListenerTrans
		{
			[Token(Token = "0x6000CA1")]
			[Address(RVA = "0x166A90C", Offset = "0x166A90C", VA = "0x166A90C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D3")]
		public static PlaylistController OnlyPlaylistController
		{
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0x1699A98", Offset = "0x1699A98", VA = "0x1699A98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D4")]
		public static bool IsWarming
		{
			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0x167AAC0", Offset = "0x167AAC0", VA = "0x167AAC0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D5")]
		public static bool MixerMuted
		{
			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0x1699B30", Offset = "0x1699B30", VA = "0x1699B30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0x1695904", Offset = "0x1695904", VA = "0x1695904")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public static bool PlaylistsMuted
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x1699B9C", Offset = "0x1699B9C", VA = "0x1699B9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0x1696994", Offset = "0x1696994", VA = "0x1696994")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public bool EnableMusicDucking
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x1699C08", Offset = "0x1699C08", VA = "0x1699C08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0x1699C10", Offset = "0x1699C10", VA = "0x1699C10")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public float MasterCrossFadeTime
		{
			[Token(Token = "0x6000CAA")]
			[Address(RVA = "0x1699C1C", Offset = "0x1699C1C", VA = "0x1699C1C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000D9")]
		public static List<Playlist> MusicPlaylists
		{
			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0x169660C", Offset = "0x169660C", VA = "0x169660C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DA")]
		public static List<GroupBus> GroupBuses
		{
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0x1692E94", Offset = "0x1692E94", VA = "0x1692E94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DB")]
		public static List<string> RuntimeSoundGroupNames
		{
			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0x167F38C", Offset = "0x167F38C", VA = "0x167F38C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DC")]
		public static List<string> RuntimeBusNames
		{
			[Token(Token = "0x6000CAE")]
			[Address(RVA = "0x16819CC", Offset = "0x16819CC", VA = "0x16819CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DD")]
		public static MasterAudio SafeInstance
		{
			[Token(Token = "0x6000CAF")]
			[Address(RVA = "0x166870C", Offset = "0x166870C", VA = "0x166870C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DE")]
		public static MasterAudio Instance
		{
			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0x16691AC", Offset = "0x16691AC", VA = "0x16691AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0x1699C24", Offset = "0x1699C24", VA = "0x1699C24")]
			set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		public static bool SoundsReady
		{
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0x1674744", Offset = "0x1674744", VA = "0x1674744")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E0")]
		public static bool AppIsShuttingDown
		{
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0x1699C90", Offset = "0x1699C90", VA = "0x1699C90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F70F0", Offset = "0x12F70F0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0x1699CF8", Offset = "0x1699CF8", VA = "0x1699CF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F7100", Offset = "0x12F7100")]
			set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		public List<string> GroupNames
		{
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0x1699D68", Offset = "0x1699D68", VA = "0x1699D68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E2")]
		public static List<string> SoundGroupHardCodedNames
		{
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0x166A2CC", Offset = "0x166A2CC", VA = "0x166A2CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E3")]
		public List<string> BusNames
		{
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0x169A0A4", Offset = "0x169A0A4", VA = "0x169A0A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E4")]
		public List<string> PlaylistNames
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0x169A1B0", Offset = "0x169A1B0", VA = "0x169A1B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E5")]
		public List<string> PlaylistNamesOnly
		{
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0x169A2BC", Offset = "0x169A2BC", VA = "0x169A2BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E6")]
		public Transform Trans
		{
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0x166AFC4", Offset = "0x166AFC4", VA = "0x166AFC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E7")]
		public bool ShouldShowUnityAudioMixerGroupAssignments
		{
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0x169A3A8", Offset = "0x169A3A8", VA = "0x169A3A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E8")]
		public List<string> CustomEventNames
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0x169A3B0", Offset = "0x169A3B0", VA = "0x169A3B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E9")]
		public List<string> CustomEventNamesOnly
		{
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0x169A534", Offset = "0x169A534", VA = "0x169A534")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EA")]
		public static List<string> CustomEventHardCodedNames
		{
			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0x169A490", Offset = "0x169A490", VA = "0x169A490")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		public static float MasterVolumeLevel
		{
			[Token(Token = "0x6000CBF")]
			[Address(RVA = "0x169A644", Offset = "0x169A644", VA = "0x169A644")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0x16843AC", Offset = "0x16843AC", VA = "0x16843AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		private static bool SceneHasMasterAudio
		{
			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0x168D2FC", Offset = "0x168D2FC", VA = "0x168D2FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000ED")]
		public static bool IgnoreTimeScale
		{
			[Token(Token = "0x6000CC2")]
			[Address(RVA = "0x16734D8", Offset = "0x16734D8", VA = "0x16734D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EE")]
		public static SystemLanguage DynamicLanguage
		{
			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0x166C60C", Offset = "0x166C60C", VA = "0x166C60C")]
			get
			{
				return default(SystemLanguage);
			}
			[Token(Token = "0x6000CC4")]
			[Address(RVA = "0x169A6B0", Offset = "0x169A6B0", VA = "0x169A6B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public static float ReprioritizeTime
		{
			[Token(Token = "0x6000CC5")]
			[Address(RVA = "0x169A774", Offset = "0x169A774", VA = "0x169A774")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000F0")]
		public static bool ShouldRescanGroups
		{
			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0x169A8C8", Offset = "0x169A8C8", VA = "0x169A8C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F1")]
		public static string ProspectiveMAPath
		{
			[Token(Token = "0x6000CCA")]
			[Address(RVA = "0x169A99C", Offset = "0x169A99C", VA = "0x169A99C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0x169AA04", Offset = "0x169AA04", VA = "0x169AA04")]
			set
			{
			}
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x16896FC", Offset = "0x16896FC", VA = "0x16896FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x168B190", Offset = "0x168B190", VA = "0x168B190")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x168B2E8", Offset = "0x168B2E8", VA = "0x168B2E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x168B58C", Offset = "0x168B58C", VA = "0x168B58C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x168C674", Offset = "0x168C674", VA = "0x168C674")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x168C710", Offset = "0x168C710", VA = "0x168C710")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x168C684", Offset = "0x168C684", VA = "0x168C684")]
		private void ManualUpdate()
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x168CB70", Offset = "0x168CB70", VA = "0x168CB70")]
		public static void RegisterUpdaterForUpdates(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x168CC40", Offset = "0x168CC40", VA = "0x168CC40")]
		public static void UnregisterUpdaterForUpdates(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x168C9E8", Offset = "0x168C9E8", VA = "0x168C9E8")]
		private void UpdateActiveVariations()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x168CCC4", Offset = "0x168CCC4", VA = "0x168CCC4")]
		private static void UpdateRefillTime(string sType, float inactivePeriodSeconds)
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x168C724", Offset = "0x168C724", VA = "0x168C724")]
		private static void RecalcClosestColliderPositions()
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x168C5A8", Offset = "0x168C5A8", VA = "0x168C5A8")]
		private static void FireCustomEventsWaiting()
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x168C304", Offset = "0x168C304", VA = "0x168C304")]
		private static void RefillInactiveGroupPools()
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x168B620", Offset = "0x168B620", VA = "0x168B620")]
		private static void PerformOcclusionFrequencyChanges()
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x168B91C", Offset = "0x168B91C", VA = "0x168B91C")]
		private void PerformBusFades()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x168BDE4", Offset = "0x168BDE4", VA = "0x168BDE4")]
		private void PerformGroupFades()
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x168C140", Offset = "0x168C140", VA = "0x168C140")]
		private void PerformGroupPitchGlides()
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x168BC24", Offset = "0x168BC24", VA = "0x168BC24")]
		private void PerformBusPitchGlides()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x168D254", Offset = "0x168D254", VA = "0x168D254")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x16727DC", Offset = "0x16727DC", VA = "0x16727DC")]
		public static bool PlaySoundAndForget(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x167D1F8", Offset = "0x167D1F8", VA = "0x167D1F8")]
		public static PlaySoundResult PlaySound(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x168EA34", Offset = "0x168EA34", VA = "0x168EA34")]
		public static bool PlaySound3DAtVector3AndForget(string sType, Vector3 sourcePosition, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x168EBE4", Offset = "0x168EBE4", VA = "0x168EBE4")]
		public static PlaySoundResult PlaySound3DAtVector3(string sType, Vector3 sourcePosition, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return null;
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x166FB24", Offset = "0x166FB24", VA = "0x166FB24")]
		public static bool PlaySound3DAtTransformAndForget(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x166FDC8", Offset = "0x166FDC8", VA = "0x166FDC8")]
		public static PlaySoundResult PlaySound3DAtTransform(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x1670098", Offset = "0x1670098", VA = "0x1670098")]
		public static bool PlaySound3DFollowTransformAndForget(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x167033C", Offset = "0x167033C", VA = "0x167033C")]
		public static PlaySoundResult PlaySound3DFollowTransform(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x168EDBC", Offset = "0x168EDBC", VA = "0x168EDBC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F5FC4", Offset = "0x12F5FC4")]
		public static IEnumerator PlaySoundAndWaitUntilFinished(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x1670624", Offset = "0x1670624", VA = "0x1670624")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F7028", Offset = "0x12F7028")]
		public static IEnumerator PlaySound3DAtTransformAndWaitUntilFinished(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x16707E4", Offset = "0x16707E4", VA = "0x16707E4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F708C", Offset = "0x12F708C")]
		public static IEnumerator PlaySound3DFollowTransformAndWaitUntilFinished(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x168EA10", Offset = "0x168EA10", VA = "0x168EA10")]
		public static bool PSRAsSuccessBool(PlaySoundResult psr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x168D390", Offset = "0x168D390", VA = "0x168D390")]
		private static PlaySoundResult PlaySoundAtVolume(string sType, float volumePercentage, Vector3 sourcePosition, double? timeToSchedulePlay, [Optional] float? pitch, [Optional] Transform sourceTrans, [Optional] string variationName, bool attachToSource = false, float delaySoundTime = 0f, bool useVector3 = false, bool makePlaySoundResult = false, bool isChaining = false, bool isSingleSubscribedPlay = false, bool triggeredAsChildGroup = false)
		{
			return null;
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x168F540", Offset = "0x168F540", VA = "0x168F540")]
		private static void MaybeChainNextVar(bool isChaining, SoundGroupVariation variation, float volumePercentage, float? pitch, Transform sourceTrans, bool attachToSource)
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x168F008", Offset = "0x168F008", VA = "0x168F008")]
		private static void SetLastPlayed(AudioGroupInfo grp)
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x168F344", Offset = "0x168F344", VA = "0x168F344")]
		private static void RemoveClipAndRefillIfEmpty(AudioGroupInfo grp, bool isNonSpecific, int? randomIndex, List<int> choices, string sType, int pickedChoice, bool loggingEnabledForGrp, bool isSingleVarLoop)
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x168F574", Offset = "0x168F574", VA = "0x168F574")]
		private static PlaySoundResult PlaySoundIfAvailable(AudioInfo info, Vector3 sourcePosition, float volumePercentage, ref bool forgetSoundPlayed, [Optional] float? pitch, [Optional] AudioGroupInfo audioGroup, [Optional] Transform sourceTrans, bool attachToSource = false, float delaySoundTime = 0f, bool useVector3 = false, bool makePlaySoundResult = false, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x168FC2C", Offset = "0x168FC2C", VA = "0x168FC2C")]
		public static void DuckSoundGroup(string soundGroupName, AudioSource aSource)
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x168FDDC", Offset = "0x168FDDC", VA = "0x168FDDC")]
		private static void StopPauseOrUnpauseSoundsOfTransform(Transform trans, List<AudioInfo> varList, VariationCommand varCmd)
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x1670F1C", Offset = "0x1670F1C", VA = "0x1670F1C")]
		public static void StopAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x1668B9C", Offset = "0x1668B9C", VA = "0x1668B9C")]
		public static void StopSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x1670944", Offset = "0x1670944", VA = "0x1670944")]
		public static void PauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x1670D40", Offset = "0x1670D40", VA = "0x1670D40")]
		public static void PauseSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x16713FC", Offset = "0x16713FC", VA = "0x16713FC")]
		public static void UnpauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x16717F8", Offset = "0x16717F8", VA = "0x16717F8")]
		public static void UnpauseSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x16809CC", Offset = "0x16809CC", VA = "0x16809CC")]
		public static void FadeOutAllSoundsOfTransform(Transform sourceTrans, float fadeTime)
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x1668D14", Offset = "0x1668D14", VA = "0x1668D14")]
		public static void FadeOutSoundGroupOfTransform(Transform sourceTrans, string sType, float fadeTime)
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x168034C", Offset = "0x168034C", VA = "0x168034C")]
		public static void StopAllOfSound(string sType)
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x16901DC", Offset = "0x16901DC", VA = "0x16901DC")]
		public static void StopAllOfSound(AudioGroupInfo groupInfo, string sType)
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x167F5AC", Offset = "0x167F5AC", VA = "0x167F5AC")]
		public static void FadeOutAllOfSound(string sType, float fadeTime)
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x1690428", Offset = "0x1690428", VA = "0x1690428")]
		public static List<SoundGroupVariation> GetAllPlayingVariations()
		{
			return null;
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x166F7D0", Offset = "0x166F7D0", VA = "0x166F7D0")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransform(Transform sourceTrans)
		{
			return null;
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x16906A0", Offset = "0x16906A0", VA = "0x16906A0")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransformList(List<Transform> sourceTransList)
		{
			return null;
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x16909C4", Offset = "0x16909C4", VA = "0x16909C4")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsInBus(string busName)
		{
			return null;
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x1690B94", Offset = "0x1690B94", VA = "0x1690B94")]
		public static void DeleteGroupVariation(string sType, string variationName)
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x16918AC", Offset = "0x16918AC", VA = "0x16918AC")]
		public static void CreateGroupVariationFromClip(string sType, AudioClip clip, string variationName, float volume = 1f, float pitch = 1f)
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x1691EA8", Offset = "0x1691EA8", VA = "0x1691EA8")]
		public static void ChangeVariationPitch(string sType, bool changeAllVariations, string variationName, float pitch)
		{
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x16921EC", Offset = "0x16921EC", VA = "0x16921EC")]
		public static void ChangeVariationVolume(string sType, bool changeAllVariations, string variationName, float volume)
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x16924C8", Offset = "0x16924C8", VA = "0x16924C8")]
		public static void ChangeVariationClipFromResources(string sType, bool changeAllVariations, string variationName, string resourceFileName)
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x1692678", Offset = "0x1692678", VA = "0x1692678")]
		public static void ChangeVariationClip(string sType, bool changeAllVariations, string variationName, AudioClip clip)
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x16928F0", Offset = "0x16928F0", VA = "0x16928F0")]
		public static void GradualOcclusionFreqChange(SoundGroupVariation variation, float fadeTime, float newCutoffFreq)
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x1692BB8", Offset = "0x1692BB8", VA = "0x1692BB8")]
		public static AudioSource GetNextVariationForSoundGroup(string sType)
		{
			return null;
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x167F474", Offset = "0x167F474", VA = "0x167F474")]
		public static bool IsSoundGroupPlaying(string sType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x16719E4", Offset = "0x16719E4", VA = "0x16719E4")]
		public static bool IsTransformPlayingSoundGroup(string sType, Transform sourceTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x1680B64", Offset = "0x1680B64", VA = "0x1680B64")]
		public static void RouteGroupToBus(string sType, string busName)
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x1693144", Offset = "0x1693144", VA = "0x1693144")]
		public static float GetVariationLength(string sType, string variationName)
		{
			return default(float);
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x167F7C8", Offset = "0x167F7C8", VA = "0x167F7C8")]
		public static void RefillSoundGroupPool(string sType)
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x16939C0", Offset = "0x16939C0", VA = "0x16939C0")]
		public static bool SoundGroupExists(string sType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x16800A0", Offset = "0x16800A0", VA = "0x16800A0")]
		public static void PauseSoundGroup(string sType)
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x1693A60", Offset = "0x1693A60", VA = "0x1693A60")]
		public static void PauseSoundGroup(AudioGroupInfo groupInfo, string sType)
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x1693B78", Offset = "0x1693B78", VA = "0x1693B78")]
		public static void SetGroupSpatialBlend(string sType)
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x1693CC4", Offset = "0x1693CC4", VA = "0x1693CC4")]
		public static void RouteGroupToUnityMixerGroup(string sType, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x1680758", Offset = "0x1680758", VA = "0x1680758")]
		public static void UnpauseSoundGroup(string sType)
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x1693E30", Offset = "0x1693E30", VA = "0x1693E30")]
		public static void UnpauseSoundGroup(AudioGroupInfo groupInfo, string sType)
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x167FBD0", Offset = "0x167FBD0", VA = "0x167FBD0")]
		public static void FadeSoundGroupToVolume(string sType, float newVolume, float fadeTime, [Optional] Action completionCallback, bool willStopAfterFade = false, bool willResetVolumeAfterFade = false)
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x168181C", Offset = "0x168181C", VA = "0x168181C")]
		public static void FadeOutOldSoundGroupVoices(string sType, float minimumPlayTime, float fadeTime)
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x1681688", Offset = "0x1681688", VA = "0x1681688")]
		public static void StopOldSoundGroupVoices(string sType, float minimumPlayTime)
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x1681198", Offset = "0x1681198", VA = "0x1681198")]
		public static void GlideSoundGroupByPitch(string sType, float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x1675494", Offset = "0x1675494", VA = "0x1675494")]
		public static void DeleteSoundGroup(string sType)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x1676228", Offset = "0x1676228", VA = "0x1676228")]
		public static Transform CreateSoundGroup(DynamicSoundGroup aGroup, string creatorObjectName, bool errorOnExisting = true)
		{
			return null;
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x1694178", Offset = "0x1694178", VA = "0x1694178")]
		public static float GetGroupVolume(string sType)
		{
			return default(float);
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x168CE38", Offset = "0x168CE38", VA = "0x168CE38")]
		public static void SetGroupVolume(string sType, float volumeLevel)
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x1694230", Offset = "0x1694230", VA = "0x1694230")]
		public static void SetGroupVolume(AudioGroupInfo theGroup, string sType, float volumeLevel)
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x167FF68", Offset = "0x167FF68", VA = "0x167FF68")]
		public static void MuteGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x1680650", Offset = "0x1680650", VA = "0x1680650")]
		public static void UnmuteGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x168AF30", Offset = "0x168AF30", VA = "0x168AF30")]
		private static void AddRuntimeGroupInfo(string groupName, AudioGroupInfo groupInfo)
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x1694714", Offset = "0x1694714", VA = "0x1694714")]
		private static void FireAudioSourcesNumberChangedEvent()
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x16945B8", Offset = "0x16945B8", VA = "0x16945B8")]
		public static void TrackRuntimeAudioSources(List<AudioSource> sources)
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x168B378", Offset = "0x168B378", VA = "0x168B378")]
		public static void StopTrackingRuntimeAudioSources(List<AudioSource> sources)
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x1693F48", Offset = "0x1693F48", VA = "0x1693F48")]
		private static void RemoveRuntimeGroupInfo(string groupName)
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x16947BC", Offset = "0x16947BC", VA = "0x16947BC")]
		private static void RescanChildren(MasterAudioGroup group)
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x16944B4", Offset = "0x16944B4", VA = "0x16944B4")]
		private static void SetGroupMuteStatus(MasterAudioGroup aGroup, string sType, bool isMute)
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x1680210", Offset = "0x1680210", VA = "0x1680210")]
		public static void SoloGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x1675BD4", Offset = "0x1675BD4", VA = "0x1675BD4")]
		public static void SilenceOrUnsilenceGroupsFromSoloChange()
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x1694AD0", Offset = "0x1694AD0", VA = "0x1694AD0")]
		private static void UnsilenceNonSoloedGroups()
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x1694C48", Offset = "0x1694C48", VA = "0x1694C48")]
		private static void UnsilenceGroup(string sType)
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x1694950", Offset = "0x1694950", VA = "0x1694950")]
		private static void SilenceNonSoloedGroups()
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x1694D78", Offset = "0x1694D78", VA = "0x1694D78")]
		private static void SilenceGroup(string sType)
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x16808A4", Offset = "0x16808A4", VA = "0x16808A4")]
		public static void UnsoloGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x16688A8", Offset = "0x16688A8", VA = "0x16688A8")]
		public static MasterAudioGroup GrabGroup(string sType, bool logIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x168FFB4", Offset = "0x168FFB4", VA = "0x168FFB4")]
		public static MasterAudioGroup GrabGroup(AudioGroupInfo groupInfo, string sType, bool logIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x1694EA8", Offset = "0x1694EA8", VA = "0x1694EA8")]
		public static int VoicesForGroup(string sType)
		{
			return default(int);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x1694F88", Offset = "0x1694F88", VA = "0x1694F88")]
		public static Transform FindGroupTransform(string sType)
		{
			return null;
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x1695188", Offset = "0x1695188", VA = "0x1695188")]
		public static List<AudioInfo> GetAllVariationsOfGroup(string sType, bool logIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x16952C8", Offset = "0x16952C8", VA = "0x16952C8")]
		public static AudioGroupInfo GetGroupInfo(string sType)
		{
			return null;
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x1695398", Offset = "0x1695398", VA = "0x1695398")]
		public static void SubscribeToLastVariationPlayed(string sType, Action finishedCallback)
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x16954E4", Offset = "0x16954E4", VA = "0x16954E4")]
		public static void UnsubscribeFromLastVariationPlayed(string sType)
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x16955C8", Offset = "0x16955C8", VA = "0x16955C8")]
		public void SetSpatialBlendForMixer()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x16845C8", Offset = "0x16845C8", VA = "0x16845C8")]
		public static void PauseMixer()
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x1684738", Offset = "0x1684738", VA = "0x1684738")]
		public static void UnpauseMixer()
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x16848A8", Offset = "0x16848A8", VA = "0x16848A8")]
		public static void StopMixer()
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x16956F0", Offset = "0x16956F0", VA = "0x16956F0")]
		public static void UnsubscribeFromAllVariations()
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x1684BF4", Offset = "0x1684BF4", VA = "0x1684BF4")]
		public static void StopEverything()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x1684B34", Offset = "0x1684B34", VA = "0x1684B34")]
		public static void PauseEverything()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x1684B94", Offset = "0x1684B94", VA = "0x1684B94")]
		public static void UnpauseEverything()
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x1684A6C", Offset = "0x1684A6C", VA = "0x1684A6C")]
		public static void MuteEverything()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x1684AD0", Offset = "0x1684AD0", VA = "0x1684AD0")]
		public static void UnmuteEverything()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x1695C48", Offset = "0x1695C48", VA = "0x1695C48")]
		public static List<string> ListOfAudioClipsInGroupsEditTime()
		{
			return null;
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x168D0E4", Offset = "0x168D0E4", VA = "0x168D0E4")]
		private static int GetBusIndex(string busName, bool alertMissing)
		{
			return default(int);
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x1692F00", Offset = "0x1692F00", VA = "0x1692F00")]
		private static GroupBus GetBusByIndex(int busIndex)
		{
			return null;
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x1683090", Offset = "0x1683090", VA = "0x1683090")]
		public static void ChangeBusPitch(string busName, float pitch)
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x1682928", Offset = "0x1682928", VA = "0x1682928")]
		public static void MuteBus(string busName)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x1682AE8", Offset = "0x1682AE8", VA = "0x1682AE8")]
		public static void UnmuteBus(string busName, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x1682C64", Offset = "0x1682C64", VA = "0x1682C64")]
		public static void ToggleMuteBus(string busName)
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x1682500", Offset = "0x1682500", VA = "0x1682500")]
		public static void PauseBus(string busName)
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x1682D54", Offset = "0x1682D54", VA = "0x1682D54")]
		public static void SoloBus(string busName)
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x1682F14", Offset = "0x1682F14", VA = "0x1682F14")]
		public static void UnsoloBus(string busName, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x1695EC8", Offset = "0x1695EC8", VA = "0x1695EC8")]
		public static void RouteBusToUnityMixerGroup(string busName, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x168F0B0", Offset = "0x168F0B0", VA = "0x168F0B0")]
		private static void StopOldestSoundOnBus(GroupBus bus)
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x168265C", Offset = "0x168265C", VA = "0x168265C")]
		public static void StopBus(string busName)
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x16827EC", Offset = "0x16827EC", VA = "0x16827EC")]
		public static void UnpauseBus(string busName)
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x1675FC0", Offset = "0x1675FC0", VA = "0x1675FC0")]
		public static bool CreateBus(string busName, bool errorOnExisting = true, bool isTemporary = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x1675304", Offset = "0x1675304", VA = "0x1675304")]
		public static void DeleteBusByName(string busName)
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x1696020", Offset = "0x1696020", VA = "0x1696020")]
		public static void DeleteBusByIndex(int busIndex)
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x168FB74", Offset = "0x168FB74", VA = "0x168FB74")]
		public static float GetBusVolume(MasterAudioGroup maGroup)
		{
			return default(float);
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x1681B08", Offset = "0x1681B08", VA = "0x1681B08")]
		public static void FadeBusToVolume(string busName, float newVolume, float fadeTime, [Optional] Action completionCallback, bool willStopAfterFade = false, bool willResetVolumeAfterFade = false)
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x16833D8", Offset = "0x16833D8", VA = "0x16833D8")]
		public static void FadeOutOldBusVoices(string busName, float minimumPlayTime, float fadeTime)
		{
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x168320C", Offset = "0x168320C", VA = "0x168320C")]
		public static void StopOldBusVoices(string busName, float minimumPlayTime)
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x1681ED8", Offset = "0x1681ED8", VA = "0x1681ED8")]
		public static void GlideBusByPitch(string busName, float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x168B084", Offset = "0x168B084", VA = "0x168B084")]
		public static void SetBusVolumeByName(string busName, float newVolume)
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x16962DC", Offset = "0x16962DC", VA = "0x16962DC")]
		private static void RecalculateGroupVolumes(AudioGroupInfo aGroup, GroupBus bus)
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x1692FA0", Offset = "0x1692FA0", VA = "0x1692FA0")]
		private static void SetBusVolume(GroupBus bus, float newVolume)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x1675ED0", Offset = "0x1675ED0", VA = "0x1675ED0")]
		public static GroupBus GrabBusByName(string busName)
		{
			return null;
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x1670B60", Offset = "0x1670B60", VA = "0x1670B60")]
		public static void PauseBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x1671618", Offset = "0x1671618", VA = "0x1671618")]
		public static void UnpauseBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x1671164", Offset = "0x1671164", VA = "0x1671164")]
		public static void StopBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x167734C", Offset = "0x167734C", VA = "0x167734C")]
		public static void AddSoundGroupToDuckList(string sType, float riseVolumeStart, float duckedVolCut, float unduckTime, bool isTemporary = false)
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x16753A4", Offset = "0x16753A4", VA = "0x16753A4")]
		public static void RemoveSoundGroupFromDuckList(string sType)
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x1696494", Offset = "0x1696494", VA = "0x1696494")]
		public static Playlist GrabPlaylist(string playlistName, bool logErrorIfNotFound = true)
		{
			return null;
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x1696678", Offset = "0x1696678", VA = "0x1696678")]
		public static void ChangePlaylistPitch(string playlistName, float pitch, [Optional] string songName)
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x1696794", Offset = "0x1696794", VA = "0x1696794")]
		public static void MutePlaylist()
		{
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x167E074", Offset = "0x167E074", VA = "0x167E074")]
		public static void MutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x167E004", Offset = "0x167E004", VA = "0x167E004")]
		public static void MuteAllPlaylists()
		{
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x16968C0", Offset = "0x16968C0", VA = "0x16968C0")]
		private static void MutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x1696A74", Offset = "0x1696A74", VA = "0x1696A74")]
		public static void UnmutePlaylist()
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x167E288", Offset = "0x167E288", VA = "0x167E288")]
		public static void UnmutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x167E218", Offset = "0x167E218", VA = "0x167E218")]
		public static void UnmuteAllPlaylists()
		{
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x1696ADC", Offset = "0x1696ADC", VA = "0x1696ADC")]
		private static void UnmutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x1696BB0", Offset = "0x1696BB0", VA = "0x1696BB0")]
		public static void ToggleMutePlaylist()
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x167E49C", Offset = "0x167E49C", VA = "0x167E49C")]
		public static void ToggleMutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x167E42C", Offset = "0x167E42C", VA = "0x167E42C")]
		public static void ToggleMuteAllPlaylists()
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x1696C18", Offset = "0x1696C18", VA = "0x1696C18")]
		private static void ToggleMutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x1696CA8", Offset = "0x1696CA8", VA = "0x1696CA8")]
		public static void PausePlaylist()
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x167EDC0", Offset = "0x167EDC0", VA = "0x167EDC0")]
		public static void PausePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x167ED50", Offset = "0x167ED50", VA = "0x167ED50")]
		public static void PauseAllPlaylists()
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x1696D10", Offset = "0x1696D10", VA = "0x1696D10")]
		private static void PausePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x1696DA0", Offset = "0x1696DA0", VA = "0x1696DA0")]
		public static void UnpausePlaylist()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x167F1E8", Offset = "0x167F1E8", VA = "0x167F1E8")]
		public static void UnpausePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x167F178", Offset = "0x167F178", VA = "0x167F178")]
		public static void UnpauseAllPlaylists()
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x1696E08", Offset = "0x1696E08", VA = "0x1696E08")]
		private static void UnpausePlaylists(List<PlaylistController> controllers)
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x1696E98", Offset = "0x1696E98", VA = "0x1696E98")]
		public static void StopPlaylist()
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x167EFD4", Offset = "0x167EFD4", VA = "0x167EFD4")]
		public static void StopPlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x167EF64", Offset = "0x167EF64", VA = "0x167EF64")]
		public static void StopAllPlaylists()
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x1696F00", Offset = "0x1696F00", VA = "0x1696F00")]
		private static void StopPlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x1696F94", Offset = "0x1696F94", VA = "0x1696F94")]
		public static void TriggerNextPlaylistClip()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x167EBAC", Offset = "0x167EBAC", VA = "0x167EBAC")]
		public static void TriggerNextPlaylistClip(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x167EB3C", Offset = "0x167EB3C", VA = "0x167EB3C")]
		public static void TriggerNextClipAllPlaylists()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x1696FFC", Offset = "0x1696FFC", VA = "0x1696FFC")]
		private static void NextPlaylistClips(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x169708C", Offset = "0x169708C", VA = "0x169708C")]
		public static void TriggerRandomPlaylistClip()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x167E998", Offset = "0x167E998", VA = "0x167E998")]
		public static void TriggerRandomPlaylistClip(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x167E928", Offset = "0x167E928", VA = "0x167E928")]
		public static void TriggerRandomClipAllPlaylists()
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x16970F4", Offset = "0x16970F4", VA = "0x16970F4")]
		private static void RandomPlaylistClips(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x1697184", Offset = "0x1697184", VA = "0x1697184")]
		public static void RestartPlaylist()
		{
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x167D480", Offset = "0x167D480", VA = "0x167D480")]
		public static void RestartPlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x167D410", Offset = "0x167D410", VA = "0x167D410")]
		public static void RestartAllPlaylists()
		{
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x16971EC", Offset = "0x16971EC", VA = "0x16971EC")]
		private static void RestartPlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x169727C", Offset = "0x169727C", VA = "0x169727C")]
		public static void StartPlaylist(string playlistName)
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x167D634", Offset = "0x167D634", VA = "0x167D634")]
		public static void StartPlaylist(string playlistControllerName, string playlistName)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x167D974", Offset = "0x167D974", VA = "0x167D974")]
		public static void StopLoopingAllCurrentSongs()
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x169737C", Offset = "0x169737C", VA = "0x169737C")]
		public static void StopLoopingCurrentSong()
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x167D9E4", Offset = "0x167D9E4", VA = "0x167D9E4")]
		public static void StopLoopingCurrentSong(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x16972EC", Offset = "0x16972EC", VA = "0x16972EC")]
		private static void StopLoopingCurrentSongs(List<PlaylistController> playlistControllers)
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x167DB98", Offset = "0x167DB98", VA = "0x167DB98")]
		public static void StopAllPlaylistsAfterCurrentSongs()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x1697474", Offset = "0x1697474", VA = "0x1697474")]
		public static void StopPlaylistAfterCurrentSong()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x167DC08", Offset = "0x167DC08", VA = "0x167DC08")]
		public static void StopPlaylistAfterCurrentSong(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x16973E4", Offset = "0x16973E4", VA = "0x16973E4")]
		private static void StopPlaylistAfterCurrentSongs(List<PlaylistController> playlistControllers)
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x16974DC", Offset = "0x16974DC", VA = "0x16974DC")]
		public static void QueuePlaylistClip(string clipName)
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x167E7B4", Offset = "0x167E7B4", VA = "0x167E7B4")]
		public static void QueuePlaylistClip(string playlistControllerName, string clipName)
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x169754C", Offset = "0x169754C", VA = "0x169754C")]
		public static bool TriggerPlaylistClip(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x167E640", Offset = "0x167E640", VA = "0x167E640")]
		public static bool TriggerPlaylistClip(string playlistControllerName, string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x16975BC", Offset = "0x16975BC", VA = "0x16975BC")]
		public static void ChangePlaylistByName(string playlistName, bool playFirstClip = true)
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x167D7FC", Offset = "0x167D7FC", VA = "0x167D7FC")]
		public static void ChangePlaylistByName(string playlistControllerName, string playlistName, bool playFirstClip = true)
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x169763C", Offset = "0x169763C", VA = "0x169763C")]
		public static void FadePlaylistToVolume(float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x167DE44", Offset = "0x167DE44", VA = "0x167DE44")]
		public static void FadePlaylistToVolume(string playlistControllerName, float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x167DDBC", Offset = "0x167DDBC", VA = "0x167DDBC")]
		public static void FadeAllPlaylistsToVolume(float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x16976BC", Offset = "0x16976BC", VA = "0x16976BC")]
		private static void FadePlaylists(List<PlaylistController> playlists, float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x16779E4", Offset = "0x16779E4", VA = "0x16779E4")]
		public static void CreatePlaylist(Playlist playlist, bool errorOnDuplicate)
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x1675A20", Offset = "0x1675A20", VA = "0x1675A20")]
		public static void DeletePlaylist(string playlistName)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x16977FC", Offset = "0x16977FC", VA = "0x16977FC")]
		public static void AddSongToPlaylist(string playlistName, AudioClip song, bool loopSong = false, float songPitch = 1f, float songVolume = 1f)
		{
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x1697980", Offset = "0x1697980", VA = "0x1697980")]
		public static void AudioListenerChanged(AudioListener listener)
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x1697ABC", Offset = "0x1697ABC", VA = "0x1697ABC")]
		public static void ReDownloadAllInternetFiles()
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x1677B84", Offset = "0x1677B84", VA = "0x1677B84")]
		public static void FireCustomEventNextFrame(string customEventName, Transform eventOrigin)
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x1685224", Offset = "0x1685224", VA = "0x1685224")]
		public static void AddCustomEventReceiver(ICustomEventReceiver receiver, Transform receiverTrans)
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x1685648", Offset = "0x1685648", VA = "0x1685648")]
		public static void RemoveCustomEventReceiver(ICustomEventReceiver receiver)
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x1697ED0", Offset = "0x1697ED0", VA = "0x1697ED0")]
		public static List<Transform> ReceiversForEvent(string customEventName)
		{
			return null;
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x16774A0", Offset = "0x16774A0", VA = "0x16774A0")]
		public static CustomEventCategory CreateCustomEventCategoryIfNotThere(string categoryName, bool isTemporary)
		{
			return null;
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x16776A8", Offset = "0x16776A8", VA = "0x16776A8")]
		public static void CreateCustomEvent(string customEventName, CustomEventReceiveMode eventReceiveMode, float distanceThreshold, EventReceiveFilter receiveFilter, int filterModeQty, string categoryName = "", bool isTemporary = false, bool errorOnDuplicate = true)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x167585C", Offset = "0x167585C", VA = "0x167585C")]
		public static void DeleteCustomEvent(string customEventName)
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x169815C", Offset = "0x169815C", VA = "0x169815C")]
		public static CustomEvent GetCustomEventByName(string customEventName)
		{
			return null;
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x16835C0", Offset = "0x16835C0", VA = "0x16835C0")]
		public static void FireCustomEvent(string customEventName, Transform originObject, bool logDupe = true)
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x1684F10", Offset = "0x1684F10", VA = "0x1684F10")]
		public static bool CustomEventExists(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x1698274", Offset = "0x1698274", VA = "0x1698274")]
		private static List<ICustomEventReceiver> GetChildReceivers(Transform origin, string eventName, bool includeSelf)
		{
			return null;
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x16983C4", Offset = "0x16983C4", VA = "0x16983C4")]
		private static List<ICustomEventReceiver> GetParentReceivers(Transform origin, string eventName, bool includeSelf)
		{
			return null;
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x1698514", Offset = "0x1698514", VA = "0x1698514")]
		private static List<ICustomEventReceiver> FilterOutSelf(List<ICustomEventReceiver> sourceList, Transform origin)
		{
			return null;
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x168EE90", Offset = "0x168EE90", VA = "0x168EE90")]
		private static bool LoggingEnabledForGroup(MasterAudioGroup grp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x168EFA0", Offset = "0x168EFA0", VA = "0x168EFA0")]
		private static void LogMessage(string message)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x1669CD4", Offset = "0x1669CD4", VA = "0x1669CD4")]
		public static void LogWarning(string msg)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x1669A10", Offset = "0x1669A10", VA = "0x1669A10")]
		public static void LogWarningIfNeverLogged(string msg, int errorNumber)
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x166D98C", Offset = "0x166D98C", VA = "0x166D98C")]
		public static void LogError(string msg)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x16988FC", Offset = "0x16988FC", VA = "0x16988FC")]
		public static void LogNoPlaylist(string playlistControllerName, string methodName)
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x16967FC", Offset = "0x16967FC", VA = "0x16967FC")]
		private static bool IsOkToCallOnlyPlaylistMethod(List<PlaylistController> pcs, string methodName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x1698AE8", Offset = "0x1698AE8", VA = "0x1698AE8")]
		public static void QueueTransformFollowerForColliderPositionRecalc(TransformFollower follower)
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x1698CF4", Offset = "0x1698CF4", VA = "0x1698CF4")]
		public static void AddToQueuedOcclusionRays(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x1698F00", Offset = "0x1698F00", VA = "0x1698F00")]
		public static void AddToOcclusionInRangeSources(GameObject src)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x16990DC", Offset = "0x16990DC", VA = "0x16990DC")]
		public static void AddToOcclusionOutOfRangeSources(GameObject src)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x1699440", Offset = "0x1699440", VA = "0x1699440")]
		public static void AddToBlockedOcclusionSources(GameObject src)
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x16995A8", Offset = "0x16995A8", VA = "0x16995A8")]
		public static bool HasQueuedOcclusionRays()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x1699624", Offset = "0x1699624", VA = "0x1699624")]
		public static SoundGroupVariationUpdater OldestQueuedOcclusionRay()
		{
			return null;
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x1692A90", Offset = "0x1692A90", VA = "0x1692A90")]
		public static bool IsOcclusionFreqencyTransitioning(SoundGroupVariation variation)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x1691740", Offset = "0x1691740", VA = "0x1691740")]
		public static void RemoveFromOcclusionFrequencyTransitioning(SoundGroupVariation variation)
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x16992D8", Offset = "0x16992D8", VA = "0x16992D8")]
		public static void RemoveFromBlockedOcclusionSources(GameObject src)
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x1699704", Offset = "0x1699704", VA = "0x1699704")]
		public static void StopTrackingOcclusionForSource(GameObject src)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x1690120", Offset = "0x1690120", VA = "0x1690120")]
		private static bool IsLinkedGroupPlay(SoundGroupVariation variation)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x16999C0", Offset = "0x16999C0", VA = "0x16999C0")]
		public static int RemainingClipsInGroup(string sType)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x169A854", Offset = "0x169A854", VA = "0x169A854")]
		public static bool HasAsyncResourceLoaderFeature()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x1694108", Offset = "0x1694108", VA = "0x1694108")]
		public static void RescanGroupsNow()
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x169A85C", Offset = "0x169A85C", VA = "0x169A85C")]
		public static void DoneRescanningGroups()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x169AA74", Offset = "0x169AA74", VA = "0x169AA74")]
		public static GameObject CreateMasterAudio()
		{
			return null;
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x169ABE0", Offset = "0x169ABE0", VA = "0x169ABE0")]
		public static GameObject CreatePlaylistController()
		{
			return null;
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x169AD4C", Offset = "0x169AD4C", VA = "0x169AD4C")]
		public static GameObject CreateDynamicSoundGroupCreator()
		{
			return null;
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x169AEB8", Offset = "0x169AEB8", VA = "0x169AEB8")]
		public static GameObject CreateSoundGroupOrganizer()
		{
			return null;
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x169B024", Offset = "0x169B024", VA = "0x169B024")]
		public MasterAudio()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public static class PersistentAudioSettings
	{
		[Token(Token = "0x4000BF4")]
		public const string SfxVolKey = "MA_sfxVolume";

		[Token(Token = "0x4000BF5")]
		public const string MusicVolKey = "MA_musicVolume";

		[Token(Token = "0x4000BF6")]
		public const string SfxMuteKey = "MA_sfxMute";

		[Token(Token = "0x4000BF7")]
		public const string MusicMuteKey = "MA_musicMute";

		[Token(Token = "0x4000BF8")]
		public const string BusVolKey = "MA_BusVolume_";

		[Token(Token = "0x4000BF9")]
		public const string GroupVolKey = "MA_GroupVolume_";

		[Token(Token = "0x4000BFA")]
		public const string BusKeysKey = "MA_BusKeys";

		[Token(Token = "0x4000BFB")]
		public const string GroupKeysKey = "MA_GroupsKeys";

		[Token(Token = "0x4000BFC")]
		public const string Separator = ";";

		[Token(Token = "0x170000F2")]
		public static string BusesUpdatedKeys
		{
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0x23439A8", Offset = "0x23439A8", VA = "0x23439A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD4")]
			[Address(RVA = "0x2343A1C", Offset = "0x2343A1C", VA = "0x2343A1C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public static string GroupsUpdatedKeys
		{
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0x2343B58", Offset = "0x2343B58", VA = "0x2343B58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0x2343BCC", Offset = "0x2343BCC", VA = "0x2343BCC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public static bool? MixerMuted
		{
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0x2343E6C", Offset = "0x2343E6C", VA = "0x2343E6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDD")]
			[Address(RVA = "0x2343EFC", Offset = "0x2343EFC", VA = "0x2343EFC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F5")]
		public static float? MixerVolume
		{
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0x2344030", Offset = "0x2344030", VA = "0x2344030")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0x23440B8", Offset = "0x23440B8", VA = "0x23440B8")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public static bool? MusicMuted
		{
			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0x23441E0", Offset = "0x23441E0", VA = "0x23441E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE1")]
			[Address(RVA = "0x2344270", Offset = "0x2344270", VA = "0x2344270")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public static float? MusicVolume
		{
			[Token(Token = "0x6000CE2")]
			[Address(RVA = "0x23443A4", Offset = "0x23443A4", VA = "0x23443A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE3")]
			[Address(RVA = "0x234442C", Offset = "0x234442C", VA = "0x234442C")]
			set
			{
			}
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x23437D0", Offset = "0x23437D0", VA = "0x23437D0")]
		public static void SetBusVolume(string busName, float vol)
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x2343954", Offset = "0x2343954", VA = "0x2343954")]
		public static string MakeBusKey(string busName)
		{
			return null;
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x2343A70", Offset = "0x2343A70", VA = "0x2343A70")]
		public static float? GetBusVolume(string busName)
		{
			return null;
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x2343B04", Offset = "0x2343B04", VA = "0x2343B04")]
		public static string GetGroupKey(string groupName)
		{
			return null;
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x2343C20", Offset = "0x2343C20", VA = "0x2343C20")]
		public static void SetGroupVolume(string grpName, float vol)
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x2343DD8", Offset = "0x2343DD8", VA = "0x2343DD8")]
		public static float? GetGroupVolume(string grpName)
		{
			return null;
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x2344554", Offset = "0x2344554", VA = "0x2344554")]
		public static void RestoreMasterSettings()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	public class SoundGroupOrganizer : MonoBehaviour
	{
		[Token(Token = "0x2000271")]
		public class CustomEventSelection
		{
			[Token(Token = "0x4000FC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CustomEvent Event;

			[Token(Token = "0x4000FC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool IsSelected;

			[Token(Token = "0x6000EEF")]
			[Address(RVA = "0x234CAE8", Offset = "0x234CAE8", VA = "0x234CAE8")]
			public CustomEventSelection(CustomEvent cEvent, bool isSelected)
			{
			}
		}

		[Token(Token = "0x2000272")]
		public class SoundGroupSelection
		{
			[Token(Token = "0x4000FC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject Go;

			[Token(Token = "0x4000FC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool IsSelected;

			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0x234CB34", Offset = "0x234CB34", VA = "0x234CB34")]
			public SoundGroupSelection(GameObject go, bool isSelected)
			{
			}
		}

		[Token(Token = "0x2000273")]
		public enum MAItemType
		{
			[Token(Token = "0x4000FC7")]
			SoundGroups,
			[Token(Token = "0x4000FC8")]
			CustomEvents
		}

		[Token(Token = "0x2000274")]
		public enum TransferMode
		{
			[Token(Token = "0x4000FCA")]
			None,
			[Token(Token = "0x4000FCB")]
			Import,
			[Token(Token = "0x4000FCC")]
			Export
		}

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject dynGroupTemplate;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject dynVariationTemplate;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject maGroupTemplate;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject maVariationTemplate;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MasterAudio.DragGroupMode curDragGroupMode;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SystemLanguage previewLanguage;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useTextGroupFilter;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string textGroupFilter;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TransferMode transMode;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject sourceObject;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SoundGroupSelection> selectedSourceSoundGroups;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject destObject;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<SoundGroupSelection> selectedDestSoundGroups;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public MAItemType itemType;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<CustomEventSelection> selectedSourceCustomEvents;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<CustomEventSelection> selectedDestCustomEvents;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<CustomEvent> customEvents;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string newEventName;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x234C870", Offset = "0x234C870", VA = "0x234C870")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x234C8DC", Offset = "0x234C8DC", VA = "0x234C8DC")]
		public SoundGroupOrganizer()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	public static class AmbientUtil
	{
		[Token(Token = "0x2000275")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3C64", Offset = "0x12F3C64")]
		private sealed class <>c__DisplayClass11_0
		{
			[Token(Token = "0x4000FCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string variationName;

			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0x166AFA4", Offset = "0x166AFA4", VA = "0x166AFA4")]
			public <>c__DisplayClass11_0()
			{
			}

			[Token(Token = "0x6000EF2")]
			[Address(RVA = "0x166B358", Offset = "0x166B358", VA = "0x166B358")]
			internal bool <InitAudioSourceFollower>b__0(SoundGroupVariation v)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000C13")]
		public const string FollowerHolderName = "_Followers";

		[Token(Token = "0x4000C14")]
		public const string ListenerFollowerName = "~ListenerFollower~";

		[Token(Token = "0x4000C15")]
		public const float ListenerFollowerTrigRadius = 0.01f;

		[Token(Token = "0x4000C16")]
		public const int IgnoreRaycastLayerNumber = 2;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform _followerHolder;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ListenerFollower _listenerFollower;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Rigidbody _listenerFollowerRB;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static List<TransformFollower> _transformFollowers;

		[Token(Token = "0x170000F8")]
		public static ListenerFollower ListenerFollower
		{
			[Token(Token = "0x6000CEB")]
			[Address(RVA = "0x166AB14", Offset = "0x166AB14", VA = "0x166AB14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F9")]
		public static Transform FollowerHolder
		{
			[Token(Token = "0x6000CEC")]
			[Address(RVA = "0x166A4BC", Offset = "0x166A4BC", VA = "0x166A4BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FA")]
		public static bool HasListenerFollower
		{
			[Token(Token = "0x6000CEF")]
			[Address(RVA = "0x166B248", Offset = "0x166B248", VA = "0x166B248")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FB")]
		public static bool HasListenerFolowerRigidBody
		{
			[Token(Token = "0x6000CF0")]
			[Address(RVA = "0x1669C3C", Offset = "0x1669C3C", VA = "0x1669C3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x166A410", Offset = "0x166A410", VA = "0x166A410")]
		public static void InitFollowerHolder()
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x1669B1C", Offset = "0x1669B1C", VA = "0x1669B1C")]
		public static bool InitListenerFollower()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x166AF20", Offset = "0x166AF20", VA = "0x166AF20")]
		public static void RemoveTransformFollower(TransformFollower follower)
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x1669D7C", Offset = "0x1669D7C", VA = "0x1669D7C")]
		public static Transform InitAudioSourceFollower(Transform transToFollow, string followerName, string soundGroupName, string variationName, float volume, bool willFollowSource, bool willPositionOnClosestColliderPoint, bool useTopCollider, bool useChildColliders, MasterAudio.AmbientSoundExitMode exitMode, float exitFadeTime, MasterAudio.AmbientSoundReEnterMode reEnterMode, float reEnterFadeTime)
		{
			return null;
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x166B070", Offset = "0x166B070", VA = "0x166B070")]
		public static void ManualUpdate()
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x166B16C", Offset = "0x166B16C", VA = "0x166B16C")]
		private static void UpdateListenerFollower()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	public static class ArrayListUtil
	{
		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x166B390", Offset = "0x166B390", VA = "0x166B390")]
		public static void SortIntArray(ref List<int> list)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x166B4A0", Offset = "0x166B4A0", VA = "0x166B4A0")]
		public static bool IsExcludedChildName(string name)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001B0")]
	public static class AudioTransformExtensions
	{
		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x166F6E8", Offset = "0x166F6E8", VA = "0x166F6E8")]
		public static void FadeOutSoundGroupOfTransform(this Transform sourceTrans, string sType, float fadeTime)
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x166F76C", Offset = "0x166F76C", VA = "0x166F76C")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransform(this Transform sourceTrans)
		{
			return null;
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x166FA78", Offset = "0x166FA78", VA = "0x166FA78")]
		public static bool PlaySound3DAtTransformAndForget(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x166FD08", Offset = "0x166FD08", VA = "0x166FD08")]
		public static PlaySoundResult PlaySound3DAtTransform(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return null;
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x166FFEC", Offset = "0x166FFEC", VA = "0x166FFEC")]
		public static bool PlaySound3DFollowTransformAndForget(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x167027C", Offset = "0x167027C", VA = "0x167027C")]
		public static PlaySoundResult PlaySound3DFollowTransform(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return null;
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x1670560", Offset = "0x1670560", VA = "0x1670560")]
		public static IEnumerator PlaySound3DAtTransformAndWaitUntilFinished(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x1670720", Offset = "0x1670720", VA = "0x1670720")]
		public static IEnumerator PlaySound3DFollowTransformAndWaitUntilFinished(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x16708E0", Offset = "0x16708E0", VA = "0x16708E0")]
		public static void PauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x1670AEC", Offset = "0x1670AEC", VA = "0x1670AEC")]
		public static void PauseBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x1670CCC", Offset = "0x1670CCC", VA = "0x1670CCC")]
		public static void PauseSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x1670EB8", Offset = "0x1670EB8", VA = "0x1670EB8")]
		public static void StopAllSoundsOfTransform(this Transform sourceTrans)
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x16710F0", Offset = "0x16710F0", VA = "0x16710F0")]
		public static void StopBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x1671324", Offset = "0x1671324", VA = "0x1671324")]
		public static void StopSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x1671398", Offset = "0x1671398", VA = "0x1671398")]
		public static void UnpauseAllSoundsOfTransform(this Transform sourceTrans)
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x16715A4", Offset = "0x16715A4", VA = "0x16715A4")]
		public static void UnpauseBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x1671784", Offset = "0x1671784", VA = "0x1671784")]
		public static void UnpauseSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x1671970", Offset = "0x1671970", VA = "0x1671970")]
		public static bool IsTransformPlayingSoundGroup(this Transform sourceTrans, string sType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001B1")]
	public class AudioTransformTracker : MonoBehaviour
	{
		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int _frames;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _trans;

		[Token(Token = "0x170000FC")]
		public Transform Trans
		{
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0x1671BA4", Offset = "0x1671BA4", VA = "0x1671BA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x1671C48", Offset = "0x1671C48", VA = "0x1671C48")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x1671C58", Offset = "0x1671C58", VA = "0x1671C58")]
		public AudioTransformTracker()
		{
		}
	}
	[Token(Token = "0x20001B2")]
	public static class AudioUtil
	{
		[Token(Token = "0x4000C1D")]
		public const float DefaultMinOcclusionCutoffFrequency = 22000f;

		[Token(Token = "0x4000C1E")]
		public const float DefaultMaxOcclusionCutoffFrequency = 0f;

		[Token(Token = "0x4000C1F")]
		private const float SemitonePitchChangeAmt = 1.0594635f;

		[Token(Token = "0x170000FD")]
		public static float FixedDeltaTime
		{
			[Token(Token = "0x6000D0C")]
			[Address(RVA = "0x1671CD8", Offset = "0x1671CD8", VA = "0x1671CD8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000FE")]
		public static float FrameTime
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0x1671CE0", Offset = "0x1671CE0", VA = "0x1671CE0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000FF")]
		public static float Time
		{
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0x1671CE8", Offset = "0x1671CE8", VA = "0x1671CE8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000100")]
		public static int FrameCount
		{
			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0x1671CF0", Offset = "0x1671CF0", VA = "0x1671CF0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x1671C60", Offset = "0x1671C60", VA = "0x1671C60")]
		private static float CutoffRange(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x1671CA8", Offset = "0x1671CA8", VA = "0x1671CA8")]
		private static float MaxCutoffFreq(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x1671CC0", Offset = "0x1671CC0", VA = "0x1671CC0")]
		public static float MinCutoffFreq(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x1671CF8", Offset = "0x1671CF8", VA = "0x1671CF8")]
		public static float GetOcclusionCutoffFrequencyByDistanceRatio(float distRatio, SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x1671D44", Offset = "0x1671D44", VA = "0x1671D44")]
		public static float GetSemitonesFromPitch(float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x1671E08", Offset = "0x1671E08", VA = "0x1671E08")]
		public static float GetPitchFromSemitones(float semitones)
		{
			return default(float);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x1671EBC", Offset = "0x1671EBC", VA = "0x1671EBC")]
		public static float GetDbFromFloatVolume(float vol)
		{
			return default(float);
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x1671F34", Offset = "0x1671F34", VA = "0x1671F34")]
		public static float GetFloatVolumeFromDb(float db)
		{
			return default(float);
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x166BD2C", Offset = "0x166BD2C", VA = "0x166BD2C")]
		public static float GetAudioPlayedPercentage(AudioSource source)
		{
			return default(float);
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x1671FA8", Offset = "0x1671FA8", VA = "0x1671FA8")]
		public static bool IsClipPaused(AudioSource source)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x1671FF0", Offset = "0x1671FF0", VA = "0x1671FF0")]
		public static void ClipPlayed(AudioClip clip, GameObject actor)
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x1672080", Offset = "0x1672080", VA = "0x1672080")]
		public static void UnloadNonPreloadedAudioData(AudioClip clip, GameObject actor)
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x166CC3C", Offset = "0x166CC3C", VA = "0x166CC3C")]
		public static bool AudioClipWillPreload(AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x1672164", Offset = "0x1672164", VA = "0x1672164")]
		public static bool IsClipReadyToPlay(this AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x16721FC", Offset = "0x16721FC", VA = "0x16721FC")]
		private static float GetPositiveUsablePitch(AudioSource source)
		{
			return default(float);
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x1672228", Offset = "0x1672228", VA = "0x1672228")]
		private static float GetPositiveUsablePitch(float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x1672238", Offset = "0x1672238", VA = "0x1672238")]
		public static float AdjustAudioClipDurationForPitch(float duration, AudioSource sourceWithPitch)
		{
			return default(float);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x1672274", Offset = "0x1672274", VA = "0x1672274")]
		public static float AdjustAudioClipDurationForPitch(float duration, float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x1672288", Offset = "0x1672288", VA = "0x1672288")]
		public static float AdjustEndLeadTimeForPitch(float duration, AudioSource sourceWithPitch)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001B3")]
	public static class CoroutineHelper
	{
		[Token(Token = "0x2000276")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3C74", Offset = "0x12F3C74")]
		private sealed class <WaitForActualSeconds>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4000FD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private float <start>5__2;

			[Token(Token = "0x1700015B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EF6")]
				[Address(RVA = "0x1672F44", Offset = "0x1672F44", VA = "0x1672F44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EF8")]
				[Address(RVA = "0x1672FAC", Offset = "0x1672FAC", VA = "0x1672FAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0x1672E44", Offset = "0x1672E44", VA = "0x1672E44")]
			[DebuggerHidden]
			public <WaitForActualSeconds>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0x1672E70", Offset = "0x1672E70", VA = "0x1672E70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0x1672E74", Offset = "0x1672E74", VA = "0x1672E74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0x1672F4C", Offset = "0x1672F4C", VA = "0x1672F4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x1672DCC", Offset = "0x1672DCC", VA = "0x1672DCC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F7230", Offset = "0x12F7230")]
		public static IEnumerator WaitForActualSeconds(float time)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B4")]
	public static class DTMonoHelper
	{
		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x166AFAC", Offset = "0x166AFAC", VA = "0x166AFAC")]
		public static Transform GetChildTransform(this Transform transParent, string childName)
		{
			return null;
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x16730DC", Offset = "0x16730DC", VA = "0x16730DC")]
		public static bool IsActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x16730F4", Offset = "0x16730F4", VA = "0x16730F4")]
		public static void SetActive(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x166A788", Offset = "0x166A788", VA = "0x166A788")]
		public static void DestroyAllChildren(this Transform tran)
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class DelayBetweenSongs : MonoBehaviour
	{
		[Token(Token = "0x2000277")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3C84", Offset = "0x12F3C84")]
		private sealed class <PlaySongWithDelay>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DelayBetweenSongs <>4__this;

			[Token(Token = "0x1700015D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EFC")]
				[Address(RVA = "0x1673544", Offset = "0x1673544", VA = "0x1673544", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EFE")]
				[Address(RVA = "0x16735AC", Offset = "0x16735AC", VA = "0x16735AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EF9")]
			[Address(RVA = "0x16732FC", Offset = "0x16732FC", VA = "0x16732FC")]
			[DebuggerHidden]
			public <PlaySongWithDelay>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000EFA")]
			[Address(RVA = "0x1673394", Offset = "0x1673394", VA = "0x1673394", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0x1673398", Offset = "0x1673398", VA = "0x1673398", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EFD")]
			[Address(RVA = "0x167354C", Offset = "0x167354C", VA = "0x167354C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minTimeToWait;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxTimeToWait;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string playlistControllerName;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlaylistController _controller;

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x1673110", Offset = "0x1673110", VA = "0x1673110")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x16731BC", Offset = "0x16731BC", VA = "0x16731BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x1673248", Offset = "0x1673248", VA = "0x1673248")]
		private void SongEnded(string songName)
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x1673280", Offset = "0x1673280", VA = "0x1673280")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12F72B4", Offset = "0x12F72B4")]
		private IEnumerator PlaySongWithDelay()
		{
			return null;
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x1673328", Offset = "0x1673328", VA = "0x1673328")]
		public DelayBetweenSongs()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x12F3848", Offset = "0x12F3848")]
	public class DynamicSoundGroupCreator : MonoBehaviour
	{
		[Token(Token = "0x2000278")]
		public enum CreateItemsWhen
		{
			[Token(Token = "0x4000FD6")]
			FirstEnableOnly,
			[Token(Token = "0x4000FD7")]
			EveryEnable
		}

		[Token(Token = "0x2000279")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3C94", Offset = "0x12F3C94")]
		private sealed class <>c__DisplayClass39_0
		{
			[Token(Token = "0x4000FD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CustomEventCategory aCat;

			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0x1675A18", Offset = "0x1675A18", VA = "0x1675A18")]
			public <>c__DisplayClass39_0()
			{
			}

			[Token(Token = "0x6000F00")]
			[Address(RVA = "0x167807C", Offset = "0x167807C", VA = "0x167807C")]
			internal bool <RemoveItems>b__0(CustomEventCategory cat)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000C24")]
		public const int ExtraHardCodedBusOptions = 1;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SystemLanguage previewLanguage;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MasterAudio.DragGroupMode curDragGroupMode;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject groupTemplate;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject variationTemplate;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool errorOnDuplicates;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool createOnAwake;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool soundGroupsAreExpanded;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool removeGroupsOnSceneChange;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public CreateItemsWhen reUseMode;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool showCustomEvents;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<CustomEvent> customEventsToCreate;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string newEventName;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool showMusicDucking;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<DuckGroupInfo> musicDuckingSounds;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<GroupBus> groupBuses;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool playListExpanded;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool playlistEditorExp;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<MasterAudio.Playlist> musicPlaylists;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<GameObject> audioSourceTemplates;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string audioSourceTemplateName;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool groupByBus;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool itemsCreatedEventExpanded;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string itemsCreatedCustomEvent;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool showUnityMixerGroupAssignment;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool _hasCreated;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly List<Transform> _groupsToRemove;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _trans;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly List<DynamicSoundGroup> _groupsToCreate;

		[Token(Token = "0x17000101")]
		public static int HardCodedBusOptions
		{
			[Token(Token = "0x6000D33")]
			[Address(RVA = "0x1676220", Offset = "0x1676220", VA = "0x1676220")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000102")]
		public List<DynamicSoundGroup> GroupsToCreate
		{
			[Token(Token = "0x6000D34")]
			[Address(RVA = "0x1677DA0", Offset = "0x1677DA0", VA = "0x1677DA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000103")]
		public bool ShouldShowUnityAudioMixerGroupAssignments
		{
			[Token(Token = "0x6000D35")]
			[Address(RVA = "0x1677DA8", Offset = "0x1677DA8", VA = "0x1677DA8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x16740F0", Offset = "0x16740F0", VA = "0x16740F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x16741CC", Offset = "0x16741CC", VA = "0x16741CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x16742BC", Offset = "0x16742BC", VA = "0x16742BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x16742C0", Offset = "0x16742C0", VA = "0x16742C0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0x16741D0", Offset = "0x16741D0", VA = "0x16741D0")]
		private void CreateItemsIfReady()
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x16743E4", Offset = "0x16743E4", VA = "0x16743E4")]
		public void RemoveItems()
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x1674818", Offset = "0x1674818", VA = "0x1674818")]
		public void CreateItems()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x1677B14", Offset = "0x1677B14", VA = "0x1677B14")]
		private void FireEvents()
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x1675C84", Offset = "0x1675C84", VA = "0x1675C84")]
		public void PopulateGroupData()
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x1677DB0", Offset = "0x1677DB0", VA = "0x1677DB0")]
		public DynamicSoundGroupCreator()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	public static class FilePlayerPrefs
	{
		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Hashtable PlayerPrefsHashtable;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool _hashTableChanged;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string _serializedOutput;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly string SerializedInput;

		[Token(Token = "0x4000C49")]
		private const string ParametersSeperator = ";";

		[Token(Token = "0x4000C4A")]
		private const string KeyValueSeperator = ":";

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly string FileName;

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x1686D38", Offset = "0x1686D38", VA = "0x1686D38")]
		static FilePlayerPrefs()
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x1687178", Offset = "0x1687178", VA = "0x1687178")]
		public static bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x16871FC", Offset = "0x16871FC", VA = "0x16871FC")]
		public static void SetString(string key, string value)
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x1687334", Offset = "0x1687334", VA = "0x1687334")]
		public static void SetInt(string key, int value)
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x16874AC", Offset = "0x16874AC", VA = "0x16874AC")]
		public static void SetFloat(string key, float value)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x168762C", Offset = "0x168762C", VA = "0x168762C")]
		public static void SetBool(string key, bool value)
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x16877A8", Offset = "0x16877A8", VA = "0x16877A8")]
		public static string GetString(string key)
		{
			return null;
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x168788C", Offset = "0x168788C", VA = "0x168788C")]
		public static string GetString(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x16879D0", Offset = "0x16879D0", VA = "0x16879D0")]
		public static int GetInt(string key)
		{
			return default(int);
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x1687B70", Offset = "0x1687B70", VA = "0x1687B70")]
		public static int GetInt(string key, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x1687CF0", Offset = "0x1687CF0", VA = "0x1687CF0")]
		public static float GetFloat(string key)
		{
			return default(float);
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x1687E90", Offset = "0x1687E90", VA = "0x1687E90")]
		public static float GetFloat(string key, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x1688018", Offset = "0x1688018", VA = "0x1688018")]
		public static bool GetBool(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x1688120", Offset = "0x1688120", VA = "0x1688120")]
		public static bool GetBool(string key, bool defaultValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x16882AC", Offset = "0x16882AC", VA = "0x16882AC")]
		public static void DeleteKey(string key)
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x1688330", Offset = "0x1688330", VA = "0x1688330")]
		public static void DeleteAll()
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x16883AC", Offset = "0x16883AC", VA = "0x16883AC")]
		public static void Flush()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x1688538", Offset = "0x1688538", VA = "0x1688538")]
		private static void Serialize()
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x1686EB0", Offset = "0x1686EB0", VA = "0x1686EB0")]
		private static void Deserialize()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x1688A18", Offset = "0x1688A18", VA = "0x1688A18")]
		private static string EscapeNonSeperators(string inputToEscape)
		{
			return null;
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x1688AA4", Offset = "0x1688AA4", VA = "0x1688AA4")]
		private static string DeEscapeNonSeperators(string inputToDeEscape)
		{
			return null;
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x1688B30", Offset = "0x1688B30", VA = "0x1688B30")]
		public static object GetTypeValue(string typeName, string value)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B8")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x12F385C", Offset = "0x12F385C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12F385C", Offset = "0x12F385C")]
	public class PlaylistController : MonoBehaviour
	{
		[Token(Token = "0x200027A")]
		public enum AudioPlayType
		{
			[Token(Token = "0x4000FDA")]
			PlayNow,
			[Token(Token = "0x4000FDB")]
			Schedule,
			[Token(Token = "0x4000FDC")]
			AlreadyScheduled
		}

		[Token(Token = "0x200027B")]
		public enum PlaylistStates
		{
			[Token(Token = "0x4000FDE")]
			NotInScene,
			[Token(Token = "0x4000FDF")]
			Stopped,
			[Token(Token = "0x4000FE0")]
			Playing,
			[Token(Token = "0x4000FE1")]
			Paused,
			[Token(Token = "0x4000FE2")]
			Crossfading
		}

		[Token(Token = "0x200027C")]
		public enum FadeMode
		{
			[Token(Token = "0x4000FE4")]
			None,
			[Token(Token = "0x4000FE5")]
			GradualFade
		}

		[Token(Token = "0x200027D")]
		public enum AudioDuckingMode
		{
			[Token(Token = "0x4000FE7")]
			NotDucking,
			[Token(Token = "0x4000FE8")]
			SetToDuck,
			[Token(Token = "0x4000FE9")]
			Ducked
		}

		[Token(Token = "0x200027E")]
		public delegate void SongChangedEventHandler(string newSongName, MusicSetting song);

		[Token(Token = "0x200027F")]
		public delegate void SongEndedEventHandler(string songName);

		[Token(Token = "0x2000280")]
		public delegate void SongLoopedEventHandler(string songName);

		[Token(Token = "0x2000281")]
		public delegate void PlaylistEndedEventHandler();

		[Token(Token = "0x2000282")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3CA4", Offset = "0x12F3CA4")]
		private sealed class <>c__DisplayClass111_0
		{
			[Token(Token = "0x4000FEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string playlistControllerName;

			[Token(Token = "0x6000F11")]
			[Address(RVA = "0x234762C", Offset = "0x234762C", VA = "0x234762C")]
			public <>c__DisplayClass111_0()
			{
			}

			[Token(Token = "0x6000F12")]
			[Address(RVA = "0x234C408", Offset = "0x234C408", VA = "0x234C408")]
			internal bool <InstanceByName>b__0(PlaylistController obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000283")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3CB4", Offset = "0x12F3CB4")]
		private sealed class <>c__DisplayClass130_0
		{
			[Token(Token = "0x4000FEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string clipName;

			[Token(Token = "0x6000F13")]
			[Address(RVA = "0x2349C4C", Offset = "0x2349C4C", VA = "0x2349C4C")]
			public <>c__DisplayClass130_0()
			{
			}

			[Token(Token = "0x6000F14")]
			[Address(RVA = "0x234C4B4", Offset = "0x234C4B4", VA = "0x234C4B4")]
			internal bool <QueuePlaylistClip>b__0(MusicSetting obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000284")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3CC4", Offset = "0x12F3CC4")]
		private sealed class <>c__DisplayClass131_0
		{
			[Token(Token = "0x4000FEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string clipName;

			[Token(Token = "0x6000F15")]
			[Address(RVA = "0x2349FFC", Offset = "0x2349FFC", VA = "0x2349FFC")]
			public <>c__DisplayClass131_0()
			{
			}

			[Token(Token = "0x6000F16")]
			[Address(RVA = "0x234C57C", Offset = "0x234C57C", VA = "0x234C57C")]
			internal bool <TriggerPlaylistClip>b__0(MusicSetting obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F17")]
			[Address(RVA = "0x234C5A0", Offset = "0x234C5A0", VA = "0x234C5A0")]
			internal bool <TriggerPlaylistClip>b__1(MusicSetting obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000285")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F3CD4", Offset = "0x12F3CD4")]
		private sealed class <>c__DisplayClass141_0
		{
			[Token(Token = "0x4000FED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PlaylistController <>4__this;

			[Token(Token = "0x4000FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volumeBeforeFade;

			[Token(Token = "0x6000F18")]
			[Address(RVA = "0x234A65C", Offset = "0x234A65C", VA = "0x234A65C")]
			public <>c__DisplayClass141_0()
			{
			}

			[Token(Token = "0x6000F19")]
			[Address(RVA = "0x234C684", Offset = "0x234C684", VA = "0x234C684")]
			internal void <FadeOutPlaylist>b__0()
			{
			}
		}

		[Token(Token = "0x4000C4C")]
		public const float ScheduledSongMinBadOffset = 0.5f;

		[Token(Token = "0x4000C4D")]
		public const int FramesEarlyToTrigger = 2;

		[Token(Token = "0x4000C4E")]
		public const int FramesEarlyToBeSyncable = 10;

		[Token(Token = "0x4000C4F")]
		private const string NotReadyMessage = "Playlist Controller is not initialized yet. It must call its own Awake & Start method before any other methods are called. If you have a script with an Awake or Start event that needs to call it, make sure PlaylistController.cs is set to execute first (Script Execution Order window in Unity). Awake event is still not guaranteed to work, so use Start where possible.";

		[Token(Token = "0x4000C50")]
		private const float MinSongLength = 0.5f;

		[Token(Token = "0x4000C51")]
		private const float SlowestFrameTimeForCalc = 0.3f;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool startPlaylistOnAwake;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool isShuffle;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool isAutoAdvance;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool loopPlaylist;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float _playlistVolume;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isMuted;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string startPlaylistName;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int syncGroupNum;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioMixerGroup mixerChannel;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float spatialBlend;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool initializedEventExpanded;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string initializedCustomEvent;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool crossfadeStartedExpanded;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string crossfadeStartedCustomEvent;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool songChangedEventExpanded;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string songChangedCustomEvent;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool songEndedEventExpanded;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string songEndedCustomEvent;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool songLoopedEventExpanded;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string songLoopedCustomEvent;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool playlistStartedEventExpanded;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string playlistStartedCustomEvent;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool playlistEndedEventExpanded;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string playlistEndedCustomEvent;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AudioSource _activeAudio;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioSource _transitioningAudio;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float _activeAudioEndVolume;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float _transitioningAudioStartVolume;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _crossFadeStartTime;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly List<int> _clipsRemaining;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int _currentSequentialClipIndex;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private AudioDuckingMode _duckingMode;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _timeToStartUnducking;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _timeToFinishUnducking;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float _originalMusicVolume;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float _initialDuckVolume;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _duckRange;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private MusicSetting _currentSong;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private GameObject _go;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private string _name;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private FadeMode _curFadeMode;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float _slowFadeStartTime;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float _slowFadeCompletionTime;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float _slowFadeStartVolume;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private float _slowFadeTargetVolume;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private MasterAudio.Playlist _currentPlaylist;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float _lastTimeMissingPlaylistLogged;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Action _fadeCompleteCallback;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private readonly List<MusicSetting> _queuedSongs;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private bool _lostFocus;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
		private bool _autoStartedPlaylist;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private AudioSource _audioClip;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private AudioSource _transClip;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private MusicSetting _newSongSetting;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool _nextSongRequested;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
		private bool _nextSongScheduled;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private int _lastRandomClipIndex;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float _lastTimeSongRequested;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float _currentDuckVolCut;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private int? _lastSongPosition;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private double? _currentSchedSongDspStartTime;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private double? _currentSchedSongDspEndTime;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private int _lastFrameSongPosition;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private readonly Dictionary<AudioSource, double> _scheduledSongOffsetByAudioSource;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public int _frames;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<PlaylistController> _instances;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private int _songsPlayedFromPlaylist;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private AudioSource _audio1;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private AudioSource _audio2;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Transform _trans;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private bool _willPersist;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private double? _songPauseTime;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private int framesOfSongPlayed;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F527C", Offset = "0x12F527C")]
		private bool <ControllerIsReady>k__BackingField;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x219")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F528C", Offset = "0x12F528C")]
		private bool <IsCrossFading>k__BackingField;

		[Token(Token = "0x17000104")]
		private bool SongIsNonAdvancible
		{
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0x234BD90", Offset = "0x234BD90", VA = "0x234BD90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000105")]
		private bool ShouldLoadAsync
		{
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0x234A6F4", Offset = "0x234A6F4", VA = "0x234A6F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000106")]
		public bool ControllerIsReady
		{
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0x234BDE8", Offset = "0x234BDE8", VA = "0x234BDE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F7398", Offset = "0x12F7398")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0x234BDF0", Offset = "0x234BDF0", VA = "0x234BDF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F73A8", Offset = "0x12F73A8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public PlaylistStates PlaylistState
		{
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0x2346E1C", Offset = "0x2346E1C", VA = "0x2346E1C")]
			get
			{
				return default(PlaylistStates);
			}
		}

		[Token(Token = "0x17000108")]
		public AudioSource ActiveAudioSource
		{
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0x23460FC", Offset = "0x23460FC", VA = "0x23460FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000109")]
		public static List<PlaylistController> Instances
		{
			[Token(Token = "0x6000D97")]
			[Address(RVA = "0x2347634", Offset = "0x2347634", VA = "0x2347634")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0x234BDFC", Offset = "0x234BDFC", VA = "0x234BDFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700010A")]
		public GameObject PlaylistControllerGameObject
		{
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0x234BE54", Offset = "0x234BE54", VA = "0x234BE54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010B")]
		public AudioSource CurrentPlaylistSource
		{
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0x234BE5C", Offset = "0x234BE5C", VA = "0x234BE5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010C")]
		public AudioClip CurrentPlaylistClip
		{
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0x234BE64", Offset = "0x234BE64", VA = "0x234BE64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010D")]
		public AudioClip FadingPlaylistClip
		{
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0x234BEFC", Offset = "0x234BEFC", VA = "0x234BEFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		public AudioSource FadingSource
		{
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0x234BF9C", Offset = "0x234BF9C", VA = "0x234BF9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		public bool IsCrossFading
		{
			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0x234BFB4", Offset = "0x234BFB4", VA = "0x234BFB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F73B8", Offset = "0x12F73B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0x234BFBC", Offset = "0x234BFBC", VA = "0x234BFBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F73C8", Offset = "0x12F73C8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public bool IsFading
		{
			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0x234BFC8", Offset = "0x234BFC8", VA = "0x234BFC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000111")]
		public float PlaylistVolume
		{
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0x234A1A4", Offset = "0x234A1A4", VA = "0x234A1A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x234BFE8", Offset = "0x234BFE8", VA = "0x234BFE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000112")]
		public MasterAudio.Playlist CurrentPlaylist
		{
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0x234A78C", Offset = "0x234A78C", VA = "0x234A78C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000113")]
		public bool HasPlaylist
		{
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0x2347908", Offset = "0x2347908", VA = "0x2347908")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000114")]
		public string PlaylistName
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0x234C034", Offset = "0x234C034", VA = "0x234C034")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000115")]
		private bool IsMuted
		{
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0x234C0AC", Offset = "0x234C0AC", VA = "0x234C0AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000116")]
		private bool PlaylistIsMuted
		{
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0x2347A68", Offset = "0x2347A68", VA = "0x2347A68")]
			set
			{
			}
		}

		[Token(Token = "0x17000117")]
		private float CrossFadeTime
		{
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0x2346C40", Offset = "0x2346C40", VA = "0x2346C40")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000118")]
		private bool IsAutoAdvance
		{
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x2346CD0", Offset = "0x2346CD0", VA = "0x2346CD0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000119")]
		public GameObject GameObj
		{
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0x2348230", Offset = "0x2348230", VA = "0x2348230")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011A")]
		public string ControllerName
		{
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0x2345230", Offset = "0x2345230", VA = "0x2345230")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		public bool CanSchedule
		{
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0x2346AC4", Offset = "0x2346AC4", VA = "0x2346AC4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011C")]
		private bool IsFrameFastEnough
		{
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0x2345858", Offset = "0x2345858", VA = "0x2345858")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011D")]
		private bool ShouldNotSwitchEarly
		{
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0x2346DE0", Offset = "0x2346DE0", VA = "0x2346DE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011E")]
		private Transform Trans
		{
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0x234574C", Offset = "0x234574C", VA = "0x234574C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011F")]
		public int ClipsRemainingInCurrentPlaylist
		{
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0x234C0B4", Offset = "0x234C0B4", VA = "0x234C0B4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000004")]
		public event SongChangedEventHandler SongChanged
		{
			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0x2344798", Offset = "0x2344798", VA = "0x2344798")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F7318", Offset = "0x12F7318")]
			add
			{
			}
			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0x2344840", Offset = "0x2344840", VA = "0x2344840")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F7328", Offset = "0x12F7328")]
			remove
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event SongEndedEventHandler SongEnded
		{
			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0x23448E8", Offset = "0x23448E8", VA = "0x23448E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F7338", Offset = "0x12F7338")]
			add
			{
			}
			[Token(Token = "0x6000D50")]
			[Address(RVA = "0x2344990", Offset = "0x2344990", VA = "0x2344990")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F7348", Offset = "0x12F7348")]
			remove
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event SongLoopedEventHandler SongLooped
		{
			[Token(Token = "0x6000D51")]
			[Address(RVA = "0x2344A38", Offset = "0x2344A38", VA = "0x2344A38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F7358", Offset = "0x12F7358")]
			add
			{
			}
			[Token(Token = "0x6000D52")]
			[Address(RVA = "0x2344AE0", Offset = "0x2344AE0", VA = "0x2344AE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F7368", Offset = "0x12F7368")]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event PlaylistEndedEventHandler PlaylistEnded
		{
			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x2344B88", Offset = "0x2344B88", VA = "0x2344B88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F7378", Offset = "0x12F7378")]
			add
			{
			}
			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x2344C30", Offset = "0x2344C30", VA = "0x2344C30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F7388", Offset = "0x12F7388")]
			remove
			{
			}
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x2344CD8", Offset = "0x2344CD8", VA = "0x2344CD8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x2345284", Offset = "0x2345284", VA = "0x2345284")]
		public void SetSpatialBlend()
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0x234549C", Offset = "0x234549C", VA = "0x234549C")]
		private void SetAudiosIfEmpty()
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x23453E8", Offset = "0x23453E8", VA = "0x23453E8")]
		private void SetAudioSpatialBlend(float blend)
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x2345538", Offset = "0x2345538", VA = "0x2345538")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x23457F0", Offset = "0x23457F0", VA = "0x23457F0")]
		private void AutoStartPlaylist()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x234592C", Offset = "0x234592C", VA = "0x234592C")]
		private void CoUpdate()
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x2345DD4", Offset = "0x2345DD4", VA = "0x2345DD4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x2345EB4", Offset = "0x2345EB4", VA = "0x2345EB4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x23461D4", Offset = "0x23461D4", VA = "0x23461D4")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x23461E0", Offset = "0x23461E0", VA = "0x23461E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x234749C", Offset = "0x234749C", VA = "0x234749C")]
		public static PlaylistController InstanceByName(string playlistControllerName, bool errorIfNotFound = true)
		{
			return null;
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x23477E8", Offset = "0x23477E8", VA = "0x23477E8")]
		public bool IsSongPlaying(string songName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x2347918", Offset = "0x2347918", VA = "0x2347918")]
		public void ClearQueue()
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x23479B4", Offset = "0x23479B4", VA = "0x23479B4")]
		public void ToggleMutePlaylist()
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x2345850", Offset = "0x2345850", VA = "0x2345850")]
		public void MutePlaylist()
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x2347A60", Offset = "0x2347A60", VA = "0x2347A60")]
		public void UnmutePlaylist()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x2347BD0", Offset = "0x2347BD0", VA = "0x2347BD0")]
		public void PausePlaylist()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x2347DB0", Offset = "0x2347DB0", VA = "0x2347DB0")]
		public bool UnpausePlaylist()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x2345CAC", Offset = "0x2345CAC", VA = "0x2345CAC")]
		public void StopPlaylist(bool onlyFadingClip = false)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x23485F4", Offset = "0x23485F4", VA = "0x23485F4")]
		public void FadeToVolume(float targetVolume, float fadeTime, [Optional] Action callback)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x2348730", Offset = "0x2348730", VA = "0x2348730")]
		public void PlayRandomSong()
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x23487BC", Offset = "0x23487BC", VA = "0x23487BC")]
		public void PlayARandomSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x2348980", Offset = "0x2348980", VA = "0x2348980")]
		private void RemoveRandomClip(int randIndex)
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x23491A0", Offset = "0x23491A0", VA = "0x23491A0")]
		private void PlayFirstQueuedSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x23492A4", Offset = "0x23492A4", VA = "0x23492A4")]
		public void PlayNextSong()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x2349330", Offset = "0x2349330", VA = "0x2349330")]
		public void PlayTheNextSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x23494B0", Offset = "0x23494B0", VA = "0x23494B0")]
		private void AdvanceSongCounter()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x2349528", Offset = "0x2349528", VA = "0x2349528")]
		public void StopPlaylistAfterCurrentSong()
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x23496E0", Offset = "0x23496E0", VA = "0x23496E0")]
		public void StopLoopingCurrentSong()
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x234985C", Offset = "0x234985C", VA = "0x234985C")]
		public void QueuePlaylistClip(string clipName, bool scheduleNow = true)
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x2349C54", Offset = "0x2349C54", VA = "0x2349C54")]
		public bool TriggerPlaylistClip(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x234A004", Offset = "0x234A004", VA = "0x234A004")]
		public void DuckMusicForTime(float duckLength, float unduckTime, float pitch, float duckedTimePercentage, float duckedVolCut)
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x234A174", Offset = "0x234A174", VA = "0x234A174")]
		private void InitControllerIfNot()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x2345B78", Offset = "0x2345B78", VA = "0x2345B78")]
		public void UpdateMasterVolume()
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x234A214", Offset = "0x234A214", VA = "0x234A214")]
		public void StartPlaylist(string playlistName)
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x234A370", Offset = "0x234A370", VA = "0x234A370")]
		public void ChangePlaylist(string playlistName, bool playFirstClip = true)
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x2348170", Offset = "0x2348170", VA = "0x2348170")]
		private void FinishPlaylistInit(bool playFirstClip = true)
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x234A2E4", Offset = "0x234A2E4", VA = "0x234A2E4")]
		public void RestartPlaylist()
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0x234A4A8", Offset = "0x234A4A8", VA = "0x234A4A8")]
		private void CheckIfPlaylistStarted()
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x234A58C", Offset = "0x234A58C", VA = "0x234A58C")]
		private PlaylistController FindOtherControllerInSameSyncGroup()
		{
			return null;
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x2346F28", Offset = "0x2346F28", VA = "0x2346F28")]
		private void FadeOutPlaylist()
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x2345718", Offset = "0x2345718", VA = "0x2345718")]
		private void InitializePlaylist()
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0x2345880", Offset = "0x2345880", VA = "0x2345880")]
		private void PlayNextOrRandom(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x2346D08", Offset = "0x2346D08", VA = "0x2346D08")]
		private void FirePlaylistEndedEventIfAny()
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x234900C", Offset = "0x234900C", VA = "0x234900C")]
		private void FillClips()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x2348A18", Offset = "0x2348A18", VA = "0x2348A18")]
		private void PlaySong(MusicSetting setting, AudioPlayType playType)
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x234B264", Offset = "0x234B264", VA = "0x234B264")]
		public double? ScheduledGaplessNextSongStartTime()
		{
			return null;
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x234A834", Offset = "0x234A834", VA = "0x234A834")]
		public void FinishLoadingNewSong(AudioClip clipToPlay, AudioPlayType playType)
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x234B4F8", Offset = "0x234B4F8", VA = "0x234B4F8")]
		private void RemoveScheduledClip()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x2349854", Offset = "0x2349854", VA = "0x2349854")]
		private void ScheduleNextSong()
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x234701C", Offset = "0x234701C", VA = "0x234701C")]
		private void FadeInScheduledSong()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x234B310", Offset = "0x234B310", VA = "0x234B310")]
		private double CalculateNextTrackStartTimeOffset()
		{
			return default(double);
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x234B980", Offset = "0x234B980", VA = "0x234B980")]
		private double GetClipDuration(AudioSource src)
		{
			return default(double);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x23482D4", Offset = "0x23482D4", VA = "0x23482D4")]
		private void ScheduleClipPlay(double scheduledPlayTimeOffset, AudioSource source, bool calledAfterPause)
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x234B3E0", Offset = "0x234B3E0", VA = "0x234B3E0")]
		private void CrossFadeNow(AudioSource audioClip)
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x23467F8", Offset = "0x23467F8", VA = "0x23467F8")]
		private void CeaseAudioSource(AudioSource source)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x2346B5C", Offset = "0x2346B5C", VA = "0x2346B5C")]
		private void SetDuckProperties()
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x23473B8", Offset = "0x23473B8", VA = "0x23473B8")]
		private void AudioDucking()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x234A664", Offset = "0x234A664", VA = "0x234A664")]
		private bool SongShouldLoop(MusicSetting setting)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x234BFF0", Offset = "0x234BFF0", VA = "0x234BFF0")]
		public void RouteToMixerChannel(AudioMixerGroup group)
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x234C104", Offset = "0x234C104", VA = "0x234C104")]
		public PlaylistController()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x234C300", Offset = "0x234C300", VA = "0x234C300")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F73D8", Offset = "0x12F73D8")]
		private bool <FindOtherControllerInSameSyncGroup>b__140_0(PlaylistController obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x234C3F8", Offset = "0x234C3F8", VA = "0x234C3F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12F73E8", Offset = "0x12F73E8")]
		private bool <FinishLoadingNewSong>b__148_0(MusicSetting obj)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001B9")]
	public static class SpatializerHelper
	{
		[Token(Token = "0x4000CA2")]
		private const string OculusSpatializer = "OculusSpatializer";

		[Token(Token = "0x4000CA3")]
		private const string ResonanceAudioSpatializer = "Resonance Audio";

		[Token(Token = "0x17000120")]
		public static bool IsSupportedSpatializer
		{
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0x2354568", Offset = "0x2354568", VA = "0x2354568")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000121")]
		public static bool IsOculusAudioSpatializer
		{
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0x23545F4", Offset = "0x23545F4", VA = "0x23545F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000122")]
		public static bool IsResonanceAudioSpatializer
		{
			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0x2354648", Offset = "0x2354648", VA = "0x2354648")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000123")]
		public static string SelectedSpatializer
		{
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0x23545EC", Offset = "0x23545EC", VA = "0x23545EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		public static bool SpatializerOptionExists
		{
			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0x235469C", Offset = "0x235469C", VA = "0x235469C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x234D814", Offset = "0x234D814", VA = "0x234D814")]
		public static void TurnOnSpatializerIfEnabled(AudioSource source)
		{
		}
	}
	[Token(Token = "0x20001BA")]
	public static class UtilStrings
	{
		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x23546A4", Offset = "0x23546A4", VA = "0x23546A4")]
		public static string TrimSpace(string untrimmed)
		{
			return null;
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x2354724", Offset = "0x2354724", VA = "0x2354724")]
		public static string ReplaceUnsafeChars(string source)
		{
			return null;
		}
	}
}
