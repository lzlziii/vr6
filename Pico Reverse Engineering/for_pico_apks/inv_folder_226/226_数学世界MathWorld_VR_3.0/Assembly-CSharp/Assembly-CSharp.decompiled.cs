using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using Autohand;
using Autohand.Demo;
using BasketballMinigame;
using BzKovSoft.ObjectSlicer;
using BzKovSoft.ObjectSlicer.Polygon;
using BzKovSoft.ObjectSlicer.Samples;
using I2.Loc;
using Il2CppDummyDll;
using MirzaBeig.Scripting.Effects;
using NaughtyAttributes;
using TMPro;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityStandardAssets.Utility;

[assembly: AssemblyVersion("0.0.0.0")]
[Serializable]
[Token(Token = "0x2000002")]
public struct DeviceData
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string[] deviceNames;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Vector3 position;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 rotation;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x90A728", Offset = "0x90A728", VA = "0x90A728")]
	public DeviceData(string name, Vector3 pos, Vector3 rot)
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x90A818", Offset = "0x90A818", VA = "0x90A818")]
	public DeviceData(string[] names, Vector3 pos, Vector3 rot)
	{
	}
}
[Token(Token = "0x2000003")]
public class XRHandOffset : MonoBehaviour
{
	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("DO NOT CHANGE THIS UNLESS YOU ARE REDOING THE RELATIVE POSITIONS. This is the device that you are using to setup the innital proper orientation of the hand, all offsets are relative to this device")]
	public string defaultDevice;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public Transform[] rightOffsets;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public Transform[] leftOffsets;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public DeviceData[] devices;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool offsetDone;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool hasProvider;

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x90A86C", Offset = "0x90A86C", VA = "0x90A86C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x90ACB4", Offset = "0x90ACB4", VA = "0x90ACB4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x90AD48", Offset = "0x90AD48", VA = "0x90AD48")]
	internal void AdjustPositions(XRHandOffset otherOffset)
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x90AA48", Offset = "0x90AA48", VA = "0x90AA48")]
	private void DeviceConnected(UnityEngine.XR.InputDevice inputDevice)
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x90B144", Offset = "0x90B144", VA = "0x90B144")]
	private Vector3 GetPositionOffset(string from, string to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x90B30C", Offset = "0x90B30C", VA = "0x90B30C")]
	private Vector3 GetRotationOffset(string from, string to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x90AEFC", Offset = "0x90AEFC", VA = "0x90AEFC")]
	protected Vector3 GetDefaultPositionOffset()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x90B020", Offset = "0x90B020", VA = "0x90B020")]
	protected Vector3 GetDefaultRotationOffset()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x90B4D4", Offset = "0x90B4D4", VA = "0x90B4D4")]
	public XRHandOffset()
	{
	}
}
[Token(Token = "0x2000004")]
public class BowlingManager : MonoBehaviour
{
	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Bowling Ball Settings")]
	public GameObject bowlingBall;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Bowling Pin Settings")]
	public Vector3 pinCenter;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float pinSpaceX;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float pinSpaceZ;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<GameObject> pins;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 ballPosition;

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x90B8A4", Offset = "0x90B8A4", VA = "0x90B8A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x90BADC", Offset = "0x90BADC", VA = "0x90BADC")]
	public void ResetBall()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x90B8E0", Offset = "0x90B8E0", VA = "0x90B8E0")]
	public void ResetPins()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x90BB80", Offset = "0x90BB80", VA = "0x90BB80")]
	public BowlingManager()
	{
	}
}
[Token(Token = "0x2000005")]
public class DemoExitCondition : MonoBehaviour
{
	[Token(Token = "0x6000010")]
	[Address(RVA = "0x90BC08", Offset = "0x90BC08", VA = "0x90BC08")]
	private void Update()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x90BCA0", Offset = "0x90BCA0", VA = "0x90BCA0")]
	public DemoExitCondition()
	{
	}
}
[Token(Token = "0x2000006")]
public class OpenLink : MonoBehaviour
{
	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string URL;

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x90BCA8", Offset = "0x90BCA8", VA = "0x90BCA8")]
	public void OpenLinkURL()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x90BCB4", Offset = "0x90BCB4", VA = "0x90BCB4")]
	public OpenLink()
	{
	}
}
[Token(Token = "0x2000007")]
public class PlatformMover : MonoBehaviour
{
	[Token(Token = "0x2000008")]
	[CompilerGenerated]
	private sealed class <Move>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlatformMover <>4__this;

		[Token(Token = "0x4000017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timePassed>5__2;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600001A")]
			[Address(RVA = "0x90C018", Offset = "0x90C018", VA = "0x90C018", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600001C")]
			[Address(RVA = "0x90C060", Offset = "0x90C060", VA = "0x90C060", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000017")]
		[Address(RVA = "0x90BD74", Offset = "0x90BD74", VA = "0x90BD74")]
		[DebuggerHidden]
		public <Move>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000018")]
		[Address(RVA = "0x90BDAC", Offset = "0x90BDAC", VA = "0x90BDAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000019")]
		[Address(RVA = "0x90BDB0", Offset = "0x90BDB0", VA = "0x90BDB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600001B")]
		[Address(RVA = "0x90C020", Offset = "0x90C020", VA = "0x90C020", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 toRange;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float time;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 startPos;

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x90BCBC", Offset = "0x90BCBC", VA = "0x90BCBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x90BD00", Offset = "0x90BD00", VA = "0x90BD00")]
	[IteratorStateMachine(typeof(<Move>d__4))]
	private IEnumerator Move()
	{
		return null;
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x90BD9C", Offset = "0x90BD9C", VA = "0x90BD9C")]
	public PlatformMover()
	{
	}
}
[Token(Token = "0x2000009")]
public class UnlockChest : MonoBehaviour
{
	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HingeJoint joint;

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x90C068", Offset = "0x90C068", VA = "0x90C068")]
	public void Unlock()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x90C1C0", Offset = "0x90C1C0", VA = "0x90C1C0")]
	public void Lock()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x90C2F4", Offset = "0x90C2F4", VA = "0x90C2F4")]
	public UnlockChest()
	{
	}
}
[Token(Token = "0x200000A")]
public class TextFieldInspector : MonoBehaviour
{
	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string text;

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x90C2FC", Offset = "0x90C2FC", VA = "0x90C2FC")]
	public TextFieldInspector()
	{
	}
}
[Token(Token = "0x200000B")]
public class TextInformation : MonoBehaviour
{
	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject activateImage;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject deactivateImage;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] texts;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool active;

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x90C304", Offset = "0x90C304", VA = "0x90C304")]
	public void ActivateText()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x90C398", Offset = "0x90C398", VA = "0x90C398")]
	public void DeactivateText()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x90C428", Offset = "0x90C428", VA = "0x90C428")]
	public void ToggleText()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x90C438", Offset = "0x90C438", VA = "0x90C438")]
	public TextInformation()
	{
	}
}
[Token(Token = "0x200000C")]
public class TMPSizeProtector : MonoBehaviour
{
	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float size;

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x90C440", Offset = "0x90C440", VA = "0x90C440")]
	private void Start()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x90C500", Offset = "0x90C500", VA = "0x90C500")]
	public TMPSizeProtector()
	{
	}
}
[Token(Token = "0x200000D")]
public static class JointExtensions
{
	[Token(Token = "0x6000027")]
	[Address(RVA = "0x90C508", Offset = "0x90C508", VA = "0x90C508")]
	public static Vector3 Angles(this ConfigurableJoint joint)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x200000E")]
[DefaultExecutionOrder(-100000)]
public class IgnoreHandLayer : MonoBehaviour
{
	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool includeChildren;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int startLayer;

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x90C924", Offset = "0x90C924", VA = "0x90C924")]
	private void Awake()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x90C998", Offset = "0x90C998", VA = "0x90C998")]
	private void LateStart()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x90C9F8", Offset = "0x90C9F8", VA = "0x90C9F8")]
	internal void SetLayerRecursive(Transform obj, int newLayer)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x90CA94", Offset = "0x90CA94", VA = "0x90CA94")]
	public IgnoreHandLayer()
	{
	}
}
[Token(Token = "0x200000F")]
public class HeadCameraSmoothing : MonoBehaviour
{
	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 lastPos;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Quaternion lastRot;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x90CAA4", Offset = "0x90CAA4", VA = "0x90CAA4")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x90CAF4", Offset = "0x90CAF4", VA = "0x90CAF4")]
	public HeadCameraSmoothing()
	{
	}
}
[Token(Token = "0x2000010")]
public class HandEventTemplate : MonoBehaviour
{
	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Autohand.Hand hand;

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x90CAFC", Offset = "0x90CAFC", VA = "0x90CAFC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x90D018", Offset = "0x90D018", VA = "0x90D018")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x90D534", Offset = "0x90D534", VA = "0x90D534")]
	private void OnBeforeGrabbed(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x90D538", Offset = "0x90D538", VA = "0x90D538")]
	private void OnGrabbed(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x90D53C", Offset = "0x90D53C", VA = "0x90D53C")]
	private void OnBeforeReleased(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x90D540", Offset = "0x90D540", VA = "0x90D540")]
	private void OnReleased(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x90D544", Offset = "0x90D544", VA = "0x90D544")]
	private void OnForcedRelease(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x90D548", Offset = "0x90D548", VA = "0x90D548")]
	private void OnGrabJointBreak(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x90D54C", Offset = "0x90D54C", VA = "0x90D54C")]
	private void OnHighlight(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x90D550", Offset = "0x90D550", VA = "0x90D550")]
	private void OnStopHighlight(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x90D554", Offset = "0x90D554", VA = "0x90D554")]
	private void OnSqueezed(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x90D558", Offset = "0x90D558", VA = "0x90D558")]
	private void OnUnsqueezed(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x90D55C", Offset = "0x90D55C", VA = "0x90D55C")]
	private void OnTriggerGrab(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x90D560", Offset = "0x90D560", VA = "0x90D560")]
	private void OnTriggerRelease(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x90D564", Offset = "0x90D564", VA = "0x90D564")]
	private void OnHandCollisionStart(Autohand.Hand hand, GameObject other)
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x90D568", Offset = "0x90D568", VA = "0x90D568")]
	private void OnHandCollisionStop(Autohand.Hand hand, GameObject other)
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x90D56C", Offset = "0x90D56C", VA = "0x90D56C")]
	private void OnHandTriggerStart(Autohand.Hand hand, GameObject other)
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x90D570", Offset = "0x90D570", VA = "0x90D570")]
	private void OnHandTriggerStop(Autohand.Hand hand, GameObject other)
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x90D574", Offset = "0x90D574", VA = "0x90D574")]
	public HandEventTemplate()
	{
	}
}
[Token(Token = "0x2000011")]
[RequireComponent(typeof(PlacePoint))]
public class PlacePointEventDebugger : MonoBehaviour
{
	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlacePoint placePoint;

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x90D57C", Offset = "0x90D57C", VA = "0x90D57C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x90D974", Offset = "0x90D974", VA = "0x90D974")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x90DD6C", Offset = "0x90DD6C", VA = "0x90DD6C")]
	public PlacePointEventDebugger()
	{
	}
}
[Token(Token = "0x2000013")]
public class PlacePointEventTemplate : MonoBehaviour
{
	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlacePoint placePoint;

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x90E12C", Offset = "0x90E12C", VA = "0x90E12C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x90E39C", Offset = "0x90E39C", VA = "0x90E39C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x90E60C", Offset = "0x90E60C", VA = "0x90E60C")]
	public void OnPlace(PlacePoint point, Grabbable grab)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x90E610", Offset = "0x90E610", VA = "0x90E610")]
	public void OnRemove(PlacePoint point, Grabbable grab)
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x90E614", Offset = "0x90E614", VA = "0x90E614")]
	public void OnHighlight(PlacePoint point, Grabbable grab)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x90E618", Offset = "0x90E618", VA = "0x90E618")]
	public void OnStopHighlight(PlacePoint point, Grabbable grab)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x90E61C", Offset = "0x90E61C", VA = "0x90E61C")]
	public PlacePointEventTemplate()
	{
	}
}
[Token(Token = "0x2000014")]
public class AutoHandSettings : ScriptableObject
{
	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Whether the popup should be ignored on launch or not")]
	public bool ignoreSetup;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("-1 is custom, 0 is low, 1 is medium, 2 is high")]
	public float quality;

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x90E624", Offset = "0x90E624", VA = "0x90E624")]
	public static void ClearSettings()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x90E694", Offset = "0x90E694", VA = "0x90E694")]
	public AutoHandSettings()
	{
	}
}
[Token(Token = "0x2000015")]
public class CollisionIgnores : MonoBehaviour
{
	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool disableOnStart;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider[] cols1;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider[] cols2;

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x90E6A4", Offset = "0x90E6A4", VA = "0x90E6A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x90E74C", Offset = "0x90E74C", VA = "0x90E74C")]
	public void EnableCollisions()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x90E6A8", Offset = "0x90E6A8", VA = "0x90E6A8")]
	public void DisableCollisions()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x90E7F0", Offset = "0x90E7F0", VA = "0x90E7F0")]
	public CollisionIgnores()
	{
	}
}
[Token(Token = "0x2000016")]
[RequireComponent(typeof(Rigidbody))]
public class CollisionSound : MonoBehaviour
{
	[Token(Token = "0x2000017")]
	[CompilerGenerated]
	private sealed class <SoundPlayBuffer>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CollisionSound <>4__this;

		[Token(Token = "0x17000003")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000065")]
			[Address(RVA = "0x90EE48", Offset = "0x90EE48", VA = "0x90EE48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000004")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000067")]
			[Address(RVA = "0x90EE90", Offset = "0x90EE90", VA = "0x90EE90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000062")]
		[Address(RVA = "0x90ECB4", Offset = "0x90ECB4", VA = "0x90ECB4")]
		[DebuggerHidden]
		public <SoundPlayBuffer>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000063")]
		[Address(RVA = "0x90ED74", Offset = "0x90ED74", VA = "0x90ED74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000064")]
		[Address(RVA = "0x90ED78", Offset = "0x90ED78", VA = "0x90ED78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000066")]
		[Address(RVA = "0x90EE50", Offset = "0x90EE50", VA = "0x90EE50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000018")]
	[CompilerGenerated]
	private sealed class <SoundPlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CollisionSound <>4__this;

		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x17000005")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600006B")]
			[Address(RVA = "0x90EF6C", Offset = "0x90EF6C", VA = "0x90EF6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600006D")]
			[Address(RVA = "0x90EFB4", Offset = "0x90EFB4", VA = "0x90EFB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000068")]
		[Address(RVA = "0x90ECDC", Offset = "0x90ECDC", VA = "0x90ECDC")]
		[DebuggerHidden]
		public <SoundPlayBuffer>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0x90EE98", Offset = "0x90EE98", VA = "0x90EE98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0x90EE9C", Offset = "0x90EE9C", VA = "0x90EE9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600006C")]
		[Address(RVA = "0x90EF74", Offset = "0x90EF74", VA = "0x90EF74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The layers that cause the sound to play")]
	public LayerMask collisionTriggers;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Source to play sound from")]
	public AudioSource source;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Source to play sound from")]
	public AudioClip clip;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	[Tooltip("Source to play sound from")]
	public AnimationCurve velocityVolumeCurve;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float volumeAmp;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float velocityAmp;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float soundRepeatDelay;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody body;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canPlaySound;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine playSoundRoutine;

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x90E800", Offset = "0x90E800", VA = "0x90E800")]
	private void Start()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x90E8F8", Offset = "0x90E8F8", VA = "0x90E8F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x90E90C", Offset = "0x90E90C", VA = "0x90E90C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x90EC40", Offset = "0x90EC40", VA = "0x90EC40")]
	[IteratorStateMachine(typeof(<SoundPlayBuffer>d__13))]
	private IEnumerator SoundPlayBuffer()
	{
		return null;
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x90E874", Offset = "0x90E874", VA = "0x90E874")]
	[IteratorStateMachine(typeof(<SoundPlayBuffer>d__14))]
	private IEnumerator SoundPlayBuffer(float time)
	{
		return null;
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x90ED04", Offset = "0x90ED04", VA = "0x90ED04")]
	public CollisionSound()
	{
	}
}
[Token(Token = "0x2000019")]
public class ETFXProjectileScript : MonoBehaviour
{
	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject impactParticle;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject projectileParticle;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject muzzleParticle;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Adjust if not using Sphere Collider")]
	public float colliderRadius;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 1f)]
	public float collideOffset;

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x90EFBC", Offset = "0x90EFBC", VA = "0x90EFBC")]
	private void Start()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x90F1E4", Offset = "0x90F1E4", VA = "0x90F1E4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x90F82C", Offset = "0x90F82C", VA = "0x90F82C")]
	public ETFXProjectileScript()
	{
	}
}
[Token(Token = "0x200001A")]
public class ETFXSceneManager : MonoBehaviour
{
	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool GUIHide;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool GUIHide2;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool GUIHide3;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool GUIHide4;

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x90F840", Offset = "0x90F840", VA = "0x90F840")]
	public void LoadScene2DDemo()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x90F8A8", Offset = "0x90F8A8", VA = "0x90F8A8")]
	public void LoadSceneCards()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x90F910", Offset = "0x90F910", VA = "0x90F910")]
	public void LoadSceneCombat()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x90F978", Offset = "0x90F978", VA = "0x90F978")]
	public void LoadSceneDecals()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x90F9E0", Offset = "0x90F9E0", VA = "0x90F9E0")]
	public void LoadSceneDecals2()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x90FA48", Offset = "0x90FA48", VA = "0x90FA48")]
	public void LoadSceneEmojis()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x90FAB0", Offset = "0x90FAB0", VA = "0x90FAB0")]
	public void LoadSceneEmojis2()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x90FB18", Offset = "0x90FB18", VA = "0x90FB18")]
	public void LoadSceneExplosions()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x90FB80", Offset = "0x90FB80", VA = "0x90FB80")]
	public void LoadSceneExplosions2()
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x90FBE8", Offset = "0x90FBE8", VA = "0x90FBE8")]
	public void LoadSceneFire()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x90FC50", Offset = "0x90FC50", VA = "0x90FC50")]
	public void LoadSceneFire2()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x90FCB8", Offset = "0x90FCB8", VA = "0x90FCB8")]
	public void LoadSceneFire3()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x90FD20", Offset = "0x90FD20", VA = "0x90FD20")]
	public void LoadSceneFireworks()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x90FD88", Offset = "0x90FD88", VA = "0x90FD88")]
	public void LoadSceneFlares()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x90FDF0", Offset = "0x90FDF0", VA = "0x90FDF0")]
	public void LoadSceneMagic()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x90FE58", Offset = "0x90FE58", VA = "0x90FE58")]
	public void LoadSceneMagic2()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x90FEC0", Offset = "0x90FEC0", VA = "0x90FEC0")]
	public void LoadSceneMagic3()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x90FF28", Offset = "0x90FF28", VA = "0x90FF28")]
	public void LoadSceneMainDemo()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x90FF90", Offset = "0x90FF90", VA = "0x90FF90")]
	public void LoadSceneMissiles()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x90FFF8", Offset = "0x90FFF8", VA = "0x90FFF8")]
	public void LoadScenePortals()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x910060", Offset = "0x910060", VA = "0x910060")]
	public void LoadScenePortals2()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x9100C8", Offset = "0x9100C8", VA = "0x9100C8")]
	public void LoadScenePowerups()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x910130", Offset = "0x910130", VA = "0x910130")]
	public void LoadScenePowerups2()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x910198", Offset = "0x910198", VA = "0x910198")]
	public void LoadSceneSparkles()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x910200", Offset = "0x910200", VA = "0x910200")]
	public void LoadSceneSwordCombat()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x910268", Offset = "0x910268", VA = "0x910268")]
	public void LoadSceneSwordCombat2()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x9102D0", Offset = "0x9102D0", VA = "0x9102D0")]
	public void LoadSceneMoney()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x910338", Offset = "0x910338", VA = "0x910338")]
	public void LoadSceneHealing()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x9103A0", Offset = "0x9103A0", VA = "0x9103A0")]
	public void LoadSceneWind()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x910408", Offset = "0x910408", VA = "0x910408")]
	private void Update()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x9105C8", Offset = "0x9105C8", VA = "0x9105C8")]
	public ETFXSceneManager()
	{
	}
}
[Token(Token = "0x200001B")]
public class ParticleEffectsLibrary : MonoBehaviour
{
	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ParticleEffectsLibrary GlobalAccess;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TotalEffects;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int CurrentParticleEffectIndex;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int CurrentParticleEffectNum;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3[] ParticleEffectSpawnOffsets;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float[] ParticleEffectLifetimes;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] ParticleEffectPrefabs;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string effectNameString;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Transform> currentActivePEList;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 spawnPosition;

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x9105D0", Offset = "0x9105D0", VA = "0x9105D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x9109A0", Offset = "0x9109A0", VA = "0x9109A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x9109A4", Offset = "0x9109A4", VA = "0x9109A4")]
	public string GetCurrentPENameString()
	{
		return null;
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x910C18", Offset = "0x910C18", VA = "0x910C18")]
	public void PreviousParticleEffect()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x910FF4", Offset = "0x910FF4", VA = "0x910FF4")]
	public void NextParticleEffect()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x9113E0", Offset = "0x9113E0", VA = "0x9113E0")]
	public void SpawnParticleEffect(Vector3 positionInWorldToSpawn)
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x911724", Offset = "0x911724", VA = "0x911724")]
	public ParticleEffectsLibrary()
	{
	}
}
[Token(Token = "0x200001C")]
public enum ButtonTypes
{
	[Token(Token = "0x4000059")]
	NotDefined,
	[Token(Token = "0x400005A")]
	Previous,
	[Token(Token = "0x400005B")]
	Next
}
[Token(Token = "0x200001D")]
public class PEButtonScript : MonoBehaviour, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler
{
	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Button myButton;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ButtonTypes ButtonType;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x9117BC", Offset = "0x9117BC", VA = "0x9117BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x911824", Offset = "0x911824", VA = "0x911824", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x91196C", Offset = "0x91196C", VA = "0x91196C", Slot = "5")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x911A64", Offset = "0x911A64", VA = "0x911A64")]
	public void OnButtonClicked()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x911AD8", Offset = "0x911AD8", VA = "0x911AD8")]
	public PEButtonScript()
	{
	}
}
[Token(Token = "0x200001E")]
public class UICanvasManager : MonoBehaviour
{
	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UICanvasManager GlobalAccess;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool MouseOverButton;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text PENameText;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text ToolTipText;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RaycastHit rayHit;

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x911AE0", Offset = "0x911AE0", VA = "0x911AE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x911B38", Offset = "0x911B38", VA = "0x911B38")]
	private void Start()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x911BF4", Offset = "0x911BF4", VA = "0x911BF4")]
	private void Update()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x911884", Offset = "0x911884", VA = "0x911884")]
	public void UpdateToolTip(ButtonTypes toolTipType)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x9119C0", Offset = "0x9119C0", VA = "0x9119C0")]
	public void ClearToolTip()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x911D18", Offset = "0x911D18", VA = "0x911D18")]
	private void SelectPreviousPE()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x911DE8", Offset = "0x911DE8", VA = "0x911DE8")]
	private void SelectNextPE()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x911C58", Offset = "0x911C58", VA = "0x911C58")]
	private void SpawnCurrentParticleEffect()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x911ABC", Offset = "0x911ABC", VA = "0x911ABC")]
	public void UIButtonClick(ButtonTypes buttonTypeClicked)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x911EB8", Offset = "0x911EB8", VA = "0x911EB8")]
	public UICanvasManager()
	{
	}
}
[Token(Token = "0x200001F")]
[HelpURL("https://makaka.org/unity-assets")]
public class BasketballAudioControl : MonoBehaviour
{
	[Token(Token = "0x2000020")]
	[CompilerGenerated]
	private sealed class <PlayGoalNormalCoroutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BasketballAudioControl <>4__this;

		[Token(Token = "0x17000007")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000B4")]
			[Address(RVA = "0x912490", Offset = "0x912490", VA = "0x912490", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000008")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000B6")]
			[Address(RVA = "0x9124D8", Offset = "0x9124D8", VA = "0x9124D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x911FAC", Offset = "0x911FAC", VA = "0x911FAC")]
		[DebuggerHidden]
		public <PlayGoalNormalCoroutine>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x9123C0", Offset = "0x9123C0", VA = "0x9123C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x9123C4", Offset = "0x9123C4", VA = "0x9123C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x912498", Offset = "0x912498", VA = "0x912498", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000021")]
	[CompilerGenerated]
	private sealed class <PlayGoalClearCoroutine>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BasketballAudioControl <>4__this;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000BA")]
			[Address(RVA = "0x9125B0", Offset = "0x9125B0", VA = "0x9125B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000BC")]
			[Address(RVA = "0x9125F8", Offset = "0x9125F8", VA = "0x9125F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x912068", Offset = "0x912068", VA = "0x912068")]
		[DebuggerHidden]
		public <PlayGoalClearCoroutine>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x9124E0", Offset = "0x9124E0", VA = "0x9124E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000B9")]
		[Address(RVA = "0x9124E4", Offset = "0x9124E4", VA = "0x9124E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000BB")]
		[Address(RVA = "0x9125B8", Offset = "0x9125B8", VA = "0x9125B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000022")]
	[CompilerGenerated]
	private sealed class <PlayGoalSetBigRingCoroutine>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BasketballAudioControl <>4__this;

		[Token(Token = "0x1700000B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000C0")]
			[Address(RVA = "0x9126D0", Offset = "0x9126D0", VA = "0x9126D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000C2")]
			[Address(RVA = "0x912718", Offset = "0x912718", VA = "0x912718", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x912124", Offset = "0x912124", VA = "0x912124")]
		[DebuggerHidden]
		public <PlayGoalSetBigRingCoroutine>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x912600", Offset = "0x912600", VA = "0x912600", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x912604", Offset = "0x912604", VA = "0x912604", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000C1")]
		[Address(RVA = "0x9126D8", Offset = "0x9126D8", VA = "0x9126D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000023")]
	[CompilerGenerated]
	private sealed class <PlayGoalHoopMovementCoroutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BasketballAudioControl <>4__this;

		[Token(Token = "0x1700000D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000C6")]
			[Address(RVA = "0x9127F0", Offset = "0x9127F0", VA = "0x9127F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000C8")]
			[Address(RVA = "0x912838", Offset = "0x912838", VA = "0x912838", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000C3")]
		[Address(RVA = "0x9121E0", Offset = "0x9121E0", VA = "0x9121E0")]
		[DebuggerHidden]
		public <PlayGoalHoopMovementCoroutine>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60000C4")]
		[Address(RVA = "0x912720", Offset = "0x912720", VA = "0x912720", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000C5")]
		[Address(RVA = "0x912724", Offset = "0x912724", VA = "0x912724", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000C7")]
		[Address(RVA = "0x9127F8", Offset = "0x9127F8", VA = "0x9127F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BasketballAudioControl Instance;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Goal: Normal")]
	[SerializeField]
	private AudioSource goalNormalAudioSource;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip goalNormal;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float goalNormalDelay;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Header("Goal: Clear")]
	private AudioSource goalClearAudioSource;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip goalClear;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float goalClearDelay;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Goal: Set Big Ring")]
	[SerializeField]
	private AudioSource goalSetBigRingAudioSource;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip goalSetBigRing;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float goalSetBigRingDelay;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Goal: Hoop Movement")]
	[SerializeField]
	private AudioSource goalHoopMovementAudioSource;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioClip goalHoopMovement;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float goalHoopMovementDelay;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Fail")]
	[SerializeField]
	private AudioSource failAudioSource;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private AudioClip[] failCollisions;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Pole")]
	public AudioSource poleAudioSource;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public ThrowingObject.AudioData poleCollisions;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Header("Backboard")]
	public AudioSource backboardAudioSource;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ThrowingObject.AudioData backboardCollisions;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Ring")]
	public AudioSource ringAudioSource;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public ThrowingObject.AudioData ringCollisions;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Header("Net")]
	public AudioSource netAudioSource;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public ThrowingObject.AudioData netCollisions;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Header("Floor")]
	public AudioSource floorAudioSource;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public ThrowingObject.AudioData floorCollisions;

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x911EC0", Offset = "0x911EC0", VA = "0x911EC0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x911F18", Offset = "0x911F18", VA = "0x911F18")]
	public void PlayGoalNormal()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x911F38", Offset = "0x911F38", VA = "0x911F38")]
	[IteratorStateMachine(typeof(<PlayGoalNormalCoroutine>d__27))]
	public IEnumerator PlayGoalNormalCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x911FD4", Offset = "0x911FD4", VA = "0x911FD4")]
	public void PlayGoalClear()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x911FF4", Offset = "0x911FF4", VA = "0x911FF4")]
	[IteratorStateMachine(typeof(<PlayGoalClearCoroutine>d__29))]
	public IEnumerator PlayGoalClearCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x912090", Offset = "0x912090", VA = "0x912090")]
	public void PlayGoalSetBigRing()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x9120B0", Offset = "0x9120B0", VA = "0x9120B0")]
	[IteratorStateMachine(typeof(<PlayGoalSetBigRingCoroutine>d__31))]
	public IEnumerator PlayGoalSetBigRingCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x91214C", Offset = "0x91214C", VA = "0x91214C")]
	public void PlayGoalHoopMovement()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x91216C", Offset = "0x91216C", VA = "0x91216C")]
	[IteratorStateMachine(typeof(<PlayGoalHoopMovementCoroutine>d__33))]
	public IEnumerator PlayGoalHoopMovementCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x912208", Offset = "0x912208", VA = "0x912208")]
	public void PlayFail()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x912260", Offset = "0x912260", VA = "0x912260")]
	public BasketballAudioControl()
	{
	}
}
[Token(Token = "0x2000024")]
[HelpURL("https://makaka.org/unity-assets")]
public class BasketballBallControl : MonoBehaviour
{
	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ThrowingObject throwingObject;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SphereCollider sphereCollider;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material failMaterial;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isFloored;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isRingTriggerPassed;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool isNetTriggerPassed;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	private bool isFail;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool isGoaled;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool isClear;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnFail;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<bool> OnGoal;

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x912840", Offset = "0x912840", VA = "0x912840")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x912964", Offset = "0x912964", VA = "0x912964")]
	public static BasketballBallControl GetComponent(ThrowingObject throwingObject)
	{
		return null;
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x912A30", Offset = "0x912A30", VA = "0x912A30")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x912B40", Offset = "0x912B40", VA = "0x912B40")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x912E8C", Offset = "0x912E8C", VA = "0x912E8C")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x913080", Offset = "0x913080", VA = "0x913080")]
	private void ResetBall()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x912ABC", Offset = "0x912ABC", VA = "0x912ABC")]
	private void SetGoaled()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x912DF8", Offset = "0x912DF8", VA = "0x912DF8")]
	private void SetFailed()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x91312C", Offset = "0x91312C", VA = "0x91312C")]
	public BasketballBallControl()
	{
	}
}
[Token(Token = "0x2000025")]
[HelpURL("https://makaka.org/unity-assets")]
public class BasketballGameControl : MonoBehaviour
{
	[Token(Token = "0x2000026")]
	[CompilerGenerated]
	private sealed class <AnnulSphereCollidersOfCurrentBallForNetCoroutine>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ThrowingObject throwingObject;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BasketballGameControl <>4__this;

		[Token(Token = "0x1700000F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000EC")]
			[Address(RVA = "0x9142D0", Offset = "0x9142D0", VA = "0x9142D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000010")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000EE")]
			[Address(RVA = "0x914318", Offset = "0x914318", VA = "0x914318", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x913A10", Offset = "0x913A10", VA = "0x913A10")]
		[DebuggerHidden]
		public <AnnulSphereCollidersOfCurrentBallForNetCoroutine>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x60000EA")]
		[Address(RVA = "0x9141A4", Offset = "0x9141A4", VA = "0x9141A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000EB")]
		[Address(RVA = "0x9141A8", Offset = "0x9141A8", VA = "0x9141A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x9142D8", Offset = "0x9142D8", VA = "0x9142D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000027")]
	[CompilerGenerated]
	private sealed class <SetBigRingCoroutine>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BasketballGameControl <>4__this;

		[Token(Token = "0x17000011")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000F2")]
			[Address(RVA = "0x914434", Offset = "0x914434", VA = "0x914434", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000012")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000F4")]
			[Address(RVA = "0x91447C", Offset = "0x91447C", VA = "0x91447C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x9140B0", Offset = "0x9140B0", VA = "0x9140B0")]
		[DebuggerHidden]
		public <SetBigRingCoroutine>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x914320", Offset = "0x914320", VA = "0x914320", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x914324", Offset = "0x914324", VA = "0x914324", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x91443C", Offset = "0x91443C", VA = "0x91443C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000028")]
	[CompilerGenerated]
	private sealed class <SetNormalRingCoroutine>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BasketballGameControl <>4__this;

		[Token(Token = "0x17000013")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000F8")]
			[Address(RVA = "0x91455C", Offset = "0x91455C", VA = "0x91455C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000FA")]
			[Address(RVA = "0x9145A4", Offset = "0x9145A4", VA = "0x9145A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x9140D8", Offset = "0x9140D8", VA = "0x9140D8")]
		[DebuggerHidden]
		public <SetNormalRingCoroutine>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x914484", Offset = "0x914484", VA = "0x914484", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x914488", Offset = "0x914488", VA = "0x914488", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x914564", Offset = "0x914564", VA = "0x914564", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ThrowControl throwControl;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject canvasArrowDirectional;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float timeScale;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int pointsCombo;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Header("Score Controls")]
	private ScoreBestControl scoreBestControl;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ScoreCurrentControl scoreCurrentControl;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("Points")]
	private float pointsGoalNormal;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float pointsGoalClear;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool isPointsComboOn;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[SerializeField]
	[Header("Points - Distance To Basket")]
	private bool isPointsDistanceToBasketOn;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float pointsDistanceToBasketFactor;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float distanceToBasket;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Header("Clear Ball = Big Ring")]
	[SerializeField]
	private int bigRingComboAimOfGoalsClear;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("Must be bigger than Combo Aim")]
	private int bigRingLimitOfGoalsAny;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int bigRingCurrentGoalsAnyCount;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int bigRingComboOfCurrentGoalsClear;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool isBigRing;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Hoop Movement (if Normal Goal & Normal Ring)")]
	[SerializeField]
	private BasketballHoopControl basketballHoopControl;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform hoopMovementPivot;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private int hoopMovementComboAimOfGoals;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int hoopMovementComboOfCurrentGoals;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[Header("Popup Texts")]
	private PopupTextControl textPopupScore;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private PopupTextControl textPopupScoreClear;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Header("Events")]
	private UnityEvent OnUnityStart;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private UnityEvent OnInitialized;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform cameraMain;

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x913134", Offset = "0x913134", VA = "0x913134")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x913140", Offset = "0x913140", VA = "0x913140")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x913310", Offset = "0x913310", VA = "0x913310")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x9134E0", Offset = "0x9134E0", VA = "0x9134E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x9135B8", Offset = "0x9135B8", VA = "0x9135B8")]
	private void InitGame()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x913708", Offset = "0x913708", VA = "0x913708")]
	public void StartGame()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x913604", Offset = "0x913604", VA = "0x913604")]
	private void InitNetAndDistanceToBasket()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x913794", Offset = "0x913794", VA = "0x913794")]
	private void CalculateDistanceToBasket(ThrowingObject throwingObject)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x913890", Offset = "0x913890", VA = "0x913890")]
	private void RegisterSphereCollidersOfCurrentBallForNet(ThrowingObject throwingObject)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x913950", Offset = "0x913950", VA = "0x913950")]
	private void AnnulSphereCollidersOfCurrentBallForNet(ThrowingObject throwingObject, float delay)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x913970", Offset = "0x913970", VA = "0x913970")]
	[IteratorStateMachine(typeof(<AnnulSphereCollidersOfCurrentBallForNetCoroutine>d__36))]
	private IEnumerator AnnulSphereCollidersOfCurrentBallForNetCoroutine(ThrowingObject throwingObject, float delay)
	{
		return null;
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x913A38", Offset = "0x913A38", VA = "0x913A38")]
	private void Goal(bool isClearBall)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x913D10", Offset = "0x913D10", VA = "0x913D10")]
	private void Fail()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x913CC8", Offset = "0x913CC8", VA = "0x913CC8")]
	private void AddScore(int value)
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x913DA4", Offset = "0x913DA4", VA = "0x913DA4")]
	private void SetHoopMovement(bool value)
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x913C78", Offset = "0x913C78", VA = "0x913C78")]
	private void CheckBigRingReset()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x913BBC", Offset = "0x913BBC", VA = "0x913BBC")]
	private void CheckBigRingBonus()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x913E6C", Offset = "0x913E6C", VA = "0x913E6C")]
	private void ResetBigRing()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x913FC8", Offset = "0x913FC8", VA = "0x913FC8")]
	[IteratorStateMachine(typeof(<SetBigRingCoroutine>d__44))]
	private IEnumerator SetBigRingCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x91403C", Offset = "0x91403C", VA = "0x91403C")]
	[IteratorStateMachine(typeof(<SetNormalRingCoroutine>d__45))]
	private IEnumerator SetNormalRingCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x914100", Offset = "0x914100", VA = "0x914100")]
	public BasketballGameControl()
	{
	}
}
[Token(Token = "0x2000029")]
[HelpURL("https://makaka.org/unity-assets")]
public class BasketballHoopControl : MonoBehaviour
{
	[Token(Token = "0x200002A")]
	[CompilerGenerated]
	private sealed class <RotateAroundCoroutine>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BasketballHoopControl <>4__this;

		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 rotationalPivot;

		[Token(Token = "0x17000015")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000108")]
			[Address(RVA = "0x915368", Offset = "0x915368", VA = "0x915368", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000016")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600010A")]
			[Address(RVA = "0x9153B0", Offset = "0x9153B0", VA = "0x9153B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000105")]
		[Address(RVA = "0x914644", Offset = "0x914644", VA = "0x914644")]
		[DebuggerHidden]
		public <RotateAroundCoroutine>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000106")]
		[Address(RVA = "0x914CF8", Offset = "0x914CF8", VA = "0x914CF8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0x914CFC", Offset = "0x914CFC", VA = "0x914CFC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000109")]
		[Address(RVA = "0x915370", Offset = "0x915370", VA = "0x915370", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BasketballRingControl basketballRingControl;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BasketballNetControl basketballNetControl;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject hoop;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject hoopPivot;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Movement")]
	[SerializeField]
	private float movementDelay;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	[Header("Rotation Around Camera")]
	private float rotationalAngleMin;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float rotationalAngleMax;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Header("Z Changing (Local)")]
	[SerializeField]
	private float positionZStepMin;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float positionZStepMax;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float positionZInit;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float positionZCurrent;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool isFirstSetPositionZ;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float rotationalAngleRandom;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool isFirstRotation;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool isRotationAroundCoroutine;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 vectorDiffHoopAndRotationalPivotInit;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 vectorDiffHoopAndRotationalPivotCurrent;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float angleHoopAndRotationalPivotAbs;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float angleHoopAndRotationalPivot;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Testing (Step By Step)")]
	[SerializeField]
	private bool isDelayBeforeZSettingOn;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private float delayBeforeZSetting;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Fading")]
	[SerializeField]
	private MaterialControl backBoardFadingControl;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private MaterialControl poleFadingControl;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private MaterialControl netFadingControl;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private MaterialControl ringHolderFadingControl;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private MaterialControl ringFadingControl;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Header("Explosion On Fading")]
	[SerializeField]
	private ExplosionControl explosionControlOnFadeOut;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private ExplosionControl explosionControlOnFadeIn;

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x913FA8", Offset = "0x913FA8", VA = "0x913FA8")]
	public void RotateAround(Vector3 rotationalPivot)
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x9145AC", Offset = "0x9145AC", VA = "0x9145AC")]
	[IteratorStateMachine(typeof(<RotateAroundCoroutine>d__29))]
	private IEnumerator RotateAroundCoroutine(Vector3 rotationalPivot)
	{
		return null;
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x91466C", Offset = "0x91466C", VA = "0x91466C")]
	private void SetPositionZ(bool isCancel)
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x9146DC", Offset = "0x9146DC", VA = "0x9146DC")]
	private void RotateAroundBase(Vector3 rotationPivot)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x913868", Offset = "0x913868", VA = "0x913868")]
	public Vector3 GetRingPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x913938", Offset = "0x913938", VA = "0x913938")]
	public void RegisterSphereColliderForNet(SphereCollider sphereCollider)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x9142B8", Offset = "0x9142B8", VA = "0x9142B8")]
	public void AnnulSphereColliderForNet(SphereCollider sphereCollider)
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x91441C", Offset = "0x91441C", VA = "0x91441C")]
	public void SetBigRing()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x914544", Offset = "0x914544", VA = "0x914544")]
	public void SetNormalRing()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x914CC8", Offset = "0x914CC8", VA = "0x914CC8")]
	public BasketballHoopControl()
	{
	}
}
[Token(Token = "0x200002B")]
[HelpURL("https://makaka.org/unity-assets")]
public class BasketballNetControl : MonoBehaviour
{
	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Cloth cloth;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ClothSphereColliderPair[] clothSphereColliderPairs;

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x91494C", Offset = "0x91494C", VA = "0x91494C")]
	public void RegisterSphereCollider(SphereCollider collider)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x914A80", Offset = "0x914A80", VA = "0x914A80")]
	public void AnnulSphereCollider(SphereCollider collider)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x9153B8", Offset = "0x9153B8", VA = "0x9153B8")]
	public BasketballNetControl()
	{
	}
}
[Token(Token = "0x200002C")]
[HelpURL("https://makaka.org/unity-assets")]
public class BasketballRingControl : MonoBehaviour
{
	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 localScaleOnBigSize;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 localPositionAtStart;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Vector3 localPositionOnBigSize;

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x91541C", Offset = "0x91541C", VA = "0x91541C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x914B80", Offset = "0x914B80", VA = "0x914B80")]
	public void SetBigSize()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x914C04", Offset = "0x914C04", VA = "0x914C04")]
	public void SetNormalSize()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x91544C", Offset = "0x91544C", VA = "0x91544C")]
	public BasketballRingControl()
	{
	}
}
[Token(Token = "0x200002D")]
public static class BasketballTagControl
{
	[Token(Token = "0x40000DD")]
	public const string Pole = "Pole";

	[Token(Token = "0x40000DE")]
	public const string Backboard = "Backboard";

	[Token(Token = "0x40000DF")]
	public const string Ring = "Ring";

	[Token(Token = "0x40000E0")]
	public const string RingTrigger = "RingTrigger";

	[Token(Token = "0x40000E1")]
	public const string Net = "Net";

	[Token(Token = "0x40000E2")]
	public const string NetTrigger = "NetTrigger";

	[Token(Token = "0x40000E3")]
	public const string FailZone = "FailZone";

	[Token(Token = "0x40000E4")]
	public const string Floor = "Ground";
}
[Token(Token = "0x200002E")]
[HelpURL("https://makaka.org/unity-assets")]
public class ArrowDirectionalControl : MonoBehaviour
{
	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform cameraMain;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform pivot;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Image image;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 direction;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 directionLocalEulerAngles;

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x91547C", Offset = "0x91547C", VA = "0x91547C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x91549C", Offset = "0x91549C", VA = "0x91549C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x9154A0", Offset = "0x9154A0", VA = "0x9154A0")]
	private void SetArrowDirection()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x9155E0", Offset = "0x9155E0", VA = "0x9155E0")]
	public ArrowDirectionalControl()
	{
	}
}
[Token(Token = "0x200002F")]
public static class DebugPrinter
{
	[Token(Token = "0x6000116")]
	[Address(RVA = "0x9155F8", Offset = "0x9155F8", VA = "0x9155F8")]
	public static void Print(object message)
	{
	}
}
[Token(Token = "0x2000030")]
[HelpURL("https://makaka.org/unity-assets")]
public class MaterialCounter : MonoBehaviour
{
	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string messageByDefault;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private KeyCode keyPrint;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool isPrintedOnDestroy;

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x915678", Offset = "0x915678", VA = "0x915678")]
	private void Update()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x91576C", Offset = "0x91576C", VA = "0x91576C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x9157D0", Offset = "0x9157D0", VA = "0x9157D0")]
	public static void Print(string messagge)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x9156E4", Offset = "0x9156E4", VA = "0x9156E4")]
	public static void Print()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x915858", Offset = "0x915858", VA = "0x915858")]
	public static int Count()
	{
		return default(int);
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x9158DC", Offset = "0x9158DC", VA = "0x9158DC")]
	public MaterialCounter()
	{
	}
}
[Token(Token = "0x2000031")]
[HelpURL("https://makaka.org/unity-assets")]
public class NumberDebugger
{
	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float valuePreviousForDebugFloatAbsChanging;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int counterForDebugFloatAbsChanging;

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x915960", Offset = "0x915960", VA = "0x915960")]
	public void DebugFloatAbsChanging(float delta, float valueCurrent)
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x915BE8", Offset = "0x915BE8", VA = "0x915BE8")]
	public NumberDebugger()
	{
	}
}
[Token(Token = "0x2000032")]
[HelpURL("https://makaka.org/unity-assets")]
public class OneTimeEventControl : MonoBehaviour
{
	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyCode oneTimeFunctionKey;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnPressOneTimeFunctionKey;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isOneTimeFunctionCalled;

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x915BF0", Offset = "0x915BF0", VA = "0x915BF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x915C38", Offset = "0x915C38", VA = "0x915C38")]
	public OneTimeEventControl()
	{
	}
}
[Token(Token = "0x2000033")]
[HelpURL("https://makaka.org/unity-assets")]
public class ExplosionControl : MonoBehaviour
{
	[Token(Token = "0x2000034")]
	[CompilerGenerated]
	private sealed class <ShowCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExplosionControl <>4__this;

		[Token(Token = "0x17000017")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000129")]
			[Address(RVA = "0x915EC4", Offset = "0x915EC4", VA = "0x915EC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000018")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600012B")]
			[Address(RVA = "0x915F0C", Offset = "0x915F0C", VA = "0x915F0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000126")]
		[Address(RVA = "0x915CDC", Offset = "0x915CDC", VA = "0x915CDC")]
		[DebuggerHidden]
		public <ShowCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0x915D14", Offset = "0x915D14", VA = "0x915D14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000128")]
		[Address(RVA = "0x915D18", Offset = "0x915D18", VA = "0x915D18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600012A")]
		[Address(RVA = "0x915ECC", Offset = "0x915ECC", VA = "0x915ECC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject explosion;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform pivot;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Delays")]
	[SerializeField]
	private float delayBeforeShowing;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float delayBeforeDisabling;

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x915C48", Offset = "0x915C48", VA = "0x915C48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x91527C", Offset = "0x91527C", VA = "0x91527C")]
	public void Show()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x915C68", Offset = "0x915C68", VA = "0x915C68")]
	[IteratorStateMachine(typeof(<ShowCoroutine>d__6))]
	private IEnumerator ShowCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x915D04", Offset = "0x915D04", VA = "0x915D04")]
	public ExplosionControl()
	{
	}
}
[Token(Token = "0x2000035")]
[HelpURL("https://makaka.org/unity-assets")]
public class BreathControl : MonoBehaviour
{
	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 period;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 amplitude;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 distanceCurrent;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 positionOnStart;

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x915F14", Offset = "0x915F14", VA = "0x915F14")]
	protected void Start()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x915F44", Offset = "0x915F44", VA = "0x915F44")]
	protected void Update()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x91601C", Offset = "0x91601C", VA = "0x91601C")]
	public BreathControl()
	{
	}
}
[Token(Token = "0x2000036")]
[HelpURL("https://makaka.org/unity-assets")]
public class RotationByKeysControl : MonoBehaviour
{
	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Horizontal")]
	[Tooltip("Object for Horizontal Rotation")]
	public Transform horizontal;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string horizontalAxis;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speedHorizontal;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Object for Vertical Rotation")]
	[Header("Vertical")]
	public Transform vertical;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string verticalAxis;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float speedVertical;

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x91603C", Offset = "0x91603C", VA = "0x91603C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x9160D4", Offset = "0x9160D4", VA = "0x9160D4")]
	public RotationByKeysControl()
	{
	}
}
[Token(Token = "0x2000037")]
[HelpURL("https://makaka.org/unity-assets")]
public class RotationByMouseControl : MonoBehaviour
{
	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Button")]
	public bool isRotationWithButton;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int button;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Horizontal")]
	[Tooltip("Object for Horizontal Rotation")]
	public Transform horizontal;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string horizontalAxis;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speedHorizontal;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Object for Vertical Rotation")]
	[Header("Vertical")]
	public Transform vertical;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string verticalAxis;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float speedVertical;

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x916168", Offset = "0x916168", VA = "0x916168")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x91619C", Offset = "0x91619C", VA = "0x91619C")]
	private void Rotate()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x916234", Offset = "0x916234", VA = "0x916234")]
	public RotationByMouseControl()
	{
	}
}
[Token(Token = "0x2000038")]
[HelpURL("https://makaka.org/unity-assets")]
public class TranslationByKeysControl : MonoBehaviour
{
	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("X")]
	public Transform xAxis;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string xAxisName;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float xAxisSpeed;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Y (Q & E keys)")]
	public Transform yAxis;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float yAxisSpeed;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Z")]
	public Transform zAxis;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string zAxisName;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float zAxisSpeed;

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x9162D4", Offset = "0x9162D4", VA = "0x9162D4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x9162F4", Offset = "0x9162F4", VA = "0x9162F4")]
	private void TranslateXUpdate()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x9163FC", Offset = "0x9163FC", VA = "0x9163FC")]
	private void TranslateZUpdate()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x9163AC", Offset = "0x9163AC", VA = "0x9163AC")]
	private void TranslateYUpdate()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x9164B8", Offset = "0x9164B8", VA = "0x9164B8")]
	private void TranslateYAxis(float speed)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x916560", Offset = "0x916560", VA = "0x916560")]
	public TranslationByKeysControl()
	{
	}
}
[Token(Token = "0x2000039")]
[HelpURL("https://makaka.org/unity-assets")]
public class PlayerPrefsControl : MonoBehaviour
{
	[Token(Token = "0x600013A")]
	[Address(RVA = "0x9165F8", Offset = "0x9165F8", VA = "0x9165F8")]
	public void DeleteAll()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x916600", Offset = "0x916600", VA = "0x916600")]
	public PlayerPrefsControl()
	{
	}
}
[Token(Token = "0x200003A")]
[HelpURL("https://makaka.org/unity-assets")]
[AddComponentMenu("Makaka Games/Everyday Tools/Random Object Pooler")]
public class RandomObjectPooler : MonoBehaviour
{
	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(1f, 30f)]
	public int initPooledAmount;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform poolParent;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Space]
	[SerializeField]
	private bool isDebugLogging;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	public Transform positionAtInit;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform rotationAtInit;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Single (actual for Testing target prefab; None => Multiple)")]
	public GameObject prefab;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Multiple")]
	public bool areRandomizedObjects;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] prefabs;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Events")]
	[Space]
	public UnityEvent OnInitialized;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public List<GameObject> pooledObjects;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject currentInstantiated;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public List<MonoBehaviour> controlScripts;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private MonoBehaviour controlScriptTempForRegistration;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Type controlScriptType;

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x916608", Offset = "0x916608", VA = "0x916608")]
	private void Start()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x91660C", Offset = "0x91660C", VA = "0x91660C")]
	private void InitAndPopulatePool()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x9169CC", Offset = "0x9169CC", VA = "0x9169CC")]
	public void InitControlScripts(Type type)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x916758", Offset = "0x916758", VA = "0x916758")]
	private GameObject InstantiateObject(int index)
	{
		return null;
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x916A64", Offset = "0x916A64", VA = "0x916A64")]
	public GameObject GetPooledObject()
	{
		return null;
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x916BE0", Offset = "0x916BE0", VA = "0x916BE0")]
	public MonoBehaviour RegisterControlScript(GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x916EC4", Offset = "0x916EC4", VA = "0x916EC4")]
	public RandomObjectPooler()
	{
	}
}
[Token(Token = "0x200003B")]
[HelpURL("https://makaka.org/unity-assets")]
[AddComponentMenu("Scripts/Makaka Games/Everyday Tools/Scene Control/Loading Animation Control")]
public class LoadingAnimationControl : MonoBehaviour
{
	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform fillAreaTransform;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image fillArea;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Speed")]
	public float rotationSpeed;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float openSpeed;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float closeSpeed;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("Size")]
	public float sizeOnTop;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float sizeOnBottom;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float fillAreaCurrentSize;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isFillAreaOnTop;

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x916ED4", Offset = "0x916ED4", VA = "0x916ED4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x916F28", Offset = "0x916F28", VA = "0x916F28")]
	private void ChangeFillAreaSize()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x916FC4", Offset = "0x916FC4", VA = "0x916FC4")]
	public LoadingAnimationControl()
	{
	}
}
[Token(Token = "0x200003C")]
[HelpURL("https://makaka.org/unity-assets")]
[AddComponentMenu("Scripts/Makaka Games/Everyday Tools/Scene Control/Load Screen Control")]
public class LoadScreenControl : MonoBehaviour
{
	[Token(Token = "0x200003D")]
	public delegate void LoadEvent();

	[Token(Token = "0x200003E")]
	[CompilerGenerated]
	private sealed class <doLoadLevel>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LoadScreenControl <>4__this;

		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string customLoadScene;

		[Token(Token = "0x4000135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string name;

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool manualActivation;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncOperation <async>5__2;

		[Token(Token = "0x1700001A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600015B")]
			[Address(RVA = "0x917BC4", Offset = "0x917BC4", VA = "0x917BC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600015D")]
			[Address(RVA = "0x917C0C", Offset = "0x917C0C", VA = "0x917C0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000158")]
		[Address(RVA = "0x91738C", Offset = "0x91738C", VA = "0x91738C")]
		[DebuggerHidden]
		public <doLoadLevel>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0x91782C", Offset = "0x91782C", VA = "0x91782C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600015A")]
		[Address(RVA = "0x917830", Offset = "0x917830", VA = "0x917830", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600015C")]
		[Address(RVA = "0x917BCC", Offset = "0x917BCC", VA = "0x917BCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200003F")]
	[CompilerGenerated]
	private sealed class <doLoadLevelAddictive>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LoadScreenControl <>4__this;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string name;

		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncOperation <async>5__2;

		[Token(Token = "0x1700001C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000161")]
			[Address(RVA = "0x917E74", Offset = "0x917E74", VA = "0x917E74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000163")]
			[Address(RVA = "0x917EBC", Offset = "0x917EBC", VA = "0x917EBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600015E")]
		[Address(RVA = "0x9176F0", Offset = "0x9176F0", VA = "0x9176F0")]
		[DebuggerHidden]
		public <doLoadLevelAddictive>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600015F")]
		[Address(RVA = "0x917C14", Offset = "0x917C14", VA = "0x917C14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000160")]
		[Address(RVA = "0x917C18", Offset = "0x917C18", VA = "0x917C18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000162")]
		[Address(RVA = "0x917E7C", Offset = "0x917E7C", VA = "0x917E7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LoadScreenControl instance;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int Progress;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool _activeScene;

	[Token(Token = "0x17000019")]
	public static LoadScreenControl Instance
	{
		[Token(Token = "0x6000146")]
		[Address(RVA = "0x916FEC", Offset = "0x916FEC", VA = "0x916FEC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000001")]
	public event LoadEvent OnStartWaitingEventToActivateScene
	{
		[Token(Token = "0x600014A")]
		[Address(RVA = "0x917254", Offset = "0x917254", VA = "0x917254")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600014B")]
		[Address(RVA = "0x9172F0", Offset = "0x9172F0", VA = "0x9172F0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event LoadEvent OnStartLoadEventAddictive
	{
		[Token(Token = "0x600014E")]
		[Address(RVA = "0x917480", Offset = "0x917480", VA = "0x917480")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600014F")]
		[Address(RVA = "0x91751C", Offset = "0x91751C", VA = "0x91751C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event LoadEvent OnEndLoadEventAddictive
	{
		[Token(Token = "0x6000150")]
		[Address(RVA = "0x9175B8", Offset = "0x9175B8", VA = "0x9175B8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000151")]
		[Address(RVA = "0x917654", Offset = "0x917654", VA = "0x917654")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x917130", Offset = "0x917130", VA = "0x917130")]
	public void LoadScene(string levelName, bool manualSceneActivation = false, string customLoadScene = "LoadScreen")
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x91723C", Offset = "0x91723C", VA = "0x91723C")]
	public void LoadLevel(string levelName, string customLoadScene)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x917248", Offset = "0x917248", VA = "0x917248")]
	public void ActivateScene()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x917184", Offset = "0x917184", VA = "0x917184")]
	[IteratorStateMachine(typeof(<doLoadLevel>d__12))]
	private IEnumerator doLoadLevel(string name, string customLoadScene, bool manualActivation)
	{
		return null;
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x9173B4", Offset = "0x9173B4", VA = "0x9173B4")]
	public void LoadLevelAddictive(string name)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x9173F0", Offset = "0x9173F0", VA = "0x9173F0")]
	[IteratorStateMachine(typeof(<doLoadLevelAddictive>d__20))]
	private IEnumerator doLoadLevelAddictive(string name)
	{
		return null;
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x917718", Offset = "0x917718", VA = "0x917718")]
	public LoadScreenControl()
	{
	}
}
[Token(Token = "0x2000040")]
[HelpURL("https://makaka.org/unity-assets")]
[AddComponentMenu("Scripts/Makaka Games/Everyday Tools/Scene Control/Load Screen Progress Control")]
public class LoadScreenProgressControl : MonoBehaviour
{
	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Slider slider;

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x917EC4", Offset = "0x917EC4", VA = "0x917EC4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x917F1C", Offset = "0x917F1C", VA = "0x917F1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x917F54", Offset = "0x917F54", VA = "0x917F54")]
	public LoadScreenProgressControl()
	{
	}
}
[Token(Token = "0x2000041")]
[HelpURL("https://makaka.org/unity-assets")]
[AddComponentMenu("Scripts/Makaka Games/Everyday Tools/Scene Control/Menu Scene Control")]
public class MenuSceneControl : MonoBehaviour
{
	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string nameOfSceneWithLoadScreen;

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x917F5C", Offset = "0x917F5C", VA = "0x917F5C")]
	public void LoadSceneWithScreenOrientationLandscapeLeft(string sceneName)
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x917FC0", Offset = "0x917FC0", VA = "0x917FC0")]
	public void LoadSceneWithScreenOrientationPortrait(string sceneName)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x917FF0", Offset = "0x917FF0", VA = "0x917FF0")]
	public void LoadSceneWithScreenOrientationAuto(string sceneName)
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x917F8C", Offset = "0x917F8C", VA = "0x917F8C")]
	private void LoadScene(string sceneName)
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x918020", Offset = "0x918020", VA = "0x918020")]
	public void ReloadCurrentScene()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x9180BC", Offset = "0x9180BC", VA = "0x9180BC")]
	public void QuitGame()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x9180C4", Offset = "0x9180C4", VA = "0x9180C4")]
	public void OpenLink(string link = "https://makaka.org/support")
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x9180D0", Offset = "0x9180D0", VA = "0x9180D0")]
	public MenuSceneControl()
	{
	}
}
[Token(Token = "0x2000042")]
public class DontDestroyOnLoadCustom : MonoBehaviour
{
	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool isLoaded;

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x918128", Offset = "0x918128", VA = "0x918128")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x918218", Offset = "0x918218", VA = "0x918218")]
	public DontDestroyOnLoadCustom()
	{
	}
}
[Token(Token = "0x2000043")]
[HelpURL("https://makaka.org/unity-assets")]
public class PopupTextControl : MonoBehaviour
{
	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI text;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform pivot;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isFirstEnable;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color color;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	[Header("Movement")]
	private float speed;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("Rotation")]
	private float rotationSpeed;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private Vector3 rotationStart;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Vector3 rotationFinish;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	[Header("Fading")]
	private float fadingDelay;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float fadingSpeed;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float timer;

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x918220", Offset = "0x918220", VA = "0x918220")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x9182E0", Offset = "0x9182E0", VA = "0x9182E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x918324", Offset = "0x918324", VA = "0x918324")]
	private void Update()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x913C18", Offset = "0x913C18", VA = "0x913C18")]
	public void ResetText()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x913CA4", Offset = "0x913CA4", VA = "0x913CA4")]
	public void SetText(string text)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x9184F4", Offset = "0x9184F4", VA = "0x9184F4")]
	public PopupTextControl()
	{
	}
}
[Token(Token = "0x2000044")]
public class ScoreBaseControl
{
	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string thousandLiteral;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string millionLiteral;

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x91852C", Offset = "0x91852C", VA = "0x91852C")]
	public static float Truncate(float value, int digits)
	{
		return default(float);
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x9185B4", Offset = "0x9185B4", VA = "0x9185B4")]
	public static string Round(float value, int digits)
	{
		return null;
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x918668", Offset = "0x918668", VA = "0x918668")]
	public ScoreBaseControl()
	{
	}
}
[Token(Token = "0x2000045")]
[HelpURL("https://makaka.org/unity-assets")]
public class ScoreBestControl : MonoBehaviour
{
	[Token(Token = "0x2000046")]
	[CompilerGenerated]
	private sealed class <PlayBestScoreSoundCoroutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ScoreBestControl <>4__this;

		[Token(Token = "0x1700001E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000187")]
			[Address(RVA = "0x918ABC", Offset = "0x918ABC", VA = "0x918ABC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000189")]
			[Address(RVA = "0x918B04", Offset = "0x918B04", VA = "0x918B04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000184")]
		[Address(RVA = "0x9188D8", Offset = "0x9188D8", VA = "0x9188D8")]
		[DebuggerHidden]
		public <PlayBestScoreSoundCoroutine>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000185")]
		[Address(RVA = "0x9189C0", Offset = "0x9189C0", VA = "0x9189C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000186")]
		[Address(RVA = "0x9189C4", Offset = "0x9189C4", VA = "0x9189C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000188")]
		[Address(RVA = "0x918AC4", Offset = "0x918AC4", VA = "0x918AC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000047")]
	[CompilerGenerated]
	private sealed class <PlayBestScoreAnimationCoroutine>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ScoreBestControl <>4__this;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600018D")]
			[Address(RVA = "0x918BD8", Offset = "0x918BD8", VA = "0x918BD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600018F")]
			[Address(RVA = "0x918C20", Offset = "0x918C20", VA = "0x918C20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0x918900", Offset = "0x918900", VA = "0x918900")]
		[DebuggerHidden]
		public <PlayBestScoreAnimationCoroutine>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600018B")]
		[Address(RVA = "0x918B0C", Offset = "0x918B0C", VA = "0x918B0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600018C")]
		[Address(RVA = "0x918B10", Offset = "0x918B10", VA = "0x918B10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600018E")]
		[Address(RVA = "0x918BE0", Offset = "0x918BE0", VA = "0x918BE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI text;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int value;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string playerPrefsKey;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int valueAtFirstStart;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Animation")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Range(0f, 20f)]
	[SerializeField]
	private float animationDelay;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string animationTrigger;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Range(0f, 20f)]
	[Header("Audio")]
	private float soundDelay;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip[] sounds;

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x91870C", Offset = "0x91870C", VA = "0x91870C")]
	private void Start()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x918748", Offset = "0x918748", VA = "0x918748")]
	private void SetValue(int value)
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x918780", Offset = "0x918780", VA = "0x918780")]
	public int GetValue()
	{
		return default(int);
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x918788", Offset = "0x918788", VA = "0x918788")]
	private void PlayBestScoreSound()
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x918830", Offset = "0x918830", VA = "0x918830")]
	private void PlayBestScoreAnimation()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x9187AC", Offset = "0x9187AC", VA = "0x9187AC")]
	[IteratorStateMachine(typeof(<PlayBestScoreSoundCoroutine>d__15))]
	private IEnumerator PlayBestScoreSoundCoroutine(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x918854", Offset = "0x918854", VA = "0x918854")]
	[IteratorStateMachine(typeof(<PlayBestScoreAnimationCoroutine>d__16))]
	private IEnumerator PlayBestScoreAnimationCoroutine(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x913F40", Offset = "0x913F40", VA = "0x913F40")]
	public void SaveAndShow(int value)
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x918928", Offset = "0x918928", VA = "0x918928")]
	public ScoreBestControl()
	{
	}
}
[Token(Token = "0x2000048")]
[HelpURL("https://makaka.org/unity-assets")]
public class ScoreCurrentControl : MonoBehaviour
{
	[Token(Token = "0x2000049")]
	[CompilerGenerated]
	private sealed class <PlayResetAnimationCoroutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ScoreCurrentControl <>4__this;

		[Token(Token = "0x17000022")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600019B")]
			[Address(RVA = "0x918E64", Offset = "0x918E64", VA = "0x918E64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600019D")]
			[Address(RVA = "0x918EAC", Offset = "0x918EAC", VA = "0x918EAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0x918D18", Offset = "0x918D18", VA = "0x918D18")]
		[DebuggerHidden]
		public <PlayResetAnimationCoroutine>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000199")]
		[Address(RVA = "0x918D98", Offset = "0x918D98", VA = "0x918D98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600019A")]
		[Address(RVA = "0x918D9C", Offset = "0x918D9C", VA = "0x918D9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600019C")]
		[Address(RVA = "0x918E6C", Offset = "0x918E6C", VA = "0x918E6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI text;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int value;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int valueAtStart;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Animation")]
	private Animator animator;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Range(0f, 20f)]
	private float resetAnimationDelay;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string resetAnimationTrigger;

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x918C28", Offset = "0x918C28", VA = "0x918C28")]
	private void Start()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x918C30", Offset = "0x918C30", VA = "0x918C30")]
	private void SetValue(int score)
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x913F00", Offset = "0x913F00", VA = "0x913F00")]
	public void Add(int value)
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x913EA0", Offset = "0x913EA0", VA = "0x913EA0")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x918C8C", Offset = "0x918C8C", VA = "0x918C8C")]
	public int GetValue()
	{
		return default(int);
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x918C68", Offset = "0x918C68", VA = "0x918C68")]
	private void PlayResetAnimation()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x918C94", Offset = "0x918C94", VA = "0x918C94")]
	[IteratorStateMachine(typeof(<PlayResetAnimationCoroutine>d__12))]
	private IEnumerator PlayResetAnimationCoroutine(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x918D40", Offset = "0x918D40", VA = "0x918D40")]
	public ScoreCurrentControl()
	{
	}
}
[Token(Token = "0x200004A")]
[HelpURL("https://makaka.org/unity-assets")]
public class MaterialControl : MonoBehaviour
{
	[Token(Token = "0x200004B")]
	[CompilerGenerated]
	private sealed class <FadeCoroutine>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MaterialControl <>4__this;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isFadeIn;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool isResetColorToStandardInTheBeginning;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool isResetFadingInTheEnd;

		[Token(Token = "0x17000024")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001AB")]
			[Address(RVA = "0x9194D0", Offset = "0x9194D0", VA = "0x9194D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001AD")]
			[Address(RVA = "0x919518", Offset = "0x919518", VA = "0x919518", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x919080", Offset = "0x919080", VA = "0x919080")]
		[DebuggerHidden]
		public <FadeCoroutine>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x919278", Offset = "0x919278", VA = "0x919278", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x91927C", Offset = "0x91927C", VA = "0x91927C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x9194D8", Offset = "0x9194D8", VA = "0x9194D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Renderer renderer3D;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material materialStandardShared;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material materialStandardClone;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Header("Shader Parameter Changing")]
	private bool isParameterChangingOnAtStart;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string parameter;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("1 = Fading In On Start.")]
	[SerializeField]
	private float parameterOnStart;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float parameterMax;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float parameterMin;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float parameterCurrent;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Delays (Parameter Changing must be completed before Object's Deactivating)")]
	public float delayOut;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float delayIn;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Speed (Parameter = Time)")]
	private AnimationCurve speedOut;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AnimationCurve speedIn;

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x918EB4", Offset = "0x918EB4", VA = "0x918EB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x918EE4", Offset = "0x918EE4", VA = "0x918EE4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x919054", Offset = "0x919054", VA = "0x919054")]
	public void Fade(bool isFadeIn, bool isResetFadingInTheEnd, bool isResetColorToStandardInTheBeginning = false)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x9152C0", Offset = "0x9152C0", VA = "0x9152C0")]
	[IteratorStateMachine(typeof(<FadeCoroutine>d__16))]
	public IEnumerator FadeCoroutine(bool isFadeIn, bool isResetFadingInTheEnd, bool isResetColorToStandardInTheBeginning = false)
	{
		return null;
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x918F78", Offset = "0x918F78", VA = "0x918F78")]
	private void Step()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x9190C4", Offset = "0x9190C4", VA = "0x9190C4")]
	private void ResetFade()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x9190A8", Offset = "0x9190A8", VA = "0x9190A8")]
	public void SetMaterial(Material material)
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x9190DC", Offset = "0x9190DC", VA = "0x9190DC")]
	private void SetMaterialStandard()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x919100", Offset = "0x919100", VA = "0x919100")]
	public void SetRendererEnabled(bool enabled)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x9191B0", Offset = "0x9191B0", VA = "0x9191B0")]
	public MaterialControl()
	{
	}
}
[Token(Token = "0x200004C")]
public class TagSelectorAttribute : PropertyAttribute
{
	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string Untagged;

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x919520", Offset = "0x919520", VA = "0x919520")]
	public TagSelectorAttribute()
	{
	}
}
[Token(Token = "0x200004D")]
public class PublisherReadme : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x200004E")]
	public class Section
	{
		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string heading;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string linkText;

		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string url;

		[Token(Token = "0x60001B1")]
		[Address(RVA = "0x91959C", Offset = "0x91959C", VA = "0x91959C")]
		public Section()
		{
		}
	}

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D icon;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string title;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Section[] sections;

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x919594", Offset = "0x919594", VA = "0x919594")]
	public PublisherReadme()
	{
	}
}
[Token(Token = "0x200004F")]
[HelpURL("https://makaka.org/unity-assets")]
[AddComponentMenu("Scripts/Makaka Games/Throw Control/Throw Control")]
public class ThrowControl : MonoBehaviour
{
	[Token(Token = "0x2000050")]
	public enum Mode
	{
		[Token(Token = "0x40001B4")]
		Flick,
		[Token(Token = "0x40001B5")]
		ClickOrTap
	}

	[Serializable]
	[Token(Token = "0x2000051")]
	public class UnityEventWithThrowingObject : UnityEvent<ThrowingObject>
	{
		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x91A5F4", Offset = "0x91A5F4", VA = "0x91A5F4")]
		public UnityEventWithThrowingObject()
		{
		}
	}

	[Token(Token = "0x2000052")]
	[CompilerGenerated]
	private sealed class <InitThrowingObjectsCoroutine>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ThrowControl <>4__this;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000027")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001CB")]
			[Address(RVA = "0x91AB00", Offset = "0x91AB00", VA = "0x91AB00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001CD")]
			[Address(RVA = "0x91AB48", Offset = "0x91AB48", VA = "0x91AB48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x919648", Offset = "0x919648", VA = "0x919648")]
		[DebuggerHidden]
		public <InitThrowingObjectsCoroutine>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x91A63C", Offset = "0x91A63C", VA = "0x91A63C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x91A640", Offset = "0x91A640", VA = "0x91A640", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x91AB08", Offset = "0x91AB08", VA = "0x91AB08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000053")]
	[CompilerGenerated]
	private sealed class <OnTouchForFlickCoroutine>d__57 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ThrowControl <>4__this;

		[Token(Token = "0x17000029")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001D1")]
			[Address(RVA = "0x91AC24", Offset = "0x91AC24", VA = "0x91AC24", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001D3")]
			[Address(RVA = "0x91AC6C", Offset = "0x91AC6C", VA = "0x91AC6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x919C6C", Offset = "0x919C6C", VA = "0x919C6C")]
		[DebuggerHidden]
		public <OnTouchForFlickCoroutine>d__57(int <>1__state)
		{
		}

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x91AB50", Offset = "0x91AB50", VA = "0x91AB50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x91AB54", Offset = "0x91AB54", VA = "0x91AB54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x91AC2C", Offset = "0x91AC2C", VA = "0x91AC2C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000054")]
	[CompilerGenerated]
	private sealed class <ThrowCoroutine>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ThrowingObject throwingObject;

		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ThrowControl <>4__this;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 inputPositionFirst;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2 inputPositionLast;

		[Token(Token = "0x1700002B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001D7")]
			[Address(RVA = "0x91B36C", Offset = "0x91B36C", VA = "0x91B36C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001D9")]
			[Address(RVA = "0x91B3B4", Offset = "0x91B3B4", VA = "0x91B3B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x919C94", Offset = "0x919C94", VA = "0x919C94")]
		[DebuggerHidden]
		public <ThrowCoroutine>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x91AC74", Offset = "0x91AC74", VA = "0x91AC74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x91AC78", Offset = "0x91AC78", VA = "0x91AC78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x91B374", Offset = "0x91B374", VA = "0x91B374", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000055")]
	[CompilerGenerated]
	private sealed class <FadeOutCoroutine>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ThrowControl <>4__this;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ThrowingObject throwingObject;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001DD")]
			[Address(RVA = "0x91B49C", Offset = "0x91B49C", VA = "0x91B49C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001DF")]
			[Address(RVA = "0x91B4E4", Offset = "0x91B4E4", VA = "0x91B4E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x919D5C", Offset = "0x919D5C", VA = "0x919D5C")]
		[DebuggerHidden]
		public <FadeOutCoroutine>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x91B3BC", Offset = "0x91B3BC", VA = "0x91B3BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x91B3C0", Offset = "0x91B3C0", VA = "0x91B3C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x91B4A4", Offset = "0x91B4A4", VA = "0x91B4A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000056")]
	[CompilerGenerated]
	private sealed class <ResetCoroutine>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ThrowControl <>4__this;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ThrowingObject throwingObject;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001E3")]
			[Address(RVA = "0x91B860", Offset = "0x91B860", VA = "0x91B860", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001E5")]
			[Address(RVA = "0x91B8A8", Offset = "0x91B8A8", VA = "0x91B8A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x919E24", Offset = "0x919E24", VA = "0x919E24")]
		[DebuggerHidden]
		public <ResetCoroutine>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x91B4EC", Offset = "0x91B4EC", VA = "0x91B4EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x91B4F0", Offset = "0x91B4F0", VA = "0x91B4F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x91B868", Offset = "0x91B868", VA = "0x91B868", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000057")]
	[CompilerGenerated]
	private sealed class <GetNextThrowCoroutine>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ThrowControl <>4__this;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x17000031")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001E9")]
			[Address(RVA = "0x91BBE8", Offset = "0x91BBE8", VA = "0x91BBE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001EB")]
			[Address(RVA = "0x91BC30", Offset = "0x91BC30", VA = "0x91BC30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x919ED0", Offset = "0x919ED0", VA = "0x919ED0")]
		[DebuggerHidden]
		public <GetNextThrowCoroutine>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x91B8B0", Offset = "0x91B8B0", VA = "0x91B8B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x91B8B4", Offset = "0x91B8B4", VA = "0x91B8B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x91BBF0", Offset = "0x91BBF0", VA = "0x91BBF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000058")]
	[CompilerGenerated]
	private sealed class <ChangeLayerCoroutine>d__66 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ThrowControl <>4__this;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject to;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int layerIndex;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001EF")]
			[Address(RVA = "0x91BD04", Offset = "0x91BD04", VA = "0x91BD04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001F1")]
			[Address(RVA = "0x91BD4C", Offset = "0x91BD4C", VA = "0x91BD4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x91A380", Offset = "0x91A380", VA = "0x91A380")]
		[DebuggerHidden]
		public <ChangeLayerCoroutine>d__66(int <>1__state)
		{
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x91BC38", Offset = "0x91BC38", VA = "0x91BC38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x91BC3C", Offset = "0x91BC3C", VA = "0x91BC3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x91BD0C", Offset = "0x91BD0C", VA = "0x91BD0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RandomObjectPooler randomObjectPooler;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnInitialized;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ThrowingObject throwingObjectTempForRegistration;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("FPS (throw force takes into account the speed of the player's movement) ")]
	public CharacterController characterControllerFPS;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float characterControllerFPSSpeedCurrent;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Camera")]
	public Camera cameraMain;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Mode")]
	public Mode modeAtAwake;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool isTouchForFlick;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	[Tooltip("If it's false then it allows fast flicks only.\n\nPositions in the last and previous frames are taken into account.\n\nPlay with params: sensivity = new Vector2(100f, 100f); force = 45f.")]
	public bool isFullPathForFlick;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float lerpTimeFactorOnTouchForFlick;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Tooltip("Actual for FPS Controller")]
	[Header("Throw")]
	public bool isInputPositionFixed;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Range(0.01f, 1f)]
	public float inputPositionFixedScreenFactorX;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Range(0.01f, 1f)]
	public float inputPositionFixedScreenFactorY;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector2 inputSensitivity;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float forceFactorExtra;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float torqueFactorExtra;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float torqueAngleExtra;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform parentOnThrow;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEventWithThrowingObject OnThrow;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Next Throw")]
	[Range(0.1f, 10f)]
	public float nextThrowGettingDelay;

	[Token(Token = "0x4000199")]
	private const float nextCoroutineCallTryDelay = 0.1f;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool isNextThrowGetting;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GameObject gameObjectTemp;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ThrowingObject throwingObjectTemp;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEventWithThrowingObject OnNextThrowGetting;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Header("Tag")]
	public bool isTagCustomSetOnInit;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[TagSelector]
	public string tagCustomOnInit;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Header("Layer Changing (actual for quick Throwing to neutralize mutual collisions)")]
	public bool isLayerChangingOn;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[Range(0f, 5f)]
	public float layerChangingOnThrowDelay;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public LayerMask layerMaskOnThrow;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public LayerMask layerMaskOnReset;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Tooltip("May be useful in very rare cases. E.g., when you play with Time Scale and Layers can't be changed quickly.\n\nNote: If you are dealing with Cloth, then you must operate with it outside of this asset to avoid collisions when OnReset() Event is dispatched:\nnull Cloth Collider every dispatch of OnNextThrowGetting() Event & register Cloth Collider every dispatch of OnThrow() Event.")]
	[Range(0f, 1f)]
	public float delayAfterLayerChanging;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private int layerIndexOnThrow;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int layerIndexOnReset;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[Range(0f, 10f)]
	[Header("Reset (must be called after the end of Fading Out)")]
	public float resetDelay;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public UnityEventWithThrowingObject OnReset;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GameObject gameObjectCurrent;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private ThrowingObject throwingObjectCurrent;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private RaycastHit raycastHit;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private bool isInputBegan;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x125")]
	private bool isInputEnded;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x126")]
	private bool isInputHeldDown;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Vector3 inputPositionCurrent;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private Vector3 inputPositionPivot;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[Header("Fading")]
	public bool isFadingOn;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[Header("Fading Out (must be completed before Reset)")]
	public UnityEventWithThrowingObject OnFadingOut;

	[Token(Token = "0x17000026")]
	public List<ThrowingObject> throwingObjectsRegistered
	{
		[Token(Token = "0x60001B2")]
		[Address(RVA = "0x9195A4", Offset = "0x9195A4", VA = "0x9195A4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001B3")]
		[Address(RVA = "0x9195AC", Offset = "0x9195AC", VA = "0x9195AC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x9195B4", Offset = "0x9195B4", VA = "0x9195B4")]
	public void InitThrowingObjects()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x9195D4", Offset = "0x9195D4", VA = "0x9195D4")]
	[IteratorStateMachine(typeof(<InitThrowingObjectsCoroutine>d__53))]
	private IEnumerator InitThrowingObjectsCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x913764", Offset = "0x913764", VA = "0x913764")]
	public void GetFirstThrow()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x919698", Offset = "0x919698", VA = "0x919698")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x919AF0", Offset = "0x919AF0", VA = "0x919AF0")]
	private Vector3 GetInputPositionFixed()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x919B40", Offset = "0x919B40", VA = "0x919B40")]
	[IteratorStateMachine(typeof(<OnTouchForFlickCoroutine>d__57))]
	private IEnumerator OnTouchForFlickCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x919BB4", Offset = "0x919BB4", VA = "0x919BB4")]
	[IteratorStateMachine(typeof(<ThrowCoroutine>d__58))]
	private IEnumerator ThrowCoroutine(Vector2 inputPositionFirst, Vector2 inputPositionLast, ThrowingObject throwingObject)
	{
		return null;
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x919CBC", Offset = "0x919CBC", VA = "0x919CBC")]
	[IteratorStateMachine(typeof(<FadeOutCoroutine>d__59))]
	private IEnumerator FadeOutCoroutine(float delay, ThrowingObject throwingObject)
	{
		return null;
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x919D84", Offset = "0x919D84", VA = "0x919D84")]
	[IteratorStateMachine(typeof(<ResetCoroutine>d__60))]
	private IEnumerator ResetCoroutine(float delay, ThrowingObject throwingObject)
	{
		return null;
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x919670", Offset = "0x919670", VA = "0x919670")]
	private void GetNextThrow(float delay)
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x919E4C", Offset = "0x919E4C", VA = "0x919E4C")]
	[IteratorStateMachine(typeof(<GetNextThrowCoroutine>d__62))]
	private IEnumerator GetNextThrowCoroutine(float delay)
	{
		return null;
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x919EF8", Offset = "0x919EF8", VA = "0x919EF8")]
	public ThrowingObject RegisterOrGetThrowingObject(GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x91A16C", Offset = "0x91A16C", VA = "0x91A16C")]
	public void PlayRandomSoundDependingOnSpeed(ThrowingObject.AudioData audioData, GameObject to, bool isStoppedBeforePlay)
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x91A234", Offset = "0x91A234", VA = "0x91A234")]
	public void SetMaterial(Material material, GameObject to)
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x91A2D8", Offset = "0x91A2D8", VA = "0x91A2D8")]
	[IteratorStateMachine(typeof(<ChangeLayerCoroutine>d__66))]
	private IEnumerator ChangeLayerCoroutine(float delay, GameObject to, int layerIndex)
	{
		return null;
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x91A3A8", Offset = "0x91A3A8", VA = "0x91A3A8")]
	private void ChangeLayer(GameObject to, int layerIndex)
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x91A3C4", Offset = "0x91A3C4", VA = "0x91A3C4")]
	private int LayerMaskValueToIndex(int value)
	{
		return default(int);
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x91A4EC", Offset = "0x91A4EC", VA = "0x91A4EC")]
	private void InitLayerIndexes()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x91A52C", Offset = "0x91A52C", VA = "0x91A52C")]
	public ThrowControl()
	{
	}
}
[Token(Token = "0x2000059")]
[AddComponentMenu("Scripts/Makaka Games/Throw Control/Throwing Object")]
[HelpURL("https://makaka.org/unity-assets")]
public class ThrowingObject : MonoBehaviour
{
	[Token(Token = "0x200005A")]
	public enum CameraAxes
	{
		[Token(Token = "0x40001F7")]
		CameraMainTransformUp,
		[Token(Token = "0x40001F8")]
		CameraMainTransformForward,
		[Token(Token = "0x40001F9")]
		CameraMainTransformRight,
		[Token(Token = "0x40001FA")]
		CameraMainTransformUpRight,
		[Token(Token = "0x40001FB")]
		CameraMainTransformLeft,
		[Token(Token = "0x40001FC")]
		CameraMainTransformUpLeft
	}

	[Token(Token = "0x200005B")]
	public enum RotationsForNextThrow
	{
		[Token(Token = "0x40001FE")]
		Default,
		[Token(Token = "0x40001FF")]
		Random,
		[Token(Token = "0x4000200")]
		Custom
	}

	[Serializable]
	[Token(Token = "0x200005C")]
	public class AudioData
	{
		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioClip[] audioClips;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speedClampMin;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speedClampMax;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(-3f, 3f)]
		public float pitchMin;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float pitchFactor;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float volumeFactor;

		[Token(Token = "0x6000205")]
		[Address(RVA = "0x9123AC", Offset = "0x9123AC", VA = "0x9123AC")]
		public AudioData()
		{
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0x91C328", Offset = "0x91C328", VA = "0x91C328")]
		public AudioData(AudioClip[] audioClips, float speedClampMin = 0f, float speedClampMax = 15f, float pitchMin = 0.8f, float pitchFactor = 0.02f, float volumeFactor = 0.125f)
		{
		}
	}

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Collider[] colliders3D;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MaterialControl materialControl;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Custom Data")]
	[Tooltip("Custom Flag for Any User Logic")]
	public bool flagCustom;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Convenient Access to Custom Control Script of this Throwing Object")]
	public MonoBehaviour monoBehaviourCustom;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Header("Force")]
	private float forceFactor;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 forceDirection;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector2 strength;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector2 strengthFactor;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private CameraAxes forceDirectionExtra;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 forceDirectionExtraVector3;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Torque")]
	public CameraAxes torqueAxis;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 torqueAxisVector3;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float torqueAngleBasic;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private float torqueAngle;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private float torqueFactor;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Quaternion torqueRotation;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	[Tooltip("It clamps Torque")]
	private float maxAngularVelocityAtAwake;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Header("Center Of Mass")]
	[Tooltip("Base point for selection of Custom Center Of Mass")]
	[SerializeField]
	private bool isCenterOfMassByDefaultLoggedAtAwake;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	[SerializeField]
	private bool isCenterOfMassCustomUsedAtAwake;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	private Vector3 centerOfMassCustomAtAwake;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Quaternion rotationByDefault;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Header("Position")]
	[Tooltip("Middle is in the bottom of the screen: (0.5f, 0.1f)\nY must be less Y of Input Position Fixed.\n\nLinked with Input Sensitivity.")]
	public Vector2 positionInViewportOnReset;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Tooltip("Used for Z coordinate in Reset() & OnTouchForFlick() ")]
	public float cameraNearClipPlaneFactorOnReset;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[Header("Rotation")]
	[SerializeField]
	private bool isObjectRotatedInThrowDirection;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private RotationsForNextThrow rotationOnReset;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private Vector3 rotationOnResetCustom;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[Header("Audio — Whoosh")]
	[SerializeField]
	private AudioSource audioSourceWhoosh;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private AudioData audioDataWhoosh;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[HideInInspector]
	public bool isThrown;

	[Token(Token = "0x14000004")]
	public event Action OnThrow
	{
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x91BD54", Offset = "0x91BD54", VA = "0x91BD54")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x91BDF0", Offset = "0x91BDF0", VA = "0x91BDF0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action OnResetPhysicsBase
	{
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x9128C8", Offset = "0x9128C8", VA = "0x9128C8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x91BE8C", Offset = "0x91BE8C", VA = "0x91BE8C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0x91BF28", Offset = "0x91BF28", VA = "0x91BF28")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x91AA70", Offset = "0x91AA70", VA = "0x91AA70")]
	public void SetRendererEnabled(bool enabled)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x913090", Offset = "0x913090", VA = "0x913090")]
	public void SetMaterial(Material material)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x91B0AC", Offset = "0x91B0AC", VA = "0x91B0AC")]
	public void ThrowBase(Vector2 inputPositionFirst, Vector2 inputPositionLast, Vector2 inputSensitivity, Transform cameraMain, int screenHight, float forceFactorExtra, float torqueFactorExtra, float torqueAngleExtra)
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0x91C048", Offset = "0x91C048", VA = "0x91C048")]
	private Vector3 GetCameraAxis(Transform cameraMain, CameraAxes cameraAxis)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0x91B7DC", Offset = "0x91B7DC", VA = "0x91B7DC")]
	public void ResetPhysicsBase()
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0x91A9F4", Offset = "0x91A9F4", VA = "0x91A9F4")]
	public void ResetPosition(Camera cameraMain)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x91A9F8", Offset = "0x91A9F8", VA = "0x91A9F8")]
	public void ResetRotation(Transform parent)
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x91C1F4", Offset = "0x91C1F4", VA = "0x91C1F4")]
	private Quaternion GetRandomRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x91B360", Offset = "0x91B360", VA = "0x91B360")]
	public void PlayAudioWhoosh()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x91A228", Offset = "0x91A228", VA = "0x91A228")]
	public void PlayAudioRandomlyDependingOnSpeed(AudioData audioData, bool isStoppedBeforePlay)
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x912C90", Offset = "0x912C90", VA = "0x912C90")]
	public void PlayAudioRandomlyDependingOnSpeed(AudioData audioData, bool isStoppedBeforePlay, AudioSource audioSource)
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x91B7F8", Offset = "0x91B7F8", VA = "0x91B7F8")]
	public void ActivateTriggersOnColliders(bool isTrigger)
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x91B044", Offset = "0x91B044", VA = "0x91B044")]
	public void SetCollidersEnabled(bool enabled)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x91C26C", Offset = "0x91C26C", VA = "0x91C26C")]
	public ThrowingObject()
	{
	}
}
[Token(Token = "0x200005D")]
public class StormVFXTerrainDemoCamera : MonoBehaviour
{
	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float moveSpeed;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float height;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space]
	public float acceleration;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float deceleration;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 velocity;

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x91C3A8", Offset = "0x91C3A8", VA = "0x91C3A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x91C3AC", Offset = "0x91C3AC", VA = "0x91C3AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x91C8FC", Offset = "0x91C8FC", VA = "0x91C8FC")]
	public StormVFXTerrainDemoCamera()
	{
	}
}
[Token(Token = "0x200005E")]
public class StormVFXTerrainDemoFollowTargetPosition : MonoBehaviour
{
	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x91C910", Offset = "0x91C910", VA = "0x91C910")]
	private void Start()
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x91C914", Offset = "0x91C914", VA = "0x91C914")]
	private void Update()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x91C918", Offset = "0x91C918", VA = "0x91C918")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x91C958", Offset = "0x91C958", VA = "0x91C958")]
	public StormVFXTerrainDemoFollowTargetPosition()
	{
	}
}
[Token(Token = "0x200005F")]
public class ParticleSystemTimeRemap : MonoBehaviour
{
	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] startTimes;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] simulationTimes;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float startTime;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float simulationSpeedScale;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useFixedDeltaTime;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool gameObjectDeactivated;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool reverseSimulation;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float elapsedTime;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve simulationSpeedOverTime;

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x91C960", Offset = "0x91C960", VA = "0x91C960")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0x91CB60", Offset = "0x91CB60", VA = "0x91CB60")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x91CBC0", Offset = "0x91CBC0", VA = "0x91CBC0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x91CF40", Offset = "0x91CF40", VA = "0x91CF40")]
	public ParticleSystemTimeRemap()
	{
	}
}
[Token(Token = "0x2000060")]
public class RewindParticleSystem : MonoBehaviour
{
	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] startTimes;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] simulationTimes;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float startTime;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float simulationSpeedScale;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useFixedDeltaTime;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool gameObjectDeactivated;

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x91CF94", Offset = "0x91CF94", VA = "0x91CF94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x91D15C", Offset = "0x91D15C", VA = "0x91D15C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x91D1BC", Offset = "0x91D1BC", VA = "0x91D1BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x91D4B4", Offset = "0x91D4B4", VA = "0x91D4B4")]
	public RewindParticleSystem()
	{
	}
}
[Token(Token = "0x2000061")]
public class RewindParticleSystemSimple : MonoBehaviour
{
	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float simulationTime;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float startTime;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float internalStartTime;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool gameObjectDeactivated;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float simulationSpeed;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool useFixedDeltaTime;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool rewind;

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x91D4D0", Offset = "0x91D4D0", VA = "0x91D4D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x91D5E0", Offset = "0x91D5E0", VA = "0x91D5E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x91D640", Offset = "0x91D640", VA = "0x91D640")]
	private void Update()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x91D844", Offset = "0x91D844", VA = "0x91D844")]
	public RewindParticleSystemSimple()
	{
	}
}
[Token(Token = "0x2000062")]
public class RewindParticleSystemSuperSimple : MonoBehaviour
{
	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] simulationTimes;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float startTime;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float simulationSpeedScale;

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x91D864", Offset = "0x91D864", VA = "0x91D864")]
	private void Initialize()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x91D900", Offset = "0x91D900", VA = "0x91D900")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x91D990", Offset = "0x91D990", VA = "0x91D990")]
	private void Update()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x91DC70", Offset = "0x91DC70", VA = "0x91DC70")]
	public RewindParticleSystemSuperSimple()
	{
	}
}
[Token(Token = "0x2000063")]
public class ParticleForceFieldsDemo : MonoBehaviour
{
	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Overview")]
	public Text FPSText;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text particleCountText;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Toggle postProcessingToggle;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MonoBehaviour postProcessing;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Particle System Settings")]
	public ParticleSystem particleSystem;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem.MainModule particleSystemMainModule;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem.EmissionModule particleSystemEmissionModule;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text maxParticlesText;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text particlesPerSecondText;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Slider maxParticlesSlider;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Slider particlesPerSecondSlider;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Attraction Particle Force Field Settings")]
	public AttractionParticleForceField attractionParticleForceField;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text attractionParticleForceFieldRadiusText;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text attractionParticleForceFieldMaxForceText;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text attractionParticleForceFieldArrivalRadiusText;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text attractionParticleForceFieldArrivedRadiusText;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text attractionParticleForceFieldPositionTextX;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text attractionParticleForceFieldPositionTextY;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text attractionParticleForceFieldPositionTextZ;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Slider attractionParticleForceFieldRadiusSlider;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Slider attractionParticleForceFieldMaxForceSlider;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Slider attractionParticleForceFieldArrivalRadiusSlider;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Slider attractionParticleForceFieldArrivedRadiusSlider;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Slider attractionParticleForceFieldPositionSliderX;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Slider attractionParticleForceFieldPositionSliderY;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Slider attractionParticleForceFieldPositionSliderZ;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[Header("Vortex Particle Force Field Settings")]
	public VortexParticleForceField vortexParticleForceField;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Text vortexParticleForceFieldRadiusText;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Text vortexParticleForceFieldMaxForceText;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Text vortexParticleForceFieldRotationTextX;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Text vortexParticleForceFieldRotationTextY;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Text vortexParticleForceFieldRotationTextZ;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Text vortexParticleForceFieldPositionTextX;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Text vortexParticleForceFieldPositionTextY;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Text vortexParticleForceFieldPositionTextZ;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Slider vortexParticleForceFieldRadiusSlider;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Slider vortexParticleForceFieldMaxForceSlider;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Slider vortexParticleForceFieldRotationSliderX;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Slider vortexParticleForceFieldRotationSliderY;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Slider vortexParticleForceFieldRotationSliderZ;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Slider vortexParticleForceFieldPositionSliderX;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Slider vortexParticleForceFieldPositionSliderY;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Slider vortexParticleForceFieldPositionSliderZ;

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x91DC84", Offset = "0x91DC84", VA = "0x91DC84")]
	private void Start()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x91E738", Offset = "0x91E738", VA = "0x91E738")]
	private void Update()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x91E844", Offset = "0x91E844", VA = "0x91E844")]
	public void ReloadScene()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x91E8B4", Offset = "0x91E8B4", VA = "0x91E8B4")]
	public void SetMaxParticles(float value)
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x91E96C", Offset = "0x91E96C", VA = "0x91E96C")]
	public void SetParticleEmissionPerSecond(float value)
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x91EA34", Offset = "0x91EA34", VA = "0x91EA34")]
	public void SetAttractionParticleForceFieldRadius(float value)
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x91EADC", Offset = "0x91EADC", VA = "0x91EADC")]
	public void SetAttractionParticleForceFieldMaxForce(float value)
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x91EB84", Offset = "0x91EB84", VA = "0x91EB84")]
	public void SetAttractionParticleForceFieldArrivalRadius(float value)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x91EC2C", Offset = "0x91EC2C", VA = "0x91EC2C")]
	public void SetAttractionParticleForceFieldArrivedRadius(float value)
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x91ECD4", Offset = "0x91ECD4", VA = "0x91ECD4")]
	public void SetAttractionParticleForceFieldPositionX(float value)
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x91EDC4", Offset = "0x91EDC4", VA = "0x91EDC4")]
	public void SetAttractionParticleForceFieldPositionY(float value)
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x91EEB4", Offset = "0x91EEB4", VA = "0x91EEB4")]
	public void SetAttractionParticleForceFieldPositionZ(float value)
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x91EFA4", Offset = "0x91EFA4", VA = "0x91EFA4")]
	public void SetVortexParticleForceFieldRadius(float value)
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x91F04C", Offset = "0x91F04C", VA = "0x91F04C")]
	public void SetVortexParticleForceFieldMaxForce(float value)
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x91F0F4", Offset = "0x91F0F4", VA = "0x91F0F4")]
	public void SetVortexParticleForceFieldRotationX(float value)
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x91F1E4", Offset = "0x91F1E4", VA = "0x91F1E4")]
	public void SetVortexParticleForceFieldRotationY(float value)
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x91F2D4", Offset = "0x91F2D4", VA = "0x91F2D4")]
	public void SetVortexParticleForceFieldRotationZ(float value)
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x91F3C4", Offset = "0x91F3C4", VA = "0x91F3C4")]
	public void SetVortexParticleForceFieldPositionX(float value)
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x91F4B4", Offset = "0x91F4B4", VA = "0x91F4B4")]
	public void SetVortexParticleForceFieldPositionY(float value)
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x91F5A4", Offset = "0x91F5A4", VA = "0x91F5A4")]
	public void SetVortexParticleForceFieldPositionZ(float value)
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x91F694", Offset = "0x91F694", VA = "0x91F694")]
	public ParticleForceFieldsDemo()
	{
	}
}
[Token(Token = "0x2000064")]
public class ParticleForceFieldsDemo_CameraRig : MonoBehaviour
{
	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pivot;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetRotation;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 90f)]
	public float rotationLimit;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rotationSpeed;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotationLerpSpeed;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 startRotation;

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x91F69C", Offset = "0x91F69C", VA = "0x91F69C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x91F6D8", Offset = "0x91F6D8", VA = "0x91F6D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x91F8D4", Offset = "0x91F8D4", VA = "0x91F8D4")]
	public ParticleForceFieldsDemo_CameraRig()
	{
	}
}
[Token(Token = "0x2000065")]
public class ParticlePlexusDemo_CameraRig : MonoBehaviour
{
	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pivot;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetRotation;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 90f)]
	public float rotationLimit;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rotationSpeed;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotationLerpSpeed;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 startRotation;

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x91F8F0", Offset = "0x91F8F0", VA = "0x91F8F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x91F92C", Offset = "0x91F92C", VA = "0x91F92C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x91FB28", Offset = "0x91FB28", VA = "0x91FB28")]
	public ParticlePlexusDemo_CameraRig()
	{
	}
}
[Token(Token = "0x2000066")]
public class DemoController : MonoBehaviour
{
	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] rocket_prefab;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float apply_force_timer;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform cur_rocket;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int cur_rocket_n;

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x91FB44", Offset = "0x91FB44", VA = "0x91FB44")]
	private void Awake()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x91FCE0", Offset = "0x91FCE0", VA = "0x91FCE0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x91FB48", Offset = "0x91FB48", VA = "0x91FB48")]
	private void Init()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x91FF78", Offset = "0x91FF78", VA = "0x91FF78")]
	private void Update()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x92003C", Offset = "0x92003C", VA = "0x92003C")]
	public DemoController()
	{
	}
}
[Token(Token = "0x2000067")]
public class SpawnFireballs : MonoBehaviour
{
	[Token(Token = "0x2000068")]
	[CompilerGenerated]
	private sealed class <SpawnForever>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpawnFireballs <>4__this;

		[Token(Token = "0x17000035")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000244")]
			[Address(RVA = "0x92036C", Offset = "0x92036C", VA = "0x92036C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000246")]
			[Address(RVA = "0x9203B4", Offset = "0x9203B4", VA = "0x9203B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x92013C", Offset = "0x92013C", VA = "0x92013C")]
		[DebuggerHidden]
		public <SpawnForever>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x920174", Offset = "0x920174", VA = "0x920174", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0x920178", Offset = "0x920178", VA = "0x920178", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0x920374", Offset = "0x920374", VA = "0x920374", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] FireballPrefabs;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Delay;

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x9200A8", Offset = "0x9200A8", VA = "0x9200A8")]
	private void Start()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x9200C8", Offset = "0x9200C8", VA = "0x9200C8")]
	[IteratorStateMachine(typeof(<SpawnForever>d__3))]
	private IEnumerator SpawnForever()
	{
		return null;
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x920164", Offset = "0x920164", VA = "0x920164")]
	public SpawnFireballs()
	{
	}
}
[Token(Token = "0x2000069")]
public class ForcedReset : MonoBehaviour
{
	[Token(Token = "0x6000247")]
	[Address(RVA = "0x9203BC", Offset = "0x9203BC", VA = "0x9203BC")]
	public ForcedReset()
	{
	}
}
[Token(Token = "0x200006A")]
public class TurnFireOnAndOff : MonoBehaviour
{
	[Token(Token = "0x200006B")]
	[CompilerGenerated]
	private sealed class <OnOffForever>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TurnFireOnAndOff <>4__this;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animator <animator>5__2;

		[Token(Token = "0x17000037")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600024E")]
			[Address(RVA = "0x92063C", Offset = "0x92063C", VA = "0x92063C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000250")]
			[Address(RVA = "0x920684", Offset = "0x920684", VA = "0x920684", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0x920458", Offset = "0x920458", VA = "0x920458")]
		[DebuggerHidden]
		public <OnOffForever>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0x920488", Offset = "0x920488", VA = "0x920488", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0x92048C", Offset = "0x92048C", VA = "0x92048C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0x920644", Offset = "0x920644", VA = "0x920644", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x9203C4", Offset = "0x9203C4", VA = "0x9203C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x9203E4", Offset = "0x9203E4", VA = "0x9203E4")]
	[IteratorStateMachine(typeof(<OnOffForever>d__1))]
	private IEnumerator OnOffForever()
	{
		return null;
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x920480", Offset = "0x920480", VA = "0x920480")]
	public TurnFireOnAndOff()
	{
	}
}
[Token(Token = "0x200006C")]
public class BillboardPlane : MonoBehaviour
{
	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float BillboardBlendMax;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] Billboards;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _CameraTransform;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3[] _StoredUp;

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x92068C", Offset = "0x92068C", VA = "0x92068C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x920830", Offset = "0x920830", VA = "0x920830")]
	private void Update()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x920BD4", Offset = "0x920BD4", VA = "0x920BD4")]
	public BillboardPlane()
	{
	}
}
[Token(Token = "0x200006D")]
public class Fireball : MonoBehaviour
{
	[Token(Token = "0x200006E")]
	[CompilerGenerated]
	private sealed class <FlyAndDie>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Fireball <>4__this;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <dist>5__2;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <position>5__3;

		[Token(Token = "0x17000039")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600025A")]
			[Address(RVA = "0x920E68", Offset = "0x920E68", VA = "0x920E68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600025C")]
			[Address(RVA = "0x920EB0", Offset = "0x920EB0", VA = "0x920EB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x920C7C", Offset = "0x920C7C", VA = "0x920C7C")]
		[DebuggerHidden]
		public <FlyAndDie>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x920CB8", Offset = "0x920CB8", VA = "0x920CB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0x920CBC", Offset = "0x920CBC", VA = "0x920CBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0x920E70", Offset = "0x920E70", VA = "0x920E70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Distance;

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x920BE8", Offset = "0x920BE8", VA = "0x920BE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x920C08", Offset = "0x920C08", VA = "0x920C08")]
	[IteratorStateMachine(typeof(<FlyAndDie>d__3))]
	private IEnumerator FlyAndDie()
	{
		return null;
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x920CA4", Offset = "0x920CA4", VA = "0x920CA4")]
	public Fireball()
	{
	}
}
[Token(Token = "0x200006F")]
public class FireEffect : MonoBehaviour
{
	[Token(Token = "0x2000070")]
	public enum Axis
	{
		[Token(Token = "0x4000284")]
		X,
		[Token(Token = "0x4000285")]
		Y
	}

	[Token(Token = "0x2000071")]
	private class FireRendererData
	{
		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector4 ScrollTex_ST;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MaterialPropertyBlock ScrollBlock;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ScrollSpeed;

		[Token(Token = "0x6000263")]
		[Address(RVA = "0x9211D4", Offset = "0x9211D4", VA = "0x9211D4")]
		public FireRendererData()
		{
		}
	}

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TilingX;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float TilingY;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float ScrollSpeedMin;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float ScrollSpeedMax;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Axis ScrollAxis;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TemperatureCoarse;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float TemperatureDetail;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float Opacity;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Renderer[] Renderers;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<FireRendererData> _RendererData;

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x920EB8", Offset = "0x920EB8", VA = "0x920EB8")]
	private void Initialize()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x9211DC", Offset = "0x9211DC", VA = "0x9211DC")]
	private void Reset()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x921234", Offset = "0x921234", VA = "0x921234")]
	private void Start()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x921238", Offset = "0x921238", VA = "0x921238")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x921250", Offset = "0x921250", VA = "0x921250")]
	private void Update()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x921480", Offset = "0x921480", VA = "0x921480")]
	public FireEffect()
	{
	}
}
[Token(Token = "0x2000072")]
public enum Direction
{
	[Token(Token = "0x400028A")]
	Horizontal,
	[Token(Token = "0x400028B")]
	Vertical
}
[Token(Token = "0x2000073")]
public class MovingTarget : MonoBehaviour
{
	[Token(Token = "0x2000074")]
	[CompilerGenerated]
	private sealed class <MoveTarget>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MovingTarget <>4__this;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <moveDir>5__2;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <dir>5__3;

		[Token(Token = "0x1700003C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000271")]
			[Address(RVA = "0x9217E0", Offset = "0x9217E0", VA = "0x9217E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000273")]
			[Address(RVA = "0x921828", Offset = "0x921828", VA = "0x921828", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0x9215C8", Offset = "0x9215C8", VA = "0x9215C8")]
		[DebuggerHidden]
		public <MoveTarget>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0x92160C", Offset = "0x92160C", VA = "0x92160C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0x921610", Offset = "0x921610", VA = "0x921610", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000272")]
		[Address(RVA = "0x9217E8", Offset = "0x9217E8", VA = "0x9217E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Direction direction;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Whether the target will move on start")]
	[SerializeField]
	private bool move;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The frequency of the wave. Negative values will invert direction.")]
	private float moveSpeed;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("The amplitude of the wave.")]
	[SerializeField]
	private float moveDst;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 startPos;

	[Token(Token = "0x1700003B")]
	public bool Move
	{
		[Token(Token = "0x6000264")]
		[Address(RVA = "0x9214AC", Offset = "0x9214AC", VA = "0x9214AC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000265")]
		[Address(RVA = "0x9214B4", Offset = "0x9214B4", VA = "0x9214B4")]
		set
		{
		}
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x92156C", Offset = "0x92156C", VA = "0x92156C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x92159C", Offset = "0x92159C", VA = "0x92159C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x9215A4", Offset = "0x9215A4", VA = "0x9215A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x9215A8", Offset = "0x9215A8", VA = "0x9215A8")]
	public void SetDirection(Direction dir)
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x9215B0", Offset = "0x9215B0", VA = "0x9215B0")]
	public void SetMoveSpeed(float newSpeed)
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x9215B8", Offset = "0x9215B8", VA = "0x9215B8")]
	public void InvertDirection()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x9214F8", Offset = "0x9214F8", VA = "0x9214F8")]
	[IteratorStateMachine(typeof(<MoveTarget>d__14))]
	private IEnumerator MoveTarget()
	{
		return null;
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x9215F0", Offset = "0x9215F0", VA = "0x9215F0")]
	public MovingTarget()
	{
	}
}
[Token(Token = "0x2000075")]
public class MovingTargetRandomizer : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000076")]
	private class TargetGroup
	{
		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<MovingTarget> targets;

		[Token(Token = "0x6000276")]
		[Address(RVA = "0x921B3C", Offset = "0x921B3C", VA = "0x921B3C")]
		public TargetGroup()
		{
		}
	}

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<TargetGroup> horizontalTargets;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<TargetGroup> verticalTargets;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float horizontalSpeed;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float verticalSpeed;

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x921830", Offset = "0x921830", VA = "0x921830")]
	private void Start()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x921B28", Offset = "0x921B28", VA = "0x921B28")]
	public MovingTargetRandomizer()
	{
	}
}
[Token(Token = "0x2000077")]
public class AxeBitPoint : MonoBehaviour
{
	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject ImpactParticlesPrefab;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody rb;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AxeThrowingAxe axeComponent;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float dist;

	[Token(Token = "0x1700003E")]
	private Ray ForwardRay
	{
		[Token(Token = "0x6000277")]
		[Address(RVA = "0x921B44", Offset = "0x921B44", VA = "0x921B44")]
		get
		{
			return default(Ray);
		}
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x921BD4", Offset = "0x921BD4", VA = "0x921BD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x921C64", Offset = "0x921C64", VA = "0x921C64")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x9220A4", Offset = "0x9220A4", VA = "0x9220A4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x9221A0", Offset = "0x9221A0", VA = "0x9221A0")]
	public AxeBitPoint()
	{
	}
}
[Token(Token = "0x2000078")]
public class AxeThrowingAxe : ResetableTransform
{
	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Grabbable g;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject axeTrail;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform axeSpawnPoint;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float yRot;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float xRot;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public bool touchingGround;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public Autohand.Hand heldBy;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isThrown;

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x9221B4", Offset = "0x9221B4", VA = "0x9221B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x92220C", Offset = "0x92220C", VA = "0x92220C")]
	private new void Start()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x922384", Offset = "0x922384", VA = "0x922384")]
	private void Update()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x9224C8", Offset = "0x9224C8", VA = "0x9224C8")]
	private void OnGrab(Autohand.Hand h, Grabbable g)
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x9225A0", Offset = "0x9225A0", VA = "0x9225A0")]
	private void OnRelease(Autohand.Hand h, Grabbable g)
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0x922930", Offset = "0x922930", VA = "0x922930", Slot = "5")]
	public override void ResetPos()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0x922A98", Offset = "0x922A98", VA = "0x922A98")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0x922B7C", Offset = "0x922B7C", VA = "0x922B7C")]
	public AxeThrowingAxe()
	{
	}
}
[Token(Token = "0x2000079")]
public class ArrowBow : MonoBehaviour
{
	[Token(Token = "0x6000284")]
	[Address(RVA = "0x922B84", Offset = "0x922B84", VA = "0x922B84")]
	private void Start()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0x922C48", Offset = "0x922C48", VA = "0x922C48")]
	public ArrowBow()
	{
	}
}
[Token(Token = "0x200007A")]
public class ArrowGameManager : MonoBehaviour
{
	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float TimeTillEnd;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int Score;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space]
	public TextMeshProUGUI EquationTxt;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI ScoreTxt;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI TimeLeft;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ArrowTarget[] targets;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string HSKey;

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x922CAC", Offset = "0x922CAC", VA = "0x922CAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x922DF8", Offset = "0x922DF8", VA = "0x922DF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x922E70", Offset = "0x922E70", VA = "0x922E70")]
	private void Update()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x923404", Offset = "0x923404", VA = "0x923404")]
	public void AddScore(int points)
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x922CB0", Offset = "0x922CB0", VA = "0x922CB0")]
	public void NewEquation()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x923630", Offset = "0x923630", VA = "0x923630")]
	public Equation GetRandomEquation()
	{
		return null;
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x923E10", Offset = "0x923E10", VA = "0x923E10")]
	public ArrowGameManager()
	{
	}
}
[Token(Token = "0x200007B")]
public class Equation
{
	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string EquationTxt;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int Answer;

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x923DD4", Offset = "0x923DD4", VA = "0x923DD4")]
	public Equation(string txt, int ans)
	{
	}
}
[Token(Token = "0x200007C")]
public class ArrowManager : MonoBehaviour
{
	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject arrowTrail;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform tip;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private LayerMask raycastMask;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform arrowTrigger;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject hitParticles;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Vector3 defaultLinePoint;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private bool stayOnHit;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public LineRenderer bowLine;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public Transform arrowPointRight;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public Transform arrowPointLeft;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public ParticleSystem lineParticles;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public Grabbable bow;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform ArrowPoint;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Rigidbody rb;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Grabbable grabbable;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ArrowSpawner arrowSpawner;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private AudioSource bowDrawAudioSource;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private AudioSource _aSource;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool inBowArea;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	private bool arrowChecked;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float strength;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 dir;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float endZ;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float startZ;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float yOffset;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool shot;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[HideInInspector]
	public bool isFlying;

	[Token(Token = "0x1700003F")]
	public bool isAttachedToBow
	{
		[Token(Token = "0x6000290")]
		[Address(RVA = "0x924204", Offset = "0x924204", VA = "0x924204")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0x923E70", Offset = "0x923E70", VA = "0x923E70")]
	private void Start()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x92428C", Offset = "0x92428C", VA = "0x92428C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x924680", Offset = "0x924680", VA = "0x924680")]
	private void UpdateHeldPosition()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x9247EC", Offset = "0x9247EC", VA = "0x9247EC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x9247A0", Offset = "0x9247A0", VA = "0x9247A0")]
	private void DrawBowSoundEffect(float deltaY)
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x924154", Offset = "0x924154", VA = "0x924154")]
	private void UpdateArrowPoint()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x924D00", Offset = "0x924D00", VA = "0x924D00")]
	private void UpdateWatchesPos()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x924654", Offset = "0x924654", VA = "0x924654")]
	private void ResetBowLine()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x924DD8", Offset = "0x924DD8", VA = "0x924DD8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0x924984", Offset = "0x924984", VA = "0x924984")]
	private void Hit(Collider col)
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x92524C", Offset = "0x92524C", VA = "0x92524C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x9245A8", Offset = "0x9245A8", VA = "0x9245A8")]
	public void RotateWithVelocity()
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x92532C", Offset = "0x92532C", VA = "0x92532C")]
	public void OnArrowCheckStay()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x925338", Offset = "0x925338", VA = "0x925338")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x9253A8", Offset = "0x9253A8", VA = "0x9253A8")]
	public void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x925414", Offset = "0x925414", VA = "0x925414")]
	public ArrowManager()
	{
	}
}
[Token(Token = "0x200007D")]
public class ArrowQuiver : MonoBehaviour
{
	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Grabbable bow;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject QuiverGO;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isRight;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public GameObject CurrentArrow;

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x9256D0", Offset = "0x9256D0", VA = "0x9256D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x9257C4", Offset = "0x9257C4", VA = "0x9257C4")]
	public ArrowQuiver()
	{
	}
}
[Token(Token = "0x200007E")]
public class ArrowSpawner : MonoBehaviour
{
	[Token(Token = "0x200007F")]
	[CompilerGenerated]
	private sealed class <SpawnArrowDelay>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ArrowSpawner <>4__this;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isRight;

		[Token(Token = "0x17000040")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002AD")]
			[Address(RVA = "0x925BF8", Offset = "0x925BF8", VA = "0x925BF8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002AF")]
			[Address(RVA = "0x925C40", Offset = "0x925C40", VA = "0x925C40", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x925AFC", Offset = "0x925AFC", VA = "0x925AFC")]
		[DebuggerHidden]
		public <SpawnArrowDelay>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x925B2C", Offset = "0x925B2C", VA = "0x925B2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x925B30", Offset = "0x925B30", VA = "0x925B30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x925C00", Offset = "0x925C00", VA = "0x925C00", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ArrowPrefab;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform LeftSpawnerPos;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform LeftQuiver;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform RightQuiver;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private LineRenderer bowLine;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform arrowPointRight;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform arrowPointLeft;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform WatchesPos;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ParticleSystem lineParticles;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Grabbable bow;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool spawning;

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x9257CC", Offset = "0x9257CC", VA = "0x9257CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x92581C", Offset = "0x92581C", VA = "0x92581C")]
	private void Init()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x925A64", Offset = "0x925A64", VA = "0x925A64")]
	[IteratorStateMachine(typeof(<SpawnArrowDelay>d__13))]
	private IEnumerator SpawnArrowDelay(bool isRight, float delay)
	{
		return null;
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x925530", Offset = "0x925530", VA = "0x925530")]
	public void SpawnNextArrow(bool isRight, float delay)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x92583C", Offset = "0x92583C", VA = "0x92583C")]
	public void SpawnNextArrow(bool isRight)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x925B24", Offset = "0x925B24", VA = "0x925B24")]
	public ArrowSpawner()
	{
	}
}
[Token(Token = "0x2000080")]
public class ArrowTarget : MonoBehaviour
{
	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool isResult;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI txt;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject SuccessParticles;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float TimeSinceHide;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ResetableTransform axeR;

	[Token(Token = "0x17000042")]
	[HideInInspector]
	public string txtValue
	{
		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x925C48", Offset = "0x925C48", VA = "0x925C48")]
		set
		{
		}
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x924E14", Offset = "0x924E14", VA = "0x924E14")]
	public void OnHit()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x925C6C", Offset = "0x925C6C", VA = "0x925C6C")]
	private void CheckAxe()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x922088", Offset = "0x922088", VA = "0x922088")]
	public void OnHitWithAxe(ResetableTransform axe)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x925D4C", Offset = "0x925D4C", VA = "0x925D4C")]
	public void OnHitWithFrisbee(ResetableTransform frisbee, TargetColorer frisbeeTarget)
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x925E50", Offset = "0x925E50", VA = "0x925E50")]
	public void Hide()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x923994", Offset = "0x923994", VA = "0x923994")]
	public void Show(int num, bool correct)
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x92614C", Offset = "0x92614C", VA = "0x92614C")]
	public void InvokeShow()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x92643C", Offset = "0x92643C", VA = "0x92643C")]
	public ArrowTarget()
	{
	}
}
[Token(Token = "0x2000081")]
public class ArrowTrigger : MonoBehaviour
{
	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArrowManager arrowManager;

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x92644C", Offset = "0x92644C", VA = "0x92644C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x926464", Offset = "0x926464", VA = "0x926464")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x92647C", Offset = "0x92647C", VA = "0x92647C")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x9264F4", Offset = "0x9264F4", VA = "0x9264F4")]
	public ArrowTrigger()
	{
	}
}
[Token(Token = "0x2000082")]
public class ButtonDelay : MonoBehaviour
{
	[Token(Token = "0x2000083")]
	[CompilerGenerated]
	private sealed class <DelayButton>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ButtonDelay <>4__this;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Button <button>5__2;

		[Token(Token = "0x17000043")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002C4")]
			[Address(RVA = "0x926738", Offset = "0x926738", VA = "0x926738", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000044")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002C6")]
			[Address(RVA = "0x926780", Offset = "0x926780", VA = "0x926780", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x9265EC", Offset = "0x9265EC", VA = "0x9265EC")]
		[DebuggerHidden]
		public <DelayButton>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x926624", Offset = "0x926624", VA = "0x926624", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x926628", Offset = "0x926628", VA = "0x926628", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x926740", Offset = "0x926740", VA = "0x926740", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float delay;

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x9264FC", Offset = "0x9264FC", VA = "0x9264FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x926558", Offset = "0x926558", VA = "0x926558")]
	private void Start()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x926578", Offset = "0x926578", VA = "0x926578")]
	[IteratorStateMachine(typeof(<DelayButton>d__3))]
	private IEnumerator DelayButton()
	{
		return null;
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x926614", Offset = "0x926614", VA = "0x926614")]
	public ButtonDelay()
	{
	}
}
[Token(Token = "0x2000084")]
public class CameraFollowY : MonoBehaviour
{
	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float yOffset;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float minYPos;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float maxYPos;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Space]
	[SerializeField]
	private float distToReset;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float startDelay;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform camT;

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x926788", Offset = "0x926788", VA = "0x926788")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x926800", Offset = "0x926800", VA = "0x926800")]
	private void Init()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x9268A4", Offset = "0x9268A4", VA = "0x9268A4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x926910", Offset = "0x926910", VA = "0x926910")]
	private void UpdateYPos()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x9269B4", Offset = "0x9269B4", VA = "0x9269B4")]
	public CameraFollowY()
	{
	}
}
[Token(Token = "0x2000085")]
public class CoinsUI : MonoBehaviour
{
	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshProUGUI txt;

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x9269C8", Offset = "0x9269C8", VA = "0x9269C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x926A20", Offset = "0x926A20", VA = "0x926A20")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x926AEC", Offset = "0x926AEC", VA = "0x926AEC")]
	public CoinsUI()
	{
	}
}
[Token(Token = "0x2000086")]
public class ConeHolder : MonoBehaviour
{
	[Token(Token = "0x2000087")]
	[CompilerGenerated]
	private sealed class <EnableCone>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ConeHolder <>4__this;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x17000045")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002D6")]
			[Address(RVA = "0x926D74", Offset = "0x926D74", VA = "0x926D74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000046")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002D8")]
			[Address(RVA = "0x926DBC", Offset = "0x926DBC", VA = "0x926DBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x926C5C", Offset = "0x926C5C", VA = "0x926C5C")]
		[DebuggerHidden]
		public <EnableCone>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x926C8C", Offset = "0x926C8C", VA = "0x926C8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x926C90", Offset = "0x926C90", VA = "0x926C90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x926D7C", Offset = "0x926D7C", VA = "0x926D7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Cone;

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x926AF4", Offset = "0x926AF4", VA = "0x926AF4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x926B14", Offset = "0x926B14", VA = "0x926B14")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x926BD8", Offset = "0x926BD8", VA = "0x926BD8")]
	[IteratorStateMachine(typeof(<EnableCone>d__3))]
	private IEnumerator EnableCone(float time)
	{
		return null;
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x926C84", Offset = "0x926C84", VA = "0x926C84")]
	public ConeHolder()
	{
	}
}
[Token(Token = "0x2000088")]
public class CrowdCharacter : MonoBehaviour
{
	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] caps;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] shirts;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject[] extras;

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x926DC4", Offset = "0x926DC4", VA = "0x926DC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x926F1C", Offset = "0x926F1C", VA = "0x926F1C")]
	public CrowdCharacter()
	{
	}
}
[Token(Token = "0x2000089")]
public class CrowdController : MonoBehaviour
{
	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> characterPrefabs;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip HappyCheers;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip DissapointedSound;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource aSource;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Transform> spawnPoints;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Animator> spawnedCharacters;

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x926F24", Offset = "0x926F24", VA = "0x926F24")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x9270F8", Offset = "0x9270F8", VA = "0x9270F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x927158", Offset = "0x927158", VA = "0x927158")]
	public void SpawnNext()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x923524", Offset = "0x923524", VA = "0x923524")]
	public void HappyCrowd()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x92362C", Offset = "0x92362C", VA = "0x92362C")]
	public void DissapointedCrowd()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x9273F4", Offset = "0x9273F4", VA = "0x9273F4")]
	public CrowdController()
	{
	}
}
[Token(Token = "0x200008A")]
public class EnabledIf : MonoBehaviour
{
	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject objDependency;

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x9273FC", Offset = "0x9273FC", VA = "0x9273FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x92749C", Offset = "0x92749C", VA = "0x92749C")]
	public EnabledIf()
	{
	}
}
[Token(Token = "0x200008B")]
public class EndGameUI : MonoBehaviour
{
	[Token(Token = "0x200008C")]
	[CompilerGenerated]
	private sealed class <LoadMenuAsync>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x17000048")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002ED")]
			[Address(RVA = "0x927810", Offset = "0x927810", VA = "0x927810", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000049")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002EF")]
			[Address(RVA = "0x927858", Offset = "0x927858", VA = "0x927858", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x927644", Offset = "0x927644", VA = "0x927644")]
		[DebuggerHidden]
		public <LoadMenuAsync>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x927744", Offset = "0x927744", VA = "0x927744", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x927748", Offset = "0x927748", VA = "0x927748", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x927818", Offset = "0x927818", VA = "0x927818", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EndGameUI Instance;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject UI;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space]
	[SerializeField]
	private TextMeshProUGUI ScoreUI;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI HighScoreUI;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Image StarsFill;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private List<GameObject> disableOnEnd;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MenusUI menusUI;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly LocalizedString locScore;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private readonly LocalizedString locHighScore;

	[Token(Token = "0x17000047")]
	public bool IsShowing
	{
		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x9274A4", Offset = "0x9274A4", VA = "0x9274A4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x9274C0", Offset = "0x9274C0", VA = "0x9274C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x923134", Offset = "0x923134", VA = "0x923134")]
	public void EndGame(int score, int highscore)
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x927558", Offset = "0x927558", VA = "0x927558")]
	public void Hide()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x9275C4", Offset = "0x9275C4", VA = "0x9275C4")]
	public void ContinueButton()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x9275E4", Offset = "0x9275E4", VA = "0x9275E4")]
	[IteratorStateMachine(typeof(<LoadMenuAsync>d__15))]
	private IEnumerator LoadMenuAsync()
	{
		return null;
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x92766C", Offset = "0x92766C", VA = "0x92766C")]
	public EndGameUI()
	{
	}
}
[Token(Token = "0x200008D")]
public class FractureObject : MonoBehaviour
{
	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] fracturePrefabs;

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x927860", Offset = "0x927860", VA = "0x927860")]
	public void Fracture(Transform orignal, Vector3 fracturePoint, float fractureForce, bool hideOriginal, float destroyTime = 2.5f, [Optional] Material[] matchMaterials)
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x927E84", Offset = "0x927E84", VA = "0x927E84")]
	[ContextMenu("Fracture")]
	public void FractureDebug()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x927EDC", Offset = "0x927EDC", VA = "0x927EDC")]
	public FractureObject()
	{
	}
}
[Token(Token = "0x200008E")]
public class Frisbee : ResetableTransform
{
	[Token(Token = "0x200008F")]
	[CompilerGenerated]
	private sealed class <CheckHands>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Frisbee <>4__this;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider <col>5__2;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] <inside>5__3;

		[Token(Token = "0x1700004A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000301")]
			[Address(RVA = "0x928E28", Offset = "0x928E28", VA = "0x928E28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000303")]
			[Address(RVA = "0x928E70", Offset = "0x928E70", VA = "0x928E70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x928860", Offset = "0x928860", VA = "0x928860")]
		[DebuggerHidden]
		public <CheckHands>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x928B2C", Offset = "0x928B2C", VA = "0x928B2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x928B30", Offset = "0x928B30", VA = "0x928B30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x928E30", Offset = "0x928E30", VA = "0x928E30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Grabbable g;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject axeTrail;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform axeSpawnPoint;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Autohand.Hand lHand;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Autohand.Hand rHand;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float yRot;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float xRot;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public bool touchingGround;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public Autohand.Hand heldBy;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool isThrown;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	private bool throughTarget;

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x927EE4", Offset = "0x927EE4", VA = "0x927EE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x927F3C", Offset = "0x927F3C", VA = "0x927F3C")]
	private new void Start()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x9280B4", Offset = "0x9280B4", VA = "0x9280B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x9281F8", Offset = "0x9281F8", VA = "0x9281F8")]
	private void OnGrab(Autohand.Hand h, Grabbable g)
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x9282D0", Offset = "0x9282D0", VA = "0x9282D0")]
	private void OnRelease(Autohand.Hand h, Grabbable g)
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x928660", Offset = "0x928660", VA = "0x928660", Slot = "5")]
	public override void ResetPos()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x9287EC", Offset = "0x9287EC", VA = "0x9287EC")]
	[IteratorStateMachine(typeof(<CheckHands>d__17))]
	private IEnumerator CheckHands()
	{
		return null;
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x928888", Offset = "0x928888", VA = "0x928888")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x92896C", Offset = "0x92896C", VA = "0x92896C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x928A7C", Offset = "0x928A7C", VA = "0x928A7C")]
	public Frisbee()
	{
	}
}
[Token(Token = "0x2000090")]
public class TargetColorer : MonoBehaviour
{
	[Token(Token = "0x2000091")]
	[CompilerGenerated]
	private sealed class <BlinkColor>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TargetColorer <>4__this;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color color;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float duration;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int blinkCount;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color <original>5__2;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color <dark>5__3;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float <t>5__4;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int <i>5__5;

		[Token(Token = "0x1700004C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600030C")]
			[Address(RVA = "0x9294E4", Offset = "0x9294E4", VA = "0x9294E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600030E")]
			[Address(RVA = "0x92952C", Offset = "0x92952C", VA = "0x92952C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x92910C", Offset = "0x92910C", VA = "0x92910C")]
		[DebuggerHidden]
		public <BlinkColor>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x92913C", Offset = "0x92913C", VA = "0x92913C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x929140", Offset = "0x929140", VA = "0x929140", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0x9294EC", Offset = "0x9294EC", VA = "0x9294EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The renderers that will have the color applied to.")]
	private List<MeshRenderer> colorRenderers;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The renderers that will blink green or red when ShowResult is called on this component.")]
	private List<MeshRenderer> blinkRenderers;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color rand;

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x928E78", Offset = "0x928E78", VA = "0x928E78")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x928FF0", Offset = "0x928FF0", VA = "0x928FF0")]
	private Color GenerateColor()
	{
		return default(Color);
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x925DE8", Offset = "0x925DE8", VA = "0x925DE8")]
	public void ShowResult(bool isResult)
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x929050", Offset = "0x929050", VA = "0x929050")]
	[IteratorStateMachine(typeof(<BlinkColor>d__6))]
	private IEnumerator BlinkColor(Color color, int blinkCount, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x929134", Offset = "0x929134", VA = "0x929134")]
	public TargetColorer()
	{
	}
}
[Token(Token = "0x2000092")]
public class GameModeButton : MonoBehaviour
{
	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Button button;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MainMenuManager mainMenuManager;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private SceneAudioManager sceneAudioManager;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Canvas canvas;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Image background;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Color selectedColor;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Color deselectedColor;

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x929534", Offset = "0x929534", VA = "0x929534")]
	private void Start()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x9295E4", Offset = "0x9295E4", VA = "0x9295E4")]
	public void Selected()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x9296D8", Offset = "0x9296D8", VA = "0x9296D8")]
	public void Deselected()
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x9297CC", Offset = "0x9297CC", VA = "0x9297CC")]
	public GameModeButton()
	{
	}
}
[Token(Token = "0x2000093")]
public class GameModeSelector : Singleton<GameModeSelector>
{
	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SlidingMenu slidingMenu;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TMP_Text GameModeNameTxt;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TMP_Text HighScoreTxt;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image currentSkin;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Sprite noSkinIcon;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject leftArrow;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject rightArrow;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameModeInfo[] GameModes;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int current;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public string SceneName;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private LocalizedString locHighScore;

	[Token(Token = "0x1700004E")]
	public int Current
	{
		[Token(Token = "0x6000315")]
		[Address(RVA = "0x9299B8", Offset = "0x9299B8", VA = "0x9299B8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x9299C0", Offset = "0x9299C0", VA = "0x9299C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x929A68", Offset = "0x929A68", VA = "0x929A68")]
	private void Start()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x929B74", Offset = "0x929B74", VA = "0x929B74")]
	public void UpdateUI(int c, bool SetTrigger = true)
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x929F40", Offset = "0x929F40", VA = "0x929F40")]
	public void UpdateCurrentSkin(PrizeStoreItem skin)
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x929940", Offset = "0x929940", VA = "0x929940")]
	[ContextMenu("Left Button")]
	public void LeftBtn()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x92997C", Offset = "0x92997C", VA = "0x92997C")]
	[ContextMenu("Right Button")]
	public void RightBtn()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x92A000", Offset = "0x92A000", VA = "0x92A000")]
	public GameModeSelector()
	{
	}
}
[Serializable]
[Token(Token = "0x2000094")]
public class GameModeInfo
{
	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Sprite ShowcaseImg;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string GameModeName;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string HighScorePrefKey;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string SceneName;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	public List<PrizeStoreManager.ItemInfo> items;

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x92A048", Offset = "0x92A048", VA = "0x92A048")]
	public GameModeInfo()
	{
	}
}
[Token(Token = "0x2000095")]
public class GameMusic : MonoBehaviour
{
	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameMusic instance;

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x92A050", Offset = "0x92A050", VA = "0x92A050")]
	private void Awake()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x92A18C", Offset = "0x92A18C", VA = "0x92A18C")]
	public GameMusic()
	{
	}
}
[Token(Token = "0x2000096")]
public class HandController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000097")]
	public class HandInfo
	{
		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Autohand.Hand LeftHand;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Autohand.Hand RightHand;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform WatchTransform;

		[Token(Token = "0x6000327")]
		[Address(RVA = "0x92ACA8", Offset = "0x92ACA8", VA = "0x92ACA8")]
		public HandInfo()
		{
		}
	}

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Bullet;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<HandInfo> Hands;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int ActiveHandNumber;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private HandInfo currentHand;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Watches;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool[] gripBtnPressed;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool[] triggerBtnPressed;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isGrippingRight;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool isGrippingLeft;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material[] Gloves;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform gunPinpoint;

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x92A194", Offset = "0x92A194", VA = "0x92A194")]
	private void Start()
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x92A19C", Offset = "0x92A19C", VA = "0x92A19C")]
	public void SetNewHand(int handNumber)
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x92A310", Offset = "0x92A310", VA = "0x92A310")]
	public void SetNewGloves(int gloveNumber)
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x92A41C", Offset = "0x92A41C", VA = "0x92A41C")]
	public void VibrateHand(bool rightHand)
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x92A464", Offset = "0x92A464", VA = "0x92A464")]
	private void Update()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x92A628", Offset = "0x92A628", VA = "0x92A628")]
	public void GetInputValues(Autohand.Hand hand)
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x92AC28", Offset = "0x92AC28", VA = "0x92AC28")]
	public HandController()
	{
	}
}
[Token(Token = "0x2000098")]
public static class Helper
{
	[Token(Token = "0x6000328")]
	[Address(RVA = "0x92AB28", Offset = "0x92AB28", VA = "0x92AB28")]
	public static void SetAllFingersGrip(this Autohand.Hand h, float bend)
	{
	}
}
[Token(Token = "0x2000099")]
public class HighScoreText : MonoBehaviour
{
	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string PlayerPrefsName;

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x92ACB0", Offset = "0x92ACB0", VA = "0x92ACB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x92AD70", Offset = "0x92AD70", VA = "0x92AD70")]
	public HighScoreText()
	{
	}
}
[Token(Token = "0x200009A")]
public class ItemSkin : MonoBehaviour
{
	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public GameObject selectedItem;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputActionProperty switchItemBtn;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int swithItemOffset;

	[Token(Token = "0x1700004F")]
	private int SelectedItemIndex
	{
		[Token(Token = "0x600032B")]
		[Address(RVA = "0x92AD78", Offset = "0x92AD78", VA = "0x92AD78")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x92ADE8", Offset = "0x92ADE8", VA = "0x92ADE8")]
	private void Start()
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x92AF70", Offset = "0x92AF70", VA = "0x92AF70")]
	private void Update()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x92AFF4", Offset = "0x92AFF4", VA = "0x92AFF4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x92B018", Offset = "0x92B018", VA = "0x92B018")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x92AE68", Offset = "0x92AE68", VA = "0x92AE68")]
	private void UpdateSelected(int selectedIndex)
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x92B03C", Offset = "0x92B03C", VA = "0x92B03C")]
	public ItemSkin()
	{
	}
}
[Token(Token = "0x200009B")]
public class ItemsShop : MonoBehaviour
{
	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int[] prices;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI[] PricesUI;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string Key;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	public AudioClip Success;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip Click;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip Fail;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Space]
	public Color UsingCol;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Color BoughtCol;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Color PriceCol;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private AudioSource aSource;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly LocalizedString locUsing;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private readonly LocalizedString locUse;

	[Token(Token = "0x17000050")]
	public static int Coins
	{
		[Token(Token = "0x6000333")]
		[Address(RVA = "0x926AA4", Offset = "0x926AA4", VA = "0x926AA4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000334")]
		[Address(RVA = "0x927578", Offset = "0x927578", VA = "0x927578")]
		set
		{
		}
	}

	[Token(Token = "0x17000051")]
	public int Current
	{
		[Token(Token = "0x6000338")]
		[Address(RVA = "0x92B29C", Offset = "0x92B29C", VA = "0x92B29C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000339")]
		[Address(RVA = "0x92B448", Offset = "0x92B448", VA = "0x92B448")]
		set
		{
		}
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x92B044", Offset = "0x92B044", VA = "0x92B044")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x92B0A4", Offset = "0x92B0A4", VA = "0x92B0A4")]
	public void UpdateUI()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x92B380", Offset = "0x92B380", VA = "0x92B380")]
	public void OnClick(int id)
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x92B4AC", Offset = "0x92B4AC", VA = "0x92B4AC")]
	private void Animate(int id)
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x92B2F0", Offset = "0x92B2F0", VA = "0x92B2F0")]
	public bool isBought(int id)
	{
		return default(bool);
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x92B570", Offset = "0x92B570", VA = "0x92B570")]
	public void Buy(int id)
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x92B640", Offset = "0x92B640", VA = "0x92B640")]
	public ItemsShop()
	{
	}
}
[Token(Token = "0x200009C")]
public class KatanaAudioManager : MonoBehaviour
{
	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource aSource;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip[] breakSounds;

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x92B73C", Offset = "0x92B73C", VA = "0x92B73C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x92B794", Offset = "0x92B794", VA = "0x92B794")]
	public void BreakSound()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x92B7F4", Offset = "0x92B7F4", VA = "0x92B7F4")]
	public KatanaAudioManager()
	{
	}
}
[Token(Token = "0x200009D")]
public class KatanaManager : MonoBehaviour
{
	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI scoreTxt;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI timeTxt;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI oddEvenTxt;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	public Image oddEvenBackground;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color evenColor;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color oddColor;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isEvenNums;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float TimeLeft;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int TotalScore;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool endGame;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly LocalizedString locEven;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly LocalizedString locOdd;

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x92B7FC", Offset = "0x92B7FC", VA = "0x92B7FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x92BABC", Offset = "0x92BABC", VA = "0x92BABC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x92BBD8", Offset = "0x92BBD8", VA = "0x92BBD8")]
	public void OnNumSliced(int numValue, Vector3 objPosition)
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x92B9E0", Offset = "0x92B9E0", VA = "0x92B9E0")]
	public void AddScore(int ScoreAmount)
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x92B81C", Offset = "0x92B81C", VA = "0x92B81C")]
	private void ResetIsEven(bool animate = true)
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x92BD98", Offset = "0x92BD98", VA = "0x92BD98")]
	public KatanaManager()
	{
	}
}
[Token(Token = "0x200009E")]
public class KatanaSpawner : MonoBehaviour
{
	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Katanas;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int current;

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x92BE90", Offset = "0x92BE90", VA = "0x92BE90")]
	private void Start()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x92BF54", Offset = "0x92BF54", VA = "0x92BF54")]
	private void Update()
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x92BEE4", Offset = "0x92BEE4", VA = "0x92BEE4")]
	private void ShowKatana(int id)
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x92BFCC", Offset = "0x92BFCC", VA = "0x92BFCC")]
	public KatanaSpawner()
	{
	}
}
[Token(Token = "0x200009F")]
public class KatanaTrigger : MonoBehaviour
{
	[Token(Token = "0x600034A")]
	[Address(RVA = "0x92BFD4", Offset = "0x92BFD4", VA = "0x92BFD4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x92C048", Offset = "0x92C048", VA = "0x92C048")]
	public KatanaTrigger()
	{
	}
}
[Token(Token = "0x20000A0")]
public class NumberObject : MonoBehaviour
{
	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody rb;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public Quaternion dir;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float gravity;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Color[] randomColors;

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x92C050", Offset = "0x92C050", VA = "0x92C050")]
	private void Start()
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x92C2B4", Offset = "0x92C2B4", VA = "0x92C2B4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x92C2F4", Offset = "0x92C2F4", VA = "0x92C2F4")]
	private void Update()
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x92C430", Offset = "0x92C430", VA = "0x92C430")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x92C4FC", Offset = "0x92C4FC", VA = "0x92C4FC")]
	public NumberObject()
	{
	}
}
[Token(Token = "0x20000A1")]
public class NumberSpawner : MonoBehaviour
{
	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] EvenNumbers;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] OddNumbers;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	[Tooltip("The chance of spawning an odd number when even is the correct answer (and vice versa).")]
	public float wrongNumChance;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject enabledIfDependency;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float minY;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float maxY;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float desiredOffset;

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x92C510", Offset = "0x92C510", VA = "0x92C510")]
	private void Update()
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x92C5C8", Offset = "0x92C5C8", VA = "0x92C5C8")]
	public void SpawnNext()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x92C7CC", Offset = "0x92C7CC", VA = "0x92C7CC")]
	public NumberSpawner()
	{
	}
}
[Token(Token = "0x20000A2")]
public class NumberSpawnersManager : MonoBehaviour
{
	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NumberSpawner[] spawners;

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x92C7E8", Offset = "0x92C7E8", VA = "0x92C7E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x92C844", Offset = "0x92C844", VA = "0x92C844")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x92C84C", Offset = "0x92C84C", VA = "0x92C84C")]
	private void SpawnNext()
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x92C890", Offset = "0x92C890", VA = "0x92C890")]
	public NumberSpawnersManager()
	{
	}
}
[Token(Token = "0x20000A3")]
public class LeaderboardUI : Singleton<LeaderboardUI>
{
	[Serializable]
	[Token(Token = "0x20000A4")]
	public class PlayerScore
	{
		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string playerName;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int score;

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x92CC5C", Offset = "0x92CC5C", VA = "0x92CC5C")]
		public PlayerScore(string playerName, int score)
		{
		}
	}

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<PlayerScoreUI> scoresUI;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, List<PlayerScore>> leaderboard;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string LeaderboardFileName;

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x92C898", Offset = "0x92C898", VA = "0x92C898")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x92CA00", Offset = "0x92CA00", VA = "0x92CA00")]
	private void Start()
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x92C8B8", Offset = "0x92C8B8", VA = "0x92C8B8")]
	public static Dictionary<string, List<PlayerScore>> GetLeaderboard()
	{
		return null;
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0x92CA04", Offset = "0x92CA04", VA = "0x92CA04")]
	public static void SaveLeaderboard(Dictionary<string, List<PlayerScore>> save)
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x929D40", Offset = "0x929D40", VA = "0x929D40")]
	public void UpdateScores(string sceneName)
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x92CC14", Offset = "0x92CC14", VA = "0x92CC14")]
	public LeaderboardUI()
	{
	}
}
[Token(Token = "0x20000A5")]
public class LolTurnOn : MonoBehaviour
{
	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject TurnOn;

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x92CC98", Offset = "0x92CC98", VA = "0x92CC98")]
	private void Update()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x92CDCC", Offset = "0x92CDCC", VA = "0x92CDCC")]
	public LolTurnOn()
	{
	}
}
[Token(Token = "0x20000A6")]
public class LookAt : MonoBehaviour
{
	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float offsetY;

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x92CDD4", Offset = "0x92CDD4", VA = "0x92CDD4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x92CF44", Offset = "0x92CF44", VA = "0x92CF44")]
	public LookAt()
	{
	}
}
[Token(Token = "0x20000A7")]
public class MainMenuManager : MonoBehaviour
{
	[Token(Token = "0x6000363")]
	[Address(RVA = "0x92CF54", Offset = "0x92CF54", VA = "0x92CF54")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x929834", Offset = "0x929834", VA = "0x929834")]
	public void LoadGame()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x92CFF4", Offset = "0x92CFF4", VA = "0x92CFF4")]
	public MainMenuManager()
	{
	}
}
[Token(Token = "0x20000A8")]
public class MenusUI : MonoBehaviour
{
	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MenusUI Instance;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Canvas EquationCanvas;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject BallSpawner;

	[Token(Token = "0x17000052")]
	public static bool IsShowingUI
	{
		[Token(Token = "0x6000366")]
		[Address(RVA = "0x922FC0", Offset = "0x922FC0", VA = "0x922FC0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x92D018", Offset = "0x92D018", VA = "0x92D018")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x92D070", Offset = "0x92D070", VA = "0x92D070")]
	private void Update()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x92D168", Offset = "0x92D168", VA = "0x92D168")]
	public MenusUI()
	{
	}
}
[Token(Token = "0x20000A9")]
public class MiniGolfBall : ResetableTransform
{
	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject trail;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform spawnPoint;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float ballResetTimer;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Collider resetCol;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float yRot;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float xRot;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isHit;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool throughTarget;

	[Token(Token = "0x17000053")]
	public bool IsHit
	{
		[Token(Token = "0x600036A")]
		[Address(RVA = "0x92D170", Offset = "0x92D170", VA = "0x92D170")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000054")]
	public bool ThroughTarget
	{
		[Token(Token = "0x600036B")]
		[Address(RVA = "0x92D178", Offset = "0x92D178", VA = "0x92D178")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x92D180", Offset = "0x92D180", VA = "0x92D180")]
	private void Awake()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x92D184", Offset = "0x92D184", VA = "0x92D184")]
	private new void Start()
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x92D18C", Offset = "0x92D18C", VA = "0x92D18C")]
	private void Update()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x92D1F4", Offset = "0x92D1F4", VA = "0x92D1F4")]
	public void SetSpawnPos(Vector3 pos)
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x92D2F4", Offset = "0x92D2F4", VA = "0x92D2F4", Slot = "5")]
	public override void ResetPos()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x92D478", Offset = "0x92D478", VA = "0x92D478")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x92D61C", Offset = "0x92D61C", VA = "0x92D61C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x92D784", Offset = "0x92D784", VA = "0x92D784")]
	public MiniGolfBall()
	{
	}
}
[Token(Token = "0x20000AA")]
public class MiniGolfClub : MonoBehaviour
{
	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Rigidbody rb;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Grabbable grabbable;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform handle;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform handleEnd;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform headTrans;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Collider headCol;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Collider groundCol;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float refHeadHeight;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform player;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform leftPos;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform rightPos;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform resetTrans;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Transform ramps;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Transform rampLeftPos;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Transform rampRightPos;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private SkinnedMeshRenderer lHand;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private SkinnedMeshRenderer rHand;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private GrabbablePose dominantPose;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private GrabbablePose secondaryPose;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private MiniGolfBall ball;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Autohand.Hand dominantHand;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool grabbed;

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x92D794", Offset = "0x92D794", VA = "0x92D794")]
	private void Start()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x92D9A4", Offset = "0x92D9A4", VA = "0x92D9A4")]
	private void SetClubSize()
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x92DC4C", Offset = "0x92DC4C", VA = "0x92DC4C")]
	public MiniGolfClub()
	{
	}
}
[Token(Token = "0x20000AC")]
public class MiniGolfRamp : MonoBehaviour
{
	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float rampAngle;

	[Token(Token = "0x40003A8")]
	private const float AssistSpeed = 5f;

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x92E0D4", Offset = "0x92E0D4", VA = "0x92E0D4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x92E41C", Offset = "0x92E41C", VA = "0x92E41C")]
	public MiniGolfRamp()
	{
	}
}
[Token(Token = "0x20000AD")]
public class Bullet : MonoBehaviour
{
	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float speed;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject BulletSmoke;

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x92E42C", Offset = "0x92E42C", VA = "0x92E42C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x92E4B8", Offset = "0x92E4B8", VA = "0x92E4B8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x92EE38", Offset = "0x92EE38", VA = "0x92EE38")]
	public Bullet()
	{
	}
}
[Token(Token = "0x20000AE")]
public class Gun : MonoBehaviour
{
	[Token(Token = "0x6000381")]
	[Address(RVA = "0x92EE48", Offset = "0x92EE48", VA = "0x92EE48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x92EF0C", Offset = "0x92EF0C", VA = "0x92EF0C")]
	public Gun()
	{
	}
}
[Token(Token = "0x20000AF")]
public class PaintballAudioManager : MonoBehaviour
{
	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource aSource;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource TargetHit;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource OtherHit;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource ShootSound;

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x92EF70", Offset = "0x92EF70", VA = "0x92EF70")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x92E8F8", Offset = "0x92E8F8", VA = "0x92E8F8")]
	public void OnTargetHit()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x92EE1C", Offset = "0x92EE1C", VA = "0x92EE1C")]
	public void OnOtherHit()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x92AC0C", Offset = "0x92AC0C", VA = "0x92AC0C")]
	public void OnShootSound()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x92EFC8", Offset = "0x92EFC8", VA = "0x92EFC8")]
	public PaintballAudioManager()
	{
	}
}
[Token(Token = "0x20000B0")]
public class PaintballManager : MonoBehaviour
{
	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PaintballManager instance;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Targets;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator[] Underlines;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI[] Numbers;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI Answer;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI ScoreTxt;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI TimeLeftTxt;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string HightScorePrefsKey;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public int Score;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float TimeLeft;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool gameEnded;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject CongratulationsUI;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI CongratulationsPoints;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject WrongUI;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public TextMeshProUGUI WrongPoints;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int CurrentNum;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int Sum;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject targetToReset;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool isPunchPlatesMinigame;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private readonly LocalizedString locMultOf;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int AnswersCount;

	[Token(Token = "0x17000055")]
	public static PaintballManager Instance
	{
		[Token(Token = "0x6000389")]
		[Address(RVA = "0x92EFD0", Offset = "0x92EFD0", VA = "0x92EFD0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600038A")]
		[Address(RVA = "0x92F018", Offset = "0x92F018", VA = "0x92F018")]
		set
		{
		}
	}

	[Token(Token = "0x17000056")]
	public int HighScore
	{
		[Token(Token = "0x600038B")]
		[Address(RVA = "0x92F128", Offset = "0x92F128", VA = "0x92F128")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600038C")]
		[Address(RVA = "0x92F134", Offset = "0x92F134", VA = "0x92F134")]
		set
		{
		}
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x92F140", Offset = "0x92F140", VA = "0x92F140")]
	private void Awake()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0x92FAFC", Offset = "0x92FAFC", VA = "0x92FAFC")]
	private void Update()
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x92FCC8", Offset = "0x92FCC8", VA = "0x92FCC8")]
	public void AddScore(int v)
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x92E914", Offset = "0x92E914", VA = "0x92E914")]
	public bool OnTargetHit(string value, GameObject target)
	{
		return default(bool);
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x92EC2C", Offset = "0x92EC2C", VA = "0x92EC2C")]
	public bool OnTargetHitPunch(GameObject target)
	{
		return default(bool);
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x92FEA4", Offset = "0x92FEA4", VA = "0x92FEA4")]
	private void ResetTarget()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x92F7A4", Offset = "0x92F7A4", VA = "0x92F7A4")]
	public void NewEquation()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x92F248", Offset = "0x92F248", VA = "0x92F248")]
	public void NewEquationPunchPlates()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x92FEDC", Offset = "0x92FEDC", VA = "0x92FEDC")]
	public PaintballManager()
	{
	}
}
[Token(Token = "0x20000B2")]
public class PaintGunSpawner : MonoBehaviour
{
	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> Guns;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject activeGun;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int HandNumber;

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x930038", Offset = "0x930038", VA = "0x930038")]
	private void Start()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x9301B4", Offset = "0x9301B4", VA = "0x9301B4")]
	private void Update()
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x93008C", Offset = "0x93008C", VA = "0x93008C")]
	private void spawnGun()
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x930260", Offset = "0x930260", VA = "0x930260")]
	public PaintGunSpawner()
	{
	}
}
[Token(Token = "0x20000B3")]
public class PauseMenuManager : MonoBehaviour
{
	[Token(Token = "0x20000B4")]
	[CompilerGenerated]
	private sealed class <LoadMenuAsync>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x1700005A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003B3")]
			[Address(RVA = "0x9308BC", Offset = "0x9308BC", VA = "0x9308BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003B5")]
			[Address(RVA = "0x930904", Offset = "0x930904", VA = "0x930904", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x9307C0", Offset = "0x9307C0", VA = "0x9307C0")]
		[DebuggerHidden]
		public <LoadMenuAsync>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x9307F0", Offset = "0x9307F0", VA = "0x9307F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x9307F4", Offset = "0x9307F4", VA = "0x9307F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x9308C4", Offset = "0x9308C4", VA = "0x9308C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PauseMenuManager Instance;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject UI;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Toggle musicToggle;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Toggle soundEffectsToggle;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private InputActionProperty pauseButtonInput;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Scene Objects")]
	[Space]
	[SerializeField]
	private AudioSource inSceneMusic;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioSource[] inSceneSoundEffects;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject[] toDisable;

	[Token(Token = "0x17000057")]
	public bool IsShowing
	{
		[Token(Token = "0x600039E")]
		[Address(RVA = "0x92CFFC", Offset = "0x92CFFC", VA = "0x92CFFC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000058")]
	public bool MusicOn
	{
		[Token(Token = "0x600039F")]
		[Address(RVA = "0x930268", Offset = "0x930268", VA = "0x930268")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x9302BC", Offset = "0x9302BC", VA = "0x9302BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000059")]
	public bool SoundEffectsOn
	{
		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x924554", Offset = "0x924554", VA = "0x924554")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x930308", Offset = "0x930308", VA = "0x930308")]
		set
		{
		}
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x930354", Offset = "0x930354", VA = "0x930354")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x930430", Offset = "0x930430", VA = "0x930430")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x93056C", Offset = "0x93056C", VA = "0x93056C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x930590", Offset = "0x930590", VA = "0x930590")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x9305B4", Offset = "0x9305B4", VA = "0x9305B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x9306A8", Offset = "0x9306A8", VA = "0x9306A8")]
	private void Show()
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x9303B4", Offset = "0x9303B4", VA = "0x9303B4")]
	private void Hide()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0x93072C", Offset = "0x93072C", VA = "0x93072C")]
	private void OnMusicOnOff(bool isOn)
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x930734", Offset = "0x930734", VA = "0x930734")]
	private void OnSoundEffectsOnOff(bool isOn)
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x93073C", Offset = "0x93073C", VA = "0x93073C")]
	public void ContinueButton()
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x930740", Offset = "0x930740", VA = "0x930740")]
	public void MainMenuButton()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x930760", Offset = "0x930760", VA = "0x930760")]
	[IteratorStateMachine(typeof(<LoadMenuAsync>d__27))]
	private IEnumerator LoadMenuAsync()
	{
		return null;
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x9307E8", Offset = "0x9307E8", VA = "0x9307E8")]
	public PauseMenuManager()
	{
	}
}
[Token(Token = "0x20000B5")]
public class PlatePunchTargetChecker : MonoBehaviour
{
	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject BulletSmoke;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float lastTimeHit;

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x93090C", Offset = "0x93090C", VA = "0x93090C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x930BB8", Offset = "0x930BB8", VA = "0x930BB8")]
	public PlatePunchTargetChecker()
	{
	}
}
[Token(Token = "0x20000B6")]
public class PunchPlatesHand : MonoBehaviour
{
	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject Particles;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Autohand.Hand h;

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x930BC8", Offset = "0x930BC8", VA = "0x930BC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x930C20", Offset = "0x930C20", VA = "0x930C20")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x930CF8", Offset = "0x930CF8", VA = "0x930CF8")]
	public PunchPlatesHand()
	{
	}
}
[Token(Token = "0x20000B7")]
public class PunchPlatesHolder : MonoBehaviour
{
	[Token(Token = "0x20000B8")]
	[CompilerGenerated]
	private sealed class <IEnabled>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PunchPlatesHolder <>4__this;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <t>5__2;

		[Token(Token = "0x1700005C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003C3")]
			[Address(RVA = "0x931114", Offset = "0x931114", VA = "0x931114", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003C5")]
			[Address(RVA = "0x93115C", Offset = "0x93115C", VA = "0x93115C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x930FC0", Offset = "0x930FC0", VA = "0x930FC0")]
		[DebuggerHidden]
		public <IEnabled>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x930FF0", Offset = "0x930FF0", VA = "0x930FF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x930FF4", Offset = "0x930FF4", VA = "0x930FF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x93111C", Offset = "0x93111C", VA = "0x93111C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider[] targetColliders;

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x930D00", Offset = "0x930D00", VA = "0x930D00")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x930D94", Offset = "0x930D94", VA = "0x930D94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x930DB4", Offset = "0x930DB4", VA = "0x930DB4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x930D20", Offset = "0x930D20", VA = "0x930D20")]
	[IteratorStateMachine(typeof(<IEnabled>d__4))]
	private IEnumerator IEnabled()
	{
		return null;
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x930FE8", Offset = "0x930FE8", VA = "0x930FE8")]
	public PunchPlatesHolder()
	{
	}
}
[Token(Token = "0x20000B9")]
public class PlayerScoreUI : MonoBehaviour
{
	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text pos;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TMP_Text nameScore;

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x92CAD8", Offset = "0x92CAD8", VA = "0x92CAD8")]
	public void SetPlayerScore(int position, string name, int score)
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x92CBB8", Offset = "0x92CBB8", VA = "0x92CBB8")]
	public void ClearPlayerScore()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x931164", Offset = "0x931164", VA = "0x931164")]
	public PlayerScoreUI()
	{
	}
}
[Token(Token = "0x20000BA")]
public class PreventForcedRelease : MonoBehaviour
{
	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x93116C", Offset = "0x93116C", VA = "0x93116C")]
	public PreventForcedRelease()
	{
	}
}
[Token(Token = "0x20000BB")]
public class PrizeStoreItem : MonoBehaviour
{
	[Token(Token = "0x20000BC")]
	public enum ItemStatus
	{
		[Token(Token = "0x40003EA")]
		Using,
		[Token(Token = "0x40003EB")]
		Purchased,
		[Token(Token = "0x40003EC")]
		NotPurchased
	}

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI itemTxt;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Image itemImg;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Image backgroundImg;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject lockImg;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int itemId;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int itemPrice;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ItemStatus itemStatus;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly LocalizedString locUse;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private readonly LocalizedString locUsing;

	[Token(Token = "0x1700005E")]
	public Sprite ItemSprite
	{
		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x929FE4", Offset = "0x929FE4", VA = "0x929FE4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x931174", Offset = "0x931174", VA = "0x931174")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x931224", Offset = "0x931224", VA = "0x931224")]
	public void Init(int itemId, Sprite img, int itemPrice, ItemStatus itemStatus)
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x931278", Offset = "0x931278", VA = "0x931278")]
	public void UpdateUI(ItemStatus itemStatus)
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x931484", Offset = "0x931484", VA = "0x931484")]
	private void OnClick()
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x931520", Offset = "0x931520", VA = "0x931520")]
	public PrizeStoreItem()
	{
	}
}
[Token(Token = "0x20000BD")]
public class PrizeStoreManager : Singleton<PrizeStoreManager>
{
	[Serializable]
	[Token(Token = "0x20000BE")]
	public class ItemInfo
	{
		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Sprite image;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int price;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public string GameModeScene;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public int itemIndex;

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x94F680", Offset = "0x94F680", VA = "0x94F680")]
		public bool isPurchased()
		{
			return default(bool);
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x94F690", Offset = "0x94F690", VA = "0x94F690")]
		public ItemInfo()
		{
		}
	}

	[Token(Token = "0x20000BF")]
	[CompilerGenerated]
	private sealed class <ShowPrizeItem>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PrizeStoreManager <>4__this;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite img;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <i>5__2;

		[Token(Token = "0x17000062")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003E6")]
			[Address(RVA = "0x94F8D0", Offset = "0x94F8D0", VA = "0x94F8D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003E8")]
			[Address(RVA = "0x94F918", Offset = "0x94F918", VA = "0x94F918", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x94F564", Offset = "0x94F564", VA = "0x94F564")]
		[DebuggerHidden]
		public <ShowPrizeItem>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x94F698", Offset = "0x94F698", VA = "0x94F698", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x94F69C", Offset = "0x94F69C", VA = "0x94F69C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x94F8D8", Offset = "0x94F8D8", VA = "0x94F8D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	private GameModeInfo SelectedGameMode;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Space]
	[Header("P.S. Edit items at 'Game Modes UI'.")]
	[Space]
	private Transform prizeItemsHolder;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Image wonPrizeStoreItem;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Item Colors")]
	public Color usingItemColor;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color purchasedItemColor;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Color notPurchasedItemColor;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private PrizeStoreItem[] prizeItemsUI;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<ItemInfo> unpurchasedItemsList;

	[Token(Token = "0x1700005F")]
	public static int Coins
	{
		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x94E828", Offset = "0x94E828", VA = "0x94E828")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x94E870", Offset = "0x94E870", VA = "0x94E870")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	private GameModeInfo[] GameModes
	{
		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x94E8BC", Offset = "0x94E8BC", VA = "0x94E8BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000061")]
	public int SelectedItem
	{
		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x94F34C", Offset = "0x94F34C", VA = "0x94F34C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x94E90C", Offset = "0x94E90C", VA = "0x94E90C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0x94EBB4", Offset = "0x94EBB4", VA = "0x94EBB4")]
	public void UpdateUI(int selectedGameMode)
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0x94EDA4", Offset = "0x94EDA4", VA = "0x94EDA4")]
	private PrizeStoreItem.ItemStatus GetItemStatus(int itemId)
	{
		return default(PrizeStoreItem.ItemStatus);
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x94EE28", Offset = "0x94EE28", VA = "0x94EE28")]
	public bool PurchaseItem(int itemId)
	{
		return default(bool);
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x94F150", Offset = "0x94F150", VA = "0x94F150")]
	public void UnlockItem(string sceneName, int itemId)
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x94F224", Offset = "0x94F224", VA = "0x94F224")]
	public bool SelectItem(int itemId)
	{
		return default(bool);
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x94F368", Offset = "0x94F368", VA = "0x94F368")]
	public void PurchaseRandom()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x94F4D4", Offset = "0x94F4D4", VA = "0x94F4D4")]
	[IteratorStateMachine(typeof(<ShowPrizeItem>d__21))]
	private IEnumerator ShowPrizeItem(Sprite img)
	{
		return null;
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x94F58C", Offset = "0x94F58C", VA = "0x94F58C")]
	public static int SelectedItemIndex(string sceneName)
	{
		return default(int);
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x94EDEC", Offset = "0x94EDEC", VA = "0x94EDEC")]
	public bool IsItemSelected(int itemId)
	{
		return default(bool);
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x94EE08", Offset = "0x94EE08", VA = "0x94EE08")]
	public bool IsItemPurchased(int itemId)
	{
		return default(bool);
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x94EB20", Offset = "0x94EB20", VA = "0x94EB20")]
	public static bool IsItemPurchased(int itemId, string sceneName)
	{
		return default(bool);
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x94F5E4", Offset = "0x94F5E4", VA = "0x94F5E4")]
	public PrizeStoreManager()
	{
	}
}
[Token(Token = "0x20000C0")]
public class ResetableTransform : MonoBehaviour
{
	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal Rigidbody rb;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal Vector3 defPos;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	internal Quaternion defRot;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	internal Vector3 defScale;

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x94F920", Offset = "0x94F920", VA = "0x94F920", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x94F9E0", Offset = "0x94F9E0", VA = "0x94F9E0", Slot = "5")]
	public virtual void ResetPos()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x94FB04", Offset = "0x94FB04", VA = "0x94FB04")]
	public ResetableTransform()
	{
	}
}
[Token(Token = "0x20000C1")]
public class SaveScoreUI : MonoBehaviour
{
	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject uiObject;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Button saveScoreButton;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Space(10f)]
	private TMP_Text firstLetter;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TMP_Text secondLetter;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TMP_Text thirdLetter;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TMP_Text scoreDisplay;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Space(10f)]
	private TMP_Text finalScoreTMP;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Text finalScoreText;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private readonly LocalizedString locScore;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool saved;

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x94FB0C", Offset = "0x94FB0C", VA = "0x94FB0C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x94FD40", Offset = "0x94FD40", VA = "0x94FD40")]
	private int GetFinalScore()
	{
		return default(int);
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x94FC64", Offset = "0x94FC64", VA = "0x94FC64")]
	public void ShowUI(bool show)
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x94FF74", Offset = "0x94FF74", VA = "0x94FF74")]
	public void IncrementLetter(TMP_Text text)
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x94FFFC", Offset = "0x94FFFC", VA = "0x94FFFC")]
	public void DecrementLetter(TMP_Text text)
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x950084", Offset = "0x950084", VA = "0x950084")]
	[ContextMenu("Save Score")]
	public void SaveScore()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x9504E4", Offset = "0x9504E4", VA = "0x9504E4")]
	public SaveScoreUI()
	{
	}
}
[Token(Token = "0x20000C3")]
public class SceneAudioManager : Singleton<SceneAudioManager>
{
	[Serializable]
	[Token(Token = "0x20000C4")]
	private class AudioSound
	{
		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] audioClips;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public AudioSource aSource;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Space]
		public float volume;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float pitchVariation;

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x950AB4", Offset = "0x950AB4", VA = "0x950AB4")]
		public void PlayRandom()
		{
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x950C64", Offset = "0x950C64", VA = "0x950C64")]
		public AudioSound()
		{
		}
	}

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<AudioSound> sounds;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<AudioSource> audioSources;

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x9506E8", Offset = "0x9506E8", VA = "0x9506E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0x950918", Offset = "0x950918", VA = "0x950918")]
	private void Update()
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x9506EC", Offset = "0x9506EC", VA = "0x9506EC")]
	private void Initialize()
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x94EF88", Offset = "0x94EF88", VA = "0x94EF88")]
	public void PlaySound(string soundName)
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x950BC8", Offset = "0x950BC8", VA = "0x950BC8")]
	public SceneAudioManager()
	{
	}
}
[Token(Token = "0x20000C6")]
public class SceneLoader : MonoBehaviour
{
	[Token(Token = "0x20000C7")]
	[CompilerGenerated]
	private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneLoader <>4__this;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <t>5__2;

		[Token(Token = "0x17000064")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600040C")]
			[Address(RVA = "0x951288", Offset = "0x951288", VA = "0x951288", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600040E")]
			[Address(RVA = "0x9512D0", Offset = "0x9512D0", VA = "0x9512D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x950D10", Offset = "0x950D10", VA = "0x950D10")]
		[DebuggerHidden]
		public <Start>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x951178", Offset = "0x951178", VA = "0x951178", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x95117C", Offset = "0x95117C", VA = "0x95117C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x951290", Offset = "0x951290", VA = "0x951290", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C8")]
	[CompilerGenerated]
	private sealed class <ILoadScene>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneLoader <>4__this;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string name;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <t>5__2;

		[Token(Token = "0x17000066")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000412")]
			[Address(RVA = "0x9513F0", Offset = "0x9513F0", VA = "0x9513F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000067")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000414")]
			[Address(RVA = "0x951438", Offset = "0x951438", VA = "0x951438", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x950F5C", Offset = "0x950F5C", VA = "0x950F5C")]
		[DebuggerHidden]
		public <ILoadScene>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x9512D8", Offset = "0x9512D8", VA = "0x9512D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x9512DC", Offset = "0x9512DC", VA = "0x9512DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x9513F8", Offset = "0x9513F8", VA = "0x9513F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C9")]
	[CompilerGenerated]
	private sealed class <ILoadScene>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneLoader <>4__this;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int index;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <t>5__2;

		[Token(Token = "0x17000068")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000418")]
			[Address(RVA = "0x951558", Offset = "0x951558", VA = "0x951558", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000069")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600041A")]
			[Address(RVA = "0x9515A0", Offset = "0x9515A0", VA = "0x9515A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x950F84", Offset = "0x950F84", VA = "0x950F84")]
		[DebuggerHidden]
		public <ILoadScene>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x951440", Offset = "0x951440", VA = "0x951440", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x951444", Offset = "0x951444", VA = "0x951444", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x951560", Offset = "0x951560", VA = "0x951560", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SceneLoader instance;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material sceneLoaderMat;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool sceneLoading;

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x950C9C", Offset = "0x950C9C", VA = "0x950C9C")]
	[IteratorStateMachine(typeof(<Start>d__3))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x950D38", Offset = "0x950D38", VA = "0x950D38")]
	public static void LoadScene(string name)
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x950E50", Offset = "0x950E50", VA = "0x950E50")]
	public static void LoadScene(int index)
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x950DC0", Offset = "0x950DC0", VA = "0x950DC0")]
	[IteratorStateMachine(typeof(<ILoadScene>d__6))]
	private IEnumerator ILoadScene(string name)
	{
		return null;
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x950ED8", Offset = "0x950ED8", VA = "0x950ED8")]
	[IteratorStateMachine(typeof(<ILoadScene>d__7))]
	private IEnumerator ILoadScene(int index)
	{
		return null;
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x950FAC", Offset = "0x950FAC", VA = "0x950FAC")]
	private void SetOpacity(float opacity)
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x951010", Offset = "0x951010", VA = "0x951010")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x951170", Offset = "0x951170", VA = "0x951170")]
	public SceneLoader()
	{
	}
}
[Token(Token = "0x20000CA")]
public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
{
	[Token(Token = "0x1700006A")]
	public static T Instance
	{
		[Token(Token = "0x600041B")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006B")]
	public static bool InstanceExists
	{
		[Token(Token = "0x600041C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600041D")]
	public Singleton()
	{
	}
}
[Token(Token = "0x20000CB")]
public class SlidingMenu : MonoBehaviour
{
	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Scrollbar scrollbar;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private InputAction press;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float selectedScale;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float unselectedScale;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float zOffset;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float zStart;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float scrollPos;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float[] pos;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float distance;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int currentPos;

	[Token(Token = "0x600041E")]
	[Address(RVA = "0x9515A8", Offset = "0x9515A8", VA = "0x9515A8")]
	private void Start()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0x951740", Offset = "0x951740", VA = "0x951740")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0x95175C", Offset = "0x95175C", VA = "0x95175C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0x951778", Offset = "0x951778", VA = "0x951778")]
	[ContextMenu("Reset Scroll Pos")]
	public void ResetScrollPos()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0x9516E0", Offset = "0x9516E0", VA = "0x9516E0")]
	public void SetCurrentPos(int newPos)
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x951780", Offset = "0x951780", VA = "0x951780")]
	[ContextMenu("Move Left")]
	public void MoveLeft()
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x951790", Offset = "0x951790", VA = "0x951790")]
	[ContextMenu("Move Right")]
	public void MoveRight()
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x9517A0", Offset = "0x9517A0", VA = "0x9517A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x951B4C", Offset = "0x951B4C", VA = "0x951B4C")]
	public SlidingMenu()
	{
	}
}
[Token(Token = "0x20000CC")]
public class TargetScoreDisplay : MonoBehaviour
{
	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ScoreToDisplayPrefab;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color SuccessCol;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color FailCol;

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x951B68", Offset = "0x951B68", VA = "0x951B68")]
	public GameObject DisplayScore(int score, Vector3 pos, bool addPrefabPos = true)
	{
		return null;
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x951EE4", Offset = "0x951EE4", VA = "0x951EE4")]
	public TargetScoreDisplay()
	{
	}
}
[Token(Token = "0x20000CD")]
public class TimeToLive : MonoBehaviour
{
	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TimeTL;

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x951EEC", Offset = "0x951EEC", VA = "0x951EEC")]
	private void Start()
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x951F68", Offset = "0x951F68", VA = "0x951F68")]
	public TimeToLive()
	{
	}
}
[Token(Token = "0x20000CE")]
public class TutorialManagerUI : MonoBehaviour
{
	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TutorialManagerUI Instance;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject UI;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space]
	[SerializeField]
	private GameObject howToPlayTutorial;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject pauseMenuTip;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	[SerializeField]
	private Toggle dontShowAgainToggle;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MenusUI menusUI;

	[Token(Token = "0x1700006C")]
	public bool IsShowing
	{
		[Token(Token = "0x600042B")]
		[Address(RVA = "0x951F78", Offset = "0x951F78", VA = "0x951F78")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x951F94", Offset = "0x951F94", VA = "0x951F94")]
	private void Awake()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x9520D0", Offset = "0x9520D0", VA = "0x9520D0")]
	public void EnableTutorial(bool enable)
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0x9522B8", Offset = "0x9522B8", VA = "0x9522B8")]
	public void Hide()
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0x9522D8", Offset = "0x9522D8", VA = "0x9522D8")]
	public TutorialManagerUI()
	{
	}
}
[Token(Token = "0x20000CF")]
public class IconPreview : MonoBehaviour
{
	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite[] icons;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject icon;

	[Token(Token = "0x6000430")]
	[Address(RVA = "0x9522E0", Offset = "0x9522E0", VA = "0x9522E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0x9524BC", Offset = "0x9524BC", VA = "0x9524BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0x9524C0", Offset = "0x9524C0", VA = "0x9524C0")]
	public IconPreview()
	{
	}
}
[Token(Token = "0x20000D0")]
public class FlickerLight : MonoBehaviour
{
	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float MinLightIntensity;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MaxLightIntensity;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float AccelerateTime;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float _targetIntensity;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _lastIntensity;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _timePassed;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light _lt;

	[Token(Token = "0x4000446")]
	private const double Tolerance = 0.0001;

	[Token(Token = "0x6000433")]
	[Address(RVA = "0x9524C8", Offset = "0x9524C8", VA = "0x9524C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x952544", Offset = "0x952544", VA = "0x952544")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x952608", Offset = "0x952608", VA = "0x952608")]
	public FlickerLight()
	{
	}
}
[Token(Token = "0x20000D1")]
[RequireComponent(typeof(MeshRenderer))]
public class UVOffset : MonoBehaviour
{
	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scrollSpeed;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool scrollY;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshRenderer renderer;

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x952624", Offset = "0x952624", VA = "0x952624")]
	private void Start()
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x95267C", Offset = "0x95267C", VA = "0x95267C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x95270C", Offset = "0x95270C", VA = "0x95270C")]
	public UVOffset()
	{
	}
}
namespace PinKnockdown
{
	[Token(Token = "0x20000D2")]
	public class PinBall : MonoBehaviour
	{
		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Grabbable grabbable;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BallSpawner ballSpawner;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool HitTarget;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float yOffset;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isThrown;

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x952724", Offset = "0x952724", VA = "0x952724")]
		private void Start()
		{
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x952984", Offset = "0x952984", VA = "0x952984")]
		private void Update()
		{
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x952A44", Offset = "0x952A44", VA = "0x952A44")]
		private void Destroy()
		{
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x952AB4", Offset = "0x952AB4", VA = "0x952AB4")]
		public PinBall()
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public class PinKnockdownAudio : MonoBehaviour
	{
		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AudioSource aSource;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip SuccessSound;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip FailSound;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip PopupSound;

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x952EC4", Offset = "0x952EC4", VA = "0x952EC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x952F1C", Offset = "0x952F1C", VA = "0x952F1C")]
		public void PlaySuccessSound()
		{
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0x952F40", Offset = "0x952F40", VA = "0x952F40")]
		public void PlayFailSound()
		{
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0x952F64", Offset = "0x952F64", VA = "0x952F64")]
		public void PlayPopupSound()
		{
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0x952F88", Offset = "0x952F88", VA = "0x952F88")]
		public PinKnockdownAudio()
		{
		}
	}
	[Token(Token = "0x20000D4")]
	public class PinKnockdownManager : MonoBehaviour
	{
		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI ScoreTxt;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI TimerTxt;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI EquationTxt;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TargetCollider[] targetColliders;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float TimeLeft;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int Score;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int AnswersCount;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LocalizedString locMultOf;

		[Token(Token = "0x6000445")]
		[Address(RVA = "0x952F90", Offset = "0x952F90", VA = "0x952F90")]
		private void Start()
		{
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x9534E8", Offset = "0x9534E8", VA = "0x9534E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x953010", Offset = "0x953010", VA = "0x953010")]
		public void NewEquation()
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0x953A2C", Offset = "0x953A2C", VA = "0x953A2C")]
		public void AddScore(int sc)
		{
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0x953B34", Offset = "0x953B34", VA = "0x953B34")]
		public PinKnockdownManager()
		{
		}
	}
	[Token(Token = "0x20000D6")]
	public class TargetCollider : MonoBehaviour
	{
		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject SuccessParticles;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI numTxt;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fractureSpeed;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public bool isCorrect;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public int Number;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float TimeSinceHide;

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x953C50", Offset = "0x953C50", VA = "0x953C50")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x953FA0", Offset = "0x953FA0", VA = "0x953FA0")]
		public void Hide()
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x95364C", Offset = "0x95364C", VA = "0x95364C")]
		public void Show(int num, bool correct)
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x95429C", Offset = "0x95429C", VA = "0x95429C")]
		public void InvokeShow()
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x95458C", Offset = "0x95458C", VA = "0x95458C")]
		public TargetCollider()
		{
		}
	}
}
namespace SkillPrepare
{
	[Token(Token = "0x20000D7")]
	public class ControllersManagerUI : MonoBehaviour
	{
		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject leftController;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject rightController;

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x9545A4", Offset = "0x9545A4", VA = "0x9545A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x9545C4", Offset = "0x9545C4", VA = "0x9545C4")]
		public void EnableRays(bool enable)
		{
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0x9546A4", Offset = "0x9546A4", VA = "0x9546A4")]
		public ControllersManagerUI()
		{
		}
	}
}
namespace BasketballMinigame
{
	[Token(Token = "0x20000D8")]
	public class BallSpawner : MonoBehaviour
	{
		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject BasketballPrefab;

		[Token(Token = "0x6000455")]
		[Address(RVA = "0x9546AC", Offset = "0x9546AC", VA = "0x9546AC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0x952BD8", Offset = "0x952BD8", VA = "0x952BD8")]
		public void SpawnBasketball()
		{
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x9547C4", Offset = "0x9547C4", VA = "0x9547C4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0x954848", Offset = "0x954848", VA = "0x954848")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x9548CC", Offset = "0x9548CC", VA = "0x9548CC")]
		public BallSpawner()
		{
		}
	}
	[Token(Token = "0x20000D9")]
	public class BasketballAidBox : MonoBehaviour
	{
		[Token(Token = "0x600045A")]
		[Address(RVA = "0x9548D4", Offset = "0x9548D4", VA = "0x9548D4")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0x954A30", Offset = "0x954A30", VA = "0x954A30")]
		public BasketballAidBox()
		{
		}
	}
	[Token(Token = "0x20000DA")]
	public class BasketballBall : MonoBehaviour
	{
		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BallSpawner ballSpawner;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Grabbable grabbable;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rb;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float maxVel;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float yOffset;

		[Token(Token = "0x600045C")]
		[Address(RVA = "0x954A38", Offset = "0x954A38", VA = "0x954A38")]
		private void Awake()
		{
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0x954DB4", Offset = "0x954DB4", VA = "0x954DB4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0x954E84", Offset = "0x954E84", VA = "0x954E84")]
		private void OnRelease()
		{
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0x95508C", Offset = "0x95508C", VA = "0x95508C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x9551B0", Offset = "0x9551B0", VA = "0x9551B0")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x9553D8", Offset = "0x9553D8", VA = "0x9553D8")]
		public void SendHapticFeedback(float amp, float dur)
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x95544C", Offset = "0x95544C", VA = "0x95544C")]
		public BasketballBall()
		{
		}
	}
	[Token(Token = "0x20000DC")]
	public class GameManager : MonoBehaviour
	{
		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float TimeTillEnd;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Score;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space]
		public TextMeshProUGUI EquationTxt;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI ScoreTxt;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI TimeLeft;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI[] Hoops;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GoalChecker[] GoalCheckers;

		[Token(Token = "0x6000468")]
		[Address(RVA = "0x95565C", Offset = "0x95565C", VA = "0x95565C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0x955850", Offset = "0x955850", VA = "0x955850")]
		private void Start()
		{
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0x9558C8", Offset = "0x9558C8", VA = "0x9558C8")]
		private void Update()
		{
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0x955A34", Offset = "0x955A34", VA = "0x955A34")]
		public void AddScore(int points)
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x955660", Offset = "0x955660", VA = "0x955660")]
		public void NewEquation()
		{
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x955B7C", Offset = "0x955B7C", VA = "0x955B7C")]
		public Equation GetRandomEquation()
		{
			return null;
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x955F1C", Offset = "0x955F1C", VA = "0x955F1C")]
		public GameManager()
		{
		}
	}
	[Token(Token = "0x20000DD")]
	public class Equation
	{
		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string EquationTxt;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Answer;

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x955EE0", Offset = "0x955EE0", VA = "0x955EE0")]
		public Equation(string txt, int ans)
		{
		}
	}
	[Token(Token = "0x20000DE")]
	public class GoalChecker : MonoBehaviour
	{
		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HoopCanvas hoopCan;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool IsResult;

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x955F2C", Offset = "0x955F2C", VA = "0x955F2C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x956238", Offset = "0x956238", VA = "0x956238")]
		public GoalChecker()
		{
		}
	}
	[Token(Token = "0x20000DF")]
	public class HoopCanvas : MonoBehaviour
	{
		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator PointsHolder;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI PointsAddedTxt;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color PositiveScoreColor;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color NegativeScoreColor;

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x956040", Offset = "0x956040", VA = "0x956040")]
		public void AddPointsTxt(int points)
		{
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x956240", Offset = "0x956240", VA = "0x956240")]
		public HoopCanvas()
		{
		}
	}
}
namespace BalloonMinigame
{
	[Token(Token = "0x20000E0")]
	public class AudioEffects : MonoBehaviour
	{
		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource BalloonPop;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource BalloonMiss;

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x956248", Offset = "0x956248", VA = "0x956248")]
		public void BalloonPopSound()
		{
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0x956264", Offset = "0x956264", VA = "0x956264")]
		public void BalloonMissSound()
		{
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x956280", Offset = "0x956280", VA = "0x956280")]
		public AudioEffects()
		{
		}
	}
	[Token(Token = "0x20000E1")]
	public class Balloon : MonoBehaviour
	{
		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer mRenderer;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ParticleEffectPrefab;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject FailureParticleEffect;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text numberTxt;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject toDisable;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public int RandomNum;

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x956288", Offset = "0x956288", VA = "0x956288")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x95635C", Offset = "0x95635C", VA = "0x95635C")]
		public void BalloonPop()
		{
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x9562F0", Offset = "0x9562F0", VA = "0x9562F0")]
		private void ResetBalloon()
		{
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x9566D4", Offset = "0x9566D4", VA = "0x9566D4")]
		public Balloon()
		{
		}
	}
	[Token(Token = "0x20000E2")]
	public class BalloonDartsManager : MonoBehaviour
	{
		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text NumberType;

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text Timer;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text Score;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color evenColor;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color oddColor;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int TotalScore;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float TimePassed;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public bool IsOdd;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly LocalizedString locEven;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly LocalizedString locOdd;

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x9566DC", Offset = "0x9566DC", VA = "0x9566DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x956894", Offset = "0x956894", VA = "0x956894")]
		private void Update()
		{
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x956740", Offset = "0x956740", VA = "0x956740")]
		public void Randomize()
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x95653C", Offset = "0x95653C", VA = "0x95653C")]
		public void AddScore(int ScoreAmount)
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x9569AC", Offset = "0x9569AC", VA = "0x9569AC")]
		public BalloonDartsManager()
		{
		}
	}
	[Token(Token = "0x20000E3")]
	public class Dart : MonoBehaviour
	{
		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Grabbable grabbable;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rb;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DartSpawner dartSpawner;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isFlying;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float Gravity;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject BoomParticle;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LayerMask HandLayerMask;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject trail;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float yOffset;

		[Token(Token = "0x1700006D")]
		private Autohand.Hand GetHand
		{
			[Token(Token = "0x6000481")]
			[Address(RVA = "0x956CD8", Offset = "0x956CD8", VA = "0x956CD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x956AA0", Offset = "0x956AA0", VA = "0x956AA0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x956D60", Offset = "0x956D60", VA = "0x956D60")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x957078", Offset = "0x957078", VA = "0x957078")]
		private void OnGrab()
		{
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x957194", Offset = "0x957194", VA = "0x957194")]
		private void OnRelease()
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x95727C", Offset = "0x95727C", VA = "0x95727C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x957534", Offset = "0x957534", VA = "0x957534")]
		private void ShowTrail()
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x957554", Offset = "0x957554", VA = "0x957554")]
		public Dart()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	public class DartSpawner : MonoBehaviour
	{
		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> DartPrefabs;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int currentNumber;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem pSystem;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject SpawnedDart;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		private bool CanSpawn;

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x95756C", Offset = "0x95756C", VA = "0x95756C")]
		private void Start()
		{
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x9576D0", Offset = "0x9576D0", VA = "0x9576D0")]
		private void Update()
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x957570", Offset = "0x957570", VA = "0x957570")]
		private void SpawnDart()
		{
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x95713C", Offset = "0x95713C", VA = "0x95713C")]
		public void InvokeSpawn()
		{
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x957784", Offset = "0x957784", VA = "0x957784")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x957808", Offset = "0x957808", VA = "0x957808")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x95788C", Offset = "0x95788C", VA = "0x95788C")]
		public DartSpawner()
		{
		}
	}
}
namespace MirzaBeig.Shaders.ImageEffects
{
	[Serializable]
	[Token(Token = "0x20000E5")]
	[ExecuteInEditMode]
	public class Sharpen : IEBase
	{
		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(-2f, 2f)]
		public float strength;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 8f)]
		public float edgeMult;

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x95789C", Offset = "0x95789C", VA = "0x95789C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x9578F4", Offset = "0x9578F4", VA = "0x9578F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x9578F8", Offset = "0x9578F8", VA = "0x9578F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x9578FC", Offset = "0x9578FC", VA = "0x9578FC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x957AF8", Offset = "0x957AF8", VA = "0x957AF8")]
		public Sharpen()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E6")]
	[ExecuteInEditMode]
	public class IEBase : MonoBehaviour
	{
		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material _material;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Camera _camera;

		[Token(Token = "0x1700006E")]
		protected Material material
		{
			[Token(Token = "0x6000496")]
			[Address(RVA = "0x9579A8", Offset = "0x9579A8", VA = "0x9579A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		protected Shader shader
		{
			[Token(Token = "0x6000497")]
			[Address(RVA = "0x957B14", Offset = "0x957B14", VA = "0x957B14")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000498")]
			[Address(RVA = "0x957B1C", Offset = "0x957B1C", VA = "0x957B1C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000070")]
		protected Camera camera
		{
			[Token(Token = "0x6000499")]
			[Address(RVA = "0x957B24", Offset = "0x957B24", VA = "0x957B24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x957BC8", Offset = "0x957BC8", VA = "0x957BC8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x957BCC", Offset = "0x957BCC", VA = "0x957BCC")]
		private void Start()
		{
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x957BD0", Offset = "0x957BD0", VA = "0x957BD0")]
		private void Update()
		{
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x957BD4", Offset = "0x957BD4", VA = "0x957BD4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x957A78", Offset = "0x957A78", VA = "0x957A78")]
		protected void blit(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x957BD8", Offset = "0x957BD8", VA = "0x957BD8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x957B0C", Offset = "0x957B0C", VA = "0x957B0C")]
		public IEBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E7")]
	[ExecuteInEditMode]
	public class MirzaPostProcessing : MonoBehaviour
	{
		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material material;

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x957C64", Offset = "0x957C64", VA = "0x957C64")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x957CD8", Offset = "0x957CD8", VA = "0x957CD8")]
		public MirzaPostProcessing()
		{
		}
	}
}
namespace MirzaBeig.Scripting.Effects
{
	[Token(Token = "0x20000E8")]
	public class AttractionParticleAffector : ParticleAffector
	{
		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Affector Controls")]
		public float arrivalRadius;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float arrivedRadius;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float arrivalRadiusSqr;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float arrivedRadiusSqr;

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x957CE0", Offset = "0x957CE0", VA = "0x957CE0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x957CE8", Offset = "0x957CE8", VA = "0x957CE8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x957D44", Offset = "0x957D44", VA = "0x957D44", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x957D4C", Offset = "0x957D4C", VA = "0x957D4C", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x958B4C", Offset = "0x958B4C", VA = "0x958B4C", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x958D14", Offset = "0x958D14", VA = "0x958D14", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x958EA8", Offset = "0x958EA8", VA = "0x958EA8")]
		public AttractionParticleAffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E9")]
	public static class Noise
	{
		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float F3;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float G3;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static byte[] perm;

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x9590A0", Offset = "0x9590A0", VA = "0x9590A0")]
		private static float smooth(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x9590B8", Offset = "0x9590B8", VA = "0x9590B8")]
		private static float fade(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x9590E4", Offset = "0x9590E4", VA = "0x9590E4")]
		private static int floor(float x)
		{
			return default(int);
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x95910C", Offset = "0x95910C", VA = "0x95910C")]
		private static float lerp(float from, float to, float t)
		{
			return default(float);
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x95911C", Offset = "0x95911C", VA = "0x95911C")]
		private static float grad(int hash, float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x959184", Offset = "0x959184", VA = "0x959184")]
		public static float perlin(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x959A7C", Offset = "0x959A7C", VA = "0x959A7C")]
		public static float simplex(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x95A21C", Offset = "0x95A21C", VA = "0x95A21C")]
		public static float octavePerlin(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x95A328", Offset = "0x95A328", VA = "0x95A328")]
		public static float octaveSimplex(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x95A434", Offset = "0x95A434", VA = "0x95A434")]
		public static float perlinUnoptimized(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x95A808", Offset = "0x95A808", VA = "0x95A808")]
		public static float simplexUnoptimized(float x, float y, float z)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20000EA")]
	public abstract class ParticleAffector : MonoBehaviour
	{
		[Token(Token = "0x20000EB")]
		protected struct GetForceParameters
		{
			[Token(Token = "0x40004BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float distanceToAffectorCenterSqr;

			[Token(Token = "0x40004BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 scaledDirectionToAffectorCenter;

			[Token(Token = "0x40004BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 particlePosition;
		}

		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Common Controls")]
		public float radius;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float force;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _radius;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float radiusSqr;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float forceDeltaTime;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 transformPosition;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float[] particleSystemExternalForcesMultipliers;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve scaleForceByDistance;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<ParticleSystem> _particleSystems;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int particleSystemsCount;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<ParticleSystem> particleSystems;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem.Particle[][] particleSystemParticles;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ParticleSystem.MainModule[] particleSystemMainModules;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Renderer[] particleSystemRenderers;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected ParticleSystem currentParticleSystem;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GetForceParameters parameters;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool alwaysUpdate;

		[Token(Token = "0x17000071")]
		public float scaledRadius
		{
			[Token(Token = "0x60004B6")]
			[Address(RVA = "0x95AE5C", Offset = "0x95AE5C", VA = "0x95AE5C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x957CE4", Offset = "0x957CE4", VA = "0x957CE4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x957CEC", Offset = "0x957CEC", VA = "0x957CEC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x95AE90", Offset = "0x95AE90", VA = "0x95AE90", Slot = "6")]
		protected virtual void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x95AE94", Offset = "0x95AE94", VA = "0x95AE94", Slot = "7")]
		protected virtual Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x957D48", Offset = "0x957D48", VA = "0x957D48", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x95AED8", Offset = "0x95AED8", VA = "0x95AED8")]
		public void AddParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x95AF88", Offset = "0x95AF88", VA = "0x95AF88")]
		public void RemoveParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x957D88", Offset = "0x957D88", VA = "0x957D88", Slot = "9")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x95AFE0", Offset = "0x95AFE0", VA = "0x95AFE0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x958E24", Offset = "0x958E24", VA = "0x958E24", Slot = "10")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x958EB8", Offset = "0x958EB8", VA = "0x958EB8")]
		protected ParticleAffector()
		{
		}
	}
	[Token(Token = "0x20000EC")]
	public class TurbulenceParticleAffector : ParticleAffector
	{
		[Token(Token = "0x20000ED")]
		public enum NoiseType
		{
			[Token(Token = "0x40004CD")]
			PseudoPerlin,
			[Token(Token = "0x40004CE")]
			Perlin,
			[Token(Token = "0x40004CF")]
			Simplex,
			[Token(Token = "0x40004D0")]
			OctavePerlin,
			[Token(Token = "0x40004D1")]
			OctaveSimplex
		}

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Affector Controls")]
		public float speed;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Range(0f, 8f)]
		public float frequency;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public NoiseType noiseType;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Header("Octave Variant-Only Controls")]
		[Range(1f, 8f)]
		public int octaves;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Range(0f, 4f)]
		public float lacunarity;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Range(0f, 1f)]
		public float persistence;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float time;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float randomX;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float randomY;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float randomZ;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float offsetX;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float offsetY;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float offsetZ;

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x95AFE4", Offset = "0x95AFE4", VA = "0x95AFE4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x95AFE8", Offset = "0x95AFE8", VA = "0x95AFE8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x95B050", Offset = "0x95B050", VA = "0x95B050", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x95B06C", Offset = "0x95B06C", VA = "0x95B06C", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x95B098", Offset = "0x95B098", VA = "0x95B098", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x95B488", Offset = "0x95B488", VA = "0x95B488", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x95B4B0", Offset = "0x95B4B0", VA = "0x95B4B0")]
		public TurbulenceParticleAffector()
		{
		}
	}
	[Token(Token = "0x20000EE")]
	public class VortexParticleAffector : ParticleAffector
	{
		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 axisOfRotation;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Header("Affector Controls")]
		public Vector3 axisOfRotationOffset;

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x95B4CC", Offset = "0x95B4CC", VA = "0x95B4CC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x95B4D0", Offset = "0x95B4D0", VA = "0x95B4D0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x95B4D4", Offset = "0x95B4D4", VA = "0x95B4D4", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x95B4D8", Offset = "0x95B4D8", VA = "0x95B4D8", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x95B4DC", Offset = "0x95B4DC", VA = "0x95B4DC")]
		private void UpdateAxisOfRotation()
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x95B578", Offset = "0x95B578", VA = "0x95B578", Slot = "6")]
		protected override void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x95B57C", Offset = "0x95B57C", VA = "0x95B57C", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x95B684", Offset = "0x95B684", VA = "0x95B684", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x95B84C", Offset = "0x95B84C", VA = "0x95B84C")]
		public VortexParticleAffector()
		{
		}
	}
	[Token(Token = "0x20000EF")]
	[RequireComponent(typeof(ParticleSystem))]
	public class ParticleFlocking : MonoBehaviour
	{
		[Token(Token = "0x20000F0")]
		public struct Voxel
		{
			[Token(Token = "0x40004E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Bounds bounds;

			[Token(Token = "0x40004E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] particles;

			[Token(Token = "0x40004E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int particleCount;
		}

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("N^2 Mode Settings")]
		public float maxDistance;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Forces")]
		public float cohesion;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float separation;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Voxel Mode Settings")]
		public bool useVoxels;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool voxelLocalCenterFromBounds;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float voxelVolume;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int voxelsPerAxis;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int previousVoxelsPerAxisValue;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Voxel[] voxels;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3[] particlePositions;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem.MainModule particleSystemMainModule;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("General Performance Settings")]
		[Range(0f, 1f)]
		public float delay;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float timer;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool alwaysUpdate;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool visible;

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x95B8A8", Offset = "0x95B8A8", VA = "0x95B8A8")]
		private void Start()
		{
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x95B928", Offset = "0x95B928", VA = "0x95B928")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x95B934", Offset = "0x95B934", VA = "0x95B934")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x95B93C", Offset = "0x95B93C", VA = "0x95B93C")]
		private void buildVoxelGrid()
		{
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x95BB70", Offset = "0x95BB70", VA = "0x95BB70")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x95C53C", Offset = "0x95C53C", VA = "0x95C53C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x95C71C", Offset = "0x95C71C", VA = "0x95C71C")]
		public ParticleFlocking()
		{
		}
	}
	[Token(Token = "0x20000F1")]
	[AddComponentMenu("Effects/Particle Force Fields/Attraction Particle Force Field")]
	public class AttractionParticleForceField : ParticleForceField
	{
		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("ForceField Controls")]
		[Tooltip("Tether force based on linear inverse particle distance to force field center.")]
		public float arrivalRadius;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Dead zone from force field center in which no additional force is applied.")]
		public float arrivedRadius;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float arrivalRadiusSqr;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float arrivedRadiusSqr;

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x95C748", Offset = "0x95C748", VA = "0x95C748", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x95C750", Offset = "0x95C750", VA = "0x95C750", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x95C758", Offset = "0x95C758", VA = "0x95C758", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x95C760", Offset = "0x95C760", VA = "0x95C760", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x95C7A0", Offset = "0x95C7A0", VA = "0x95C7A0", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x95C968", Offset = "0x95C968", VA = "0x95C968", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x95CA7C", Offset = "0x95CA7C", VA = "0x95CA7C")]
		public AttractionParticleForceField()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F2")]
	public static class Noise2
	{
		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float F3;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float G3;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static byte[] perm;

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x95CA90", Offset = "0x95CA90", VA = "0x95CA90")]
		private static float smooth(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x95CAA8", Offset = "0x95CAA8", VA = "0x95CAA8")]
		private static float fade(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x95CAD4", Offset = "0x95CAD4", VA = "0x95CAD4")]
		private static int floor(float x)
		{
			return default(int);
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x95CAFC", Offset = "0x95CAFC", VA = "0x95CAFC")]
		private static float lerp(float from, float to, float t)
		{
			return default(float);
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x95CB0C", Offset = "0x95CB0C", VA = "0x95CB0C")]
		private static float grad(int hash, float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x95CB74", Offset = "0x95CB74", VA = "0x95CB74")]
		public static float perlin(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x95D46C", Offset = "0x95D46C", VA = "0x95D46C")]
		public static float simplex(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x95DC0C", Offset = "0x95DC0C", VA = "0x95DC0C")]
		public static float octavePerlin(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x95DD18", Offset = "0x95DD18", VA = "0x95DD18")]
		public static float octaveSimplex(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x95DE24", Offset = "0x95DE24", VA = "0x95DE24")]
		public static float perlinUnoptimized(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x95E1F8", Offset = "0x95E1F8", VA = "0x95E1F8")]
		public static float simplexUnoptimized(float x, float y, float z)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20000F3")]
	public abstract class ParticleForceField : MonoBehaviour
	{
		[Token(Token = "0x20000F4")]
		protected struct GetForceParameters
		{
			[Token(Token = "0x4000501")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float distanceToForceFieldCenterSqr;

			[Token(Token = "0x4000502")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 scaledDirectionToForceFieldCenter;

			[Token(Token = "0x4000503")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 particlePosition;
		}

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Force field spherical range.")]
		[Header("Common Controls")]
		public float radius;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximum baseline force.")]
		public float force;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Internal force field position offset.")]
		public Vector3 center;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _radius;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float radiusSqr;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 transformPosition;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] particleSystemExternalForcesMultipliers;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Force scale as determined by distance to individual particles.")]
		public AnimationCurve forceOverDistance;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If nothing no particle systems are assigned, this force field will operate globally on ALL particle systems in the scene (NOT recommended).\n\nIf attached to a particle system, the force field will operate only on that system.\n\nIf specific particle systems are assigned, then the force field will operate on those systems only, even if attached to a particle system.")]
		public List<ParticleSystem> _particleSystems;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int particleSystemsCount;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<ParticleSystem> particleSystems;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ParticleSystem.Particle[][] particleSystemParticles;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem.MainModule[] particleSystemMainModules;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Renderer[] particleSystemRenderers;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected ParticleSystem currentParticleSystem;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected GetForceParameters parameters;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("If TRUE, update even if target particle system(s) are invisible/offscreen.\n\nIf FALSE, update only if particles of the target system(s) are visible/onscreen.")]
		public bool alwaysUpdate;

		[Token(Token = "0x17000072")]
		public float scaledRadius
		{
			[Token(Token = "0x60004EC")]
			[Address(RVA = "0x95E84C", Offset = "0x95E84C", VA = "0x95E84C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x95E880", Offset = "0x95E880", VA = "0x95E880", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x95E884", Offset = "0x95E884", VA = "0x95E884", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x95E8DC", Offset = "0x95E8DC", VA = "0x95E8DC", Slot = "6")]
		protected virtual void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x95E8E0", Offset = "0x95E8E0", VA = "0x95E8E0", Slot = "7")]
		protected virtual Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x95E924", Offset = "0x95E924", VA = "0x95E924", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x95E928", Offset = "0x95E928", VA = "0x95E928")]
		public void AddParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x95E9D8", Offset = "0x95E9D8", VA = "0x95E9D8")]
		public void RemoveParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x95EA30", Offset = "0x95EA30", VA = "0x95EA30", Slot = "9")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x95F824", Offset = "0x95F824", VA = "0x95F824")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x95F828", Offset = "0x95F828", VA = "0x95F828", Slot = "10")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x95F8AC", Offset = "0x95F8AC", VA = "0x95F8AC")]
		protected ParticleForceField()
		{
		}
	}
	[Token(Token = "0x20000F5")]
	[AddComponentMenu("Effects/Particle Force Fields/Turbulence Particle Force Field")]
	public class TurbulenceParticleForceField : ParticleForceField
	{
		[Token(Token = "0x20000F6")]
		public enum NoiseType
		{
			[Token(Token = "0x4000512")]
			PseudoPerlin,
			[Token(Token = "0x4000513")]
			Perlin,
			[Token(Token = "0x4000514")]
			Simplex,
			[Token(Token = "0x4000515")]
			OctavePerlin,
			[Token(Token = "0x4000516")]
			OctaveSimplex
		}

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Noise texture mutation speed.")]
		[Header("ForceField Controls")]
		public float scrollSpeed;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Noise texture detail amplifier.")]
		[Range(0f, 8f)]
		public float frequency;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public NoiseType noiseType;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Tooltip("Overlapping noise iterations. 1 = no additional iterations.")]
		[Header("Octave Variant-Only Controls")]
		[Range(1f, 8f)]
		public int octaves;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0f, 4f)]
		[Tooltip("Frequency scale per-octave. Can be used to change the overlap every iteration.")]
		public float octaveMultiplier;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 1f)]
		[Tooltip("Amplitude scale per-octave. Can be used to change the overlap every iteration.")]
		public float octaveScale;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float time;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float randomX;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float randomY;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float randomZ;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float offsetX;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float offsetY;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float offsetZ;

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x95FA94", Offset = "0x95FA94", VA = "0x95FA94", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x95FA98", Offset = "0x95FA98", VA = "0x95FA98", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x95FB00", Offset = "0x95FB00", VA = "0x95FB00", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x95FB1C", Offset = "0x95FB1C", VA = "0x95FB1C", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x95FB48", Offset = "0x95FB48", VA = "0x95FB48", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x95FF68", Offset = "0x95FF68", VA = "0x95FF68", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x95FF90", Offset = "0x95FF90", VA = "0x95FF90")]
		public TurbulenceParticleForceField()
		{
		}
	}
	[Token(Token = "0x20000F7")]
	[AddComponentMenu("Effects/Particle Force Fields/Vortex Particle Force Field")]
	public class VortexParticleForceField : ParticleForceField
	{
		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 axisOfRotation;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Header("ForceField Controls")]
		[Tooltip("Internal offset for the axis of rotation.\n\nUseful if the force field and particle system are on the same game object, and you need a seperate rotation for the system, and the affector, but don't want to make the two different game objects.")]
		public Vector3 axisOfRotationOffset;

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x95FFAC", Offset = "0x95FFAC", VA = "0x95FFAC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x95FFB0", Offset = "0x95FFB0", VA = "0x95FFB0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x95FFB4", Offset = "0x95FFB4", VA = "0x95FFB4", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x95FFB8", Offset = "0x95FFB8", VA = "0x95FFB8", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x95FFBC", Offset = "0x95FFBC", VA = "0x95FFBC")]
		private void UpdateAxisOfRotation()
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x960058", Offset = "0x960058", VA = "0x960058", Slot = "6")]
		protected override void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x96005C", Offset = "0x96005C", VA = "0x96005C", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x960164", Offset = "0x960164", VA = "0x960164", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x9602D8", Offset = "0x9602D8", VA = "0x9602D8")]
		public VortexParticleForceField()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F8")]
	[RequireComponent(typeof(ParticleSystem))]
	public class ParticleLights : MonoBehaviour
	{
		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem ps;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Light> lights;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float scale;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 8f)]
		public float intensity;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color colour;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float colourFromParticle;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LightShadows shadows;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject template;

		[Token(Token = "0x6000508")]
		[Address(RVA = "0x960334", Offset = "0x960334", VA = "0x960334")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x960338", Offset = "0x960338", VA = "0x960338")]
		private void Start()
		{
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x960438", Offset = "0x960438", VA = "0x960438")]
		private void Update()
		{
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x96043C", Offset = "0x96043C", VA = "0x96043C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x960924", Offset = "0x960924", VA = "0x960924")]
		public ParticleLights()
		{
		}
	}
	[Token(Token = "0x20000F9")]
	[AddComponentMenu("Effects/Particle Plexus")]
	[RequireComponent(typeof(ParticleSystem))]
	public class ParticlePlexus : MonoBehaviour
	{
		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxDistance;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxConnections;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxLineRenderers;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Space]
		[Range(0f, 1f)]
		public float widthFromParticle;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Space]
		[Range(0f, 1f)]
		public float colourFromParticle;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float alphaFromParticle;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space]
		public AnimationCurve alphaOverNormalizedDistance;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] particlePositions;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color[] particleColours;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float[] particleSizes;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem.MainModule particleSystemMainModule;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Space]
		public LineRenderer lineRendererTemplate;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<LineRenderer> lineRenderers;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform _transform;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Triangle Mesh Settings")]
		public MeshFilter trianglesMeshFilter;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Mesh trianglesMesh;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<int[]> allConnectedParticles;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Range(0f, 1f)]
		[Space]
		public float maxDistanceTriangleBias;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Space]
		public bool trianglesDistanceCheck;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Range(0f, 1f)]
		[Space]
		public float triangleColourFromParticle;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Range(0f, 1f)]
		public float triangleAlphaFromParticle;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("General Performance Settings")]
		[Range(0f, 1f)]
		public float delay;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float timer;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool alwaysUpdate;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool visible;

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x9609C8", Offset = "0x9609C8", VA = "0x9609C8")]
		private void Start()
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x960B00", Offset = "0x960B00", VA = "0x960B00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x960B90", Offset = "0x960B90", VA = "0x960B90")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x960B9C", Offset = "0x960B9C", VA = "0x960B9C")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x960BA4", Offset = "0x960BA4", VA = "0x960BA4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x962634", Offset = "0x962634", VA = "0x962634")]
		public ParticlePlexus()
		{
		}
	}
	[Token(Token = "0x20000FA")]
	public static class CreateLUT
	{
		[Token(Token = "0x6000513")]
		[Address(RVA = "0x962768", Offset = "0x962768", VA = "0x962768")]
		public static void fromGradient(int steps, Gradient gradient, ref Texture2D texture)
		{
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x96290C", Offset = "0x96290C", VA = "0x96290C")]
		public static void fromAnimationCurve(int steps, AnimationCurve curve, ref Texture2D texture)
		{
		}
	}
}
namespace MirzaBeig.ParticleSystems
{
	[Token(Token = "0x20000FB")]
	[RequireComponent(typeof(Light))]
	public class AnimatedLight : MonoBehaviour
	{
		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Light light;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float duration;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool evaluating;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Gradient colourOverLifetime;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve intensityOverLifetime;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool loop;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool autoDestruct;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color startColour;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float startIntensity;

		[Token(Token = "0x17000073")]
		public float time
		{
			[Token(Token = "0x6000515")]
			[Address(RVA = "0x962AE0", Offset = "0x962AE0", VA = "0x962AE0")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000516")]
			[Address(RVA = "0x962AE8", Offset = "0x962AE8", VA = "0x962AE8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x962AF0", Offset = "0x962AF0", VA = "0x962AF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0x962B48", Offset = "0x962B48", VA = "0x962B48")]
		private void Start()
		{
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0x962C0C", Offset = "0x962C0C", VA = "0x962C0C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0x962C10", Offset = "0x962C10", VA = "0x962C10")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x962CE0", Offset = "0x962CE0", VA = "0x962CE0")]
		private void Update()
		{
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x962E5C", Offset = "0x962E5C", VA = "0x962E5C")]
		public AnimatedLight()
		{
		}
	}
	[Token(Token = "0x20000FC")]
	public class Billboard : MonoBehaviour
	{
		[Token(Token = "0x600051D")]
		[Address(RVA = "0x963008", Offset = "0x963008", VA = "0x963008")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x963050", Offset = "0x963050", VA = "0x963050")]
		public Billboard()
		{
		}
	}
	[Token(Token = "0x20000FD")]
	public class DestroyAfterTime : MonoBehaviour
	{
		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float time;

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x963058", Offset = "0x963058", VA = "0x963058")]
		private void Start()
		{
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x9630D4", Offset = "0x9630D4", VA = "0x9630D4")]
		public DestroyAfterTime()
		{
		}
	}
	[Token(Token = "0x20000FE")]
	public class DestroyOnParticlesDead : ParticleSystems
	{
		[Token(Token = "0x6000521")]
		[Address(RVA = "0x9630E4", Offset = "0x9630E4", VA = "0x9630E4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x963140", Offset = "0x963140", VA = "0x963140", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x963148", Offset = "0x963148", VA = "0x963148")]
		private void onParticleSystemsDead()
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x9631B4", Offset = "0x9631B4", VA = "0x9631B4", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x9631BC", Offset = "0x9631BC", VA = "0x9631BC", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x9631C4", Offset = "0x9631C4", VA = "0x9631C4")]
		public DestroyOnParticlesDead()
		{
		}
	}
	[Token(Token = "0x20000FF")]
	public class DestroyOnTrailsDestroyed : TrailRenderers
	{
		[Token(Token = "0x6000527")]
		[Address(RVA = "0x9631D4", Offset = "0x9631D4", VA = "0x9631D4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x9631DC", Offset = "0x9631DC", VA = "0x9631DC", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x963238", Offset = "0x963238", VA = "0x963238", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x963320", Offset = "0x963320", VA = "0x963320")]
		public DestroyOnTrailsDestroyed()
		{
		}
	}
	[Token(Token = "0x2000100")]
	public class ParticleSystems : MonoBehaviour
	{
		[Token(Token = "0x17000074")]
		public ParticleSystem[] particleSystems
		{
			[Token(Token = "0x600052B")]
			[Address(RVA = "0x963330", Offset = "0x963330", VA = "0x963330")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600052C")]
			[Address(RVA = "0x963338", Offset = "0x963338", VA = "0x963338")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x9630E8", Offset = "0x9630E8", VA = "0x9630E8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x963144", Offset = "0x963144", VA = "0x963144", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0x9631B8", Offset = "0x9631B8", VA = "0x9631B8", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x9631C0", Offset = "0x9631C0", VA = "0x9631C0", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x963340", Offset = "0x963340", VA = "0x963340")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x9633A4", Offset = "0x9633A4", VA = "0x9633A4")]
		public void Play()
		{
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0x963408", Offset = "0x963408", VA = "0x963408")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x96346C", Offset = "0x96346C", VA = "0x96346C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x9634D0", Offset = "0x9634D0", VA = "0x9634D0")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x963534", Offset = "0x963534", VA = "0x963534")]
		public void SetLoop(bool loop)
		{
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x9635B8", Offset = "0x9635B8", VA = "0x9635B8")]
		public void SetPlaybackSpeed(float speed)
		{
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x963644", Offset = "0x963644", VA = "0x963644")]
		public void Simulate(float time, bool reset = false)
		{
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0x9636C0", Offset = "0x9636C0", VA = "0x9636C0")]
		public bool IsAlive()
		{
			return default(bool);
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x963798", Offset = "0x963798", VA = "0x963798")]
		public bool IsPlaying(bool checkAll = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x9637E0", Offset = "0x9637E0", VA = "0x9637E0")]
		public int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x9631CC", Offset = "0x9631CC", VA = "0x9631CC")]
		public ParticleSystems()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000101")]
	public class PerlinNoise
	{
		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 offset;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float amplitude;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float frequency;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool unscaledTime;

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x9638BC", Offset = "0x9638BC", VA = "0x9638BC")]
		public void init()
		{
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x96390C", Offset = "0x96390C", VA = "0x96390C")]
		public float GetValue(float time)
		{
			return default(float);
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x963948", Offset = "0x963948", VA = "0x963948")]
		public PerlinNoise()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000102")]
	public class PerlinNoiseXYZ
	{
		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PerlinNoise x;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PerlinNoise y;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PerlinNoise z;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool unscaledTime;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float amplitudeScale;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float frequencyScale;

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x963958", Offset = "0x963958", VA = "0x963958")]
		public void init()
		{
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x963A3C", Offset = "0x963A3C", VA = "0x963A3C")]
		public Vector3 GetXYZ(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x963B18", Offset = "0x963B18", VA = "0x963B18")]
		public PerlinNoiseXYZ()
		{
		}
	}
	[Token(Token = "0x2000103")]
	[RequireComponent(typeof(Renderer))]
	[ExecuteInEditMode]
	public class RendererSortingOrder : MonoBehaviour
	{
		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int sortingOrder;

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x963B28", Offset = "0x963B28", VA = "0x963B28")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x963B2C", Offset = "0x963B2C", VA = "0x963B2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x963B88", Offset = "0x963B88", VA = "0x963B88")]
		private void Update()
		{
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x963B8C", Offset = "0x963B8C", VA = "0x963B8C")]
		public RendererSortingOrder()
		{
		}
	}
	[Token(Token = "0x2000104")]
	public class Rotator : MonoBehaviour
	{
		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 localRotationSpeed;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 worldRotationSpeed;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool executeInEditMode;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool unscaledTime;

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x963B94", Offset = "0x963B94", VA = "0x963B94")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x963B98", Offset = "0x963B98", VA = "0x963B98")]
		private void Start()
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x963B9C", Offset = "0x963B9C", VA = "0x963B9C")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x963D5C", Offset = "0x963D5C", VA = "0x963D5C")]
		private void Update()
		{
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x963BCC", Offset = "0x963BCC", VA = "0x963BCC")]
		private void rotate()
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x963D84", Offset = "0x963D84", VA = "0x963D84")]
		public Rotator()
		{
		}
	}
	[Token(Token = "0x2000105")]
	public class TrailRenderers : MonoBehaviour
	{
		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public TrailRenderer[] trailRenderers;

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x9631D8", Offset = "0x9631D8", VA = "0x9631D8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x9631E0", Offset = "0x9631E0", VA = "0x9631E0", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x96331C", Offset = "0x96331C", VA = "0x96331C", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x963D8C", Offset = "0x963D8C", VA = "0x963D8C")]
		public void setAutoDestruct(bool value)
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x963328", Offset = "0x963328", VA = "0x963328")]
		public TrailRenderers()
		{
		}
	}
	[Token(Token = "0x2000106")]
	public class TransformNoise : MonoBehaviour
	{
		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PerlinNoiseXYZ positionNoise;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PerlinNoiseXYZ rotationNoise;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool unscaledTime;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float time;

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x963DF4", Offset = "0x963DF4", VA = "0x963DF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x963E1C", Offset = "0x963E1C", VA = "0x963E1C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x963EBC", Offset = "0x963EBC", VA = "0x963EBC")]
		public TransformNoise()
		{
		}
	}
}
namespace MirzaBeig.ParticleSystems.Demos
{
	[Serializable]
	[Token(Token = "0x2000107")]
	public class DemoManager_XPTitles : MonoBehaviour
	{
		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LoopingParticleSystemsManager list;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text particleCountText;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text currentParticleSystemText;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rotator cameraRotator;

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x963EC4", Offset = "0x963EC4", VA = "0x963EC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x96413C", Offset = "0x96413C", VA = "0x96413C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x964248", Offset = "0x964248", VA = "0x964248")]
		public void ToggleRotation()
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x96427C", Offset = "0x96427C", VA = "0x96427C")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x9642EC", Offset = "0x9642EC", VA = "0x9642EC")]
		private void Update()
		{
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x9643CC", Offset = "0x9643CC", VA = "0x9643CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x964374", Offset = "0x964374", VA = "0x964374")]
		public void Next()
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x9643A0", Offset = "0x9643A0", VA = "0x9643A0")]
		public void previous()
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x9641A8", Offset = "0x9641A8", VA = "0x9641A8")]
		private void updateCurrentParticleSystemNameText()
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x9648C4", Offset = "0x9648C4", VA = "0x9648C4")]
		public DemoManager_XPTitles()
		{
		}
	}
	[Token(Token = "0x2000108")]
	public enum CameraShakeTarget
	{
		[Token(Token = "0x4000561")]
		Position,
		[Token(Token = "0x4000562")]
		Rotation
	}
	[Token(Token = "0x2000109")]
	public enum CameraShakeAmplitudeCurve
	{
		[Token(Token = "0x4000564")]
		Constant,
		[Token(Token = "0x4000565")]
		FadeInOut25,
		[Token(Token = "0x4000566")]
		FadeInOut50,
		[Token(Token = "0x4000567")]
		FadeInOut75
	}
	[Token(Token = "0x200010A")]
	public enum CameraShakeAmplitudeOverDistanceCurve
	{
		[Token(Token = "0x4000569")]
		Constant,
		[Token(Token = "0x400056A")]
		LinearFadeIn,
		[Token(Token = "0x400056B")]
		LinearFadeOut
	}
	[Token(Token = "0x200010B")]
	public class CameraShake : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200010C")]
		public class Shake
		{
			[Token(Token = "0x4000572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float amplitude;

			[Token(Token = "0x4000573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float frequency;

			[Token(Token = "0x4000574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float duration;

			[Token(Token = "0x4000575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[HideInInspector]
			public CameraShakeTarget target;

			[Token(Token = "0x4000576")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float timeRemaining;

			[Token(Token = "0x4000577")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Vector2 perlinNoiseX;

			[Token(Token = "0x4000578")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Vector2 perlinNoiseY;

			[Token(Token = "0x4000579")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector2 perlinNoiseZ;

			[Token(Token = "0x400057A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[HideInInspector]
			public Vector3 noise;

			[Token(Token = "0x400057B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public AnimationCurve amplitudeOverLifetimeCurve;

			[Token(Token = "0x6000564")]
			[Address(RVA = "0x96584C", Offset = "0x96584C", VA = "0x96584C")]
			public void Init()
			{
			}

			[Token(Token = "0x6000565")]
			[Address(RVA = "0x9658F8", Offset = "0x9658F8", VA = "0x9658F8")]
			private void Init(float amplitude, float frequency, float duration, CameraShakeTarget target)
			{
			}

			[Token(Token = "0x6000566")]
			[Address(RVA = "0x965858", Offset = "0x965858", VA = "0x965858")]
			public void ApplyRandomSeed()
			{
			}

			[Token(Token = "0x6000567")]
			[Address(RVA = "0x9649F0", Offset = "0x9649F0", VA = "0x9649F0")]
			public Shake(float amplitude, float frequency, float duration, CameraShakeTarget target, AnimationCurve amplitudeOverLifetimeCurve)
			{
			}

			[Token(Token = "0x6000568")]
			[Address(RVA = "0x964CB4", Offset = "0x964CB4", VA = "0x964CB4")]
			public Shake(float amplitude, float frequency, float duration, CameraShakeTarget target, CameraShakeAmplitudeCurve amplitudeOverLifetimeCurve)
			{
			}

			[Token(Token = "0x6000569")]
			[Address(RVA = "0x96590C", Offset = "0x96590C", VA = "0x96590C")]
			public bool IsAlive()
			{
				return default(bool);
			}

			[Token(Token = "0x600056A")]
			[Address(RVA = "0x9656C0", Offset = "0x9656C0", VA = "0x9656C0")]
			public void Update()
			{
			}
		}

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float smoothDampTime;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 smoothDampPositionVelocity;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float smoothDampRotationVelocityX;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float smoothDampRotationVelocityY;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float smoothDampRotationVelocityZ;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Shake> shakes;

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x9648CC", Offset = "0x9648CC", VA = "0x9648CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x9648D0", Offset = "0x9648D0", VA = "0x9648D0")]
		public void Add(float amplitude, float frequency, float duration, CameraShakeTarget target, AnimationCurve amplitudeOverLifetimeCurve)
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x964B94", Offset = "0x964B94", VA = "0x964B94")]
		public void Add(float amplitude, float frequency, float duration, CameraShakeTarget target, CameraShakeAmplitudeCurve amplitudeOverLifetimeCurve)
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x965200", Offset = "0x965200", VA = "0x965200")]
		private void Update()
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x9657B8", Offset = "0x9657B8", VA = "0x9657B8")]
		public CameraShake()
		{
		}
	}
	[Token(Token = "0x200010E")]
	public class DemoManager : MonoBehaviour
	{
		[Token(Token = "0x200010F")]
		public enum ParticleMode
		{
			[Token(Token = "0x40005A4")]
			looping,
			[Token(Token = "0x40005A5")]
			oneshot
		}

		[Token(Token = "0x2000110")]
		public enum Level
		{
			[Token(Token = "0x40005A7")]
			none,
			[Token(Token = "0x40005A8")]
			basic
		}

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform cameraRotationTransform;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTranslationTransform;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 cameraLookAtPosition;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MouseFollow mouse;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 targetCameraPosition;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 targetCameraRotation;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 cameraPositionStart;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 cameraRotationStart;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector2 input;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 cameraRotation;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float cameraMoveAmount;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float cameraRotateAmount;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cameraMoveSpeed;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float cameraRotationSpeed;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector2 cameraAngleLimits;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject[] levels;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Level currentLevel;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public ParticleMode particleMode;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool advancedRendering;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Toggle loopingParticleModeToggle;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Toggle oneshotParticleModeToggle;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Toggle advancedRenderingToggle;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Toggle mouseParticlesToggle;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Toggle[] levelToggles;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public ToggleGroup levelTogglesContainer;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private LoopingParticleSystemsManager loopingParticleSystems;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private OneshotParticleSystemsManager oneshotParticleSystems;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject ui;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Text particleCountText;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Text currentParticleSystemText;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Text particleSpawnInstructionText;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Slider timeScaleSlider;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Text timeScaleSliderValueText;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Camera mainCamera;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public MonoBehaviour[] mainCameraPostEffects;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Vector3 cameraPositionSmoothDampVelocity;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private Vector3 cameraRotationSmoothDampVelocity;

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x9659B4", Offset = "0x9659B4", VA = "0x9659B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x965A78", Offset = "0x965A78", VA = "0x965A78")]
		private void Start()
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x966028", Offset = "0x966028", VA = "0x966028")]
		public void OnTimeScaleSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x965DA4", Offset = "0x965DA4", VA = "0x965DA4")]
		public void SetToLoopingParticleMode(bool set)
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x965E38", Offset = "0x965E38", VA = "0x965E38")]
		public void SetToOneshotParticleMode(bool set)
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x96621C", Offset = "0x96621C", VA = "0x96621C")]
		public void SetLevel(Level level)
		{
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x96628C", Offset = "0x96628C", VA = "0x96628C")]
		public void SetLevelFromToggle(Toggle toggle)
		{
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x965ED0", Offset = "0x965ED0", VA = "0x965ED0")]
		public void SetAdvancedRendering(bool value)
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x966304", Offset = "0x966304", VA = "0x966304")]
		public void SetMouseParticlesRendering(bool value)
		{
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x966334", Offset = "0x966334", VA = "0x966334")]
		public static Vector3 DampVector3(Vector3 from, Vector3 to, float speed, float dt)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x9663B4", Offset = "0x9663B4", VA = "0x9663B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x966C8C", Offset = "0x966C8C", VA = "0x966C8C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x965D80", Offset = "0x965D80", VA = "0x965D80")]
		private void ResetCameraTransformTargets()
		{
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x965FC4", Offset = "0x965FC4", VA = "0x965FC4")]
		private void UpdateCurrentParticleSystemNameText()
		{
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x966898", Offset = "0x966898", VA = "0x966898")]
		public void Next()
		{
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x9668DC", Offset = "0x9668DC", VA = "0x9668DC")]
		public void Previous()
		{
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x966D98", Offset = "0x966D98", VA = "0x966D98")]
		public DemoManager()
		{
		}
	}
	[Token(Token = "0x2000111")]
	public class FPSDisplay : MonoBehaviour
	{
		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float timer;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float updateTime;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int frameCount;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float fpsAccum;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text fpsText;

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x966DD4", Offset = "0x966DD4", VA = "0x966DD4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x966DD8", Offset = "0x966DD8", VA = "0x966DD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x966E30", Offset = "0x966E30", VA = "0x966E30")]
		private void Update()
		{
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x966FE4", Offset = "0x966FE4", VA = "0x966FE4")]
		public FPSDisplay()
		{
		}
	}
	[Token(Token = "0x2000112")]
	public class FPSTest : MonoBehaviour
	{
		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int targetFPS1;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int targetFPS2;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int previousVSyncCount;

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x966FF4", Offset = "0x966FF4", VA = "0x966FF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x966FF8", Offset = "0x966FF8", VA = "0x966FF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x966FFC", Offset = "0x966FFC", VA = "0x966FFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x96706C", Offset = "0x96706C", VA = "0x96706C")]
		public FPSTest()
		{
		}
	}
	[Token(Token = "0x2000113")]
	public class LoopingParticleSystemsManager : ParticleManager
	{
		[Token(Token = "0x6000587")]
		[Address(RVA = "0x967080", Offset = "0x967080", VA = "0x967080", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x967088", Offset = "0x967088", VA = "0x967088", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x96712C", Offset = "0x96712C", VA = "0x96712C", Slot = "6")]
		public override void Next()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x96725C", Offset = "0x96725C", VA = "0x96725C", Slot = "7")]
		public override void Previous()
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x967388", Offset = "0x967388", VA = "0x967388", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x967390", Offset = "0x967390", VA = "0x967390", Slot = "8")]
		public override int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x967444", Offset = "0x967444", VA = "0x967444")]
		public LoopingParticleSystemsManager()
		{
		}
	}
	[Token(Token = "0x2000114")]
	public class MouseFollow : MonoBehaviour
	{
		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float distanceFromCamera;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ignoreTimeScale;

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x967474", Offset = "0x967474", VA = "0x967474")]
		private void Awake()
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x967478", Offset = "0x967478", VA = "0x967478")]
		private void Start()
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x96747C", Offset = "0x96747C", VA = "0x96747C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x96758C", Offset = "0x96758C", VA = "0x96758C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x967590", Offset = "0x967590", VA = "0x967590")]
		public MouseFollow()
		{
		}
	}
	[Token(Token = "0x2000115")]
	public class OneshotParticleSystemsManager : ParticleManager
	{
		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask mouseRaycastLayerMask;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<ParticleSystem[]> spawnedPrefabs;

		[Token(Token = "0x17000075")]
		public bool disableSpawn
		{
			[Token(Token = "0x6000593")]
			[Address(RVA = "0x9675A4", Offset = "0x9675A4", VA = "0x9675A4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000594")]
			[Address(RVA = "0x9675AC", Offset = "0x9675AC", VA = "0x9675AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x9675B8", Offset = "0x9675B8", VA = "0x9675B8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x9675BC", Offset = "0x9675BC", VA = "0x9675BC", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x96764C", Offset = "0x96764C", VA = "0x96764C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x9660B8", Offset = "0x9660B8", VA = "0x9660B8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x967650", Offset = "0x967650", VA = "0x967650", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x966920", Offset = "0x966920", VA = "0x966920")]
		public void InstantiateParticlePrefab(Vector2 mousePosition, float maxDistance)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x967654", Offset = "0x967654", VA = "0x967654")]
		public void Randomize()
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x9676AC", Offset = "0x9676AC", VA = "0x9676AC", Slot = "8")]
		public override int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x967834", Offset = "0x967834", VA = "0x967834")]
		public OneshotParticleSystemsManager()
		{
		}
	}
	[Token(Token = "0x2000116")]
	public class ParticleManager : MonoBehaviour
	{
		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected List<ParticleSystem[]> particlePrefabs;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int currentParticlePrefabIndex;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int prefabNameUnderscoreCountCutoff;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool disableChildrenAtStart;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool initialized;

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x963F30", Offset = "0x963F30", VA = "0x963F30")]
		public void Init()
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x967084", Offset = "0x967084", VA = "0x967084", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x96711C", Offset = "0x96711C", VA = "0x96711C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x9671F8", Offset = "0x9671F8", VA = "0x9671F8", Slot = "6")]
		public virtual void Next()
		{
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x967328", Offset = "0x967328", VA = "0x967328", Slot = "7")]
		public virtual void Previous()
		{
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x9644E0", Offset = "0x9644E0", VA = "0x9644E0")]
		public string GetCurrentPrefabName(bool shorten = false)
		{
			return null;
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x96786C", Offset = "0x96786C", VA = "0x96786C", Slot = "8")]
		public virtual int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x96738C", Offset = "0x96738C", VA = "0x96738C", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x96745C", Offset = "0x96745C", VA = "0x96745C")]
		public ParticleManager()
		{
		}
	}
}
namespace MirzaBeig.Demos
{
	[Token(Token = "0x2000117")]
	public class MouseRotateCamera : MonoBehaviour
	{
		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxRotation;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speed;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool unscaledTime;

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x967874", Offset = "0x967874", VA = "0x967874")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x967878", Offset = "0x967878", VA = "0x967878")]
		private void Start()
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x96787C", Offset = "0x96787C", VA = "0x96787C")]
		private void Update()
		{
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x967880", Offset = "0x967880", VA = "0x967880")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x967A50", Offset = "0x967A50", VA = "0x967A50")]
		public MouseRotateCamera()
		{
		}
	}
}
namespace MirzaBeig.Demos.Wallpapers
{
	[Token(Token = "0x2000118")]
	public class GravityClockInteractivityUVFX : MonoBehaviour
	{
		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject forceAffectors;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject forceAffectors2;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem gravityClockPrefab;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem gravityClock;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool enableGravityClockVisualEffects;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool enableGravityClockAttractionForce;

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x967A64", Offset = "0x967A64", VA = "0x967A64")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x967A68", Offset = "0x967A68", VA = "0x967A68")]
		private void Start()
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x967A6C", Offset = "0x967A6C", VA = "0x967A6C")]
		private void Update()
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x967A70", Offset = "0x967A70", VA = "0x967A70")]
		public void SetGravityClockVisualEffectsActive(bool value)
		{
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x967BF4", Offset = "0x967BF4", VA = "0x967BF4")]
		public void SetGravityClockAttractionForceActive(bool value)
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x967C94", Offset = "0x967C94", VA = "0x967C94")]
		public GravityClockInteractivityUVFX()
		{
		}
	}
}
namespace MirzaBeig.Demos.ParticlePlayground
{
	[Token(Token = "0x2000119")]
	public class BillboardCameraPlaneUVFX : MonoBehaviour
	{
		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform cameraTransform;

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x967CA4", Offset = "0x967CA4", VA = "0x967CA4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x967CA8", Offset = "0x967CA8", VA = "0x967CA8")]
		private void Start()
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x967CDC", Offset = "0x967CDC", VA = "0x967CDC")]
		private void Update()
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x967CE0", Offset = "0x967CE0", VA = "0x967CE0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x967D2C", Offset = "0x967D2C", VA = "0x967D2C")]
		public BillboardCameraPlaneUVFX()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput
{
	[Token(Token = "0x200011A")]
	public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axisName;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axisValue;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float responseSpeed;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float returnToCentreSpeed;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AxisTouchButton m_PairedWith;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrossPlatformInputManager.VirtualAxis m_Axis;

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x967D34", Offset = "0x967D34", VA = "0x967D34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x967FBC", Offset = "0x967FBC", VA = "0x967FBC")]
		private void FindPairedButton()
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x968140", Offset = "0x968140", VA = "0x968140")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x9681B0", Offset = "0x9681B0", VA = "0x9681B0", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x96827C", Offset = "0x96827C", VA = "0x96827C", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x9682E0", Offset = "0x9682E0", VA = "0x9682E0")]
		public AxisTouchButton()
		{
		}
	}
	[Token(Token = "0x200011B")]
	public class ButtonHandler : MonoBehaviour
	{
		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x96834C", Offset = "0x96834C", VA = "0x96834C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x968350", Offset = "0x968350", VA = "0x968350")]
		public void SetDownState()
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x968418", Offset = "0x968418", VA = "0x968418")]
		public void SetUpState()
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x9684E0", Offset = "0x9684E0", VA = "0x9684E0")]
		public void SetAxisPositiveState()
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x9685A8", Offset = "0x9685A8", VA = "0x9685A8")]
		public void SetAxisNeutralState()
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x968670", Offset = "0x968670", VA = "0x968670")]
		public void SetAxisNegativeState()
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x968738", Offset = "0x968738", VA = "0x968738")]
		public void Update()
		{
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x96873C", Offset = "0x96873C", VA = "0x96873C")]
		public ButtonHandler()
		{
		}
	}
	[Token(Token = "0x200011C")]
	public static class CrossPlatformInputManager
	{
		[Token(Token = "0x200011D")]
		public enum ActiveInputMethod
		{
			[Token(Token = "0x40005D1")]
			Hardware,
			[Token(Token = "0x40005D2")]
			Touch
		}

		[Token(Token = "0x200011E")]
		public class VirtualAxis
		{
			[Token(Token = "0x40005D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private float m_Value;

			[Token(Token = "0x17000077")]
			public string name
			{
				[Token(Token = "0x60005DE")]
				[Address(RVA = "0x96951C", Offset = "0x96951C", VA = "0x96951C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60005DF")]
				[Address(RVA = "0x969524", Offset = "0x969524", VA = "0x969524")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000078")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x60005E0")]
				[Address(RVA = "0x96952C", Offset = "0x96952C", VA = "0x96952C")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60005E1")]
				[Address(RVA = "0x969534", Offset = "0x969534", VA = "0x969534")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000079")]
			public float GetValue
			{
				[Token(Token = "0x60005E6")]
				[Address(RVA = "0x969588", Offset = "0x969588", VA = "0x969588")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700007A")]
			public float GetValueRaw
			{
				[Token(Token = "0x60005E7")]
				[Address(RVA = "0x969590", Offset = "0x969590", VA = "0x969590")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x60005E2")]
			[Address(RVA = "0x967EB0", Offset = "0x967EB0", VA = "0x967EB0")]
			public VirtualAxis(string name)
			{
			}

			[Token(Token = "0x60005E3")]
			[Address(RVA = "0x969540", Offset = "0x969540", VA = "0x969540")]
			public VirtualAxis(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x60005E4")]
			[Address(RVA = "0x968158", Offset = "0x968158", VA = "0x968158")]
			public void Remove()
			{
			}

			[Token(Token = "0x60005E5")]
			[Address(RVA = "0x969580", Offset = "0x969580", VA = "0x969580")]
			public void Update(float value)
			{
			}
		}

		[Token(Token = "0x200011F")]
		public class VirtualButton
		{
			[Token(Token = "0x40005D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int m_LastPressedFrame;

			[Token(Token = "0x40005D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_ReleasedFrame;

			[Token(Token = "0x40005DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool m_Pressed;

			[Token(Token = "0x1700007B")]
			public string name
			{
				[Token(Token = "0x60005E8")]
				[Address(RVA = "0x969598", Offset = "0x969598", VA = "0x969598")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60005E9")]
				[Address(RVA = "0x9695A0", Offset = "0x9695A0", VA = "0x9695A0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007C")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x60005EA")]
				[Address(RVA = "0x9695A8", Offset = "0x9695A8", VA = "0x9695A8")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60005EB")]
				[Address(RVA = "0x9695B0", Offset = "0x9695B0", VA = "0x9695B0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007D")]
			public bool GetButton
			{
				[Token(Token = "0x60005F1")]
				[Address(RVA = "0x9696EC", Offset = "0x9696EC", VA = "0x9696EC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700007E")]
			public bool GetButtonDown
			{
				[Token(Token = "0x60005F2")]
				[Address(RVA = "0x9696F4", Offset = "0x9696F4", VA = "0x9696F4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700007F")]
			public bool GetButtonUp
			{
				[Token(Token = "0x60005F3")]
				[Address(RVA = "0x969718", Offset = "0x969718", VA = "0x969718")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60005EC")]
			[Address(RVA = "0x9695BC", Offset = "0x9695BC", VA = "0x9695BC")]
			public VirtualButton(string name)
			{
			}

			[Token(Token = "0x60005ED")]
			[Address(RVA = "0x969600", Offset = "0x969600", VA = "0x969600")]
			public VirtualButton(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x60005EE")]
			[Address(RVA = "0x969648", Offset = "0x969648", VA = "0x969648")]
			public void Pressed()
			{
			}

			[Token(Token = "0x60005EF")]
			[Address(RVA = "0x969674", Offset = "0x969674", VA = "0x969674")]
			public void Released()
			{
			}

			[Token(Token = "0x60005F0")]
			[Address(RVA = "0x969694", Offset = "0x969694", VA = "0x969694")]
			public void Remove()
			{
			}
		}

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VirtualInput activeInput;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VirtualInput s_TouchInput;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VirtualInput s_HardwareInput;

		[Token(Token = "0x17000076")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x60005DA")]
			[Address(RVA = "0x969348", Offset = "0x969348", VA = "0x969348")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x968744", Offset = "0x968744", VA = "0x968744")]
		static CrossPlatformInputManager()
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x96881C", Offset = "0x96881C", VA = "0x96881C")]
		public static void SwitchActiveInputMethod(ActiveInputMethod activeInputMethod)
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x967E48", Offset = "0x967E48", VA = "0x967E48")]
		public static bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x968918", Offset = "0x968918", VA = "0x968918")]
		public static bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x967EEC", Offset = "0x967EEC", VA = "0x967EEC")]
		public static void RegisterVirtualAxis(VirtualAxis axis)
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x968B70", Offset = "0x968B70", VA = "0x968B70")]
		public static void RegisterVirtualButton(VirtualButton button)
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x968D70", Offset = "0x968D70", VA = "0x968D70")]
		public static void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x968EB8", Offset = "0x968EB8", VA = "0x968EB8")]
		public static void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x967F54", Offset = "0x967F54", VA = "0x967F54")]
		public static VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x969044", Offset = "0x969044", VA = "0x969044")]
		public static float GetAxis(string name)
		{
			return default(float);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x96911C", Offset = "0x96911C", VA = "0x96911C")]
		public static float GetAxisRaw(string name)
		{
			return default(float);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x96909C", Offset = "0x96909C", VA = "0x96909C")]
		private static float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x969174", Offset = "0x969174", VA = "0x969174")]
		public static bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x9691E4", Offset = "0x9691E4", VA = "0x9691E4")]
		public static bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x969254", Offset = "0x969254", VA = "0x969254")]
		public static bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x9683A8", Offset = "0x9683A8", VA = "0x9683A8")]
		public static void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x968470", Offset = "0x968470", VA = "0x968470")]
		public static void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x968538", Offset = "0x968538", VA = "0x968538")]
		public static void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x9686C8", Offset = "0x9686C8", VA = "0x9686C8")]
		public static void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x968600", Offset = "0x968600", VA = "0x968600")]
		public static void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x9692C4", Offset = "0x9692C4", VA = "0x9692C4")]
		public static void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x9693B4", Offset = "0x9693B4", VA = "0x9693B4")]
		public static void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x96942C", Offset = "0x96942C", VA = "0x96942C")]
		public static void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x9694A4", Offset = "0x9694A4", VA = "0x9694A4")]
		public static void SetVirtualMousePositionZ(float f)
		{
		}
	}
	[Token(Token = "0x2000120")]
	public class InputAxisScrollbar : MonoBehaviour
	{
		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axis;

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x96973C", Offset = "0x96973C", VA = "0x96973C")]
		private void Update()
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x969740", Offset = "0x969740", VA = "0x969740")]
		public void HandleInput(float value)
		{
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x9697B0", Offset = "0x9697B0", VA = "0x9697B0")]
		public InputAxisScrollbar()
		{
		}
	}
	[Token(Token = "0x2000121")]
	public class Joystick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x2000122")]
		public enum AxisOption
		{
			[Token(Token = "0x40005E6")]
			Both,
			[Token(Token = "0x40005E7")]
			OnlyHorizontal,
			[Token(Token = "0x40005E8")]
			OnlyVertical
		}

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int MovementRange;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AxisOption axesToUse;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_StartPos;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_UseX;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_UseY;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x9697B8", Offset = "0x9697B8", VA = "0x9697B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x96994C", Offset = "0x96994C", VA = "0x96994C")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x9697EC", Offset = "0x9697EC", VA = "0x9697EC")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x9699AC", Offset = "0x9699AC", VA = "0x9699AC", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x969AF8", Offset = "0x969AF8", VA = "0x969AF8", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x969B34", Offset = "0x969B34", VA = "0x969B34", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x969B38", Offset = "0x969B38", VA = "0x969B38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x969B78", Offset = "0x969B78", VA = "0x969B78")]
		public Joystick()
		{
		}
	}
	[Token(Token = "0x2000123")]
	[ExecuteInEditMode]
	public class MobileControlRig : MonoBehaviour
	{
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x969C04", Offset = "0x969C04", VA = "0x969C04")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x969C0C", Offset = "0x969C0C", VA = "0x969C0C")]
		private void CheckEnableControlRig()
		{
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x969C14", Offset = "0x969C14", VA = "0x969C14")]
		private void EnableControlRig(bool enabled)
		{
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x969F0C", Offset = "0x969F0C", VA = "0x969F0C")]
		public MobileControlRig()
		{
		}
	}
	[Token(Token = "0x2000124")]
	public class TiltInput : MonoBehaviour
	{
		[Token(Token = "0x2000125")]
		public enum AxisOptions
		{
			[Token(Token = "0x40005EF")]
			ForwardAxis,
			[Token(Token = "0x40005F0")]
			SidewaysAxis
		}

		[Serializable]
		[Token(Token = "0x2000126")]
		public class AxisMapping
		{
			[Token(Token = "0x2000127")]
			public enum MappingType
			{
				[Token(Token = "0x40005F4")]
				NamedAxis,
				[Token(Token = "0x40005F5")]
				MousePositionX,
				[Token(Token = "0x40005F6")]
				MousePositionY,
				[Token(Token = "0x40005F7")]
				MousePositionZ
			}

			[Token(Token = "0x40005F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MappingType type;

			[Token(Token = "0x40005F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string axisName;

			[Token(Token = "0x6000607")]
			[Address(RVA = "0x96A268", Offset = "0x96A268", VA = "0x96A268")]
			public AxisMapping()
			{
			}
		}

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisMapping mapping;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AxisOptions tiltAroundAxis;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fullTiltAngle;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float centreAngleOffset;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CrossPlatformInputManager.VirtualAxis m_SteerAxis;

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x969F14", Offset = "0x969F14", VA = "0x969F14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x969FF0", Offset = "0x969FF0", VA = "0x969FF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x96A240", Offset = "0x96A240", VA = "0x96A240")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x96A258", Offset = "0x96A258", VA = "0x96A258")]
		public TiltInput()
		{
		}
	}
	[Token(Token = "0x2000128")]
	[RequireComponent(typeof(Image))]
	public class TouchPad : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x2000129")]
		public enum AxisOption
		{
			[Token(Token = "0x400060B")]
			Both,
			[Token(Token = "0x400060C")]
			OnlyHorizontal,
			[Token(Token = "0x400060D")]
			OnlyVertical
		}

		[Token(Token = "0x200012A")]
		public enum ControlStyle
		{
			[Token(Token = "0x400060F")]
			Absolute,
			[Token(Token = "0x4000610")]
			Relative,
			[Token(Token = "0x4000611")]
			Swipe
		}

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisOption axesToUse;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ControlStyle controlStyle;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Xsensitivity;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Ysensitivity;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_StartPos;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 m_PreviousDelta;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_JoytickOutput;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_UseX;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_UseY;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_Dragging;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_Id;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 m_PreviousTouchPos;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Center;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Image m_Image;

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x96A270", Offset = "0x96A270", VA = "0x96A270")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x96A300", Offset = "0x96A300", VA = "0x96A300")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x96A460", Offset = "0x96A460", VA = "0x96A460")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x96A560", Offset = "0x96A560", VA = "0x96A560", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x96A598", Offset = "0x96A598", VA = "0x96A598")]
		private void Update()
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x96A770", Offset = "0x96A770", VA = "0x96A770", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x96A7D0", Offset = "0x96A7D0", VA = "0x96A7D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x96A890", Offset = "0x96A890", VA = "0x96A890")]
		public TouchPad()
		{
		}
	}
	[Token(Token = "0x200012B")]
	public abstract class VirtualInput
	{
		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualAxis> m_VirtualAxes;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualButton> m_VirtualButtons;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<string> m_AlwaysUseVirtual;

		[Token(Token = "0x17000080")]
		public Vector3 virtualMousePosition
		{
			[Token(Token = "0x6000610")]
			[Address(RVA = "0x96A924", Offset = "0x96A924", VA = "0x96A924")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000611")]
			[Address(RVA = "0x96A930", Offset = "0x96A930", VA = "0x96A930")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x9688C0", Offset = "0x9688C0", VA = "0x9688C0")]
		public bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x968980", Offset = "0x968980", VA = "0x968980")]
		public bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x9689D8", Offset = "0x9689D8", VA = "0x9689D8")]
		public void RegisterVirtualAxis(CrossPlatformInputManager.VirtualAxis axis)
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x968BD8", Offset = "0x968BD8", VA = "0x968BD8")]
		public void RegisterVirtualButton(CrossPlatformInputManager.VirtualButton button)
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x968E28", Offset = "0x968E28", VA = "0x968E28")]
		public void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x968F20", Offset = "0x968F20", VA = "0x968F20")]
		public void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x968FB0", Offset = "0x968FB0", VA = "0x968FB0")]
		public CrossPlatformInputManager.VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x969424", Offset = "0x969424", VA = "0x969424")]
		public void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x96949C", Offset = "0x96949C", VA = "0x96949C")]
		public void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x969514", Offset = "0x969514", VA = "0x969514")]
		public void SetVirtualMousePositionZ(float f)
		{
		}

		[Token(Token = "0x600061C")]
		public abstract float GetAxis(string name, bool raw);

		[Token(Token = "0x600061D")]
		public abstract bool GetButton(string name);

		[Token(Token = "0x600061E")]
		public abstract bool GetButtonDown(string name);

		[Token(Token = "0x600061F")]
		public abstract bool GetButtonUp(string name);

		[Token(Token = "0x6000620")]
		public abstract void SetButtonDown(string name);

		[Token(Token = "0x6000621")]
		public abstract void SetButtonUp(string name);

		[Token(Token = "0x6000622")]
		public abstract void SetAxisPositive(string name);

		[Token(Token = "0x6000623")]
		public abstract void SetAxisNegative(string name);

		[Token(Token = "0x6000624")]
		public abstract void SetAxisZero(string name);

		[Token(Token = "0x6000625")]
		public abstract void SetAxis(string name, float value);

		[Token(Token = "0x6000626")]
		public abstract Vector3 MousePosition();

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x96A93C", Offset = "0x96A93C", VA = "0x96A93C")]
		protected VirtualInput()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput.PlatformSpecific
{
	[Token(Token = "0x200012C")]
	public class MobileInput : VirtualInput
	{
		[Token(Token = "0x6000628")]
		[Address(RVA = "0x96AA64", Offset = "0x96AA64", VA = "0x96AA64")]
		private void AddButton(string name)
		{
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x96AB14", Offset = "0x96AB14", VA = "0x96AB14")]
		private void AddAxes(string name)
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x96ABBC", Offset = "0x96ABBC", VA = "0x96ABBC", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x96AC54", Offset = "0x96AC54", VA = "0x96AC54", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x96AD08", Offset = "0x96AD08", VA = "0x96AD08", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x96ADB0", Offset = "0x96ADB0", VA = "0x96ADB0", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x96AE4C", Offset = "0x96AE4C", VA = "0x96AE4C", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x96AEE8", Offset = "0x96AEE8", VA = "0x96AEE8", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x96AF80", Offset = "0x96AF80", VA = "0x96AF80", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x96B024", Offset = "0x96B024", VA = "0x96B024", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x96B0D0", Offset = "0x96B0D0", VA = "0x96B0D0", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x96B17C", Offset = "0x96B17C", VA = "0x96B17C", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x96B214", Offset = "0x96B214", VA = "0x96B214", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x968814", Offset = "0x968814", VA = "0x968814")]
		public MobileInput()
		{
		}
	}
	[Token(Token = "0x200012D")]
	public class StandaloneInput : VirtualInput
	{
		[Token(Token = "0x6000636")]
		[Address(RVA = "0x96B220", Offset = "0x96B220", VA = "0x96B220", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x96B234", Offset = "0x96B234", VA = "0x96B234", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x96B240", Offset = "0x96B240", VA = "0x96B240", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x96B24C", Offset = "0x96B24C", VA = "0x96B24C", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x96B258", Offset = "0x96B258", VA = "0x96B258", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x96B2A8", Offset = "0x96B2A8", VA = "0x96B2A8", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x96B2F8", Offset = "0x96B2F8", VA = "0x96B2F8", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x96B348", Offset = "0x96B348", VA = "0x96B348", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x96B398", Offset = "0x96B398", VA = "0x96B398", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x96B3E8", Offset = "0x96B3E8", VA = "0x96B3E8", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x96B438", Offset = "0x96B438", VA = "0x96B438", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x968818", Offset = "0x968818", VA = "0x968818")]
		public StandaloneInput()
		{
		}
	}
}
namespace UnityStandardAssets.Utility
{
	[Serializable]
	[Token(Token = "0x200012E")]
	public class CurveControlledBob
	{
		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float HorizontalBobRange;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float VerticalBobRange;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve Bobcurve;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float VerticaltoHorizontalRatio;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_CyclePositionX;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_CyclePositionY;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_BobBaseInterval;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_Time;

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x96B440", Offset = "0x96B440", VA = "0x96B440")]
		public void Setup(Camera camera, float bobBaseInterval)
		{
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x96B4E0", Offset = "0x96B4E0", VA = "0x96B4E0")]
		public Vector3 DoHeadBob(float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x96B5D0", Offset = "0x96B5D0", VA = "0x96B5D0")]
		public CurveControlledBob()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200012F")]
	public class FOVKick
	{
		[Token(Token = "0x2000130")]
		[CompilerGenerated]
		private sealed class <FOVKickUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000625")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000627")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x4000628")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x17000081")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600064E")]
				[Address(RVA = "0x96BBE0", Offset = "0x96BBE0", VA = "0x96BBE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000082")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000650")]
				[Address(RVA = "0x96BC28", Offset = "0x96BC28", VA = "0x96BC28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600064B")]
			[Address(RVA = "0x96B9C8", Offset = "0x96B9C8", VA = "0x96B9C8")]
			[DebuggerHidden]
			public <FOVKickUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600064C")]
			[Address(RVA = "0x96BAA8", Offset = "0x96BAA8", VA = "0x96BAA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600064D")]
			[Address(RVA = "0x96BAAC", Offset = "0x96BAAC", VA = "0x96BAAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600064F")]
			[Address(RVA = "0x96BBE8", Offset = "0x96BBE8", VA = "0x96BBE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000131")]
		[CompilerGenerated]
		private sealed class <FOVKickDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000629")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400062A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400062B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x400062C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x17000083")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000654")]
				[Address(RVA = "0x96BD7C", Offset = "0x96BD7C", VA = "0x96BD7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000084")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000656")]
				[Address(RVA = "0x96BDC4", Offset = "0x96BDC4", VA = "0x96BDC4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000651")]
			[Address(RVA = "0x96BA64", Offset = "0x96BA64", VA = "0x96BA64")]
			[DebuggerHidden]
			public <FOVKickDown>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000652")]
			[Address(RVA = "0x96BC30", Offset = "0x96BC30", VA = "0x96BC30", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000653")]
			[Address(RVA = "0x96BC34", Offset = "0x96BC34", VA = "0x96BC34", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000655")]
			[Address(RVA = "0x96BD84", Offset = "0x96BD84", VA = "0x96BD84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float originalFov;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FOVIncrease;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float TimeToIncrease;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TimeToDecrease;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve IncreaseCurve;

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x96B81C", Offset = "0x96B81C", VA = "0x96B81C")]
		public void Setup(Camera camera)
		{
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x96B864", Offset = "0x96B864", VA = "0x96B864")]
		private void CheckStatus(Camera camera)
		{
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x96B94C", Offset = "0x96B94C", VA = "0x96B94C")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x96B954", Offset = "0x96B954", VA = "0x96B954")]
		[IteratorStateMachine(typeof(<FOVKickUp>d__9))]
		public IEnumerator FOVKickUp()
		{
			return null;
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x96B9F0", Offset = "0x96B9F0", VA = "0x96B9F0")]
		[IteratorStateMachine(typeof(<FOVKickDown>d__10))]
		public IEnumerator FOVKickDown()
		{
			return null;
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x96BA8C", Offset = "0x96BA8C", VA = "0x96BA8C")]
		public FOVKick()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000132")]
	public class LerpControlledBob
	{
		[Token(Token = "0x2000133")]
		[CompilerGenerated]
		private sealed class <DoBobCycle>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000630")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000631")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000632")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LerpControlledBob <>4__this;

			[Token(Token = "0x4000633")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x17000085")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600065D")]
				[Address(RVA = "0x96C030", Offset = "0x96C030", VA = "0x96C030", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000086")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600065F")]
				[Address(RVA = "0x96C078", Offset = "0x96C078", VA = "0x96C078", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600065A")]
			[Address(RVA = "0x96BE48", Offset = "0x96BE48", VA = "0x96BE48")]
			[DebuggerHidden]
			public <DoBobCycle>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x600065B")]
			[Address(RVA = "0x96BE78", Offset = "0x96BE78", VA = "0x96BE78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600065C")]
			[Address(RVA = "0x96BE7C", Offset = "0x96BE7C", VA = "0x96BE7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600065E")]
			[Address(RVA = "0x96C038", Offset = "0x96C038", VA = "0x96C038", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float BobDuration;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float BobAmount;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Offset;

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x96BDCC", Offset = "0x96BDCC", VA = "0x96BDCC")]
		public float Offset()
		{
			return default(float);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x96BDD4", Offset = "0x96BDD4", VA = "0x96BDD4")]
		[IteratorStateMachine(typeof(<DoBobCycle>d__4))]
		public IEnumerator DoBobCycle()
		{
			return null;
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x96BE70", Offset = "0x96BE70", VA = "0x96BE70")]
		public LerpControlledBob()
		{
		}
	}
	[Token(Token = "0x2000134")]
	public class ActivateTrigger : MonoBehaviour
	{
		[Token(Token = "0x2000135")]
		public enum Mode
		{
			[Token(Token = "0x400063A")]
			Trigger,
			[Token(Token = "0x400063B")]
			Replace,
			[Token(Token = "0x400063C")]
			Activate,
			[Token(Token = "0x400063D")]
			Enable,
			[Token(Token = "0x400063E")]
			Animate,
			[Token(Token = "0x400063F")]
			Deactivate
		}

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode action;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object target;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject source;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int triggerCount;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool repeatTrigger;

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x96C080", Offset = "0x96C080", VA = "0x96C080")]
		private void DoActivateTrigger()
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x96C4BC", Offset = "0x96C4BC", VA = "0x96C4BC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x96C4C0", Offset = "0x96C4C0", VA = "0x96C4C0")]
		public ActivateTrigger()
		{
		}
	}
	[Token(Token = "0x2000136")]
	public class AutoMobileShaderSwitch : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000137")]
		public class ReplacementDefinition
		{
			[Token(Token = "0x4000641")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Shader original;

			[Token(Token = "0x4000642")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Shader replacement;

			[Token(Token = "0x6000665")]
			[Address(RVA = "0x96D01C", Offset = "0x96D01C", VA = "0x96D01C")]
			public ReplacementDefinition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000138")]
		public class ReplacementList
		{
			[Token(Token = "0x4000643")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ReplacementDefinition[] items;

			[Token(Token = "0x6000666")]
			[Address(RVA = "0x96D024", Offset = "0x96D024", VA = "0x96D024")]
			public ReplacementList()
			{
			}
		}

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ReplacementList m_ReplacementList;

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x96C4D8", Offset = "0x96C4D8", VA = "0x96C4D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x96D014", Offset = "0x96D014", VA = "0x96D014")]
		public AutoMobileShaderSwitch()
		{
		}
	}
	[Token(Token = "0x2000139")]
	public class AutoMoveAndRotate : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200013A")]
		public class Vector3andSpace
		{
			[Token(Token = "0x4000648")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 value;

			[Token(Token = "0x4000649")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Space space;

			[Token(Token = "0x600066A")]
			[Address(RVA = "0x96D170", Offset = "0x96D170", VA = "0x96D170")]
			public Vector3andSpace()
			{
			}
		}

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3andSpace moveUnitsPerSecond;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3andSpace rotateDegreesPerSecond;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool ignoreTimescale;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_LastRealTime;

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x96D088", Offset = "0x96D088", VA = "0x96D088")]
		private void Start()
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x96D0A4", Offset = "0x96D0A4", VA = "0x96D0A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x96D168", Offset = "0x96D168", VA = "0x96D168")]
		public AutoMoveAndRotate()
		{
		}
	}
	[Token(Token = "0x200013B")]
	public class CameraRefocus
	{
		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Lookatpoint;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform Parent;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OrigCameraPos;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_Refocus;

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x96D180", Offset = "0x96D180", VA = "0x96D180")]
		public CameraRefocus(Camera camera, Transform parent, Vector3 origCameraPos)
		{
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x96D1E8", Offset = "0x96D1E8", VA = "0x96D1E8")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x96D1F0", Offset = "0x96D1F0", VA = "0x96D1F0")]
		public void ChangeParent(Transform parent)
		{
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x96D1F8", Offset = "0x96D1F8", VA = "0x96D1F8")]
		public void GetFocusPoint()
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x96D2E4", Offset = "0x96D2E4", VA = "0x96D2E4")]
		public void SetFocusPoint()
		{
		}
	}
	[Token(Token = "0x200013C")]
	public class DragRigidbody : MonoBehaviour
	{
		[Token(Token = "0x200013D")]
		[CompilerGenerated]
		private sealed class <DragObject>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000656")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000657")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000658")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragRigidbody <>4__this;

			[Token(Token = "0x4000659")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float distance;

			[Token(Token = "0x400065A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <oldDrag>5__2;

			[Token(Token = "0x400065B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <oldAngularDrag>5__3;

			[Token(Token = "0x400065C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Camera <mainCamera>5__4;

			[Token(Token = "0x17000087")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000677")]
				[Address(RVA = "0x96DA78", Offset = "0x96DA78", VA = "0x96DA78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000088")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000679")]
				[Address(RVA = "0x96DAC0", Offset = "0x96DAC0", VA = "0x96DAC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000674")]
			[Address(RVA = "0x96D804", Offset = "0x96D804", VA = "0x96D804")]
			[DebuggerHidden]
			public <DragObject>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000675")]
			[Address(RVA = "0x96D834", Offset = "0x96D834", VA = "0x96D834", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000676")]
			[Address(RVA = "0x96D838", Offset = "0x96D838", VA = "0x96D838", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000678")]
			[Address(RVA = "0x96DA80", Offset = "0x96DA80", VA = "0x96DA80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400064F")]
		private const float k_Spring = 50f;

		[Token(Token = "0x4000650")]
		private const float k_Damper = 5f;

		[Token(Token = "0x4000651")]
		private const float k_Drag = 10f;

		[Token(Token = "0x4000652")]
		private const float k_AngularDrag = 5f;

		[Token(Token = "0x4000653")]
		private const float k_Distance = 0.2f;

		[Token(Token = "0x4000654")]
		private const bool k_AttachToCenterOfMass = false;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SpringJoint m_SpringJoint;

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x96D328", Offset = "0x96D328", VA = "0x96D328")]
		private void Update()
		{
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0x96D780", Offset = "0x96D780", VA = "0x96D780")]
		[IteratorStateMachine(typeof(<DragObject>d__8))]
		private IEnumerator DragObject(float distance)
		{
			return null;
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0x96D6D4", Offset = "0x96D6D4", VA = "0x96D6D4")]
		private Camera FindCamera()
		{
			return null;
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x96D82C", Offset = "0x96D82C", VA = "0x96D82C")]
		public DragRigidbody()
		{
		}
	}
	[Token(Token = "0x200013E")]
	public class DynamicShadowSettings : MonoBehaviour
	{
		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Light sunLight;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minHeight;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minShadowDistance;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minShadowBias;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxHeight;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxShadowDistance;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxShadowBias;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float adaptTime;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_SmoothHeight;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_ChangeSpeed;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_OriginalStrength;

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x96DAC8", Offset = "0x96DAC8", VA = "0x96DAC8")]
		private void Start()
		{
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0x96DAF0", Offset = "0x96DAF0", VA = "0x96DAF0")]
		private void Update()
		{
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0x96DD14", Offset = "0x96DD14", VA = "0x96DD14")]
		public DynamicShadowSettings()
		{
		}
	}
	[Token(Token = "0x200013F")]
	public class FollowTarget : MonoBehaviour
	{
		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x96DD48", Offset = "0x96DD48", VA = "0x96DD48")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x96DDA4", Offset = "0x96DDA4", VA = "0x96DDA4")]
		public FollowTarget()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public class FPSCounter : MonoBehaviour
	{
		[Token(Token = "0x400066A")]
		private const float fpsMeasurePeriod = 0.5f;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_FpsAccumulator;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_FpsNextPeriod;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_CurrentFps;

		[Token(Token = "0x400066E")]
		private const string display = "{0} FPS";

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x96DDBC", Offset = "0x96DDBC", VA = "0x96DDBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x96DDE0", Offset = "0x96DDE0", VA = "0x96DDE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x96DE48", Offset = "0x96DE48", VA = "0x96DE48")]
		public FPSCounter()
		{
		}
	}
	[Token(Token = "0x2000141")]
	public class ObjectResetter : MonoBehaviour
	{
		[Token(Token = "0x2000142")]
		[CompilerGenerated]
		private sealed class <ResetCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000673")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000674")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000675")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4000676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ObjectResetter <>4__this;

			[Token(Token = "0x17000089")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000689")]
				[Address(RVA = "0x96E2D4", Offset = "0x96E2D4", VA = "0x96E2D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600068B")]
				[Address(RVA = "0x96E31C", Offset = "0x96E31C", VA = "0x96E31C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000686")]
			[Address(RVA = "0x96E014", Offset = "0x96E014", VA = "0x96E014")]
			[DebuggerHidden]
			public <ResetCoroutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000687")]
			[Address(RVA = "0x96E044", Offset = "0x96E044", VA = "0x96E044", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000688")]
			[Address(RVA = "0x96E048", Offset = "0x96E048", VA = "0x96E048", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600068A")]
			[Address(RVA = "0x96E2DC", Offset = "0x96E2DC", VA = "0x96E2DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 originalPosition;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion originalRotation;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Transform> originalStructure;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x96DE50", Offset = "0x96DE50", VA = "0x96DE50")]
		private void Start()
		{
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x96DF70", Offset = "0x96DF70", VA = "0x96DF70")]
		public void DelayedReset(float delay)
		{
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0x96DF90", Offset = "0x96DF90", VA = "0x96DF90")]
		[IteratorStateMachine(typeof(<ResetCoroutine>d__6))]
		public IEnumerator ResetCoroutine(float delay)
		{
			return null;
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0x96E03C", Offset = "0x96E03C", VA = "0x96E03C")]
		public ObjectResetter()
		{
		}
	}
	[Token(Token = "0x2000143")]
	public class ParticleSystemDestroyer : MonoBehaviour
	{
		[Token(Token = "0x2000144")]
		[CompilerGenerated]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400067B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400067C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400067D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ParticleSystemDestroyer <>4__this;

			[Token(Token = "0x400067E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ParticleSystem[] <systems>5__2;

			[Token(Token = "0x400067F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <stopTime>5__3;

			[Token(Token = "0x1700008B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000692")]
				[Address(RVA = "0x96E6C8", Offset = "0x96E6C8", VA = "0x96E6C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000694")]
				[Address(RVA = "0x96E710", Offset = "0x96E710", VA = "0x96E710", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600068F")]
			[Address(RVA = "0x96E398", Offset = "0x96E398", VA = "0x96E398")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000690")]
			[Address(RVA = "0x96E3E0", Offset = "0x96E3E0", VA = "0x96E3E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000691")]
			[Address(RVA = "0x96E3E4", Offset = "0x96E3E4", VA = "0x96E3E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000693")]
			[Address(RVA = "0x96E6D0", Offset = "0x96E6D0", VA = "0x96E6D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minDuration;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxDuration;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_MaxLifetime;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool m_EarlyStop;

		[Token(Token = "0x600068C")]
		[Address(RVA = "0x96E324", Offset = "0x96E324", VA = "0x96E324")]
		[IteratorStateMachine(typeof(<Start>d__4))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0x96E3C0", Offset = "0x96E3C0", VA = "0x96E3C0")]
		public void Stop()
		{
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0x96E3CC", Offset = "0x96E3CC", VA = "0x96E3CC")]
		public ParticleSystemDestroyer()
		{
		}
	}
	[Token(Token = "0x2000145")]
	public class PlatformSpecificContent : MonoBehaviour
	{
		[Token(Token = "0x2000146")]
		private enum BuildTargetGroup
		{
			[Token(Token = "0x4000685")]
			Standalone,
			[Token(Token = "0x4000686")]
			Mobile
		}

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BuildTargetGroup m_BuildTargetGroup;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject[] m_Content;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MonoBehaviour[] m_MonoBehaviours;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool m_ChildrenOfThisObject;

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x96E718", Offset = "0x96E718", VA = "0x96E718")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x96E71C", Offset = "0x96E71C", VA = "0x96E71C")]
		private void CheckEnableContent()
		{
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x96E72C", Offset = "0x96E72C", VA = "0x96E72C")]
		private void EnableContent(bool enabled)
		{
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x96EB18", Offset = "0x96EB18", VA = "0x96EB18")]
		public PlatformSpecificContent()
		{
		}
	}
	[Token(Token = "0x2000147")]
	public class SimpleActivatorMenu : MonoBehaviour
	{
		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] objects;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_CurrentActiveObject;

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x96EBB4", Offset = "0x96EBB4", VA = "0x96EBB4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x96EBBC", Offset = "0x96EBBC", VA = "0x96EBBC")]
		public void NextCamera()
		{
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x96EC44", Offset = "0x96EC44", VA = "0x96EC44")]
		public SimpleActivatorMenu()
		{
		}
	}
	[Token(Token = "0x2000148")]
	public class SimpleMouseRotator : MonoBehaviour
	{
		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 rotationRange;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotationSpeed;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float dampingTime;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool autoZeroVerticalOnMobile;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool autoZeroHorizontalOnMobile;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool relative;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_TargetAngles;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_FollowAngles;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_FollowVelocity;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion m_OriginalRotation;

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x96EC4C", Offset = "0x96EC4C", VA = "0x96EC4C")]
		private void Start()
		{
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x96EC7C", Offset = "0x96EC7C", VA = "0x96EC7C")]
		private void Update()
		{
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x96F018", Offset = "0x96F018", VA = "0x96F018")]
		public SimpleMouseRotator()
		{
		}
	}
	[Token(Token = "0x2000149")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x96F038", Offset = "0x96F038", VA = "0x96F038")]
		private void Start()
		{
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x96F03C", Offset = "0x96F03C", VA = "0x96F03C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x96F370", Offset = "0x96F370", VA = "0x96F370")]
		public SmoothFollow()
		{
		}
	}
	[Token(Token = "0x200014A")]
	public class TimedObjectActivator : MonoBehaviour
	{
		[Token(Token = "0x200014B")]
		public enum Action
		{
			[Token(Token = "0x400069A")]
			Activate,
			[Token(Token = "0x400069B")]
			Deactivate,
			[Token(Token = "0x400069C")]
			Destroy,
			[Token(Token = "0x400069D")]
			ReloadLevel,
			[Token(Token = "0x400069E")]
			Call
		}

		[Serializable]
		[Token(Token = "0x200014C")]
		public class Entry
		{
			[Token(Token = "0x400069F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject target;

			[Token(Token = "0x40006A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action action;

			[Token(Token = "0x40006A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float delay;

			[Token(Token = "0x60006A7")]
			[Address(RVA = "0x96F6EC", Offset = "0x96F6EC", VA = "0x96F6EC")]
			public Entry()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200014D")]
		public class Entries
		{
			[Token(Token = "0x40006A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Entry[] entries;

			[Token(Token = "0x60006A8")]
			[Address(RVA = "0x96F6E4", Offset = "0x96F6E4", VA = "0x96F6E4")]
			public Entries()
			{
			}
		}

		[Token(Token = "0x200014E")]
		[CompilerGenerated]
		private sealed class <Activate>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x1700008D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60006AC")]
				[Address(RVA = "0x96F7C8", Offset = "0x96F7C8", VA = "0x96F7C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006AE")]
				[Address(RVA = "0x96F810", Offset = "0x96F810", VA = "0x96F810", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006A9")]
			[Address(RVA = "0x96F5F8", Offset = "0x96F5F8", VA = "0x96F5F8")]
			[DebuggerHidden]
			public <Activate>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60006AA")]
			[Address(RVA = "0x96F6F4", Offset = "0x96F6F4", VA = "0x96F6F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006AB")]
			[Address(RVA = "0x96F6F8", Offset = "0x96F6F8", VA = "0x96F6F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006AD")]
			[Address(RVA = "0x96F7D0", Offset = "0x96F7D0", VA = "0x96F7D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200014F")]
		[CompilerGenerated]
		private sealed class <Deactivate>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x1700008F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60006B2")]
				[Address(RVA = "0x96F8EC", Offset = "0x96F8EC", VA = "0x96F8EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000090")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006B4")]
				[Address(RVA = "0x96F934", Offset = "0x96F934", VA = "0x96F934", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006AF")]
			[Address(RVA = "0x96F620", Offset = "0x96F620", VA = "0x96F620")]
			[DebuggerHidden]
			public <Deactivate>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60006B0")]
			[Address(RVA = "0x96F818", Offset = "0x96F818", VA = "0x96F818", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006B1")]
			[Address(RVA = "0x96F81C", Offset = "0x96F81C", VA = "0x96F81C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006B3")]
			[Address(RVA = "0x96F8F4", Offset = "0x96F8F4", VA = "0x96F8F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000150")]
		[CompilerGenerated]
		private sealed class <ReloadLevel>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x17000091")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60006B8")]
				[Address(RVA = "0x96FA04", Offset = "0x96FA04", VA = "0x96FA04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000092")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006BA")]
				[Address(RVA = "0x96FA4C", Offset = "0x96FA4C", VA = "0x96FA4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006B5")]
			[Address(RVA = "0x96F648", Offset = "0x96F648", VA = "0x96F648")]
			[DebuggerHidden]
			public <ReloadLevel>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60006B6")]
			[Address(RVA = "0x96F93C", Offset = "0x96F93C", VA = "0x96F93C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006B7")]
			[Address(RVA = "0x96F940", Offset = "0x96F940", VA = "0x96F940", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006B9")]
			[Address(RVA = "0x96FA0C", Offset = "0x96FA0C", VA = "0x96FA0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Entries entries;

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x96F384", Offset = "0x96F384", VA = "0x96F384")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x96F49C", Offset = "0x96F49C", VA = "0x96F49C")]
		[IteratorStateMachine(typeof(<Activate>d__5))]
		private IEnumerator Activate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x96F510", Offset = "0x96F510", VA = "0x96F510")]
		[IteratorStateMachine(typeof(<Deactivate>d__6))]
		private IEnumerator Deactivate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x96F584", Offset = "0x96F584", VA = "0x96F584")]
		[IteratorStateMachine(typeof(<ReloadLevel>d__7))]
		private IEnumerator ReloadLevel(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x96F670", Offset = "0x96F670", VA = "0x96F670")]
		public TimedObjectActivator()
		{
		}
	}
	[Token(Token = "0x2000151")]
	public class TimedObjectDestructor : MonoBehaviour
	{
		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_TimeOut;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool m_DetachChildren;

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x96FA54", Offset = "0x96FA54", VA = "0x96FA54")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x96FAA4", Offset = "0x96FAA4", VA = "0x96FAA4")]
		private void DestroyNow()
		{
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x96FB34", Offset = "0x96FB34", VA = "0x96FB34")]
		public TimedObjectDestructor()
		{
		}
	}
	[Token(Token = "0x2000152")]
	public class WaypointCircuit : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000153")]
		public class WaypointList
		{
			[Token(Token = "0x40006BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public WaypointCircuit circuit;

			[Token(Token = "0x40006BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform[] items;

			[Token(Token = "0x60006CA")]
			[Address(RVA = "0x970654", Offset = "0x970654", VA = "0x970654")]
			public WaypointList()
			{
			}
		}

		[Token(Token = "0x2000154")]
		public struct RoutePoint
		{
			[Token(Token = "0x40006C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x40006C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 direction;

			[Token(Token = "0x60006CB")]
			[Address(RVA = "0x970230", Offset = "0x970230", VA = "0x970230")]
			public RoutePoint(Vector3 position, Vector3 direction)
			{
			}
		}

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaypointList waypointList;

		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool smoothRoute;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int numPoints;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] points;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] distances;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float editorVisualisationSubsteps;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int p0n;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int p1n;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int p2n;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int p3n;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float i;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 P0;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 P1;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 P2;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 P3;

		[Token(Token = "0x17000093")]
		public float Length
		{
			[Token(Token = "0x60006BE")]
			[Address(RVA = "0x96FB44", Offset = "0x96FB44", VA = "0x96FB44")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006BF")]
			[Address(RVA = "0x96FB4C", Offset = "0x96FB4C", VA = "0x96FB4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public Transform[] Waypoints
		{
			[Token(Token = "0x60006C0")]
			[Address(RVA = "0x96FB54", Offset = "0x96FB54", VA = "0x96FB54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x96FB70", Offset = "0x96FB70", VA = "0x96FB70")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x96FEA0", Offset = "0x96FEA0", VA = "0x96FEA0")]
		public RoutePoint GetRoutePoint(float dist)
		{
			return default(RoutePoint);
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x96FFD0", Offset = "0x96FFD0", VA = "0x96FFD0")]
		public Vector3 GetRoutePosition(float dist)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x970240", Offset = "0x970240", VA = "0x970240")]
		private Vector3 CatmullRom(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float i)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x96FBC0", Offset = "0x96FBC0", VA = "0x96FBC0")]
		private void CachePositionsAndDistances()
		{
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x97034C", Offset = "0x97034C", VA = "0x97034C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x9705CC", Offset = "0x9705CC", VA = "0x9705CC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x970354", Offset = "0x970354", VA = "0x970354")]
		private void DrawGizmos(bool selected)
		{
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x9705D4", Offset = "0x9705D4", VA = "0x9705D4")]
		public WaypointCircuit()
		{
		}
	}
	[Token(Token = "0x2000155")]
	public class WaypointProgressTracker : MonoBehaviour
	{
		[Token(Token = "0x2000156")]
		public enum ProgressStyle
		{
			[Token(Token = "0x40006D2")]
			SmoothAlongRoute,
			[Token(Token = "0x40006D3")]
			PointToPoint
		}

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private WaypointCircuit circuit;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float lookAheadForTargetOffset;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float lookAheadForTargetFactor;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float lookAheadForSpeedOffset;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float lookAheadForSpeedFactor;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ProgressStyle progressStyle;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float pointToPointThreshold;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform target;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float progressDistance;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int progressNum;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 lastPosition;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float speed;

		[Token(Token = "0x17000095")]
		public WaypointCircuit.RoutePoint targetPoint
		{
			[Token(Token = "0x60006CC")]
			[Address(RVA = "0x9706B8", Offset = "0x9706B8", VA = "0x9706B8")]
			[CompilerGenerated]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x60006CD")]
			[Address(RVA = "0x9706CC", Offset = "0x9706CC", VA = "0x9706CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000096")]
		public WaypointCircuit.RoutePoint speedPoint
		{
			[Token(Token = "0x60006CE")]
			[Address(RVA = "0x9706E0", Offset = "0x9706E0", VA = "0x9706E0")]
			[CompilerGenerated]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x60006CF")]
			[Address(RVA = "0x9706F4", Offset = "0x9706F4", VA = "0x9706F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000097")]
		public WaypointCircuit.RoutePoint progressPoint
		{
			[Token(Token = "0x60006D0")]
			[Address(RVA = "0x970708", Offset = "0x970708", VA = "0x970708")]
			[CompilerGenerated]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x60006D1")]
			[Address(RVA = "0x97071C", Offset = "0x97071C", VA = "0x97071C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x970730", Offset = "0x970730", VA = "0x970730")]
		private void Start()
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x97082C", Offset = "0x97082C", VA = "0x97082C")]
		public void Reset()
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x9708F8", Offset = "0x9708F8", VA = "0x9708F8")]
		private void Update()
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x970DD0", Offset = "0x970DD0", VA = "0x970DD0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x970F2C", Offset = "0x970F2C", VA = "0x970F2C")]
		public WaypointProgressTracker()
		{
		}
	}
}
namespace UnityStandardAssets.Characters.FirstPerson
{
	[Token(Token = "0x2000157")]
	[RequireComponent(typeof(AudioSource))]
	[RequireComponent(typeof(CharacterController))]
	public class FirstPersonController : MonoBehaviour
	{
		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_IsWalking;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_WalkSpeed;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_RunSpeed;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Range(0f, 1f)]
		private float m_RunstepLenghten;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_JumpSpeed;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_StickToGroundForce;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_GravityMultiplier;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MouseLook m_MouseLook;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool m_UseFovKick;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private FOVKick m_FovKick;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool m_UseHeadBob;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private CurveControlledBob m_HeadBob;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private LerpControlledBob m_JumpBob;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float m_StepInterval;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AudioClip[] m_FootstepSounds;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private AudioClip m_JumpSound;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private AudioClip m_LandSound;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Camera m_Camera;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool m_Jump;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_YRotation;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector2 m_Input;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 m_MoveDir;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private CharacterController m_CharacterController;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private CollisionFlags m_CollisionFlags;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float m_StepCycle;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float m_NextStep;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private bool m_Jumping;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioSource m_AudioSource;

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x970F48", Offset = "0x970F48", VA = "0x970F48")]
		private void Start()
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x9710D4", Offset = "0x9710D4", VA = "0x9710D4")]
		private void Update()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x97123C", Offset = "0x97123C", VA = "0x97123C")]
		private void PlayLandingSound()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x971284", Offset = "0x971284", VA = "0x971284")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x971888", Offset = "0x971888", VA = "0x971888")]
		private void PlayJumpSound()
		{
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x9718BC", Offset = "0x9718BC", VA = "0x9718BC")]
		private void ProgressStepCycle(float speed)
		{
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x971C50", Offset = "0x971C50", VA = "0x971C50")]
		private void PlayFootStepAudio()
		{
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x971A0C", Offset = "0x971A0C", VA = "0x971A0C")]
		private void UpdateCameraPosition(float speed)
		{
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x971650", Offset = "0x971650", VA = "0x971650")]
		private void GetInput(out float speed)
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x9711EC", Offset = "0x9711EC", VA = "0x9711EC")]
		private void RotateView()
		{
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x9720E8", Offset = "0x9720E8", VA = "0x9720E8")]
		private void OnControllerColliderHit(ControllerColliderHit hit)
		{
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x97220C", Offset = "0x97220C", VA = "0x97220C")]
		public FirstPersonController()
		{
		}
	}
	[Token(Token = "0x2000158")]
	public class HeadBob : MonoBehaviour
	{
		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera Camera;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurveControlledBob motionBob;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LerpControlledBob jumpAndLandingBob;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RigidbodyFirstPersonController rigidbodyFirstPersonController;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float StrideInterval;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float RunningStrideLengthen;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x972338", Offset = "0x972338", VA = "0x972338")]
		private void Start()
		{
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x972388", Offset = "0x972388", VA = "0x972388")]
		private void Update()
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x972640", Offset = "0x972640", VA = "0x972640")]
		public HeadBob()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000159")]
	public class MouseLook
	{
		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float XSensitivity;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float YSensitivity;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool clampVerticalRotation;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinimumX;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaximumX;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool smooth;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float smoothTime;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion m_CharacterTargetRot;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion m_CameraTargetRot;

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x971084", Offset = "0x971084", VA = "0x971084")]
		public void Init(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x971DA8", Offset = "0x971DA8", VA = "0x971DA8")]
		public void LookRotation(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x9726F0", Offset = "0x9726F0", VA = "0x9726F0")]
		private Quaternion ClampRotationAroundXAxis(Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x972754", Offset = "0x972754", VA = "0x972754")]
		public MouseLook()
		{
		}
	}
	[Token(Token = "0x200015A")]
	[RequireComponent(typeof(CapsuleCollider))]
	[RequireComponent(typeof(Rigidbody))]
	public class RigidbodyFirstPersonController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200015B")]
		public class MovementSettings
		{
			[Token(Token = "0x400070F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float ForwardSpeed;

			[Token(Token = "0x4000710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float BackwardSpeed;

			[Token(Token = "0x4000711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float StrafeSpeed;

			[Token(Token = "0x4000712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float RunMultiplier;

			[Token(Token = "0x4000713")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KeyCode RunKey;

			[Token(Token = "0x4000714")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float JumpForce;

			[Token(Token = "0x4000715")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationCurve SlopeCurveModifier;

			[Token(Token = "0x4000716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[HideInInspector]
			public float CurrentTargetSpeed;

			[Token(Token = "0x4000717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private bool m_Running;

			[Token(Token = "0x1700009C")]
			public bool Running
			{
				[Token(Token = "0x60006F8")]
				[Address(RVA = "0x973990", Offset = "0x973990", VA = "0x973990")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60006F7")]
			[Address(RVA = "0x9735B0", Offset = "0x9735B0", VA = "0x9735B0")]
			public void UpdateDesiredTargetSpeed(Vector2 input)
			{
			}

			[Token(Token = "0x60006F9")]
			[Address(RVA = "0x9737B8", Offset = "0x9737B8", VA = "0x9737B8")]
			public MovementSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200015C")]
		public class AdvancedSettings
		{
			[Token(Token = "0x4000718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float groundCheckDistance;

			[Token(Token = "0x4000719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float stickToGroundHelperDistance;

			[Token(Token = "0x400071A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float slowDownRate;

			[Token(Token = "0x400071B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool airControl;

			[Token(Token = "0x60006FA")]
			[Address(RVA = "0x973974", Offset = "0x973974", VA = "0x973974")]
			public AdvancedSettings()
			{
			}
		}

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera cam;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MovementSettings movementSettings;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MouseLook mouseLook;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AdvancedSettings advancedSettings;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody m_RigidBody;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CapsuleCollider m_Capsule;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_YRotation;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_GroundContactNormal;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_Jump;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool m_Jumping;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		private bool m_IsGrounded;

		[Token(Token = "0x17000098")]
		public Vector3 Velocity
		{
			[Token(Token = "0x60006EA")]
			[Address(RVA = "0x972608", Offset = "0x972608", VA = "0x972608")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000099")]
		public bool Grounded
		{
			[Token(Token = "0x60006EB")]
			[Address(RVA = "0x972780", Offset = "0x972780", VA = "0x972780")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009A")]
		public bool Jumping
		{
			[Token(Token = "0x60006EC")]
			[Address(RVA = "0x972788", Offset = "0x972788", VA = "0x972788")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009B")]
		public bool Running
		{
			[Token(Token = "0x60006ED")]
			[Address(RVA = "0x972624", Offset = "0x972624", VA = "0x972624")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x972790", Offset = "0x972790", VA = "0x972790")]
		private void Start()
		{
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x972860", Offset = "0x972860", VA = "0x972860")]
		private void Update()
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x972A68", Offset = "0x972A68", VA = "0x972A68")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x973124", Offset = "0x973124", VA = "0x973124")]
		private float SlopeMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x973284", Offset = "0x973284", VA = "0x973284")]
		private void StickToGroundHelper()
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x973064", Offset = "0x973064", VA = "0x973064")]
		private Vector2 GetInput()
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x9728EC", Offset = "0x9728EC", VA = "0x9728EC")]
		private void RotateView()
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x972EB8", Offset = "0x972EB8", VA = "0x972EB8")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x973698", Offset = "0x973698", VA = "0x973698")]
		public RigidbodyFirstPersonController()
		{
		}
	}
}
namespace I2.Loc
{
	[Token(Token = "0x200015D")]
	public class CallbackNotification : MonoBehaviour
	{
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x973998", Offset = "0x973998", VA = "0x973998")]
		public void OnModifyLocalization()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x973AB8", Offset = "0x973AB8", VA = "0x973AB8")]
		public CallbackNotification()
		{
		}
	}
	[Token(Token = "0x200015E")]
	public class Example_ChangeLanguage : MonoBehaviour
	{
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x973AC0", Offset = "0x973AC0", VA = "0x973AC0")]
		public void SetLanguage_English()
		{
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x973B90", Offset = "0x973B90", VA = "0x973B90")]
		public void SetLanguage_French()
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x973BD0", Offset = "0x973BD0", VA = "0x973BD0")]
		public void SetLanguage_Spanish()
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x973B00", Offset = "0x973B00", VA = "0x973B00")]
		public void SetLanguage(string LangName)
		{
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x973C10", Offset = "0x973C10", VA = "0x973C10")]
		public Example_ChangeLanguage()
		{
		}
	}
	[Token(Token = "0x200015F")]
	public class Example_LocalizedString : MonoBehaviour
	{
		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedString _MyLocalizedString;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string _NormalString;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[TermsPopup("")]
		public string _StringWithTermPopup;

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x973C18", Offset = "0x973C18", VA = "0x973C18")]
		public void Start()
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x973F48", Offset = "0x973F48", VA = "0x973F48")]
		public Example_LocalizedString()
		{
		}
	}
	[Token(Token = "0x2000160")]
	public class GlobalParametersExample : RegisterGlobalParameters
	{
		[Token(Token = "0x6000704")]
		[Address(RVA = "0x973F50", Offset = "0x973F50", VA = "0x973F50", Slot = "7")]
		public override string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x974010", Offset = "0x974010", VA = "0x974010")]
		public GlobalParametersExample()
		{
		}
	}
	[Token(Token = "0x2000161")]
	public class RealTimeTranslation : MonoBehaviour
	{
		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string OriginalText;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string TranslatedText;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool IsTranslating;

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x974018", Offset = "0x974018", VA = "0x974018")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x974558", Offset = "0x974558", VA = "0x974558")]
		public void StartTranslating(string fromCode, string toCode)
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x974800", Offset = "0x974800", VA = "0x974800")]
		private void OnTranslationReady(string Translation, string errorMsg)
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x97488C", Offset = "0x97488C", VA = "0x97488C")]
		public void ExampleMultiTranslations_Blocking()
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x97462C", Offset = "0x97462C", VA = "0x97462C")]
		public void ExampleMultiTranslations_Async()
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x974B00", Offset = "0x974B00", VA = "0x974B00")]
		private void OnMultitranslationReady(Dictionary<string, TranslationQuery> dict, string errorMsg)
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x974D78", Offset = "0x974D78", VA = "0x974D78")]
		public bool IsWaitingForTranslation()
		{
			return default(bool);
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x974D80", Offset = "0x974D80", VA = "0x974D80")]
		public string GetTranslatedText()
		{
			return null;
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x974D88", Offset = "0x974D88", VA = "0x974D88")]
		public void SetOriginalText(string text)
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x974D90", Offset = "0x974D90", VA = "0x974D90")]
		public RealTimeTranslation()
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class RegisterBundlesManager : MonoBehaviour, IResourceManager_Bundles
	{
		[Token(Token = "0x6000710")]
		[Address(RVA = "0x974E1C", Offset = "0x974E1C", VA = "0x974E1C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x974F18", Offset = "0x974F18", VA = "0x974F18")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x974F78", Offset = "0x974F78", VA = "0x974F78", Slot = "5")]
		public virtual UnityEngine.Object LoadFromBundle(string path, Type assetType)
		{
			return null;
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x974F80", Offset = "0x974F80", VA = "0x974F80")]
		public RegisterBundlesManager()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class ToggleLanguage : MonoBehaviour
	{
		[Token(Token = "0x6000714")]
		[Address(RVA = "0x974F88", Offset = "0x974F88", VA = "0x974F88")]
		private void Start()
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x974FD8", Offset = "0x974FD8", VA = "0x974FD8")]
		private void test()
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x97509C", Offset = "0x97509C", VA = "0x97509C")]
		public ToggleLanguage()
		{
		}
	}
	[Token(Token = "0x2000164")]
	public static class PersistentStorage
	{
		[Token(Token = "0x2000165")]
		public enum eFileType
		{
			[Token(Token = "0x4000724")]
			Raw,
			[Token(Token = "0x4000725")]
			Persistent,
			[Token(Token = "0x4000726")]
			Temporal,
			[Token(Token = "0x4000727")]
			Streaming
		}

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static I2CustomPersistentStorage mStorage;

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x9750A4", Offset = "0x9750A4", VA = "0x9750A4")]
		public static void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x975174", Offset = "0x975174", VA = "0x975174")]
		public static string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x97523C", Offset = "0x97523C", VA = "0x97523C")]
		public static void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x9752F4", Offset = "0x9752F4", VA = "0x9752F4")]
		public static bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x9753AC", Offset = "0x9753AC", VA = "0x9753AC")]
		public static void ForceSaveSettings()
		{
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x97545C", Offset = "0x97545C", VA = "0x97545C")]
		public static bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x97550C", Offset = "0x97550C", VA = "0x97550C")]
		public static bool SaveFile(eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x9755EC", Offset = "0x9755EC", VA = "0x9755EC")]
		public static string LoadFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x9756BC", Offset = "0x9756BC", VA = "0x9756BC")]
		public static bool DeleteFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x97578C", Offset = "0x97578C", VA = "0x97578C")]
		public static bool HasFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000166")]
	public abstract class I2BasePersistentStorage
	{
		[Token(Token = "0x6000721")]
		[Address(RVA = "0x975860", Offset = "0x975860", VA = "0x975860", Slot = "4")]
		public virtual void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0x975AFC", Offset = "0x975AFC", VA = "0x975AFC", Slot = "5")]
		public virtual string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x975D78", Offset = "0x975D78", VA = "0x975D78", Slot = "6")]
		public virtual void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0x975FB8", Offset = "0x975FB8", VA = "0x975FB8", Slot = "7")]
		public virtual void ForceSaveSettings()
		{
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x975FC0", Offset = "0x975FC0", VA = "0x975FC0", Slot = "8")]
		public virtual bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x975FCC", Offset = "0x975FCC", VA = "0x975FCC", Slot = "9")]
		public virtual bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x975FD4", Offset = "0x975FD4", VA = "0x975FD4")]
		private string UpdateFilename(PersistentStorage.eFileType fileType, string fileName)
		{
			return null;
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x97606C", Offset = "0x97606C", VA = "0x97606C", Slot = "10")]
		public virtual bool SaveFile(PersistentStorage.eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x976200", Offset = "0x976200", VA = "0x976200", Slot = "11")]
		public virtual string LoadFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x976388", Offset = "0x976388", VA = "0x976388", Slot = "12")]
		public virtual bool DeleteFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x976504", Offset = "0x976504", VA = "0x976504", Slot = "13")]
		public virtual bool HasFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x976680", Offset = "0x976680", VA = "0x976680")]
		protected I2BasePersistentStorage()
		{
		}
	}
	[Token(Token = "0x2000167")]
	public class I2CustomPersistentStorage : I2BasePersistentStorage
	{
		[Token(Token = "0x600072D")]
		[Address(RVA = "0x97516C", Offset = "0x97516C", VA = "0x97516C")]
		public I2CustomPersistentStorage()
		{
		}
	}
	[Token(Token = "0x2000168")]
	public class BaseSpecializationManager
	{
		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] mSpecializations;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, string> mSpecializationsFallbacks;

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x976688", Offset = "0x976688", VA = "0x976688", Slot = "4")]
		public virtual void InitializeSpecializations()
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x976CD4", Offset = "0x976CD4", VA = "0x976CD4", Slot = "5")]
		public virtual string GetCurrentSpecialization()
		{
			return null;
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x976D30", Offset = "0x976D30", VA = "0x976D30", Slot = "6")]
		public virtual string GetFallbackSpecialization(string specialization)
		{
			return null;
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x976DD8", Offset = "0x976DD8", VA = "0x976DD8")]
		public BaseSpecializationManager()
		{
		}
	}
	[Token(Token = "0x2000169")]
	public class SpecializationManager : BaseSpecializationManager
	{
		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SpecializationManager Singleton;

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x976DE0", Offset = "0x976DE0", VA = "0x976DE0")]
		private SpecializationManager()
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x976E04", Offset = "0x976E04", VA = "0x976E04")]
		public static string GetSpecializedText(string text, [Optional] string specialization)
		{
			return null;
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x976FFC", Offset = "0x976FFC", VA = "0x976FFC")]
		public static string SetSpecializedText(string text, string newText, string specialization)
		{
			return null;
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x977388", Offset = "0x977388", VA = "0x977388")]
		public static string SetSpecializedText(Dictionary<string, string> specializations)
		{
			return null;
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x97711C", Offset = "0x97711C", VA = "0x97711C")]
		public static Dictionary<string, string> GetSpecializations(string text, [Optional] Dictionary<string, string> buffer)
		{
			return null;
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x9777A0", Offset = "0x9777A0", VA = "0x9777A0")]
		public static void AppendSpecializations(string text, [Optional] List<string> list)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200016A")]
	public class EventCallback
	{
		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MonoBehaviour Target;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string MethodName;

		[Token(Token = "0x6000739")]
		[Address(RVA = "0x977A58", Offset = "0x977A58", VA = "0x977A58")]
		public void Execute([Optional] UnityEngine.Object Sender)
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0x977ABC", Offset = "0x977ABC", VA = "0x977ABC")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0x977B40", Offset = "0x977B40", VA = "0x977B40")]
		public EventCallback()
		{
		}
	}
	[Token(Token = "0x200016B")]
	public enum ePluralType
	{
		[Token(Token = "0x400072E")]
		Zero,
		[Token(Token = "0x400072F")]
		One,
		[Token(Token = "0x4000730")]
		Two,
		[Token(Token = "0x4000731")]
		Few,
		[Token(Token = "0x4000732")]
		Many,
		[Token(Token = "0x4000733")]
		Plural
	}
	[Token(Token = "0x200016C")]
	public static class GoogleLanguages
	{
		[Token(Token = "0x200016D")]
		public struct LanguageCodeDef
		{
			[Token(Token = "0x4000735")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Code;

			[Token(Token = "0x4000736")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string GoogleCode;

			[Token(Token = "0x4000737")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool HasJoinedWords;

			[Token(Token = "0x4000738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int PluralRule;
		}

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, LanguageCodeDef> mLanguageDef;

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x977BA0", Offset = "0x977BA0", VA = "0x977BA0")]
		public static string GetLanguageCode(string Filter, bool ShowWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0x977FB8", Offset = "0x977FB8", VA = "0x977FB8")]
		public static List<string> GetLanguagesForDropdown(string Filter, string CodesToExclude)
		{
			return null;
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x977E6C", Offset = "0x977E6C", VA = "0x977E6C")]
		private static bool LanguageMatchesFilter(string Language, string[] Filters)
		{
			return default(bool);
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x978548", Offset = "0x978548", VA = "0x978548")]
		public static string GetFormatedLanguageName(string Language)
		{
			return null;
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x978694", Offset = "0x978694", VA = "0x978694")]
		public static string GetCodedLanguage(string Language, string code)
		{
			return null;
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0x978764", Offset = "0x978764", VA = "0x978764")]
		public static void UnPackCodeFromLanguageName(string CodedLanguage, out string Language, out string code)
		{
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x9788F0", Offset = "0x9788F0", VA = "0x9788F0")]
		public static string GetGoogleLanguageCode(string InternationalCode)
		{
			return null;
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x978AEC", Offset = "0x978AEC", VA = "0x978AEC")]
		public static string GetLanguageName(string code, bool useParenthesesForRegion = false, bool allowDiscardRegion = true)
		{
			return null;
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x978DEC", Offset = "0x978DEC", VA = "0x978DEC")]
		public static List<string> GetAllInternationalCodes()
		{
			return null;
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x97907C", Offset = "0x97907C", VA = "0x97907C")]
		public static bool LanguageCode_HasJoinedWord(string languageCode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x97923C", Offset = "0x97923C", VA = "0x97923C")]
		private static int GetPluralRule(string langCode)
		{
			return default(int);
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x97941C", Offset = "0x97941C", VA = "0x97941C")]
		public static bool LanguageHasPluralType(string langCode, string pluralType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x9795CC", Offset = "0x9795CC", VA = "0x9795CC")]
		public static ePluralType GetPluralType(string langCode, int n)
		{
			return default(ePluralType);
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x979C6C", Offset = "0x979C6C", VA = "0x979C6C")]
		public static int GetPluralTestNumber(string langCode, ePluralType pluralType)
		{
			return default(int);
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x979C54", Offset = "0x979C54", VA = "0x979C54")]
		private static bool inRange(int amount, int min, int max)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200016E")]
	public static class GoogleTranslation
	{
		[Token(Token = "0x200016F")]
		public delegate void fnOnTranslated(string Translation, string Error);

		[Token(Token = "0x2000170")]
		public delegate void fnOnTranslationReady(Dictionary<string, TranslationQuery> dict, string error);

		[Token(Token = "0x2000172")]
		[CompilerGenerated]
		private sealed class <WaitForTranslations>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400073F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700009D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000775")]
				[Address(RVA = "0x984B40", Offset = "0x984B40", VA = "0x984B40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700009E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000777")]
				[Address(RVA = "0x984B88", Offset = "0x984B88", VA = "0x984B88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000772")]
			[Address(RVA = "0x98280C", Offset = "0x98280C", VA = "0x98280C")]
			[DebuggerHidden]
			public <WaitForTranslations>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000773")]
			[Address(RVA = "0x9849AC", Offset = "0x9849AC", VA = "0x9849AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000774")]
			[Address(RVA = "0x9849B0", Offset = "0x9849B0", VA = "0x9849B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000776")]
			[Address(RVA = "0x984B48", Offset = "0x984B48", VA = "0x984B48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityWebRequest> mCurrentTranslations;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<TranslationJob> mTranslationJobs;

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x980F60", Offset = "0x980F60", VA = "0x980F60")]
		public static bool CanTranslate()
		{
			return default(bool);
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x981198", Offset = "0x981198", VA = "0x981198")]
		public static void Translate(string text, string LanguageCodeFrom, string LanguageCodeTo, fnOnTranslated OnTranslationReady)
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x981954", Offset = "0x981954", VA = "0x981954")]
		public static string ForceTranslate(string text, string LanguageCodeFrom, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x9818C0", Offset = "0x9818C0", VA = "0x9818C0")]
		public static void Translate(Dictionary<string, TranslationQuery> requests, fnOnTranslationReady OnTranslationReady, bool usePOST = true)
		{
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x982104", Offset = "0x982104", VA = "0x982104")]
		public static bool ForceTranslate(Dictionary<string, TranslationQuery> requests, bool usePOST = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0x982180", Offset = "0x982180", VA = "0x982180")]
		public static List<string> ConvertTranslationRequest(Dictionary<string, TranslationQuery> requests, bool encodeGET)
		{
			return null;
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x981FE4", Offset = "0x981FE4", VA = "0x981FE4")]
		private static void AddTranslationJob(TranslationJob job)
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x9827AC", Offset = "0x9827AC", VA = "0x9827AC")]
		[IteratorStateMachine(typeof(<WaitForTranslations>d__11))]
		private static IEnumerator WaitForTranslations()
		{
			return null;
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x982834", Offset = "0x982834", VA = "0x982834")]
		public static string ParseTranslationResult(string html, Dictionary<string, TranslationQuery> requests)
		{
			return null;
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x982FA0", Offset = "0x982FA0", VA = "0x982FA0")]
		public static bool IsTranslating()
		{
			return default(bool);
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x983054", Offset = "0x983054", VA = "0x983054")]
		public static void CancelCurrentGoogleTranslations()
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x981570", Offset = "0x981570", VA = "0x981570")]
		public static void CreateQueries(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x98325C", Offset = "0x98325C", VA = "0x98325C")]
		private static void CreateQueries_Plurals(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x981B0C", Offset = "0x981B0C", VA = "0x981B0C")]
		public static void AddQuery(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x983D28", Offset = "0x983D28", VA = "0x983D28")]
		private static string GetTranslation(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x982D20", Offset = "0x982D20", VA = "0x982D20")]
		private static TranslationQuery FindQueryFromOrigText(string origText, Dictionary<string, TranslationQuery> dict)
		{
			return default(TranslationQuery);
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x9834AC", Offset = "0x9834AC", VA = "0x9834AC")]
		public static bool HasParameters(string text)
		{
			return default(bool);
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x983680", Offset = "0x983680", VA = "0x983680")]
		public static string GetPluralParameter(string text, bool forceTag)
		{
			return null;
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x983548", Offset = "0x983548", VA = "0x983548")]
		public static string GetPluralText(string text, string pluralType)
		{
			return null;
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x983E28", Offset = "0x983E28", VA = "0x983E28")]
		private static int FindClosingTag(string tag, MatchCollection matches, int startIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x982EF0", Offset = "0x982EF0", VA = "0x982EF0")]
		private static string GetGoogleNoTranslateTag(int tagNumber)
		{
			return null;
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x983770", Offset = "0x983770", VA = "0x983770")]
		private static void ParseNonTranslatableElements(ref TranslationQuery query)
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x981ECC", Offset = "0x981ECC", VA = "0x981ECC")]
		public static string GetQueryResult(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x983EF0", Offset = "0x983EF0", VA = "0x983EF0")]
		public static string RebuildTranslation(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x984208", Offset = "0x984208", VA = "0x984208")]
		private static string RebuildTranslation_Plural(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x984570", Offset = "0x984570", VA = "0x984570")]
		public static string UppercaseFirst(string s)
		{
			return null;
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x9826F8", Offset = "0x9826F8", VA = "0x9826F8")]
		public static string TitleCase(string s)
		{
			return null;
		}
	}
	[Token(Token = "0x2000173")]
	public struct TranslationQuery
	{
		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string OrigText;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Text;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string LanguageCode;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] TargetLanguagesCode;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] Results;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Tags;
	}
	[Token(Token = "0x2000174")]
	public class TranslationJob : IDisposable
	{
		[Token(Token = "0x2000175")]
		public enum eJobState
		{
			[Token(Token = "0x4000749")]
			Running,
			[Token(Token = "0x400074A")]
			Succeeded,
			[Token(Token = "0x400074B")]
			Failed
		}

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public eJobState mJobState;

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x984B90", Offset = "0x984B90", VA = "0x984B90", Slot = "5")]
		public virtual eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x984B98", Offset = "0x984B98", VA = "0x984B98", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x984B9C", Offset = "0x984B9C", VA = "0x984B9C")]
		public TranslationJob()
		{
		}
	}
	[Token(Token = "0x2000176")]
	public class TranslationJob_WWW : TranslationJob
	{
		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityWebRequest www;

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x984BA4", Offset = "0x984BA4", VA = "0x984BA4", Slot = "6")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x984BD0", Offset = "0x984BD0", VA = "0x984BD0")]
		public TranslationJob_WWW()
		{
		}
	}
	[Token(Token = "0x2000177")]
	public class TranslationJob_GET : TranslationJob_WWW
	{
		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<string> mQueries;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string mErrorMessage;

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x984BD8", Offset = "0x984BD8", VA = "0x984BD8")]
		public TranslationJob_GET(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x984C8C", Offset = "0x984C8C", VA = "0x984C8C")]
		private void ExecuteNextQuery()
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x984DBC", Offset = "0x984DBC", VA = "0x984DBC", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x984E68", Offset = "0x984E68", VA = "0x984E68")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x2000178")]
	public class TranslationJob_Main : TranslationJob
	{
		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TranslationJob_WEB mWeb;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TranslationJob_POST mPost;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TranslationJob_GET mGet;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mErrorMessage;

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x981E24", Offset = "0x981E24", VA = "0x981E24")]
		public TranslationJob_Main(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x98512C", Offset = "0x98512C", VA = "0x98512C", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x985340", Offset = "0x985340", VA = "0x985340", Slot = "6")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x2000179")]
	public class TranslationJob_POST : TranslationJob_WWW
	{
		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x984F80", Offset = "0x984F80", VA = "0x984F80")]
		public TranslationJob_POST(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x9853A0", Offset = "0x9853A0", VA = "0x9853A0", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x98543C", Offset = "0x98543C", VA = "0x98543C")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x200017A")]
	public class TranslationJob_WEB : TranslationJob_WWW
	{
		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string mErrorMessage;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string mCurrentBatch_ToLanguageCode;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mCurrentBatch_FromLanguageCode;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<string> mCurrentBatch_Text;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<KeyValuePair<string, string>> mQueries;

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x985524", Offset = "0x985524", VA = "0x985524")]
		public TranslationJob_WEB(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x985578", Offset = "0x985578", VA = "0x985578")]
		private void FindAllQueries()
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x98595C", Offset = "0x98595C", VA = "0x98595C")]
		private void ExecuteNextBatch()
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x985D30", Offset = "0x985D30", VA = "0x985D30", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x985DDC", Offset = "0x985DDC", VA = "0x985DDC")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x985F10", Offset = "0x985F10", VA = "0x985F10")]
		private string ParseTranslationResult(string html, string OriginalText)
		{
			return null;
		}
	}
	[Token(Token = "0x200017C")]
	public enum eLanguageDataFlags
	{
		[Token(Token = "0x4000765")]
		DISABLED = 1,
		[Token(Token = "0x4000766")]
		KEEP_LOADED = 2,
		[Token(Token = "0x4000767")]
		NOT_LOADED = 4
	}
	[Serializable]
	[Token(Token = "0x200017D")]
	public class LanguageData
	{
		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Code;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte Flags;

		[NonSerialized]
		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Compressed;

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x986604", Offset = "0x986604", VA = "0x986604")]
		public bool IsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x986614", Offset = "0x986614", VA = "0x986614")]
		public void SetEnabled(bool bEnabled)
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x986630", Offset = "0x986630", VA = "0x986630")]
		public bool IsLoaded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x986640", Offset = "0x986640", VA = "0x986640")]
		public bool CanBeUnloaded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x986650", Offset = "0x986650", VA = "0x986650")]
		public void SetLoaded(bool loaded)
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x98666C", Offset = "0x98666C", VA = "0x98666C")]
		public void SetCanBeUnLoaded(bool allowUnloading)
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x986688", Offset = "0x986688", VA = "0x986688")]
		public LanguageData()
		{
		}
	}
	[Token(Token = "0x200017E")]
	[AddComponentMenu("I2/Localization/Source")]
	[ExecuteInEditMode]
	public class LanguageSource : MonoBehaviour, ISerializationCallbackReceiver, ILanguageSource
	{
		[Token(Token = "0x200017F")]
		public delegate void fnOnSourceUpdated(LanguageSourceData source, bool ReceivedNewData, string errorMsg);

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSourceData mSource;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int version;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool NeverDestroy;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool GoogleLiveSyncIsUptoDate;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<UnityEngine.Object> Assets;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Google_WebServiceURL;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LanguageSourceData.eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public LanguageSourceData.eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<TermData> mTerms;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool CaseInsensitiveTerms;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public LanguageSourceData.MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string mTerm_AppName;

		[Token(Token = "0x1700009F")]
		public LanguageSourceData SourceData
		{
			[Token(Token = "0x6000799")]
			[Address(RVA = "0x986690", Offset = "0x986690", VA = "0x986690", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x600079A")]
			[Address(RVA = "0x986698", Offset = "0x986698", VA = "0x986698", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event fnOnSourceUpdated Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x600079B")]
			[Address(RVA = "0x9866A0", Offset = "0x9866A0", VA = "0x9866A0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600079C")]
			[Address(RVA = "0x98673C", Offset = "0x98673C", VA = "0x98673C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x9867D8", Offset = "0x9867D8", VA = "0x9867D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x986878", Offset = "0x986878", VA = "0x986878")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x9868EC", Offset = "0x9868EC", VA = "0x9868EC")]
		public string GetSourceName()
		{
			return null;
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x9869DC", Offset = "0x9869DC", VA = "0x9869DC", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x9869E8", Offset = "0x9869E8", VA = "0x9869E8", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x98716C", Offset = "0x98716C", VA = "0x98716C")]
		public LanguageSource()
		{
		}
	}
	[Token(Token = "0x2000180")]
	[CreateAssetMenu(fileName = "I2Languages", menuName = "I2 Localization/LanguageSource", order = 1)]
	public class LanguageSourceAsset : ScriptableObject, ILanguageSource
	{
		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSourceData mSource;

		[Token(Token = "0x170000A0")]
		public LanguageSourceData SourceData
		{
			[Token(Token = "0x60007A7")]
			[Address(RVA = "0x9874F8", Offset = "0x9874F8", VA = "0x9874F8", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007A8")]
			[Address(RVA = "0x987500", Offset = "0x987500", VA = "0x987500", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x987508", Offset = "0x987508", VA = "0x987508")]
		public LanguageSourceAsset()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public interface ILanguageSource
	{
		[Token(Token = "0x170000A1")]
		LanguageSourceData SourceData
		{
			[Token(Token = "0x60007AA")]
			get;
			[Token(Token = "0x60007AB")]
			set;
		}
	}
	[Serializable]
	[Token(Token = "0x2000182")]
	[ExecuteInEditMode]
	public class LanguageSourceData
	{
		[Token(Token = "0x2000183")]
		public enum MissingTranslationAction
		{
			[Token(Token = "0x400079E")]
			Empty,
			[Token(Token = "0x400079F")]
			Fallback,
			[Token(Token = "0x40007A0")]
			ShowWarning,
			[Token(Token = "0x40007A1")]
			ShowTerm
		}

		[Token(Token = "0x2000184")]
		public enum eAllowUnloadLanguages
		{
			[Token(Token = "0x40007A3")]
			Never,
			[Token(Token = "0x40007A4")]
			OnlyInDevice,
			[Token(Token = "0x40007A5")]
			EditorAndDevice
		}

		[Token(Token = "0x2000185")]
		public enum eGoogleUpdateFrequency
		{
			[Token(Token = "0x40007A7")]
			Always,
			[Token(Token = "0x40007A8")]
			Never,
			[Token(Token = "0x40007A9")]
			Daily,
			[Token(Token = "0x40007AA")]
			Weekly,
			[Token(Token = "0x40007AB")]
			Monthly,
			[Token(Token = "0x40007AC")]
			OnlyOnce,
			[Token(Token = "0x40007AD")]
			EveryOtherDay
		}

		[Token(Token = "0x2000186")]
		public enum eGoogleUpdateSynchronization
		{
			[Token(Token = "0x40007AF")]
			Manual,
			[Token(Token = "0x40007B0")]
			OnSceneLoaded,
			[Token(Token = "0x40007B1")]
			AsSoonAsDownloaded
		}

		[Token(Token = "0x2000188")]
		[CompilerGenerated]
		private sealed class <Import_Google_Coroutine>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40007B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40007BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40007BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LanguageSourceData <>4__this;

			[Token(Token = "0x40007BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool forceUpdate;

			[Token(Token = "0x40007BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			public bool JustCheck;

			[Token(Token = "0x40007BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170000A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000806")]
				[Address(RVA = "0x9901F8", Offset = "0x9901F8", VA = "0x9901F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000808")]
				[Address(RVA = "0x990240", Offset = "0x990240", VA = "0x990240", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000803")]
			[Address(RVA = "0x98D794", Offset = "0x98D794", VA = "0x98D794")]
			[DebuggerHidden]
			public <Import_Google_Coroutine>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x6000804")]
			[Address(RVA = "0x98FF04", Offset = "0x98FF04", VA = "0x98FF04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000805")]
			[Address(RVA = "0x98FF08", Offset = "0x98FF08", VA = "0x98FF08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000807")]
			[Address(RVA = "0x990200", Offset = "0x990200", VA = "0x990200", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[NonSerialized]
		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ILanguageSource owner;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool GoogleLiveSyncIsUptoDate;

		[NonSerialized]
		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool mIsGlobalSource;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<TermData> mTerms;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool CaseInsensitiveTerms;

		[NonSerialized]
		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, TermData> mDictionary;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mTerm_AppName;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string Google_WebServiceURL;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public eGoogleUpdateFrequency GoogleInEditorCheckFrequency;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public eGoogleUpdateSynchronization GoogleUpdateSynchronization;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<UnityEngine.Object> Assets;

		[NonSerialized]
		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private string mDelayedGoogleData;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string EmptyCategory;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static char[] CategorySeparators;

		[Token(Token = "0x170000A2")]
		public UnityEngine.Object ownerObject
		{
			[Token(Token = "0x60007AC")]
			[Address(RVA = "0x987578", Offset = "0x987578", VA = "0x987578")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000007")]
		public event LanguageSource.fnOnSourceUpdated Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x60007AD")]
			[Address(RVA = "0x9870D0", Offset = "0x9870D0", VA = "0x9870D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60007AE")]
			[Address(RVA = "0x9875F4", Offset = "0x9875F4", VA = "0x9875F4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x986808", Offset = "0x986808", VA = "0x986808")]
		public void Awake()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x986898", Offset = "0x986898", VA = "0x986898")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x98815C", Offset = "0x98815C", VA = "0x98815C")]
		public bool IsEqualTo(LanguageSourceData Source)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x9886C4", Offset = "0x9886C4", VA = "0x9886C4")]
		internal bool ManagerHasASimilarSource()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x9887CC", Offset = "0x9887CC", VA = "0x9887CC")]
		public void ClearAllData()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x9888B0", Offset = "0x9888B0", VA = "0x9888B0")]
		public bool IsGlobalSource()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x9888B8", Offset = "0x9888B8", VA = "0x9888B8")]
		public void Editor_SetDirty()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x987BF8", Offset = "0x987BF8", VA = "0x987BF8")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x9888BC", Offset = "0x9888BC", VA = "0x9888BC")]
		public UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x988990", Offset = "0x988990", VA = "0x988990")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x9889E8", Offset = "0x9889E8", VA = "0x9889E8")]
		public void AddAsset(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x988AD4", Offset = "0x988AD4", VA = "0x988AD4")]
		private string Export_Language_to_Cache(int langIndex, bool fillTermWithFallback)
		{
			return null;
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x989028", Offset = "0x989028", VA = "0x989028")]
		public string Export_I2CSV(string Category, char Separator = ',', bool specializationsAsRows = true, bool sortRows = true)
		{
			return null;
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x989758", Offset = "0x989758", VA = "0x989758")]
		private static void AppendI2Term(StringBuilder Builder, int nLanguages, string Term, TermData termData, char Separator, string forceSpecialization)
		{
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x9899B4", Offset = "0x9899B4", VA = "0x9899B4")]
		private static void AppendI2Text(StringBuilder Builder, string text)
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x989A88", Offset = "0x989A88", VA = "0x989A88")]
		public string Export_CSV(string Category, char Separator = ',', bool specializationsAsRows = true, bool sortRows = true)
		{
			return null;
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x98A3B8", Offset = "0x98A3B8", VA = "0x98A3B8")]
		private static void AppendTerm(StringBuilder Builder, int nLanguages, string Term, TermData termData, string specialization, char Separator)
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x98A254", Offset = "0x98A254", VA = "0x98A254")]
		private static void AppendString(StringBuilder Builder, string Text, char Separator)
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x98A618", Offset = "0x98A618", VA = "0x98A618")]
		private static void AppendTranslation(StringBuilder Builder, string Text, char Separator, string tags)
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x98A794", Offset = "0x98A794", VA = "0x98A794")]
		public UnityWebRequest Export_Google_CreateWWWcall(eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x98A958", Offset = "0x98A958", VA = "0x98A958")]
		private string Export_Google_CreateData()
		{
			return null;
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x98AE38", Offset = "0x98AE38", VA = "0x98AE38")]
		public string Import_CSV(string Category, string CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x98BC5C", Offset = "0x98BC5C", VA = "0x98BC5C")]
		public string Import_I2CSV(string Category, string I2CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x98AF9C", Offset = "0x98AF9C", VA = "0x98AF9C")]
		public string Import_CSV(string Category, List<string[]> CSV, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x98BEE0", Offset = "0x98BEE0", VA = "0x98BEE0")]
		private bool ArrayContains(string MainText, params string[] texts)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x98C288", Offset = "0x98C288", VA = "0x98C288")]
		public static eTermType GetTermType(string type)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x98C59C", Offset = "0x98C59C", VA = "0x98C59C")]
		private void Import_Language_from_Cache(int langIndex, string langData, bool useFallback, bool onlyCurrentSpecialization)
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x98C7D4", Offset = "0x98C7D4", VA = "0x98C7D4")]
		public static void FreeUnusedLanguages()
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x98C994", Offset = "0x98C994", VA = "0x98C994")]
		public void Import_Google_FromCache()
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x98CDC8", Offset = "0x98CDC8", VA = "0x98CDC8")]
		private bool IsNewerVersion(string currentVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x98D484", Offset = "0x98D484", VA = "0x98D484")]
		public void Import_Google(bool ForceUpdate, bool justCheck)
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x98CC08", Offset = "0x98CC08", VA = "0x98CC08")]
		private string GetSourcePlayerPrefName()
		{
			return null;
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x98D700", Offset = "0x98D700", VA = "0x98D700")]
		[IteratorStateMachine(typeof(<Import_Google_Coroutine>d__65))]
		private IEnumerator Import_Google_Coroutine(bool forceUpdate, bool JustCheck)
		{
			return null;
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x98D7BC", Offset = "0x98D7BC", VA = "0x98D7BC")]
		private void ApplyDownloadedDataOnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x98D868", Offset = "0x98D868", VA = "0x98D868")]
		public void ApplyDownloadedDataFromGoogle()
		{
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x98D9C8", Offset = "0x98D9C8", VA = "0x98D9C8")]
		public UnityWebRequest Import_Google_CreateWWWcall(bool ForceUpdate, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x98DB3C", Offset = "0x98DB3C", VA = "0x98DB3C")]
		public bool HasGoogleSpreadsheet()
		{
			return default(bool);
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x98CE58", Offset = "0x98CE58", VA = "0x98CE58")]
		public string Import_Google_Result(string JsonString, eSpreadsheetUpdateMode UpdateMode, bool saveInPlayerPrefs = false)
		{
			return null;
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x9882BC", Offset = "0x9882BC", VA = "0x9882BC")]
		public int GetLanguageIndex(string language, bool AllowDiscartingRegion = true, bool SkipDisabled = true)
		{
			return default(int);
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x98DD90", Offset = "0x98DD90", VA = "0x98DD90")]
		public LanguageData GetLanguageData(string language, bool AllowDiscartingRegion = true)
		{
			return null;
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x98DE20", Offset = "0x98DE20", VA = "0x98DE20")]
		public bool IsCurrentLanguage(int languageIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x98BF70", Offset = "0x98BF70", VA = "0x98BF70")]
		public int GetLanguageIndexFromCode(string Code, bool exactMatch = true, bool ignoreDisabled = false)
		{
			return default(int);
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x98DBD4", Offset = "0x98DBD4", VA = "0x98DBD4")]
		public static int GetCommonWordInLanguageNames(string Language1, string Language2)
		{
			return default(int);
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x98DEC4", Offset = "0x98DEC4", VA = "0x98DEC4")]
		public static bool AreTheSameLanguage(string Language1, string Language2)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x98DF50", Offset = "0x98DF50", VA = "0x98DF50")]
		public static string GetLanguageWithoutRegion(string Language)
		{
			return null;
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x98DFE8", Offset = "0x98DFE8", VA = "0x98DFE8")]
		public void AddLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x98E060", Offset = "0x98E060", VA = "0x98E060")]
		public void AddLanguage(string LanguageName, string LanguageCode)
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x98E25C", Offset = "0x98E25C", VA = "0x98E25C")]
		public void RemoveLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x98E52C", Offset = "0x98E52C", VA = "0x98E52C")]
		public List<string> GetLanguages(bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x98E6A4", Offset = "0x98E6A4", VA = "0x98E6A4")]
		public List<string> GetLanguagesCode(bool allowRegions = true, bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x98E89C", Offset = "0x98E89C", VA = "0x98E89C")]
		public bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x98E928", Offset = "0x98E928", VA = "0x98E928")]
		public void EnableLanguage(string Language, bool bEnabled)
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x98E9C4", Offset = "0x98E9C4", VA = "0x98E9C4")]
		public bool AllowUnloadingLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x98E9D4", Offset = "0x98E9D4", VA = "0x98E9D4")]
		private string GetSavedLanguageFileName(int languageIndex)
		{
			return null;
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x98EC1C", Offset = "0x98EC1C", VA = "0x98EC1C")]
		public void LoadLanguage(int languageIndex, bool UnloadOtherLanguages, bool useFallback, bool onlyCurrentSpecialization, bool forceLoad)
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x98EFE8", Offset = "0x98EFE8", VA = "0x98EFE8")]
		public void LoadAllLanguages(bool forceLoad = false)
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x98ED80", Offset = "0x98ED80", VA = "0x98ED80")]
		public void UnloadLanguage(int languageIndex)
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x98C3B8", Offset = "0x98C3B8", VA = "0x98C3B8")]
		public void SaveLanguages(bool unloadAll, PersistentStorage.eFileType fileLocation = PersistentStorage.eFileType.Temporal)
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x98C320", Offset = "0x98C320", VA = "0x98C320")]
		public bool HasUnloadedLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x98AB70", Offset = "0x98AB70", VA = "0x98AB70")]
		public List<string> GetCategories(bool OnlyMainCategory = false, [Optional] List<string> Categories)
		{
			return null;
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x98F134", Offset = "0x98F134", VA = "0x98F134")]
		public static string GetKeyFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x98F06C", Offset = "0x98F06C", VA = "0x98F06C")]
		public static string GetCategoryFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x98F1E0", Offset = "0x98F1E0", VA = "0x98F1E0")]
		public static void DeserializeFullTerm(string FullTerm, out string Key, out string Category, bool OnlyMainCategory = false)
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x9878F0", Offset = "0x9878F0", VA = "0x9878F0")]
		public void UpdateDictionary(bool force = false)
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x98F2F8", Offset = "0x98F2F8", VA = "0x98F2F8")]
		public string GetTranslation(string term, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x98F32C", Offset = "0x98F32C", VA = "0x98F32C")]
		public bool TryGetTranslation(string term, out string Translation, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x988D88", Offset = "0x988D88", VA = "0x988D88")]
		private bool TryGetFallbackTranslation(TermData termData, out string Translation, int langIndex, [Optional] string overrideSpecialization, bool skipDisabled = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x98F658", Offset = "0x98F658", VA = "0x98F658")]
		public TermData AddTerm(string term)
		{
			return null;
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x98846C", Offset = "0x98846C", VA = "0x98846C")]
		public TermData GetTermData(string term, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x98F8B4", Offset = "0x98F8B4", VA = "0x98F8B4")]
		public bool ContainsTerm(string term)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x98F8D0", Offset = "0x98F8D0", VA = "0x98F8D0")]
		public List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x98F664", Offset = "0x98F664", VA = "0x98F664")]
		public TermData AddTerm(string NewTerm, eTermType termType, bool SaveSource = true)
		{
			return null;
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x98FB20", Offset = "0x98FB20", VA = "0x98FB20")]
		public void RemoveTerm(string term)
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x98C0E4", Offset = "0x98C0E4", VA = "0x98C0E4")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x986E30", Offset = "0x986E30", VA = "0x986E30")]
		public LanguageSourceData()
		{
		}
	}
	[Token(Token = "0x2000189")]
	public enum eSpreadsheetUpdateMode
	{
		[Token(Token = "0x40007C0")]
		None,
		[Token(Token = "0x40007C1")]
		Replace,
		[Token(Token = "0x40007C2")]
		Merge,
		[Token(Token = "0x40007C3")]
		AddNewTerms
	}
	[Token(Token = "0x200018A")]
	public class LocalizationReader
	{
		[Token(Token = "0x6000809")]
		[Address(RVA = "0x990248", Offset = "0x990248", VA = "0x990248")]
		public static Dictionary<string, string> ReadTextAsset(TextAsset asset)
		{
			return null;
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x9904B4", Offset = "0x9904B4", VA = "0x9904B4")]
		public static bool TextAsset_ReadLine(string line, out string key, out string value, out string category, out string comment, out string termType)
		{
			return default(bool);
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x990944", Offset = "0x990944", VA = "0x990944")]
		public static string ReadCSVfile(string Path, Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x98AE74", Offset = "0x98AE74", VA = "0x98AE74")]
		public static List<string[]> ReadCSV(string Text, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x990B68", Offset = "0x990B68", VA = "0x990B68")]
		private static string[] ParseCSVline(string Line, ref int iStart, char Separator)
		{
			return null;
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x990D54", Offset = "0x990D54", VA = "0x990D54")]
		private static void AddCSVtoken(ref List<string> list, ref string Line, int iEnd, ref int iWordStart)
		{
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x98BC94", Offset = "0x98BC94", VA = "0x98BC94")]
		public static List<string[]> ReadI2CSV(string Text)
		{
			return null;
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x99089C", Offset = "0x99089C", VA = "0x99089C")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x990EE0", Offset = "0x990EE0", VA = "0x990EE0")]
		public static string EncodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x9907F4", Offset = "0x9907F4", VA = "0x9907F4")]
		public static string DecodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x990FD8", Offset = "0x990FD8", VA = "0x990FD8")]
		public LocalizationReader()
		{
		}
	}
	[Token(Token = "0x200018B")]
	[AddComponentMenu("I2/Localization/I2 Localize")]
	public class Localize : MonoBehaviour
	{
		[Token(Token = "0x200018C")]
		public enum TermModification
		{
			[Token(Token = "0x40007E5")]
			DontModify,
			[Token(Token = "0x40007E6")]
			ToUpper,
			[Token(Token = "0x40007E7")]
			ToLower,
			[Token(Token = "0x40007E8")]
			ToUpperFirst,
			[Token(Token = "0x40007E9")]
			ToTitle
		}

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string mTerm;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mTermSecondary;

		[NonSerialized]
		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string FinalTerm;

		[NonSerialized]
		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string FinalSecondaryTerm;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TermModification PrimaryTermModifier;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TermModification SecondaryTermModifier;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string TermPrefix;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string TermSuffix;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool LocalizeOnAwake;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string LastLocalizedLanguage;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool IgnoreRTL;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int MaxCharactersInRTL;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreNumbersInRTL;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool CorrectAlignmentForRTL;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AddSpacesToJoinedLanguages;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool AllowLocalizedParameters;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool AllowParameters;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<UnityEngine.Object> TranslatedObjects;

		[NonSerialized]
		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent LocalizeEvent;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string MainTranslation;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string SecondaryTranslation;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string CallBackTerm;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string CallBackSecondaryTerm;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Localize CurrentLocalizeComponent;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool AlwaysForceLocalize;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		public EventCallback LocalizeCallBack;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool mGUI_ShowReferences;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool mGUI_ShowTems;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		public bool mGUI_ShowCallback;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ILocalizeTarget mLocalizeTarget;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string mLocalizeTargetName;

		[Token(Token = "0x170000A5")]
		public string Term
		{
			[Token(Token = "0x6000814")]
			[Address(RVA = "0x990FE0", Offset = "0x990FE0", VA = "0x990FE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000815")]
			[Address(RVA = "0x990FE8", Offset = "0x990FE8", VA = "0x990FE8")]
			set
			{
			}
		}

		[Token(Token = "0x170000A6")]
		public string SecondaryTerm
		{
			[Token(Token = "0x6000816")]
			[Address(RVA = "0x991040", Offset = "0x991040", VA = "0x991040")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000817")]
			[Address(RVA = "0x991048", Offset = "0x991048", VA = "0x991048")]
			set
			{
			}
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x9910CC", Offset = "0x9910CC", VA = "0x9910CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x992208", Offset = "0x992208", VA = "0x992208")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x992210", Offset = "0x992210", VA = "0x992210")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x991918", Offset = "0x991918", VA = "0x991918")]
		public void OnLocalize(bool Force = false)
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x991468", Offset = "0x991468", VA = "0x991468")]
		public bool FindTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x992258", Offset = "0x992258", VA = "0x992258")]
		public void GetFinalTerms(out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x992A74", Offset = "0x992A74", VA = "0x992A74")]
		public string GetMainTargetsText()
		{
			return null;
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x992B3C", Offset = "0x992B3C", VA = "0x992B3C")]
		public void SetFinalTerms(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x990FEC", Offset = "0x990FEC", VA = "0x990FEC")]
		public void SetTerm(string primary)
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x991054", Offset = "0x991054", VA = "0x991054")]
		public void SetTerm(string primary, string secondary)
		{
		}

		[Token(Token = "0x6000822")]
		internal T GetSecondaryTranslatedObj<T>(ref string mainTranslation, ref string secondaryTranslation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x991100", Offset = "0x991100", VA = "0x991100")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x6000824")]
		internal T GetObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000825")]
		private T GetTranslatedObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x992B8C", Offset = "0x992B8C", VA = "0x992B8C")]
		private void DeserializeTranslation(string translation, out string value, out string secondary)
		{
		}

		[Token(Token = "0x6000827")]
		public T FindTranslatedObject<T>(string value) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x992C9C", Offset = "0x992C9C", VA = "0x992C9C")]
		public bool HasTranslatedObject(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x992D20", Offset = "0x992D20", VA = "0x992D20")]
		public void AddTranslatedObject(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x992E0C", Offset = "0x992E0C", VA = "0x992E0C")]
		public void SetGlobalLanguage(string Language)
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x992F30", Offset = "0x992F30", VA = "0x992F30")]
		public Localize()
		{
		}
	}
	[Token(Token = "0x200018E")]
	[AddComponentMenu("I2/Localization/Localize Dropdown")]
	public class LocalizeDropdown : MonoBehaviour
	{
		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> _Terms;

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x993320", Offset = "0x993320", VA = "0x993320")]
		public void Start()
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x993658", Offset = "0x993658", VA = "0x993658")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x9937D0", Offset = "0x9937D0", VA = "0x9937D0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x99356C", Offset = "0x99356C", VA = "0x99356C")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x993828", Offset = "0x993828", VA = "0x993828")]
		private void FillValues()
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x993A8C", Offset = "0x993A8C", VA = "0x993A8C")]
		public void UpdateLocalization()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x994008", Offset = "0x994008", VA = "0x994008")]
		public void UpdateLocalizationTMPro()
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x993DBC", Offset = "0x993DBC", VA = "0x993DBC")]
		private void FillValuesTMPro()
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x99432C", Offset = "0x99432C", VA = "0x99432C")]
		public LocalizeDropdown()
		{
		}
	}
	[Token(Token = "0x200018F")]
	public static class LocalizationManager
	{
		[Token(Token = "0x2000190")]
		public delegate bool FnCustomApplyLocalizationParams(ref string translation, _GetParam getParam, bool allowLocalizedParameters);

		[Token(Token = "0x2000191")]
		public delegate object _GetParam(string param);

		[Token(Token = "0x2000192")]
		public delegate void OnLocalizeCallback();

		[Token(Token = "0x2000198")]
		[CompilerGenerated]
		private sealed class <Delayed_Import_Google>d__63 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400080A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400080B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400080C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x400080D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LanguageSourceData source;

			[Token(Token = "0x400080E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool justCheck;

			[Token(Token = "0x170000AC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600089A")]
				[Address(RVA = "0x99AF2C", Offset = "0x99AF2C", VA = "0x99AF2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600089C")]
				[Address(RVA = "0x99AF74", Offset = "0x99AF74", VA = "0x99AF74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000897")]
			[Address(RVA = "0x99AE3C", Offset = "0x99AE3C", VA = "0x99AE3C")]
			[DebuggerHidden]
			public <Delayed_Import_Google>d__63(int <>1__state)
			{
			}

			[Token(Token = "0x6000898")]
			[Address(RVA = "0x99AE64", Offset = "0x99AE64", VA = "0x99AE64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000899")]
			[Address(RVA = "0x99AE68", Offset = "0x99AE68", VA = "0x99AE68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600089B")]
			[Address(RVA = "0x99AF34", Offset = "0x99AF34", VA = "0x99AF34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200019A")]
		[CompilerGenerated]
		private sealed class <Coroutine_LocalizeAll>d__88 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000810")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000811")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170000AE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008A2")]
				[Address(RVA = "0x99B0A0", Offset = "0x99B0A0", VA = "0x99B0A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008A4")]
				[Address(RVA = "0x99B0E8", Offset = "0x99B0E8", VA = "0x99B0E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600089F")]
			[Address(RVA = "0x99AFAC", Offset = "0x99AFAC", VA = "0x99AFAC")]
			[DebuggerHidden]
			public <Coroutine_LocalizeAll>d__88(int <>1__state)
			{
			}

			[Token(Token = "0x60008A0")]
			[Address(RVA = "0x99AFD4", Offset = "0x99AFD4", VA = "0x99AFD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008A1")]
			[Address(RVA = "0x99AFD8", Offset = "0x99AFD8", VA = "0x99AFD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008A3")]
			[Address(RVA = "0x99B0A8", Offset = "0x99B0A8", VA = "0x99B0A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string mCurrentLanguage;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string mLanguageCode;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static CultureInfo mCurrentCulture;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool mChangeCultureInfo;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public static bool IsRight2Left;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public static bool HasJoinedWords;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static List<ILocalizationParamsManager> ParamManagers;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static FnCustomApplyLocalizationParams CustomApplyLocalizationParams;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string[] LanguagesRTL;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static List<LanguageSourceData> Sources;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] GlobalSources;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Func<LanguageSourceData, bool> Callback_AllowSyncFromGoogle;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static string mCurrentDeviceLanguage;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static List<ILocalizeTargetDescriptor> mLocalizeTargets;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static bool mLocalizeIsScheduled;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private static bool mLocalizeIsScheduledWithForcedValue;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public static bool HighlightLocalizedTargets;

		[Token(Token = "0x170000A7")]
		public static string CurrentLanguage
		{
			[Token(Token = "0x600083F")]
			[Address(RVA = "0x98C938", Offset = "0x98C938", VA = "0x98C938")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000840")]
			[Address(RVA = "0x992E60", Offset = "0x992E60", VA = "0x992E60")]
			set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		public static string CurrentLanguageCode
		{
			[Token(Token = "0x6000841")]
			[Address(RVA = "0x99513C", Offset = "0x99513C", VA = "0x99513C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000842")]
			[Address(RVA = "0x995198", Offset = "0x995198", VA = "0x995198")]
			set
			{
			}
		}

		[Token(Token = "0x170000A9")]
		public static string CurrentRegion
		{
			[Token(Token = "0x6000843")]
			[Address(RVA = "0x995428", Offset = "0x995428", VA = "0x995428")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000844")]
			[Address(RVA = "0x99559C", Offset = "0x99559C", VA = "0x99559C")]
			set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		public static string CurrentRegionCode
		{
			[Token(Token = "0x6000845")]
			[Address(RVA = "0x99575C", Offset = "0x99575C", VA = "0x99575C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000846")]
			[Address(RVA = "0x99582C", Offset = "0x99582C", VA = "0x99582C")]
			set
			{
			}
		}

		[Token(Token = "0x170000AB")]
		public static CultureInfo CurrentCulture
		{
			[Token(Token = "0x6000847")]
			[Address(RVA = "0x995930", Offset = "0x995930", VA = "0x995930")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000008")]
		public static event OnLocalizeCallback OnLocalizeEvent
		{
			[Token(Token = "0x6000870")]
			[Address(RVA = "0x993490", Offset = "0x993490", VA = "0x993490")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000871")]
			[Address(RVA = "0x9936F4", Offset = "0x9936F4", VA = "0x9936F4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x9814AC", Offset = "0x9814AC", VA = "0x9814AC")]
		public static void InitializeIfNeeded()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x9949EC", Offset = "0x9949EC", VA = "0x9949EC")]
		public static string GetVersion()
		{
			return null;
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x98DBCC", Offset = "0x98DBCC", VA = "0x98DBCC")]
		public static int GetRequiredWebServiceVersion()
		{
			return default(int);
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x981004", Offset = "0x981004", VA = "0x981004")]
		public static string GetWebServiceURL([Optional] LanguageSourceData source)
		{
			return null;
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x994F40", Offset = "0x994F40", VA = "0x994F40")]
		public static void SetLanguageAndCode(string LanguageName, string LanguageCode, bool RememberLanguage = true, bool Force = false)
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x995988", Offset = "0x995988", VA = "0x995988")]
		private static CultureInfo CreateCultureForCode(string code)
		{
			return null;
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x995B78", Offset = "0x995B78", VA = "0x995B78")]
		public static void EnableChangingCultureInfo(bool bEnable)
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x995A7C", Offset = "0x995A7C", VA = "0x995A7C")]
		private static void SetCurrentCultureInfo()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x994618", Offset = "0x994618", VA = "0x994618")]
		private static void SelectStartupLanguage()
		{
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x995CA8", Offset = "0x995CA8", VA = "0x995CA8")]
		public static bool HasLanguage(string Language, bool AllowDiscartingRegion = true, bool Initialize = true, bool SkipDisabled = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x994A2C", Offset = "0x994A2C", VA = "0x994A2C")]
		public static string GetSupportedLanguage(string Language, bool ignoreDisabled = false)
		{
			return null;
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x994D88", Offset = "0x994D88", VA = "0x994D88")]
		public static string GetLanguageCode(string Language)
		{
			return null;
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x995260", Offset = "0x995260", VA = "0x995260")]
		public static string GetLanguageFromCode(string Code, bool exactMatch = true)
		{
			return null;
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x995E60", Offset = "0x995E60", VA = "0x995E60")]
		public static List<string> GetAllLanguages(bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x9960E0", Offset = "0x9960E0", VA = "0x9960E0")]
		public static List<string> GetAllLanguagesCode(bool allowRegions = true, bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x996334", Offset = "0x996334", VA = "0x996334")]
		public static bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x996428", Offset = "0x996428", VA = "0x996428")]
		private static void LoadCurrentLanguage()
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x996550", Offset = "0x996550", VA = "0x996550")]
		public static void PreviewLanguage(string NewLanguage)
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x9943B4", Offset = "0x9943B4", VA = "0x9943B4")]
		public static void AutoLoadGlobalParamManagers()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x996648", Offset = "0x996648", VA = "0x996648")]
		public static void ApplyLocalizationParams(ref string translation, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x9924B8", Offset = "0x9924B8", VA = "0x9924B8")]
		public static void ApplyLocalizationParams(ref string translation, GameObject root, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x996CCC", Offset = "0x996CCC", VA = "0x996CCC")]
		public static void ApplyLocalizationParams(ref string translation, Dictionary<string, object> parameters, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x99683C", Offset = "0x99683C", VA = "0x99683C")]
		public static void ApplyLocalizationParams(ref string translation, _GetParam getParam, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x996F14", Offset = "0x996F14", VA = "0x996F14")]
		internal static string GetLocalizationParam(string ParamName, GameObject root)
		{
			return null;
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x9971A4", Offset = "0x9971A4", VA = "0x9971A4")]
		private static string GetPluralType(MatchCollection matches, string langCode, _GetParam getParam)
		{
			return null;
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x992A18", Offset = "0x992A18", VA = "0x992A18")]
		public static string ApplyRTLfix(string line)
		{
			return null;
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x9925A8", Offset = "0x9925A8", VA = "0x9925A8")]
		public static string ApplyRTLfix(string line, int maxCharacters, bool ignoreNumbers)
		{
			return null;
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0x997368", Offset = "0x997368", VA = "0x997368")]
		public static string FixRTL_IfNeeded(string text, int maxCharacters = 0, bool ignoreNumber = false)
		{
			return null;
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x995AF4", Offset = "0x995AF4", VA = "0x995AF4")]
		public static bool IsRTL(string Code)
		{
			return default(bool);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0x994594", Offset = "0x994594", VA = "0x994594")]
		public static bool UpdateSources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x997404", Offset = "0x997404", VA = "0x997404")]
		private static void UnregisterDeletededSources()
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x9976AC", Offset = "0x9976AC", VA = "0x9976AC")]
		private static void RegisterSceneSources()
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x99750C", Offset = "0x99750C", VA = "0x99750C")]
		private static void RegisterSourceInResources()
		{
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0x997840", Offset = "0x997840", VA = "0x997840")]
		private static bool AllowSyncFromGoogle(LanguageSourceData Source)
		{
			return default(bool);
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0x987690", Offset = "0x987690", VA = "0x987690")]
		internal static void AddSource(LanguageSourceData Source)
		{
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x9978E0", Offset = "0x9978E0", VA = "0x9978E0")]
		[IteratorStateMachine(typeof(<Delayed_Import_Google>d__63))]
		private static IEnumerator Delayed_Import_Google(LanguageSourceData source, float delay, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x9880DC", Offset = "0x9880DC", VA = "0x9880DC")]
		internal static void RemoveSource(LanguageSourceData Source)
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x997978", Offset = "0x997978", VA = "0x997978")]
		public static bool IsGlobalSource(string SourceName)
		{
			return default(bool);
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x9979FC", Offset = "0x9979FC", VA = "0x9979FC")]
		public static LanguageSourceData GetSourceContaining(string term, bool fallbackToFirst = true)
		{
			return null;
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x997BA0", Offset = "0x997BA0", VA = "0x997BA0")]
		public static UnityEngine.Object FindAsset(string value)
		{
			return null;
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x997CD0", Offset = "0x997CD0", VA = "0x997CD0")]
		public static void ApplyDownloadedDataFromGoogle()
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x995C0C", Offset = "0x995C0C", VA = "0x995C0C")]
		public static string GetCurrentDeviceLanguage(bool force = false)
		{
			return null;
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x997DAC", Offset = "0x997DAC", VA = "0x997DAC")]
		private static void DetectDeviceLanguage()
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x99822C", Offset = "0x99822C", VA = "0x99822C")]
		public static void RegisterTarget(ILocalizeTargetDescriptor desc)
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x9923F4", Offset = "0x9923F4", VA = "0x9923F4")]
		public static string GetTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage, bool allowLocalizedParameters = true)
		{
			return null;
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x9986D0", Offset = "0x9986D0", VA = "0x9986D0")]
		public static string GetTermTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage, bool allowLocalizedParameters = true)
		{
			return null;
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x9984DC", Offset = "0x9984DC", VA = "0x9984DC")]
		public static bool TryGetTranslation(string Term, out string Translation, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage, bool allowLocalizedParameters = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000875")]
		public static T GetTranslatedObject<T>(string AssetName, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000876")]
		public static T GetTranslatedObjectByTermName<T>(string Term, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x99877C", Offset = "0x99877C", VA = "0x99877C")]
		public static string GetAppName(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x988010", Offset = "0x988010", VA = "0x988010")]
		public static void LocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x998AE4", Offset = "0x998AE4", VA = "0x998AE4")]
		[IteratorStateMachine(typeof(<Coroutine_LocalizeAll>d__88))]
		private static IEnumerator Coroutine_LocalizeAll()
		{
			return null;
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x99896C", Offset = "0x99896C", VA = "0x99896C")]
		private static void DoLocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x998B44", Offset = "0x998B44", VA = "0x998B44")]
		public static List<string> GetCategories()
		{
			return null;
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x998C6C", Offset = "0x998C6C", VA = "0x998C6C")]
		public static List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x998EB0", Offset = "0x998EB0", VA = "0x998EB0")]
		public static TermData GetTermData(string term)
		{
			return null;
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x996DBC", Offset = "0x996DBC", VA = "0x996DBC")]
		public static TermData GetTermData(string term, out LanguageSourceData source)
		{
			return null;
		}
	}
	[Token(Token = "0x200019B")]
	public abstract class ILocalizeTarget : ScriptableObject
	{
		[Token(Token = "0x60008A5")]
		public abstract bool IsValid(Localize cmp);

		[Token(Token = "0x60008A6")]
		public abstract void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm);

		[Token(Token = "0x60008A7")]
		public abstract void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation);

		[Token(Token = "0x60008A8")]
		public abstract bool CanUseSecondaryTerm();

		[Token(Token = "0x60008A9")]
		public abstract bool AllowMainTermToBeRTL();

		[Token(Token = "0x60008AA")]
		public abstract bool AllowSecondTermToBeRTL();

		[Token(Token = "0x60008AB")]
		public abstract eTermType GetPrimaryTermType(Localize cmp);

		[Token(Token = "0x60008AC")]
		public abstract eTermType GetSecondaryTermType(Localize cmp);

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x99B0F0", Offset = "0x99B0F0", VA = "0x99B0F0")]
		protected ILocalizeTarget()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public abstract class LocalizeTarget<T> : ILocalizeTarget where T : UnityEngine.Object
	{
		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T mTarget;

		[Token(Token = "0x60008AE")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AF")]
		protected LocalizeTarget()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public abstract class ILocalizeTargetDescriptor
	{
		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Priority;

		[Token(Token = "0x60008B0")]
		public abstract bool CanLocalize(Localize cmp);

		[Token(Token = "0x60008B1")]
		public abstract ILocalizeTarget CreateTarget(Localize cmp);

		[Token(Token = "0x60008B2")]
		public abstract Type GetTargetType();

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x99B0F8", Offset = "0x99B0F8", VA = "0x99B0F8")]
		protected ILocalizeTargetDescriptor()
		{
		}
	}
	[Token(Token = "0x200019E")]
	public abstract class LocalizeTargetDesc<T> : ILocalizeTargetDescriptor where T : ILocalizeTarget
	{
		[Token(Token = "0x60008B4")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x60008B5")]
		public override Type GetTargetType()
		{
			return null;
		}

		[Token(Token = "0x60008B6")]
		protected LocalizeTargetDesc()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class LocalizeTargetDesc_Type<T, G> : LocalizeTargetDesc<G> where T : UnityEngine.Object where G : LocalizeTarget<T>
	{
		[Token(Token = "0x60008B7")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B8")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x60008B9")]
		public LocalizeTargetDesc_Type()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class LocalizeTarget_TextMeshPro_Label : LocalizeTarget<TextMeshPro>
	{
		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignmentOptions mAlignment_RTL;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignmentOptions mAlignment_LTR;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x99B100", Offset = "0x99B100", VA = "0x99B100")]
		static LocalizeTarget_TextMeshPro_Label()
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x99B104", Offset = "0x99B104", VA = "0x99B104")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x99B1CC", Offset = "0x99B1CC", VA = "0x99B1CC", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x99B1D4", Offset = "0x99B1D4", VA = "0x99B1D4", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x99B1DC", Offset = "0x99B1DC", VA = "0x99B1DC", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x99B1E4", Offset = "0x99B1E4", VA = "0x99B1E4", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x99B1EC", Offset = "0x99B1EC", VA = "0x99B1EC", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x99B1F4", Offset = "0x99B1F4", VA = "0x99B1F4", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x99B310", Offset = "0x99B310", VA = "0x99B310", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x99B89C", Offset = "0x99B89C", VA = "0x99B89C")]
		internal static TMP_FontAsset GetTMPFontFromMaterial(Localize cmp, string matName)
		{
			return null;
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x99BB04", Offset = "0x99BB04", VA = "0x99BB04")]
		internal static void InitAlignment_TMPro(bool isRTL, TextAlignmentOptions alignment, out TextAlignmentOptions alignLTR, out TextAlignmentOptions alignRTL)
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x99B7BC", Offset = "0x99B7BC", VA = "0x99B7BC")]
		internal static void SetFont(TMP_Text label, TMP_FontAsset newFont)
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x99BA04", Offset = "0x99BA04", VA = "0x99BA04")]
		internal static void SetMaterial(TMP_Text label, Material newMat)
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x99BE98", Offset = "0x99BE98", VA = "0x99BE98")]
		public LocalizeTarget_TextMeshPro_Label()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	public class LocalizeTarget_TextMeshPro_UGUI : LocalizeTarget<TextMeshProUGUI>
	{
		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextAlignmentOptions mAlignment_RTL;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TextAlignmentOptions mAlignment_LTR;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool mAlignmentWasRTL;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool mInitializeAlignment;

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x99BEF4", Offset = "0x99BEF4", VA = "0x99BEF4")]
		static LocalizeTarget_TextMeshPro_UGUI()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x99BEF8", Offset = "0x99BEF8", VA = "0x99BEF8")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x99BFC0", Offset = "0x99BFC0", VA = "0x99BFC0", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x99BFC8", Offset = "0x99BFC8", VA = "0x99BFC8", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x99BFD0", Offset = "0x99BFD0", VA = "0x99BFD0", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x99BFD8", Offset = "0x99BFD8", VA = "0x99BFD8", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x99BFE0", Offset = "0x99BFE0", VA = "0x99BFE0", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x99BFE8", Offset = "0x99BFE8", VA = "0x99BFE8", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x99C104", Offset = "0x99C104", VA = "0x99C104", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x99C5B0", Offset = "0x99C5B0", VA = "0x99C5B0")]
		public LocalizeTarget_TextMeshPro_UGUI()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	public class LocalizeTarget_UnityStandard_AudioSource : LocalizeTarget<AudioSource>
	{
		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x99C60C", Offset = "0x99C60C", VA = "0x99C60C")]
		static LocalizeTarget_UnityStandard_AudioSource()
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x99C610", Offset = "0x99C610", VA = "0x99C610")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x99C6D8", Offset = "0x99C6D8", VA = "0x99C6D8", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x99C6E0", Offset = "0x99C6E0", VA = "0x99C6E0", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x99C6E8", Offset = "0x99C6E8", VA = "0x99C6E8", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x99C6F0", Offset = "0x99C6F0", VA = "0x99C6F0", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x99C6F8", Offset = "0x99C6F8", VA = "0x99C6F8", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x99C700", Offset = "0x99C700", VA = "0x99C700", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x99C7DC", Offset = "0x99C7DC", VA = "0x99C7DC", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x99C94C", Offset = "0x99C94C", VA = "0x99C94C")]
		public LocalizeTarget_UnityStandard_AudioSource()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	public class LocalizeTargetDesc_Child : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Child>
	{
		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x99C994", Offset = "0x99C994", VA = "0x99C994", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x99C9C8", Offset = "0x99C9C8", VA = "0x99C9C8")]
		public LocalizeTargetDesc_Child()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	public class LocalizeTarget_UnityStandard_Child : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x99CA10", Offset = "0x99CA10", VA = "0x99CA10")]
		static LocalizeTarget_UnityStandard_Child()
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x99CA14", Offset = "0x99CA14", VA = "0x99CA14")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x99CAC4", Offset = "0x99CAC4", VA = "0x99CAC4", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x99CAF8", Offset = "0x99CAF8", VA = "0x99CAF8", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x99CB00", Offset = "0x99CB00", VA = "0x99CB00", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x99CB08", Offset = "0x99CB08", VA = "0x99CB08", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x99CB10", Offset = "0x99CB10", VA = "0x99CB10", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x99CB18", Offset = "0x99CB18", VA = "0x99CB18", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x99CB20", Offset = "0x99CB20", VA = "0x99CB20", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x99CB6C", Offset = "0x99CB6C", VA = "0x99CB6C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x99CCAC", Offset = "0x99CCAC", VA = "0x99CCAC")]
		public LocalizeTarget_UnityStandard_Child()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	public class LocalizeTarget_UnityStandard_MeshRenderer : LocalizeTarget<MeshRenderer>
	{
		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x99CCF4", Offset = "0x99CCF4", VA = "0x99CCF4")]
		static LocalizeTarget_UnityStandard_MeshRenderer()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x99CCF8", Offset = "0x99CCF8", VA = "0x99CCF8")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x99CDC0", Offset = "0x99CDC0", VA = "0x99CDC0", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x99CDC8", Offset = "0x99CDC8", VA = "0x99CDC8", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x99CDD0", Offset = "0x99CDD0", VA = "0x99CDD0", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x99CDD8", Offset = "0x99CDD8", VA = "0x99CDD8", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x99CDE0", Offset = "0x99CDE0", VA = "0x99CDE0", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x99CDE8", Offset = "0x99CDE8", VA = "0x99CDE8", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x99CFE0", Offset = "0x99CFE0", VA = "0x99CFE0", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x99D1AC", Offset = "0x99D1AC", VA = "0x99D1AC")]
		public LocalizeTarget_UnityStandard_MeshRenderer()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	public class LocalizeTargetDesc_Prefab : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Prefab>
	{
		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x99D1F4", Offset = "0x99D1F4", VA = "0x99D1F4", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x99D1FC", Offset = "0x99D1FC", VA = "0x99D1FC")]
		public LocalizeTargetDesc_Prefab()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	public class LocalizeTarget_UnityStandard_Prefab : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x99D244", Offset = "0x99D244", VA = "0x99D244")]
		static LocalizeTarget_UnityStandard_Prefab()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x99D248", Offset = "0x99D248", VA = "0x99D248")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x99D2F8", Offset = "0x99D2F8", VA = "0x99D2F8", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x99D300", Offset = "0x99D300", VA = "0x99D300", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x99D308", Offset = "0x99D308", VA = "0x99D308", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x99D310", Offset = "0x99D310", VA = "0x99D310", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x99D318", Offset = "0x99D318", VA = "0x99D318", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x99D320", Offset = "0x99D320", VA = "0x99D320", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x99D328", Offset = "0x99D328", VA = "0x99D328", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x99D374", Offset = "0x99D374", VA = "0x99D374", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x99D578", Offset = "0x99D578", VA = "0x99D578")]
		private Transform InstantiateNewPrefab(Localize cmp, string mainTranslation)
		{
			return null;
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x99D72C", Offset = "0x99D72C", VA = "0x99D72C")]
		public LocalizeTarget_UnityStandard_Prefab()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	public class LocalizeTarget_UnityStandard_SpriteRenderer : LocalizeTarget<SpriteRenderer>
	{
		[Token(Token = "0x6000901")]
		[Address(RVA = "0x99D774", Offset = "0x99D774", VA = "0x99D774")]
		static LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x99D778", Offset = "0x99D778", VA = "0x99D778")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x99D840", Offset = "0x99D840", VA = "0x99D840", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x99D848", Offset = "0x99D848", VA = "0x99D848", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x99D850", Offset = "0x99D850", VA = "0x99D850", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x99D858", Offset = "0x99D858", VA = "0x99D858", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x99D860", Offset = "0x99D860", VA = "0x99D860", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x99D868", Offset = "0x99D868", VA = "0x99D868", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x99D948", Offset = "0x99D948", VA = "0x99D948", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x99DA44", Offset = "0x99DA44", VA = "0x99DA44")]
		public LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	public class LocalizeTarget_UnityStandard_TextMesh : LocalizeTarget<TextMesh>
	{
		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignment mAlignment_RTL;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignment mAlignment_LTR;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x99DA8C", Offset = "0x99DA8C", VA = "0x99DA8C")]
		static LocalizeTarget_UnityStandard_TextMesh()
		{
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x99DA90", Offset = "0x99DA90", VA = "0x99DA90")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x99DB58", Offset = "0x99DB58", VA = "0x99DB58", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x99DB60", Offset = "0x99DB60", VA = "0x99DB60", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x99DB68", Offset = "0x99DB68", VA = "0x99DB68", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x99DB70", Offset = "0x99DB70", VA = "0x99DB70", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x99DB78", Offset = "0x99DB78", VA = "0x99DB78", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x99DB80", Offset = "0x99DB80", VA = "0x99DB80", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x99DCA4", Offset = "0x99DCA4", VA = "0x99DCA4", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x99DF4C", Offset = "0x99DF4C", VA = "0x99DF4C")]
		public LocalizeTarget_UnityStandard_TextMesh()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public class LocalizeTarget_UnityStandard_VideoPlayer : LocalizeTarget<VideoPlayer>
	{
		[Token(Token = "0x6000915")]
		[Address(RVA = "0x99DFA4", Offset = "0x99DFA4", VA = "0x99DFA4")]
		static LocalizeTarget_UnityStandard_VideoPlayer()
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x99DFA8", Offset = "0x99DFA8", VA = "0x99DFA8")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x99E070", Offset = "0x99E070", VA = "0x99E070", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x99E078", Offset = "0x99E078", VA = "0x99E078", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x99E080", Offset = "0x99E080", VA = "0x99E080", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0x99E088", Offset = "0x99E088", VA = "0x99E088", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0x99E090", Offset = "0x99E090", VA = "0x99E090", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0x99E098", Offset = "0x99E098", VA = "0x99E098", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0x99E178", Offset = "0x99E178", VA = "0x99E178", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x99E274", Offset = "0x99E274", VA = "0x99E274")]
		public LocalizeTarget_UnityStandard_VideoPlayer()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public class LocalizeTarget_UnityUI_Image : LocalizeTarget<Image>
	{
		[Token(Token = "0x600091F")]
		[Address(RVA = "0x99E2BC", Offset = "0x99E2BC", VA = "0x99E2BC")]
		static LocalizeTarget_UnityUI_Image()
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x99E2C0", Offset = "0x99E2C0", VA = "0x99E2C0")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x99E388", Offset = "0x99E388", VA = "0x99E388", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x99E390", Offset = "0x99E390", VA = "0x99E390", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x99E398", Offset = "0x99E398", VA = "0x99E398", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x99E3A0", Offset = "0x99E3A0", VA = "0x99E3A0", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x99E420", Offset = "0x99E420", VA = "0x99E420", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x99E428", Offset = "0x99E428", VA = "0x99E428", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x99E5C4", Offset = "0x99E5C4", VA = "0x99E5C4", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x99E6B4", Offset = "0x99E6B4", VA = "0x99E6B4")]
		public LocalizeTarget_UnityUI_Image()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public class LocalizeTarget_UnityUI_RawImage : LocalizeTarget<RawImage>
	{
		[Token(Token = "0x6000929")]
		[Address(RVA = "0x99E6FC", Offset = "0x99E6FC", VA = "0x99E6FC")]
		static LocalizeTarget_UnityUI_RawImage()
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x99E700", Offset = "0x99E700", VA = "0x99E700")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x99E7C8", Offset = "0x99E7C8", VA = "0x99E7C8", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x99E7D0", Offset = "0x99E7D0", VA = "0x99E7D0", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x99E7D8", Offset = "0x99E7D8", VA = "0x99E7D8", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x99E7E0", Offset = "0x99E7E0", VA = "0x99E7E0", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x99E7E8", Offset = "0x99E7E8", VA = "0x99E7E8", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x99E7F0", Offset = "0x99E7F0", VA = "0x99E7F0", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x99E8E0", Offset = "0x99E8E0", VA = "0x99E8E0", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x99E9D0", Offset = "0x99E9D0", VA = "0x99E9D0")]
		public LocalizeTarget_UnityUI_RawImage()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	public class LocalizeTarget_UnityUI_Text : LocalizeTarget<Text>
	{
		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAnchor mAlignment_RTL;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAnchor mAlignment_LTR;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x99EA18", Offset = "0x99EA18", VA = "0x99EA18")]
		static LocalizeTarget_UnityUI_Text()
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x99EA1C", Offset = "0x99EA1C", VA = "0x99EA1C")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x99EAE4", Offset = "0x99EAE4", VA = "0x99EAE4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x99EAEC", Offset = "0x99EAEC", VA = "0x99EAEC", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x99EAF4", Offset = "0x99EAF4", VA = "0x99EAF4", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x99EAFC", Offset = "0x99EAFC", VA = "0x99EAFC", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x99EB04", Offset = "0x99EB04", VA = "0x99EB04", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x99EB0C", Offset = "0x99EB0C", VA = "0x99EB0C", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x99EC38", Offset = "0x99EC38", VA = "0x99EC38", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x99EEE0", Offset = "0x99EEE0", VA = "0x99EEE0")]
		private void InitAlignment(bool isRTL, TextAnchor alignment, out TextAnchor alignLTR, out TextAnchor alignRTL)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x99EF98", Offset = "0x99EF98", VA = "0x99EF98")]
		public LocalizeTarget_UnityUI_Text()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	public enum eTermType
	{
		[Token(Token = "0x4000826")]
		Text,
		[Token(Token = "0x4000827")]
		Font,
		[Token(Token = "0x4000828")]
		Texture,
		[Token(Token = "0x4000829")]
		AudioClip,
		[Token(Token = "0x400082A")]
		GameObject,
		[Token(Token = "0x400082B")]
		Sprite,
		[Token(Token = "0x400082C")]
		Material,
		[Token(Token = "0x400082D")]
		Child,
		[Token(Token = "0x400082E")]
		Mesh,
		[Token(Token = "0x400082F")]
		TextMeshPFont,
		[Token(Token = "0x4000830")]
		Object,
		[Token(Token = "0x4000831")]
		Video
	}
	[Token(Token = "0x20001AF")]
	public enum TranslationFlag : byte
	{
		[Token(Token = "0x4000833")]
		Normal = 1,
		[Token(Token = "0x4000834")]
		AutoTranslated
	}
	[Serializable]
	[Token(Token = "0x20001B0")]
	public class TermData
	{
		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Term;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public eTermType TermType;

		[NonSerialized]
		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Languages;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte[] Flags;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string[] Languages_Touch;

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x99EFF0", Offset = "0x99EFF0", VA = "0x99EFF0")]
		public string GetTranslation(int idx, [Optional] string specialization, bool editMode = false)
		{
			return null;
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x99F104", Offset = "0x99F104", VA = "0x99F104")]
		public void SetTranslation(int idx, string translation, [Optional] string specialization)
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x99F1E8", Offset = "0x99F1E8", VA = "0x99F1E8")]
		public void RemoveSpecialization(string specialization)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x99F23C", Offset = "0x99F23C", VA = "0x99F23C")]
		public void RemoveSpecialization(int idx, string specialization)
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x99F3DC", Offset = "0x99F3DC", VA = "0x99F3DC")]
		public bool IsAutoTranslated(int idx, bool IsTouch)
		{
			return default(bool);
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x99F410", Offset = "0x99F410", VA = "0x99F410")]
		public void Validate()
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x99F60C", Offset = "0x99F60C", VA = "0x99F60C")]
		public bool IsTerm(string name, bool allowCategoryMistmatch)
		{
			return default(bool);
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x99F694", Offset = "0x99F694", VA = "0x99F694")]
		public bool HasSpecializations()
		{
			return default(bool);
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x99F75C", Offset = "0x99F75C", VA = "0x99F75C")]
		public List<string> GetAllSpecializations()
		{
			return null;
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x99F844", Offset = "0x99F844", VA = "0x99F844")]
		public TermData()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	public class TermsPopup : PropertyAttribute
	{
		[Token(Token = "0x170000B0")]
		public string Filter
		{
			[Token(Token = "0x6000949")]
			[Address(RVA = "0x99F99C", Offset = "0x99F99C", VA = "0x99F99C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600094A")]
			[Address(RVA = "0x99F9A4", Offset = "0x99F9A4", VA = "0x99F9A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x99F96C", Offset = "0x99F96C", VA = "0x99F96C")]
		public TermsPopup(string filter = "")
		{
		}
	}
	[Token(Token = "0x20001B2")]
	public class AutoChangeCultureInfo : MonoBehaviour
	{
		[Token(Token = "0x600094B")]
		[Address(RVA = "0x99F9AC", Offset = "0x99F9AC", VA = "0x99F9AC")]
		public void Start()
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x99FA00", Offset = "0x99FA00", VA = "0x99FA00")]
		public AutoChangeCultureInfo()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	public class CoroutineManager : MonoBehaviour
	{
		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CoroutineManager mInstance;

		[Token(Token = "0x170000B1")]
		private static CoroutineManager pInstance
		{
			[Token(Token = "0x600094D")]
			[Address(RVA = "0x99FA08", Offset = "0x99FA08", VA = "0x99FA08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x99FB58", Offset = "0x99FB58", VA = "0x99FB58")]
		private void Awake()
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x99FBDC", Offset = "0x99FBDC", VA = "0x99FBDC")]
		public static Coroutine Start(IEnumerator coroutine)
		{
			return null;
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x99FC00", Offset = "0x99FC00", VA = "0x99FC00")]
		public CoroutineManager()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	[AddComponentMenu("I2/Localization/I2 Localize Callback")]
	public class CustomLocalizeCallback : MonoBehaviour
	{
		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent _OnLocalize;

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x99FC08", Offset = "0x99FC08", VA = "0x99FC08")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x99FCE0", Offset = "0x99FCE0", VA = "0x99FCE0")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x99FD84", Offset = "0x99FD84", VA = "0x99FD84")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x99FDA0", Offset = "0x99FDA0", VA = "0x99FDA0")]
		public CustomLocalizeCallback()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class HindiFixer
	{
		[Token(Token = "0x6000955")]
		[Address(RVA = "0x99FE14", Offset = "0x99FE14", VA = "0x99FE14")]
		internal static string Fix(string text)
		{
			return null;
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x9A0220", Offset = "0x9A0220", VA = "0x9A0220")]
		public HindiFixer()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	public static class I2Utils
	{
		[Token(Token = "0x4000840")]
		public const string ValidChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";

		[Token(Token = "0x4000841")]
		public const string NumberChars = "0123456789";

		[Token(Token = "0x4000842")]
		public const string ValidNameSymbols = ".-_$#@*()[]{}+:?!&',^=<>~`";

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x99BCEC", Offset = "0x99BCEC", VA = "0x99BCEC")]
		public static string ReverseText(string source)
		{
			return null;
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x9A0330", Offset = "0x9A0330", VA = "0x9A0330")]
		public static string RemoveNonASCII(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x9A0550", Offset = "0x9A0550", VA = "0x9A0550")]
		public static string GetValidTermName(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x9A05F8", Offset = "0x9A05F8", VA = "0x9A05F8")]
		public static string SplitLine(string line, int maxCharacters)
		{
			return null;
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x9A089C", Offset = "0x9A089C", VA = "0x9A089C")]
		public static bool FindNextTag(string line, int iStart, out int tagStart, out int tagEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x9A0570", Offset = "0x9A0570", VA = "0x9A0570")]
		public static string RemoveTags(string text)
		{
			return null;
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x9A0A20", Offset = "0x9A0A20", VA = "0x9A0A20")]
		public static bool RemoveResourcesPath(ref string sPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x9A0CC4", Offset = "0x9A0CC4", VA = "0x9A0CC4")]
		public static bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x9A0CCC", Offset = "0x9A0CCC", VA = "0x9A0CCC")]
		public static string GetPath(this Transform tr)
		{
			return null;
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x9A0D9C", Offset = "0x9A0D9C", VA = "0x9A0D9C")]
		public static Transform FindObject(string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x9A0DFC", Offset = "0x9A0DFC", VA = "0x9A0DFC")]
		public static Transform FindObject(Scene scene, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x9A0F3C", Offset = "0x9A0F3C", VA = "0x9A0F3C")]
		public static Transform FindObject(Transform root, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6000966")]
		public static H FindInParents<H>(Transform tr) where H : Component
		{
			return null;
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x9A1064", Offset = "0x9A1064", VA = "0x9A1064")]
		public static string GetCaptureMatch(Match match)
		{
			return null;
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x9A1110", Offset = "0x9A1110", VA = "0x9A1110")]
		public static void SendWebRequest(UnityWebRequest www)
		{
		}
	}
	[Token(Token = "0x20001BA")]
	public interface ILocalizationParamsManager
	{
		[Token(Token = "0x600096D")]
		string GetParameterValue(string Param);
	}
	[Token(Token = "0x20001BB")]
	public class LocalizationParamsManager : MonoBehaviour, ILocalizationParamsManager
	{
		[Serializable]
		[Token(Token = "0x20001BC")]
		public struct ParamValue
		{
			[Token(Token = "0x4000849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Name;

			[Token(Token = "0x400084A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string Value;
		}

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<ParamValue> _Params;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool _IsGlobalManager;

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x9A11A8", Offset = "0x9A11A8", VA = "0x9A11A8", Slot = "4")]
		public string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x9A126C", Offset = "0x9A126C", VA = "0x9A126C")]
		public void SetParameterValue(string ParamName, string ParamValue, bool localize = true)
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x9A144C", Offset = "0x9A144C", VA = "0x9A144C")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x9A1504", Offset = "0x9A1504", VA = "0x9A1504", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x9A1514", Offset = "0x9A1514", VA = "0x9A1514")]
		public void DoAutoRegister()
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x9A1644", Offset = "0x9A1644", VA = "0x9A1644")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x9A16C4", Offset = "0x9A16C4", VA = "0x9A16C4")]
		public LocalizationParamsManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BD")]
	public struct LocalizedString
	{
		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string mTerm;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool mRTL_IgnoreArabicFix;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int mRTL_MaxLineLength;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool mRTL_ConvertNumbers;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_DontLocalizeParameters;

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x9A174C", Offset = "0x9A174C", VA = "0x9A174C")]
		public static implicit operator string(LocalizedString s)
		{
			return null;
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x9A1814", Offset = "0x9A1814", VA = "0x9A1814")]
		public static implicit operator LocalizedString(string term)
		{
			return default(LocalizedString);
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x9A1850", Offset = "0x9A1850", VA = "0x9A1850")]
		public LocalizedString(LocalizedString str)
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x9A1750", Offset = "0x9A1750", VA = "0x9A1750", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001BE")]
	public class RegisterCallback_AllowSyncFromGoogle : MonoBehaviour
	{
		[Token(Token = "0x6000979")]
		[Address(RVA = "0x9A18A4", Offset = "0x9A18A4", VA = "0x9A18A4")]
		public void Awake()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x9A1944", Offset = "0x9A1944", VA = "0x9A1944")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x9A19E4", Offset = "0x9A19E4", VA = "0x9A19E4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x9A1A40", Offset = "0x9A1A40", VA = "0x9A1A40", Slot = "4")]
		public virtual bool AllowSyncFromGoogle(LanguageSourceData Source)
		{
			return default(bool);
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x9A1A48", Offset = "0x9A1A48", VA = "0x9A1A48")]
		public RegisterCallback_AllowSyncFromGoogle()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	public class RegisterGlobalParameters : MonoBehaviour, ILocalizationParamsManager
	{
		[Token(Token = "0x600097E")]
		[Address(RVA = "0x9A1A50", Offset = "0x9A1A50", VA = "0x9A1A50", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x9A1B80", Offset = "0x9A1B80", VA = "0x9A1B80", Slot = "6")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x9A1C00", Offset = "0x9A1C00", VA = "0x9A1C00", Slot = "7")]
		public virtual string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x9A1C08", Offset = "0x9A1C08", VA = "0x9A1C08")]
		public RegisterGlobalParameters()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public interface IResourceManager_Bundles
	{
		[Token(Token = "0x6000982")]
		UnityEngine.Object LoadFromBundle(string path, Type assetType);
	}
	[Token(Token = "0x20001C1")]
	public class ResourceManager : MonoBehaviour
	{
		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ResourceManager mInstance;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<IResourceManager_Bundles> mBundleManagers;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object[] Assets;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<string, UnityEngine.Object> mResourcesCache;

		[Token(Token = "0x170000B2")]
		public static ResourceManager pInstance
		{
			[Token(Token = "0x6000983")]
			[Address(RVA = "0x9A1C10", Offset = "0x9A1C10", VA = "0x9A1C10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x9A1FEC", Offset = "0x9A1FEC", VA = "0x9A1FEC")]
		public static void MyOnLevelWasLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000985")]
		public T GetAsset<T>(string Name) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x9A20B4", Offset = "0x9A20B4", VA = "0x9A20B4")]
		private UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x9A21D8", Offset = "0x9A21D8", VA = "0x9A21D8")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000988")]
		public T LoadFromResources<T>(string Path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000989")]
		public T LoadFromBundle<T>(string path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x9A2048", Offset = "0x9A2048", VA = "0x9A2048")]
		public void CleanResourceCache(bool unloadResources = false)
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x9A2238", Offset = "0x9A2238", VA = "0x9A2238")]
		public ResourceManager()
		{
		}
	}
	[Token(Token = "0x20001C2")]
	public class RTLFixer
	{
		[Token(Token = "0x600098C")]
		[Address(RVA = "0x9A2374", Offset = "0x9A2374", VA = "0x9A2374")]
		public static string Fix(string str)
		{
			return null;
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x9A25FC", Offset = "0x9A25FC", VA = "0x9A25FC")]
		public static string Fix(string str, bool rtl)
		{
			return null;
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x9A2380", Offset = "0x9A2380", VA = "0x9A2380")]
		public static string Fix(string str, bool showTashkeel, bool useHinduNumbers)
		{
			return null;
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x9A3804", Offset = "0x9A3804", VA = "0x9A3804")]
		public RTLFixer()
		{
		}
	}
	[Token(Token = "0x20001C3")]
	internal enum IsolatedArabicLetters
	{
		[Token(Token = "0x4000855")]
		Hamza = 65152,
		[Token(Token = "0x4000856")]
		Alef = 65165,
		[Token(Token = "0x4000857")]
		AlefHamza = 65155,
		[Token(Token = "0x4000858")]
		WawHamza = 65157,
		[Token(Token = "0x4000859")]
		AlefMaksoor = 65159,
		[Token(Token = "0x400085A")]
		AlefMaksora = 64508,
		[Token(Token = "0x400085B")]
		HamzaNabera = 65161,
		[Token(Token = "0x400085C")]
		Ba = 65167,
		[Token(Token = "0x400085D")]
		Ta = 65173,
		[Token(Token = "0x400085E")]
		Tha2 = 65177,
		[Token(Token = "0x400085F")]
		Jeem = 65181,
		[Token(Token = "0x4000860")]
		H7aa = 65185,
		[Token(Token = "0x4000861")]
		Khaa2 = 65189,
		[Token(Token = "0x4000862")]
		Dal = 65193,
		[Token(Token = "0x4000863")]
		Thal = 65195,
		[Token(Token = "0x4000864")]
		Ra2 = 65197,
		[Token(Token = "0x4000865")]
		Zeen = 65199,
		[Token(Token = "0x4000866")]
		Seen = 65201,
		[Token(Token = "0x4000867")]
		Sheen = 65205,
		[Token(Token = "0x4000868")]
		S9a = 65209,
		[Token(Token = "0x4000869")]
		Dha = 65213,
		[Token(Token = "0x400086A")]
		T6a = 65217,
		[Token(Token = "0x400086B")]
		T6ha = 65221,
		[Token(Token = "0x400086C")]
		Ain = 65225,
		[Token(Token = "0x400086D")]
		Gain = 65229,
		[Token(Token = "0x400086E")]
		Fa = 65233,
		[Token(Token = "0x400086F")]
		Gaf = 65237,
		[Token(Token = "0x4000870")]
		Kaf = 65241,
		[Token(Token = "0x4000871")]
		Lam = 65245,
		[Token(Token = "0x4000872")]
		Meem = 65249,
		[Token(Token = "0x4000873")]
		Noon = 65253,
		[Token(Token = "0x4000874")]
		Ha = 65257,
		[Token(Token = "0x4000875")]
		Waw = 65261,
		[Token(Token = "0x4000876")]
		Ya = 65265,
		[Token(Token = "0x4000877")]
		AlefMad = 65153,
		[Token(Token = "0x4000878")]
		TaMarboota = 65171,
		[Token(Token = "0x4000879")]
		PersianPe = 64342,
		[Token(Token = "0x400087A")]
		PersianChe = 64378,
		[Token(Token = "0x400087B")]
		PersianZe = 64394,
		[Token(Token = "0x400087C")]
		PersianGaf = 64402,
		[Token(Token = "0x400087D")]
		PersianGaf2 = 64398
	}
	[Token(Token = "0x20001C4")]
	internal enum GeneralArabicLetters
	{
		[Token(Token = "0x400087F")]
		Hamza = 1569,
		[Token(Token = "0x4000880")]
		Alef = 1575,
		[Token(Token = "0x4000881")]
		AlefHamza = 1571,
		[Token(Token = "0x4000882")]
		WawHamza = 1572,
		[Token(Token = "0x4000883")]
		AlefMaksoor = 1573,
		[Token(Token = "0x4000884")]
		AlefMagsora = 1609,
		[Token(Token = "0x4000885")]
		HamzaNabera = 1574,
		[Token(Token = "0x4000886")]
		Ba = 1576,
		[Token(Token = "0x4000887")]
		Ta = 1578,
		[Token(Token = "0x4000888")]
		Tha2 = 1579,
		[Token(Token = "0x4000889")]
		Jeem = 1580,
		[Token(Token = "0x400088A")]
		H7aa = 1581,
		[Token(Token = "0x400088B")]
		Khaa2 = 1582,
		[Token(Token = "0x400088C")]
		Dal = 1583,
		[Token(Token = "0x400088D")]
		Thal = 1584,
		[Token(Token = "0x400088E")]
		Ra2 = 1585,
		[Token(Token = "0x400088F")]
		Zeen = 1586,
		[Token(Token = "0x4000890")]
		Seen = 1587,
		[Token(Token = "0x4000891")]
		Sheen = 1588,
		[Token(Token = "0x4000892")]
		S9a = 1589,
		[Token(Token = "0x4000893")]
		Dha = 1590,
		[Token(Token = "0x4000894")]
		T6a = 1591,
		[Token(Token = "0x4000895")]
		T6ha = 1592,
		[Token(Token = "0x4000896")]
		Ain = 1593,
		[Token(Token = "0x4000897")]
		Gain = 1594,
		[Token(Token = "0x4000898")]
		Fa = 1601,
		[Token(Token = "0x4000899")]
		Gaf = 1602,
		[Token(Token = "0x400089A")]
		Kaf = 1603,
		[Token(Token = "0x400089B")]
		Lam = 1604,
		[Token(Token = "0x400089C")]
		Meem = 1605,
		[Token(Token = "0x400089D")]
		Noon = 1606,
		[Token(Token = "0x400089E")]
		Ha = 1607,
		[Token(Token = "0x400089F")]
		Waw = 1608,
		[Token(Token = "0x40008A0")]
		Ya = 1610,
		[Token(Token = "0x40008A1")]
		AlefMad = 1570,
		[Token(Token = "0x40008A2")]
		TaMarboota = 1577,
		[Token(Token = "0x40008A3")]
		PersianPe = 1662,
		[Token(Token = "0x40008A4")]
		PersianChe = 1670,
		[Token(Token = "0x40008A5")]
		PersianZe = 1688,
		[Token(Token = "0x40008A6")]
		PersianGaf = 1711,
		[Token(Token = "0x40008A7")]
		PersianGaf2 = 1705
	}
	[Token(Token = "0x20001C5")]
	internal class ArabicMapping
	{
		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int from;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int to;

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x9A380C", Offset = "0x9A380C", VA = "0x9A380C")]
		public ArabicMapping(int from, int to)
		{
		}
	}
	[Token(Token = "0x20001C6")]
	internal class ArabicTable
	{
		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ArabicMapping> mapList;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ArabicTable arabicMapper;

		[Token(Token = "0x170000B3")]
		internal static ArabicTable ArabicMapper
		{
			[Token(Token = "0x6000992")]
			[Address(RVA = "0x9A50CC", Offset = "0x9A50CC", VA = "0x9A50CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x9A3838", Offset = "0x9A3838", VA = "0x9A3838")]
		private ArabicTable()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x9A5150", Offset = "0x9A5150", VA = "0x9A5150")]
		internal int Convert(int toBeConverted)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C7")]
	internal class TashkeelLocation
	{
		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public char tashkeel;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int position;

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x9A52E4", Offset = "0x9A52E4", VA = "0x9A52E4")]
		public TashkeelLocation(char tashkeel, int position)
		{
		}
	}
	[Token(Token = "0x20001C8")]
	internal class RTLFixerTool
	{
		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static bool showTashkeel;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		internal static bool useHinduNumbers;

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x9A5314", Offset = "0x9A5314", VA = "0x9A5314")]
		internal static string RemoveTashkeel(string str, out List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x9A5844", Offset = "0x9A5844", VA = "0x9A5844")]
		internal static char[] ReturnTashkeel(char[] letters, List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x9A27FC", Offset = "0x9A27FC", VA = "0x9A27FC")]
		internal static string FixLine(string str)
		{
			return null;
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x9A5A6C", Offset = "0x9A5A6C", VA = "0x9A5A6C")]
		internal static bool IsIgnoredCharacter(char ch)
		{
			return default(bool);
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x9A603C", Offset = "0x9A603C", VA = "0x9A603C")]
		internal static bool IsLeadingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x9A5EF8", Offset = "0x9A5EF8", VA = "0x9A5EF8")]
		internal static bool IsFinishingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x9A5BC8", Offset = "0x9A5BC8", VA = "0x9A5BC8")]
		internal static bool IsMiddleLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x9A6328", Offset = "0x9A6328", VA = "0x9A6328")]
		public RTLFixerTool()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	[AddComponentMenu("I2/Localization/SetLanguage Button")]
	public class SetLanguage : MonoBehaviour
	{
		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string _Language;

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x9A637C", Offset = "0x9A637C", VA = "0x9A637C")]
		private void OnClick()
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x9A6380", Offset = "0x9A6380", VA = "0x9A6380")]
		public void ApplyLanguage()
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x9A6418", Offset = "0x9A6418", VA = "0x9A6418")]
		public SetLanguage()
		{
		}
	}
	[Token(Token = "0x20001CA")]
	[AddComponentMenu("I2/Localization/SetLanguage Dropdown")]
	public class SetLanguageDropdown : MonoBehaviour
	{
		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x9A6420", Offset = "0x9A6420", VA = "0x9A6420")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x9A6678", Offset = "0x9A6678", VA = "0x9A6678")]
		private void OnValueChanged(int index)
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x9A6764", Offset = "0x9A6764", VA = "0x9A6764")]
		public SetLanguageDropdown()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public class StringObfucator
	{
		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static char[] StringObfuscatorPassword;

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x9A676C", Offset = "0x9A676C", VA = "0x9A676C")]
		public static string Encode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x9A6A60", Offset = "0x9A6A60", VA = "0x9A6A60")]
		public static string Decode(string ObfucatedString)
		{
			return null;
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x9A69DC", Offset = "0x9A69DC", VA = "0x9A69DC")]
		private static string ToBase64(string regularString)
		{
			return null;
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x9A6B38", Offset = "0x9A6B38", VA = "0x9A6B38")]
		private static string FromBase64(string base64string)
		{
			return null;
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x9A6844", Offset = "0x9A6844", VA = "0x9A6844")]
		private static string XoREncode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x9A6BC4", Offset = "0x9A6BC4", VA = "0x9A6BC4")]
		public StringObfucator()
		{
		}
	}
}
namespace I2.Loc.SimpleJSON
{
	[Token(Token = "0x20001CC")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x40008B3")]
		Array = 1,
		[Token(Token = "0x40008B4")]
		Class,
		[Token(Token = "0x40008B5")]
		Value,
		[Token(Token = "0x40008B6")]
		IntValue,
		[Token(Token = "0x40008B7")]
		DoubleValue,
		[Token(Token = "0x40008B8")]
		BoolValue,
		[Token(Token = "0x40008B9")]
		FloatValue
	}
	[Token(Token = "0x20001CD")]
	public class JSONNode
	{
		[Token(Token = "0x20001CE")]
		[CompilerGenerated]
		private sealed class <get_Childs>d__17 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x40008BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x170000C0")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60009DF")]
				[Address(RVA = "0x9A8D04", Offset = "0x9A8D04", VA = "0x9A8D04", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009E1")]
				[Address(RVA = "0x9A8D4C", Offset = "0x9A8D4C", VA = "0x9A8D4C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009DC")]
			[Address(RVA = "0x9A6D98", Offset = "0x9A6D98", VA = "0x9A6D98")]
			[DebuggerHidden]
			public <get_Childs>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x60009DD")]
			[Address(RVA = "0x9A8CE8", Offset = "0x9A8CE8", VA = "0x9A8CE8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009DE")]
			[Address(RVA = "0x9A8CEC", Offset = "0x9A8CEC", VA = "0x9A8CEC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009E0")]
			[Address(RVA = "0x9A8D0C", Offset = "0x9A8D0C", VA = "0x9A8D0C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60009E2")]
			[Address(RVA = "0x9A8D54", Offset = "0x9A8D54", VA = "0x9A8D54", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60009E3")]
			[Address(RVA = "0x9A8DEC", Offset = "0x9A8DEC", VA = "0x9A8DEC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20001CF")]
		[CompilerGenerated]
		private sealed class <get_DeepChilds>d__19 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x40008BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40008C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONNode <>4__this;

			[Token(Token = "0x40008C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JSONNode> <>7__wrap1;

			[Token(Token = "0x40008C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<JSONNode> <>7__wrap2;

			[Token(Token = "0x170000C2")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60009E9")]
				[Address(RVA = "0x9A9458", Offset = "0x9A9458", VA = "0x9A9458", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009EB")]
				[Address(RVA = "0x9A94A0", Offset = "0x9A94A0", VA = "0x9A94A0", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009E4")]
			[Address(RVA = "0x9A6E50", Offset = "0x9A6E50", VA = "0x9A6E50")]
			[DebuggerHidden]
			public <get_DeepChilds>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60009E5")]
			[Address(RVA = "0x9A8DF0", Offset = "0x9A8DF0", VA = "0x9A8DF0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009E6")]
			[Address(RVA = "0x9A8EA8", Offset = "0x9A8EA8", VA = "0x9A8EA8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009E7")]
			[Address(RVA = "0x9A93A8", Offset = "0x9A93A8", VA = "0x9A93A8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60009E8")]
			[Address(RVA = "0x9A92F8", Offset = "0x9A92F8", VA = "0x9A92F8")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x60009EA")]
			[Address(RVA = "0x9A9460", Offset = "0x9A9460", VA = "0x9A9460", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60009EC")]
			[Address(RVA = "0x9A94A8", Offset = "0x9A94A8", VA = "0x9A94A8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60009ED")]
			[Address(RVA = "0x9A9554", Offset = "0x9A9554", VA = "0x9A9554", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x170000B4")]
		public virtual JSONNode this[int aIndex]
		{
			[Token(Token = "0x60009AC")]
			[Address(RVA = "0x9A6C4C", Offset = "0x9A6C4C", VA = "0x9A6C4C", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009AD")]
			[Address(RVA = "0x9A6C54", Offset = "0x9A6C54", VA = "0x9A6C54", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		public virtual JSONNode this[string aKey]
		{
			[Token(Token = "0x60009AE")]
			[Address(RVA = "0x9A6C58", Offset = "0x9A6C58", VA = "0x9A6C58", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009AF")]
			[Address(RVA = "0x9A6C60", Offset = "0x9A6C60", VA = "0x9A6C60", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170000B6")]
		public virtual string Value
		{
			[Token(Token = "0x60009B0")]
			[Address(RVA = "0x9A6C64", Offset = "0x9A6C64", VA = "0x9A6C64", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009B1")]
			[Address(RVA = "0x9A6CA4", Offset = "0x9A6CA4", VA = "0x9A6CA4", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x170000B7")]
		public virtual int Count
		{
			[Token(Token = "0x60009B2")]
			[Address(RVA = "0x9A6CA8", Offset = "0x9A6CA8", VA = "0x9A6CA8", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B8")]
		public virtual IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x60009B7")]
			[Address(RVA = "0x9A6D28", Offset = "0x9A6D28", VA = "0x9A6D28", Slot = "16")]
			[IteratorStateMachine(typeof(<get_Childs>d__17))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B9")]
		public IEnumerable<JSONNode> DeepChilds
		{
			[Token(Token = "0x60009B8")]
			[Address(RVA = "0x9A6DCC", Offset = "0x9A6DCC", VA = "0x9A6DCC")]
			[IteratorStateMachine(typeof(<get_DeepChilds>d__19))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		public virtual int AsInt
		{
			[Token(Token = "0x60009BB")]
			[Address(RVA = "0x9A6F04", Offset = "0x9A6F04", VA = "0x9A6F04", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009BC")]
			[Address(RVA = "0x9A6F38", Offset = "0x9A6F38", VA = "0x9A6F38", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public virtual float AsFloat
		{
			[Token(Token = "0x60009BD")]
			[Address(RVA = "0x9A6F74", Offset = "0x9A6F74", VA = "0x9A6F74", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009BE")]
			[Address(RVA = "0x9A6FAC", Offset = "0x9A6FAC", VA = "0x9A6FAC", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public virtual double AsDouble
		{
			[Token(Token = "0x60009BF")]
			[Address(RVA = "0x9A6FE8", Offset = "0x9A6FE8", VA = "0x9A6FE8", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60009C0")]
			[Address(RVA = "0x9A7020", Offset = "0x9A7020", VA = "0x9A7020", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		public virtual bool AsBool
		{
			[Token(Token = "0x60009C1")]
			[Address(RVA = "0x9A705C", Offset = "0x9A705C", VA = "0x9A705C", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0x9A7114", Offset = "0x9A7114", VA = "0x9A7114", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x60009C3")]
			[Address(RVA = "0x9A718C", Offset = "0x9A718C", VA = "0x9A718C", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BF")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x60009C4")]
			[Address(RVA = "0x9A7204", Offset = "0x9A7204", VA = "0x9A7204", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x9A6C48", Offset = "0x9A6C48", VA = "0x9A6C48", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x9A6CB0", Offset = "0x9A6CB0", VA = "0x9A6CB0", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x9A6D10", Offset = "0x9A6D10", VA = "0x9A6D10", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x9A6D18", Offset = "0x9A6D18", VA = "0x9A6D18", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x9A6D20", Offset = "0x9A6D20", VA = "0x9A6D20", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x9A6E84", Offset = "0x9A6E84", VA = "0x9A6E84", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x9A6EC4", Offset = "0x9A6EC4", VA = "0x9A6EC4", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x9A727C", Offset = "0x9A727C", VA = "0x9A727C")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x9A731C", Offset = "0x9A731C", VA = "0x9A731C")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x9A7358", Offset = "0x9A7358", VA = "0x9A7358")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x9A73E0", Offset = "0x9A73E0", VA = "0x9A73E0")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x9A73F8", Offset = "0x9A73F8", VA = "0x9A73F8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x9A7404", Offset = "0x9A7404", VA = "0x9A7404", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x9A740C", Offset = "0x9A740C", VA = "0x9A740C")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x9A75D8", Offset = "0x9A75D8", VA = "0x9A75D8")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x9A7E70", Offset = "0x9A7E70", VA = "0x9A7E70", Slot = "28")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x9A7E74", Offset = "0x9A7E74", VA = "0x9A7E74")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x9A7EF4", Offset = "0x9A7EF4", VA = "0x9A7EF4")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x9A7F44", Offset = "0x9A7F44", VA = "0x9A7F44")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x9A7F94", Offset = "0x9A7F94", VA = "0x9A7F94")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x9A7FE4", Offset = "0x9A7FE4", VA = "0x9A7FE4")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x9A81B4", Offset = "0x9A81B4", VA = "0x9A81B4")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x9A83B4", Offset = "0x9A83B4", VA = "0x9A83B4")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x9A882C", Offset = "0x9A882C", VA = "0x9A882C")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x9A887C", Offset = "0x9A887C", VA = "0x9A887C")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x9A88CC", Offset = "0x9A88CC", VA = "0x9A88CC")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x9A891C", Offset = "0x9A891C", VA = "0x9A891C")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x9A8AB0", Offset = "0x9A8AB0", VA = "0x9A8AB0")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x9A8C2C", Offset = "0x9A8C2C", VA = "0x9A8C2C")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x9A8CE0", Offset = "0x9A8CE0", VA = "0x9A8CE0")]
		public JSONNode()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x20001D1")]
		[CompilerGenerated]
		private sealed class <get_Childs>d__13 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x40008C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40008C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONArray <>4__this;

			[Token(Token = "0x40008C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170000C8")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6000A00")]
				[Address(RVA = "0x9AA350", Offset = "0x9AA350", VA = "0x9AA350", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A02")]
				[Address(RVA = "0x9AA398", Offset = "0x9AA398", VA = "0x9AA398", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009FC")]
			[Address(RVA = "0x9A9AF8", Offset = "0x9A9AF8", VA = "0x9A9AF8")]
			[DebuggerHidden]
			public <get_Childs>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60009FD")]
			[Address(RVA = "0x9AA13C", Offset = "0x9AA13C", VA = "0x9AA13C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009FE")]
			[Address(RVA = "0x9AA158", Offset = "0x9AA158", VA = "0x9AA158", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009FF")]
			[Address(RVA = "0x9AA300", Offset = "0x9AA300", VA = "0x9AA300")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000A01")]
			[Address(RVA = "0x9AA358", Offset = "0x9AA358", VA = "0x9AA358", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000A03")]
			[Address(RVA = "0x9AA3A0", Offset = "0x9AA3A0", VA = "0x9AA3A0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000A04")]
			[Address(RVA = "0x9AA44C", Offset = "0x9AA44C", VA = "0x9AA44C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20001D2")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONArray <>4__this;

			[Token(Token = "0x40008CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170000CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A09")]
				[Address(RVA = "0x9AA664", Offset = "0x9AA664", VA = "0x9AA664", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A0B")]
				[Address(RVA = "0x9AA6AC", Offset = "0x9AA6AC", VA = "0x9AA6AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A05")]
			[Address(RVA = "0x9A9BA0", Offset = "0x9A9BA0", VA = "0x9A9BA0")]
			[DebuggerHidden]
			public <GetEnumerator>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000A06")]
			[Address(RVA = "0x9AA450", Offset = "0x9AA450", VA = "0x9AA450", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A07")]
			[Address(RVA = "0x9AA46C", Offset = "0x9AA46C", VA = "0x9AA46C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A08")]
			[Address(RVA = "0x9AA614", Offset = "0x9AA614", VA = "0x9AA614")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000A0A")]
			[Address(RVA = "0x9AA66C", Offset = "0x9AA66C", VA = "0x9AA66C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JSONNode> m_List;

		[Token(Token = "0x170000C4")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x60009EE")]
			[Address(RVA = "0x9A9558", Offset = "0x9A9558", VA = "0x9A9558", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009EF")]
			[Address(RVA = "0x9A9648", Offset = "0x9A9648", VA = "0x9A9648", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x60009F0")]
			[Address(RVA = "0x9A9758", Offset = "0x9A9758", VA = "0x9A9758", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009F1")]
			[Address(RVA = "0x9A97B8", Offset = "0x9A97B8", VA = "0x9A97B8", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public override int Count
		{
			[Token(Token = "0x60009F2")]
			[Address(RVA = "0x9A9868", Offset = "0x9A9868", VA = "0x9A9868", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000C7")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0x9A9A74", Offset = "0x9A9A74", VA = "0x9A9A74", Slot = "16")]
			[IteratorStateMachine(typeof(<get_Childs>d__13))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x9A98B0", Offset = "0x9A98B0", VA = "0x9A98B0", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x9A9960", Offset = "0x9A9960", VA = "0x9A9960", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x9A9A14", Offset = "0x9A9A14", VA = "0x9A9A14", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x9A9B2C", Offset = "0x9A9B2C", VA = "0x9A9B2C", Slot = "29")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__14))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x9A9BC8", Offset = "0x9A9BC8", VA = "0x9A9BC8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x9A9DE0", Offset = "0x9A9DE0", VA = "0x9A9DE0", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x9AA060", Offset = "0x9AA060", VA = "0x9AA060", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x9A7DE8", Offset = "0x9A7DE8", VA = "0x9A7DE8")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x20001D5")]
		[CompilerGenerated]
		private sealed class <get_Childs>d__14 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x40008D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40008D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONClass <>4__this;

			[Token(Token = "0x40008D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170000D0")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6000A21")]
				[Address(RVA = "0x9ABDB4", Offset = "0x9ABDB4", VA = "0x9ABDB4", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A23")]
				[Address(RVA = "0x9ABDFC", Offset = "0x9ABDFC", VA = "0x9ABDFC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0x9AAF64", Offset = "0x9AAF64", VA = "0x9AAF64")]
			[DebuggerHidden]
			public <get_Childs>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0x9ABB8C", Offset = "0x9ABB8C", VA = "0x9ABB8C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0x9ABBA8", Offset = "0x9ABBA8", VA = "0x9ABBA8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A20")]
			[Address(RVA = "0x9ABD64", Offset = "0x9ABD64", VA = "0x9ABD64")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000A22")]
			[Address(RVA = "0x9ABDBC", Offset = "0x9ABDBC", VA = "0x9ABDBC", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000A24")]
			[Address(RVA = "0x9ABE04", Offset = "0x9ABE04", VA = "0x9ABE04", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000A25")]
			[Address(RVA = "0x9ABEB0", Offset = "0x9ABEB0", VA = "0x9ABEB0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20001D6")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONClass <>4__this;

			[Token(Token = "0x40008D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170000D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A2A")]
				[Address(RVA = "0x9AC104", Offset = "0x9AC104", VA = "0x9AC104", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A2C")]
				[Address(RVA = "0x9AC14C", Offset = "0x9AC14C", VA = "0x9AC14C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A26")]
			[Address(RVA = "0x9AB00C", Offset = "0x9AB00C", VA = "0x9AB00C")]
			[DebuggerHidden]
			public <GetEnumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000A27")]
			[Address(RVA = "0x9ABEB4", Offset = "0x9ABEB4", VA = "0x9ABEB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A28")]
			[Address(RVA = "0x9ABED0", Offset = "0x9ABED0", VA = "0x9ABED0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A29")]
			[Address(RVA = "0x9AC0B4", Offset = "0x9AC0B4", VA = "0x9AC0B4")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0x9AC10C", Offset = "0x9AC10C", VA = "0x9AC10C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x170000CC")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x6000A0C")]
			[Address(RVA = "0x9AA6B4", Offset = "0x9AA6B4", VA = "0x9AA6B4", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A0D")]
			[Address(RVA = "0x9AA7BC", Offset = "0x9AA7BC", VA = "0x9AA7BC", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x6000A0E")]
			[Address(RVA = "0x9AA888", Offset = "0x9AA888", VA = "0x9AA888", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A0F")]
			[Address(RVA = "0x9AA928", Offset = "0x9AA928", VA = "0x9AA928", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public override int Count
		{
			[Token(Token = "0x6000A10")]
			[Address(RVA = "0x9AAA04", Offset = "0x9AAA04", VA = "0x9AAA04", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000CF")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6000A15")]
			[Address(RVA = "0x9AAEE0", Offset = "0x9AAEE0", VA = "0x9AAEE0", Slot = "16")]
			[IteratorStateMachine(typeof(<get_Childs>d__14))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x9AAA54", Offset = "0x9AAA54", VA = "0x9AAA54", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x9AAB68", Offset = "0x9AAB68", VA = "0x9AAB68", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x9AAC2C", Offset = "0x9AAC2C", VA = "0x9AAC2C", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x9AAD08", Offset = "0x9AAD08", VA = "0x9AAD08", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x9AAF98", Offset = "0x9AAF98", VA = "0x9AAF98", Slot = "29")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__15))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x9AB034", Offset = "0x9AB034", VA = "0x9AB034", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x9AB464", Offset = "0x9AB464", VA = "0x9AB464", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x9AB928", Offset = "0x9AB928", VA = "0x9AB928", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x9A7CF4", Offset = "0x9A7CF4", VA = "0x9A7CF4")]
		public JSONClass()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Data;

		[Token(Token = "0x170000D4")]
		public override string Value
		{
			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0x9AC154", Offset = "0x9AC154", VA = "0x9AC154", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0x9AC15C", Offset = "0x9AC15C", VA = "0x9AC15C", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x9A72EC", Offset = "0x9A72EC", VA = "0x9A72EC")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x9A87F4", Offset = "0x9A87F4", VA = "0x9A87F4")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x9A8784", Offset = "0x9A8784", VA = "0x9A8784")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x9A87BC", Offset = "0x9A87BC", VA = "0x9A87BC")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x9A874C", Offset = "0x9A874C", VA = "0x9A874C")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x9AC164", Offset = "0x9AC164", VA = "0x9AC164", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x9AC1BC", Offset = "0x9AC1BC", VA = "0x9AC1BC", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x9AC214", Offset = "0x9AC214", VA = "0x9AC214", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x20001D8")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JSONNode m_Node;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Key;

		[Token(Token = "0x170000D5")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0x9AC544", Offset = "0x9AC544", VA = "0x9AC544", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0x9AC5A4", Offset = "0x9AC5A4", VA = "0x9AC5A4", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x6000A3C")]
			[Address(RVA = "0x9AC624", Offset = "0x9AC624", VA = "0x9AC624", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0x9AC694", Offset = "0x9AC694", VA = "0x9AC694", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public override int AsInt
		{
			[Token(Token = "0x6000A46")]
			[Address(RVA = "0x9AC8F4", Offset = "0x9AC8F4", VA = "0x9AC8F4", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A47")]
			[Address(RVA = "0x9AC978", Offset = "0x9AC978", VA = "0x9AC978", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public override float AsFloat
		{
			[Token(Token = "0x6000A48")]
			[Address(RVA = "0x9ACA00", Offset = "0x9ACA00", VA = "0x9ACA00", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A49")]
			[Address(RVA = "0x9ACA84", Offset = "0x9ACA84", VA = "0x9ACA84", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		public override double AsDouble
		{
			[Token(Token = "0x6000A4A")]
			[Address(RVA = "0x9ACB0C", Offset = "0x9ACB0C", VA = "0x9ACB0C", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000A4B")]
			[Address(RVA = "0x9ACB90", Offset = "0x9ACB90", VA = "0x9ACB90", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		public override bool AsBool
		{
			[Token(Token = "0x6000A4C")]
			[Address(RVA = "0x9ACC18", Offset = "0x9ACC18", VA = "0x9ACC18", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A4D")]
			[Address(RVA = "0x9ACC9C", Offset = "0x9ACC9C", VA = "0x9ACC9C", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x6000A4E")]
			[Address(RVA = "0x9ACD24", Offset = "0x9ACD24", VA = "0x9ACD24", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DC")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0x9ACD8C", Offset = "0x9ACD8C", VA = "0x9ACD8C", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x9A9608", Offset = "0x9A9608", VA = "0x9A9608")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x9AA778", Offset = "0x9AA778", VA = "0x9AA778")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x9AC4E4", Offset = "0x9AC4E4", VA = "0x9AC4E4")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x9AC71C", Offset = "0x9AC71C", VA = "0x9AC71C", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x9AC79C", Offset = "0x9AC79C", VA = "0x9AC79C", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x9AC824", Offset = "0x9AC824", VA = "0x9AC824")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x9AC83C", Offset = "0x9AC83C", VA = "0x9AC83C")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x9AC854", Offset = "0x9AC854", VA = "0x9AC854", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x9AC86C", Offset = "0x9AC86C", VA = "0x9AC86C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x9AC874", Offset = "0x9AC874", VA = "0x9AC874", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x9AC8B4", Offset = "0x9AC8B4", VA = "0x9AC8B4", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D9")]
	public static class JSON
	{
		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x9ACDF4", Offset = "0x9ACDF4", VA = "0x9ACDF4")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace EpicToonFX
{
	[Token(Token = "0x20001DA")]
	public class ETFXButtonScript : MonoBehaviour
	{
		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Button;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text MyButtonText;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string projectileParticleName;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ETFXFireProjectile effectScript;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ETFXProjectileScript projectileScript;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float buttonsX;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float buttonsY;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float buttonsSizeX;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float buttonsSizeY;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float buttonsDistance;

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x9ACDF8", Offset = "0x9ACDF8", VA = "0x9ACDF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x9ACFB4", Offset = "0x9ACFB4", VA = "0x9ACFB4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x9ACF00", Offset = "0x9ACF00", VA = "0x9ACF00")]
		public void getProjectileNames()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x9ACFE0", Offset = "0x9ACFE0", VA = "0x9ACFE0")]
		public bool overButton()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x9AD0B8", Offset = "0x9AD0B8", VA = "0x9AD0B8")]
		public ETFXButtonScript()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public class ETFXFireProjectile : MonoBehaviour
	{
		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public GameObject[] projectiles;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Missile spawns at attached game object")]
		public Transform spawnPosition;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public int currentProjectile;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speed;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ETFXButtonScript selectedProjectileButton;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RaycastHit hit;

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x9AD0C0", Offset = "0x9AD0C0", VA = "0x9AD0C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x9AD13C", Offset = "0x9AD13C", VA = "0x9AD13C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x9AD50C", Offset = "0x9AD50C", VA = "0x9AD50C")]
		public void nextEffect()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x9AD548", Offset = "0x9AD548", VA = "0x9AD548")]
		public void previousEffect()
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x9AD584", Offset = "0x9AD584", VA = "0x9AD584")]
		public void AdjustSpeed(float newSpeed)
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x9AD58C", Offset = "0x9AD58C", VA = "0x9AD58C")]
		public ETFXFireProjectile()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public class ETFXLoopScript : MonoBehaviour
	{
		[Token(Token = "0x20001DD")]
		[CompilerGenerated]
		private sealed class <EffectLoop>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ETFXLoopScript <>4__this;

			[Token(Token = "0x40008F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <effectPlayer>5__2;

			[Token(Token = "0x170000DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A63")]
				[Address(RVA = "0x9AD934", Offset = "0x9AD934", VA = "0x9AD934", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A65")]
				[Address(RVA = "0x9AD97C", Offset = "0x9AD97C", VA = "0x9AD97C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A60")]
			[Address(RVA = "0x9AD660", Offset = "0x9AD660", VA = "0x9AD660")]
			[DebuggerHidden]
			public <EffectLoop>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000A61")]
			[Address(RVA = "0x9AD6A0", Offset = "0x9AD6A0", VA = "0x9AD6A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A62")]
			[Address(RVA = "0x9AD6A4", Offset = "0x9AD6A4", VA = "0x9AD6A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A64")]
			[Address(RVA = "0x9AD93C", Offset = "0x9AD93C", VA = "0x9AD93C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject chosenEffect;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float loopTimeLimit;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Spawn without")]
		public bool spawnWithoutLight;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool spawnWithoutSound;

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x9AD59C", Offset = "0x9AD59C", VA = "0x9AD59C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x9AD5A0", Offset = "0x9AD5A0", VA = "0x9AD5A0")]
		public void PlayEffect()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x9AD5EC", Offset = "0x9AD5EC", VA = "0x9AD5EC")]
		[IteratorStateMachine(typeof(<EffectLoop>d__6))]
		private IEnumerator EffectLoop()
		{
			return null;
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x9AD688", Offset = "0x9AD688", VA = "0x9AD688")]
		public ETFXLoopScript()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	public class ETFXMouseOrbit : MonoBehaviour
	{
		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float xSpeed;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ySpeed;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float yMinLimit;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float yMaxLimit;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float distanceMin;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float distanceMax;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float smoothTime;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float rotationYAxis;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float rotationXAxis;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float velocityX;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float velocityY;

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x9AD984", Offset = "0x9AD984", VA = "0x9AD984")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x9ADA50", Offset = "0x9ADA50", VA = "0x9ADA50")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x9ADDCC", Offset = "0x9ADDCC", VA = "0x9ADDCC")]
		public static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x9ADE08", Offset = "0x9ADE08", VA = "0x9ADE08")]
		public ETFXMouseOrbit()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public class ETFXTarget : MonoBehaviour
	{
		[Token(Token = "0x20001E0")]
		[CompilerGenerated]
		private sealed class <Respawn>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000904")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000905")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000906")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ETFXTarget <>4__this;

			[Token(Token = "0x170000DF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A72")]
				[Address(RVA = "0x9AE304", Offset = "0x9AE304", VA = "0x9AE304", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A74")]
				[Address(RVA = "0x9AE34C", Offset = "0x9AE34C", VA = "0x9AE34C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A6F")]
			[Address(RVA = "0x9AE224", Offset = "0x9AE224", VA = "0x9AE224")]
			[DebuggerHidden]
			public <Respawn>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000A70")]
			[Address(RVA = "0x9AE254", Offset = "0x9AE254", VA = "0x9AE254", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A71")]
			[Address(RVA = "0x9AE258", Offset = "0x9AE258", VA = "0x9AE258", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A73")]
			[Address(RVA = "0x9AE30C", Offset = "0x9AE30C", VA = "0x9AE30C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Effect shown on target hit")]
		public GameObject hitParticle;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Effect shown on target respawn")]
		public GameObject respawnParticle;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer targetRenderer;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider targetCollider;

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x9ADE24", Offset = "0x9ADE24", VA = "0x9ADE24")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x9ADEB4", Offset = "0x9ADEB4", VA = "0x9ADEB4")]
		private void SpawnTarget()
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x9ADFE4", Offset = "0x9ADFE4", VA = "0x9ADFE4")]
		private void OnTriggerEnter(Collider col)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x9AE1B0", Offset = "0x9AE1B0", VA = "0x9AE1B0")]
		[IteratorStateMachine(typeof(<Respawn>d__7))]
		private IEnumerator Respawn()
		{
			return null;
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x9AE24C", Offset = "0x9AE24C", VA = "0x9AE24C")]
		public ETFXTarget()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public class ETFXLightFade : MonoBehaviour
	{
		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Seconds to dim the light")]
		public float life;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool killAfterLife;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light li;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float initIntensity;

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x9AE354", Offset = "0x9AE354", VA = "0x9AE354")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x9AE470", Offset = "0x9AE470", VA = "0x9AE470")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x9AE5C4", Offset = "0x9AE5C4", VA = "0x9AE5C4")]
		public ETFXLightFade()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public class ETFXPitchRandomizer : MonoBehaviour
	{
		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float randomPercent;

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x9AE5E0", Offset = "0x9AE5E0", VA = "0x9AE5E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x9AE690", Offset = "0x9AE690", VA = "0x9AE690")]
		public ETFXPitchRandomizer()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public class ETFXRotation : MonoBehaviour
	{
		[Token(Token = "0x20001E4")]
		public enum spaceEnum
		{
			[Token(Token = "0x400090F")]
			Local,
			[Token(Token = "0x4000910")]
			World
		}

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotate axises by degrees per second")]
		public Vector3 rotateVector;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public spaceEnum rotateSpace;

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x9AE6A0", Offset = "0x9AE6A0", VA = "0x9AE6A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x9AE6A4", Offset = "0x9AE6A4", VA = "0x9AE6A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x9AE778", Offset = "0x9AE778", VA = "0x9AE778")]
		public ETFXRotation()
		{
		}
	}
}
namespace BzKovSoft.ObjectSlicer
{
	[Token(Token = "0x20001E5")]
	public class BzManualMeshAdapter : IBzSliceAdapter
	{
		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3[] _vertices;

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x9AE7D8", Offset = "0x9AE7D8", VA = "0x9AE7D8")]
		public BzManualMeshAdapter(Vector3[] vertices)
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x9AE808", Offset = "0x9AE808", VA = "0x9AE808", Slot = "4")]
		public Vector3 GetWorldPos(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x9AE844", Offset = "0x9AE844", VA = "0x9AE844", Slot = "5")]
		public Vector3 GetLocalPos(BzMeshData meshData, int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x9AE8A0", Offset = "0x9AE8A0", VA = "0x9AE8A0", Slot = "6")]
		public Vector3 GetWorldPos(BzMeshData meshData, int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x9AE8FC", Offset = "0x9AE8FC", VA = "0x9AE8FC", Slot = "7")]
		public Vector3 InverseTransformDirection(Vector3 p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x9AE900", Offset = "0x9AE900", VA = "0x9AE900", Slot = "8")]
		public bool Check(BzMeshData meshData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x9AE908", Offset = "0x9AE908", VA = "0x9AE908", Slot = "9")]
		public void RebuildMesh(Mesh mesh, Material[] materials, Renderer meshRenderer)
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x9AE948", Offset = "0x9AE948", VA = "0x9AE948", Slot = "10")]
		public Vector3 GetObjectCenterInWorldSpace()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20001E6")]
	public class BzMeshData
	{
		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> Vertices;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Vector3> Normals;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Color> Colors;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Color32> Colors32;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Vector2> UV;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Vector2> UV2;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<Vector2> UV3;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Vector2> UV4;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Vector4> Tangents;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<BoneWeight> BoneWeights;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly Matrix4x4[] Bindposes;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int[][] SubMeshes;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Material[] Materials;

		[Token(Token = "0x170000E1")]
		public bool NormalsExists
		{
			[Token(Token = "0x6000A85")]
			[Address(RVA = "0x9AE98C", Offset = "0x9AE98C", VA = "0x9AE98C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E2")]
		public bool ColorsExists
		{
			[Token(Token = "0x6000A86")]
			[Address(RVA = "0x9AE99C", Offset = "0x9AE99C", VA = "0x9AE99C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E3")]
		public bool Colors32Exists
		{
			[Token(Token = "0x6000A87")]
			[Address(RVA = "0x9AE9AC", Offset = "0x9AE9AC", VA = "0x9AE9AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E4")]
		public bool UVExists
		{
			[Token(Token = "0x6000A88")]
			[Address(RVA = "0x9AE9BC", Offset = "0x9AE9BC", VA = "0x9AE9BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E5")]
		public bool UV2Exists
		{
			[Token(Token = "0x6000A89")]
			[Address(RVA = "0x9AE9CC", Offset = "0x9AE9CC", VA = "0x9AE9CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E6")]
		public bool UV3Exists
		{
			[Token(Token = "0x6000A8A")]
			[Address(RVA = "0x9AE9DC", Offset = "0x9AE9DC", VA = "0x9AE9DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E7")]
		public bool UV4Exists
		{
			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0x9AE9EC", Offset = "0x9AE9EC", VA = "0x9AE9EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E8")]
		public bool TangentsExists
		{
			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0x9AE9FC", Offset = "0x9AE9FC", VA = "0x9AE9FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E9")]
		public bool BoneWeightsExists
		{
			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0x9AEA0C", Offset = "0x9AEA0C", VA = "0x9AEA0C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EA")]
		public bool MaterialsExists
		{
			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0x9AEA1C", Offset = "0x9AEA1C", VA = "0x9AEA1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x9AEA2C", Offset = "0x9AEA2C", VA = "0x9AEA2C")]
		public BzMeshData(Mesh initFrom, Material[] materials)
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x9AF064", Offset = "0x9AF064", VA = "0x9AF064")]
		public Mesh GenerateMesh()
		{
			return null;
		}
	}
	[Token(Token = "0x20001E7")]
	public class BzMeshDataDissector
	{
		[Token(Token = "0x400091F")]
		private const float MinWidth = 0.001f;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IBzSliceAdapter _adapter;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Plane _plane;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material _defaultSliceMaterial;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _sliced;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BzMeshData _meshDataNeg;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BzMeshData _meshDataPos;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[][] _subMeshes;

		[Token(Token = "0x170000EB")]
		public Material DefaultSliceMaterial
		{
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0x9AF258", Offset = "0x9AF258", VA = "0x9AF258")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A92")]
			[Address(RVA = "0x9AF260", Offset = "0x9AF260", VA = "0x9AF260")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		public IBzSliceAdapter Adapter
		{
			[Token(Token = "0x6000A93")]
			[Address(RVA = "0x9AF268", Offset = "0x9AF268", VA = "0x9AF268")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000ED")]
		public BzMeshData SliceResultNeg
		{
			[Token(Token = "0x6000A94")]
			[Address(RVA = "0x9AF270", Offset = "0x9AF270", VA = "0x9AF270")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EE")]
		public BzMeshData SliceResultPos
		{
			[Token(Token = "0x6000A95")]
			[Address(RVA = "0x9AF278", Offset = "0x9AF278", VA = "0x9AF278")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		public SliceConfigurationDto Configuration
		{
			[Token(Token = "0x6000A96")]
			[Address(RVA = "0x9AF280", Offset = "0x9AF280", VA = "0x9AF280")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A97")]
			[Address(RVA = "0x9AF288", Offset = "0x9AF288", VA = "0x9AF288")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		public List<PolyMeshData> CapsNeg
		{
			[Token(Token = "0x6000A98")]
			[Address(RVA = "0x9AF290", Offset = "0x9AF290", VA = "0x9AF290")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A99")]
			[Address(RVA = "0x9AF298", Offset = "0x9AF298", VA = "0x9AF298")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public List<PolyMeshData> CapsPos
		{
			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0x9AF2A0", Offset = "0x9AF2A0", VA = "0x9AF2A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A9B")]
			[Address(RVA = "0x9AF2A8", Offset = "0x9AF2A8", VA = "0x9AF2A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x9AF2B0", Offset = "0x9AF2B0", VA = "0x9AF2B0")]
		public BzMeshDataDissector(Mesh mesh, Plane plane, Material[] materials, IBzSliceAdapter adapter, SliceConfigurationDto configuration)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x9AF49C", Offset = "0x9AF49C", VA = "0x9AF49C")]
		public SliceResult Slice()
		{
			return default(SliceResult);
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x9AF620", Offset = "0x9AF620", VA = "0x9AF620")]
		private SliceResult SliceMesh(Material sectionViewMaterial)
		{
			return default(SliceResult);
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x9B11B0", Offset = "0x9B11B0", VA = "0x9B11B0")]
		public void RebuildNegMesh(Renderer meshRenderer)
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x9B1288", Offset = "0x9B1288", VA = "0x9B1288")]
		public void RebuildPosMesh(Renderer meshRenderer)
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x9B0FF4", Offset = "0x9B0FF4", VA = "0x9B0FF4")]
		private bool CheckNewMesh(BzMeshData meshData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x9B1360", Offset = "0x9B1360", VA = "0x9B1360")]
		private bool CheckMinWidth(BzMeshData meshData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x9B0128", Offset = "0x9B0128", VA = "0x9B0128")]
		private static int[] MakeTriangleToList(List<BzTriangle> bzTriangles, List<BzTriangle> bzTrianglesExtra)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E9")]
	public class BzMeshDataEditor
	{
		[Token(Token = "0x400092C")]
		private const float MinPointDistanceSqr = 1E-08f;

		[Token(Token = "0x400092D")]
		private const float MinPointAngle = 1E-06f;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<IndexVector> CapEdges;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IBzSliceAdapter _adapter;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly bool _skipIfNotClosed;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly Plane _plane;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Dictionary<IndexVector, int> _chashedOuterLines;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly BzMeshData _meshData;

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x9AFDF0", Offset = "0x9AFDF0", VA = "0x9AFDF0")]
		public BzMeshDataEditor(BzMeshData meshData, Plane plane, IBzSliceAdapter adapter, bool skipIfNotClosed)
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x9B15BC", Offset = "0x9B15BC", VA = "0x9B15BC")]
		public int GetIndexFor(int from, int to)
		{
			return default(int);
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x9B265C", Offset = "0x9B265C", VA = "0x9B265C")]
		private static void AddValue(List<Vector2> vectors, int from, int to, float ratioL)
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x9B02C8", Offset = "0x9B02C8", VA = "0x9B02C8")]
		public List<PolyMeshData> CapSlice(Material capMaterial)
		{
			return null;
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x9B091C", Offset = "0x9B091C", VA = "0x9B091C")]
		public void DeleteUnusedVertices()
		{
		}

		[Token(Token = "0x6000AAC")]
		private static void DeleteUnusedItem<T>(bool[] used, List<T> elements)
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x9B356C", Offset = "0x9B356C", VA = "0x9B356C")]
		private static bool TryAttachEdgeToList(IndexVector segment, LinkedLoop<int> toList)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x9B2794", Offset = "0x9B2794", VA = "0x9B2794")]
		public List<LinkedLoop<int>> GetEdgeLoops()
		{
			return null;
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x9B3624", Offset = "0x9B3624", VA = "0x9B3624")]
		public void EdgeLoops_JoinBySameValue(LinkedList<LinkedLoop<int>> edgeLoops)
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x9AFF38", Offset = "0x9AFF38", VA = "0x9AFF38")]
		public LinkedList<LinkedLoop<int>> GetEdgeLoopsByIndex()
		{
			return null;
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x9B2C5C", Offset = "0x9B2C5C", VA = "0x9B2C5C")]
		private void AddMeshes(List<PolyMeshData> meshes)
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x9B3918", Offset = "0x9B3918", VA = "0x9B3918")]
		private void AddVertex(Vector3 vertex, Vector3? normal, Color? color, Color32? color32, Vector2? uv, Vector2? uv2, Vector2? uv3, Vector2? uv4, Vector4? tangent, BoneWeight? boneWeight)
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x9B324C", Offset = "0x9B324C", VA = "0x9B324C")]
		private void DeleteEmptySubmeshes()
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x9B2534", Offset = "0x9B2534", VA = "0x9B2534")]
		private float CalcGetRatio(Vector3 v1, Vector3 v2, out Vector3 enter)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001EB")]
	public struct IndexVector : IEquatable<IndexVector>
	{
		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int From;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int To;

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x9B4F80", Offset = "0x9B4F80", VA = "0x9B4F80")]
		public IndexVector(int from, int to)
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x9B4F88", Offset = "0x9B4F88", VA = "0x9B4F88", Slot = "4")]
		public bool Equals(IndexVector obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x9B4FA8", Offset = "0x9B4FA8", VA = "0x9B4FA8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001EC")]
	[DisallowMultipleComponent]
	public abstract class BzSliceableBase : MonoBehaviour, IBzSliceable
	{
		[Token(Token = "0x20001ED")]
		protected class AdapterAndMesh
		{
			[Token(Token = "0x400093D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IBzSliceAdapter adapter;

			[Token(Token = "0x400093E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Mesh mesh;

			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0x9B6ECC", Offset = "0x9B6ECC", VA = "0x9B6ECC")]
			public AdapterAndMesh()
			{
			}
		}

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material defaultSliceMaterial;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool asynchronously;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool useLazyRunner;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Queue<SliceTry> _sliceTrys;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		public SliceTry lastSuccessfulSlice;

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x9B51B8", Offset = "0x9B51B8", VA = "0x9B51B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x9B5234", Offset = "0x9B5234", VA = "0x9B5234")]
		private void StartSlice(BzSliceTryData sliceTryData, IBzSliceAdapter[] adapters, Action<BzSliceTryResult> callBack)
		{
		}

		[Token(Token = "0x6000ABD")]
		protected abstract AdapterAndMesh GetAdapterAndMesh(Renderer renderer);

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x9B5BD0", Offset = "0x9B5BD0", VA = "0x9B5BD0", Slot = "6")]
		protected virtual void StartWorker(Action<object> method, object obj)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x9B5C60", Offset = "0x9B5C60", VA = "0x9B5C60")]
		private void WorkForWorker(object obj)
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x9B5830", Offset = "0x9B5830", VA = "0x9B5830")]
		private void Work(SliceTry sliceTry)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x9B5DB4", Offset = "0x9B5DB4", VA = "0x9B5DB4", Slot = "7")]
		protected virtual void OnSliceFinishedWorkerThread(bool sliced, object addData)
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x9B5DB8", Offset = "0x9B5DB8", VA = "0x9B5DB8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x9B59B4", Offset = "0x9B59B4", VA = "0x9B59B4")]
		private void SliceTryFinished(SliceTry sliceTry)
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x9B6230", Offset = "0x9B6230", VA = "0x9B6230")]
		private void InvokeEvents(GameObject resultNeg, GameObject resultPos)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x9B5E90", Offset = "0x9B5E90", VA = "0x9B5E90")]
		private BzSliceTryResult ApplyChanges(SliceTry sliceTry)
		{
			return null;
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x9B66CC", Offset = "0x9B66CC", VA = "0x9B66CC", Slot = "8")]
		protected virtual void GetNewObjects(out GameObject resultObjNeg, out GameObject resultObjPos)
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x9B6604", Offset = "0x9B6604", VA = "0x9B6604")]
		private static void DeleteRenderer(Renderer renderer)
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x9B6844", Offset = "0x9B6844", VA = "0x9B6844", Slot = "9")]
		protected virtual BzSliceTryData PrepareData(Plane plane)
		{
			return null;
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x9B69F8", Offset = "0x9B69F8", VA = "0x9B69F8", Slot = "10")]
		protected virtual void OnSliceFinished(BzSliceTryResult result)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x9B69FC", Offset = "0x9B69FC", VA = "0x9B69FC", Slot = "4")]
		public void Slice(Plane plane, Action<BzSliceTryResult> callBack)
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x9B6C54", Offset = "0x9B6C54", VA = "0x9B6C54")]
		public void RepeatSlice(Plane plane, IBzSliceAdapter[] adapters)
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x9B5DE0", Offset = "0x9B5DE0", VA = "0x9B5DE0")]
		private SliceTry GetFinishedTask()
		{
			return null;
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x9B639C", Offset = "0x9B639C", VA = "0x9B639C")]
		private static BzMeshSliceResult GetItemResult(SliceTryItem sliceTryItem, Renderer rendererNeg, Renderer rendererPos)
		{
			return null;
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x9B6E04", Offset = "0x9B6E04", VA = "0x9B6E04")]
		private static BzSliceEdgeResult MakeEdgeResult(PolyMeshData polyMeshData)
		{
			return null;
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x9B5684", Offset = "0x9B5684", VA = "0x9B5684")]
		private Renderer[] GetRenderers(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x9B6EA0", Offset = "0x9B6EA0", VA = "0x9B6EA0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x9B6EC4", Offset = "0x9B6EC4", VA = "0x9B6EC4")]
		protected BzSliceableBase()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public abstract class BzSliceableObjectBase : BzSliceableBase
	{
		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x9B6ED4", Offset = "0x9B6ED4", VA = "0x9B6ED4", Slot = "5")]
		protected override AdapterAndMesh GetAdapterAndMesh(Renderer renderer)
		{
			return null;
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x9B711C", Offset = "0x9B711C", VA = "0x9B711C")]
		protected BzSliceableObjectBase()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	internal class BzSliceColliderAdapter : IBzSliceAdapter
	{
		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Matrix4x4 _ltw;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Matrix4x4 _wtl;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] _vertices;

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x9B7124", Offset = "0x9B7124", VA = "0x9B7124")]
		public BzSliceColliderAdapter(Vector3[] vertices, GameObject gameObject)
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x9B71D4", Offset = "0x9B71D4", VA = "0x9B71D4", Slot = "4")]
		public Vector3 GetWorldPos(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x9B7218", Offset = "0x9B7218", VA = "0x9B7218", Slot = "5")]
		public Vector3 GetLocalPos(BzMeshData meshData, int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x9B7274", Offset = "0x9B7274", VA = "0x9B7274", Slot = "6")]
		public Vector3 GetWorldPos(BzMeshData meshData, int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x9B72EC", Offset = "0x9B72EC", VA = "0x9B72EC", Slot = "7")]
		public Vector3 InverseTransformDirection(Vector3 p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x9B72F8", Offset = "0x9B72F8", VA = "0x9B72F8", Slot = "8")]
		public bool Check(BzMeshData meshData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x9B7300", Offset = "0x9B7300", VA = "0x9B7300", Slot = "9")]
		public void RebuildMesh(Mesh mesh, Material[] materials, Renderer meshRenderer)
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x9B7340", Offset = "0x9B7340", VA = "0x9B7340", Slot = "10")]
		public Vector3 GetObjectCenterInWorldSpace()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20001F0")]
	[DisallowMultipleComponent]
	public class BzSliceConfiguration : MonoBehaviour
	{
		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SliceType SliceType;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material SliceMaterial;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool CreateCap;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool SkipIfNotClosed;

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x9B56D4", Offset = "0x9B56D4", VA = "0x9B56D4")]
		public SliceConfigurationDto GetDto()
		{
			return null;
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x9B57A4", Offset = "0x9B57A4", VA = "0x9B57A4")]
		public static SliceConfigurationDto GetDefault()
		{
			return null;
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x9B73A8", Offset = "0x9B73A8", VA = "0x9B73A8")]
		public BzSliceConfiguration()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public class BzSliceMeshFilterAdapter : IBzSliceAdapter, IXmlSerializable
	{
		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Matrix4x4 _l2w;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Matrix4x4 _w2l;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] _vertices;

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x9B73B8", Offset = "0x9B73B8", VA = "0x9B73B8")]
		public BzSliceMeshFilterAdapter()
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x9B706C", Offset = "0x9B706C", VA = "0x9B706C")]
		public BzSliceMeshFilterAdapter(Vector3[] vertices, MeshRenderer renderer)
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x9B73C0", Offset = "0x9B73C0", VA = "0x9B73C0", Slot = "4")]
		public Vector3 GetWorldPos(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x9B7404", Offset = "0x9B7404", VA = "0x9B7404", Slot = "5")]
		public Vector3 GetLocalPos(BzMeshData meshData, int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x9B7460", Offset = "0x9B7460", VA = "0x9B7460", Slot = "6")]
		public Vector3 GetWorldPos(BzMeshData meshData, int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x9B74D8", Offset = "0x9B74D8", VA = "0x9B74D8", Slot = "7")]
		public Vector3 InverseTransformDirection(Vector3 p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x9B7568", Offset = "0x9B7568", VA = "0x9B7568", Slot = "8")]
		public bool Check(BzMeshData meshData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x9B7570", Offset = "0x9B7570", VA = "0x9B7570", Slot = "9")]
		public void RebuildMesh(Mesh mesh, Material[] materials, Renderer meshRenderer)
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x9B75FC", Offset = "0x9B75FC", VA = "0x9B75FC", Slot = "10")]
		public Vector3 GetObjectCenterInWorldSpace()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x9B7654", Offset = "0x9B7654", VA = "0x9B7654", Slot = "11")]
		public XmlSchema GetSchema()
		{
			return null;
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x9B765C", Offset = "0x9B765C", VA = "0x9B765C", Slot = "12")]
		public void ReadXml(XmlReader reader)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x9B78C4", Offset = "0x9B78C4", VA = "0x9B78C4", Slot = "13")]
		public void WriteXml(XmlWriter writer)
		{
		}
	}
	[Token(Token = "0x20001F2")]
	internal static class BzSlicerHelper
	{
		[Token(Token = "0x6000AEC")]
		public static T GetSameComponentForDuplicate<T>(T c, GameObject original, GameObject duplicate) where T : Component
		{
			return null;
		}
	}
	[Token(Token = "0x20001F3")]
	public class BzSliceTryData
	{
		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IComponentManager componentManager;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Plane plane;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public object addData;

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x9B696C", Offset = "0x9B696C", VA = "0x9B696C")]
		public BzSliceTryData()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class BzSliceTryResult
	{
		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BzMeshSliceResult[] meshItems;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool sliced;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly object addData;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject outObjectNeg;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject outObjectPos;

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x9B61F8", Offset = "0x9B61F8", VA = "0x9B61F8")]
		public BzSliceTryResult(bool sliced, object addData)
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class BzMeshSliceResult
	{
		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BzSliceEdgeResult[] sliceEdgesNeg;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer rendererNeg;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BzSliceEdgeResult[] sliceEdgesPos;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer rendererPos;

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x9B6DFC", Offset = "0x9B6DFC", VA = "0x9B6DFC")]
		public BzMeshSliceResult()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public class BzSliceEdgeResult
	{
		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] vertices;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] normals;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoneWeight[] boneWeights;

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x9B6E98", Offset = "0x9B6E98", VA = "0x9B6E98")]
		public BzSliceEdgeResult()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public struct BzTriangle
	{
		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int i1;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int i2;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int i3;

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x9B7AB0", Offset = "0x9B7AB0", VA = "0x9B7AB0")]
		public BzTriangle(int i1, int i2, int i3)
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x9B7ABC", Offset = "0x9B7ABC", VA = "0x9B7ABC")]
		public void DivideByPlane(BzMeshDataEditor meshDataEditorNeg, BzMeshDataEditor meshDataEditorPos, List<BzTriangle> trianglesNegSliced, List<BzTriangle> trianglesPosSliced, bool _side1, bool _side2, bool _side3)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x9B7C28", Offset = "0x9B7C28", VA = "0x9B7C28")]
		private static void CalculateOneTr(BzMeshDataEditor meshDataEditor, int inV, int outA, int outB, List<BzTriangle> trianglesSliced)
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x9B7DC4", Offset = "0x9B7DC4", VA = "0x9B7DC4")]
		private static void CalculateTwoTr(BzMeshDataEditor meshDataEditor, int outV, int inA, int inB, List<BzTriangle> trianglesSliced)
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class FallingObjGC : MonoBehaviour
	{
		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _enableLog;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _delaySec;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minPosY;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float _nextTime;

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x9B8018", Offset = "0x9B8018", VA = "0x9B8018")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x9B8234", Offset = "0x9B8234", VA = "0x9B8234")]
		public FallingObjGC()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public interface IBzSliceable
	{
		[Token(Token = "0x6000AF7")]
		void Slice(Plane plane, Action<BzSliceTryResult> callBack);
	}
	[Token(Token = "0x20001FA")]
	[Obsolete("Use IBzSliceable interface", true)]
	public interface IBzSliceableAsync : IBzSliceable
	{
	}
	[Token(Token = "0x20001FB")]
	public interface IBzSliceAdapter
	{
		[Token(Token = "0x6000AF8")]
		Vector3 GetWorldPos(int index);

		[Token(Token = "0x6000AF9")]
		Vector3 GetLocalPos(BzMeshData meshData, int index);

		[Token(Token = "0x6000AFA")]
		Vector3 GetWorldPos(BzMeshData meshData, int index);

		[Token(Token = "0x6000AFB")]
		Vector3 InverseTransformDirection(Vector3 p);

		[Token(Token = "0x6000AFC")]
		bool Check(BzMeshData meshData);

		[Token(Token = "0x6000AFD")]
		void RebuildMesh(Mesh mesh, Material[] materials, Renderer meshRenderer);

		[Token(Token = "0x6000AFE")]
		Vector3 GetObjectCenterInWorldSpace();
	}
	[Token(Token = "0x20001FC")]
	public interface IComponentManager
	{
		[Token(Token = "0x170000F2")]
		bool Success
		{
			[Token(Token = "0x6000AFF")]
			get;
		}

		[Token(Token = "0x6000B00")]
		void OnSlicedWorkerThread(SliceTryItem[] items);

		[Token(Token = "0x6000B01")]
		void OnSlicedMainThread(GameObject resultObjNeg, GameObject resultObjPos, Renderer[] renderersNeg, Renderer[] renderersPos);
	}
	[Token(Token = "0x20001FD")]
	[DisallowMultipleComponent]
	public class LazyActionRunner : MonoBehaviour
	{
		[Token(Token = "0x20001FE")]
		[CompilerGenerated]
		private sealed class <ProcessSlicePostponeActions>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000960")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000961")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000962")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<Action> actions;

			[Token(Token = "0x4000963")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LazyActionRunner <>4__this;

			[Token(Token = "0x4000964")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__2;

			[Token(Token = "0x170000F3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B0A")]
				[Address(RVA = "0x9B8574", Offset = "0x9B8574", VA = "0x9B8574", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B0C")]
				[Address(RVA = "0x9B85BC", Offset = "0x9B85BC", VA = "0x9B85BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B07")]
			[Address(RVA = "0x9B835C", Offset = "0x9B835C", VA = "0x9B835C")]
			[DebuggerHidden]
			public <ProcessSlicePostponeActions>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000B08")]
			[Address(RVA = "0x9B8458", Offset = "0x9B8458", VA = "0x9B8458", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B09")]
			[Address(RVA = "0x9B845C", Offset = "0x9B845C", VA = "0x9B845C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B0B")]
			[Address(RVA = "0x9B857C", Offset = "0x9B857C", VA = "0x9B857C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Action> _postponeActions;

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x9B8250", Offset = "0x9B8250", VA = "0x9B8250")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x9B636C", Offset = "0x9B636C", VA = "0x9B636C")]
		public void RunLazyActions()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x9B82CC", Offset = "0x9B82CC", VA = "0x9B82CC")]
		[IteratorStateMachine(typeof(<ProcessSlicePostponeActions>d__3))]
		private IEnumerator ProcessSlicePostponeActions(List<Action> actions)
		{
			return null;
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x9B8384", Offset = "0x9B8384", VA = "0x9B8384")]
		public void AddLazyAction(Action action)
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x9B8450", Offset = "0x9B8450", VA = "0x9B8450")]
		public LazyActionRunner()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class LinkedLoop<T>
	{
		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int size;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LoopNode<T> first;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LoopNode<T> last;

		[Token(Token = "0x6000B0D")]
		public LinkedLoop()
		{
		}

		[Token(Token = "0x6000B0E")]
		public LinkedLoop(List<T> list)
		{
		}

		[Token(Token = "0x6000B0F")]
		public void InsertAfter(LoopNode<T> position, LoopNode<T> nodeFrom, LoopNode<T> nodeTo)
		{
		}

		[Token(Token = "0x6000B10")]
		public void AddLast(LoopNode<T> node)
		{
		}

		[Token(Token = "0x6000B11")]
		public void AddFirst(T value)
		{
		}

		[Token(Token = "0x6000B12")]
		public void InsertAfter(LoopNode<T> node, T value)
		{
		}

		[Token(Token = "0x6000B13")]
		public void AddLast(T value)
		{
		}

		[Token(Token = "0x6000B14")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000200")]
	public static class LinkedLoop
	{
		[Token(Token = "0x6000B15")]
		public static LinkedLoop<T> ConcatList<T>(LinkedLoop<T> listA, LinkedLoop<T> listB)
		{
			return null;
		}
	}
	[Token(Token = "0x2000201")]
	public class LoopNode<T>
	{
		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LinkedLoop<T> list;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T value;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LoopNode<T> previous;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LoopNode<T> next;

		[Token(Token = "0x6000B16")]
		public LoopNode(LinkedLoop<T> list, T value)
		{
		}

		[Token(Token = "0x6000B17")]
		public void Remove()
		{
		}

		[Token(Token = "0x6000B18")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000202")]
	public static class MeshTriangleOptimizer
	{
		[Token(Token = "0x400096C")]
		private const float _angleTrashold = 1E-05f;

		[Token(Token = "0x400096D")]
		private const string _indexNotFoundTxt = "Index not found";

		[Token(Token = "0x400096E")]
		private const string _middleAndSameRoot = "Middle triangles found, but root vertices is the same";

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x9B85C4", Offset = "0x9B85C4", VA = "0x9B85C4")]
		public static void OptimizeEdgeTriangles(LinkedList<LinkedLoop<int>> edgeLoopsByIndex, BzMeshData meshData, List<BzTriangle> bzTriangles)
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x9B89F8", Offset = "0x9B89F8", VA = "0x9B89F8")]
		private static bool EmptyRedundantIndex(int indexLeft, int indexMiddle, int indexRight, List<Vector3> vertices, List<BzTriangle> bzTriangles, bool[] trToDelete)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x9B88EC", Offset = "0x9B88EC", VA = "0x9B88EC")]
		private static float GetAngleRad(Vector3 dir1, Vector3 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x9B922C", Offset = "0x9B922C", VA = "0x9B922C")]
		private static bool GetIndexesOrdered(BzTriangle tr, int i1, out int i2, out int i3)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000203")]
	public class ObjectSlicerInitializer : MonoBehaviour
	{
		[Token(Token = "0x2000204")]
		private class ObjectSlicerInitializerObj : BzSliceableObjectBase
		{
			[Token(Token = "0x6000B20")]
			[Address(RVA = "0x9B9514", Offset = "0x9B9514", VA = "0x9B9514")]
			public ObjectSlicerInitializerObj()
			{
			}
		}

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x9B9280", Offset = "0x9B9280", VA = "0x9B9280")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x9B92E0", Offset = "0x9B92E0", VA = "0x9B92E0")]
		private static void Init()
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x9B950C", Offset = "0x9B950C", VA = "0x9B950C")]
		public ObjectSlicerInitializer()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class SliceConfigurationDto
	{
		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SliceType SliceType;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material SliceMaterial;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool CreateCap;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool SkipIfNotClosed;

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x9B7398", Offset = "0x9B7398", VA = "0x9B7398")]
		public SliceConfigurationDto()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public enum SliceType
	{
		[Token(Token = "0x4000977")]
		Slice,
		[Token(Token = "0x4000978")]
		Duplicate,
		[Token(Token = "0x4000979")]
		KeepOne
	}
	[Token(Token = "0x2000208")]
	public enum SliceResult
	{
		[Token(Token = "0x400097B")]
		Neg,
		[Token(Token = "0x400097C")]
		Pos,
		[Token(Token = "0x400097D")]
		Sliced,
		[Token(Token = "0x400097E")]
		Duplicate
	}
	[Token(Token = "0x2000209")]
	public class SliceTry
	{
		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SliceTryItem[] items;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _finished;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BzSliceTryData sliceData;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<BzSliceTryResult> callBack;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool sliced;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 position;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Quaternion rotation;

		[Token(Token = "0x170000F5")]
		public bool Finished
		{
			[Token(Token = "0x6000B25")]
			[Address(RVA = "0x9B6DE0", Offset = "0x9B6DE0", VA = "0x9B6DE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B26")]
			[Address(RVA = "0x9B5DA4", Offset = "0x9B5DA4", VA = "0x9B5DA4")]
			set
			{
			}
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x9B5828", Offset = "0x9B5828", VA = "0x9B5828")]
		public SliceTry()
		{
		}
	}
	[Token(Token = "0x200020A")]
	public class SliceTryItem
	{
		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BzMeshDataDissector meshDissector;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer meshRenderer;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SliceResult SliceResult;

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x9B5820", Offset = "0x9B5820", VA = "0x9B5820")]
		public SliceTryItem()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class StaticComponentManager : IComponentManager
	{
		[Token(Token = "0x200020C")]
		protected class ColliderSliceResult
		{
			[Token(Token = "0x400098C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Collider OriginalCollider;

			[Token(Token = "0x400098D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public BzMeshDataDissector meshDissector;

			[Token(Token = "0x400098E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SliceResult SliceResult;

			[Token(Token = "0x6000B31")]
			[Address(RVA = "0x9BD198", Offset = "0x9BD198", VA = "0x9BD198")]
			public ColliderSliceResult()
			{
			}
		}

		[Token(Token = "0x200020D")]
		protected class MeshColliderConf
		{
			[Token(Token = "0x400098F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly Mesh Mesh;

			[Token(Token = "0x4000990")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly PhysicMaterial Material;

			[Token(Token = "0x6000B32")]
			[Address(RVA = "0x9BA38C", Offset = "0x9BA38C", VA = "0x9BA38C")]
			public MeshColliderConf(Mesh mesh, PhysicMaterial material)
			{
			}
		}

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly GameObject _originalObject;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly Plane _plane;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected readonly ColliderSliceResult[] _colliderResults;

		[Token(Token = "0x170000F6")]
		public bool Success
		{
			[Token(Token = "0x6000B29")]
			[Address(RVA = "0x9B9648", Offset = "0x9B9648", VA = "0x9B9648", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x9B6974", Offset = "0x9B6974", VA = "0x9B6974")]
		public StaticComponentManager(GameObject go, Plane plane, Collider[] colliders)
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x9B9BFC", Offset = "0x9B9BFC", VA = "0x9B9BFC", Slot = "5")]
		public void OnSlicedWorkerThread(SliceTryItem[] items)
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x9B9C74", Offset = "0x9B9C74", VA = "0x9B9C74", Slot = "6")]
		public void OnSlicedMainThread(GameObject resultObjNeg, GameObject resultObjPos, Renderer[] renderersNeg, Renderer[] renderersPos)
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x9B9D28", Offset = "0x9B9D28", VA = "0x9B9D28")]
		protected void RepairColliders(GameObject resultNeg, GameObject resultPos, List<Collider> collidersNeg, List<Collider> collidersPos)
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x9BA3D0", Offset = "0x9BA3D0", VA = "0x9BA3D0")]
		private static void AddCollider(MeshColliderConf colliderConf, GameObject go, Collider originalCollider)
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x9B9658", Offset = "0x9B9658", VA = "0x9B9658")]
		private static ColliderSliceResult[] SliceColliders(Plane plane, Collider[] colliders)
		{
			return null;
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x9BACCC", Offset = "0x9BACCC", VA = "0x9BACCC")]
		protected static ColliderSliceResult PrepareSliceCollider(Collider collider, Mesh mesh, Plane plane)
		{
			return null;
		}
	}
}
namespace BzKovSoft.ObjectSlicer.Samples
{
	[Token(Token = "0x200020F")]
	public class AdderSliceableAsync : MonoBehaviour
	{
		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x9BD1C0", Offset = "0x9BD1C0", VA = "0x9BD1C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x9BD330", Offset = "0x9BD330", VA = "0x9BD330")]
		public AdderSliceableAsync()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class BzKnife : MonoBehaviour
	{
		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 _prevPos;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 _pos;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private Vector3 _origin;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Vector3 _direction;

		[Token(Token = "0x170000F7")]
		public int SliceID
		{
			[Token(Token = "0x6000B38")]
			[Address(RVA = "0x9BD338", Offset = "0x9BD338", VA = "0x9BD338")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B39")]
			[Address(RVA = "0x9BD340", Offset = "0x9BD340", VA = "0x9BD340")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000F8")]
		public Vector3 Origin
		{
			[Token(Token = "0x6000B3B")]
			[Address(RVA = "0x9BD388", Offset = "0x9BD388", VA = "0x9BD388")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F9")]
		public Vector3 BladeDirection
		{
			[Token(Token = "0x6000B3C")]
			[Address(RVA = "0x9BD424", Offset = "0x9BD424", VA = "0x9BD424")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000FA")]
		public Vector3 MoveDirection
		{
			[Token(Token = "0x6000B3D")]
			[Address(RVA = "0x9BD548", Offset = "0x9BD548", VA = "0x9BD548")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x9BD348", Offset = "0x9BD348", VA = "0x9BD348")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x9BD62C", Offset = "0x9BD62C", VA = "0x9BD62C")]
		public void BeginNewSlice()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x9BD6D4", Offset = "0x9BD6D4", VA = "0x9BD6D4")]
		public BzKnife()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public interface IBzSliceableNoRepeat
	{
		[Token(Token = "0x6000B40")]
		void Slice(Plane plane, int slicdId, Action<BzSliceTryResult> callBack);
	}
	[Token(Token = "0x2000212")]
	[DisallowMultipleComponent]
	public class KnifeSliceableAsync : MonoBehaviour
	{
		[Token(Token = "0x2000213")]
		[CompilerGenerated]
		private sealed class <Slice>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400099D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400099E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400099F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KnifeSliceableAsync <>4__this;

			[Token(Token = "0x40009A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BzKnife knife;

			[Token(Token = "0x170000FB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B49")]
				[Address(RVA = "0x9BDC64", Offset = "0x9BDC64", VA = "0x9BDC64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B4B")]
				[Address(RVA = "0x9BDCAC", Offset = "0x9BDCAC", VA = "0x9BDCAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B46")]
			[Address(RVA = "0x9BD918", Offset = "0x9BD918", VA = "0x9BD918")]
			[DebuggerHidden]
			public <Slice>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000B47")]
			[Address(RVA = "0x9BDAAC", Offset = "0x9BDAAC", VA = "0x9BDAAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B48")]
			[Address(RVA = "0x9BDAB0", Offset = "0x9BDAB0", VA = "0x9BDAB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0x9BDC6C", Offset = "0x9BDC6C", VA = "0x9BDC6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IBzSliceableNoRepeat _sliceableAsync;

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x9BD768", Offset = "0x9BD768", VA = "0x9BD768")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x9BD7C0", Offset = "0x9BD7C0", VA = "0x9BD7C0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x9BD888", Offset = "0x9BD888", VA = "0x9BD888")]
		[IteratorStateMachine(typeof(<Slice>d__3))]
		private IEnumerator Slice(BzKnife knife)
		{
			return null;
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x9BD940", Offset = "0x9BD940", VA = "0x9BD940")]
		private Vector3 GetCollisionPoint(BzKnife knife)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x9BDAA4", Offset = "0x9BDAA4", VA = "0x9BDAA4")]
		public KnifeSliceableAsync()
		{
		}
	}
	[Token(Token = "0x2000214")]
	public class MoveCamera : MonoBehaviour
	{
		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float TurnSpeed;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MoveSpeed;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float yaw;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float pitch;

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x9BDCB4", Offset = "0x9BDCB4", VA = "0x9BDCB4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x9BE0BC", Offset = "0x9BE0BC", VA = "0x9BE0BC")]
		public MoveCamera()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public class ObjectSlicerSample : BzSliceableObjectBase, IBzSliceableNoRepeat
	{
		[Token(Token = "0x2000216")]
		private class ResultData
		{
			[Token(Token = "0x40009A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int vertexCount;

			[Token(Token = "0x40009AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Stopwatch stopwatch;

			[Token(Token = "0x6000B54")]
			[Address(RVA = "0x9BE430", Offset = "0x9BE430", VA = "0x9BE430")]
			public ResultData()
			{
			}
		}

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private int _sliceId;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		[SerializeField]
		private float _lastSliceTime;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float delayBetweenSlices;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string drawText;

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x9BE0CC", Offset = "0x9BE0CC", VA = "0x9BE0CC", Slot = "11")]
		public void Slice(Plane plane, int sliceId, Action<BzSliceTryResult> callBack)
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x9BE210", Offset = "0x9BE210", VA = "0x9BE210", Slot = "9")]
		protected override BzSliceTryData PrepareData(Plane plane)
		{
			return null;
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x9BE438", Offset = "0x9BE438", VA = "0x9BE438", Slot = "10")]
		protected override void OnSliceFinished(BzSliceTryResult result)
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x9BE800", Offset = "0x9BE800", VA = "0x9BE800")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x9BE8C0", Offset = "0x9BE8C0", VA = "0x9BE8C0")]
		public ObjectSlicerSample()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class SampleKnifeSlicer : MonoBehaviour
	{
		[Token(Token = "0x2000218")]
		[CompilerGenerated]
		private sealed class <SwingSword>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SampleKnifeSlicer <>4__this;

			[Token(Token = "0x40009AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform <transformB>5__2;

			[Token(Token = "0x40009B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <f>5__3;

			[Token(Token = "0x170000FD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B5B")]
				[Address(RVA = "0x9BECD8", Offset = "0x9BECD8", VA = "0x9BECD8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B5D")]
				[Address(RVA = "0x9BED20", Offset = "0x9BED20", VA = "0x9BED20", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B58")]
			[Address(RVA = "0x9BEA8C", Offset = "0x9BEA8C", VA = "0x9BEA8C")]
			[DebuggerHidden]
			public <SwingSword>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000B59")]
			[Address(RVA = "0x9BEABC", Offset = "0x9BEABC", VA = "0x9BEABC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0x9BEAC0", Offset = "0x9BEAC0", VA = "0x9BEAC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0x9BECE0", Offset = "0x9BECE0", VA = "0x9BECE0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _blade;

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x9BE940", Offset = "0x9BE940", VA = "0x9BE940")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x9BEA18", Offset = "0x9BEA18", VA = "0x9BEA18")]
		[IteratorStateMachine(typeof(<SwingSword>d__2))]
		private IEnumerator SwingSword()
		{
			return null;
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x9BEAB4", Offset = "0x9BEAB4", VA = "0x9BEAB4")]
		public SampleKnifeSlicer()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class SampleManualSlicer : MonoBehaviour
	{
		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject _target;

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x9BED28", Offset = "0x9BED28", VA = "0x9BED28")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x9BEFBC", Offset = "0x9BEFBC", VA = "0x9BEFBC")]
		public SampleManualSlicer()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class SampleMouseSlicer : MonoBehaviour
	{
		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x9BEFC4", Offset = "0x9BEFC4", VA = "0x9BEFC4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x9BF2B0", Offset = "0x9BF2B0", VA = "0x9BF2B0")]
		public SampleMouseSlicer()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public static class SliceIdProvider
	{
		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _sliceId;

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x9BD684", Offset = "0x9BD684", VA = "0x9BD684")]
		public static int GetNewSliceId()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200021C")]
	public class Katana : MonoBehaviour
	{
		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Grabbable grabbable;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rb;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform velocityPoint;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource aSource;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject SlicerPlane;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip[] whooshSounds;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<int> slicedObjects;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 lastPos;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float velocity;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 deltaPos;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 whooshDir;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float whooshTime;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool changedDir;

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x9BF2B8", Offset = "0x9BF2B8", VA = "0x9BF2B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x9BF508", Offset = "0x9BF508", VA = "0x9BF508")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x9BF96C", Offset = "0x9BF96C", VA = "0x9BF96C")]
		private void WhooshSound()
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x9BFC74", Offset = "0x9BFC74", VA = "0x9BFC74")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x9BFEA4", Offset = "0x9BFEA4", VA = "0x9BFEA4")]
		public Katana()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class PlaneSlicer : MonoBehaviour
	{
		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool sliced;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool isRightHand;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 objPosition;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int objValue;

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x9BFFC8", Offset = "0x9BFFC8", VA = "0x9BFFC8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x9C0038", Offset = "0x9C0038", VA = "0x9C0038")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x9C0318", Offset = "0x9C0318", VA = "0x9C0318")]
		private void SliceCallback(BzSliceTryResult r)
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x9C0530", Offset = "0x9C0530", VA = "0x9C0530")]
		public PlaneSlicer()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class SlicedPart : MonoBehaviour
	{
		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float gravity;

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x9C0538", Offset = "0x9C0538", VA = "0x9C0538")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x9C0658", Offset = "0x9C0658", VA = "0x9C0658")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x9C0794", Offset = "0x9C0794", VA = "0x9C0794")]
		public SlicedPart()
		{
		}
	}
}
namespace BzKovSoft.ObjectSlicer.Polygon
{
	[Token(Token = "0x2000220")]
	public class BzPoly
	{
		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LoopIndex[] _loopPoints;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<int> _newTriangles;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<IndexVector> outerToInnerConnections;

		[Token(Token = "0x170000FF")]
		public bool Created
		{
			[Token(Token = "0x6000B73")]
			[Address(RVA = "0x9C07A8", Offset = "0x9C07A8", VA = "0x9C07A8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B74")]
			[Address(RVA = "0x9C07B0", Offset = "0x9C07B0", VA = "0x9C07B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x9C07BC", Offset = "0x9C07BC", VA = "0x9C07BC")]
		public BzPoly(BzPolyLoop outer, BzPolyLoop[] inners)
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x9C08B8", Offset = "0x9C08B8", VA = "0x9C08B8")]
		private LoopIndex[] CombineLoops(BzPolyLoop outer, BzPolyLoop[] inners)
		{
			return null;
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x9C11FC", Offset = "0x9C11FC", VA = "0x9C11FC")]
		private bool GetShortestConnection(LoopIndexCollection outerData, LoopIndexCollection innerData, BzPolyLoop[] allLoops, out LoopNode<LoopIndex> minOliNode, out LoopNode<LoopIndex> minIliNode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x9C0F24", Offset = "0x9C0F24", VA = "0x9C0F24")]
		private static LoopIndexCollection GetIndexCollection(BzPolyLoop loop)
		{
			return null;
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x9C1650", Offset = "0x9C1650", VA = "0x9C1650")]
		private static bool HaveLineSegmentsIntersection(Vector2 a1, Vector2 a2, Vector2 b1, Vector2 b2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x9C1428", Offset = "0x9C1428", VA = "0x9C1428")]
		private static bool HaveLineSegmentsIntersection(BzPolyLoop[] loops, LoopIndex l1, LoopIndex l2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x9C0CB4", Offset = "0x9C0CB4", VA = "0x9C0CB4")]
		private List<int> GetTriangles()
		{
			return null;
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x9C16D0", Offset = "0x9C16D0", VA = "0x9C16D0")]
		private float GetDistance(int i1, int i2)
		{
			return default(float);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x9C18DC", Offset = "0x9C18DC", VA = "0x9C18DC")]
		private static void CreateTriangle(List<int> triangles, int i1, int i2, int i3)
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x9C172C", Offset = "0x9C172C", VA = "0x9C172C")]
		private bool IsAllowedToCreateTriangle(LinkedLoop<int> linkList, int i1, int i2, int i3)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x9C1A60", Offset = "0x9C1A60", VA = "0x9C1A60")]
		private static bool PointInTriangle(ref Vector2 pt, ref Vector2 v1, ref Vector2 v2, ref Vector2 v3)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x9C1AE8", Offset = "0x9C1AE8", VA = "0x9C1AE8")]
		public PolyMeshData GetMeshData()
		{
			return null;
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x9C2AC4", Offset = "0x9C2AC4", VA = "0x9C2AC4")]
		private Vector3 Normalize(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x9C26B8", Offset = "0x9C26B8", VA = "0x9C26B8")]
		private void OptimizeData(out LoopIndex[] newLoopIndexers, out int[] triangles)
		{
		}
	}
	[Token(Token = "0x2000221")]
	public class BzPolyLoop
	{
		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<int> triangles;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly LinkedLoop<int> edgeLoop;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Vector2[] polyVertices2D;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly BzMeshData meshData;

		[Token(Token = "0x17000100")]
		public bool OuterLoop
		{
			[Token(Token = "0x6000B83")]
			[Address(RVA = "0x9C2AF4", Offset = "0x9C2AF4", VA = "0x9C2AF4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B84")]
			[Address(RVA = "0x9C2AFC", Offset = "0x9C2AFC", VA = "0x9C2AFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public float Volume
		{
			[Token(Token = "0x6000B85")]
			[Address(RVA = "0x9C2B08", Offset = "0x9C2B08", VA = "0x9C2B08")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B86")]
			[Address(RVA = "0x9C2B10", Offset = "0x9C2B10", VA = "0x9C2B10")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public Vector2 Center
		{
			[Token(Token = "0x6000B87")]
			[Address(RVA = "0x9C2B18", Offset = "0x9C2B18", VA = "0x9C2B18")]
			[CompilerGenerated]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0x9C2B20", Offset = "0x9C2B20", VA = "0x9C2B20")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public bool Created
		{
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0x9C2B28", Offset = "0x9C2B28", VA = "0x9C2B28")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0x9C2B30", Offset = "0x9C2B30", VA = "0x9C2B30")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x9C2B3C", Offset = "0x9C2B3C", VA = "0x9C2B3C")]
		public BzPolyLoop(BzMeshData meshData, LinkedLoop<int> edgeLoop, Vector3 normal, IBzSliceAdapter adapter)
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x9C10A4", Offset = "0x9C10A4", VA = "0x9C10A4")]
		public bool IsInside(BzPolyLoop outer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x9C31EC", Offset = "0x9C31EC", VA = "0x9C31EC")]
		private void CalculateMetodata()
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x9C3444", Offset = "0x9C3444", VA = "0x9C3444")]
		private static float VolumeOfTriangle(Vector2 p1, Vector2 p2, Vector2 p3)
		{
			return default(float);
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x9C2FEC", Offset = "0x9C2FEC", VA = "0x9C2FEC")]
		private List<int> MakeMesh(bool right)
		{
			return null;
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x9C2C78", Offset = "0x9C2C78", VA = "0x9C2C78")]
		private Vector2[] ConvertV3ToV2(IBzSliceAdapter adapter, Vector3 normal)
		{
			return null;
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x9C35EC", Offset = "0x9C35EC", VA = "0x9C35EC")]
		private static void CreateTriangle(List<int> triangles, int i1, int i2, int i3, bool right)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x9C34A0", Offset = "0x9C34A0", VA = "0x9C34A0")]
		private bool IsAllowedToCreateTriangle(LinkedLoop<int> linkList, int i1, int i2, int i3, bool right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x9C33A4", Offset = "0x9C33A4", VA = "0x9C33A4")]
		private static bool PointInTriangle(ref Vector2 pt, ref Vector2 v1, ref Vector2 v2, ref Vector2 v3)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x9C3810", Offset = "0x9C3810", VA = "0x9C3810")]
		private static float SideOfLine(ref Vector2 p, ref Vector2 a, ref Vector2 b)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000222")]
	internal class LoopIndex
	{
		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BzPolyLoop loop;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LoopNode<int> indexPointer;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 vector2d;

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x9C15B0", Offset = "0x9C15B0", VA = "0x9C15B0")]
		public LoopIndex(BzPolyLoop loop, LoopNode<int> indexPointer, Vector2 vector2d)
		{
		}
	}
	[Token(Token = "0x2000223")]
	internal class LoopIndexCollection
	{
		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BzPolyLoop loop;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinkedLoop<LoopIndex> items;

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x9C160C", Offset = "0x9C160C", VA = "0x9C160C")]
		public LoopIndexCollection(BzPolyLoop loop, LinkedLoop<LoopIndex> items)
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class PolyMeshData
	{
		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] vertices;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] normals;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2[] uv;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int[] triangles;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BoneWeight[] boneWeights;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector4[] tangents;

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x9C2ABC", Offset = "0x9C2ABC", VA = "0x9C2ABC")]
		public PolyMeshData()
		{
		}
	}
}
namespace BzKovSoft.ObjectSlicer.MeshGenerator
{
	[Token(Token = "0x2000225")]
	public class Capsule
	{
		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x9BC934", Offset = "0x9BC934", VA = "0x9BC934")]
		public static Mesh Create(float radius, float height, int direction, Vector3 center, int nbLong = 12, int nbLat = 4)
		{
			return null;
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x9C3838", Offset = "0x9C3838", VA = "0x9C3838")]
		public static SliceResult IntersectsPlane(Transform transform, float radius, float height, int direction, Vector3 center, Plane plane)
		{
			return default(SliceResult);
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x9C39B4", Offset = "0x9C39B4", VA = "0x9C39B4")]
		public Capsule()
		{
		}
	}
	[Token(Token = "0x2000226")]
	internal static class Cube
	{
		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x9BA49C", Offset = "0x9BA49C", VA = "0x9BA49C")]
		public static Mesh Create(Vector3 size, Vector3 center)
		{
			return null;
		}
	}
	[Token(Token = "0x2000227")]
	public static class IcoSphere
	{
		[Token(Token = "0x2000228")]
		private struct TriangleIndices
		{
			[Token(Token = "0x40009DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int V1;

			[Token(Token = "0x40009E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public readonly int V2;

			[Token(Token = "0x40009E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly int V3;

			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0x9C39BC", Offset = "0x9C39BC", VA = "0x9C39BC")]
			public TriangleIndices(int v1, int v2, int v3)
			{
			}
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x9BAE3C", Offset = "0x9BAE3C", VA = "0x9BAE3C")]
		public static Mesh Create(float radius, Vector3 center, int recursionLevel = 1)
		{
			return null;
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x9C39C8", Offset = "0x9C39C8", VA = "0x9C39C8")]
		private static int GetMiddlePoint(int p1, int p2, ref List<Vector3> vertices, ref Dictionary<long, int> cache, float radius)
		{
			return default(int);
		}
	}
}
namespace BzKovSoft.ObjectSlicer.EventHandlers
{
	[Token(Token = "0x2000229")]
	[DisallowMultipleComponent]
	public class BzDeleteSecondJoint : MonoBehaviour, IBzObjectSlicedEvent
	{
		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x9C3C50", Offset = "0x9C3C50", VA = "0x9C3C50", Slot = "4")]
		public void ObjectSliced(GameObject original, GameObject resultNeg, GameObject resultPos)
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x9C3F64", Offset = "0x9C3F64", VA = "0x9C3F64")]
		public BzDeleteSecondJoint()
		{
		}
	}
	[Token(Token = "0x200022A")]
	[DisallowMultipleComponent]
	public class BzFixMass : MonoBehaviour, IBzObjectSlicedEvent
	{
		[Token(Token = "0x200022B")]
		[CompilerGenerated]
		private sealed class <NextFrame>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject resultNeg;

			[Token(Token = "0x40009E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject resultPos;

			[Token(Token = "0x40009E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public BzFixMass <>4__this;

			[Token(Token = "0x17000104")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BA8")]
				[Address(RVA = "0x9C4404", Offset = "0x9C4404", VA = "0x9C4404", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000105")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BAA")]
				[Address(RVA = "0x9C444C", Offset = "0x9C444C", VA = "0x9C444C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0x9C4038", Offset = "0x9C4038", VA = "0x9C4038")]
			[DebuggerHidden]
			public <NextFrame>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0x9C4120", Offset = "0x9C4120", VA = "0x9C4120", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0x9C4124", Offset = "0x9C4124", VA = "0x9C4124", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0x9C440C", Offset = "0x9C440C", VA = "0x9C440C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x9C3F6C", Offset = "0x9C3F6C", VA = "0x9C3F6C", Slot = "4")]
		public void ObjectSliced(GameObject original, GameObject resultNeg, GameObject resultPos)
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x9C3F94", Offset = "0x9C3F94", VA = "0x9C3F94")]
		[IteratorStateMachine(typeof(<NextFrame>d__1))]
		private IEnumerator NextFrame(GameObject resultNeg, GameObject resultPos)
		{
			return null;
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x9C4060", Offset = "0x9C4060", VA = "0x9C4060")]
		private Vector3 CalculateCenterOfMass(Mesh mesh)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x9C4118", Offset = "0x9C4118", VA = "0x9C4118")]
		public BzFixMass()
		{
		}
	}
	[Token(Token = "0x200022C")]
	[DisallowMultipleComponent]
	internal class BzFixMassSmart : MonoBehaviour, IBzObjectSlicedEvent
	{
		[Token(Token = "0x200022D")]
		[CompilerGenerated]
		private sealed class <NextFrame>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject original;

			[Token(Token = "0x40009EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject resultNeg;

			[Token(Token = "0x40009EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameObject resultPos;

			[Token(Token = "0x17000106")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BB6")]
				[Address(RVA = "0x9C4DBC", Offset = "0x9C4DBC", VA = "0x9C4DBC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000107")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BB8")]
				[Address(RVA = "0x9C4E04", Offset = "0x9C4E04", VA = "0x9C4E04", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BB3")]
			[Address(RVA = "0x9C4518", Offset = "0x9C4518", VA = "0x9C4518")]
			[DebuggerHidden]
			public <NextFrame>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6000BB4")]
			[Address(RVA = "0x9C4BE8", Offset = "0x9C4BE8", VA = "0x9C4BE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BB5")]
			[Address(RVA = "0x9C4BEC", Offset = "0x9C4BEC", VA = "0x9C4BEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0x9C4DC4", Offset = "0x9C4DC4", VA = "0x9C4DC4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x9C4454", Offset = "0x9C4454", VA = "0x9C4454", Slot = "4")]
		public void ObjectSliced(GameObject original, GameObject resultNeg, GameObject resultPos)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x9C4474", Offset = "0x9C4474", VA = "0x9C4474")]
		[IteratorStateMachine(typeof(<NextFrame>d__1))]
		private IEnumerator NextFrame(GameObject original, GameObject resultNeg, GameObject resultPos)
		{
			return null;
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x9C4540", Offset = "0x9C4540", VA = "0x9C4540")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x9C4698", Offset = "0x9C4698", VA = "0x9C4698")]
		private static float VolumeOfMesh(GameObject gameObject, out Vector3 center)
		{
			return default(float);
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x9C48EC", Offset = "0x9C48EC", VA = "0x9C48EC")]
		private static float VolumeOfMesh(Mesh mesh, float scale, out Vector3 center)
		{
			return default(float);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x9C4BAC", Offset = "0x9C4BAC", VA = "0x9C4BAC")]
		private static Vector3 GetTetrahedronCenter(Vector3 v1, Vector3 v2, Vector3 v3)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x9C4B44", Offset = "0x9C4B44", VA = "0x9C4B44")]
		private static float SignedVolumeOfTriangle(Vector3 p1, Vector3 p2, Vector3 p3)
		{
			return default(float);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x9C4BE0", Offset = "0x9C4BE0", VA = "0x9C4BE0")]
		public BzFixMassSmart()
		{
		}
	}
	[Token(Token = "0x200022E")]
	[DisallowMultipleComponent]
	public class BzReaplyForce : MonoBehaviour, IBzObjectSlicedEvent
	{
		[Token(Token = "0x200022F")]
		[CompilerGenerated]
		private sealed class <NextFrame>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject original;

			[Token(Token = "0x40009EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject resultNeg;

			[Token(Token = "0x40009F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameObject resultPos;

			[Token(Token = "0x17000108")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BBF")]
				[Address(RVA = "0x9C507C", Offset = "0x9C507C", VA = "0x9C507C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000109")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BC1")]
				[Address(RVA = "0x9C50C4", Offset = "0x9C50C4", VA = "0x9C50C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BBC")]
			[Address(RVA = "0x9C4ED0", Offset = "0x9C4ED0", VA = "0x9C4ED0")]
			[DebuggerHidden]
			public <NextFrame>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0x9C4F00", Offset = "0x9C4F00", VA = "0x9C4F00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BBE")]
			[Address(RVA = "0x9C4F04", Offset = "0x9C4F04", VA = "0x9C4F04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0x9C5084", Offset = "0x9C5084", VA = "0x9C5084", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x9C4E0C", Offset = "0x9C4E0C", VA = "0x9C4E0C", Slot = "4")]
		public void ObjectSliced(GameObject original, GameObject resultNeg, GameObject resultPos)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x9C4E2C", Offset = "0x9C4E2C", VA = "0x9C4E2C")]
		[IteratorStateMachine(typeof(<NextFrame>d__1))]
		private IEnumerator NextFrame(GameObject original, GameObject resultNeg, GameObject resultPos)
		{
			return null;
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x9C4EF8", Offset = "0x9C4EF8", VA = "0x9C4EF8")]
		public BzReaplyForce()
		{
		}
	}
	[Token(Token = "0x2000230")]
	[DisallowMultipleComponent]
	public class BzSmoothDepenetration : MonoBehaviour, IBzObjectSlicedEvent
	{
		[Token(Token = "0x2000231")]
		[CompilerGenerated]
		private sealed class <SmoothDepenetration>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject go;

			[Token(Token = "0x40009F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Rigidbody[] <rigids>5__2;

			[Token(Token = "0x40009F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float[] <maxVelocitys>5__3;

			[Token(Token = "0x1700010A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BC8")]
				[Address(RVA = "0x9C5404", Offset = "0x9C5404", VA = "0x9C5404", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BCA")]
				[Address(RVA = "0x9C544C", Offset = "0x9C544C", VA = "0x9C544C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0x9C5188", Offset = "0x9C5188", VA = "0x9C5188")]
			[DebuggerHidden]
			public <SmoothDepenetration>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0x9C51B8", Offset = "0x9C51B8", VA = "0x9C51B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0x9C51BC", Offset = "0x9C51BC", VA = "0x9C51BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0x9C540C", Offset = "0x9C540C", VA = "0x9C540C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x9C50CC", Offset = "0x9C50CC", VA = "0x9C50CC", Slot = "4")]
		public void ObjectSliced(GameObject original, GameObject resultNeg, GameObject resultPos)
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x9C5114", Offset = "0x9C5114", VA = "0x9C5114")]
		[IteratorStateMachine(typeof(<SmoothDepenetration>d__1))]
		public static IEnumerator SmoothDepenetration(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x9C51B0", Offset = "0x9C51B0", VA = "0x9C51B0")]
		public BzSmoothDepenetration()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public interface IBzObjectSlicedEvent
	{
		[Token(Token = "0x6000BCB")]
		void ObjectSliced(GameObject original, GameObject resutlNeg, GameObject resultPos);
	}
}
namespace BzKovSoft.CharacterSlicer
{
	[Token(Token = "0x2000233")]
	public abstract class BzSliceableCharacterBase : BzSliceableBase
	{
		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x9C5454", Offset = "0x9C5454", VA = "0x9C5454")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x9C5554", Offset = "0x9C5554", VA = "0x9C5554", Slot = "5")]
		protected override AdapterAndMesh GetAdapterAndMesh(Renderer renderer)
		{
			return null;
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x9C5AEC", Offset = "0x9C5AEC", VA = "0x9C5AEC", Slot = "9")]
		protected override BzSliceTryData PrepareData(Plane plane)
		{
			return null;
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x9C5C08", Offset = "0x9C5C08", VA = "0x9C5C08")]
		protected BzSliceableCharacterBase()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class BzSliceSkinnedMeshAdapter : IBzSliceAdapter, IXmlSerializable
	{
		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3 _position;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Matrix4x4 _w2l;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Matrix4x4 _l2w;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3[] _vertices;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Matrix4x4[] _charToW;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BoneWeight[] _boneWeights;

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x9C57C4", Offset = "0x9C57C4", VA = "0x9C57C4")]
		public BzSliceSkinnedMeshAdapter(SkinnedMeshRenderer renderer)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x9C5C10", Offset = "0x9C5C10", VA = "0x9C5C10", Slot = "4")]
		public Vector3 GetWorldPos(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x9C5F00", Offset = "0x9C5F00", VA = "0x9C5F00", Slot = "5")]
		public Vector3 GetLocalPos(BzMeshData meshData, int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x9C5F1C", Offset = "0x9C5F1C", VA = "0x9C5F1C", Slot = "6")]
		public Vector3 GetWorldPos(BzMeshData meshData, int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x9C6250", Offset = "0x9C6250", VA = "0x9C6250", Slot = "7")]
		public Vector3 InverseTransformDirection(Vector3 p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x9C62E0", Offset = "0x9C62E0", VA = "0x9C62E0", Slot = "8")]
		public bool Check(BzMeshData meshData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x9C62E8", Offset = "0x9C62E8", VA = "0x9C62E8", Slot = "9")]
		public void RebuildMesh(Mesh mesh, Material[] materials, Renderer meshRenderer)
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x9C6390", Offset = "0x9C6390", VA = "0x9C6390", Slot = "10")]
		public Vector3 GetObjectCenterInWorldSpace()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x9C639C", Offset = "0x9C639C", VA = "0x9C639C", Slot = "11")]
		public XmlSchema GetSchema()
		{
			return null;
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x9C63A4", Offset = "0x9C63A4", VA = "0x9C63A4", Slot = "12")]
		public void ReadXml(XmlReader reader)
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x9C67FC", Offset = "0x9C67FC", VA = "0x9C67FC", Slot = "13")]
		public void WriteXml(XmlWriter writer)
		{
		}
	}
	[Token(Token = "0x2000235")]
	public static class CenterOfMassColliderBasedHelper
	{
		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x9C6B00", Offset = "0x9C6B00", VA = "0x9C6B00")]
		public static bool CalculateCenter(Rigidbody rigidbody, List<Collider> possibleColliders, Rigidbody[] possibleRigids)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x9C6D84", Offset = "0x9C6D84", VA = "0x9C6D84")]
		private static Vector3 GetColliderCenter(Collider collider)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x9C6CEC", Offset = "0x9C6CEC", VA = "0x9C6CEC")]
		private static List<Collider> GetColliders(Transform transform, List<Collider> possibleColliders, Rigidbody[] possibleRigids)
		{
			return null;
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x9C7014", Offset = "0x9C7014", VA = "0x9C7014")]
		private static void GetCollidersRec(Transform transform, List<Collider> colliders, List<Collider> possibleColliders, Rigidbody[] possibleRigids)
		{
		}

		[Token(Token = "0x6000BDF")]
		private static T GetComponent<T>(Transform child, T[] possibleComponents) where T : Component
		{
			return null;
		}
	}
	[Token(Token = "0x2000236")]
	public class CharacterComponentManagerFast : StaticComponentManager, IComponentManager
	{
		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x9C5C04", Offset = "0x9C5C04", VA = "0x9C5C04")]
		public CharacterComponentManagerFast(GameObject go, Plane plane, Collider[] colliders)
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x9C7230", Offset = "0x9C7230", VA = "0x9C7230", Slot = "6")]
		public new void OnSlicedMainThread(GameObject resultObjNeg, GameObject resultObjPos, Renderer[] renderersNeg, Renderer[] renderersPos)
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x9C72FC", Offset = "0x9C72FC", VA = "0x9C72FC")]
		private static void OnCompletePerSide(List<Collider> colliders, GameObject go)
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x9C7F3C", Offset = "0x9C7F3C", VA = "0x9C7F3C")]
		private static bool IsAlreadyConnected(Transform from, Transform to, List<Joint> joints, HashSet<Transform> ocupied)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x9C7DAC", Offset = "0x9C7DAC", VA = "0x9C7DAC")]
		private static bool RigidHaveColliders(Transform tr, List<Collider> colliders)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x9C82C0", Offset = "0x9C82C0", VA = "0x9C82C0")]
		private static Joint CreateJoint(Transform itemA, Transform itemB)
		{
			return null;
		}
	}
	[Token(Token = "0x2000237")]
	public class CharacterSlicerInitializer : MonoBehaviour
	{
		[Token(Token = "0x2000238")]
		private class CharacterSlicerInitializerObj : BzSliceableCharacterBase
		{
			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0x9C8DE8", Offset = "0x9C8DE8", VA = "0x9C8DE8")]
			public CharacterSlicerInitializerObj()
			{
			}
		}

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x9C85CC", Offset = "0x9C85CC", VA = "0x9C85CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x9C85D0", Offset = "0x9C85D0", VA = "0x9C85D0")]
		public static void Init()
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x9C8AB8", Offset = "0x9C8AB8", VA = "0x9C8AB8")]
		private static Mesh GetMesh()
		{
			return null;
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x9C8DE0", Offset = "0x9C8DE0", VA = "0x9C8DE0")]
		public CharacterSlicerInitializer()
		{
		}
	}
}
namespace BzKovSoft.CharacterSlicer.Samples
{
	[Token(Token = "0x200023A")]
	public class CharacterSlicerSampleFast : BzSliceableCharacterBase, IBzSliceableNoRepeat, IDeadable
	{
		[Token(Token = "0x200023B")]
		private class ResultData
		{
			[Token(Token = "0x4000A09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Stopwatch stopwatch;

			[Token(Token = "0x6000BFE")]
			[Address(RVA = "0x9CA56C", Offset = "0x9CA56C", VA = "0x9CA56C")]
			public ResultData()
			{
			}
		}

		[Token(Token = "0x200023C")]
		[CompilerGenerated]
		private sealed class <SmoothDepenetration>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject go;

			[Token(Token = "0x4000A0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Rigidbody[] <rigids>5__2;

			[Token(Token = "0x4000A0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float[] <maxVelocitys>5__3;

			[Token(Token = "0x1700010D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C02")]
				[Address(RVA = "0x9CA7E8", Offset = "0x9CA7E8", VA = "0x9CA7E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C04")]
				[Address(RVA = "0x9CA830", Offset = "0x9CA830", VA = "0x9CA830", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BFF")]
			[Address(RVA = "0x9CA574", Offset = "0x9CA574", VA = "0x9CA574")]
			[DebuggerHidden]
			public <SmoothDepenetration>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6000C00")]
			[Address(RVA = "0x9CA59C", Offset = "0x9CA59C", VA = "0x9CA59C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C01")]
			[Address(RVA = "0x9CA5A0", Offset = "0x9CA5A0", VA = "0x9CA5A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C03")]
			[Address(RVA = "0x9CA7F0", Offset = "0x9CA7F0", VA = "0x9CA7F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		private int _sliceId;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[HideInInspector]
		private float _lastSliceTime;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int _maxSliceCount;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject _bloodPrefub;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Vector3 _prefubDirection;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private bool _convertToRagdoll;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		[SerializeField]
		private bool _alignPrefSize;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float delayBetweenSlices;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string drawText;

		[Token(Token = "0x1700010C")]
		public bool IsDead
		{
			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0x9C8F2C", Offset = "0x9C8F2C", VA = "0x9C8F2C", Slot = "12")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0x9C8F34", Offset = "0x9C8F34", VA = "0x9C8F34")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x9C8F40", Offset = "0x9C8F40", VA = "0x9C8F40", Slot = "11")]
		public void Slice(Plane plane, int sliceId, Action<BzSliceTryResult> callBack)
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x9C9088", Offset = "0x9C9088", VA = "0x9C9088", Slot = "9")]
		protected override BzSliceTryData PrepareData(Plane plane)
		{
			return null;
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x9C9228", Offset = "0x9C9228", VA = "0x9C9228", Slot = "7")]
		protected override void OnSliceFinishedWorkerThread(bool sliced, object addData)
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x9C92B0", Offset = "0x9C92B0", VA = "0x9C92B0", Slot = "10")]
		protected override void OnSliceFinished(BzSliceTryResult result)
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x9C9740", Offset = "0x9C9740", VA = "0x9C9740")]
		private void ConvertToRagdoll(GameObject resultNeg, GameObject resultPos, LazyActionRunner lazyRunnerNeg, LazyActionRunner lazyRunnerPos)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x9C9650", Offset = "0x9C9650", VA = "0x9C9650")]
		private void AddBlood(BzSliceTryResult result)
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x9C9A8C", Offset = "0x9C9A8C", VA = "0x9C9A8C")]
		private void SetBleedingObjects(BzSliceEdgeResult edge, Renderer renderer)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x9CA200", Offset = "0x9CA200", VA = "0x9CA200")]
		private static Vector3 AVG(Vector3[] vertices)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x9C9830", Offset = "0x9C9830", VA = "0x9C9830")]
		private void ConvertToRagdoll(GameObject go, Vector3 velocityContinue, Vector3 angularVelocityContinue, LazyActionRunner lazyRunner)
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x9CA2B4", Offset = "0x9CA2B4", VA = "0x9CA2B4")]
		private static void SetVelocity(GameObject go, Vector3 velocityContinue, Vector3 angularVelocityContinue)
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x9CA3A8", Offset = "0x9CA3A8", VA = "0x9CA3A8")]
		[IteratorStateMachine(typeof(<SmoothDepenetration>d__22))]
		public static IEnumerator SmoothDepenetration(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x9CA41C", Offset = "0x9CA41C", VA = "0x9CA41C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x9CA4DC", Offset = "0x9CA4DC", VA = "0x9CA4DC")]
		public CharacterSlicerSampleFast()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public class EnemyManager : MonoBehaviour
	{
		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _enemyPrefab;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _attachEnemiesTo;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IDeadable _enemy;

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x9CA838", Offset = "0x9CA838", VA = "0x9CA838")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x9CAA54", Offset = "0x9CAA54", VA = "0x9CAA54")]
		public EnemyManager()
		{
		}
	}
	[Token(Token = "0x200023E")]
	public interface IDeadable
	{
		[Token(Token = "0x1700010F")]
		bool IsDead
		{
			[Token(Token = "0x6000C07")]
			get;
		}
	}
}
namespace AutoHand
{
	[Token(Token = "0x200023F")]
	public class HandTouchButton : MonoBehaviour
	{
		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideIf("startUnpress")]
		public bool startPress;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideIf("startPress")]
		public bool startUnpress;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandTouchEvent touchEvent;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform button;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 pressOffset;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color unpressColor;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color pressColor;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool toggle;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Space]
		public UnityHandEvent OnPressed;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityHandEvent OnUnpressed;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool pressed;

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x9CAA5C", Offset = "0x9CAA5C", VA = "0x9CAA5C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x9CAC3C", Offset = "0x9CAC3C", VA = "0x9CAC3C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x9CADA0", Offset = "0x9CADA0", VA = "0x9CADA0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x9CAF04", Offset = "0x9CAF04", VA = "0x9CAF04")]
		private void OnTouch(Autohand.Hand hand)
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x9CAF24", Offset = "0x9CAF24", VA = "0x9CAF24")]
		private void OnUntouch(Autohand.Hand hand)
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x9CAA80", Offset = "0x9CAA80", VA = "0x9CAA80")]
		private void PressButton(Autohand.Hand hand)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x9CAB60", Offset = "0x9CAB60", VA = "0x9CAB60")]
		private void ReleaseButton(Autohand.Hand hand)
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x9CAF3C", Offset = "0x9CAF3C", VA = "0x9CAF3C")]
		public HandTouchButton()
		{
		}
	}
}
namespace NaughtyAttributes
{
	[Token(Token = "0x2000240")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class AllowNestingAttribute : DrawerAttribute
	{
		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x9CAF58", Offset = "0x9CAF58", VA = "0x9CAF58")]
		public AllowNestingAttribute()
		{
		}
	}
	[Token(Token = "0x2000241")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class AnimatorParamAttribute : DrawerAttribute
	{
		[Token(Token = "0x17000110")]
		public string AnimatorName
		{
			[Token(Token = "0x6000C11")]
			[Address(RVA = "0x9CAF68", Offset = "0x9CAF68", VA = "0x9CAF68")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C12")]
			[Address(RVA = "0x9CAF70", Offset = "0x9CAF70", VA = "0x9CAF70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000111")]
		public AnimatorControllerParameterType? AnimatorParamType
		{
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0x9CAF78", Offset = "0x9CAF78", VA = "0x9CAF78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C14")]
			[Address(RVA = "0x9CAF80", Offset = "0x9CAF80", VA = "0x9CAF80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x9CAF88", Offset = "0x9CAF88", VA = "0x9CAF88")]
		public AnimatorParamAttribute(string animatorName)
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x9CAFC0", Offset = "0x9CAFC0", VA = "0x9CAFC0")]
		public AnimatorParamAttribute(string animatorName, AnimatorControllerParameterType animatorParamType)
		{
		}
	}
	[Token(Token = "0x2000242")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class CurveRangeAttribute : DrawerAttribute
	{
		[Token(Token = "0x17000112")]
		public Vector2 Min
		{
			[Token(Token = "0x6000C17")]
			[Address(RVA = "0x9CB050", Offset = "0x9CB050", VA = "0x9CB050")]
			[CompilerGenerated]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000C18")]
			[Address(RVA = "0x9CB058", Offset = "0x9CB058", VA = "0x9CB058")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public Vector2 Max
		{
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0x9CB060", Offset = "0x9CB060", VA = "0x9CB060")]
			[CompilerGenerated]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0x9CB068", Offset = "0x9CB068", VA = "0x9CB068")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000114")]
		public EColor Color
		{
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0x9CB070", Offset = "0x9CB070", VA = "0x9CB070")]
			[CompilerGenerated]
			get
			{
				return default(EColor);
			}
			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0x9CB078", Offset = "0x9CB078", VA = "0x9CB078")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x9CB080", Offset = "0x9CB080", VA = "0x9CB080")]
		public CurveRangeAttribute(Vector2 min, Vector2 max, EColor color = EColor.Clear)
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x9CB0D0", Offset = "0x9CB0D0", VA = "0x9CB0D0")]
		public CurveRangeAttribute(EColor color)
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x9CB164", Offset = "0x9CB164", VA = "0x9CB164")]
		public CurveRangeAttribute(float minX, float minY, float maxX, float maxY, EColor color = EColor.Clear)
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class DrawerAttribute : PropertyAttribute, INaughtyAttribute
	{
		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x9CAF60", Offset = "0x9CAF60", VA = "0x9CAF60")]
		public DrawerAttribute()
		{
		}
	}
	[Token(Token = "0x2000244")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class DropdownAttribute : DrawerAttribute
	{
		[Token(Token = "0x17000115")]
		public string ValuesName
		{
			[Token(Token = "0x6000C21")]
			[Address(RVA = "0x9CB1B4", Offset = "0x9CB1B4", VA = "0x9CB1B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C22")]
			[Address(RVA = "0x9CB1BC", Offset = "0x9CB1BC", VA = "0x9CB1BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x9CB1C4", Offset = "0x9CB1C4", VA = "0x9CB1C4")]
		public DropdownAttribute(string valuesName)
		{
		}
	}
	[Token(Token = "0x2000245")]
	public interface IDropdownList : IEnumerable<KeyValuePair<string, object>>, IEnumerable
	{
	}
	[Token(Token = "0x2000246")]
	public class DropdownList<T> : IDropdownList, IEnumerable<KeyValuePair<string, object>>, IEnumerable
	{
		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<KeyValuePair<string, object>> _values;

		[Token(Token = "0x6000C24")]
		public DropdownList()
		{
		}

		[Token(Token = "0x6000C25")]
		public void Add(string displayName, T value)
		{
		}

		[Token(Token = "0x6000C26")]
		public IEnumerator<KeyValuePair<string, object>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000C27")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000C28")]
		public static explicit operator DropdownList<object>(DropdownList<T> target)
		{
			return null;
		}
	}
	[Token(Token = "0x2000247")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class EnumFlagsAttribute : DrawerAttribute
	{
		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x9CB1F4", Offset = "0x9CB1F4", VA = "0x9CB1F4")]
		public EnumFlagsAttribute()
		{
		}
	}
	[Token(Token = "0x2000248")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class ExpandableAttribute : DrawerAttribute
	{
		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x9CB1FC", Offset = "0x9CB1FC", VA = "0x9CB1FC")]
		public ExpandableAttribute()
		{
		}
	}
	[Token(Token = "0x2000249")]
	[AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = true)]
	public class HorizontalLineAttribute : DrawerAttribute
	{
		[Token(Token = "0x4000A24")]
		public const float DefaultHeight = 2f;

		[Token(Token = "0x4000A25")]
		public const EColor DefaultColor = EColor.Gray;

		[Token(Token = "0x17000116")]
		public float Height
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0x9CB204", Offset = "0x9CB204", VA = "0x9CB204")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0x9CB20C", Offset = "0x9CB20C", VA = "0x9CB20C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000117")]
		public EColor Color
		{
			[Token(Token = "0x6000C2D")]
			[Address(RVA = "0x9CB214", Offset = "0x9CB214", VA = "0x9CB214")]
			[CompilerGenerated]
			get
			{
				return default(EColor);
			}
			[Token(Token = "0x6000C2E")]
			[Address(RVA = "0x9CB21C", Offset = "0x9CB21C", VA = "0x9CB21C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x9CB224", Offset = "0x9CB224", VA = "0x9CB224")]
		public HorizontalLineAttribute(float height = 2f, EColor color = EColor.Gray)
		{
		}
	}
	[Token(Token = "0x200024A")]
	public enum EInfoBoxType
	{
		[Token(Token = "0x4000A29")]
		Normal,
		[Token(Token = "0x4000A2A")]
		Warning,
		[Token(Token = "0x4000A2B")]
		Error
	}
	[Token(Token = "0x200024B")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = true, Inherited = true)]
	public class InfoBoxAttribute : DrawerAttribute
	{
		[Token(Token = "0x17000118")]
		public string Text
		{
			[Token(Token = "0x6000C30")]
			[Address(RVA = "0x9CB25C", Offset = "0x9CB25C", VA = "0x9CB25C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C31")]
			[Address(RVA = "0x9CB264", Offset = "0x9CB264", VA = "0x9CB264")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public EInfoBoxType Type
		{
			[Token(Token = "0x6000C32")]
			[Address(RVA = "0x9CB26C", Offset = "0x9CB26C", VA = "0x9CB26C")]
			[CompilerGenerated]
			get
			{
				return default(EInfoBoxType);
			}
			[Token(Token = "0x6000C33")]
			[Address(RVA = "0x9CB274", Offset = "0x9CB274", VA = "0x9CB274")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x9CB27C", Offset = "0x9CB27C", VA = "0x9CB27C")]
		public InfoBoxAttribute(string text, EInfoBoxType type = EInfoBoxType.Normal)
		{
		}
	}
	[Token(Token = "0x200024C")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class InputAxisAttribute : DrawerAttribute
	{
		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x9CB2B8", Offset = "0x9CB2B8", VA = "0x9CB2B8")]
		public InputAxisAttribute()
		{
		}
	}
	[Token(Token = "0x200024D")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class LayerAttribute : DrawerAttribute
	{
		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x9CB2C0", Offset = "0x9CB2C0", VA = "0x9CB2C0")]
		public LayerAttribute()
		{
		}
	}
	[Token(Token = "0x200024E")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class MinMaxSliderAttribute : DrawerAttribute
	{
		[Token(Token = "0x1700011A")]
		public float MinValue
		{
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0x9CB2C8", Offset = "0x9CB2C8", VA = "0x9CB2C8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0x9CB2D0", Offset = "0x9CB2D0", VA = "0x9CB2D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public float MaxValue
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0x9CB2D8", Offset = "0x9CB2D8", VA = "0x9CB2D8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0x9CB2E0", Offset = "0x9CB2E0", VA = "0x9CB2E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x9CB2E8", Offset = "0x9CB2E8", VA = "0x9CB2E8")]
		public MinMaxSliderAttribute(float minValue, float maxValue)
		{
		}
	}
	[Token(Token = "0x200024F")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class ProgressBarAttribute : DrawerAttribute
	{
		[Token(Token = "0x1700011C")]
		public string Name
		{
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0x9CB314", Offset = "0x9CB314", VA = "0x9CB314")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x9CB31C", Offset = "0x9CB31C", VA = "0x9CB31C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public float MaxValue
		{
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0x9CB324", Offset = "0x9CB324", VA = "0x9CB324")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x9CB32C", Offset = "0x9CB32C", VA = "0x9CB32C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public string MaxValueName
		{
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0x9CB334", Offset = "0x9CB334", VA = "0x9CB334")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0x9CB33C", Offset = "0x9CB33C", VA = "0x9CB33C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public EColor Color
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0x9CB344", Offset = "0x9CB344", VA = "0x9CB344")]
			[CompilerGenerated]
			get
			{
				return default(EColor);
			}
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x9CB34C", Offset = "0x9CB34C", VA = "0x9CB34C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x9CB354", Offset = "0x9CB354", VA = "0x9CB354")]
		public ProgressBarAttribute(string name, float maxValue, EColor color = EColor.Blue)
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x9CB3A0", Offset = "0x9CB3A0", VA = "0x9CB3A0")]
		public ProgressBarAttribute(string name, string maxValueName, EColor color = EColor.Blue)
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x9CB3F8", Offset = "0x9CB3F8", VA = "0x9CB3F8")]
		public ProgressBarAttribute(float maxValue, EColor color = EColor.Blue)
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x9CB478", Offset = "0x9CB478", VA = "0x9CB478")]
		public ProgressBarAttribute(string maxValueName, EColor color = EColor.Blue)
		{
		}
	}
	[Token(Token = "0x2000250")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class ResizableTextAreaAttribute : DrawerAttribute
	{
		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x9CB4D8", Offset = "0x9CB4D8", VA = "0x9CB4D8")]
		public ResizableTextAreaAttribute()
		{
		}
	}
	[Token(Token = "0x2000251")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class SceneAttribute : DrawerAttribute
	{
		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x9CB4E0", Offset = "0x9CB4E0", VA = "0x9CB4E0")]
		public SceneAttribute()
		{
		}
	}
	[Token(Token = "0x2000252")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class ShowAssetPreviewAttribute : DrawerAttribute
	{
		[Token(Token = "0x4000A34")]
		public const int DefaultWidth = 64;

		[Token(Token = "0x4000A35")]
		public const int DefaultHeight = 64;

		[Token(Token = "0x17000120")]
		public int Width
		{
			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0x9CB4E8", Offset = "0x9CB4E8", VA = "0x9CB4E8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C4B")]
			[Address(RVA = "0x9CB4F0", Offset = "0x9CB4F0", VA = "0x9CB4F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public int Height
		{
			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0x9CB4F8", Offset = "0x9CB4F8", VA = "0x9CB4F8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0x9CB500", Offset = "0x9CB500", VA = "0x9CB500")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x9CB508", Offset = "0x9CB508", VA = "0x9CB508")]
		public ShowAssetPreviewAttribute(int width = 64, int height = 64)
		{
		}
	}
	[Token(Token = "0x2000253")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class TagAttribute : DrawerAttribute
	{
		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x9CB534", Offset = "0x9CB534", VA = "0x9CB534")]
		public TagAttribute()
		{
		}
	}
	[Token(Token = "0x2000254")]
	public enum EButtonEnableMode
	{
		[Token(Token = "0x4000A39")]
		Always,
		[Token(Token = "0x4000A3A")]
		Editor,
		[Token(Token = "0x4000A3B")]
		Playmode
	}
	[Token(Token = "0x2000255")]
	[AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
	public class ButtonAttribute : SpecialCaseDrawerAttribute
	{
		[Token(Token = "0x17000122")]
		public string Text
		{
			[Token(Token = "0x6000C50")]
			[Address(RVA = "0x9CB53C", Offset = "0x9CB53C", VA = "0x9CB53C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C51")]
			[Address(RVA = "0x9CB544", Offset = "0x9CB544", VA = "0x9CB544")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000123")]
		public EButtonEnableMode SelectedEnableMode
		{
			[Token(Token = "0x6000C52")]
			[Address(RVA = "0x9CB54C", Offset = "0x9CB54C", VA = "0x9CB54C")]
			[CompilerGenerated]
			get
			{
				return default(EButtonEnableMode);
			}
			[Token(Token = "0x6000C53")]
			[Address(RVA = "0x9CB554", Offset = "0x9CB554", VA = "0x9CB554")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x9CB55C", Offset = "0x9CB55C", VA = "0x9CB55C")]
		public ButtonAttribute([Optional] string text, EButtonEnableMode enabledMode = EButtonEnableMode.Always)
		{
		}
	}
	[Token(Token = "0x2000256")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class ReorderableListAttribute : SpecialCaseDrawerAttribute
	{
		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x9CB5A0", Offset = "0x9CB5A0", VA = "0x9CB5A0")]
		public ReorderableListAttribute()
		{
		}
	}
	[Token(Token = "0x2000257")]
	[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
	public class ShowNativePropertyAttribute : SpecialCaseDrawerAttribute
	{
		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x9CB5A8", Offset = "0x9CB5A8", VA = "0x9CB5A8")]
		public ShowNativePropertyAttribute()
		{
		}
	}
	[Token(Token = "0x2000258")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class ShowNonSerializedFieldAttribute : SpecialCaseDrawerAttribute
	{
		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x9CB5B0", Offset = "0x9CB5B0", VA = "0x9CB5B0")]
		public ShowNonSerializedFieldAttribute()
		{
		}
	}
	[Token(Token = "0x2000259")]
	public class SpecialCaseDrawerAttribute : Attribute, INaughtyAttribute
	{
		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x9CB598", Offset = "0x9CB598", VA = "0x9CB598")]
		public SpecialCaseDrawerAttribute()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public interface INaughtyAttribute
	{
	}
	[Token(Token = "0x200025B")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class BoxGroupAttribute : MetaAttribute, IGroupAttribute
	{
		[Token(Token = "0x17000124")]
		public string Name
		{
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0x9CB5B8", Offset = "0x9CB5B8", VA = "0x9CB5B8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0x9CB5C0", Offset = "0x9CB5C0", VA = "0x9CB5C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x9CB5C8", Offset = "0x9CB5C8", VA = "0x9CB5C8")]
		public BoxGroupAttribute(string name = "")
		{
		}
	}
	[Token(Token = "0x200025C")]
	[AttributeUsage(AttributeTargets.Method | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class DisableIfAttribute : EnableIfAttributeBase
	{
		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x9CB600", Offset = "0x9CB600", VA = "0x9CB600")]
		public DisableIfAttribute(string condition)
		{
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x9CB6DC", Offset = "0x9CB6DC", VA = "0x9CB6DC")]
		public DisableIfAttribute(EConditionOperator conditionOperator, params string[] conditions)
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x9CB758", Offset = "0x9CB758", VA = "0x9CB758")]
		public DisableIfAttribute(string enumName, object enumValue)
		{
		}
	}
	[Token(Token = "0x200025D")]
	[AttributeUsage(AttributeTargets.Method | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class EnableIfAttribute : EnableIfAttributeBase
	{
		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x9CB884", Offset = "0x9CB884", VA = "0x9CB884")]
		public EnableIfAttribute(string condition)
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x9CB89C", Offset = "0x9CB89C", VA = "0x9CB89C")]
		public EnableIfAttribute(EConditionOperator conditionOperator, params string[] conditions)
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x9CB8DC", Offset = "0x9CB8DC", VA = "0x9CB8DC")]
		public EnableIfAttribute(string enumName, object enumValue)
		{
		}
	}
	[Token(Token = "0x200025E")]
	public abstract class EnableIfAttributeBase : MetaAttribute
	{
		[Token(Token = "0x17000125")]
		public string[] Conditions
		{
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0x9CB974", Offset = "0x9CB974", VA = "0x9CB974")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0x9CB97C", Offset = "0x9CB97C", VA = "0x9CB97C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000126")]
		public EConditionOperator ConditionOperator
		{
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0x9CB984", Offset = "0x9CB984", VA = "0x9CB984")]
			[CompilerGenerated]
			get
			{
				return default(EConditionOperator);
			}
			[Token(Token = "0x6000C65")]
			[Address(RVA = "0x9CB98C", Offset = "0x9CB98C", VA = "0x9CB98C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000127")]
		public bool Inverted
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0x9CB994", Offset = "0x9CB994", VA = "0x9CB994")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C67")]
			[Address(RVA = "0x9CB99C", Offset = "0x9CB99C", VA = "0x9CB99C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000128")]
		public Enum EnumValue
		{
			[Token(Token = "0x6000C68")]
			[Address(RVA = "0x9CB9A8", Offset = "0x9CB9A8", VA = "0x9CB9A8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C69")]
			[Address(RVA = "0x9CB9B0", Offset = "0x9CB9B0", VA = "0x9CB9B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x9CB61C", Offset = "0x9CB61C", VA = "0x9CB61C")]
		public EnableIfAttributeBase(string condition)
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x9CB720", Offset = "0x9CB720", VA = "0x9CB720")]
		public EnableIfAttributeBase(EConditionOperator conditionOperator, params string[] conditions)
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x9CB7F4", Offset = "0x9CB7F4", VA = "0x9CB7F4")]
		public EnableIfAttributeBase(string enumName, Enum enumValue)
		{
		}
	}
	[Token(Token = "0x200025F")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class FoldoutAttribute : MetaAttribute, IGroupAttribute
	{
		[Token(Token = "0x17000129")]
		public string Name
		{
			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0x9CB9B8", Offset = "0x9CB9B8", VA = "0x9CB9B8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C6E")]
			[Address(RVA = "0x9CB9C0", Offset = "0x9CB9C0", VA = "0x9CB9C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x9CB9C8", Offset = "0x9CB9C8", VA = "0x9CB9C8")]
		public FoldoutAttribute(string name)
		{
		}
	}
	[Token(Token = "0x2000260")]
	[AttributeUsage(AttributeTargets.Method | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class HideIfAttribute : ShowIfAttributeBase
	{
		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x9CB9F8", Offset = "0x9CB9F8", VA = "0x9CB9F8")]
		public HideIfAttribute(string condition)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x9CBAD4", Offset = "0x9CBAD4", VA = "0x9CBAD4")]
		public HideIfAttribute(EConditionOperator conditionOperator, params string[] conditions)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x9CBB50", Offset = "0x9CBB50", VA = "0x9CBB50")]
		public HideIfAttribute(string enumName, object enumValue)
		{
		}
	}
	[Token(Token = "0x2000261")]
	public interface IGroupAttribute
	{
	}
	[Token(Token = "0x2000262")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class LabelAttribute : MetaAttribute
	{
		[Token(Token = "0x1700012A")]
		public string Label
		{
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0x9CBC7C", Offset = "0x9CBC7C", VA = "0x9CBC7C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0x9CBC84", Offset = "0x9CBC84", VA = "0x9CBC84")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x9CBC8C", Offset = "0x9CBC8C", VA = "0x9CBC8C")]
		public LabelAttribute(string label)
		{
		}
	}
	[Token(Token = "0x2000263")]
	public class MetaAttribute : Attribute, INaughtyAttribute
	{
		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x9CB5F8", Offset = "0x9CB5F8", VA = "0x9CB5F8")]
		public MetaAttribute()
		{
		}
	}
	[Token(Token = "0x2000264")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = true, Inherited = true)]
	public class OnValueChangedAttribute : MetaAttribute
	{
		[Token(Token = "0x1700012B")]
		public string CallbackName
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0x9CBCBC", Offset = "0x9CBCBC", VA = "0x9CBCBC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0x9CBCC4", Offset = "0x9CBCC4", VA = "0x9CBCC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x9CBCCC", Offset = "0x9CBCCC", VA = "0x9CBCCC")]
		public OnValueChangedAttribute(string callbackName)
		{
		}
	}
	[Token(Token = "0x2000265")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class ReadOnlyAttribute : MetaAttribute
	{
		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x9CBCFC", Offset = "0x9CBCFC", VA = "0x9CBCFC")]
		public ReadOnlyAttribute()
		{
		}
	}
	[Token(Token = "0x2000266")]
	[AttributeUsage(AttributeTargets.Method | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class ShowIfAttribute : ShowIfAttributeBase
	{
		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x9CBD04", Offset = "0x9CBD04", VA = "0x9CBD04")]
		public ShowIfAttribute(string condition)
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x9CBD1C", Offset = "0x9CBD1C", VA = "0x9CBD1C")]
		public ShowIfAttribute(EConditionOperator conditionOperator, params string[] conditions)
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x9CBD5C", Offset = "0x9CBD5C", VA = "0x9CBD5C")]
		public ShowIfAttribute(string enumName, object enumValue)
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class ShowIfAttributeBase : MetaAttribute
	{
		[Token(Token = "0x1700012C")]
		public string[] Conditions
		{
			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0x9CBDF4", Offset = "0x9CBDF4", VA = "0x9CBDF4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0x9CBDFC", Offset = "0x9CBDFC", VA = "0x9CBDFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700012D")]
		public EConditionOperator ConditionOperator
		{
			[Token(Token = "0x6000C80")]
			[Address(RVA = "0x9CBE04", Offset = "0x9CBE04", VA = "0x9CBE04")]
			[CompilerGenerated]
			get
			{
				return default(EConditionOperator);
			}
			[Token(Token = "0x6000C81")]
			[Address(RVA = "0x9CBE0C", Offset = "0x9CBE0C", VA = "0x9CBE0C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public bool Inverted
		{
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0x9CBE14", Offset = "0x9CBE14", VA = "0x9CBE14")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C83")]
			[Address(RVA = "0x9CBE1C", Offset = "0x9CBE1C", VA = "0x9CBE1C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700012F")]
		public Enum EnumValue
		{
			[Token(Token = "0x6000C84")]
			[Address(RVA = "0x9CBE28", Offset = "0x9CBE28", VA = "0x9CBE28")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C85")]
			[Address(RVA = "0x9CBE30", Offset = "0x9CBE30", VA = "0x9CBE30")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x9CBA14", Offset = "0x9CBA14", VA = "0x9CBA14")]
		public ShowIfAttributeBase(string condition)
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x9CBB18", Offset = "0x9CBB18", VA = "0x9CBB18")]
		public ShowIfAttributeBase(EConditionOperator conditionOperator, params string[] conditions)
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x9CBBEC", Offset = "0x9CBBEC", VA = "0x9CBBEC")]
		public ShowIfAttributeBase(string enumName, Enum enumValue)
		{
		}
	}
	[Token(Token = "0x2000268")]
	public enum EColor
	{
		[Token(Token = "0x4000A4B")]
		Clear,
		[Token(Token = "0x4000A4C")]
		White,
		[Token(Token = "0x4000A4D")]
		Black,
		[Token(Token = "0x4000A4E")]
		Gray,
		[Token(Token = "0x4000A4F")]
		Red,
		[Token(Token = "0x4000A50")]
		Pink,
		[Token(Token = "0x4000A51")]
		Orange,
		[Token(Token = "0x4000A52")]
		Yellow,
		[Token(Token = "0x4000A53")]
		Green,
		[Token(Token = "0x4000A54")]
		Blue,
		[Token(Token = "0x4000A55")]
		Indigo,
		[Token(Token = "0x4000A56")]
		Violet
	}
	[Token(Token = "0x2000269")]
	public static class EColorExtensions
	{
		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x9CBE38", Offset = "0x9CBE38", VA = "0x9CBE38")]
		public static Color GetColor(this EColor color)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x200026A")]
	public enum EConditionOperator
	{
		[Token(Token = "0x4000A58")]
		And,
		[Token(Token = "0x4000A59")]
		Or
	}
	[Token(Token = "0x200026B")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class MaxValueAttribute : ValidatorAttribute
	{
		[Token(Token = "0x17000130")]
		public float MaxValue
		{
			[Token(Token = "0x6000C8A")]
			[Address(RVA = "0x9CBE88", Offset = "0x9CBE88", VA = "0x9CBE88")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0x9CBE90", Offset = "0x9CBE90", VA = "0x9CBE90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x9CBE98", Offset = "0x9CBE98", VA = "0x9CBE98")]
		public MaxValueAttribute(float maxValue)
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x9CBEC8", Offset = "0x9CBEC8", VA = "0x9CBEC8")]
		public MaxValueAttribute(int maxValue)
		{
		}
	}
	[Token(Token = "0x200026C")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class MinValueAttribute : ValidatorAttribute
	{
		[Token(Token = "0x17000131")]
		public float MinValue
		{
			[Token(Token = "0x6000C8E")]
			[Address(RVA = "0x9CBEF4", Offset = "0x9CBEF4", VA = "0x9CBEF4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C8F")]
			[Address(RVA = "0x9CBEFC", Offset = "0x9CBEFC", VA = "0x9CBEFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x9CBF04", Offset = "0x9CBF04", VA = "0x9CBF04")]
		public MinValueAttribute(float minValue)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x9CBF2C", Offset = "0x9CBF2C", VA = "0x9CBF2C")]
		public MinValueAttribute(int minValue)
		{
		}
	}
	[Token(Token = "0x200026D")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class RequiredAttribute : ValidatorAttribute
	{
		[Token(Token = "0x17000132")]
		public string Message
		{
			[Token(Token = "0x6000C92")]
			[Address(RVA = "0x9CBF58", Offset = "0x9CBF58", VA = "0x9CBF58")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C93")]
			[Address(RVA = "0x9CBF60", Offset = "0x9CBF60", VA = "0x9CBF60")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x9CBF68", Offset = "0x9CBF68", VA = "0x9CBF68")]
		public RequiredAttribute([Optional] string message)
		{
		}
	}
	[Token(Token = "0x200026E")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
	public class ValidateInputAttribute : ValidatorAttribute
	{
		[Token(Token = "0x17000133")]
		public string CallbackName
		{
			[Token(Token = "0x6000C95")]
			[Address(RVA = "0x9CBF98", Offset = "0x9CBF98", VA = "0x9CBF98")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C96")]
			[Address(RVA = "0x9CBFA0", Offset = "0x9CBFA0", VA = "0x9CBFA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000134")]
		public string Message
		{
			[Token(Token = "0x6000C97")]
			[Address(RVA = "0x9CBFA8", Offset = "0x9CBFA8", VA = "0x9CBFA8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0x9CBFB0", Offset = "0x9CBFB0", VA = "0x9CBFB0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x9CBFB8", Offset = "0x9CBFB8", VA = "0x9CBFB8")]
		public ValidateInputAttribute(string callbackName, [Optional] string message)
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class ValidatorAttribute : Attribute, INaughtyAttribute
	{
		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x9CBEC0", Offset = "0x9CBEC0", VA = "0x9CBEC0")]
		public ValidatorAttribute()
		{
		}
	}
}
namespace Autohand
{
	[Token(Token = "0x2000270")]
	public class XRMover : MonoBehaviour
	{
		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("TEMP DEMO SCRIPT - Advanced script coming soon")]
		[Header("Controllers")]
		public XRHandControllerLink moverController;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink turningController;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Common2DAxis moverAxis;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Body")]
		public GameObject cam;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CharacterController controller;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CapsuleCollider collisionCapsule;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Settings")]
		public bool snapTurning;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float turnAngle;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float speed;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float gravity;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float currentGravity;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool axisReset;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 moveAxis;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector2 turningAxis;

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x9CBFFC", Offset = "0x9CBFFC", VA = "0x9CBFFC")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x9CC3D8", Offset = "0x9CC3D8", VA = "0x9CC3D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x9CC058", Offset = "0x9CC058", VA = "0x9CC058")]
		public void Move(float x, float y, float z)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x9CC164", Offset = "0x9CC164", VA = "0x9CC164")]
		private void Turning()
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x9CC47C", Offset = "0x9CC47C", VA = "0x9CC47C")]
		public XRMover()
		{
		}
	}
	[Token(Token = "0x2000271")]
	public class AutoHeaderAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int count;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string label;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tooltip;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string toggleBool;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Type type;

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x9CC498", Offset = "0x9CC498", VA = "0x9CC498")]
		public AutoHeaderAttribute(string label, int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x9CC4DC", Offset = "0x9CC4DC", VA = "0x9CC4DC")]
		public AutoHeaderAttribute(string label, string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x2000272")]
	public class AutoLineAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int count;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string tooltip;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string toggleBool;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Type type;

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x9CC534", Offset = "0x9CC534", VA = "0x9CC534")]
		public AutoLineAttribute(int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x9CC560", Offset = "0x9CC560", VA = "0x9CC560")]
		public AutoLineAttribute(string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class AutoToggleHeaderAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int count;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string label;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tooltip;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string toggleBool;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Type type;

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x9CC5A4", Offset = "0x9CC5A4", VA = "0x9CC5A4")]
		public AutoToggleHeaderAttribute(string label, int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x9CC5E8", Offset = "0x9CC5E8", VA = "0x9CC5E8")]
		public AutoToggleHeaderAttribute(string label, string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x2000274")]
	public static class AutoHandExtensions
	{
		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform _transformRuler;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Transform _transformRulerChild;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Transform _transformParent;

		[Token(Token = "0x17000135")]
		public static Transform transformRuler
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x9CC640", Offset = "0x9CC640", VA = "0x9CC640")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000136")]
		public static Transform transformRulerChild
		{
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0x9CC994", Offset = "0x9CC994", VA = "0x9CC994")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000137")]
		public static Transform transformParent
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x9CC87C", Offset = "0x9CC87C", VA = "0x9CC87C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x9CCBE4", Offset = "0x9CCBE4", VA = "0x9CCBE4")]
		public static void RotateAround(this Transform target, Transform center, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x9CCDFC", Offset = "0x9CCDFC", VA = "0x9CCDFC")]
		public static float Round(this float value, int digits)
		{
			return default(float);
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x9CCEA0", Offset = "0x9CCEA0", VA = "0x9CCEA0")]
		public static bool HasGrabbable(this Hand hand, GameObject obj, out Grabbable grabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x9CCEAC", Offset = "0x9CCEAC", VA = "0x9CCEAC")]
		public static bool HasGrabbable(this GameObject obj, out Grabbable grabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAD")]
		public static T GetCopyOf<T>(this Component comp, T other) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000CAE")]
		public static bool CanGetComponent<T>(this Component componentClass, out T component)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAF")]
		public static bool CanGetComponent<T>(this GameObject componentClass, out T component)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x9CCFA8", Offset = "0x9CCFA8", VA = "0x9CCFA8")]
		public static LayerMask GetPhysicsLayerMask(int currentLayer)
		{
			return default(LayerMask);
		}
	}
	[Token(Token = "0x2000275")]
	public class PhysicsGadgetButton : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool pressed;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnPressed will be called at 0.9, and OnUnpressed at 0.1")]
		[Min(0.01f)]
		public float threshold;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool lockOnPressed;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space]
		public UnityEvent OnPressed;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnUnpressed;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 startPos;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pressedPos;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float pressedValue;

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x9CD010", Offset = "0x9CD010", VA = "0x9CD010")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x9CD154", Offset = "0x9CD154", VA = "0x9CD154")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x9CD3BC", Offset = "0x9CD3BC", VA = "0x9CD3BC")]
		public void Pressed()
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x9CD414", Offset = "0x9CD414", VA = "0x9CD414")]
		public void Unpressed()
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x9CD430", Offset = "0x9CD430", VA = "0x9CD430")]
		public void Unlock()
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x9CD48C", Offset = "0x9CD48C", VA = "0x9CD48C")]
		public PhysicsGadgetButton()
		{
		}
	}
	[Token(Token = "0x2000276")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class PhysicsGadgetConfigurableLimitReader : MonoBehaviour
	{
		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool invertValue;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ConfigurableJoint joint;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Vector3 axisPos;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float value;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 limitAxis;

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x9CD048", Offset = "0x9CD048", VA = "0x9CD048")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x9CD244", Offset = "0x9CD244", VA = "0x9CD244")]
		public float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x9CD4AC", Offset = "0x9CD4AC", VA = "0x9CD4AC")]
		public PhysicsGadgetConfigurableLimitReader()
		{
		}
	}
	[Token(Token = "0x2000277")]
	[RequireComponent(typeof(HingeJoint))]
	public class PhysicsGadgetHingeAngleReader : MonoBehaviour
	{
		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool invertValue;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HingeJoint joint;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float value;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion startRot;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion deltaParentRotation;

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x9CD4C0", Offset = "0x9CD4C0", VA = "0x9CD4C0")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x9CD540", Offset = "0x9CD540", VA = "0x9CD540")]
		public float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x9CD638", Offset = "0x9CD638", VA = "0x9CD638")]
		public PhysicsGadgetHingeAngleReader()
		{
		}
	}
	[Token(Token = "0x2000278")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class PhysicsGadgetJoystick : MonoBehaviour
	{
		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool invertX;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool invertY;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 xRange;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 zRange;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 value;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 jointRotation;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody body;

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x9CD64C", Offset = "0x9CD64C", VA = "0x9CD64C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x9CD6DC", Offset = "0x9CD6DC", VA = "0x9CD6DC")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x9CD7E4", Offset = "0x9CD7E4", VA = "0x9CD7E4")]
		public Vector2 GetValue()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x9CD860", Offset = "0x9CD860", VA = "0x9CD860")]
		public PhysicsGadgetJoystick()
		{
		}
	}
	[Token(Token = "0x2000279")]
	public class PhysicsGadgetLever : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Min(0.01f)]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnMax will be called at 0.9, OnMin at -0.9, and OnMiddle at -0.1 or 0.1")]
		public float threshold;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent OnMax;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnMid;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent OnMin;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool min;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool max;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool mid;

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x9CD874", Offset = "0x9CD874", VA = "0x9CD874")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x9CD994", Offset = "0x9CD994", VA = "0x9CD994")]
		private void Max()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x9CD9D8", Offset = "0x9CD9D8", VA = "0x9CD9D8")]
		private void Mid()
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x9CD9B4", Offset = "0x9CD9B4", VA = "0x9CD9B4")]
		private void Min()
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x9CD9FC", Offset = "0x9CD9FC", VA = "0x9CD9FC")]
		public PhysicsGadgetLever()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public class PhysicsGadgetSlider : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Min(0.01f)]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnMax will be called at 0.9, OnMin at -0.9, and OnMiddle at -0.1 or 0.1")]
		public float threshold;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent OnMax;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent OnMid;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnMin;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool min;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool max;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool mid;

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x9CDA1C", Offset = "0x9CDA1C", VA = "0x9CDA1C")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x9CDB3C", Offset = "0x9CDB3C", VA = "0x9CDB3C")]
		private void Max()
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x9CDB80", Offset = "0x9CDB80", VA = "0x9CDB80")]
		private void Mid()
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x9CDB5C", Offset = "0x9CDB5C", VA = "0x9CDB5C")]
		private void Min()
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x9CDBA4", Offset = "0x9CDBA4", VA = "0x9CDBA4")]
		public PhysicsGadgetSlider()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public enum DistanceGrabType
	{
		[Token(Token = "0x4000AAD")]
		Velocity,
		[Token(Token = "0x4000AAE")]
		Linear
	}
	[Token(Token = "0x200027C")]
	[HelpURL("https://earnestrobot.notion.site/Distance-Grabbing-19e4e8b14f00428295eca75fca752787")]
	[RequireComponent(typeof(Grabbable))]
	public class DistanceGrabbable : MonoBehaviour
	{
		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Distance Grabbable", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Header("Pull")]
		public bool instantPull;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public DistanceGrabType grabType;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0.4f, 1.1f)]
		[Tooltip("Use this to adjust the angle of the arch that the gameobject follows while shooting towards your hand.")]
		[ShowIf("grabType", DistanceGrabType.Velocity)]
		public float archMultiplier;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Slow down or speed up gravitation to your liking.")]
		[ShowIf("grabType", DistanceGrabType.Velocity)]
		public float gravitationVelocity;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Rotation")]
		[Tooltip("This enables rotation which makes the gameobject orient to the rotation of you hand as it moves through the air. All below rotation variables have no use when this is false.")]
		[ShowIf("grabType", DistanceGrabType.Velocity)]
		public bool rotate;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Speed that the object orients to the rotation of your hand.")]
		[ShowIf("grabType", DistanceGrabType.Velocity)]
		public float rotationSpeed;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AutoToggleHeader("Enable Highlighting", 0, 0)]
		[Tooltip("Whether or not to ignore all highlights including default highlights on HandPointGrab")]
		public bool ignoreHighlights;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[EnableIf("ignoreHighlights")]
		[Tooltip("Highlight targeted material to use - defaults to HandPointGrab materials if none")]
		public Material targetedMaterial;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[EnableIf("ignoreHighlights")]
		[Tooltip("Highlight selected material to use - defaults to HandPointGrab materials if none")]
		public Material selectedMaterial;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent OnPull;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Space]
		[ShowIf("showEvents")]
		[Tooltip("Called when the object has been targeted/aimed at by the pointer")]
		public UnityHandGrabEvent StartTargeting;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopTargeting;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Called when the object has been selected before being pulled or flicked")]
		[ShowIf("showEvents")]
		[Space]
		public UnityHandGrabEvent StartSelecting;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopSelecting;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public HandGrabEvent OnPullCanceled;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal Grabbable grabbable;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform target;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 calculatedNecessaryVelocity;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool gravitationEnabled;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		private bool gravitationMethodBegun;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		private bool pullStarted;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody body;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float timePassedSincePull;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 lastGravitationVelocity;

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x9CDBCC", Offset = "0x9CDBCC", VA = "0x9CDBCC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x9CDCFC", Offset = "0x9CDCFC", VA = "0x9CDCFC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x9CDE80", Offset = "0x9CDE80", VA = "0x9CDE80")]
		private void FollowHandRotation()
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x9CDF60", Offset = "0x9CDF60", VA = "0x9CDF60")]
		private void GravitateTowardsHand()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x9CDDB8", Offset = "0x9CDDB8", VA = "0x9CDDB8")]
		private void InitialVelocityPushToHand()
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x9CE198", Offset = "0x9CE198", VA = "0x9CE198")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x9CE128", Offset = "0x9CE128", VA = "0x9CE128")]
		private Vector3 CalculateTrajectoryVelocity(Vector3 origin, Vector3 target, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x9CE1FC", Offset = "0x9CE1FC", VA = "0x9CE1FC")]
		public void SetTarget(Transform theObject)
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x9CE1D8", Offset = "0x9CE1D8", VA = "0x9CE1D8")]
		public void CancelTarget()
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x9CE220", Offset = "0x9CE220", VA = "0x9CE220")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x200027D")]
	public enum HandGrabType
	{
		[Token(Token = "0x4000ACA")]
		Default,
		[Token(Token = "0x4000ACB")]
		HandToGrabbable,
		[Token(Token = "0x4000ACC")]
		GrabbableToHand
	}
	[Token(Token = "0x200027E")]
	[DefaultExecutionOrder(-2)]
	[HelpURL("https://earnestrobot.notion.site/Grabbables-9308c564e60848a882eb23e9778ee2b6")]
	public class Grabbable : GrabbableBase
	{
		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("This will copy the given grabbables settings to this grabbable when applied")]
		[OnValueChanged("EditorCopyGrabbable")]
		public Grabbable CopySettings;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Header("Grab Settings")]
		[Tooltip("Whether or not this can be grabbed with more than one hand")]
		public bool singleHandOnly;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		[ShowIf("singleHandOnly")]
		[Tooltip("if false single handed items cannot be passes back and forth on grab")]
		public bool allowHeldSwapping;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		[Tooltip("Will the item automatically return the hand on grab - good for saved poses, bad for heavy things")]
		public bool instantGrab;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
		[Tooltip("Experimental - ignores weight of held object while held")]
		public bool ignoreWeight;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("Creates an offset an grab so the hand will not return to the hand on grab - Good for statically jointed grabbable objects")]
		public bool maintainGrabOffset;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDD")]
		[Tooltip("This will NOT parent the object under the hands on grab. This will parent the object to the parents of the hand, which allow you to move the hand parent object smoothly while holding an item, but will also allow you to move items that are very heavy - recommended for all objects that aren't very heavy or jointed to other rigidbodies")]
		public bool parentOnGrab;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Header("Release Settings")]
		[FormerlySerializedAs("throwMultiplyer")]
		[Tooltip("How much to multiply throw by for this grabbable when releasing - 0-1 for no or reduced throw strength")]
		public float throwPower;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("The required force to break the fixedJoint\n Turn this to \"infinity\" to disable (Might cause jitter)\nIdeal value depends on hand mass and velocity settings")]
		public float jointBreakForce;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AutoToggleHeader("Show Advanced", 0, 0)]
		public bool showAdvancedSettings;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("Which hand this can be held by")]
		public HandType handType;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Which hand this can be held by")]
		[ShowIf("showAdvancedSettings")]
		public HandGrabType grabType;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("If true (and using HandToGrabbable) the hand will only return to the follow while moving. Good for picking up objects without disrupting the things around them")]
		[ShowIf("showAdvancedSettings")]
		public bool useGentleGrab;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("Adds and links a GrabbableChild to each child with a collider on start - So the hand can grab them")]
		public bool makeChildrenGrabbable;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF6")]
		[Tooltip("Whether or not the break call made only when holding with multiple hands - if this is false the break event can be called by forcing an object into a static collider")]
		[ShowIf("showAdvancedSettings")]
		public bool pullApartBreakOnly;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Space]
		[ShowIf("showAdvancedSettings")]
		[Min(0f)]
		[Tooltip("The joint that connects the hand and the grabbable. Defaults to the joint in AutoHand/Resources/DefaultJoint.prefab if empty")]
		public ConfigurableJoint customGrabJoint;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The number of seconds that the hand collision should ignore the released object\n (Good for increased placement precision and resolves clipping errors)")]
		[Min(0f)]
		[ShowIf("showAdvancedSettings")]
		public float ignoreReleaseTime;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Min(0f)]
		[Tooltip("I.E. Grab Prioirty - BIGGER IS BETTER - divides highlight distance by this when calculating which object to grab. Hands always grab closest object to palm")]
		[ShowIf("showAdvancedSettings")]
		public float grabPriorityWeight;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Offsets the grabbable by this much when being held")]
		[ShowIf("showAdvancedSettings")]
		public Vector3 heldPositionOffset;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("Offsets the grabbable by this many degrees when being held")]
		public Vector3 heldRotationOffset;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("For the special use case of having grabbable objects with physics jointed peices move properly while being held")]
		[ShowIf("showAdvancedSettings")]
		[Space]
		public List<Rigidbody> jointedBodies;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("For the special use case of having things connected to the grabbable that the hand should ignore while being held (good for doors and drawers) -> for always active use the [GrabbableIgnoreHands] Component")]
		[ShowIf("showAdvancedSettings")]
		public List<Collider> heldIgnoreColliders;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[ShowIf("showEvents")]
		[Space]
		public UnityHandGrabEvent onGrab;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent onRelease;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AutoToggleHeader("Show Advanced Events", 0, 0)]
		public bool showAdvancedEvents;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[ShowIf("showAdvancedEvents")]
		[Space]
		[Space]
		public UnityHandGrabEvent onSqueeze;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[ShowIf("showAdvancedEvents")]
		public UnityHandGrabEvent onUnsqueeze;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[Space]
		[ShowIf("showAdvancedEvents")]
		[Space]
		public UnityHandGrabEvent onHighlight;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[ShowIf("showAdvancedEvents")]
		public UnityHandGrabEvent onUnhighlight;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[ShowIf("showAdvancedEvents")]
		[Space]
		[Space]
		public UnityHandGrabEvent OnJointBreak;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[ShowIf("showAdvancedSettings")]
		[HideInInspector]
		[Tooltip("Lock hand in place on grab (This is a legacy setting, set hand kinematic on grab/release instead)")]
		public bool lockHandOnGrab;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public HandGrabEvent OnBeforeGrabEvent;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public HandGrabEvent OnGrabEvent;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public HandGrabEvent OnReleaseEvent;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public HandGrabEvent OnJointBreakEvent;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public HandGrabEvent OnSqueezeEvent;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public HandGrabEvent OnUnsqueezeEvent;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public HandGrabEvent OnHighlightEvent;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public HandGrabEvent OnUnhighlightEvent;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private List<Grabbable> jointedGrabbables;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private float lastUpdateTime;

		[Token(Token = "0x17000138")]
		public float throwMultiplyer
		{
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0x9CE258", Offset = "0x9CE258", VA = "0x9CE258")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0x9CE260", Offset = "0x9CE260", VA = "0x9CE260")]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public bool wasForceReleased
		{
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0x9CE268", Offset = "0x9CE268", VA = "0x9CE268")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0x9CE270", Offset = "0x9CE270", VA = "0x9CE270")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		public Hand lastHeldBy
		{
			[Token(Token = "0x6000CDA")]
			[Address(RVA = "0x9CE27C", Offset = "0x9CE27C", VA = "0x9CE27C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0x9CE284", Offset = "0x9CE284", VA = "0x9CE284")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x9CE294", Offset = "0x9CE294", VA = "0x9CE294", Slot = "8")]
		protected new virtual void Awake()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x9CE524", Offset = "0x9CE524", VA = "0x9CE524", Slot = "9")]
		protected new virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x9CE5A0", Offset = "0x9CE5A0", VA = "0x9CE5A0", Slot = "10")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x9CF114", Offset = "0x9CF114", VA = "0x9CF114", Slot = "11")]
		public virtual void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x9CF1EC", Offset = "0x9CF1EC", VA = "0x9CF1EC", Slot = "12")]
		public virtual void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x9CF31C", Offset = "0x9CF31C", VA = "0x9CF31C")]
		internal void IgnoreColliders(Collider bodyCapsule, bool ignore = true)
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x9CF468", Offset = "0x9CF468", VA = "0x9CF468", Slot = "13")]
		internal virtual void Highlight(Hand hand, [Optional] Material customMat)
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x9CF8BC", Offset = "0x9CF8BC", VA = "0x9CF8BC", Slot = "14")]
		internal virtual void Unhighlight(Hand hand)
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x9CF9A8", Offset = "0x9CF9A8", VA = "0x9CF9A8", Slot = "15")]
		internal virtual void OnSqueeze(Hand hand)
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x9CFA2C", Offset = "0x9CFA2C", VA = "0x9CFA2C", Slot = "16")]
		internal virtual void OnUnsqueeze(Hand hand)
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x9CFAB0", Offset = "0x9CFAB0", VA = "0x9CFAB0", Slot = "17")]
		internal virtual void OnBeforeGrab(Hand hand)
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x9CFB6C", Offset = "0x9CFB6C", VA = "0x9CFB6C", Slot = "18")]
		internal virtual void OnGrab(Hand hand)
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x9CFF94", Offset = "0x9CFF94", VA = "0x9CFF94", Slot = "19")]
		public virtual bool CanGrab(HandBase hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x9D000C", Offset = "0x9D000C", VA = "0x9D000C", Slot = "20")]
		internal virtual void OnRelease(Hand hand)
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x9D02FC", Offset = "0x9D02FC", VA = "0x9D02FC", Slot = "21")]
		internal virtual void BreakHandConnection(Hand hand)
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x9D0708", Offset = "0x9D0708", VA = "0x9D0708", Slot = "22")]
		public virtual void HandsRelease()
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x9D079C", Offset = "0x9D079C", VA = "0x9D079C", Slot = "23")]
		public virtual void HandRelease(Hand hand)
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x9D081C", Offset = "0x9D081C", VA = "0x9D081C", Slot = "24")]
		public virtual void ForceHandsRelease()
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x9D08C8", Offset = "0x9D08C8", VA = "0x9D08C8", Slot = "25")]
		public virtual void ForceHandRelease(Hand hand)
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x9D09B0", Offset = "0x9D09B0", VA = "0x9D09B0", Slot = "26")]
		public virtual void OnHandJointBreak(Hand hand)
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x9D0C58", Offset = "0x9D0C58", VA = "0x9D0C58")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x9D0CA0", Offset = "0x9D0CA0", VA = "0x9D0CA0")]
		public Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x9D0DD8", Offset = "0x9D0DD8", VA = "0x9D0DD8")]
		public List<Hand> GetHeldBy()
		{
			return null;
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x9CF05C", Offset = "0x9CF05C", VA = "0x9CF05C")]
		public int HeldCount(bool includedJointedCount = true)
		{
			return default(int);
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x9D0DE0", Offset = "0x9D0DE0", VA = "0x9D0DE0")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x9D0E30", Offset = "0x9D0E30", VA = "0x9D0E30")]
		public bool BeingGrabbed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x9D0E38", Offset = "0x9D0E38", VA = "0x9D0E38")]
		public void PlayHapticVibration()
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x9D0FAC", Offset = "0x9D0FAC", VA = "0x9D0FAC")]
		public void PlayHapticVibration(float duration = 0.025f)
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x9D1114", Offset = "0x9D1114", VA = "0x9D1114")]
		public void PlayHapticVibration(float duration, float amp = 0.5f)
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x9D12FC", Offset = "0x9D12FC", VA = "0x9D12FC", Slot = "27")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x9D1468", Offset = "0x9D1468", VA = "0x9D1468")]
		public void SetParentOnGrab(bool parentOnGrab)
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x9D1474", Offset = "0x9D1474", VA = "0x9D1474")]
		public void AddJointedBody(Rigidbody body)
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x9D1738", Offset = "0x9D1738", VA = "0x9D1738")]
		public void RemoveJointedBody(Rigidbody body)
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x9D18E8", Offset = "0x9D18E8", VA = "0x9D18E8")]
		public void DoDestroy()
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x9CF004", Offset = "0x9CF004", VA = "0x9CF004")]
		public int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x9D1954", Offset = "0x9D1954", VA = "0x9D1954")]
		public int JointedCollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x9CE4AC", Offset = "0x9CE4AC", VA = "0x9CE4AC")]
		private void MakeChildrenGrabbable()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x9D13F0", Offset = "0x9D13F0", VA = "0x9D13F0")]
		private void MakeChildrenUngrabbable()
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x9D0568", Offset = "0x9D0568", VA = "0x9D0568")]
		internal void ResetGrabbableAfterRlease()
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x9D1D38", Offset = "0x9D1D38", VA = "0x9D1D38")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x200027F")]
	[DefaultExecutionOrder(1)]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabbable grabParent;

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x9D1FC0", Offset = "0x9D1FC0", VA = "0x9D1FC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x9D20F8", Offset = "0x9D20F8", VA = "0x9D20F8")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x2000280")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableCollisionHaptics : MonoBehaviour
	{
		[Token(Token = "0x2000281")]
		[CompilerGenerated]
		private sealed class <PlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableCollisionHaptics <>4__this;

			[Token(Token = "0x1700013B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D11")]
				[Address(RVA = "0x9D26EC", Offset = "0x9D26EC", VA = "0x9D26EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D13")]
				[Address(RVA = "0x9D2734", Offset = "0x9D2734", VA = "0x9D2734", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0x9D2530", Offset = "0x9D2530", VA = "0x9D2530")]
			[DebuggerHidden]
			public <PlayBuffer>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0x9D2618", Offset = "0x9D2618", VA = "0x9D2618", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D10")]
			[Address(RVA = "0x9D261C", Offset = "0x9D261C", VA = "0x9D261C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D12")]
			[Address(RVA = "0x9D26F4", Offset = "0x9D26F4", VA = "0x9D26F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000282")]
		[CompilerGenerated]
		private sealed class <HapticPlayBuffer>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableCollisionHaptics <>4__this;

			[Token(Token = "0x4000B0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x1700013D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D17")]
				[Address(RVA = "0x9D2810", Offset = "0x9D2810", VA = "0x9D2810", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D19")]
				[Address(RVA = "0x9D2858", Offset = "0x9D2858", VA = "0x9D2858", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x9D2558", Offset = "0x9D2558", VA = "0x9D2558")]
			[DebuggerHidden]
			public <HapticPlayBuffer>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x9D273C", Offset = "0x9D273C", VA = "0x9D273C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D16")]
			[Address(RVA = "0x9D2740", Offset = "0x9D2740", VA = "0x9D2740", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D18")]
			[Address(RVA = "0x9D2818", Offset = "0x9D2818", VA = "0x9D2818", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The layers that cause the sound to play")]
		public LayerMask collisionTriggers;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float hapticAmp;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float velocityAmp;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float repeatDelay;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxDuration;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityAmpCurve;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityDurationCurve;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabbable grab;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody body;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool canPlay;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine playRoutine;

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x9D2100", Offset = "0x9D2100", VA = "0x9D2100")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x9D2230", Offset = "0x9D2230", VA = "0x9D2230")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x9D2244", Offset = "0x9D2244", VA = "0x9D2244")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x9D24BC", Offset = "0x9D24BC", VA = "0x9D24BC")]
		[IteratorStateMachine(typeof(<PlayBuffer>d__14))]
		private IEnumerator PlayBuffer()
		{
			return null;
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x9D21AC", Offset = "0x9D21AC", VA = "0x9D21AC")]
		[IteratorStateMachine(typeof(<HapticPlayBuffer>d__15))]
		private IEnumerator HapticPlayBuffer(float time)
		{
			return null;
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x9D2580", Offset = "0x9D2580", VA = "0x9D2580")]
		public GrabbableCollisionHaptics()
		{
		}
	}
	[Token(Token = "0x2000283")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableExtraEvents : MonoBehaviour
	{
		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityHandGrabEvent OnFirstGrab;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityHandGrabEvent OnLastRelease;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityHandGrabEvent OnTwoHandedGrab;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandGrabEvent OnTwoHandedRelease;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable grab;

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x9D2860", Offset = "0x9D2860", VA = "0x9D2860")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x9D2A08", Offset = "0x9D2A08", VA = "0x9D2A08")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x9D2BB8", Offset = "0x9D2BB8", VA = "0x9D2BB8")]
		public void Grab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x9D2C74", Offset = "0x9D2C74", VA = "0x9D2C74")]
		public void Release(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x9D2D2C", Offset = "0x9D2D2C", VA = "0x9D2D2C")]
		public GrabbableExtraEvents()
		{
		}
	}
	[Token(Token = "0x2000284")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableOnlyJoint : MonoBehaviour
	{
		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabbable jointedGrabbable;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool resetOnRelease;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable localGrabbable;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Joint freezeJoint;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 localStartPosition;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion localStartRotation;

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x9D2D34", Offset = "0x9D2D34", VA = "0x9D2D34")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x9D3130", Offset = "0x9D3130", VA = "0x9D3130")]
		private void OnGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x9D31D4", Offset = "0x9D31D4", VA = "0x9D31D4")]
		private void OnRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x9D33E0", Offset = "0x9D33E0", VA = "0x9D33E0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x9D3554", Offset = "0x9D3554", VA = "0x9D3554")]
		private void CreateJoint()
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x9D36C4", Offset = "0x9D36C4", VA = "0x9D36C4")]
		public GrabbableOnlyJoint()
		{
		}
	}
	[Token(Token = "0x2000285")]
	[HelpURL("https://earnestrobot.notion.site/Custom-Poses-868c1fa0590542a0b5b7937b5feb6b0d")]
	public class GrabbablePose : MonoBehaviour
	{
		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Grabbable Pose", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool poseEnabled;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Purely for organizational purposes in the editor")]
		public string poseName;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This value must match the pose index of the a hand in order for the pose to work")]
		public int poseIndex;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Whether or not this pose can be used by both hands at once or only one hand at a time")]
		public bool singleHanded;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[AutoToggleHeader("Advanced Settings", 0, 0)]
		public bool showAdvanced;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float positionWeight;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationWeight;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("These poses will only be enabled when this pose is active. Great for secondary poses like holding the front of a gun with your second hand, only while holding the trigger")]
		public GrabbablePose[] linkedPoses;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool showEditorTools;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Scriptable options NOT REQUIRED -> Create scriptable throught [Auto Hand/Custom Pose]")]
		[HideInInspector]
		public HandPoseScriptable poseScriptable;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[Tooltip("Used to pose for the grabbable")]
		public Hand editorHand;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public HandPoseData rightPose;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public bool rightPoseSet;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public HandPoseData leftPose;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public bool leftPoseSet;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<Hand> posingHands;

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x9D36D4", Offset = "0x9D36D4", VA = "0x9D36D4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x9D3724", Offset = "0x9D3724", VA = "0x9D3724")]
		public bool CanSetPose(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x9D37E4", Offset = "0x9D37E4", VA = "0x9D37E4", Slot = "5")]
		public virtual HandPoseData GetHandPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x9D38AC", Offset = "0x9D38AC", VA = "0x9D38AC", Slot = "6")]
		public virtual void SetHandPose(Hand hand, bool isProjection = false)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x9D3A48", Offset = "0x9D3A48", VA = "0x9D3A48", Slot = "7")]
		public virtual void CancelHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x9D3B10", Offset = "0x9D3B10", VA = "0x9D3B10")]
		public HandPoseData GetNewPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x9D3FC8", Offset = "0x9D3FC8", VA = "0x9D3FC8")]
		public bool HasPose(bool left)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x9D407C", Offset = "0x9D407C", VA = "0x9D407C")]
		public GrabbablePose()
		{
		}
	}
	[Token(Token = "0x2000287")]
	[HelpURL("https://earnestrobot.notion.site/Custom-Poses-868c1fa0590542a0b5b7937b5feb6b0d")]
	public class GrabbablePoseAdvanced : GrabbablePose
	{
		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Usually this can be left empty, used to create a different center point if the objects transform isn't ceneterd for the prefered rotation/movement axis")]
		public Transform centerObject;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Space]
		[Tooltip("You want this set so the disc gizmo is around the axis you want the hand to rotate, or that the line is straight through the axis you want to move")]
		public Vector3 up;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("Whether or not to automatically allow for the opposite direction pose to be automatically applied (I.E. Should I be able to grab my hammer only with the head facing up, or in both directions?)")]
		[Space]
		public bool useInvertPose;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Space]
		[Tooltip("The minimum angle rotation around the included directions")]
		public int minAngle;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Tooltip("The maximum angle rotation around the included directions")]
		public int maxAngle;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Space]
		[Tooltip("The minimum distance allowed from the saved posed along the included directions")]
		public float maxRange;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Tooltip("The maximum distance allowed from the saved posed along the included directions")]
		public float minRange;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Helps test pose by setting the angle of the editor hand, REQUIRES GIZMOS ENABLED")]
		[Header("Requires Gizmos Enabled")]
		public int testAngle;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Tooltip("Helps test pose by setting the range position of the editor hand, REQUIRES GIZMOS ENABLED")]
		public float testRange;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int lastAngle;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float lastRange;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 pregrabPos;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Quaternion pregrabRot;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Transform tempContainer;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Transform handMatch;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Transform getTransform;

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x9D42CC", Offset = "0x9D42CC", VA = "0x9D42CC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x9D4308", Offset = "0x9D4308", VA = "0x9D4308", Slot = "5")]
		public override HandPoseData GetHandPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x9D46DC", Offset = "0x9D46DC", VA = "0x9D46DC")]
		public Quaternion GetClosestRotation(Hand hand, Vector3 up, bool addInverse)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x9D5374", Offset = "0x9D5374", VA = "0x9D5374")]
		public Vector3 GetClosestPosition(Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x9D5760", Offset = "0x9D5760", VA = "0x9D5760")]
		public HandPoseData GetHandPoseData(Hand hand, int angle, float range)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x9D465C", Offset = "0x9D465C", VA = "0x9D465C")]
		private Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x9D5AB0", Offset = "0x9D5AB0", VA = "0x9D5AB0")]
		public GrabbablePoseAdvanced()
		{
		}
	}
	[Token(Token = "0x2000288")]
	public class GrabbablePoseCombiner : MonoBehaviour
	{
		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GrabbablePose> poses;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HandPoseData pose;

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x9D5B14", Offset = "0x9D5B14", VA = "0x9D5B14")]
		public bool CanSetPose(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x9D5CC8", Offset = "0x9D5CC8", VA = "0x9D5CC8")]
		public void AddPose(GrabbablePose pose)
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x9D5DB0", Offset = "0x9D5DB0", VA = "0x9D5DB0")]
		public GrabbablePose GetClosestPose(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x9D6424", Offset = "0x9D6424", VA = "0x9D6424")]
		internal int PoseCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x9D646C", Offset = "0x9D646C", VA = "0x9D646C")]
		public GrabbablePoseCombiner()
		{
		}
	}
	[Token(Token = "0x2000289")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableSubstitute : MonoBehaviour
	{
		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Whether or not to disable this gameobject on grab")]
		public bool disableOnGrab;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If true, the substitute will return to the this local location and turn off and the local grabbable will turn back on")]
		public bool returnOnRelease;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grabbableSubstitute;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable localGrabbable;

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x9D64F4", Offset = "0x9D64F4", VA = "0x9D64F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x9D6694", Offset = "0x9D6694", VA = "0x9D6694")]
		private void OnGrabOriginal(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x9D6834", Offset = "0x9D6834", VA = "0x9D6834")]
		private void OnReleaseSub(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x9D699C", Offset = "0x9D699C", VA = "0x9D699C")]
		public void LocalSubstitute(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x9D6B18", Offset = "0x9D6B18", VA = "0x9D6B18")]
		public GrabbableSubstitute()
		{
		}
	}
	[Token(Token = "0x200028A")]
	[RequireComponent(typeof(Rigidbody), typeof(Grabbable))]
	public class GrabbableThrowEvent : MonoBehaviour
	{
		[Token(Token = "0x200028B")]
		[CompilerGenerated]
		private sealed class <ResetThrown>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableThrowEvent <>4__this;

			[Token(Token = "0x1700013F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D4B")]
				[Address(RVA = "0x9D719C", Offset = "0x9D719C", VA = "0x9D719C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000140")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D4D")]
				[Address(RVA = "0x9D71E4", Offset = "0x9D71E4", VA = "0x9D71E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D48")]
			[Address(RVA = "0x9D6ECC", Offset = "0x9D6ECC", VA = "0x9D6ECC")]
			[DebuggerHidden]
			public <ResetThrown>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6000D49")]
			[Address(RVA = "0x9D70D0", Offset = "0x9D70D0", VA = "0x9D70D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0x9D70D4", Offset = "0x9D70D4", VA = "0x9D70D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0x9D71A4", Offset = "0x9D71A4", VA = "0x9D71A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The velocity magnitude required on collision to cause the break event")]
		public float breakVelocity;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The layers that will cause this grabbale to break")]
		public LayerMask collisionLayers;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent OnBreak;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rb;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool thrown;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine resetThrowing;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float throwTime;

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x9D6B28", Offset = "0x9D6B28", VA = "0x9D6B28")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x9D6BB8", Offset = "0x9D6BB8", VA = "0x9D6BB8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x9D6C94", Offset = "0x9D6C94", VA = "0x9D6C94")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x9D6D70", Offset = "0x9D6D70", VA = "0x9D6D70")]
		private void OnReleased(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x9D6E58", Offset = "0x9D6E58", VA = "0x9D6E58")]
		[IteratorStateMachine(typeof(<ResetThrown>d__12))]
		private IEnumerator ResetThrown()
		{
			return null;
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x9D6EF4", Offset = "0x9D6EF4", VA = "0x9D6EF4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x9D707C", Offset = "0x9D707C", VA = "0x9D707C")]
		private void Break()
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x9D7098", Offset = "0x9D7098", VA = "0x9D7098")]
		public GrabbableThrowEvent()
		{
		}
	}
	[Token(Token = "0x200028C")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabLock : MonoBehaviour
	{
		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand.Released() must be called elsewhere")]
		[Header("Use this script to prevent grabbable release")]
		public UnityEvent OnGrabPressed;

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x9D71EC", Offset = "0x9D71EC", VA = "0x9D71EC")]
		public GrabLock()
		{
		}
	}
	[Token(Token = "0x200028D")]
	public delegate void PlacePointEvent(PlacePoint point, Grabbable grabbable);
	[Token(Token = "0x200028E")]
	[HelpURL("https://earnestrobot.notion.site/Place-Points-e6361a414928450dbb53d76fd653cf9a")]
	[RequireComponent(typeof(SphereCollider))]
	public class PlacePoint : MonoBehaviour
	{
		[Token(Token = "0x200028F")]
		[CompilerGenerated]
		private sealed class <HighlightSafetyCheck>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlacePoint <>4__this;

			[Token(Token = "0x17000144")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D6D")]
				[Address(RVA = "0x9D8A8C", Offset = "0x9D8A8C", VA = "0x9D8A8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000145")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D6F")]
				[Address(RVA = "0x9D8AD4", Offset = "0x9D8AD4", VA = "0x9D8AD4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0x9D7540", Offset = "0x9D7540", VA = "0x9D7540")]
			[DebuggerHidden]
			public <HighlightSafetyCheck>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x6000D6B")]
			[Address(RVA = "0x9D8960", Offset = "0x9D8960", VA = "0x9D8960", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0x9D8964", Offset = "0x9D8964", VA = "0x9D8964", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D6E")]
			[Address(RVA = "0x9D8A94", Offset = "0x9D8A94", VA = "0x9D8A94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Place Point", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If used, the place point will only accept this grabbable as a target")]
		public Grabbable matchTarget;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Will allow placement for any grabbable with a name containing this array of strings, leave blank for any grabbable allowed")]
		public string[] placeNames;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The radius of the place point")]
		public float placeRadius;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("This will make the point place the object as soon as it enters the radius, instead of on release")]
		public bool forcePlace;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Tooltip("If true and will force release on place")]
		[ShowIf("forcePlace")]
		public bool forceHandRelease;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		[Tooltip("Whether or not the grabbable should be disabled on placement, (Good for things like placed keys)")]
		public bool disableGrabOnPlace;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		[Tooltip("Whether or not the grabbable should be disabled on placement")]
		public bool disableObjectOnPlace;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Whether or not the grabbable should be destroyed on placement, (Good for things like loaded magazines, combined with enabling static magazine)")]
		public bool destroyObjectOnPlace;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[Tooltip("Makes the object being placedObject kinematic")]
		[AutoToggleHeader("Use Kinematic", 0, 0)]
		public bool makePlacedKinematic;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space]
		[Tooltip("The rigidbody to attach the placed grabbable to - leave empty means no joint")]
		[HideIf("makePlacedKinematic")]
		public Rigidbody placedJointLink;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideIf("makePlacedKinematic")]
		[FormerlySerializedAs("placedJointBreakForce")]
		public float jointBreakForce;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AutoToggleHeader("Show Advanced", 0, 0)]
		public bool showAdvanced;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Snaps an object to the point at start, leave empty for no target")]
		[ShowIf("showAdvanced")]
		public Grabbable startPlaced;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ShowIf("showAdvanced")]
		[Tooltip("The object will snap to this point instead of the place point on place")]
		public Transform placedOffset;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ShowIf("showAdvanced")]
		[Tooltip("This will make the point place the object as soon as it enters the radius, instead of on release")]
		public bool parentOnPlace;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Whether or not to only allow placement of an object while it's being held (or released)")]
		[ShowIf("showAdvanced")]
		public bool heldPlaceOnly;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Will prevent placement for any name containing this array of strings")]
		[ShowIf("showAdvanced")]
		public string[] blacklistNames;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ShowIf("showEvents")]
		public UnityEvent OnPlace;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ShowIf("showEvents")]
		public UnityEvent OnRemove;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ShowIf("showEvents")]
		public UnityEvent OnHighlight;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ShowIf("showEvents")]
		public UnityEvent OnStopHighlight;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public PlacePointEvent OnPlaceEvent;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public PlacePointEvent OnRemoveEvent;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public PlacePointEvent OnHighlightEvent;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public PlacePointEvent OnStopHighlightEvent;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected FixedJoint joint;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected float removalDistance;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected Vector3 placePosition;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected SphereCollider col;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Transform originParent;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected bool placingFrame;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected CollisionDetectionMode placedObjDetectionMode;

		[Token(Token = "0x17000141")]
		public Grabbable highlightingObj
		{
			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x9D737C", Offset = "0x9D737C", VA = "0x9D737C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x9D7384", Offset = "0x9D7384", VA = "0x9D7384")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public Grabbable placedObject
		{
			[Token(Token = "0x6000D55")]
			[Address(RVA = "0x9D738C", Offset = "0x9D738C", VA = "0x9D738C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0x9D7394", Offset = "0x9D7394", VA = "0x9D7394")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public Grabbable lastPlacedObject
		{
			[Token(Token = "0x6000D57")]
			[Address(RVA = "0x9D739C", Offset = "0x9D739C", VA = "0x9D739C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x9D73A4", Offset = "0x9D73A4", VA = "0x9D73A4")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x9D73AC", Offset = "0x9D73AC", VA = "0x9D73AC", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x9D74CC", Offset = "0x9D74CC", VA = "0x9D74CC")]
		[IteratorStateMachine(typeof(<HighlightSafetyCheck>d__47))]
		private IEnumerator HighlightSafetyCheck()
		{
			return null;
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x9D7568", Offset = "0x9D7568", VA = "0x9D7568", Slot = "5")]
		public virtual bool CanPlace(Grabbable placeObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x9D774C", Offset = "0x9D774C", VA = "0x9D774C", Slot = "6")]
		public virtual void Place(Grabbable placeObj)
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x9D7D84", Offset = "0x9D7D84", VA = "0x9D7D84")]
		public void Remove()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x9D7E08", Offset = "0x9D7E08", VA = "0x9D7E08", Slot = "7")]
		public virtual void Remove(Grabbable placeObj)
		{
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x9D80F8", Offset = "0x9D80F8", VA = "0x9D80F8", Slot = "8")]
		internal virtual void Highlight(Grabbable from)
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x9D8218", Offset = "0x9D8218", VA = "0x9D8218", Slot = "9")]
		internal virtual void StopHighlight(Grabbable from)
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x9D8350", Offset = "0x9D8350", VA = "0x9D8350")]
		protected bool IsOverlapping(Grabbable from)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x9D84D8", Offset = "0x9D84D8", VA = "0x9D84D8", Slot = "10")]
		public virtual void SetStartPlaced()
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x9D8574", Offset = "0x9D8574", VA = "0x9D8574")]
		public Grabbable GetPlacedObject()
		{
			return null;
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x9D857C", Offset = "0x9D857C", VA = "0x9D857C")]
		internal float Distance(Transform from)
		{
			return default(float);
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x9D8684", Offset = "0x9D8684", VA = "0x9D8684", Slot = "11")]
		protected virtual void OnPlacedObjectGrabbed(Hand pHand, Grabbable pGrabbable)
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x9D86B8", Offset = "0x9D86B8", VA = "0x9D86B8", Slot = "12")]
		protected virtual void OnPlacedObjectReleased(Hand pHand, Grabbable pGrabbable)
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x9D86D8", Offset = "0x9D86D8", VA = "0x9D86D8", Slot = "13")]
		protected virtual void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x9D875C", Offset = "0x9D875C", VA = "0x9D875C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x9D8924", Offset = "0x9D8924", VA = "0x9D8924")]
		public PlacePoint()
		{
		}
	}
	[Token(Token = "0x2000290")]
	[RequireComponent(typeof(Rigidbody))]
	[DefaultExecutionOrder(1)]
	public class WeightlessFollower : MonoBehaviour
	{
		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Transform follow;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Transform follow1;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<Hand, Transform> heldMoveTo;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float followPositionStrength;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float followRotationStrength;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public float maxVelocity;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Grabbable grab;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Rigidbody body;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform moveTo;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float startMass;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float startDrag;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float startAngleDrag;

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x9D8ADC", Offset = "0x9D8ADC", VA = "0x9D8ADC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x9D8BCC", Offset = "0x9D8BCC", VA = "0x9D8BCC", Slot = "4")]
		public virtual void Set(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x9D92C0", Offset = "0x9D92C0", VA = "0x9D92C0", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x9D9350", Offset = "0x9D9350", VA = "0x9D9350")]
		protected void SetMoveTo()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x9D9528", Offset = "0x9D9528", VA = "0x9D9528", Slot = "6")]
		protected virtual void MoveTo()
		{
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x9D98FC", Offset = "0x9D98FC", VA = "0x9D98FC", Slot = "7")]
		protected virtual void TorqueTo()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x9D9BB8", Offset = "0x9D9BB8", VA = "0x9D9BB8")]
		private int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x9D9BD0", Offset = "0x9D9BD0", VA = "0x9D9BD0")]
		public void RemoveFollow(Hand hand, Transform follow)
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x9D9EEC", Offset = "0x9D9EEC", VA = "0x9D9EEC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x9DA0EC", Offset = "0x9DA0EC", VA = "0x9DA0EC")]
		public WeightlessFollower()
		{
		}
	}
	[Token(Token = "0x2000291")]
	[HelpURL("https://earnestrobot.notion.site/Fingers-63ae83cda0b14a35b5ae15beeb51dc03")]
	public class Finger : MonoBehaviour
	{
		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Tips")]
		[Tooltip("This transfrom will represent the tip/stopper of the finger")]
		public Transform tip;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This determines the radius of the spherecast check when bending fingers")]
		public float tipRadius;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		[Tooltip("This will offset the fingers bend (0 is no bend, 1 is full bend)")]
		public float bendOffset;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fingerSmoothSpeed;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public float secondaryOffset;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currBendOffset;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float bend;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		private Quaternion[] minGripRotPose;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private Vector3[] minGripPosPose;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		private Quaternion[] maxGripRotPose;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		private Vector3[] maxGripPosPose;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private Transform[] fingerJoints;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float lastHitBend;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Collider[] results;

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0x9DA254", Offset = "0x9DA254", VA = "0x9DA254")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x9DA2D0", Offset = "0x9DA2D0", VA = "0x9DA2D0")]
		public bool BendFingerUntilHit(int steps, int layermask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x9DA8D8", Offset = "0x9DA8D8", VA = "0x9DA8D8")]
		public bool UpdateFingerBend(float bend, int layermask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x9DAB3C", Offset = "0x9DAB3C", VA = "0x9DAB3C")]
		public void UpdateFinger()
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0x9DACC4", Offset = "0x9DACC4", VA = "0x9DACC4")]
		public void UpdateFinger(float bend)
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x9DAE50", Offset = "0x9DAE50", VA = "0x9DAE50")]
		public void SetFingerBend(float bend)
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x9DAFDC", Offset = "0x9DAFDC", VA = "0x9DAFDC")]
		public void SetCurrentFingerBend(float bend)
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x9DA258", Offset = "0x9DA258", VA = "0x9DA258")]
		private void SlowBend()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x9DA7F0", Offset = "0x9DA7F0", VA = "0x9DA7F0")]
		[ContextMenu("ResetBend")]
		public void ResetBend()
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x9DB168", Offset = "0x9DB168", VA = "0x9DB168")]
		[ContextMenu("Grip")]
		public void Grip()
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x9DB250", Offset = "0x9DB250", VA = "0x9DB250")]
		public float GetLastHitBend()
		{
			return default(float);
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x9DB258", Offset = "0x9DB258", VA = "0x9DB258")]
		[ContextMenu("Set Open Finger Pose")]
		public void SetMinPose()
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x9DB598", Offset = "0x9DB598", VA = "0x9DB598")]
		[ContextMenu("Set Closed Finger Pose")]
		public void SetMaxPose()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x9DB8D8", Offset = "0x9DB8D8", VA = "0x9DB8D8")]
		public bool IsMinPoseSaved()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x9DB8FC", Offset = "0x9DB8FC", VA = "0x9DB8FC")]
		public bool IsMaxPoseSaved()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x9DB920", Offset = "0x9DB920", VA = "0x9DB920")]
		public float GetCurrentBend()
		{
			return default(float);
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x9DB92C", Offset = "0x9DB92C", VA = "0x9DB92C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x9DB9E0", Offset = "0x9DB9E0", VA = "0x9DB9E0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x9DBB70", Offset = "0x9DBB70", VA = "0x9DBB70")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x2000292")]
	[HelpURL("https://earnestrobot.notion.site/Hand-967e36c2ab2945b2b0f75cea84624b2f")]
	[DefaultExecutionOrder(-10)]
	public class Hand : HandBase
	{
		[Token(Token = "0x2000294")]
		[CompilerGenerated]
		private sealed class <HighlightUpdate>d__125 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x4000BBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float timestep;

			[Token(Token = "0x17000147")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E03")]
				[Address(RVA = "0x9E3C5C", Offset = "0x9E3C5C", VA = "0x9E3C5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000148")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E05")]
				[Address(RVA = "0x9E3CA4", Offset = "0x9E3CA4", VA = "0x9E3CA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E00")]
			[Address(RVA = "0x9E3B1C", Offset = "0x9E3B1C", VA = "0x9E3B1C")]
			[DebuggerHidden]
			public <HighlightUpdate>d__125(int <>1__state)
			{
			}

			[Token(Token = "0x6000E01")]
			[Address(RVA = "0x9E3B44", Offset = "0x9E3B44", VA = "0x9E3B44", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E02")]
			[Address(RVA = "0x9E3B48", Offset = "0x9E3B48", VA = "0x9E3B48", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E04")]
			[Address(RVA = "0x9E3C64", Offset = "0x9E3C64", VA = "0x9E3C64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000295")]
		[CompilerGenerated]
		private struct <>c__DisplayClass127_0
		{
			[Token(Token = "0x4000BBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Hand <>4__this;

			[Token(Token = "0x4000BC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Grabbable startHoldingObj;
		}

		[Token(Token = "0x2000296")]
		[CompilerGenerated]
		private sealed class <GrabObject>d__127 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x4000BC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Grabbable grab;

			[Token(Token = "0x4000BC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public RaycastHit hit;

			[Token(Token = "0x4000BC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public GrabType grabType;

			[Token(Token = "0x4000BC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private <>c__DisplayClass127_0 <>8__1;

			[Token(Token = "0x4000BC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool <instantGrab>5__2;

			[Token(Token = "0x4000BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private HandPoseData <startGrabPose>5__3;

			[Token(Token = "0x4000BCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Vector3 <startGrabbablePosition>5__4;

			[Token(Token = "0x4000BCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private Quaternion <startGrabbableRotation>5__5;

			[Token(Token = "0x4000BCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private float <adjustedGrabTime>5__6;

			[Token(Token = "0x4000BCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			private Transform <grabTarget>5__7;

			[Token(Token = "0x4000BCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private HandPoseData <postGrabPose>5__8;

			[Token(Token = "0x4000BCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private Vector3 <endGrabbablePosition>5__9;

			[Token(Token = "0x4000BD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			private Quaternion <endGrabbableRotation>5__10;

			[Token(Token = "0x4000BD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private float <i>5__11;

			[Token(Token = "0x4000BD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			private bool <useGravity>5__12;

			[Token(Token = "0x17000149")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E09")]
				[Address(RVA = "0x9E6E10", Offset = "0x9E6E10", VA = "0x9E6E10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E0B")]
				[Address(RVA = "0x9E6E58", Offset = "0x9E6E58", VA = "0x9E6E58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x9E3CAC", Offset = "0x9E3CAC", VA = "0x9E3CAC")]
			[DebuggerHidden]
			public <GrabObject>d__127(int <>1__state)
			{
			}

			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x9E3CD4", Offset = "0x9E3CD4", VA = "0x9E3CD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E08")]
			[Address(RVA = "0x9E3CD8", Offset = "0x9E3CD8", VA = "0x9E3CD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0x9E6E18", Offset = "0x9E6E18", VA = "0x9E6E18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000297")]
		[CompilerGenerated]
		private sealed class <LerpHandPose>d__129 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x4000BD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HandPoseData fromPose;

			[Token(Token = "0x4000BD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public HandPoseData toPose;

			[Token(Token = "0x4000BD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public float totalTime;

			[Token(Token = "0x4000BD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float <timePassed>5__2;

			[Token(Token = "0x1700014B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E0F")]
				[Address(RVA = "0x9E7088", Offset = "0x9E7088", VA = "0x9E7088", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E11")]
				[Address(RVA = "0x9E70D0", Offset = "0x9E70D0", VA = "0x9E70D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0x9E6E60", Offset = "0x9E6E60", VA = "0x9E6E60")]
			[DebuggerHidden]
			public <LerpHandPose>d__129(int <>1__state)
			{
			}

			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0x9E6E88", Offset = "0x9E6E88", VA = "0x9E6E88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x9E6E8C", Offset = "0x9E6E8C", VA = "0x9E6E8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E10")]
			[Address(RVA = "0x9E7090", Offset = "0x9E7090", VA = "0x9E7090", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		[AutoToggleHeader("Enable Highlight", 0, 0, tooltip = "Raycasting for grabbables to highlight is expensive, you can disable it here if you aren't using it")]
		public bool usingHighlight;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		[EnableIf("usingHighlight")]
		[Tooltip("The layers to highlight and use look assist on --- Nothing will default on start")]
		public LayerMask highlightLayers;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		[Tooltip("Leave empty for none - used as a default option for all grabbables with empty highlight material")]
		[EnableIf("usingHighlight")]
		public Material defaultHighlight;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		[AutoToggleHeader("Show Advanced", 0, 0)]
		public bool showAdvanced;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		[Tooltip("Whether the hand should go to the object and come back on grab, or the object to float to the hand on grab. Will default to HandToGrabbable for objects that have \"parentOnGrab\" disabled")]
		[ShowIf("showAdvanced")]
		public GrabType grabType;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		[Min(0f)]
		[ShowIf("showAdvanced")]
		[Tooltip("Makes grab smoother; also based on range and reach distance - a very near grab is instant and a max distance grab is [X] frames")]
		public float minGrabTime;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		[Min(0f)]
		[Tooltip("Makes grab smoother; also based on range and reach distance - a very near grab is instant and a max distance grab is [X] frames")]
		[ShowIf("showAdvanced")]
		public float maxGrabTime;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		[ShowIf("showAdvanced")]
		[Tooltip("The animation curve based on the grab time 0-1")]
		[Min(0f)]
		public AnimationCurve grabCurve;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		[ShowIf("showAdvanced")]
		[Tooltip("Speed at which the gentle grab returns the grabbable")]
		[Min(0f)]
		public float smoothReturnSpeed;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		[Tooltip("This is used in conjunction with custom poses. For a custom pose to work it must has the same PoseIndex as the hand. Used for when your game has multiple hands")]
		[ShowIf("showAdvanced")]
		public int poseIndex;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		[AutoLine(0, 0)]
		public bool ignoreMe1;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] grabbableLayers;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string grabbableLayerNameDefault;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string grabbingLayerName;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string rightHandLayerName;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string leftHandLayerName;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private List<HandTriggerAreaEvents> triggerEventAreas;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private Coroutine tryGrab;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private Coroutine highlightRoutine;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private float startGrabDist;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private HandPoseData openHandPose;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private Grabbable lastHoldingObj;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private Coroutine _grabRoutine;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private Vector3 startHandGrabPosition;

		[Token(Token = "0x17000146")]
		private Coroutine grabRoutine
		{
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0x9DD158", Offset = "0x9DD158", VA = "0x9DD158")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0x9DD160", Offset = "0x9DD160", VA = "0x9DD160")]
			set
			{
			}
		}

		[Token(Token = "0x14000009")]
		public event HandGrabEvent OnTriggerGrab
		{
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0x9DBD58", Offset = "0x9DBD58", VA = "0x9DBD58")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D97")]
			[Address(RVA = "0x9DBDF8", Offset = "0x9DBDF8", VA = "0x9DBDF8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event HandGrabEvent OnBeforeGrabbed
		{
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0x9DBE98", Offset = "0x9DBE98", VA = "0x9DBE98")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0x9DBF38", Offset = "0x9DBF38", VA = "0x9DBF38")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event HandGrabEvent OnGrabbed
		{
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0x9DBFD8", Offset = "0x9DBFD8", VA = "0x9DBFD8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0x9DC078", Offset = "0x9DC078", VA = "0x9DC078")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event HandGrabEvent OnTriggerRelease
		{
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0x9DC118", Offset = "0x9DC118", VA = "0x9DC118")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0x9DC1B8", Offset = "0x9DC1B8", VA = "0x9DC1B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event HandGrabEvent OnBeforeReleased
		{
			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0x9DC258", Offset = "0x9DC258", VA = "0x9DC258")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0x9DC2F8", Offset = "0x9DC2F8", VA = "0x9DC2F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000E")]
		public event HandGrabEvent OnReleased
		{
			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0x9D9220", Offset = "0x9D9220", VA = "0x9D9220")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0x9D9E4C", Offset = "0x9D9E4C", VA = "0x9D9E4C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000F")]
		public event HandGrabEvent OnSqueezed
		{
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x9DC398", Offset = "0x9DC398", VA = "0x9DC398")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0x9DC438", Offset = "0x9DC438", VA = "0x9DC438")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000010")]
		public event HandGrabEvent OnUnsqueezed
		{
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0x9DC4D8", Offset = "0x9DC4D8", VA = "0x9DC4D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0x9DC578", Offset = "0x9DC578", VA = "0x9DC578")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000011")]
		public event HandGrabEvent OnHighlight
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0x9DC618", Offset = "0x9DC618", VA = "0x9DC618")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0x9DC6B8", Offset = "0x9DC6B8", VA = "0x9DC6B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event HandGrabEvent OnStopHighlight
		{
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0x9DC758", Offset = "0x9DC758", VA = "0x9DC758")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0x9DC7F8", Offset = "0x9DC7F8", VA = "0x9DC7F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event HandGrabEvent OnForcedRelease
		{
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x9DC898", Offset = "0x9DC898", VA = "0x9DC898")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0x9DC938", Offset = "0x9DC938", VA = "0x9DC938")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000014")]
		public event HandGrabEvent OnGrabJointBreak
		{
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0x9DC9D8", Offset = "0x9DC9D8", VA = "0x9DC9D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0x9DCA78", Offset = "0x9DCA78", VA = "0x9DCA78")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event HandGrabEvent OnHeldConnectionBreak
		{
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0x9DCB18", Offset = "0x9DCB18", VA = "0x9DCB18")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0x9DCBB8", Offset = "0x9DCBB8", VA = "0x9DCBB8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		public event HandGameObjectEvent OnHandCollisionStart
		{
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0x9DCC58", Offset = "0x9DCC58", VA = "0x9DCC58")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0x9DCCF8", Offset = "0x9DCCF8", VA = "0x9DCCF8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000017")]
		public event HandGameObjectEvent OnHandCollisionStop
		{
			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0x9DCD98", Offset = "0x9DCD98", VA = "0x9DCD98")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0x9DCE38", Offset = "0x9DCE38", VA = "0x9DCE38")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000018")]
		public event HandGameObjectEvent OnHandTriggerStart
		{
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0x9DCED8", Offset = "0x9DCED8", VA = "0x9DCED8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0x9DCF78", Offset = "0x9DCF78", VA = "0x9DCF78")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event HandGameObjectEvent OnHandTriggerStop
		{
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0x9DD018", Offset = "0x9DD018", VA = "0x9DD018")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0x9DD0B8", Offset = "0x9DD0B8", VA = "0x9DD0B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x9DD2C0", Offset = "0x9DD2C0", VA = "0x9DD2C0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x9DD4D0", Offset = "0x9DD4D0", VA = "0x9DD4D0", Slot = "20")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x9DD5A0", Offset = "0x9DD5A0", VA = "0x9DD5A0", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x9DD898", Offset = "0x9DD898", VA = "0x9DD898", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x9DDCFC", Offset = "0x9DDCFC", VA = "0x9DDCFC", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x9DE34C", Offset = "0x9DE34C", VA = "0x9DE34C")]
		private float GetGrabTime()
		{
			return default(float);
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x9DE4B4", Offset = "0x9DE4B4", VA = "0x9DE4B4", Slot = "21")]
		public virtual void Grab()
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x9DE4C8", Offset = "0x9DE4C8", VA = "0x9DE4C8", Slot = "22")]
		public virtual void Grab(GrabType grabType)
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x9DEA48", Offset = "0x9DEA48", VA = "0x9DEA48", Slot = "23")]
		public virtual void Grab(RaycastHit hit, Grabbable grab, GrabType grabType = GrabType.InstantGrab)
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x9DEB90", Offset = "0x9DEB90", VA = "0x9DEB90", Slot = "24")]
		public virtual void TryGrab(Grabbable grab)
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x9DF424", Offset = "0x9DF424", VA = "0x9DF424", Slot = "25")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x9DF6E0", Offset = "0x9DF6E0", VA = "0x9DF6E0", Slot = "26")]
		public virtual void ForceReleaseGrab()
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x9DF78C", Offset = "0x9DF78C", VA = "0x9DF78C", Slot = "27")]
		public virtual void ReleaseGrabLock()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x9DF79C", Offset = "0x9DF79C", VA = "0x9DF79C", Slot = "28")]
		public virtual void Squeeze()
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x9DF934", Offset = "0x9DF934", VA = "0x9DF934", Slot = "29")]
		public virtual void Unsqueeze()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x9DFAC8", Offset = "0x9DFAC8", VA = "0x9DFAC8", Slot = "30")]
		public virtual void BreakGrabConnection(bool callEvent = true)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x9DFE38", Offset = "0x9DFE38", VA = "0x9DFE38", Slot = "31")]
		public virtual void CreateGrabConnection(Grabbable grab, Vector3 handPos, Quaternion handRot, Vector3 grabPos, Quaternion grabRot, bool executeGrabEvents = false)
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x9E0388", Offset = "0x9E0388", VA = "0x9E0388", Slot = "32")]
		public virtual void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x9E0518", Offset = "0x9E0518", VA = "0x9E0518", Slot = "33")]
		public virtual void UpdateHighlight()
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x9DE914", Offset = "0x9DE914", VA = "0x9DE914")]
		public RaycastHit GetHighlightHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x9E0840", Offset = "0x9E0840", VA = "0x9E0840")]
		public void AutoPose(RaycastHit hit, Grabbable grabbable)
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x9E0E78", Offset = "0x9E0E78", VA = "0x9E0E78")]
		public HandPoseData GetHandPose()
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x9E0E98", Offset = "0x9E0E98", VA = "0x9E0E98")]
		public HandPoseData GetHeldPose()
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x9E0F54", Offset = "0x9E0F54", VA = "0x9E0F54", Slot = "34")]
		public virtual void SetHeldPose(HandPoseData pose, Grabbable grabbable, bool createJoint = true)
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x9E11FC", Offset = "0x9E11FC", VA = "0x9E11FC")]
		public void SetHandPose(HandPoseData pose)
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x9E1214", Offset = "0x9E1214", VA = "0x9E1214")]
		public void SetHandPose(GrabbablePose pose)
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x9E128C", Offset = "0x9E128C", VA = "0x9E128C")]
		public void UpdatePose(HandPoseData pose, float time)
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x9E13C0", Offset = "0x9E13C0", VA = "0x9E13C0")]
		public GrabbablePose GetGrabPose(Transform from, Grabbable grabbable)
		{
			return null;
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x9E142C", Offset = "0x9E142C", VA = "0x9E142C")]
		public bool GetCurrentHeldGrabPose(Transform from, Grabbable grabbable, out GrabbablePose grabPose, out Transform relativeTo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x9E1544", Offset = "0x9E1544", VA = "0x9E1544")]
		public Grabbable GetHeldGrabbable()
		{
			return null;
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x9E154C", Offset = "0x9E154C", VA = "0x9E154C")]
		public Grabbable GetHeld()
		{
			return null;
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x9E1554", Offset = "0x9E1554", VA = "0x9E1554")]
		public bool IsSqueezing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x9E155C", Offset = "0x9E155C", VA = "0x9E155C")]
		public void SetGrip(float grip)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x9E1564", Offset = "0x9E1564", VA = "0x9E1564")]
		[ContextMenu("Set Pose - Relax Hand")]
		public void RelaxHand()
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x9E15C8", Offset = "0x9E15C8", VA = "0x9E15C8")]
		[ContextMenu("Set Pose - Open Hand")]
		public void OpenHand()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x9E1628", Offset = "0x9E1628", VA = "0x9E1628")]
		[ContextMenu("Set Pose - Close Hand")]
		public void CloseHand()
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x9E1694", Offset = "0x9E1694", VA = "0x9E1694")]
		[ContextMenu("Bend Fingers Until Hit")]
		public void ProceduralFingerBend()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x9E17BC", Offset = "0x9E17BC", VA = "0x9E17BC")]
		public void ProceduralFingerBend(int layermask)
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x9E1830", Offset = "0x9E1830", VA = "0x9E1830")]
		public void ProceduralFingerBend(RaycastHit hit)
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x9D0F9C", Offset = "0x9D0F9C", VA = "0x9D0F9C")]
		public void PlayHapticVibration()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x9D110C", Offset = "0x9D110C", VA = "0x9D110C")]
		public void PlayHapticVibration(float duration)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x9D1274", Offset = "0x9D1274", VA = "0x9D1274")]
		public void PlayHapticVibration(float duration, float amp = 0.5f)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x9E18D8", Offset = "0x9E18D8", VA = "0x9E18D8")]
		[Button("Save Open Pose", EButtonEnableMode.Always)]
		[ContextMenu("SAVE OPEN")]
		public void SaveOpenPose()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x9E198C", Offset = "0x9E198C", VA = "0x9E198C")]
		[Button("Save Closed Pose", EButtonEnableMode.Always)]
		[ContextMenu("SAVE CLOSED")]
		public void SaveClosedPose()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x9E1A40", Offset = "0x9E1A40", VA = "0x9E1A40", Slot = "35")]
		protected virtual void OnCollisionFirstEnter(GameObject collision)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x9E1ABC", Offset = "0x9E1ABC", VA = "0x9E1ABC", Slot = "36")]
		protected virtual void OnCollisionLastExit(GameObject collision)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x9E1B38", Offset = "0x9E1B38", VA = "0x9E1B38", Slot = "37")]
		protected virtual void OnTriggerFirstEnter(GameObject other)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x9E1C48", Offset = "0x9E1C48", VA = "0x9E1C48", Slot = "38")]
		protected virtual void OnTriggerLastExit(GameObject other)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x9DD51C", Offset = "0x9DD51C", VA = "0x9DD51C")]
		[IteratorStateMachine(typeof(<HighlightUpdate>d__125))]
		private IEnumerator HighlightUpdate(float timestep)
		{
			return null;
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x9DE98C", Offset = "0x9DE98C", VA = "0x9DE98C")]
		[IteratorStateMachine(typeof(<GrabObject>d__127))]
		protected IEnumerator GrabObject(RaycastHit hit, Grabbable grab, GrabType grabType)
		{
			return null;
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x9E1D08", Offset = "0x9E1D08", VA = "0x9E1D08")]
		protected void CancelPose()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x9E1D54", Offset = "0x9E1D54", VA = "0x9E1D54", Slot = "39")]
		[IteratorStateMachine(typeof(<LerpHandPose>d__129))]
		protected virtual IEnumerator LerpHandPose(HandPoseData fromPose, HandPoseData toPose, float totalTime)
		{
			return null;
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x9E1E34", Offset = "0x9E1E34", VA = "0x9E1E34", Slot = "40")]
		protected virtual void CheckEnterPoseArea(GameObject other)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x9E231C", Offset = "0x9E231C", VA = "0x9E231C", Slot = "41")]
		protected virtual void CheckExitPoseArea(GameObject other)
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x9E2144", Offset = "0x9E2144", VA = "0x9E2144")]
		internal void TryRemoveHandPoseArea(HandPoseArea poseArea)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x9E23B8", Offset = "0x9E23B8", VA = "0x9E23B8")]
		private void ClearPoseArea()
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x9E246C", Offset = "0x9E246C", VA = "0x9E246C", Slot = "42")]
		internal virtual void RemoveHandTriggerArea(HandTriggerAreaEvents handTrigger)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x9E24DC", Offset = "0x9E24DC", VA = "0x9E24DC")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x2000298")]
	[DefaultExecutionOrder(10000)]
	[RequireComponent(typeof(Hand))]
	public class HandAdvancedOptions : MonoBehaviour
	{
		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Meant for things childed under the Hand. These transforms will not be set to the hand layer on start")]
		public List<Collider> ignoreHandCollider;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Hand hand;

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x9E70D8", Offset = "0x9E70D8", VA = "0x9E70D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x9E7130", Offset = "0x9E7130", VA = "0x9E7130")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x9E71D0", Offset = "0x9E71D0", VA = "0x9E71D0")]
		public HandAdvancedOptions()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class HandClippingGuard : MonoBehaviour
	{
		[Token(Token = "0x200029A")]
		[CompilerGenerated]
		private sealed class <Guard>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4000BE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HandClippingGuard <>4__this;

			[Token(Token = "0x1700014D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E1D")]
				[Address(RVA = "0x9E7950", Offset = "0x9E7950", VA = "0x9E7950", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E1F")]
				[Address(RVA = "0x9E7998", Offset = "0x9E7998", VA = "0x9E7998", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0x9E7678", Offset = "0x9E7678", VA = "0x9E7678")]
			[DebuggerHidden]
			public <Guard>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000E1B")]
			[Address(RVA = "0x9E76B4", Offset = "0x9E76B4", VA = "0x9E76B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0x9E76B8", Offset = "0x9E76B8", VA = "0x9E76B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0x9E7958", Offset = "0x9E7958", VA = "0x9E7958", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This should be a sphere collider that covers the hand (similar, but seperate from the recommended trigger sphere collider)")]
		public SphereCollider collisionGuard;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform body;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float guardTime;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 grabPoint;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool runProtection;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine guardRoutine;

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x9E7258", Offset = "0x9E7258", VA = "0x9E7258")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x9E7484", Offset = "0x9E7484", VA = "0x9E7484")]
		private void BeforeGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x9E75A8", Offset = "0x9E75A8", VA = "0x9E75A8")]
		private void OnRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x9E75E8", Offset = "0x9E75E8", VA = "0x9E75E8")]
		[IteratorStateMachine(typeof(<Guard>d__10))]
		private IEnumerator Guard(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x9E76A0", Offset = "0x9E76A0", VA = "0x9E76A0")]
		public HandClippingGuard()
		{
		}
	}
	[Token(Token = "0x200029B")]
	[RequireComponent(typeof(Hand))]
	public class HandCollisionHaptics : MonoBehaviour
	{
		[Token(Token = "0x200029C")]
		[CompilerGenerated]
		private sealed class <PlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandCollisionHaptics <>4__this;

			[Token(Token = "0x1700014F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E29")]
				[Address(RVA = "0x9E7F90", Offset = "0x9E7F90", VA = "0x9E7F90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000150")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E2B")]
				[Address(RVA = "0x9E7FD8", Offset = "0x9E7FD8", VA = "0x9E7FD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E26")]
			[Address(RVA = "0x9E7DD4", Offset = "0x9E7DD4", VA = "0x9E7DD4")]
			[DebuggerHidden]
			public <PlayBuffer>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000E27")]
			[Address(RVA = "0x9E7EBC", Offset = "0x9E7EBC", VA = "0x9E7EBC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E28")]
			[Address(RVA = "0x9E7EC0", Offset = "0x9E7EC0", VA = "0x9E7EC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0x9E7F98", Offset = "0x9E7F98", VA = "0x9E7F98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200029D")]
		[CompilerGenerated]
		private sealed class <HapticPlayBuffer>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandCollisionHaptics <>4__this;

			[Token(Token = "0x4000BF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x17000151")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E2F")]
				[Address(RVA = "0x9E80B4", Offset = "0x9E80B4", VA = "0x9E80B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000152")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E31")]
				[Address(RVA = "0x9E80FC", Offset = "0x9E80FC", VA = "0x9E80FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E2C")]
			[Address(RVA = "0x9E7DFC", Offset = "0x9E7DFC", VA = "0x9E7DFC")]
			[DebuggerHidden]
			public <HapticPlayBuffer>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000E2D")]
			[Address(RVA = "0x9E7FE0", Offset = "0x9E7FE0", VA = "0x9E7FE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E2E")]
			[Address(RVA = "0x9E7FE4", Offset = "0x9E7FE4", VA = "0x9E7FE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E30")]
			[Address(RVA = "0x9E80BC", Offset = "0x9E80BC", VA = "0x9E80BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The layers that cause the sound to play")]
		public LayerMask collisionTriggers;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float hapticAmp;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float velocityAmp;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float repeatDelay;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxDuration;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityAmpCurve;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityDurationCurve;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Hand hand;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody body;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool canPlay;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine playRoutine;

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x9E79A0", Offset = "0x9E79A0", VA = "0x9E79A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x9E7AD0", Offset = "0x9E7AD0", VA = "0x9E7AD0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x9E7AE4", Offset = "0x9E7AE4", VA = "0x9E7AE4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x9E7D60", Offset = "0x9E7D60", VA = "0x9E7D60")]
		[IteratorStateMachine(typeof(<PlayBuffer>d__14))]
		private IEnumerator PlayBuffer()
		{
			return null;
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x9E7A4C", Offset = "0x9E7A4C", VA = "0x9E7A4C")]
		[IteratorStateMachine(typeof(<HapticPlayBuffer>d__15))]
		private IEnumerator HapticPlayBuffer(float time)
		{
			return null;
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x9E7E24", Offset = "0x9E7E24", VA = "0x9E7E24")]
		public HandCollisionHaptics()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class HandControllerLink : MonoBehaviour
	{
		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HandControllerLink handLeft;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static HandControllerLink handRight;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x9E8104", Offset = "0x9E8104", VA = "0x9E8104", Slot = "4")]
		public virtual void TryHapticImpulse(float duration, float amp, float freq = 10f)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x9E8108", Offset = "0x9E8108", VA = "0x9E8108")]
		public HandControllerLink()
		{
		}
	}
	[Token(Token = "0x200029F")]
	[DefaultExecutionOrder(2)]
	[HelpURL("https://earnestrobot.notion.site/Distance-Grabbing-19e4e8b14f00428295eca75fca752787")]
	public class HandDistanceGrabber : MonoBehaviour
	{
		[Token(Token = "0x20002A0")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass62_0
		{
			[Token(Token = "0x4000C23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public HandDistanceGrabber <>4__this;

			[Token(Token = "0x4000C24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DistanceGrabbable grab;

			[Token(Token = "0x4000C25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float estimatedRadius;

			[Token(Token = "0x6000E51")]
			[Address(RVA = "0x9EA5BC", Offset = "0x9EA5BC", VA = "0x9EA5BC")]
			public <>c__DisplayClass62_0()
			{
			}

			[Token(Token = "0x6000E52")]
			[Address(RVA = "0x9EA5C4", Offset = "0x9EA5C4", VA = "0x9EA5C4")]
			internal void <StartCatchAssist>b__0(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6000E53")]
			[Address(RVA = "0x9EA660", Offset = "0x9EA660", VA = "0x9EA660")]
			internal void <StartCatchAssist>b__1(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6000E55")]
			[Address(RVA = "0x9EAC04", Offset = "0x9EAC04", VA = "0x9EAC04")]
			internal void <StartCatchAssist>b__5(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6000E56")]
			[Address(RVA = "0x9EACA0", Offset = "0x9EACA0", VA = "0x9EACA0")]
			internal void <StartCatchAssist>b__6(Hand hand, Grabbable grabbable)
			{
			}
		}

		[Token(Token = "0x20002A1")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass62_1
		{
			[Token(Token = "0x4000C26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool cancelInstantGrab;

			[Token(Token = "0x6000E57")]
			[Address(RVA = "0x9EAD3C", Offset = "0x9EAD3C", VA = "0x9EAD3C")]
			public <>c__DisplayClass62_1()
			{
			}

			[Token(Token = "0x6000E58")]
			[Address(RVA = "0x9EAD44", Offset = "0x9EAD44", VA = "0x9EAD44")]
			internal void <StartCatchAssist>b__2(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6000E59")]
			[Address(RVA = "0x9EAD50", Offset = "0x9EAD50", VA = "0x9EAD50")]
			internal void <StartCatchAssist>b__4(Hand hand, Grabbable grabbable)
			{
			}
		}

		[Token(Token = "0x20002A2")]
		[CompilerGenerated]
		private sealed class <StartCatchAssist>d__62 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandDistanceGrabber <>4__this;

			[Token(Token = "0x4000C2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DistanceGrabbable grab;

			[Token(Token = "0x4000C2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float estimatedRadius;

			[Token(Token = "0x4000C2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass62_0 <>8__1;

			[Token(Token = "0x4000C2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass62_1 <>8__2;

			[Token(Token = "0x4000C2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <time>5__2;

			[Token(Token = "0x17000154")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E5D")]
				[Address(RVA = "0x9EB40C", Offset = "0x9EB40C", VA = "0x9EB40C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000155")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E5F")]
				[Address(RVA = "0x9EB454", Offset = "0x9EB454", VA = "0x9EB454", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0x9EA2A4", Offset = "0x9EA2A4", VA = "0x9EA2A4")]
			[DebuggerHidden]
			public <StartCatchAssist>d__62(int <>1__state)
			{
			}

			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0x9EAD5C", Offset = "0x9EAD5C", VA = "0x9EAD5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0x9EAD60", Offset = "0x9EAD60", VA = "0x9EAD60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0x9EB414", Offset = "0x9EB414", VA = "0x9EB414", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hands")]
		[Tooltip("The primaryHand used to trigger pulling or flicking")]
		public Hand primaryHand;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This is important for catch assistance")]
		public Hand secondaryHand;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Pointing Options")]
		public Transform forwardPointer;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LineRenderer line;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		public float maxRange;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Defaults to grabbable on start if none")]
		public LayerMask layers;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space]
		public Material defaultTargetedMaterial;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The highlight material to use when pulling")]
		public Material defaultSelectedMaterial;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Pull Options")]
		public bool useInstantPull;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("If false will default to distance pull, set pullGrabDistance to 0 for instant pull on select")]
		public bool useFlickPull;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The magnitude of your hands angular velocity for \"flick\" to start")]
		[ShowIf("useFlickPull")]
		public float flickThreshold;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount you need to move your hand from the select position to trigger the grab")]
		[HideIf("useFlickPull")]
		public float pullGrabDistance;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Space]
		[Tooltip("If this is true the object will be grabbed when entering the radius")]
		public bool instantGrabAssist;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The radius around of thrown object")]
		public float catchAssistRadius;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent OnPull;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ShowIf("showEvents")]
		public UnityHandEvent StartPoint;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ShowIf("showEvents")]
		public UnityHandEvent StopPoint;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ShowIf("showEvents")]
		[Tooltip("Targeting is started when object is highlighted")]
		public UnityHandGrabEvent StartTarget;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopTarget;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Selecting is started when grab is selected on highlight object")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StartSelect;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopSelect;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<CatchAssistData> catchAssisted;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private DistanceGrabbable targetingDistanceGrabbable;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private DistanceGrabbable selectingDistanceGrabbable;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float catchAssistSeconds;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool pointing;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		private bool pulling;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 startPullPosition;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private RaycastHit hit;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion lastRotation;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private RaycastHit selectionHit;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float selectedEstimatedRadius;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float startLookAssist;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool lastInstantPull;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GameObject _hitPoint;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Coroutine catchAssistRoutine;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private DistanceGrabbable catchAsistGrabbable;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private CatchAssistData catchAssistData;

		[Token(Token = "0x17000153")]
		private GameObject hitPoint
		{
			[Token(Token = "0x6000E34")]
			[Address(RVA = "0x9E8110", Offset = "0x9E8110", VA = "0x9E8110")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x9E820C", Offset = "0x9E820C", VA = "0x9E820C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x9E8370", Offset = "0x9E8370", VA = "0x9E8370")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x9E84C0", Offset = "0x9E84C0", VA = "0x9E84C0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x9E876C", Offset = "0x9E876C", VA = "0x9E876C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x9E8B7C", Offset = "0x9E8B7C", VA = "0x9E8B7C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x9E8364", Offset = "0x9E8364", VA = "0x9E8364")]
		public void SetInstantPull()
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x9E8BE4", Offset = "0x9E8BE4", VA = "0x9E8BE4")]
		public void SetPull(float distance)
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x9E8BF0", Offset = "0x9E8BF0", VA = "0x9E8BF0")]
		public void SetFlickPull(float threshold)
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x9E87A0", Offset = "0x9E87A0", VA = "0x9E87A0")]
		private void CheckDistanceGrabbable()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x9E8F98", Offset = "0x9E8F98", VA = "0x9E8F98", Slot = "4")]
		public virtual void StartPointing()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x9E8FFC", Offset = "0x9E8FFC", VA = "0x9E8FFC", Slot = "5")]
		public virtual void StopPointing()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x9E90EC", Offset = "0x9E90EC", VA = "0x9E90EC", Slot = "6")]
		public virtual void StartTargeting(DistanceGrabbable target)
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x9E92E0", Offset = "0x9E92E0", VA = "0x9E92E0", Slot = "7")]
		public virtual void StopTargeting()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x9E9418", Offset = "0x9E9418", VA = "0x9E9418", Slot = "8")]
		public virtual void SelectTarget()
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x9E97FC", Offset = "0x9E97FC", VA = "0x9E97FC", Slot = "9")]
		public virtual void CancelSelect()
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x9E990C", Offset = "0x9E990C", VA = "0x9E990C", Slot = "10")]
		public virtual void ActivatePull()
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x9E8EA8", Offset = "0x9E8EA8", VA = "0x9E8EA8")]
		private void TryDistancePull()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x9E8C00", Offset = "0x9E8C00", VA = "0x9E8C00")]
		private void TryFlickPull()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x9E976C", Offset = "0x9E976C", VA = "0x9E976C")]
		private Material GetSelectedMaterial(DistanceGrabbable grabbable)
		{
			return null;
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x9E924C", Offset = "0x9E924C", VA = "0x9E924C")]
		private Material GetTargetedMaterial(DistanceGrabbable grabbable)
		{
			return null;
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x9E9D68", Offset = "0x9E9D68", VA = "0x9E9D68")]
		private void TryCatchAssist(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x9E9CC8", Offset = "0x9E9CC8", VA = "0x9E9CC8")]
		[IteratorStateMachine(typeof(<StartCatchAssist>d__62))]
		private IEnumerator StartCatchAssist(DistanceGrabbable grab, float estimatedRadius)
		{
			return null;
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x9EA2CC", Offset = "0x9EA2CC", VA = "0x9EA2CC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x9EA418", Offset = "0x9EA418", VA = "0x9EA418")]
		public HandDistanceGrabber()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	internal struct CatchAssistData
	{
		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Grabbable grab;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float estimatedRadius;

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x9EB3E4", Offset = "0x9EB3E4", VA = "0x9EB3E4")]
		public CatchAssistData(Grabbable grab, float estimatedRadius)
		{
		}
	}
	[Token(Token = "0x20002A4")]
	[HelpURL("https://www.notion.so/Pose-Areas-99b9af26d297442a91a9d73f65f13635")]
	public class HandPoseArea : MonoBehaviour
	{
		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string poseName;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int poseIndex;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float transitionTime;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Events")]
		public UnityHandEvent OnHandEnter;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandEvent OnHandExit;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Scriptable options NOT REQUIRED (will be saved locally instead if empty) -> Create scriptable throught [Auto Hand/Custom Pose]")]
		[HideInInspector]
		public HandPoseScriptable poseScriptable;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public HandPoseData rightPose;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool rightPoseSet;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public HandPoseData leftPose;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public bool leftPoseSet;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal HandPoseArea[] poseAreas;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<Hand> posingHands;

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x9EB45C", Offset = "0x9EB45C", VA = "0x9EB45C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x9EB4B4", Offset = "0x9EB4B4", VA = "0x9EB4B4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x9EB5A8", Offset = "0x9EB5A8", VA = "0x9EB5A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x9EB708", Offset = "0x9EB708", VA = "0x9EB708")]
		private void HandEnter(Hand hand)
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x9EB7B8", Offset = "0x9EB7B8", VA = "0x9EB7B8")]
		private void HandExit(Hand hand)
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x9EB810", Offset = "0x9EB810", VA = "0x9EB810", Slot = "4")]
		public virtual HandPoseData GetHandPoseData(bool left)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x9EB8D0", Offset = "0x9EB8D0", VA = "0x9EB8D0")]
		public void SetHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x9EB954", Offset = "0x9EB954", VA = "0x9EB954")]
		public bool HasPose(bool left)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x9EBA08", Offset = "0x9EBA08", VA = "0x9EBA08")]
		public HandPoseArea()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public class HandProjector : MonoBehaviour
	{
		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public Hand hand;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This should be a copy of the hand with the desired visual setup for your projection hand")]
		public Hand handProjection;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Object(s) under your Hand that contain the MeshRenderer Component(s)")]
		public Transform[] handProjectionVisuals;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Smoothing speed, turning too high could cause jitters")]
		public float speed;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If true everything in the hand Vvisuals will be disabled/hidden when projection hand is showing")]
		public bool hideHand;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[ShowIf("hideHand")]
		[Tooltip("The Object(s) under your main hand (not the projection hand) that contain the MeshRenderer Component(s)")]
		public Transform[] handVisuals;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Should the projection interpolate between the hand pose and the projected grab pose based on the grip input axis")]
		public bool useGrabTransition;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[EnableIf("useGrabTransition")]
		[Tooltip("The Object(s) under your Hand that contain the MeshRenderer Component(s)")]
		public float grabTransitionOffset;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[EnableIf("useGrabTransition")]
		[Tooltip("The Object(s) under your Hand that contain the MeshRenderer Component(s)")]
		public float grabDistanceMultiplyer;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[EnableIf("useGrabTransition")]
		[Tooltip("The Object(s) under your Hand that contain the MeshRenderer Component(s)")]
		public float grabTransitionMultiplyer;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Object(s) under your Hand that contain the MeshRenderer Component(s)")]
		[DisableIf("useGrabTransition")]
		public float grabPercent;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		public UnityHandGrabEvent OnStartProjection;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityHandGrabEvent OnEndProjection;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HandPoseData lastProjectionPose;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private HandPoseData newProjectionPose;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lastProjectionPosition;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion lastProjectionRotation;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Grabbable target;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float startMass;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float minGrabTime;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float currAmount;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool tryingGrab;

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x9EBB40", Offset = "0x9EBB40", VA = "0x9EBB40")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x9EBEA4", Offset = "0x9EBEA4", VA = "0x9EBEA4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x9ECD44", Offset = "0x9ECD44", VA = "0x9ECD44")]
		private void OnTriggerGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x9ECD50", Offset = "0x9ECD50", VA = "0x9ECD50")]
		private void OnBeforeGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x9ECE68", Offset = "0x9ECE68", VA = "0x9ECE68")]
		private void OnGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x9ECE8C", Offset = "0x9ECE8C", VA = "0x9ECE8C")]
		private void OnRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x9ED0A4", Offset = "0x9ED0A4", VA = "0x9ED0A4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x9ED4B0", Offset = "0x9ED4B0", VA = "0x9ED4B0")]
		private void OnProjectionStart(Hand projectionHand, Grabbable target)
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x9ED524", Offset = "0x9ED524", VA = "0x9ED524")]
		private void OnProjectionEnd(Hand projectionHand, Grabbable target)
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x9EC018", Offset = "0x9EC018", VA = "0x9EC018")]
		private void ShowProjection(bool show)
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x9ED104", Offset = "0x9ED104", VA = "0x9ED104")]
		private void SetTarget(Grabbable newTarget)
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x9ED3F0", Offset = "0x9ED3F0", VA = "0x9ED3F0")]
		private bool IsProjectionActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x9ED598", Offset = "0x9ED598", VA = "0x9ED598")]
		public HandProjector()
		{
		}
	}
	[Token(Token = "0x20002A6")]
	public class HandPublicEvents : MonoBehaviour
	{
		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityHandGrabEvent OnBeforeGrab;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityHandGrabEvent OnGrab;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandGrabEvent OnRelease;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityHandGrabEvent OnForceRelease;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandGrabEvent OnSqueeze;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityHandGrabEvent OnUnsqueeze;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityHandGrabEvent OnHighlight;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityHandGrabEvent OnStopHighlight;

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x9ED5B8", Offset = "0x9ED5B8", VA = "0x9ED5B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x9ED7F8", Offset = "0x9ED7F8", VA = "0x9ED7F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x9EDA38", Offset = "0x9EDA38", VA = "0x9EDA38")]
		public void OnBeforeGrabEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x9EDAAC", Offset = "0x9EDAAC", VA = "0x9EDAAC")]
		public void OnGrabEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x9EDB20", Offset = "0x9EDB20", VA = "0x9EDB20")]
		public void OnReleaseEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x9EDB94", Offset = "0x9EDB94", VA = "0x9EDB94")]
		public void OnSqueezeEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x9EDC08", Offset = "0x9EDC08", VA = "0x9EDC08")]
		public void OnUnsqueezeEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x9EDC7C", Offset = "0x9EDC7C", VA = "0x9EDC7C")]
		public void OnHighlightEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x9EDCF0", Offset = "0x9EDCF0", VA = "0x9EDCF0")]
		public void OnStopHighlightEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x9EDD64", Offset = "0x9EDD64", VA = "0x9EDD64")]
		public void OnForceReleaseEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x9EDDD8", Offset = "0x9EDDD8", VA = "0x9EDDD8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x9EDEBC", Offset = "0x9EDEBC", VA = "0x9EDEBC")]
		public HandPublicEvents()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	[DefaultExecutionOrder(1000)]
	public class HandTeleportGuard : MonoBehaviour
	{
		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Helps prevent hand from passing through static collision boundries")]
		public Hand hand;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Guard Settings")]
		[Tooltip("The mask of things the guarding will ignore, if left on default or empty, will default to ignoring recommended Auto Hand layers")]
		public LayerMask ignoreMask;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The amount of distance change required in one frame or fixed udpate to activate the teleport guard")]
		public float buffer;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Whether this should always run or only run when activated by the teleporter")]
		public bool alwaysRun;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("If true hands wont teleport return when past the max distance if something is in the way")]
		[FormerlySerializedAs("strict")]
		public bool ignoreMaxHandDistance;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 deltaHandPos;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 deltaHandFixedPos;

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x9EE070", Offset = "0x9EE070", VA = "0x9EE070")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x9EE3F8", Offset = "0x9EE3F8", VA = "0x9EE3F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x9EE918", Offset = "0x9EE918", VA = "0x9EE918")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x9EE5B4", Offset = "0x9EE5B4", VA = "0x9EE5B4")]
		public void TeleportProtection(Vector3 fromPos, Vector3 toPos)
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x9EEAD4", Offset = "0x9EEAD4", VA = "0x9EEAD4")]
		public HandTeleportGuard()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	[HelpURL("https://www.notion.so/Touch-Events-1341b3e627dd443a99593ff7f0412aa6")]
	public class HandTouchEvent : MonoBehaviour
	{
		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Whether or not first hand to enter should take ownership and be the only one to call events")]
		[Header("For Solid Collision")]
		public bool oneHanded;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HandType handType;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Events")]
		public UnityHandEvent HandStartTouch;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityHandEvent HandStopTouch;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HandEvent HandStartTouchEvent;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HandEvent HandStopTouchEvent;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Hand> hands;

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x9EEAE8", Offset = "0x9EEAE8", VA = "0x9EEAE8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x9EEDC8", Offset = "0x9EEDC8", VA = "0x9EEDC8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x9EEF1C", Offset = "0x9EEF1C", VA = "0x9EEF1C")]
		public void Touch(Hand hand)
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x9EF07C", Offset = "0x9EF07C", VA = "0x9EF07C")]
		public void Untouch(Hand hand)
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x9EF1DC", Offset = "0x9EF1DC", VA = "0x9EF1DC")]
		public HandTouchEvent()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	public delegate void HandEvent(Hand hand);
	[Token(Token = "0x20002AA")]
	public class HandTriggerAreaEvents : MonoBehaviour
	{
		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Trigger Events Settings")]
		[Tooltip("Whether or not first hand to enter should take ownership and be the only one to call events")]
		public bool oneHanded;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HandType handType;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Whether or not to call the release event if exiting while grab event activated")]
		public bool exitTriggerRelease;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Whether or not to call the release event if exiting while grab event activated")]
		public bool exitTriggerUnsqueeze;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Events")]
		public UnityHandEvent HandEnter;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandEvent HandExit;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityHandEvent HandGrab;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandEvent HandRelease;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityHandEvent HandSqueeze;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityHandEvent HandUnsqueeze;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HandEvent HandEnterEvent;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public HandEvent HandExitEvent;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public HandEvent HandGrabEvent;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HandEvent HandReleaseEvent;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public HandEvent HandSqueezeEvent;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public HandEvent HandUnsqueezeEvent;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Hand> hands;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool grabbing;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool squeezing;

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x9EF3AC", Offset = "0x9EF3AC", VA = "0x9EF3AC", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x9EF760", Offset = "0x9EF760", VA = "0x9EF760", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x9EFB30", Offset = "0x9EFB30", VA = "0x9EFB30", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x9EFCAC", Offset = "0x9EFCAC", VA = "0x9EFCAC", Slot = "7")]
		public virtual void Enter(Hand hand)
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x9EFE0C", Offset = "0x9EFE0C", VA = "0x9EFE0C", Slot = "8")]
		public virtual void Exit(Hand hand)
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x9F00B0", Offset = "0x9F00B0", VA = "0x9F00B0", Slot = "9")]
		public virtual void Grab(Hand hand)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x9F01C4", Offset = "0x9F01C4", VA = "0x9F01C4", Slot = "10")]
		public virtual void Release(Hand hand)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x9F02D4", Offset = "0x9F02D4", VA = "0x9F02D4", Slot = "11")]
		public virtual void Squeeze(Hand hand)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x9F0418", Offset = "0x9F0418", VA = "0x9F0418", Slot = "12")]
		public virtual void Unsqueeze(Hand hand)
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x9F0554", Offset = "0x9F0554", VA = "0x9F0554")]
		public HandTriggerAreaEvents()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	public class EditorHand : MonoBehaviour
	{
		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useEditorGUI;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrabbablePose grabbablePose;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandPoseArea grabbablePoseArea;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Hand _hand;

		[Token(Token = "0x17000156")]
		public Hand hand
		{
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0x9F09EC", Offset = "0x9F09EC", VA = "0x9F09EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x9F0A94", Offset = "0x9F0A94", VA = "0x9F0A94")]
		public EditorHand()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	[DefaultExecutionOrder(-2)]
	public class GrabbableBase : MonoBehaviour
	{
		[Token(Token = "0x20002AE")]
		[CompilerGenerated]
		private sealed class <IgnoreHandCollision>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableBase <>4__this;

			[Token(Token = "0x4000CA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Hand hand;

			[Token(Token = "0x4000CA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float time;

			[Token(Token = "0x17000159")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EC8")]
				[Address(RVA = "0x9F1C28", Offset = "0x9F1C28", VA = "0x9F1C28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ECA")]
				[Address(RVA = "0x9F1C70", Offset = "0x9F1C70", VA = "0x9F1C70", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0x9F1764", Offset = "0x9F1764", VA = "0x9F1764")]
			[DebuggerHidden]
			public <IgnoreHandCollision>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0x9F1B30", Offset = "0x9F1B30", VA = "0x9F1B30", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EC7")]
			[Address(RVA = "0x9F1B34", Offset = "0x9F1B34", VA = "0x9F1B34", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0x9F1C30", Offset = "0x9F1C30", VA = "0x9F1C30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Grabbable", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The physics body to connect this colliders grab to - if left empty will default to local body")]
		public Rigidbody body;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A copy of the mesh will be created and slighly scaled and this material will be applied to create a highlight effect with options")]
		public Material hightlightMaterial;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public bool isGrabbable;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlacePoint _placePoint;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool ignoreParent;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected List<Hand> heldBy;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool hightlighting;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject highlightObj;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected PlacePoint lastPlacePoint;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform originalParent;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Vector3 lastCenterOfMassPos;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected Quaternion lastCenterOfMassRot;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected CollisionDetectionMode detectionMode;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected RigidbodyInterpolation startInterpolation;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected internal bool beingGrabbed;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		protected bool heldBodyJointed;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
		protected bool wasIsGrabbable;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x97")]
		protected bool beingDestroyed;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected int originalLayer;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Coroutine resetLayerRoutine;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected List<GrabbableChild> grabChildren;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected List<Transform> jointedParents;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected GrabbablePoseCombiner poseCombiner;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CollisionTracker _collisionTracker;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected List<Collider> grabColliders;

		[Token(Token = "0x17000157")]
		public PlacePoint placePoint
		{
			[Token(Token = "0x6000EAD")]
			[Address(RVA = "0x9F0AA4", Offset = "0x9F0AA4", VA = "0x9F0AA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0x9F0AAC", Offset = "0x9F0AAC", VA = "0x9F0AAC")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public CollisionTracker collisionTracker
		{
			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0x9F0AB4", Offset = "0x9F0AB4", VA = "0x9F0AB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0x9F0B80", Offset = "0x9F0B80", VA = "0x9F0B80")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x9F0C20", Offset = "0x9F0C20", VA = "0x9F0C20", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x9F10DC", Offset = "0x9F10DC", VA = "0x9F10DC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x9F12FC", Offset = "0x9F12FC", VA = "0x9F12FC", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x9F1394", Offset = "0x9F1394", VA = "0x9F1394", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x9F13D8", Offset = "0x9F13D8", VA = "0x9F13D8")]
		internal void SetPlacePoint(PlacePoint point)
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x9F13E0", Offset = "0x9F13E0", VA = "0x9F13E0")]
		internal void SetGrabbableChild(GrabbableChild child)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x9F14C8", Offset = "0x9F14C8", VA = "0x9F14C8")]
		protected int GetOriginalLayer()
		{
			return default(int);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x9F14D0", Offset = "0x9F14D0", VA = "0x9F14D0")]
		internal void SetLayerRecursive(Transform obj, int oldLayer, int newLayer)
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x9F1674", Offset = "0x9F1674", VA = "0x9F1674")]
		internal void SetLayerRecursive(Transform obj, int newLayer)
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x9F16C4", Offset = "0x9F16C4", VA = "0x9F16C4")]
		[IteratorStateMachine(typeof(<IgnoreHandCollision>d__40))]
		protected IEnumerator IgnoreHandCollision(float time, Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x9F178C", Offset = "0x9F178C", VA = "0x9F178C")]
		public bool GetSavedPose(out GrabbablePoseCombiner pose)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x9F17F0", Offset = "0x9F17F0", VA = "0x9F17F0")]
		public bool HasCustomPose()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x9F1818", Offset = "0x9F1818", VA = "0x9F1818")]
		public void IgnoreHand(Hand hand, bool ignore)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x9F0F74", Offset = "0x9F0F74", VA = "0x9F0F74")]
		private void SetCollidersRecursive(Transform obj)
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x9F196C", Offset = "0x9F196C", VA = "0x9F196C")]
		protected void ResetRigidbody()
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x9F19A4", Offset = "0x9F19A4", VA = "0x9F19A4")]
		public bool BeingDestroyed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x9F19AC", Offset = "0x9F19AC", VA = "0x9F19AC")]
		public void DebugBreak()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x9F19B0", Offset = "0x9F19B0", VA = "0x9F19B0")]
		public GrabbableBase()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public enum HandMovementType
	{
		[Token(Token = "0x4000CA3")]
		Legacy,
		[Token(Token = "0x4000CA4")]
		Forces
	}
	[Token(Token = "0x20002B0")]
	public enum HandType
	{
		[Token(Token = "0x4000CA6")]
		both,
		[Token(Token = "0x4000CA7")]
		right,
		[Token(Token = "0x4000CA8")]
		left,
		[Token(Token = "0x4000CA9")]
		none
	}
	[Token(Token = "0x20002B1")]
	public enum GrabType
	{
		[Token(Token = "0x4000CAB")]
		HandToGrabbable,
		[Token(Token = "0x4000CAC")]
		GrabbableToHand,
		[Token(Token = "0x4000CAD")]
		InstantGrab
	}
	[Serializable]
	[Token(Token = "0x20002B2")]
	public struct VelocityTimePair
	{
		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float time;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 velocity;
	}
	[Token(Token = "0x20002B3")]
	public delegate void HandGrabEvent(Hand hand, Grabbable grabbable);
	[Token(Token = "0x20002B4")]
	public delegate void HandGameObjectEvent(Hand hand, GameObject other);
	[Serializable]
	[Token(Token = "0x20002B5")]
	public class UnityHandGrabEvent : UnityEvent<Hand, Grabbable>
	{
		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x9EE028", Offset = "0x9EE028", VA = "0x9EE028")]
		public UnityHandGrabEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B6")]
	public class UnityHandEvent : UnityEvent<Hand>
	{
		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x9EBAF8", Offset = "0x9EBAF8", VA = "0x9EBAF8")]
		public UnityHandEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B7")]
	[RequireComponent(typeof(Rigidbody))]
	[DefaultExecutionOrder(-10)]
	public class HandBase : MonoBehaviour
	{
		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("AUTO HAND", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Finger[] fingers;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("An empty GameObject that should be placed on the surface of the center of the palm")]
		public Transform palmTransform;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Whether this is the left (on) or right (off) hand")]
		[FormerlySerializedAs("isLeft")]
		public bool left;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Min(0.01f)]
		[Tooltip("Maximum distance for pickup")]
		[Space]
		public float reachDistance;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AutoToggleHeader("Enable Movement", 0, 0, tooltip = "Whether or not to enable the hand's Rigidbody Physics movement")]
		public bool enableMovement;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[EnableIf("enableMovement")]
		[Tooltip("Follow target, the hand will always try to match this transforms position with rigidbody movements")]
		public Transform follow;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[EnableIf("enableMovement")]
		[Min(0f)]
		[Tooltip("Returns hand to the target after this distance [helps just in case it gets stuck]")]
		public float maxFollowDistance;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Min(0f)]
		[Tooltip("Amplifier for applied velocity on released object")]
		[EnableIf("enableMovement")]
		public float throwPower;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public bool advancedFollowSettings;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[AutoToggleHeader("Enable Auto Posing", 0, 0, tooltip = "Auto Posing will override Unity Animations -- This will disable all the Auto Hand IK, including animations from: finger sway, pose areas, finger bender scripts (runtime Auto Posing will still work)")]
		[Tooltip("Turn this on when you want to animate the hand or use other IK Drivers")]
		public bool enableIK;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[EnableIf("enableIK")]
		[Tooltip("How much the fingers sway from the velocity")]
		public float swayStrength;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("This will offset each fingers bend (0 is no bend, 1 is full bend)")]
		[EnableIf("enableIK")]
		public float gripOffset;

		[NonSerialized]
		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The maximum allowed velocity of the hand")]
		[Min(0f)]
		public float maxVelocity;

		[NonSerialized]
		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Follow target speed (Can cause jittering if turned too high - recommend increasing drag with speed)")]
		[Min(0f)]
		public float followPositionStrength;

		[NonSerialized]
		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		[Min(0f)]
		[Tooltip("Follow target rotation speed (Can cause jittering if turned too high - recommend increasing angular drag with speed)")]
		public float followRotationStrength;

		[NonSerialized]
		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		[Tooltip("After this many seconds velocity data within a 'throw window' will be tossed out. (This allows you to get only use acceeleration data from the last 'x' seconds of the throw.)")]
		public float throwVelocityExpireTime;

		[NonSerialized]
		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[HideInInspector]
		[Tooltip("Increase for closer finger tip results / Decrease for less physics checks - The number of steps the fingers take when bending to grab something")]
		public int fingerBendSteps;

		[NonSerialized]
		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public float sphereCastRadius;

		[NonSerialized]
		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[HideInInspector]
		public float maxCollisionDistance;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool usingPoseAreas;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[HideInInspector]
		public QueryTriggerInteraction queryTriggerInteraction;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable HoldingObj;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable _lookingAtObj;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform _moveTo;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _grabPositionOffset;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion _grabRotationOffset;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CollisionTracker _collisionTracker;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected GrabbablePose _grabPose;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Joint heldJoint;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool grabbing;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		protected bool squeezing;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		protected bool grabbed;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected float triggerPoint;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Coroutine handAnimateRoutine;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected HandPoseArea handPoseArea;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected HandPoseData preHandPoseAreaPose;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected List<Collider> handColliders;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Transform _grabPoint;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Transform _grabPosition;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal int handLayers;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected Collider palmCollider;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected RaycastHit highlightHit;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected HandVelocityTracker velocityTracker;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected Transform palmChild;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected Vector3 lastFrameFollowPos;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		protected Quaternion lastFrameFollowRot;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		protected Vector3 followVel;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected Vector3 followAngularVel;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		internal bool allowUpdateMovement;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Vector3[] handRays;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private RaycastHit[] rayHits;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private List<RaycastHit> closestHits;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private List<Grabbable> closestGrabs;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private int tryMaxDistanceCount;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private Vector3 lastFollowPosition;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Vector3 lastFollowRotation;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private bool prerendered;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Vector3 preRenderPos;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private Quaternion preRenderRot;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private float currGrip;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		protected Vector3 lastFixedPosition;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		private float lastUpdateTime;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		protected bool ignoreMoveFrame;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private float fingerSwayVel;

		[Token(Token = "0x1700015B")]
		public Grabbable holdingObj
		{
			[Token(Token = "0x6000ED5")]
			[Address(RVA = "0x9F1E48", Offset = "0x9F1E48", VA = "0x9F1E48")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0x9F1E50", Offset = "0x9F1E50", VA = "0x9F1E50")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public Grabbable lookingAtObj
		{
			[Token(Token = "0x6000ED7")]
			[Address(RVA = "0x9F1E58", Offset = "0x9F1E58", VA = "0x9F1E58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ED8")]
			[Address(RVA = "0x9F1E60", Offset = "0x9F1E60", VA = "0x9F1E60")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public Transform moveTo
		{
			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0x9E68D8", Offset = "0x9E68D8", VA = "0x9E68D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015E")]
		public Rigidbody body
		{
			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0x9F1E68", Offset = "0x9F1E68", VA = "0x9F1E68")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0x9F1E70", Offset = "0x9F1E70", VA = "0x9F1E70")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public Vector3 grabPositionOffset
		{
			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0x9F1E78", Offset = "0x9F1E78", VA = "0x9F1E78")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0x9F1E84", Offset = "0x9F1E84", VA = "0x9F1E84")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public Quaternion grabRotationOffset
		{
			[Token(Token = "0x6000EDE")]
			[Address(RVA = "0x9F1E90", Offset = "0x9F1E90", VA = "0x9F1E90")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0x9F1E9C", Offset = "0x9F1E9C", VA = "0x9F1E9C")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public bool disableIK
		{
			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0x9F1EA8", Offset = "0x9F1EA8", VA = "0x9F1EA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EE1")]
			[Address(RVA = "0x9EBE94", Offset = "0x9EBE94", VA = "0x9EBE94")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public CollisionTracker collisionTracker
		{
			[Token(Token = "0x6000EE2")]
			[Address(RVA = "0x9F1EB8", Offset = "0x9F1EB8", VA = "0x9F1EB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EE3")]
			[Address(RVA = "0x9F1F70", Offset = "0x9F1F70", VA = "0x9F1F70")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000163")]
		protected GrabbablePose grabPose
		{
			[Token(Token = "0x6000EE4")]
			[Address(RVA = "0x9F2010", Offset = "0x9F2010", VA = "0x9F2010")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0x9E5BB8", Offset = "0x9E5BB8", VA = "0x9E5BB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000164")]
		internal Transform grabPoint
		{
			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0x9E5A9C", Offset = "0x9E5A9C", VA = "0x9E5A9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000165")]
		internal Transform grabPosition
		{
			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0x9E6CD8", Offset = "0x9E6CD8", VA = "0x9E6CD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x9F2018", Offset = "0x9F2018", VA = "0x9F2018", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x9F23D0", Offset = "0x9F23D0", VA = "0x9F23D0", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x9F2464", Offset = "0x9F2464", VA = "0x9F2464", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x9F24D4", Offset = "0x9F24D4", VA = "0x9F24D4", Slot = "7")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x9F2664", Offset = "0x9F2664", VA = "0x9F2664", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x9F290C", Offset = "0x9F290C", VA = "0x9F290C", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x9F32D4", Offset = "0x9F32D4", VA = "0x9F32D4", Slot = "10")]
		public virtual void OnPreRender()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x9F3CF4", Offset = "0x9F3CF4", VA = "0x9F3CF4", Slot = "11")]
		public virtual void OnPostRender()
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x9F3DF0", Offset = "0x9F3DF0", VA = "0x9F3DF0", Slot = "12")]
		protected virtual void CreateJoint(Grabbable grab, float breakForce, float breakTorque)
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x9F40D0", Offset = "0x9F40D0", VA = "0x9F40D0", Slot = "13")]
		protected virtual void MoveTo()
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x9F46B4", Offset = "0x9F46B4", VA = "0x9F46B4", Slot = "14")]
		protected virtual void TorqueTo()
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x9F496C", Offset = "0x9F496C", VA = "0x9F496C", Slot = "15")]
		public virtual void SetHandLocation(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x9F5100", Offset = "0x9F5100", VA = "0x9F5100", Slot = "16")]
		public virtual void SetHandLocation(Vector3 pos)
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x9F5190", Offset = "0x9F5190", VA = "0x9F5190")]
		public void ResetHandLocation()
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x9E6400", Offset = "0x9E6400", VA = "0x9E6400")]
		protected void SetMoveTo()
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x9E5A1C", Offset = "0x9E5A1C", VA = "0x9E5A1C")]
		public bool CanGrab(Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x9F5220", Offset = "0x9F5220", VA = "0x9F5220")]
		public float GetTriggerAxis()
		{
			return default(float);
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x9F5228", Offset = "0x9F5228", VA = "0x9F5228", Slot = "17")]
		protected virtual Vector3 HandClosestHit(out RaycastHit closestHit, out Grabbable grabbable, float dist, int layerMask, [Optional] Grabbable target)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x9F5BF4", Offset = "0x9F5BF4", VA = "0x9F5BF4")]
		public bool IsPosing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x9F5CAC", Offset = "0x9F5CAC", VA = "0x9F5CAC", Slot = "18")]
		protected virtual void UpdateFingers()
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x9F321C", Offset = "0x9F321C", VA = "0x9F321C")]
		public int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x9E5CBC", Offset = "0x9E5CBC", VA = "0x9E5CBC")]
		public void HandIgnoreCollider(Collider collider, bool ignore)
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x9F5DA4", Offset = "0x9F5DA4", VA = "0x9F5DA4")]
		public void SetLayer()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x9F5E44", Offset = "0x9F5E44", VA = "0x9F5E44")]
		internal void SetLayerRecursive(Transform obj, int newLayer)
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x9F23F0", Offset = "0x9F23F0", VA = "0x9F23F0")]
		protected void SetHandCollidersRecursive(Transform obj)
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x9F6048", Offset = "0x9F6048", VA = "0x9F6048")]
		public Vector3[] GetPalmRays()
		{
			return null;
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x9F606C", Offset = "0x9F606C", VA = "0x9F606C", Slot = "19")]
		protected virtual void SetPalmRays()
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x9F62F8", Offset = "0x9F62F8", VA = "0x9F62F8")]
		public Vector3 ThrowVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x9F6314", Offset = "0x9F6314", VA = "0x9F6314")]
		public Vector3 ThrowAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x9F6330", Offset = "0x9F6330", VA = "0x9F6330")]
		public bool IsGrabbing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x9F6338", Offset = "0x9F6338", VA = "0x9F6338")]
		public static int GetHandsLayerMask()
		{
			return default(int);
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x9F6448", Offset = "0x9F6448", VA = "0x9F6448")]
		public HandBase()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	[RequireComponent(typeof(Hand))]
	public class HandGizmos : MonoBehaviour
	{
		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x9F66BC", Offset = "0x9F66BC", VA = "0x9F66BC")]
		public HandGizmos()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B9")]
	public struct HandPoseData
	{
		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 handOffset;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Quaternion localQuaternionOffset;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3[] posePositions;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Quaternion[] poseRotations;

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x9F66C4", Offset = "0x9F66C4", VA = "0x9F66C4")]
		public HandPoseData(Hand hand, Grabbable grabbable)
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x9E5D60", Offset = "0x9E5D60", VA = "0x9E5D60")]
		public HandPoseData(Hand hand, Transform point)
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x9F6C74", Offset = "0x9F6C74", VA = "0x9F6C74")]
		public HandPoseData(Hand hand)
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x9F6D98", Offset = "0x9F6D98", VA = "0x9F6D98")]
		public HandPoseData(HandPoseData data)
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x9F6808", Offset = "0x9F6808", VA = "0x9F6808")]
		public void SavePose(Hand hand, Transform relativeTo)
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x9F6FA0", Offset = "0x9F6FA0", VA = "0x9F6FA0")]
		public Quaternion GetRotationOffset()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x9E6A10", Offset = "0x9E6A10", VA = "0x9E6A10")]
		public void SetPose(Hand hand, [Optional] Transform relativeTo)
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x9E6110", Offset = "0x9E6110", VA = "0x9E6110")]
		public void SetFingerPose(Hand hand, [Optional] Transform relativeTo)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x9E61B4", Offset = "0x9E61B4", VA = "0x9E61B4")]
		public void SetPosition(Hand hand, [Optional] Transform relativeTo)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x9E5E90", Offset = "0x9E5E90", VA = "0x9E5E90")]
		public static HandPoseData LerpPose(HandPoseData from, HandPoseData to, float point)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x9F7284", Offset = "0x9F7284", VA = "0x9F7284")]
		public static void LerpPose(ref HandPoseData lerpPose, HandPoseData from, HandPoseData to, float point)
		{
		}
	}
	[Token(Token = "0x20002BD")]
	[CreateAssetMenu(fileName = "AutoHand Pose", menuName = "Auto Hand/Custom Pose", order = 1)]
	public class HandPoseScriptable : ScriptableObject
	{
		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool rightSaved;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool leftSaved;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandPoseData rightPose;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HandPoseData leftPose;

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x9315F8", Offset = "0x9315F8", VA = "0x9315F8")]
		public void SavePoses(HandPoseData right, HandPoseData left)
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x93166C", Offset = "0x93166C", VA = "0x93166C")]
		public void SaveRightPose(HandPoseData right)
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x9316A8", Offset = "0x9316A8", VA = "0x9316A8")]
		public void SaveLeftPose(HandPoseData left)
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x9316E8", Offset = "0x9316E8", VA = "0x9316E8")]
		public HandPoseScriptable()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	[DefaultExecutionOrder(-5)]
	public class HandStabilizer : MonoBehaviour
	{
		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandBase hand;

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x9316F0", Offset = "0x9316F0", VA = "0x9316F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x9317A4", Offset = "0x9317A4", VA = "0x9317A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x9318E8", Offset = "0x9318E8", VA = "0x9318E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x931A2C", Offset = "0x931A2C", VA = "0x931A2C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x931AAC", Offset = "0x931AAC", VA = "0x931AAC")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x931AF8", Offset = "0x931AF8", VA = "0x931AF8")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x931B44", Offset = "0x931B44", VA = "0x931B44")]
		private void OnPreRender(ScriptableRenderContext src, Camera cam)
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x931B90", Offset = "0x931B90", VA = "0x931B90")]
		private void OnPostRender(ScriptableRenderContext src, Camera cam)
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x931BDC", Offset = "0x931BDC", VA = "0x931BDC")]
		public HandStabilizer()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	public class HandVelocityTracker
	{
		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private HandBase hand;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float minThrowVelocity;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<VelocityTimePair> m_ThrowVelocityList;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<VelocityTimePair> m_ThrowFrameVelocityList;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<VelocityTimePair> m_ThrowAngleVelocityList;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float disableTime;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float disableSeconds;

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x931BE4", Offset = "0x931BE4", VA = "0x931BE4")]
		public void ClearThrow()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x931C5C", Offset = "0x931C5C", VA = "0x931C5C")]
		public void Disable(float seconds)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x931C88", Offset = "0x931C88", VA = "0x931C88")]
		public HandVelocityTracker(HandBase hand)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x931D7C", Offset = "0x931D7C", VA = "0x931D7C")]
		public void UpdateThrowing()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x9320CC", Offset = "0x9320CC", VA = "0x9320CC")]
		public Vector3 ThrowVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x9324E0", Offset = "0x9324E0", VA = "0x9324E0")]
		public Vector3 ThrowAngularVelocity()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20002C0")]
	public class KeyboardHand : MonoBehaviour
	{
		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float flySpeed;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool useLocal;

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x932780", Offset = "0x932780", VA = "0x932780")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x932A80", Offset = "0x932A80", VA = "0x932A80")]
		public KeyboardHand()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	[RequireComponent(typeof(CapsuleCollider))]
	[HelpURL("https://earnestrobot.notion.site/Auto-Move-Player-02d91305a4294e039049bd45cacc5b90")]
	[DefaultExecutionOrder(-3)]
	[RequireComponent(typeof(Rigidbody))]
	public class AutoHandPlayer : MonoBehaviour
	{
		[Token(Token = "0x20002C2")]
		[CompilerGenerated]
		private sealed class <CheckForTrackingStart>d__83 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoHandPlayer <>4__this;

			[Token(Token = "0x17000168")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F63")]
				[Address(RVA = "0x93A130", Offset = "0x93A130", VA = "0x93A130", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000169")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F65")]
				[Address(RVA = "0x93A178", Offset = "0x93A178", VA = "0x93A178", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F60")]
			[Address(RVA = "0x9336F0", Offset = "0x9336F0", VA = "0x9336F0")]
			[DebuggerHidden]
			public <CheckForTrackingStart>d__83(int <>1__state)
			{
			}

			[Token(Token = "0x6000F61")]
			[Address(RVA = "0x939F18", Offset = "0x939F18", VA = "0x939F18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F62")]
			[Address(RVA = "0x939F1C", Offset = "0x939F1C", VA = "0x939F1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F64")]
			[Address(RVA = "0x93A138", Offset = "0x93A138", VA = "0x93A138", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002C3")]
		[CompilerGenerated]
		private sealed class <DisableGroundingSecondsRoutine>d__111 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoHandPlayer <>4__this;

			[Token(Token = "0x4000D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float seconds;

			[Token(Token = "0x1700016A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F69")]
				[Address(RVA = "0x93A250", Offset = "0x93A250", VA = "0x93A250", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F6B")]
				[Address(RVA = "0x93A298", Offset = "0x93A298", VA = "0x93A298", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F66")]
			[Address(RVA = "0x937730", Offset = "0x937730", VA = "0x937730")]
			[DebuggerHidden]
			public <DisableGroundingSecondsRoutine>d__111(int <>1__state)
			{
			}

			[Token(Token = "0x6000F67")]
			[Address(RVA = "0x93A180", Offset = "0x93A180", VA = "0x93A180", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F68")]
			[Address(RVA = "0x93A184", Offset = "0x93A184", VA = "0x93A184", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F6A")]
			[Address(RVA = "0x93A258", Offset = "0x93A258", VA = "0x93A258", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool notFound;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static AutoHandPlayer _Instance;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Auto Hand Player", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The tracked headCamera object")]
		public Camera headCamera;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The object that represents the forward direction movement, usually should be set as the camera or a tracked controller")]
		public Transform forwardFollow;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This should NOT be a child of this body. This should be a GameObject that contains all the tracked objects (head/controllers)")]
		public Transform trackingContainer;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Hand handRight;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Hand handLeft;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AutoToggleHeader("Movement", 0, 0)]
		public bool useMovement;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[EnableIf("useMovement")]
		[FormerlySerializedAs("moveSpeed")]
		[Tooltip("Movement speed when isGrounded")]
		public float maxMoveSpeed;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Movement acceleration when isGrounded")]
		[EnableIf("useMovement")]
		public float moveAcceleration;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[EnableIf("useMovement")]
		[Tooltip("Movement acceleration when isGrounded")]
		public float groundedDrag;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[EnableIf("useMovement")]
		public float heightSmoothSpeed;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AutoToggleHeader("Snap Turning", 0, 0)]
		[Tooltip("Whether or not to use snap turning or smooth turning")]
		[Min(0f)]
		public bool snapTurning;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("turn speed when not using snap turning - if snap turning, represents angle per snap")]
		[ShowIf("snapTurning")]
		public float snapTurnAngle;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideIf("snapTurning")]
		public float smoothTurnSpeed;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AutoToggleHeader("Height", 0, 0)]
		public bool ignoreMe2;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[ShowIf("ignoreMe2")]
		public float heightOffset;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ShowIf("ignoreMe2")]
		public bool crouching;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[ShowIf("ignoreMe2")]
		public float crouchHeight;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Whether or not the capsule height should be adjusted to match the headCamera height")]
		[ShowIf("ignoreMe2")]
		public bool autoAdjustColliderHeight;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Minimum and maximum auto adjusted height, to adjust height without auto adjustment change capsule collider height instead")]
		[ShowIf("ignoreMe2")]
		public Vector2 minMaxHeight;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[ShowIf("ignoreMe2")]
		public bool useHeadCollision;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ShowIf("ignoreMe2")]
		public float headRadius;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AutoToggleHeader("Use Grounding", 0, 0)]
		public bool useGrounding;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Maximum height that the body can step up onto")]
		[EnableIf("useGrounding")]
		[Min(0f)]
		public float maxStepHeight;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[EnableIf("useGrounding")]
		[Tooltip("Maximum angle the player can walk on")]
		[Min(0f)]
		public float maxStepAngle;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[EnableIf("useGrounding")]
		[Tooltip("The layers that count as ground")]
		public LayerMask groundLayerMask;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AutoToggleHeader("Enable Climbing", 0, 0)]
		[Tooltip("Whether or not the player can use Climbable objects  (Objects with the Climbable component)")]
		public bool allowClimbing;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		[Tooltip("Whether or not the player move while climbing")]
		[ShowIf("allowClimbing")]
		public bool allowClimbingMovement;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("How quickly the player can climb")]
		[ShowIf("allowClimbing")]
		public Vector3 climbingStrength;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float climbingAcceleration;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float climbingDrag;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Whether or not the player can use Pushable objects (Objects with the Pushable component)")]
		[AutoToggleHeader("Enable Pushing", 0, 0)]
		public bool allowBodyPushing;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("How quickly the player can climb")]
		[EnableIf("allowBodyPushing")]
		public Vector3 pushingStrength;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float pushingAcceleration;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float pushingDrag;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AutoToggleHeader("Enable Platforming", 0, 0)]
		[Tooltip("Platforms will move the player with them. A platform is an object with the Transform component on it")]
		public bool allowPlatforms;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AutoToggleHeader("Use Input Deadzone", 0, 0)]
		private float movementDeadzone;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float turnDeadzone;

		[Token(Token = "0x4000D33")]
		public const string HandPlayerLayer = "HandPlayer";

		[Token(Token = "0x4000D34")]
		private const int groundRayCount = 21;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float turnResetzone;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float groundedOffset;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private HeadPhysicsFollower headPhysicsFollower;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private CapsuleCollider bodyCapsule;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector3 moveDirection;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float turningAxis;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool isGrounded;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		private bool axisReset;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private float playerHeight;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool lastCrouching;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float lastCrouchingHeight;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion startRot;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 targetTrackedPos;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 lastUpdatePosition;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Hand lastRightHand;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Hand lastLeftHand;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3 climbAxis;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Dictionary<Hand, Climbable> climbing;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Dictionary<Pushable, Hand> pushRight;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Dictionary<Pushable, int> pushRightCount;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Dictionary<Pushable, Hand> pushLeft;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Dictionary<Pushable, int> pushLeftCount;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Vector3 pushAxis;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private Vector3 lastPlatformPosition;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Quaternion lastPlatformRotation;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private RaycastHit closestHit;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private float lastUpdateTime;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private bool ignoreIterpolationFrame;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private Vector3 targetPosOffset;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private int handPlayerMask;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private bool trackingStarted;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Vector3 lastHeadPos;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private Vector3 offset;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private RaycastHit newClosestHit;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private float highestPoint;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Coroutine disableGroundingRoutine;

		[Token(Token = "0x17000166")]
		public static AutoHandPlayer Instance
		{
			[Token(Token = "0x6000F2E")]
			[Address(RVA = "0x932A98", Offset = "0x932A98", VA = "0x932A98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000167")]
		public Rigidbody body
		{
			[Token(Token = "0x6000F2F")]
			[Address(RVA = "0x932BB0", Offset = "0x932BB0", VA = "0x932BB0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F30")]
			[Address(RVA = "0x932BB8", Offset = "0x932BB8", VA = "0x932BB8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x932BC0", Offset = "0x932BC0", VA = "0x932BC0", Slot = "4")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x933168", Offset = "0x933168", VA = "0x933168", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x9333CC", Offset = "0x9333CC", VA = "0x9333CC", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x9330F4", Offset = "0x9330F4", VA = "0x9330F4")]
		[IteratorStateMachine(typeof(<CheckForTrackingStart>d__83))]
		private IEnumerator CheckForTrackingStart()
		{
			return null;
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x933718", Offset = "0x933718", VA = "0x933718", Slot = "7")]
		protected virtual void OnHeadTrackingStarted()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x932E18", Offset = "0x932E18", VA = "0x932E18")]
		private void CreateHeadFollower()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x933750", Offset = "0x933750", VA = "0x933750")]
		private void CheckHands()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x933188", Offset = "0x933188", VA = "0x933188")]
		private void EnableHand(Hand hand)
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x9333EC", Offset = "0x9333EC", VA = "0x9333EC")]
		private void DisableHand(Hand hand)
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x93383C", Offset = "0x93383C", VA = "0x93383C")]
		private void OnHandGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x9338E8", Offset = "0x9338E8", VA = "0x9338E8")]
		private void OnHandRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x933A40", Offset = "0x933A40", VA = "0x933A40", Slot = "8")]
		public virtual void Move(Vector2 axis, bool useDeadzone = true, bool useRelativeDirection = false)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x933AC0", Offset = "0x933AC0", VA = "0x933AC0", Slot = "9")]
		public virtual void Turn(float turnAxis)
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x933ADC", Offset = "0x933ADC", VA = "0x933ADC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x93401C", Offset = "0x93401C", VA = "0x93401C", Slot = "10")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x9340CC", Offset = "0x9340CC", VA = "0x9340CC", Slot = "11")]
		protected virtual void UpdateRigidbody(Vector3 moveDir)
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x934E90", Offset = "0x934E90", VA = "0x934E90")]
		private void SyncBodyHead()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x935878", Offset = "0x935878", VA = "0x935878", Slot = "12")]
		protected virtual bool CanInputMove()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x9358A0", Offset = "0x9358A0", VA = "0x9358A0", Slot = "13")]
		protected virtual void InterpolateMovement()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x9368A4", Offset = "0x9368A4", VA = "0x9368A4", Slot = "14")]
		protected virtual void UpdateTurn(float deltaTime)
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x936D34", Offset = "0x936D34", VA = "0x936D34", Slot = "15")]
		protected virtual void Ground()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x937410", Offset = "0x937410", VA = "0x937410")]
		public bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x937418", Offset = "0x937418", VA = "0x937418")]
		public void ToggleFlying()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x93744C", Offset = "0x93744C", VA = "0x93744C", Slot = "16")]
		protected virtual void UpdatePlayerHeight()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x933B30", Offset = "0x933B30", VA = "0x933B30")]
		protected void UpdatePlatform(bool isFixedUpdate)
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x937578", Offset = "0x937578", VA = "0x937578")]
		public void Jump(float jumpPower = 1f)
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x937648", Offset = "0x937648", VA = "0x937648")]
		public void DisableGrounding(float seconds)
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x9376AC", Offset = "0x9376AC", VA = "0x9376AC")]
		[IteratorStateMachine(typeof(<DisableGroundingSecondsRoutine>d__111))]
		private IEnumerator DisableGroundingSecondsRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x937758", Offset = "0x937758", VA = "0x937758")]
		public void AddVelocity(Vector3 force, ForceMode mode = ForceMode.Acceleration)
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x937774", Offset = "0x937774", VA = "0x937774", Slot = "17")]
		protected virtual void StartPush(Hand hand, GameObject other)
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x9379A8", Offset = "0x9379A8", VA = "0x9379A8", Slot = "18")]
		protected virtual void StopPush(Hand hand, GameObject other)
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x937B9C", Offset = "0x937B9C", VA = "0x937B9C", Slot = "19")]
		protected virtual void StartGrabPush(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x937D0C", Offset = "0x937D0C", VA = "0x937D0C", Slot = "20")]
		protected virtual void EndGrabPush(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x937E80", Offset = "0x937E80", VA = "0x937E80", Slot = "21")]
		protected virtual void ApplyPushingForce()
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x938888", Offset = "0x938888", VA = "0x938888")]
		public bool IsPushing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x938AC8", Offset = "0x938AC8", VA = "0x938AC8", Slot = "22")]
		protected virtual void StartClimb(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x938C70", Offset = "0x938C70", VA = "0x938C70", Slot = "23")]
		protected virtual void EndClimb(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x938D08", Offset = "0x938D08", VA = "0x938D08", Slot = "24")]
		protected virtual void ApplyClimbingForce()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x934D0C", Offset = "0x934D0C", VA = "0x934D0C")]
		public bool IsClimbing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x939004", Offset = "0x939004", VA = "0x939004", Slot = "25")]
		public virtual void SetPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x93908C", Offset = "0x93908C", VA = "0x93908C", Slot = "26")]
		public virtual void SetPosition(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x939498", Offset = "0x939498", VA = "0x939498", Slot = "27")]
		public virtual void SetRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x939810", Offset = "0x939810", VA = "0x939810", Slot = "28")]
		public virtual void AddRotation(Quaternion addRotation)
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x939AE4", Offset = "0x939AE4", VA = "0x939AE4", Slot = "29")]
		public virtual void Recenter()
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x934C60", Offset = "0x934C60", VA = "0x934C60")]
		private Vector3 AlterDirection(Vector3 moveAxis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x939CDC", Offset = "0x939CDC", VA = "0x939CDC")]
		public AutoHandPlayer()
		{
		}
	}
	[Token(Token = "0x20002C4")]
	[RequireComponent(typeof(Grabbable))]
	public class Climbable : MonoBehaviour
	{
		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Stabber stabber;

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x93A2A0", Offset = "0x93A2A0", VA = "0x93A2A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x93A588", Offset = "0x93A588", VA = "0x93A588")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x20002C5")]
	[RequireComponent(typeof(Rigidbody))]
	public class HeadPhysicsFollower : MonoBehaviour
	{
		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public Camera headCamera;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingContainer;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform followBody;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Follow Settings")]
		public float followStrength;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The maximum allowed distance from the body for the headCamera to still move")]
		internal SphereCollider headCollider;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 startHeadPos;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool started;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _moveTo;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal Rigidbody body;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CollisionTracker collisionTracker;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float lastUpdateTime;

		[Token(Token = "0x1700016C")]
		private Transform moveTo
		{
			[Token(Token = "0x6000F70")]
			[Address(RVA = "0x93A600", Offset = "0x93A600", VA = "0x93A600")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x93A790", Offset = "0x93A790", VA = "0x93A790")]
		public void Start()
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x93A9A4", Offset = "0x93A9A4", VA = "0x93A9A4")]
		internal void Init()
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x93AB88", Offset = "0x93AB88", VA = "0x93AB88")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x93AC70", Offset = "0x93AC70", VA = "0x93AC70")]
		public bool Started()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x93AC78", Offset = "0x93AC78", VA = "0x93AC78", Slot = "4")]
		internal virtual void MoveTo()
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x93AE9C", Offset = "0x93AE9C", VA = "0x93AE9C", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x93B308", Offset = "0x93B308", VA = "0x93B308")]
		public int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x93B368", Offset = "0x93B368", VA = "0x93B368")]
		public HeadPhysicsFollower()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	[RequireComponent(typeof(InterpolatedTransformUpdater))]
	[DefaultExecutionOrder(-50)]
	public class InterpolatedTransform : MonoBehaviour
	{
		[Token(Token = "0x20002C7")]
		private struct TransformData
		{
			[Token(Token = "0x4000D72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4000D73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Quaternion rotation;

			[Token(Token = "0x4000D74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 scale;

			[Token(Token = "0x6000F82")]
			[Address(RVA = "0x93B4B8", Offset = "0x93B4B8", VA = "0x93B4B8")]
			public TransformData(Vector3 position, Quaternion rotation, Vector3 scale)
			{
			}
		}

		[Token(Token = "0x20002C8")]
		[CompilerGenerated]
		private sealed class <Disable>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InterpolatedTransform <>4__this;

			[Token(Token = "0x4000D78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x1700016D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F86")]
				[Address(RVA = "0x93BB90", Offset = "0x93BB90", VA = "0x93BB90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F88")]
				[Address(RVA = "0x93BBD8", Offset = "0x93BBD8", VA = "0x93BBD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F83")]
			[Address(RVA = "0x93BA88", Offset = "0x93BA88", VA = "0x93BA88")]
			[DebuggerHidden]
			public <Disable>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000F84")]
			[Address(RVA = "0x93BAC0", Offset = "0x93BAC0", VA = "0x93BAC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F85")]
			[Address(RVA = "0x93BAC4", Offset = "0x93BAC4", VA = "0x93BAC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F87")]
			[Address(RVA = "0x93BB98", Offset = "0x93BB98", VA = "0x93BB98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TransformData[] m_lastTransforms;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_newTransformIndex;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool run;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine disableForTime;

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x93B378", Offset = "0x93B378", VA = "0x93B378")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x93B37C", Offset = "0x93B37C", VA = "0x93B37C")]
		public void ForgetPreviousTransforms()
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x93B4DC", Offset = "0x93B4DC", VA = "0x93B4DC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x93B5E4", Offset = "0x93B5E4", VA = "0x93B5E4")]
		public void LateFixedUpdate()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x93B6E4", Offset = "0x93B6E4", VA = "0x93B6E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x93B960", Offset = "0x93B960", VA = "0x93B960")]
		public void DisableForSeconds(float time)
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x93BA04", Offset = "0x93BA04", VA = "0x93BA04")]
		[IteratorStateMachine(typeof(<Disable>d__10))]
		private IEnumerator Disable(float time)
		{
			return null;
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x93B6D4", Offset = "0x93B6D4", VA = "0x93B6D4")]
		private int OldTransformIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x93BAB0", Offset = "0x93BAB0", VA = "0x93BAB0")]
		public InterpolatedTransform()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	[DefaultExecutionOrder(100)]
	public class InterpolatedTransformUpdater : MonoBehaviour
	{
		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InterpolatedTransform _interpolatedTransform;

		[Token(Token = "0x1700016F")]
		private InterpolatedTransform interpolatedTransform
		{
			[Token(Token = "0x6000F89")]
			[Address(RVA = "0x93BBE0", Offset = "0x93BBE0", VA = "0x93BBE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x93BC88", Offset = "0x93BC88", VA = "0x93BC88")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x93BCA4", Offset = "0x93BCA4", VA = "0x93BCA4")]
		public InterpolatedTransformUpdater()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	[DefaultExecutionOrder(-100)]
	public class InterpolationController : MonoBehaviour
	{
		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] m_lastFixedUpdateTimes;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_newTimeIndex;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float m_interpolationFactor;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static InterpolationController _Instance;

		[Token(Token = "0x17000170")]
		public static float InterpolationFactor
		{
			[Token(Token = "0x6000F8C")]
			[Address(RVA = "0x93BCAC", Offset = "0x93BCAC", VA = "0x93BCAC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000171")]
		public static InterpolationController Instance
		{
			[Token(Token = "0x6000F8D")]
			[Address(RVA = "0x93BCF4", Offset = "0x93BCF4", VA = "0x93BCF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x93BE84", Offset = "0x93BE84", VA = "0x93BE84")]
		public void Start()
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0x93BEE4", Offset = "0x93BEE4", VA = "0x93BEE4")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x93BF4C", Offset = "0x93BF4C", VA = "0x93BF4C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x93BF3C", Offset = "0x93BF3C", VA = "0x93BF3C")]
		private int OldTimeIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x93C00C", Offset = "0x93C00C", VA = "0x93C00C")]
		public InterpolationController()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public class PlayerPlatform : MonoBehaviour
	{
		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x93C014", Offset = "0x93C014", VA = "0x93C014")]
		public PlayerPlatform()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class Pushable : MonoBehaviour
	{
		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 strengthScale;

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x93C01C", Offset = "0x93C01C", VA = "0x93C01C")]
		public Pushable()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public class Teleporter : MonoBehaviour
	{
		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Teleport")]
		[Tooltip("The object to teleport")]
		public GameObject teleportObject;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Can be left empty - Used for if there is a container that should be teleported in addition to the main teleport object")]
		public Transform[] additionalTeleports;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Aim Settings")]
		[Tooltip("The Object to Shoot the Beam From")]
		public Transform aimer;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Layers You Can Teleport On")]
		public LayerMask layer;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The Maximum Slope You Can Teleport On")]
		public float maxSurfaceAngle;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Min(0f)]
		public float distanceMultiplyer;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Min(0f)]
		public float curveStrength;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Use Worldspace Must be True")]
		public LineRenderer line;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum Length of The Teleport Line")]
		public int lineSegments;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Line Settings")]
		public Gradient canTeleportColor;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Gradient cantTeleportColor;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("This gameobject will match the position of the teleport point when aiming")]
		public GameObject indicator;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Unity Events")]
		public UnityEvent OnStartTeleport;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent OnStopTeleport;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent OnTeleport;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3[] lineArr;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool aiming;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool hitting;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private RaycastHit aimHit;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HandTeleportGuard[] teleportGuards;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AutoHandPlayer playerBody;

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x93C07C", Offset = "0x93C07C", VA = "0x93C07C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x93C1E4", Offset = "0x93C1E4", VA = "0x93C1E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x93C224", Offset = "0x93C224", VA = "0x93C224")]
		private void CalculateTeleport()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x93C7AC", Offset = "0x93C7AC", VA = "0x93C7AC")]
		private void DrawIndicator()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x93C8C0", Offset = "0x93C8C0", VA = "0x93C8C0")]
		public void StartTeleport()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x93C8E0", Offset = "0x93C8E0", VA = "0x93C8E0")]
		public void CancelTeleport()
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x93C920", Offset = "0x93C920", VA = "0x93C920")]
		public void Teleport()
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x93CC6C", Offset = "0x93CC6C", VA = "0x93CC6C")]
		public Teleporter()
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public class AutoInputModule : BaseInputModule
	{
		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<HandCanvasPointer> pointers;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PointerEventData[] eventDatas;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AutoInputModule _instance;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _isDestroyed;

		[Token(Token = "0x17000172")]
		public AutoInputModule Instance
		{
			[Token(Token = "0x6000F9D")]
			[Address(RVA = "0x93CDB4", Offset = "0x93CDB4", VA = "0x93CDB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x93CF10", Offset = "0x93CF10", VA = "0x93CF10", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x93CF18", Offset = "0x93CF18", VA = "0x93CF18", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x93CF24", Offset = "0x93CF24", VA = "0x93CF24")]
		public int AddPointer(HandCanvasPointer pointer)
		{
			return default(int);
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x93D1D8", Offset = "0x93D1D8", VA = "0x93D1D8")]
		public void RemovePointer(HandCanvasPointer pointer)
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x93D554", Offset = "0x93D554", VA = "0x93D554", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x93D9EC", Offset = "0x93D9EC", VA = "0x93D9EC")]
		public void ProcessPress(int index)
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x93DC74", Offset = "0x93DC74", VA = "0x93DC74")]
		public void ProcessRelease(int index)
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x93E020", Offset = "0x93E020", VA = "0x93E020")]
		public PointerEventData GetData(int index)
		{
			return null;
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x93E050", Offset = "0x93E050", VA = "0x93E050")]
		public AutoInputModule()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public delegate void CollisionEvent(GameObject from);
	[Token(Token = "0x20002D0")]
	public class CollisionTracker : MonoBehaviour
	{
		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool disableCollisionTracking;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool disableTriggersTracking;

		[Token(Token = "0x17000173")]
		public int collisionCount
		{
			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0x93B320", Offset = "0x93B320", VA = "0x93B320")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000174")]
		public int triggerCount
		{
			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0x93E6DC", Offset = "0x93E6DC", VA = "0x93E6DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000175")]
		public List<GameObject> triggerObjects
		{
			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0x93E724", Offset = "0x93E724", VA = "0x93E724")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0x93E72C", Offset = "0x93E72C", VA = "0x93E72C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public List<int> triggerObjectsCount
		{
			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0x93E734", Offset = "0x93E734", VA = "0x93E734")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB8")]
			[Address(RVA = "0x93E73C", Offset = "0x93E73C", VA = "0x93E73C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public List<GameObject> collisionObjects
		{
			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0x93E744", Offset = "0x93E744", VA = "0x93E744")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0x93E74C", Offset = "0x93E74C", VA = "0x93E74C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public List<int> collisionObjectsCount
		{
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0x93E754", Offset = "0x93E754", VA = "0x93E754")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0x93E75C", Offset = "0x93E75C", VA = "0x93E75C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event CollisionEvent OnCollisionFirstEnter
		{
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0x93E1FC", Offset = "0x93E1FC", VA = "0x93E1FC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0x93E298", Offset = "0x93E298", VA = "0x93E298")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public event CollisionEvent OnCollisionLastExit
		{
			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0x93E334", Offset = "0x93E334", VA = "0x93E334")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0x93E3D0", Offset = "0x93E3D0", VA = "0x93E3D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public event CollisionEvent OnTriggerFirstEnter
		{
			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0x93E46C", Offset = "0x93E46C", VA = "0x93E46C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0x93E508", Offset = "0x93E508", VA = "0x93E508")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event CollisionEvent OnTriggeLastExit
		{
			[Token(Token = "0x6000FB1")]
			[Address(RVA = "0x93E5A4", Offset = "0x93E5A4", VA = "0x93E5A4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FB2")]
			[Address(RVA = "0x93E640", Offset = "0x93E640", VA = "0x93E640")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x93E764", Offset = "0x93E764", VA = "0x93E764")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x93E82C", Offset = "0x93E82C", VA = "0x93E82C", Slot = "4")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x93EA78", Offset = "0x93EA78", VA = "0x93EA78")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x93EA7C", Offset = "0x93EA7C", VA = "0x93EA7C")]
		private void CheckCollisions()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x93ED24", Offset = "0x93ED24", VA = "0x93ED24", Slot = "5")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x93EF90", Offset = "0x93EF90", VA = "0x93EF90", Slot = "6")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x93F174", Offset = "0x93F174", VA = "0x93F174", Slot = "7")]
		protected virtual void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x93F3B0", Offset = "0x93F3B0", VA = "0x93F3B0", Slot = "8")]
		protected virtual void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x93F580", Offset = "0x93F580", VA = "0x93F580")]
		public CollisionTracker()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class HandCanvasPointer : MonoBehaviour
	{
		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public GameObject hitPointMarker;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Ray settings")]
		public float raycastLength;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool autoShowTarget;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LayerMask UILayer;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Events")]
		public UnityEvent StartSelect;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent StopSelect;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent StartPoint;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent StopPoint;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool hover;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AutoInputModule inputModule;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float lineSegements;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Camera cam;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int pointerIndex;

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x93F6B8", Offset = "0x93F6B8", VA = "0x93F6B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x93FA44", Offset = "0x93FA44", VA = "0x93FA44")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x93FACC", Offset = "0x93FACC", VA = "0x93FACC")]
		public void SetIndex(int index)
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x93D924", Offset = "0x93D924", VA = "0x93D924")]
		internal void Preprocess()
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x93FAD4", Offset = "0x93FAD4", VA = "0x93FAD4")]
		public void Press()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x93FBC4", Offset = "0x93FBC4", VA = "0x93FBC4")]
		public void Release()
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x93FC54", Offset = "0x93FC54", VA = "0x93FC54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x93FEE4", Offset = "0x93FEE4", VA = "0x93FEE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x93FEE8", Offset = "0x93FEE8", VA = "0x93FEE8")]
		private void UpdateLine()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x94027C", Offset = "0x94027C", VA = "0x94027C")]
		private RaycastHit CreateRaycast(float dist)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x93FB80", Offset = "0x93FB80", VA = "0x93FB80")]
		private void ShowRay(bool show)
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x94036C", Offset = "0x94036C", VA = "0x94036C")]
		public HandCanvasPointer()
		{
		}
	}
	[Token(Token = "0x20002D2")]
	[DefaultExecutionOrder(-1)]
	[RequireComponent(typeof(Rigidbody))]
	public class PhysicsFollower : MonoBehaviour
	{
		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Follow target, the hand will always try to match this transforms rotation and position with rigidbody movements")]
		[Space]
		[Header("Follow Settings")]
		public Transform follow;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Stops hand physics follow - to freeze from all forces change rigidbody to kinematic or change rigidbody constraints")]
		public bool freezePos;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Stops hand physics follow - to freeze from all forces change rigidbody to kinematic or change rigidbody constraints")]
		public bool freezeRot;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This will offset the position without offsetting the rotation pivot")]
		public Vector3 followPositionOffset;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Min(0f)]
		[Tooltip("Follow target speed (This will cause jittering if turned too high)")]
		public float followPositionStrength;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Min(0f)]
		[Tooltip("Follow target rotation speed (This will cause jittering if turned too high)")]
		public float followRotationStrength;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The maximum allowed velocity of the hand")]
		[Min(0f)]
		public float maxVelocity;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Rigidbody body;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform moveTo;

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x94038C", Offset = "0x94038C", VA = "0x94038C")]
		public void Start()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x940398", Offset = "0x940398", VA = "0x940398", Slot = "4")]
		public virtual void Set()
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x94056C", Offset = "0x94056C", VA = "0x94056C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x940578", Offset = "0x940578", VA = "0x940578", Slot = "5")]
		protected virtual void OnUpdate()
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x940730", Offset = "0x940730", VA = "0x940730")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x94073C", Offset = "0x94073C", VA = "0x94073C", Slot = "6")]
		protected virtual void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x940924", Offset = "0x940924", VA = "0x940924", Slot = "7")]
		internal virtual void MoveTo()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x940B64", Offset = "0x940B64", VA = "0x940B64", Slot = "8")]
		internal virtual void TorqueTo()
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x940FAC", Offset = "0x940FAC", VA = "0x940FAC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x941020", Offset = "0x941020", VA = "0x941020")]
		public PhysicsFollower()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public class Stabbable : MonoBehaviour
	{
		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody body;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grabbable;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The index that must match the stabbers index to allow stabbing")]
		public int stabIndex;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxStabbers;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float positionDamper;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationDamper;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool parentOnStab;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Events")]
		public UnityEvent StartStab;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent EndStab;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public StabEvent StartStabEvent;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public StabEvent EndStabEvent;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int currentStabs;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Stabber> stabbing;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform stabParent;

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x941038", Offset = "0x941038", VA = "0x941038")]
		public void Start()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x9412CC", Offset = "0x9412CC", VA = "0x9412CC", Slot = "4")]
		public virtual void OnStab(Stabber stabber)
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x9413D0", Offset = "0x9413D0", VA = "0x9413D0", Slot = "5")]
		public virtual void OnEndStab(Stabber stabber)
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x941460", Offset = "0x941460", VA = "0x941460", Slot = "6")]
		public virtual bool CanStab(Stabber stabber)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x94149C", Offset = "0x94149C", VA = "0x94149C")]
		public int StabbedCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x9414E4", Offset = "0x9414E4", VA = "0x9414E4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x9415C4", Offset = "0x9415C4", VA = "0x9415C4")]
		public Stabbable()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public delegate void StabEvent(Stabber stabber, Stabbable stab);
	[Token(Token = "0x20002D5")]
	public class Stabber : MonoBehaviour
	{
		[Token(Token = "0x20002D6")]
		[CompilerGenerated]
		private sealed class <StartWait>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Stabber <>4__this;

			[Token(Token = "0x4000DE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000179")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FF9")]
				[Address(RVA = "0x943444", Offset = "0x943444", VA = "0x943444", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FFB")]
				[Address(RVA = "0x94348C", Offset = "0x94348C", VA = "0x94348C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0x941A90", Offset = "0x941A90", VA = "0x941A90")]
			[DebuggerHidden]
			public <StartWait>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0x943340", Offset = "0x943340", VA = "0x943340", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FF8")]
			[Address(RVA = "0x943344", Offset = "0x943344", VA = "0x943344", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FFA")]
			[Address(RVA = "0x94344C", Offset = "0x94344C", VA = "0x94344C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Can be left empty/null")]
		public Grabbable grabbable;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Stab Settings")]
		public CapsuleCollider stabCapsule;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If left empty, will default to grabbable layers")]
		public LayerMask stabbableLayers;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The index that must match the stabbables index to allow stabbing")]
		public int stabIndex;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int maxStabs;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Joint Settings")]
		public Vector3 axis;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float limit;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ConfigurableJointMotion xMotion;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ConfigurableJointMotion yMotion;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public ConfigurableJointMotion zMotion;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ConfigurableJointMotion angularXMotion;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ConfigurableJointMotion angularYMotion;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ConfigurableJointMotion angularZMotion;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Space]
		public float positionDampeningMultiplyer;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float rotationDampeningMultiplyer;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Events")]
		public UnityEvent StartStab;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent EndStab;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public StabEvent StartStabEvent;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public StabEvent EndStabEvent;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Stabbable> stabbed;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<ConfigurableJoint> stabbedJoints;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<Stabbable, int> stabbedFrames;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Collider[] resultsNonAlloc;

		[Token(Token = "0x4000DDF")]
		private const int STABFRAMES = 3;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 startPos;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Quaternion startRot;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 lastPos;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion lastRot;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int frames;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Dictionary<Transform, Transform> originalParents;

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x9416CC", Offset = "0x9416CC", VA = "0x9416CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x941A1C", Offset = "0x941A1C", VA = "0x941A1C")]
		[IteratorStateMachine(typeof(<StartWait>d__31))]
		private IEnumerator StartWait()
		{
			return null;
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x941AB8", Offset = "0x941AB8", VA = "0x941AB8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x941BE0", Offset = "0x941BE0", VA = "0x941BE0", Slot = "4")]
		protected virtual void CheckStabArea()
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x942534", Offset = "0x942534", VA = "0x942534", Slot = "5")]
		protected virtual void OnStabbableEnter(Stabbable stab)
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x942BB8", Offset = "0x942BB8", VA = "0x942BB8", Slot = "6")]
		protected virtual void OnStabbableExit(Stabbable stab)
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x942DB0", Offset = "0x942DB0", VA = "0x942DB0")]
		public List<Stabbable> GetStabbed()
		{
			return null;
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x942DB8", Offset = "0x942DB8", VA = "0x942DB8")]
		public int GetStabbedCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x942E00", Offset = "0x942E00", VA = "0x942E00")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x943278", Offset = "0x943278", VA = "0x943278")]
		public Stabber()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public class Stickable : MonoBehaviour
	{
		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Sticky Settings")]
		public Rigidbody body;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How strong the joint is between the stickable and this")]
		public float stickStrength;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Multiplyer for required stick speed to activate")]
		public float stickSpeedMultiplyer;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This index must match the sticky object to stick")]
		public int stickIndex;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Event")]
		public UnityEvent OnStick;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent EndStick;

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x943494", Offset = "0x943494", VA = "0x943494")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x943574", Offset = "0x943574", VA = "0x943574")]
		public Stickable()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	[RequireComponent(typeof(Rigidbody))]
	public class Sticky : MonoBehaviour
	{
		[Token(Token = "0x20002D9")]
		[CompilerGenerated]
		private sealed class <JointBreak>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Sticky <>4__this;

			[Token(Token = "0x1700017B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001008")]
				[Address(RVA = "0x943D84", Offset = "0x943D84", VA = "0x943D84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600100A")]
				[Address(RVA = "0x943DCC", Offset = "0x943DCC", VA = "0x943DCC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001005")]
			[Address(RVA = "0x943A80", Offset = "0x943A80", VA = "0x943A80")]
			[DebuggerHidden]
			public <JointBreak>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001006")]
			[Address(RVA = "0x943B98", Offset = "0x943B98", VA = "0x943B98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001007")]
			[Address(RVA = "0x943B9C", Offset = "0x943B9C", VA = "0x943B9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001009")]
			[Address(RVA = "0x943D8C", Offset = "0x943D8C", VA = "0x943D8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Sticky Settings")]
		[Tooltip("How strong the joint is between the stickable and this")]
		public float stickStrength;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplyer for required stick speed to activate")]
		public float requiredStickSpeed;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This index must match the stickable object to stick")]
		public int stickIndex;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Event")]
		public UnityEvent OnStick;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody body;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Stickable> stickers;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Joint> joints;

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x943584", Offset = "0x943584", VA = "0x943584")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x9436C8", Offset = "0x9436C8", VA = "0x9436C8")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x943748", Offset = "0x943748", VA = "0x943748")]
		private void CreateStick(Stickable sticker)
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x9439EC", Offset = "0x9439EC", VA = "0x9439EC")]
		private void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x943A0C", Offset = "0x943A0C", VA = "0x943A0C")]
		[IteratorStateMachine(typeof(<JointBreak>d__11))]
		private IEnumerator JointBreak()
		{
			return null;
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x943AA8", Offset = "0x943AA8", VA = "0x943AA8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0x943B88", Offset = "0x943B88", VA = "0x943B88")]
		public Sticky()
		{
		}
	}
}
namespace Autohand.Demo
{
	[Token(Token = "0x20002DA")]
	public class XRAutoHandAxisFingerBender : MonoBehaviour
	{
		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink controller;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonAxis axis;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lastAxis;

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x943DD4", Offset = "0x943DD4", VA = "0x943DD4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0x943ED4", Offset = "0x943ED4", VA = "0x943ED4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x944004", Offset = "0x944004", VA = "0x944004")]
		public XRAutoHandAxisFingerBender()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class XRAutoHandFingerBender : MonoBehaviour
	{
		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink controller;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton button;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pressed;

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x94400C", Offset = "0x94400C", VA = "0x94400C")]
		private void Update()
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x9441B4", Offset = "0x9441B4", VA = "0x9441B4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x9442E4", Offset = "0x9442E4", VA = "0x9442E4")]
		public XRAutoHandFingerBender()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public class XRControllerEvent : MonoBehaviour
	{
		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink link;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton button;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent Pressed;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent Released;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool pressed;

		[Token(Token = "0x6001011")]
		[Address(RVA = "0x9442EC", Offset = "0x9442EC", VA = "0x9442EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0x944368", Offset = "0x944368", VA = "0x944368")]
		public XRControllerEvent()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public enum CommonButton
	{
		[Token(Token = "0x4000E08")]
		gripButton,
		[Token(Token = "0x4000E09")]
		menuButton,
		[Token(Token = "0x4000E0A")]
		primaryButton,
		[Token(Token = "0x4000E0B")]
		secondaryButton,
		[Token(Token = "0x4000E0C")]
		triggerButton,
		[Token(Token = "0x4000E0D")]
		primary2DAxisClick,
		[Token(Token = "0x4000E0E")]
		primary2DAxisTouch,
		[Token(Token = "0x4000E0F")]
		secondary2DAxisClick,
		[Token(Token = "0x4000E10")]
		secondary2DAxisTouch,
		[Token(Token = "0x4000E11")]
		primaryTouch,
		[Token(Token = "0x4000E12")]
		secondaryTouch,
		[Token(Token = "0x4000E13")]
		none
	}
	[Token(Token = "0x20002DE")]
	public enum CommonAxis
	{
		[Token(Token = "0x4000E15")]
		trigger,
		[Token(Token = "0x4000E16")]
		grip,
		[Token(Token = "0x4000E17")]
		none
	}
	[Token(Token = "0x20002DF")]
	public enum Common2DAxis
	{
		[Token(Token = "0x4000E19")]
		primaryAxis,
		[Token(Token = "0x4000E1A")]
		secondaryAxis,
		[Token(Token = "0x4000E1B")]
		none
	}
	[Token(Token = "0x20002E0")]
	public class XRHandControllerLink : HandControllerLink
	{
		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton grabButton;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This axis will bend all the fingers on the hand -> replaced with finger bender scripts")]
		public CommonAxis grabAxis;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CommonButton squeezeButton;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private XRNode role;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool squeezing;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool grabbing;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.XR.InputDevice device;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x6001013")]
		[Address(RVA = "0x944370", Offset = "0x944370", VA = "0x944370")]
		private void Start()
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0x94444C", Offset = "0x94444C", VA = "0x94444C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0x9447B8", Offset = "0x9447B8", VA = "0x9447B8")]
		public List<UnityEngine.XR.InputDevice> Devices()
		{
			return null;
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x944154", Offset = "0x944154", VA = "0x944154")]
		public bool ButtonPressed(CommonButton button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x943E80", Offset = "0x943E80", VA = "0x943E80")]
		public float GetAxis(CommonAxis axis)
		{
			return default(float);
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0x94482C", Offset = "0x94482C", VA = "0x94482C")]
		public Vector2 GetAxis2D(Common2DAxis axis)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x944924", Offset = "0x944924", VA = "0x944924", Slot = "4")]
		public override void TryHapticImpulse(float duration, float amp, float freq = 0f)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x944604", Offset = "0x944604", VA = "0x944604")]
		public static InputFeatureUsage<bool> GetCommonButton(CommonButton button)
		{
			return default(InputFeatureUsage<bool>);
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x9447C0", Offset = "0x9447C0", VA = "0x9447C0")]
		public static InputFeatureUsage<float> GetCommonAxis(CommonAxis axis)
		{
			return default(InputFeatureUsage<float>);
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x9448B8", Offset = "0x9448B8", VA = "0x9448B8")]
		public static InputFeatureUsage<Vector2> GetCommon2DAxis(Common2DAxis axis)
		{
			return default(InputFeatureUsage<Vector2>);
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x944ACC", Offset = "0x944ACC", VA = "0x944ACC")]
		public XRHandControllerLink()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	public class XRHandPlayerControllerLink : MonoBehaviour
	{
		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink moveController;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink turnController;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AutoHandPlayer player;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Input")]
		public Common2DAxis moveAxis;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Common2DAxis turnAxis;

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x944B5C", Offset = "0x944B5C", VA = "0x944B5C")]
		private void Update()
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x944BD4", Offset = "0x944BD4", VA = "0x944BD4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x944C18", Offset = "0x944C18", VA = "0x944C18")]
		public XRHandPlayerControllerLink()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class XRHandPointGrabLink : MonoBehaviour
	{
		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandDistanceGrabber pointGrab;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink link;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Input")]
		public CommonButton pointInput;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public CommonButton selectInput;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pointing;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool selecting;

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x944C20", Offset = "0x944C20", VA = "0x944C20")]
		private void Update()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x944D20", Offset = "0x944D20", VA = "0x944D20")]
		public XRHandPointGrabLink()
		{
		}
	}
	[Token(Token = "0x20002E3")]
	public class XRHeadTracking : MonoBehaviour
	{
		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackingOriginModeFlags mode;

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x944D28", Offset = "0x944D28", VA = "0x944D28")]
		private void Start()
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x944E44", Offset = "0x944E44", VA = "0x944E44")]
		public XRHeadTracking()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class XRTeleporterLink : MonoBehaviour
	{
		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Teleporter hand;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRNode role;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CommonButton button;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool teleporting;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.XR.InputDevice device;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x944E54", Offset = "0x944E54", VA = "0x944E54")]
		private void Start()
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x944ED0", Offset = "0x944ED0", VA = "0x944ED0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x944FDC", Offset = "0x944FDC", VA = "0x944FDC")]
		public XRTeleporterLink()
		{
		}
	}
	[Token(Token = "0x20002E5")]
	public class BoxingGlove : MonoBehaviour
	{
		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody body;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float power;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float lastHitTime;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float delay;

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x944FE4", Offset = "0x944FE4", VA = "0x944FE4")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x945074", Offset = "0x945074", VA = "0x945074")]
		public BoxingGlove()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public class CubeBreak : MonoBehaviour
	{
		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float force;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] offsets;

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x94508C", Offset = "0x94508C", VA = "0x94508C")]
		[ContextMenu("Break")]
		public void Break()
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x945688", Offset = "0x945688", VA = "0x945688")]
		public CubeBreak()
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class DemoFlyingToggle : MonoBehaviour
	{
		[Token(Token = "0x600102C")]
		[Address(RVA = "0x9457A8", Offset = "0x9457A8", VA = "0x9457A8")]
		public void ToggleFlying()
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x9457C8", Offset = "0x9457C8", VA = "0x9457C8")]
		public DemoFlyingToggle()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class Door : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Door should start closed")]
		public Rigidbody body;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 closedPosition;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion closedRotation;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("The door needs to reach this level of open before it can be reset")]
		public float minThreshold;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float midThreshold;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The door needs to reach this level of open before it can be reset")]
		public float maxThreshold;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Space]
		public UnityEvent OnMax;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent OnMid;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent OnMin;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool min;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool max;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool mid;

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x9457D0", Offset = "0x9457D0", VA = "0x9457D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x9458E8", Offset = "0x9458E8", VA = "0x9458E8")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x945A24", Offset = "0x945A24", VA = "0x945A24")]
		private void Max()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x945A68", Offset = "0x945A68", VA = "0x945A68")]
		private void Mid()
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x945A44", Offset = "0x945A44", VA = "0x945A44")]
		private void Min()
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x945A8C", Offset = "0x945A8C", VA = "0x945A8C")]
		public void ClosedDoor()
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x945AEC", Offset = "0x945AEC", VA = "0x945AEC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x945BCC", Offset = "0x945BCC", VA = "0x945BCC")]
		public Door()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class ExplosionSource : MonoBehaviour
	{
		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float force;

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x945BF0", Offset = "0x945BF0", VA = "0x945BF0")]
		public void Explode(bool destroy)
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x945D90", Offset = "0x945D90", VA = "0x945D90")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x945DDC", Offset = "0x945DDC", VA = "0x945DDC")]
		public ExplosionSource()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public class Grenade : MonoBehaviour
	{
		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabbable grenade;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable pin;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ConfigurableJoint pinJoint;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float explosionDelay;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool startDelayOnRelease;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float explosionForce;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float explosionRadius;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pinJointStrength;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject explosionEffect;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent pinBreakEvent;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent explosionEvent;

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x945DF0", Offset = "0x945DF0", VA = "0x945DF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x946200", Offset = "0x946200", VA = "0x946200")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x94648C", Offset = "0x94648C", VA = "0x94648C")]
		private void OnGrenadeGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x946508", Offset = "0x946508", VA = "0x946508")]
		private void OnGrenadeRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x946600", Offset = "0x946600", VA = "0x946600")]
		private void OnPinGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x946688", Offset = "0x946688", VA = "0x946688")]
		private void OnPinRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x946714", Offset = "0x946714", VA = "0x946714")]
		private void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0x94676C", Offset = "0x94676C", VA = "0x94676C")]
		private void CheckJointBreak()
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x94684C", Offset = "0x94684C", VA = "0x94684C")]
		private void Explode()
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x946CD0", Offset = "0x946CD0", VA = "0x946CD0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x946D20", Offset = "0x946D20", VA = "0x946D20")]
		public Grenade()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public class HandSwapper : MonoBehaviour
	{
		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AutoHandPlayer player;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hand fromHand;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Hand toHand;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject fromModel;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject toModel;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool swapped;

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x946D48", Offset = "0x946D48", VA = "0x946D48")]
		public void Swap()
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x946EDC", Offset = "0x946EDC", VA = "0x946EDC")]
		public HandSwapper()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class JointBreakStopForce1 : MonoBehaviour
	{
		[Token(Token = "0x6001046")]
		[Address(RVA = "0x946EE4", Offset = "0x946EE4", VA = "0x946EE4")]
		private void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x946FDC", Offset = "0x946FDC", VA = "0x946FDC")]
		public JointBreakStopForce1()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class Pistol : MonoBehaviour
	{
		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody body;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform barrelTip;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float hitPower;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float recoilPower;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float range;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask layer;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip shootSound;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float shootVolume;

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x946FE4", Offset = "0x946FE4", VA = "0x946FE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x9470CC", Offset = "0x9470CC", VA = "0x9470CC")]
		public void Shoot()
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x947558", Offset = "0x947558", VA = "0x947558")]
		public Pistol()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public class PlayerFallCatcher : MonoBehaviour
	{
		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 startPos;

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x947578", Offset = "0x947578", VA = "0x947578")]
		private void Start()
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x9476A4", Offset = "0x9476A4", VA = "0x9476A4")]
		private void Update()
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x947774", Offset = "0x947774", VA = "0x947774")]
		public PlayerFallCatcher()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class ScaleHighlight : MonoBehaviour
	{
		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 highlighScale;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 normalScale;

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x94777C", Offset = "0x94777C", VA = "0x94777C")]
		public void Highlight()
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x9477A8", Offset = "0x9477A8", VA = "0x9477A8")]
		public void HighlightStop()
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x9477D4", Offset = "0x9477D4", VA = "0x9477D4")]
		public ScaleHighlight()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class Spinner : MonoBehaviour
	{
		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 rotationSpeed;

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x9477DC", Offset = "0x9477DC", VA = "0x9477DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x947838", Offset = "0x947838", VA = "0x947838")]
		public Spinner()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public class ToggleAutoMoveFlying : MonoBehaviour
	{
		[Token(Token = "0x6001053")]
		[Address(RVA = "0x947840", Offset = "0x947840", VA = "0x947840")]
		public void ToggleFlying()
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0x9478BC", Offset = "0x9478BC", VA = "0x9478BC")]
		public ToggleAutoMoveFlying()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class ToggleHandProjection : MonoBehaviour
	{
		[Token(Token = "0x6001055")]
		[Address(RVA = "0x9478C4", Offset = "0x9478C4", VA = "0x9478C4")]
		public void DisableGripProjection()
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x947984", Offset = "0x947984", VA = "0x947984")]
		public void EnableGripProjection()
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x947A44", Offset = "0x947A44", VA = "0x947A44")]
		public void DisableHighlightProjection()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x947B04", Offset = "0x947B04", VA = "0x947B04")]
		public void EnableHighlightProjection()
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x947BC4", Offset = "0x947BC4", VA = "0x947BC4")]
		public ToggleHandProjection()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	public class TomatoSpawner : MonoBehaviour
	{
		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] tomatoes;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<GameObject> copies;

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x947BCC", Offset = "0x947BCC", VA = "0x947BCC")]
		private void Start()
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x947E40", Offset = "0x947E40", VA = "0x947E40")]
		public void SpawnTomato()
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x947FD8", Offset = "0x947FD8", VA = "0x947FD8")]
		public TomatoSpawner()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public class ButtonDemoRespawn : MonoBehaviour
	{
		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform root;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Transform> respawns;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Vector3> startPos;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Quaternion> startRot;

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x947FE0", Offset = "0x947FE0", VA = "0x947FE0")]
		private void Start()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x9484C0", Offset = "0x9484C0", VA = "0x9484C0")]
		public void Respawn()
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x9487F4", Offset = "0x9487F4", VA = "0x9487F4")]
		public void ReloadScene()
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x948864", Offset = "0x948864", VA = "0x948864")]
		public ButtonDemoRespawn()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class DialHandScaler : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Hand hand;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 minScale;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 maxScale;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float startReach;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 startScale;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float[] fingersStartScale;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 lastHandScale;

		[Token(Token = "0x6001061")]
		[Address(RVA = "0x9488EC", Offset = "0x9488EC", VA = "0x9488EC")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0x948A20", Offset = "0x948A20", VA = "0x948A20")]
		private void Update()
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0x948CE4", Offset = "0x948CE4", VA = "0x948CE4")]
		public DialHandScaler()
		{
		}
	}
	[Token(Token = "0x20002F6")]
	public class JoystickObjectMover : PhysicsGadgetJoystick
	{
		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform move;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float speed;

		[Token(Token = "0x6001064")]
		[Address(RVA = "0x948CEC", Offset = "0x948CEC", VA = "0x948CEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x948D90", Offset = "0x948D90", VA = "0x948D90")]
		public JoystickObjectMover()
		{
		}
	}
	[Token(Token = "0x20002F7")]
	public class MoverLever : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform move;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 axis;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float speed;

		[Token(Token = "0x6001066")]
		[Address(RVA = "0x948DA0", Offset = "0x948DA0", VA = "0x948DA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x948F60", Offset = "0x948F60", VA = "0x948F60")]
		public MoverLever()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public class PhysicsSliderPositionMover : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Movement")]
		public Transform move;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Acts as speed")]
		public Vector3 axis;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Header("Range")]
		public bool useRange;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 minRange;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 maxRange;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 startPos;

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x948F70", Offset = "0x948F70", VA = "0x948F70")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x948FA4", Offset = "0x948FA4", VA = "0x948FA4")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x9490FC", Offset = "0x9490FC", VA = "0x9490FC")]
		public PhysicsSliderPositionMover()
		{
		}
	}
	[Token(Token = "0x20002F9")]
	public class WheelRotator : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform move;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 angle;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool useLocal;

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x94918C", Offset = "0x94918C", VA = "0x94918C")]
		private void Update()
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x9493B8", Offset = "0x9493B8", VA = "0x9493B8")]
		public WheelRotator()
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public class LeverTextChanger : MonoBehaviour
	{
		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicsGadgetHingeAngleReader sliderReader;

		[Token(Token = "0x600106D")]
		[Address(RVA = "0x9493C0", Offset = "0x9493C0", VA = "0x9493C0")]
		private void Update()
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0x9494AC", Offset = "0x9494AC", VA = "0x9494AC")]
		public LeverTextChanger()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	public class SliderTextChanger : MonoBehaviour
	{
		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicsGadgetConfigurableLimitReader sliderReader;

		[Token(Token = "0x600106F")]
		[Address(RVA = "0x9494B4", Offset = "0x9494B4", VA = "0x9494B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0x9495A0", Offset = "0x9495A0", VA = "0x9495A0")]
		public SliderTextChanger()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public class TextChanger : MonoBehaviour
	{
		[Token(Token = "0x20002FD")]
		[CompilerGenerated]
		private sealed class <ChangeText>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextChanger <>4__this;

			[Token(Token = "0x1700017D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001079")]
				[Address(RVA = "0x949788", Offset = "0x949788", VA = "0x949788", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600107B")]
				[Address(RVA = "0x9497D0", Offset = "0x9497D0", VA = "0x9497D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001076")]
			[Address(RVA = "0x949624", Offset = "0x949624", VA = "0x949624")]
			[DebuggerHidden]
			public <ChangeText>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001077")]
			[Address(RVA = "0x9496B0", Offset = "0x9496B0", VA = "0x9496B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001078")]
			[Address(RVA = "0x9496B4", Offset = "0x9496B4", VA = "0x9496B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600107A")]
			[Address(RVA = "0x949790", Offset = "0x949790", VA = "0x949790", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine changing;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine hide;

		[Token(Token = "0x6001071")]
		[Address(RVA = "0x9495A8", Offset = "0x9495A8", VA = "0x9495A8")]
		public void UpdateText(string newText, float upTime)
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x9495AC", Offset = "0x9495AC", VA = "0x9495AC")]
		public void UpdateText(string newText)
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x9495B0", Offset = "0x9495B0", VA = "0x9495B0")]
		[IteratorStateMachine(typeof(<ChangeText>d__5))]
		private IEnumerator ChangeText(float seconds, string newText)
		{
			return null;
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0x94964C", Offset = "0x94964C", VA = "0x94964C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x9496A8", Offset = "0x9496A8", VA = "0x9496A8")]
		public TextChanger()
		{
		}
	}
	[Token(Token = "0x20002FE")]
	public class TextGrabEvent : MonoBehaviour
	{
		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextChanger changer;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grab;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[TextArea]
		public string message;

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x9497D8", Offset = "0x9497D8", VA = "0x9497D8")]
		private void Start()
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x9499C8", Offset = "0x9499C8", VA = "0x9499C8")]
		private void OnGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x9499CC", Offset = "0x9499CC", VA = "0x9499CC")]
		public TextGrabEvent()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class TextPlacePointEvent : MonoBehaviour
	{
		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextChanger changer;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlacePoint point;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[TextArea]
		public string placeMessage;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[TextArea]
		public string highlightMessage;

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x9499D4", Offset = "0x9499D4", VA = "0x9499D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x949BE8", Offset = "0x949BE8", VA = "0x949BE8")]
		private void OnGrab(PlacePoint hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x949C00", Offset = "0x949C00", VA = "0x949C00")]
		private void OnHighlight(PlacePoint hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x949C18", Offset = "0x949C18", VA = "0x949C18")]
		public TextPlacePointEvent()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class WristLookEvent : MonoBehaviour
	{
		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera head;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The minimum head->wrist distance required to activate")]
		public float maxDistance;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The angle precisness required to activate; 0 is any angle, 1 is exactly pointed at the face")]
		[Range(0f, 1f)]
		public float anglePreciseness;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool disableWhileHolding;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Events")]
		public UnityHandEvent OnShow;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandEvent OnHide;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool showing;

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x949C28", Offset = "0x949C28", VA = "0x949C28")]
		private void Update()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x949F3C", Offset = "0x949F3C", VA = "0x949F3C")]
		public WristLookEvent()
		{
		}
	}
	[Token(Token = "0x2000301")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableEventDebugger : MonoBehaviour
	{
		[Token(Token = "0x6001085")]
		[Address(RVA = "0x949F54", Offset = "0x949F54", VA = "0x949F54")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x94A684", Offset = "0x94A684", VA = "0x94A684")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x94ADB4", Offset = "0x94ADB4", VA = "0x94ADB4")]
		public GrabbableEventDebugger()
		{
		}
	}
	[Token(Token = "0x2000303")]
	[RequireComponent(typeof(Hand))]
	public class HandEventDebugger : MonoBehaviour
	{
		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showSqueezeEvents;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool showHighlightEvents;

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x94B774", Offset = "0x94B774", VA = "0x94B774")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x94BA38", Offset = "0x94BA38", VA = "0x94BA38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0x94BCFC", Offset = "0x94BCFC", VA = "0x94BCFC")]
		public HandEventDebugger()
		{
		}
	}
	[Token(Token = "0x2000304")]
	public class HandTouchEventDebugger : MonoBehaviour
	{
		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandTouchEvent touchEvent;

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x94C74C", Offset = "0x94C74C", VA = "0x94C74C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x94C8B0", Offset = "0x94C8B0", VA = "0x94C8B0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x94CA14", Offset = "0x94CA14", VA = "0x94CA14")]
		private void StartTouch(Hand hand)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x94CAB0", Offset = "0x94CAB0", VA = "0x94CAB0")]
		private void StopTouch(Hand hand)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x94CB4C", Offset = "0x94CB4C", VA = "0x94CB4C")]
		public HandTouchEventDebugger()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class Smash : MonoBehaviour
	{
		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Smash Options")]
		[Tooltip("Required velocity magnitude from Smasher to smash")]
		public float smashForce;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Whether or not to destroy this object on smash")]
		public bool destroyOnSmash;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[Tooltip("Whether or not to release this object on smash")]
		[HideIf("destroyOnSmash")]
		public bool releaseOnSmash;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Particle Effect")]
		[Tooltip("Plays this effect on smash")]
		public ParticleSystem effect;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Whether or not to instantiates a new a particle system on smash")]
		public bool createNewEffect;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("Whether or not to apply rigidbody velocity to particle velocity on smash")]
		public bool applyVelocityOnSmash;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Sound Options")]
		public AudioClip smashSound;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float smashVolume;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Event")]
		public UnityEvent OnSmash;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SmashEvent OnSmashEvent;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal Grabbable grabbable;

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x94CB54", Offset = "0x94CB54", VA = "0x94CB54")]
		public void Start()
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x94CE2C", Offset = "0x94CE2C", VA = "0x94CE2C")]
		public void DelayedSmash(float delay)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x947550", Offset = "0x947550", VA = "0x947550")]
		public void DoSmash()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x94CE88", Offset = "0x94CE88", VA = "0x94CE88")]
		public void DoSmash(Smasher smash)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x94D228", Offset = "0x94D228", VA = "0x94D228")]
		public Smash()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public delegate void SmashEvent(Smasher smasher, Smash smashable);
	[Token(Token = "0x2000307")]
	[RequireComponent(typeof(Rigidbody))]
	public class Smasher : MonoBehaviour
	{
		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Options")]
		public LayerMask smashableLayers;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How much to multiply the magnitude on smash")]
		public float forceMulti;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Can be left empty - The center of mass point to calculate velocity magnitude - for example: the camera of the hammer is a better point vs the pivot center of the hammer object")]
		public Transform centerOfMassPoint;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Event")]
		public UnityEvent OnSmash;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SmashEvent OnSmashEvent;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] velocityOverTime;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastPos;

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x94D2A0", Offset = "0x94D2A0", VA = "0x94D2A0")]
		private void Start()
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x94D468", Offset = "0x94D468", VA = "0x94D468")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x94D5D4", Offset = "0x94D5D4", VA = "0x94D5D4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x94D68C", Offset = "0x94D68C", VA = "0x94D68C")]
		private float GetMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x94D7A8", Offset = "0x94D7A8", VA = "0x94D7A8")]
		public Smasher()
		{
		}
	}
}
