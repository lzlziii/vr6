using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Threading;
using ExitGames.Client.Photon;
using HurricaneVR.Framework.Components;
using HurricaneVR.Framework.ControllerInput;
using HurricaneVR.Framework.Core;
using HurricaneVR.Framework.Core.Grabbers;
using HurricaneVR.Framework.Core.HandPoser;
using HurricaneVR.Framework.Core.Player;
using HurricaneVR.Framework.Core.Sockets;
using HurricaneVR.Framework.Core.Stabbing;
using HurricaneVR.Framework.Shared;
using Il2CppDummyDll;
using MagicalFX;
using Photon.Pun;
using Photon.Realtime;
using Photon.Voice.PUN;
using Photon.Voice.Unity;
using Photon.Voice.Unity.UtilityScripts;
using TMPro;
using TriangleNet.Geometry;
using TriangleNet.Logging;
using TriangleNet.Meshing;
using TriangleNet.Meshing.Data;
using TriangleNet.Meshing.Iterators;
using TriangleNet.Topology;
using TriangleNet.Topology.DCEL;
using TriangleNet.Voronoi;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityStandardAssets.ImageEffects;
using WenklyStudio;
using WenklyStudio.ElvenAssassin;

[assembly: AssemblyVersion("1.0.0.0")]
[Token(Token = "0x2000002")]
public class Ext_Physics : MonoBehaviour
{
	[Token(Token = "0x6000001")]
	[Address(RVA = "0x91FF2C", Offset = "0x91FF2C", VA = "0x91FF2C")]
	public static bool CurveCast(Vector3 origin, Vector3 direction, Vector3 gravityDirection, int smoothness, out RaycastHit hitInfo, float maxDistance, out List<Vector3> points, int layerToAvoid)
	{
		return default(bool);
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x920340", Offset = "0x920340", VA = "0x920340")]
	public Ext_Physics()
	{
	}
}
[Token(Token = "0x2000003")]
[ImageEffectAllowedInSceneView]
[AddComponentMenu("KriptoFX/Explosion_Bloom")]
[RequireComponent(typeof(Camera))]
[ExecuteInEditMode]
public class Explosion_Bloom : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000004")]
	public struct Settings
	{
		[Token(Token = "0x400000D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("Filters out pixels under this level of brightness.")]
		[SerializeField]
		public float threshold;

		[Token(Token = "0x400000E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		[Tooltip("Makes transition between under/over-threshold gradual.")]
		[Range(0f, 1f)]
		public float softKnee;

		[Token(Token = "0x400000F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[Tooltip("Changes extent of veiling effects in a screen resolution-independent fashion.")]
		[Range(1f, 7f)]
		[SerializeField]
		public float radius;

		[Token(Token = "0x4000010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		[Tooltip("Blend factor of the result image.")]
		public float intensity;

		[Token(Token = "0x4000011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Tooltip("Controls filter quality and buffer resolution.")]
		public bool highQuality;

		[Token(Token = "0x4000012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[SerializeField]
		[Tooltip("Reduces flashing noise with an additional filter.")]
		public bool antiFlicker;

		[Token(Token = "0x17000004")]
		public float thresholdGamma
		{
			[Token(Token = "0x600000E")]
			[Address(RVA = "0x9211B8", Offset = "0x9211B8", VA = "0x9211B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600000D")]
			[Address(RVA = "0x9211B0", Offset = "0x9211B0", VA = "0x9211B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000005")]
		public float thresholdLinear
		{
			[Token(Token = "0x6000010")]
			[Address(RVA = "0x9210F0", Offset = "0x9210F0", VA = "0x9210F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600000F")]
			[Address(RVA = "0x9211C8", Offset = "0x9211C8", VA = "0x9211C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000006")]
		public static Settings defaultSettings
		{
			[Token(Token = "0x6000011")]
			[Address(RVA = "0x921198", Offset = "0x921198", VA = "0x921198")]
			get
			{
				return default(Settings);
			}
		}
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Settings settings;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	[SerializeField]
	private Shader m_Shader;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material m_Material;

	[Token(Token = "0x4000004")]
	private const int kMaxIterations = 16;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RenderTexture[] m_blurBuffer1;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture[] m_blurBuffer2;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int m_Threshold;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int m_Curve;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int m_PrefilterOffs;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int m_SampleScale;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int m_Intensity;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int m_BaseTex;

	[Token(Token = "0x17000001")]
	public Shader shader
	{
		[Token(Token = "0x6000003")]
		[Address(RVA = "0x920348", Offset = "0x920348", VA = "0x920348")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000002")]
	public Material material
	{
		[Token(Token = "0x6000004")]
		[Address(RVA = "0x9203E4", Offset = "0x9203E4", VA = "0x9203E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000003")]
	public static bool supportsDX11
	{
		[Token(Token = "0x6000007")]
		[Address(RVA = "0x9207AC", Offset = "0x9207AC", VA = "0x9207AC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x920540", Offset = "0x920540", VA = "0x920540")]
	public static bool IsSupported(Shader s, bool needDepth, bool needHdr, MonoBehaviour effect)
	{
		return default(bool);
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x920478", Offset = "0x920478", VA = "0x920478")]
	public static Material CheckShaderAndCreateMaterial(Shader s)
	{
		return null;
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x9207D8", Offset = "0x9207D8", VA = "0x9207D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x9208F4", Offset = "0x9208F4", VA = "0x9208F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x920930", Offset = "0x920930", VA = "0x920930")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x9209C4", Offset = "0x9209C4", VA = "0x9209C4")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x921104", Offset = "0x921104", VA = "0x921104")]
	public Explosion_Bloom()
	{
	}
}
[Token(Token = "0x2000005")]
public class ExplosionPlatformActivator : MonoBehaviour
{
	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Effect;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeDelay;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float DefaultRepeatTime;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float NearRepeatTime;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float currentTime;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float currentRepeatTime;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool canUpdate;

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x9211E4", Offset = "0x9211E4", VA = "0x9211E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x92123C", Offset = "0x92123C", VA = "0x92123C")]
	private void Init()
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x921268", Offset = "0x921268", VA = "0x921268")]
	private void Update()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x92133C", Offset = "0x92133C", VA = "0x92133C")]
	private void OnTriggerEnter(Collider coll)
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x921348", Offset = "0x921348", VA = "0x921348")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x921354", Offset = "0x921354", VA = "0x921354")]
	public ExplosionPlatformActivator()
	{
	}
}
[Token(Token = "0x2000006")]
public class ExplosionsFPS : MonoBehaviour
{
	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly GUIStyle guiStyleHeader;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeleft;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float fps;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x921368", Offset = "0x921368", VA = "0x921368")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x9213B8", Offset = "0x9213B8", VA = "0x9213B8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x9214B0", Offset = "0x9214B0", VA = "0x9214B0")]
	private void Update()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x921504", Offset = "0x921504", VA = "0x921504")]
	public ExplosionsFPS()
	{
	}
}
[Token(Token = "0x2000007")]
public class ExplosionsBillboard : MonoBehaviour
{
	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera Camera;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool Active;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool AutoInitCamera;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject myContainer;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform t;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform camT;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform contT;

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x921578", Offset = "0x921578", VA = "0x921578")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x9217B4", Offset = "0x9217B4", VA = "0x9217B4")]
	private void Update()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x921938", Offset = "0x921938", VA = "0x921938")]
	public ExplosionsBillboard()
	{
	}
}
[Token(Token = "0x2000008")]
public class ExplosionsDeactivateRendererByTime : MonoBehaviour
{
	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TimeDelay;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer rend;

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x921948", Offset = "0x921948", VA = "0x921948")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x9219A0", Offset = "0x9219A0", VA = "0x9219A0")]
	private void DeactivateRenderer()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x9219C0", Offset = "0x9219C0", VA = "0x9219C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x921A28", Offset = "0x921A28", VA = "0x921A28")]
	public ExplosionsDeactivateRendererByTime()
	{
	}
}
[Token(Token = "0x2000009")]
public class ExplosionsLightCurves : MonoBehaviour
{
	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool canUpdate;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x921A38", Offset = "0x921A38", VA = "0x921A38")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x921ABC", Offset = "0x921ABC", VA = "0x921ABC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x921AE0", Offset = "0x921AE0", VA = "0x921AE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x921B54", Offset = "0x921B54", VA = "0x921B54")]
	public ExplosionsLightCurves()
	{
	}
}
[Token(Token = "0x200000A")]
[ExecuteInEditMode]
public class ExplosionsParticleSystemScaler : MonoBehaviour
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float particlesScale;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float oldScale;

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x921B9C", Offset = "0x921B9C", VA = "0x921B9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x921BA8", Offset = "0x921BA8", VA = "0x921BA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x921BAC", Offset = "0x921BAC", VA = "0x921BAC")]
	public ExplosionsParticleSystemScaler()
	{
	}
}
[Token(Token = "0x200000B")]
public class ExplosionsScaleCurves : MonoBehaviour
{
	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve ScaleCurveX;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve ScaleCurveY;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve ScaleCurveZ;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 GraphTimeMultiplier;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 GraphScaleMultiplier;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float startTime;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform t;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float evalX;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float evalY;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float evalZ;

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x921BBC", Offset = "0x921BBC", VA = "0x921BBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x921BE0", Offset = "0x921BE0", VA = "0x921BE0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x921C04", Offset = "0x921C04", VA = "0x921C04")]
	private void Update()
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x921CC8", Offset = "0x921CC8", VA = "0x921CC8")]
	public ExplosionsScaleCurves()
	{
	}
}
[Token(Token = "0x200000C")]
public class ExplosionsShaderColorGradient : MonoBehaviour
{
	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string ShaderProperty;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int MaterialID;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Gradient Color;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float TimeMultiplier;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool canUpdate;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material matInstance;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int propertyID;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float startTime;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color oldColor;

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x921DC0", Offset = "0x921DC0", VA = "0x921DC0")]
	private void Start()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x921F54", Offset = "0x921F54", VA = "0x921F54")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x921F78", Offset = "0x921F78", VA = "0x921F78")]
	private void Update()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x922000", Offset = "0x922000", VA = "0x922000")]
	public ExplosionsShaderColorGradient()
	{
	}
}
[Token(Token = "0x200000D")]
public class ExplosionsShaderFloatCurves : MonoBehaviour
{
	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string ShaderProperty;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int MaterialID;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve FloatPropertyCurve;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float GraphScaleMultiplier;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool canUpdate;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material matInstance;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int propertyID;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float startTime;

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x9220A8", Offset = "0x9220A8", VA = "0x9220A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x92221C", Offset = "0x92221C", VA = "0x92221C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x922240", Offset = "0x922240", VA = "0x922240")]
	private void Update()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x9222B8", Offset = "0x9222B8", VA = "0x9222B8")]
	public ExplosionsShaderFloatCurves()
	{
	}
}
[Token(Token = "0x200000E")]
public class ExplosionsShaderQueue : MonoBehaviour
{
	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int AddQueue;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer rend;

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x922340", Offset = "0x922340", VA = "0x922340")]
	private void Start()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x922450", Offset = "0x922450", VA = "0x922450")]
	private void SetProjectorQueue()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x9224CC", Offset = "0x9224CC", VA = "0x9224CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x922560", Offset = "0x922560", VA = "0x922560")]
	public ExplosionsShaderQueue()
	{
	}
}
[Token(Token = "0x200000F")]
internal class ExplosionsSpriteSheetAnimation : MonoBehaviour
{
	[Token(Token = "0x2000010")]
	[CompilerGenerated]
	private sealed class <UpdateCorutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExplosionsSpriteSheetAnimation <>4__this;

		[Token(Token = "0x17000007")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000048")]
			[Address(RVA = "0x922F24", Offset = "0x922F24", VA = "0x922F24", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000008")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600004A")]
			[Address(RVA = "0x922F6C", Offset = "0x922F6C", VA = "0x922F6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000045")]
		[Address(RVA = "0x9229E8", Offset = "0x9229E8", VA = "0x9229E8")]
		[DebuggerHidden]
		public <UpdateCorutine>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000046")]
		[Address(RVA = "0x922DC0", Offset = "0x922DC0", VA = "0x922DC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000047")]
		[Address(RVA = "0x922DC4", Offset = "0x922DC4", VA = "0x922DC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000049")]
		[Address(RVA = "0x922F2C", Offset = "0x922F2C", VA = "0x922F2C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TilesX;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TilesY;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float AnimationFPS;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool IsInterpolateFrames;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int StartFrameOffset;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool IsLoop;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float StartDelay;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve FrameOverTime;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isInizialised;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int index;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int count;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int allCount;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float animationLifeTime;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool isVisible;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool isCorutineStarted;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer currentRenderer;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material instanceMaterial;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float currentInterpolatedTime;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float animationStartTime;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool animationStoped;

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x922570", Offset = "0x922570", VA = "0x922570")]
	private void Start()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x9225E4", Offset = "0x9225E4", VA = "0x9225E4")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x922838", Offset = "0x922838", VA = "0x922838")]
	private void Play()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x92293C", Offset = "0x92293C", VA = "0x92293C")]
	private void PlayDelay()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x92295C", Offset = "0x92295C", VA = "0x92295C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x92298C", Offset = "0x92298C", VA = "0x92298C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x9228C8", Offset = "0x9228C8", VA = "0x9228C8")]
	[IteratorStateMachine(typeof(<UpdateCorutine>d__26))]
	private IEnumerator UpdateCorutine()
	{
		return null;
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x922A10", Offset = "0x922A10", VA = "0x922A10")]
	private void UpdateFrame()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x922B34", Offset = "0x922B34", VA = "0x922B34")]
	private void Update()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x922CC8", Offset = "0x922CC8", VA = "0x922CC8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x922D68", Offset = "0x922D68", VA = "0x922D68")]
	public ExplosionsSpriteSheetAnimation()
	{
	}
}
[Token(Token = "0x2000011")]
public class Test : MonoBehaviour
{
	[Token(Token = "0x600004B")]
	[Address(RVA = "0x922F74", Offset = "0x922F74", VA = "0x922F74")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x922F78", Offset = "0x922F78", VA = "0x922F78")]
	public Test()
	{
	}
}
[Token(Token = "0x2000012")]
public class WFXDemoGUI : MonoBehaviour
{
	[Token(Token = "0x2000013")]
	public struct HSBColor
	{
		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float h;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float s;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;

		[Token(Token = "0x6000056")]
		[Address(RVA = "0x924114", Offset = "0x924114", VA = "0x924114")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Prefabs;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light Sun;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] Weapons;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture HUETexture;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int currentNomber;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject currentInstance;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float oldIntensity;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Color oldAmbientColor;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float dpiScale;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isDay;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float colorHUE;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int currentWeaponNomber;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject currentWeaponInstance;

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x922F80", Offset = "0x922F80", VA = "0x922F80")]
	private void Start()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x92346C", Offset = "0x92346C", VA = "0x92346C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x92310C", Offset = "0x92310C", VA = "0x92310C")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x923F30", Offset = "0x923F30", VA = "0x923F30")]
	private Color Hue(float H)
	{
		return default(Color);
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x924024", Offset = "0x924024", VA = "0x924024")]
	public HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x924120", Offset = "0x924120", VA = "0x924120")]
	public Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x9242DC", Offset = "0x9242DC", VA = "0x9242DC")]
	private Material SetMatHUEColor(Material mat, string name, float hueColor)
	{
		return null;
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x923AC8", Offset = "0x923AC8", VA = "0x923AC8")]
	private void ChangeColor()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x92438C", Offset = "0x92438C", VA = "0x92438C")]
	public WFXDemoGUI()
	{
	}
}
[Token(Token = "0x2000014")]
public class WFX_RealtimeReflection : MonoBehaviour
{
	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ReflectionProbe probe;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform camT;

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x924400", Offset = "0x924400", VA = "0x924400")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x924480", Offset = "0x924480", VA = "0x924480")]
	private void Update()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x9244F4", Offset = "0x9244F4", VA = "0x9244F4")]
	public WFX_RealtimeReflection()
	{
	}
}
[Token(Token = "0x2000015")]
public class WFX_FPS : MonoBehaviour
{
	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly GUIStyle guiStyleHeader;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeleft;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float fps;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x9244FC", Offset = "0x9244FC", VA = "0x9244FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x92454C", Offset = "0x92454C", VA = "0x92454C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x924644", Offset = "0x924644", VA = "0x924644")]
	private void Update()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x924698", Offset = "0x924698", VA = "0x924698")]
	public WFX_FPS()
	{
	}
}
[Token(Token = "0x2000016")]
public class PSMeshRendererUpdater : MonoBehaviour
{
	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MeshObject;

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x92470C", Offset = "0x92470C", VA = "0x92470C")]
	public void UpdateMeshEffect()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x923F08", Offset = "0x923F08", VA = "0x923F08")]
	public void UpdateMeshEffect(GameObject go)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x92472C", Offset = "0x92472C", VA = "0x92472C")]
	private void UpdatePSMesh(GameObject go)
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x92492C", Offset = "0x92492C", VA = "0x92492C")]
	private void AddMaterialToMesh(GameObject go)
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x924AE0", Offset = "0x924AE0", VA = "0x924AE0")]
	private Material[] AddToSharedMaterial(Material[] sharedMaterials, WFX_MeshMaterialEffect meshMatEff, bool isFirst)
	{
		return null;
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x924C8C", Offset = "0x924C8C", VA = "0x924C8C")]
	public PSMeshRendererUpdater()
	{
	}
}
[Token(Token = "0x2000017")]
internal class WFXSpriteSheetAnimation : MonoBehaviour
{
	[Token(Token = "0x2000018")]
	[CompilerGenerated]
	private sealed class <UpdateCorutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WFXSpriteSheetAnimation <>4__this;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000072")]
			[Address(RVA = "0x92567C", Offset = "0x92567C", VA = "0x92567C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000074")]
			[Address(RVA = "0x9256C4", Offset = "0x9256C4", VA = "0x9256C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600006F")]
		[Address(RVA = "0x92505C", Offset = "0x92505C", VA = "0x92505C")]
		[DebuggerHidden]
		public <UpdateCorutine>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000070")]
		[Address(RVA = "0x925524", Offset = "0x925524", VA = "0x925524", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000071")]
		[Address(RVA = "0x925528", Offset = "0x925528", VA = "0x925528", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000073")]
		[Address(RVA = "0x925684", Offset = "0x925684", VA = "0x925684", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TilesX;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TilesY;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float AnimationFPS;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool IsInterpolateFrames;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int StartFrameOffset;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool IsLoop;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float StartDelay;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string[] ShaderProperties;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve FrameOverTime;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isInizialised;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int index;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int count;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int allCount;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float animationLifeTime;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool isVisible;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool isCorutineStarted;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material instanceMaterial;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private WFX_MeshMaterialEffect wfxMeshMaterialEffect;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float currentInterpolatedTime;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float animationStartTime;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool animationStoped;

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x924C94", Offset = "0x924C94", VA = "0x924C94")]
	private void Start()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x924D08", Offset = "0x924D08", VA = "0x924D08")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x924EAC", Offset = "0x924EAC", VA = "0x924EAC")]
	private void Play()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x924FB0", Offset = "0x924FB0", VA = "0x924FB0")]
	private void PlayDelay()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x924FD0", Offset = "0x924FD0", VA = "0x924FD0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x925000", Offset = "0x925000", VA = "0x925000")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x924F3C", Offset = "0x924F3C", VA = "0x924F3C")]
	[IteratorStateMachine(typeof(<UpdateCorutine>d__27))]
	private IEnumerator UpdateCorutine()
	{
		return null;
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x925084", Offset = "0x925084", VA = "0x925084")]
	private void UpdateFrame()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x9251D8", Offset = "0x9251D8", VA = "0x9251D8")]
	private void Update()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x92536C", Offset = "0x92536C", VA = "0x92536C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x92540C", Offset = "0x92540C", VA = "0x92540C")]
	public WFXSpriteSheetAnimation()
	{
	}
}
[Token(Token = "0x2000019")]
public class WFX_LightCurves : MonoBehaviour
{
	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x9256CC", Offset = "0x9256CC", VA = "0x9256CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x925750", Offset = "0x925750", VA = "0x925750")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x92579C", Offset = "0x92579C", VA = "0x92579C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x925828", Offset = "0x925828", VA = "0x925828")]
	public WFX_LightCurves()
	{
	}
}
[Token(Token = "0x200001A")]
public class WFX_MeshMaterialEffect : MonoBehaviour
{
	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material Material;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsFirstMaterial;

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x925870", Offset = "0x925870", VA = "0x925870")]
	public WFX_MeshMaterialEffect()
	{
	}
}
[Token(Token = "0x200001B")]
public class WFX_MobileDistortion : MonoBehaviour
{
	[Token(Token = "0x200001C")]
	[CompilerGenerated]
	private sealed class <RepeatCameraMove>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WFX_MobileDistortion <>4__this;

		[Token(Token = "0x1700000B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000086")]
			[Address(RVA = "0x926434", Offset = "0x926434", VA = "0x926434", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000088")]
			[Address(RVA = "0x92647C", Offset = "0x92647C", VA = "0x92647C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000083")]
		[Address(RVA = "0x926120", Offset = "0x926120", VA = "0x926120")]
		[DebuggerHidden]
		public <RepeatCameraMove>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000084")]
		[Address(RVA = "0x9263D0", Offset = "0x9263D0", VA = "0x9263D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000085")]
		[Address(RVA = "0x9263D4", Offset = "0x9263D4", VA = "0x9263D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000087")]
		[Address(RVA = "0x92643C", Offset = "0x92643C", VA = "0x92643C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001D")]
	[CompilerGenerated]
	private sealed class <RepeatCameraStatic>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WFX_MobileDistortion <>4__this;

		[Token(Token = "0x1700000D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600008C")]
			[Address(RVA = "0x9264E8", Offset = "0x9264E8", VA = "0x9264E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600008E")]
			[Address(RVA = "0x926530", Offset = "0x926530", VA = "0x926530", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000089")]
		[Address(RVA = "0x926148", Offset = "0x926148", VA = "0x926148")]
		[DebuggerHidden]
		public <RepeatCameraStatic>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x600008A")]
		[Address(RVA = "0x926484", Offset = "0x926484", VA = "0x926484", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600008B")]
		[Address(RVA = "0x926488", Offset = "0x926488", VA = "0x926488", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600008D")]
		[Address(RVA = "0x9264F0", Offset = "0x9264F0", VA = "0x9264F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TextureScale;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public RenderTextureFormat RenderTextureFormat;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FilterMode FilterMode;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask CullingMask;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RenderingPath RenderingPath;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int FPSWhenMoveCamera;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int FPSWhenStaticCamera;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool UseRealTime;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RenderTexture renderTexture;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Camera cameraInstance;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject goCamera;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 oldPosition;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion oldRotation;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform instanceCameraTransform;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool canUpdateCamera;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool isStaticUpdate;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private WaitForSeconds fpsMove;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private WaitForSeconds fpsStatic;

	[Token(Token = "0x40000B0")]
	private const int DropedFrames = 50;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int frameCountWhenCameraIsStatic;

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x925878", Offset = "0x925878", VA = "0x925878")]
	private void Start()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x925F64", Offset = "0x925F64", VA = "0x925F64")]
	private void Update()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x925E7C", Offset = "0x925E7C", VA = "0x925E7C")]
	[IteratorStateMachine(typeof(<RepeatCameraMove>d__22))]
	private IEnumerator RepeatCameraMove()
	{
		return null;
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x925EF0", Offset = "0x925EF0", VA = "0x925EF0")]
	[IteratorStateMachine(typeof(<RepeatCameraStatic>d__23))]
	private IEnumerator RepeatCameraStatic()
	{
		return null;
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x926170", Offset = "0x926170", VA = "0x926170")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x9261F8", Offset = "0x9261F8", VA = "0x9261F8")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x92599C", Offset = "0x92599C", VA = "0x92599C")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x926280", Offset = "0x926280", VA = "0x926280")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x926384", Offset = "0x926384", VA = "0x926384")]
	public WFX_MobileDistortion()
	{
	}
}
[Token(Token = "0x200001E")]
[ExecuteInEditMode]
public class WFX_Turbulence : MonoBehaviour
{
	[Token(Token = "0x200001F")]
	public enum MoveMethodEnum
	{
		[Token(Token = "0x40000CF")]
		Position,
		[Token(Token = "0x40000D0")]
		Velocity,
		[Token(Token = "0x40000D1")]
		RelativePositionHalf,
		[Token(Token = "0x40000D2")]
		RelativePosition
	}

	[Token(Token = "0x2000020")]
	public enum PerfomanceEnum
	{
		[Token(Token = "0x40000D4")]
		UltraRealTime,
		[Token(Token = "0x40000D5")]
		High,
		[Token(Token = "0x40000D6")]
		Low
	}

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TurbulenceStrenght;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool TurbulenceByTime;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve TurbulenceStrengthByTime;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 Frequency;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 OffsetSpeed;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 Amplitude;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 GlobalForce;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public MoveMethodEnum MoveMethod;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public PerfomanceEnum Perfomance;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float lastStopTime;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 currentOffset;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float deltaTime;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float deltaTimeLastUpdateOffset;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem.Particle[] particleArray;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ParticleSystem particleSys;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float time;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private int currentSplit;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float fpsTime;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private int FPS;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int splitUpdate;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private PerfomanceEnum perfomanceOldSettings;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool skipFrame;

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x926538", Offset = "0x926538", VA = "0x926538")]
	private void Start()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x92668C", Offset = "0x92668C", VA = "0x92668C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x92661C", Offset = "0x92661C", VA = "0x92661C")]
	private void UpdatePerfomanceSettings()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x9267D8", Offset = "0x9267D8", VA = "0x9267D8")]
	private void UpdateTurbulence()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x926D84", Offset = "0x926D84", VA = "0x926D84")]
	public WFX_Turbulence()
	{
	}
}
[Token(Token = "0x2000021")]
public class jiggleBones : MonoBehaviour
{
	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool debugMode;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform targetBone;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 dynamicPos;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 boneAxis;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float targetDistance;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float bStiffness;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float bMass;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float bDamping;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float bGravity;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 force;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 acc;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 vel;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool SquashAndStretch;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float sideStretch;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float frontStretch;

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x926DEC", Offset = "0x926DEC", VA = "0x926DEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x926E64", Offset = "0x926E64", VA = "0x926E64")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x9272C8", Offset = "0x9272C8", VA = "0x9272C8")]
	public jiggleBones()
	{
	}
}
[Token(Token = "0x2000022")]
[AddComponentMenu("Camera-Control/3dsMax Camera Style")]
public class maxCamera : MonoBehaviour
{
	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 targetOffset;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float distance;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxDistance;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float minDistance;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float xSpeed;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ySpeed;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int yMinLimit;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int yMaxLimit;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int zoomRate;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float panSpeed;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float zoomDampening;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float xDeg;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float yDeg;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float currentDistance;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float desiredDistance;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Quaternion currentRotation;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Quaternion desiredRotation;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Quaternion rotation;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 position;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x9272FC", Offset = "0x9272FC", VA = "0x9272FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x9277E0", Offset = "0x9277E0", VA = "0x9277E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x927300", Offset = "0x927300", VA = "0x927300")]
	public void Init()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x9277E4", Offset = "0x9277E4", VA = "0x9277E4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x927CE8", Offset = "0x927CE8", VA = "0x927CE8")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x927D24", Offset = "0x927D24", VA = "0x927D24")]
	public maxCamera()
	{
	}
}
[Token(Token = "0x2000023")]
public class FallDownParticlesController : MonoBehaviour
{
	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ParticleSystem fallDownParticles;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject positionAdjuster;

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x927D60", Offset = "0x927D60", VA = "0x927D60")]
	public void OnFallDown()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x927E28", Offset = "0x927E28", VA = "0x927E28")]
	public FallDownParticlesController()
	{
	}
}
[Token(Token = "0x2000024")]
public class GroundChecker : MonoBehaviour
{
	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Results")]
	public float groundSlopeAngle;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 groundSlopeDir;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Tests")]
	public float testSlopeValue;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool debugV3;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string pointName;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Settings")]
	private RouteController routeController;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform zombieBody;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CharacterController controller;

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x927E30", Offset = "0x927E30", VA = "0x927E30")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x927EFC", Offset = "0x927EFC", VA = "0x927EFC")]
	public void UpdatePoint(RoutePoint point)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x927F3C", Offset = "0x927F3C", VA = "0x927F3C")]
	private void AdjustRotation(float slope)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x928074", Offset = "0x928074", VA = "0x928074")]
	public GroundChecker()
	{
	}
}
[Token(Token = "0x2000025")]
public class RemoveComponentName : MonoBehaviour
{
	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x9280D4", Offset = "0x9280D4", VA = "0x9280D4")]
	public void RemoveComponents()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x928244", Offset = "0x928244", VA = "0x928244")]
	public RemoveComponentName()
	{
	}
}
[Token(Token = "0x2000026")]
public class Achivements : MonoBehaviourPun
{
	[Token(Token = "0x2000027")]
	private enum FiredArrowsAchivementValues
	{
		[Token(Token = "0x400010B")]
		Tier1 = 100,
		[Token(Token = "0x400010C")]
		Tier2 = 1000,
		[Token(Token = "0x400010D")]
		Tier3 = 5000,
		[Token(Token = "0x400010E")]
		Tier4 = 20000,
		[Token(Token = "0x400010F")]
		Tier5 = 50000
	}

	[Token(Token = "0x2000028")]
	private enum OrcsKilledAchivementValues
	{
		[Token(Token = "0x4000111")]
		Tier1 = 50,
		[Token(Token = "0x4000112")]
		Tier2 = 500,
		[Token(Token = "0x4000113")]
		Tier3 = 2500,
		[Token(Token = "0x4000114")]
		Tier4 = 10000,
		[Token(Token = "0x4000115")]
		Tier5 = 25000,
		[Token(Token = "0x4000116")]
		Tier6 = 50000
	}

	[Token(Token = "0x2000029")]
	private enum HeadShotsAchivementValues
	{
		[Token(Token = "0x4000118")]
		Tier1 = 50,
		[Token(Token = "0x4000119")]
		Tier2 = 500,
		[Token(Token = "0x400011A")]
		Tier3 = 2500,
		[Token(Token = "0x400011B")]
		Tier4 = 10000,
		[Token(Token = "0x400011C")]
		Tier5 = 25000,
		[Token(Token = "0x400011D")]
		Tier6 = 50000
	}

	[Token(Token = "0x200002A")]
	private enum WindowShotsAchivementValues
	{
		[Token(Token = "0x400011F")]
		Tier1 = 50,
		[Token(Token = "0x4000120")]
		Tier2 = 100,
		[Token(Token = "0x4000121")]
		Tier3 = 1000,
		[Token(Token = "0x4000122")]
		Tier4 = 20000
	}

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool ClearStats;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool ClearAchivements;

	[Token(Token = "0x4000106")]
	private const string FiredArrowsKey = "FiredArrows";

	[Token(Token = "0x4000107")]
	private const string OrcKilledKey = "KilledOrcs";

	[Token(Token = "0x4000108")]
	private const string HeadShotsKey = "HeadShots";

	[Token(Token = "0x4000109")]
	private const string WindowShotsKey = "WindowShots";

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x92824C", Offset = "0x92824C", VA = "0x92824C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x9284C4", Offset = "0x9284C4", VA = "0x9284C4")]
	private void OnEnemyGotKilled(Player killer, EnemyInfo enemyInfo)
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x928624", Offset = "0x928624", VA = "0x928624")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x928628", Offset = "0x928628", VA = "0x928628")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x9288F4", Offset = "0x9288F4", VA = "0x9288F4")]
	public void RegisterFiredArrow()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x928C6C", Offset = "0x928C6C", VA = "0x928C6C")]
	[PunRPC]
	public void RpcRegisterKilledOrc()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x928FE4", Offset = "0x928FE4", VA = "0x928FE4")]
	public void RegisterHeadShot()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x92935C", Offset = "0x92935C", VA = "0x92935C")]
	public void RegisterWindowShot()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x9296D4", Offset = "0x9296D4", VA = "0x9296D4")]
	private int GetStat(string statName)
	{
		return default(int);
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x9288A4", Offset = "0x9288A4", VA = "0x9288A4")]
	public void StoreAllStats()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x9296DC", Offset = "0x9296DC", VA = "0x9296DC")]
	public Achivements()
	{
	}
}
[Token(Token = "0x200002B")]
public static class Game
{
	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Achivements achivementController;

	[Token(Token = "0x1700000F")]
	public static Achivements AchivementController
	{
		[Token(Token = "0x60000B0")]
		[Address(RVA = "0x9296E4", Offset = "0x9296E4", VA = "0x9296E4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x9297B8", Offset = "0x9297B8", VA = "0x9297B8")]
		private set
		{
		}
	}
}
[Token(Token = "0x200002C")]
[DisallowMultipleComponent]
[RequireComponent(typeof(MeshRenderer))]
[ExecuteInEditMode]
public class AGGlobalSettings : MonoBehaviour
{
	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Trees Settings")]
	[Range(0f, 2f)]
	public float AOIntensity;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 2f)]
	public float TranslucencyIntensity;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TranslucencyDistance;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Space(20f)]
	public bool EnableTintColor;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float TintToggle;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D TintNoiseTexture;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0.001f, 10f)]
	public float TintNoiseTile;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0.001f, 10f)]
	public float TintNoiseContrast;

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x929810", Offset = "0x929810", VA = "0x929810")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x929888", Offset = "0x929888", VA = "0x929888")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x9299DC", Offset = "0x9299DC", VA = "0x9299DC")]
	public AGGlobalSettings()
	{
	}
}
[Token(Token = "0x200002D")]
[DisallowMultipleComponent]
[RequireComponent(typeof(MeshRenderer))]
[ExecuteInEditMode]
public class AGGlobalSnow : MonoBehaviour
{
	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Global Wind")]
	public bool EnableGlobalWind;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float WindToggle;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float WindGrassAmplitude;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 10f)]
	public float WindGrassSpeed;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 3f)]
	public float WindGrassScale;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 1f)]
	public float WindGrassStiffness;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Tint Color")]
	public bool EnableTintColor;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float TintToggle;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture2D TintNoiseTexture;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Range(0.001f, 10f)]
	public float TintNoiseTile;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Range(0.001f, 10f)]
	public float TintNoiseContrast;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Global Snow for Props")]
	[Range(0f, 1f)]
	public float SnowPropsIntensity;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Range(0f, 1f)]
	public float SnowPropsOffset;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Range(0f, 1f)]
	public float SnowPropsContrast;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Header("Global Snow Height")]
	public float SnowMinimumHeight;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Range(0f, 30f)]
	public float SnowFadeHeight;

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x929A00", Offset = "0x929A00", VA = "0x929A00")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x929A78", Offset = "0x929A78", VA = "0x929A78")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x929D2C", Offset = "0x929D2C", VA = "0x929D2C")]
	public AGGlobalSnow()
	{
	}
}
[Token(Token = "0x200002E")]
[ExecuteInEditMode]
[DisallowMultipleComponent]
[RequireComponent(typeof(MeshRenderer))]
public class AGGlobalSnowGrass : MonoBehaviour
{
	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 1f)]
	[Header("Global Snow for Grass")]
	public float SnowGrassIntensity;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 1f)]
	public float SnowGrassOffset;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float SnowGrassContrast;

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x929D68", Offset = "0x929D68", VA = "0x929D68")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x929DE0", Offset = "0x929DE0", VA = "0x929DE0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x929E7C", Offset = "0x929E7C", VA = "0x929E7C")]
	public AGGlobalSnowGrass()
	{
	}
}
[Token(Token = "0x200002F")]
[RequireComponent(typeof(MeshRenderer))]
[ExecuteInEditMode]
[DisallowMultipleComponent]
public class AGGlobalSnowHeight : MonoBehaviour
{
	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Global Snow Height")]
	public float SnowMinimumHeight;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 30f)]
	public float SnowFadeHeight;

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x929E94", Offset = "0x929E94", VA = "0x929E94")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x929F0C", Offset = "0x929F0C", VA = "0x929F0C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x929F84", Offset = "0x929F84", VA = "0x929F84")]
	public AGGlobalSnowHeight()
	{
	}
}
[Token(Token = "0x2000030")]
[ExecuteInEditMode]
[DisallowMultipleComponent]
[RequireComponent(typeof(MeshRenderer))]
public class AGGlobalSnowProps : MonoBehaviour
{
	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Global Snow for Props")]
	[Range(0f, 1f)]
	public float SnowPropsIntensity;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 1f)]
	public float SnowPropsOffset;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float SnowPropsContrast;

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x929F98", Offset = "0x929F98", VA = "0x929F98")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x92A010", Offset = "0x92A010", VA = "0x92A010")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x92A0AC", Offset = "0x92A0AC", VA = "0x92A0AC")]
	public AGGlobalSnowProps()
	{
	}
}
[Token(Token = "0x2000031")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshRenderer))]
public class AGGlobalSnowTree : MonoBehaviour
{
	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 1f)]
	[Header("Global Snow for Trees")]
	public float SnowTreeIntensity;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 1f)]
	public float SnowTreeOffset;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float SnowTreeContrast;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 1f)]
	public float SnowTreeArrowDirection;

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x92A0C4", Offset = "0x92A0C4", VA = "0x92A0C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x92A13C", Offset = "0x92A13C", VA = "0x92A13C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x92A204", Offset = "0x92A204", VA = "0x92A204")]
	public AGGlobalSnowTree()
	{
	}
}
[Token(Token = "0x2000032")]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshRenderer))]
[DisallowMultipleComponent]
public class AGGlobalWind : MonoBehaviour
{
	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableGlobalWind;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float WindToggle;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float WindTreeAmplitude;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 10f)]
	public float WindTreeSpeed;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 3f)]
	public float WindTreeScale;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 1f)]
	public float WindTreeStiffness;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 1f)]
	[Space(20f)]
	public float WindGrassAmplitude;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 10f)]
	public float WindGrassSpeed;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 3f)]
	public float WindGrassScale;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0f, 1f)]
	public float WindGrassStiffness;

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x92A214", Offset = "0x92A214", VA = "0x92A214")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x92A28C", Offset = "0x92A28C", VA = "0x92A28C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x92A47C", Offset = "0x92A47C", VA = "0x92A47C")]
	public AGGlobalWind()
	{
	}
}
[Token(Token = "0x2000033")]
public class ArrowResetController : MonoBehaviourPun, IResetable
{
	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x92A4A0", Offset = "0x92A4A0", VA = "0x92A4A0")]
	public void DestroyYourself()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x92A534", Offset = "0x92A534", VA = "0x92A534", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x92A55C", Offset = "0x92A55C", VA = "0x92A55C")]
	public ArrowResetController()
	{
	}
}
[Token(Token = "0x2000034")]
public class ArrowSpellTrailEnabler : MonoBehaviour, IResetable
{
	[Token(Token = "0x2000035")]
	[CompilerGenerated]
	private sealed class <SetTrailLogic>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ArrowSpellTrailEnabler <>4__this;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject trail;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float delay;

		[Token(Token = "0x17000010")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000D6")]
			[Address(RVA = "0x92A9EC", Offset = "0x92A9EC", VA = "0x92A9EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000011")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000D8")]
			[Address(RVA = "0x92AA34", Offset = "0x92AA34", VA = "0x92AA34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x92A82C", Offset = "0x92A82C", VA = "0x92A82C")]
		[DebuggerHidden]
		public <SetTrailLogic>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60000D4")]
		[Address(RVA = "0x92A900", Offset = "0x92A900", VA = "0x92A900", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x92A904", Offset = "0x92A904", VA = "0x92A904", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000D7")]
		[Address(RVA = "0x92A9F4", Offset = "0x92A9F4", VA = "0x92A9F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject iceTrail;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject fireTrail;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject otherTrail;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ArrowFlyController ArrowFlyController;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject activeTrail;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float delay;

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x92A564", Offset = "0x92A564", VA = "0x92A564")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x92A63C", Offset = "0x92A63C", VA = "0x92A63C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x92A714", Offset = "0x92A714", VA = "0x92A714")]
	public void EnableIceTrailLogic()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x92A7DC", Offset = "0x92A7DC", VA = "0x92A7DC")]
	public void EnableFireTrailLogic()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x92A804", Offset = "0x92A804", VA = "0x92A804")]
	public void EnableOtherTrailLogic()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x92A73C", Offset = "0x92A73C", VA = "0x92A73C")]
	[IteratorStateMachine(typeof(<SetTrailLogic>d__11))]
	private IEnumerator SetTrailLogic(float delay, GameObject trail)
	{
		return null;
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x92A854", Offset = "0x92A854", VA = "0x92A854")]
	private void StopTrail()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x92A8E8", Offset = "0x92A8E8", VA = "0x92A8E8", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x92A8EC", Offset = "0x92A8EC", VA = "0x92A8EC")]
	public ArrowSpellTrailEnabler()
	{
	}
}
[Token(Token = "0x2000036")]
public class ArrowVisibilityEnabler : MonoBehaviour
{
	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Renderer arrowRenderer;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TrailRendererEnabler trailRendererEnabler;

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x92AA3C", Offset = "0x92AA3C", VA = "0x92AA3C")]
	public void EnableArrowVisiblity(bool isEnabled)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x92AA80", Offset = "0x92AA80", VA = "0x92AA80")]
	public void EnableArrowTrail(bool isEnabled)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x92AAA0", Offset = "0x92AAA0", VA = "0x92AAA0")]
	public ArrowVisibilityEnabler()
	{
	}
}
[Token(Token = "0x2000037")]
public class AttachedItemController : MonoBehaviourPun
{
	[Token(Token = "0x2000038")]
	[CompilerGenerated]
	private sealed class <ReturnToRackAfterThrow>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttachedItemController <>4__this;

		[Token(Token = "0x17000013")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000EB")]
			[Address(RVA = "0x92B188", Offset = "0x92B188", VA = "0x92B188", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000ED")]
			[Address(RVA = "0x92B1D0", Offset = "0x92B1D0", VA = "0x92B1D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000E8")]
		[Address(RVA = "0x92B044", Offset = "0x92B044", VA = "0x92B044")]
		[DebuggerHidden]
		public <ReturnToRackAfterThrow>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x92B11C", Offset = "0x92B11C", VA = "0x92B11C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000EA")]
		[Address(RVA = "0x92B120", Offset = "0x92B120", VA = "0x92B120", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000EC")]
		[Address(RVA = "0x92B190", Offset = "0x92B190", VA = "0x92B190", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ItemGrabController itemGrabController;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform mainItemTransform;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool isThrowAble;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float timeToReturnAfterThrow;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform rightHandleOnViveControllerPlacement;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform rightHandleOnOculusControllerPlacement;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform leftHandleOnViveControllerPlacement;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform leftHandleOnOculusControllerPlacement;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 defaultPosition;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform defaultParent;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Quaternion defaultRotation;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool isItemRelased;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Action OnItemThrow;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Action OnReturnAfterThrow;

	[Token(Token = "0x17000012")]
	private WaitForSeconds waitForReturnToRackAfterThrow
	{
		[Token(Token = "0x60000DC")]
		[Address(RVA = "0x92AAA8", Offset = "0x92AAA8", VA = "0x92AAA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x92AB18", Offset = "0x92AB18", VA = "0x92AB18")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x92ACAC", Offset = "0x92ACAC", VA = "0x92ACAC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x92AE40", Offset = "0x92AE40", VA = "0x92AE40")]
	private void SetWeaponTaken()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x92AE78", Offset = "0x92AE78", VA = "0x92AE78")]
	private void SetWeaponRelase()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x92AF80", Offset = "0x92AF80", VA = "0x92AF80")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x92AFF0", Offset = "0x92AFF0", VA = "0x92AFF0")]
	private void SetStartValues()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x92AED4", Offset = "0x92AED4", VA = "0x92AED4")]
	public void ReturnToRack()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x92AF0C", Offset = "0x92AF0C", VA = "0x92AF0C")]
	[IteratorStateMachine(typeof(<ReturnToRackAfterThrow>d__23))]
	private IEnumerator ReturnToRackAfterThrow()
	{
		return null;
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x92AE44", Offset = "0x92AE44", VA = "0x92AE44")]
	private void SetPlayerValues()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x92B06C", Offset = "0x92B06C", VA = "0x92B06C")]
	private void SetItemPlace()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x92B10C", Offset = "0x92B10C", VA = "0x92B10C")]
	public AttachedItemController()
	{
	}
}
[Token(Token = "0x2000039")]
public class AudioAnalyzer : MonoBehaviour
{
	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioSource[] audioSourceList;

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x92B1D8", Offset = "0x92B1D8", VA = "0x92B1D8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x92B1DC", Offset = "0x92B1DC", VA = "0x92B1DC")]
	public void ClearLog()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x92B1E0", Offset = "0x92B1E0", VA = "0x92B1E0")]
	public AudioAnalyzer()
	{
	}
}
[Token(Token = "0x200003A")]
public class AudioSourcePiroritySetter : MonoBehaviourPun
{
	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<AudioSource> audioSources;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int minePiority;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int othersPiority;

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x92B1E8", Offset = "0x92B1E8", VA = "0x92B1E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x92B360", Offset = "0x92B360", VA = "0x92B360")]
	public AudioSourcePiroritySetter()
	{
	}
}
[Token(Token = "0x200003B")]
public class AudioSourceSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GunFxController> gunFxControllers;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject picoAudioObject;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject normalAudioObject;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioSource picoSource;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioSource normalSource;

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x92B370", Offset = "0x92B370", VA = "0x92B370")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x92B540", Offset = "0x92B540", VA = "0x92B540")]
	public AudioSourceSwitcher()
	{
	}
}
[Token(Token = "0x200003C")]
public class AxeBeingUsedController : MonoBehaviour
{
	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isAxeBeingUsed;

	[Token(Token = "0x17000015")]
	public bool IsAxeBeingUsed
	{
		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x92B548", Offset = "0x92B548", VA = "0x92B548")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x92B550", Offset = "0x92B550", VA = "0x92B550")]
		set
		{
		}
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x92B55C", Offset = "0x92B55C", VA = "0x92B55C")]
	public AxeBeingUsedController()
	{
	}
}
[Token(Token = "0x200003D")]
public class AxeFreeze : MonoBehaviour
{
	[Token(Token = "0x400017A")]
	private const float iceBreakVolume = 0.15f;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int indexOfIceBreakSound;

	[Token(Token = "0x400017C")]
	private const float minPitch = 1f;

	[Token(Token = "0x400017D")]
	private const float maxPitch = 1.1f;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool isFreezing;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timer;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MeshRenderer axeRenderer;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material freezeMaterial;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float timeToRemoveParticles;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ExplodeObject explodeObject;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject explosionParticle;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private List<AudioClip> iceBreakSounds;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x92B564", Offset = "0x92B564", VA = "0x92B564")]
	public void Freeze(Transform parentObject)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x92B75C", Offset = "0x92B75C", VA = "0x92B75C")]
	public void PlayIceBreakSound()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x92B894", Offset = "0x92B894", VA = "0x92B894")]
	public AxeFreeze()
	{
	}
}
[Token(Token = "0x200003E")]
public class AxeHandle : MonoBehaviour
{
	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AxeController axeController;

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x92B8AC", Offset = "0x92B8AC", VA = "0x92B8AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x92B910", Offset = "0x92B910", VA = "0x92B910")]
	public AxeHandle()
	{
	}
}
[Token(Token = "0x200003F")]
public class AxeSnapper : MonoBehaviour
{
	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Collider realCollider;

	[Token(Token = "0x4000189")]
	private const float minAxeRotationY = 145f;

	[Token(Token = "0x400018A")]
	private const float maxAxeRotationY = 160f;

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x92B918", Offset = "0x92B918", VA = "0x92B918")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x92BB40", Offset = "0x92BB40", VA = "0x92BB40")]
	public AxeSnapper()
	{
	}
}
[Token(Token = "0x2000040")]
public class BeforeEnrollmentTournamentController : MonoBehaviourPun, ILobbyCallbacks
{
	[Token(Token = "0x2000041")]
	[CompilerGenerated]
	private sealed class <PlanningRoutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BeforeEnrollmentTournamentController <>4__this;

		[Token(Token = "0x17000017")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600011D")]
			[Address(RVA = "0x92D57C", Offset = "0x92D57C", VA = "0x92D57C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000018")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600011F")]
			[Address(RVA = "0x92D5C4", Offset = "0x92D5C4", VA = "0x92D5C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600011A")]
		[Address(RVA = "0x92C354", Offset = "0x92C354", VA = "0x92C354")]
		[DebuggerHidden]
		public <PlanningRoutine>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x600011B")]
		[Address(RVA = "0x92D430", Offset = "0x92D430", VA = "0x92D430", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600011C")]
		[Address(RVA = "0x92D434", Offset = "0x92D434", VA = "0x92D434", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600011E")]
		[Address(RVA = "0x92D584", Offset = "0x92D584", VA = "0x92D584", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000043")]
	[CompilerGenerated]
	private sealed class <JoinTournament>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BeforeEnrollmentTournamentController <>4__this;

		[Token(Token = "0x17000019")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000129")]
			[Address(RVA = "0x92DB7C", Offset = "0x92DB7C", VA = "0x92DB7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600012B")]
			[Address(RVA = "0x92DBC4", Offset = "0x92DBC4", VA = "0x92DBC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000126")]
		[Address(RVA = "0x92D08C", Offset = "0x92D08C", VA = "0x92D08C")]
		[DebuggerHidden]
		public <JoinTournament>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0x92D7C4", Offset = "0x92D7C4", VA = "0x92D7C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000128")]
		[Address(RVA = "0x92D7C8", Offset = "0x92D7C8", VA = "0x92D7C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600012A")]
		[Address(RVA = "0x92DB84", Offset = "0x92DB84", VA = "0x92DB84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400018B")]
	public const string TournamentPhotonAppVersion = "Tournament";

	[Token(Token = "0x400018C")]
	private const float secondsDelayOfPlanningRoutine = 30f;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text tournamentStateComponent;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text tournamentTime;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject joinButton;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TournamentHostingDatesGatherer tournamentDatesGatherer;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject enrollmentWindow;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject disclaimerWindow;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private bool isUsingCurrentRegion;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool isAnyNextTournamentPlanned;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private CloudRegionCode regionCode;

	[Token(Token = "0x17000016")]
	public CloudRegionCode RegionCode
	{
		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x92BB48", Offset = "0x92BB48", VA = "0x92BB48")]
		get
		{
			return default(CloudRegionCode);
		}
		[Token(Token = "0x6000100")]
		[Address(RVA = "0x92BB50", Offset = "0x92BB50", VA = "0x92BB50")]
		set
		{
		}
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x92BB58", Offset = "0x92BB58", VA = "0x92BB58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x92C024", Offset = "0x92C024", VA = "0x92C024")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x92C0B4", Offset = "0x92C0B4", VA = "0x92C0B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x92C2C8", Offset = "0x92C2C8", VA = "0x92C2C8")]
	public static string GetNameOfRegion(CloudRegionCode value)
	{
		return null;
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x92BC04", Offset = "0x92BC04", VA = "0x92BC04")]
	private static CloudRegionCode GetCurrentRegionCode()
	{
		return default(CloudRegionCode);
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x92BFB0", Offset = "0x92BFB0", VA = "0x92BFB0")]
	[IteratorStateMachine(typeof(<PlanningRoutine>d__19))]
	private IEnumerator PlanningRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x92C37C", Offset = "0x92C37C", VA = "0x92C37C")]
	public void AcquireNextTournamentDateFromPlan()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x92C5D8", Offset = "0x92C5D8", VA = "0x92C5D8")]
	private static List<DateTime> GetNextTournamentDates(List<DateTime> tournamentDates)
	{
		return null;
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x92C434", Offset = "0x92C434", VA = "0x92C434")]
	private List<DateTime> GetTournamentDatesAvailableForCurrentRegion()
	{
		return null;
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x92C0B8", Offset = "0x92C0B8", VA = "0x92C0B8")]
	private void UpdateWindowContentBasedOnCurrentTime()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x92CAE8", Offset = "0x92CAE8", VA = "0x92CAE8")]
	private void OpenEnrollmentWindow()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x92CB20", Offset = "0x92CB20", VA = "0x92CB20")]
	private static string GetTextForTimeLeftForEnrollment()
	{
		return null;
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x92C6DC", Offset = "0x92C6DC", VA = "0x92C6DC")]
	private static string GetTextForTimeLeftToNextTournament()
	{
		return null;
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x92CF2C", Offset = "0x92CF2C", VA = "0x92CF2C")]
	public void ReactOnJoinButtonPressed()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x92CFDC", Offset = "0x92CFDC", VA = "0x92CFDC")]
	private void TryToConnectToRoom()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x92D018", Offset = "0x92D018", VA = "0x92D018")]
	[IteratorStateMachine(typeof(<JoinTournament>d__29))]
	private IEnumerator JoinTournament()
	{
		return null;
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x92D0B4", Offset = "0x92D0B4", VA = "0x92D0B4")]
	private void TryToUpdateRegion()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x92D178", Offset = "0x92D178", VA = "0x92D178", Slot = "4")]
	public void OnJoinedLobby()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x92D2D0", Offset = "0x92D2D0", VA = "0x92D2D0", Slot = "5")]
	public void OnLeftLobby()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x92D2D4", Offset = "0x92D2D4", VA = "0x92D2D4", Slot = "6")]
	public void OnRoomListUpdate(List<RoomInfo> roomList)
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x92D2D8", Offset = "0x92D2D8", VA = "0x92D2D8", Slot = "7")]
	public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x92D2DC", Offset = "0x92D2DC", VA = "0x92D2DC")]
	public BeforeEnrollmentTournamentController()
	{
	}
}
[Token(Token = "0x2000044")]
public class RandomMaterial : MonoBehaviour
{
	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer targetRenderer;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] materials;

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x92DBCC", Offset = "0x92DBCC", VA = "0x92DBCC")]
	public void Start()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x92DBD0", Offset = "0x92DBD0", VA = "0x92DBD0")]
	public void ChangeMaterial()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x92DC28", Offset = "0x92DC28", VA = "0x92DC28")]
	public RandomMaterial()
	{
	}
}
[Token(Token = "0x2000045")]
public class UnluckDistanceDisabler : MonoBehaviour
{
	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int _distanceDisable;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform _distanceFrom;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool _distanceFromMainCam;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _disableCheckInterval;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _enableCheckInterval;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool _disableOnStart;

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x92DC30", Offset = "0x92DC30", VA = "0x92DC30")]
	public void Start()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x92DD3C", Offset = "0x92DD3C", VA = "0x92DD3C")]
	public void DisableOnStart()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x92DD70", Offset = "0x92DD70", VA = "0x92DD70")]
	public void CheckDisable()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x92DE3C", Offset = "0x92DE3C", VA = "0x92DE3C")]
	public void CheckEnable()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x92DF08", Offset = "0x92DF08", VA = "0x92DF08")]
	public UnluckDistanceDisabler()
	{
	}
}
[Token(Token = "0x2000046")]
public class FlockChild : MonoBehaviour
{
	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public FlockController _spawner;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public Vector3 _wayPoint;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _speed;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public bool _dived;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public float _stuckCounter;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public float _damping;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public bool _soar;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[HideInInspector]
	public bool _landing;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public float _targetSpeed;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public bool _move;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject _model;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform _modelT;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public float _avoidValue;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[HideInInspector]
	public float _avoidDistance;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _soarTimer;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool _instantiated;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int _updateNextSeed;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int _updateSeed;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[HideInInspector]
	public bool _avoid;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform _thisT;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 _landingPosOffset;

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x92DF24", Offset = "0x92DF24", VA = "0x92DF24")]
	public void Start()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x92E65C", Offset = "0x92E65C", VA = "0x92E65C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x92ED6C", Offset = "0x92ED6C", VA = "0x92ED6C")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x92EDA0", Offset = "0x92EDA0", VA = "0x92EDA0")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x92E008", Offset = "0x92E008", VA = "0x92E008")]
	public void FindRequiredComponents()
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x92E304", Offset = "0x92E304", VA = "0x92E304")]
	public void RandomizeStartAnimationFrame()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x92E608", Offset = "0x92E608", VA = "0x92E608")]
	public void InitAvoidanceValues()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x92E208", Offset = "0x92E208", VA = "0x92E208")]
	public void SetRandomScale()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x92E6B8", Offset = "0x92E6B8", VA = "0x92E6B8")]
	public void SoarTimeLimit()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x92E710", Offset = "0x92E710", VA = "0x92E710")]
	public void CheckForDistanceToWaypoint()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x92E820", Offset = "0x92E820", VA = "0x92E820")]
	public void RotationBasedOnWaypointOrAvoidance()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x92F090", Offset = "0x92F090", VA = "0x92F090")]
	public bool Avoidance()
	{
		return default(bool);
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x92EB14", Offset = "0x92EB14", VA = "0x92EB14")]
	public void LimitRotationOfModel()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x92E160", Offset = "0x92E160", VA = "0x92E160")]
	public void Wander(float delay)
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x92F60C", Offset = "0x92F60C", VA = "0x92F60C")]
	public void SetRandomMode()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x92EE4C", Offset = "0x92EE4C", VA = "0x92EE4C")]
	public void Flap()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x92E244", Offset = "0x92E244", VA = "0x92E244")]
	public Vector3 findWaypoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x92F6CC", Offset = "0x92F6CC", VA = "0x92F6CC")]
	public void Soar()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x92F75C", Offset = "0x92F75C", VA = "0x92F75C")]
	public void Dive()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x92FAF8", Offset = "0x92FAF8", VA = "0x92FAF8")]
	public void animationSpeed()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x92FE3C", Offset = "0x92FE3C", VA = "0x92FE3C")]
	public FlockChild()
	{
	}
}
[Token(Token = "0x2000047")]
[RequireComponent(typeof(AudioSource))]
public class FlockChildSound : MonoBehaviour
{
	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] _idleSounds;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float _idleSoundRandomChance;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] _flightSounds;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _flightSoundRandomChance;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] _scareSounds;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float _pitchMin;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float _pitchMax;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float _volumeMin;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float _volumeMax;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private FlockChild _flockChild;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioSource _audio;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool _hasLanded;

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x92FE60", Offset = "0x92FE60", VA = "0x92FE60")]
	public void Start()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x92FF78", Offset = "0x92FF78", VA = "0x92FF78")]
	public void PlayRandomSound()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x93017C", Offset = "0x93017C", VA = "0x93017C")]
	public void ScareSound()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x930278", Offset = "0x930278", VA = "0x930278")]
	public FlockChildSound()
	{
	}
}
[Token(Token = "0x2000048")]
public class FlockController : MonoBehaviour
{
	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FlockChild _childPrefab;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int _childAmount;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool _slowSpawn;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float _spawnSphere;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _spawnSphereHeight;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _spawnSphereDepth;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float _minSpeed;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float _maxSpeed;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float _minScale;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float _maxScale;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float _soarFrequency;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string _soarAnimation;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string _flapAnimation;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string _idleAnimation;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float _diveValue;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float _diveFrequency;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float _minDamping;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float _maxDamping;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float _waypointDistance;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float _minAnimationSpeed;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float _maxAnimationSpeed;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float _randomPositionTimer;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float _positionSphere;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float _positionSphereHeight;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float _positionSphereDepth;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool _childTriggerPos;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	public bool _forceChildWaypoints;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float _forcedRandomDelay;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool _flatFly;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	public bool _flatSoar;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
	public bool _birdAvoid;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public int _birdAvoidHorizontalForce;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool _birdAvoidDown;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	public bool _birdAvoidUp;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public int _birdAvoidVerticalForce;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float _birdAvoidDistanceMax;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float _birdAvoidDistanceMin;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float _soarMaxTime;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public LayerMask _avoidanceMask;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<FlockChild> _roamers;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Vector3 _posBuffer;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public int _updateDivisor;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float _newDelta;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public int _updateCounter;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float _activeChildren;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public bool _groupChildToNewTransform;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform _groupTransform;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public string _groupName;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool _groupChildToFlock;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public Vector3 _startPosOffset;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Transform _thisT;

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x93029C", Offset = "0x93029C", VA = "0x93029C")]
	public void Start()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x930394", Offset = "0x930394", VA = "0x930394")]
	public void AddChild(int amount)
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x930648", Offset = "0x930648", VA = "0x930648")]
	public void AddChildToParent(Transform obj)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x930698", Offset = "0x930698", VA = "0x930698")]
	public void RemoveChild(int amount)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x9307A0", Offset = "0x9307A0", VA = "0x9307A0")]
	public void Update()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x9304E8", Offset = "0x9304E8", VA = "0x9304E8")]
	public void InstantiateGroup()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x930804", Offset = "0x930804", VA = "0x930804")]
	public void UpdateChildAmount()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x930894", Offset = "0x930894", VA = "0x930894")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x92EF20", Offset = "0x92EF20", VA = "0x92EF20")]
	public void SetFlockRandomPosition()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x930A7C", Offset = "0x930A7C", VA = "0x930A7C")]
	public void destroyBirds()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x930B88", Offset = "0x930B88", VA = "0x930B88")]
	public FlockController()
	{
	}
}
[Token(Token = "0x2000049")]
public class FlockScare : MonoBehaviour
{
	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LandingSpotController[] landingSpotControllers;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float scareInterval;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float distanceToScare;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int checkEveryNthLandingSpot;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int InvokeAmounts;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int lsc;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int ls;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LandingSpotController currentController;

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x930CEC", Offset = "0x930CEC", VA = "0x930CEC")]
	private void CheckProximityToLandingSpots()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x930DBC", Offset = "0x930DBC", VA = "0x930DBC")]
	private void IterateLandingSpots()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x930E70", Offset = "0x930E70", VA = "0x930E70")]
	private bool CheckDistanceToLandingSpot(LandingSpotController lc)
	{
		return default(bool);
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x930FB4", Offset = "0x930FB4", VA = "0x930FB4")]
	private void Invoker()
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x93103C", Offset = "0x93103C", VA = "0x93103C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x9310B0", Offset = "0x9310B0", VA = "0x9310B0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x9310FC", Offset = "0x9310FC", VA = "0x9310FC")]
	public FlockScare()
	{
	}
}
[Token(Token = "0x200004A")]
public class FlockWaypointTrigger : MonoBehaviour
{
	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float _timer;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FlockChild _flockChild;

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x931114", Offset = "0x931114", VA = "0x931114")]
	public void Start()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x93120C", Offset = "0x93120C", VA = "0x93120C")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x93122C", Offset = "0x93122C", VA = "0x93122C")]
	public FlockWaypointTrigger()
	{
	}
}
[Token(Token = "0x200004B")]
public class LandingButtons : MonoBehaviour
{
	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LandingSpotController _landingSpotController;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FlockController _flockController;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float hSliderValue;

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x93123C", Offset = "0x93123C", VA = "0x93123C")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x9317B8", Offset = "0x9317B8", VA = "0x9317B8")]
	public LandingButtons()
	{
	}
}
[Token(Token = "0x200004C")]
public class LandingSpot : MonoBehaviour
{
	[Token(Token = "0x200004D")]
	[CompilerGenerated]
	private sealed class <GetFlockChild>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minDelay;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxDelay;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LandingSpot <>4__this;

		[Token(Token = "0x1700001B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000170")]
			[Address(RVA = "0x9332D8", Offset = "0x9332D8", VA = "0x9332D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000172")]
			[Address(RVA = "0x933320", Offset = "0x933320", VA = "0x933320", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600016D")]
		[Address(RVA = "0x93258C", Offset = "0x93258C", VA = "0x93258C")]
		[DebuggerHidden]
		public <GetFlockChild>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600016E")]
		[Address(RVA = "0x932BA4", Offset = "0x932BA4", VA = "0x932BA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600016F")]
		[Address(RVA = "0x932BA8", Offset = "0x932BA8", VA = "0x932BA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000171")]
		[Address(RVA = "0x9332E0", Offset = "0x9332E0", VA = "0x9332E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public FlockChild landingChild;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public bool landing;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int lerpCounter;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public LandingSpotController _controller;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _idle;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform _thisT;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool _gotcha;

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x9317C8", Offset = "0x9317C8", VA = "0x9317C8")]
	public void Start()
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x93198C", Offset = "0x93198C", VA = "0x93198C")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x931D7C", Offset = "0x931D7C", VA = "0x931D7C")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x932520", Offset = "0x932520", VA = "0x932520")]
	public void StraightenBird()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x93235C", Offset = "0x93235C", VA = "0x93235C")]
	public void RotateBird()
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x931904", Offset = "0x931904", VA = "0x931904")]
	[IteratorStateMachine(typeof(<GetFlockChild>d__12))]
	public IEnumerator GetFlockChild(float minDelay, float maxDelay)
	{
		return null;
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x9325B4", Offset = "0x9325B4", VA = "0x9325B4")]
	public void InstantLand()
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x932904", Offset = "0x932904", VA = "0x932904")]
	public void ReleaseFlockChild()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x932B9C", Offset = "0x932B9C", VA = "0x932B9C")]
	public LandingSpot()
	{
	}
}
[Token(Token = "0x200004E")]
public class LandingSpotController : MonoBehaviour
{
	[Token(Token = "0x200004F")]
	[CompilerGenerated]
	private sealed class <InstantLandOnStart>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LandingSpotController <>4__this;

		[Token(Token = "0x1700001D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600017D")]
			[Address(RVA = "0x933960", Offset = "0x933960", VA = "0x933960", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600017F")]
			[Address(RVA = "0x9339A8", Offset = "0x9339A8", VA = "0x9339A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600017A")]
		[Address(RVA = "0x93373C", Offset = "0x93373C", VA = "0x93373C")]
		[DebuggerHidden]
		public <InstantLandOnStart>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x600017B")]
		[Address(RVA = "0x9337DC", Offset = "0x9337DC", VA = "0x9337DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600017C")]
		[Address(RVA = "0x9337E0", Offset = "0x9337E0", VA = "0x9337E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600017E")]
		[Address(RVA = "0x933968", Offset = "0x933968", VA = "0x933968", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000050")]
	[CompilerGenerated]
	private sealed class <InstantLand>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LandingSpotController <>4__this;

		[Token(Token = "0x1700001F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000183")]
			[Address(RVA = "0x933B34", Offset = "0x933B34", VA = "0x933B34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000020")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000185")]
			[Address(RVA = "0x933B7C", Offset = "0x933B7C", VA = "0x933B7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000180")]
		[Address(RVA = "0x933764", Offset = "0x933764", VA = "0x933764")]
		[DebuggerHidden]
		public <InstantLand>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000181")]
		[Address(RVA = "0x9339B0", Offset = "0x9339B0", VA = "0x9339B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000182")]
		[Address(RVA = "0x9339B4", Offset = "0x9339B4", VA = "0x9339B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000184")]
		[Address(RVA = "0x933B3C", Offset = "0x933B3C", VA = "0x933B3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool _randomRotate;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 _autoCatchDelay;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector2 _autoDismountDelay;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _maxBirdDistance;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _minBirdDistance;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool _takeClosest;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FlockController _flock;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool _landOnStart;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool _soarLand;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool _onlyBirdsAbove;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float _landingSpeedModifier;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float _landingTurnSpeedModifier;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform _featherPS;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform _thisT;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int _activeLandingSpots;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float _snapLandDistance;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float _landedRotateSpeed;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float _gizmoSize;

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x933328", Offset = "0x933328", VA = "0x933328")]
	public void Start()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x930FA8", Offset = "0x930FA8", VA = "0x930FA8")]
	public void ScareAll()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x9335F4", Offset = "0x9335F4", VA = "0x9335F4")]
	public void ScareAll(float minDelay, float maxDelay)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x931614", Offset = "0x931614", VA = "0x931614")]
	public void LandAll()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x933570", Offset = "0x933570", VA = "0x933570")]
	[IteratorStateMachine(typeof(<InstantLandOnStart>d__22))]
	public IEnumerator InstantLandOnStart(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x931734", Offset = "0x931734", VA = "0x931734")]
	[IteratorStateMachine(typeof(<InstantLand>d__23))]
	public IEnumerator InstantLand(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x93378C", Offset = "0x93378C", VA = "0x93378C")]
	public LandingSpotController()
	{
	}
}
[Token(Token = "0x2000051")]
public class DemoGUI : MonoBehaviour
{
	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Prefabs;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentNomber;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject currentInstance;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x933B84", Offset = "0x933B84", VA = "0x933B84")]
	private void Start()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x933CF8", Offset = "0x933CF8", VA = "0x933CF8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x933EF4", Offset = "0x933EF4", VA = "0x933EF4")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x9340A8", Offset = "0x9340A8", VA = "0x9340A8")]
	public DemoGUI()
	{
	}
}
[Token(Token = "0x2000052")]
public class DemoReactivator : MonoBehaviour
{
	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TimeDelayToReactivate;

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x93411C", Offset = "0x93411C", VA = "0x93411C")]
	private void Start()
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x934170", Offset = "0x934170", VA = "0x934170")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x934238", Offset = "0x934238", VA = "0x934238")]
	public DemoReactivator()
	{
	}
}
[Token(Token = "0x2000053")]
internal class UVTextureAnimator : MonoBehaviour
{
	[Token(Token = "0x2000054")]
	[CompilerGenerated]
	private sealed class <UpdateCorutine>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UVTextureAnimator <>4__this;

		[Token(Token = "0x17000021")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600019A")]
			[Address(RVA = "0x9349AC", Offset = "0x9349AC", VA = "0x9349AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000022")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600019C")]
			[Address(RVA = "0x9349F4", Offset = "0x9349F4", VA = "0x9349F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000197")]
		[Address(RVA = "0x9346C4", Offset = "0x9346C4", VA = "0x9346C4")]
		[DebuggerHidden]
		public <UpdateCorutine>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0x9348B0", Offset = "0x9348B0", VA = "0x9348B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000199")]
		[Address(RVA = "0x9348B4", Offset = "0x9348B4", VA = "0x9348B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600019B")]
		[Address(RVA = "0x9349B4", Offset = "0x9349B4", VA = "0x9349B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int Rows;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int Columns;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Fps;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int OffsetMat;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float StartDelay;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isInizialised;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int index;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int count;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int allCount;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float deltaFps;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool isVisible;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool isCorutineStarted;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer currentRenderer;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material instanceMaterial;

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x934248", Offset = "0x934248", VA = "0x934248")]
	private void Start()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x9342BC", Offset = "0x9342BC", VA = "0x9342BC")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x934514", Offset = "0x934514", VA = "0x934514")]
	private void Play()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x934618", Offset = "0x934618", VA = "0x934618")]
	private void PlayDelay()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x934638", Offset = "0x934638", VA = "0x934638")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x934668", Offset = "0x934668", VA = "0x934668")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x9345A4", Offset = "0x9345A4", VA = "0x9345A4")]
	[IteratorStateMachine(typeof(<UpdateCorutine>d__21))]
	private IEnumerator UpdateCorutine()
	{
		return null;
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x9346EC", Offset = "0x9346EC", VA = "0x9346EC")]
	private void UpdateCorutineFrame()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x9347F0", Offset = "0x9347F0", VA = "0x9347F0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x934890", Offset = "0x934890", VA = "0x934890")]
	public UVTextureAnimator()
	{
	}
}
[Token(Token = "0x2000055")]
public class BloomController : MonoBehaviour
{
	[Token(Token = "0x2000056")]
	public enum RenderingOptions
	{
		[Token(Token = "0x400024A")]
		StandardForward,
		[Token(Token = "0x400024B")]
		DefferedHDRBloom
	}

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RenderingOptions renderingOption;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Camera cameraToChange;

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x9349FC", Offset = "0x9349FC", VA = "0x9349FC")]
	public BloomController()
	{
	}
}
[Token(Token = "0x2000057")]
public class BowControllerContainer : MonoBehaviour
{
	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BowController bowController;

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x934A04", Offset = "0x934A04", VA = "0x934A04")]
	public BowControllerContainer()
	{
	}
}
[Token(Token = "0x2000058")]
public class BowModelInfo : MonoBehaviour
{
	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EquipmentItemKey equipmentItemKey;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> BowParts;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> BowAdditionalElements;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Bow;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject BowHandle;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MeshRenderer BowMesh;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SkinnedMeshRenderer BowSkinnedMesh;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material BowMaterial;

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x934A0C", Offset = "0x934A0C", VA = "0x934A0C")]
	internal void ShowModel()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x934D98", Offset = "0x934D98", VA = "0x934D98")]
	internal void HideModel()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x934FD8", Offset = "0x934FD8", VA = "0x934FD8")]
	public BowModelInfo()
	{
	}
}
[Token(Token = "0x2000059")]
public class ShopItem : MonoBehaviour
{
	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EquipmentItemType equipmentItemType;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public EquipmentItemKey equipmentItemKey;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isStandard;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform bowTransform;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform bowTransformInSet;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public BowModelInfo bowModelInfo;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HelmetModelInfo helmetModelInfo;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int cost;

	[Token(Token = "0x17000023")]
	public bool IsBought
	{
		[Token(Token = "0x60001A4")]
		[Address(RVA = "0x93517C", Offset = "0x93517C", VA = "0x93517C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000024")]
	public bool IsUsed
	{
		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x935228", Offset = "0x935228", VA = "0x935228")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x934FE0", Offset = "0x934FE0", VA = "0x934FE0")]
	public void ShowItemModel()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x935100", Offset = "0x935100", VA = "0x935100")]
	public void HideItemModel()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x935288", Offset = "0x935288", VA = "0x935288")]
	public ShopItem()
	{
	}
}
[Token(Token = "0x200005A")]
public class CatapultRockRemover : MonoBehaviourPun
{
	[Token(Token = "0x200005B")]
	[CompilerGenerated]
	private sealed class <DestroySelfOvertime>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CatapultRockRemover <>4__this;

		[Token(Token = "0x17000028")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001B1")]
			[Address(RVA = "0x9358AC", Offset = "0x9358AC", VA = "0x9358AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000029")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001B3")]
			[Address(RVA = "0x9358F4", Offset = "0x9358F4", VA = "0x9358F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x93555C", Offset = "0x93555C", VA = "0x93555C")]
		[DebuggerHidden]
		public <DestroySelfOvertime>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0x935660", Offset = "0x935660", VA = "0x935660", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0x935664", Offset = "0x935664", VA = "0x935664", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0x9358B4", Offset = "0x9358B4", VA = "0x9358B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200005C")]
	[CompilerGenerated]
	private sealed class <FadeOutParticles>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem particleSystem;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CatapultRockRemover <>4__this;

		[Token(Token = "0x1700002A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001B7")]
			[Address(RVA = "0x935AA0", Offset = "0x935AA0", VA = "0x935AA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001B9")]
			[Address(RVA = "0x935AE8", Offset = "0x935AE8", VA = "0x935AE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B4")]
		[Address(RVA = "0x935614", Offset = "0x935614", VA = "0x935614")]
		[DebuggerHidden]
		public <FadeOutParticles>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60001B5")]
		[Address(RVA = "0x9358FC", Offset = "0x9358FC", VA = "0x9358FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x935900", Offset = "0x935900", VA = "0x935900", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x935AA8", Offset = "0x935AA8", VA = "0x935AA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float timeForStartFading;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float timeForFadeStep;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float timeToDestroy;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<ParticleSystem> particleSystems;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float emissionDecrease;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private List<float> emissionValues;

	[Token(Token = "0x17000025")]
	private WaitForSeconds waitForStartFading
	{
		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x935290", Offset = "0x935290", VA = "0x935290")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000026")]
	private WaitForSeconds waitForFadeStep
	{
		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x935300", Offset = "0x935300", VA = "0x935300")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000027")]
	private WaitForSeconds waitForDestroy
	{
		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x935370", Offset = "0x935370", VA = "0x935370")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x9353E0", Offset = "0x9353E0", VA = "0x9353E0")]
	public void DestroyRockDelayed()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x9354E8", Offset = "0x9354E8", VA = "0x9354E8")]
	[IteratorStateMachine(typeof(<DestroySelfOvertime>d__13))]
	public IEnumerator DestroySelfOvertime()
	{
		return null;
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x935584", Offset = "0x935584", VA = "0x935584")]
	[IteratorStateMachine(typeof(<FadeOutParticles>d__14))]
	private IEnumerator FadeOutParticles(ParticleSystem particleSystem)
	{
		return null;
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x93563C", Offset = "0x93563C", VA = "0x93563C")]
	public CatapultRockRemover()
	{
	}
}
[Token(Token = "0x200005D")]
[ExecuteInEditMode]
public class AtmosphericScattering : MonoBehaviour
{
	[Token(Token = "0x200005E")]
	public enum OcclusionDownscale
	{
		[Token(Token = "0x400029F")]
		x1 = 1,
		[Token(Token = "0x40002A0")]
		x2 = 2,
		[Token(Token = "0x40002A1")]
		x4 = 4
	}

	[Token(Token = "0x200005F")]
	public enum OcclusionSamples
	{
		[Token(Token = "0x40002A3")]
		x64,
		[Token(Token = "0x40002A4")]
		x164,
		[Token(Token = "0x40002A5")]
		x244
	}

	[Token(Token = "0x2000060")]
	public enum ScatterDebugMode
	{
		[Token(Token = "0x40002A7")]
		None,
		[Token(Token = "0x40002A8")]
		Scattering,
		[Token(Token = "0x40002A9")]
		Occlusion,
		[Token(Token = "0x40002AA")]
		OccludedScattering,
		[Token(Token = "0x40002AB")]
		Rayleigh,
		[Token(Token = "0x40002AC")]
		Mie,
		[Token(Token = "0x40002AD")]
		Height
	}

	[Token(Token = "0x2000061")]
	public enum DepthTexture
	{
		[Token(Token = "0x40002AF")]
		Enable,
		[Token(Token = "0x40002B0")]
		Disable,
		[Token(Token = "0x40002B1")]
		Ignore
	}

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("World Components")]
	public Gradient worldRayleighColorRamp;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float worldRayleighColorIntensity;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float worldRayleighDensity;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float worldRayleighExtinctionFactor;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float worldRayleighIndirectScatter;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Gradient worldMieColorRamp;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float worldMieColorIntensity;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float worldMieDensity;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float worldMieExtinctionFactor;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float worldMiePhaseAnisotropy;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float worldNearScatterPush;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float worldNormalDistance;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Height Components")]
	public Color heightRayleighColor;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float heightRayleighIntensity;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float heightRayleighDensity;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float heightMieDensity;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float heightExtinctionFactor;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float heightSeaLevel;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float heightDistance;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 heightPlaneShift;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float heightNearScatterPush;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float heightNormalDistance;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Header("Sky Dome")]
	public Vector3 skyDomeScale;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Vector3 skyDomeRotation;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Transform skyDomeTrackedYawRotation;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool skyDomeVerticalFlip;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Cubemap skyDomeCube;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float skyDomeExposure;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public Color skyDomeTint;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[HideInInspector]
	public Vector3 skyDomeOffset;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[Header("Scatter Occlusion")]
	public bool useOcclusion;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float occlusionBias;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float occlusionBiasIndirect;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float occlusionBiasClouds;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public OcclusionDownscale occlusionDownscale;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public OcclusionSamples occlusionSamples;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public bool occlusionDepthFixup;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public float occlusionDepthThreshold;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool occlusionFullSky;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float occlusionBiasSkyRayleigh;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public float occlusionBiasSkyMie;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[Header("Other")]
	public float worldScaleExponent;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public bool forcePerPixel;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
	public bool forcePostEffect;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[Tooltip("Soft clouds need depth values. Ignore means externally controlled.")]
	public DepthTexture depthTexture;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public ScatterDebugMode debugMode;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[HideInInspector]
	public Shader occlusionShader;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool m_isAwake;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Camera m_currentCamera;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Material m_occlusionMaterial;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Camera.CameraCallback m_precullCallback;

	[Token(Token = "0x1700002C")]
	public static AtmosphericScattering instance
	{
		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x935AF0", Offset = "0x935AF0", VA = "0x935AF0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x935B38", Offset = "0x935B38", VA = "0x935B38")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x935B90", Offset = "0x935B90", VA = "0x935B90")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x9363D0", Offset = "0x9363D0", VA = "0x9363D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x937784", Offset = "0x937784", VA = "0x937784")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x936700", Offset = "0x936700", VA = "0x936700")]
	private void UpdateKeywords(bool enable)
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x937A8C", Offset = "0x937A8C", VA = "0x937A8C")]
	public void OnValidate()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x937CB8", Offset = "0x937CB8", VA = "0x937CB8")]
	private void CBOnPreCull(Camera cam)
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x937CBC", Offset = "0x937CBC", VA = "0x937CBC")]
	private void OnWillRenderObject()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x9383CC", Offset = "0x9383CC", VA = "0x9383CC")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x9368C0", Offset = "0x9368C0", VA = "0x9368C0")]
	private void UpdateStaticUniforms()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x937134", Offset = "0x937134", VA = "0x937134")]
	private void UpdateDynamicUniforms()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x93845C", Offset = "0x93845C", VA = "0x93845C")]
	public AtmosphericScattering()
	{
	}
}
[Token(Token = "0x2000062")]
[ImageEffectAllowedInSceneView]
[ExecuteInEditMode]
public class AtmosphericScatteringDeferred : PostEffectsBase
{
	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public Shader deferredFogShader;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material m_fogMaterial;

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x93858C", Offset = "0x93858C", VA = "0x93858C", Slot = "4")]
	public override bool CheckResources()
	{
		return default(bool);
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x93868C", Offset = "0x93868C", VA = "0x93868C")]
	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x938ED4", Offset = "0x938ED4", VA = "0x938ED4")]
	private static void CustomGraphicsBlit(RenderTexture src, RenderTexture dst, Material mat, int pass)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x939034", Offset = "0x939034", VA = "0x939034")]
	public AtmosphericScatteringDeferred()
	{
	}
}
[Token(Token = "0x2000063")]
[ExecuteInEditMode]
public class AtmosphericScatteringSun : MonoBehaviour
{
	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AtmosphericScatteringSun instance;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CommandBuffer m_occlusionCmdAfterShadows;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CommandBuffer m_occlusionCmdBeforeScreen;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light m_light;

	[Token(Token = "0x1700002D")]
	public new Transform transform
	{
		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x93903C", Offset = "0x93903C", VA = "0x93903C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x939044", Offset = "0x939044", VA = "0x939044")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700002E")]
	public Light light
	{
		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x93904C", Offset = "0x93904C", VA = "0x93904C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002F")]
	public CommandBuffer occlusionCmdBeforeScreenSpace
	{
		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x939054", Offset = "0x939054", VA = "0x939054")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x93905C", Offset = "0x93905C", VA = "0x93905C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x9393DC", Offset = "0x9393DC", VA = "0x9393DC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x939708", Offset = "0x939708", VA = "0x939708")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x93976C", Offset = "0x93976C", VA = "0x93976C")]
	public AtmosphericScatteringSun()
	{
	}
}
[Token(Token = "0x2000064")]
public class FreeCamera : MonoBehaviour
{
	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool enableInputCapture;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool holdRightMouseCapture;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float lookSpeed;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float moveSpeed;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float sprintSpeed;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_inputCaptured;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_yaw;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_pitch;

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x939774", Offset = "0x939774", VA = "0x939774")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x939780", Offset = "0x939780", VA = "0x939780")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x9397B0", Offset = "0x9397B0", VA = "0x9397B0")]
	private void CaptureInput()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x939824", Offset = "0x939824", VA = "0x939824")]
	private void ReleaseInput()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x939850", Offset = "0x939850", VA = "0x939850")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x939888", Offset = "0x939888", VA = "0x939888")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x939D20", Offset = "0x939D20", VA = "0x939D20")]
	public FreeCamera()
	{
	}
}
[Token(Token = "0x2000065")]
public class CollisionInfoController : MonoBehaviour
{
	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collision collision;

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x939D40", Offset = "0x939D40", VA = "0x939D40")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x939DF8", Offset = "0x939DF8", VA = "0x939DF8")]
	public void StoreCollisionData(Collision collider)
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x939E00", Offset = "0x939E00", VA = "0x939E00")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x939E04", Offset = "0x939E04", VA = "0x939E04")]
	public void ResetCollisionInfoController()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x939ECC", Offset = "0x939ECC", VA = "0x939ECC")]
	public CollisionInfoController()
	{
	}
}
[Token(Token = "0x2000066")]
public static class ColorByEnumReader
{
	[Token(Token = "0x2000067")]
	public enum ColorEnum
	{
		[Token(Token = "0x40002C3")]
		red,
		[Token(Token = "0x40002C4")]
		green,
		[Token(Token = "0x40002C5")]
		blue,
		[Token(Token = "0x40002C6")]
		yellow,
		[Token(Token = "0x40002C7")]
		cyan,
		[Token(Token = "0x40002C8")]
		gray,
		[Token(Token = "0x40002C9")]
		black,
		[Token(Token = "0x40002CA")]
		white,
		[Token(Token = "0x40002CB")]
		orange,
		[Token(Token = "0x40002CC")]
		purple
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x939ED4", Offset = "0x939ED4", VA = "0x939ED4")]
	public static Color ReadColor(ColorEnum colorEnum)
	{
		return default(Color);
	}
}
[Token(Token = "0x2000068")]
public class DeathMatchTournamentScoreboadAdjuster : MonoBehaviour
{
	[Token(Token = "0x40002CD")]
	private const float alphaCoefficient = 0.3f;

	[Token(Token = "0x40002CE")]
	private const float darkerColorCoefficient = 0.6f;

	[Token(Token = "0x40002CF")]
	private const int defaultWinningPlayersCount = 2;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Image> underlineImages;

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x939F18", Offset = "0x939F18", VA = "0x939F18")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x939F40", Offset = "0x939F40", VA = "0x939F40")]
	public void AdjustScoreboard()
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x939FB4", Offset = "0x939FB4", VA = "0x939FB4")]
	private void AdjustScoreboardEntries(int winningPlayers)
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x93A11C", Offset = "0x93A11C", VA = "0x93A11C")]
	[ContextMenu("TestAdjuster")]
	public void TestAdjuster()
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x93A1DC", Offset = "0x93A1DC", VA = "0x93A1DC")]
	public DeathMatchTournamentScoreboadAdjuster()
	{
	}
}
[Token(Token = "0x200006A")]
public class DebugIDController : MonoBehaviour
{
	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x93A278", Offset = "0x93A278", VA = "0x93A278")]
	[ContextMenu("Debug")]
	public void DebugID()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x93A37C", Offset = "0x93A37C", VA = "0x93A37C")]
	public DebugIDController()
	{
	}
}
[Token(Token = "0x200006B")]
public class DebugShapeDrawer : MonoBehaviour
{
	[Token(Token = "0x200006C")]
	public enum ShapeToBeDrawn
	{
		[Token(Token = "0x40002D7")]
		cube,
		[Token(Token = "0x40002D8")]
		sphere,
		[Token(Token = "0x40002D9")]
		mesh,
		[Token(Token = "0x40002DA")]
		wireCube,
		[Token(Token = "0x40002DB")]
		wireSphere,
		[Token(Token = "0x40002DC")]
		wireMesh
	}

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Color shapeDebuggerColor;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public ShapeToBeDrawn shapeToBeDrawn;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	public float objectToDrawScaleMultiplier;

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x93A384", Offset = "0x93A384", VA = "0x93A384")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x93A788", Offset = "0x93A788", VA = "0x93A788")]
	public DebugShapeDrawer()
	{
	}
}
[Token(Token = "0x200006D")]
public class Destroyer : MonoBehaviour
{
	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x93A798", Offset = "0x93A798", VA = "0x93A798")]
	private void Start()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x93A814", Offset = "0x93A814", VA = "0x93A814")]
	public Destroyer()
	{
	}
}
[Token(Token = "0x200006E")]
public class DevelopmentController : MonoBehaviour
{
	[Token(Token = "0x60001EE")]
	[Address(RVA = "0x93A81C", Offset = "0x93A81C", VA = "0x93A81C")]
	public DevelopmentController()
	{
	}
}
[Token(Token = "0x200006F")]
public class DisplayGameVersionInSettings : MonoBehaviour
{
	[Token(Token = "0x60001EF")]
	[Address(RVA = "0x93A824", Offset = "0x93A824", VA = "0x93A824")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0x93A8EC", Offset = "0x93A8EC", VA = "0x93A8EC")]
	public DisplayGameVersionInSettings()
	{
	}
}
[Token(Token = "0x2000070")]
public class DistortionParticleController : MonoBehaviour
{
	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material material;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystemRenderer particleSystemRenderer;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float duration;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float currentDuration;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color initialColor;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float initialValue;

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0x93A8F4", Offset = "0x93A8F4", VA = "0x93A8F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0x93A9E8", Offset = "0x93A9E8", VA = "0x93A9E8")]
	private void Update()
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0x93AA6C", Offset = "0x93AA6C", VA = "0x93AA6C")]
	private void SetMaterialProperties()
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0x93AB44", Offset = "0x93AB44", VA = "0x93AB44")]
	public DistortionParticleController()
	{
	}
}
[Token(Token = "0x2000071")]
public class DragonSpeedChanger : MonoBehaviour
{
	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dragonSpeed;

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0x93AB58", Offset = "0x93AB58", VA = "0x93AB58")]
	public DragonSpeedChanger()
	{
	}
}
[Token(Token = "0x2000072")]
public class DropdownDebug : MonoBehaviour
{
	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Dropdown dropdown;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isShown;

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0x93AB68", Offset = "0x93AB68", VA = "0x93AB68")]
	public void ToggleDropdown()
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x93ABB4", Offset = "0x93ABB4", VA = "0x93ABB4")]
	public DropdownDebug()
	{
	}
}
[Token(Token = "0x2000073")]
public class BowSoundController : MonoBehaviour
{
	[Token(Token = "0x40002E7")]
	private const int volumeMultiplier = 3;

	[Token(Token = "0x40002E8")]
	private const float minPitch = 0.5f;

	[Token(Token = "0x40002E9")]
	private const float maxPitch = 1f;

	[Token(Token = "0x40002EA")]
	private const int stretchSpeedToPitchMultiplier = 3;

	[Token(Token = "0x40002EB")]
	private const float minStrechSpeedForSlowStretchSound = 0.05f;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BowController bowController;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource BowStretchAudioSource;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip StretchSoundSlow;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip StretchSoundSlower;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float stretchSpeed;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool isStretching;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float bowStretch;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float bowPreviousStretch;

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x93ABBC", Offset = "0x93ABBC", VA = "0x93ABBC")]
	private void Update()
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x93ACC0", Offset = "0x93ACC0", VA = "0x93ACC0")]
	public BowSoundController()
	{
	}
}
[Token(Token = "0x2000074")]
public class ExplodeObject : MonoBehaviour
{
	[Token(Token = "0x2000075")]
	[CompilerGenerated]
	private sealed class <DestroyYourself>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExplodeObject <>4__this;

		[Token(Token = "0x17000030")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000205")]
			[Address(RVA = "0x93B6B0", Offset = "0x93B6B0", VA = "0x93B6B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000031")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000207")]
			[Address(RVA = "0x93B6F8", Offset = "0x93B6F8", VA = "0x93B6F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0x93B52C", Offset = "0x93B52C", VA = "0x93B52C")]
		[DebuggerHidden]
		public <DestroyYourself>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000203")]
		[Address(RVA = "0x93B5E0", Offset = "0x93B5E0", VA = "0x93B5E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0x93B5E4", Offset = "0x93B5E4", VA = "0x93B5E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0x93B6B8", Offset = "0x93B6B8", VA = "0x93B6B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool isFreezing;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject gameObjectToDestroy;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MeshRenderer[] listOfAllRenderers;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Vector3> listOfFragmentForces;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject objectToActivate;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 centroid;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float force;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float angularVelocityCoeff;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float secondsToDestroyYourselfAfterExplosion;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool hasSetInitialPosition;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 initialPosition;

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0x93ACC8", Offset = "0x93ACC8", VA = "0x93ACC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0x93ADF0", Offset = "0x93ADF0", VA = "0x93ADF0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0x93AE30", Offset = "0x93AE30", VA = "0x93AE30")]
	private void CalculateForceVectors(int counterOfRenderers)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x93B09C", Offset = "0x93B09C", VA = "0x93B09C")]
	private void SetIceAmountInMaterial()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x93ADC8", Offset = "0x93ADC8", VA = "0x93ADC8")]
	private void PreparePartsToExplode()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x93B1E8", Offset = "0x93B1E8", VA = "0x93B1E8")]
	public void Explode(Vector3 additionalForceVector)
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x93B4B8", Offset = "0x93B4B8", VA = "0x93B4B8")]
	[IteratorStateMachine(typeof(<DestroyYourself>d__17))]
	private IEnumerator DestroyYourself()
	{
		return null;
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x93B554", Offset = "0x93B554", VA = "0x93B554")]
	public ExplodeObject()
	{
	}
}
[Token(Token = "0x2000076")]
public class QuickStart : MonoBehaviour
{
	[Token(Token = "0x2000077")]
	[CompilerGenerated]
	private sealed class <Explode>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public QuickStart <>4__this;

		[Token(Token = "0x17000032")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600020F")]
			[Address(RVA = "0x93B9A4", Offset = "0x93B9A4", VA = "0x93B9A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000211")]
			[Address(RVA = "0x93B9EC", Offset = "0x93B9EC", VA = "0x93B9EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600020C")]
		[Address(RVA = "0x93B7E0", Offset = "0x93B7E0", VA = "0x93B7E0")]
		[DebuggerHidden]
		public <Explode>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0x93B810", Offset = "0x93B810", VA = "0x93B810", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0x93B814", Offset = "0x93B814", VA = "0x93B814", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0x93B9AC", Offset = "0x93B9AC", VA = "0x93B9AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject g1;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject g2;

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x93B700", Offset = "0x93B700", VA = "0x93B700")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x93B704", Offset = "0x93B704", VA = "0x93B704")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x93B76C", Offset = "0x93B76C", VA = "0x93B76C")]
	[IteratorStateMachine(typeof(<Explode>d__4))]
	private IEnumerator Explode()
	{
		return null;
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x93B808", Offset = "0x93B808", VA = "0x93B808")]
	public QuickStart()
	{
	}
}
[Token(Token = "0x2000078")]
public class TweenFragment : MonoBehaviour
{
	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform TargetPos;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float LerpTime;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 initPos;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float time;

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x93B9F4", Offset = "0x93B9F4", VA = "0x93B9F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x93BA28", Offset = "0x93BA28", VA = "0x93BA28")]
	private void Update()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x93BAF8", Offset = "0x93BAF8", VA = "0x93BAF8")]
	public TweenFragment()
	{
	}
}
[Token(Token = "0x2000079")]
public class ExplosionForcer : MonoBehaviour
{
	[Token(Token = "0x6000215")]
	[Address(RVA = "0x93BB00", Offset = "0x93BB00", VA = "0x93BB00")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x93BB6C", Offset = "0x93BB6C", VA = "0x93BB6C")]
	public ExplosionForcer()
	{
	}
}
[Token(Token = "0x200007A")]
public class FireLightScript : MonoBehaviour
{
	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minIntensity;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxIntensity;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light fireLight;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float random;

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x93BB74", Offset = "0x93BB74", VA = "0x93BB74")]
	private void Update()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x93BC34", Offset = "0x93BC34", VA = "0x93BC34")]
	public FireLightScript()
	{
	}
}
[Token(Token = "0x200007B")]
public class FireArrowAttachPoint : MonoBehaviour
{
	[Token(Token = "0x6000219")]
	[Address(RVA = "0x93BC48", Offset = "0x93BC48", VA = "0x93BC48")]
	public FireArrowAttachPoint()
	{
	}
}
[Token(Token = "0x200007C")]
public class ForceDirectionExploderController : MonoBehaviour
{
	[Token(Token = "0x14000001")]
	public event Action OnCollisionAction
	{
		[Token(Token = "0x600021A")]
		[Address(RVA = "0x93BC50", Offset = "0x93BC50", VA = "0x93BC50")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600021B")]
		[Address(RVA = "0x93BCEC", Offset = "0x93BCEC", VA = "0x93BCEC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x93BD88", Offset = "0x93BD88", VA = "0x93BD88")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x93BE4C", Offset = "0x93BE4C", VA = "0x93BE4C")]
	public ForceDirectionExploderController()
	{
	}
}
[Token(Token = "0x200007D")]
public class GlassPieceStayer : MonoBehaviour
{
	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GlassPiecesToStaySet[] glassPiecesSets;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ExplodeObject explodeObject;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int randomNumber;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool done;

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x93BE54", Offset = "0x93BE54", VA = "0x93BE54")]
	private void Awake()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x93BE58", Offset = "0x93BE58", VA = "0x93BE58")]
	private void KeepFrozenPiecesSet()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x93BFB0", Offset = "0x93BFB0", VA = "0x93BFB0")]
	public GlassPieceStayer()
	{
	}
}
[Serializable]
[Token(Token = "0x200007F")]
public class GlassPiecesToStaySet
{
	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public MeshRenderer[] piecesSet;

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x93C0E0", Offset = "0x93C0E0", VA = "0x93C0E0")]
	public GlassPiecesToStaySet()
	{
	}
}
[Token(Token = "0x2000080")]
public class ProjectorPointerController : MonoBehaviour
{
	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Projector projector;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 offset;

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x93C0E8", Offset = "0x93C0E8", VA = "0x93C0E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x93C118", Offset = "0x93C118", VA = "0x93C118")]
	public void ShowOnHit(RaycastHit hit)
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x93C228", Offset = "0x93C228", VA = "0x93C228")]
	public void SetActive(bool value)
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x93C250", Offset = "0x93C250", VA = "0x93C250")]
	public ProjectorPointerController()
	{
	}
}
[Token(Token = "0x2000081")]
public class AmmoController : MonoBehaviour
{
	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnAmmoChange;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int magazineCapacity;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int bulletsInChamberAmount;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isUsingAmmo;

	[Token(Token = "0x17000034")]
	public int AmmoInMagazine
	{
		[Token(Token = "0x6000229")]
		[Address(RVA = "0x93C2B0", Offset = "0x93C2B0", VA = "0x93C2B0")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600022A")]
		[Address(RVA = "0x93C2B8", Offset = "0x93C2B8", VA = "0x93C2B8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000035")]
	public int AmmoInChamber
	{
		[Token(Token = "0x600022B")]
		[Address(RVA = "0x93C2C0", Offset = "0x93C2C0", VA = "0x93C2C0")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600022C")]
		[Address(RVA = "0x93C2C8", Offset = "0x93C2C8", VA = "0x93C2C8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x93C2D0", Offset = "0x93C2D0", VA = "0x93C2D0")]
	public void ReloadMagazine()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x93C2F4", Offset = "0x93C2F4", VA = "0x93C2F4")]
	public void ReloadChamber()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x93C330", Offset = "0x93C330", VA = "0x93C330")]
	public void UseChamberAmmo()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x93C36C", Offset = "0x93C36C", VA = "0x93C36C")]
	public AmmoController()
	{
	}
}
[Token(Token = "0x2000082")]
public class AmmoUIController : MonoBehaviourPun
{
	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text chamberAmmoText;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text magazineAmmoText;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AmmoController ammoController;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject uiContainer;

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x93C37C", Offset = "0x93C37C", VA = "0x93C37C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x93C544", Offset = "0x93C544", VA = "0x93C544")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x93C4AC", Offset = "0x93C4AC", VA = "0x93C4AC")]
	private void UpdateUI()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x93C644", Offset = "0x93C644", VA = "0x93C644")]
	public AmmoUIController()
	{
	}
}
[Token(Token = "0x2000083")]
public class ArcadeRifleReloadController : MonoBehaviour, IReloadable
{
	[Token(Token = "0x2000084")]
	[CompilerGenerated]
	private sealed class <ReloadBulletCoroutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ArcadeRifleReloadController <>4__this;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public WaitForSeconds waitForReload;

		[Token(Token = "0x17000039")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000243")]
			[Address(RVA = "0x93CF48", Offset = "0x93CF48", VA = "0x93CF48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000245")]
			[Address(RVA = "0x93CF90", Offset = "0x93CF90", VA = "0x93CF90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0x93CAB8", Offset = "0x93CAB8", VA = "0x93CAB8")]
		[DebuggerHidden]
		public <ReloadBulletCoroutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x93CB00", Offset = "0x93CB00", VA = "0x93CB00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x93CB04", Offset = "0x93CB04", VA = "0x93CB04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0x93CF50", Offset = "0x93CF50", VA = "0x93CF50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float reloadTime;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float initialReloadTime;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float reloadAnimTime;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float reloadPoseTime;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float negativeReloadPoseTime;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private CardrigeReleaseController cardrigeReleaseController;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GunAnimatorController gunAnimatorController;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private LoadingIndicatorController loadingIndicatorController;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GunFxController gunFxController;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AmmoController ammoController;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isLoaded;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool isInitReload;

	[Token(Token = "0x17000036")]
	private WaitForSeconds waitForReload
	{
		[Token(Token = "0x6000235")]
		[Address(RVA = "0x93C64C", Offset = "0x93C64C", VA = "0x93C64C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000037")]
	private WaitForSeconds WaitForInitialReload
	{
		[Token(Token = "0x6000236")]
		[Address(RVA = "0x93C6C0", Offset = "0x93C6C0", VA = "0x93C6C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000038")]
	private WaitForSeconds waitForReloadAnimation
	{
		[Token(Token = "0x6000237")]
		[Address(RVA = "0x93C730", Offset = "0x93C730", VA = "0x93C730")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x93C7A0", Offset = "0x93C7A0", VA = "0x93C7A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x93C878", Offset = "0x93C878", VA = "0x93C878")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x93C950", Offset = "0x93C950", VA = "0x93C950", Slot = "5")]
	public void InitReload()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x93CA54", Offset = "0x93CA54", VA = "0x93CA54")]
	public void ReloadBullet()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x93CAA8", Offset = "0x93CAA8", VA = "0x93CAA8", Slot = "4")]
	public bool IsLoaded()
	{
		return default(bool);
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x93CAB0", Offset = "0x93CAB0", VA = "0x93CAB0", Slot = "6")]
	public void StopCoroutines()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x93C9AC", Offset = "0x93C9AC", VA = "0x93C9AC")]
	[IteratorStateMachine(typeof(<ReloadBulletCoroutine>d__24))]
	private IEnumerator ReloadBulletCoroutine(WaitForSeconds waitForReload)
	{
		return null;
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x93CAE0", Offset = "0x93CAE0", VA = "0x93CAE0")]
	public ArcadeRifleReloadController()
	{
	}
}
[Token(Token = "0x2000085")]
public class BulletController : MonoBehaviourPun
{
	[Token(Token = "0x4000333")]
	private const float timeToDestroy = 2f;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float time;

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x93CF98", Offset = "0x93CF98", VA = "0x93CF98")]
	private void Update()
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x93D058", Offset = "0x93D058", VA = "0x93D058")]
	public BulletController()
	{
	}
}
[Token(Token = "0x2000086")]
public class BulletFlyController : MonoBehaviourPun, IResetable
{
	[Token(Token = "0x2000087")]
	[CompilerGenerated]
	private sealed class <DestroyWithDelay>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BulletFlyController <>4__this;

		[Token(Token = "0x1700003E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000259")]
			[Address(RVA = "0x93D62C", Offset = "0x93D62C", VA = "0x93D62C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600025B")]
			[Address(RVA = "0x93D674", Offset = "0x93D674", VA = "0x93D674", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000256")]
		[Address(RVA = "0x93D454", Offset = "0x93D454", VA = "0x93D454")]
		[DebuggerHidden]
		public <DestroyWithDelay>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x93D544", Offset = "0x93D544", VA = "0x93D544", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x93D548", Offset = "0x93D548", VA = "0x93D548", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600025A")]
		[Address(RVA = "0x93D634", Offset = "0x93D634", VA = "0x93D634", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000335")]
	private const float minimalDistance = 0.1f;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WaitForSeconds destroyDelay;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem trailParticle;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TrailRenderer trailRenderer;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isMoving;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 target;

	[Token(Token = "0x1700003B")]
	private bool IsTrailParticleEmissionEnabled
	{
		[Token(Token = "0x6000248")]
		[Address(RVA = "0x93D060", Offset = "0x93D060", VA = "0x93D060")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000249")]
		[Address(RVA = "0x93D098", Offset = "0x93D098", VA = "0x93D098")]
		set
		{
		}
	}

	[Token(Token = "0x1700003C")]
	public Vector3 Target
	{
		[Token(Token = "0x600024A")]
		[Address(RVA = "0x93D130", Offset = "0x93D130", VA = "0x93D130")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600024B")]
		[Address(RVA = "0x93D13C", Offset = "0x93D13C", VA = "0x93D13C")]
		set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public bool IsMoving
	{
		[Token(Token = "0x600024C")]
		[Address(RVA = "0x93D148", Offset = "0x93D148", VA = "0x93D148")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600024D")]
		[Address(RVA = "0x93D150", Offset = "0x93D150", VA = "0x93D150")]
		set
		{
		}
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x93D178", Offset = "0x93D178", VA = "0x93D178")]
	private void Update()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x93D1A0", Offset = "0x93D1A0", VA = "0x93D1A0")]
	private void UpdateMovement()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x93D324", Offset = "0x93D324", VA = "0x93D324")]
	private void TryToDestroyBullet()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x93D3E0", Offset = "0x93D3E0", VA = "0x93D3E0")]
	[IteratorStateMachine(typeof(<DestroyWithDelay>d__19))]
	private IEnumerator DestroyWithDelay()
	{
		return null;
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x93D1B8", Offset = "0x93D1B8", VA = "0x93D1B8")]
	private void MoveBulletTowartds()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x93D47C", Offset = "0x93D47C", VA = "0x93D47C", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x93D4B4", Offset = "0x93D4B4", VA = "0x93D4B4")]
	public BulletFlyController()
	{
	}
}
[Token(Token = "0x2000088")]
public class CardrigeReleaseController : MonoBehaviourPun
{
	[Token(Token = "0x400033F")]
	private const float torqueLowestValue = 6f;

	[Token(Token = "0x4000340")]
	private const float torqueHithestValue = 12f;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform shellReleasePoint;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject cardrigdePrefab;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject bulletPrefab;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float shellReleaseForce;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float shellRightForce;

	[Token(Token = "0x14000002")]
	public event Action OnCardridgeReleased
	{
		[Token(Token = "0x600025C")]
		[Address(RVA = "0x93D67C", Offset = "0x93D67C", VA = "0x93D67C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600025D")]
		[Address(RVA = "0x93D718", Offset = "0x93D718", VA = "0x93D718")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x93CC40", Offset = "0x93CC40", VA = "0x93CC40")]
	public void ReleaseShell()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x93D7B4", Offset = "0x93D7B4", VA = "0x93D7B4")]
	public void ReleaseBullet()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x93DA9C", Offset = "0x93DA9C", VA = "0x93DA9C")]
	[PunRPC]
	private void AddForceToShell(int shellId, float shellReleaseForce, float shellRightForce)
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x93DCBC", Offset = "0x93DCBC", VA = "0x93DCBC")]
	private static float GetRadomTorque()
	{
		return default(float);
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x93DCCC", Offset = "0x93DCCC", VA = "0x93DCCC")]
	public CardrigeReleaseController()
	{
	}
}
[Token(Token = "0x2000089")]
public class CrosshairController : MonoBehaviour
{
	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LineRenderer lineRenderer;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem particle;

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x93DCD4", Offset = "0x93DCD4", VA = "0x93DCD4")]
	public void DrawPath(Vector3[] vectors)
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x93DD44", Offset = "0x93DD44", VA = "0x93DD44")]
	public void EnableCrosshair(bool value)
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x93DD4C", Offset = "0x93DD4C", VA = "0x93DD4C")]
	private void SetCrosshair(bool on)
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x93DD9C", Offset = "0x93DD9C", VA = "0x93DD9C")]
	public CrosshairController()
	{
	}
}
[Token(Token = "0x200008A")]
public class GrenadeLauncherReloadController : MonoBehaviourPun, IReloadable
{
	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MagazineSliderController magazineSliderController;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AmmoController ammoController;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GunFxController gunFxController;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private SnapActionReloadController snapActionReloadController;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private MagazineSpawnController magazineSpawnController;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ReloadHighlightController reloadHighlightController;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private HighlightElement barrelHighlight;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private HVRGrabbable barrelGrabbable;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private CardrigeReleaseController cardrigeReleaseController;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private MagazineBulletController magazineBulletController;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GunAnimatorController gunAnimatorController;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isShellInside;

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x93DDA4", Offset = "0x93DDA4", VA = "0x93DDA4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x93E39C", Offset = "0x93E39C", VA = "0x93E39C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x93E800", Offset = "0x93E800", VA = "0x93E800")]
	private void PlayCardridgeReleaseSound()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x93E81C", Offset = "0x93E81C", VA = "0x93E81C")]
	private void OnOpened()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x93E9AC", Offset = "0x93E9AC", VA = "0x93E9AC")]
	private void UpdateBarrelHighlight(HVRHandGrabber arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x93EC7C", Offset = "0x93EC7C", VA = "0x93EC7C")]
	private void Load()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x93E314", Offset = "0x93E314", VA = "0x93E314")]
	private void SpawnMagazine()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x93EDB0", Offset = "0x93EDB0", VA = "0x93EDB0")]
	private void OnAmmoChange()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x93EE48", Offset = "0x93EE48", VA = "0x93EE48", Slot = "4")]
	public bool IsLoaded()
	{
		return default(bool);
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x93EE6C", Offset = "0x93EE6C", VA = "0x93EE6C")]
	public void ReloadMagazine()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x93EEF8", Offset = "0x93EEF8", VA = "0x93EEF8", Slot = "6")]
	public void StopCoroutines()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x93EF00", Offset = "0x93EF00", VA = "0x93EF00", Slot = "5")]
	public void InitReload()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x93EF04", Offset = "0x93EF04", VA = "0x93EF04")]
	public GrenadeLauncherReloadController()
	{
	}
}
[Token(Token = "0x200008B")]
public class GunAnimatorController : MonoBehaviour, IPunObservable
{
	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly int shoot;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private readonly int shootTrigger;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly int reloadBullet;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private readonly int reloadBulletNow;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly int reloadMagazine;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private readonly int reloadTimeHash;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isShoot;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool isLoadingBullet;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool isLoadingMagazine;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float reloadTime;

	[Token(Token = "0x17000040")]
	public bool IsShoot
	{
		[Token(Token = "0x6000274")]
		[Address(RVA = "0x93EF0C", Offset = "0x93EF0C", VA = "0x93EF0C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000275")]
		[Address(RVA = "0x93EF14", Offset = "0x93EF14", VA = "0x93EF14")]
		set
		{
		}
	}

	[Token(Token = "0x17000041")]
	public bool IsBulletReload
	{
		[Token(Token = "0x6000276")]
		[Address(RVA = "0x93EF80", Offset = "0x93EF80", VA = "0x93EF80")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000277")]
		[Address(RVA = "0x93EF88", Offset = "0x93EF88", VA = "0x93EF88")]
		set
		{
		}
	}

	[Token(Token = "0x17000042")]
	public bool IsMagazineReload
	{
		[Token(Token = "0x6000278")]
		[Address(RVA = "0x93EFD0", Offset = "0x93EFD0", VA = "0x93EFD0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000279")]
		[Address(RVA = "0x93EFD8", Offset = "0x93EFD8", VA = "0x93EFD8")]
		set
		{
		}
	}

	[Token(Token = "0x17000043")]
	public float ReloadTime
	{
		[Token(Token = "0x600027A")]
		[Address(RVA = "0x93F020", Offset = "0x93F020", VA = "0x93F020")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600027B")]
		[Address(RVA = "0x93F028", Offset = "0x93F028", VA = "0x93F028")]
		set
		{
		}
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x93F064", Offset = "0x93F064", VA = "0x93F064")]
	public void ResetAnimatorState()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x93F070", Offset = "0x93F070", VA = "0x93F070")]
	public void PlayShootAnimation()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x93CC20", Offset = "0x93CC20", VA = "0x93CC20")]
	public void PlayReloadBulletAnimation()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x93EECC", Offset = "0x93EECC", VA = "0x93EECC")]
	public void PlayReloadMagazineAnimation()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x93F09C", Offset = "0x93F09C", VA = "0x93F09C")]
	public void PlayReloadBulletNow()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0x93CF28", Offset = "0x93CF28", VA = "0x93CF28")]
	public void FinishBulletReload()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0x93F0C0", Offset = "0x93F0C0", VA = "0x93F0C0", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0x93F240", Offset = "0x93F240", VA = "0x93F240")]
	public GunAnimatorController()
	{
	}
}
[Token(Token = "0x200008C")]
public class HighlightElement : MonoBehaviour
{
	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Renderer> renderers;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<Renderer, MaterialPropertyBlock> defaultMaterialsProperties;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MaterialPropertyBlock targetMaterialProperty;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string colorPropertyName;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string colorIntensityPropertyName;

	[Token(Token = "0x17000044")]
	public bool IsHighlightEnabled
	{
		[Token(Token = "0x6000284")]
		[Address(RVA = "0x93F364", Offset = "0x93F364", VA = "0x93F364")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000285")]
		[Address(RVA = "0x93F36C", Offset = "0x93F36C", VA = "0x93F36C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000045")]
	public float BlinkFrequency
	{
		[Token(Token = "0x6000286")]
		[Address(RVA = "0x93F378", Offset = "0x93F378", VA = "0x93F378")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000287")]
		[Address(RVA = "0x93F380", Offset = "0x93F380", VA = "0x93F380")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public Color HighlightColor
	{
		[Token(Token = "0x6000288")]
		[Address(RVA = "0x93F388", Offset = "0x93F388", VA = "0x93F388")]
		[CompilerGenerated]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000289")]
		[Address(RVA = "0x93F394", Offset = "0x93F394", VA = "0x93F394")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x93F3A0", Offset = "0x93F3A0", VA = "0x93F3A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x93F590", Offset = "0x93F590", VA = "0x93F590")]
	private void Update()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x93EA28", Offset = "0x93EA28", VA = "0x93EA28")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x93F7B0", Offset = "0x93F7B0", VA = "0x93F7B0")]
	public HighlightElement()
	{
	}
}
[Token(Token = "0x200008E")]
public class HitParticlesPlayer : MonoBehaviour
{
	[Token(Token = "0x400036A")]
	private const string woodTag = "Wood";

	[Token(Token = "0x400036B")]
	private const string enemyBodyTag = "Body Part";

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("PC Quality")]
	private GameObject woodHitVFX;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject groundHitVFX;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject enemyHitVFX;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Mobile Quality")]
	[SerializeField]
	private GameObject woodHitVFXmobile;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject groundHitVFXmobile;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject enemyHitVFXmobile;

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x93F95C", Offset = "0x93F95C", VA = "0x93F95C")]
	public void PlayParticles(string tag, Vector3 hitPoint, Vector3 hitNormal)
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x93FD8C", Offset = "0x93FD8C", VA = "0x93FD8C")]
	private void PlayHitEffects(HitReference hitReference)
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x93FF78", Offset = "0x93FF78", VA = "0x93FF78")]
	public HitParticlesPlayer()
	{
	}
}
[Token(Token = "0x200008F")]
public class HitReference : MonoBehaviour
{
	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public ParticleEmitter particleEmitter;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public HitSoundPlayer hitSoundPlayer;

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x93FF80", Offset = "0x93FF80", VA = "0x93FF80")]
	public HitReference()
	{
	}
}
[Token(Token = "0x2000090")]
public class HitSoundPlayer : MonoBehaviourPun
{
	[Token(Token = "0x4000374")]
	private const float basePitch = 1f;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<AudioClip> hitClips;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x93FEA0", Offset = "0x93FEA0", VA = "0x93FEA0")]
	public void PlayHitClip()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x93FF88", Offset = "0x93FF88", VA = "0x93FF88")]
	public HitSoundPlayer()
	{
	}
}
[Token(Token = "0x2000091")]
public interface IReloadable
{
	[Token(Token = "0x6000297")]
	bool IsLoaded();

	[Token(Token = "0x6000298")]
	void InitReload();

	[Token(Token = "0x6000299")]
	void StopCoroutines();
}
[Token(Token = "0x2000092")]
public interface ITwoHandsHoldable
{
	[Token(Token = "0x600029A")]
	bool IsHoldingbyTwoHands();
}
[Token(Token = "0x2000093")]
public class LoadingIndicatorController : MonoBehaviourPun
{
	[Token(Token = "0x4000377")]
	private const float idicationTimerDefaultValue = 0f;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Image reloadIndicator;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Image alternateIndicator;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool useAlternatePosition;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float indicatorTimer;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float reloadTime;

	[Token(Token = "0x17000047")]
	public float ReloadTime
	{
		[Token(Token = "0x600029B")]
		[Address(RVA = "0x93FF90", Offset = "0x93FF90", VA = "0x93FF90")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600029C")]
		[Address(RVA = "0x93FF98", Offset = "0x93FF98", VA = "0x93FF98")]
		set
		{
		}
	}

	[Token(Token = "0x17000048")]
	public Image ReloadIndicator
	{
		[Token(Token = "0x600029D")]
		[Address(RVA = "0x93FFAC", Offset = "0x93FFAC", VA = "0x93FFAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x93FFC8", Offset = "0x93FFC8", VA = "0x93FFC8")]
	private void Update()
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x93CA3C", Offset = "0x93CA3C", VA = "0x93CA3C")]
	public void PlayLoadingIndicator(float reloadTime)
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x940058", Offset = "0x940058", VA = "0x940058")]
	private void ControllReloadIndicator()
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x940048", Offset = "0x940048", VA = "0x940048")]
	private bool IsFilled()
	{
		return default(bool);
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x9400A0", Offset = "0x9400A0", VA = "0x9400A0")]
	public LoadingIndicatorController()
	{
	}
}
[Token(Token = "0x2000094")]
public class LocalParticlePoolController : MonoBehaviour
{
	[Token(Token = "0x400037D")]
	private const string cloneString = "(Clone)";

	[Token(Token = "0x400037E")]
	private const string emptyString = "";

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<LocalPoolElement> poolInitInfo;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector3 poolPosition;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<string, GameObject> stringToGameObject;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<string, GameObject> poolParentByName;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<string, Queue<GameObject>> pool;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LocalParticlePoolController instance;

	[Token(Token = "0x17000049")]
	public static LocalParticlePoolController Instance
	{
		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x93FBC4", Offset = "0x93FBC4", VA = "0x93FBC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x9400A8", Offset = "0x9400A8", VA = "0x9400A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x9400AC", Offset = "0x9400AC", VA = "0x9400AC")]
	private void CreatePool()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x940554", Offset = "0x940554", VA = "0x940554")]
	public GameObject ExtendPool(string name)
	{
		return null;
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x93FC98", Offset = "0x93FC98", VA = "0x93FC98")]
	public GameObject Instantiate(string name, Vector3 position, Vector3 normalVector)
	{
		return null;
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x9406E4", Offset = "0x9406E4", VA = "0x9406E4")]
	private GameObject GetExstingOrExtend(string name)
	{
		return null;
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x9407EC", Offset = "0x9407EC", VA = "0x9407EC")]
	public void BackToPool(GameObject poolElement)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x9408E8", Offset = "0x9408E8", VA = "0x9408E8")]
	public LocalParticlePoolController()
	{
	}
}
[Serializable]
[Token(Token = "0x2000095")]
public struct LocalPoolElement
{
	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public GameObject poolObject;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int count;
}
[Token(Token = "0x2000096")]
public class MagazineBulletController : MonoBehaviourPun
{
	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<GameObject> bullets;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AmmoController ammoController;

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x93E87C", Offset = "0x93E87C", VA = "0x93E87C")]
	public void AdjustMagazine()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x9409F0", Offset = "0x9409F0", VA = "0x9409F0")]
	[PunRPC]
	private void RPCAdjustMagazine(int ammoInMagazine)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x940A90", Offset = "0x940A90", VA = "0x940A90")]
	public MagazineBulletController()
	{
	}
}
[Token(Token = "0x2000097")]
public class MagazineGrabController : MonoBehaviourPun, IPunInstantiateMagicCallback
{
	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Collider magazineCollider;

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x940A98", Offset = "0x940A98", VA = "0x940A98")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x940AF0", Offset = "0x940AF0", VA = "0x940AF0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x940B48", Offset = "0x940B48", VA = "0x940B48", Slot = "4")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x940B70", Offset = "0x940B70", VA = "0x940B70")]
	public MagazineGrabController()
	{
	}
}
[Token(Token = "0x2000098")]
public class MagazineSliderController : MonoBehaviour
{
	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnMovementFinished;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform movementStartPoint;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform movementEndPoint;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform magazineTransform;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform controller;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private HVRGrabbable magazineGrabbable;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 handPositionWhenGrabbed;

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x940B78", Offset = "0x940B78", VA = "0x940B78")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x940FF4", Offset = "0x940FF4", VA = "0x940FF4")]
	public void InitMagazine(GameObject magazineInstance)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x9410F4", Offset = "0x9410F4", VA = "0x9410F4")]
	public void ResetSlider()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x9411C8", Offset = "0x9411C8", VA = "0x9411C8")]
	private void CacheData(HVRHandGrabber grabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x940D44", Offset = "0x940D44", VA = "0x940D44")]
	private Vector3 GetHandMovementVector()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x941238", Offset = "0x941238", VA = "0x941238")]
	public MagazineSliderController()
	{
	}
}
[Token(Token = "0x2000099")]
public class MagazineSpawnController : MonoBehaviourPun
{
	[Token(Token = "0x200009A")]
	[CompilerGenerated]
	private sealed class <SpawnMagazine>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MagazineSpawnController <>4__this;

		[Token(Token = "0x1700004A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002C7")]
			[Address(RVA = "0x941CA0", Offset = "0x941CA0", VA = "0x941CA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002C9")]
			[Address(RVA = "0x941CE8", Offset = "0x941CE8", VA = "0x941CE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x941820", Offset = "0x941820", VA = "0x941820")]
		[DebuggerHidden]
		public <SpawnMagazine>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x9419D0", Offset = "0x9419D0", VA = "0x9419D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x9419D4", Offset = "0x9419D4", VA = "0x9419D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x941CA8", Offset = "0x941CA8", VA = "0x941CA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<GameObject> OnMagazineSpawn;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AmmoController ammoController;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private MagazineSliderController magazineSliderController;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ReloadHighlightController reloadHighlightController;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GunAnimatorController gunAnimatorController;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject magazinePrefab;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform magazinePosition;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float magazineSpawnDelayTime;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private HVRHandSide magazineGrabbingHand;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool spawnOnNoAmmo;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private WaitForSeconds magazineSpawnDelay;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private HVRPosableGrabPoint magazinePosableGrabPoint;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject magazineInstance;

	[Token(Token = "0x14000003")]
	public event Action OnMagazineDestroyed
	{
		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x941240", Offset = "0x941240", VA = "0x941240")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x9412DC", Offset = "0x9412DC", VA = "0x9412DC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x941378", Offset = "0x941378", VA = "0x941378")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x9413F0", Offset = "0x9413F0", VA = "0x9413F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x94158C", Offset = "0x94158C", VA = "0x94158C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x93ED6C", Offset = "0x93ED6C", VA = "0x93ED6C")]
	public void TrySpawnMagazine()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x9417AC", Offset = "0x9417AC", VA = "0x9417AC")]
	[IteratorStateMachine(typeof(<SpawnMagazine>d__20))]
	private IEnumerator SpawnMagazine()
	{
		return null;
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x941848", Offset = "0x941848", VA = "0x941848")]
	private void EnableGrabHandSide()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x941734", Offset = "0x941734", VA = "0x941734")]
	private void TryDestroyMagazine()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x941884", Offset = "0x941884", VA = "0x941884")]
	private void DestroyMagazine()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x94198C", Offset = "0x94198C", VA = "0x94198C")]
	private void DisableGrabHandSide()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x9419C0", Offset = "0x9419C0", VA = "0x9419C0")]
	public MagazineSpawnController()
	{
	}
}
[Token(Token = "0x200009B")]
public class ParticleEmitter : MonoBehaviourPun
{
	[Token(Token = "0x200009C")]
	[CompilerGenerated]
	private sealed class <BackToPool>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleEmitter <>4__this;

		[Token(Token = "0x1700004D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002D3")]
			[Address(RVA = "0x9420A8", Offset = "0x9420A8", VA = "0x9420A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002D5")]
			[Address(RVA = "0x9420F0", Offset = "0x9420F0", VA = "0x9420F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x941F50", Offset = "0x941F50", VA = "0x941F50")]
		[DebuggerHidden]
		public <BackToPool>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x941F88", Offset = "0x941F88", VA = "0x941F88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x941F8C", Offset = "0x941F8C", VA = "0x941F8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x9420B0", Offset = "0x9420B0", VA = "0x9420B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool isLocalEmit;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float timeToDestroy;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected int SystemDensity;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<ParticleWithEmitCount> particlesWithEmitCount;

	[Token(Token = "0x1700004C")]
	private WaitForSeconds waitForBackToPool
	{
		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x941CF0", Offset = "0x941CF0", VA = "0x941CF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x93FDC0", Offset = "0x93FDC0", VA = "0x93FDC0")]
	public void EmitParticles()
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x941ED8", Offset = "0x941ED8", VA = "0x941ED8")]
	[PunRPC]
	private void EmitParticlesRpc()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x941D60", Offset = "0x941D60", VA = "0x941D60")]
	private void EmitParticle()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x941EDC", Offset = "0x941EDC", VA = "0x941EDC")]
	[IteratorStateMachine(typeof(<BackToPool>d__9))]
	private IEnumerator BackToPool()
	{
		return null;
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x941F78", Offset = "0x941F78", VA = "0x941F78")]
	public ParticleEmitter()
	{
	}
}
[Serializable]
[Token(Token = "0x200009D")]
public struct ParticleWithEmitCount
{
	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	public ParticleSystem ParticleSystem;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	public int EmmitCountMobile;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	public int EmmitCountPC;
}
[Token(Token = "0x200009E")]
public class RealisticRifleReloadEventHandler : MonoBehaviour
{
	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RealisticRifleReloadController realisticRifleReloadController;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AmmoController ammoController;

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x9420F8", Offset = "0x9420F8", VA = "0x9420F8")]
	public void ReleaseCradrige()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x942144", Offset = "0x942144", VA = "0x942144")]
	public void SetOpenChamber()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x942160", Offset = "0x942160", VA = "0x942160")]
	public RealisticRifleReloadEventHandler()
	{
	}
}
[Token(Token = "0x200009F")]
public class ReloadHighlightController : MonoBehaviourPun
{
	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Color highlightColor;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float highlightBlinkFrequency;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AmmoController ammoController;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private HighlightElement chamberLoaderHighlight;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private MagazineSpawnController magazineSpawnController;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private HVRGrabbable magazineGrabbable;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private HighlightElement currentHighlightElement;

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x942168", Offset = "0x942168", VA = "0x942168")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x9422EC", Offset = "0x9422EC", VA = "0x9422EC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x942520", Offset = "0x942520", VA = "0x942520")]
	private void OnAmmoChange()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x941BD8", Offset = "0x941BD8", VA = "0x941BD8")]
	public void InitMagazine(GameObject magazine)
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x942478", Offset = "0x942478", VA = "0x942478")]
	private void ResetMagazine()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x9425AC", Offset = "0x9425AC", VA = "0x9425AC")]
	private void SubscribeMagazineEvents()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x9426B0", Offset = "0x9426B0", VA = "0x9426B0")]
	private void UnsubscribeMagazineEvents()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x9427B4", Offset = "0x9427B4", VA = "0x9427B4")]
	private void DisableHighlight(HVRGrabberBase grabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x93E33C", Offset = "0x93E33C", VA = "0x93E33C")]
	public void EnableHighlight(HighlightElement highlightElement)
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x93ECEC", Offset = "0x93ECEC", VA = "0x93ECEC")]
	public void DisableCurrentElementHighlight()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x9419AC", Offset = "0x9419AC", VA = "0x9419AC")]
	public void DisableHighlight(HighlightElement highlightElement)
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x9427B8", Offset = "0x9427B8", VA = "0x9427B8")]
	private void EnableCurrentElementHighlight(HVRGrabberBase grabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x942574", Offset = "0x942574", VA = "0x942574")]
	private void EnableCurrentElementHighlight()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x9427BC", Offset = "0x9427BC", VA = "0x9427BC")]
	public ReloadHighlightController()
	{
	}
}
[Token(Token = "0x20000A0")]
public class ShellController : MonoBehaviourPun, IResetable
{
	[Token(Token = "0x20000A1")]
	[CompilerGenerated]
	private sealed class <BackToPoolCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShellController <>4__this;

		[Token(Token = "0x1700004F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002EF")]
			[Address(RVA = "0x942ADC", Offset = "0x942ADC", VA = "0x942ADC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002F1")]
			[Address(RVA = "0x942B24", Offset = "0x942B24", VA = "0x942B24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x9428E4", Offset = "0x9428E4", VA = "0x9428E4")]
		[DebuggerHidden]
		public <BackToPoolCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x942A00", Offset = "0x942A00", VA = "0x942A00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x942A04", Offset = "0x942A04", VA = "0x942A04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x942AE4", Offset = "0x942AE4", VA = "0x942AE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000A2")]
	[CompilerGenerated]
	private sealed class <EnableShellCollider>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShellController <>4__this;

		[Token(Token = "0x17000051")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002F5")]
			[Address(RVA = "0x942BA4", Offset = "0x942BA4", VA = "0x942BA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002F7")]
			[Address(RVA = "0x942BEC", Offset = "0x942BEC", VA = "0x942BEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x94290C", Offset = "0x94290C", VA = "0x94290C")]
		[DebuggerHidden]
		public <EnableShellCollider>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x942B2C", Offset = "0x942B2C", VA = "0x942B2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x942B30", Offset = "0x942B30", VA = "0x942B30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x942BAC", Offset = "0x942BAC", VA = "0x942BAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float colliderDelay;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Collider shellCollider;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WaitForSeconds waitForBackToPool;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private WaitForSeconds waitForShellCollider;

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x9427C4", Offset = "0x9427C4", VA = "0x9427C4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x9427FC", Offset = "0x9427FC", VA = "0x9427FC")]
	[IteratorStateMachine(typeof(<BackToPoolCoroutine>d__5))]
	private IEnumerator BackToPoolCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x942870", Offset = "0x942870", VA = "0x942870")]
	[IteratorStateMachine(typeof(<EnableShellCollider>d__6))]
	private IEnumerator EnableShellCollider()
	{
		return null;
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x942934", Offset = "0x942934", VA = "0x942934", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x942954", Offset = "0x942954", VA = "0x942954")]
	public ShellController()
	{
	}
}
[Token(Token = "0x20000A3")]
public class SnapActionReloadController : MonoBehaviour
{
	[Token(Token = "0x40003BF")]
	private const float minAngle = 1f;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform barrels;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Quaternion closedRotation;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Quaternion openedRotation;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private HVRGrabbable mainGrabbable;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private HVRGrabbable stabilizerGrabbable;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float angleChangeMultiplier;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float previousAngle;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isClosed;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool isOpened;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	private bool isClosedTarget;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	private bool isSnapping;

	[Token(Token = "0x17000053")]
	public bool IsOpened
	{
		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x93E278", Offset = "0x93E278", VA = "0x93E278")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000054")]
	public bool IsSnapping
	{
		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x942BF4", Offset = "0x942BF4", VA = "0x942BF4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000004")]
	public event Action OnClosed
	{
		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x93E1DC", Offset = "0x93E1DC", VA = "0x93E1DC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x93E764", Offset = "0x93E764", VA = "0x93E764")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action OnOpened
	{
		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x93E140", Offset = "0x93E140", VA = "0x93E140")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x93E6C8", Offset = "0x93E6C8", VA = "0x93E6C8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x942BFC", Offset = "0x942BFC", VA = "0x942BFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x942C08", Offset = "0x942C08", VA = "0x942C08")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x942CB0", Offset = "0x942CB0", VA = "0x942CB0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x942D58", Offset = "0x942D58", VA = "0x942D58")]
	private void Update()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x93E358", Offset = "0x93E358", VA = "0x93E358")]
	public void StartSnapping(bool isClosedTarget)
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x942F48", Offset = "0x942F48", VA = "0x942F48")]
	private void UpdateBarrelsInHandRotation()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x942F64", Offset = "0x942F64", VA = "0x942F64")]
	private void UpdateGrabbedBarrelsRotation()
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x943350", Offset = "0x943350", VA = "0x943350")]
	private void CacheBarrelsAngle(HVRHandGrabber grabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x942F4C", Offset = "0x942F4C", VA = "0x942F4C")]
	private void CacheBarrelsAngle()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x943114", Offset = "0x943114", VA = "0x943114")]
	private float GetCurrentBarrelsAngle()
	{
		return default(float);
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x943368", Offset = "0x943368", VA = "0x943368")]
	public SnapActionReloadController()
	{
	}
}
[Token(Token = "0x20000A4")]
public class HeadCollider : MonoBehaviourPun
{
	[Token(Token = "0x6000309")]
	[Address(RVA = "0x943370", Offset = "0x943370", VA = "0x943370")]
	public HeadCollider()
	{
	}
}
[Token(Token = "0x20000A5")]
public class HelmetModelInfo : MonoBehaviour
{
	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EquipmentItemKey equipmentItemKey;

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x9350DC", Offset = "0x9350DC", VA = "0x9350DC")]
	internal void ShowModel()
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x935158", Offset = "0x935158", VA = "0x935158")]
	internal void HideModel()
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x943378", Offset = "0x943378", VA = "0x943378")]
	public HelmetModelInfo()
	{
	}
}
[Token(Token = "0x20000A6")]
public class GrabbableSlider : MonoBehaviour
{
	[Token(Token = "0x40003CE")]
	private const float minimalDistance = 0.0001f;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform movementStartPoint;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform movementEndPoint;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HVRGrabbable grabbable;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform sliderHolder;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform controller;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 handPositionWhenGrabbed;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float startingDistance;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float fullMoveDistance;

	[Token(Token = "0x17000055")]
	public float NormalizedPosition
	{
		[Token(Token = "0x600030D")]
		[Address(RVA = "0x943380", Offset = "0x943380", VA = "0x943380")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x94345C", Offset = "0x94345C", VA = "0x94345C")]
	public bool GetIsOnStart()
	{
		return default(bool);
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x9434E8", Offset = "0x9434E8", VA = "0x9434E8")]
	public bool GetIsOnEnd()
	{
		return default(bool);
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x943574", Offset = "0x943574", VA = "0x943574")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x943640", Offset = "0x943640", VA = "0x943640")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x9436E8", Offset = "0x9436E8", VA = "0x9436E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x9439FC", Offset = "0x9439FC", VA = "0x9439FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x943AA4", Offset = "0x943AA4", VA = "0x943AA4")]
	private void CacheData(HVRHandGrabber grabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x94374C", Offset = "0x94374C", VA = "0x94374C")]
	private Vector3 GetHandMovementVector()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x943BC4", Offset = "0x943BC4", VA = "0x943BC4")]
	public GrabbableSlider()
	{
	}
}
[Token(Token = "0x20000A7")]
public class HVRGrabberSynchronizer : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x20000A8")]
	[CompilerGenerated]
	private sealed class <UpdateGrabbedItemCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRGrabberSynchronizer <>4__this;

		[Token(Token = "0x17000057")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000323")]
			[Address(RVA = "0x9FAB38", Offset = "0x9FAB38", VA = "0x9FAB38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000325")]
			[Address(RVA = "0x9FAB80", Offset = "0x9FAB80", VA = "0x9FAB80", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x9FA930", Offset = "0x9FA930", VA = "0x9FA930")]
		[DebuggerHidden]
		public <UpdateGrabbedItemCoroutine>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x9FA9D4", Offset = "0x9FA9D4", VA = "0x9FA9D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x9FA9D8", Offset = "0x9FA9D8", VA = "0x9FA9D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x9FAB40", Offset = "0x9FAB40", VA = "0x9FAB40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private HVRHandGrabber handGrabber;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int grabbedItemID;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int previousGrabbedItemID;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private HVRGrabbable usedGrabbable;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private WaitForEndOfFrame frameDelay;

	[Token(Token = "0x17000056")]
	private int GrabbedItemID
	{
		[Token(Token = "0x6000317")]
		[Address(RVA = "0x9FA4D0", Offset = "0x9FA4D0", VA = "0x9FA4D0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000318")]
		[Address(RVA = "0x9FA4D8", Offset = "0x9FA4D8", VA = "0x9FA4D8")]
		set
		{
		}
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x9FA4E0", Offset = "0x9FA4E0", VA = "0x9FA4E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x9FA60C", Offset = "0x9FA60C", VA = "0x9FA60C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x9FA710", Offset = "0x9FA710", VA = "0x9FA710")]
	private void AssignGrabbedItem(HVRGrabberBase handGrabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x9FA7C4", Offset = "0x9FA7C4", VA = "0x9FA7C4")]
	private void RemoveGrabbedItem(HVRGrabberBase handGrabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x9FA7D0", Offset = "0x9FA7D0", VA = "0x9FA7D0", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x9FA8BC", Offset = "0x9FA8BC", VA = "0x9FA8BC")]
	[IteratorStateMachine(typeof(<UpdateGrabbedItemCoroutine>d__13))]
	private IEnumerator UpdateGrabbedItemCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x9FA958", Offset = "0x9FA958", VA = "0x9FA958")]
	public HVRGrabberSynchronizer()
	{
	}
}
[Token(Token = "0x20000A9")]
public class HVRItemToHandsSetter : MonoBehaviour
{
	[Token(Token = "0x20000AA")]
	[CompilerGenerated]
	private sealed class <WaitForItemGrabReadinesCoroutine>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRItemToHandsSetter <>4__this;

		[Token(Token = "0x17000059")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000335")]
			[Address(RVA = "0x9FB1C8", Offset = "0x9FB1C8", VA = "0x9FB1C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000337")]
			[Address(RVA = "0x9FB210", Offset = "0x9FB210", VA = "0x9FB210", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0x9FB054", Offset = "0x9FB054", VA = "0x9FB054")]
		[DebuggerHidden]
		public <WaitForItemGrabReadinesCoroutine>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0x9FB120", Offset = "0x9FB120", VA = "0x9FB120", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0x9FB124", Offset = "0x9FB124", VA = "0x9FB124", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0x9FB1D0", Offset = "0x9FB1D0", VA = "0x9FB1D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000AB")]
	[CompilerGenerated]
	private sealed class <SetToHandsCoroutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRItemToHandsSetter <>4__this;

		[Token(Token = "0x1700005B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600033B")]
			[Address(RVA = "0x9FB2C0", Offset = "0x9FB2C0", VA = "0x9FB2C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600033D")]
			[Address(RVA = "0x9FB308", Offset = "0x9FB308", VA = "0x9FB308", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0x9FB07C", Offset = "0x9FB07C", VA = "0x9FB07C")]
		[DebuggerHidden]
		public <SetToHandsCoroutine>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0x9FB218", Offset = "0x9FB218", VA = "0x9FB218", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0x9FB21C", Offset = "0x9FB21C", VA = "0x9FB21C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0x9FB2C8", Offset = "0x9FB2C8", VA = "0x9FB2C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HVRGrabbable hvrGrabbable;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private HVRHandGrabber hvrHandGrabber;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HVRHandAnimator handAnimator;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WaitForEndOfFrame waitForEndOfFrame;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private WaitUntil waitForGrabReadiness;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isReadyToBeGrabbed;

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x9FAB88", Offset = "0x9FAB88", VA = "0x9FAB88")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x9FAC3C", Offset = "0x9FAC3C", VA = "0x9FAC3C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x9FAD70", Offset = "0x9FAD70", VA = "0x9FAD70")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x9FAE28", Offset = "0x9FAE28", VA = "0x9FAE28")]
	private void EnableHovering(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x9FAE48", Offset = "0x9FAE48", VA = "0x9FAE48")]
	public void SetToHands()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x9FAEDC", Offset = "0x9FAEDC", VA = "0x9FAEDC")]
	public void Release()
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x9FAF74", Offset = "0x9FAF74", VA = "0x9FAF74")]
	public void EnableAnimation(string animationParameter)
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x9FAFE4", Offset = "0x9FAFE4", VA = "0x9FAFE4")]
	public void DisableAnimation(string animationParameter)
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x9FACFC", Offset = "0x9FACFC", VA = "0x9FACFC")]
	[IteratorStateMachine(typeof(<WaitForItemGrabReadinesCoroutine>d__14))]
	private IEnumerator WaitForItemGrabReadinesCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x9FAE68", Offset = "0x9FAE68", VA = "0x9FAE68")]
	[IteratorStateMachine(typeof(<SetToHandsCoroutine>d__15))]
	private IEnumerator SetToHandsCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x9FB0A4", Offset = "0x9FB0A4", VA = "0x9FB0A4")]
	public HVRItemToHandsSetter()
	{
	}
}
[Token(Token = "0x20000AC")]
public class RemotePlayerColliderDisabler : MonoBehaviourPun
{
	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<Collider> colliders;

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x9FB310", Offset = "0x9FB310", VA = "0x9FB310")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x9FB3B0", Offset = "0x9FB3B0", VA = "0x9FB3B0")]
	public RemotePlayerColliderDisabler()
	{
	}
}
[Token(Token = "0x20000AD")]
public class IceExplosionParticlesController : MonoBehaviour
{
	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ParticleSystem orcExplosionParticleSystemFog;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem orcExplosionParticleSystemFragments;

	[Token(Token = "0x40003EE")]
	private const float minRandomOffset = -1f;

	[Token(Token = "0x40003EF")]
	private const float maxRandomOffset = 1f;

	[Token(Token = "0x40003F0")]
	private const float heightFragmentsMultiplier = 2f;

	[Token(Token = "0x40003F1")]
	private const float arrowFogDirectionMultiplier = 2f;

	[Token(Token = "0x40003F2")]
	private const float fragmentsMultiplier = 5f;

	[Token(Token = "0x40003F3")]
	private const int sizeComparisonCoefficient = 4;

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x9FB3E8", Offset = "0x9FB3E8", VA = "0x9FB3E8")]
	public void AdjustFogParticles(Vector3 hitDirection)
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x9FB60C", Offset = "0x9FB60C", VA = "0x9FB60C")]
	public void AdjustFragmentParticles(Vector3 hitDirection)
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x9FB5A0", Offset = "0x9FB5A0", VA = "0x9FB5A0")]
	private static bool DifferenceBetweenAxesIsSmallEnough(Vector3 hitDirection)
	{
		return default(bool);
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x9FB5BC", Offset = "0x9FB5BC", VA = "0x9FB5BC")]
	private static void RandomizeOneAxis(Vector3 hitDirection, ref ParticleSystem.MinMaxCurve minMaxCurveX, ref ParticleSystem.MinMaxCurve minMaxCurveZ)
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x9FB82C", Offset = "0x9FB82C", VA = "0x9FB82C")]
	public void SetReferences(ParticleSystem _orcExplosionParticleSystemFog, ParticleSystem _orcExplosionParticleSystemFragments)
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x9FB85C", Offset = "0x9FB85C", VA = "0x9FB85C")]
	public IceExplosionParticlesController()
	{
	}
}
[Token(Token = "0x20000AE")]
public class IceShieldCollision : MonoBehaviour
{
	[Token(Token = "0x6000347")]
	[Address(RVA = "0x9FB864", Offset = "0x9FB864", VA = "0x9FB864")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x9FB970", Offset = "0x9FB970", VA = "0x9FB970")]
	public IceShieldCollision()
	{
	}
}
[Token(Token = "0x20000AF")]
public class IceShieldShards : MonoBehaviour
{
	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem shards;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform center;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x9FB978", Offset = "0x9FB978", VA = "0x9FB978")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x9FBA3C", Offset = "0x9FBA3C", VA = "0x9FBA3C")]
	public IceShieldShards()
	{
	}
}
[Token(Token = "0x20000B0")]
public class KillTrailRendererEffect : MonoBehaviourPun
{
	[Token(Token = "0x20000B1")]
	[CompilerGenerated]
	private sealed class <DisableRendererLightAfterTime>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KillTrailRendererEffect <>4__this;

		[Token(Token = "0x1700005D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000351")]
			[Address(RVA = "0x9FBC64", Offset = "0x9FBC64", VA = "0x9FBC64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000353")]
			[Address(RVA = "0x9FBCAC", Offset = "0x9FBCAC", VA = "0x9FBCAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x9FBB60", Offset = "0x9FBB60", VA = "0x9FBB60")]
		[DebuggerHidden]
		public <DisableRendererLightAfterTime>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0x9FBB98", Offset = "0x9FBB98", VA = "0x9FBB98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0x9FBB9C", Offset = "0x9FBB9C", VA = "0x9FBB9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0x9FBC6C", Offset = "0x9FBC6C", VA = "0x9FBC6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TrailRendererEnabler trailRendererEnabler;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject hitLightIndicator;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 trailRenderererStartingPosition;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float timeToDisable;

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x9FBA44", Offset = "0x9FBA44", VA = "0x9FBA44")]
	[PunRPC]
	public void RpcShowTrailRendererForKilledPlayer()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x9FBADC", Offset = "0x9FBADC", VA = "0x9FBADC")]
	[IteratorStateMachine(typeof(<DisableRendererLightAfterTime>d__5))]
	private IEnumerator DisableRendererLightAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x9FBB88", Offset = "0x9FBB88", VA = "0x9FBB88")]
	public KillTrailRendererEffect()
	{
	}
}
[Token(Token = "0x20000B2")]
public class LastFramePositionContainer : MonoBehaviour
{
	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 lastPosition;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool hasCreatedOnEnterEffect;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool hasCreaterOnExitEffect;

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x9FBCB4", Offset = "0x9FBCB4", VA = "0x9FBCB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x9FBCE4", Offset = "0x9FBCE4", VA = "0x9FBCE4")]
	public LastFramePositionContainer()
	{
	}
}
[Token(Token = "0x20000B3")]
public class LobbyContentSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject oldLobby;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject newLobby;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ServerListController newServerListController;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ServerListController oldServerListController;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject smallTournamentCanvas;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject smallTournamentCanvasHolder;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject smallTournamentCanvasHolderMobile;

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x9FBCEC", Offset = "0x9FBCEC", VA = "0x9FBCEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x9FBE70", Offset = "0x9FBE70", VA = "0x9FBE70")]
	public LobbyContentSwitcher()
	{
	}
}
[Token(Token = "0x20000B4")]
public static class LuxWaterUtils
{
	[Token(Token = "0x20000B5")]
	public struct GersterWavesDescription
	{
		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 intensity;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector4 steepness;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector4 amp;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector4 freq;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector4 speed;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector4 dirAB;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector4 dirCD;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector4 secondaryWaveParams;
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x9FBE78", Offset = "0x9FBE78", VA = "0x9FBE78")]
	public static void GetGersterWavesDescription(ref GersterWavesDescription Description, Material WaterMaterial)
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x9FC028", Offset = "0x9FC028", VA = "0x9FC028")]
	public static Vector3 InternalGetGestnerDisplacement(Vector2 xzVtx, Vector4 intensity, Vector4 steepness, Vector4 amp, Vector4 freq, Vector4 speed, Vector4 dirAB, Vector4 dirCD, float TimeOffset)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x9FC320", Offset = "0x9FC320", VA = "0x9FC320")]
	public static Vector3 GetGestnerDisplacement(Vector3 WorldPosition, GersterWavesDescription Description, float TimeOffset)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0x9FC4EC", Offset = "0x9FC4EC", VA = "0x9FC4EC")]
	public static Vector3 GetGestnerDisplacementSingle(Vector3 WorldPosition, GersterWavesDescription Description, float TimeOffset)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20000B6")]
public class MainMenuTournamentResultsResetter : MonoBehaviour
{
	[Token(Token = "0x600035C")]
	[Address(RVA = "0x9FC748", Offset = "0x9FC748", VA = "0x9FC748")]
	private void Start()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x9FC750", Offset = "0x9FC750", VA = "0x9FC750")]
	public MainMenuTournamentResultsResetter()
	{
	}
}
[Token(Token = "0x20000B7")]
public class MaterialsManager : MonoBehaviour
{
	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Material> defaultMaterials;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int numberOfMeshes;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool isDefaultMaterialAssigned;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Renderer> meshes;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material atlasMaterial;

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x9FC758", Offset = "0x9FC758", VA = "0x9FC758")]
	public void AssignDefaultMaterials()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x9FC8E4", Offset = "0x9FC8E4", VA = "0x9FC8E4")]
	public void SetDefaultMaterial()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x9FC9A8", Offset = "0x9FC9A8", VA = "0x9FC9A8")]
	public void SetAtlasMaterial()
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x9FCA30", Offset = "0x9FCA30", VA = "0x9FCA30")]
	public MaterialsManager()
	{
	}
}
[Token(Token = "0x20000B8")]
public class MaterialsManagerController : MonoBehaviour
{
	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<MaterialsManager> materialsManagerItems;

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x9FCA38", Offset = "0x9FCA38", VA = "0x9FCA38")]
	public void TestDefaultMaterials()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x9FCB80", Offset = "0x9FCB80", VA = "0x9FCB80")]
	public void TestAtlasMaterials()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x9FCCC8", Offset = "0x9FCCC8", VA = "0x9FCCC8")]
	public MaterialsManagerController()
	{
	}
}
[Token(Token = "0x20000B9")]
public class MeleeWeaponModelSwaper : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AttachedItemController attachedItemController;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ThrowableWeaponAttacher throwableWeaponAttacher;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private BodyDissapearController bodyDissapearController;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject outlineModel;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject fadeModel;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isFadingMaterial;

	[Token(Token = "0x1700005F")]
	private bool IsFadingMaterial
	{
		[Token(Token = "0x6000365")]
		[Address(RVA = "0x9FCCD0", Offset = "0x9FCCD0", VA = "0x9FCCD0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000366")]
		[Address(RVA = "0x9FCCD8", Offset = "0x9FCCD8", VA = "0x9FCCD8")]
		set
		{
		}
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x9FCD7C", Offset = "0x9FCD7C", VA = "0x9FCD7C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x9FCEE0", Offset = "0x9FCEE0", VA = "0x9FCEE0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x9FCCFC", Offset = "0x9FCCFC", VA = "0x9FCCFC")]
	private void SetFadingMaterial()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x9FCD34", Offset = "0x9FCD34", VA = "0x9FCD34")]
	private void SetStandardMaterial()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x9FD044", Offset = "0x9FD044", VA = "0x9FD044")]
	private void ChangeForModelWithFadeMaterial()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x9FD08C", Offset = "0x9FD08C", VA = "0x9FD08C")]
	private void ChangeForModelWithOutlineMaterial()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x9FD0CC", Offset = "0x9FD0CC", VA = "0x9FD0CC", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x9FD194", Offset = "0x9FD194", VA = "0x9FD194")]
	public MeleeWeaponModelSwaper()
	{
	}
}
[Token(Token = "0x20000BA")]
public class MinimalSDKGameObjectDisabler : MonoBehaviour
{
	[Token(Token = "0x600036F")]
	[Address(RVA = "0x9FD19C", Offset = "0x9FD19C", VA = "0x9FD19C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x9FD1A0", Offset = "0x9FD1A0", VA = "0x9FD1A0")]
	public MinimalSDKGameObjectDisabler()
	{
	}
}
[Token(Token = "0x20000BB")]
[ExecuteInEditMode]
public class rRotate_V1_Trees : MonoBehaviour
{
	[Token(Token = "0x6000371")]
	[Address(RVA = "0x9FD1A8", Offset = "0x9FD1A8", VA = "0x9FD1A8")]
	private void _Transform()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x9FD264", Offset = "0x9FD264", VA = "0x9FD264")]
	private void Start()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x9FD268", Offset = "0x9FD268", VA = "0x9FD268")]
	private void Update()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x9FD26C", Offset = "0x9FD26C", VA = "0x9FD26C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x9FD270", Offset = "0x9FD270", VA = "0x9FD270")]
	public rRotate_V1_Trees()
	{
	}
}
[Token(Token = "0x20000BC")]
public class DAX_MainCamera_V1Trees : MonoBehaviour
{
	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Bushes;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text OutText;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int curIndex;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject curPrefab;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 c_OrbitVector;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float CameraRotationSpeed;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float cRotationMoment;

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x9FD278", Offset = "0x9FD278", VA = "0x9FD278")]
	private void Start()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x9FD3E4", Offset = "0x9FD3E4", VA = "0x9FD3E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x9FD4D4", Offset = "0x9FD4D4", VA = "0x9FD4D4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x9FD5A4", Offset = "0x9FD5A4", VA = "0x9FD5A4")]
	public void Next()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x9FD5D8", Offset = "0x9FD5D8", VA = "0x9FD5D8")]
	public void Prev()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x9FD2D0", Offset = "0x9FD2D0", VA = "0x9FD2D0")]
	public void showPrefab(int index)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x9FD60C", Offset = "0x9FD60C", VA = "0x9FD60C")]
	public DAX_MainCamera_V1Trees()
	{
	}
}
[Token(Token = "0x20000BD")]
[ExecuteInEditMode]
public class rRotate_V2_Trees : MonoBehaviour
{
	[Token(Token = "0x600037D")]
	[Address(RVA = "0x9FD61C", Offset = "0x9FD61C", VA = "0x9FD61C")]
	private void _Transform()
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x9FD6D8", Offset = "0x9FD6D8", VA = "0x9FD6D8")]
	private void Start()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x9FD6DC", Offset = "0x9FD6DC", VA = "0x9FD6DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x9FD6E0", Offset = "0x9FD6E0", VA = "0x9FD6E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x9FD6E4", Offset = "0x9FD6E4", VA = "0x9FD6E4")]
	public rRotate_V2_Trees()
	{
	}
}
[Token(Token = "0x20000BE")]
public class MovingDirectionArrowController : MonoBehaviour
{
	[Token(Token = "0x20000BF")]
	public delegate void ReachedEnd(MovingDirectionArrowController mdac);

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BezierArrowFollower routeFollower;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject arrowModel;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator animator;

	[Token(Token = "0x14000006")]
	public static event ReachedEnd OnEndReached
	{
		[Token(Token = "0x6000382")]
		[Address(RVA = "0x9FD6EC", Offset = "0x9FD6EC", VA = "0x9FD6EC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000383")]
		[Address(RVA = "0x9FD7A4", Offset = "0x9FD7A4", VA = "0x9FD7A4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x9FD85C", Offset = "0x9FD85C", VA = "0x9FD85C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x9FD8E8", Offset = "0x9FD8E8", VA = "0x9FD8E8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x9FD974", Offset = "0x9FD974", VA = "0x9FD974")]
	private void ReportReachedEnd()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x9FD9F4", Offset = "0x9FD9F4", VA = "0x9FD9F4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x9FD9F8", Offset = "0x9FD9F8", VA = "0x9FD9F8")]
	public void FollowRoute()
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x9FDA30", Offset = "0x9FDA30", VA = "0x9FDA30")]
	public void Appear(bool shouldActivate)
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x9FDACC", Offset = "0x9FDACC", VA = "0x9FDACC")]
	public void Disappear(bool shouldDeactivate)
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0x9FDB88", Offset = "0x9FDB88", VA = "0x9FDB88")]
	private void HideSelf()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x9FDBA8", Offset = "0x9FDBA8", VA = "0x9FDBA8")]
	private void DeactivateSelf()
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x9FDBCC", Offset = "0x9FDBCC", VA = "0x9FDBCC")]
	public MovingDirectionArrowController()
	{
	}
}
[Token(Token = "0x20000C0")]
[ExecuteInEditMode]
public class NM_Wind : MonoBehaviour
{
	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Wind Speed in Kilometers per hour")]
	[Header("General Parameters")]
	public float WindSpeed;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 2f)]
	[Tooltip("Wind Turbulence in percentage of wind Speed")]
	public float Turbulence;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Noise Parameters")]
	[Tooltip("Texture used for wind turbulence")]
	public Texture2D NoiseTexture;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Size of one world tiling patch of the Noise Texture, for bending trees")]
	public float FlexNoiseWorldSize;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Size of one world tiling patch of the Noise Texture, for leaf shivering")]
	public float ShiverNoiseWorldSize;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Gust Parameters")]
	[Tooltip("Texture used for wind gusts")]
	public Texture2D GustMaskTexture;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Size of one world tiling patch of the Gust Texture, for leaf shivering")]
	public float GustWorldSize;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("Wind Gust Speed in Kilometers per hour")]
	public float GustSpeed;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Wind Gust Influence on trees")]
	public float GustScale;

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x9FDD58", Offset = "0x9FDD58", VA = "0x9FDD58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x9FDF1C", Offset = "0x9FDF1C", VA = "0x9FDF1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x9FDF20", Offset = "0x9FDF20", VA = "0x9FDF20")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x9FDD5C", Offset = "0x9FDD5C", VA = "0x9FDD5C")]
	private void ApplySettings()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x9FDF24", Offset = "0x9FDF24", VA = "0x9FDF24")]
	private Vector4 GetDirectionAndSpeed()
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x9FE028", Offset = "0x9FE028", VA = "0x9FE028")]
	public NM_Wind()
	{
	}
}
[Token(Token = "0x20000C1")]
[RequireComponent(typeof(MeshFilter))]
public class LakePolygon : MonoBehaviour
{
	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LakePolygonProfile currentProfile;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LakePolygonProfile oldProfile;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Vector3> points;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Vector3> splinePoints;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve terrainCarve;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float distSmooth;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float uvScale;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float distSmoothStart;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve terrainPaintCarve;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int currentSplatMap;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float maximumTriangleSize;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float traingleDensity;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float height;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool lockHeight;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float yOffset;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float trianglesGenerated;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Mesh currentMesh;

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x9FE05C", Offset = "0x9FE05C", VA = "0x9FE05C")]
	public void AddPoint(Vector3 position)
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x9FE134", Offset = "0x9FE134", VA = "0x9FE134")]
	public void AddPointAfter(int i)
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x9FE380", Offset = "0x9FE380", VA = "0x9FE380")]
	public void ChangePointPosition(int i, Vector3 position)
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x9FE400", Offset = "0x9FE400", VA = "0x9FE400")]
	public void RemovePoint(int i)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x9FE47C", Offset = "0x9FE47C", VA = "0x9FE47C")]
	public void RemovePoints(int fromID = -1)
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x9FE4E8", Offset = "0x9FE4E8", VA = "0x9FE4E8")]
	private void CenterPivot()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x9FE684", Offset = "0x9FE684", VA = "0x9FE684")]
	public void GeneratePolygon()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x9FF844", Offset = "0x9FF844", VA = "0x9FF844")]
	public static LakePolygon CreatePolygon(Material material, [Optional] List<Vector3> positions)
	{
		return null;
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x9FF5E4", Offset = "0x9FF5E4", VA = "0x9FF5E4")]
	private void DisplayCatmullRomSpline(int pos)
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x9FF9D8", Offset = "0x9FF9D8", VA = "0x9FF9D8")]
	public int ClampListPos(int pos)
	{
		return default(int);
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x9FFA54", Offset = "0x9FFA54", VA = "0x9FFA54")]
	private Vector3 GetCatmullRomPosition(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x9FFB5C", Offset = "0x9FFB5C", VA = "0x9FFB5C")]
	public LakePolygon()
	{
	}
}
[Token(Token = "0x20000C2")]
[CreateAssetMenu(fileName = "LakePolygonProfile", menuName = "LakePolygonProfile", order = 1)]
public class LakePolygonProfile : ScriptableObject
{
	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material lakeMaterial;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve terrainCarve;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distSmooth;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float uvScale;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float distSmoothStart;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve terrainPaintCarve;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int currentSplatMap;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float maximumTriangleSize;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float traingleDensity;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int biomeType;

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x9FFE30", Offset = "0x9FFE30", VA = "0x9FFE30")]
	public LakePolygonProfile()
	{
	}
}
[Token(Token = "0x20000C3")]
public class MeshColoringRam : MonoBehaviour
{
	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float height;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float threshold;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool autoColor;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool newMesh;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 oldPosition;

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xA00088", Offset = "0xA00088", VA = "0xA00088")]
	public MeshColoringRam()
	{
	}
}
[Token(Token = "0x20000C4")]
[RequireComponent(typeof(MeshFilter))]
public class RamSpline : MonoBehaviour
{
	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SplineProfile currentProfile;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SplineProfile oldProfile;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<RamSpline> beginnigChildSplines;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<RamSpline> endingChildSplines;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RamSpline beginningSpline;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RamSpline endingSpline;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int beginningConnectionID;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int endingConnectionID;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float beginningMinWidth;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float beginningMaxWidth;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float endingMinWidth;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float endingMaxWidth;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int toolbarInt;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool invertUVDirection;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool uvRotation;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MeshFilter meshfilter;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<Vector4> controlPoints;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<Quaternion> controlPointsRotations;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<Quaternion> controlPointsOrientation;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<Vector3> controlPointsUp;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public List<Vector3> controlPointsDown;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public List<float> controlPointsSnap;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AnimationCurve meshCurve;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public List<AnimationCurve> controlPointsMeshCurves;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool normalFromRaycast;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	public bool snapToTerrain;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public LayerMask snapMask;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<Vector3> points;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public List<Vector3> pointsUp;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public List<Vector3> pointsDown;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public List<Vector3> points2;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public List<Vector3> verticesBeginning;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public List<Vector3> verticesEnding;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public List<Vector3> normalsBeginning;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public List<Vector3> normalsEnding;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public List<float> widths;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public List<float> snaps;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public List<float> lerpValues;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public List<Quaternion> orientations;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public List<Vector3> tangents;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public List<Vector3> normalsList;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Color[] colors;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public List<Vector2> colorsFlowMap;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public bool generateOnStart;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public float minVal;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float maxVal;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public float width;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public int vertsInShape;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	public float traingleDensity;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public float uvScale;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Material oldMaterial;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public bool showVertexColors;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
	public bool showFlowMap;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x162")]
	public bool overrideFlowMap;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x163")]
	public bool drawOnMesh;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public bool drawOnMeshFlowMap;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x165")]
	public bool uvScaleOverride;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x166")]
	public bool debug;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Color drawColor;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public bool drawOnMultiple;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	public float flowSpeed;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public float flowDirection;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public AnimationCurve flowFlat;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public AnimationCurve flowWaterfall;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public float opacity;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	public float drawSize;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public float length;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	public float fulllength;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public float minMaxWidth;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	public float uvWidth;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public float uvBeginning;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	public bool receiveShadows;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public ShadowCastingMode shadowCastingMode;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	public bool generateMeshParts;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public int meshPartsCount;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public List<Transform> meshesPartTransforms;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public float simulatedRiverLength;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	public int simulatedRiverPoints;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public float simulationMinStepSize;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	public int detailTerrain;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public int detailTerrainForward;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public float terrainAdditionalWidth;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public float terrainSmoothMultiplier;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public AnimationCurve terrainCarve;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public float distSmooth;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	public float distSmoothStart;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public AnimationCurve terrainPaintCarve;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	public int currentSplatMap;

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xA000F8", Offset = "0xA000F8", VA = "0xA000F8")]
	public void Start()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xA00F88", Offset = "0xA00F88", VA = "0xA00F88")]
	public static RamSpline CreateSpline([Optional] Material splineMaterial, [Optional] List<Vector4> positions)
	{
		return null;
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xA0111C", Offset = "0xA0111C", VA = "0xA0111C")]
	public void AddPoint(Vector4 position)
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xA014CC", Offset = "0xA014CC", VA = "0xA014CC")]
	public void AddPointAfter(int i)
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xA01924", Offset = "0xA01924", VA = "0xA01924")]
	public void ChangePointPosition(int i, Vector3 position)
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xA0192C", Offset = "0xA0192C", VA = "0xA0192C")]
	public void ChangePointPosition(int i, Vector4 position)
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xA019E0", Offset = "0xA019E0", VA = "0xA019E0")]
	public void RemovePoint(int i)
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xA01AD4", Offset = "0xA01AD4", VA = "0xA01AD4")]
	public void RemovePoints(int fromID = -1)
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xA01B40", Offset = "0xA01B40", VA = "0xA01B40")]
	public void GenerateBeginningParentBased()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xA01E20", Offset = "0xA01E20", VA = "0xA01E20")]
	public void GenerateEndingParentBased()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xA00108", Offset = "0xA00108", VA = "0xA00108")]
	public void GenerateSpline([Optional] List<RamSpline> generatedSplines)
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xA02104", Offset = "0xA02104", VA = "0xA02104")]
	private void CalculateCatmullRomSideSplines(List<Vector4> controlPoints, int pos)
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xA02948", Offset = "0xA02948", VA = "0xA02948")]
	private void CalculateCatmullRomSplineParameters(List<Vector4> controlPoints, int pos, bool initialPoints = false)
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xA02C20", Offset = "0xA02C20", VA = "0xA02C20")]
	private void CalculateCatmullRomSpline(List<Vector3> controlPoints, int pos, ref List<Vector3> points)
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xA06078", Offset = "0xA06078", VA = "0xA06078")]
	private void CalculatePointPosition(List<Vector3> controlPoints, int pos, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t, ref List<Vector3> points)
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xA05648", Offset = "0xA05648", VA = "0xA05648")]
	private void CalculatePointParameters(List<Vector4> controlPoints, int pos, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xA05388", Offset = "0xA05388", VA = "0xA05388")]
	private int ClampListPos(int pos)
	{
		return default(int);
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xA05404", Offset = "0xA05404", VA = "0xA05404")]
	private Vector3 GetCatmullRomPosition(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xA0550C", Offset = "0xA0550C", VA = "0xA0550C")]
	private Vector3 GetCatmullRomTangent(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xA055FC", Offset = "0xA055FC", VA = "0xA055FC")]
	private Vector3 CalculateNormal(Vector3 tangent, Vector3 up)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xA02EF4", Offset = "0xA02EF4", VA = "0xA02EF4")]
	private void GenerateMesh(ref Mesh mesh)
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xA063A0", Offset = "0xA063A0", VA = "0xA063A0")]
	public void GenerateMeshParts(Mesh baseMesh)
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xA06328", Offset = "0xA06328", VA = "0xA06328")]
	private float FlowCalculate(float u, float normalY)
	{
		return default(float);
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xA07404", Offset = "0xA07404", VA = "0xA07404")]
	public RamSpline()
	{
	}
}
[Token(Token = "0x20000C5")]
[CreateAssetMenu(fileName = "SplineProfile", menuName = "SplineProfile", order = 1)]
public class SplineProfile : ScriptableObject
{
	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material splineMaterial;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve meshCurve;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minVal;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxVal;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int vertsInShape;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float traingleDensity;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float uvScale;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool uvRotation;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve flowFlat;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve flowWaterfall;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve terrainCarve;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float distSmooth;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float distSmoothStart;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve terrainPaintCarve;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool receiveShadows;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public ShadowCastingMode shadowCastingMode;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int biomeType;

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xA07F1C", Offset = "0xA07F1C", VA = "0xA07F1C")]
	public SplineProfile()
	{
	}
}
[Token(Token = "0x20000C6")]
public class OnAnimationWaterSplashController : MonoBehaviour
{
	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private WaterSplashController leftFootWaterSplashController;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private WaterSplashController rightFootWaterSplashController;

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xA08470", Offset = "0xA08470", VA = "0xA08470")]
	public void OnAnimationRightFootWaterSplash()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xA0849C", Offset = "0xA0849C", VA = "0xA0849C")]
	public void OnAnimationLeftFootWaterSplash()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xA084C8", Offset = "0xA084C8", VA = "0xA084C8")]
	public void SetReferences(WaterSplashController _leftFootWaterSplashController, WaterSplashController _rightFootWaterSplashController)
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xA084F8", Offset = "0xA084F8", VA = "0xA084F8")]
	public OnAnimationWaterSplashController()
	{
	}
}
[Token(Token = "0x20000C7")]
public class OnJoinCanvasDisabler : MonoBehaviour
{
	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject miniCanvasObjectToDisable;

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xA08500", Offset = "0xA08500", VA = "0xA08500")]
	public void DisableCanvas()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xA08520", Offset = "0xA08520", VA = "0xA08520")]
	public OnJoinCanvasDisabler()
	{
	}
}
[Token(Token = "0x20000C8")]
public class OrcBoatCollider : MonoBehaviour
{
	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xA08528", Offset = "0xA08528", VA = "0xA08528")]
	public OrcBoatCollider()
	{
	}
}
[Token(Token = "0x20000C9")]
public class OrcCounter : MonoBehaviour
{
	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int howManyOrcsShouldLeave;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int orcCount;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action AllOrcsLeft;

	[Token(Token = "0x17000060")]
	public int OrcCount
	{
		[Token(Token = "0x60003C8")]
		[Address(RVA = "0xA08630", Offset = "0xA08630", VA = "0xA08630")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60003C9")]
		[Address(RVA = "0xA08604", Offset = "0xA08604", VA = "0xA08604")]
		private set
		{
		}
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xA08530", Offset = "0xA08530", VA = "0xA08530")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xA08538", Offset = "0xA08538", VA = "0xA08538")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xA08638", Offset = "0xA08638", VA = "0xA08638")]
	public void SetHowManyOrcsShouldLeave(int howManyOrcsShouldLeave)
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xA08640", Offset = "0xA08640", VA = "0xA08640")]
	public OrcCounter()
	{
	}
}
[Token(Token = "0x20000CA")]
public class OrcNamer : MonoBehaviour
{
	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject nameObject;

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xA08648", Offset = "0xA08648", VA = "0xA08648")]
	private void Start()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xA086C0", Offset = "0xA086C0", VA = "0xA086C0")]
	public OrcNamer()
	{
	}
}
[Token(Token = "0x20000CB")]
public class OwnerChanger : MonoBehaviourPun, IInRoomCallbacks
{
	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xA086C8", Offset = "0xA086C8", VA = "0xA086C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xA08720", Offset = "0xA08720", VA = "0xA08720")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xA087F4", Offset = "0xA087F4", VA = "0xA087F4", Slot = "5")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xA08898", Offset = "0xA08898", VA = "0xA08898", Slot = "4")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xA0889C", Offset = "0xA0889C", VA = "0xA0889C", Slot = "6")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xA088A0", Offset = "0xA088A0", VA = "0xA088A0", Slot = "7")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xA088A4", Offset = "0xA088A4", VA = "0xA088A4", Slot = "8")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xA088A8", Offset = "0xA088A8", VA = "0xA088A8")]
	public OwnerChanger()
	{
	}
}
[Token(Token = "0x20000CC")]
[RequireComponent(typeof(LineRenderer))]
public class ParabolaDrawer : MonoBehaviour
{
	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform start;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform end;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float height;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int steps;

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xA088B0", Offset = "0xA088B0", VA = "0xA088B0")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xA08AB4", Offset = "0xA08AB4", VA = "0xA08AB4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xA08924", Offset = "0xA08924", VA = "0xA08924")]
	public void DrawParabola(Vector3 start, Vector3 end, float height, int steps)
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xA08B28", Offset = "0xA08B28", VA = "0xA08B28")]
	private Vector3 GetPointQuadraticBezierCurve(Vector3 p0, Vector3 p1, Vector3 p2, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xA08B9C", Offset = "0xA08B9C", VA = "0xA08B9C")]
	public ParabolaDrawer()
	{
	}
}
[Token(Token = "0x20000CD")]
[RequireComponent(typeof(Renderer))]
[RequireComponent(typeof(PhotonView))]
public class ChangeColor : MonoBehaviour
{
	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotonView photonView;

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xA08BB0", Offset = "0xA08BB0", VA = "0xA08BB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xA08D14", Offset = "0xA08D14", VA = "0xA08D14")]
	[PunRPC]
	private void ChangeColour(Vector3 randomColor)
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xA08DBC", Offset = "0xA08DBC", VA = "0xA08DBC")]
	public ChangeColor()
	{
	}
}
[Token(Token = "0x20000CE")]
[RequireComponent(typeof(PhotonView))]
public class ChangeName : MonoBehaviour
{
	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xA08DC4", Offset = "0xA08DC4", VA = "0xA08DC4")]
	private void Start()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xA08E80", Offset = "0xA08E80", VA = "0xA08E80")]
	public ChangeName()
	{
	}
}
[Token(Token = "0x20000CF")]
[RequireComponent(typeof(PhotonVoiceView))]
public class PointersController : MonoBehaviour
{
	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject pointerDown;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject pointerUp;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PhotonVoiceView photonVoiceView;

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xA08E88", Offset = "0xA08E88", VA = "0xA08E88")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xA08FA0", Offset = "0xA08FA0", VA = "0xA08FA0")]
	private void Update()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xA08EF8", Offset = "0xA08EF8", VA = "0xA08EF8")]
	private void SetActiveSafe(GameObject go, bool active)
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xA08FF8", Offset = "0xA08FF8", VA = "0xA08FF8")]
	public PointersController()
	{
	}
}
[Token(Token = "0x20000D0")]
[RequireComponent(typeof(Collider))]
[RequireComponent(typeof(Rigidbody))]
public class ProximityVoiceTrigger : VoiceComponent
{
	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte> groupsToAdd;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<byte> groupsToRemove;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private byte[] subscribedGroups;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private PhotonVoiceView photonVoiceView;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PhotonView photonView;

	[Token(Token = "0x17000061")]
	public byte TargetInterestGroup
	{
		[Token(Token = "0x60003E4")]
		[Address(RVA = "0xA09000", Offset = "0xA09000", VA = "0xA09000")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xA09080", Offset = "0xA09080", VA = "0xA09080", Slot = "9")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xA092CC", Offset = "0xA092CC", VA = "0xA092CC")]
	private void ToggleTransmission()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xA095CC", Offset = "0xA095CC", VA = "0xA095CC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xA09834", Offset = "0xA09834", VA = "0xA09834")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xA09ADC", Offset = "0xA09ADC", VA = "0xA09ADC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xA0914C", Offset = "0xA0914C", VA = "0xA0914C")]
	private bool IsLocalCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xA0A17C", Offset = "0xA0A17C", VA = "0xA0A17C")]
	public ProximityVoiceTrigger()
	{
	}
}
[Serializable]
[Token(Token = "0x20000D1")]
public class MouseLookHelper
{
	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float XSensitivity;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float YSensitivity;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool clampVerticalRotation;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MinimumX;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaximumX;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool smooth;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float smoothTime;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion m_CharacterTargetRot;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Quaternion m_CameraTargetRot;

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xA0A234", Offset = "0xA0A234", VA = "0xA0A234")]
	public void Init(Transform character, Transform camera)
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xA0A284", Offset = "0xA0A284", VA = "0xA0A284")]
	public void LookRotation(Transform character, Transform camera)
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xA0A5C4", Offset = "0xA0A5C4", VA = "0xA0A5C4")]
	private Quaternion ClampRotationAroundXAxis(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xA0A628", Offset = "0xA0A628", VA = "0xA0A628")]
	public MouseLookHelper()
	{
	}
}
[Token(Token = "0x20000D2")]
public class PhotonRPCRefreshEditorHelper
{
	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xA0A654", Offset = "0xA0A654", VA = "0xA0A654")]
	public static void RefreshRPCs()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xA0A9D0", Offset = "0xA0A9D0", VA = "0xA0A9D0")]
	public static Type[] GetAllSubTypesInScripts(Type aBaseClass)
	{
		return null;
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xA0ABE0", Offset = "0xA0ABE0", VA = "0xA0ABE0")]
	public PhotonRPCRefreshEditorHelper()
	{
	}
}
[Token(Token = "0x20000D3")]
public class PlatformModelSelector : MonoBehaviour
{
	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject righthandedPlatform;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lefthandedPlatform;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject htcVivePlatform;

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xA0ABE8", Offset = "0xA0ABE8", VA = "0xA0ABE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xA0AD3C", Offset = "0xA0AD3C", VA = "0xA0AD3C")]
	public PlatformModelSelector()
	{
	}
}
[Token(Token = "0x20000D4")]
public class ProjectileDistortionCollision : MonoBehaviour
{
	[Token(Token = "0x40004DB")]
	private const float timeToRemoveDistortionEffect = 5f;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject distortionEffect;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool isInnerCollider;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private LayerMask OuterColliderLayerMask;

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xA0AD44", Offset = "0xA0AD44", VA = "0xA0AD44")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xA0AE00", Offset = "0xA0AE00", VA = "0xA0AE00")]
	private void ReactOnArrowEnterCollider(Collider collision)
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xA0AE10", Offset = "0xA0AE10", VA = "0xA0AE10")]
	private void TryToCreateOnEnterEffect(Collider collision)
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xA0B080", Offset = "0xA0B080", VA = "0xA0B080")]
	private void CreateDistortionEffect(Collider collision)
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xA0B204", Offset = "0xA0B204", VA = "0xA0B204")]
	private void OnTriggerExit(Collider collision)
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xA0B2B8", Offset = "0xA0B2B8", VA = "0xA0B2B8")]
	private void ReactOnArrowExitCollider(Collider collision)
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xA0B330", Offset = "0xA0B330", VA = "0xA0B330")]
	private void TryToCreateOnExitEffect(Collider collision, LastFramePositionContainer lastFramePositionContainer)
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xA0B35C", Offset = "0xA0B35C", VA = "0xA0B35C")]
	public ProjectileDistortionCollision()
	{
	}
}
[Token(Token = "0x20000D5")]
public class RandomPlayerName : RandomPlayerNameCore
{
	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string[] firstNames;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string[] secondNames;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string[] lastNames;

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xA0B364", Offset = "0xA0B364", VA = "0xA0B364")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xA0B370", Offset = "0xA0B370", VA = "0xA0B370", Slot = "4")]
	protected override void SetLocalizedStrings()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xA0B448", Offset = "0xA0B448", VA = "0xA0B448", Slot = "5")]
	public override string GetRandomPlayerNickText()
	{
		return null;
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xA0B6D4", Offset = "0xA0B6D4", VA = "0xA0B6D4")]
	public RandomPlayerName()
	{
	}
}
[Token(Token = "0x20000D6")]
public class RpgElementsWindowController : FirstWindowController
{
	[Token(Token = "0x6000401")]
	[Address(RVA = "0xA0B6DC", Offset = "0xA0B6DC", VA = "0xA0B6DC", Slot = "6")]
	public override bool CheckIfWindowShouldBeQueued()
	{
		return default(bool);
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xA0B7A8", Offset = "0xA0B7A8", VA = "0xA0B7A8")]
	public RpgElementsWindowController()
	{
	}
}
[Token(Token = "0x20000D7")]
public class SalvaPlayerMicrophoneController : MonoBehaviourPun
{
	[Token(Token = "0x40004E2")]
	private const float partOfOldVolumeValue = 0.95f;

	[Token(Token = "0x40004E3")]
	private const float partOfNewVolumeValue = 0.05f;

	[Token(Token = "0x40004E4")]
	private const float delayBetweenCalls = 0.5f;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Recorder recorder;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float howManyTimesShouldBeLouder;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float avgVolume;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<SalvaPlayerMicrophoneController> OnAudioLevelHigherThenAvg;

	[Token(Token = "0x17000062")]
	private WaitForSeconds waitBetweenCalls
	{
		[Token(Token = "0x6000403")]
		[Address(RVA = "0xA0B7B0", Offset = "0xA0B7B0", VA = "0xA0B7B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xA0B810", Offset = "0xA0B810", VA = "0xA0B810")]
	private void Update()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xA0B9A8", Offset = "0xA0B9A8", VA = "0xA0B9A8")]
	public SalvaPlayerMicrophoneController()
	{
	}
}
[Token(Token = "0x20000D8")]
public class savemesh : MonoBehaviour
{
	[Token(Token = "0x6000406")]
	[Address(RVA = "0xA0B9B8", Offset = "0xA0B9B8", VA = "0xA0B9B8")]
	public savemesh()
	{
	}
}
[Token(Token = "0x20000D9")]
public class ScalerOverTime : MonoBehaviour
{
	[Token(Token = "0x20000DA")]
	[CompilerGenerated]
	private sealed class <ScaleSphereUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScalerOverTime <>4__this;

		[Token(Token = "0x17000063")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000410")]
			[Address(RVA = "0xA0BD14", Offset = "0xA0BD14", VA = "0xA0BD14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000064")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000412")]
			[Address(RVA = "0xA0BD5C", Offset = "0xA0BD5C", VA = "0xA0BD5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0xA0BB7C", Offset = "0xA0BB7C", VA = "0xA0BB7C")]
		[DebuggerHidden]
		public <ScaleSphereUp>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0xA0BBD4", Offset = "0xA0BBD4", VA = "0xA0BBD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0xA0BBD8", Offset = "0xA0BBD8", VA = "0xA0BBD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0xA0BD1C", Offset = "0xA0BD1C", VA = "0xA0BD1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000DB")]
	[CompilerGenerated]
	private sealed class <ScaleSphereDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScalerOverTime <>4__this;

		[Token(Token = "0x17000065")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000416")]
			[Address(RVA = "0xA0BEBC", Offset = "0xA0BEBC", VA = "0xA0BEBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000066")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000418")]
			[Address(RVA = "0xA0BF04", Offset = "0xA0BF04", VA = "0xA0BF04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0xA0BBA4", Offset = "0xA0BBA4", VA = "0xA0BBA4")]
		[DebuggerHidden]
		public <ScaleSphereDown>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0xA0BD64", Offset = "0xA0BD64", VA = "0xA0BD64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0xA0BD68", Offset = "0xA0BD68", VA = "0xA0BD68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0xA0BEC4", Offset = "0xA0BEC4", VA = "0xA0BEC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004E9")]
	private const float maxScale = 15f;

	[Token(Token = "0x40004EA")]
	private const float minScale = 0.1f;

	[Token(Token = "0x40004EB")]
	private const float shieldScaleDuration = 20f;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 maxLocalScale;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 minLocalScale;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float currentDuration;

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xA0B9C0", Offset = "0xA0B9C0", VA = "0xA0B9C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xA0BA54", Offset = "0xA0BA54", VA = "0xA0BA54")]
	public void StartScaleUpRoutine()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xA0BAE8", Offset = "0xA0BAE8", VA = "0xA0BAE8")]
	public void StartScaleDownRoutine()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xA0BA74", Offset = "0xA0BA74", VA = "0xA0BA74")]
	[IteratorStateMachine(typeof(<ScaleSphereUp>d__9))]
	private IEnumerator ScaleSphereUp()
	{
		return null;
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xA0BB08", Offset = "0xA0BB08", VA = "0xA0BB08")]
	[IteratorStateMachine(typeof(<ScaleSphereDown>d__10))]
	public IEnumerator ScaleSphereDown()
	{
		return null;
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xA0BBCC", Offset = "0xA0BBCC", VA = "0xA0BBCC")]
	public ScalerOverTime()
	{
	}
}
[Token(Token = "0x20000DC")]
public class AccelerateBlackHole : MonoBehaviour
{
	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FX_Rotation[] Quads;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 scaleRange;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float scaleTime;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float destroyTime;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool bStartScale;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float startScaleTime;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float startTime;

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xA0BF0C", Offset = "0xA0BF0C", VA = "0xA0BF0C")]
	private void Start()
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xA0C050", Offset = "0xA0C050", VA = "0xA0C050")]
	private void Update()
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xA0BF2C", Offset = "0xA0BF2C", VA = "0xA0BF2C")]
	private void ScaleAnim()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xA0C19C", Offset = "0xA0C19C", VA = "0xA0C19C")]
	public AccelerateBlackHole()
	{
	}
}
[Token(Token = "0x20000DD")]
public static class AchivementsPrefs
{
	[Token(Token = "0x40004FD")]
	private const string FiredArrowsKey = "FiredArrows";

	[Token(Token = "0x40004FE")]
	private const string OrcKilledKey = "KilledOrcs";

	[Token(Token = "0x40004FF")]
	private const string HeadShotsKey = "HeadShots";

	[Token(Token = "0x4000500")]
	private const string WindowShotsKey = "WindowShots";

	[Token(Token = "0x17000067")]
	public static int FiredArrows
	{
		[Token(Token = "0x600041D")]
		[Address(RVA = "0xA0C1C4", Offset = "0xA0C1C4", VA = "0xA0C1C4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600041E")]
		[Address(RVA = "0xA0C208", Offset = "0xA0C208", VA = "0xA0C208")]
		set
		{
		}
	}

	[Token(Token = "0x17000068")]
	public static int OrcKilled
	{
		[Token(Token = "0x600041F")]
		[Address(RVA = "0xA0C254", Offset = "0xA0C254", VA = "0xA0C254")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000420")]
		[Address(RVA = "0xA0C298", Offset = "0xA0C298", VA = "0xA0C298")]
		set
		{
		}
	}

	[Token(Token = "0x17000069")]
	public static int HeadShots
	{
		[Token(Token = "0x6000421")]
		[Address(RVA = "0xA0C2E4", Offset = "0xA0C2E4", VA = "0xA0C2E4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000422")]
		[Address(RVA = "0xA0C328", Offset = "0xA0C328", VA = "0xA0C328")]
		set
		{
		}
	}

	[Token(Token = "0x1700006A")]
	public static int WindowShots
	{
		[Token(Token = "0x6000423")]
		[Address(RVA = "0xA0C374", Offset = "0xA0C374", VA = "0xA0C374")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000424")]
		[Address(RVA = "0xA0C3B8", Offset = "0xA0C3B8", VA = "0xA0C3B8")]
		set
		{
		}
	}

	[Token(Token = "0x1700006B")]
	public static int PlayerExperience
	{
		[Token(Token = "0x6000425")]
		[Address(RVA = "0xA0C404", Offset = "0xA0C404", VA = "0xA0C404")]
		get
		{
			return default(int);
		}
	}
}
[Token(Token = "0x20000DE")]
public static class AnalyticsController
{
	[Token(Token = "0x4000501")]
	private const string joinedGameInfoEventKey = "JoinedGameInfo";

	[Token(Token = "0x4000502")]
	private const string joinedGameInfoByMapEventKey = "JoinedGameInfoByMap";

	[Token(Token = "0x4000503")]
	private const string setLocalServerCodeEventKey = "SetLocalServerCode";

	[Token(Token = "0x4000504")]
	private const string oneSessionStatsEventKey = "OneSessionStats";

	[Token(Token = "0x4000505")]
	private const string connectionFailInfoEventKey = "ConnectionFailInfo";

	[Token(Token = "0x4000506")]
	private const string lastLocalServerCodeChangeEventKey = "LastLocalServerCodeChange";

	[Token(Token = "0x4000507")]
	private const string totalNumberOfWavesPlayedEventKey = "TotalNumberOfPlayedWaves";

	[Token(Token = "0x4000508")]
	private const string arcadeSettingsInfoEventKey = "ArcadeSettingsInfo";

	[Token(Token = "0x4000509")]
	private const string gameOverStatsEventKey = "GameOverStats";

	[Token(Token = "0x400050A")]
	private const string lowFpsEventKey = "LowFps";

	[Token(Token = "0x400050B")]
	private const string bigNetworkEventKey = "BigNetworkTraffic";

	[Token(Token = "0x400050C")]
	private const string joinTournamentDuringMatchConfirmationEventKey = "JoinTournamentDuringMatchConfirmation";

	[Token(Token = "0x400050D")]
	private const string platformInfoEventKey = "PlatformInfo";

	[Token(Token = "0x400050E")]
	private const string playedWavesDuringOneMapEventParameterKey = "WavesPlayedByMap";

	[Token(Token = "0x400050F")]
	private const string isUsingArcadeModeEventParameterKey = "IsArcadeModeEnabled";

	[Token(Token = "0x4000510")]
	private const string isUsingOldLeaderboardsEventParameterKey = "IsUsingOldLeaderboards";

	[Token(Token = "0x4000511")]
	private const string isUsingLocalServerEventParameterKey = "IsUsingLocalSettings";

	[Token(Token = "0x4000512")]
	private const string currentLanguageEventParameterKey = "CurrentLanguage";

	[Token(Token = "0x4000513")]
	private const string isUsingDefaultRegionEventParameterKey = "IsUsingDefaultRegion";

	[Token(Token = "0x4000514")]
	private const string isAutoJoinEnabled = "IsAutoJoinEnabled";

	[Token(Token = "0x4000515")]
	private const string defaultRegionCodeEventParameterKey = "DefaultRegionCode";

	[Token(Token = "0x4000516")]
	private const string modeEventParameterKey = "Mode";

	[Token(Token = "0x4000517")]
	private const string mapNameEventParameterKey = "Map";

	[Token(Token = "0x4000518")]
	private const string waveEventParameterKey = "Wave";

	[Token(Token = "0x4000519")]
	private const string trafficIncomingEventParameterKey = "Traffic incoming B/s";

	[Token(Token = "0x400051A")]
	private const string trafficOutgoingEventParameterKey = "Traffic outgoing B/s";

	[Token(Token = "0x400051B")]
	private const string fpsEventParameterKey = "AverageFps";

	[Token(Token = "0x400051C")]
	private const string joinTournamentDuringMatchIsConfirmedParameterKey = "IsConfirmed";

	[Token(Token = "0x400051D")]
	private const string gameVersionParameterKey = "GameVersion";

	[Token(Token = "0x400051E")]
	private const string chosenPlatformarameterKey = "ChosenPlatform";

	[Token(Token = "0x400051F")]
	private const int localServerCodeChangeDelay = 7;

	[Token(Token = "0x4000520")]
	private const string timePlayedSuffix = "TimePlayed";

	[Token(Token = "0x4000521")]
	private const string levelReachedSuffix = "LevelReached";

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xA0C408", Offset = "0xA0C408", VA = "0xA0C408")]
	public static void SendArcadeSettingsInfo()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xA0C904", Offset = "0xA0C904", VA = "0xA0C904")]
	public static void SendGameOverStats(MapNames mapName)
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xA0CB58", Offset = "0xA0CB58", VA = "0xA0CB58")]
	public static void SendJoinedGameInfo(MapNames mapName)
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xA0CD7C", Offset = "0xA0CD7C", VA = "0xA0CD7C")]
	public static void SendOneSessionStats(int numbOfWaves)
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xA0CE7C", Offset = "0xA0CE7C", VA = "0xA0CE7C")]
	public static void SendPlayedWavesDuringOneMap(int numberOfWavesPlayed, MapNames mapName)
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xA0CFA8", Offset = "0xA0CFA8", VA = "0xA0CFA8")]
	public static void SendOnConnectionFailInfo(int disconnectCause)
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xA0D204", Offset = "0xA0D204", VA = "0xA0D204")]
	public static void SendLocalServerCode()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xA0D37C", Offset = "0xA0D37C", VA = "0xA0D37C")]
	public static void SendLowFpsEvent(MapNames mapName, int waveIndex, float averageFps)
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xA0D53C", Offset = "0xA0D53C", VA = "0xA0D53C")]
	public static void SendBigTrafficEvent(MapNames mapName, int waveIndex, float bytesIncomingPerSecond, float bytesOutgoingPerSecond)
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xA0D738", Offset = "0xA0D738", VA = "0xA0D738")]
	public static void SendJoinTournamentDuringMatchConfirmationEvent(bool isConfirmed)
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xA0D81C", Offset = "0xA0D81C", VA = "0xA0D81C")]
	public static void SendGameVersion(string gameVersion)
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xA0D8EC", Offset = "0xA0D8EC", VA = "0xA0D8EC")]
	public static void SendPlatformTarget(string platformTarget)
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xA0CADC", Offset = "0xA0CADC", VA = "0xA0CADC")]
	private static string GetEventParameterKey(MapNames mapName, string eventSuffix)
	{
		return null;
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xA0C8F4", Offset = "0xA0C8F4", VA = "0xA0C8F4")]
	private static void SendEvent(string name, [Optional] Dictionary<string, object> parameters)
	{
	}
}
[Token(Token = "0x20000DF")]
public class AnalyticsSendGameOverStatsCaller : MonoBehaviour
{
	[Token(Token = "0x6000434")]
	[Address(RVA = "0xA0D9BC", Offset = "0xA0D9BC", VA = "0xA0D9BC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xA0DAB4", Offset = "0xA0DAB4", VA = "0xA0DAB4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xA0DBAC", Offset = "0xA0DBAC", VA = "0xA0DBAC")]
	private void SendJoinedGameInfoCallback()
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xA0DBC0", Offset = "0xA0DBC0", VA = "0xA0DBC0")]
	public AnalyticsSendGameOverStatsCaller()
	{
	}
}
[Token(Token = "0x20000E0")]
public class AnalyticsSendJoinedGameInfoCaller : MonoBehaviour
{
	[Token(Token = "0x6000438")]
	[Address(RVA = "0xA0DBC8", Offset = "0xA0DBC8", VA = "0xA0DBC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xA0DCE4", Offset = "0xA0DCE4", VA = "0xA0DCE4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xA0DE00", Offset = "0xA0DE00", VA = "0xA0DE00")]
	private void SendJoinedGameInfoCallback(string sceneName)
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xA0DE88", Offset = "0xA0DE88", VA = "0xA0DE88")]
	public AnalyticsSendJoinedGameInfoCaller()
	{
	}
}
[Token(Token = "0x20000E1")]
public class BasicAnalyticsDataSender : MonoBehaviour
{
	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ProjectSettings projectSettings;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool wasPlatformInfoSend;

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xA0DE90", Offset = "0xA0DE90", VA = "0xA0DE90")]
	private void Start()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xA0DF94", Offset = "0xA0DF94", VA = "0xA0DF94")]
	private void TrySendArcadeData()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xA0E13C", Offset = "0xA0E13C", VA = "0xA0E13C")]
	private bool WasArcadeSettingsSendToday()
	{
		return default(bool);
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xA0E1E0", Offset = "0xA0E1E0", VA = "0xA0E1E0")]
	private bool WasLocalServerCodeSendToday()
	{
		return default(bool);
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xA0E284", Offset = "0xA0E284", VA = "0xA0E284")]
	public BasicAnalyticsDataSender()
	{
	}
}
[Token(Token = "0x20000E2")]
public class NetworkPerformanceAnalyticsController : MonoBehaviour
{
	[Token(Token = "0x4000524")]
	private const int maxPermissibleTrafficBytes = 18000;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private WavesController wavesController;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int waveStartBytesIncoming;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int waveStartBytesOutgoing;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float waveStartTime;

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xA0E28C", Offset = "0xA0E28C", VA = "0xA0E28C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xA0E4A0", Offset = "0xA0E4A0", VA = "0xA0E4A0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xA0E66C", Offset = "0xA0E66C", VA = "0xA0E66C")]
	private void StartCountingTrafficForWave()
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xA0E724", Offset = "0xA0E724", VA = "0xA0E724")]
	private void FinishCountingTrafficForWave(int waveNumber)
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xA0EA80", Offset = "0xA0EA80", VA = "0xA0EA80")]
	public NetworkPerformanceAnalyticsController()
	{
	}
}
[Token(Token = "0x20000E3")]
public class OneSessionStats : MonoBehaviour
{
	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OneSessionStats instance;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int totalNumberOfWavesPlayed;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int wavesPlayedOnSingleMap;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MapNames currentMap;

	[Token(Token = "0x1700006C")]
	public static OneSessionStats Instance
	{
		[Token(Token = "0x6000446")]
		[Address(RVA = "0xA0EA88", Offset = "0xA0EA88", VA = "0xA0EA88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xA0EB80", Offset = "0xA0EB80", VA = "0xA0EB80")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xA0ECB0", Offset = "0xA0ECB0", VA = "0xA0ECB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xA0EE44", Offset = "0xA0EE44", VA = "0xA0EE44")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xA0EFE4", Offset = "0xA0EFE4", VA = "0xA0EFE4")]
	private void SendAnalyticsIfMapChanged(Scene previousScene, Scene newScene)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xA0F0A0", Offset = "0xA0F0A0", VA = "0xA0F0A0")]
	private void IncrementWavesPlayed(int waveNumber)
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xA0F0B4", Offset = "0xA0F0B4", VA = "0xA0F0B4")]
	public OneSessionStats()
	{
	}
}
[Token(Token = "0x20000E4")]
public class PerformanceAnalyticsController : MonoBehaviour
{
	[Token(Token = "0x400052D")]
	private const int minPermissibleFps = 50;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private WavesController wavesController;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float waveStartTime;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int waveStartFramesCount;

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xA0F0BC", Offset = "0xA0F0BC", VA = "0xA0F0BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xA0F288", Offset = "0xA0F288", VA = "0xA0F288")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xA0F454", Offset = "0xA0F454", VA = "0xA0F454")]
	private void StartCountingFPSForWave()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xA0F488", Offset = "0xA0F488", VA = "0xA0F488")]
	private void FinishCountingFPSForWave(int waveNumber)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xA0F5E4", Offset = "0xA0F5E4", VA = "0xA0F5E4")]
	public PerformanceAnalyticsController()
	{
	}
}
[Token(Token = "0x20000E5")]
public class ArcadeGameSwitcher : ArcadeGameSwitcherCore
{
	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool wasArcadeItemsChoosenInThisSession;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Toggle arcadeModeToggle;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SettingMenuArcadePinner settingMenuArcadePinner;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<GameObject> teleportsOtherThanStarting;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<GameObject> arcadeBuildButtons;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private List<GameObject> nonArcadeBuildButtons;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private List<GameObject> arcadeModeButtonContents;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private List<GameObject> nonArcadeModeButtonContents;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<GameObject> ObjectsDisabledInArrcade;

	[Token(Token = "0x1700006D")]
	public override Toggle ArcadeModeToggle
	{
		[Token(Token = "0x6000452")]
		[Address(RVA = "0xA0F5EC", Offset = "0xA0F5EC", VA = "0xA0F5EC", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000453")]
		[Address(RVA = "0xA0F5F4", Offset = "0xA0F5F4", VA = "0xA0F5F4", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x14000007")]
	public static event Action OnArcadeModeToggle
	{
		[Token(Token = "0x6000454")]
		[Address(RVA = "0xA0F5FC", Offset = "0xA0F5FC", VA = "0xA0F5FC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000455")]
		[Address(RVA = "0xA0F6B8", Offset = "0xA0F6B8", VA = "0xA0F6B8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public static event Action OnReloadPlayerProgression
	{
		[Token(Token = "0x6000456")]
		[Address(RVA = "0xA0F774", Offset = "0xA0F774", VA = "0xA0F774")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000457")]
		[Address(RVA = "0xA0F830", Offset = "0xA0F830", VA = "0xA0F830")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xA0F8EC", Offset = "0xA0F8EC", VA = "0xA0F8EC", Slot = "7")]
	public override void Initialize()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xA0FCE4", Offset = "0xA0FCE4", VA = "0xA0FCE4")]
	private void AdjustMenuBasedOnArcadeModeSetting()
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xA0FA88", Offset = "0xA0FA88", VA = "0xA0FA88")]
	private void AdjustMenuBasedOnBuildType()
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xA10044", Offset = "0xA10044", VA = "0xA10044", Slot = "6")]
	public override void ToggleArcadeMode()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xA0F9F4", Offset = "0xA0F9F4", VA = "0xA0F9F4")]
	public void RandomizePlayerProgression()
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xA0F9F8", Offset = "0xA0F9F8", VA = "0xA0F9F8")]
	public void ReloadStoredPlayerProgression()
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xA103B0", Offset = "0xA103B0", VA = "0xA103B0")]
	private void DisableTeleportsOtherThanStarting()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xA104B8", Offset = "0xA104B8", VA = "0xA104B8")]
	private void EnableTeleportsOtherThanStarting()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xA10170", Offset = "0xA10170", VA = "0xA10170")]
	private void EquipPlayerInRandomEquipment()
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xA105C0", Offset = "0xA105C0", VA = "0xA105C0")]
	private void EquipPlayerInRandomHelmet()
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xA106B8", Offset = "0xA106B8", VA = "0xA106B8")]
	private void EquipPlayerInRandomBow()
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xA107B0", Offset = "0xA107B0", VA = "0xA107B0", Slot = "8")]
	public override void SetReferences(List<GameObject> _ObjectsDisabledInArrcade)
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xA107B8", Offset = "0xA107B8", VA = "0xA107B8")]
	public ArcadeGameSwitcher()
	{
	}
}
[Token(Token = "0x20000E7")]
public class ArrowEnemyHitController : MonoBehaviourPun, IResetable
{
	[Token(Token = "0x4000545")]
	private const float headshotDamage = float.PositiveInfinity;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float damageMultiplier;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float bossDamageMultiplier;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float orcDamageMultiplier;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool hitEnemyAlready;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool isMagic;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool hasShotThroughWindow;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float basicArrowDamage;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private CollisionEvents arrowCollisionEvents;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AttachProjectileToEnemyController projectileToEnemyAttachControler;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Rigidbody projectileRigidbody;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Collider arrowCollider;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ArrowFlyController arrowFlyController;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 arrowShotPosition;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private IAbility ability;

	[Token(Token = "0x1700006E")]
	public IAbility Ability
	{
		[Token(Token = "0x6000471")]
		[Address(RVA = "0xA10D38", Offset = "0xA10D38", VA = "0xA10D38")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000472")]
		[Address(RVA = "0xA10D40", Offset = "0xA10D40", VA = "0xA10D40")]
		set
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action<HealthStateController, EnemyGetHitController, Collision, ArrowEnemyHitController> OnArrowHitEnemy
	{
		[Token(Token = "0x600046F")]
		[Address(RVA = "0xA10BD8", Offset = "0xA10BD8", VA = "0xA10BD8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000470")]
		[Address(RVA = "0xA10C88", Offset = "0xA10C88", VA = "0xA10C88")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xA10E1C", Offset = "0xA10E1C", VA = "0xA10E1C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xA10F54", Offset = "0xA10F54", VA = "0xA10F54")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xA1108C", Offset = "0xA1108C", VA = "0xA1108C")]
	public void OnArrowCollision(Collision collision)
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xA11618", Offset = "0xA11618", VA = "0xA11618")]
	private void CacheArrowShotPosition()
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xA11648", Offset = "0xA11648", VA = "0xA11648", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xA1167C", Offset = "0xA1167C", VA = "0xA1167C")]
	public ArrowEnemyHitController()
	{
	}
}
[Token(Token = "0x20000E8")]
public class ArrowFlyController : MonoBehaviourPun, IResetable
{
	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly Vector3 farFarAway;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 zAxisWhenFired;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action OnStopFlying;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action OnArrowFired;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Rigidbody arrowRigidbody;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform arrowTransform;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private BoxCollider boxCollider;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private CollisionEvents collisionEvents;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private ArrowResetController arrowResetController;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private PhotonPrefabPoolElement photonPrefabPoolElement;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private ArrowTeleportController arrowTeleportController;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private TrailRendererEnabler trailRendererEnabler;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private ArrowAudioController audioController;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Transform endOFBolthead;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private bool shouldTeleport;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	[SerializeField]
	private bool haveTrailRenderer;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private List<TagType> tagsToStopArrow;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool isFired;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector3 initialPosition;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Quaternion initialRotation;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private CollisionDetectionMode defaultCollisionDetectionMode;

	[Token(Token = "0x1700006F")]
	public bool IsFlying
	{
		[Token(Token = "0x6000479")]
		[Address(RVA = "0xA1168C", Offset = "0xA1168C", VA = "0xA1168C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600047A")]
		[Address(RVA = "0xA11694", Offset = "0xA11694", VA = "0xA11694")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000070")]
	public Collision LastCollision
	{
		[Token(Token = "0x600047B")]
		[Address(RVA = "0xA116A0", Offset = "0xA116A0", VA = "0xA116A0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600047C")]
		[Address(RVA = "0xA116A8", Offset = "0xA116A8", VA = "0xA116A8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000071")]
	public bool IsFired
	{
		[Token(Token = "0x600047D")]
		[Address(RVA = "0xA116B0", Offset = "0xA116B0", VA = "0xA116B0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600047E")]
		[Address(RVA = "0xA116B8", Offset = "0xA116B8", VA = "0xA116B8")]
		set
		{
		}
	}

	[Token(Token = "0x17000072")]
	public Vector3 FlyDirection
	{
		[Token(Token = "0x600047F")]
		[Address(RVA = "0xA1170C", Offset = "0xA1170C", VA = "0xA1170C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xA117F0", Offset = "0xA117F0", VA = "0xA117F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xA11874", Offset = "0xA11874", VA = "0xA11874")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xA11968", Offset = "0xA11968", VA = "0xA11968")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xA11A5C", Offset = "0xA11A5C", VA = "0xA11A5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xA11B84", Offset = "0xA11B84", VA = "0xA11B84")]
	public void StopArrowOnCollision(Collision collision)
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xA11CA4", Offset = "0xA11CA4", VA = "0xA11CA4")]
	private void AddArrowToCollisionMainPrefabPoolElement(Collision collision)
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xA11D3C", Offset = "0xA11D3C", VA = "0xA11D3C")]
	public void StopArrow(Collision collision)
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xA11F38", Offset = "0xA11F38", VA = "0xA11F38")]
	private void StopArrowOnTrigger(Collider collider)
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xA1200C", Offset = "0xA1200C", VA = "0xA1200C")]
	public void StopArrow()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xA11ED0", Offset = "0xA11ED0", VA = "0xA11ED0")]
	private void DisableArrowMovement()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xA120C0", Offset = "0xA120C0", VA = "0xA120C0")]
	public void ShootArrow(Vector3 velocity)
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xA121A4", Offset = "0xA121A4", VA = "0xA121A4")]
	private void TryToSetAdditionalArrowFunctions()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xA12208", Offset = "0xA12208", VA = "0xA12208")]
	public void RevertToInitialPositionAndRotation()
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xA12254", Offset = "0xA12254", VA = "0xA12254", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xA122D0", Offset = "0xA122D0", VA = "0xA122D0")]
	public ArrowFlyController()
	{
	}
}
[Token(Token = "0x20000EA")]
public class ArrowHitBloodController : MonoBehaviourPun
{
	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ArrowEnemyHitController arrowEnemyHitController;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HitParticlesPlayer hitParticlesPlayer;

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xA1245C", Offset = "0xA1245C", VA = "0xA1245C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xA12554", Offset = "0xA12554", VA = "0xA12554")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xA1264C", Offset = "0xA1264C", VA = "0xA1264C")]
	private void OnArrowHitEnemy(HealthStateController enemyHealthStateController, EnemyGetHitController enemyGetHitController, Collision collision, ArrowEnemyHitController arrowEnemyHitController)
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xA12748", Offset = "0xA12748", VA = "0xA12748")]
	public ArrowHitBloodController()
	{
	}
}
[Token(Token = "0x20000EB")]
public class ArrowHitOnLateUpdateAttacher : ArrowHitCustomBehaviour
{
	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool attachOnLateUpdate;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ArrowFlyController arrowFlyController;

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xA12750", Offset = "0xA12750", VA = "0xA12750", Slot = "4")]
	public override void ReactOnArrowHit(ArrowFlyController arrow)
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xA12760", Offset = "0xA12760", VA = "0xA12760")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xA12868", Offset = "0xA12868", VA = "0xA12868")]
	public ArrowHitOnLateUpdateAttacher()
	{
	}
}
[Token(Token = "0x20000EC")]
public class ArrowHitOwnHead : ArrowHitCustomBehaviour
{
	[Token(Token = "0x6000499")]
	[Address(RVA = "0xA12878", Offset = "0xA12878", VA = "0xA12878", Slot = "4")]
	public override void ReactOnArrowHit(ArrowFlyController arrow)
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xA12914", Offset = "0xA12914", VA = "0xA12914")]
	public ArrowHitOwnHead()
	{
	}
}
[Token(Token = "0x20000ED")]
public class ArrowMeshSetter : MonoBehaviour, ISettable
{
	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Mesh pcMesh;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Mesh mobileMesh;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MeshFilter meshFilter;

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xA1291C", Offset = "0xA1291C", VA = "0xA1291C", Slot = "4")]
	public void SetReferences()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xA129F4", Offset = "0xA129F4", VA = "0xA129F4")]
	public ArrowMeshSetter()
	{
	}
}
[Token(Token = "0x20000EE")]
public class ArrowTeleportController : MonoBehaviourPun, IResetable
{
	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CollisionEvents arrowCollisionEvents;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsTeleporting;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<TeleportCollider, ArrowTeleportController> OnArrowHitTeleport;

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xA129FC", Offset = "0xA129FC", VA = "0xA129FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xA12A88", Offset = "0xA12A88", VA = "0xA12A88")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xA12B14", Offset = "0xA12B14", VA = "0xA12B14")]
	private void OnTriggerStay(Collider col)
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xA12C2C", Offset = "0xA12C2C", VA = "0xA12C2C")]
	private void OnArrowCollision(Collision collision)
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xA12C34", Offset = "0xA12C34", VA = "0xA12C34", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xA12C3C", Offset = "0xA12C3C", VA = "0xA12C3C")]
	public ArrowTeleportController()
	{
	}
}
[Token(Token = "0x20000EF")]
public class AttachProjectileToEnemyController : MonoBehaviour
{
	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BodyAttacher bodyAttacher;

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xA114FC", Offset = "0xA114FC", VA = "0xA114FC")]
	public void TryAttachArrowToBody(Collision collision)
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xA12D74", Offset = "0xA12D74", VA = "0xA12D74")]
	public void DetachProjectileFromParent()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xA12D98", Offset = "0xA12D98", VA = "0xA12D98")]
	public AttachProjectileToEnemyController()
	{
	}
}
[Token(Token = "0x20000F0")]
public class FireArrowReal : MonoBehaviour
{
	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem fire;

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xA12DA0", Offset = "0xA12DA0", VA = "0xA12DA0")]
	public void SetOnFire()
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xA12DBC", Offset = "0xA12DBC", VA = "0xA12DBC")]
	public FireArrowReal()
	{
	}
}
[Token(Token = "0x20000F1")]
public class FireCauldronForArrow : MonoBehaviour
{
	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xA12DC4", Offset = "0xA12DC4", VA = "0xA12DC4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xA12E70", Offset = "0xA12E70", VA = "0xA12E70")]
	public FireCauldronForArrow()
	{
	}
}
[Token(Token = "0x20000F2")]
public class OnArrowHitForceApplyer : MonoBehaviour
{
	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float fromArrowForceMultiplyer;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Rigidbody rigidbodyToApplyForceTo;

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xA12E78", Offset = "0xA12E78", VA = "0xA12E78")]
	private void OnCollisionEnter(Collision coll)
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xA12FC4", Offset = "0xA12FC4", VA = "0xA12FC4")]
	public OnArrowHitForceApplyer()
	{
	}
}
[Token(Token = "0x20000F3")]
public class ProjectileElementsHolder : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform projectileHeadTransform;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int playerPhotonViewId;

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xA12FCC", Offset = "0xA12FCC", VA = "0xA12FCC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xA1303C", Offset = "0xA1303C", VA = "0xA1303C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xA13094", Offset = "0xA13094", VA = "0xA13094", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xA13150", Offset = "0xA13150", VA = "0xA13150")]
	public ProjectileElementsHolder()
	{
	}
}
[Token(Token = "0x20000F4")]
public class TrailInitializer : MonoBehaviour
{
	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TrailRendererEnabler _trailRendererEnabler;

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xA13158", Offset = "0xA13158", VA = "0xA13158")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xA13174", Offset = "0xA13174", VA = "0xA13174")]
	public TrailInitializer()
	{
	}
}
[Token(Token = "0x20000F5")]
public class WaterArrowSplashCreator : MonoBehaviour
{
	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Collider waterCollider;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject waterSplash;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float timeToDestroySplash;

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xA1317C", Offset = "0xA1317C", VA = "0xA1317C")]
	private void OnTriggerEnter(Collider coll)
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xA133D8", Offset = "0xA133D8", VA = "0xA133D8")]
	public WaterArrowSplashCreator()
	{
	}
}
[Token(Token = "0x20000F6")]
public class ArrowHitCustomBehaviour : MonoBehaviour
{
	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xA133E8", Offset = "0xA133E8", VA = "0xA133E8", Slot = "4")]
	public virtual void ReactOnArrowHit(ArrowFlyController arrow)
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xA12870", Offset = "0xA12870", VA = "0xA12870")]
	public ArrowHitCustomBehaviour()
	{
	}
}
[Token(Token = "0x20000F7")]
public class ArrowAudioController : MonoBehaviour, IResetable
{
	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public CollisionEvents arrowCollisionEvents;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public ArrowFlyController arrowFlyController;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioSource shootAudioSource;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private SoundStructure[] arrowHitSounds;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private SoundStructure arrowShotSound;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool hasAlreadyPlayed;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool hasHitWater;

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xA133EC", Offset = "0xA133EC", VA = "0xA133EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xA134E0", Offset = "0xA134E0", VA = "0xA134E0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xA135D4", Offset = "0xA135D4", VA = "0xA135D4")]
	public void PlayArrowSoundOnCollision(Collision collision)
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xA13630", Offset = "0xA13630", VA = "0xA13630")]
	private void PlaySoundByTag(string tag, bool shouldNotPlayMoreSounds)
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xA136E8", Offset = "0xA136E8", VA = "0xA136E8")]
	public void PlayArrowSoundOnTrigger(Collider collider)
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xA12180", Offset = "0xA12180", VA = "0xA12180")]
	public void PlayArrowShot()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xA13738", Offset = "0xA13738", VA = "0xA13738", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xA13740", Offset = "0xA13740", VA = "0xA13740")]
	public ArrowAudioController()
	{
	}
}
[Token(Token = "0x20000F8")]
public class OnGamePauseSoundPauser : MonoBehaviour
{
	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource pausableSound;

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xA13748", Offset = "0xA13748", VA = "0xA13748")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xA13908", Offset = "0xA13908", VA = "0xA13908")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xA13A98", Offset = "0xA13A98", VA = "0xA13A98")]
	private void PauseSound()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xA13AB4", Offset = "0xA13AB4", VA = "0xA13AB4")]
	private void UnPauseSound()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xA13AD0", Offset = "0xA13AD0", VA = "0xA13AD0")]
	public OnGamePauseSoundPauser()
	{
	}
}
[Token(Token = "0x20000F9")]
public class BellRinger : MonoBehaviour
{
	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioSource bellSound;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float soundObjectTime;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private CollisionEvents bellCollisionEvents;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Collider colliderThatMakesRing;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float timeLastSoundPlayed;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float minDelayBetweenBlSoundPlay;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool wasLastArrowMine;

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xA13AD8", Offset = "0xA13AD8", VA = "0xA13AD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xA13B64", Offset = "0xA13B64", VA = "0xA13B64")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xA13BF0", Offset = "0xA13BF0", VA = "0xA13BF0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xA13D94", Offset = "0xA13D94", VA = "0xA13D94")]
	private void SetWasMyArrowOnLastCollision(Collision collision)
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xA13E64", Offset = "0xA13E64", VA = "0xA13E64")]
	public BellRinger()
	{
	}
}
[Token(Token = "0x20000FA")]
public class BezierArrowFollower : MonoBehaviour
{
	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public BezierRoutePart actualRoutePart;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform arrowTransform;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float actualT;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float distanceFromCurveStart;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int indexToStartSearching;

	[Token(Token = "0x1400000A")]
	public event Action OnRouteFinished
	{
		[Token(Token = "0x60004C8")]
		[Address(RVA = "0xA13E7C", Offset = "0xA13E7C", VA = "0xA13E7C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xA13F18", Offset = "0xA13F18", VA = "0xA13F18")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xA13FB4", Offset = "0xA13FB4", VA = "0xA13FB4")]
	public void SetPositionAndRotation(float distance)
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xA141C4", Offset = "0xA141C4", VA = "0xA141C4")]
	public void MoveToStartingPosition()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xA141C8", Offset = "0xA141C8", VA = "0xA141C8")]
	public void UpdatePositonByDistance(float distance)
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xA143F0", Offset = "0xA143F0", VA = "0xA143F0")]
	public BezierArrowFollower()
	{
	}
}
[Token(Token = "0x20000FB")]
public class BezierCubicCurve : MonoBehaviour
{
	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform startPoint;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform midpoint1;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform midpoint2;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform endPoint;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int numberOfPoints;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float directionPrecision;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int numberOfGizmosPoints;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private Color constraintsColor;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private Color curveColor;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private Color directionCurve;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private float directionCurveLength;

	[Token(Token = "0x17000073")]
	public int NumberOfPoints
	{
		[Token(Token = "0x60004CE")]
		[Address(RVA = "0xA143F8", Offset = "0xA143F8", VA = "0xA143F8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000074")]
	public Color CurveGizmosColor
	{
		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xA14400", Offset = "0xA14400", VA = "0xA14400")]
		set
		{
		}
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xA1440C", Offset = "0xA1440C", VA = "0xA1440C")]
	public Vector3 GetPoint(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xA14554", Offset = "0xA14554", VA = "0xA14554")]
	public Vector3 GetDirection(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xA14664", Offset = "0xA14664", VA = "0xA14664")]
	public float GetTFromDistance(float startingT, float distanceToPast, bool isConsideringY)
	{
		return default(float);
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xA14770", Offset = "0xA14770", VA = "0xA14770")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xA14A18", Offset = "0xA14A18", VA = "0xA14A18")]
	public BezierCubicCurve()
	{
	}
}
[Token(Token = "0x20000FC")]
public class BezierCurvePoint : MonoBehaviour
{
	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform point;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform constraint;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Color gizmoColor;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float constraintWeight;

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xA14A20", Offset = "0xA14A20", VA = "0xA14A20")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xA14A5C", Offset = "0xA14A5C", VA = "0xA14A5C")]
	public BezierCurvePoint()
	{
	}
}
[Token(Token = "0x20000FD")]
public class BezierFollower : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public int actualRoutePartIndex;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Rigidbody cartRigidbody;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float actualT;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float distanceFromActualCurveStart;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float distanceFromStart;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int indexToStartSearching;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int indexInRouteArray;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int[] selectedRoutePartsPhotonViewIds;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public BezierRoutePart[] selectedRoute;

	[Token(Token = "0x17000075")]
	public BezierRoutePart ActualRoutePart
	{
		[Token(Token = "0x60004D9")]
		[Address(RVA = "0xA14BA8", Offset = "0xA14BA8", VA = "0xA14BA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000076")]
	public BezierRoutePart NextRoutePart
	{
		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xA14BDC", Offset = "0xA14BDC", VA = "0xA14BDC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000077")]
	public bool IsNextRoute
	{
		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xA14C14", Offset = "0xA14C14", VA = "0xA14C14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000078")]
	public float DistanceFromStart
	{
		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xA14C40", Offset = "0xA14C40", VA = "0xA14C40")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action OnRouteFinished
	{
		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xA14A70", Offset = "0xA14A70", VA = "0xA14A70")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60004D8")]
		[Address(RVA = "0xA14B0C", Offset = "0xA14B0C", VA = "0xA14B0C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0xA14C48", Offset = "0xA14C48", VA = "0xA14C48")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0xA14CA0", Offset = "0xA14CA0", VA = "0xA14CA0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xA14CF8", Offset = "0xA14CF8", VA = "0xA14CF8")]
	public void SetPositionAndRotation(float distance)
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xA150F8", Offset = "0xA150F8", VA = "0xA150F8")]
	public void MoveToStartingPosition()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xA150FC", Offset = "0xA150FC", VA = "0xA150FC")]
	public void UpdatePositonByDistance(float distance)
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xA151B8", Offset = "0xA151B8", VA = "0xA151B8")]
	private void GetRouteFromPhotonViewIds()
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xA152F0", Offset = "0xA152F0", VA = "0xA152F0", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xA15524", Offset = "0xA15524", VA = "0xA15524")]
	public BezierFollower()
	{
	}
}
[Token(Token = "0x20000FE")]
public class BezierPoint
{
	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float distanceFromCurveStart;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 position;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 direction;

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xA1552C", Offset = "0xA1552C", VA = "0xA1552C")]
	public BezierPoint(float distanceFromCurveStart, Vector3 position, Vector3 direction)
	{
	}
}
[Token(Token = "0x20000FF")]
public class BezierRoutePart : MonoBehaviourPun
{
	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BezierCubicCurve curve;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<BezierRoutePart> nextRouteParts;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isActive;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private Color activeRouteColor;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private Color nonActiveRouteColor;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	public int numberOfPoints;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public BezierPoint[] pointsInCurveArray;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public BezierPoint[] pointsInCurveArray2D;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float routeLength;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float routeLength2D;

	[Token(Token = "0x17000079")]
	public List<BezierRoutePart> NextRoutePartsActive
	{
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xA142E8", Offset = "0xA142E8", VA = "0xA142E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xA15590", Offset = "0xA15590", VA = "0xA15590")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xA15594", Offset = "0xA15594", VA = "0xA15594")]
	public void SetPointsInArray()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xA14018", Offset = "0xA14018", VA = "0xA14018")]
	public BezierPoint GetPoint(float distanceFromCurveStart, ref int indexToStartSearching)
	{
		return null;
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xA14F4C", Offset = "0xA14F4C", VA = "0xA14F4C")]
	public BezierPoint GetPoint2D(float distanceFromCurveStart, ref int indexToStartSearching)
	{
		return null;
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xA15900", Offset = "0xA15900", VA = "0xA15900")]
	public Vector3 GetPoint(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xA15918", Offset = "0xA15918", VA = "0xA15918")]
	public Vector3 GetDirection(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xA15930", Offset = "0xA15930", VA = "0xA15930")]
	public float GetTFromDistance(float startingT, float distanceToPast, bool isConsideringY)
	{
		return default(float);
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xA1594C", Offset = "0xA1594C", VA = "0xA1594C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xA159A0", Offset = "0xA159A0", VA = "0xA159A0")]
	public BezierRoutePart()
	{
	}
}
[Token(Token = "0x2000101")]
public class BezierSmoothConnector : MonoBehaviour
{
	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BezierCurvePoint thisCurvePoint;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BezierCurvePoint curvePointToConectTo;

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xA15A38", Offset = "0xA15A38", VA = "0xA15A38")]
	public void ConnectPointsSmoothly()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xA15A44", Offset = "0xA15A44", VA = "0xA15A44")]
	public static void ConnectPointsSmoothly(BezierCurvePoint firstCurvePoint, BezierCurvePoint secondCurvePoint)
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xA15BF4", Offset = "0xA15BF4", VA = "0xA15BF4")]
	public BezierSmoothConnector()
	{
	}
}
[Token(Token = "0x2000102")]
public class BezierSpline : MonoBehaviour
{
	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BezierCubicCurve bezierPrefab;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<BezierCubicCurve> bezierCurves;

	[Token(Token = "0x1700007A")]
	public List<BezierCubicCurve> BezierCurves
	{
		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xA15BFC", Offset = "0xA15BFC", VA = "0xA15BFC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xA15C04", Offset = "0xA15C04", VA = "0xA15C04")]
	public BezierSpline()
	{
	}
}
[Token(Token = "0x2000103")]
public class BowToPlatformAdjuster : MonoBehaviour
{
	[Token(Token = "0x40005C4")]
	private const float bowScaleMobile = 0.04034954f;

	[Token(Token = "0x40005C5")]
	private const float bowScalePC = 0.04747f;

	[Token(Token = "0x40005C6")]
	private const float bowHandScalePC = 2.244f;

	[Token(Token = "0x40005C7")]
	private const float bowHandScaleMobile = 2.58f;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform bowHandModel;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform bowParentTransform;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private SkinnedMeshRenderer bowMeshRenderer;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material bowMaterialMobile;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material bowMaterialPC;

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xA15C0C", Offset = "0xA15C0C", VA = "0xA15C0C")]
	public void SetReferences()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xA15C24", Offset = "0xA15C24", VA = "0xA15C24")]
	private void SetReferences(Material bowMaterial, float bowScale, float bowHandScale)
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xA15D34", Offset = "0xA15D34", VA = "0xA15D34")]
	public BowToPlatformAdjuster()
	{
	}
}
[Token(Token = "0x2000104")]
public class CameraAnimationsController : MonoBehaviour
{
	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] cameras;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] camerasShotView;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int currentCamera;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int numberOfCameras;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animator anim;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private KeyCode[] keyCodes;

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xA15D3C", Offset = "0xA15D3C", VA = "0xA15D3C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xA15E38", Offset = "0xA15E38", VA = "0xA15E38")]
	private void Update()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xA15D60", Offset = "0xA15D60", VA = "0xA15D60")]
	private void ChangeCamera(int cameraNumber)
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xA16010", Offset = "0xA16010", VA = "0xA16010")]
	private void ShowShotView(int cameraNumber)
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xA1607C", Offset = "0xA1607C", VA = "0xA1607C")]
	private void SetCameraActive()
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xA160BC", Offset = "0xA160BC", VA = "0xA160BC")]
	private void SetShodViewCameraActive()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xA160FC", Offset = "0xA160FC", VA = "0xA160FC")]
	public CameraAnimationsController()
	{
	}
}
[Token(Token = "0x2000105")]
public class CameraEnabler : MonoBehaviourPun
{
	[Token(Token = "0x2000106")]
	[CompilerGenerated]
	private sealed class <EnableCameraInDeathMatchCoroutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraEnabler <>4__this;

		[Token(Token = "0x1700007B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600050D")]
			[Address(RVA = "0xA1676C", Offset = "0xA1676C", VA = "0xA1676C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600050F")]
			[Address(RVA = "0xA167B4", Offset = "0xA167B4", VA = "0xA167B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0xA16518", Offset = "0xA16518", VA = "0xA16518")]
		[DebuggerHidden]
		public <EnableCameraInDeathMatchCoroutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0xA1656C", Offset = "0xA1656C", VA = "0xA1656C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0xA16570", Offset = "0xA16570", VA = "0xA16570", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0xA16774", Offset = "0xA16774", VA = "0xA16774", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool isDeathMatch;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HVRCamera hvrCamera;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TeleportPlatformHolder teleportPlatformHolder;

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xA1618C", Offset = "0xA1618C", VA = "0xA1618C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xA162B0", Offset = "0xA162B0", VA = "0xA162B0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xA163AC", Offset = "0xA163AC", VA = "0xA163AC")]
	private void EnableCamera()
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xA163F8", Offset = "0xA163F8", VA = "0xA163F8")]
	public void EnableCameraInAppropriateMoment()
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xA16408", Offset = "0xA16408", VA = "0xA16408")]
	private void EnableCameraInDeathMatch()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xA164A4", Offset = "0xA164A4", VA = "0xA164A4")]
	[IteratorStateMachine(typeof(<EnableCameraInDeathMatchCoroutine>d__8))]
	private IEnumerator EnableCameraInDeathMatchCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xA16540", Offset = "0xA16540", VA = "0xA16540")]
	public CameraEnabler()
	{
	}
}
[Serializable]
[Token(Token = "0x2000107")]
public class CannonReferences
{
	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("GrapeShootParticles")]
	public GameObject[] GrapeShootParticles;

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xA167BC", Offset = "0xA167BC", VA = "0xA167BC")]
	public CannonReferences()
	{
	}
}
[Token(Token = "0x2000108")]
public class CannonReferenceSetter : MonoBehaviour
{
	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("CannonController")]
	[SerializeField]
	private CannonController cannonController;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Mobile References")]
	private CannonReferences cannonReferencesMobile;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("PC References")]
	[SerializeField]
	private CannonReferences CannonReferencesPC;

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xA167C4", Offset = "0xA167C4", VA = "0xA167C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xA167C8", Offset = "0xA167C8", VA = "0xA167C8")]
	public void SetReferences()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xA16850", Offset = "0xA16850", VA = "0xA16850")]
	private void SetReferences(CannonReferences cannonReferences)
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xA16874", Offset = "0xA16874", VA = "0xA16874")]
	public CannonReferenceSetter()
	{
	}
}
[Token(Token = "0x2000109")]
public class CannonShotController : MonoBehaviour
{
	[Token(Token = "0x40005DD")]
	private const float cannonBaseDamage = 25f;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float damageMultiplyer;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float lifetimeOfExplosion;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float currentTimeOfExplosion;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SimpleHitInfo simpleHitInfo;

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xA1687C", Offset = "0xA1687C", VA = "0xA1687C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xA168DC", Offset = "0xA168DC", VA = "0xA168DC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xA169EC", Offset = "0xA169EC", VA = "0xA169EC")]
	public void Explode(int clientThatShotID)
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xA16B30", Offset = "0xA16B30", VA = "0xA16B30")]
	public CannonShotController()
	{
	}
}
[Token(Token = "0x200010A")]
public class CatapultController : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x200010B")]
	[CompilerGenerated]
	private sealed class <AttachStartingRock>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CatapultController <>4__this;

		[Token(Token = "0x1700007D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600052C")]
			[Address(RVA = "0xA17E8C", Offset = "0xA17E8C", VA = "0xA17E8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600052E")]
			[Address(RVA = "0xA17ED4", Offset = "0xA17ED4", VA = "0xA17ED4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0xA1737C", Offset = "0xA1737C", VA = "0xA1737C")]
		[DebuggerHidden]
		public <AttachStartingRock>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0xA17D2C", Offset = "0xA17D2C", VA = "0xA17D2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0xA17D30", Offset = "0xA17D30", VA = "0xA17D30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0xA17E94", Offset = "0xA17E94", VA = "0xA17E94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010C")]
	[CompilerGenerated]
	private sealed class <ShootCoroutine>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CatapultController <>4__this;

		[Token(Token = "0x1700007F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000532")]
			[Address(RVA = "0xA18034", Offset = "0xA18034", VA = "0xA18034", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000534")]
			[Address(RVA = "0xA1807C", Offset = "0xA1807C", VA = "0xA1807C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0xA17784", Offset = "0xA17784", VA = "0xA17784")]
		[DebuggerHidden]
		public <ShootCoroutine>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0xA17EDC", Offset = "0xA17EDC", VA = "0xA17EDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0xA17EE0", Offset = "0xA17EE0", VA = "0xA17EE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0xA1803C", Offset = "0xA1803C", VA = "0xA1803C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010D")]
	[CompilerGenerated]
	private sealed class <LoadRockCoroutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CatapultController <>4__this;

		[Token(Token = "0x17000081")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000538")]
			[Address(RVA = "0xA181F8", Offset = "0xA181F8", VA = "0xA181F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000082")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600053A")]
			[Address(RVA = "0xA18240", Offset = "0xA18240", VA = "0xA18240", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xA178A4", Offset = "0xA178A4", VA = "0xA178A4")]
		[DebuggerHidden]
		public <LoadRockCoroutine>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0xA18084", Offset = "0xA18084", VA = "0xA18084", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xA18088", Offset = "0xA18088", VA = "0xA18088", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0xA18200", Offset = "0xA18200", VA = "0xA18200", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator animator;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject rockInCatapult;

	[Token(Token = "0x40005E4")]
	private const float timeFromRockStartingToFlyToLoadingNewOne = 1f;

	[Token(Token = "0x40005E5")]
	private const float timeFromStartingLoadAnimationToAttachingRock = 3f;

	[Token(Token = "0x40005E6")]
	private const float delayToGetEverythingFromNetwork = 1f;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform rockAttachPoint;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform shotDirection;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float forceMutliplier;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject rockPrefab;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int rockID;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool hasBeenShotRequested;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool isLoadedWithCatapultRock;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource catapultAudio;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip[] catapultLoadingClips;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip[] catapultShotClips;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float timeFromShotAnimationStartToCatapultRockFlyStart;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform rockPositionWhenStartingToFlyFromCatapult;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private MeshRenderer leverOutline;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private MeshRenderer leverWithoutOutline;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool hasClientRequestedShot;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Vector3 angularVelocityOfRockWhenStartsToFly;

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xA16B40", Offset = "0xA16B40", VA = "0xA16B40")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xA16B98", Offset = "0xA16B98", VA = "0xA16B98")]
	[PunRPC]
	public void RpcRequestShot(int requestingPlayerID)
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xA16D18", Offset = "0xA16D18", VA = "0xA16D18")]
	[PunRPC]
	private void RpcShoot()
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xA16DAC", Offset = "0xA16DAC", VA = "0xA16DAC")]
	[PunRPC]
	public void InstantiateRockOnNetwork()
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xA16FA4", Offset = "0xA16FA4", VA = "0xA16FA4")]
	[PunRPC]
	private void RpcAttachRock(int rockPhotonViewID)
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xA17268", Offset = "0xA17268", VA = "0xA17268")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xA17308", Offset = "0xA17308", VA = "0xA17308")]
	[IteratorStateMachine(typeof(<AttachStartingRock>d__27))]
	private IEnumerator AttachStartingRock()
	{
		return null;
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xA173A4", Offset = "0xA173A4", VA = "0xA173A4")]
	private void ChangeCatapultAnimationStateToLoaded()
	{
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xA17400", Offset = "0xA17400", VA = "0xA17400")]
	private void ThrowRock()
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xA16D38", Offset = "0xA16D38", VA = "0xA16D38")]
	[IteratorStateMachine(typeof(<ShootCoroutine>d__30))]
	private IEnumerator ShootCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xA17718", Offset = "0xA17718", VA = "0xA17718")]
	private void ResetRockRigidbody(Rigidbody rbRockInCatapult, Rigidbody rbRockPrefab)
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xA177AC", Offset = "0xA177AC", VA = "0xA177AC")]
	private void LoadRock()
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xA17830", Offset = "0xA17830", VA = "0xA17830")]
	[IteratorStateMachine(typeof(<LoadRockCoroutine>d__33))]
	private IEnumerator LoadRockCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xA178CC", Offset = "0xA178CC", VA = "0xA178CC")]
	private void AttachRock()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xA17B90", Offset = "0xA17B90", VA = "0xA17B90", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xA17D18", Offset = "0xA17D18", VA = "0xA17D18")]
	public CatapultController()
	{
	}
}
[Token(Token = "0x200010E")]
public class CatapultRockController : MonoBehaviour, IPunObservable, IResetable
{
	[Token(Token = "0x4000600")]
	private const float yOffsetValue = 10000f;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 velocityWhenHit;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool hasHit;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float velocityWhenHitMultiplier;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool hasBeenThrown;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	private bool firstHasBeenThrownReceived;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem hitParticle;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Rigidbody rockRigidbody;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CollisionDetectionMode defaultDetectionMode;

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xA18248", Offset = "0xA18248", VA = "0xA18248")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xA18338", Offset = "0xA18338", VA = "0xA18338")]
	private void OnTriggerExit(Collider col)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xA183FC", Offset = "0xA183FC", VA = "0xA183FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xA18424", Offset = "0xA18424", VA = "0xA18424")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xA1847C", Offset = "0xA1847C", VA = "0xA1847C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xA184D4", Offset = "0xA184D4", VA = "0xA184D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xA17208", Offset = "0xA17208", VA = "0xA17208")]
	public void SetKinemetic(bool isKinematic)
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xA18524", Offset = "0xA18524", VA = "0xA18524", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xA186A4", Offset = "0xA186A4", VA = "0xA186A4", Slot = "5")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xA1870C", Offset = "0xA1870C", VA = "0xA1870C")]
	public CatapultRockController()
	{
	}
}
[Token(Token = "0x200010F")]
public class ChangeCamera : MonoBehaviour
{
	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera[] cameras;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int index;

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xA18720", Offset = "0xA18720", VA = "0xA18720")]
	public void ChangeCameraOnClick()
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xA187B0", Offset = "0xA187B0", VA = "0xA187B0")]
	public ChangeCamera()
	{
	}
}
[Token(Token = "0x2000110")]
public class DeathMatchController : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static DeathMatchController instance;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DeathMatchGameTimeController gameTimeController;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameStateDM state;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action OnGameStarted;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action OnGameFinished;

	[Token(Token = "0x17000083")]
	public static DeathMatchController Instance
	{
		[Token(Token = "0x6000547")]
		[Address(RVA = "0xA16698", Offset = "0xA16698", VA = "0xA16698")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000084")]
	public GameStateDM State
	{
		[Token(Token = "0x6000548")]
		[Address(RVA = "0xA187B8", Offset = "0xA187B8", VA = "0xA187B8")]
		get
		{
			return default(GameStateDM);
		}
		[Token(Token = "0x6000549")]
		[Address(RVA = "0xA187C0", Offset = "0xA187C0", VA = "0xA187C0")]
		set
		{
		}
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xA18C24", Offset = "0xA18C24", VA = "0xA18C24")]
	private void Awake()
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xA18CF4", Offset = "0xA18CF4", VA = "0xA18CF4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xA18F64", Offset = "0xA18F64", VA = "0xA18F64")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xA191D4", Offset = "0xA191D4", VA = "0xA191D4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xA192B0", Offset = "0xA192B0", VA = "0xA192B0")]
	public void StartMatchCountdown()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xA19414", Offset = "0xA19414", VA = "0xA19414")]
	private void SetMenuState(Scene scene, LoadSceneMode loadSceneMode)
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xA1941C", Offset = "0xA1941C", VA = "0xA1941C")]
	private void SetMenuState()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xA194A4", Offset = "0xA194A4", VA = "0xA194A4")]
	private void SetPlayingState()
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xA194AC", Offset = "0xA194AC", VA = "0xA194AC")]
	private void SetOverState()
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xA19424", Offset = "0xA19424", VA = "0xA19424")]
	private void SetGameState(GameStateDM _state)
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xA18908", Offset = "0xA18908", VA = "0xA18908")]
	private void ManageMenuState()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xA189A0", Offset = "0xA189A0", VA = "0xA189A0")]
	private void InitializeMenuState()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xA189C4", Offset = "0xA189C4", VA = "0xA189C4")]
	private void ManagePlayingState()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xA18A30", Offset = "0xA18A30", VA = "0xA18A30")]
	private void InitializePlayingState()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xA18AE8", Offset = "0xA18AE8", VA = "0xA18AE8")]
	private void ManageOverState()
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xA18B80", Offset = "0xA18B80", VA = "0xA18B80")]
	private void InitializeGameOverState()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xA19594", Offset = "0xA19594", VA = "0xA19594", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xA1965C", Offset = "0xA1965C", VA = "0xA1965C")]
	public DeathMatchController()
	{
	}
}
[Token(Token = "0x2000111")]
public class DeathMatchGameTimeController : GameTimeController, IPunObservable, IInRoomCallbacks
{
	[Token(Token = "0x2000112")]
	[CompilerGenerated]
	private sealed class <SetMatchLengthAfterSynchronization>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeathMatchGameTimeController <>4__this;

		[Token(Token = "0x17000088")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000588")]
			[Address(RVA = "0xA1B198", Offset = "0xA1B198", VA = "0xA1B198", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600058A")]
			[Address(RVA = "0xA1B1E0", Offset = "0xA1B1E0", VA = "0xA1B1E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0xA1A88C", Offset = "0xA1A88C", VA = "0xA1A88C")]
		[DebuggerHidden]
		public <SetMatchLengthAfterSynchronization>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0xA1B084", Offset = "0xA1B084", VA = "0xA1B084", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0xA1B088", Offset = "0xA1B088", VA = "0xA1B088", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xA1B1A0", Offset = "0xA1B1A0", VA = "0xA1B1A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000610")]
	private const float timeLeftFromResultsFinishToRestartGame = 1f;

	[Token(Token = "0x4000611")]
	private const float minPluralValue = 2f;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space(10f)]
	[Header("GameTime in minutes:")]
	public int fullGameTime;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("TimeToRestart in seconds:")]
	[Space(10f)]
	public int fullTimeToRestart;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private DeathmatchStartCountdownController deathmatchStartCountdownController;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space(20f)]
	public Text scoreboardTimeText;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject CountdownStartGameUI;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text valueOfTimeToStartGameText;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text timeToStartAndRestartTheGameText;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject deathMatchMenuController;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Timer timerFromGameStartButtonClick;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Timer timerInGame;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Timer timerRestartGame;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TimerSound timerSound;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float timeToEndGame;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float timeToRestartGame;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool isPlaying;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool isOver;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	private bool resultsAfterGameFinished;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
	private bool isTimerSynchronized;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action OnCountdownStart;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action OnOverTimeToStartGame;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Action OnGameOver;

	[Token(Token = "0x17000085")]
	public float TimeToEndGame
	{
		[Token(Token = "0x6000560")]
		[Address(RVA = "0xA19974", Offset = "0xA19974", VA = "0xA19974")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000561")]
		[Address(RVA = "0xA1997C", Offset = "0xA1997C", VA = "0xA1997C")]
		set
		{
		}
	}

	[Token(Token = "0x17000086")]
	public int FullGameTime
	{
		[Token(Token = "0x6000562")]
		[Address(RVA = "0xA19A8C", Offset = "0xA19A8C", VA = "0xA19A8C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000563")]
		[Address(RVA = "0xA19A94", Offset = "0xA19A94", VA = "0xA19A94")]
		set
		{
		}
	}

	[Token(Token = "0x17000087")]
	public float TimeToRestartGame
	{
		[Token(Token = "0x6000564")]
		[Address(RVA = "0xA19B70", Offset = "0xA19B70", VA = "0xA19B70")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000565")]
		[Address(RVA = "0xA19B78", Offset = "0xA19B78", VA = "0xA19B78")]
		set
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public static event Action OnResultsAfterGameFinished
	{
		[Token(Token = "0x600055C")]
		[Address(RVA = "0xA19664", Offset = "0xA19664", VA = "0xA19664")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600055D")]
		[Address(RVA = "0xA1971C", Offset = "0xA1971C", VA = "0xA1971C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public static event Action<float> OnTimeToEndGameChange
	{
		[Token(Token = "0x600055E")]
		[Address(RVA = "0xA197D4", Offset = "0xA197D4", VA = "0xA197D4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600055F")]
		[Address(RVA = "0xA198A4", Offset = "0xA198A4", VA = "0xA198A4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xA19C2C", Offset = "0xA19C2C", VA = "0xA19C2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xA19C6C", Offset = "0xA19C6C", VA = "0xA19C6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xA1A0BC", Offset = "0xA1A0BC", VA = "0xA1A0BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xA1A140", Offset = "0xA1A140", VA = "0xA1A140")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xA1A590", Offset = "0xA1A590", VA = "0xA1A590")]
	private void Update()
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xA194B4", Offset = "0xA194B4", VA = "0xA194B4")]
	public void MatchLengthCountdown()
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xA1A818", Offset = "0xA1A818", VA = "0xA1A818")]
	[IteratorStateMachine(typeof(<SetMatchLengthAfterSynchronization>d__44))]
	private IEnumerator SetMatchLengthAfterSynchronization()
	{
		return null;
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xA194D4", Offset = "0xA194D4", VA = "0xA194D4")]
	public void StartGameRestartCountdown()
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xA19B8C", Offset = "0xA19B8C", VA = "0xA19B8C")]
	private void UpdateCountdownDescription()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xA1A8B4", Offset = "0xA1A8B4", VA = "0xA1A8B4")]
	private void UpdateCountDownDescriptionWithTime()
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xA1A9A8", Offset = "0xA1A9A8", VA = "0xA1A9A8")]
	public void Vanish()
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xA1AA38", Offset = "0xA1AA38", VA = "0xA1AA38")]
	public void PlayLoopSound()
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xA1AA54", Offset = "0xA1AA54", VA = "0xA1AA54")]
	public void PlayEndSound()
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xA1AA70", Offset = "0xA1AA70", VA = "0xA1AA70")]
	public void PlayTeleportSound()
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xA192C8", Offset = "0xA192C8", VA = "0xA192C8")]
	public void StartCountingTimeToStart()
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xA1AA8C", Offset = "0xA1AA8C", VA = "0xA1AA8C")]
	public void StartCountingTimeGame()
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xA1AAC0", Offset = "0xA1AAC0", VA = "0xA1AAC0")]
	public void SynchronizeTimeToGameStart(float time)
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xA1AADC", Offset = "0xA1AADC", VA = "0xA1AADC")]
	public float GetPreciseTimeToGameStart()
	{
		return default(float);
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xA1AAF8", Offset = "0xA1AAF8", VA = "0xA1AAF8")]
	private void SetStateToMinutesLeft()
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xA1AB74", Offset = "0xA1AB74", VA = "0xA1AB74")]
	private void UpdateTimeToStartTheGameText()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xA1A7CC", Offset = "0xA1A7CC", VA = "0xA1A7CC")]
	private void UpdateTimeToRestart()
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xA1A6FC", Offset = "0xA1A6FC", VA = "0xA1A6FC")]
	private void UpdateDeathMatchTime()
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xA1AC30", Offset = "0xA1AC30", VA = "0xA1AC30", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xA1AEB0", Offset = "0xA1AEB0", VA = "0xA1AEB0")]
	[PunRPC]
	private void RpcSynchronizeStarGame()
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xA1B018", Offset = "0xA1B018", VA = "0xA1B018", Slot = "9")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xA1B050", Offset = "0xA1B050", VA = "0xA1B050", Slot = "5")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xA1B054", Offset = "0xA1B054", VA = "0xA1B054", Slot = "6")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xA1B058", Offset = "0xA1B058", VA = "0xA1B058", Slot = "7")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xA1B05C", Offset = "0xA1B05C", VA = "0xA1B05C", Slot = "8")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xA1B060", Offset = "0xA1B060", VA = "0xA1B060")]
	public DeathMatchGameTimeController()
	{
	}
}
[Token(Token = "0x2000113")]
public class DeathMatchPauseMenu : MonoBehaviourPun
{
	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject startButton;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject continueButton;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject pauseWindow;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject WaitingForTheHostText;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Timer timer;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject[] windowsInPauseMenu;

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xA1B1E8", Offset = "0xA1B1E8", VA = "0xA1B1E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xA1B67C", Offset = "0xA1B67C", VA = "0xA1B67C")]
	private void Start()
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xA1B7A4", Offset = "0xA1B7A4", VA = "0xA1B7A4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xA1B694", Offset = "0xA1B694", VA = "0xA1B694")]
	public void InitializePauseWindow()
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xA1B784", Offset = "0xA1B784", VA = "0xA1B784")]
	private void OpenPauseWindow()
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xA1BC58", Offset = "0xA1BC58", VA = "0xA1BC58")]
	private void ClosePauseWindow()
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xA1BCBC", Offset = "0xA1BCBC", VA = "0xA1BCBC")]
	private void EnableContinueButton()
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xA1BCDC", Offset = "0xA1BCDC", VA = "0xA1BCDC")]
	private void DisableContinueButton()
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0xA1BC38", Offset = "0xA1BC38", VA = "0xA1BC38")]
	private void DisableHostText()
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xA1BCFC", Offset = "0xA1BCFC", VA = "0xA1BCFC")]
	public DeathMatchPauseMenu()
	{
	}
}
[Token(Token = "0x2000114")]
public class DeathMatchPauseWindowLocalizer : MonoBehaviour
{
	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Hits;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Deaths;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text BetaVersion;

	[Token(Token = "0x6000595")]
	[Address(RVA = "0xA1BD04", Offset = "0xA1BD04", VA = "0xA1BD04")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xA1BDB0", Offset = "0xA1BDB0", VA = "0xA1BDB0")]
	public DeathMatchPauseWindowLocalizer()
	{
	}
}
[Token(Token = "0x2000115")]
public class DeathmatchStartCountdownController : MonoBehaviour
{
	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float countdownTimeForTournament;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float countdownTimeForNormalDeathMatch;

	[Token(Token = "0x1700008A")]
	public float CountdownTime
	{
		[Token(Token = "0x6000597")]
		[Address(RVA = "0xA1AFEC", Offset = "0xA1AFEC", VA = "0xA1AFEC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xA1BDB8", Offset = "0xA1BDB8", VA = "0xA1BDB8")]
	public DeathmatchStartCountdownController()
	{
	}
}
[Token(Token = "0x2000116")]
public enum GameStateDM
{
	[Token(Token = "0x4000638")]
	Menu,
	[Token(Token = "0x4000639")]
	Playing,
	[Token(Token = "0x400063A")]
	Over
}
[Token(Token = "0x2000117")]
public class MapVotingControllerDeathmatchCaller : MonoBehaviour
{
	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MapVotingController mapVotingController;

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xA1BDC0", Offset = "0xA1BDC0", VA = "0xA1BDC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0xA1BE18", Offset = "0xA1BE18", VA = "0xA1BE18")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0xA1BEB0", Offset = "0xA1BEB0", VA = "0xA1BEB0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xA1BF48", Offset = "0xA1BF48", VA = "0xA1BF48")]
	public MapVotingControllerDeathmatchCaller()
	{
	}
}
[Token(Token = "0x2000118")]
public class MasterChangerDeathMatch : MonoBehaviourPun, IInRoomCallbacks
{
	[Token(Token = "0x200011A")]
	[CompilerGenerated]
	private sealed class <SetNewMasterDelayed>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MasterChangerDeathMatch <>4__this;

		[Token(Token = "0x1700008B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005AF")]
			[Address(RVA = "0xA1C45C", Offset = "0xA1C45C", VA = "0xA1C45C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005B1")]
			[Address(RVA = "0xA1C4A4", Offset = "0xA1C4A4", VA = "0xA1C4A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0xA1C0C0", Offset = "0xA1C0C0", VA = "0xA1C0C0")]
		[DebuggerHidden]
		public <SetNewMasterDelayed>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0xA1C2FC", Offset = "0xA1C2FC", VA = "0xA1C2FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xA1C300", Offset = "0xA1C300", VA = "0xA1C300", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0xA1C464", Offset = "0xA1C464", VA = "0xA1C464", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400063C")]
	private const GameType gameType = GameType.Deathmatch;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnMenuMasterChanged;

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xA1BF50", Offset = "0xA1BF50", VA = "0xA1BF50")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xA1BFA8", Offset = "0xA1BFA8", VA = "0xA1BFA8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xA1C000", Offset = "0xA1C000", VA = "0xA1C000")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xA1C04C", Offset = "0xA1C04C", VA = "0xA1C04C")]
	[IteratorStateMachine(typeof(<SetNewMasterDelayed>d__5))]
	private IEnumerator SetNewMasterDelayed()
	{
		return null;
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xA1C040", Offset = "0xA1C040", VA = "0xA1C040")]
	private bool GameUnpaused(bool pauseStatus)
	{
		return default(bool);
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xA1C0E8", Offset = "0xA1C0E8", VA = "0xA1C0E8")]
	private void SetNewMaster()
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xA1C1A8", Offset = "0xA1C1A8", VA = "0xA1C1A8", Slot = "4")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xA1C1AC", Offset = "0xA1C1AC", VA = "0xA1C1AC", Slot = "5")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xA1C1B0", Offset = "0xA1C1B0", VA = "0xA1C1B0", Slot = "6")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xA1C1B4", Offset = "0xA1C1B4", VA = "0xA1C1B4", Slot = "7")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xA1C1B8", Offset = "0xA1C1B8", VA = "0xA1C1B8", Slot = "8")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xA1C220", Offset = "0xA1C220", VA = "0xA1C220")]
	public MasterChangerDeathMatch()
	{
	}
}
[Token(Token = "0x200011B")]
public abstract class PlayerDeathControllerDeathMatch : PlayerDeathController
{
	[Token(Token = "0x60005B2")]
	public abstract void Die();

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xA1C4AC", Offset = "0xA1C4AC", VA = "0xA1C4AC")]
	protected PlayerDeathControllerDeathMatch()
	{
	}
}
[Token(Token = "0x200011C")]
public class PlayerDeathControllerDmMobile : PlayerDeathControllerDeathMatch, IInRoomCallbacks
{
	[Token(Token = "0x200011D")]
	[CompilerGenerated]
	private sealed class <ShowDelayedTextDeathPlayerTimeToRespawn>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerDeathControllerDmMobile <>4__this;

		[Token(Token = "0x1700008E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005CD")]
			[Address(RVA = "0xA1CF44", Offset = "0xA1CF44", VA = "0xA1CF44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005CF")]
			[Address(RVA = "0xA1CF8C", Offset = "0xA1CF8C", VA = "0xA1CF8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xA1CB9C", Offset = "0xA1CB9C", VA = "0xA1CB9C")]
		[DebuggerHidden]
		public <ShowDelayedTextDeathPlayerTimeToRespawn>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0xA1CDA8", Offset = "0xA1CDA8", VA = "0xA1CDA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0xA1CDAC", Offset = "0xA1CDAC", VA = "0xA1CDAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0xA1CF4C", Offset = "0xA1CF4C", VA = "0xA1CF4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200011E")]
	[CompilerGenerated]
	private sealed class <DieSoundRoutine>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerDeathControllerDmMobile <>4__this;

		[Token(Token = "0x17000090")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005D3")]
			[Address(RVA = "0xA1D024", Offset = "0xA1D024", VA = "0xA1D024", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000091")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005D5")]
			[Address(RVA = "0xA1D06C", Offset = "0xA1D06C", VA = "0xA1D06C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0xA1CBF4", Offset = "0xA1CBF4", VA = "0xA1CBF4")]
		[DebuggerHidden]
		public <DieSoundRoutine>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0xA1CF94", Offset = "0xA1CF94", VA = "0xA1CF94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0xA1CF98", Offset = "0xA1CF98", VA = "0xA1CF98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0xA1D02C", Offset = "0xA1D02C", VA = "0xA1D02C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000643")]
	private const float timeUntilRespawn = 5f;

	[Token(Token = "0x4000644")]
	private const float respawnTimerTextDistanceFromPlayer = 2f;

	[Token(Token = "0x4000645")]
	private const float timeUntilCounterToRespawnShouldBeVisible = 2f;

	[Token(Token = "0x4000646")]
	private const float animationOffset = 0.5f;

	[Token(Token = "0x4000647")]
	private const int distanceFromPlayer = 0;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip deathSound;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioSource deathAudioSource;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PlayerMaterialsColorSetterMobile playerMaterialColorSetter;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject deathEffect;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isDead;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool deathEffectTimeFinished;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float currentTimeToRespawn;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private FloatingTextController floatingTextController;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private FloatTextCanvas canvasWithTimeToRespawn;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private WaitForSeconds soundDelay;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private WaitForSeconds textDelay;

	[Token(Token = "0x1700008D")]
	public override bool IsDead
	{
		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xA1C4B4", Offset = "0xA1C4B4", VA = "0xA1C4B4", Slot = "4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xA1C4BC", Offset = "0xA1C4BC", VA = "0xA1C4BC", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xA1C564", Offset = "0xA1C564", VA = "0xA1C564")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xA1C5DC", Offset = "0xA1C5DC", VA = "0xA1C5DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xA1C634", Offset = "0xA1C634", VA = "0xA1C634")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xA1C68C", Offset = "0xA1C68C", VA = "0xA1C68C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xA1C6D4", Offset = "0xA1C6D4", VA = "0xA1C6D4")]
	private void ProcessDeathEffect()
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xA1C9AC", Offset = "0xA1C9AC", VA = "0xA1C9AC", Slot = "8")]
	public override void Die()
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xA1CB28", Offset = "0xA1CB28", VA = "0xA1CB28")]
	[IteratorStateMachine(typeof(<ShowDelayedTextDeathPlayerTimeToRespawn>d__25))]
	private IEnumerator ShowDelayedTextDeathPlayerTimeToRespawn()
	{
		return null;
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xA1CB08", Offset = "0xA1CB08", VA = "0xA1CB08")]
	public void EnableDeathEffects()
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xA1C544", Offset = "0xA1C544", VA = "0xA1C544")]
	public void DisableDeathEffects()
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xA1CBC4", Offset = "0xA1CBC4", VA = "0xA1CBC4", Slot = "6")]
	public override void InitializeWithoutPlayer()
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xA1CBE8", Offset = "0xA1CBE8", VA = "0xA1CBE8", Slot = "7")]
	public override void InitializeWithPlayer()
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xA1CA94", Offset = "0xA1CA94", VA = "0xA1CA94")]
	[IteratorStateMachine(typeof(<DieSoundRoutine>d__30))]
	private IEnumerator DieSoundRoutine()
	{
		return null;
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xA1C520", Offset = "0xA1C520", VA = "0xA1C520")]
	private void SetPlayerMaterialsToGhost(bool isGhost)
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xA1CC1C", Offset = "0xA1CC1C", VA = "0xA1CC1C", Slot = "13")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xA1CCBC", Offset = "0xA1CCBC", VA = "0xA1CCBC")]
	private bool IsWaitingForRespawn()
	{
		return default(bool);
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xA1CCF0", Offset = "0xA1CCF0", VA = "0xA1CCF0", Slot = "9")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xA1CCF4", Offset = "0xA1CCF4", VA = "0xA1CCF4", Slot = "10")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xA1CCF8", Offset = "0xA1CCF8", VA = "0xA1CCF8", Slot = "11")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xA1CCFC", Offset = "0xA1CCFC", VA = "0xA1CCFC", Slot = "12")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xA1CD00", Offset = "0xA1CD00", VA = "0xA1CD00")]
	public PlayerDeathControllerDmMobile()
	{
	}
}
[Token(Token = "0x200011F")]
public class DeathAnimAdjuster : MonoBehaviour
{
	[Token(Token = "0x4000659")]
	private const float rotationSpeed = 70f;

	[Token(Token = "0x400065A")]
	private const float minimumAnimationTimeToStartRotating = 0.7f;

	[Token(Token = "0x400065B")]
	private const string deadAnimationStateName = "Dead";

	[Token(Token = "0x400065C")]
	private const float maxRotatedAngle = 45f;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Animator orcAnimator;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform transformToRotate;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Collider groundHitCollider;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool orcOnGround;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isInActiveArea;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float currentRotatedAngle;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action OnDeathAnimationAdjustingFinished;

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xA1D074", Offset = "0xA1D074", VA = "0xA1D074")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xA1D09C", Offset = "0xA1D09C", VA = "0xA1D09C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xA1D0BC", Offset = "0xA1D0BC", VA = "0xA1D0BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xA1D284", Offset = "0xA1D284", VA = "0xA1D284")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xA1D354", Offset = "0xA1D354", VA = "0xA1D354")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xA1D2E0", Offset = "0xA1D2E0", VA = "0xA1D2E0")]
	private bool ShouldStopDeathAnimation(string colliderTag)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xA1D2F8", Offset = "0xA1D2F8", VA = "0xA1D2F8")]
	private void StopDeathAnimation()
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xA1D19C", Offset = "0xA1D19C", VA = "0xA1D19C")]
	public bool ShouldRotateToGround()
	{
		return default(bool);
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xA1D3EC", Offset = "0xA1D3EC", VA = "0xA1D3EC")]
	private static bool IsItStoppingDeathTag(string tag)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xA1D480", Offset = "0xA1D480", VA = "0xA1D480")]
	public DeathAnimAdjuster()
	{
	}
}
[Token(Token = "0x2000120")]
public class DebugOrcTrailController : MonoBehaviour
{
	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrailRenderer trailRenderer;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RouteController routeController;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool colorPicked;

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xA1D488", Offset = "0xA1D488", VA = "0xA1D488")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xA1D554", Offset = "0xA1D554", VA = "0xA1D554")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xA1D580", Offset = "0xA1D580", VA = "0xA1D580")]
	public DebugOrcTrailController()
	{
	}
}
[Token(Token = "0x2000121")]
public class debugtext : MonoBehaviourPun, IMatchmakingCallbacks
{
	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text text1;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text text2;

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xA1D588", Offset = "0xA1D588", VA = "0xA1D588")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xA1D5E0", Offset = "0xA1D5E0", VA = "0xA1D5E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xA1D638", Offset = "0xA1D638", VA = "0xA1D638", Slot = "5")]
	public void OnCreatedRoom()
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xA1D6D8", Offset = "0xA1D6D8", VA = "0xA1D6D8", Slot = "6")]
	public void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xA1D718", Offset = "0xA1D718", VA = "0xA1D718", Slot = "4")]
	public void OnFriendListUpdate(List<FriendInfo> friendList)
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xA1D758", Offset = "0xA1D758", VA = "0xA1D758", Slot = "7")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xA1D798", Offset = "0xA1D798", VA = "0xA1D798", Slot = "9")]
	public void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xA1D7D8", Offset = "0xA1D7D8", VA = "0xA1D7D8", Slot = "8")]
	public void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xA1D818", Offset = "0xA1D818", VA = "0xA1D818", Slot = "10")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xA1D858", Offset = "0xA1D858", VA = "0xA1D858")]
	public debugtext()
	{
	}
}
[Token(Token = "0x2000122")]
public class DestructibleLanternController : MonoBehaviour
{
	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light lightToBreak;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource brokenGlassSound;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource metalHitSound;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool broken;

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xA1D860", Offset = "0xA1D860", VA = "0xA1D860")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xA1D9B0", Offset = "0xA1D9B0", VA = "0xA1D9B0")]
	public DestructibleLanternController()
	{
	}
}
[Token(Token = "0x2000123")]
public class DragonSpawnPoint : MonoBehaviour
{
	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RoutePoint dragonDeathPoint;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int DragonDeathPointIndex;

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xA1D9B8", Offset = "0xA1D9B8", VA = "0xA1D9B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xA1DA90", Offset = "0xA1DA90", VA = "0xA1DA90")]
	public DragonSpawnPoint()
	{
	}
}
[Token(Token = "0x2000124")]
public class DummyArrowInteraction : MonoBehaviour
{
	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Rigidbody forceReceiver;

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xA1DB04", Offset = "0xA1DB04", VA = "0xA1DB04")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xA1DCE0", Offset = "0xA1DCE0", VA = "0xA1DCE0")]
	public DummyArrowInteraction()
	{
	}
}
[Token(Token = "0x2000125")]
public class ArrowAttachmentPoint : MonoBehaviour
{
	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Transform> attachmentPoints;

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xA12C44", Offset = "0xA12C44", VA = "0xA12C44")]
	public Transform CalculateClosestAttachmentPoint(Vector3 arrowPos)
	{
		return null;
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xA1DCE8", Offset = "0xA1DCE8", VA = "0xA1DCE8")]
	public ArrowAttachmentPoint()
	{
	}
}
[Token(Token = "0x2000126")]
public class BodyAttacher : MonoBehaviour, IResetable
{
	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform bone;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetWithArrowPosition;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float attachingSpeed;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float step;

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0xA1DCF0", Offset = "0xA1DCF0", VA = "0xA1DCF0")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0xA1DF9C", Offset = "0xA1DF9C", VA = "0xA1DF9C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xA1DD08", Offset = "0xA1DD08", VA = "0xA1DD08")]
	private void ProcessAttaching()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xA1DE0C", Offset = "0xA1DE0C", VA = "0xA1DE0C")]
	private void TryToEndAttaching()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xA1DFA4", Offset = "0xA1DFA4", VA = "0xA1DFA4")]
	private void SetInitialState()
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xA12D50", Offset = "0xA12D50", VA = "0xA12D50")]
	public void StartAttachingArrowToBone(Transform target)
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xA1DFAC", Offset = "0xA1DFAC", VA = "0xA1DFAC", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xA1DFD4", Offset = "0xA1DFD4", VA = "0xA1DFD4")]
	public BodyAttacher()
	{
	}
}
[Token(Token = "0x2000127")]
public class CrawlingZombiesDisappearController : MonoBehaviourPun
{
	[Token(Token = "0x2000128")]
	[CompilerGenerated]
	private sealed class <WaitForEnemiesDisappear>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CrawlingZombiesDisappearController <>4__this;

		[Token(Token = "0x17000093")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600060D")]
			[Address(RVA = "0xA1EFE8", Offset = "0xA1EFE8", VA = "0xA1EFE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600060F")]
			[Address(RVA = "0xA1F030", Offset = "0xA1F030", VA = "0xA1F030", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xA1EDC4", Offset = "0xA1EDC4", VA = "0xA1EDC4")]
		[DebuggerHidden]
		public <WaitForEnemiesDisappear>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xA1EF7C", Offset = "0xA1EF7C", VA = "0xA1EF7C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0xA1EF80", Offset = "0xA1EF80", VA = "0xA1EF80", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0xA1EFF0", Offset = "0xA1EFF0", VA = "0xA1EFF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SpawnController spawnController;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float disappearTimer;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool shouldEnableLifeTimers;

	[Token(Token = "0x17000092")]
	private WaitForSeconds disappearWaiter
	{
		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xA1DFE4", Offset = "0xA1DFE4", VA = "0xA1DFE4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xA1E054", Offset = "0xA1E054", VA = "0xA1E054")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xA1E338", Offset = "0xA1E338", VA = "0xA1E338")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xA1E61C", Offset = "0xA1E61C", VA = "0xA1E61C")]
	private void SubscribeToEvents(EnemyInfo enemyInfo)
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0xA1E878", Offset = "0xA1E878", VA = "0xA1E878")]
	private void UnubscribeFromEvents(EnemyInfo enemyInfo)
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xA1EAD4", Offset = "0xA1EAD4", VA = "0xA1EAD4")]
	private void OnEnemyDied(HealthStateController healthStateController)
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xA1ED48", Offset = "0xA1ED48", VA = "0xA1ED48")]
	private void OnEnemyHasFallen(ZombieFallDownController zombieFallDownController)
	{
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xA1ED4C", Offset = "0xA1ED4C", VA = "0xA1ED4C")]
	private void OnEnemyDisabled(EnemyInfo enemyInfo)
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xA1EAD8", Offset = "0xA1EAD8", VA = "0xA1EAD8")]
	private void EnableDeathTimersIfNoMoreWaklingEnemy()
	{
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xA1ED50", Offset = "0xA1ED50", VA = "0xA1ED50")]
	[IteratorStateMachine(typeof(<WaitForEnemiesDisappear>d__13))]
	private IEnumerator WaitForEnemiesDisappear()
	{
		return null;
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xA1EDEC", Offset = "0xA1EDEC", VA = "0xA1EDEC")]
	private void EnableEnemiesDeathTimers()
	{
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xA1EF6C", Offset = "0xA1EF6C", VA = "0xA1EF6C")]
	public CrawlingZombiesDisappearController()
	{
	}
}
[Token(Token = "0x2000129")]
public class EnemyApperanceRandomizer : MonoBehaviour
{
	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private EnemyRenderers enemyRenderers;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Enemy Materials Variants")]
	private List<Material> skinMaterialsVariants;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<Material> bodyMaterialsVariants;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Enemy Items")]
	[SerializeField]
	private List<ZombieItem> zombieItems;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly RNGCryptoServiceProvider provider;

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xA1F038", Offset = "0xA1F038", VA = "0xA1F038")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xA1F03C", Offset = "0xA1F03C", VA = "0xA1F03C")]
	public void RandomizeEnemyApperance()
	{
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xA1F07C", Offset = "0xA1F07C", VA = "0xA1F07C")]
	private void SetRandomMaterials(List<Material> materialsVariants, List<Renderer> renderers)
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xA1F244", Offset = "0xA1F244", VA = "0xA1F244")]
	private void RandomizeItems()
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xA1F404", Offset = "0xA1F404", VA = "0xA1F404")]
	public EnemyApperanceRandomizer()
	{
	}
}
[Token(Token = "0x200012A")]
public class FlyingEnemyHitGroundSoundController : MonoBehaviour, IResetable
{
	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioSource hitGroundAudioSource;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool playedHitGroundSound;

	[Token(Token = "0x6000616")]
	[Address(RVA = "0xA1F540", Offset = "0xA1F540", VA = "0xA1F540")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xA1F57C", Offset = "0xA1F57C", VA = "0xA1F57C")]
	private bool IsTriggeredHitCollider(Collider other)
	{
		return default(bool);
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xA1F618", Offset = "0xA1F618", VA = "0xA1F618", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xA1F620", Offset = "0xA1F620", VA = "0xA1F620")]
	public FlyingEnemyHitGroundSoundController()
	{
	}
}
[Token(Token = "0x200012B")]
public class ArrowHitInfo : HitInfoAbstract
{
	[Token(Token = "0x17000095")]
	public Vector3 HitDirection
	{
		[Token(Token = "0x600061A")]
		[Address(RVA = "0xA1F628", Offset = "0xA1F628", VA = "0xA1F628")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600061B")]
		[Address(RVA = "0xA1F634", Offset = "0xA1F634", VA = "0xA1F634")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000096")]
	public float DetachLimbChance
	{
		[Token(Token = "0x600061C")]
		[Address(RVA = "0xA1F640", Offset = "0xA1F640", VA = "0xA1F640")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600061D")]
		[Address(RVA = "0xA1F648", Offset = "0xA1F648", VA = "0xA1F648")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000097")]
	public override KillType KillType
	{
		[Token(Token = "0x600061E")]
		[Address(RVA = "0xA1F650", Offset = "0xA1F650", VA = "0xA1F650", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return default(KillType);
		}
		[Token(Token = "0x600061F")]
		[Address(RVA = "0xA1F658", Offset = "0xA1F658", VA = "0xA1F658", Slot = "5")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000098")]
	public override Player Hitter
	{
		[Token(Token = "0x6000620")]
		[Address(RVA = "0xA1F660", Offset = "0xA1F660", VA = "0xA1F660", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000621")]
		[Address(RVA = "0xA1F668", Offset = "0xA1F668", VA = "0xA1F668", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000099")]
	public override AbilityType AbilityType
	{
		[Token(Token = "0x6000622")]
		[Address(RVA = "0xA1F670", Offset = "0xA1F670", VA = "0xA1F670", Slot = "8")]
		[CompilerGenerated]
		get
		{
			return default(AbilityType);
		}
		[Token(Token = "0x6000623")]
		[Address(RVA = "0xA1F678", Offset = "0xA1F678", VA = "0xA1F678", Slot = "9")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700009A")]
	public override float Damage
	{
		[Token(Token = "0x6000624")]
		[Address(RVA = "0xA1F680", Offset = "0xA1F680", VA = "0xA1F680", Slot = "10")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000625")]
		[Address(RVA = "0xA1F688", Offset = "0xA1F688", VA = "0xA1F688", Slot = "11")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700009B")]
	public override bool IsHeadShot
	{
		[Token(Token = "0x6000626")]
		[Address(RVA = "0xA1F690", Offset = "0xA1F690", VA = "0xA1F690", Slot = "12")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000627")]
		[Address(RVA = "0xA1F698", Offset = "0xA1F698", VA = "0xA1F698", Slot = "13")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700009C")]
	public override bool IsWindowShot
	{
		[Token(Token = "0x6000628")]
		[Address(RVA = "0xA1F6A4", Offset = "0xA1F6A4", VA = "0xA1F6A4", Slot = "14")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000629")]
		[Address(RVA = "0xA1F6AC", Offset = "0xA1F6AC", VA = "0xA1F6AC", Slot = "15")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700009D")]
	public override float Distance
	{
		[Token(Token = "0x600062A")]
		[Address(RVA = "0xA1F6B8", Offset = "0xA1F6B8", VA = "0xA1F6B8", Slot = "18")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600062B")]
		[Address(RVA = "0xA1F6C0", Offset = "0xA1F6C0", VA = "0xA1F6C0", Slot = "19")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700009E")]
	public override bool IsCriticalHit
	{
		[Token(Token = "0x600062C")]
		[Address(RVA = "0xA1F6C8", Offset = "0xA1F6C8", VA = "0xA1F6C8", Slot = "16")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600062D")]
		[Address(RVA = "0xA1F6D0", Offset = "0xA1F6D0", VA = "0xA1F6D0", Slot = "17")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xA11610", Offset = "0xA11610", VA = "0xA11610")]
	public ArrowHitInfo()
	{
	}
}
[Token(Token = "0x200012C")]
public class BulletHitInfo : HitInfoAbstract
{
	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<BodyPartDetacher> AffectedLimbs;

	[Token(Token = "0x1700009F")]
	public Vector3 HitDirection
	{
		[Token(Token = "0x600062F")]
		[Address(RVA = "0xA1F6DC", Offset = "0xA1F6DC", VA = "0xA1F6DC")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000630")]
		[Address(RVA = "0xA1F6E8", Offset = "0xA1F6E8", VA = "0xA1F6E8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A0")]
	public Vector3 HitPosition
	{
		[Token(Token = "0x6000631")]
		[Address(RVA = "0xA1F6F4", Offset = "0xA1F6F4", VA = "0xA1F6F4")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000632")]
		[Address(RVA = "0xA1F700", Offset = "0xA1F700", VA = "0xA1F700")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A1")]
	public Collider Collider
	{
		[Token(Token = "0x6000633")]
		[Address(RVA = "0xA1F70C", Offset = "0xA1F70C", VA = "0xA1F70C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000634")]
		[Address(RVA = "0xA1F714", Offset = "0xA1F714", VA = "0xA1F714")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A2")]
	public float DetachLimbChance
	{
		[Token(Token = "0x6000635")]
		[Address(RVA = "0xA1F71C", Offset = "0xA1F71C", VA = "0xA1F71C")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000636")]
		[Address(RVA = "0xA1F724", Offset = "0xA1F724", VA = "0xA1F724")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A3")]
	public override AbilityType AbilityType
	{
		[Token(Token = "0x6000637")]
		[Address(RVA = "0xA1F72C", Offset = "0xA1F72C", VA = "0xA1F72C", Slot = "8")]
		[CompilerGenerated]
		get
		{
			return default(AbilityType);
		}
		[Token(Token = "0x6000638")]
		[Address(RVA = "0xA1F734", Offset = "0xA1F734", VA = "0xA1F734", Slot = "9")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A4")]
	public override KillType KillType
	{
		[Token(Token = "0x6000639")]
		[Address(RVA = "0xA1F73C", Offset = "0xA1F73C", VA = "0xA1F73C", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return default(KillType);
		}
		[Token(Token = "0x600063A")]
		[Address(RVA = "0xA1F744", Offset = "0xA1F744", VA = "0xA1F744", Slot = "5")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A5")]
	public override Player Hitter
	{
		[Token(Token = "0x600063B")]
		[Address(RVA = "0xA1F74C", Offset = "0xA1F74C", VA = "0xA1F74C", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600063C")]
		[Address(RVA = "0xA1F754", Offset = "0xA1F754", VA = "0xA1F754", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A6")]
	public override float Damage
	{
		[Token(Token = "0x600063D")]
		[Address(RVA = "0xA1F75C", Offset = "0xA1F75C", VA = "0xA1F75C", Slot = "10")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600063E")]
		[Address(RVA = "0xA1F764", Offset = "0xA1F764", VA = "0xA1F764", Slot = "11")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A7")]
	public override bool IsHeadShot
	{
		[Token(Token = "0x600063F")]
		[Address(RVA = "0xA1F76C", Offset = "0xA1F76C", VA = "0xA1F76C", Slot = "12")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000640")]
		[Address(RVA = "0xA1F774", Offset = "0xA1F774", VA = "0xA1F774", Slot = "13")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A8")]
	public override bool IsWindowShot
	{
		[Token(Token = "0x6000641")]
		[Address(RVA = "0xA1F780", Offset = "0xA1F780", VA = "0xA1F780", Slot = "14")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000642")]
		[Address(RVA = "0xA1F788", Offset = "0xA1F788", VA = "0xA1F788", Slot = "15")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A9")]
	public override float Distance
	{
		[Token(Token = "0x6000643")]
		[Address(RVA = "0xA1F794", Offset = "0xA1F794", VA = "0xA1F794", Slot = "18")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000644")]
		[Address(RVA = "0xA1F79C", Offset = "0xA1F79C", VA = "0xA1F79C", Slot = "19")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000AA")]
	public override bool IsCriticalHit
	{
		[Token(Token = "0x6000645")]
		[Address(RVA = "0xA1F7A4", Offset = "0xA1F7A4", VA = "0xA1F7A4", Slot = "16")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000646")]
		[Address(RVA = "0xA1F7AC", Offset = "0xA1F7AC", VA = "0xA1F7AC", Slot = "17")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xA1F7B8", Offset = "0xA1F7B8", VA = "0xA1F7B8")]
	public BulletHitInfo()
	{
	}
}
[Token(Token = "0x200012D")]
public class GrenadeHitInfo : HitInfoAbstract
{
	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<BodyPartDetacher> AffectedLimbs;

	[Token(Token = "0x170000AB")]
	public Vector3 ExplosionPosition
	{
		[Token(Token = "0x6000648")]
		[Address(RVA = "0xA1F7C0", Offset = "0xA1F7C0", VA = "0xA1F7C0")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000649")]
		[Address(RVA = "0xA1F7CC", Offset = "0xA1F7CC", VA = "0xA1F7CC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000AC")]
	public float ExplosionRadius
	{
		[Token(Token = "0x600064A")]
		[Address(RVA = "0xA1F7D8", Offset = "0xA1F7D8", VA = "0xA1F7D8")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600064B")]
		[Address(RVA = "0xA1F7E0", Offset = "0xA1F7E0", VA = "0xA1F7E0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000AD")]
	public float DetachLimbChance
	{
		[Token(Token = "0x600064C")]
		[Address(RVA = "0xA1F7E8", Offset = "0xA1F7E8", VA = "0xA1F7E8")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600064D")]
		[Address(RVA = "0xA1F7F0", Offset = "0xA1F7F0", VA = "0xA1F7F0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000AE")]
	public Collider Collider
	{
		[Token(Token = "0x600064E")]
		[Address(RVA = "0xA1F7F8", Offset = "0xA1F7F8", VA = "0xA1F7F8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600064F")]
		[Address(RVA = "0xA1F800", Offset = "0xA1F800", VA = "0xA1F800")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000AF")]
	public override AbilityType AbilityType
	{
		[Token(Token = "0x6000650")]
		[Address(RVA = "0xA1F808", Offset = "0xA1F808", VA = "0xA1F808", Slot = "8")]
		[CompilerGenerated]
		get
		{
			return default(AbilityType);
		}
		[Token(Token = "0x6000651")]
		[Address(RVA = "0xA1F810", Offset = "0xA1F810", VA = "0xA1F810", Slot = "9")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000B0")]
	public override KillType KillType
	{
		[Token(Token = "0x6000652")]
		[Address(RVA = "0xA1F818", Offset = "0xA1F818", VA = "0xA1F818", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return default(KillType);
		}
		[Token(Token = "0x6000653")]
		[Address(RVA = "0xA1F820", Offset = "0xA1F820", VA = "0xA1F820", Slot = "5")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000B1")]
	public override Player Hitter
	{
		[Token(Token = "0x6000654")]
		[Address(RVA = "0xA1F828", Offset = "0xA1F828", VA = "0xA1F828", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000655")]
		[Address(RVA = "0xA1F830", Offset = "0xA1F830", VA = "0xA1F830", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000B2")]
	public override float Damage
	{
		[Token(Token = "0x6000656")]
		[Address(RVA = "0xA1F838", Offset = "0xA1F838", VA = "0xA1F838", Slot = "10")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000657")]
		[Address(RVA = "0xA1F840", Offset = "0xA1F840", VA = "0xA1F840", Slot = "11")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000B3")]
	public override bool IsHeadShot
	{
		[Token(Token = "0x6000658")]
		[Address(RVA = "0xA1F848", Offset = "0xA1F848", VA = "0xA1F848", Slot = "12")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000659")]
		[Address(RVA = "0xA1F850", Offset = "0xA1F850", VA = "0xA1F850", Slot = "13")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000B4")]
	public override bool IsWindowShot
	{
		[Token(Token = "0x600065A")]
		[Address(RVA = "0xA1F85C", Offset = "0xA1F85C", VA = "0xA1F85C", Slot = "14")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600065B")]
		[Address(RVA = "0xA1F864", Offset = "0xA1F864", VA = "0xA1F864", Slot = "15")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000B5")]
	public override float Distance
	{
		[Token(Token = "0x600065C")]
		[Address(RVA = "0xA1F870", Offset = "0xA1F870", VA = "0xA1F870", Slot = "18")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600065D")]
		[Address(RVA = "0xA1F878", Offset = "0xA1F878", VA = "0xA1F878", Slot = "19")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000B6")]
	public override bool IsCriticalHit
	{
		[Token(Token = "0x600065E")]
		[Address(RVA = "0xA1F880", Offset = "0xA1F880", VA = "0xA1F880", Slot = "16")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600065F")]
		[Address(RVA = "0xA1F888", Offset = "0xA1F888", VA = "0xA1F888", Slot = "17")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xA1F894", Offset = "0xA1F894", VA = "0xA1F894")]
	public GrenadeHitInfo()
	{
	}
}
[Token(Token = "0x200012E")]
public class FreezingArrowKillInfo : KillInfo
{
	[Token(Token = "0x170000B7")]
	public float Damage
	{
		[Token(Token = "0x6000661")]
		[Address(RVA = "0xA1F89C", Offset = "0xA1F89C", VA = "0xA1F89C")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000662")]
		[Address(RVA = "0xA1F8A4", Offset = "0xA1F8A4", VA = "0xA1F8A4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000B8")]
	public Vector3 HitDirection
	{
		[Token(Token = "0x6000663")]
		[Address(RVA = "0xA1F8AC", Offset = "0xA1F8AC", VA = "0xA1F8AC")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000664")]
		[Address(RVA = "0xA1F8B8", Offset = "0xA1F8B8", VA = "0xA1F8B8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0xA1F8C4", Offset = "0xA1F8C4", VA = "0xA1F8C4")]
	public FreezingArrowKillInfo()
	{
	}
}
[Token(Token = "0x200012F")]
public interface IBodyDisappearingCheckable
{
	[Token(Token = "0x6000666")]
	bool IsBodyDisappearingFinished();
}
[Token(Token = "0x2000130")]
public class ShotThroughWindow : MonoBehaviour
{
	[Token(Token = "0x6000667")]
	[Address(RVA = "0xA1F8CC", Offset = "0xA1F8CC", VA = "0xA1F8CC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xA1F96C", Offset = "0xA1F96C", VA = "0xA1F96C")]
	public ShotThroughWindow()
	{
	}
}
[Token(Token = "0x2000131")]
public class StandardBodyDisappearingChecker : MonoBehaviour, IBodyDisappearingCheckable
{
	[Token(Token = "0x6000669")]
	[Address(RVA = "0xA1F974", Offset = "0xA1F974", VA = "0xA1F974", Slot = "4")]
	public bool IsBodyDisappearingFinished()
	{
		return default(bool);
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0xA1F9D8", Offset = "0xA1F9D8", VA = "0xA1F9D8")]
	public StandardBodyDisappearingChecker()
	{
	}
}
[Token(Token = "0x2000132")]
public class BluntWeapon : MonoBehaviour, IThrowableWeaponCustomHit, IResetable
{
	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ThrowableWeaponFlyProcessor throwableWeaponFlyProcessor;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Rigidbody rigidbody;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float bounciness;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Collider collider;

	[Token(Token = "0x600066B")]
	[Address(RVA = "0xA1F9E0", Offset = "0xA1F9E0", VA = "0xA1F9E0", Slot = "4")]
	public void Hit(Collider other)
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0xA1FADC", Offset = "0xA1FADC", VA = "0xA1FADC", Slot = "5")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xA1FB28", Offset = "0xA1FB28", VA = "0xA1FB28")]
	public BluntWeapon()
	{
	}
}
[Token(Token = "0x2000133")]
public class CurvedFlyingWeapon : ThrowableWeaponFlyProcessor
{
	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float firingAngle;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform transformToRotate;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float distanceToTarget;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 projectileVelocity;

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xA1FB30", Offset = "0xA1FB30", VA = "0xA1FB30", Slot = "4")]
	public override void Move()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xA1FBB4", Offset = "0xA1FBB4", VA = "0xA1FBB4", Slot = "5")]
	public override void Rotate()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xA1FC38", Offset = "0xA1FC38", VA = "0xA1FC38", Slot = "6")]
	public override void Set(Vector3 target, float movementSpeed, float rotationSpeed)
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xA1FEE4", Offset = "0xA1FEE4", VA = "0xA1FEE4")]
	public CurvedFlyingWeapon()
	{
	}
}
[Token(Token = "0x2000134")]
public class EnemyThrowingObjectController : MonoBehaviourPun, IPunObservable, IResetable, IInRoomCallbacks
{
	[Token(Token = "0x2000135")]
	[CompilerGenerated]
	private sealed class <ThrowingRoutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyThrowingObjectController <>4__this;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 target;

		[Token(Token = "0x170000BC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000689")]
			[Address(RVA = "0xA20E78", Offset = "0xA20E78", VA = "0xA20E78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600068B")]
			[Address(RVA = "0xA20EC0", Offset = "0xA20EC0", VA = "0xA20EC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0xA20208", Offset = "0xA20208", VA = "0xA20208")]
		[DebuggerHidden]
		public <ThrowingRoutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0xA20C70", Offset = "0xA20C70", VA = "0xA20C70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0xA20C74", Offset = "0xA20C74", VA = "0xA20C74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0xA20E80", Offset = "0xA20E80", VA = "0xA20E80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject objectToThrow;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float throwingForce;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float throwingTorque;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float timeFromTriggeredToThrow;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private HealthStateController healthStateController;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private EnemyMovementController enemyMovementController;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ZombieAnimatorController AnimatorController;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ZombieBehaviorAfterThrow zombieBehaviorAfterThrow;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[RequireInterface(typeof(IBehaviorAfterThrow))]
	[SerializeField]
	private UnityEngine.Object _behaviorAfterThrow;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private RouteController routeController;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool resetOnMasterChanged;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool wasReleased;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 cachedTarget;

	[Token(Token = "0x170000B9")]
	private bool ResetOnMasterChanged
	{
		[Token(Token = "0x6000672")]
		[Address(RVA = "0xA1FEF4", Offset = "0xA1FEF4", VA = "0xA1FEF4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000673")]
		[Address(RVA = "0xA1FEFC", Offset = "0xA1FEFC", VA = "0xA1FEFC")]
		set
		{
		}
	}

	[Token(Token = "0x170000BA")]
	private WaitForSeconds waitForThrow
	{
		[Token(Token = "0x6000674")]
		[Address(RVA = "0xA1FF14", Offset = "0xA1FF14", VA = "0xA1FF14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BB")]
	private IBehaviorAfterThrow behaviorAfterThrow
	{
		[Token(Token = "0x6000675")]
		[Address(RVA = "0xA1FF84", Offset = "0xA1FF84", VA = "0xA1FF84")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xA1FFCC", Offset = "0xA1FFCC", VA = "0xA1FFCC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xA20024", Offset = "0xA20024", VA = "0xA20024")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xA2007C", Offset = "0xA2007C", VA = "0xA2007C")]
	public void ExecuteThrowingRoutine(Vector3 target)
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xA20134", Offset = "0xA20134", VA = "0xA20134")]
	[PunRPC]
	public void RPCStopThrowing()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xA2009C", Offset = "0xA2009C", VA = "0xA2009C")]
	[IteratorStateMachine(typeof(<ThrowingRoutine>d__24))]
	private IEnumerator ThrowingRoutine(Vector3 target)
	{
		return null;
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xA20230", Offset = "0xA20230", VA = "0xA20230")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xA20754", Offset = "0xA20754", VA = "0xA20754")]
	[PunRPC]
	private void RPCReleaseObject(int ObjectID)
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xA20548", Offset = "0xA20548", VA = "0xA20548")]
	private void ReleaseObject(GameObject spawnedObject, IThrowable throwableObject)
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xA20824", Offset = "0xA20824", VA = "0xA20824", Slot = "5")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xA2085C", Offset = "0xA2085C", VA = "0xA2085C", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xA209A8", Offset = "0xA209A8", VA = "0xA209A8", Slot = "10")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xA20C58", Offset = "0xA20C58", VA = "0xA20C58", Slot = "6")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xA20C5C", Offset = "0xA20C5C", VA = "0xA20C5C", Slot = "7")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xA20C60", Offset = "0xA20C60", VA = "0xA20C60", Slot = "8")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0xA20C64", Offset = "0xA20C64", VA = "0xA20C64", Slot = "9")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0xA20C68", Offset = "0xA20C68", VA = "0xA20C68")]
	public EnemyThrowingObjectController()
	{
	}
}
[Token(Token = "0x2000136")]
public class ForwardFlyingWeapon : ThrowableWeaponFlyProcessor
{
	[Token(Token = "0x40006C1")]
	private const float xFlyWorldRotation = 0f;

	[Token(Token = "0x40006C2")]
	private const float zFlyWorldRotation = -90f;

	[Token(Token = "0x40006C3")]
	private const float levelSpeedMultiplier = 0.3f;

	[Token(Token = "0x600068C")]
	[Address(RVA = "0xA20EC8", Offset = "0xA20EC8", VA = "0xA20EC8", Slot = "4")]
	public override void Move()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0xA20F38", Offset = "0xA20F38", VA = "0xA20F38", Slot = "5")]
	public override void Rotate()
	{
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0xA211C8", Offset = "0xA211C8", VA = "0xA211C8")]
	public ForwardFlyingWeapon()
	{
	}
}
[Token(Token = "0x2000137")]
public class GenericItemDropperInitializer : MonoBehaviour
{
	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private OnBodyPartDetachedItemDroper onBodyPartDetachedItemDroper;

	[Token(Token = "0x600068F")]
	[Address(RVA = "0xA211D0", Offset = "0xA211D0", VA = "0xA211D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0xA211EC", Offset = "0xA211EC", VA = "0xA211EC")]
	public GenericItemDropperInitializer()
	{
	}
}
[Token(Token = "0x2000138")]
public interface IBehaviorAfterThrow
{
	[Token(Token = "0x6000691")]
	void HandleBehaviorAfterThrow();
}
[Token(Token = "0x2000139")]
public interface ICustomThrowConditions
{
	[Token(Token = "0x6000692")]
	bool CanThrow(Vector3 target);

	[Token(Token = "0x6000693")]
	bool ShouldStopThrow();
}
[Token(Token = "0x200013A")]
public interface IThrowable
{
	[Token(Token = "0x6000694")]
	void Throw(Vector3 target, float force, float torque);
}
[Token(Token = "0x200013B")]
public interface IThrowableWeaponCustomHit
{
	[Token(Token = "0x6000695")]
	void Hit(Collider other);
}
[Token(Token = "0x200013C")]
public class RandomizedItemDropperInitializer : MonoBehaviour
{
	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ZombieItem zombieItem;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private OnBodyPartDetachedItemDroper onBodyPartDetachedItemDroper;

	[Token(Token = "0x6000696")]
	[Address(RVA = "0xA211F4", Offset = "0xA211F4", VA = "0xA211F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0xA212CC", Offset = "0xA212CC", VA = "0xA212CC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xA213A4", Offset = "0xA213A4", VA = "0xA213A4")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xA213C0", Offset = "0xA213C0", VA = "0xA213C0")]
	public RandomizedItemDropperInitializer()
	{
	}
}
[Token(Token = "0x200013D")]
public abstract class ThrowableWeaponFlyProcessor : MonoBehaviour
{
	[Token(Token = "0x170000BE")]
	public Vector3 Direction
	{
		[Token(Token = "0x600069A")]
		[Address(RVA = "0xA213C8", Offset = "0xA213C8", VA = "0xA213C8")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600069B")]
		[Address(RVA = "0xA213D4", Offset = "0xA213D4", VA = "0xA213D4")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x170000BF")]
	public Vector3 Target
	{
		[Token(Token = "0x600069C")]
		[Address(RVA = "0xA213E0", Offset = "0xA213E0", VA = "0xA213E0")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600069D")]
		[Address(RVA = "0xA213EC", Offset = "0xA213EC", VA = "0xA213EC")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x170000C0")]
	public float MovementSpeed
	{
		[Token(Token = "0x600069E")]
		[Address(RVA = "0xA213F8", Offset = "0xA213F8", VA = "0xA213F8")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600069F")]
		[Address(RVA = "0xA21400", Offset = "0xA21400", VA = "0xA21400")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x170000C1")]
	public float RotationSpeed
	{
		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xA21408", Offset = "0xA21408", VA = "0xA21408")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xA21410", Offset = "0xA21410", VA = "0xA21410")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x60006A2")]
	public abstract void Move();

	[Token(Token = "0x60006A3")]
	public abstract void Rotate();

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0xA1FDAC", Offset = "0xA1FDAC", VA = "0xA1FDAC", Slot = "6")]
	public virtual void Set(Vector3 target, float movementSpeed, float rotationSpeed)
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0xA1FEEC", Offset = "0xA1FEEC", VA = "0xA1FEEC")]
	protected ThrowableWeaponFlyProcessor()
	{
	}
}
[Token(Token = "0x200013E")]
public class ThrowableWeaponSoundController : MonoBehaviour
{
	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioItem whooshSound;

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0xA20808", Offset = "0xA20808", VA = "0xA20808")]
	public void PlaySound()
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0xA21418", Offset = "0xA21418", VA = "0xA21418")]
	public void StopSound()
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0xA21434", Offset = "0xA21434", VA = "0xA21434")]
	public ThrowableWeaponSoundController()
	{
	}
}
[Token(Token = "0x200013F")]
public abstract class ThrowTrigger : MonoBehaviour
{
	[Token(Token = "0x1400000E")]
	public static event Action<int> ObjectThrownAtPlayerEvent
	{
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xA2143C", Offset = "0xA2143C", VA = "0xA2143C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xA21508", Offset = "0xA21508", VA = "0xA21508")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0xA215D4", Offset = "0xA215D4", VA = "0xA215D4")]
	protected void InvokeObjectThrownAtPlayerEvent(int playerID)
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0xA21640", Offset = "0xA21640", VA = "0xA21640")]
	protected ThrowTrigger()
	{
	}
}
[Token(Token = "0x2000140")]
public class ThrowTriggerOnGetHit : ThrowTrigger, IResetable, IPunObservable
{
	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private EnemyThrowingObjectController enemyThrowingObjectController;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EnemyGetHitController enemyGetHitController;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[RequireInterface(typeof(ICustomThrowConditions))]
	[SerializeField]
	private UnityEngine.Object _customThrowCondition;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isTriggered;

	[Token(Token = "0x170000C2")]
	private ICustomThrowConditions customThrowConditions
	{
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xA21648", Offset = "0xA21648", VA = "0xA21648")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xA21690", Offset = "0xA21690", VA = "0xA21690")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xA217A8", Offset = "0xA217A8", VA = "0xA217A8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xA218C0", Offset = "0xA218C0", VA = "0xA218C0")]
	private void HandleHit(float enemyHealth, Player player)
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xA21D20", Offset = "0xA21D20", VA = "0xA21D20")]
	[PunRPC]
	public void RPCTrigger(int playerID, Vector3 playerPosition)
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xA21D64", Offset = "0xA21D64", VA = "0xA21D64", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xA21D6C", Offset = "0xA21D6C", VA = "0xA21D6C", Slot = "5")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xA21E28", Offset = "0xA21E28", VA = "0xA21E28")]
	public ThrowTriggerOnGetHit()
	{
	}
}
[Token(Token = "0x2000142")]
public class ZombieBehaviorAfterThrow : MonoBehaviour, IBehaviorAfterThrow, IInRoomCallbacks, IPunObservable
{
	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HealthStateController healthStateController;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EnemyMovementController enemyMovementController;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ZombieAnimatorController animatorController;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ResetOnMasterChanged;

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0xA20AD8", Offset = "0xA20AD8", VA = "0xA20AD8", Slot = "4")]
	public void HandleBehaviorAfterThrow()
	{
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0xA21ED4", Offset = "0xA21ED4", VA = "0xA21ED4", Slot = "9")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0xA21F48", Offset = "0xA21F48", VA = "0xA21F48", Slot = "10")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0xA22004", Offset = "0xA22004", VA = "0xA22004", Slot = "5")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0xA22008", Offset = "0xA22008", VA = "0xA22008", Slot = "6")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0xA2200C", Offset = "0xA2200C", VA = "0xA2200C", Slot = "8")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0xA22010", Offset = "0xA22010", VA = "0xA22010", Slot = "7")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xA22014", Offset = "0xA22014", VA = "0xA22014")]
	public ZombieBehaviorAfterThrow()
	{
	}
}
[Token(Token = "0x2000143")]
public class ZombieDropableItemController : MonoBehaviour, IPhysicsEnabler
{
	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Collider itemCollider;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Rigidbody itemRigidbody;

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0xA2201C", Offset = "0xA2201C", VA = "0xA2201C", Slot = "4")]
	public void EnablePhysics(Vector3 velocity)
	{
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xA220A0", Offset = "0xA220A0", VA = "0xA220A0")]
	public ZombieDropableItemController()
	{
	}
}
[Token(Token = "0x2000144")]
public class ZombieThrowCondition : MonoBehaviour, ICustomThrowConditions
{
	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<BodyPartDetacher> requiredLimbs;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float throwingRange;

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0xA220A8", Offset = "0xA220A8", VA = "0xA220A8", Slot = "5")]
	public bool ShouldStopThrow()
	{
		return default(bool);
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0xA221AC", Offset = "0xA221AC", VA = "0xA221AC", Slot = "4")]
	public bool CanThrow(Vector3 target)
	{
		return default(bool);
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0xA22370", Offset = "0xA22370", VA = "0xA22370")]
	public ZombieThrowCondition()
	{
	}
}
[Token(Token = "0x2000146")]
public class WalkingEnemyHitGroundSoundController : MonoBehaviour, IResetable
{
	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioSource hitGroundAudioSource;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DeathAnimAdjuster deathAnimAdjuster;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool hasPlayedHitGroundSound;

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0xA22420", Offset = "0xA22420", VA = "0xA22420")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0xA224F8", Offset = "0xA224F8", VA = "0xA224F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0xA225D0", Offset = "0xA225D0", VA = "0xA225D0")]
	private void OnDeathAnimAdjustingFinished()
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0xA22604", Offset = "0xA22604", VA = "0xA22604")]
	public void OnHitGround()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0xA22648", Offset = "0xA22648", VA = "0xA22648", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0xA22650", Offset = "0xA22650", VA = "0xA22650")]
	public WalkingEnemyHitGroundSoundController()
	{
	}
}
[Token(Token = "0x2000147")]
public class ArmDetacher : BodyPartDetacher
{
	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private BodyPartsDisabler bodyPartsDisabler;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ZombieLimb zombieLimb;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ZombieLimbPusher zombieLimbPusher;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ZombieAnimatorController zombieAnimatorController;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float detachResistance;

	[Token(Token = "0x170000C3")]
	public override ZombieLimb ZombieLimb
	{
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xA22658", Offset = "0xA22658", VA = "0xA22658", Slot = "5")]
		get
		{
			return default(ZombieLimb);
		}
	}

	[Token(Token = "0x170000C4")]
	public override float DetachResistance
	{
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xA22660", Offset = "0xA22660", VA = "0xA22660", Slot = "6")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0xA22668", Offset = "0xA22668", VA = "0xA22668", Slot = "7")]
	public override void DetachBodyPart(Vector3 hitDirection, int ownerId)
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0xA2292C", Offset = "0xA2292C", VA = "0xA2292C")]
	public ArmDetacher()
	{
	}
}
[Token(Token = "0x2000148")]
public class BloodSprayPlayer : MonoBehaviour
{
	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BodyPartDetacher bodyPartDetacher;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem bloodEffect;

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0xA2293C", Offset = "0xA2293C", VA = "0xA2293C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0xA22A98", Offset = "0xA22A98", VA = "0xA22A98")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0xA22BF4", Offset = "0xA22BF4", VA = "0xA22BF4")]
	private void PlayParticle(Vector3 hitDirection, int ownerId)
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0xA22C10", Offset = "0xA22C10", VA = "0xA22C10")]
	public BloodSprayPlayer()
	{
	}
}
[Token(Token = "0x2000149")]
public abstract class BodyPartDetacher : MonoBehaviour, IResetable
{
	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<Vector3, int> OnBodyPartDetached;

	[Token(Token = "0x170000C5")]
	public abstract ZombieLimb ZombieLimb
	{
		[Token(Token = "0x60006D6")]
		get;
	}

	[Token(Token = "0x170000C6")]
	public abstract float DetachResistance
	{
		[Token(Token = "0x60006D7")]
		get;
	}

	[Token(Token = "0x170000C7")]
	public bool WasDetached
	{
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xA22C18", Offset = "0xA22C18", VA = "0xA22C18")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xA22C20", Offset = "0xA22C20", VA = "0xA22C20")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x60006DA")]
	public abstract void DetachBodyPart(Vector3 hitDirection, int ownerId);

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0xA22C2C", Offset = "0xA22C2C", VA = "0xA22C2C", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0xA22934", Offset = "0xA22934", VA = "0xA22934")]
	protected BodyPartDetacher()
	{
	}
}
[Token(Token = "0x200014A")]
public class BodyPartDetachingManager : MonoBehaviourPun, IResetable
{
	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<BodyPartDetacher> bodyPartDetachers;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject zombieBody;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject bodyWithRemovableLimbs;

	[Token(Token = "0x170000C8")]
	public List<BodyPartDetacher> BodyPartDetachers
	{
		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xA22C34", Offset = "0xA22C34", VA = "0xA22C34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xA22C3C", Offset = "0xA22C3C", VA = "0xA22C3C")]
	public void DetachBodyPartByIndex(Vector3 hitDirection, int limbIndex, int ownerId)
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0xA22DE4", Offset = "0xA22DE4", VA = "0xA22DE4")]
	public bool ShouldBeDetached(float projectileDetachChance, ZombieLimb zombieLimb)
	{
		return default(bool);
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xA22F70", Offset = "0xA22F70", VA = "0xA22F70", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xA22FA8", Offset = "0xA22FA8", VA = "0xA22FA8")]
	public BodyPartDetachingManager()
	{
	}
}
[Token(Token = "0x200014D")]
public class BodyPartsDisabler : MonoBehaviour, IResetable
{
	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject bodyPartToDisable;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Collider[] collidersToDisable;

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0xA22720", Offset = "0xA22720", VA = "0xA22720")]
	public void SetActiveState(bool isActive)
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0xA23020", Offset = "0xA23020", VA = "0xA23020", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xA23028", Offset = "0xA23028", VA = "0xA23028")]
	public BodyPartsDisabler()
	{
	}
}
[Token(Token = "0x200014E")]
[RequireComponent(typeof(BodyPartDetacher))]
public class ConnectedLimbDetacher : MonoBehaviour
{
	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BodyPartDetacher limbToDetach;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BodyPartDetacher correspondingLimb;

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0xA23030", Offset = "0xA23030", VA = "0xA23030")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xA23118", Offset = "0xA23118", VA = "0xA23118")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xA23200", Offset = "0xA23200", VA = "0xA23200")]
	private void DetachCorrespondingLimb(Vector3 hitDirection, int ownerId)
	{
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xA23230", Offset = "0xA23230", VA = "0xA23230")]
	public ConnectedLimbDetacher()
	{
	}
}
[Token(Token = "0x200014F")]
public class CorrespondingLimbDetacher : BodyPartDetacher
{
	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private BodyPartDetacher correspondingLimb;

	[Token(Token = "0x170000C9")]
	public override ZombieLimb ZombieLimb
	{
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0xA23238", Offset = "0xA23238", VA = "0xA23238", Slot = "5")]
		get
		{
			return default(ZombieLimb);
		}
	}

	[Token(Token = "0x170000CA")]
	public override float DetachResistance
	{
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xA23258", Offset = "0xA23258", VA = "0xA23258", Slot = "6")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xA23278", Offset = "0xA23278", VA = "0xA23278", Slot = "7")]
	public override void DetachBodyPart(Vector3 hitDirection, int ownerId)
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xA2327C", Offset = "0xA2327C", VA = "0xA2327C")]
	public CorrespondingLimbDetacher()
	{
	}
}
[Token(Token = "0x2000150")]
public class HeadExploder : BodyPartDetacher
{
	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private BodyPartsDisabler bodyPartsDisabler;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ZombieSoundController zombieSoundController;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ZombieLimb zombieLimb;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float detachResistance;

	[Token(Token = "0x170000CB")]
	public override float DetachResistance
	{
		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xA23284", Offset = "0xA23284", VA = "0xA23284", Slot = "6")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000CC")]
	public override ZombieLimb ZombieLimb
	{
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0xA2328C", Offset = "0xA2328C", VA = "0xA2328C", Slot = "5")]
		get
		{
			return default(ZombieLimb);
		}
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xA23294", Offset = "0xA23294", VA = "0xA23294", Slot = "7")]
	public override void DetachBodyPart(Vector3 hitDirection, int ownerId)
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xA23320", Offset = "0xA23320", VA = "0xA23320")]
	public HeadExploder()
	{
	}
}
[Token(Token = "0x2000151")]
public class LegDetacher : BodyPartDetacher
{
	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private BodyPartsDisabler bodyPartsDisabler;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ZombieLimb zombieLimb;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ZombieLimbPusher zombieLimbPusher;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ZombieAnimatorController zombieAnimatorController;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ZombieFallDownController zombieFallDownController;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float detachResistance;

	[Token(Token = "0x170000CD")]
	public override float DetachResistance
	{
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0xA23328", Offset = "0xA23328", VA = "0xA23328", Slot = "6")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000CE")]
	public override ZombieLimb ZombieLimb
	{
		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xA23330", Offset = "0xA23330", VA = "0xA23330", Slot = "5")]
		get
		{
			return default(ZombieLimb);
		}
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xA23338", Offset = "0xA23338", VA = "0xA23338", Slot = "7")]
	public override void DetachBodyPart(Vector3 hitDirection, int ownerId)
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xA23488", Offset = "0xA23488", VA = "0xA23488")]
	public LegDetacher()
	{
	}
}
[Token(Token = "0x2000152")]
public enum ZombieLimb
{
	[Token(Token = "0x40006FE")]
	None,
	[Token(Token = "0x40006FF")]
	LeftArm,
	[Token(Token = "0x4000700")]
	LeftLeg,
	[Token(Token = "0x4000701")]
	RightArm,
	[Token(Token = "0x4000702")]
	RightLeg,
	[Token(Token = "0x4000703")]
	Head,
	[Token(Token = "0x4000704")]
	LeftForearm,
	[Token(Token = "0x4000705")]
	RightForearm,
	[Token(Token = "0x4000706")]
	LeftCalf,
	[Token(Token = "0x4000707")]
	RightCalf,
	[Token(Token = "0x4000708")]
	LeftHand,
	[Token(Token = "0x4000709")]
	RightHand
}
[Token(Token = "0x2000153")]
public class ZombieLimbPusher : MonoBehaviour, IResetable
{
	[Token(Token = "0x2000154")]
	[CompilerGenerated]
	private sealed class <DisableCutedLimbsWithDelay>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZombieLimbPusher <>4__this;

		[Token(Token = "0x170000CF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000700")]
			[Address(RVA = "0xA23768", Offset = "0xA23768", VA = "0xA23768", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000702")]
			[Address(RVA = "0xA237B0", Offset = "0xA237B0", VA = "0xA237B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0xA23504", Offset = "0xA23504", VA = "0xA23504")]
		[DebuggerHidden]
		public <DisableCutedLimbsWithDelay>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0xA236E4", Offset = "0xA236E4", VA = "0xA236E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0xA236E8", Offset = "0xA236E8", VA = "0xA236E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0xA23770", Offset = "0xA23770", VA = "0xA23770", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Rigidbody rigidbodyToPush;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float pushingForce;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform initialParent;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion initialLocalRotation;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 initialLocalPosition;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool hasBeenInitialized;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WaitForSeconds disableDelay;

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xA2279C", Offset = "0xA2279C", VA = "0xA2279C")]
	public void PushLimb(Vector3 hitDirection)
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xA23490", Offset = "0xA23490", VA = "0xA23490")]
	[IteratorStateMachine(typeof(<DisableCutedLimbsWithDelay>d__8))]
	private IEnumerator DisableCutedLimbsWithDelay()
	{
		return null;
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xA2352C", Offset = "0xA2352C", VA = "0xA2352C", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xA2366C", Offset = "0xA2366C", VA = "0xA2366C")]
	public ZombieLimbPusher()
	{
	}
}
[Token(Token = "0x2000155")]
public enum FallDirection
{
	[Token(Token = "0x4000715")]
	Left,
	[Token(Token = "0x4000716")]
	Right,
	[Token(Token = "0x4000717")]
	Back,
	[Token(Token = "0x4000718")]
	Forward
}
[Token(Token = "0x2000156")]
public static class FallDirectionCalculator
{
	[Token(Token = "0x6000703")]
	[Address(RVA = "0xA237B8", Offset = "0xA237B8", VA = "0xA237B8")]
	public static FallDirection CalculateFallDirecton(Transform transform, Vector3 projectileDirection)
	{
		return default(FallDirection);
	}
}
[Token(Token = "0x2000157")]
public class RandomAnimationsChooser : MonoBehaviour, IPunObservable, IResetable
{
	[Serializable]
	[Token(Token = "0x2000158")]
	private struct DrawAnimInfo
	{
		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string CurrentName;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AnimationClip[] Animations;

		[Token(Token = "0x170000D2")]
		public int AnimationArrayID
		{
			[Token(Token = "0x600070C")]
			[Address(RVA = "0xA23C90", Offset = "0xA23C90", VA = "0xA23C90")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x600070D")]
			[Address(RVA = "0xA23C98", Offset = "0xA23C98", VA = "0xA23C98")]
			[CompilerGenerated]
			set
			{
			}
		}
	}

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DrawAnimInfo[] animationsNamesWithClips;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AnimatorOverrideController animatorOverrideController;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool wasDrawn;

	[Token(Token = "0x170000D1")]
	private bool WasDrawn
	{
		[Token(Token = "0x6000704")]
		[Address(RVA = "0xA23858", Offset = "0xA23858", VA = "0xA23858")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000705")]
		[Address(RVA = "0xA23860", Offset = "0xA23860", VA = "0xA23860")]
		set
		{
		}
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xA23A14", Offset = "0xA23A14", VA = "0xA23A14")]
	private void DrawAnimations()
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xA23898", Offset = "0xA23898", VA = "0xA23898")]
	private void OverrideAnimations()
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xA23ABC", Offset = "0xA23ABC", VA = "0xA23ABC")]
	public void SetReferences(Animator animator)
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xA23AC4", Offset = "0xA23AC4", VA = "0xA23AC4", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xA23C80", Offset = "0xA23C80", VA = "0xA23C80", Slot = "5")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xA23C88", Offset = "0xA23C88", VA = "0xA23C88")]
	public RandomAnimationsChooser()
	{
	}
}
[Token(Token = "0x2000159")]
public class ZombieAnimatorController : MonoBehaviourPun, IPunObservable, IResetable
{
	[Token(Token = "0x4000720")]
	private const float animationSpeedMultiplierFactor = 6f;

	[Token(Token = "0x4000721")]
	private const string zombieRunning = "Zombie Running";

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly int isHit;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private readonly int isRunning;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly int isWalking;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private readonly int isFallingDown;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly int isFallingDownCrawl;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private readonly int hasLostUpperLimb;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly int isThrowing;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private readonly int isGettingWeapon;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly int isDead;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private readonly int isDeadCrawl;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly int isDeadSideLeft;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private readonly int isDeadSideRight;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly int shouldDieOnBack;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private readonly int isCrawling;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private readonly int attack;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private readonly int getHit;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private readonly int getHitLeft;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private readonly int getHitRight;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly int speedMultiplier;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("ANIMATION CLIPS")]
	public AnimationClip[] runAnimationClips;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AnimationClip fastRunAnimationClip;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[Header("ANIMATION TIME SETTINGS")]
	private float timeOfReturningFromHitAnimation;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private EnemyMovementController enemyMovementController;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool isChangingAnimationLocked;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int fastRunAnimationID;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int animationID;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<int> getHitTriggers;

	[Token(Token = "0x170000D3")]
	public int AnimationID
	{
		[Token(Token = "0x600070E")]
		[Address(RVA = "0xA23CA0", Offset = "0xA23CA0", VA = "0xA23CA0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600070F")]
		[Address(RVA = "0xA23CA8", Offset = "0xA23CA8", VA = "0xA23CA8")]
		set
		{
		}
	}

	[Token(Token = "0x170000D4")]
	public int FastRunAnimationID
	{
		[Token(Token = "0x6000710")]
		[Address(RVA = "0xA23CB0", Offset = "0xA23CB0", VA = "0xA23CB0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000D5")]
	public bool IsHit
	{
		[Token(Token = "0x6000711")]
		[Address(RVA = "0xA23CB8", Offset = "0xA23CB8", VA = "0xA23CB8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000712")]
		[Address(RVA = "0xA23CDC", Offset = "0xA23CDC", VA = "0xA23CDC")]
		set
		{
		}
	}

	[Token(Token = "0x170000D6")]
	public bool IsRunning
	{
		[Token(Token = "0x6000713")]
		[Address(RVA = "0xA23D08", Offset = "0xA23D08", VA = "0xA23D08")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000714")]
		[Address(RVA = "0xA23D2C", Offset = "0xA23D2C", VA = "0xA23D2C")]
		set
		{
		}
	}

	[Token(Token = "0x170000D7")]
	public bool IsWalking
	{
		[Token(Token = "0x6000715")]
		[Address(RVA = "0xA23D58", Offset = "0xA23D58", VA = "0xA23D58")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000716")]
		[Address(RVA = "0xA23D7C", Offset = "0xA23D7C", VA = "0xA23D7C")]
		set
		{
		}
	}

	[Token(Token = "0x170000D8")]
	public bool IsFallingDown
	{
		[Token(Token = "0x6000717")]
		[Address(RVA = "0xA21E68", Offset = "0xA21E68", VA = "0xA21E68")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000718")]
		[Address(RVA = "0xA23DA8", Offset = "0xA23DA8", VA = "0xA23DA8")]
		set
		{
		}
	}

	[Token(Token = "0x170000D9")]
	public bool IsFallingDownCrawl
	{
		[Token(Token = "0x6000719")]
		[Address(RVA = "0xA23DD4", Offset = "0xA23DD4", VA = "0xA23DD4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600071A")]
		[Address(RVA = "0xA23DF8", Offset = "0xA23DF8", VA = "0xA23DF8")]
		set
		{
		}
	}

	[Token(Token = "0x170000DA")]
	public bool HasLostUpperLimb
	{
		[Token(Token = "0x600071B")]
		[Address(RVA = "0xA23E24", Offset = "0xA23E24", VA = "0xA23E24")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600071C")]
		[Address(RVA = "0xA23E48", Offset = "0xA23E48", VA = "0xA23E48")]
		set
		{
		}
	}

	[Token(Token = "0x170000DB")]
	public bool IsThrowing
	{
		[Token(Token = "0x600071D")]
		[Address(RVA = "0xA23E74", Offset = "0xA23E74", VA = "0xA23E74")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600071E")]
		[Address(RVA = "0xA23E98", Offset = "0xA23E98", VA = "0xA23E98")]
		set
		{
		}
	}

	[Token(Token = "0x170000DC")]
	public bool IsGettingWeapon
	{
		[Token(Token = "0x600071F")]
		[Address(RVA = "0xA23EC4", Offset = "0xA23EC4", VA = "0xA23EC4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000720")]
		[Address(RVA = "0xA23EE8", Offset = "0xA23EE8", VA = "0xA23EE8")]
		set
		{
		}
	}

	[Token(Token = "0x170000DD")]
	public bool IsDead
	{
		[Token(Token = "0x6000721")]
		[Address(RVA = "0xA23464", Offset = "0xA23464", VA = "0xA23464")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000722")]
		[Address(RVA = "0xA23F14", Offset = "0xA23F14", VA = "0xA23F14")]
		set
		{
		}
	}

	[Token(Token = "0x170000DE")]
	public bool IsDeadCrawl
	{
		[Token(Token = "0x6000723")]
		[Address(RVA = "0xA23F64", Offset = "0xA23F64", VA = "0xA23F64")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000724")]
		[Address(RVA = "0xA23F88", Offset = "0xA23F88", VA = "0xA23F88")]
		set
		{
		}
	}

	[Token(Token = "0x170000DF")]
	public bool ShouldDieLeftSide
	{
		[Token(Token = "0x6000725")]
		[Address(RVA = "0xA23FB4", Offset = "0xA23FB4", VA = "0xA23FB4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000726")]
		[Address(RVA = "0xA23FD8", Offset = "0xA23FD8", VA = "0xA23FD8")]
		set
		{
		}
	}

	[Token(Token = "0x170000E0")]
	public bool ShouldDieRightSide
	{
		[Token(Token = "0x6000727")]
		[Address(RVA = "0xA24004", Offset = "0xA24004", VA = "0xA24004")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000728")]
		[Address(RVA = "0xA24028", Offset = "0xA24028", VA = "0xA24028")]
		set
		{
		}
	}

	[Token(Token = "0x170000E1")]
	public bool ShouldDieOnBack
	{
		[Token(Token = "0x6000729")]
		[Address(RVA = "0xA24054", Offset = "0xA24054", VA = "0xA24054")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600072A")]
		[Address(RVA = "0xA24078", Offset = "0xA24078", VA = "0xA24078")]
		set
		{
		}
	}

	[Token(Token = "0x170000E2")]
	public bool IsCrawling
	{
		[Token(Token = "0x600072B")]
		[Address(RVA = "0xA240A4", Offset = "0xA240A4", VA = "0xA240A4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600072C")]
		[Address(RVA = "0xA240C8", Offset = "0xA240C8", VA = "0xA240C8")]
		set
		{
		}
	}

	[Token(Token = "0x170000E3")]
	public float AnimatorSpeed
	{
		[Token(Token = "0x600072D")]
		[Address(RVA = "0xA240F4", Offset = "0xA240F4", VA = "0xA240F4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600072E")]
		[Address(RVA = "0xA24110", Offset = "0xA24110", VA = "0xA24110")]
		set
		{
		}
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xA2412C", Offset = "0xA2412C", VA = "0xA2412C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0xA242EC", Offset = "0xA242EC", VA = "0xA242EC")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xA24344", Offset = "0xA24344", VA = "0xA24344")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0xA228FC", Offset = "0xA228FC", VA = "0xA228FC")]
	public void GetHitAnimation(ZombieLimb limb)
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0xA243E4", Offset = "0xA243E4", VA = "0xA243E4")]
	public void GetHit()
	{
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0xA24408", Offset = "0xA24408", VA = "0xA24408")]
	public void Attack()
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0xA2439C", Offset = "0xA2439C", VA = "0xA2439C")]
	public void GetHitLeft()
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0xA243C0", Offset = "0xA243C0", VA = "0xA243C0")]
	public void GetHitRight()
	{
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0xA2442C", Offset = "0xA2442C", VA = "0xA2442C")]
	public float GetTimeOfNotHitAnimation()
	{
		return default(float);
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0xA24434", Offset = "0xA24434", VA = "0xA24434")]
	public void PlayRandomGetHitAnimation()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0xA20E3C", Offset = "0xA20E3C", VA = "0xA20E3C")]
	public void PlayThrowingAxeAnimation()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0xA244F4", Offset = "0xA244F4", VA = "0xA244F4")]
	public void PlayMeleeAttackAnimation()
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0xA2452C", Offset = "0xA2452C", VA = "0xA2452C")]
	public void PlayGettingWeaponAnimation()
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0xA20A90", Offset = "0xA20A90", VA = "0xA20A90")]
	public void PlayRunAnimation()
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0xA2341C", Offset = "0xA2341C", VA = "0xA2341C")]
	public void PlayFallDownAnimation()
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0xA2455C", Offset = "0xA2455C", VA = "0xA2455C")]
	public void PlayCrawlAnimation()
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0xA21E8C", Offset = "0xA21E8C", VA = "0xA21E8C")]
	public void PlayWalkAnimation()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0xA24570", Offset = "0xA24570", VA = "0xA24570")]
	public void PlayDeathAnimation()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xA24724", Offset = "0xA24724", VA = "0xA24724")]
	public void StopAnimations()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xA24744", Offset = "0xA24744", VA = "0xA24744")]
	public float GetCurrentAnimationLength()
	{
		return default(float);
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xA247A0", Offset = "0xA247A0", VA = "0xA247A0")]
	public void SetReferences(Animator animator)
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xA247A8", Offset = "0xA247A8", VA = "0xA247A8", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0xA24E94", Offset = "0xA24E94", VA = "0xA24E94")]
	public void ClearDeathAnimationState()
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xA24EB0", Offset = "0xA24EB0", VA = "0xA24EB0")]
	public void OverrideAnimation()
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xA24FEC", Offset = "0xA24FEC", VA = "0xA24FEC")]
	[PunRPC]
	public void RpcOverrideAnimation()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xA25110", Offset = "0xA25110", VA = "0xA25110", Slot = "5")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xA2512C", Offset = "0xA2512C", VA = "0xA2512C")]
	public ZombieAnimatorController()
	{
	}
}
[Token(Token = "0x200015A")]
public class ZombieArrowHitController : MonoBehaviourPun, IEnemyGetHit
{
	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private HealthStateController healthStateController;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ZombieSoundController zombieSoundController;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ZombieAnimatorController zombieAnimatorController;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private EnemyGetKilledController enemyGetKilledController;

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xA26440", Offset = "0xA26440", VA = "0xA26440", Slot = "4")]
	public bool IsHandling(HitInfoAbstract hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xA2646C", Offset = "0xA2646C", VA = "0xA2646C", Slot = "5")]
	public void GetHit(HitInfoAbstract hitInfo)
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xA268F4", Offset = "0xA268F4", VA = "0xA268F4")]
	public void SetReferences(ZombieSoundController zombieSoundController)
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0xA2672C", Offset = "0xA2672C", VA = "0xA2672C")]
	[PunRPC]
	private void RPCGetHitArrow(float damage, int actorNumber, Vector3 hitDirection)
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xA26904", Offset = "0xA26904", VA = "0xA26904")]
	public ZombieArrowHitController()
	{
	}
}
[Token(Token = "0x200015B")]
public class ZombieArrowKilledController : MonoBehaviour, IEnemyGetKilled
{
	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private EnemyMovementController enemyMovementController;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ZombieAnimatorController zombieAnimatorController;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private EnemyEnableController enemyEnableController;

	[Token(Token = "0x600074F")]
	[Address(RVA = "0xA2690C", Offset = "0xA2690C", VA = "0xA2690C", Slot = "4")]
	public bool IsHandling(KillInfo killInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0xA2692C", Offset = "0xA2692C", VA = "0xA2692C", Slot = "5")]
	public void GetKilled(KillInfo killInfo)
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0xA269D4", Offset = "0xA269D4", VA = "0xA269D4")]
	public ZombieArrowKilledController()
	{
	}
}
[Token(Token = "0x200015C")]
public class ZombieBulletHitController : MonoBehaviourPun, IEnemyGetHit
{
	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private HealthStateController healthStateController;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ZombieSoundController zombieSoundController;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ZombieAnimatorController zombieAnimatorController;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private EnemyGetKilledController enemyGetKilledController;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private BodyPartDetachingManager bodyPartDetachingManager;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool isEnemyNotDetachable;

	[Token(Token = "0x6000752")]
	[Address(RVA = "0xA269DC", Offset = "0xA269DC", VA = "0xA269DC", Slot = "4")]
	public bool IsHandling(HitInfoAbstract hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0xA26A08", Offset = "0xA26A08", VA = "0xA26A08", Slot = "5")]
	public void GetHit(HitInfoAbstract hitInfo)
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0xA26F28", Offset = "0xA26F28", VA = "0xA26F28")]
	private bool CanDetach(ZombieLimb zombieLimb, BulletHitInfo bulletHitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0xA27150", Offset = "0xA27150", VA = "0xA27150")]
	public void SetReferences(ZombieSoundController zombieSoundController, BodyPartDetachingManager bodyPartDetachingManager)
	{
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0xA27180", Offset = "0xA27180", VA = "0xA27180")]
	public void SetReferences(ZombieSoundController zombieSoundController)
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0xA27188", Offset = "0xA27188", VA = "0xA27188")]
	[PunRPC]
	private void RPCBulletHitFeedback(Vector3 hitDirection, int zombieLimb, bool shouldDetach, int ownerId)
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xA26FAC", Offset = "0xA26FAC", VA = "0xA26FAC")]
	[PunRPC]
	private void RPCGetHitBullet(float damage, int actorNumber, Vector3 hitDirection)
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0xA271D0", Offset = "0xA271D0", VA = "0xA271D0")]
	public ZombieBulletHitController()
	{
	}
}
[Token(Token = "0x200015D")]
public class ZombieCrawlController : MonoBehaviourPun
{
	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float crawlSpeed;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private EnemyMovementController enemyMovementController;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private HealthStateController healthStateController;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ZombieAnimatorController zombieAnimatorController;

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xA271D8", Offset = "0xA271D8", VA = "0xA271D8")]
	public void StartCrawling()
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0xA27234", Offset = "0xA27234", VA = "0xA27234")]
	public ZombieCrawlController()
	{
	}
}
[Token(Token = "0x200015E")]
public class ZombieFallDownController : MonoBehaviourPun, IResetable, IPunObservable
{
	[Token(Token = "0x400074F")]
	private const float fallDownLength = 1.5f;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AnimationCurve animationCurve;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private EnemyMovementController enemyMovementController;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timer;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float animationValue;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float animationStep;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool isFallingDown;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool hasFallen;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action<ZombieFallDownController> OnHasFallen;

	[Token(Token = "0x170000E4")]
	public bool HasFallen
	{
		[Token(Token = "0x600075C")]
		[Address(RVA = "0xA2723C", Offset = "0xA2723C", VA = "0xA2723C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600075D")]
		[Address(RVA = "0xA27244", Offset = "0xA27244", VA = "0xA27244")]
		private set
		{
		}
	}

	[Token(Token = "0x170000E5")]
	public bool IsFallingDown
	{
		[Token(Token = "0x600075E")]
		[Address(RVA = "0xA27274", Offset = "0xA27274", VA = "0xA27274")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600075F")]
		[Address(RVA = "0xA2727C", Offset = "0xA2727C", VA = "0xA2727C")]
		set
		{
		}
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0xA272B4", Offset = "0xA272B4", VA = "0xA272B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0xA2736C", Offset = "0xA2736C", VA = "0xA2736C", Slot = "5")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000762")]
	[Address(RVA = "0xA27484", Offset = "0xA27484", VA = "0xA27484", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0xA274BC", Offset = "0xA274BC", VA = "0xA274BC")]
	public ZombieFallDownController()
	{
	}
}
[Token(Token = "0x200015F")]
public class ZombieGrenadeHitController : MonoBehaviourPun, IEnemyGetHit
{
	[Token(Token = "0x4000758")]
	private const float detachChanceFactorExponent = 0.5f;

	[Token(Token = "0x4000759")]
	private const float distanceDamageFactor = 0.8f;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private HealthStateController healthStateController;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ZombieSoundController zombieSoundController;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ZombieAnimatorController zombieAnimatorController;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private EnemyGetKilledController enemyGetKilledController;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private BodyPartDetachingManager bodyPartDetachingManager;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool isEnemyNotDetachable;

	[Token(Token = "0x6000764")]
	[Address(RVA = "0xA274C4", Offset = "0xA274C4", VA = "0xA274C4", Slot = "4")]
	public bool IsHandling(HitInfoAbstract hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0xA274F0", Offset = "0xA274F0", VA = "0xA274F0", Slot = "5")]
	public void GetHit(HitInfoAbstract hitInfo)
	{
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0xA27B80", Offset = "0xA27B80", VA = "0xA27B80")]
	private bool CanDetach(ZombieLimb zombieLimb, GrenadeHitInfo grenadeHitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0xA27E94", Offset = "0xA27E94", VA = "0xA27E94")]
	public void SetReferences(ZombieSoundController zombieSoundController, BodyPartDetachingManager bodyPartDetachingManager)
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0xA27EC4", Offset = "0xA27EC4", VA = "0xA27EC4")]
	public void SetReferences(ZombieSoundController zombieSoundController)
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0xA27ECC", Offset = "0xA27ECC", VA = "0xA27ECC")]
	[PunRPC]
	private void RPCGernadeHitFeedback(int[] zombieLimbs, Vector3 hitPoint, int ownerId)
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xA27CE8", Offset = "0xA27CE8", VA = "0xA27CE8")]
	[PunRPC]
	private void RPCGetHitGrenade(float damage, int actorNumber, Vector3 explosionPosition)
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xA2808C", Offset = "0xA2808C", VA = "0xA2808C")]
	public ZombieGrenadeHitController()
	{
	}
}
[Token(Token = "0x2000161")]
public class ZombieSoundController : MonoBehaviour, IResetable
{
	[Token(Token = "0x2000162")]
	[CompilerGenerated]
	private sealed class <Breathe>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZombieSoundController <>4__this;

		[Token(Token = "0x170000E6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000786")]
			[Address(RVA = "0xA28B1C", Offset = "0xA28B1C", VA = "0xA28B1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000788")]
			[Address(RVA = "0xA28B64", Offset = "0xA28B64", VA = "0xA28B64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xA28738", Offset = "0xA28738", VA = "0xA28738")]
		[DebuggerHidden]
		public <Breathe>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xA28A68", Offset = "0xA28A68", VA = "0xA28A68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xA28A6C", Offset = "0xA28A6C", VA = "0xA28A6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xA28B24", Offset = "0xA28B24", VA = "0xA28B24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000163")]
	[CompilerGenerated]
	private sealed class <FadeOutAllSounds>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZombieSoundController <>4__this;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <volumeStep>5__2;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeoutEndTime>5__3;

		[Token(Token = "0x170000E8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600078C")]
			[Address(RVA = "0xA28CFC", Offset = "0xA28CFC", VA = "0xA28CFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600078E")]
			[Address(RVA = "0xA28D44", Offset = "0xA28D44", VA = "0xA28D44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xA28884", Offset = "0xA28884", VA = "0xA28884")]
		[DebuggerHidden]
		public <FadeOutAllSounds>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xA28B6C", Offset = "0xA28B6C", VA = "0xA28B6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xA28B70", Offset = "0xA28B70", VA = "0xA28B70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xA28D04", Offset = "0xA28D04", VA = "0xA28D04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HealthStateController healthStateController;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject AudioSourcesParent;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioSource fxSource;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip[] hitClips;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip[] deathClips;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioClip[] fallDownClips;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioClip[] roarClips;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip[] breathingClips;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioClip[] feetClips;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip[] headshotClips;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float GrowlCooldown;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float GrowlCooldownOffset;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float pitchMin;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private float pitchMax;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private float soundsFadeoutSpeed;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private float breatheLenght;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<AudioSource> audioSources;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<float> audioSourcesVolumes;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float currentTime;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float growlTimer;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float growlTimeOffset;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float breathTimer;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private AudioClip clipToPlay;

	[Token(Token = "0x600076E")]
	[Address(RVA = "0xA280CC", Offset = "0xA280CC", VA = "0xA280CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0xA282F0", Offset = "0xA282F0", VA = "0xA282F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xA28484", Offset = "0xA28484", VA = "0xA28484")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xA2856C", Offset = "0xA2856C", VA = "0xA2856C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0xA285B0", Offset = "0xA285B0", VA = "0xA285B0")]
	private void TryToBreath()
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0xA285E4", Offset = "0xA285E4", VA = "0xA285E4")]
	private void TryToGrowl()
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0xA286B0", Offset = "0xA286B0", VA = "0xA286B0")]
	public void OnFallDown()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xA28720", Offset = "0xA28720", VA = "0xA28720")]
	public void OnFootDown()
	{
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xA28728", Offset = "0xA28728", VA = "0xA28728")]
	public void PlayHeadshotSound()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0xA268FC", Offset = "0xA268FC", VA = "0xA268FC")]
	public void PlayHitSound()
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xA28730", Offset = "0xA28730", VA = "0xA28730")]
	public void PlayDeathSound()
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xA286A8", Offset = "0xA286A8", VA = "0xA286A8")]
	private void PlayRoarSound()
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xA28410", Offset = "0xA28410", VA = "0xA28410")]
	[IteratorStateMachine(typeof(<Breathe>d__35))]
	private IEnumerator Breathe()
	{
		return null;
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0xA28630", Offset = "0xA28630", VA = "0xA28630")]
	private void PlayBreathingSound()
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xA287F0", Offset = "0xA287F0", VA = "0xA287F0")]
	private void StartSoundsFadeout(HealthStateController healthStateController)
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xA286B8", Offset = "0xA286B8", VA = "0xA286B8")]
	private void PlayRandomSound(AudioClip[] audioClips)
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xA28760", Offset = "0xA28760", VA = "0xA28760")]
	private void PlaySound(AudioClip audioClip)
	{
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0xA28810", Offset = "0xA28810", VA = "0xA28810")]
	[IteratorStateMachine(typeof(<FadeOutAllSounds>d__40))]
	private IEnumerator FadeOutAllSounds()
	{
		return null;
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0xA288AC", Offset = "0xA288AC", VA = "0xA288AC")]
	private void ResetAudioSourcesVolume()
	{
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0xA28974", Offset = "0xA28974", VA = "0xA28974", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0xA28978", Offset = "0xA28978", VA = "0xA28978")]
	public ZombieSoundController()
	{
	}
}
[Token(Token = "0x2000164")]
public class ZombieDropableItemVisualsSetter : MonoBehaviour
{
	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MeshFilter itemMeshFilter;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer itemRenderer;

	[Token(Token = "0x600078F")]
	[Address(RVA = "0xA28D4C", Offset = "0xA28D4C", VA = "0xA28D4C")]
	public void SetVisuals(GameObject instance)
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0xA28E6C", Offset = "0xA28E6C", VA = "0xA28E6C")]
	public ZombieDropableItemVisualsSetter()
	{
	}
}
[Token(Token = "0x2000165")]
public class ZombieItem : MonoBehaviour
{
	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 100f)]
	[SerializeField]
	private float propabilityFactor;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool isItemApperanceRandomizable;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer itemRenderer;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<Renderer> LODRenderers;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<Material> itemChoosableMaterials;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action OnItemRandomized;

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xA28E74", Offset = "0xA28E74", VA = "0xA28E74")]
	public void RandomizeItemApperance()
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xA29094", Offset = "0xA29094", VA = "0xA29094")]
	public void ToggleItem(bool enabled)
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0xA290C4", Offset = "0xA290C4", VA = "0xA290C4")]
	public bool ShouldRandomizeItem(int propability)
	{
		return default(bool);
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0xA290D8", Offset = "0xA290D8", VA = "0xA290D8")]
	public ZombieItem()
	{
	}
}
[Token(Token = "0x2000166")]
public enum ZombieItemType
{
	[Token(Token = "0x4000789")]
	Saw,
	[Token(Token = "0x400078A")]
	Fork,
	[Token(Token = "0x400078B")]
	Hat
}
[Token(Token = "0x2000167")]
public class PoolNames : MonoBehaviour
{
	[Token(Token = "0x400078C")]
	public const string orcPoolName = "Orc";

	[Token(Token = "0x400078D")]
	public const string arrowPoolName = "Arrow";

	[Token(Token = "0x6000795")]
	[Address(RVA = "0xA290E0", Offset = "0xA290E0", VA = "0xA290E0")]
	public PoolNames()
	{
	}
}
[Token(Token = "0x2000168")]
public class ExpGiver : MonoBehaviour
{
	[Token(Token = "0x6000796")]
	[Address(RVA = "0xA290E8", Offset = "0xA290E8", VA = "0xA290E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xA29170", Offset = "0xA29170", VA = "0xA29170")]
	public void GiveExp(int exp)
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xA29234", Offset = "0xA29234", VA = "0xA29234")]
	public ExpGiver()
	{
	}
}
[Token(Token = "0x2000169")]
public class OnArrowHitExploder : MonoBehaviour
{
	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 additionalforceVector;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool inheritForceFromArrow;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float forceFromArrowInheritanceMultiplier;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ObjectExploder exploder;

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xA2923C", Offset = "0xA2923C", VA = "0xA2923C")]
	private void OnTriggerEnter(Collider coll)
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xA29388", Offset = "0xA29388", VA = "0xA29388")]
	public OnArrowHitExploder()
	{
	}
}
[Token(Token = "0x200016A")]
public class HeadshotReference : MonoBehaviour
{
	[Token(Token = "0x600079B")]
	[Address(RVA = "0xA29398", Offset = "0xA29398", VA = "0xA29398")]
	public HeadshotReference()
	{
	}
}
[Token(Token = "0x200016B")]
public class FadeableCrosshair : MonoBehaviourPun
{
	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject croshair;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject stockTransform;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Vector3 minScale;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float hideValue;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 scaleMultiplier;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private RaycastHit hit;

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xA293A0", Offset = "0xA293A0", VA = "0xA293A0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xA29760", Offset = "0xA29760", VA = "0xA29760")]
	public FadeableCrosshair()
	{
	}
}
[Token(Token = "0x200016C")]
public class Fire : MonoBehaviour
{
	[Token(Token = "0x200016D")]
	[CompilerGenerated]
	private sealed class <FireStart>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Fire <>4__this;

		[Token(Token = "0x170000EA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007A6")]
			[Address(RVA = "0xA29BEC", Offset = "0xA29BEC", VA = "0xA29BEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007A8")]
			[Address(RVA = "0xA29C34", Offset = "0xA29C34", VA = "0xA29C34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xA29A58", Offset = "0xA29A58", VA = "0xA29A58")]
		[DebuggerHidden]
		public <FireStart>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xA29B2C", Offset = "0xA29B2C", VA = "0xA29B2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xA29B30", Offset = "0xA29B30", VA = "0xA29B30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xA29BF4", Offset = "0xA29BF4", VA = "0xA29BF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200016E")]
	[CompilerGenerated]
	private sealed class <FireStop>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Fire <>4__this;

		[Token(Token = "0x170000EC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007AC")]
			[Address(RVA = "0xA29D00", Offset = "0xA29D00", VA = "0xA29D00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000ED")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007AE")]
			[Address(RVA = "0xA29D48", Offset = "0xA29D48", VA = "0xA29D48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xA29AF4", Offset = "0xA29AF4", VA = "0xA29AF4")]
		[DebuggerHidden]
		public <FireStop>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xA29C3C", Offset = "0xA29C3C", VA = "0xA29C3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xA29C40", Offset = "0xA29C40", VA = "0xA29C40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xA29D08", Offset = "0xA29D08", VA = "0xA29D08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem fire;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve curve;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float SwellMultiplier;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxEmissionRate;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float gravity;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.EmissionModule emission;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool Swell;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool Down;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float timer;

	[Token(Token = "0x600079E")]
	[Address(RVA = "0xA29774", Offset = "0xA29774", VA = "0xA29774")]
	private void Start()
	{
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xA297A4", Offset = "0xA297A4", VA = "0xA297A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0xA299E4", Offset = "0xA299E4", VA = "0xA299E4")]
	[IteratorStateMachine(typeof(<FireStart>d__11))]
	public IEnumerator FireStart()
	{
		return null;
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0xA29A80", Offset = "0xA29A80", VA = "0xA29A80")]
	[IteratorStateMachine(typeof(<FireStop>d__12))]
	public IEnumerator FireStop()
	{
		return null;
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0xA29B1C", Offset = "0xA29B1C", VA = "0xA29B1C")]
	public Fire()
	{
	}
}
[Token(Token = "0x200016F")]
public class FireballWooshVolumeDown : MonoBehaviour
{
	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve wooshVolume;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource wooshSound;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isWoosh;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timer;

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xA29D50", Offset = "0xA29D50", VA = "0xA29D50")]
	private void Update()
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xA29E04", Offset = "0xA29E04", VA = "0xA29E04")]
	public FireballWooshVolumeDown()
	{
	}
}
[Token(Token = "0x2000170")]
public class FlockEnablingController : MonoBehaviour
{
	[Token(Token = "0x40007AB")]
	private const int maxFlockWaveIndex = 18;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private WavesController wavesController;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject flocks;

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xA29E14", Offset = "0xA29E14", VA = "0xA29E14")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0xA29F74", Offset = "0xA29F74", VA = "0xA29F74")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0xA29F44", Offset = "0xA29F44", VA = "0xA29F44")]
	private void UpdateFlockEnabled(int waveIndex)
	{
	}

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0xA2A090", Offset = "0xA2A090", VA = "0xA2A090")]
	public FlockEnablingController()
	{
	}
}
[Token(Token = "0x2000171")]
public class ArcadeModeOnLaunchParameterSwitcher : MonoBehaviour
{
	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string arcadeCommandParameter;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool arcadeOptionSet;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ArcadeGameSwitcherCore arcadeSwitcher;

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0xA2A098", Offset = "0xA2A098", VA = "0xA2A098")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0xA2A1C4", Offset = "0xA2A1C4", VA = "0xA2A1C4")]
	public ArcadeModeOnLaunchParameterSwitcher()
	{
	}
}
[Token(Token = "0x2000172")]
public class BowToHandSnapper : MonoBehaviour
{
	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float timer;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject bowParent;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3 BowParentLocalRotation;

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0xA2A21C", Offset = "0xA2A21C", VA = "0xA2A21C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0xA2A314", Offset = "0xA2A314", VA = "0xA2A314")]
	public BowToHandSnapper()
	{
	}
}
[Token(Token = "0x2000173")]
public enum GameStatePayload
{
	[Token(Token = "0x40007B5")]
	NotStarted,
	[Token(Token = "0x40007B6")]
	During,
	[Token(Token = "0x40007B7")]
	Victory,
	[Token(Token = "0x40007B8")]
	Defeat
}
[Token(Token = "0x2000174")]
public class MenuWindowsController : MonoBehaviour
{
	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] menuWindows;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject menuWindowsParent;

	[Token(Token = "0x170000EE")]
	public bool IsMenuVisible
	{
		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xA2A32C", Offset = "0xA2A32C", VA = "0xA2A32C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0xA2A348", Offset = "0xA2A348", VA = "0xA2A348")]
	public void ShowWindows()
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0xA2A368", Offset = "0xA2A368", VA = "0xA2A368")]
	public void HideWindows()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xA2A3CC", Offset = "0xA2A3CC", VA = "0xA2A3CC")]
	public MenuWindowsController()
	{
	}
}
[Token(Token = "0x2000175")]
[CreateAssetMenu(fileName = "ProjectSettings", menuName = "ProjectSettings", order = 51)]
public class ProjectSettings : ProjectSettingsCore
{
	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool isReleaseBuild;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool isArcadeBuild;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[SerializeField]
	private bool isFreeItemsInShop;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[SerializeField]
	private bool isTournamentBuild;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool isSpellsTestingBuild;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[SerializeField]
	private bool isBowSpellsBuild;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[SerializeField]
	private bool isTournamentPopUpUsed;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[SerializeField]
	private bool isVoiceChatDisabled;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool isDiscordLinkDisabled;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool isLeaderboardDisabled;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	[SerializeField]
	private bool isPicoSpatializerEnabled;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string gameVersion;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AWSEndpointType aWSEndpointType;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextAsset changelog;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[DisplayWithoutEditEnum]
	private Quality gameQuality;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[DisplayWithoutEditEnum]
	private VRSDK vRSDK;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[DisplayWithoutEditEnum]
	private TargetPlatform currentPlatform;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[DisplayWithoutEditEnum]
	private CloudRegionCode defaultCloudRegionCode;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Maps maps;

	[Token(Token = "0x170000EF")]
	public override bool IsReleaseBuild
	{
		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xA2A3D4", Offset = "0xA2A3D4", VA = "0xA2A3D4", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F0")]
	public override bool IsArcadeBuild
	{
		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xA2A3DC", Offset = "0xA2A3DC", VA = "0xA2A3DC", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F1")]
	public bool IsFreeItemsInShop
	{
		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xA2A3E4", Offset = "0xA2A3E4", VA = "0xA2A3E4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F2")]
	public bool IsTournamentBuild
	{
		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xA2A3EC", Offset = "0xA2A3EC", VA = "0xA2A3EC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F3")]
	public bool IsSpellsTestingBuild
	{
		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xA2A3F4", Offset = "0xA2A3F4", VA = "0xA2A3F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F4")]
	public bool IsBowSpellsBuild
	{
		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xA2A3FC", Offset = "0xA2A3FC", VA = "0xA2A3FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F5")]
	public bool IsTournamentPopUpUsed
	{
		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xA2A404", Offset = "0xA2A404", VA = "0xA2A404")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F6")]
	public bool IsPicoSpatializerEnabled
	{
		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xA2A40C", Offset = "0xA2A40C", VA = "0xA2A40C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F7")]
	public override string GameVersion
	{
		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xA2A414", Offset = "0xA2A414", VA = "0xA2A414", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F8")]
	public AWSEndpointType AWSEndpointType
	{
		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xA2A41C", Offset = "0xA2A41C", VA = "0xA2A41C")]
		get
		{
			return default(AWSEndpointType);
		}
	}

	[Token(Token = "0x170000F9")]
	public override TextAsset Changelog
	{
		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xA2A424", Offset = "0xA2A424", VA = "0xA2A424", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000FA")]
	public override Maps Maps
	{
		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xA2A42C", Offset = "0xA2A42C", VA = "0xA2A42C", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000FB")]
	public override TargetPlatform CurrentPlatform
	{
		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xA2A434", Offset = "0xA2A434", VA = "0xA2A434", Slot = "13")]
		get
		{
			return default(TargetPlatform);
		}
		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xA2A43C", Offset = "0xA2A43C", VA = "0xA2A43C", Slot = "14")]
		set
		{
		}
	}

	[Token(Token = "0x170000FC")]
	public override Quality GameQuality
	{
		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xA2A444", Offset = "0xA2A444", VA = "0xA2A444", Slot = "9")]
		get
		{
			return default(Quality);
		}
		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xA2A44C", Offset = "0xA2A44C", VA = "0xA2A44C", Slot = "10")]
		set
		{
		}
	}

	[Token(Token = "0x170000FD")]
	public override VRSDK VRSDK
	{
		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xA2A454", Offset = "0xA2A454", VA = "0xA2A454", Slot = "11")]
		get
		{
			return default(VRSDK);
		}
		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xA2A45C", Offset = "0xA2A45C", VA = "0xA2A45C", Slot = "12")]
		set
		{
		}
	}

	[Token(Token = "0x170000FE")]
	public override CloudRegionCode DefaultCloudRegionCode
	{
		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xA2A464", Offset = "0xA2A464", VA = "0xA2A464", Slot = "15")]
		get
		{
			return default(CloudRegionCode);
		}
		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xA2A46C", Offset = "0xA2A46C", VA = "0xA2A46C", Slot = "16")]
		set
		{
		}
	}

	[Token(Token = "0x170000FF")]
	public override bool IsVoiceChatDisabled
	{
		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xA2A474", Offset = "0xA2A474", VA = "0xA2A474", Slot = "17")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xA2A47C", Offset = "0xA2A47C", VA = "0xA2A47C", Slot = "18")]
		set
		{
		}
	}

	[Token(Token = "0x17000100")]
	public override bool IsDiscordLinkDisabled
	{
		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xA2A488", Offset = "0xA2A488", VA = "0xA2A488", Slot = "19")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xA2A490", Offset = "0xA2A490", VA = "0xA2A490", Slot = "20")]
		set
		{
		}
	}

	[Token(Token = "0x17000101")]
	public override bool IsLeaderboardDisabled
	{
		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xA2A49C", Offset = "0xA2A49C", VA = "0xA2A49C", Slot = "21")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xA2A4A4", Offset = "0xA2A4A4", VA = "0xA2A4A4", Slot = "22")]
		set
		{
		}
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0xA2A4B0", Offset = "0xA2A4B0", VA = "0xA2A4B0")]
	public ProjectSettings()
	{
	}
}
[Token(Token = "0x2000176")]
public struct TouchpadArea
{
	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float minAngle;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float maxAngle;
}
[Token(Token = "0x2000177")]
public class TouchpadSelectController : MonoBehaviour
{
	[Token(Token = "0x40007D0")]
	private const int selectionParts = 4;

	[Token(Token = "0x40007D1")]
	private const float requiredDistanceFromCenter = 0.3f;

	[Token(Token = "0x40007D2")]
	private const float maximumAngle = 360f;

	[Token(Token = "0x40007D3")]
	private const int nothingSelectedValue = -1;

	[Token(Token = "0x40007D4")]
	private const float startingAngle = 45f;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TouchpadArea[] touchpadAreas;

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0xA2A4C0", Offset = "0xA2A4C0", VA = "0xA2A4C0")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0xA2A524", Offset = "0xA2A524", VA = "0xA2A524")]
	public int GetSelectedItemIndex(Vector2 touchpadAxis)
	{
		return default(int);
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0xA2A70C", Offset = "0xA2A70C", VA = "0xA2A70C")]
	public TouchpadSelectController()
	{
	}
}
[Token(Token = "0x2000178")]
public class GameInfo : GameInfoCore
{
	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isFreeItemsInShop;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool isTournamentBuild;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool IsSpellsTestingBuild;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	public static bool isBowSpellsBuild;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool isTorsoCoopBuild;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
	public static bool isTournamentPopUpUsed;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
	public static bool isPicoSpatializerEnabled;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static AWSEndpointType awsEndpointType;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Translation CurrentTranslation;

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xA2A770", Offset = "0xA2A770", VA = "0xA2A770")]
	public GameInfo()
	{
	}
}
[Token(Token = "0x2000179")]
public class GameObjectParenter : MonoBehaviour
{
	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform parent;

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0xA2A7C8", Offset = "0xA2A7C8", VA = "0xA2A7C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0xA2A7F0", Offset = "0xA2A7F0", VA = "0xA2A7F0")]
	public GameObjectParenter()
	{
	}
}
[Token(Token = "0x200017A")]
public class BarrelReference : MonoBehaviour
{
	[Token(Token = "0x60007DE")]
	[Address(RVA = "0xA2A7F8", Offset = "0xA2A7F8", VA = "0xA2A7F8")]
	public BarrelReference()
	{
	}
}
[Token(Token = "0x200017B")]
public class GatlingGunCrank : MonoBehaviour
{
	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ItemGrabController itemGrabController;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform mainCrankTransform;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform barrelsTransform;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float barrelsRotationModifierFromCrank;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float crankSpeed;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform box;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform box2;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Collider shootingTrigger;

	[Token(Token = "0x17000102")]
	public int OwnerId
	{
		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xA2A800", Offset = "0xA2A800", VA = "0xA2A800")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0xA2A81C", Offset = "0xA2A81C", VA = "0xA2A81C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0xA2A8F4", Offset = "0xA2A8F4", VA = "0xA2A8F4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0xA2A9CC", Offset = "0xA2A9CC", VA = "0xA2A9CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0xA2AA80", Offset = "0xA2AA80", VA = "0xA2AA80")]
	private void CalculateCrankRotation()
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0xA2AF10", Offset = "0xA2AF10", VA = "0xA2AF10")]
	private float ConvertToNormalAngle(float startingRotation, Vector3 crankVector)
	{
		return default(float);
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0xA2AF88", Offset = "0xA2AF88", VA = "0xA2AF88")]
	public void SetWeapon()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0xA2AFC4", Offset = "0xA2AFC4", VA = "0xA2AFC4")]
	public GatlingGunCrank()
	{
	}
}
[Token(Token = "0x200017C")]
public class GatlingGunGripController : MonoBehaviourPun
{
	[Token(Token = "0x40007E8")]
	private const float minAngleDifference = 0.1f;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ItemGrabController itemGrabController;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform mainGunTransform;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform supportMechanismTransform;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool isResettingPosition;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion defaultMainGunRotation;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion defaultSupportMechanismRotation;

	[Token(Token = "0x17000103")]
	public int OwnerId
	{
		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xA2AFCC", Offset = "0xA2AFCC", VA = "0xA2AFCC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0xA2AFE8", Offset = "0xA2AFE8", VA = "0xA2AFE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0xA2B02C", Offset = "0xA2B02C", VA = "0xA2B02C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0xA2B134", Offset = "0xA2B134", VA = "0xA2B134")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0xA2B23C", Offset = "0xA2B23C", VA = "0xA2B23C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0xA2B700", Offset = "0xA2B700", VA = "0xA2B700")]
	private void ResetGatlingGunRotation()
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0xA2B280", Offset = "0xA2B280", VA = "0xA2B280")]
	private void CalculateGatlingGunRotation()
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0xA2B9C8", Offset = "0xA2B9C8", VA = "0xA2B9C8")]
	public void ResetPosition()
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0xA2B9D4", Offset = "0xA2B9D4", VA = "0xA2B9D4")]
	public GatlingGunGripController()
	{
	}
}
[Token(Token = "0x200017D")]
public class GatlingGunShootTrigger : MonoBehaviour
{
	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GatlingGunController gutlingGunController;

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0xA2B9DC", Offset = "0xA2B9DC", VA = "0xA2B9DC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0xA2BA88", Offset = "0xA2BA88", VA = "0xA2BA88")]
	public GatlingGunShootTrigger()
	{
	}
}
[Serializable]
[Token(Token = "0x200017E")]
public class GauntletRenderers
{
	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<SkinnedMeshRenderer> renderers;

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0xA2BA90", Offset = "0xA2BA90", VA = "0xA2BA90")]
	public GauntletRenderers()
	{
	}
}
[Token(Token = "0x200017F")]
public class GoldGiver : MonoBehaviour
{
	[Token(Token = "0x40007F2")]
	private const int goldToAdd = 100;

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0xA2BB18", Offset = "0xA2BB18", VA = "0xA2BB18")]
	private void Start()
	{
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0xA2BBA0", Offset = "0xA2BBA0", VA = "0xA2BBA0")]
	public void GiveGold()
	{
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0xA2BBFC", Offset = "0xA2BBFC", VA = "0xA2BBFC")]
	public GoldGiver()
	{
	}
}
[Token(Token = "0x2000180")]
public class ArcheryController : MonoBehaviour, IHandsType
{
	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isActive;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ArrowHandController arrowHandController;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private BowController bowController;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private HandsType handsType;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PoserActivator arrowHandPoserActivator;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PoserActivator bowPoserActivator;

	[Token(Token = "0x17000104")]
	public HandsType HandsType
	{
		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xA2BE74", Offset = "0xA2BE74", VA = "0xA2BE74", Slot = "4")]
		get
		{
			return default(HandsType);
		}
	}

	[Token(Token = "0x17000105")]
	public bool isArrowAttached
	{
		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xA2BE7C", Offset = "0xA2BE7C", VA = "0xA2BE7C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000106")]
	public bool IsActive
	{
		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xA2BE98", Offset = "0xA2BE98", VA = "0xA2BE98")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xA2BEA0", Offset = "0xA2BEA0", VA = "0xA2BEA0")]
		private set
		{
		}
	}

	[Token(Token = "0x17000107")]
	public bool CanAttachArrow
	{
		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xA2BF9C", Offset = "0xA2BF9C", VA = "0xA2BF9C")]
		set
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public event Action OnArrowAttach
	{
		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xA2BC04", Offset = "0xA2BC04", VA = "0xA2BC04")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xA2BCA0", Offset = "0xA2BCA0", VA = "0xA2BCA0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public event Action OnArrowDetach
	{
		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xA2BD3C", Offset = "0xA2BD3C", VA = "0xA2BD3C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xA2BDD8", Offset = "0xA2BDD8", VA = "0xA2BDD8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0xA2BFBC", Offset = "0xA2BFBC", VA = "0xA2BFBC")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0xA2C124", Offset = "0xA2C124", VA = "0xA2C124")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0xA2C28C", Offset = "0xA2C28C", VA = "0xA2C28C")]
	internal void InitializeWithoutPlayer()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0xA2C2AC", Offset = "0xA2C2AC", VA = "0xA2C2AC", Slot = "5")]
	public void SetActive(bool value)
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0xA2C2B4", Offset = "0xA2C2B4", VA = "0xA2C2B4")]
	public ArcheryController()
	{
	}
}
[Token(Token = "0x2000181")]
public class ArrowHandController : MonoBehaviourPun, IPunObservable, IResetable, ISettable
{
	[Token(Token = "0x40007FB")]
	private const float distancePrecision = 0.1f;

	[Token(Token = "0x40007FC")]
	private const float inputTriggerMinValue = 0.2f;

	[Token(Token = "0x40007FD")]
	private const int attachMultiplier = 2;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform HandControlller;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform handParrent;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform inHandArrowParent;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private BowController bow;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject arrow;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private MeshRenderer arrowMeshRenderer;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private InputActionReference triggerInput;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip attachedArrowSound;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Range(0f, 1f)]
	private float volume;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool isAttachArrowAnimationPlaying;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	private bool isDetachArrowAnimationPlaying;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Quaternion handDefaultRotation;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 handDefaultPosition;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float lerpValue;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool isInsideInteractionTrigger;

	[Token(Token = "0x17000108")]
	public GameObject Arrow
	{
		[Token(Token = "0x6000808")]
		[Address(RVA = "0xA2C2BC", Offset = "0xA2C2BC", VA = "0xA2C2BC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000809")]
		[Address(RVA = "0xA2C2C4", Offset = "0xA2C2C4", VA = "0xA2C2C4")]
		private set
		{
		}
	}

	[Token(Token = "0x17000109")]
	public bool CanAttachArrow
	{
		[Token(Token = "0x600080A")]
		[Address(RVA = "0xA2C2CC", Offset = "0xA2C2CC", VA = "0xA2C2CC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600080B")]
		[Address(RVA = "0xA2C2D4", Offset = "0xA2C2D4", VA = "0xA2C2D4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700010A")]
	public bool Active
	{
		[Token(Token = "0x600080C")]
		[Address(RVA = "0xA2BF50", Offset = "0xA2BF50", VA = "0xA2BF50")]
		set
		{
		}
	}

	[Token(Token = "0x1700010B")]
	public bool IsAttachArrowAnimationPlaying
	{
		[Token(Token = "0x600080D")]
		[Address(RVA = "0xA2C2E0", Offset = "0xA2C2E0", VA = "0xA2C2E0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600080E")]
		[Address(RVA = "0xA2C2E8", Offset = "0xA2C2E8", VA = "0xA2C2E8")]
		set
		{
		}
	}

	[Token(Token = "0x1700010C")]
	public bool IsDetachArrowAnimationPlaying
	{
		[Token(Token = "0x600080F")]
		[Address(RVA = "0xA2C304", Offset = "0xA2C304", VA = "0xA2C304")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000810")]
		[Address(RVA = "0xA2C30C", Offset = "0xA2C30C", VA = "0xA2C30C")]
		set
		{
		}
	}

	[Token(Token = "0x14000011")]
	public event Action OnArrowAttach
	{
		[Token(Token = "0x6000804")]
		[Address(RVA = "0xA2BFEC", Offset = "0xA2BFEC", VA = "0xA2BFEC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000805")]
		[Address(RVA = "0xA2C154", Offset = "0xA2C154", VA = "0xA2C154")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public event Action OnArrowDetach
	{
		[Token(Token = "0x6000806")]
		[Address(RVA = "0xA2C088", Offset = "0xA2C088", VA = "0xA2C088")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000807")]
		[Address(RVA = "0xA2C1F0", Offset = "0xA2C1F0", VA = "0xA2C1F0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0xA2C328", Offset = "0xA2C328", VA = "0xA2C328")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000812")]
	[Address(RVA = "0xA2C380", Offset = "0xA2C380", VA = "0xA2C380")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0xA2C428", Offset = "0xA2C428", VA = "0xA2C428")]
	private void UpdateHandAttach(InputAction.CallbackContext? context)
	{
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0xA2C4A8", Offset = "0xA2C4A8", VA = "0xA2C4A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xA2CB40", Offset = "0xA2CB40", VA = "0xA2CB40")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xA2CCC4", Offset = "0xA2CCC4", VA = "0xA2CCC4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0xA2C818", Offset = "0xA2C818", VA = "0xA2C818")]
	private bool CanDetachArrow()
	{
		return default(bool);
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0xA2C588", Offset = "0xA2C588", VA = "0xA2C588")]
	private void UpdateArrowAttaching()
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0xA2C854", Offset = "0xA2C854", VA = "0xA2C854")]
	private void UpdateArrowDetaching()
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0xA2CAF0", Offset = "0xA2CAF0", VA = "0xA2CAF0")]
	private void RotateArrowHandOnBow()
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0xA2CDC0", Offset = "0xA2CDC0", VA = "0xA2CDC0")]
	public void AttachArrowToBow()
	{
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0xA2CED8", Offset = "0xA2CED8", VA = "0xA2CED8")]
	public void AttachArrowToHand()
	{
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0xA2CFF8", Offset = "0xA2CFF8", VA = "0xA2CFF8")]
	public void AttachHandToBow()
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0xA2D0C4", Offset = "0xA2D0C4", VA = "0xA2D0C4")]
	public void DetachHand()
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0xA2D118", Offset = "0xA2D118", VA = "0xA2D118", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0xA2C400", Offset = "0xA2C400", VA = "0xA2C400", Slot = "5")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xA2D24C", Offset = "0xA2D24C", VA = "0xA2D24C", Slot = "6")]
	public void SetReferences()
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xA2D290", Offset = "0xA2D290", VA = "0xA2D290")]
	public GameObject GetItemInPickingHand()
	{
		return null;
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xA2D298", Offset = "0xA2D298", VA = "0xA2D298")]
	public ArrowHandController()
	{
	}
}
[Token(Token = "0x2000182")]
public class ControllersHandsController : MonoBehaviourPun, IHandsType
{
	[Token(Token = "0x2000183")]
	[CompilerGenerated]
	private sealed class <SetHandAnimator>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControllersHandsController <>4__this;

		[Token(Token = "0x1700010F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000833")]
			[Address(RVA = "0xA2D5E0", Offset = "0xA2D5E0", VA = "0xA2D5E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000835")]
			[Address(RVA = "0xA2D628", Offset = "0xA2D628", VA = "0xA2D628", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0xA2D538", Offset = "0xA2D538", VA = "0xA2D538")]
		[DebuggerHidden]
		public <SetHandAnimator>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0xA2D568", Offset = "0xA2D568", VA = "0xA2D568", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0xA2D56C", Offset = "0xA2D56C", VA = "0xA2D56C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xA2D5E8", Offset = "0xA2D5E8", VA = "0xA2D5E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SteamVR_LaserPointer laserToActivate;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HVRHandAnimator HandAnimator;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private HVRHandPoser laserHandPoser;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private HandsType handsType;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool isActive;

	[Token(Token = "0x1700010D")]
	public bool IsActive
	{
		[Token(Token = "0x6000824")]
		[Address(RVA = "0xA2D2A8", Offset = "0xA2D2A8", VA = "0xA2D2A8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000825")]
		[Address(RVA = "0xA2D2B0", Offset = "0xA2D2B0", VA = "0xA2D2B0")]
		private set
		{
		}
	}

	[Token(Token = "0x1700010E")]
	public HandsType HandsType
	{
		[Token(Token = "0x6000826")]
		[Address(RVA = "0xA2D2E4", Offset = "0xA2D2E4", VA = "0xA2D2E4", Slot = "4")]
		get
		{
			return default(HandsType);
		}
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xA2D2EC", Offset = "0xA2D2EC", VA = "0xA2D2EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xA2D36C", Offset = "0xA2D36C", VA = "0xA2D36C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xA2D2BC", Offset = "0xA2D2BC", VA = "0xA2D2BC")]
	private void SetAppropriateControllersState()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xA2D3EC", Offset = "0xA2D3EC", VA = "0xA2D3EC")]
	private void DisableAllControllers()
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xA2D418", Offset = "0xA2D418", VA = "0xA2D418")]
	private void EnableUsedControllers()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xA2D4F4", Offset = "0xA2D4F4", VA = "0xA2D4F4")]
	private void TurnOffLaser()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xA2D480", Offset = "0xA2D480", VA = "0xA2D480")]
	[IteratorStateMachine(typeof(<SetHandAnimator>d__16))]
	private IEnumerator SetHandAnimator()
	{
		return null;
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xA2D52C", Offset = "0xA2D52C", VA = "0xA2D52C", Slot = "5")]
	public void SetActive(bool value)
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xA2D560", Offset = "0xA2D560", VA = "0xA2D560")]
	public ControllersHandsController()
	{
	}
}
[Token(Token = "0x2000184")]
public class EmptyHandController : MonoBehaviour, IHandsType
{
	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HandsType handsType;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] handGameObjects;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isActive;

	[Token(Token = "0x17000111")]
	public HandsType HandsType
	{
		[Token(Token = "0x6000836")]
		[Address(RVA = "0xA2D630", Offset = "0xA2D630", VA = "0xA2D630", Slot = "4")]
		get
		{
			return default(HandsType);
		}
	}

	[Token(Token = "0x17000112")]
	public bool IsActive
	{
		[Token(Token = "0x6000837")]
		[Address(RVA = "0xA2D638", Offset = "0xA2D638", VA = "0xA2D638")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000838")]
		[Address(RVA = "0xA2D640", Offset = "0xA2D640", VA = "0xA2D640")]
		private set
		{
		}
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0xA2D6B0", Offset = "0xA2D6B0", VA = "0xA2D6B0", Slot = "5")]
	public void SetActive(bool value)
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0xA2D6B8", Offset = "0xA2D6B8", VA = "0xA2D6B8")]
	public EmptyHandController()
	{
	}
}
[Token(Token = "0x2000185")]
public class GrabHandsController : MonoBehaviour, IHandsType
{
	[Token(Token = "0x17000113")]
	public HandsType HandsType
	{
		[Token(Token = "0x600083B")]
		[Address(RVA = "0xA2D6C0", Offset = "0xA2D6C0", VA = "0xA2D6C0", Slot = "4")]
		get
		{
			return default(HandsType);
		}
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0xA2D6C8", Offset = "0xA2D6C8", VA = "0xA2D6C8", Slot = "5")]
	public void SetActive(bool value)
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0xA2D6CC", Offset = "0xA2D6CC", VA = "0xA2D6CC")]
	public GrabHandsController()
	{
	}
}
[Token(Token = "0x2000186")]
public enum GrabType
{
	[Token(Token = "0x400081D")]
	None,
	[Token(Token = "0x400081E")]
	LeftHand,
	[Token(Token = "0x400081F")]
	RightHand,
	[Token(Token = "0x4000820")]
	BothHands
}
[Token(Token = "0x2000187")]
public class GunControllerGameObjectsEnabler : MonoBehaviourPun
{
	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<GameObject> leftHandedGuns;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<GameObject> rightHandedGuns;

	[Token(Token = "0x600083E")]
	[Address(RVA = "0xA2D6D4", Offset = "0xA2D6D4", VA = "0xA2D6D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0xA2D8F4", Offset = "0xA2D8F4", VA = "0xA2D8F4")]
	public GunControllerGameObjectsEnabler()
	{
	}
}
[Token(Token = "0x2000188")]
public class HandsController : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isInMenu;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ControllersHandsController controllersHandsController;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[RequireInterface(typeof(IHandsType))]
	[SerializeField]
	private List<UnityEngine.Object> _handsTypes;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isGhostly;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private HandsType currentHandsType;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isActive;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isStateInitialized;

	[Token(Token = "0x17000114")]
	private List<IHandsType> handsTypes
	{
		[Token(Token = "0x6000840")]
		[Address(RVA = "0xA2D8FC", Offset = "0xA2D8FC", VA = "0xA2D8FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000115")]
	public HandsType LastWeaponHandsType
	{
		[Token(Token = "0x6000841")]
		[Address(RVA = "0xA2DA04", Offset = "0xA2DA04", VA = "0xA2DA04")]
		[CompilerGenerated]
		get
		{
			return default(HandsType);
		}
		[Token(Token = "0x6000842")]
		[Address(RVA = "0xA2DA0C", Offset = "0xA2DA0C", VA = "0xA2DA0C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000116")]
	public HandsType CurrentHandsType
	{
		[Token(Token = "0x6000843")]
		[Address(RVA = "0xA2DA14", Offset = "0xA2DA14", VA = "0xA2DA14")]
		get
		{
			return default(HandsType);
		}
		[Token(Token = "0x6000844")]
		[Address(RVA = "0xA2DA1C", Offset = "0xA2DA1C", VA = "0xA2DA1C")]
		set
		{
		}
	}

	[Token(Token = "0x17000117")]
	public bool IsActive
	{
		[Token(Token = "0x6000845")]
		[Address(RVA = "0xA2DCD8", Offset = "0xA2DCD8", VA = "0xA2DCD8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000846")]
		[Address(RVA = "0xA2DCE0", Offset = "0xA2DCE0", VA = "0xA2DCE0")]
		set
		{
		}
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0xA2DD38", Offset = "0xA2DD38", VA = "0xA2DD38")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0xA2DD90", Offset = "0xA2DD90", VA = "0xA2DD90")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0xA2DDE8", Offset = "0xA2DDE8", VA = "0xA2DDE8")]
	public void InitializeWithPlayer()
	{
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0xA2DDF4", Offset = "0xA2DDF4", VA = "0xA2DDF4")]
	public void InitializeWithoutPlayer()
	{
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0xA2DA30", Offset = "0xA2DA30", VA = "0xA2DA30")]
	private void AdjustHandsToState(HandsType handsTypeToSet)
	{
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0xA2DE00", Offset = "0xA2DE00", VA = "0xA2DE00")]
	public void SetLastWeaponHandsType()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0xA2DE58", Offset = "0xA2DE58", VA = "0xA2DE58", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0xA2DF28", Offset = "0xA2DF28", VA = "0xA2DF28")]
	private void TryToSynchronizeData(PhotonStream stream)
	{
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0xA2E0DC", Offset = "0xA2E0DC", VA = "0xA2E0DC")]
	public HandsController()
	{
	}
}
[Token(Token = "0x200018A")]
public class HandsDominanceSwitcher : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x200018B")]
	public enum HandsDominanceType
	{
		[Token(Token = "0x4000832")]
		Right,
		[Token(Token = "0x4000833")]
		Left
	}

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isDominanceLoadedFromSettings;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HandsController rightHandedHandsController;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private HandsController leftHandedHandsController;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private HandsDominanceType handsDominance;

	[Token(Token = "0x17000118")]
	public HandsDominanceType HandsDominance
	{
		[Token(Token = "0x6000853")]
		[Address(RVA = "0xA2E1AC", Offset = "0xA2E1AC", VA = "0xA2E1AC")]
		get
		{
			return default(HandsDominanceType);
		}
		[Token(Token = "0x6000854")]
		[Address(RVA = "0xA2E2B8", Offset = "0xA2E2B8", VA = "0xA2E2B8")]
		set
		{
		}
	}

	[Token(Token = "0x17000119")]
	public HandsController HandsController
	{
		[Token(Token = "0x6000855")]
		[Address(RVA = "0xA2E348", Offset = "0xA2E348", VA = "0xA2E348")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0xA2E370", Offset = "0xA2E370", VA = "0xA2E370")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0xA2E3C8", Offset = "0xA2E3C8", VA = "0xA2E3C8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0xA2E420", Offset = "0xA2E420", VA = "0xA2E420")]
	public void InitializeWithPlayer(bool isLocalPlayer)
	{
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0xA2E658", Offset = "0xA2E658", VA = "0xA2E658")]
	public void InitializeWithoutPlayer()
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0xA2E664", Offset = "0xA2E664", VA = "0xA2E664")]
	public HandsController GetHandsController()
	{
		return null;
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0xA2E704", Offset = "0xA2E704", VA = "0xA2E704")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0xA2E1EC", Offset = "0xA2E1EC", VA = "0xA2E1EC")]
	private void OnHandDominanceSettingChange()
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0xA2E2D0", Offset = "0xA2E2D0", VA = "0xA2E2D0")]
	private void AdjustHandsToDominance()
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0xA2E914", Offset = "0xA2E914", VA = "0xA2E914", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0xA2E9F8", Offset = "0xA2E9F8", VA = "0xA2E9F8")]
	public HandsDominanceSwitcher()
	{
	}
}
[Token(Token = "0x200018C")]
public enum HandsType
{
	[Token(Token = "0x4000835")]
	Controllers,
	[Token(Token = "0x4000836")]
	Archery,
	[Token(Token = "0x4000837")]
	Gestures,
	[Token(Token = "0x4000838")]
	Rifle,
	[Token(Token = "0x4000839")]
	Shotgun,
	[Token(Token = "0x400083A")]
	GrenadeLauncher,
	[Token(Token = "0x400083B")]
	Revolvers,
	[Token(Token = "0x400083C")]
	Crossbow,
	[Token(Token = "0x400083D")]
	Empty,
	[Token(Token = "0x400083E")]
	Grab
}
[Token(Token = "0x200018D")]
public interface IHandsType
{
	[Token(Token = "0x1700011A")]
	HandsType HandsType
	{
		[Token(Token = "0x6000860")]
		get;
	}

	[Token(Token = "0x6000861")]
	void SetActive(bool value);
}
[Token(Token = "0x200018E")]
public class ItemGrabController : MonoBehaviourPun, IPunObservable, IInRoomCallbacks
{
	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private OwnerChanger[] ownerChangers;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GrabType grabType;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private HVRGrabbable grabbable;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform handTransform;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int ownerActorNumber;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Action OnItemTaken;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Action OnItemRelease;

	[Token(Token = "0x1700011B")]
	public GrabType GrabType
	{
		[Token(Token = "0x6000862")]
		[Address(RVA = "0xA2EA00", Offset = "0xA2EA00", VA = "0xA2EA00")]
		get
		{
			return default(GrabType);
		}
	}

	[Token(Token = "0x1700011C")]
	public int OwnerActorNumber
	{
		[Token(Token = "0x6000863")]
		[Address(RVA = "0xA2EA08", Offset = "0xA2EA08", VA = "0xA2EA08")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000864")]
		[Address(RVA = "0xA2EA10", Offset = "0xA2EA10", VA = "0xA2EA10")]
		private set
		{
		}
	}

	[Token(Token = "0x1700011D")]
	public Transform HandTransform
	{
		[Token(Token = "0x6000865")]
		[Address(RVA = "0xA2EA80", Offset = "0xA2EA80", VA = "0xA2EA80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0xA2EA88", Offset = "0xA2EA88", VA = "0xA2EA88")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0xA2EBBC", Offset = "0xA2EBBC", VA = "0xA2EBBC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0xA2ECF0", Offset = "0xA2ECF0", VA = "0xA2ECF0")]
	private void Grab(HVRGrabberBase grabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0xA2EE9C", Offset = "0xA2EE9C", VA = "0xA2EE9C")]
	private void Release(HVRGrabberBase grabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0xA2ED74", Offset = "0xA2ED74", VA = "0xA2ED74")]
	public void Grab(Transform _handTransform)
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0xA2EEA0", Offset = "0xA2EEA0", VA = "0xA2EEA0")]
	public void Release()
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0xA2A9FC", Offset = "0xA2A9FC", VA = "0xA2A9FC")]
	public bool IsLocalPlayerOwner()
	{
		return default(bool);
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0xA2EEC8", Offset = "0xA2EEC8", VA = "0xA2EEC8", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0xA2EF90", Offset = "0xA2EF90", VA = "0xA2EF90", Slot = "6")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0xA2F060", Offset = "0xA2F060", VA = "0xA2F060", Slot = "9")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0xA2EF94", Offset = "0xA2EF94", VA = "0xA2EF94")]
	private void ResetUserId()
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0xA2F064", Offset = "0xA2F064", VA = "0xA2F064", Slot = "5")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0xA2F068", Offset = "0xA2F068", VA = "0xA2F068", Slot = "7")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0xA2F06C", Offset = "0xA2F06C", VA = "0xA2F06C", Slot = "8")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0xA2F070", Offset = "0xA2F070", VA = "0xA2F070")]
	public ItemGrabController()
	{
	}
}
[Token(Token = "0x200018F")]
public class MenuHandsController : MonoBehaviour
{
	[Token(Token = "0x2000190")]
	[CompilerGenerated]
	private sealed class <SetHandAnimator>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRHandAnimator handToReset;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HVRHandAnimator handToSet;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MenuHandsController <>4__this;

		[Token(Token = "0x1700011E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600087E")]
			[Address(RVA = "0xA2F5EC", Offset = "0xA2F5EC", VA = "0xA2F5EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000880")]
			[Address(RVA = "0xA2F634", Offset = "0xA2F634", VA = "0xA2F634", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xA2F52C", Offset = "0xA2F52C", VA = "0xA2F52C")]
		[DebuggerHidden]
		public <SetHandAnimator>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xA2F55C", Offset = "0xA2F55C", VA = "0xA2F55C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0xA2F560", Offset = "0xA2F560", VA = "0xA2F560", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0xA2F5F4", Offset = "0xA2F5F4", VA = "0xA2F5F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000846")]
	private const float picoHandsRotationOffset = -50f;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SteamVR_MenuLaserPointer rightHandedPointer;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SteamVR_MenuLaserPointer leftHandedPointer;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HVRHandAnimator leftHandAnimator;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private HVRHandAnimator rightHandAnimator;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private HVRHandPoser laserHandPoser;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform leftHandOffsetter;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform rightHandOffsetter;

	[Token(Token = "0x6000875")]
	[Address(RVA = "0xA2F088", Offset = "0xA2F088", VA = "0xA2F088")]
	private void Start()
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0xA2F278", Offset = "0xA2F278", VA = "0xA2F278")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0xA2F380", Offset = "0xA2F380", VA = "0xA2F380")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0xA2F08C", Offset = "0xA2F08C", VA = "0xA2F08C")]
	private void AdjustHandsToDominance()
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0xA2F488", Offset = "0xA2F488", VA = "0xA2F488")]
	[IteratorStateMachine(typeof(<SetHandAnimator>d__12))]
	private IEnumerator SetHandAnimator(HVRHandAnimator handToSet, HVRHandAnimator handToReset)
	{
		return null;
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0xA2F554", Offset = "0xA2F554", VA = "0xA2F554")]
	public MenuHandsController()
	{
	}
}
[Token(Token = "0x2000191")]
public class HelmetActivator : MonoBehaviour
{
	[Token(Token = "0x6000881")]
	[Address(RVA = "0xA2F63C", Offset = "0xA2F63C", VA = "0xA2F63C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0xA2F6F4", Offset = "0xA2F6F4", VA = "0xA2F6F4")]
	public HelmetActivator()
	{
	}
}
[Token(Token = "0x2000192")]
public class IceFragmentController : MonoBehaviour
{
	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delayFromStartingToVanishInSeconds;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float timeOfVanishing;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeFromStart;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 initialPosition;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion initialRotation;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 initialScale;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer meshRenderer;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Rigidbody rigidbody;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Collider collider;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool destroyedPhysicsComponentAlready;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool areInitialParametersSet;

	[Token(Token = "0x6000883")]
	[Address(RVA = "0xA2F6FC", Offset = "0xA2F6FC", VA = "0xA2F6FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0xA2F7C4", Offset = "0xA2F7C4", VA = "0xA2F7C4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0xA2F924", Offset = "0xA2F924", VA = "0xA2F924")]
	private void Update()
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0xA2FBB8", Offset = "0xA2FBB8", VA = "0xA2FBB8")]
	public IceFragmentController()
	{
	}
}
[Token(Token = "0x2000193")]
public class InitGameInfo : MonoBehaviour
{
	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ProjectSettings _projectSettingsSetter;

	[Token(Token = "0x6000887")]
	[Address(RVA = "0xA2FBC0", Offset = "0xA2FBC0", VA = "0xA2FBC0")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0xA2FFD4", Offset = "0xA2FFD4", VA = "0xA2FFD4")]
	private bool WasArcadeBuildSetViaParams()
	{
		return default(bool);
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0xA3002C", Offset = "0xA3002C", VA = "0xA3002C")]
	public InitGameInfo()
	{
	}
}
[Token(Token = "0x2000194")]
public class IntervalFPSData
{
	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly int displayInterval;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float fpsSum;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int framesCount;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string description;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float averageFps;

	[Token(Token = "0x600088A")]
	[Address(RVA = "0xA30034", Offset = "0xA30034", VA = "0xA30034")]
	public IntervalFPSData(int displayInterval, string description)
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0xA30078", Offset = "0xA30078", VA = "0xA30078")]
	public void ResetFPSData()
	{
	}
}
[Token(Token = "0x2000195")]
public class LeaderboardsWindowWSController : WindowController
{
	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LeaderboardViewController leaderboardViewController;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LocalLeaderboard localLeaderboard;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private LocalLeaderboardView localLeaderboardView;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private VRParkLeaderboardViewController vRParkLeaderboardViewController;

	[Token(Token = "0x600088C")]
	[Address(RVA = "0xA30084", Offset = "0xA30084", VA = "0xA30084")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0xA302A8", Offset = "0xA302A8", VA = "0xA302A8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0xA30448", Offset = "0xA30448", VA = "0xA30448")]
	public void OnBack()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0xA3021C", Offset = "0xA3021C", VA = "0xA3021C")]
	private void ShowLeaderboards()
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0xA304C8", Offset = "0xA304C8", VA = "0xA304C8")]
	private void ShowArcadeLeaderboards()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0xA306E0", Offset = "0xA306E0", VA = "0xA306E0")]
	private void ShowLeaderboards(VRParkLeaderboardEntriesResponseDTO entries)
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0xA306FC", Offset = "0xA306FC", VA = "0xA306FC")]
	public LeaderboardsWindowWSController()
	{
	}
}
[Token(Token = "0x2000196")]
public class LeaderboardViewController : MonoBehaviour
{
	[Token(Token = "0x2000197")]
	[CompilerGenerated]
	private sealed class <SaveScore>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeaderboardViewController <>4__this;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isForcingScoreUpdate;

		[Token(Token = "0x17000121")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008A8")]
			[Address(RVA = "0xA31658", Offset = "0xA31658", VA = "0xA31658", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000122")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008AA")]
			[Address(RVA = "0xA316A0", Offset = "0xA316A0", VA = "0xA316A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xA30ADC", Offset = "0xA30ADC", VA = "0xA30ADC")]
		[DebuggerHidden]
		public <SaveScore>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xA315CC", Offset = "0xA315CC", VA = "0xA315CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xA315D0", Offset = "0xA315D0", VA = "0xA315D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xA31660", Offset = "0xA31660", VA = "0xA31660", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000198")]
	[CompilerGenerated]
	private sealed class <SaveScore>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeaderboardViewController <>4__this;

		[Token(Token = "0x17000123")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008AE")]
			[Address(RVA = "0xA31704", Offset = "0xA31704", VA = "0xA31704", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008B0")]
			[Address(RVA = "0xA3174C", Offset = "0xA3174C", VA = "0xA3174C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0xA30B04", Offset = "0xA30B04", VA = "0xA30B04")]
		[DebuggerHidden]
		public <SaveScore>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xA316A8", Offset = "0xA316A8", VA = "0xA316A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xA316AC", Offset = "0xA316AC", VA = "0xA316AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xA3170C", Offset = "0xA3170C", VA = "0xA3170C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000199")]
	[CompilerGenerated]
	private sealed class <UpdateLeaderboard>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeaderboardViewController <>4__this;

		[Token(Token = "0x17000125")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008B4")]
			[Address(RVA = "0xA31804", Offset = "0xA31804", VA = "0xA31804", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008B6")]
			[Address(RVA = "0xA3184C", Offset = "0xA3184C", VA = "0xA3184C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xA30B2C", Offset = "0xA30B2C", VA = "0xA30B2C")]
		[DebuggerHidden]
		public <UpdateLeaderboard>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xA31754", Offset = "0xA31754", VA = "0xA31754", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xA31758", Offset = "0xA31758", VA = "0xA31758", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xA3180C", Offset = "0xA3180C", VA = "0xA3180C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamLeaderboardsController steamLeaderboardsController;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OculusLeaderboardsController oculusLeaderboardsController;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayerStatistics playerStatistics;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EntryView[] GlobalTop;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public EntryView[] PlayerAround;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isTournamentLeaderbord;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TournamentTopPlayerSpot[] GlobalTopTournament;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TournamentTopPlayerSpot[] PlayerAroundTournament;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject GlobalTopLeaderboard;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject PlayerAroundLeaderboard;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject loadingIndicator;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject noTournamentLeaderboardIndicator;

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool IsLeaderboardFound;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int entryCount;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform Top10LeaderboardPosition;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private ViveportInGameLeaderboardsController viveportLeaderboardsController;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool isLeaderboardLoading;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool shouldDisplayPlayerAroundLeaderboard;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
	private bool getRequestingGlobalTop;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
	private bool getRequesingPlayerAround;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 globalTopLeaderboardInitialLocalPosition;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private string leaderboardPlayerName;

	[Token(Token = "0x17000120")]
	public bool IsLeaderboardLoading
	{
		[Token(Token = "0x6000893")]
		[Address(RVA = "0xA30704", Offset = "0xA30704", VA = "0xA30704")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000894")]
		[Address(RVA = "0xA3070C", Offset = "0xA3070C", VA = "0xA3070C")]
		set
		{
		}
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0xA308EC", Offset = "0xA308EC", VA = "0xA308EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0xA30984", Offset = "0xA30984", VA = "0xA30984")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0xA30990", Offset = "0xA30990", VA = "0xA30990")]
	public void SetLeaderboardEntry(bool isForcingScoreUpdate)
	{
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0xA30A3C", Offset = "0xA30A3C", VA = "0xA30A3C")]
	public void SetLeaderboardEntry(int score, bool isForcingScoreUpdate)
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0xA30AD4", Offset = "0xA30AD4", VA = "0xA30AD4")]
	private void SetLeaderboardPlayerName(string leaderboardPlayerName)
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0xA309B4", Offset = "0xA309B4", VA = "0xA309B4")]
	[IteratorStateMachine(typeof(<SaveScore>d__30))]
	private IEnumerator SaveScore(bool isForcingScoreUpdate)
	{
		return null;
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0xA30A60", Offset = "0xA30A60", VA = "0xA30A60")]
	[IteratorStateMachine(typeof(<SaveScore>d__31))]
	private IEnumerator SaveScore(int score, bool isForcingScoreUpdate)
	{
		return null;
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0xA3066C", Offset = "0xA3066C", VA = "0xA3066C")]
	[IteratorStateMachine(typeof(<UpdateLeaderboard>d__32))]
	public IEnumerator UpdateLeaderboard()
	{
		return null;
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0xA30B54", Offset = "0xA30B54", VA = "0xA30B54")]
	public void UpdateLeaderboardTable(List<LeaderboardEntry> leaderboardEntries, LeaderboardRequestState leaderboardType)
	{
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0xA313D4", Offset = "0xA313D4", VA = "0xA313D4")]
	private AWSTournamentLeaderboardEntryDTO ConvertToTournamentEntry(LeaderboardEntry entry)
	{
		return null;
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0xA31574", Offset = "0xA31574", VA = "0xA31574")]
	private void TryDisplayingLeaderboard()
	{
	}

	[Token(Token = "0x60008A0")]
	[Address(RVA = "0xA315B4", Offset = "0xA315B4", VA = "0xA315B4")]
	public void NoPlayerEntryInLeaderboard()
	{
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0xA31594", Offset = "0xA31594", VA = "0xA31594")]
	private bool ShouldDisplayLeaderboard()
	{
		return default(bool);
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0xA313B0", Offset = "0xA313B0", VA = "0xA313B0")]
	private bool IsLocalPlayersEntry(LeaderboardEntry entry)
	{
		return default(bool);
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0xA30934", Offset = "0xA30934", VA = "0xA30934")]
	private static string GetLeaderboardPlayerName()
	{
		return null;
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0xA315BC", Offset = "0xA315BC", VA = "0xA315BC")]
	public LeaderboardViewController()
	{
	}
}
[Token(Token = "0x200019B")]
public class OculusLeaderboardsController : MonoBehaviour
{
	[Token(Token = "0x400088B")]
	private const int userIsNotRankedErrorCode = 12074;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LeaderboardViewController leaderboardViewController;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LeaderboardNameGetter leaderboardNameGetter;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string leaderboardAPIName;

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0xA3190C", Offset = "0xA3190C", VA = "0xA3190C")]
	public OculusLeaderboardsController()
	{
	}
}
[Token(Token = "0x200019C")]
public class SteamLeaderboardsController : MonoBehaviour
{
	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LeaderboardViewController leaderboardViewController;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LeaderboardNameGetter leaderboardNameGetter;

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0xA31914", Offset = "0xA31914", VA = "0xA31914")]
	public SteamLeaderboardsController()
	{
	}
}
[Token(Token = "0x200019D")]
public class UpdateLeaderboards : MonoBehaviour
{
	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LeaderboardViewController leaderboardViewController;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LocalLeaderboard localLeaderboard;

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0xA3191C", Offset = "0xA3191C", VA = "0xA3191C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0xA31A14", Offset = "0xA31A14", VA = "0xA31A14")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0xA31B0C", Offset = "0xA31B0C", VA = "0xA31B0C")]
	private void SaveResult()
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0xA31C10", Offset = "0xA31C10", VA = "0xA31C10")]
	private void SaveToArcadeLeaderboards()
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0xA31D7C", Offset = "0xA31D7C", VA = "0xA31D7C")]
	public UpdateLeaderboards()
	{
	}
}
[Token(Token = "0x200019E")]
public class LeaderboardsLocalViveportSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SteamLeaderboardsController leaderboardsController;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LeaderboardViewController leaderboardViewController;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ViveportInGameLeaderboardsController vivePortLeaderboardsController;

	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private LocalLeaderboard localLeaderboard;

	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private LocalLeaderboardView localLeaderboardView;

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0xA31D84", Offset = "0xA31D84", VA = "0xA31D84")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0xA31EA0", Offset = "0xA31EA0", VA = "0xA31EA0")]
	public LeaderboardsLocalViveportSwitcher()
	{
	}
}
[Token(Token = "0x200019F")]
public class ViveportInGameLeaderboardsController : MonoBehaviour
{
	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LeaderboardNameGetter leaderboardNameGetter;

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0xA31EA8", Offset = "0xA31EA8", VA = "0xA31EA8")]
	public ViveportInGameLeaderboardsController()
	{
	}
}
[Token(Token = "0x20001A0")]
public class VRParkLeaderboardTester : MonoBehaviour
{
	[Token(Token = "0x60008C5")]
	[Address(RVA = "0xA31EB0", Offset = "0xA31EB0", VA = "0xA31EB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0xA323BC", Offset = "0xA323BC", VA = "0xA323BC")]
	public VRParkLeaderboardTester()
	{
	}
}
[Token(Token = "0x20001A1")]
public class LightAnimation : MonoBehaviour
{
	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve lightIntenseCurve;

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_DefaultIntensity;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool disableOnAnimEnd;

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool m_LoopAnimation;

	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float lightIntenseAnimTime;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float delay;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light m_Light;

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0xA323C4", Offset = "0xA323C4", VA = "0xA323C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0xA32478", Offset = "0xA32478", VA = "0xA32478")]
	private void Activate()
	{
	}

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0xA32498", Offset = "0xA32498", VA = "0xA32498")]
	private void Update()
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0xA3264C", Offset = "0xA3264C", VA = "0xA3264C")]
	public LightAnimation()
	{
	}
}
[Token(Token = "0x20001A2")]
public class LightLerp : MonoBehaviour
{
	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lerpRadius;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float lerpSpeed;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float changingLightValue;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timer;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float minimumLight;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float maximumLight;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float startIntensity;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 minimum;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 maximum;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 startPositions;

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0xA32654", Offset = "0xA32654", VA = "0xA32654")]
	private void Start()
	{
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0xA32780", Offset = "0xA32780", VA = "0xA32780")]
	private void Update()
	{
	}

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0xA32700", Offset = "0xA32700", VA = "0xA32700")]
	private void randomNewPositions()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0xA3294C", Offset = "0xA3294C", VA = "0xA3294C")]
	public LightLerp()
	{
	}
}
[Token(Token = "0x20001A3")]
public class LoadedSceneLogger : MonoBehaviour
{
	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool hasBeenInitialized;

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0xA3296C", Offset = "0xA3296C", VA = "0xA3296C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0xA32AD0", Offset = "0xA32AD0", VA = "0xA32AD0")]
	private void LogLoadedScene(Scene arg0, LoadSceneMode arg1)
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0xA32B88", Offset = "0xA32B88", VA = "0xA32B88")]
	public LoadedSceneLogger()
	{
	}
}
[Token(Token = "0x20001A4")]
public static class ChineseTranslator
{
	[Token(Token = "0x60008D2")]
	[Address(RVA = "0xA32B90", Offset = "0xA32B90", VA = "0xA32B90")]
	public static void Translate()
	{
	}
}
[Token(Token = "0x20001A5")]
public static class EnglishTranslator
{
	[Token(Token = "0x60008D3")]
	[Address(RVA = "0xA35240", Offset = "0xA35240", VA = "0xA35240")]
	public static void Translate()
	{
	}
}
[Token(Token = "0x20001A6")]
public static class KoreanTranslator
{
	[Token(Token = "0x60008D4")]
	[Address(RVA = "0xA3794C", Offset = "0xA3794C", VA = "0xA3794C")]
	public static void Translate()
	{
	}
}
[Token(Token = "0x20001A7")]
public class LanguageChanger : LanguageChangerCore
{
	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Translation translationEn;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Translation translationKR;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Translation translationZh;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Translation translationJp;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TranslationCore _translationCoreEn;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TranslationCore _translationCoreKR;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TranslationCore _translationCoreZh;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private TranslationCore _translationCoreJp;

	[Token(Token = "0x17000127")]
	protected override TranslationCore translationCoreEn
	{
		[Token(Token = "0x60008D5")]
		[Address(RVA = "0xA39FE8", Offset = "0xA39FE8", VA = "0xA39FE8", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000128")]
	[SerializeField]
	protected override TranslationCore translationCoreKr
	{
		[Token(Token = "0x60008D6")]
		[Address(RVA = "0xA39FF0", Offset = "0xA39FF0", VA = "0xA39FF0", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000129")]
	[SerializeField]
	protected override TranslationCore translationCoreZh
	{
		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xA39FF8", Offset = "0xA39FF8", VA = "0xA39FF8", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700012A")]
	protected override TranslationCore translationCoreJp
	{
		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xA3A000", Offset = "0xA3A000", VA = "0xA3A000", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0xA3A008", Offset = "0xA3A008", VA = "0xA3A008", Slot = "8")]
	public override void ChangeLanguage(string lang)
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0xA3A190", Offset = "0xA3A190", VA = "0xA3A190")]
	protected void Translate(TranslationCore coreTranslation, Translation translation)
	{
	}

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0xA3A4E0", Offset = "0xA3A4E0", VA = "0xA3A4E0")]
	public LanguageChanger()
	{
	}
}
[Token(Token = "0x20001A8")]
public class LocalizedStringsPP : MonoBehaviour
{
	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string lbFarm;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string lbForgottenTown;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string lbPrison;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string lbGoldMine;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string lbTeleportation;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string lbTeleportationTip;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string lbChangeWeapon;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string lbGrabWeapon;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string lbShoot;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string lbSkills;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string lbSkillPoints;

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string lbCooldown;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string lbLevelNeededToUpgrade;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string btReset;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string btLearn;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string lbMaxLevel;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string txtHigherLevelNeeded;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string txtSkillPointNeeded;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string txtPreviousSkillRequired;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static string txtMaxLevelReached;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static string txtYouHaveToLearnIt;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static string lbSkillsSelectionTitle;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static string lbHowToUseSkillsTitle;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static string lbHowToUseSkillsDescription;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static string lbYouNeedMoreSkillPoints;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public static string lbDefaultSkill;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public static string lbDefaultItem;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public static string lbMenu;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static string lbFarmHealth;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static string lbForgottenTownHealth;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static string lbYourFarmHasFallen;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public static string lbYourForgottenTownHasFallen;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public static string lbYouWereKilledByZombie;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public static string lbPlayAreaWarningDescription;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public static string lbEvaluationWarning;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public static string txtTouchTrackingText;

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0xA3A4E8", Offset = "0xA3A4E8", VA = "0xA3A4E8")]
	public LocalizedStringsPP()
	{
	}
}
[Token(Token = "0x20001A9")]
public class ArcadeOwnerSettingsLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Settings;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text VRParkVersion;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text OldLeaderboards;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Server;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Global;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text Local;

	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text LocalInactive;

	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text Setup;

	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text Language;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text UseDefaultServer;

	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text EU;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text EUDisabled;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text Asia;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text AsiaDisabled;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text US;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text USDisabled;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text Back;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text OtherSettings;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text EnableBlood;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Text AutoJoin;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Text AutoJoinShaded;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Text AutoJoinMessage;

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0xA3A4F0", Offset = "0xA3A4F0", VA = "0xA3A4F0", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0xA3A93C", Offset = "0xA3A93C", VA = "0xA3A93C")]
	public ArcadeOwnerSettingsLocalizer()
	{
	}
}
[Token(Token = "0x20001AA")]
public class AskForConfirmationLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text AreYouSureYouWantToQuit;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Yes;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text No;

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0xA3A944", Offset = "0xA3A944", VA = "0xA3A944", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0xA3A9F0", Offset = "0xA3A9F0", VA = "0xA3A9F0")]
	public AskForConfirmationLocalizer()
	{
	}
}
[Token(Token = "0x20001AB")]
public class AskForRestartLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text AreYouSureYouWantToRestart;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Yes;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text No;

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0xA3A9F8", Offset = "0xA3A9F8", VA = "0xA3A9F8", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0xA3AAA4", Offset = "0xA3AAA4", VA = "0xA3AAA4")]
	public AskForRestartLocalizer()
	{
	}
}
[Token(Token = "0x20001AC")]
public class ChangelogInitilizer : MonoBehaviour
{
	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ChangelogController changelogController;

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0xA3AAAC", Offset = "0xA3AAAC", VA = "0xA3AAAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0xA3AAB0", Offset = "0xA3AAB0", VA = "0xA3AAB0")]
	public ChangelogInitilizer()
	{
	}
}
[Token(Token = "0x20001AD")]
public class ChangelogWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Title;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Close;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Next;

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0xA3AAB8", Offset = "0xA3AAB8", VA = "0xA3AAB8", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0xA3AB64", Offset = "0xA3AB64", VA = "0xA3AB64")]
	public ChangelogWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001AE")]
public class ChoosePlayerNameLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text ChooseName;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text ToAppearInPublicLeaderboards;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text YourName;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Generate;

	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Back;

	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text Continue;

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0xA3AB6C", Offset = "0xA3AB6C", VA = "0xA3AB6C", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0xA3ACB4", Offset = "0xA3ACB4", VA = "0xA3ACB4")]
	public ChoosePlayerNameLocalizer()
	{
	}
}
[Token(Token = "0x20001AF")]
public class ClothShopLozalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text InactiveShopText;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text BuyButtonText;

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text EquipButtonText;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text HatCattegoryText;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text TorsoCattegoryText;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text LegsCattegoryText;

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0xA3ACBC", Offset = "0xA3ACBC", VA = "0xA3ACBC", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0xA3ADD4", Offset = "0xA3ADD4", VA = "0xA3ADD4")]
	public ClothShopLozalizer()
	{
	}
}
[Token(Token = "0x20001B0")]
public class ConfirmationQuitWindowTournamentLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text ConfirmationQuitText;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Yes;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text No;

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0xA3ADDC", Offset = "0xA3ADDC", VA = "0xA3ADDC", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0xA3AE88", Offset = "0xA3AE88", VA = "0xA3AE88")]
	public ConfirmationQuitWindowTournamentLocalizer()
	{
	}
}
[Token(Token = "0x20001B1")]
public class ConnectingLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Connecting;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text NoInternet;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Back;

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0xA3AE90", Offset = "0xA3AE90", VA = "0xA3AE90", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0xA3AF3C", Offset = "0xA3AF3C", VA = "0xA3AF3C")]
	public ConnectingLocalizer()
	{
	}
}
[Token(Token = "0x20001B2")]
public class ControllerTrackingWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Title;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Text;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Continue;

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0xA3AF44", Offset = "0xA3AF44", VA = "0xA3AF44", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0xA3B004", Offset = "0xA3B004", VA = "0xA3B004")]
	public ControllerTrackingWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001B3")]
public class ControlsLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Mandatory to fill in every control schema")]
	private Text teleportation;

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text teleportationTip;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text Multiplayer1;

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Text pauseRight;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text shoot;

	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Text changeWeapon;

	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Text grabWeaponLeft;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Text grabWeaponRight;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Text speakOn;

	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Additional, for controls schemas with more labels")]
	[SerializeField]
	private Text Gestures2;

	[Token(Token = "0x4000916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Text Multiplayer3;

	[Token(Token = "0x4000917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Text Multiplayer4;

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Text SpeakOn2;

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0xA3B00C", Offset = "0xA3B00C", VA = "0xA3B00C", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0xA3B2F0", Offset = "0xA3B2F0", VA = "0xA3B2F0")]
	public ControlsLocalizer()
	{
	}
}
[Token(Token = "0x20001B4")]
public class ControlsWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isFirstTimeWindow;

	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Controls;

	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text ShootAtToTeleport;

	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text KoreanShootAtToTeleport;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Button;

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0xA3B2F8", Offset = "0xA3B2F8", VA = "0xA3B2F8", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0xA3B504", Offset = "0xA3B504", VA = "0xA3B504")]
	public ControlsWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001B5")]
public class CreateGameLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text SelectMap;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text CoOp;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text Farm;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Text ForgottenTown;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text prison;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Text goldMine;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Text PvP;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Text Back;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Text Create;

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0xA3B50C", Offset = "0xA3B50C", VA = "0xA3B50C", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0xA3B6A4", Offset = "0xA3B6A4", VA = "0xA3B6A4")]
	public CreateGameLocalizer()
	{
	}
}
[Token(Token = "0x20001B6")]
public class CreatingWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Back;

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0xA3B6AC", Offset = "0xA3B6AC", VA = "0xA3B6AC", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0xA3B710", Offset = "0xA3B710", VA = "0xA3B710")]
	public CreatingWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001B7")]
public class DisconnectionWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text ProblemWithConnection;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Continue;

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0xA3B718", Offset = "0xA3B718", VA = "0xA3B718", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0xA3B7A0", Offset = "0xA3B7A0", VA = "0xA3B7A0")]
	public DisconnectionWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001B8")]
public class EarlyAccessWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text EarlyAccessText;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Continue;

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0xA3B7A8", Offset = "0xA3B7A8", VA = "0xA3B7A8", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0xA3B830", Offset = "0xA3B830", VA = "0xA3B830")]
	public EarlyAccessWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001B9")]
public class EvaluationVersionWarningLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Error;

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0xA3B838", Offset = "0xA3B838", VA = "0xA3B838", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0xA3B89C", Offset = "0xA3B89C", VA = "0xA3B89C")]
	public EvaluationVersionWarningLocalizer()
	{
	}
}
[Token(Token = "0x20001BA")]
public class GameOverMenuLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text GameOver;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text YourTownHasFallen;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Wave;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Points;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Gold;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text Leaderboards;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text Settings;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text Quit;

	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text Restart;

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0xA3B8A4", Offset = "0xA3B8A4", VA = "0xA3B8A4", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0xA3BAC0", Offset = "0xA3BAC0", VA = "0xA3BAC0")]
	public GameOverMenuLocalizer()
	{
	}
}
[Token(Token = "0x20001BB")]
public class ItemsDescriptionLocalizer : MonoBehaviour
{
	[Token(Token = "0x6000901")]
	[Address(RVA = "0xA3BAC8", Offset = "0xA3BAC8", VA = "0xA3BAC8")]
	public static string GetItemDescription(EquipmentItemKey itemKey)
	{
		return null;
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0xA3BB10", Offset = "0xA3BB10", VA = "0xA3BB10")]
	public static string GetItemName(EquipmentItemKey itemKey)
	{
		return null;
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0xA3BB58", Offset = "0xA3BB58", VA = "0xA3BB58")]
	public ItemsDescriptionLocalizer()
	{
	}
}
[Token(Token = "0x20001BC")]
public class LeaderboardsWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text Leaderboards;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text Loading;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text BestArchers;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Text VRParkBestArchers;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text VRParkBestArchersName;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Text VRParkBestArchersWave;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Text VRParkBestArchersScore;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Text CurrentRivals;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Text VRParkCurrentRivals;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Text VRParkCurrentRivalsName;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Text VRParkCurrentRivalsWave;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Text VRParkCurrentRivalsScore;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Text BackMenu;

	[Token(Token = "0x6000904")]
	[Address(RVA = "0xA3BB60", Offset = "0xA3BB60", VA = "0xA3BB60", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0xA3BD74", Offset = "0xA3BD74", VA = "0xA3BD74")]
	public LeaderboardsWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001BD")]
public class LobbyWithoutTournamentLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Lobby;

	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Refresh;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Name;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Map;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Players;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text State;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text Back;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text Create;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text RefreshingServers;

	[Token(Token = "0x6000906")]
	[Address(RVA = "0xA3BD7C", Offset = "0xA3BD7C", VA = "0xA3BD7C", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0xA3BF00", Offset = "0xA3BF00", VA = "0xA3BF00")]
	public LobbyWithoutTournamentLocalizer()
	{
	}
}
[Token(Token = "0x20001BE")]
public class LobbyWithTournamentLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Connecting;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text ConnectingBack;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text LobbyTitle;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Refresh;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text RoomName;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text RoomMap;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text RoomPlayers;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text RoomState;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text Refreshing;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text LobbyBack;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text Create;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text TournamentTitle;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text DisclaimerTitle;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text Disclaimer;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text Agreement;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text MustAgree;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text DisclaimerBack;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text Continue;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text TournamentBack;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Text Join;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Text JoinOutline;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Text EnrollmentBack;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Text TopPlayersLastTournament;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Text BestArchers;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Text BestArchersLastTournament;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Text BestArchersRank;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Text BestArchersName;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Text BestArchersStage;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Text BestArchersKills;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Text BestArchersDeaths;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Text BestArchersStatus;

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Text YourRivals;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Text YourRivalsLastTournament;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Text YourRivalsRank;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Text YourRivalsName;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Text YourRivalsStage;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Text YourRivalsKills;

	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Text YourRivalsDeaths;

	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Text YourRivalsStatus;

	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Text LoadingLeaderboard;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Text NoResultsYet;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Text LoadingError;

	[Token(Token = "0x6000908")]
	[Address(RVA = "0xA3BF08", Offset = "0xA3BF08", VA = "0xA3BF08", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0xA3C628", Offset = "0xA3C628", VA = "0xA3C628")]
	public LobbyWithTournamentLocalizer()
	{
	}
}
[Token(Token = "0x20001BF")]
public class MainMenuInactiveLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text menuInactiveText;

	[Token(Token = "0x600090A")]
	[Address(RVA = "0xA3D630", Offset = "0xA3D630", VA = "0xA3D630", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0xA3D694", Offset = "0xA3D694", VA = "0xA3D694")]
	public MainMenuInactiveLocalizer()
	{
	}
}
[Token(Token = "0x20001C0")]
public class MainMenuSettingsLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Settings;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Controls;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Back;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text SetPlayerName;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text ArcadeGameplay;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text ArcadeDominantHand;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text ArcadeAudio;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text ArcadeMusic;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text ArcadeMultiplayer;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text ArcadeVoiceChat;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text ArcadeAlwaysSpeak;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text ArcadePrivacy;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text ArcadeLimitUserTracking;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text ArcadeOpenDataPrivacyPage;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text ArcadeOwnerSettings;

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Space(10f)]
	public Text Gameplay;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text DominantHand;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text WeaponHandOffset;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text Vibrations;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Text SnapTurn;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Text Audio;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Text Music;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Text Sounds;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Text Multiplayer;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Text VoiceChat;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Text AlwaysSpeak;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Text Privacy;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Text LimitUserTracking;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Text OpenDataPrivacyPage;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Text Language;

	[Token(Token = "0x600090C")]
	[Address(RVA = "0xA3D69C", Offset = "0xA3D69C", VA = "0xA3D69C", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0xA3DC70", Offset = "0xA3DC70", VA = "0xA3DC70")]
	public MainMenuSettingsLocalizer()
	{
	}
}
[Token(Token = "0x20001C1")]
public class MainWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text SinglePlayerVive;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Multiplayer;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Settings;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text SteamInitError;

	[Token(Token = "0x600090E")]
	[Address(RVA = "0xA3DC78", Offset = "0xA3DC78", VA = "0xA3DC78", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0xA3DD48", Offset = "0xA3DD48", VA = "0xA3DD48")]
	public MainWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001C2")]
public class MapVotingLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text ChooseNextMap;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text CoOp;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text PvP;

	[Token(Token = "0x6000910")]
	[Address(RVA = "0xA3DD50", Offset = "0xA3DD50", VA = "0xA3DD50", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0xA3DDFC", Offset = "0xA3DDFC", VA = "0xA3DDFC")]
	public MapVotingLocalizer()
	{
	}
}
[Token(Token = "0x20001C3")]
public class MatchSettingsLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text MatchSettings;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text RoomType;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Private;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Weather;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Rain;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text Back;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text Create;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text HowToUseCodeToEnter;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text Password;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text Warning;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text PrivateCreate;

	[Token(Token = "0x6000912")]
	[Address(RVA = "0xA3DE04", Offset = "0xA3DE04", VA = "0xA3DE04", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0xA3E000", Offset = "0xA3E000", VA = "0xA3E000")]
	public MatchSettingsLocalizer()
	{
	}
}
[Token(Token = "0x20001C4")]
public class MiniScoreboardLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text timeLeftLabel;

	[Token(Token = "0x6000914")]
	[Address(RVA = "0xA3E008", Offset = "0xA3E008", VA = "0xA3E008", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0xA3E06C", Offset = "0xA3E06C", VA = "0xA3E06C")]
	public MiniScoreboardLocalizer()
	{
	}
}
[Token(Token = "0x20001C5")]
public class NoInternetConnectionWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text NoInternetConnection;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Continue;

	[Token(Token = "0x6000916")]
	[Address(RVA = "0xA3E074", Offset = "0xA3E074", VA = "0xA3E074", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0xA3E0FC", Offset = "0xA3E0FC", VA = "0xA3E0FC")]
	public NoInternetConnectionWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001C6")]
public class OculusInitErrorMessageLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Message;

	[Token(Token = "0x6000918")]
	[Address(RVA = "0xA3E104", Offset = "0xA3E104", VA = "0xA3E104", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0xA3E168", Offset = "0xA3E168", VA = "0xA3E168")]
	public OculusInitErrorMessageLocalizer()
	{
	}
}
[Token(Token = "0x20001C7")]
public class PauseMenuLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Pause;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Settings;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Wave;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Points;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Quit;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text Continue;

	[Token(Token = "0x600091A")]
	[Address(RVA = "0xA3E170", Offset = "0xA3E170", VA = "0xA3E170", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0xA3E2CC", Offset = "0xA3E2CC", VA = "0xA3E2CC")]
	public PauseMenuLocalizer()
	{
	}
}
[Token(Token = "0x20001C8")]
public class PlayAreaWarningLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Title;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Description;

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text ContinueText;

	[Token(Token = "0x600091C")]
	[Address(RVA = "0xA3E2D4", Offset = "0xA3E2D4", VA = "0xA3E2D4", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0xA3E394", Offset = "0xA3E394", VA = "0xA3E394")]
	public PlayAreaWarningLocalizer()
	{
	}
}
[Token(Token = "0x20001C9")]
public class PlayerTitlesLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Name;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Score;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Level;

	[Token(Token = "0x600091E")]
	[Address(RVA = "0xA3E39C", Offset = "0xA3E39C", VA = "0xA3E39C", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0xA3E448", Offset = "0xA3E448", VA = "0xA3E448")]
	public PlayerTitlesLocalizer()
	{
	}
}
[Token(Token = "0x20001CA")]
public class PleaseLogintoOculusLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Text;

	[Token(Token = "0x6000920")]
	[Address(RVA = "0xA3E450", Offset = "0xA3E450", VA = "0xA3E450", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0xA3E4B4", Offset = "0xA3E4B4", VA = "0xA3E4B4")]
	public PleaseLogintoOculusLocalizer()
	{
	}
}
[Token(Token = "0x20001CB")]
public class PolicyOpenedInBrowserLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text OpenedInBrowser;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Close;

	[Token(Token = "0x6000922")]
	[Address(RVA = "0xA3E4BC", Offset = "0xA3E4BC", VA = "0xA3E4BC", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0xA3E544", Offset = "0xA3E544", VA = "0xA3E544")]
	public PolicyOpenedInBrowserLocalizer()
	{
	}
}
[Token(Token = "0x20001CC")]
public class PrivacyLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text PrivacyPolicy;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text OpenPrivacy;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Continue;

	[Token(Token = "0x6000924")]
	[Address(RVA = "0xA3E54C", Offset = "0xA3E54C", VA = "0xA3E54C", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0xA3E5F8", Offset = "0xA3E5F8", VA = "0xA3E5F8")]
	public PrivacyLocalizer()
	{
	}
}
[Token(Token = "0x20001CD")]
public class ProvideServerCodeLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text HowToUseCodeToEnter;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text ServerCode;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text WarningText;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Back;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Continue;

	[Token(Token = "0x6000926")]
	[Address(RVA = "0xA3E600", Offset = "0xA3E600", VA = "0xA3E600", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0xA3E724", Offset = "0xA3E724", VA = "0xA3E724")]
	public ProvideServerCodeLocalizer()
	{
	}
}
[Token(Token = "0x20001CE")]
public class RegionListLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Regions;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text LoadingRegions;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text NoInternetMessage;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Region;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text USARegion;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text EuropeRegion;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text AsiaRegion;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text Players;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text Ping;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text ConnectRegion1;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text ConnectRegion2;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text ConnectRegion3;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text Back;

	[Token(Token = "0x6000928")]
	[Address(RVA = "0xA3E72C", Offset = "0xA3E72C", VA = "0xA3E72C", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0xA3E940", Offset = "0xA3E940", VA = "0xA3E940")]
	public RegionListLocalizer()
	{
	}
}
[Token(Token = "0x20001CF")]
public class ScoreboardLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Settings;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Name;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Level;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Score;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text WaitingForHost;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text YouAreKilled;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text Quit;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text Start;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text Continue;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text EvaluationVersionWarning;

	[Token(Token = "0x600092A")]
	[Address(RVA = "0xA3E948", Offset = "0xA3E948", VA = "0xA3E948", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600092B")]
	[Address(RVA = "0xA3EB9C", Offset = "0xA3EB9C", VA = "0xA3EB9C")]
	public ScoreboardLocalizer()
	{
	}
}
[Token(Token = "0x20001D0")]
public class ServerLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Join;

	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text RoomName;

	[Token(Token = "0x600092C")]
	[Address(RVA = "0xA3EBA4", Offset = "0xA3EBA4", VA = "0xA3EBA4", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0xA3ED04", Offset = "0xA3ED04", VA = "0xA3ED04")]
	public ServerLocalizer()
	{
	}
}
[Token(Token = "0x20001D1")]
public class SettingsWindowMultiplayerLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Settings;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Controls;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Gameplay;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text HandOffset;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Vibration;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text DominantHand;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text GoBackToMainMenu;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text Audio;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text Music;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text Sounds;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text Multiplayer;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text VoiceChat;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text AlwaysSpeak;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text SetPlayerName;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text ArcadeGameplay;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text ArcadeDominantHand;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text ArcadeGoBackToMainMenu;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text ArcadeAudio;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text ArcadeMusic;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Text ArcadeMultiplayer;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Text ArcadeVoiceChat;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Text ArcadeAlwaysSpeak;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Text Back;

	[Token(Token = "0x600092E")]
	[Address(RVA = "0xA3ED0C", Offset = "0xA3ED0C", VA = "0xA3ED0C", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0xA3F0CC", Offset = "0xA3F0CC", VA = "0xA3F0CC")]
	public SettingsWindowMultiplayerLocalizer()
	{
	}
}
[Token(Token = "0x20001D2")]
public class SettingsWindowSinglePlayerLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Settings;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Controls;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text SetPlayerName;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Gameplay;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text ArcadeGameplay;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text DominantHand;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text ArcadeDominantHand;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text GoBackToMainMenu;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text ArcadeGoBackToMainMenu;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text HandOffset;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text Vibration;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text Audio;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text ArcadeAudio;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text Music;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text ArcadeMusic;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text Sounds;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text Back;

	[Token(Token = "0x6000930")]
	[Address(RVA = "0xA3F0D4", Offset = "0xA3F0D4", VA = "0xA3F0D4", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0xA3F3BC", Offset = "0xA3F3BC", VA = "0xA3F3BC")]
	public SettingsWindowSinglePlayerLocalizer()
	{
	}
}
[Token(Token = "0x20001D3")]
public class SettingsWindowTournamentLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Settings;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Controls;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Gameplay;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text ArrowHandOffset;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text DominantHand;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text Audio;

	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text Music;

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text Sounds;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text Multiplayer;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text VoiceChat;

	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text AlwaysSpeak;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text VRParkVersion;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text ArcadeGameplay;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text ArcadeDominantHand;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text ArcadeAudio;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text ArcadeMusic;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text ArcadeMultiplayer;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text ArcadeVoiceChat;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text ArcadeAlwaysSpeak;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Text Back;

	[Token(Token = "0x6000932")]
	[Address(RVA = "0xA3F3C4", Offset = "0xA3F3C4", VA = "0xA3F3C4", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0xA3F6F4", Offset = "0xA3F6F4", VA = "0xA3F6F4")]
	public SettingsWindowTournamentLocalizer()
	{
	}
}
[Token(Token = "0x20001D4")]
public class SetupOfLocalServerLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Title;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Create;

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Join;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Back;

	[Token(Token = "0x6000934")]
	[Address(RVA = "0xA3F6FC", Offset = "0xA3F6FC", VA = "0xA3F6FC", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0xA3F7CC", Offset = "0xA3F7CC", VA = "0xA3F7CC")]
	public SetupOfLocalServerLocalizer()
	{
	}
}
[Token(Token = "0x20001D5")]
public class ShopListButtonLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text ownedText;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text appliedText;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text currencyText;

	[Token(Token = "0x6000936")]
	[Address(RVA = "0xA3F7D4", Offset = "0xA3F7D4", VA = "0xA3F7D4", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0xA3F880", Offset = "0xA3F880", VA = "0xA3F880")]
	public ShopListButtonLocalizer()
	{
	}
}
[Token(Token = "0x20001D6")]
public class ShopLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Shop;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Use;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Buy;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Bought;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Ok;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text ComingSoon;

	[Token(Token = "0x6000938")]
	[Address(RVA = "0xA3F888", Offset = "0xA3F888", VA = "0xA3F888", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0xA3F9C4", Offset = "0xA3F9C4", VA = "0xA3F9C4")]
	public ShopLocalizer()
	{
	}
}
[Token(Token = "0x20001D7")]
public class SinglePlayerMapChoiceWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text ChooseLocation;

	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text Farm;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text ForgottenTown;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Text prison;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text goldMine;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Text Back;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Text Start;

	[Token(Token = "0x600093A")]
	[Address(RVA = "0xA3F9CC", Offset = "0xA3F9CC", VA = "0xA3F9CC", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0xA3FB1C", Offset = "0xA3FB1C", VA = "0xA3FB1C")]
	public SinglePlayerMapChoiceWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001D8")]
public class SingleplayerModeMenuLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text ChooseMode;

	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Arcade;

	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Back;

	[Token(Token = "0x600093C")]
	[Address(RVA = "0xA3FB24", Offset = "0xA3FB24", VA = "0xA3FB24", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0xA3FBD0", Offset = "0xA3FBD0", VA = "0xA3FBD0")]
	public SingleplayerModeMenuLocalizer()
	{
	}
}
[Token(Token = "0x20001D9")]
public class SkillsCanvasLocalizer : MonoBehaviour
{
	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Menu;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Skills;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text SkillPoints;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Cooldown;

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text LevelNeededToUpgrade;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text Reset;

	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text Use;

	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text Learn;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text AreYouSure;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text Yes;

	[Token(Token = "0x4000A38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text No;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text UseSkillsTitle;

	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text HowToUseSkillsTitle;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text HowToUseSkillssDescription;

	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text YouNeedMoreSkillPoints;

	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text Ok;

	[Token(Token = "0x600093E")]
	[Address(RVA = "0xA3FBD8", Offset = "0xA3FBD8", VA = "0xA3FBD8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600093F")]
	[Address(RVA = "0xA3FE58", Offset = "0xA3FE58", VA = "0xA3FE58")]
	public SkillsCanvasLocalizer()
	{
	}
}
[Token(Token = "0x20001DA")]
public class SpellsDescriptionLocalizer : MonoBehaviour
{
	[Token(Token = "0x6000940")]
	[Address(RVA = "0xA3FE60", Offset = "0xA3FE60", VA = "0xA3FE60")]
	public static string GetSpellDescription(AbilityType spellType)
	{
		return null;
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0xA3FEA8", Offset = "0xA3FEA8", VA = "0xA3FEA8")]
	public static string GetSpellName(AbilityType spellType)
	{
		return null;
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0xA3FEF0", Offset = "0xA3FEF0", VA = "0xA3FEF0")]
	public SpellsDescriptionLocalizer()
	{
	}
}
[Token(Token = "0x20001DB")]
public class StartMenuLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text btStart;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text SettingsText;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text Leaderboards;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Text quitOculusQuest;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text quit;

	[Token(Token = "0x6000943")]
	[Address(RVA = "0xA3FEF8", Offset = "0xA3FEF8", VA = "0xA3FEF8", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0xA3FFEC", Offset = "0xA3FFEC", VA = "0xA3FFEC")]
	public StartMenuLocalizer()
	{
	}
}
[Token(Token = "0x20001DC")]
public class SteamInitErrorMessageLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text SteamInitErrorMessage;

	[Token(Token = "0x6000945")]
	[Address(RVA = "0xA3FFF4", Offset = "0xA3FFF4", VA = "0xA3FFF4", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0xA40058", Offset = "0xA40058", VA = "0xA40058")]
	public SteamInitErrorMessageLocalizer()
	{
	}
}
[Token(Token = "0x20001DD")]
public class TournamentCanvasLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text TournamentTitle;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Loading;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text TopPlayersHeader;

	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text BestArchersHeader;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text BestArchersLastTournament;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text BestArchersRank;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text BestArchersName;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text BestArchersStage;

	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text BestArchersKills;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text BestArchersDeaths;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text BestArchersStatus;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text Join;

	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text EnrollmentBack;

	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text DisclaimerTitle;

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text Disclaimer;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text Agreement;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text MustAgree;

	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text DisclaimerBack;

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text Continue;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Text RivalsTitle;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Text RivalsLastTournament;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Text RivalsRank;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Text RivalsName;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Text RivalsStage;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Text RivalsKils;

	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Text RivalsDeaths;

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Text RivalsStatus;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Text NoResultsYet;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Text Error;

	[Token(Token = "0x6000947")]
	[Address(RVA = "0xA40060", Offset = "0xA40060", VA = "0xA40060", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000948")]
	[Address(RVA = "0xA405AC", Offset = "0xA405AC", VA = "0xA405AC")]
	public TournamentCanvasLocalizer()
	{
	}
}
[Token(Token = "0x20001DE")]
public class TournamentLeaderboardWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text TournamentLeaderboard;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Rank;

	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Name;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Round;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text Kills;

	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text Deaths;

	[Token(Token = "0x4000A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text TotalKills;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text TotalDeaths;

	[Token(Token = "0x4000A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text Status;

	[Token(Token = "0x6000949")]
	[Address(RVA = "0xA405B4", Offset = "0xA405B4", VA = "0xA405B4", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0xA40738", Offset = "0xA40738", VA = "0xA40738")]
	public TournamentLeaderboardWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001DF")]
public class TournamentLobbyLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Settings;

	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text SettingsOutline;

	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Quit;

	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text QuitOutline;

	[Token(Token = "0x600094B")]
	[Address(RVA = "0xA40740", Offset = "0xA40740", VA = "0xA40740", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0xA407C8", Offset = "0xA407C8", VA = "0xA407C8")]
	public TournamentLobbyLocalizer()
	{
	}
}
[Token(Token = "0x20001E0")]
public class VillageHealthLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text VillageHealth;

	[Token(Token = "0x600094D")]
	[Address(RVA = "0xA407D0", Offset = "0xA407D0", VA = "0xA407D0", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0xA40860", Offset = "0xA40860", VA = "0xA40860")]
	public VillageHealthLocalizer()
	{
	}
}
[Token(Token = "0x20001E1")]
public class ViveportLicenseNotValidWindowLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text LicenseNotValid;

	[Token(Token = "0x600094F")]
	[Address(RVA = "0xA40868", Offset = "0xA40868", VA = "0xA40868", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0xA408CC", Offset = "0xA408CC", VA = "0xA408CC")]
	public ViveportLicenseNotValidWindowLocalizer()
	{
	}
}
[Token(Token = "0x20001E2")]
public class YourServerCodeIsLocalizer : MonoBehaviour, ILocalizable
{
	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text YourServerCodeIs;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text HowToUseCode;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Back;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text Continue;

	[Token(Token = "0x6000951")]
	[Address(RVA = "0xA408D4", Offset = "0xA408D4", VA = "0xA408D4", Slot = "4")]
	public void Localize()
	{
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0xA409D4", Offset = "0xA409D4", VA = "0xA409D4")]
	public YourServerCodeIsLocalizer()
	{
	}
}
[Serializable]
[Token(Token = "0x20001E3")]
public class RandomPlayerNicks
{
	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[TextArea]
	[SerializeField]
	private string fnCurly;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[TextArea]
	private string fnDjango;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[TextArea]
	private string fnBilly;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[TextArea]
	private string fnSmiley;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[TextArea]
	private string fnBlueridge;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[TextArea]
	[SerializeField]
	private string fnPoppy;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[TextArea]
	[SerializeField]
	private string fnBlackie;

	[Token(Token = "0x4000A7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[TextArea]
	private string fnBuckey;

	[Token(Token = "0x4000A7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[TextArea]
	[SerializeField]
	private string fnWhitey;

	[Token(Token = "0x4000A7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[TextArea]
	private string fnMojo;

	[Token(Token = "0x4000A7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[TextArea]
	private string fnLefty;

	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[TextArea]
	[SerializeField]
	private string fnSmokey;

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[TextArea]
	[SerializeField]
	private string fnShorty;

	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[TextArea]
	[SerializeField]
	private string fnWhiskey;

	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[TextArea]
	private string fnBronco;

	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[TextArea]
	private string fnTrapper;

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[TextArea]
	private string fnAmarillo;

	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[TextArea]
	private string fnDakota;

	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[TextArea]
	private string fnCactus;

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	[TextArea]
	private string fnBuck;

	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[TextArea]
	private string fnBrownie;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	[TextArea]
	private string fnPaleFace;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[TextArea]
	private string fnPat;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[TextArea]
	private string fnPaco;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	[TextArea]
	private string fnGonzales;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	[TextArea]
	private string fnBob;

	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[TextArea]
	[SerializeField]
	private string snTheLucky;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[TextArea]
	[SerializeField]
	private string snTheTerrible;

	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[TextArea]
	[SerializeField]
	private string snTheFearsome;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[TextArea]
	[SerializeField]
	private string snTheHot_Tempered;

	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	[TextArea]
	private string snTheLone;

	[Token(Token = "0x4000A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[TextArea]
	[SerializeField]
	private string snTheBack_Stabbing;

	[Token(Token = "0x4000A94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	[TextArea]
	private string snTheCross_Eyed;

	[Token(Token = "0x4000A95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	[TextArea]
	private string snTheBad;

	[Token(Token = "0x4000A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	[TextArea]
	private string snTheOne_Eyed;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	[TextArea]
	private string snTheRuthless;

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	[TextArea]
	private string snTheWanted;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	[TextArea]
	private string snTheStubborn;

	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[TextArea]
	[SerializeField]
	private string snTheDesperate;

	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	[TextArea]
	private string snTheMule_Headed;

	[Token(Token = "0x4000A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	[TextArea]
	private string snTheHappy;

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	[TextArea]
	private string snTheCrazy;

	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	[TextArea]
	private string snTheLawless;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	[TextArea]
	private string snTheSaddlesore;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[SerializeField]
	[TextArea]
	private string snTheSharp_Eyed;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[SerializeField]
	[TextArea]
	private string snTheWild;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[TextArea]
	[SerializeField]
	private string snTheUnruly;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	[TextArea]
	private string snTheParanoid;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	[TextArea]
	private string snTheAngry;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	[TextArea]
	private string snTheBlood_Thirsty;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[TextArea]
	[SerializeField]
	private string snTheRotten;

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	[TextArea]
	private string snTheBig;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	[TextArea]
	private string lnGambler;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[TextArea]
	[SerializeField]
	private string lnApache;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	[TextArea]
	private string lnGunslinger;

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	[TextArea]
	private string lnOutlaw;

	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	[TextArea]
	private string lnBushwacker;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	[TextArea]
	private string lnBearcat;

	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	[SerializeField]
	[TextArea]
	private string lnJailbreaker;

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[SerializeField]
	[TextArea]
	private string lnItchy_Trigger;

	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[SerializeField]
	[TextArea]
	private string lnGold_Digger;

	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	[TextArea]
	private string lnStagecoach_Robber;

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[TextArea]
	[SerializeField]
	private string lnOne_Tapperino;

	[Token(Token = "0x4000AB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	[TextArea]
	private string lnSharpshooter;

	[Token(Token = "0x4000AB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[SerializeField]
	[TextArea]
	private string lnFlapjack;

	[Token(Token = "0x4000AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[SerializeField]
	[TextArea]
	private string lnBuffaloHunter;

	[Token(Token = "0x4000AB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	[TextArea]
	[SerializeField]
	private string lnCotton_Mouth;

	[Token(Token = "0x4000AB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	[SerializeField]
	[TextArea]
	private string lnDeadwood;

	[Token(Token = "0x4000AB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	[TextArea]
	[SerializeField]
	private string lnCowboy;

	[Token(Token = "0x4000AB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	[SerializeField]
	[TextArea]
	private string lnSheriff;

	[Token(Token = "0x4000ABA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	[SerializeField]
	[TextArea]
	private string lnBullOfTheWoods;

	[Token(Token = "0x4000ABB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	[TextArea]
	[SerializeField]
	private string lnFarmer;

	[Token(Token = "0x4000ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	[SerializeField]
	[TextArea]
	private string lnSundance_Kid;

	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[SerializeField]
	[TextArea]
	private string lnRustler;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[SerializeField]
	[TextArea]
	private string lnRattlesnake;

	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[TextArea]
	[SerializeField]
	private string lnDude;

	[Token(Token = "0x4000AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[TextArea]
	[SerializeField]
	private string lnMustang;

	[Token(Token = "0x4000AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private string[] firstNames;

	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private string[] secondNames;

	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private string[] lastNames;

	[Token(Token = "0x1700012B")]
	public string[] FirstNames
	{
		[Token(Token = "0x6000953")]
		[Address(RVA = "0xA409DC", Offset = "0xA409DC", VA = "0xA409DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700012C")]
	public string[] SecondNames
	{
		[Token(Token = "0x6000954")]
		[Address(RVA = "0xA409E4", Offset = "0xA409E4", VA = "0xA409E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700012D")]
	public string[] GetLastNames
	{
		[Token(Token = "0x6000955")]
		[Address(RVA = "0xA409EC", Offset = "0xA409EC", VA = "0xA409EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0xA409F4", Offset = "0xA409F4", VA = "0xA409F4")]
	public void SetPlayerNicks()
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0xA41A04", Offset = "0xA41A04", VA = "0xA41A04")]
	public RandomPlayerNicks()
	{
	}
}
[Token(Token = "0x20001E4")]
public class TestTranslator
{
	[Token(Token = "0x6000958")]
	[Address(RVA = "0xA4252C", Offset = "0xA4252C", VA = "0xA4252C")]
	public static void Translate()
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0xA45188", Offset = "0xA45188", VA = "0xA45188")]
	public TestTranslator()
	{
	}
}
[Token(Token = "0x20001E5")]
[CreateAssetMenu(menuName = "Translations/Translation")]
public class Translation : ScriptableObject
{
	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string lbFarm;

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string lbForgottenTown;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[TextArea]
	public string lbPrison;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[TextArea]
	public string lbGoldMine;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[TextArea]
	public string lbTeleportation;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[TextArea]
	public string lbTeleportationTip;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[TextArea]
	public string lbChangeWeapon;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[TextArea]
	public string lbGrabWeapon;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[TextArea]
	public string lbShoot;

	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[TextArea]
	public string lbDefaultItem;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[TextArea]
	public string lbMenu;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[TextArea]
	public string lbSkills;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[TextArea]
	public string lbLevel;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[TextArea]
	public string lbSkillPoints;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[TextArea]
	public string lbCooldown;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[TextArea]
	public string lbLevelNeededToUpgrade;

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[TextArea]
	public string btReset;

	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[TextArea]
	public string btLearn;

	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[TextArea]
	public string lbHowToUseSkillsTitle;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[TextArea]
	public string lbYouNeedMoreSkillPoints;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[TextArea]
	public string lbMaxLevel;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[TextArea]
	public string txtHigherLevelNeeded;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[TextArea]
	public string txtSkillPointNeeded;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[TextArea]
	public string txtPreviousSkillRequired;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[TextArea]
	public string txtMaxLevelReached;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[TextArea]
	public string txtYouHaveToLearnIt;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[TextArea]
	public string lbDefaultSkill;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[TextArea]
	public string lbPlayAreaWarningDescription;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[TextArea]
	public string lbFarmHealth;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[TextArea]
	public string lbForgottenTownHealth;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[TextArea]
	public string lbForgottenTownHasFallen;

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[TextArea]
	public string lbFarmHasFallen;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[TextArea]
	public string lbYouWereKilledByZombie;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[TextArea]
	public string txtPointToTeleport;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[TextArea]
	public string lbEvaluationWarning;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[TextArea]
	public string txtTouchTrackingText;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[Header("Random Player Nicks")]
	public RandomPlayerNicks RandomPlayerNicks;

	[Token(Token = "0x600095A")]
	[Address(RVA = "0xA45190", Offset = "0xA45190", VA = "0xA45190")]
	public Translation()
	{
	}
}
[Token(Token = "0x20001E6")]
public class LocalPositionHolder : MonoBehaviour
{
	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 localPosition;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion localRotation;

	[Token(Token = "0x600095B")]
	[Address(RVA = "0xA456F4", Offset = "0xA456F4", VA = "0xA456F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0xA4575C", Offset = "0xA4575C", VA = "0xA4575C")]
	private void Update()
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0xA45828", Offset = "0xA45828", VA = "0xA45828")]
	public LocalPositionHolder()
	{
	}
}
[Token(Token = "0x20001E7")]
public class MeleeDamageObject : MonoBehaviourPun
{
	[Token(Token = "0x4000AEB")]
	private const float headshotDamage = float.PositiveInfinity;

	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private CollisionEvents bladeCollisionEvents;

	[Token(Token = "0x4000AED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ItemGrabController itemGrabController;

	[Token(Token = "0x4000AEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float detachLimbChance;

	[Token(Token = "0x4000AEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float basicWeaponDamage;

	[Token(Token = "0x600095E")]
	[Address(RVA = "0xA45830", Offset = "0xA45830", VA = "0xA45830")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0xA458BC", Offset = "0xA458BC", VA = "0xA458BC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0xA45948", Offset = "0xA45948", VA = "0xA45948")]
	private void HitEnemy(Collider collider)
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0xA45C80", Offset = "0xA45C80", VA = "0xA45C80")]
	public MeleeDamageObject()
	{
	}
}
[Token(Token = "0x20001E8")]
public class ThrowableWeaponAttacher : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x4000AF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AttachedItemController attachedItemController;

	[Token(Token = "0x4000AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Rigidbody mainWeaponRigidbody;

	[Token(Token = "0x4000AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private CollisionEvents bladeCollisionEvents;

	[Token(Token = "0x4000AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private BoxCollider dmgCollider;

	[Token(Token = "0x4000AF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool canAttach;

	[Token(Token = "0x4000AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isAttached;

	[Token(Token = "0x4000AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Action OnItemAttach;

	[Token(Token = "0x1700012E")]
	public bool CanAttach
	{
		[Token(Token = "0x6000962")]
		[Address(RVA = "0xA45C94", Offset = "0xA45C94", VA = "0xA45C94")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000963")]
		[Address(RVA = "0xA45C9C", Offset = "0xA45C9C", VA = "0xA45C9C")]
		set
		{
		}
	}

	[Token(Token = "0x1700012F")]
	public bool IsAttached
	{
		[Token(Token = "0x6000964")]
		[Address(RVA = "0xA45D58", Offset = "0xA45D58", VA = "0xA45D58")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000965")]
		[Address(RVA = "0xA45D60", Offset = "0xA45D60", VA = "0xA45D60")]
		set
		{
		}
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0xA45E2C", Offset = "0xA45E2C", VA = "0xA45E2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0xA45FF0", Offset = "0xA45FF0", VA = "0xA45FF0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0xA461B4", Offset = "0xA461B4", VA = "0xA461B4")]
	private void AttachWeapon(Collider collider)
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0xA461CC", Offset = "0xA461CC", VA = "0xA461CC")]
	private void EnableAttaching()
	{
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0xA46204", Offset = "0xA46204", VA = "0xA46204")]
	private void ResetAfterThrow()
	{
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0xA45D80", Offset = "0xA45D80", VA = "0xA45D80")]
	private void AttachWeapon()
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0xA4623C", Offset = "0xA4623C", VA = "0xA4623C", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0xA46378", Offset = "0xA46378", VA = "0xA46378")]
	public ThrowableWeaponAttacher()
	{
	}
}
[Token(Token = "0x20001E9")]
public class ThrowDataCollector : MonoBehaviour
{
	[Token(Token = "0x20001EA")]
	private struct ThrowData
	{
		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float timeStamp;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 translationVector;

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xA46598", Offset = "0xA46598", VA = "0xA46598")]
		public ThrowData(float timeStamp, Vector3 translationVector)
		{
		}
	}

	[Token(Token = "0x4000AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float timeToCollectData;

	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<ThrowData> throwData;

	[Token(Token = "0x4000AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 lastVector;

	[Token(Token = "0x600096E")]
	[Address(RVA = "0xA46380", Offset = "0xA46380", VA = "0xA46380")]
	private void Update()
	{
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0xA465A4", Offset = "0xA465A4", VA = "0xA465A4")]
	public Vector3 AverageThrowingForce()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000970")]
	[Address(RVA = "0xA46684", Offset = "0xA46684", VA = "0xA46684")]
	public ThrowDataCollector()
	{
	}
}
[Token(Token = "0x20001EB")]
public class ThrowWeaponController : MonoBehaviourPun
{
	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Rigidbody weaponMainRigidbody;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AttachedItemController attachedItemController;

	[Token(Token = "0x4000AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ThrowDataCollector collectThrowData;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float force;

	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float maxThrowTorqueValue;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float throwTorqueMultiplier;

	[Token(Token = "0x6000972")]
	[Address(RVA = "0xA46718", Offset = "0xA46718", VA = "0xA46718")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0xA46804", Offset = "0xA46804", VA = "0xA46804")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000974")]
	[Address(RVA = "0xA468DC", Offset = "0xA468DC", VA = "0xA468DC")]
	private void StartThrow()
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0xA46B20", Offset = "0xA46B20", VA = "0xA46B20")]
	public ThrowWeaponController()
	{
	}
}
[Token(Token = "0x20001EC")]
public class DisclaimerWindowController : MonoBehaviour
{
	[Token(Token = "0x4000B02")]
	private const string urlToPrivacyPolicy = "https://wenklystudio.com/legal/privacypolicy/vrgames/PrivacyPolicy-VR_Games.pdf";

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Toggle toggle;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text errorText;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private OnJoinCanvasDisabler tournamentOnJoinCanvasDisabler;

	[Token(Token = "0x4000B06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject enrollmentWindow;

	[Token(Token = "0x4000B07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private BeforeEnrollmentTournamentController enrollmentTournamentController;

	[Token(Token = "0x6000976")]
	[Address(RVA = "0xA46B3C", Offset = "0xA46B3C", VA = "0xA46B3C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0xA46B78", Offset = "0xA46B78", VA = "0xA46B78")]
	private void SetStateBeforeDisclaimer()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0xA46B40", Offset = "0xA46B40", VA = "0xA46B40")]
	private void SetInitialDisclaimerState()
	{
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0xA46BB4", Offset = "0xA46BB4", VA = "0xA46BB4")]
	public void OnContinueButtonClick()
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0xA46C0C", Offset = "0xA46C0C", VA = "0xA46C0C")]
	public void OnBackButtonClick()
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0xA46C10", Offset = "0xA46C10", VA = "0xA46C10")]
	public void OnLinkClick()
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0xA46C54", Offset = "0xA46C54", VA = "0xA46C54")]
	public void ToggleAgreement()
	{
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0xA46C94", Offset = "0xA46C94", VA = "0xA46C94")]
	public DisclaimerWindowController()
	{
	}
}
[Token(Token = "0x20001ED")]
public class ExternalLinkController : MonoBehaviour
{
	[Token(Token = "0x20001EE")]
	[CompilerGenerated]
	private sealed class <OpenApp>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExternalLinkController <>4__this;

		[Token(Token = "0x17000130")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000986")]
			[Address(RVA = "0xA46EF4", Offset = "0xA46EF4", VA = "0xA46EF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000131")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000988")]
			[Address(RVA = "0xA46F3C", Offset = "0xA46F3C", VA = "0xA46F3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xA46DE8", Offset = "0xA46DE8", VA = "0xA46DE8")]
		[DebuggerHidden]
		public <OpenApp>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xA46E18", Offset = "0xA46E18", VA = "0xA46E18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xA46E1C", Offset = "0xA46E1C", VA = "0xA46E1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xA46EFC", Offset = "0xA46EFC", VA = "0xA46EFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string link;

	[Token(Token = "0x4000B09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string appLink;

	[Token(Token = "0x4000B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isPaused;

	[Token(Token = "0x600097E")]
	[Address(RVA = "0xA46C9C", Offset = "0xA46C9C", VA = "0xA46C9C")]
	private void OnApplicationPause()
	{
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0xA46CA8", Offset = "0xA46CA8", VA = "0xA46CA8")]
	public void OpenLink()
	{
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0xA46D3C", Offset = "0xA46D3C", VA = "0xA46D3C")]
	public void TryToOpenApp()
	{
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0xA46D74", Offset = "0xA46D74", VA = "0xA46D74")]
	[IteratorStateMachine(typeof(<OpenApp>d__6))]
	private IEnumerator OpenApp()
	{
		return null;
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0xA46E10", Offset = "0xA46E10", VA = "0xA46E10")]
	public ExternalLinkController()
	{
	}
}
[Token(Token = "0x20001EF")]
public class MainMenuInitializer : MonoBehaviour
{
	[Token(Token = "0x4000B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PlayerProgressionLoader playerProgressionLoader;

	[Token(Token = "0x4000B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ReferenceSetterController referenceSetterController;

	[Token(Token = "0x4000B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ArcadeGameSwitcher arcadeGameSwitcher;

	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private MainMenuWindowsTransitionControllerSwitcher mainMenuWindowsTransitionControllerSwitcher;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AutoJoiner autoJoiner;

	[Token(Token = "0x4000B13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private MainMenuTeleportsController mainMenuTeleportsController;

	[Token(Token = "0x4000B14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private InitGameInfo initGameInfo;

	[Token(Token = "0x4000B15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private DRMHandler dRMHandler;

	[Token(Token = "0x6000989")]
	[Address(RVA = "0xA46F44", Offset = "0xA46F44", VA = "0xA46F44")]
	private void Awake()
	{
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0xA46FDC", Offset = "0xA46FDC", VA = "0xA46FDC")]
	private void RunInitialization()
	{
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0xA47068", Offset = "0xA47068", VA = "0xA47068")]
	public MainMenuInitializer()
	{
	}
}
[Token(Token = "0x20001F0")]
public class MainMenuLoadingScreenInitializer : MonoBehaviour
{
	[Token(Token = "0x4000B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private InitGameInfo initGameInfo;

	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PlayerProgressionLoader playerProgressionLoader;

	[Token(Token = "0x600098C")]
	[Address(RVA = "0xA47070", Offset = "0xA47070", VA = "0xA47070")]
	public void RunInitialization()
	{
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0xA47128", Offset = "0xA47128", VA = "0xA47128")]
	public MainMenuLoadingScreenInitializer()
	{
	}
}
[Token(Token = "0x20001F1")]
public class MeshAttacher : MonoBehaviour
{
	[Token(Token = "0x600098E")]
	[Address(RVA = "0xA47130", Offset = "0xA47130", VA = "0xA47130")]
	private void Reset()
	{
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0xA471C8", Offset = "0xA471C8", VA = "0xA471C8")]
	public MeshAttacher()
	{
	}
}
[Token(Token = "0x20001F2")]
public class MicrophoneController : MonoBehaviour
{
	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool micConnected;

	[Token(Token = "0x17000132")]
	public bool MicConnected
	{
		[Token(Token = "0x6000990")]
		[Address(RVA = "0xA471D0", Offset = "0xA471D0", VA = "0xA471D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0xA471D8", Offset = "0xA471D8", VA = "0xA471D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0xA471DC", Offset = "0xA471DC", VA = "0xA471DC")]
	public void MicrophoneSetup()
	{
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0xA47274", Offset = "0xA47274", VA = "0xA47274")]
	public MicrophoneController()
	{
	}
}
[Token(Token = "0x20001F3")]
public class MicrophoneUIInertia : MonoBehaviour
{
	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform mainCamera;

	[Token(Token = "0x4000B1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float rotationSpeed;

	[Token(Token = "0x6000994")]
	[Address(RVA = "0xA4727C", Offset = "0xA4727C", VA = "0xA4727C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0xA47430", Offset = "0xA47430", VA = "0xA47430")]
	public MicrophoneUIInertia()
	{
	}
}
[Token(Token = "0x20001F4")]
public class MultiplayerController : MonoBehaviour
{
	[Token(Token = "0x4000B1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static MultiplayerController instance;

	[Token(Token = "0x4000B1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int numberOfPlayingPlayers;

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> playersActualPlaying;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] gameObjectsEnabledOnGameStart;

	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform[] playersSpots;

	[Token(Token = "0x17000133")]
	public static MultiplayerController Instance
	{
		[Token(Token = "0x6000996")]
		[Address(RVA = "0xA47438", Offset = "0xA47438", VA = "0xA47438")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0xA47480", Offset = "0xA47480", VA = "0xA47480")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000998")]
	[Address(RVA = "0xA4757C", Offset = "0xA4757C", VA = "0xA4757C")]
	public void StartGame()
	{
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0xA475E0", Offset = "0xA475E0", VA = "0xA475E0")]
	private void OnNewNumberOfPlayers(int numberOfPlayers)
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0xA475E8", Offset = "0xA475E8", VA = "0xA475E8")]
	public MultiplayerController()
	{
	}
}
[Token(Token = "0x20001F5")]
public class MultiplayerDebugger : MonoBehaviour
{
	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text numberOfPlayersText;

	[Token(Token = "0x600099B")]
	[Address(RVA = "0xA475F0", Offset = "0xA475F0", VA = "0xA475F0")]
	private void Update()
	{
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0xA47668", Offset = "0xA47668", VA = "0xA47668")]
	public MultiplayerDebugger()
	{
	}
}
[Token(Token = "0x20001F6")]
public static class TournamentRoomPropertiesController
{
	[Token(Token = "0x4000B21")]
	public const string tournamentKey = "Tournament";

	[Token(Token = "0x17000134")]
	public static bool IsInTournamentRoom
	{
		[Token(Token = "0x600099D")]
		[Address(RVA = "0xA47670", Offset = "0xA47670", VA = "0xA47670")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0xA4772C", Offset = "0xA4772C", VA = "0xA4772C")]
	public static RoomOptions GetDefaultTournamentDeathMatchRoomOptions(int maxPlayersCount = 4)
	{
		return null;
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0xA47A30", Offset = "0xA47A30", VA = "0xA47A30")]
	public static RoomOptions GetDefaultTournamentRoomOptions()
	{
		return null;
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0xA47BA0", Offset = "0xA47BA0", VA = "0xA47BA0")]
	public static TournamentGameStateController.TournamentGameStateType GetTournamentGameState()
	{
		return default(TournamentGameStateController.TournamentGameStateType);
	}
}
[Token(Token = "0x20001F7")]
public class CloudRegionByLocalTimeZoneDetector : MonoBehaviour
{
	[Token(Token = "0x4000B22")]
	private const int minEuropeTimeZoneOffset = 0;

	[Token(Token = "0x4000B23")]
	private const int maxEuropeTimeZoneOffset = 4;

	[Token(Token = "0x4000B24")]
	private const int minAsiaTimeZoneOffset = 5;

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0xA47CB0", Offset = "0xA47CB0", VA = "0xA47CB0")]
	public static CloudRegionCode GetCloudRegionByLocalTimeZone()
	{
		return default(CloudRegionCode);
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0xA47D3C", Offset = "0xA47D3C", VA = "0xA47D3C")]
	public CloudRegionByLocalTimeZoneDetector()
	{
	}
}
[Token(Token = "0x20001F8")]
public class AppearanceController : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action OnItemChange;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isMainMenu;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private EquipedItems currentItems;

	[Token(Token = "0x17000135")]
	public EquipedItems CurrentItems
	{
		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xA47D44", Offset = "0xA47D44", VA = "0xA47D44")]
		get
		{
			return default(EquipedItems);
		}
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0xA47D54", Offset = "0xA47D54", VA = "0xA47D54")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0xA47EB4", Offset = "0xA47EB4", VA = "0xA47EB4")]
	public void SetCurrentItem(EquipType equipType, int itemID)
	{
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0xA47E90", Offset = "0xA47E90", VA = "0xA47E90")]
	private void SetCurrentItems(EquipedItems equipedItems)
	{
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0xA47F54", Offset = "0xA47F54", VA = "0xA47F54")]
	private void SetCurrentItems(int hat, int torso, int leg, int skinColor)
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0xA47FF0", Offset = "0xA47FF0", VA = "0xA47FF0", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0xA481D8", Offset = "0xA481D8", VA = "0xA481D8")]
	public AppearanceController()
	{
	}
}
[Token(Token = "0x20001F9")]
public class ColorSkinButton : MonoBehaviour
{
	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CharacterSelectionWindow characterSelection;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ItemData skinColor;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject imageBorder;

	[Token(Token = "0x17000136")]
	public ItemData SkinColor
	{
		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xA481E0", Offset = "0xA481E0", VA = "0xA481E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0xA481E8", Offset = "0xA481E8", VA = "0xA481E8")]
	public void EnableVisual()
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0xA48208", Offset = "0xA48208", VA = "0xA48208")]
	public void DisableVisual()
	{
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0xA48228", Offset = "0xA48228", VA = "0xA48228")]
	public void OnClick()
	{
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0xA48248", Offset = "0xA48248", VA = "0xA48248")]
	public ColorSkinButton()
	{
	}
}
[Serializable]
[Token(Token = "0x20001FA")]
public struct EquipedItems
{
	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int currentHatID;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public int currentTorsoID;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int currentLegID;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int currentSkinColorID;

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0xA47F14", Offset = "0xA47F14", VA = "0xA47F14")]
	public void SetCurrentItem(EquipType equipType, int itemID)
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0xA47FE4", Offset = "0xA47FE4", VA = "0xA47FE4")]
	public void SetCurrentItems(int hatID, int torsoID, int legID, int skinColorID)
	{
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0xA48250", Offset = "0xA48250", VA = "0xA48250")]
	public int GetCurrentItem(EquipType equipType)
	{
		return default(int);
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0xA47FA8", Offset = "0xA47FA8", VA = "0xA47FA8")]
	public bool IsCurrentItemIsDiffrent(int hat, int torso, int leg, int skinColor)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001FB")]
public class EquipementStorage : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20001FC")]
	private class SaveData
	{
		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<int> boughtItems;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EquipedItems currentItems;

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xA4881C", Offset = "0xA4881C", VA = "0xA4881C")]
		public SaveData(List<int> boughtItems, EquipedItems currentItems)
		{
		}
	}

	[Token(Token = "0x4000B2F")]
	private const int defaultItemId = 0;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static EquipementStorage instance;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ItemsContainer itemsContainer;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string savePath;

	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<int> boughtItems;

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private EquipedItems currentItems;

	[Token(Token = "0x17000137")]
	public static EquipementStorage Instance
	{
		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xA47DB4", Offset = "0xA47DB4", VA = "0xA47DB4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000138")]
	public ItemsContainer ItemsContainer
	{
		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xA4830C", Offset = "0xA4830C", VA = "0xA4830C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000139")]
	public List<int> BoughtItems
	{
		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xA48314", Offset = "0xA48314", VA = "0xA48314")]
		get
		{
			return null;
		}
		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xA4831C", Offset = "0xA4831C", VA = "0xA4831C")]
		set
		{
		}
	}

	[Token(Token = "0x1700013A")]
	public EquipedItems CurrentItems
	{
		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xA48324", Offset = "0xA48324", VA = "0xA48324")]
		get
		{
			return default(EquipedItems);
		}
		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xA48330", Offset = "0xA48330", VA = "0xA48330")]
		set
		{
		}
	}

	[Token(Token = "0x60009B9")]
	[Address(RVA = "0xA48338", Offset = "0xA48338", VA = "0xA48338")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009BA")]
	[Address(RVA = "0xA485D8", Offset = "0xA485D8", VA = "0xA485D8")]
	public void AddItem(int itemID)
	{
	}

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0xA487C8", Offset = "0xA487C8", VA = "0xA487C8")]
	public void SetCurrentItem(EquipType equipType, int itemID)
	{
	}

	[Token(Token = "0x60009BC")]
	[Address(RVA = "0xA48810", Offset = "0xA48810", VA = "0xA48810")]
	public void SetDefaultItem()
	{
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0xA486B8", Offset = "0xA486B8", VA = "0xA486B8")]
	private void Save()
	{
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0xA484A8", Offset = "0xA484A8", VA = "0xA484A8")]
	private void Load()
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0xA48864", Offset = "0xA48864", VA = "0xA48864")]
	private void RevertData(SaveData storedStorage)
	{
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0xA488A0", Offset = "0xA488A0", VA = "0xA488A0")]
	public EquipementStorage()
	{
	}
}
[Token(Token = "0x20001FD")]
public enum EquipType
{
	[Token(Token = "0x4000B38")]
	hat,
	[Token(Token = "0x4000B39")]
	torso,
	[Token(Token = "0x4000B3A")]
	legs,
	[Token(Token = "0x4000B3B")]
	skinColor
}
[Token(Token = "0x20001FE")]
public class Item : MonoBehaviour
{
	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ItemData equipementItem;

	[Token(Token = "0x1700013B")]
	public ItemData EquipementItem
	{
		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xA48994", Offset = "0xA48994", VA = "0xA48994")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0xA4899C", Offset = "0xA4899C", VA = "0xA4899C")]
	public void SetActiveStatus(bool enabled)
	{
	}

	[Token(Token = "0x60009C4")]
	[Address(RVA = "0xA489C4", Offset = "0xA489C4", VA = "0xA489C4")]
	public Item()
	{
	}
}
[Token(Token = "0x20001FF")]
[CreateAssetMenu(fileName = "ItemData", menuName = "WenklyStudio/Outfit/ItemData", order = 1)]
public class ItemData : ScriptableObject
{
	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int itemID;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int price;

	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite icon;

	[Token(Token = "0x4000B40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Gender gender;

	[Token(Token = "0x60009C5")]
	[Address(RVA = "0xA489CC", Offset = "0xA489CC", VA = "0xA489CC")]
	public ItemData()
	{
	}
}
[Token(Token = "0x2000200")]
public class ItemEquiper : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000201")]
	private class ItemData
	{
		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EquipType equipType;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Item[] itemTypeObjects;

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xA48C88", Offset = "0xA48C88", VA = "0xA48C88")]
		public ItemData()
		{
		}
	}

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ItemData[] items;

	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AppearanceController apperanceController;

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0xA489D4", Offset = "0xA489D4", VA = "0xA489D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0xA48BA8", Offset = "0xA48BA8", VA = "0xA48BA8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0xA48AB4", Offset = "0xA48AB4", VA = "0xA48AB4")]
	public void EquipCurrentItems()
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0xA48C80", Offset = "0xA48C80", VA = "0xA48C80")]
	public ItemEquiper()
	{
	}
}
[Token(Token = "0x2000202")]
[CreateAssetMenu(fileName = "ItemsContainer", menuName = "WenklyStudio/Outfit/ItemsContainer", order = 0)]
public class ItemsContainer : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000203")]
	private class itemContainerData
	{
		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EquipType type;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ItemData> itemsData;

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xA490C0", Offset = "0xA490C0", VA = "0xA490C0")]
		public itemContainerData()
		{
		}
	}

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<itemContainerData> items;

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0xA48C90", Offset = "0xA48C90", VA = "0xA48C90")]
	public List<ItemData> GetListOfItem(EquipType equipType)
	{
		return null;
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0xA48E8C", Offset = "0xA48E8C", VA = "0xA48E8C")]
	public List<ItemData> GetListOfItem(EquipType equipType, Gender gender)
	{
		return null;
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0xA490B8", Offset = "0xA490B8", VA = "0xA490B8")]
	public ItemsContainer()
	{
	}
}
[Token(Token = "0x2000204")]
public class OculusMenuHandController : MonoBehaviour
{
	[Token(Token = "0x2000205")]
	public enum HandSide
	{
		[Token(Token = "0x4000B4A")]
		LEFT,
		[Token(Token = "0x4000B4B")]
		RIGHT
	}

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HandSide handSide;

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0xA490C8", Offset = "0xA490C8", VA = "0xA490C8")]
	public OculusMenuHandController()
	{
	}
}
[Token(Token = "0x2000206")]
public class DestinationController : MonoBehaviour, IConnectionCallbacks, ILobbyCallbacks
{
	[Token(Token = "0x4000B4C")]
	private const int minEuropeTimeZoneOffset = 0;

	[Token(Token = "0x4000B4D")]
	private const int maxEuropeTimeZoneOffset = 4;

	[Token(Token = "0x4000B4E")]
	private const int minAsiaTimeZoneOffset = 5;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Maps maps;

	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string serverName;

	[Token(Token = "0x4000B51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string customServerName;

	[Token(Token = "0x4000B52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isCreatingRoom;

	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isJoiningRoom;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool isGroupLaunch;

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0xA490D0", Offset = "0xA490D0", VA = "0xA490D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0xA49180", Offset = "0xA49180", VA = "0xA49180")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0xA49230", Offset = "0xA49230", VA = "0xA49230")]
	private void CreateRoom(string mapName)
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0xA493BC", Offset = "0xA493BC", VA = "0xA493BC")]
	private void CreateCustomNameRoom(string mapName, string customRoomName)
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0xA49234", Offset = "0xA49234", VA = "0xA49234")]
	private void ConnectUsingMap(string _mapName)
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0xA493F4", Offset = "0xA493F4", VA = "0xA493F4")]
	private string GetRegionBasedOnLocalTimeZone()
	{
		return null;
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0xA49640", Offset = "0xA49640", VA = "0xA49640")]
	private void ConnectToRegion(string cloudRegionCode, string serverName)
	{
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0xA496E0", Offset = "0xA496E0", VA = "0xA496E0")]
	private void ErrorMessage()
	{
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0xA49748", Offset = "0xA49748", VA = "0xA49748", Slot = "5")]
	public void OnConnectedToMaster()
	{
	}

	[Token(Token = "0x60009D9")]
	[Address(RVA = "0xA49830", Offset = "0xA49830", VA = "0xA49830", Slot = "10")]
	public void OnJoinedLobby()
	{
	}

	[Token(Token = "0x60009DA")]
	[Address(RVA = "0xA4987C", Offset = "0xA4987C", VA = "0xA4987C", Slot = "4")]
	public void OnConnected()
	{
	}

	[Token(Token = "0x60009DB")]
	[Address(RVA = "0xA49880", Offset = "0xA49880", VA = "0xA49880", Slot = "9")]
	public void OnCustomAuthenticationFailed(string debugMessage)
	{
	}

	[Token(Token = "0x60009DC")]
	[Address(RVA = "0xA49884", Offset = "0xA49884", VA = "0xA49884", Slot = "8")]
	public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
	{
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0xA49888", Offset = "0xA49888", VA = "0xA49888", Slot = "6")]
	public void OnDisconnected(DisconnectCause cause)
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0xA4988C", Offset = "0xA4988C", VA = "0xA4988C", Slot = "7")]
	public void OnRegionListReceived(RegionHandler regionHandler)
	{
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0xA49890", Offset = "0xA49890", VA = "0xA49890", Slot = "11")]
	public void OnLeftLobby()
	{
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0xA49894", Offset = "0xA49894", VA = "0xA49894", Slot = "12")]
	public void OnRoomListUpdate(List<RoomInfo> roomList)
	{
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0xA49898", Offset = "0xA49898", VA = "0xA49898", Slot = "13")]
	public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
	{
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0xA4989C", Offset = "0xA4989C", VA = "0xA4989C")]
	public DestinationController()
	{
	}
}
[Token(Token = "0x2000207")]
public class RichPresenceAndDestination : MonoBehaviour, IMatchmakingCallbacks
{
	[Token(Token = "0x60009E3")]
	[Address(RVA = "0xA498A4", Offset = "0xA498A4", VA = "0xA498A4", Slot = "6")]
	public void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0xA498A8", Offset = "0xA498A8", VA = "0xA498A8", Slot = "4")]
	public void OnFriendListUpdate(List<FriendInfo> friendList)
	{
	}

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0xA498AC", Offset = "0xA498AC", VA = "0xA498AC", Slot = "5")]
	public void OnCreatedRoom()
	{
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0xA498B0", Offset = "0xA498B0", VA = "0xA498B0", Slot = "7")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x60009E7")]
	[Address(RVA = "0xA498B4", Offset = "0xA498B4", VA = "0xA498B4", Slot = "8")]
	public void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x60009E8")]
	[Address(RVA = "0xA498B8", Offset = "0xA498B8", VA = "0xA498B8", Slot = "9")]
	public void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x60009E9")]
	[Address(RVA = "0xA498BC", Offset = "0xA498BC", VA = "0xA498BC", Slot = "10")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0xA498C0", Offset = "0xA498C0", VA = "0xA498C0")]
	public RichPresenceAndDestination()
	{
	}
}
[Token(Token = "0x2000208")]
public class RoomInfoDetails : MonoBehaviour
{
	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MapNames map;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Region;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string RoomCode;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isMultiplayer;

	[Token(Token = "0x60009EB")]
	[Address(RVA = "0xA498C8", Offset = "0xA498C8", VA = "0xA498C8")]
	public RoomInfoDetails()
	{
	}
}
[Token(Token = "0x2000209")]
public class OffsetSetter : MonoBehaviour
{
	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float NewHorizontalValue;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float VerticalOffsetValue;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float HorizontalOffsetValue;

	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform BowHandTransform;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform ArrowHandTransform;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform CameraTransform;

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public BowController bowController;

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0xA498D0", Offset = "0xA498D0", VA = "0xA498D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0xA49BC8", Offset = "0xA49BC8", VA = "0xA49BC8")]
	public OffsetSetter()
	{
	}
}
[Token(Token = "0x200020A")]
public class OrcKillerController : MonoBehaviourPun
{
	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource sound;

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0xA49BE8", Offset = "0xA49BE8", VA = "0xA49BE8")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0xA49CF4", Offset = "0xA49CF4", VA = "0xA49CF4")]
	[PunRPC]
	private void RPCDestroyOrcs()
	{
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0xA49E58", Offset = "0xA49E58", VA = "0xA49E58")]
	public OrcKillerController()
	{
	}
}
[Token(Token = "0x200020B")]
public class Particle_Controller : MonoBehaviour
{
	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string sortingLayerName;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool destoryAfterEndPlay;

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0xA49E60", Offset = "0xA49E60", VA = "0xA49E60")]
	private void Start()
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0xA49FA0", Offset = "0xA49FA0", VA = "0xA49FA0")]
	private void Update()
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0xA4A0B0", Offset = "0xA4A0B0", VA = "0xA4A0B0")]
	private bool ParticlePlaying(Transform p_Transform)
	{
		return default(bool);
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0xA4A1C4", Offset = "0xA4A1C4", VA = "0xA4A1C4")]
	public Particle_Controller()
	{
	}
}
[Token(Token = "0x200020C")]
public class PerformanceChecker : MonoBehaviour
{
	[Token(Token = "0x4000B63")]
	private const int longDisplayInteval = 1080;

	[Token(Token = "0x4000B64")]
	private const int shortDisplayInterval = 360;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isPaused;

	[Token(Token = "0x4000B66")]
	private const string shortDescription = "short period ";

	[Token(Token = "0x4000B67")]
	private const string longDescription = "long period ";

	[Token(Token = "0x4000B68")]
	private const string waveDescription = "wave period ";

	[Token(Token = "0x4000B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntervalFPSData shortData;

	[Token(Token = "0x4000B6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntervalFPSData longData;

	[Token(Token = "0x4000B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static IntervalFPSData waveData;

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0xA4A1CC", Offset = "0xA4A1CC", VA = "0xA4A1CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0xA4A1D0", Offset = "0xA4A1D0", VA = "0xA4A1D0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0xA4A1D4", Offset = "0xA4A1D4", VA = "0xA4A1D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0xA4A1E0", Offset = "0xA4A1E0", VA = "0xA4A1E0")]
	private void ProcessShortIntervalFPS(IntervalFPSData fPSData)
	{
	}

	[Token(Token = "0x60009F9")]
	[Address(RVA = "0xA4A1FC", Offset = "0xA4A1FC", VA = "0xA4A1FC")]
	private static void ProcessIntervalFPS(IntervalFPSData fPSData)
	{
	}

	[Token(Token = "0x60009FA")]
	[Address(RVA = "0xA4A284", Offset = "0xA4A284", VA = "0xA4A284")]
	private static float MsToFPS(float deltaTime)
	{
		return default(float);
	}

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0xA4A294", Offset = "0xA4A294", VA = "0xA4A294")]
	private static void TryToDisplayResult(IntervalFPSData fPSData)
	{
	}

	[Token(Token = "0x60009FC")]
	[Address(RVA = "0xA4A2C4", Offset = "0xA4A2C4", VA = "0xA4A2C4")]
	private static void DisplayResult(IntervalFPSData fpsData)
	{
	}

	[Token(Token = "0x60009FD")]
	[Address(RVA = "0xA4A3FC", Offset = "0xA4A3FC", VA = "0xA4A3FC")]
	private static float FPSToMs(float fps)
	{
		return default(float);
	}

	[Token(Token = "0x60009FE")]
	[Address(RVA = "0xA4A254", Offset = "0xA4A254", VA = "0xA4A254")]
	private static void TryToResetFPSData(IntervalFPSData fPSData)
	{
	}

	[Token(Token = "0x60009FF")]
	[Address(RVA = "0xA4A40C", Offset = "0xA4A40C", VA = "0xA4A40C")]
	private void ProcessLongIntervalFPS(IntervalFPSData fPSData)
	{
	}

	[Token(Token = "0x6000A00")]
	[Address(RVA = "0xA4A428", Offset = "0xA4A428", VA = "0xA4A428")]
	private static void ProcessWaveIntervalFPS(IntervalFPSData fPSData)
	{
	}

	[Token(Token = "0x6000A01")]
	[Address(RVA = "0xA4A488", Offset = "0xA4A488", VA = "0xA4A488")]
	public static void TryToResetWavesFPSData(int waveNumber)
	{
	}

	[Token(Token = "0x6000A02")]
	[Address(RVA = "0xA4A48C", Offset = "0xA4A48C", VA = "0xA4A48C")]
	public static void TryToResetWavesFPSData()
	{
	}

	[Token(Token = "0x6000A03")]
	[Address(RVA = "0xA4A524", Offset = "0xA4A524", VA = "0xA4A524")]
	public static void PauseProcessingWaveData(int waveNumber)
	{
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0xA4A528", Offset = "0xA4A528", VA = "0xA4A528")]
	public static void PauseCountingFPS()
	{
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0xA4A584", Offset = "0xA4A584", VA = "0xA4A584")]
	public PerformanceChecker()
	{
	}
}
[Token(Token = "0x200020D")]
public static class PhotonCustomTypesForElvenAssassin
{
	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool registered;

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly byte[] memPlayerFeats;

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0xA4A58C", Offset = "0xA4A58C", VA = "0xA4A58C")]
	public static void Register()
	{
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0xA4A730", Offset = "0xA4A730", VA = "0xA4A730")]
	private static short SerializePlayerFeats(StreamBuffer outStream, object customobject)
	{
		return default(short);
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0xA4A908", Offset = "0xA4A908", VA = "0xA4A908")]
	private static object DeserializePlayerFeats(StreamBuffer inStream, short length)
	{
		return null;
	}
}
[Token(Token = "0x200020E")]
public class Highlighter : MonoBehaviour
{
	[Token(Token = "0x4000B6E")]
	private const float activeOutlineThickness = 0.02f;

	[Token(Token = "0x4000B6F")]
	private const float notActiveOutlineThickness = 0f;

	[Token(Token = "0x4000B70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Renderer itemRenderer;

	[Token(Token = "0x4000B71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material itemMaterial;

	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isActive;

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0xA4AB48", Offset = "0xA4AB48", VA = "0xA4AB48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0xA4AB4C", Offset = "0xA4AB4C", VA = "0xA4AB4C")]
	private void SetMaterialInstance()
	{
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0xA4ACF4", Offset = "0xA4ACF4", VA = "0xA4ACF4")]
	public void Highlight()
	{
	}

	[Token(Token = "0x6000A0D")]
	[Address(RVA = "0xA4ADC4", Offset = "0xA4ADC4", VA = "0xA4ADC4")]
	public void UnHighlight()
	{
	}

	[Token(Token = "0x6000A0E")]
	[Address(RVA = "0xA4AD14", Offset = "0xA4AD14", VA = "0xA4AD14")]
	private void SetOutlineThickness(float outlineVal)
	{
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0xA4ADDC", Offset = "0xA4ADDC", VA = "0xA4ADDC")]
	public Highlighter()
	{
	}
}
[Token(Token = "0x200020F")]
public class PlatfromDependentActivator : MonoBehaviour
{
	[Token(Token = "0x4000B73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GameObject> itemsToChangeActivity;

	[Token(Token = "0x4000B74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private VRSDK platformToChangeActivityOn;

	[Token(Token = "0x4000B75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool activityValueToSet;

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0xA4ADE4", Offset = "0xA4ADE4", VA = "0xA4ADE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0xA4AEC8", Offset = "0xA4AEC8", VA = "0xA4AEC8")]
	public PlatfromDependentActivator()
	{
	}
}
[Token(Token = "0x2000210")]
public enum ControllersState
{
	[Token(Token = "0x4000B77")]
	Pointer,
	[Token(Token = "0x4000B78")]
	Bow,
	[Token(Token = "0x4000B79")]
	Gestures
}
[Token(Token = "0x2000211")]
public enum ControllerType
{
	[Token(Token = "0x4000B7B")]
	Left,
	[Token(Token = "0x4000B7C")]
	Right
}
[Token(Token = "0x2000212")]
public enum GesturesState
{
	[Token(Token = "0x4000B7E")]
	Point,
	[Token(Token = "0x4000B7F")]
	Open,
	[Token(Token = "0x4000B80")]
	ThumbsUp,
	[Token(Token = "0x4000B81")]
	Peace,
	[Token(Token = "0x4000B82")]
	Basic,
	[Token(Token = "0x4000B83")]
	None
}
[Token(Token = "0x2000213")]
public class GlovesFader : MonoBehaviourPun
{
	[Token(Token = "0x4000B84")]
	private const float shaderSwitchTriggerValue = 0.9f;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform leftGlove;

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform rightGlove;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer[] leftGloveSkinnedMeshRenderers;

	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Renderer[] rightGloveSkinnedMeshRenderers;

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float distanceStartingFading;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float fadeSpeed;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Shader nonTransparentShader;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Shader transparentShader;

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float distanceFromCameraToLeftGlove;

	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float distanceFromCameraToRightGlove;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<Material> leftGloveMaterials;

	[Token(Token = "0x4000B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<Material> rightGloveMaterials;

	[Token(Token = "0x4000B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isLeftGloveFadingIn;

	[Token(Token = "0x4000B92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool isRightGloveFadingIn;

	[Token(Token = "0x1700013C")]
	public float DistanceFromCameraToLeftGlove
	{
		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xA4AEF4", Offset = "0xA4AEF4", VA = "0xA4AEF4")]
		set
		{
		}
	}

	[Token(Token = "0x1700013D")]
	public float DistanceFromCameraToRightGlove
	{
		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xA4B0D4", Offset = "0xA4B0D4", VA = "0xA4B0D4")]
		set
		{
		}
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0xA4B240", Offset = "0xA4B240", VA = "0xA4B240")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0xA4B430", Offset = "0xA4B430", VA = "0xA4B430")]
	private void UpdateHandsMaterials()
	{
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0xA4B538", Offset = "0xA4B538", VA = "0xA4B538")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0xA4B060", Offset = "0xA4B060", VA = "0xA4B060")]
	public void TryToChangeRenderingMode(Material gloveMaterial, bool shouldBeFade)
	{
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0xA4B78C", Offset = "0xA4B78C", VA = "0xA4B78C")]
	private static void ChangeRenderingMode(Material gloveMaterial, bool shouldBeFade)
	{
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0xA4B9B8", Offset = "0xA4B9B8", VA = "0xA4B9B8")]
	private void FadeGlove(bool isLeftGlove)
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0xA4B410", Offset = "0xA4B410", VA = "0xA4B410")]
	public void FadeGloves()
	{
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0xA4B590", Offset = "0xA4B590", VA = "0xA4B590")]
	private void ChangeGlovesShaders()
	{
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0xA4BCD4", Offset = "0xA4BCD4", VA = "0xA4BCD4")]
	private void SetPropperShader(Material gloveMaterial)
	{
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0xA4BD28", Offset = "0xA4BD28", VA = "0xA4BD28")]
	public GlovesFader()
	{
	}
}
[Serializable]
[Token(Token = "0x2000214")]
public struct MaterialModelInfo
{
	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[Header("Renderers")]
	public List<Renderer> renderers;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	[Header("Materials")]
	public Material materialPC;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public Material materialMobile;
}
[Token(Token = "0x2000215")]
public class PicoLoginHandler : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000216")]
	private struct PicoLoginInfo
	{
		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isSuccess;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string msg;
	}

	[Serializable]
	[Token(Token = "0x2000217")]
	private struct PicoUserInfo
	{
		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PicoUserData data;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string ret_msg;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string ret_code;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string exception;
	}

	[Serializable]
	[Token(Token = "0x2000218")]
	private struct PicoUserData
	{
		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string openid;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string username;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string email;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string avatar;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string gender;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string birthday;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string firstname;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string lastname;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string aboutme;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string phone;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string country;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string city;
	}

	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RandomPlayerNameCore randomPlayerName;

	[Token(Token = "0x4000B97")]
	private const string notLoggedErrorMessage = "user is not login";

	[Token(Token = "0x4000B98")]
	private const string successDataAquisitionCode = "0000";

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0xA4BDE0", Offset = "0xA4BDE0", VA = "0xA4BDE0")]
	private void LoginCallback(string result)
	{
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0xA4BE64", Offset = "0xA4BE64", VA = "0xA4BE64")]
	private void UserInfoCallback(string result)
	{
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0xA4BF94", Offset = "0xA4BF94", VA = "0xA4BF94")]
	public PicoLoginHandler()
	{
	}
}
[Token(Token = "0x2000219")]
public class PlatformWarning : MonoBehaviour
{
	[Token(Token = "0x4000BAB")]
	private const float warningTime = 2f;

	[Token(Token = "0x4000BAC")]
	private const float distanceFromPlayer = 2f;

	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private FloatingTextController floatingText;

	[Token(Token = "0x4000BAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnLocalPlayerEnter;

	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action OnLocalPlayerExit;

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0xA4BF9C", Offset = "0xA4BF9C", VA = "0xA4BF9C")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0xA4C0E4", Offset = "0xA4C0E4", VA = "0xA4C0E4")]
	private void OnTriggerExit(Collider col)
	{
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0xA4C048", Offset = "0xA4C048", VA = "0xA4C048")]
	private bool IsLocalPlayerCamera(Collider col)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0xA4C158", Offset = "0xA4C158", VA = "0xA4C158")]
	public PlatformWarning()
	{
	}
}
[Token(Token = "0x200021A")]
public abstract class PlayerDeathController : PlayerDeathControllerCore
{
	[Token(Token = "0x1700013E")]
	public abstract override bool IsDead
	{
		[Token(Token = "0x6000A26")]
		get;
		[Token(Token = "0x6000A27")]
		set;
	}

	[Token(Token = "0x6000A28")]
	public abstract void InitializeWithoutPlayer();

	[Token(Token = "0x6000A29")]
	public abstract void InitializeWithPlayer();

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0xA4C160", Offset = "0xA4C160", VA = "0xA4C160")]
	protected PlayerDeathController()
	{
	}
}
[Token(Token = "0x200021B")]
public class PlayerDeathControllerMobile : PlayerDeathControllerWave
{
	[Token(Token = "0x200021C")]
	[CompilerGenerated]
	private sealed class <DieSoundRoutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerDeathControllerMobile <>4__this;

		[Token(Token = "0x17000142")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A41")]
			[Address(RVA = "0xA4CD80", Offset = "0xA4CD80", VA = "0xA4CD80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000143")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A43")]
			[Address(RVA = "0xA4CDC8", Offset = "0xA4CDC8", VA = "0xA4CDC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xA4C600", Offset = "0xA4C600", VA = "0xA4C600")]
		[DebuggerHidden]
		public <DieSoundRoutine>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xA4CCE8", Offset = "0xA4CCE8", VA = "0xA4CCE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xA4CCEC", Offset = "0xA4CCEC", VA = "0xA4CCEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xA4CD88", Offset = "0xA4CD88", VA = "0xA4CD88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200021D")]
	[CompilerGenerated]
	private sealed class <BlackScreenRoutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerDeathControllerMobile <>4__this;

		[Token(Token = "0x17000144")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A47")]
			[Address(RVA = "0xA4CED8", Offset = "0xA4CED8", VA = "0xA4CED8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000145")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A49")]
			[Address(RVA = "0xA4CF20", Offset = "0xA4CF20", VA = "0xA4CF20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xA4C69C", Offset = "0xA4C69C", VA = "0xA4C69C")]
		[DebuggerHidden]
		public <BlackScreenRoutine>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xA4CDD0", Offset = "0xA4CDD0", VA = "0xA4CDD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xA4CDD4", Offset = "0xA4CDD4", VA = "0xA4CDD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xA4CEE0", Offset = "0xA4CEE0", VA = "0xA4CEE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BB0")]
	private const float shortDeathEffectDuration = 4.8f;

	[Token(Token = "0x4000BB1")]
	private const float longDeathEffectDuration = 7.8f;

	[Token(Token = "0x4000BB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private WaitForSeconds soundDelay;

	[Token(Token = "0x4000BB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WaitForSeconds blackScreenDelay;

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource audioSource;

	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip deathSound;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isLongTimeEffectWithRespawn;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PlayerMaterialsColorSetterMobile playerMaterialsColorSetter;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float currentDeathEffectDuration;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool dieCameraEffect;

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool isDead;

	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string gameOverInfo;

	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<AxeController> axesInHead;

	[Token(Token = "0x1700013F")]
	public override bool IsDead
	{
		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xA4C168", Offset = "0xA4C168", VA = "0xA4C168", Slot = "4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xA4C170", Offset = "0xA4C170", VA = "0xA4C170", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x17000140")]
	public override bool IsLongTimeEffectWithRespawn
	{
		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xA4C188", Offset = "0xA4C188", VA = "0xA4C188", Slot = "8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xA4C190", Offset = "0xA4C190", VA = "0xA4C190", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x17000141")]
	public override List<AxeController> AxesInHead
	{
		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xA4C1A0", Offset = "0xA4C1A0", VA = "0xA4C1A0", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A30")]
	[Address(RVA = "0xA4C1A8", Offset = "0xA4C1A8", VA = "0xA4C1A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A31")]
	[Address(RVA = "0xA4C2D0", Offset = "0xA4C2D0", VA = "0xA4C2D0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A32")]
	[Address(RVA = "0xA4C3F8", Offset = "0xA4C3F8", VA = "0xA4C3F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A33")]
	[Address(RVA = "0xA4C4D8", Offset = "0xA4C4D8", VA = "0xA4C4D8", Slot = "6")]
	public override void InitializeWithoutPlayer()
	{
	}

	[Token(Token = "0x6000A34")]
	[Address(RVA = "0xA4C580", Offset = "0xA4C580", VA = "0xA4C580", Slot = "7")]
	public override void InitializeWithPlayer()
	{
	}

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0xA4C58C", Offset = "0xA4C58C", VA = "0xA4C58C")]
	[IteratorStateMachine(typeof(<DieSoundRoutine>d__26))]
	private IEnumerator DieSoundRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000A36")]
	[Address(RVA = "0xA4C628", Offset = "0xA4C628", VA = "0xA4C628")]
	[IteratorStateMachine(typeof(<BlackScreenRoutine>d__27))]
	private IEnumerator BlackScreenRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0xA4C6C4", Offset = "0xA4C6C4", VA = "0xA4C6C4")]
	private void RespawnCallback()
	{
	}

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0xA4C6D0", Offset = "0xA4C6D0", VA = "0xA4C6D0", Slot = "12")]
	public override void Respawn()
	{
	}

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0xA4CA8C", Offset = "0xA4CA8C", VA = "0xA4CA8C", Slot = "11")]
	public override void Die(string gameOverInfo)
	{
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0xA4C3FC", Offset = "0xA4C3FC", VA = "0xA4C3FC")]
	private void TryApplyDeathEffect()
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0xA4C9E0", Offset = "0xA4C9E0", VA = "0xA4C9E0")]
	private void RemoveDeathEffect()
	{
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0xA4CBB8", Offset = "0xA4CBB8", VA = "0xA4CBB8")]
	private void SetPlayerMaterialsToGhost(bool isGhost)
	{
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0xA4CBDC", Offset = "0xA4CBDC", VA = "0xA4CBDC")]
	public PlayerDeathControllerMobile()
	{
	}
}
[Token(Token = "0x200021F")]
public class PlayerDeathControllerNetwork : MonoBehaviourPun, IPunObservable, IResetable
{
	[Token(Token = "0x4000BC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PlayerDeathController playerDeathController;

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0xA4CFFC", Offset = "0xA4CFFC", VA = "0xA4CFFC")]
	public void SetReferences(PlayerDeathController _playerDeathController)
	{
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0xA4D004", Offset = "0xA4D004", VA = "0xA4D004", Slot = "5")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0xA4D028", Offset = "0xA4D028", VA = "0xA4D028", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0xA4D118", Offset = "0xA4D118", VA = "0xA4D118")]
	public PlayerDeathControllerNetwork()
	{
	}
}
[Token(Token = "0x2000220")]
public class PlayerDeathControllerPC : PlayerDeathControllerWave
{
	[Token(Token = "0x2000221")]
	[CompilerGenerated]
	private sealed class <DieSoundRoutine>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerDeathControllerPC <>4__this;

		[Token(Token = "0x1700014B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A69")]
			[Address(RVA = "0xA4DF88", Offset = "0xA4DF88", VA = "0xA4DF88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A6B")]
			[Address(RVA = "0xA4DFD0", Offset = "0xA4DFD0", VA = "0xA4DFD0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xA4D8BC", Offset = "0xA4D8BC", VA = "0xA4D8BC")]
		[DebuggerHidden]
		public <DieSoundRoutine>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xA4DEF0", Offset = "0xA4DEF0", VA = "0xA4DEF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xA4DEF4", Offset = "0xA4DEF4", VA = "0xA4DEF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xA4DF90", Offset = "0xA4DF90", VA = "0xA4DF90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000222")]
	[CompilerGenerated]
	private sealed class <BlackScreenRoutine>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerDeathControllerPC <>4__this;

		[Token(Token = "0x1700014D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A6F")]
			[Address(RVA = "0xA4E0F0", Offset = "0xA4E0F0", VA = "0xA4E0F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A71")]
			[Address(RVA = "0xA4E138", Offset = "0xA4E138", VA = "0xA4E138", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xA4D958", Offset = "0xA4D958", VA = "0xA4D958")]
		[DebuggerHidden]
		public <BlackScreenRoutine>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xA4DFD8", Offset = "0xA4DFD8", VA = "0xA4DFD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xA4DFDC", Offset = "0xA4DFDC", VA = "0xA4DFDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xA4E0F8", Offset = "0xA4E0F8", VA = "0xA4E0F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BC6")]
	private const float intensity = 4f;

	[Token(Token = "0x4000BC7")]
	private const float intensityMultiplier = 4f;

	[Token(Token = "0x4000BC8")]
	private const float shortDeathEffectDuration = 4.8f;

	[Token(Token = "0x4000BC9")]
	private const float longDeathEffectDuration = 7.8f;

	[Token(Token = "0x4000BCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private WaitForSeconds soundDelay;

	[Token(Token = "0x4000BCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WaitForSeconds blackScreenDelay;

	[Token(Token = "0x4000BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x4000BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioClip deathSound;

	[Token(Token = "0x4000BCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PlayerMaterialsColorSetterPC playerMaterialsColorSetter;

	[Token(Token = "0x4000BCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private WeaponSwitchController weaponSwitchController;

	[Token(Token = "0x4000BD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool deathCameraEffect;

	[Token(Token = "0x4000BD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool isDead;

	[Token(Token = "0x4000BD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string gameOverInfo;

	[Token(Token = "0x4000BD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isLongTimeEffectWithRespawn;

	[Token(Token = "0x4000BD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<AxeController> axesInHead;

	[Token(Token = "0x4000BD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Blur blur;

	[Token(Token = "0x4000BD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ScreenOverlay screenOverlay;

	[Token(Token = "0x17000146")]
	public override bool IsDead
	{
		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xA4D120", Offset = "0xA4D120", VA = "0xA4D120", Slot = "4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xA4D128", Offset = "0xA4D128", VA = "0xA4D128", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x17000147")]
	private Blur Blur
	{
		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xA4D184", Offset = "0xA4D184", VA = "0xA4D184")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000148")]
	private ScreenOverlay ScreenOverlay
	{
		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xA4D234", Offset = "0xA4D234", VA = "0xA4D234")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000149")]
	public override bool IsLongTimeEffectWithRespawn
	{
		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xA4D2E4", Offset = "0xA4D2E4", VA = "0xA4D2E4", Slot = "8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xA4D2EC", Offset = "0xA4D2EC", VA = "0xA4D2EC", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x1700014A")]
	public override List<AxeController> AxesInHead
	{
		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xA4D2F8", Offset = "0xA4D2F8", VA = "0xA4D2F8", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0xA4D300", Offset = "0xA4D300", VA = "0xA4D300")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0xA4D428", Offset = "0xA4D428", VA = "0xA4D428")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0xA4D550", Offset = "0xA4D550", VA = "0xA4D550")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0xA4D694", Offset = "0xA4D694", VA = "0xA4D694", Slot = "6")]
	public override void InitializeWithoutPlayer()
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0xA4D83C", Offset = "0xA4D83C", VA = "0xA4D83C", Slot = "7")]
	public override void InitializeWithPlayer()
	{
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0xA4D848", Offset = "0xA4D848", VA = "0xA4D848")]
	[IteratorStateMachine(typeof(<DieSoundRoutine>d__34))]
	private IEnumerator DieSoundRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0xA4D8E4", Offset = "0xA4D8E4", VA = "0xA4D8E4")]
	[IteratorStateMachine(typeof(<BlackScreenRoutine>d__35))]
	private IEnumerator BlackScreenRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0xA4D980", Offset = "0xA4D980", VA = "0xA4D980")]
	private void RespawnCallback()
	{
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0xA4D98C", Offset = "0xA4D98C", VA = "0xA4D98C", Slot = "12")]
	public override void Respawn()
	{
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0xA4DC9C", Offset = "0xA4DC9C", VA = "0xA4DC9C", Slot = "11")]
	public override void Die(string gameOverInfo)
	{
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0xA4D554", Offset = "0xA4D554", VA = "0xA4D554")]
	private void TryApplyDeathEffect()
	{
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0xA4D760", Offset = "0xA4D760", VA = "0xA4D760")]
	private void RemoveDeathEffect()
	{
	}

	[Token(Token = "0x6000A64")]
	[Address(RVA = "0xA4DDC8", Offset = "0xA4DDC8", VA = "0xA4DDC8")]
	private void SetPlayerMaterialsToGhost(bool isGhost)
	{
	}

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0xA4DDEC", Offset = "0xA4DDEC", VA = "0xA4DDEC")]
	public PlayerDeathControllerPC()
	{
	}
}
[Token(Token = "0x2000224")]
public abstract class PlayerDeathControllerWave : PlayerDeathController
{
	[Token(Token = "0x1700014F")]
	public abstract bool IsLongTimeEffectWithRespawn
	{
		[Token(Token = "0x6000A75")]
		get;
		[Token(Token = "0x6000A76")]
		set;
	}

	[Token(Token = "0x17000150")]
	public abstract List<AxeController> AxesInHead
	{
		[Token(Token = "0x6000A77")]
		get;
	}

	[Token(Token = "0x6000A78")]
	public abstract void Die(string gameOverInfo);

	[Token(Token = "0x6000A79")]
	public abstract void Respawn();

	[Token(Token = "0x6000A7A")]
	[Address(RVA = "0xA4CCE0", Offset = "0xA4CCE0", VA = "0xA4CCE0")]
	protected PlayerDeathControllerWave()
	{
	}
}
[Token(Token = "0x2000225")]
public class PlayerExperienceGiver : MonoBehaviourPun
{
	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0xA4E214", Offset = "0xA4E214", VA = "0xA4E214")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A7C")]
	[Address(RVA = "0xA4E330", Offset = "0xA4E330", VA = "0xA4E330")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0xA4E44C", Offset = "0xA4E44C", VA = "0xA4E44C")]
	private void SaveEarnedExp(int arg)
	{
	}

	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0xA4E514", Offset = "0xA4E514", VA = "0xA4E514")]
	[PunRPC]
	private void RpcSaveEarnedExp()
	{
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0xA4E518", Offset = "0xA4E518", VA = "0xA4E518")]
	private void SaveEarnedExp()
	{
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0xA4E630", Offset = "0xA4E630", VA = "0xA4E630")]
	public PlayerExperienceGiver()
	{
	}
}
[Token(Token = "0x2000226")]
public class PlayerProgressionLoader : MonoBehaviour
{
	[Token(Token = "0x6000A81")]
	[Address(RVA = "0xA4E638", Offset = "0xA4E638", VA = "0xA4E638")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A82")]
	[Address(RVA = "0xA4E6B8", Offset = "0xA4E6B8", VA = "0xA4E6B8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0xA47064", Offset = "0xA47064", VA = "0xA47064")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0xA4E738", Offset = "0xA4E738", VA = "0xA4E738")]
	private void LoadPlayerProgression()
	{
	}

	[Token(Token = "0x6000A85")]
	[Address(RVA = "0xA4E830", Offset = "0xA4E830", VA = "0xA4E830")]
	private void LoadDefaultState()
	{
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0xA4EEBC", Offset = "0xA4EEBC", VA = "0xA4EEBC")]
	private void ReloadPlayerProgression()
	{
	}

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0xA4EEC0", Offset = "0xA4EEC0", VA = "0xA4EEC0")]
	public PlayerProgressionLoader()
	{
	}
}
[Token(Token = "0x2000227")]
public class PoserSynchronizer : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x2000228")]
	private struct behaviourData
	{
		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float previousValue;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float nextValue;
	}

	[Token(Token = "0x4000BDF")]
	private const float timerMultiplier = 10f;

	[Token(Token = "0x4000BE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timer;

	[Token(Token = "0x4000BE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private behaviourData[] behavioursDatas;

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0xA4EEC8", Offset = "0xA4EEC8", VA = "0xA4EEC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0xA4EECC", Offset = "0xA4EECC", VA = "0xA4EECC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0xA4EF54", Offset = "0xA4EF54", VA = "0xA4EF54", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0xA4EFBC", Offset = "0xA4EFBC", VA = "0xA4EFBC")]
	public PoserSynchronizer()
	{
	}
}
[Token(Token = "0x2000229")]
public class WeaponMaterialController : MonoBehaviour
{
	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<MaterialModelInfo> materialModelInfos;

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0xA4EFC4", Offset = "0xA4EFC4", VA = "0xA4EFC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0xA4F270", Offset = "0xA4F270", VA = "0xA4F270")]
	public WeaponMaterialController()
	{
	}
}
[Token(Token = "0x200022A")]
public class PlayerEquipment : MonoBehaviour
{
	[Token(Token = "0x4000BE6")]
	private const string PlayerGoldString = "PlayerGold";

	[Token(Token = "0x4000BE7")]
	private const string PlayerBowString = "PlayerBow";

	[Token(Token = "0x4000BE8")]
	private const string PlayerHelmetString = "PlayerHelmet";

	[Token(Token = "0x4000BE9")]
	private const string PreviousBowString = "PreviousBow";

	[Token(Token = "0x4000BEA")]
	private const string PreviousHelmetString = "PreviousHelmet";

	[Token(Token = "0x4000BEB")]
	private const string StandardBowAndHelmetString = "StandardBowAndHelmet";

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int cachedWaveGold;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string cachedBowName;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string cachedHelmetName;

	[Token(Token = "0x4000BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int cachedPlayerGold;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static bool exist;

	[Token(Token = "0x4000BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Action<int> OnPlayerGoldChange;

	[Token(Token = "0x17000151")]
	public static Dictionary<string, bool> BoughtItems
	{
		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xA4F278", Offset = "0xA4F278", VA = "0xA4F278")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xA4F2D0", Offset = "0xA4F2D0", VA = "0xA4F2D0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000152")]
	public static int CachedPlayerGold
	{
		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xA4F864", Offset = "0xA4F864", VA = "0xA4F864")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xA4E97C", Offset = "0xA4E97C", VA = "0xA4E97C")]
		set
		{
		}
	}

	[Token(Token = "0x17000153")]
	public static int Gold
	{
		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xA4F8BC", Offset = "0xA4F8BC", VA = "0xA4F8BC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xA4F950", Offset = "0xA4F950", VA = "0xA4F950")]
		set
		{
		}
	}

	[Token(Token = "0x17000154")]
	public static string EquipedBowName
	{
		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xA4FA1C", Offset = "0xA4FA1C", VA = "0xA4FA1C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xA4FB68", Offset = "0xA4FB68", VA = "0xA4FB68")]
		set
		{
		}
	}

	[Token(Token = "0x17000155")]
	public static string EquipedHelmetName
	{
		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xA4FC14", Offset = "0xA4FC14", VA = "0xA4FC14")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xA4FD64", Offset = "0xA4FD64", VA = "0xA4FD64")]
		set
		{
		}
	}

	[Token(Token = "0x17000156")]
	public static string PreviousEquipedBow
	{
		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xA50300", Offset = "0xA50300", VA = "0xA50300")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xA5028C", Offset = "0xA5028C", VA = "0xA5028C")]
		set
		{
		}
	}

	[Token(Token = "0x17000157")]
	public static string PreviousEquipedHelmet
	{
		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xA501D8", Offset = "0xA501D8", VA = "0xA501D8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xA503B0", Offset = "0xA503B0", VA = "0xA503B0")]
		set
		{
		}
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0xA4F330", Offset = "0xA4F330", VA = "0xA4F330")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0xA4F630", Offset = "0xA4F630", VA = "0xA4F630")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0xA4FE10", Offset = "0xA4FE10", VA = "0xA4FE10")]
	private void GiveGoldToPlayer(int amountOfGold, Vector3 arg2)
	{
	}

	[Token(Token = "0x6000A9B")]
	[Address(RVA = "0xA4FEA0", Offset = "0xA4FEA0", VA = "0xA4FEA0")]
	public static void SetIsItemBought(EquipmentItemKey itemKey, bool isBought)
	{
	}

	[Token(Token = "0x6000A9C")]
	[Address(RVA = "0xA4FF04", Offset = "0xA4FF04", VA = "0xA4FF04")]
	public static void SetIsItemBoughtCached(EquipmentItemKey itemKey, bool isBought)
	{
	}

	[Token(Token = "0x6000A9D")]
	[Address(RVA = "0xA4FFAC", Offset = "0xA4FFAC", VA = "0xA4FFAC")]
	public static void SetIsItemBoughtCached(string itemKey, bool isBought)
	{
	}

	[Token(Token = "0x6000A9E")]
	[Address(RVA = "0xA5006C", Offset = "0xA5006C", VA = "0xA5006C")]
	public static void SetIsItemUsed(EquipmentItemType equipmentItemType, EquipmentItemKey equipmentItemKey)
	{
	}

	[Token(Token = "0x6000A9F")]
	[Address(RVA = "0xA50424", Offset = "0xA50424", VA = "0xA50424")]
	public static bool GetIsItemUsed(EquipmentItemType equipmentItemType, EquipmentItemKey equipmentItemKey)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA0")]
	[Address(RVA = "0xA506C0", Offset = "0xA506C0", VA = "0xA506C0")]
	public static void InitEquipment()
	{
	}

	[Token(Token = "0x6000AA1")]
	[Address(RVA = "0xA50B78", Offset = "0xA50B78", VA = "0xA50B78")]
	public static bool GetIsItemBoughtOnline(EquipmentItemKey itemKey)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA2")]
	[Address(RVA = "0xA4EA14", Offset = "0xA4EA14", VA = "0xA4EA14")]
	public static void InitEquipmentWithDefaults()
	{
	}

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0xA505E4", Offset = "0xA505E4", VA = "0xA505E4")]
	public static bool GetIsItemBought(string itemName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0xA50CCC", Offset = "0xA50CCC", VA = "0xA50CCC")]
	public static void GiveGoldOnWaveEnd(int waveCount)
	{
	}

	[Token(Token = "0x6000AA5")]
	[Address(RVA = "0xA50D18", Offset = "0xA50D18", VA = "0xA50D18")]
	public static void SaveGold()
	{
	}

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0xA50C1C", Offset = "0xA50C1C", VA = "0xA50C1C")]
	private static bool IsDefaultItem(string itemName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0xA50E64", Offset = "0xA50E64", VA = "0xA50E64")]
	public static EquipmentItemType GetEquipmentTypeFromEquipmentKey(EquipmentItemKey equipmentKey)
	{
		return default(EquipmentItemType);
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0xA50F28", Offset = "0xA50F28", VA = "0xA50F28")]
	public static List<EquipmentItemKey> GetAllSetKeys()
	{
		return null;
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0xA51130", Offset = "0xA51130", VA = "0xA51130")]
	public static List<EquipmentItemKey> GetAllHelmetKeys()
	{
		return null;
	}

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0xA51338", Offset = "0xA51338", VA = "0xA51338")]
	public static List<EquipmentItemKey> GetAllBowKeys()
	{
		return null;
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0xA51540", Offset = "0xA51540", VA = "0xA51540")]
	public static void ClearCachedBowAndHelmet()
	{
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0xA515C4", Offset = "0xA515C4", VA = "0xA515C4")]
	public PlayerEquipment()
	{
	}
}
[Token(Token = "0x200022C")]
public class PlayerModelScaleAdjuster : MonoBehaviour
{
	[Token(Token = "0x4000BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform cameraRig;

	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform head;

	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform modelEyeLevel;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float heightOnScale1;

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0xA518D8", Offset = "0xA518D8", VA = "0xA518D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0xA51920", Offset = "0xA51920", VA = "0xA51920")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0xA51924", Offset = "0xA51924", VA = "0xA51924")]
	[ContextMenu("SetSize")]
	private void SetSize()
	{
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0xA519F4", Offset = "0xA519F4", VA = "0xA519F4")]
	public PlayerModelScaleAdjuster()
	{
	}
}
[Token(Token = "0x200022D")]
public class PrefabMigrator : MonoBehaviour
{
	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0xA519FC", Offset = "0xA519FC", VA = "0xA519FC")]
	public PrefabMigrator()
	{
	}
}
[Token(Token = "0x200022E")]
public class RainSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject FirstRain;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject SecondRain;

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool secondRain;

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0xA51A04", Offset = "0xA51A04", VA = "0xA51A04")]
	private void Update()
	{
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0xA51A60", Offset = "0xA51A60", VA = "0xA51A60")]
	public RainSwitcher()
	{
	}
}
[Token(Token = "0x200022F")]
public class RandomizeLight : MonoBehaviour
{
	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0xA51A68", Offset = "0xA51A68", VA = "0xA51A68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0xA51AD8", Offset = "0xA51AD8", VA = "0xA51AD8")]
	public RandomizeLight()
	{
	}
}
[Token(Token = "0x2000230")]
public class HelmetsSetterInMenu : MonoBehaviour
{
	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<PlayerHelmetsSetter> helmetsSetters;

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0xA51AE0", Offset = "0xA51AE0", VA = "0xA51AE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0xA51D00", Offset = "0xA51D00", VA = "0xA51D00")]
	public HelmetsSetterInMenu()
	{
	}
}
[Token(Token = "0x2000231")]
public class LobbyReferenceSetter : MonoBehaviour, ISettable
{
	[Token(Token = "0x4000BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LobbyWindowsController lobbyWindowsController;

	[Token(Token = "0x4000C00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ServerListController serverListControllerStandard;

	[Token(Token = "0x4000C01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ServerListController serverListControllerTournament;

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0xA51D08", Offset = "0xA51D08", VA = "0xA51D08", Slot = "4")]
	public void SetReferences()
	{
	}

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0xA51D78", Offset = "0xA51D78", VA = "0xA51D78")]
	public LobbyReferenceSetter()
	{
	}
}
[Token(Token = "0x2000232")]
public class PlayerHelmetsSetter : MonoBehaviour, ISettable
{
	[Token(Token = "0x4000C02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<MeshRenderer> helmetsRenderers;

	[Token(Token = "0x4000C03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<MeshRenderer> helmetsRenderersMobile;

	[Token(Token = "0x4000C04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ScriptableObjectPlayerHelmets helmetsMaterialsScriptableObject;

	[Token(Token = "0x17000158")]
	public List<MeshRenderer> HelmetsRenderers
	{
		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xA51D80", Offset = "0xA51D80", VA = "0xA51D80")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xA51DF0", Offset = "0xA51DF0", VA = "0xA51DF0")]
		set
		{
		}
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0xA51E7C", Offset = "0xA51E7C", VA = "0xA51E7C", Slot = "4")]
	public void SetReferences()
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0xA51C28", Offset = "0xA51C28", VA = "0xA51C28")]
	public void SetMaterialsDependingOnPlatform()
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0xA51E80", Offset = "0xA51E80", VA = "0xA51E80")]
	private void SetMaterials(List<Material> helmetsMaterials)
	{
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0xA51F68", Offset = "0xA51F68", VA = "0xA51F68")]
	public PlayerHelmetsSetter()
	{
	}
}
[Token(Token = "0x2000233")]
public class PlayerMenuReferenceSetter : MonoBehaviour
{
	[Token(Token = "0x4000C05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Renderer> gauntletRenderers;

	[Token(Token = "0x4000C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PlayerColorSettings playerColorSetterMobile;

	[Token(Token = "0x4000C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PlayerColorSettings playerColorSetterPC;

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0xA51F70", Offset = "0xA51F70", VA = "0xA51F70")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0xA52010", Offset = "0xA52010", VA = "0xA52010")]
	public PlayerMenuReferenceSetter()
	{
	}
}
[Serializable]
[Token(Token = "0x2000234")]
public class PlayerReferences
{
	[Token(Token = "0x4000C08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("RPCCaller/PI/PC/TPH")]
	public PlayerDeathController PlayerDeathController;

	[Token(Token = "0x4000C09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("PlayerColorSetter/PlayerModelFadingController")]
	public PlayerMaterialsColorSetter PlayerMaterialsColorSetter;

	[Token(Token = "0x4000C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("PlayerColorSetter")]
	public float timeUntilRespawn;

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0xA52040", Offset = "0xA52040", VA = "0xA52040")]
	public PlayerReferences()
	{
	}
}
[Serializable]
[Token(Token = "0x2000235")]
public class ZombieMonsterReferences
{
	[Token(Token = "0x4000C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("BodyDissapearController")]
	public EnemyRenderers EnemyRenderers;

	[Token(Token = "0x4000C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ShadowCastingMode ShadowCastingMode;

	[Token(Token = "0x4000C0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("ZombieAnimatorController")]
	public Animator animator;

	[Token(Token = "0x4000C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("ZombieSoundController")]
	public ZombieSoundController zombieSoundController;

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0xA52048", Offset = "0xA52048", VA = "0xA52048")]
	public ZombieMonsterReferences()
	{
	}
}
[Token(Token = "0x2000236")]
public class ZombieMonsterReferenceSetter : MonoBehaviour, ISettable
{
	[Token(Token = "0x4000C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Components")]
	[SerializeField]
	private BodyDissapearController bodyDissapearController;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ZombieAnimatorController zombieAnimatorController;

	[Token(Token = "0x4000C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ZombieBulletHitController zombieBulletHitController;

	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ZombieArrowHitController zombieArrowHitController;

	[Token(Token = "0x4000C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ZombieGrenadeHitController zombieGrenadeHitController;

	[Token(Token = "0x4000C14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private EnemyAnimatorStateController enemyAnimatorStateController;

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Mobile References")]
	[SerializeField]
	private ZombieMonsterReferences zombieReferencesMobile;

	[Token(Token = "0x4000C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Header("PC References")]
	private ZombieMonsterReferences zombieReferencesPC;

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0xA52050", Offset = "0xA52050", VA = "0xA52050", Slot = "4")]
	public void SetReferences()
	{
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0xA52114", Offset = "0xA52114", VA = "0xA52114")]
	private void SetReferences(ZombieMonsterReferences zombieReferences)
	{
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0xA521B0", Offset = "0xA521B0", VA = "0xA521B0")]
	public ZombieMonsterReferenceSetter()
	{
	}
}
[Serializable]
[Token(Token = "0x2000237")]
public class ZombieReferences
{
	[Token(Token = "0x4000C17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("BodyDissapearController")]
	public EnemyRenderers EnemyRenderers;

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ShadowCastingMode ShadowCastingMode;

	[Token(Token = "0x4000C19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("ZombieAnimatorController")]
	public Animator animator;

	[Token(Token = "0x4000C1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("ZombieSoundController")]
	public ZombieSoundController zombieSoundController;

	[Token(Token = "0x4000C1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("BodyPartDetachingManager")]
	public BodyPartDetachingManager bodyPartDetachingManager;

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0xA521B8", Offset = "0xA521B8", VA = "0xA521B8")]
	public ZombieReferences()
	{
	}
}
[Token(Token = "0x2000238")]
public class ZombieReferenceSetter : MonoBehaviour, ISettable
{
	[Token(Token = "0x4000C1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Components")]
	[SerializeField]
	private BodyDissapearController bodyDissapearController;

	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ZombieAnimatorController zombieAnimatorController;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ZombieBulletHitController zombieBulletHitController;

	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ZombieArrowHitController zombieArrowHitController;

	[Token(Token = "0x4000C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ZombieGrenadeHitController zombieGrenadeHitController;

	[Token(Token = "0x4000C21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RandomAnimationsChooser randomAnimationsChooser;

	[Token(Token = "0x4000C22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Mobile References")]
	[SerializeField]
	private ZombieReferences zombieReferencesMobile;

	[Token(Token = "0x4000C23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Header("PC References")]
	private ZombieReferences zombieReferencesPC;

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0xA521C0", Offset = "0xA521C0", VA = "0xA521C0", Slot = "4")]
	public void SetReferences()
	{
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0xA52284", Offset = "0xA52284", VA = "0xA52284")]
	private void SetReferences(ZombieReferences zombieReferences)
	{
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0xA52320", Offset = "0xA52320", VA = "0xA52320")]
	public ZombieReferenceSetter()
	{
	}
}
[Token(Token = "0x2000239")]
public class ResetFirstTime : MonoBehaviour
{
	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0xA52328", Offset = "0xA52328", VA = "0xA52328")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0xA523F4", Offset = "0xA523F4", VA = "0xA523F4")]
	public ResetFirstTime()
	{
	}
}
[Token(Token = "0x200023A")]
public class rotateObject : MonoBehaviour
{
	[Token(Token = "0x4000C24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int speed;

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0xA523FC", Offset = "0xA523FC", VA = "0xA523FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AD9")]
	[Address(RVA = "0xA524A4", Offset = "0xA524A4", VA = "0xA524A4")]
	public rotateObject()
	{
	}
}
[Token(Token = "0x200023B")]
public class Rotator : MonoBehaviour
{
	[Token(Token = "0x4000C25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve curve;

	[Token(Token = "0x4000C26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x4000C27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float duration;

	[Token(Token = "0x4000C28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float time;

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0xA524B4", Offset = "0xA524B4", VA = "0xA524B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000ADB")]
	[Address(RVA = "0xA52588", Offset = "0xA52588", VA = "0xA52588")]
	public Rotator()
	{
	}
}
[Token(Token = "0x200023C")]
[CreateAssetMenu(fileName = "HelmetsMaterials", menuName = "HelmetsMaterials", order = 2)]
public class ScriptableObjectPlayerHelmets : ScriptableObject
{
	[Token(Token = "0x4000C29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Material> helmetsMaterialsPC;

	[Token(Token = "0x4000C2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<Material> helmetsMaterialsMobile;

	[Token(Token = "0x17000159")]
	public List<Material> HelmetsMaterialsPC
	{
		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xA52590", Offset = "0xA52590", VA = "0xA52590")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700015A")]
	public List<Material> HelmetsMaterialsMobile
	{
		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xA52598", Offset = "0xA52598", VA = "0xA52598")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000ADE")]
	[Address(RVA = "0xA525A0", Offset = "0xA525A0", VA = "0xA525A0")]
	public ScriptableObjectPlayerHelmets()
	{
	}
}
[Token(Token = "0x200023D")]
public class WaterSplashController : MonoBehaviour, IResetable
{
	[Token(Token = "0x4000C2B")]
	private const string waterTag = "Water";

	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool waterSplashEnabled;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isBigSplash;

	[Token(Token = "0x4000C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool isInWater;

	[Token(Token = "0x6000ADF")]
	[Address(RVA = "0xA525A8", Offset = "0xA525A8", VA = "0xA525A8")]
	public void CreateWaterSplash()
	{
	}

	[Token(Token = "0x6000AE0")]
	[Address(RVA = "0xA52608", Offset = "0xA52608", VA = "0xA52608")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x6000AE1")]
	[Address(RVA = "0xA52690", Offset = "0xA52690", VA = "0xA52690")]
	private void TryToMakeBigSplash()
	{
	}

	[Token(Token = "0x6000AE2")]
	[Address(RVA = "0xA526C0", Offset = "0xA526C0", VA = "0xA526C0")]
	private void CreateBigSplashIfNotYetCreated()
	{
	}

	[Token(Token = "0x6000AE3")]
	[Address(RVA = "0xA526E4", Offset = "0xA526E4", VA = "0xA526E4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000AE4")]
	[Address(RVA = "0xA52748", Offset = "0xA52748", VA = "0xA52748", Slot = "4")]
	public void ResetElement()
	{
	}

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0xA52754", Offset = "0xA52754", VA = "0xA52754")]
	public WaterSplashController()
	{
	}
}
[Token(Token = "0x200023E")]
public class SkyboxExposureSwitch : MonoBehaviour
{
	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(1f, 5f)]
	public float normalIntensity;

	[Token(Token = "0x4000C31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(1f, 5f)]
	public float thunderIntensity;

	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0xA5275C", Offset = "0xA5275C", VA = "0xA5275C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AE7")]
	[Address(RVA = "0xA527B8", Offset = "0xA527B8", VA = "0xA527B8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AE8")]
	[Address(RVA = "0xA52814", Offset = "0xA52814", VA = "0xA52814")]
	public SkyboxExposureSwitch()
	{
	}
}
[Token(Token = "0x200023F")]
public class SlotSelectScreen : MonoBehaviour
{
	[Token(Token = "0x4000C32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] itemsToDisable;

	[Token(Token = "0x6000AE9")]
	[Address(RVA = "0xA5281C", Offset = "0xA5281C", VA = "0xA5281C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AEA")]
	[Address(RVA = "0xA52880", Offset = "0xA52880", VA = "0xA52880")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AEB")]
	[Address(RVA = "0xA528E4", Offset = "0xA528E4", VA = "0xA528E4")]
	public SlotSelectScreen()
	{
	}
}
[Token(Token = "0x2000240")]
public class SoftFlicker : MonoBehaviour
{
	[Token(Token = "0x2000241")]
	[CompilerGenerated]
	private sealed class <Flicker>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoftFlicker <>4__this;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x1700015B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AF2")]
			[Address(RVA = "0xA52A9C", Offset = "0xA52A9C", VA = "0xA52A9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AF4")]
			[Address(RVA = "0xA52AE4", Offset = "0xA52AE4", VA = "0xA52AE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xA52994", Offset = "0xA52994", VA = "0xA52994")]
		[DebuggerHidden]
		public <Flicker>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xA529D0", Offset = "0xA529D0", VA = "0xA529D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xA529D4", Offset = "0xA529D4", VA = "0xA529D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xA52AA4", Offset = "0xA52AA4", VA = "0xA52AA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minIntensity;

	[Token(Token = "0x4000C34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxIntensity;

	[Token(Token = "0x4000C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light flickerLight;

	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float delay;

	[Token(Token = "0x6000AEC")]
	[Address(RVA = "0xA528EC", Offset = "0xA528EC", VA = "0xA528EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0xA52910", Offset = "0xA52910", VA = "0xA52910")]
	[IteratorStateMachine(typeof(<Flicker>d__5))]
	private IEnumerator Flicker(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0xA529BC", Offset = "0xA529BC", VA = "0xA529BC")]
	public SoftFlicker()
	{
	}
}
[Token(Token = "0x2000242")]
public class ArrowFire : MonoBehaviour
{
	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isFired;

	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Fire fire;

	[Token(Token = "0x4000C3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] fireArrow;

	[Token(Token = "0x4000C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] burnArrow;

	[Token(Token = "0x4000C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] extinctionArrow;

	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource[] fireSounds;

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0xA52AEC", Offset = "0xA52AEC", VA = "0xA52AEC")]
	public void StopFire()
	{
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0xA52C2C", Offset = "0xA52C2C", VA = "0xA52C2C")]
	public void StartFire()
	{
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0xA52E7C", Offset = "0xA52E7C", VA = "0xA52E7C")]
	public void OnCollisionEnter(Collision coll)
	{
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0xA52F08", Offset = "0xA52F08", VA = "0xA52F08")]
	public ArrowFire()
	{
	}
}
[Token(Token = "0x2000243")]
public class BreakingInIndicationTrigger : MonoBehaviour
{
	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpecialSoundEffects SpecialSoundsEffects;

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0xA52F10", Offset = "0xA52F10", VA = "0xA52F10")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0xA52FF8", Offset = "0xA52FF8", VA = "0xA52FF8")]
	public BreakingInIndicationTrigger()
	{
	}
}
[Token(Token = "0x2000244")]
public class WalkSound : MonoBehaviour
{
	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string _tag;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HealthStateController healthStateController;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource walk;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] clips;

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0xA53000", Offset = "0xA53000", VA = "0xA53000")]
	private void OnTriggerEnter(Collider coll)
	{
	}

	[Token(Token = "0x6000AFC")]
	[Address(RVA = "0xA530E0", Offset = "0xA530E0", VA = "0xA530E0")]
	public WalkSound()
	{
	}
}
[Token(Token = "0x2000245")]
public class Spawner : MonoBehaviour
{
	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject pref_Obj;

	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve curveInterval;

	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float tempTime;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float time;

	[Token(Token = "0x6000AFD")]
	[Address(RVA = "0xA53138", Offset = "0xA53138", VA = "0xA53138")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AFE")]
	[Address(RVA = "0xA53154", Offset = "0xA53154", VA = "0xA53154")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AFF")]
	[Address(RVA = "0xA53308", Offset = "0xA53308", VA = "0xA53308")]
	public Spawner()
	{
	}
}
[Token(Token = "0x2000246")]
public class SpawnParticles : MonoBehaviour
{
	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> particles;

	[Token(Token = "0x4000C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int index;

	[Token(Token = "0x4000C4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject currentParticle;

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0xA53310", Offset = "0xA53310", VA = "0xA53310")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0xA534D4", Offset = "0xA534D4", VA = "0xA534D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0xA53778", Offset = "0xA53778", VA = "0xA53778")]
	public SpawnParticles()
	{
	}
}
[Token(Token = "0x2000247")]
public class SpawnVoice : MonoBehaviourPun
{
	[Token(Token = "0x6000B03")]
	[Address(RVA = "0xA53780", Offset = "0xA53780", VA = "0xA53780")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0xA537E4", Offset = "0xA537E4", VA = "0xA537E4")]
	public SpawnVoice()
	{
	}
}
[Serializable]
[Token(Token = "0x2000248")]
public struct StepSound
{
	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public AudioClip soundClip;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] soundPlayMomentsInAnimationInSeconds;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string animationStateName;
}
[Token(Token = "0x2000249")]
public class StepSoundController : MonoBehaviour
{
	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StepSound[] stepSounds;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator animator;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource stepAudioSource;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastStepTime;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int lastAnimationStateHash;

	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool changedAnimationStateFromLastStepSound;

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0xA537EC", Offset = "0xA537EC", VA = "0xA537EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0xA53B28", Offset = "0xA53B28", VA = "0xA53B28")]
	public StepSoundController()
	{
	}
}
[Token(Token = "0x200024A")]
public static class LocalStorageController
{
	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool DEV_SHOULDSAVELOCALLY;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int staticCounter;

	[Token(Token = "0x4000C58")]
	private const string PlayerExperienceKey = "PlayerExperienceKey";

	[Token(Token = "0x4000C59")]
	private const string PlayerGoldKey = "PlayerGoldKey";

	[Token(Token = "0x4000C5A")]
	private const string PlayerEquipmentKey = "PlayerItemsKey";

	[Token(Token = "0x1700015D")]
	public static bool HasSomethingSaved
	{
		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xA53B3C", Offset = "0xA53B3C", VA = "0xA53B3C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700015E")]
	public static int Gold
	{
		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xA4F908", Offset = "0xA4F908", VA = "0xA4F908")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xA4F9D0", Offset = "0xA4F9D0", VA = "0xA4F9D0")]
		set
		{
		}
	}

	[Token(Token = "0x1700015F")]
	public static int Experience
	{
		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xA53BD8", Offset = "0xA53BD8", VA = "0xA53BD8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xA4E5E4", Offset = "0xA4E5E4", VA = "0xA4E5E4")]
		set
		{
		}
	}

	[Token(Token = "0x6000B0C")]
	[Address(RVA = "0xA53C20", Offset = "0xA53C20", VA = "0xA53C20")]
	public static void AddEquipmentItem(EquipmentItemKey equipmentItemKey)
	{
	}

	[Token(Token = "0x6000B0D")]
	[Address(RVA = "0xA4E8B8", Offset = "0xA4E8B8", VA = "0xA4E8B8")]
	public static void Load()
	{
	}

	[Token(Token = "0x6000B0E")]
	[Address(RVA = "0xA53CEC", Offset = "0xA53CEC", VA = "0xA53CEC")]
	private static void LoadShopItems()
	{
	}

	[Token(Token = "0x6000B0F")]
	[Address(RVA = "0xA54164", Offset = "0xA54164", VA = "0xA54164")]
	private static void LoadIsItemBought(EquipmentItemKey key)
	{
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0xA540E4", Offset = "0xA540E4", VA = "0xA540E4")]
	private static List<string> GetEquipmentFromPrefs()
	{
		return null;
	}
}
[Token(Token = "0x200024C")]
public static class OculusCloudStorage2Controller
{
	[Token(Token = "0x4000C5C")]
	private const string saveFileName = "save.dat";

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string saveFileDirectoryPath;

	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static OculusCloudStorage2SaveData save;

	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Action OnSaveFileDirectoryPathSuccessfullyLoaded;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Action OnProgressSaved;

	[Token(Token = "0x17000160")]
	private static string SaveFilePath
	{
		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xA54294", Offset = "0xA54294", VA = "0xA54294")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000161")]
	public static int Gold
	{
		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xA54308", Offset = "0xA54308", VA = "0xA54308")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xA5436C", Offset = "0xA5436C", VA = "0xA5436C")]
		set
		{
		}
	}

	[Token(Token = "0x17000162")]
	public static int Experience
	{
		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xA546CC", Offset = "0xA546CC", VA = "0xA546CC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xA54730", Offset = "0xA54730", VA = "0xA54730")]
		set
		{
		}
	}

	[Token(Token = "0x6000B19")]
	[Address(RVA = "0xA54798", Offset = "0xA54798", VA = "0xA54798")]
	public static void AddEquipmentItem(EquipmentItemKey equipmentToAddKey)
	{
	}

	[Token(Token = "0x6000B1A")]
	[Address(RVA = "0xA5487C", Offset = "0xA5487C", VA = "0xA5487C")]
	public static void Load()
	{
	}

	[Token(Token = "0x6000B1B")]
	[Address(RVA = "0xA5491C", Offset = "0xA5491C", VA = "0xA5491C")]
	public static void SaveNewPlayerProgressToFile()
	{
	}

	[Token(Token = "0x6000B1C")]
	[Address(RVA = "0xA543D4", Offset = "0xA543D4", VA = "0xA543D4")]
	private static void SavePlayerProgressToFile()
	{
	}

	[Token(Token = "0x6000B1D")]
	[Address(RVA = "0xA54D88", Offset = "0xA54D88", VA = "0xA54D88")]
	private static void LoadPlayerProgressFromCachedPath()
	{
	}

	[Token(Token = "0x6000B1E")]
	[Address(RVA = "0xA550B8", Offset = "0xA550B8", VA = "0xA550B8")]
	private static void CreateNewSaveFile()
	{
	}

	[Token(Token = "0x6000B1F")]
	[Address(RVA = "0xA55388", Offset = "0xA55388", VA = "0xA55388")]
	private static void LoadSaveFromFile()
	{
	}

	[Token(Token = "0x6000B20")]
	[Address(RVA = "0xA5568C", Offset = "0xA5568C", VA = "0xA5568C")]
	private static void LoadEquipment()
	{
	}

	[Token(Token = "0x6000B21")]
	[Address(RVA = "0xA55A60", Offset = "0xA55A60", VA = "0xA55A60")]
	private static List<string> GetEquipmentFromSave()
	{
		return null;
	}

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0xA54918", Offset = "0xA54918", VA = "0xA54918")]
	private static void LoadSaveFileDirectoryPath(Action OnSaveFileDirectoryPathSuccessfullyLoaded)
	{
	}
}
[Serializable]
[Token(Token = "0x200024F")]
public class OculusCloudStorage2SaveData
{
	[Token(Token = "0x4000C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int Experience;

	[Token(Token = "0x4000C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int Gold;

	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Equipment;

	[Token(Token = "0x6000B2B")]
	[Address(RVA = "0xA54D80", Offset = "0xA54D80", VA = "0xA54D80")]
	public OculusCloudStorage2SaveData()
	{
	}
}
[Token(Token = "0x2000250")]
public class OculusCloudStorageController : MonoBehaviour
{
	[Token(Token = "0x6000B2C")]
	[Address(RVA = "0xA55D64", Offset = "0xA55D64", VA = "0xA55D64")]
	public OculusCloudStorageController()
	{
	}
}
[Token(Token = "0x2000251")]
public static class SteamCloudStorageController
{
}
[Token(Token = "0x2000252")]
public static class ElvenAssassinViveportStatsController
{
}
[Token(Token = "0x2000253")]
public class PositionHandlerOnPlayerTeleport : MonoBehaviourPun
{
	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 positionBeforeTeleport;

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0xA55D6C", Offset = "0xA55D6C", VA = "0xA55D6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0xA55E50", Offset = "0xA55E50", VA = "0xA55E50")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0xA55F10", Offset = "0xA55F10", VA = "0xA55F10")]
	private void CachePositionBeforeTeleport(Vector3 position)
	{
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0xA55F1C", Offset = "0xA55F1C", VA = "0xA55F1C")]
	private void MoveTransform(Vector3 position)
	{
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0xA560C4", Offset = "0xA560C4", VA = "0xA560C4")]
	[PunRPC]
	private void RPCMoveTransform(Vector3 position)
	{
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0xA5611C", Offset = "0xA5611C", VA = "0xA5611C")]
	public PositionHandlerOnPlayerTeleport()
	{
	}
}
[Token(Token = "0x2000254")]
public class TeleportHighlighter : MonoBehaviour
{
	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Material highlightedGradient;

	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material normalGradient;

	[Token(Token = "0x4000C6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<GameObject> cylinders;

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0xA5617C", Offset = "0xA5617C", VA = "0xA5617C")]
	public void HighlightTeleport(bool on)
	{
	}

	[Token(Token = "0x6000B34")]
	[Address(RVA = "0xA56328", Offset = "0xA56328", VA = "0xA56328")]
	public TeleportHighlighter()
	{
	}
}
[Token(Token = "0x2000255")]
public class TerrainTextureController : MonoBehaviour
{
	[Token(Token = "0x4000C6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 terrainSize;

	[Token(Token = "0x4000C6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector2 alphamapSize;

	[Token(Token = "0x4000C6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 terrainPosition;

	[Token(Token = "0x6000B35")]
	[Address(RVA = "0xA56330", Offset = "0xA56330", VA = "0xA56330")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B36")]
	[Address(RVA = "0xA56444", Offset = "0xA56444", VA = "0xA56444")]
	public float GetTerrainTextureWeight(Vector3 positionInWorld, int textureIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0xA56530", Offset = "0xA56530", VA = "0xA56530")]
	public TerrainTextureController()
	{
	}
}
[Token(Token = "0x2000256")]
public class TesterButtonDisabler : MonoBehaviourPun, IInRoomCallbacks
{
	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject testerButton;

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0xA57538", Offset = "0xA57538", VA = "0xA57538")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0xA57558", Offset = "0xA57558", VA = "0xA57558")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0xA57614", Offset = "0xA57614", VA = "0xA57614")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0xA576AC", Offset = "0xA576AC", VA = "0xA576AC", Slot = "8")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0xA5771C", Offset = "0xA5771C", VA = "0xA5771C", Slot = "4")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000B3D")]
	[Address(RVA = "0xA57720", Offset = "0xA57720", VA = "0xA57720", Slot = "5")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x6000B3E")]
	[Address(RVA = "0xA57724", Offset = "0xA57724", VA = "0xA57724", Slot = "6")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000B3F")]
	[Address(RVA = "0xA57728", Offset = "0xA57728", VA = "0xA57728", Slot = "7")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000B40")]
	[Address(RVA = "0xA5772C", Offset = "0xA5772C", VA = "0xA5772C")]
	public TesterButtonDisabler()
	{
	}
}
[Token(Token = "0x2000257")]
public class TesterDeathMatch : MonoBehaviourPun
{
	[Token(Token = "0x4000C71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DeathMatchGameTimeController deathMatchGameTimeController;

	[Token(Token = "0x4000C72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Timer timerInGame;

	[Token(Token = "0x4000C73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int defaultFullTimeGame;

	[Token(Token = "0x4000C74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int defaultTimeToEndGame;

	[Token(Token = "0x4000C75")]
	private const int finishTime = 5;

	[Token(Token = "0x4000C76")]
	private const int infinityTime = 99;

	[Token(Token = "0x6000B41")]
	[Address(RVA = "0xA57734", Offset = "0xA57734", VA = "0xA57734")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B42")]
	[Address(RVA = "0xA57754", Offset = "0xA57754", VA = "0xA57754")]
	public void SetTimeDeathMatchToFiveSecond()
	{
	}

	[Token(Token = "0x6000B43")]
	[Address(RVA = "0xA577A4", Offset = "0xA577A4", VA = "0xA577A4")]
	public void SetDefaultTimeDeathMatch()
	{
	}

	[Token(Token = "0x6000B44")]
	[Address(RVA = "0xA57804", Offset = "0xA57804", VA = "0xA57804")]
	public void SetInfinityTime()
	{
	}

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0xA5785C", Offset = "0xA5785C", VA = "0xA5785C")]
	public TesterDeathMatch()
	{
	}
}
[Token(Token = "0x2000258")]
public class TesterMenu : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x4000C77")]
	public const float TimeBoostValue = 3f;

	[Token(Token = "0x4000C78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("PrefabReferences")]
	[SerializeField]
	private Toggle togglePlayerImmortality;

	[Token(Token = "0x4000C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Toggle toggleBoostGameSpeed;

	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GateController castleController;

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<RandomRouteSpawner> enemySpawners;

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<EnemySpawnData> enemySpawnDatas;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<WavesDataContainer> wavesDataContainersCopy;

	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<EnemySpawnData> enemySpawnDatasCopy;

	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isTestingRoutes;

	[Token(Token = "0x17000163")]
	public static bool IsPlayerImmortal
	{
		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xA57864", Offset = "0xA57864", VA = "0xA57864")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xA578AC", Offset = "0xA578AC", VA = "0xA578AC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000164")]
	public static bool IsBoostGameSpeed
	{
		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xA578F8", Offset = "0xA578F8", VA = "0xA578F8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xA57940", Offset = "0xA57940", VA = "0xA57940")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0xA5798C", Offset = "0xA5798C", VA = "0xA5798C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B4B")]
	[Address(RVA = "0xA57A84", Offset = "0xA57A84", VA = "0xA57A84")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0xA584C0", Offset = "0xA584C0", VA = "0xA584C0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0xA58898", Offset = "0xA58898", VA = "0xA58898")]
	private void BoostGameSpeed()
	{
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0xA588EC", Offset = "0xA588EC", VA = "0xA588EC")]
	public void GiveMuchosHealthToCastle()
	{
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0xA5890C", Offset = "0xA5890C", VA = "0xA5890C")]
	public void GiveFullHealthToCastle()
	{
	}

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0xA5892C", Offset = "0xA5892C", VA = "0xA5892C")]
	public void GiveOneHelathToCastle()
	{
	}

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0xA5894C", Offset = "0xA5894C", VA = "0xA5894C")]
	public void SetNormalTrollsOnWaves()
	{
	}

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0xA58C48", Offset = "0xA58C48", VA = "0xA58C48")]
	public void SetBlackTrollsOnWaves()
	{
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0xA58C58", Offset = "0xA58C58", VA = "0xA58C58")]
	public void SetRedDragonsOnWaves()
	{
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0xA58C68", Offset = "0xA58C68", VA = "0xA58C68")]
	public void SetGreenDragonsOnWaves()
	{
	}

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0xA58C78", Offset = "0xA58C78", VA = "0xA58C78")]
	public void SetNormalAxeMansOnWaves()
	{
	}

	[Token(Token = "0x6000B56")]
	[Address(RVA = "0xA58F5C", Offset = "0xA58F5C", VA = "0xA58F5C")]
	public void SetUrsagsOnWaves()
	{
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0xA58F68", Offset = "0xA58F68", VA = "0xA58F68")]
	public void SetRedAxeMansOnWaves()
	{
	}

	[Token(Token = "0x6000B58")]
	[Address(RVA = "0xA58F74", Offset = "0xA58F74", VA = "0xA58F74")]
	public void SetWavesForTestingRoutes()
	{
	}

	[Token(Token = "0x6000B59")]
	[Address(RVA = "0xA585E0", Offset = "0xA585E0", VA = "0xA585E0")]
	public void RevertToNormalWaves()
	{
	}

	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0xA590BC", Offset = "0xA590BC", VA = "0xA590BC")]
	public void SkipToWave(string waveNumberText)
	{
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0xA5917C", Offset = "0xA5917C", VA = "0xA5917C")]
	public void FinishWave()
	{
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0xA593C0", Offset = "0xA593C0", VA = "0xA593C0")]
	public void SetImmortality()
	{
	}

	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0xA59490", Offset = "0xA59490", VA = "0xA59490")]
	public void SetGameSpeed()
	{
	}

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0xA5895C", Offset = "0xA5895C", VA = "0xA5895C")]
	private void StartSpawningEnemy(EnemyPoolType enemyPoolType, EnemyType enemyType, int enemiesAmount)
	{
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0xA58C84", Offset = "0xA58C84", VA = "0xA58C84")]
	private void StartSpawningEnemy(EnemyPoolType enemyPoolType, EnemyType enemyType)
	{
	}

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0xA57B2C", Offset = "0xA57B2C", VA = "0xA57B2C")]
	private void CopyWavesData()
	{
	}

	[Token(Token = "0x6000B61")]
	[Address(RVA = "0xA57FF4", Offset = "0xA57FF4", VA = "0xA57FF4")]
	private void CacheSpawnAreaChosers()
	{
	}

	[Token(Token = "0x6000B62")]
	[Address(RVA = "0xA595B0", Offset = "0xA595B0", VA = "0xA595B0", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000B63")]
	[Address(RVA = "0xA596C8", Offset = "0xA596C8", VA = "0xA596C8")]
	public TesterMenu()
	{
	}
}
[Token(Token = "0x200025C")]
public class TextureAnim : MonoBehaviour
{
	[Token(Token = "0x4000C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 scrollSpeed;

	[Token(Token = "0x4000C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer rend;

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0xA59A78", Offset = "0xA59A78", VA = "0xA59A78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0xA59AD0", Offset = "0xA59AD0", VA = "0xA59AD0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0xA59B58", Offset = "0xA59B58", VA = "0xA59B58")]
	public TextureAnim()
	{
	}
}
[Token(Token = "0x200025D")]
public class Thunders : MonoBehaviour
{
	[Token(Token = "0x200025E")]
	[CompilerGenerated]
	private sealed class <ActivateThunder>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Thunders <>4__this;

		[Token(Token = "0x17000165")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B7A")]
			[Address(RVA = "0xA59FA4", Offset = "0xA59FA4", VA = "0xA59FA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000166")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0xA59FEC", Offset = "0xA59FEC", VA = "0xA59FEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xA59E08", Offset = "0xA59E08", VA = "0xA59E08")]
		[DebuggerHidden]
		public <ActivateThunder>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xA59E38", Offset = "0xA59E38", VA = "0xA59E38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xA59E3C", Offset = "0xA59E3C", VA = "0xA59E3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xA59FAC", Offset = "0xA59FAC", VA = "0xA59FAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minTimeOffset;

	[Token(Token = "0x4000C8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxTimeOffset;

	[Token(Token = "0x4000C8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float thunderDuration;

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource[] ThunderSounds;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _time;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float _timeOffset;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject LightingBoltParticle;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject LightingBoltLight;

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool _thundersEnabled;

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0xA59B60", Offset = "0xA59B60", VA = "0xA59B60")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0xA59C04", Offset = "0xA59C04", VA = "0xA59C04")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0xA59CA8", Offset = "0xA59CA8", VA = "0xA59CA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B72")]
	[Address(RVA = "0xA59CC8", Offset = "0xA59CC8", VA = "0xA59CC8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B73")]
	[Address(RVA = "0xA59DB0", Offset = "0xA59DB0", VA = "0xA59DB0")]
	private void InitializePlayer(PlayerInitializer initializer)
	{
	}

	[Token(Token = "0x6000B74")]
	[Address(RVA = "0xA59DFC", Offset = "0xA59DFC", VA = "0xA59DFC")]
	public void EnableThunders()
	{
	}

	[Token(Token = "0x6000B75")]
	[Address(RVA = "0xA59D3C", Offset = "0xA59D3C", VA = "0xA59D3C")]
	[IteratorStateMachine(typeof(<ActivateThunder>d__15))]
	private IEnumerator ActivateThunder()
	{
		return null;
	}

	[Token(Token = "0x6000B76")]
	[Address(RVA = "0xA59E30", Offset = "0xA59E30", VA = "0xA59E30")]
	public Thunders()
	{
	}
}
[Token(Token = "0x200025F")]
public enum AWSEndpointType
{
	[Token(Token = "0x4000C96")]
	Prod,
	[Token(Token = "0x4000C97")]
	Stage,
	[Token(Token = "0x4000C98")]
	Dev
}
[Token(Token = "0x2000260")]
public class AWSEndpointTypeSetterForMaster : MonoBehaviour
{
	[Token(Token = "0x4000C99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AWSEndpointType awsEndpointType;

	[Token(Token = "0x6000B7D")]
	[Address(RVA = "0xA59FF4", Offset = "0xA59FF4", VA = "0xA59FF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B7E")]
	[Address(RVA = "0xA59FF8", Offset = "0xA59FF8", VA = "0xA59FF8")]
	public AWSEndpointTypeSetterForMaster()
	{
	}
}
[Serializable]
[Token(Token = "0x2000261")]
public class AWSLastTournamentLeaderboardEntriesDTO
{
	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string id;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AWSTournamentLeaderboardEntryDTO> finalists;

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0xA5A000", Offset = "0xA5A000", VA = "0xA5A000")]
	public AWSLastTournamentLeaderboardEntriesDTO()
	{
	}
}
[Serializable]
[Token(Token = "0x2000262")]
public class AWSLastTournamentsLeaderboardEntriesDTO
{
	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<AWSLastTournamentLeaderboardEntriesDTO> tournaments;

	[Token(Token = "0x6000B80")]
	[Address(RVA = "0xA5A008", Offset = "0xA5A008", VA = "0xA5A008")]
	public AWSLastTournamentsLeaderboardEntriesDTO()
	{
	}
}
[Serializable]
[Token(Token = "0x2000263")]
public class AWSTournamentFinalScoresDTO
{
	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AWSTournamentRoundScoreDTO final;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AWSTournamentSemiFinalScoreDTO semifinal;

	[Token(Token = "0x6000B81")]
	[Address(RVA = "0xA5A010", Offset = "0xA5A010", VA = "0xA5A010")]
	public AWSTournamentFinalScoresDTO()
	{
	}
}
[Token(Token = "0x2000264")]
public class AWSTournamentLeaderboardController : MonoBehaviour
{
	[Token(Token = "0x4000C9F")]
	private const string instanceGameObjectName = "VRParkLeaderboardsController";

	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AWSTournamentLeaderboardController instance;

	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Guid playerGUID;

	[Token(Token = "0x4000CA2")]
	private const string apiUrlSetWithoutTournamentIdProd = "https://api.elven-assassin.com/tournaments/";

	[Token(Token = "0x4000CA3")]
	private const string apiUrlSetWithoutTournamentIdStage = "https://stage.api.elven-assassin.com/tournaments/";

	[Token(Token = "0x4000CA4")]
	private const string apiUrlSetWithoutTournamentIdDev = "https://dev.api.elven-assassin.com/tournaments/";

	[Token(Token = "0x4000CA5")]
	private const string apiUrlGetProd = "https://api.elven-assassin.com/tournaments/region/{0}/player/{1}";

	[Token(Token = "0x4000CA6")]
	private const string apiUrlGetStage = "https://stage.api.elven-assassin.com/tournaments/region/{0}/player/{1}";

	[Token(Token = "0x4000CA7")]
	private const string apiUrlGetDev = "https://dev.api.elven-assassin.com/tournaments/region/{0}/player/{1}";

	[Token(Token = "0x4000CA8")]
	private const string firstHeaderKey = "Content-Type";

	[Token(Token = "0x4000CA9")]
	private const string firstHeaderValue = "application/json";

	[Token(Token = "0x4000CAA")]
	private const string xApiHeaderKey = "x-api-key";

	[Token(Token = "0x4000CAB")]
	private const string xApiKeyProd = "D79VUQnV672W5A7tKgI8XaQ6UEYS9qqL4rQulyc7";

	[Token(Token = "0x4000CAC")]
	private const string xApiKeyStage = "vUUA8YHKEa40EEJcD3iIOf8VbKWx6iA4Q7Idawbg";

	[Token(Token = "0x4000CAD")]
	private const string xApiKeyDev = "rbKwn2oqFf9YT5kQmYfOg8BCehMRape36GVP7bbl";

	[Token(Token = "0x4000CAE")]
	private const string tournamentLeaderboardJsonBackupFileName = "TournamentLeaderboardJsonBackup";

	[Token(Token = "0x4000CAF")]
	private const string JSONAdditionalTournamentsField = "{\"tournaments\":";

	[Token(Token = "0x4000CB0")]
	private const string JSONClosingObject = "}";

	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Guid leaderboardGuid;

	[Token(Token = "0x4000CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	internal static Action<AWSTournamentLeaderboardEntriesResponseDTO> OnResponseAcquired;

	[Token(Token = "0x4000CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Http http;

	[Token(Token = "0x4000CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string tournamentId;

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string tournamentEpochTimestamp;

	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static Action<List<AWSTournamentLeaderboardEntryDTO>> OnGetFromAWSAction;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Action<string> OnGetFromAWSFailedAction;

	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static bool hasSavedScoresToAWS;

	[Token(Token = "0x17000167")]
	private static AWSTournamentLeaderboardController Instance
	{
		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xA5A018", Offset = "0xA5A018", VA = "0xA5A018")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000168")]
	public static Guid LocalPlayerGUID
	{
		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xA5A124", Offset = "0xA5A124", VA = "0xA5A124")]
		get
		{
			return default(Guid);
		}
	}

	[Token(Token = "0x17000169")]
	private static string TournamentLeaderboardJsonBackupFilePath
	{
		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xA5A9D8", Offset = "0xA5A9D8", VA = "0xA5A9D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0xA5A17C", Offset = "0xA5A17C", VA = "0xA5A17C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0xA5A2BC", Offset = "0xA5A2BC", VA = "0xA5A2BC")]
	internal static void SaveToAWS(List<TournamentPlayer> allPlayers)
	{
	}

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0xA5A2C0", Offset = "0xA5A2C0", VA = "0xA5A2C0")]
	internal static void SaveToLocalFile(List<TournamentPlayer> allPlayers)
	{
	}

	[Token(Token = "0x6000B87")]
	[Address(RVA = "0xA5A2C4", Offset = "0xA5A2C4", VA = "0xA5A2C4")]
	internal static void GetFromAWS(CloudRegionCode cloudRegionCode, string playerId, Action<List<AWSTournamentLeaderboardEntryDTO>> OnGetFromAWS, Action<string> OnGetFromAWSFailed)
	{
	}

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0xA5A644", Offset = "0xA5A644", VA = "0xA5A644")]
	internal static void SaveToAWSWithLocalFileBackup(List<TournamentPlayer> allPlayers)
	{
	}

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0xA5A698", Offset = "0xA5A698", VA = "0xA5A698")]
	private static string GetApiUrlSet()
	{
		return null;
	}

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0xA5A3DC", Offset = "0xA5A3DC", VA = "0xA5A3DC")]
	private static string GetApiUrlGet(CloudRegionCode regionCode, string playerId)
	{
		return null;
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0xA5A854", Offset = "0xA5A854", VA = "0xA5A854")]
	private static string GetXApiKey()
	{
		return null;
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0xA5AD70", Offset = "0xA5AD70", VA = "0xA5AD70")]
	public static void SetInitialDataOfTournament(TournamentHostingInfo nextTorunamentToHostInfo)
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0xA5AF28", Offset = "0xA5AF28", VA = "0xA5AF28")]
	internal static void GenerateLeaderboardGuid()
	{
	}

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0xA5AF90", Offset = "0xA5AF90", VA = "0xA5AF90")]
	internal static void GenerateNewPlayerGUID()
	{
	}

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0xA5B06C", Offset = "0xA5B06C", VA = "0xA5B06C")]
	private static void OnGetFromAWS(UnityWebRequest unityWebRequest)
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0xA5B270", Offset = "0xA5B270", VA = "0xA5B270")]
	private static List<AWSTournamentLeaderboardEntryDTO> GetPlayersFromJson(string json)
	{
		return null;
	}

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0xA5B464", Offset = "0xA5B464", VA = "0xA5B464")]
	private static void ConvertTournamentsJSONArrayToJSONObject(ref string json)
	{
	}

	[Token(Token = "0x6000B93")]
	[Address(RVA = "0xA5B4E0", Offset = "0xA5B4E0", VA = "0xA5B4E0")]
	private static void OnTournamentLeaderboardSaved(UnityWebRequest response)
	{
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0xA5B5C8", Offset = "0xA5B5C8", VA = "0xA5B5C8")]
	private static string GetLeaderboardGetJson(string mapName, string parkCode)
	{
		return null;
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0xA5B6D0", Offset = "0xA5B6D0", VA = "0xA5B6D0")]
	private static string GetLeaderboardSetJson(List<TournamentPlayer> allPlayers)
	{
		return null;
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0xA5B844", Offset = "0xA5B844", VA = "0xA5B844")]
	private static List<AWSTournamentLeaderboardEntryDTO> TournamentPlayersToEntries(List<TournamentPlayer> allPlayers)
	{
		return null;
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0xA5BB40", Offset = "0xA5BB40", VA = "0xA5BB40")]
	public AWSTournamentLeaderboardController()
	{
	}
}
[Serializable]
[Token(Token = "0x2000266")]
public class AWSTournamentLeaderboardDAO
{
	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string PlayerID;

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0xA5BC58", Offset = "0xA5BC58", VA = "0xA5BC58")]
	public AWSTournamentLeaderboardDAO()
	{
	}
}
[Serializable]
[Token(Token = "0x2000267")]
public class AWSTournamentLeaderboardEntriesDTO
{
	[Token(Token = "0x4000CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string date;

	[Token(Token = "0x4000CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string region;

	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<AWSTournamentLeaderboardEntryDTO> entries;

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0xA5B83C", Offset = "0xA5B83C", VA = "0xA5B83C")]
	public AWSTournamentLeaderboardEntriesDTO()
	{
	}
}
[Serializable]
[Token(Token = "0x2000268")]
public class AWSTournamentLeaderboardEntriesResponseDTO
{
	[Token(Token = "0x4000CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Date;

	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Guid;

	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Region;

	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<AWSTournamentLeaderboardEntryDTO> BestScores;

	[Token(Token = "0x4000CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<AWSTournamentLeaderboardEntryDTO> ScoreNeighberhood;

	[Token(Token = "0x6000B9E")]
	[Address(RVA = "0xA5BC60", Offset = "0xA5BC60", VA = "0xA5BC60")]
	public AWSTournamentLeaderboardEntriesResponseDTO()
	{
	}
}
[Serializable]
[Token(Token = "0x2000269")]
public class AWSTournamentLeaderboardEntryDTO
{
	[Token(Token = "0x4000CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string playerId;

	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int rank;

	[Token(Token = "0x4000CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string name;

	[Token(Token = "0x4000CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int stage;

	[Token(Token = "0x4000CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int hits;

	[Token(Token = "0x4000CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int deaths;

	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool isFinalist;

	[Token(Token = "0x4000CCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool isSemifinalist;

	[Token(Token = "0x4000CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AWSTournamentSemiFinalScoreDTO semifinal;

	[Token(Token = "0x4000CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int lastStageDeaths;

	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int lastStageHits;

	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0xA5BAA4", Offset = "0xA5BAA4", VA = "0xA5BAA4")]
	public AWSTournamentLeaderboardEntryDTO()
	{
	}
}
[Serializable]
[Token(Token = "0x200026A")]
public class AWSTournamentLeaderboardGetDTO
{
	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string ParkCode;

	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string MapName;

	[Token(Token = "0x6000BA0")]
	[Address(RVA = "0xA5B6C8", Offset = "0xA5B6C8", VA = "0xA5B6C8")]
	public AWSTournamentLeaderboardGetDTO()
	{
	}
}
[Token(Token = "0x200026B")]
public class AWSTournamentLeaderboardView : MonoBehaviour
{
	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject top10Object;

	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<TournamentTopPlayerSpot> top10Entries;

	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject rivalsObject;

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<TournamentTopPlayerSpot> rivalsEntries;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform Top10LeaderboardPosition;

	[Token(Token = "0x6000BA1")]
	[Address(RVA = "0xA5BC68", Offset = "0xA5BC68", VA = "0xA5BC68")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BA2")]
	[Address(RVA = "0xA5BD94", Offset = "0xA5BD94", VA = "0xA5BD94")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000BA3")]
	[Address(RVA = "0xA5BEC0", Offset = "0xA5BEC0", VA = "0xA5BEC0")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000BA4")]
	[Address(RVA = "0xA5BF58", Offset = "0xA5BF58", VA = "0xA5BF58")]
	public void ShowLeaderboards(AWSTournamentLeaderboardEntriesResponseDTO leaderboardEntries)
	{
	}

	[Token(Token = "0x6000BA5")]
	[Address(RVA = "0xA5C46C", Offset = "0xA5C46C", VA = "0xA5C46C")]
	private bool IsLocalPlayerInEntries(AWSTournamentLeaderboardEntriesResponseDTO leaderboardEntries)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BA6")]
	[Address(RVA = "0xA5C360", Offset = "0xA5C360", VA = "0xA5C360")]
	private static bool IsLocalPlayerInTop10(AWSTournamentLeaderboardEntriesResponseDTO leaderboardEntries)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BA7")]
	[Address(RVA = "0xA5C05C", Offset = "0xA5C05C", VA = "0xA5C05C")]
	private void ShowTop10Leaderboard(List<AWSTournamentLeaderboardEntryDTO> entries)
	{
	}

	[Token(Token = "0x6000BA8")]
	[Address(RVA = "0xA5C634", Offset = "0xA5C634", VA = "0xA5C634")]
	private void ShowCurrentRivalsLeaderboard(List<AWSTournamentLeaderboardEntryDTO> entries)
	{
	}

	[Token(Token = "0x6000BA9")]
	[Address(RVA = "0xA5CD28", Offset = "0xA5CD28", VA = "0xA5CD28")]
	public AWSTournamentLeaderboardView()
	{
	}
}
[Serializable]
[Token(Token = "0x200026D")]
public class AWSTournamentRoundScoreDTO
{
	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int lastStageHits;

	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int lastStageDeaths;

	[Token(Token = "0x6000BB2")]
	[Address(RVA = "0xA5D0D4", Offset = "0xA5D0D4", VA = "0xA5D0D4")]
	public AWSTournamentRoundScoreDTO()
	{
	}
}
[Serializable]
[Token(Token = "0x200026E")]
public class AWSTournamentSemiFinalScoreDTO
{
	[Token(Token = "0x4000CDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string roomId;

	[Token(Token = "0x4000CE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int semiFinalRankInRoom;

	[Token(Token = "0x6000BB3")]
	[Address(RVA = "0xA5BB38", Offset = "0xA5BB38", VA = "0xA5BB38")]
	public AWSTournamentSemiFinalScoreDTO()
	{
	}
}
[Token(Token = "0x200026F")]
public class AWSTournmentLeaderboardsTester : MonoBehaviour
{
	[Token(Token = "0x6000BB4")]
	[Address(RVA = "0xA5D0DC", Offset = "0xA5D0DC", VA = "0xA5D0DC")]
	[ContextMenu("Test saving")]
	private void TestSaving()
	{
	}

	[Token(Token = "0x6000BB5")]
	[Address(RVA = "0xA5D488", Offset = "0xA5D488", VA = "0xA5D488")]
	[ContextMenu("Test getting")]
	private void TestGetting()
	{
	}

	[Token(Token = "0x6000BB6")]
	[Address(RVA = "0xA5D550", Offset = "0xA5D550", VA = "0xA5D550")]
	private void TestGettingOnReceive(List<AWSTournamentLeaderboardEntryDTO> entries)
	{
	}

	[Token(Token = "0x6000BB7")]
	[Address(RVA = "0xA5D684", Offset = "0xA5D684", VA = "0xA5D684")]
	public AWSTournmentLeaderboardsTester()
	{
	}
}
[Token(Token = "0x2000271")]
public class GlobalTimeController : MonoBehaviour
{
	[Token(Token = "0x2000272")]
	[CompilerGenerated]
	private sealed class <GetCurrentGlobalTimeCoroutine>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<DateTime> OnTimeReceived;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityWebRequest <myHttpWebRequest>5__2;

		[Token(Token = "0x1700016A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0xA5DA8C", Offset = "0xA5DA8C", VA = "0xA5DA8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0xA5DAD4", Offset = "0xA5DAD4", VA = "0xA5DAD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xA5D884", Offset = "0xA5D884", VA = "0xA5D884")]
		[DebuggerHidden]
		public <GetCurrentGlobalTimeCoroutine>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xA5D8B4", Offset = "0xA5D8B4", VA = "0xA5D8B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xA5D8B8", Offset = "0xA5D8B8", VA = "0xA5D8B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xA5DA94", Offset = "0xA5DA94", VA = "0xA5DA94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GlobalTimeController instance;

	[Token(Token = "0x6000BBA")]
	[Address(RVA = "0xA5D6F8", Offset = "0xA5D6F8", VA = "0xA5D6F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BBB")]
	[Address(RVA = "0xA5D7A8", Offset = "0xA5D7A8", VA = "0xA5D7A8")]
	public static void GetCurrentGlobalTimeAsync(Action<DateTime> OnTimeReceived)
	{
	}

	[Token(Token = "0x6000BBC")]
	[Address(RVA = "0xA5D810", Offset = "0xA5D810", VA = "0xA5D810")]
	[IteratorStateMachine(typeof(<GetCurrentGlobalTimeCoroutine>d__3))]
	private IEnumerator GetCurrentGlobalTimeCoroutine(Action<DateTime> OnTimeReceived)
	{
		return null;
	}

	[Token(Token = "0x6000BBD")]
	[Address(RVA = "0xA5D8AC", Offset = "0xA5D8AC", VA = "0xA5D8AC")]
	public GlobalTimeController()
	{
	}
}
[Token(Token = "0x2000273")]
public class Http : MonoBehaviour
{
	[StructLayout(3)]
	[Token(Token = "0x2000274")]
	[CompilerGenerated]
	private struct <PostAsync>d__3 : IAsyncStateMachine
	{
		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string url;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string json;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<string, string> headers;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<UnityWebRequest> OnResponseReceived;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <unityWebRequest>5__2;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TaskAwaiter <>u__1;

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xA5E00C", Offset = "0xA5E00C", VA = "0xA5E00C", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xA5E278", Offset = "0xA5E278", VA = "0xA5E278", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x2000275")]
	[CompilerGenerated]
	private sealed class <GetCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string url;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<UnityWebRequest> OnResponseReceived;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityWebRequest <unityWebRequest>5__2;

		[Token(Token = "0x1700016C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BD1")]
			[Address(RVA = "0xA5E330", Offset = "0xA5E330", VA = "0xA5E330", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0xA5E378", Offset = "0xA5E378", VA = "0xA5E378", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xA5DDF4", Offset = "0xA5DDF4", VA = "0xA5DDF4")]
		[DebuggerHidden]
		public <GetCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xA5E284", Offset = "0xA5E284", VA = "0xA5E284", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xA5E288", Offset = "0xA5E288", VA = "0xA5E288", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xA5E338", Offset = "0xA5E338", VA = "0xA5E338", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000276")]
	[CompilerGenerated]
	private sealed class <SendRequestCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityWebRequest unityWebRequest;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<string, string> headers;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string json;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<UnityWebRequest> OnResponseReceived;

		[Token(Token = "0x1700016E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0xA5E410", Offset = "0xA5E410", VA = "0xA5E410", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BD9")]
			[Address(RVA = "0xA5E458", Offset = "0xA5E458", VA = "0xA5E458", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xA5DE1C", Offset = "0xA5DE1C", VA = "0xA5DE1C")]
		[DebuggerHidden]
		public <SendRequestCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xA5E380", Offset = "0xA5E380", VA = "0xA5E380", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xA5E384", Offset = "0xA5E384", VA = "0xA5E384", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xA5E418", Offset = "0xA5E418", VA = "0xA5E418", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CE7")]
	private const int waitingForResponseMilliseconds = 25;

	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0xA5A624", Offset = "0xA5A624", VA = "0xA5A624")]
	public void Get(string url, Action<UnityWebRequest> OnResponseReceived)
	{
	}

	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0xA5DB6C", Offset = "0xA5DB6C", VA = "0xA5DB6C")]
	public void Post(string url, Dictionary<string, string> headers, string json, Action<UnityWebRequest> OnResponseReceived)
	{
	}

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0xA5DC88", Offset = "0xA5DC88", VA = "0xA5DC88")]
	[AsyncStateMachine(typeof(<PostAsync>d__3))]
	public static void PostAsync(string url, Dictionary<string, string> headers, string json, Action<UnityWebRequest> OnResponseReceived)
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0xA5DD98", Offset = "0xA5DD98", VA = "0xA5DD98")]
	public void Put(string url, Dictionary<string, string> headers, string json, Action<UnityWebRequest> OnResponseReceived)
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0xA5DADC", Offset = "0xA5DADC", VA = "0xA5DADC")]
	[IteratorStateMachine(typeof(<GetCoroutine>d__5))]
	private IEnumerator GetCoroutine(string url, Action<UnityWebRequest> OnResponseReceived)
	{
		return null;
	}

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0xA5DBC8", Offset = "0xA5DBC8", VA = "0xA5DBC8")]
	[IteratorStateMachine(typeof(<SendRequestCoroutine>d__6))]
	private IEnumerator SendRequestCoroutine(UnityWebRequest unityWebRequest, Dictionary<string, string> headers, string json, Action<UnityWebRequest> OnResponseReceived)
	{
		return null;
	}

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0xA5DE44", Offset = "0xA5DE44", VA = "0xA5DE44")]
	private static void SetRequestData(UnityWebRequest unityWebRequest, Dictionary<string, string> headers, string json)
	{
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0xA5E004", Offset = "0xA5E004", VA = "0xA5E004")]
	public Http()
	{
	}
}
[Token(Token = "0x2000278")]
public class JoiningToTournamentConfirmationController : MonoBehaviour
{
	[Token(Token = "0x4000CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text confirmationText;

	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text yesText;

	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text noText;

	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private JoiningTournamentDuringMatchController joiningTournamentDuringMatchController;

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0xA5E4D4", Offset = "0xA5E4D4", VA = "0xA5E4D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0xA5E580", Offset = "0xA5E580", VA = "0xA5E580")]
	public void OnYesClick()
	{
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0xA5E5FC", Offset = "0xA5E5FC", VA = "0xA5E5FC")]
	public void OnNoClick()
	{
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0xA5E5AC", Offset = "0xA5E5AC", VA = "0xA5E5AC")]
	private static void CloseConfirmationWindow()
	{
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0xA5E614", Offset = "0xA5E614", VA = "0xA5E614")]
	public JoiningToTournamentConfirmationController()
	{
	}
}
[Token(Token = "0x2000279")]
public class JoiningTournamentDuringMatchController : MonoBehaviour, ILobbyCallbacks, IMatchmakingCallbacks
{
	[Token(Token = "0x200027B")]
	[CompilerGenerated]
	private sealed class <JoinTournamentLobbyCoroutine>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000170")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0xA5EE4C", Offset = "0xA5EE4C", VA = "0xA5EE4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000171")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BFB")]
			[Address(RVA = "0xA5EE94", Offset = "0xA5EE94", VA = "0xA5EE94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xA5EAC0", Offset = "0xA5EAC0", VA = "0xA5EAC0")]
		[DebuggerHidden]
		public <JoinTournamentLobbyCoroutine>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xA5EC24", Offset = "0xA5EC24", VA = "0xA5EC24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xA5EC28", Offset = "0xA5EC28", VA = "0xA5EC28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xA5EE54", Offset = "0xA5EE54", VA = "0xA5EE54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LoadingScreenController loadingScreenController;

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isDuringJoining;

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0xA5E61C", Offset = "0xA5E61C", VA = "0xA5E61C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0xA5E674", Offset = "0xA5E674", VA = "0xA5E674")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0xA5E5CC", Offset = "0xA5E5CC", VA = "0xA5E5CC")]
	public void JoinTournament()
	{
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0xA5E724", Offset = "0xA5E724", VA = "0xA5E724")]
	private void JoinTournamentOnFadingFinished()
	{
	}

	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0xA5E7D4", Offset = "0xA5E7D4", VA = "0xA5E7D4", Slot = "14")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0xA5E8C8", Offset = "0xA5E8C8", VA = "0xA5E8C8", Slot = "4")]
	public void OnJoinedLobby()
	{
	}

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0xA5EA20", Offset = "0xA5EA20", VA = "0xA5EA20", Slot = "11")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0xA5EA24", Offset = "0xA5EA24", VA = "0xA5EA24")]
	private void LoadTournamentMenuScene()
	{
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0xA5E868", Offset = "0xA5E868", VA = "0xA5E868")]
	[IteratorStateMachine(typeof(<JoinTournamentLobbyCoroutine>d__10))]
	private IEnumerator JoinTournamentLobbyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0xA5EAE8", Offset = "0xA5EAE8", VA = "0xA5EAE8", Slot = "12")]
	public void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0xA5EB38", Offset = "0xA5EB38", VA = "0xA5EB38", Slot = "13")]
	public void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0xA5EB3C", Offset = "0xA5EB3C", VA = "0xA5EB3C", Slot = "5")]
	public void OnLeftLobby()
	{
	}

	[Token(Token = "0x6000BED")]
	[Address(RVA = "0xA5EB40", Offset = "0xA5EB40", VA = "0xA5EB40", Slot = "6")]
	public void OnRoomListUpdate(List<RoomInfo> roomList)
	{
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0xA5EB44", Offset = "0xA5EB44", VA = "0xA5EB44", Slot = "7")]
	public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
	{
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0xA5EB48", Offset = "0xA5EB48", VA = "0xA5EB48", Slot = "8")]
	public void OnFriendListUpdate(List<FriendInfo> friendList)
	{
	}

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0xA5EB4C", Offset = "0xA5EB4C", VA = "0xA5EB4C", Slot = "9")]
	public void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0xA5EB50", Offset = "0xA5EB50", VA = "0xA5EB50", Slot = "10")]
	public void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0xA5EB54", Offset = "0xA5EB54", VA = "0xA5EB54")]
	public JoiningTournamentDuringMatchController()
	{
	}
}
[Token(Token = "0x200027C")]
public class JoinTournamentPopUpController : MonoBehaviour
{
	[Token(Token = "0x4000D07")]
	private const int minutesToEnrollmentEndToShowPopUp = 1;

	[Token(Token = "0x4000D08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly int openPortalTriggerId;

	[Token(Token = "0x4000D09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private readonly int closePortalTriggerId;

	[Token(Token = "0x4000D0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject popUpGameObject;

	[Token(Token = "0x4000D0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject particlesGameObject;

	[Token(Token = "0x4000D0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TournamentHostingDatesGatherer tournamentHostingDatesGatherer;

	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text popUpText;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private CollisionEvents joiningTrigger;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Animator portalContentsAnimator;

	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioSource portalOpenAudioSource;

	[Token(Token = "0x4000D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource portalCloseAudioSource;

	[Token(Token = "0x4000D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioSource portalIdleAudioSource;

	[Token(Token = "0x4000D13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioSource portalShotAudioSource;

	[Token(Token = "0x4000D14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject popUpInfoGameObject;

	[Token(Token = "0x4000D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isPopUpVisible;

	[Token(Token = "0x4000D16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool isTournamentFound;

	[Token(Token = "0x17000172")]
	public bool IsHidingPopUp
	{
		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xA5EE9C", Offset = "0xA5EE9C", VA = "0xA5EE9C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xA5EEA4", Offset = "0xA5EEA4", VA = "0xA5EEA4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000BFE")]
	[Address(RVA = "0xA5EEB0", Offset = "0xA5EEB0", VA = "0xA5EEB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0xA5F0B8", Offset = "0xA5F0B8", VA = "0xA5F0B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0xA5F570", Offset = "0xA5F570", VA = "0xA5F570")]
	private void HidePopUp()
	{
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0xA5F524", Offset = "0xA5F524", VA = "0xA5F524")]
	private void ShowPopUp()
	{
	}

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0xA5F604", Offset = "0xA5F604", VA = "0xA5F604")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0xA5F7C0", Offset = "0xA5F7C0", VA = "0xA5F7C0")]
	private void OnJoiningTriggerEnter(Collider triggeredCollider)
	{
	}

	[Token(Token = "0x6000C04")]
	[Address(RVA = "0xA5F8A0", Offset = "0xA5F8A0", VA = "0xA5F8A0")]
	private static void OpenConfirmationWindow()
	{
	}

	[Token(Token = "0x6000C05")]
	[Address(RVA = "0xA5F5E4", Offset = "0xA5F5E4", VA = "0xA5F5E4")]
	private static void CloseConfirmationWindow()
	{
	}

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0xA5F914", Offset = "0xA5F914", VA = "0xA5F914")]
	private void SetNextTournamentDateFromHostingsGatherer()
	{
	}

	[Token(Token = "0x6000C07")]
	[Address(RVA = "0xA5F31C", Offset = "0xA5F31C", VA = "0xA5F31C")]
	private bool IsTournamentStartingShortly()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C08")]
	[Address(RVA = "0xA5F9E4", Offset = "0xA5F9E4", VA = "0xA5F9E4")]
	private List<DateTime> GetTournamentDatesAvailableForCurrentRegion()
	{
		return null;
	}

	[Token(Token = "0x6000C09")]
	[Address(RVA = "0xA5FCC0", Offset = "0xA5FCC0", VA = "0xA5FCC0")]
	private static List<DateTime> GetNextTournamentDates(List<DateTime> tournamentDates)
	{
		return null;
	}

	[Token(Token = "0x6000C0A")]
	[Address(RVA = "0xA5F3E4", Offset = "0xA5F3E4", VA = "0xA5F3E4")]
	private static string GetTextForTimeLeftForEnrollment()
	{
		return null;
	}

	[Token(Token = "0x6000C0B")]
	[Address(RVA = "0xA5FFA0", Offset = "0xA5FFA0", VA = "0xA5FFA0")]
	public JoinTournamentPopUpController()
	{
	}
}
[Token(Token = "0x200027F")]
public class JoinTournamentPortalAnimationEventsController : MonoBehaviour
{
	[Token(Token = "0x4000D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioSource portalIdleAudioSource;

	[Token(Token = "0x4000D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject particlesGameObject;

	[Token(Token = "0x4000D1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject mainPopGameObject;

	[Token(Token = "0x4000D1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private JoinTournamentPopUpController joinTournamentPopUpController;

	[Token(Token = "0x4000D20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject popUpInfoGameObject;

	[Token(Token = "0x6000C12")]
	[Address(RVA = "0xA601FC", Offset = "0xA601FC", VA = "0xA601FC")]
	private void OnIdleStartAnimationEvent()
	{
	}

	[Token(Token = "0x6000C13")]
	[Address(RVA = "0xA60244", Offset = "0xA60244", VA = "0xA60244")]
	private void OnPortalClosedAnimationEvent()
	{
	}

	[Token(Token = "0x6000C14")]
	[Address(RVA = "0xA6027C", Offset = "0xA6027C", VA = "0xA6027C")]
	public JoinTournamentPortalAnimationEventsController()
	{
	}
}
[Token(Token = "0x2000280")]
public class LastTournamentLeaderboardController : MonoBehaviour
{
	[Token(Token = "0x4000D21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<TournamentTopPlayerSpot> playerSpotList;

	[Token(Token = "0x4000D22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject bestArchersParent;

	[Token(Token = "0x4000D23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject noLeaderboardIndicator;

	[Token(Token = "0x4000D24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject loadingIndicator;

	[Token(Token = "0x4000D25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text errorIndicatorText;

	[Token(Token = "0x6000C15")]
	[Address(RVA = "0xA60284", Offset = "0xA60284", VA = "0xA60284")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C16")]
	[Address(RVA = "0xA60478", Offset = "0xA60478", VA = "0xA60478")]
	private void OnGetLeaderboardFromAWS(List<AWSTournamentLeaderboardEntryDTO> entries)
	{
	}

	[Token(Token = "0x6000C17")]
	[Address(RVA = "0xA606B8", Offset = "0xA606B8", VA = "0xA606B8")]
	private void OnGetLeaderboardFromAWSFailed(string error)
	{
	}

	[Token(Token = "0x6000C18")]
	[Address(RVA = "0xA606F4", Offset = "0xA606F4", VA = "0xA606F4")]
	private void ShowErrorMessage(string error)
	{
	}

	[Token(Token = "0x6000C19")]
	[Address(RVA = "0xA604B4", Offset = "0xA604B4", VA = "0xA604B4")]
	private void ShowBestArchersLeaderboard(List<AWSTournamentLeaderboardEntryDTO> entries)
	{
	}

	[Token(Token = "0x6000C1A")]
	[Address(RVA = "0xA6040C", Offset = "0xA6040C", VA = "0xA6040C")]
	private void HideAllLeaderboardGUI()
	{
	}

	[Token(Token = "0x6000C1B")]
	[Address(RVA = "0xA607B0", Offset = "0xA607B0", VA = "0xA607B0")]
	public LastTournamentLeaderboardController()
	{
	}
}
[Token(Token = "0x2000281")]
public class TournamentHostingAutoInputController : MonoBehaviour, IConnectionCallbacks, IMatchmakingCallbacks
{
	[Token(Token = "0x2000282")]
	private enum AutoHostingState
	{
		[Token(Token = "0x4000D32")]
		WaitingToHost,
		[Token(Token = "0x4000D33")]
		Hosting,
		[Token(Token = "0x4000D34")]
		WaitingToShutdownVirtualMachine
	}

	[Token(Token = "0x2000283")]
	[CompilerGenerated]
	private sealed class <CloseServerRoutine>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TournamentHostingAutoInputController <>4__this;

		[Token(Token = "0x17000173")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0xA61398", Offset = "0xA61398", VA = "0xA61398", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000174")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0xA613E0", Offset = "0xA613E0", VA = "0xA613E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xA60DB8", Offset = "0xA60DB8", VA = "0xA60DB8")]
		[DebuggerHidden]
		public <CloseServerRoutine>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xA610D8", Offset = "0xA610D8", VA = "0xA610D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xA610DC", Offset = "0xA610DC", VA = "0xA610DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xA613A0", Offset = "0xA613A0", VA = "0xA613A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000286")]
	[CompilerGenerated]
	private sealed class <PlanNextTournament>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TournamentHostingAutoInputController <>4__this;

		[Token(Token = "0x17000175")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0xA61BA8", Offset = "0xA61BA8", VA = "0xA61BA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000176")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0xA61BF0", Offset = "0xA61BF0", VA = "0xA61BF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xA60EC4", Offset = "0xA60EC4", VA = "0xA60EC4")]
		[DebuggerHidden]
		public <PlanNextTournament>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xA61554", Offset = "0xA61554", VA = "0xA61554", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xA61558", Offset = "0xA61558", VA = "0xA61558", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xA61BB0", Offset = "0xA61BB0", VA = "0xA61BB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D26")]
	private const int secondsDelayToCloseServerAfterTournamentEnd = 300;

	[Token(Token = "0x4000D27")]
	private const int minutesBeforeTournamentDateToStartHosting = 5;

	[Token(Token = "0x4000D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AutoHostingState state;

	[Token(Token = "0x4000D29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private CloudRegionCode regionCode;

	[Token(Token = "0x4000D2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TournamentHostingInfo nextTorunamentToHostInfo;

	[Token(Token = "0x4000D2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TournamentMasterConnectingWindowController TournamentMasterConnectingWindowController;

	[Token(Token = "0x4000D2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TournamentInfoWindowController TournamentInfoWindowController;

	[Token(Token = "0x4000D2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TournamentHostingController TournamentHostingController;

	[Token(Token = "0x4000D2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TournamentHostingDatesGatherer tournamentHostingDatesGatherer;

	[Token(Token = "0x4000D2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TournamentGameStateController tournamentGameStateController;

	[Token(Token = "0x4000D30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private TournamentVirtualMachineShutdownController tournamentVirtualMachineShutdownController;

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0xA607B8", Offset = "0xA607B8", VA = "0xA607B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0xA60974", Offset = "0xA60974", VA = "0xA60974")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0xA609CC", Offset = "0xA609CC", VA = "0xA609CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0xA60A24", Offset = "0xA60A24", VA = "0xA60A24")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C20")]
	[Address(RVA = "0xA60D44", Offset = "0xA60D44", VA = "0xA60D44")]
	[IteratorStateMachine(typeof(<CloseServerRoutine>d__16))]
	private IEnumerator CloseServerRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0xA60B3C", Offset = "0xA60B3C", VA = "0xA60B3C")]
	private void HostNextTournament()
	{
	}

	[Token(Token = "0x6000C22")]
	[Address(RVA = "0xA60864", Offset = "0xA60864", VA = "0xA60864")]
	[IteratorStateMachine(typeof(<PlanNextTournament>d__18))]
	private IEnumerator PlanNextTournament()
	{
		return null;
	}

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0xA60A70", Offset = "0xA60A70", VA = "0xA60A70")]
	private bool ShouldStartHostingNextTournament()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0xA60CDC", Offset = "0xA60CDC", VA = "0xA60CDC")]
	private bool IsHostingTournamentThatFinished()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0xA60EEC", Offset = "0xA60EEC", VA = "0xA60EEC", Slot = "4")]
	public void OnConnected()
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0xA60EF0", Offset = "0xA60EF0", VA = "0xA60EF0", Slot = "5")]
	public void OnConnectedToMaster()
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0xA60EF4", Offset = "0xA60EF4", VA = "0xA60EF4", Slot = "6")]
	public void OnDisconnected(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0xA60FC0", Offset = "0xA60FC0", VA = "0xA60FC0", Slot = "7")]
	public void OnRegionListReceived(RegionHandler regionHandler)
	{
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0xA60FC4", Offset = "0xA60FC4", VA = "0xA60FC4", Slot = "8")]
	public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
	{
	}

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0xA60FC8", Offset = "0xA60FC8", VA = "0xA60FC8", Slot = "9")]
	public void OnCustomAuthenticationFailed(string debugMessage)
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0xA60FCC", Offset = "0xA60FCC", VA = "0xA60FCC", Slot = "10")]
	public void OnFriendListUpdate(List<FriendInfo> friendList)
	{
	}

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0xA60FD0", Offset = "0xA60FD0", VA = "0xA60FD0", Slot = "11")]
	public void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0xA60FD4", Offset = "0xA60FD4", VA = "0xA60FD4", Slot = "12")]
	public void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0xA61060", Offset = "0xA61060", VA = "0xA61060", Slot = "13")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0xA61064", Offset = "0xA61064", VA = "0xA61064", Slot = "14")]
	public void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0xA61068", Offset = "0xA61068", VA = "0xA61068", Slot = "15")]
	public void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0xA6106C", Offset = "0xA6106C", VA = "0xA6106C", Slot = "16")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0xA61070", Offset = "0xA61070", VA = "0xA61070")]
	public TournamentHostingAutoInputController()
	{
	}
}
[Token(Token = "0x2000287")]
public class TournamentHostingDatesGatherer : MonoBehaviour
{
	[Token(Token = "0x2000288")]
	[CompilerGenerated]
	private sealed class <PlanningRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TournamentHostingDatesGatherer <>4__this;

		[Token(Token = "0x17000177")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C54")]
			[Address(RVA = "0xA628CC", Offset = "0xA628CC", VA = "0xA628CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000178")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C56")]
			[Address(RVA = "0xA62914", Offset = "0xA62914", VA = "0xA62914", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xA61E10", Offset = "0xA61E10", VA = "0xA61E10")]
		[DebuggerHidden]
		public <PlanningRoutine>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xA627F8", Offset = "0xA627F8", VA = "0xA627F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xA627FC", Offset = "0xA627FC", VA = "0xA627FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xA628D4", Offset = "0xA628D4", VA = "0xA628D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D3F")]
	private const float secondsDelayOfRefreshingTouenamentPlan = 3600f;

	[Token(Token = "0x4000D40")]
	private const string urlToDatabaseProd = "https://api.elven-assassin.com/tournaments/coming";

	[Token(Token = "0x4000D41")]
	private const string urlToDatabaseStage = "https://stage.api.elven-assassin.com/tournaments/coming";

	[Token(Token = "0x4000D42")]
	private const string urlToDatabaseDev = "https://dev.api.elven-assassin.com/tournaments/coming";

	[Token(Token = "0x4000D43")]
	private const string regionCodeForAllRegions = "all";

	[Token(Token = "0x4000D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Http http;

	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<TournamentHostingInfo> tournamentHostingInfos;

	[Token(Token = "0x14000013")]
	public event Action OnTournamentDatesGathered
	{
		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xA5F01C", Offset = "0xA5F01C", VA = "0xA5F01C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xA5F724", Offset = "0xA5F724", VA = "0xA5F724")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000C48")]
	[Address(RVA = "0xA61BF8", Offset = "0xA61BF8", VA = "0xA61BF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C49")]
	[Address(RVA = "0xA61C8C", Offset = "0xA61C8C", VA = "0xA61C8C")]
	private static string GetApiUrl()
	{
		return null;
	}

	[Token(Token = "0x6000C4A")]
	[Address(RVA = "0xA61C18", Offset = "0xA61C18", VA = "0xA61C18")]
	[IteratorStateMachine(typeof(<PlanningRoutine>d__12))]
	private IEnumerator PlanningRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000C4B")]
	[Address(RVA = "0xA61E38", Offset = "0xA61E38", VA = "0xA61E38")]
	private void RequestTournamentDatesByHttp()
	{
	}

	[Token(Token = "0x6000C4C")]
	[Address(RVA = "0xA61EE4", Offset = "0xA61EE4", VA = "0xA61EE4")]
	private void OnHttpResponseReceived(UnityWebRequest httpResponse)
	{
	}

	[Token(Token = "0x6000C4D")]
	[Address(RVA = "0xA623F8", Offset = "0xA623F8", VA = "0xA623F8")]
	private void AddNewTournamentHostingInfoFromDTO(TournamentDateDTO date)
	{
	}

	[Token(Token = "0x6000C4E")]
	[Address(RVA = "0xA62350", Offset = "0xA62350", VA = "0xA62350")]
	private void AddNewTournamentHostingInfosFromDTOs(List<TournamentDateDTO> dates)
	{
	}

	[Token(Token = "0x6000C4F")]
	[Address(RVA = "0xA627EC", Offset = "0xA627EC", VA = "0xA627EC")]
	public TournamentHostingDatesGatherer()
	{
	}
}
[Serializable]
[Token(Token = "0x200028A")]
public class TournamentHostingInfo
{
	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public DateTime date;

	[Token(Token = "0x4000D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CustomDateTime dateForJson;

	[Token(Token = "0x4000D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CloudRegionCode regionCode;

	[Token(Token = "0x4000D4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isAvailableOnAllRegions;

	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string id;

	[Token(Token = "0x6000C59")]
	[Address(RVA = "0xA629A8", Offset = "0xA629A8", VA = "0xA629A8")]
	public void MigrateDateFromJson()
	{
	}

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0xA629F0", Offset = "0xA629F0", VA = "0xA629F0")]
	public void MigrateDateToJson()
	{
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0xA6277C", Offset = "0xA6277C", VA = "0xA6277C")]
	public TournamentHostingInfo()
	{
	}
}
[Serializable]
[Token(Token = "0x200028B")]
public class CustomDateTime
{
	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int year;

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int month;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int day;

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int hour;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int minute;

	[Token(Token = "0x4000D55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int second;

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0xA627E4", Offset = "0xA627E4", VA = "0xA627E4")]
	public CustomDateTime()
	{
	}
}
[Token(Token = "0x200028C")]
public class TournamentVirtualMachineShutdownController : MonoBehaviour
{
	[Token(Token = "0x4000D56")]
	private const string urlForVirtualMachineShutdownProd = "https://api.elven-assassin.com/tournaments/{0}/finish";

	[Token(Token = "0x4000D57")]
	private const string urlForVirtualMachineShutdownStage = "https://stage.api.elven-assassin.com/tournaments/{0}/finish";

	[Token(Token = "0x4000D58")]
	private const string urlForVirtualMachineShutdownDev = "https://dev.api.elven-assassin.com/tournaments/{0}/finish";

	[Token(Token = "0x4000D59")]
	private const string xApiHeaderKey = "x-api-key";

	[Token(Token = "0x4000D5A")]
	private const string xApiHeaderValueProd = "D79VUQnV672W5A7tKgI8XaQ6UEYS9qqL4rQulyc7";

	[Token(Token = "0x4000D5B")]
	private const string xApiHeaderValueStage = "vUUA8YHKEa40EEJcD3iIOf8VbKWx6iA4Q7Idawbg";

	[Token(Token = "0x4000D5C")]
	private const string xApiHeaderValueDev = "rbKwn2oqFf9YT5kQmYfOg8BCehMRape36GVP7bbl";

	[Token(Token = "0x4000D5D")]
	private const string shutdownRequestJson = ".";

	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Http http;

	[Token(Token = "0x6000C5D")]
	[Address(RVA = "0xA611F0", Offset = "0xA611F0", VA = "0xA611F0")]
	public void ShutdownVirtualMachine(string tournamentId)
	{
	}

	[Token(Token = "0x6000C5E")]
	[Address(RVA = "0xA62C40", Offset = "0xA62C40", VA = "0xA62C40")]
	private string GetUrlForShutdown(string tournamentId)
	{
		return null;
	}

	[Token(Token = "0x6000C5F")]
	[Address(RVA = "0xA62ABC", Offset = "0xA62ABC", VA = "0xA62ABC")]
	private static string GetXApiKey()
	{
		return null;
	}

	[Token(Token = "0x6000C60")]
	[Address(RVA = "0xA62DE0", Offset = "0xA62DE0", VA = "0xA62DE0")]
	private void OnResponseReceived(UnityWebRequest response)
	{
	}

	[Token(Token = "0x6000C61")]
	[Address(RVA = "0xA62EC8", Offset = "0xA62EC8", VA = "0xA62EC8")]
	public TournamentVirtualMachineShutdownController()
	{
	}
}
[Serializable]
[Token(Token = "0x200028D")]
public class TournamentDateDTO
{
	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string id;

	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public long timestamp;

	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string region;

	[Token(Token = "0x6000C62")]
	[Address(RVA = "0xA62ED0", Offset = "0xA62ED0", VA = "0xA62ED0")]
	public TournamentDateDTO()
	{
	}
}
[Serializable]
[Token(Token = "0x200028E")]
public class TournamentDatesDTO
{
	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public TournamentDateDTO eu;

	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TournamentDateDTO us;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TournamentDateDTO asia;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TournamentDateDTO all;

	[Token(Token = "0x17000179")]
	public List<TournamentDateDTO> AllDatesDTOs
	{
		[Token(Token = "0x6000C63")]
		[Address(RVA = "0xA62084", Offset = "0xA62084", VA = "0xA62084")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000C64")]
	[Address(RVA = "0xA62ED8", Offset = "0xA62ED8", VA = "0xA62ED8")]
	public TournamentDatesDTO()
	{
	}
}
[Token(Token = "0x2000290")]
public class TournamentDeathMatchAutostarter : MonoBehaviourPun
{
	[Token(Token = "0x2000291")]
	[CompilerGenerated]
	private sealed class <TryToStartCountdownCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TournamentDeathMatchAutostarter <>4__this;

		[Token(Token = "0x1700017A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0xA635D8", Offset = "0xA635D8", VA = "0xA635D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C75")]
			[Address(RVA = "0xA63620", Offset = "0xA63620", VA = "0xA63620", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xA6300C", Offset = "0xA6300C", VA = "0xA6300C")]
		[DebuggerHidden]
		public <TryToStartCountdownCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xA633B8", Offset = "0xA633B8", VA = "0xA633B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xA633BC", Offset = "0xA633BC", VA = "0xA633BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xA635E0", Offset = "0xA635E0", VA = "0xA635E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000292")]
	[CompilerGenerated]
	private sealed class <SyncTimeCoroutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TournamentDeathMatchAutostarter <>4__this;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Player player;

		[Token(Token = "0x1700017C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C79")]
			[Address(RVA = "0xA638E0", Offset = "0xA638E0", VA = "0xA638E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0xA63928", Offset = "0xA63928", VA = "0xA63928", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xA63268", Offset = "0xA63268", VA = "0xA63268")]
		[DebuggerHidden]
		public <SyncTimeCoroutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xA63628", Offset = "0xA63628", VA = "0xA63628", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xA6362C", Offset = "0xA6362C", VA = "0xA6362C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xA638E8", Offset = "0xA638E8", VA = "0xA638E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DeathMatchGameTimeController deathMatchGameTimeController;

	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject startButton;

	[Token(Token = "0x4000D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Timer timerToStartTheGame;

	[Token(Token = "0x4000D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float retryTime;

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0xA62F78", Offset = "0xA62F78", VA = "0xA62F78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C69")]
	[Address(RVA = "0xA62F98", Offset = "0xA62F98", VA = "0xA62F98")]
	[IteratorStateMachine(typeof(<TryToStartCountdownCoroutine>d__5))]
	private IEnumerator TryToStartCountdownCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0xA63034", Offset = "0xA63034", VA = "0xA63034")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0xA631B8", Offset = "0xA631B8", VA = "0xA631B8")]
	[PunRPC]
	private void RPCRequestTimeToStartGame(Player player)
	{
	}

	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0xA631D8", Offset = "0xA631D8", VA = "0xA631D8")]
	[IteratorStateMachine(typeof(<SyncTimeCoroutine>d__8))]
	private IEnumerator SyncTimeCoroutine(Player player)
	{
		return null;
	}

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0xA63290", Offset = "0xA63290", VA = "0xA63290")]
	[PunRPC]
	private void RPCSynchronizeCountdownToGameStart(float time)
	{
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0xA6338C", Offset = "0xA6338C", VA = "0xA6338C")]
	public TournamentDeathMatchAutostarter()
	{
	}
}
[Token(Token = "0x2000293")]
public class TournamentDeathMatchController : MonoBehaviourPun, IMatchmakingCallbacks, ILobbyCallbacks
{
	[Token(Token = "0x2000296")]
	[CompilerGenerated]
	private sealed class <JoinLobbyAfterReadyCoroutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700017E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0xA64BD0", Offset = "0xA64BD0", VA = "0xA64BD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0xA64C18", Offset = "0xA64C18", VA = "0xA64C18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xA64894", Offset = "0xA64894", VA = "0xA64894")]
		[DebuggerHidden]
		public <JoinLobbyAfterReadyCoroutine>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xA64A18", Offset = "0xA64A18", VA = "0xA64A18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xA64A1C", Offset = "0xA64A1C", VA = "0xA64A1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xA64BD8", Offset = "0xA64BD8", VA = "0xA64BD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DeathMatchScoreboard scoreboard;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isLeavingTournamentMatch;

	[Token(Token = "0x6000C7C")]
	[Address(RVA = "0xA63930", Offset = "0xA63930", VA = "0xA63930")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C7D")]
	[Address(RVA = "0xA63A68", Offset = "0xA63A68", VA = "0xA63A68")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C7E")]
	[Address(RVA = "0xA63AC0", Offset = "0xA63AC0", VA = "0xA63AC0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C7F")]
	[Address(RVA = "0xA63B18", Offset = "0xA63B18", VA = "0xA63B18")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C80")]
	[Address(RVA = "0xA63C50", Offset = "0xA63C50", VA = "0xA63C50")]
	private void TournamentResult()
	{
	}

	[Token(Token = "0x6000C81")]
	[Address(RVA = "0xA6455C", Offset = "0xA6455C", VA = "0xA6455C")]
	private void LeaveRoom()
	{
	}

	[Token(Token = "0x6000C82")]
	[Address(RVA = "0xA646A8", Offset = "0xA646A8", VA = "0xA646A8", Slot = "7")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000C83")]
	[Address(RVA = "0xA646AC", Offset = "0xA646AC", VA = "0xA646AC", Slot = "10")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000C84")]
	[Address(RVA = "0xA6473C", Offset = "0xA6473C", VA = "0xA6473C", Slot = "11")]
	public void OnJoinedLobby()
	{
	}

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0xA646DC", Offset = "0xA646DC", VA = "0xA646DC")]
	[IteratorStateMachine(typeof(<JoinLobbyAfterReadyCoroutine>d__11))]
	private IEnumerator JoinLobbyAfterReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000C86")]
	[Address(RVA = "0xA648BC", Offset = "0xA648BC", VA = "0xA648BC", Slot = "5")]
	public void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0xA648C0", Offset = "0xA648C0", VA = "0xA648C0", Slot = "6")]
	public void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000C88")]
	[Address(RVA = "0xA648C4", Offset = "0xA648C4", VA = "0xA648C4", Slot = "4")]
	public void OnFriendListUpdate(List<FriendInfo> friendList)
	{
	}

	[Token(Token = "0x6000C89")]
	[Address(RVA = "0xA648C8", Offset = "0xA648C8", VA = "0xA648C8", Slot = "9")]
	public void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000C8A")]
	[Address(RVA = "0xA648CC", Offset = "0xA648CC", VA = "0xA648CC", Slot = "8")]
	public void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000C8B")]
	[Address(RVA = "0xA648D0", Offset = "0xA648D0", VA = "0xA648D0", Slot = "12")]
	public void OnLeftLobby()
	{
	}

	[Token(Token = "0x6000C8C")]
	[Address(RVA = "0xA648D4", Offset = "0xA648D4", VA = "0xA648D4", Slot = "13")]
	public void OnRoomListUpdate(List<RoomInfo> roomList)
	{
	}

	[Token(Token = "0x6000C8D")]
	[Address(RVA = "0xA648D8", Offset = "0xA648D8", VA = "0xA648D8", Slot = "14")]
	public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
	{
	}

	[Token(Token = "0x6000C8E")]
	[Address(RVA = "0xA648DC", Offset = "0xA648DC", VA = "0xA648DC")]
	public TournamentDeathMatchController()
	{
	}
}
[Token(Token = "0x2000297")]
public class TournamentDebugTimers : MonoBehaviour
{
	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text timeSincePlaymodeEntered;

	[Token(Token = "0x4000D7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text timeControllerState;

	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text stateControllerState;

	[Token(Token = "0x4000D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text timer;

	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text milisecondTimer;

	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool statusSet;

	[Token(Token = "0x6000C9B")]
	[Address(RVA = "0xA64C20", Offset = "0xA64C20", VA = "0xA64C20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C9C")]
	[Address(RVA = "0xA64ED8", Offset = "0xA64ED8", VA = "0xA64ED8")]
	private void CheckStatusAmbiguity()
	{
	}

	[Token(Token = "0x6000C9D")]
	[Address(RVA = "0xA6514C", Offset = "0xA6514C", VA = "0xA6514C")]
	private void SetTimers(TimeSpan timeSpan)
	{
	}

	[Token(Token = "0x6000C9E")]
	[Address(RVA = "0xA65700", Offset = "0xA65700", VA = "0xA65700")]
	public TournamentDebugTimers()
	{
	}
}
[Token(Token = "0x2000298")]
public class TournamentGameStateController : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x2000299")]
	public enum TournamentGameStateType
	{
		[Token(Token = "0x4000D89")]
		Enrolling,
		[Token(Token = "0x4000D8A")]
		DividingPlayersIntoGroup,
		[Token(Token = "0x4000D8B")]
		WaitingForRound,
		[Token(Token = "0x4000D8C")]
		Playing,
		[Token(Token = "0x4000D8D")]
		End
	}

	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TournamentGroupDivider groupDivider;

	[Token(Token = "0x4000D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TournamentMatchesCreator matchesCreator;

	[Token(Token = "0x4000D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TournamentProgressController progressController;

	[Token(Token = "0x4000D84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TournamentLeaderboardController tournamentLeaderboardController;

	[Token(Token = "0x4000D85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool forceCreatingMatches;

	[Token(Token = "0x4000D86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TournamentGameStateType tournamentGameState;

	[Token(Token = "0x4000D87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public TournamentGameStateType debugTournamentGameState;

	[Token(Token = "0x17000180")]
	public static TournamentGameStateType TournamentGameState
	{
		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xA65708", Offset = "0xA65708", VA = "0xA65708")]
		get
		{
			return default(TournamentGameStateType);
		}
		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xA65750", Offset = "0xA65750", VA = "0xA65750")]
		set
		{
		}
	}

	[Token(Token = "0x17000181")]
	public static bool IsEnrolling
	{
		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xA65844", Offset = "0xA65844", VA = "0xA65844")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000182")]
	public static bool IsWaitingForRound
	{
		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xA6588C", Offset = "0xA6588C", VA = "0xA6588C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000183")]
	public static bool IsTournamentOver
	{
		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xA65968", Offset = "0xA65968", VA = "0xA65968")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000184")]
	public static bool IsTournamentInProgress
	{
		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xA659B0", Offset = "0xA659B0", VA = "0xA659B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000CA5")]
	[Address(RVA = "0xA65A40", Offset = "0xA65A40", VA = "0xA65A40")]
	private void CreateRoomsForAllPlayers()
	{
	}

	[Token(Token = "0x6000CA6")]
	[Address(RVA = "0xA661DC", Offset = "0xA661DC", VA = "0xA661DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CA7")]
	[Address(RVA = "0xA66234", Offset = "0xA66234", VA = "0xA66234")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000CA8")]
	[Address(RVA = "0xA6628C", Offset = "0xA6628C", VA = "0xA6628C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CA9")]
	[Address(RVA = "0xA66750", Offset = "0xA66750", VA = "0xA66750")]
	public void ForceCreatingMatches()
	{
	}

	[Token(Token = "0x6000CAA")]
	[Address(RVA = "0xA6675C", Offset = "0xA6675C", VA = "0xA6675C", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0xA6684C", Offset = "0xA6684C", VA = "0xA6684C")]
	public TournamentGameStateController()
	{
	}
}
[Serializable]
[Token(Token = "0x200029A")]
public class TournamentGroup
{
	[Token(Token = "0x4000D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<TournamentPlayer> playerListInGroup;

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0xA66854", Offset = "0xA66854", VA = "0xA66854")]
	public bool CheckIfPlayerBelongsToGroup(TournamentPlayer tournamentPlayer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CAD")]
	[Address(RVA = "0xA66944", Offset = "0xA66944", VA = "0xA66944")]
	public TournamentGroup()
	{
	}
}
[Token(Token = "0x200029C")]
public class TournamentGroupDivider : MonoBehaviour
{
	[Token(Token = "0x4000D90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TournamentLeaderboardController tournamentLeaderboardController;

	[Token(Token = "0x4000D91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TournamentInfoWindowController tournamentInfoWindowController;

	[Token(Token = "0x4000D92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<TournamentPlayer> playerDividerList;

	[Token(Token = "0x4000D93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<TournamentGroup> tournamentGroupList;

	[Token(Token = "0x4000D94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int countOfPlayersInDividerList;

	[Token(Token = "0x4000D95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int countOfGroups;

	[Token(Token = "0x4000D96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int modulo;

	[Token(Token = "0x4000D97")]
	private const int defaultMaxPlayersInGroup = 4;

	[Token(Token = "0x4000D98")]
	private const int threePlayersInGroup = 3;

	[Token(Token = "0x4000D99")]
	private const int fivePlayersInDividerList = 5;

	[Token(Token = "0x4000D9A")]
	private const int twoPlayersInGroup = 2;

	[Token(Token = "0x17000185")]
	public int CountGroup
	{
		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xA669DC", Offset = "0xA669DC", VA = "0xA669DC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000CB1")]
	[Address(RVA = "0xA65AD0", Offset = "0xA65AD0", VA = "0xA65AD0")]
	public List<TournamentGroup> StartDividingIntoGroups()
	{
		return null;
	}

	[Token(Token = "0x6000CB2")]
	[Address(RVA = "0xA671FC", Offset = "0xA671FC", VA = "0xA671FC")]
	private void DrawTournamentGroupListOnMasterPanel()
	{
	}

	[Token(Token = "0x6000CB3")]
	[Address(RVA = "0xA669E4", Offset = "0xA669E4", VA = "0xA669E4")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000CB4")]
	[Address(RVA = "0xA672D0", Offset = "0xA672D0", VA = "0xA672D0")]
	public TournamentGroup GetPlayerEnrolledGroup(TournamentPlayer tournamentPlayer)
	{
		return null;
	}

	[Token(Token = "0x6000CB5")]
	[Address(RVA = "0xA66EA0", Offset = "0xA66EA0", VA = "0xA66EA0")]
	private void SelectPlayersToTournamentGroup(int maxPlayersInGroup)
	{
	}

	[Token(Token = "0x6000CB6")]
	[Address(RVA = "0xA673EC", Offset = "0xA673EC", VA = "0xA673EC")]
	private TournamentPlayer GetRandomTournamentPlayer()
	{
		return null;
	}

	[Token(Token = "0x6000CB7")]
	[Address(RVA = "0xA674F4", Offset = "0xA674F4", VA = "0xA674F4")]
	public TournamentGroupDivider()
	{
	}
}
[Token(Token = "0x20002A0")]
public class TournamentHostingController : MonoBehaviour, IMatchmakingCallbacks
{
	[Token(Token = "0x4000D9F")]
	public const string tournamentRoomName = "Tournament";

	[Token(Token = "0x4000DA0")]
	private const string tournamentLobbyName = "Tournament";

	[Token(Token = "0x4000DA1")]
	public const string tournamentSceneName = "TournamentMenu";

	[Token(Token = "0x4000DA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TypedLobby tournamentLobby;

	[Token(Token = "0x4000DA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TournamentMasterWindowsSwitcher windowsSwitcher;

	[Token(Token = "0x4000DA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TournamentRoomCreatingErrorWindowController creatingRoomErrorWindow;

	[Token(Token = "0x4000DA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject controllersContainer;

	[Token(Token = "0x6000CC0")]
	[Address(RVA = "0xA679A0", Offset = "0xA679A0", VA = "0xA679A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CC1")]
	[Address(RVA = "0xA679F8", Offset = "0xA679F8", VA = "0xA679F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000CC2")]
	[Address(RVA = "0xA67A50", Offset = "0xA67A50", VA = "0xA67A50")]
	public void CreatePhotonTournamentRoom()
	{
	}

	[Token(Token = "0x6000CC3")]
	[Address(RVA = "0xA67C98", Offset = "0xA67C98", VA = "0xA67C98")]
	public void ShowCreatingRoomError(string message)
	{
	}

	[Token(Token = "0x6000CC4")]
	[Address(RVA = "0xA67D0C", Offset = "0xA67D0C", VA = "0xA67D0C", Slot = "5")]
	public void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000CC5")]
	[Address(RVA = "0xA67D84", Offset = "0xA67D84", VA = "0xA67D84", Slot = "4")]
	public void OnFriendListUpdate(List<FriendInfo> friendList)
	{
	}

	[Token(Token = "0x6000CC6")]
	[Address(RVA = "0xA67DC4", Offset = "0xA67DC4", VA = "0xA67DC4", Slot = "6")]
	public void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000CC7")]
	[Address(RVA = "0xA67E44", Offset = "0xA67E44", VA = "0xA67E44", Slot = "7")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000CC8")]
	[Address(RVA = "0xA67E48", Offset = "0xA67E48", VA = "0xA67E48", Slot = "8")]
	public void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000CC9")]
	[Address(RVA = "0xA67E4C", Offset = "0xA67E4C", VA = "0xA67E4C", Slot = "9")]
	public void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000CCA")]
	[Address(RVA = "0xA67E50", Offset = "0xA67E50", VA = "0xA67E50", Slot = "10")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000CCB")]
	[Address(RVA = "0xA67E54", Offset = "0xA67E54", VA = "0xA67E54")]
	public TournamentHostingController()
	{
	}
}
[Token(Token = "0x20002A1")]
public class TournamentHostPlayerMenuSwitcher : MonoBehaviourPun
{
	[Token(Token = "0x4000DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject masterSceneContents;

	[Token(Token = "0x4000DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject playerSceneContents;

	[Token(Token = "0x4000DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject controllersContainer;

	[Token(Token = "0x4000DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject playerEnvironment;

	[Token(Token = "0x6000CCD")]
	[Address(RVA = "0xA67EFC", Offset = "0xA67EFC", VA = "0xA67EFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CCE")]
	[Address(RVA = "0xA67FD4", Offset = "0xA67FD4", VA = "0xA67FD4")]
	public TournamentHostPlayerMenuSwitcher()
	{
	}
}
[Token(Token = "0x20002A2")]
public class TournamentIDResetter : MonoBehaviour
{
	[Token(Token = "0x6000CCF")]
	[Address(RVA = "0xA67FDC", Offset = "0xA67FDC", VA = "0xA67FDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CD0")]
	[Address(RVA = "0xA6802C", Offset = "0xA6802C", VA = "0xA6802C")]
	public TournamentIDResetter()
	{
	}
}
[Token(Token = "0x20002A3")]
public class TournamentInfoWindowController : MonoBehaviour, IInRoomCallbacks, IMatchmakingCallbacks
{
	[Token(Token = "0x4000DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text playerCountText;

	[Token(Token = "0x4000DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TournamentPlayersScrollViewController playersScrollView;

	[Token(Token = "0x4000DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TournamentPlayersScrollViewController playersInDividerGroupsScrollView;

	[Token(Token = "0x4000DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TournamentMasterWindowsSwitcher windowsSwitcher;

	[Token(Token = "0x4000DAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int numberOfPlayersInTournament;

	[Token(Token = "0x4000DAF")]
	private const string groupName = "Tournament Group ";

	[Token(Token = "0x17000186")]
	public int NumberOfPlayersInTournament
	{
		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xA680E4", Offset = "0xA680E4", VA = "0xA680E4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xA680EC", Offset = "0xA680EC", VA = "0xA680EC")]
		set
		{
		}
	}

	[Token(Token = "0x6000CD1")]
	[Address(RVA = "0xA68034", Offset = "0xA68034", VA = "0xA68034")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CD2")]
	[Address(RVA = "0xA6808C", Offset = "0xA6808C", VA = "0xA6808C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000CD5")]
	[Address(RVA = "0xA68124", Offset = "0xA68124", VA = "0xA68124")]
	public void OnBotCreated(string newBot)
	{
	}

	[Token(Token = "0x6000CD6")]
	[Address(RVA = "0xA682AC", Offset = "0xA682AC", VA = "0xA682AC")]
	public void OnBotRemoved(string removedBot)
	{
	}

	[Token(Token = "0x6000CD7")]
	[Address(RVA = "0xA68408", Offset = "0xA68408", VA = "0xA68408")]
	public void OnCloseServerClick()
	{
	}

	[Token(Token = "0x6000CD8")]
	[Address(RVA = "0xA6721C", Offset = "0xA6721C", VA = "0xA6721C")]
	public void DrawTournamentGroupList(List<TournamentGroup> tournamentGroupList)
	{
	}

	[Token(Token = "0x6000CD9")]
	[Address(RVA = "0xA685FC", Offset = "0xA685FC", VA = "0xA685FC")]
	private void AddPlayersInfoPanelToTournamentGroupScrollView(TournamentGroup group, int countGroup)
	{
	}

	[Token(Token = "0x6000CDA")]
	[Address(RVA = "0xA68894", Offset = "0xA68894", VA = "0xA68894")]
	public void ChangePlayerInfoPanelColor(string id, bool qualified)
	{
	}

	[Token(Token = "0x6000CDB")]
	[Address(RVA = "0xA68AF4", Offset = "0xA68AF4", VA = "0xA68AF4", Slot = "4")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000CDC")]
	[Address(RVA = "0xA68BF0", Offset = "0xA68BF0", VA = "0xA68BF0", Slot = "5")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x6000CDD")]
	[Address(RVA = "0xA68CEC", Offset = "0xA68CEC", VA = "0xA68CEC", Slot = "6")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000CDE")]
	[Address(RVA = "0xA68CF0", Offset = "0xA68CF0", VA = "0xA68CF0", Slot = "7")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000CDF")]
	[Address(RVA = "0xA68CF4", Offset = "0xA68CF4", VA = "0xA68CF4", Slot = "8")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000CE0")]
	[Address(RVA = "0xA68CF8", Offset = "0xA68CF8", VA = "0xA68CF8", Slot = "9")]
	public void OnFriendListUpdate(List<FriendInfo> friendList)
	{
	}

	[Token(Token = "0x6000CE1")]
	[Address(RVA = "0xA68CFC", Offset = "0xA68CFC", VA = "0xA68CFC", Slot = "10")]
	public void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000CE2")]
	[Address(RVA = "0xA68D00", Offset = "0xA68D00", VA = "0xA68D00", Slot = "11")]
	public void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000CE3")]
	[Address(RVA = "0xA68D04", Offset = "0xA68D04", VA = "0xA68D04", Slot = "12")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000CE4")]
	[Address(RVA = "0xA68D08", Offset = "0xA68D08", VA = "0xA68D08", Slot = "13")]
	public void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000CE5")]
	[Address(RVA = "0xA68D0C", Offset = "0xA68D0C", VA = "0xA68D0C", Slot = "14")]
	public void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000CE6")]
	[Address(RVA = "0xA68D10", Offset = "0xA68D10", VA = "0xA68D10", Slot = "15")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000CE7")]
	[Address(RVA = "0xA68D88", Offset = "0xA68D88", VA = "0xA68D88")]
	public TournamentInfoWindowController()
	{
	}
}
[Token(Token = "0x20002A4")]
public class TournamentLeaderboardGUIController : MonoBehaviourPun
{
	[Token(Token = "0x4000DB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<TournamentTopPlayerSpot> playerSpotList;

	[Token(Token = "0x4000DB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<TournamentPlayer> tournamentPlayerList;

	[Token(Token = "0x4000DB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int topPlayerIndex;

	[Token(Token = "0x4000DB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int qualifiedPlayersTopIndex;

	[Token(Token = "0x4000DB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int unqualifiedPlayersTopIndex;

	[Token(Token = "0x4000DB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int maxPlayersInTopList;

	[Token(Token = "0x17000187")]
	private int TopPlayerIndex
	{
		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xA68D90", Offset = "0xA68D90", VA = "0xA68D90")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xA68D98", Offset = "0xA68D98", VA = "0xA68D98")]
		set
		{
		}
	}

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0xA68E04", Offset = "0xA68E04", VA = "0xA68E04")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0xA68E54", Offset = "0xA68E54", VA = "0xA68E54")]
	public void ShowLeaderboard(List<TournamentPlayer> players)
	{
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0xA68E08", Offset = "0xA68E08", VA = "0xA68E08")]
	private void SetMaxPlayersInTopList()
	{
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0xA68E70", Offset = "0xA68E70", VA = "0xA68E70")]
	private void DrawLeaderboard()
	{
	}

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0xA68FAC", Offset = "0xA68FAC", VA = "0xA68FAC")]
	private bool CheckIfTournamentPlayerIndexIsOutOfRange(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0xA69440", Offset = "0xA69440", VA = "0xA69440")]
	public void ReactOnPressNextButton()
	{
	}

	[Token(Token = "0x6000CF0")]
	[Address(RVA = "0xA69464", Offset = "0xA69464", VA = "0xA69464")]
	public void ReactOnPressPreviousButton()
	{
	}

	[Token(Token = "0x6000CF1")]
	[Address(RVA = "0xA69488", Offset = "0xA69488", VA = "0xA69488")]
	public TournamentLeaderboardGUIController()
	{
	}
}
[Token(Token = "0x20002A5")]
public class TournamentLobbyMenuController : WindowController, IInRoomCallbacks
{
	[Token(Token = "0x4000DB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text playersCountText;

	[Token(Token = "0x4000DB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text timeToEndEnrollmentText;

	[Token(Token = "0x4000DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text stateInfoText;

	[Token(Token = "0x6000CF2")]
	[Address(RVA = "0xA69510", Offset = "0xA69510", VA = "0xA69510")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CF3")]
	[Address(RVA = "0xA69664", Offset = "0xA69664", VA = "0xA69664")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000CF4")]
	[Address(RVA = "0xA696BC", Offset = "0xA696BC", VA = "0xA696BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CF5")]
	[Address(RVA = "0xA69BF0", Offset = "0xA69BF0", VA = "0xA69BF0")]
	public void OnSettings()
	{
	}

	[Token(Token = "0x6000CF6")]
	[Address(RVA = "0xA69C70", Offset = "0xA69C70", VA = "0xA69C70")]
	public void OnQuit()
	{
	}

	[Token(Token = "0x6000CF7")]
	[Address(RVA = "0xA69B50", Offset = "0xA69B50", VA = "0xA69B50")]
	private void UpdateTournamentInProgressText()
	{
	}

	[Token(Token = "0x6000CF8")]
	[Address(RVA = "0xA69AB4", Offset = "0xA69AB4", VA = "0xA69AB4")]
	private void UpdateTournamentOverText()
	{
	}

	[Token(Token = "0x6000CF9")]
	[Address(RVA = "0xA69914", Offset = "0xA69914", VA = "0xA69914")]
	private void UpdateQualifiedText()
	{
	}

	[Token(Token = "0x6000CFA")]
	[Address(RVA = "0xA6978C", Offset = "0xA6978C", VA = "0xA6978C")]
	private void UpdateEnrollmentText()
	{
	}

	[Token(Token = "0x6000CFB")]
	[Address(RVA = "0xA69570", Offset = "0xA69570", VA = "0xA69570")]
	private void UpdatePlayerCountText()
	{
	}

	[Token(Token = "0x6000CFC")]
	[Address(RVA = "0xA69E34", Offset = "0xA69E34", VA = "0xA69E34", Slot = "4")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000CFD")]
	[Address(RVA = "0xA69E38", Offset = "0xA69E38", VA = "0xA69E38", Slot = "5")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x6000CFE")]
	[Address(RVA = "0xA69E3C", Offset = "0xA69E3C", VA = "0xA69E3C", Slot = "6")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000CFF")]
	[Address(RVA = "0xA69E40", Offset = "0xA69E40", VA = "0xA69E40", Slot = "7")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000D00")]
	[Address(RVA = "0xA69E44", Offset = "0xA69E44", VA = "0xA69E44", Slot = "8")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000D01")]
	[Address(RVA = "0xA69E48", Offset = "0xA69E48", VA = "0xA69E48")]
	public TournamentLobbyMenuController()
	{
	}
}
[Token(Token = "0x20002A6")]
public class TournamentLocalMatchResult : MonoBehaviour
{
	[Token(Token = "0x4000DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int stage;

	[Token(Token = "0x4000DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool isItFinalMatch;

	[Token(Token = "0x4000DBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static TournamentMatchClassification matchClassification;

	[Token(Token = "0x17000188")]
	public static TournamentPlayerResult LocalPlayerResult
	{
		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xA69E50", Offset = "0xA69E50", VA = "0xA69E50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000D03")]
	[Address(RVA = "0xA6A048", Offset = "0xA6A048", VA = "0xA6A048")]
	public static void ResetResult()
	{
	}

	[Token(Token = "0x6000D04")]
	[Address(RVA = "0xA6A0A4", Offset = "0xA6A0A4", VA = "0xA6A0A4")]
	public TournamentLocalMatchResult()
	{
	}
}
[Token(Token = "0x20002A8")]
public class TournamentMasterConnectingWindowController : MonoBehaviour, IConnectionCallbacks
{
	[Token(Token = "0x4000DBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TournamentMasterWindowsSwitcher windowsSwitcher;

	[Token(Token = "0x4000DC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text connectingToPhotonErrorText;

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private CloudRegionCode cloudRegionCode;

	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject connectingUIelements;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject selectRegionUIElements;

	[Token(Token = "0x14000014")]
	public event Action OnConnectionEstablished
	{
		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xA608D8", Offset = "0xA608D8", VA = "0xA608D8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xA6A650", Offset = "0xA6A650", VA = "0xA6A650")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000D0B")]
	[Address(RVA = "0xA6A6EC", Offset = "0xA6A6EC", VA = "0xA6A6EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D0C")]
	[Address(RVA = "0xA6A778", Offset = "0xA6A778", VA = "0xA6A778")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000D0D")]
	[Address(RVA = "0xA60DE0", Offset = "0xA60DE0", VA = "0xA60DE0")]
	public void OnConnectButtonClicked()
	{
	}

	[Token(Token = "0x6000D0E")]
	[Address(RVA = "0xA6A7D0", Offset = "0xA6A7D0", VA = "0xA6A7D0", Slot = "5")]
	public void OnConnectedToMaster()
	{
	}

	[Token(Token = "0x6000D0F")]
	[Address(RVA = "0xA6A810", Offset = "0xA6A810", VA = "0xA6A810")]
	public void SetRegion(CloudRegionCode cloudRegionCode)
	{
	}

	[Token(Token = "0x6000D10")]
	[Address(RVA = "0xA6A818", Offset = "0xA6A818", VA = "0xA6A818", Slot = "4")]
	public void OnConnected()
	{
	}

	[Token(Token = "0x6000D11")]
	[Address(RVA = "0xA6A81C", Offset = "0xA6A81C", VA = "0xA6A81C", Slot = "6")]
	public void OnDisconnected(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000D12")]
	[Address(RVA = "0xA6A8C0", Offset = "0xA6A8C0", VA = "0xA6A8C0", Slot = "7")]
	public void OnRegionListReceived(RegionHandler regionHandler)
	{
	}

	[Token(Token = "0x6000D13")]
	[Address(RVA = "0xA6A8C4", Offset = "0xA6A8C4", VA = "0xA6A8C4", Slot = "8")]
	public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
	{
	}

	[Token(Token = "0x6000D14")]
	[Address(RVA = "0xA6A8C8", Offset = "0xA6A8C8", VA = "0xA6A8C8", Slot = "9")]
	public void OnCustomAuthenticationFailed(string debugMessage)
	{
	}

	[Token(Token = "0x6000D15")]
	[Address(RVA = "0xA6A8CC", Offset = "0xA6A8CC", VA = "0xA6A8CC")]
	public TournamentMasterConnectingWindowController()
	{
	}
}
[Token(Token = "0x20002A9")]
public class TournamentMasterDisconnectionErrorWindowController : MonoBehaviour, IConnectionCallbacks
{
	[Token(Token = "0x4000DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject disconnectionErrorWindow;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text disconnectionErrorMessageText;

	[Token(Token = "0x4000DC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TournamentMasterWindowsSwitcher windowsSwitcher;

	[Token(Token = "0x6000D16")]
	[Address(RVA = "0xA6A8DC", Offset = "0xA6A8DC", VA = "0xA6A8DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D17")]
	[Address(RVA = "0xA6A934", Offset = "0xA6A934", VA = "0xA6A934")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000D18")]
	[Address(RVA = "0xA6A98C", Offset = "0xA6A98C", VA = "0xA6A98C")]
	public void OnBackButtonClick()
	{
	}

	[Token(Token = "0x6000D19")]
	[Address(RVA = "0xA6A9A8", Offset = "0xA6A9A8", VA = "0xA6A9A8", Slot = "4")]
	public void OnConnected()
	{
	}

	[Token(Token = "0x6000D1A")]
	[Address(RVA = "0xA6A9AC", Offset = "0xA6A9AC", VA = "0xA6A9AC", Slot = "5")]
	public void OnConnectedToMaster()
	{
	}

	[Token(Token = "0x6000D1B")]
	[Address(RVA = "0xA6A9B0", Offset = "0xA6A9B0", VA = "0xA6A9B0", Slot = "6")]
	public void OnDisconnected(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000D1C")]
	[Address(RVA = "0xA6AA54", Offset = "0xA6AA54", VA = "0xA6AA54", Slot = "7")]
	public void OnRegionListReceived(RegionHandler regionHandler)
	{
	}

	[Token(Token = "0x6000D1D")]
	[Address(RVA = "0xA6AA58", Offset = "0xA6AA58", VA = "0xA6AA58", Slot = "8")]
	public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
	{
	}

	[Token(Token = "0x6000D1E")]
	[Address(RVA = "0xA6AA5C", Offset = "0xA6AA5C", VA = "0xA6AA5C", Slot = "9")]
	public void OnCustomAuthenticationFailed(string debugMessage)
	{
	}

	[Token(Token = "0x6000D1F")]
	[Address(RVA = "0xA6AA60", Offset = "0xA6AA60", VA = "0xA6AA60")]
	public TournamentMasterDisconnectionErrorWindowController()
	{
	}
}
[Token(Token = "0x20002AA")]
public class TournamentMasterSettingsWindowController : MonoBehaviour
{
	[Token(Token = "0x20002AB")]
	[CompilerGenerated]
	private sealed class <InputFieldInitializationRoutine>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TournamentMasterSettingsWindowController <>4__this;

		[Token(Token = "0x17000189")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0xA6B010", Offset = "0xA6B010", VA = "0xA6B010", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D29")]
			[Address(RVA = "0xA6B058", Offset = "0xA6B058", VA = "0xA6B058", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xA6AAFC", Offset = "0xA6AAFC", VA = "0xA6AAFC")]
		[DebuggerHidden]
		public <InputFieldInitializationRoutine>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xA6AD28", Offset = "0xA6AD28", VA = "0xA6AD28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xA6AD2C", Offset = "0xA6AD2C", VA = "0xA6AD2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xA6B018", Offset = "0xA6B018", VA = "0xA6B018", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private InputField tournamentYearInputField;

	[Token(Token = "0x4000DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private InputField tournamentMonthInputField;

	[Token(Token = "0x4000DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private InputField tournamentDayInputField;

	[Token(Token = "0x4000DCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private InputField tournamentHourInputField;

	[Token(Token = "0x4000DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private InputField tournamentMinuteInputField;

	[Token(Token = "0x4000DCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private InputField tournamentSecondInputField;

	[Token(Token = "0x4000DCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private InputField tournamentEnrollmentInputField;

	[Token(Token = "0x4000DCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private InputField tournamentPreparationInputField;

	[Token(Token = "0x4000DD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private InputField tournamentMatchInputField;

	[Token(Token = "0x6000D20")]
	[Address(RVA = "0xA6AA68", Offset = "0xA6AA68", VA = "0xA6AA68")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D21")]
	[Address(RVA = "0xA6AA88", Offset = "0xA6AA88", VA = "0xA6AA88")]
	[IteratorStateMachine(typeof(<InputFieldInitializationRoutine>d__10))]
	private IEnumerator InputFieldInitializationRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000D22")]
	[Address(RVA = "0xA6AB24", Offset = "0xA6AB24", VA = "0xA6AB24")]
	public void OnSetButtonClick()
	{
	}

	[Token(Token = "0x6000D23")]
	[Address(RVA = "0xA6AD20", Offset = "0xA6AD20", VA = "0xA6AD20")]
	public TournamentMasterSettingsWindowController()
	{
	}
}
[Token(Token = "0x20002AC")]
public class TournamentMasterWindow : MonoBehaviour
{
	[Token(Token = "0x20002AD")]
	public enum Type
	{
		[Token(Token = "0x4000DD6")]
		BeforeConnectedToPhoton,
		[Token(Token = "0x4000DD7")]
		BeforeHosting,
		[Token(Token = "0x4000DD8")]
		CreatingRoom,
		[Token(Token = "0x4000DD9")]
		AfterHosting,
		[Token(Token = "0x4000DDA")]
		CreatingRoomError,
		[Token(Token = "0x4000DDB")]
		DisconnectionError,
		[Token(Token = "0x4000DDC")]
		CouldNotConnectError
	}

	[Token(Token = "0x4000DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Type type;

	[Token(Token = "0x1700018B")]
	public Type WindowType
	{
		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xA6B060", Offset = "0xA6B060", VA = "0xA6B060")]
		get
		{
			return default(Type);
		}
	}

	[Token(Token = "0x6000D2B")]
	[Address(RVA = "0xA6B068", Offset = "0xA6B068", VA = "0xA6B068")]
	public TournamentMasterWindow()
	{
	}
}
[Token(Token = "0x20002AE")]
public class TournamentMasterWindowsSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<TournamentMasterWindow> windows;

	[Token(Token = "0x6000D2C")]
	[Address(RVA = "0xA6B070", Offset = "0xA6B070", VA = "0xA6B070")]
	public void CloseAllWindows()
	{
	}

	[Token(Token = "0x6000D2D")]
	[Address(RVA = "0xA67B9C", Offset = "0xA67B9C", VA = "0xA67B9C")]
	public void OpenWindow(TournamentMasterWindow.Type windowType)
	{
	}

	[Token(Token = "0x6000D2E")]
	[Address(RVA = "0xA6B180", Offset = "0xA6B180", VA = "0xA6B180")]
	public TournamentMasterWindowsSwitcher()
	{
	}
}
[Serializable]
[Token(Token = "0x20002B1")]
public class TournamentMatchClassification
{
	[Token(Token = "0x4000DE1")]
	private const int playersQualifingCount = 2;

	[Token(Token = "0x4000DE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<TournamentPlayerResult> playersResults;

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0xA6B250", Offset = "0xA6B250", VA = "0xA6B250")]
	public TournamentMatchClassification(List<TournamentPlayerResult> playersResults)
	{
	}

	[Token(Token = "0x6000D35")]
	[Address(RVA = "0xA644D8", Offset = "0xA644D8", VA = "0xA644D8")]
	public static bool isQualified(int playerRank, int playersCount)
	{
		return default(bool);
	}
}
[Token(Token = "0x20002B2")]
public class TournamentMatchesCreator : MonoBehaviourPun, IMatchmakingCallbacks, ILobbyCallbacks
{
	[Token(Token = "0x20002B8")]
	[CompilerGenerated]
	private sealed class <JoinLobbyAfterReadyCoroutine>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TournamentMatchesCreator <>4__this;

		[Token(Token = "0x1700018C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0xA6CCE4", Offset = "0xA6CCE4", VA = "0xA6CCE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D5F")]
			[Address(RVA = "0xA6CD2C", Offset = "0xA6CD2C", VA = "0xA6CD2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xA6BC1C", Offset = "0xA6BC1C", VA = "0xA6BC1C")]
		[DebuggerHidden]
		public <JoinLobbyAfterReadyCoroutine>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xA6CAFC", Offset = "0xA6CAFC", VA = "0xA6CAFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xA6CB00", Offset = "0xA6CB00", VA = "0xA6CB00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xA6CCEC", Offset = "0xA6CCEC", VA = "0xA6CCEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DE3")]
	private const float rPCDelayTime = 2f;

	[Token(Token = "0x4000DE4")]
	private const int maxRoomId = 10000;

	[Token(Token = "0x4000DE5")]
	private const int minRoomId = 0;

	[Token(Token = "0x4000DE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TournamentGroup groupInMatch;

	[Token(Token = "0x4000DE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string matchRoomName;

	[Token(Token = "0x4000DE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<TournamentGroup> debugTournamentGroupList;

	[Token(Token = "0x4000DE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool shouldCreateMatch;

	[Token(Token = "0x4000DEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int roomSize;

	[Token(Token = "0x4000DEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TournamentLobbyMenuController tournamentEnrollmentPhaseController;

	[Token(Token = "0x4000DEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TournamentProgressController tournamentProgressController;

	[Token(Token = "0x6000D36")]
	[Address(RVA = "0xA6B328", Offset = "0xA6B328", VA = "0xA6B328")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D37")]
	[Address(RVA = "0xA6B380", Offset = "0xA6B380", VA = "0xA6B380")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000D38")]
	[Address(RVA = "0xA65C40", Offset = "0xA65C40", VA = "0xA65C40")]
	public void CreateMatches(List<TournamentGroup> tournamentGroups)
	{
	}

	[Token(Token = "0x6000D39")]
	[Address(RVA = "0xA6B3D8", Offset = "0xA6B3D8", VA = "0xA6B3D8")]
	private void SendRPCCreateMatchToMatchCreatingPlayer(TournamentGroup group)
	{
	}

	[Token(Token = "0x6000D3A")]
	[Address(RVA = "0xA6B600", Offset = "0xA6B600", VA = "0xA6B600")]
	private static Player GetMatchCreatingPlayerForGroup(TournamentGroup group)
	{
		return null;
	}

	[Token(Token = "0x6000D3B")]
	[Address(RVA = "0xA6B7A4", Offset = "0xA6B7A4", VA = "0xA6B7A4")]
	[PunRPC]
	private void RPCCreateOrJoinMatch(string roomName, string[] playersInGroupIDs, string[] playersInGroupNames, bool[] playersInGroupIsBot, bool isFinalRound)
	{
	}

	[Token(Token = "0x6000D3C")]
	[Address(RVA = "0xA6BBA8", Offset = "0xA6BBA8", VA = "0xA6BBA8")]
	[IteratorStateMachine(typeof(<JoinLobbyAfterReadyCoroutine>d__16))]
	private IEnumerator JoinLobbyAfterReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000D3D")]
	[Address(RVA = "0xA6BC44", Offset = "0xA6BC44", VA = "0xA6BC44", Slot = "10")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000D3E")]
	[Address(RVA = "0xA6BC64", Offset = "0xA6BC64", VA = "0xA6BC64", Slot = "11")]
	public void OnJoinedLobby()
	{
	}

	[Token(Token = "0x6000D3F")]
	[Address(RVA = "0xA6BDC8", Offset = "0xA6BDC8", VA = "0xA6BDC8", Slot = "5")]
	public void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000D40")]
	[Address(RVA = "0xA6BDCC", Offset = "0xA6BDCC", VA = "0xA6BDCC", Slot = "6")]
	public void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000D41")]
	[Address(RVA = "0xA6BDD0", Offset = "0xA6BDD0", VA = "0xA6BDD0", Slot = "7")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000D42")]
	[Address(RVA = "0xA6BDD4", Offset = "0xA6BDD4", VA = "0xA6BDD4", Slot = "8")]
	public void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000D43")]
	[Address(RVA = "0xA6BDD8", Offset = "0xA6BDD8", VA = "0xA6BDD8", Slot = "9")]
	public void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000D44")]
	[Address(RVA = "0xA6BDDC", Offset = "0xA6BDDC", VA = "0xA6BDDC", Slot = "4")]
	public void OnFriendListUpdate(List<FriendInfo> friendList)
	{
	}

	[Token(Token = "0x6000D45")]
	[Address(RVA = "0xA6BDE0", Offset = "0xA6BDE0", VA = "0xA6BDE0", Slot = "12")]
	public void OnLeftLobby()
	{
	}

	[Token(Token = "0x6000D46")]
	[Address(RVA = "0xA6BDE4", Offset = "0xA6BDE4", VA = "0xA6BDE4", Slot = "13")]
	public void OnRoomListUpdate(List<RoomInfo> roomList)
	{
	}

	[Token(Token = "0x6000D47")]
	[Address(RVA = "0xA6BDE8", Offset = "0xA6BDE8", VA = "0xA6BDE8", Slot = "14")]
	public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
	{
	}

	[Token(Token = "0x6000D48")]
	[Address(RVA = "0xA6BDEC", Offset = "0xA6BDEC", VA = "0xA6BDEC")]
	public TournamentMatchesCreator()
	{
	}
}
[Token(Token = "0x20002B9")]
public class TournamentMatchResultsScoreboard : MonoBehaviour
{
	[Token(Token = "0x4000DFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<TournamentMatchResultsScoreboardEntry> entries;

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0xA6CD34", Offset = "0xA6CD34", VA = "0xA6CD34")]
	public void ShowResults(TournamentMatchClassification matchClassification)
	{
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0xA6CE64", Offset = "0xA6CE64", VA = "0xA6CE64")]
	private void ShowMatchClassificationEntries(TournamentMatchClassification matchClassification)
	{
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0xA6CD5C", Offset = "0xA6CD5C", VA = "0xA6CD5C")]
	private void HideAllResults()
	{
	}

	[Token(Token = "0x6000D63")]
	[Address(RVA = "0xA6CF0C", Offset = "0xA6CF0C", VA = "0xA6CF0C")]
	public TournamentMatchResultsScoreboard()
	{
	}
}
[Token(Token = "0x20002BB")]
public class TournamentMatchResultsScoreboardEntry : MonoBehaviour
{
	[Token(Token = "0x4000E00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text playerName;

	[Token(Token = "0x4000E01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text playerScore;

	[Token(Token = "0x6000D69")]
	[Address(RVA = "0xA6D028", Offset = "0xA6D028", VA = "0xA6D028")]
	public void ShowResult(TournamentPlayerResult playerResult)
	{
	}

	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0xA6D1A0", Offset = "0xA6D1A0", VA = "0xA6D1A0")]
	public void HideResult()
	{
	}

	[Token(Token = "0x6000D6B")]
	[Address(RVA = "0xA6D14C", Offset = "0xA6D14C", VA = "0xA6D14C")]
	internal bool IsVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D6C")]
	[Address(RVA = "0xA6D1C4", Offset = "0xA6D1C4", VA = "0xA6D1C4")]
	public TournamentMatchResultsScoreboardEntry()
	{
	}
}
[Token(Token = "0x20002BC")]
public class TournamentOnMasterChangeKickerController : MonoBehaviourPun, IInRoomCallbacks
{
	[Token(Token = "0x6000D6D")]
	[Address(RVA = "0xA6D1CC", Offset = "0xA6D1CC", VA = "0xA6D1CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0xA6D224", Offset = "0xA6D224", VA = "0xA6D224")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0xA6D27C", Offset = "0xA6D27C", VA = "0xA6D27C", Slot = "8")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000D70")]
	[Address(RVA = "0xA6D2E8", Offset = "0xA6D2E8", VA = "0xA6D2E8", Slot = "4")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000D71")]
	[Address(RVA = "0xA6D2EC", Offset = "0xA6D2EC", VA = "0xA6D2EC", Slot = "5")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x6000D72")]
	[Address(RVA = "0xA6D2F0", Offset = "0xA6D2F0", VA = "0xA6D2F0", Slot = "7")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000D73")]
	[Address(RVA = "0xA6D2F4", Offset = "0xA6D2F4", VA = "0xA6D2F4", Slot = "6")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000D74")]
	[Address(RVA = "0xA6D2F8", Offset = "0xA6D2F8", VA = "0xA6D2F8")]
	public TournamentOnMasterChangeKickerController()
	{
	}
}
[Token(Token = "0x20002BD")]
public class TournamentOrderOfLastHitSyncer : MonoBehaviourPun, IPunObservable, IInRoomCallbacks
{
	[Token(Token = "0x4000E02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TournamentOrderOfLastHitSyncer instance;

	[Token(Token = "0x4000E03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int orderOfLastHit;

	[Token(Token = "0x6000D75")]
	[Address(RVA = "0xA6D300", Offset = "0xA6D300", VA = "0xA6D300")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000D76")]
	[Address(RVA = "0xA6D4A0", Offset = "0xA6D4A0", VA = "0xA6D4A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D77")]
	[Address(RVA = "0xA6D4F8", Offset = "0xA6D4F8", VA = "0xA6D4F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000D78")]
	[Address(RVA = "0xA6D550", Offset = "0xA6D550", VA = "0xA6D550", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000D79")]
	[Address(RVA = "0xA6D62C", Offset = "0xA6D62C", VA = "0xA6D62C")]
	internal static void ApplyOrderOfLastHitFromMaster(int playerId)
	{
	}

	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0xA6D758", Offset = "0xA6D758", VA = "0xA6D758")]
	[PunRPC]
	private void RPCApplyOrderOfLastHitFromMaster(int playerId)
	{
	}

	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0xA6DB00", Offset = "0xA6DB00", VA = "0xA6DB00")]
	private static int GetSafetyLargerOrderOfLastHitValue(int maxOrderOfLastHit)
	{
		return default(int);
	}

	[Token(Token = "0x6000D7C")]
	[Address(RVA = "0xA6DB5C", Offset = "0xA6DB5C", VA = "0xA6DB5C")]
	[PunRPC]
	private void RPCSyncOrderOfLastHit(int orderOfLastHit)
	{
	}

	[Token(Token = "0x6000D7D")]
	[Address(RVA = "0xA6DB98", Offset = "0xA6DB98", VA = "0xA6DB98", Slot = "5")]
	public void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000D7E")]
	[Address(RVA = "0xA6DB9C", Offset = "0xA6DB9C", VA = "0xA6DB9C", Slot = "6")]
	public void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x6000D7F")]
	[Address(RVA = "0xA6DBA0", Offset = "0xA6DBA0", VA = "0xA6DBA0", Slot = "7")]
	public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000D80")]
	[Address(RVA = "0xA6DBA4", Offset = "0xA6DBA4", VA = "0xA6DBA4", Slot = "8")]
	public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000D81")]
	[Address(RVA = "0xA6DBA8", Offset = "0xA6DBA8", VA = "0xA6DBA8", Slot = "9")]
	public void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000D82")]
	[Address(RVA = "0xA6DBD0", Offset = "0xA6DBD0", VA = "0xA6DBD0")]
	public TournamentOrderOfLastHitSyncer()
	{
	}
}
[Serializable]
[Token(Token = "0x20002C0")]
public class TournamentPlayer
{
	[Token(Token = "0x4000E07")]
	private const string photonPlayerPersistentIDKey = "PersistentID";

	[Token(Token = "0x4000E08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isBot;

	[Token(Token = "0x4000E09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string playerName;

	[Token(Token = "0x4000E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TournamentPlayerResult matchResult;

	[Token(Token = "0x4000E0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int stageThatGetTo;

	[Token(Token = "0x4000E0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isSemiFinal;

	[Token(Token = "0x4000E0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string semiFinalRoomId;

	[Token(Token = "0x4000E0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int semiFinalRankInRoom;

	[Token(Token = "0x1700018E")]
	public bool IsBot
	{
		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xA6DCB4", Offset = "0xA6DCB4", VA = "0xA6DCB4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xA6DCBC", Offset = "0xA6DCBC", VA = "0xA6DCBC")]
		set
		{
		}
	}

	[Token(Token = "0x1700018F")]
	public string PlayerName
	{
		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xA6DCC8", Offset = "0xA6DCC8", VA = "0xA6DCC8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xA6DCD0", Offset = "0xA6DCD0", VA = "0xA6DCD0")]
		set
		{
		}
	}

	[Token(Token = "0x17000190")]
	public static string LocalPlayerPersistentID
	{
		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xA69000", Offset = "0xA69000", VA = "0xA69000")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xA6DCD8", Offset = "0xA6DCD8", VA = "0xA6DCD8")]
		set
		{
		}
	}

	[Token(Token = "0x17000191")]
	public string PersistentPlayerID
	{
		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xA5BAE4", Offset = "0xA5BAE4", VA = "0xA5BAE4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xA6DC98", Offset = "0xA6DC98", VA = "0xA6DC98")]
		set
		{
		}
	}

	[Token(Token = "0x17000192")]
	public int Hits
	{
		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xA5BB1C", Offset = "0xA5BB1C", VA = "0xA5BB1C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xA6DDB4", Offset = "0xA6DDB4", VA = "0xA6DDB4")]
		set
		{
		}
	}

	[Token(Token = "0x17000193")]
	public int Deaths
	{
		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xA5BB00", Offset = "0xA5BB00", VA = "0xA5BB00")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xA6DDD0", Offset = "0xA6DDD0", VA = "0xA6DDD0")]
		set
		{
		}
	}

	[Token(Token = "0x17000194")]
	public int TotalHits
	{
		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xA5BAC8", Offset = "0xA5BAC8", VA = "0xA5BAC8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xA6DDEC", Offset = "0xA6DDEC", VA = "0xA6DDEC")]
		set
		{
		}
	}

	[Token(Token = "0x17000195")]
	public int TotalDeaths
	{
		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xA5BAAC", Offset = "0xA5BAAC", VA = "0xA5BAAC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xA6DE08", Offset = "0xA6DE08", VA = "0xA6DE08")]
		set
		{
		}
	}

	[Token(Token = "0x17000196")]
	public int OrderOfLastHit
	{
		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xA6DE24", Offset = "0xA6DE24", VA = "0xA6DE24")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xA6DE40", Offset = "0xA6DE40", VA = "0xA6DE40")]
		set
		{
		}
	}

	[Token(Token = "0x17000197")]
	public bool IsQualified
	{
		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xA6DE5C", Offset = "0xA6DE5C", VA = "0xA6DE5C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xA6DE78", Offset = "0xA6DE78", VA = "0xA6DE78")]
		set
		{
		}
	}

	[Token(Token = "0x17000198")]
	public bool isFinal
	{
		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xA6DE98", Offset = "0xA6DE98", VA = "0xA6DE98")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xA6DEA0", Offset = "0xA6DEA0", VA = "0xA6DEA0")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x6000D88")]
	[Address(RVA = "0xA5D340", Offset = "0xA5D340", VA = "0xA5D340")]
	public TournamentPlayer(string name, string id, bool isBot)
	{
	}

	[Token(Token = "0x6000D91")]
	[Address(RVA = "0xA6DD60", Offset = "0xA6DD60", VA = "0xA6DD60")]
	public void UpdateTournamentResult(TournamentPlayerResult result)
	{
	}

	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0xA677E8", Offset = "0xA677E8", VA = "0xA677E8")]
	public static string GetPersistentPlayerID(Player photonPlayer)
	{
		return null;
	}

	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0xA6DEAC", Offset = "0xA6DEAC", VA = "0xA6DEAC")]
	public static void SetPersistentPlayerID(Player photonPlayer, string id)
	{
	}
}
[Token(Token = "0x20002C1")]
public class TournamentPlayerInfoPanel : MonoBehaviour
{
	[Token(Token = "0x4000E10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string playerName;

	[Token(Token = "0x4000E11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text playerNameText;

	[Token(Token = "0x4000E12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string persistentPlayerID;

	[Token(Token = "0x17000199")]
	public string PlayerName
	{
		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xA6DF54", Offset = "0xA6DF54", VA = "0xA6DF54")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xA6DF5C", Offset = "0xA6DF5C", VA = "0xA6DF5C")]
		set
		{
		}
	}

	[Token(Token = "0x1700019A")]
	public string PersistentPlayerID
	{
		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xA6DFA0", Offset = "0xA6DFA0", VA = "0xA6DFA0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xA6DFA8", Offset = "0xA6DFA8", VA = "0xA6DFA8")]
		set
		{
		}
	}

	[Token(Token = "0x6000DA6")]
	[Address(RVA = "0xA6DFB0", Offset = "0xA6DFB0", VA = "0xA6DFB0")]
	public void Destroy()
	{
	}

	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0xA6E01C", Offset = "0xA6E01C", VA = "0xA6E01C")]
	public TournamentPlayerInfoPanel()
	{
	}
}
[Serializable]
[Token(Token = "0x20002C2")]
public class TournamentPlayerResult
{
	[Token(Token = "0x4000E13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string persistentPlayerID;

	[Token(Token = "0x4000E14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int hits;

	[Token(Token = "0x4000E15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int totalHits;

	[Token(Token = "0x4000E16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int deaths;

	[Token(Token = "0x4000E17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int totalDeaths;

	[Token(Token = "0x4000E18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int orderOfLastHit;

	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool isQualified;

	[Token(Token = "0x6000DA8")]
	[Address(RVA = "0xA644F0", Offset = "0xA644F0", VA = "0xA644F0")]
	public TournamentPlayerResult(string persistentPlayerID, int hits, int deaths, int orderOfLastHit, bool isQualified)
	{
	}
}
[Token(Token = "0x20002C3")]
public class TournamentPlayersScrollViewController : MonoBehaviour
{
	[Token(Token = "0x4000E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform contentTransform;

	[Token(Token = "0x4000E1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TournamentPlayerInfoPanel playerInfoPanelPrefab;

	[Token(Token = "0x4000E1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<TournamentPlayerInfoPanel> playerInfoPanels;

	[Token(Token = "0x6000DA9")]
	[Address(RVA = "0xA6815C", Offset = "0xA6815C", VA = "0xA6815C")]
	public void AddPlayer(string playerName)
	{
	}

	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0xA68724", Offset = "0xA68724", VA = "0xA68724")]
	public void AddPlayer(string playerName, string id)
	{
	}

	[Token(Token = "0x6000DAB")]
	[Address(RVA = "0xA682E4", Offset = "0xA682E4", VA = "0xA682E4")]
	public void RemovePlayer(string playerName)
	{
	}

	[Token(Token = "0x6000DAC")]
	[Address(RVA = "0xA684AC", Offset = "0xA684AC", VA = "0xA684AC")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000DAD")]
	[Address(RVA = "0xA688B0", Offset = "0xA688B0", VA = "0xA688B0")]
	public void ChangePlayerInfoPanelColor(string id, bool qualified)
	{
	}

	[Token(Token = "0x6000DAE")]
	[Address(RVA = "0xA6E034", Offset = "0xA6E034", VA = "0xA6E034")]
	public TournamentPlayersScrollViewController()
	{
	}
}
[Token(Token = "0x20002C7")]
public class TournamentProgressController : MonoBehaviour, IPunObservable
{
	[Token(Token = "0x4000E21")]
	private const int stageDuration = 540;

	[Token(Token = "0x4000E22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TournamentResultsController resultsController;

	[Token(Token = "0x4000E23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TournamentGroupDivider groupDivider;

	[Token(Token = "0x4000E24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float timeFromStageStart;

	[Token(Token = "0x4000E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int tournamentStage;

	[Token(Token = "0x4000E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isSemiFinalTournamentRoundStarted;

	[Token(Token = "0x1700019B")]
	public int TournamentStage
	{
		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xA6E190", Offset = "0xA6E190", VA = "0xA6E190")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0xA6E198", Offset = "0xA6E198", VA = "0xA6E198")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000DB8")]
	[Address(RVA = "0xA6E1F0", Offset = "0xA6E1F0", VA = "0xA6E1F0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000DB9")]
	[Address(RVA = "0xA6650C", Offset = "0xA6650C", VA = "0xA6650C")]
	public void StartNextStage()
	{
	}

	[Token(Token = "0x6000DBA")]
	[Address(RVA = "0xA6E2D0", Offset = "0xA6E2D0", VA = "0xA6E2D0")]
	internal int GetPlayerStage(TournamentPlayerResult playerResult)
	{
		return default(int);
	}

	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0xA6E2F4", Offset = "0xA6E2F4", VA = "0xA6E2F4")]
	public bool IsStageFinished()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DBC")]
	[Address(RVA = "0xA6C94C", Offset = "0xA6C94C", VA = "0xA6C94C")]
	public bool IsLastTournamentRoundStarted()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0xA6E324", Offset = "0xA6E324", VA = "0xA6E324", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0xA6E3E0", Offset = "0xA6E3E0", VA = "0xA6E3E0")]
	internal bool IsSemiFinalTournamentRoundStarted()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0xA6E41C", Offset = "0xA6E41C", VA = "0xA6E41C")]
	public TournamentProgressController()
	{
	}
}
[Token(Token = "0x20002C8")]
public class TournamentRegionDropdownController : MonoBehaviour
{
	[Token(Token = "0x4000E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TournamentMasterConnectingWindowController tournamentMasterConnectingWindowController;

	[Token(Token = "0x6000DC0")]
	[Address(RVA = "0xA6E42C", Offset = "0xA6E42C", VA = "0xA6E42C")]
	public void OnRegionSelected(int regionIndex)
	{
	}

	[Token(Token = "0x6000DC1")]
	[Address(RVA = "0xA6E558", Offset = "0xA6E558", VA = "0xA6E558")]
	public TournamentRegionDropdownController()
	{
	}
}
[Token(Token = "0x20002C9")]
public class TournamentResultsController : MonoBehaviourPun
{
	[Token(Token = "0x4000E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<TournamentStageResults> tournamentResults;

	[Token(Token = "0x4000E29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TournamentLeaderboardController leaderboardController;

	[Token(Token = "0x4000E2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TournamentProgressController progressController;

	[Token(Token = "0x4000E2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TournamentSteamLeaderboardController tournamentSteamLeaderboardController;

	[Token(Token = "0x6000DC2")]
	[Address(RVA = "0xA6E560", Offset = "0xA6E560", VA = "0xA6E560")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DC3")]
	[Address(RVA = "0xA69CF0", Offset = "0xA69CF0", VA = "0xA69CF0")]
	public static bool IsQualifiedForNextRound()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DC4")]
	[Address(RVA = "0xA6F5B0", Offset = "0xA6F5B0", VA = "0xA6F5B0")]
	[PunRPC]
	private void RPCAddMatchResult(string[] playerPersistentIDs, int[] playersScores, int[] playersDeaths, int[] ordersOfLastHit, bool[] isQualifieds)
	{
	}

	[Token(Token = "0x6000DC5")]
	[Address(RVA = "0xA6FA34", Offset = "0xA6FA34", VA = "0xA6FA34")]
	private bool MatchWithPlayersOfGivenIdsAlreadySaved(string[] playerPersistentIDs)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DC6")]
	[Address(RVA = "0xA6FB60", Offset = "0xA6FB60", VA = "0xA6FB60")]
	public TournamentResultsController()
	{
	}
}
[Token(Token = "0x20002CC")]
public class TournamentRoomCreatingErrorWindowController : MonoBehaviour
{
	[Token(Token = "0x4000E36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text errorText;

	[Token(Token = "0x4000E37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TournamentMasterWindowsSwitcher windowsSwitcher;

	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0xA67CE8", Offset = "0xA67CE8", VA = "0xA67CE8")]
	public void SetErrorText(string errorMessage)
	{
	}

	[Token(Token = "0x6000DD4")]
	[Address(RVA = "0xA6FE8C", Offset = "0xA6FE8C", VA = "0xA6FE8C")]
	public void OnBackButtonClick()
	{
	}

	[Token(Token = "0x6000DD5")]
	[Address(RVA = "0xA6FEA8", Offset = "0xA6FEA8", VA = "0xA6FEA8")]
	public TournamentRoomCreatingErrorWindowController()
	{
	}
}
[Token(Token = "0x20002CD")]
public struct TournamentRoomSize
{
	[Token(Token = "0x4000E38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int roomSize;
}
[Serializable]
[Token(Token = "0x20002CE")]
public class TournamentStageResults
{
	[Token(Token = "0x4000E39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<TournamentMatchClassification> matchesResults;

	[Token(Token = "0x6000DD6")]
	[Address(RVA = "0xA6E248", Offset = "0xA6E248", VA = "0xA6E248")]
	public TournamentStageResults()
	{
	}
}
[Token(Token = "0x20002CF")]
public class TournamentSteamLeaderboardController : MonoBehaviour
{
	[Token(Token = "0x4000E3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LeaderboardViewController leaderboardController;

	[Token(Token = "0x4000E3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TournamentProgressController progressController;

	[Token(Token = "0x6000DD7")]
	[Address(RVA = "0xA6ECF4", Offset = "0xA6ECF4", VA = "0xA6ECF4")]
	internal void SaveResult(TournamentPlayerResult playerResult)
	{
	}

	[Token(Token = "0x6000DD8")]
	[Address(RVA = "0xA6FEB0", Offset = "0xA6FEB0", VA = "0xA6FEB0")]
	private int SortResultsByOrderOfLastHit(TournamentPlayerResult x, TournamentPlayerResult y)
	{
		return default(int);
	}

	[Token(Token = "0x6000DD9")]
	[Address(RVA = "0xA6FED8", Offset = "0xA6FED8", VA = "0xA6FED8")]
	public TournamentSteamLeaderboardController()
	{
	}
}
[Token(Token = "0x20002D0")]
public class TournamentTestingBotController : MonoBehaviourPun, IConnectionCallbacks, ILobbyCallbacks, IMatchmakingCallbacks
{
	[PreserveSig]
	[Token(Token = "0x6000DDA")]
	[Address(RVA = "0xA6FEE0", Offset = "0xA6FEE0", VA = "0xA6FEE0")]
	public static extern bool SetWindowText(IntPtr hwnd, string lpString);

	[PreserveSig]
	[Token(Token = "0x6000DDB")]
	[Address(RVA = "0xA6FF84", Offset = "0xA6FF84", VA = "0xA6FF84")]
	public static extern IntPtr GetActiveWindow();

	[Token(Token = "0x6000DDC")]
	[Address(RVA = "0xA6FFEC", Offset = "0xA6FFEC", VA = "0xA6FFEC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000DDD")]
	[Address(RVA = "0xA70044", Offset = "0xA70044", VA = "0xA70044")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000DDE")]
	[Address(RVA = "0xA7009C", Offset = "0xA7009C", VA = "0xA7009C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DDF")]
	[Address(RVA = "0xA7038C", Offset = "0xA7038C", VA = "0xA7038C", Slot = "4")]
	public void OnConnected()
	{
	}

	[Token(Token = "0x6000DE0")]
	[Address(RVA = "0xA70390", Offset = "0xA70390", VA = "0xA70390", Slot = "5")]
	public void OnConnectedToMaster()
	{
	}

	[Token(Token = "0x6000DE1")]
	[Address(RVA = "0xA7045C", Offset = "0xA7045C", VA = "0xA7045C", Slot = "6")]
	public void OnDisconnected(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000DE2")]
	[Address(RVA = "0xA70460", Offset = "0xA70460", VA = "0xA70460", Slot = "7")]
	public void OnRegionListReceived(RegionHandler regionHandler)
	{
	}

	[Token(Token = "0x6000DE3")]
	[Address(RVA = "0xA70464", Offset = "0xA70464", VA = "0xA70464", Slot = "8")]
	public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
	{
	}

	[Token(Token = "0x6000DE4")]
	[Address(RVA = "0xA70468", Offset = "0xA70468", VA = "0xA70468", Slot = "9")]
	public void OnCustomAuthenticationFailed(string debugMessage)
	{
	}

	[Token(Token = "0x6000DE5")]
	[Address(RVA = "0xA7046C", Offset = "0xA7046C", VA = "0xA7046C", Slot = "10")]
	public void OnJoinedLobby()
	{
	}

	[Token(Token = "0x6000DE6")]
	[Address(RVA = "0xA706DC", Offset = "0xA706DC", VA = "0xA706DC", Slot = "11")]
	public void OnLeftLobby()
	{
	}

	[Token(Token = "0x6000DE7")]
	[Address(RVA = "0xA706E0", Offset = "0xA706E0", VA = "0xA706E0", Slot = "12")]
	public void OnRoomListUpdate(List<RoomInfo> roomList)
	{
	}

	[Token(Token = "0x6000DE8")]
	[Address(RVA = "0xA706E4", Offset = "0xA706E4", VA = "0xA706E4", Slot = "13")]
	public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
	{
	}

	[Token(Token = "0x6000DE9")]
	[Address(RVA = "0xA706E8", Offset = "0xA706E8", VA = "0xA706E8", Slot = "14")]
	public void OnFriendListUpdate(List<FriendInfo> friendList)
	{
	}

	[Token(Token = "0x6000DEA")]
	[Address(RVA = "0xA706EC", Offset = "0xA706EC", VA = "0xA706EC", Slot = "15")]
	public void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000DEB")]
	[Address(RVA = "0xA706F0", Offset = "0xA706F0", VA = "0xA706F0", Slot = "16")]
	public void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000DEC")]
	[Address(RVA = "0xA706F4", Offset = "0xA706F4", VA = "0xA706F4", Slot = "17")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000DED")]
	[Address(RVA = "0xA7075C", Offset = "0xA7075C", VA = "0xA7075C", Slot = "18")]
	public void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000DEE")]
	[Address(RVA = "0xA70760", Offset = "0xA70760", VA = "0xA70760", Slot = "19")]
	public void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000DEF")]
	[Address(RVA = "0xA70764", Offset = "0xA70764", VA = "0xA70764", Slot = "20")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000DF0")]
	[Address(RVA = "0xA70768", Offset = "0xA70768", VA = "0xA70768")]
	public TournamentTestingBotController()
	{
	}
}
[Token(Token = "0x20002D1")]
public class TournamentTimeController : MonoBehaviourPun
{
	[Token(Token = "0x20002D2")]
	[CompilerGenerated]
	private sealed class <SynchronizeTimeOnlineCycleCoroutine>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TournamentTimeController <>4__this;

		[Token(Token = "0x1700019C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E08")]
			[Address(RVA = "0xA7123C", Offset = "0xA7123C", VA = "0xA7123C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0xA71284", Offset = "0xA71284", VA = "0xA71284", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xA709F8", Offset = "0xA709F8", VA = "0xA709F8")]
		[DebuggerHidden]
		public <SynchronizeTimeOnlineCycleCoroutine>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xA7111C", Offset = "0xA7111C", VA = "0xA7111C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xA71120", Offset = "0xA71120", VA = "0xA71120", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xA71244", Offset = "0xA71244", VA = "0xA71244", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D3")]
	[CompilerGenerated]
	private sealed class <IncreaseCurrentTimeByOneSecond>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TournamentTimeController <>4__this;

		[Token(Token = "0x1700019E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0xA71398", Offset = "0xA71398", VA = "0xA71398", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E10")]
			[Address(RVA = "0xA713E0", Offset = "0xA713E0", VA = "0xA713E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xA70B30", Offset = "0xA70B30", VA = "0xA70B30")]
		[DebuggerHidden]
		public <IncreaseCurrentTimeByOneSecond>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xA7128C", Offset = "0xA7128C", VA = "0xA7128C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xA71290", Offset = "0xA71290", VA = "0xA71290", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xA713A0", Offset = "0xA713A0", VA = "0xA713A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E3C")]
	private const int secondsInDay = 86400;

	[Token(Token = "0x4000E3D")]
	private const int secondsInHour = 3600;

	[Token(Token = "0x4000E3E")]
	private const int hoursInDay = 24;

	[Token(Token = "0x4000E3F")]
	private const int minutesInHour = 60;

	[Token(Token = "0x4000E40")]
	private const int minutesInDay = 1440;

	[Token(Token = "0x4000E41")]
	private const float delayOfCycleSynchronizingTimeOnline = 120f;

	[Token(Token = "0x4000E42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DateTime nextTournamentDate;

	[Token(Token = "0x4000E43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static DateTime storedDateTime;

	[Token(Token = "0x4000E44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static TimeSpan enrollmentDuration;

	[Token(Token = "0x4000E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static TimeSpan firstPreparationDuration;

	[Token(Token = "0x4000E46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static TimeSpan preparationDuration;

	[Token(Token = "0x4000E47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static TimeSpan gameDuration;

	[Token(Token = "0x6000DF1")]
	[Address(RVA = "0xA70770", Offset = "0xA70770", VA = "0xA70770")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000DF2")]
	[Address(RVA = "0xA70808", Offset = "0xA70808", VA = "0xA70808")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000DF3")]
	[Address(RVA = "0xA70910", Offset = "0xA70910", VA = "0xA70910")]
	[IteratorStateMachine(typeof(<SynchronizeTimeOnlineCycleCoroutine>d__14))]
	private IEnumerator SynchronizeTimeOnlineCycleCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000DF4")]
	[Address(RVA = "0xA70A20", Offset = "0xA70A20", VA = "0xA70A20")]
	private void SetStoredDateTime(DateTime dateTimeToSet)
	{
	}

	[Token(Token = "0x6000DF5")]
	[Address(RVA = "0xA70984", Offset = "0xA70984", VA = "0xA70984")]
	[IteratorStateMachine(typeof(<IncreaseCurrentTimeByOneSecond>d__16))]
	private IEnumerator IncreaseCurrentTimeByOneSecond()
	{
		return null;
	}

	[Token(Token = "0x6000DF6")]
	[Address(RVA = "0xA70B58", Offset = "0xA70B58", VA = "0xA70B58")]
	[ContextMenu("CheckTimeToNextDate")]
	public static TimeSpan GetTimeToNextTournament()
	{
		return default(TimeSpan);
	}

	[Token(Token = "0x6000DF7")]
	[Address(RVA = "0xA70C20", Offset = "0xA70C20", VA = "0xA70C20")]
	private static TimeSpan GetTimeToNextTournamentWithNegative()
	{
		return default(TimeSpan);
	}

	[Token(Token = "0x6000DF8")]
	[Address(RVA = "0xA5FEC4", Offset = "0xA5FEC4", VA = "0xA5FEC4")]
	public static TimeSpan GetTimeToEnrollmentEnd()
	{
		return default(TimeSpan);
	}

	[Token(Token = "0x6000DF9")]
	[Address(RVA = "0xA666B4", Offset = "0xA666B4", VA = "0xA666B4")]
	public static void SetEnrollmentFinish()
	{
	}

	[Token(Token = "0x6000DFA")]
	[Address(RVA = "0xA70C7C", Offset = "0xA70C7C", VA = "0xA70C7C")]
	public static bool IsWaitingForEnrollment()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DFB")]
	[Address(RVA = "0xA5FDC4", Offset = "0xA5FDC4", VA = "0xA5FDC4")]
	public static bool IsDuringEnrollment()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DFC")]
	[Address(RVA = "0xA651DC", Offset = "0xA651DC", VA = "0xA651DC")]
	public static bool IsDuringPreparation()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DFD")]
	[Address(RVA = "0xA65370", Offset = "0xA65370", VA = "0xA65370")]
	public static TimeSpan GetTimeToPreparationEnd()
	{
		return default(TimeSpan);
	}

	[Token(Token = "0x6000DFE")]
	[Address(RVA = "0xA655B0", Offset = "0xA655B0", VA = "0xA655B0")]
	public static bool IsDuringGame()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DFF")]
	[Address(RVA = "0xA70E14", Offset = "0xA70E14", VA = "0xA70E14")]
	private static bool GetIsDuringGame(DateTime gameStartTime)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E00")]
	[Address(RVA = "0xA70D0C", Offset = "0xA70D0C", VA = "0xA70D0C")]
	public static TimeSpan GetPreparationDuration(bool isFirstPreparation)
	{
		return default(TimeSpan);
	}

	[Token(Token = "0x6000E01")]
	[Address(RVA = "0xA70D78", Offset = "0xA70D78", VA = "0xA70D78")]
	public static TimeSpan GetGameCycleDuration(bool isFirstPreparation)
	{
		return default(TimeSpan);
	}

	[Token(Token = "0x6000E02")]
	[Address(RVA = "0xA70EB4", Offset = "0xA70EB4", VA = "0xA70EB4")]
	public static TimeSpan GetGameCyclesDurationFromEnrollmentEnd(int numberOfCycles)
	{
		return default(TimeSpan);
	}

	[Token(Token = "0x6000E03")]
	[Address(RVA = "0xA70FAC", Offset = "0xA70FAC", VA = "0xA70FAC")]
	public TournamentTimeController()
	{
	}
}
[Serializable]
[Token(Token = "0x20002D4")]
public class TournamentTopPlayerSpot : MonoBehaviour
{
	[Token(Token = "0x4000E4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text rankSpot;

	[Token(Token = "0x4000E4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text playerNameSpot;

	[Token(Token = "0x4000E50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text playerStageSpot;

	[Token(Token = "0x4000E51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text playerKillsSpot;

	[Token(Token = "0x4000E52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text playerDeathsSpot;

	[Token(Token = "0x4000E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text playerTotalKillsSpot;

	[Token(Token = "0x4000E54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text playerTotalDeathsSpot;

	[Token(Token = "0x4000E55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SpriteRenderer qualifiedSprite;

	[Token(Token = "0x4000E56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SpriteRenderer unqualifiedSprite;

	[Token(Token = "0x4000E57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SpriteRenderer goldMedal;

	[Token(Token = "0x4000E58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public SpriteRenderer silverMedal;

	[Token(Token = "0x4000E59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public SpriteRenderer bronzeMedal;

	[Token(Token = "0x4000E5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Color remotePlayerColor;

	[Token(Token = "0x4000E5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Color localPlayerColor;

	[Token(Token = "0x4000E5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Color remoteNotQualifiedPlayerColor;

	[Token(Token = "0x4000E5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Color localNotQualifiedPlayerColor;

	[Token(Token = "0x4000E5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private string brackets;

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0xA69054", Offset = "0xA69054", VA = "0xA69054")]
	public void SetTopPlayerSpot(int rank, TournamentPlayer player, bool isLocal)
	{
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0xA5CAC0", Offset = "0xA5CAC0", VA = "0xA5CAC0")]
	public void SetTopPlayerSpotInMainMenu(int rank, string playerName, string stage, string kills, string deaths, bool isFinalResult, bool isLocal)
	{
	}

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0xA7145C", Offset = "0xA7145C", VA = "0xA7145C")]
	private void ShowMedal(int rank, bool isMainMenu)
	{
	}

	[Token(Token = "0x6000E14")]
	[Address(RVA = "0xA713E8", Offset = "0xA713E8", VA = "0xA713E8")]
	private void SetStatusSpotBlank()
	{
	}

	[Token(Token = "0x6000E15")]
	[Address(RVA = "0xA5CF0C", Offset = "0xA5CF0C", VA = "0xA5CF0C")]
	public void SetSpotBlank()
	{
	}

	[Token(Token = "0x6000E16")]
	[Address(RVA = "0xA714D4", Offset = "0xA714D4", VA = "0xA714D4")]
	public TournamentTopPlayerSpot()
	{
	}
}
[Token(Token = "0x20002D5")]
public static class UnixTimestampConverter
{
	[Token(Token = "0x4000E5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static DateTime unixEpoch;

	[Token(Token = "0x6000E17")]
	[Address(RVA = "0xA5AE44", Offset = "0xA5AE44", VA = "0xA5AE44")]
	public static long ToUnixTimestamp(DateTime target)
	{
		return default(long);
	}

	[Token(Token = "0x6000E18")]
	[Address(RVA = "0xA62784", Offset = "0xA62784", VA = "0xA62784")]
	public static DateTime FromUnixTimestamp(long target)
	{
		return default(DateTime);
	}
}
[Token(Token = "0x20002D6")]
public class CharacterSelectionWindow : FirstWindowController
{
	[Token(Token = "0x4000E60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Image femaleBorder;

	[Token(Token = "0x4000E61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Image maleBorder;

	[Token(Token = "0x4000E62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ColorSkinButton defaultSkinColor;

	[Token(Token = "0x4000E63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AppearanceController modelAppearanceController;

	[Token(Token = "0x4000E64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GenderSwitcher modelGenderSwitcher;

	[Token(Token = "0x4000E65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject model;

	[Token(Token = "0x4000E66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Gender selectedGender;

	[Token(Token = "0x4000E67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ColorSkinButton currentSkinColor;

	[Token(Token = "0x6000E1A")]
	[Address(RVA = "0xA715A8", Offset = "0xA715A8", VA = "0xA715A8", Slot = "6")]
	public override bool CheckIfWindowShouldBeQueued()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E1B")]
	[Address(RVA = "0xA71604", Offset = "0xA71604", VA = "0xA71604")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E1C")]
	[Address(RVA = "0xA7169C", Offset = "0xA7169C", VA = "0xA7169C")]
	private new void OnEnable()
	{
	}

	[Token(Token = "0x6000E1D")]
	[Address(RVA = "0xA716D4", Offset = "0xA716D4", VA = "0xA716D4")]
	private new void OnDisable()
	{
	}

	[Token(Token = "0x6000E1E")]
	[Address(RVA = "0xA7163C", Offset = "0xA7163C", VA = "0xA7163C")]
	private void SelectGender(Gender gender)
	{
	}

	[Token(Token = "0x6000E1F")]
	[Address(RVA = "0xA716F4", Offset = "0xA716F4", VA = "0xA716F4")]
	public void OnSelectMale()
	{
	}

	[Token(Token = "0x6000E20")]
	[Address(RVA = "0xA716FC", Offset = "0xA716FC", VA = "0xA716FC")]
	public void OnSelectFemale()
	{
	}

	[Token(Token = "0x6000E21")]
	[Address(RVA = "0xA71704", Offset = "0xA71704", VA = "0xA71704")]
	public void SelectSkin(ColorSkinButton skinColor)
	{
	}

	[Token(Token = "0x6000E22")]
	[Address(RVA = "0xA717DC", Offset = "0xA717DC", VA = "0xA717DC", Slot = "7")]
	public override void OnContinue()
	{
	}

	[Token(Token = "0x6000E23")]
	[Address(RVA = "0xA71888", Offset = "0xA71888", VA = "0xA71888")]
	public CharacterSelectionWindow()
	{
	}
}
[Token(Token = "0x20002D7")]
public class GoldUI : GoldUICore
{
	[Token(Token = "0x4000E68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text _goldText;

	[Token(Token = "0x4000E69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float StartingGold;

	[Token(Token = "0x170001A0")]
	protected override Text goldText
	{
		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xA71890", Offset = "0xA71890", VA = "0xA71890", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xA71898", Offset = "0xA71898", VA = "0xA71898", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x6000E26")]
	[Address(RVA = "0xA718A0", Offset = "0xA718A0", VA = "0xA718A0", Slot = "6")]
	public override void DisplayGoldEarnedDuringGame()
	{
	}

	[Token(Token = "0x6000E27")]
	[Address(RVA = "0xA719E0", Offset = "0xA719E0", VA = "0xA719E0", Slot = "7")]
	public override void InitGoldUI()
	{
	}

	[Token(Token = "0x6000E28")]
	[Address(RVA = "0xA71A74", Offset = "0xA71A74", VA = "0xA71A74")]
	public GoldUI()
	{
	}
}
[Token(Token = "0x20002D8")]
public class LanguageTogglesController : MonoBehaviour
{
	[Token(Token = "0x4000E6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Toggle englishToggle;

	[Token(Token = "0x4000E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Toggle chineseToggle;

	[Token(Token = "0x4000E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Toggle koreanToggle;

	[Token(Token = "0x4000E6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Toggle japaneseToggle;

	[Token(Token = "0x4000E6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private FontChanger fontChanger;

	[Token(Token = "0x6000E29")]
	[Address(RVA = "0xA71A7C", Offset = "0xA71A7C", VA = "0xA71A7C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E2A")]
	[Address(RVA = "0xA71C38", Offset = "0xA71C38", VA = "0xA71C38")]
	public void ToggleEnglish()
	{
	}

	[Token(Token = "0x6000E2B")]
	[Address(RVA = "0xA71D38", Offset = "0xA71D38", VA = "0xA71D38")]
	public void ToggleChinese()
	{
	}

	[Token(Token = "0x6000E2C")]
	[Address(RVA = "0xA71E3C", Offset = "0xA71E3C", VA = "0xA71E3C")]
	public void ToggleKorean()
	{
	}

	[Token(Token = "0x6000E2D")]
	[Address(RVA = "0xA71F40", Offset = "0xA71F40", VA = "0xA71F40")]
	public void ToggleJapanese()
	{
	}

	[Token(Token = "0x6000E2E")]
	[Address(RVA = "0xA72044", Offset = "0xA72044", VA = "0xA72044")]
	public LanguageTogglesController()
	{
	}
}
[Token(Token = "0x20002D9")]
public class EquipWindowCategoryButton : MonoBehaviour
{
	[Token(Token = "0x4000E6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private EquipType categoryType;

	[Token(Token = "0x4000E70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EquipWindowController equipWindowController;

	[Token(Token = "0x4000E71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject buttonBorder;

	[Token(Token = "0x6000E2F")]
	[Address(RVA = "0xA7204C", Offset = "0xA7204C", VA = "0xA7204C")]
	public void OnClick()
	{
	}

	[Token(Token = "0x6000E30")]
	[Address(RVA = "0xA7210C", Offset = "0xA7210C", VA = "0xA7210C")]
	public void SetVisual(EquipType equipType)
	{
	}

	[Token(Token = "0x6000E31")]
	[Address(RVA = "0xA72138", Offset = "0xA72138", VA = "0xA72138")]
	public EquipWindowCategoryButton()
	{
	}
}
[Token(Token = "0x20002DA")]
public class EquipWindowController : MonoBehaviour
{
	[Token(Token = "0x4000E72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<EquipWindowCategoryButton> categoryButtons;

	[Token(Token = "0x4000E73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject hatLabel;

	[Token(Token = "0x4000E74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject torsoLabel;

	[Token(Token = "0x4000E75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject legsLabel;

	[Token(Token = "0x4000E76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text currencyText;

	[Token(Token = "0x4000E77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ItemsContainer itemsContainer;

	[Token(Token = "0x4000E78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private List<EquipWindowEntry> entryList;

	[Token(Token = "0x4000E79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject buyButton;

	[Token(Token = "0x4000E7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject equipButton;

	[Token(Token = "0x4000E7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AppearanceController modelAppearanceController;

	[Token(Token = "0x4000E7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private EquipType defaultEquipTypeToShow;

	[Token(Token = "0x4000E7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private EquipType currentEquipType;

	[Token(Token = "0x4000E7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private EquipWindowEntry currentItemEntry;

	[Token(Token = "0x6000E32")]
	[Address(RVA = "0xA72140", Offset = "0xA72140", VA = "0xA72140")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E33")]
	[Address(RVA = "0xA72324", Offset = "0xA72324", VA = "0xA72324")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000E34")]
	[Address(RVA = "0xA7206C", Offset = "0xA7206C", VA = "0xA7206C")]
	public void ShowEquipType(EquipType equipType)
	{
	}

	[Token(Token = "0x6000E35")]
	[Address(RVA = "0xA72884", Offset = "0xA72884", VA = "0xA72884")]
	public void OnBuyClick()
	{
	}

	[Token(Token = "0x6000E36")]
	[Address(RVA = "0xA72984", Offset = "0xA72984", VA = "0xA72984")]
	public void OnEquipClick()
	{
	}

	[Token(Token = "0x6000E37")]
	[Address(RVA = "0xA729C4", Offset = "0xA729C4", VA = "0xA729C4")]
	public void SelectItem(EquipWindowEntry itemEntry)
	{
	}

	[Token(Token = "0x6000E38")]
	[Address(RVA = "0xA72470", Offset = "0xA72470", VA = "0xA72470")]
	private void SetLabelName()
	{
	}

	[Token(Token = "0x6000E39")]
	[Address(RVA = "0xA724D4", Offset = "0xA724D4", VA = "0xA724D4")]
	private void ShowList(List<ItemData> equipementItems)
	{
	}

	[Token(Token = "0x6000E3A")]
	[Address(RVA = "0xA72738", Offset = "0xA72738", VA = "0xA72738")]
	private void SetCategoryButtonsVisual()
	{
	}

	[Token(Token = "0x6000E3B")]
	[Address(RVA = "0xA72A9C", Offset = "0xA72A9C", VA = "0xA72A9C")]
	private void SetButtons()
	{
	}

	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0xA72B8C", Offset = "0xA72B8C", VA = "0xA72B8C")]
	private void DisableAllItems()
	{
	}

	[Token(Token = "0x6000E3D")]
	[Address(RVA = "0xA722DC", Offset = "0xA722DC", VA = "0xA722DC")]
	private void UpdatePlayerCurrency(int currency)
	{
	}

	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0xA72CF0", Offset = "0xA72CF0", VA = "0xA72CF0")]
	public EquipWindowController()
	{
	}
}
[Token(Token = "0x20002DB")]
public class EquipWindowEntry : MonoBehaviour
{
	[Token(Token = "0x4000E7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject imageBorder;

	[Token(Token = "0x4000E80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject itemCostObject;

	[Token(Token = "0x4000E81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text itemCostText;

	[Token(Token = "0x4000E82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Text itemOwnedText;

	[Token(Token = "0x4000E83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text itemEquipedText;

	[Token(Token = "0x4000E84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Image itemIcon;

	[Token(Token = "0x4000E85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private EquipWindowController equipWindowController;

	[Token(Token = "0x4000E86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int itemID;

	[Token(Token = "0x4000E87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int cost;

	[Token(Token = "0x4000E88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isBought;

	[Token(Token = "0x4000E89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool isEquiped;

	[Token(Token = "0x170001A1")]
	public int ItemID
	{
		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xA73CF8", Offset = "0xA73CF8", VA = "0xA73CF8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001A2")]
	public int Cost
	{
		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xA73D00", Offset = "0xA73D00", VA = "0xA73D00")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000E41")]
	[Address(RVA = "0xA73D08", Offset = "0xA73D08", VA = "0xA73D08")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000E42")]
	[Address(RVA = "0xA73D2C", Offset = "0xA73D2C", VA = "0xA73D2C")]
	public void SelectItem()
	{
	}

	[Token(Token = "0x6000E43")]
	[Address(RVA = "0xA73D4C", Offset = "0xA73D4C", VA = "0xA73D4C")]
	public void EnableVisual()
	{
	}

	[Token(Token = "0x6000E44")]
	[Address(RVA = "0xA73D0C", Offset = "0xA73D0C", VA = "0xA73D0C")]
	public void DisableVisual()
	{
	}

	[Token(Token = "0x6000E45")]
	[Address(RVA = "0xA73D6C", Offset = "0xA73D6C", VA = "0xA73D6C")]
	public void SetEntry(int itemID, int cost, Sprite icon, bool isBought = false, bool isEquiped = false)
	{
	}

	[Token(Token = "0x6000E46")]
	[Address(RVA = "0xA73DF0", Offset = "0xA73DF0", VA = "0xA73DF0")]
	public void SetText()
	{
	}

	[Token(Token = "0x6000E47")]
	[Address(RVA = "0xA73EC0", Offset = "0xA73EC0", VA = "0xA73EC0")]
	public EquipWindowEntry()
	{
	}
}
[Token(Token = "0x20002DC")]
public class VrButtonMaterialsChange : MonoBehaviour, IVrButtonVisuals
{
	[Token(Token = "0x4000E8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text buttonText;

	[Token(Token = "0x4000E8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Image backgroundImage;

	[Token(Token = "0x4000E8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material activeTextMaterial;

	[Token(Token = "0x4000E8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material normalTextMaterial;

	[Token(Token = "0x4000E8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x4000E8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material normalButtonMaterial;

	[Token(Token = "0x6000E48")]
	[Address(RVA = "0xA73EC8", Offset = "0xA73EC8", VA = "0xA73EC8", Slot = "4")]
	public void ChangeVisualsOnButtonActivation()
	{
	}

	[Token(Token = "0x6000E49")]
	[Address(RVA = "0xA73F9C", Offset = "0xA73F9C", VA = "0xA73F9C", Slot = "5")]
	public void ChangeVisualsOnButtonDeactivation()
	{
	}

	[Token(Token = "0x6000E4A")]
	[Address(RVA = "0xA74070", Offset = "0xA74070", VA = "0xA74070")]
	public VrButtonMaterialsChange()
	{
	}
}
[Token(Token = "0x20002DD")]
[CreateAssetMenu(fileName = "WeaponSlot", menuName = "Weapons/WeaponSlot", order = 51)]
public class WeaponSlotSO : ScriptableObject
{
	[Token(Token = "0x4000E90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite WeaponIcon;

	[Token(Token = "0x4000E91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HandsType WeaponType;

	[Token(Token = "0x6000E4B")]
	[Address(RVA = "0xA74078", Offset = "0xA74078", VA = "0xA74078")]
	public WeaponSlotSO()
	{
	}
}
[Token(Token = "0x20002DE")]
public class PauseWindowDController : WindowController
{
	[Token(Token = "0x4000E92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject startButton;

	[Token(Token = "0x6000E4C")]
	[Address(RVA = "0xA74080", Offset = "0xA74080", VA = "0xA74080")]
	public void OnStart()
	{
	}

	[Token(Token = "0x6000E4D")]
	[Address(RVA = "0xA740B8", Offset = "0xA740B8", VA = "0xA740B8")]
	public void OnContinue()
	{
	}

	[Token(Token = "0x6000E4E")]
	[Address(RVA = "0xA740D8", Offset = "0xA740D8", VA = "0xA740D8")]
	public void OnSettings()
	{
	}

	[Token(Token = "0x6000E4F")]
	[Address(RVA = "0xA74158", Offset = "0xA74158", VA = "0xA74158")]
	public void OnTester()
	{
	}

	[Token(Token = "0x6000E50")]
	[Address(RVA = "0xA741D8", Offset = "0xA741D8", VA = "0xA741D8")]
	public void OnQuit()
	{
	}

	[Token(Token = "0x6000E51")]
	[Address(RVA = "0xA74258", Offset = "0xA74258", VA = "0xA74258")]
	public PauseWindowDController()
	{
	}
}
[Token(Token = "0x20002DF")]
public class TesterWindowDController : WindowController
{
	[Token(Token = "0x4000E93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TesterDeathMatch testerDeathMatch;

	[Token(Token = "0x6000E52")]
	[Address(RVA = "0xA74260", Offset = "0xA74260", VA = "0xA74260")]
	public void OnSetShortTime()
	{
	}

	[Token(Token = "0x6000E53")]
	[Address(RVA = "0xA7427C", Offset = "0xA7427C", VA = "0xA7427C")]
	public void OnSetMuchosTime()
	{
	}

	[Token(Token = "0x6000E54")]
	[Address(RVA = "0xA74298", Offset = "0xA74298", VA = "0xA74298")]
	public void OnSetDefaultTime()
	{
	}

	[Token(Token = "0x6000E55")]
	[Address(RVA = "0xA742B4", Offset = "0xA742B4", VA = "0xA742B4")]
	public void OnBack()
	{
	}

	[Token(Token = "0x6000E56")]
	[Address(RVA = "0xA74334", Offset = "0xA74334", VA = "0xA74334")]
	public TesterWindowDController()
	{
	}
}
[Token(Token = "0x20002E0")]
public class TesterWindowWController : WindowController
{
	[Token(Token = "0x4000E94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TesterMenu testerMenu;

	[Token(Token = "0x6000E57")]
	[Address(RVA = "0xA7433C", Offset = "0xA7433C", VA = "0xA7433C")]
	public void OnGiveCastleMuchosHealth()
	{
	}

	[Token(Token = "0x6000E58")]
	[Address(RVA = "0xA74358", Offset = "0xA74358", VA = "0xA74358")]
	public void OnGiveCastleFullHealth()
	{
	}

	[Token(Token = "0x6000E59")]
	[Address(RVA = "0xA74374", Offset = "0xA74374", VA = "0xA74374")]
	public void OnGiveCastleOneHealth()
	{
	}

	[Token(Token = "0x6000E5A")]
	[Address(RVA = "0xA74390", Offset = "0xA74390", VA = "0xA74390")]
	public void OnSetNormalTrolls()
	{
	}

	[Token(Token = "0x6000E5B")]
	[Address(RVA = "0xA743AC", Offset = "0xA743AC", VA = "0xA743AC")]
	public void OnSetBlackTrolls()
	{
	}

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0xA743C8", Offset = "0xA743C8", VA = "0xA743C8")]
	public void OnSetRedDragons()
	{
	}

	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0xA743E4", Offset = "0xA743E4", VA = "0xA743E4")]
	public void OnSetGreenDragons()
	{
	}

	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0xA74400", Offset = "0xA74400", VA = "0xA74400")]
	public void OnSetNormalAxemans()
	{
	}

	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0xA7441C", Offset = "0xA7441C", VA = "0xA7441C")]
	public void OnSetRedAxemans()
	{
	}

	[Token(Token = "0x6000E60")]
	[Address(RVA = "0xA74438", Offset = "0xA74438", VA = "0xA74438")]
	public void OnPlayerImmortal()
	{
	}

	[Token(Token = "0x6000E61")]
	[Address(RVA = "0xA74454", Offset = "0xA74454", VA = "0xA74454")]
	public void OnBoostGameSpeed()
	{
	}

	[Token(Token = "0x6000E62")]
	[Address(RVA = "0xA74470", Offset = "0xA74470", VA = "0xA74470")]
	public void OnSetUrsags()
	{
	}

	[Token(Token = "0x6000E63")]
	[Address(RVA = "0xA7448C", Offset = "0xA7448C", VA = "0xA7448C")]
	public void OnSetTestingRoutes()
	{
	}

	[Token(Token = "0x6000E64")]
	[Address(RVA = "0xA744A8", Offset = "0xA744A8", VA = "0xA744A8")]
	public void OnSkipWave()
	{
	}

	[Token(Token = "0x6000E65")]
	[Address(RVA = "0xA74528", Offset = "0xA74528", VA = "0xA74528")]
	public void OnRevertToNormalWaves()
	{
	}

	[Token(Token = "0x6000E66")]
	[Address(RVA = "0xA74544", Offset = "0xA74544", VA = "0xA74544")]
	public void OnFinishWave()
	{
	}

	[Token(Token = "0x6000E67")]
	[Address(RVA = "0xA74560", Offset = "0xA74560", VA = "0xA74560")]
	public void OnBack()
	{
	}

	[Token(Token = "0x6000E68")]
	[Address(RVA = "0xA745E0", Offset = "0xA745E0", VA = "0xA745E0")]
	public TesterWindowWController()
	{
	}
}
[Token(Token = "0x20002E1")]
public class WaveChooserWindowController : WindowController
{
	[Token(Token = "0x4000E95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TesterMenu testerMenu;

	[Token(Token = "0x4000E96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text waveNumber;

	[Token(Token = "0x6000E69")]
	[Address(RVA = "0xA745E8", Offset = "0xA745E8", VA = "0xA745E8")]
	public void OnBack()
	{
	}

	[Token(Token = "0x6000E6A")]
	[Address(RVA = "0xA7465C", Offset = "0xA7465C", VA = "0xA7465C")]
	public void OnSetWave()
	{
	}

	[Token(Token = "0x6000E6B")]
	[Address(RVA = "0xA74700", Offset = "0xA74700", VA = "0xA74700")]
	public WaveChooserWindowController()
	{
	}
}
[Token(Token = "0x20002E2")]
public class UIDebug : MonoBehaviour
{
	[Token(Token = "0x4000E97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera playerCamera;

	[Token(Token = "0x4000E98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RaycastHit _rayHit;

	[Token(Token = "0x6000E6C")]
	[Address(RVA = "0xA74708", Offset = "0xA74708", VA = "0xA74708")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E6D")]
	[Address(RVA = "0xA74774", Offset = "0xA74774", VA = "0xA74774")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E6E")]
	[Address(RVA = "0xA748C4", Offset = "0xA748C4", VA = "0xA748C4")]
	public UIDebug()
	{
	}
}
[Token(Token = "0x20002E3")]
public class LookAtLocalPlayerCamera : MonoBehaviour
{
	[Token(Token = "0x4000E99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Renderer renderer;

	[Token(Token = "0x6000E6F")]
	[Address(RVA = "0xA748CC", Offset = "0xA748CC", VA = "0xA748CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E70")]
	[Address(RVA = "0xA74950", Offset = "0xA74950", VA = "0xA74950")]
	public LookAtLocalPlayerCamera()
	{
	}
}
[Token(Token = "0x20002E4")]
public class ParentSetter : MonoBehaviour
{
	[Token(Token = "0x4000E9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform newParent;

	[Token(Token = "0x6000E71")]
	[Address(RVA = "0xA74958", Offset = "0xA74958", VA = "0xA74958")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E72")]
	[Address(RVA = "0xA74980", Offset = "0xA74980", VA = "0xA74980")]
	public ParentSetter()
	{
	}
}
[Token(Token = "0x20002E5")]
public class TransformFollower : MonoBehaviour
{
	[Token(Token = "0x4000E9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform transformToFollow;

	[Token(Token = "0x6000E73")]
	[Address(RVA = "0xA74988", Offset = "0xA74988", VA = "0xA74988")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E74")]
	[Address(RVA = "0xA749C8", Offset = "0xA749C8", VA = "0xA749C8")]
	public TransformFollower()
	{
	}
}
[Token(Token = "0x20002E6")]
public class TransformInfo
{
	[Token(Token = "0x4000E9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 position;

	[Token(Token = "0x4000E9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Quaternion rotation;

	[Token(Token = "0x6000E75")]
	[Address(RVA = "0xA749D0", Offset = "0xA749D0", VA = "0xA749D0")]
	public TransformInfo(Vector3 _position, Quaternion _rotation)
	{
	}
}
[Token(Token = "0x20002E7")]
public class VRoteinManager : MonoBehaviour
{
	[Token(Token = "0x6000E76")]
	[Address(RVA = "0xA74A34", Offset = "0xA74A34", VA = "0xA74A34")]
	public VRoteinManager()
	{
	}
}
[Token(Token = "0x20002E8")]
public class WaterfallSoundDelayer : MonoBehaviour
{
	[Token(Token = "0x4000E9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource waterfall;

	[Token(Token = "0x6000E77")]
	[Address(RVA = "0xA74A3C", Offset = "0xA74A3C", VA = "0xA74A3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E78")]
	[Address(RVA = "0xA74A90", Offset = "0xA74A90", VA = "0xA74A90")]
	private void ActivateDelayed()
	{
	}

	[Token(Token = "0x6000E79")]
	[Address(RVA = "0xA74AB0", Offset = "0xA74AB0", VA = "0xA74AB0")]
	public WaterfallSoundDelayer()
	{
	}
}
[Token(Token = "0x20002E9")]
public enum EquipmentItemType
{
	[Token(Token = "0x4000EA0")]
	Bow,
	[Token(Token = "0x4000EA1")]
	Helmet,
	[Token(Token = "0x4000EA2")]
	BowAndHelmet
}
[Token(Token = "0x20002EA")]
public enum EquipmentItemKey
{
	[Token(Token = "0x4000EA4")]
	Bow_WoodenBow_Default,
	[Token(Token = "0x4000EA5")]
	Bow_SteelDefender,
	[Token(Token = "0x4000EA6")]
	Bow_NaturesCall,
	[Token(Token = "0x4000EA7")]
	Bow_BowOfAlliance,
	[Token(Token = "0x4000EA8")]
	Helmet_Barbuta_default,
	[Token(Token = "0x4000EA9")]
	Helmet_ArchersHelmet,
	[Token(Token = "0x4000EAA")]
	Helmet_GiftOfTheSea,
	[Token(Token = "0x4000EAB")]
	Helmet_HelmetOfAncestors,
	[Token(Token = "0x4000EAC")]
	Helmet_GriffinHelmet,
	[Token(Token = "0x4000EAD")]
	Set_ForestGuardian,
	[Token(Token = "0x4000EAE")]
	Set_OrcHunter,
	[Token(Token = "0x4000EAF")]
	Set_HolySet,
	[Token(Token = "0x4000EB0")]
	Set_FrozenTouch
}
[Token(Token = "0x20002EB")]
public class ShopController : MonoBehaviour
{
	[Token(Token = "0x4000EB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ShopItemsController shopItemsController;

	[Token(Token = "0x4000EB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject useButton;

	[Token(Token = "0x4000EB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject buyButton;

	[Token(Token = "0x4000EB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text boughtText;

	[Token(Token = "0x4000EB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject currentBowSelection;

	[Token(Token = "0x4000EB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text playerGold;

	[Token(Token = "0x4000EB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject infoWindow;

	[Token(Token = "0x4000EB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text infoWindowText;

	[Token(Token = "0x4000EB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject boughtMark;

	[Token(Token = "0x6000E7A")]
	[Address(RVA = "0xA74AB8", Offset = "0xA74AB8", VA = "0xA74AB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E7B")]
	[Address(RVA = "0xA74C7C", Offset = "0xA74C7C", VA = "0xA74C7C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000E7C")]
	[Address(RVA = "0xA74BEC", Offset = "0xA74BEC", VA = "0xA74BEC")]
	public void UpdatePlayerGoldInShopInfoBoard()
	{
	}

	[Token(Token = "0x6000E7D")]
	[Address(RVA = "0xA74DA8", Offset = "0xA74DA8", VA = "0xA74DA8")]
	public void UpdatePlayerGoldInShopInfoBoard(int gold)
	{
	}

	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0xA74DF0", Offset = "0xA74DF0", VA = "0xA74DF0")]
	public void BuyItem()
	{
	}

	[Token(Token = "0x6000E7F")]
	[Address(RVA = "0xA74F18", Offset = "0xA74F18", VA = "0xA74F18")]
	public void UseItem()
	{
	}

	[Token(Token = "0x6000E80")]
	[Address(RVA = "0xA75204", Offset = "0xA75204", VA = "0xA75204")]
	public void GoToPreviousItem()
	{
	}

	[Token(Token = "0x6000E81")]
	[Address(RVA = "0xA752F0", Offset = "0xA752F0", VA = "0xA752F0")]
	public void GoToNextItem()
	{
	}

	[Token(Token = "0x6000E82")]
	[Address(RVA = "0xA75140", Offset = "0xA75140", VA = "0xA75140")]
	public void RefreshShopButtonsInfo()
	{
	}

	[Token(Token = "0x6000E83")]
	[Address(RVA = "0xA750F4", Offset = "0xA750F4", VA = "0xA750F4")]
	public void ShowInfoWindow(string info)
	{
	}

	[Token(Token = "0x6000E84")]
	[Address(RVA = "0xA7530C", Offset = "0xA7530C", VA = "0xA7530C")]
	public ShopController()
	{
	}
}
[Token(Token = "0x20002EC")]
public class ShopItemsController : MonoBehaviour
{
	[Token(Token = "0x4000EBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ShopController shopController;

	[Token(Token = "0x4000EBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ShopItem currentItem;

	[Token(Token = "0x4000EBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ShopItem previousItem;

	[Token(Token = "0x4000EBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text descriptionText;

	[Token(Token = "0x4000EBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text costText;

	[Token(Token = "0x4000EBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text currentBowNumberText;

	[Token(Token = "0x4000EC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text numberOfItems;

	[Token(Token = "0x4000EC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text nameText;

	[Token(Token = "0x4000EC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<ShopItem> shopItems;

	[Token(Token = "0x4000EC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int currentItemNumber;

	[Token(Token = "0x6000E85")]
	[Address(RVA = "0xA75314", Offset = "0xA75314", VA = "0xA75314")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E86")]
	[Address(RVA = "0xA75814", Offset = "0xA75814", VA = "0xA75814")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E87")]
	[Address(RVA = "0xA75598", Offset = "0xA75598", VA = "0xA75598")]
	private void ShowItem(ShopItem shopItem)
	{
	}

	[Token(Token = "0x6000E88")]
	[Address(RVA = "0xA7588C", Offset = "0xA7588C", VA = "0xA7588C")]
	private bool CheckIfCanSetFreeItemsInShop()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E89")]
	[Address(RVA = "0xA7570C", Offset = "0xA7570C", VA = "0xA7570C")]
	private void SetFreeItemsInShop()
	{
	}

	[Token(Token = "0x6000E8A")]
	[Address(RVA = "0xA75258", Offset = "0xA75258", VA = "0xA75258")]
	public void ChangeItem(int shift)
	{
	}

	[Token(Token = "0x6000E8B")]
	[Address(RVA = "0xA7548C", Offset = "0xA7548C", VA = "0xA7548C")]
	public int GetIndexOfItem(string equipmentItemKey)
	{
		return default(int);
	}

	[Token(Token = "0x6000E8C")]
	[Address(RVA = "0xA758DC", Offset = "0xA758DC", VA = "0xA758DC")]
	public ShopItemsController()
	{
	}
}
[Token(Token = "0x20002EF")]
public static class LODMaker
{
	[Token(Token = "0x6000E92")]
	[Address(RVA = "0xA759F8", Offset = "0xA759F8", VA = "0xA759F8")]
	public static Mesh MakeLODMesh(Mesh orig, float aMaxWeight, bool recalcNormals = true, float removeSmallParts = 1f, bool reuseOldMesh = false)
	{
		return null;
	}

	[Token(Token = "0x6000E93")]
	[Address(RVA = "0xA75A14", Offset = "0xA75A14", VA = "0xA75A14")]
	public static Mesh MakeLODMesh(Mesh orig, float aMaxWeight, float removeSmallParts, float protectNormals, float protectUvs, float smallTrianglesFirst, float protectSubMeshesAndSharpEdges, bool recalcNormals, bool reuseOldMesh = false)
	{
		return null;
	}

	[Token(Token = "0x6000E94")]
	[Address(RVA = "0xA75B8C", Offset = "0xA75B8C", VA = "0xA75B8C")]
	private static void GetWeights(float aMaxWeight, float removeSmallParts, float protectNormals, float protectUvs, float smallTrianglesFirst, float protectSubMeshesAndSharpEdges, out float sideLengthWeight, out float oldAngleWeight, out float newAngleWeight, out float uvWeight, out float areaDiffWeight, out float normalWeight, out float vertexWeight, out float centerDistanceWeight)
	{
	}

	[Token(Token = "0x6000E95")]
	[Address(RVA = "0xA76918", Offset = "0xA76918", VA = "0xA76918")]
	public static void MakeLODMeshInBackground(object data)
	{
	}

	[Token(Token = "0x6000E96")]
	[Address(RVA = "0xA75C30", Offset = "0xA75C30", VA = "0xA75C30")]
	private static Mesh MakeLODMesh(Mesh orig, float maxWeight, float removeSmallParts, float sideLengthWeight, float oldAngleWeight, float newAngleWeight, float uvWeight, float areaDiffWeight, float normalWeight, float vertexWeight, float centerDistanceWeight, bool recalcNormals, bool reuseOldMesh)
	{
		return null;
	}

	[Token(Token = "0x6000E97")]
	[Address(RVA = "0xA77DAC", Offset = "0xA77DAC", VA = "0xA77DAC")]
	private static void MakeLODMesh(Vector3[] vs, Vector3[] ns, Vector2[] uv1s, Vector2[] uv2s, Vector2[] uv3s, Vector2[] uv4s, Color32[] colors32, int[] ts, ref Matrix4x4[] bindposes, BoneWeight[] bws, ref int[] subMeshOffsets, Bounds meshBounds, float maxWeight, float removeSmallParts, float sideLengthWeight, float oldAngleWeight, float newAngleWeight, float uvWeight, float areaDiffWeight, float normalWeight, float vertexWeight, float centerDistanceWeight, out List<Vector3> newVs, out List<Vector3> newNs, out List<Vector2> newUv1s, out List<Vector2> newUv2s, out List<Vector2> newUv3s, out List<Vector2> newUv4s, out List<Color32> newColors32, out List<int> newTs, out List<BoneWeight> newBws)
	{
	}

	[Token(Token = "0x6000E98")]
	[Address(RVA = "0xA7BED8", Offset = "0xA7BED8", VA = "0xA7BED8")]
	private static bool AnyWeightOK(float[] weights, float aMaxWeight)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E99")]
	[Address(RVA = "0xA7B56C", Offset = "0xA7B56C", VA = "0xA7B56C")]
	private static int[] GetAdjacentTriangles(int[] ts, int tIdx, List<List<int>> trianglesPerVertex, int[] uniqueVs, int[] triangleGroups, List<List<int>> trianglesPerGroup)
	{
		return null;
	}

	[Token(Token = "0x6000E9A")]
	[Address(RVA = "0xA7FA7C", Offset = "0xA7FA7C", VA = "0xA7FA7C")]
	private static void SetTriangleGroup(int tIdx0, int tIdx1, int[] triangleGroups, List<List<int>> trianglesPerGroup)
	{
	}

	[Token(Token = "0x6000E9B")]
	[Address(RVA = "0xA7BF28", Offset = "0xA7BF28", VA = "0xA7BF28")]
	private static void GetTotalAngleAndCenterDistanceForCorner(int[] ts, Vector3[] vs, int[] movedVs, int vertexIdx, Vector3[] centerDistances, ref float totalAngle, ref Vector3 totalCenterDist)
	{
	}

	[Token(Token = "0x6000E9C")]
	[Address(RVA = "0xA7C508", Offset = "0xA7C508", VA = "0xA7C508")]
	private static void GetTotalAngleAndCenterDistanceForNewCorner(int[] ts, Vector3[] vs, int[] movedVs, int[] uniqueVs, int vertexIdx, int newIdx, Vector3[] centerDistances, float maxWeight, ref float totalAngle, ref Vector3 totalCenterDist, ref bool flipsTriangles)
	{
	}

	[Token(Token = "0x6000E9D")]
	[Address(RVA = "0xA7D008", Offset = "0xA7D008", VA = "0xA7D008")]
	private static void GetUVStretchAndAreaForCorner(int[] ts, Vector3[] vs, int[] movedVs, int[] uniqueVs, Vector2[] uvs, int cFrom, int cTo, ref float affectedUvAreaDiff, ref float affectedAreaDiff, ref float totalUvAreaDiff, ref float totalAreaDiff)
	{
	}

	[Token(Token = "0x6000E9E")]
	[Address(RVA = "0xA7B418", Offset = "0xA7B418", VA = "0xA7B418")]
	private static float GetNormalDiffForCorners(Vector3[] ns, int corner1, int corner2)
	{
		return default(float);
	}

	[Token(Token = "0x6000E9F")]
	[Address(RVA = "0xA7D6E4", Offset = "0xA7D6E4", VA = "0xA7D6E4")]
	private static void MergeVertices(ref int oldV, int newV, bool[] hasTwinVS, Vector3[] vs, int[] triangles, Vector2[] uv1s, Vector2[] uv2s, Vector2[] uv3s, Vector2[] uv4s, Color32[] colors32, bool[] deletedVertices, int[] movedVs, int[] uniqueVs, int[] movedUv1s, int[] movedUv2s, int[] movedUv3s, int[] movedUv4s, int[] movedColors, List<List<int>> trianglesPerVertex, bool logYN)
	{
	}

	[Token(Token = "0x6000EA0")]
	[Address(RVA = "0xA7FEB4", Offset = "0xA7FEB4", VA = "0xA7FEB4")]
	private static void MoveVertex(int oldV, int newV, int[] movedVs, int[] uniqueVs, int[] movedUv1s, int[] movedUv2s, int[] movedUv3s, int[] movedUv4s, int[] movedColors)
	{
	}

	[Token(Token = "0x6000EA1")]
	[Address(RVA = "0xA7DA74", Offset = "0xA7DA74", VA = "0xA7DA74")]
	private static void FillNewMeshArray(Vector3[] vs, bool[] vdel, int[] movedVs, Vector3[] ns, Vector2[] uv1s, int[] movedUv1s, Vector2[] uv2s, int[] movedUv2s, Vector2[] uv3s, int[] movedUv3s, Vector2[] uv4s, int[] movedUv4s, Color32[] colors32, int[] movedColors, BoneWeight[] bws, List<Vector3> newVs, List<Vector3> newNs, List<Vector2> newUv1s, List<Vector2> newUv2s, List<Vector2> newUv3s, List<Vector2> newUv4s, List<Color32> newColors32, List<BoneWeight> newBws, int[] o2n)
	{
	}

	[Token(Token = "0x6000EA2")]
	[Address(RVA = "0xA7E3A4", Offset = "0xA7E3A4", VA = "0xA7E3A4")]
	private static void FillNewMeshTriangles(int[] oldTriangles, int[] o2n, List<int> newTriangles, int[] subMeshOffsets, int[] triangleGroups, List<int> newTGrps)
	{
	}

	[Token(Token = "0x6000EA3")]
	[Address(RVA = "0xA7F4E8", Offset = "0xA7F4E8", VA = "0xA7F4E8")]
	public static void RemoveUnusedVertices(List<Vector3> vs, List<Vector3> ns, List<Vector2> uv1s, List<Vector2> uv2s, List<Vector2> uv3s, List<Vector2> uv4s, List<Color32> colors32, List<BoneWeight> bws, List<int> ts)
	{
	}

	[Token(Token = "0x6000EA4")]
	[Address(RVA = "0xA80048", Offset = "0xA80048", VA = "0xA80048")]
	public static void RemoveUnusedVertices(List<Vector3> vs, List<Vector3> ns, List<Vector2> uv1s, List<Vector2> uv2s, List<Vector2> uv3s, List<Vector2> uv4s, List<Color32> colors32, List<BoneWeight> bws, List<List<int>> subMeshes)
	{
	}

	[Token(Token = "0x6000EA5")]
	[Address(RVA = "0xA807A8", Offset = "0xA807A8", VA = "0xA807A8")]
	public static void RemoveUnusedVertices(List<Vector3> vs, List<Vector3> ns, List<Vector2> uv1s, List<Vector2> uv2s, List<Vector2> uv3s, List<Vector2> uv4s, List<Color32> colors32, List<BoneWeight> bws, Dictionary<Material, List<int>> subMeshes)
	{
	}

	[Token(Token = "0x6000EA6")]
	[Address(RVA = "0xA7E760", Offset = "0xA7E760", VA = "0xA7E760")]
	private static void RemoveEmptyTriangles(List<Vector3> newVs, List<Vector3> newNs, List<Vector2> newUv1s, List<Vector2> newUv2s, List<Vector2> newUv3s, List<Vector2> newUv4s, List<Color32> newColors32, List<int> newTs, List<BoneWeight> newBws, int[] subMeshOffsets, List<int> newTGrps)
	{
	}

	[Token(Token = "0x6000EA7")]
	[Address(RVA = "0xA7EE6C", Offset = "0xA7EE6C", VA = "0xA7EE6C")]
	private static void RemoveMiniTriangleGroups(float removeSmallParts, Vector3 sizeMultiplier, float aMaxWeight, List<Vector3> newVs, List<int> newTs, int[] subMeshOffsets, List<int> newTGrps)
	{
	}

	[Token(Token = "0x6000EA8")]
	[Address(RVA = "0xA7AD6C", Offset = "0xA7AD6C", VA = "0xA7AD6C")]
	public static Mesh CreateNewMesh(Vector3[] vs, Vector3[] ns, Vector2[] uv1s, Vector2[] uv2s, Vector2[] uv3s, Vector2[] uv4s, Color32[] colors32, int[] ts, BoneWeight[] bws, Matrix4x4[] bindposes, int[] subMeshOffsets, bool recalcNormals)
	{
		return null;
	}

	[Token(Token = "0x6000EA9")]
	[Address(RVA = "0xA7AAA4", Offset = "0xA7AAA4", VA = "0xA7AAA4")]
	public static void FillMesh(Mesh mesh, Vector3[] vs, Vector3[] ns, Vector2[] uv1s, Vector2[] uv2s, Vector2[] uv3s, Vector2[] uv4s, Color32[] colors32, int[] ts, BoneWeight[] bws, Matrix4x4[] bindposes, int[] subMeshOffsets, bool recalcNormals)
	{
	}

	[Token(Token = "0x6000EAA")]
	[Address(RVA = "0xA7CDE8", Offset = "0xA7CDE8", VA = "0xA7CDE8")]
	private static float AngleCornerDiff(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x6000EAB")]
	[Address(RVA = "0xA7CF34", Offset = "0xA7CF34", VA = "0xA7CF34")]
	private static float AngleDiff(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x6000EAC")]
	[Address(RVA = "0xA7B234", Offset = "0xA7B234", VA = "0xA7B234")]
	private static float Area(Vector3 p0, Vector3 p1, Vector3 p2)
	{
		return default(float);
	}

	[Token(Token = "0x6000EAD")]
	[Address(RVA = "0xA8116C", Offset = "0xA8116C", VA = "0xA8116C")]
	private static int GetVertexEqualTo(Vector3 v, List<int> orderedVertices, Vector3[] vs)
	{
		return default(int);
	}

	[Token(Token = "0x6000EAE")]
	[Address(RVA = "0xA7B064", Offset = "0xA7B064", VA = "0xA7B064")]
	private static List<int> GetVerticesEqualTo(Vector3 v, List<int> orderedVertices, Vector3[] vs)
	{
		return null;
	}

	[Token(Token = "0x6000EAF")]
	[Address(RVA = "0xA8137C", Offset = "0xA8137C", VA = "0xA8137C")]
	private static List<int> GetVerticesWithinBox(Vector3 from, Vector3 to, List<int> orderedVertices, Vector3[] vs)
	{
		return null;
	}

	[Token(Token = "0x6000EB0")]
	[Address(RVA = "0xA7AE48", Offset = "0xA7AE48", VA = "0xA7AE48")]
	private static int GetLastVertexWithYSmaller(float y, List<int> orderedVertices, Vector3[] vs, int limitSearchRange)
	{
		return default(int);
	}

	[Token(Token = "0x6000EB1")]
	[Address(RVA = "0xA8161C", Offset = "0xA8161C", VA = "0xA8161C")]
	private static bool IsVertexObscured(Vector3[] vs, Vector3[] ns, int[] ts, bool[] vObscured, int[] uniqueVs, Vector3 vertexBoxSize, List<int> orderedVertices, List<List<int>> trianglesPerVertex, int[] subMeshIdxPerVertex, float maxObscureDist, bool hiddenByOtherSubmesh, Vector3 vertex, Vector3 normal, int i)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EB2")]
	[Address(RVA = "0xA81CFC", Offset = "0xA81CFC", VA = "0xA81CFC")]
	public static float FindCollision(Vector3 fromPos, Vector3 direction, Vector3 pointOnPlane, Vector3 normalPlane)
	{
		return default(float);
	}

	[Token(Token = "0x6000EB3")]
	[Address(RVA = "0xA7A9B8", Offset = "0xA7A9B8", VA = "0xA7A9B8")]
	private static void Log(string msg)
	{
	}
}
[Token(Token = "0x20002F0")]
public class LODSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000EC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh[] lodMeshes;

	[Token(Token = "0x4000EC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] lodGameObjects;

	[Token(Token = "0x4000EC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float[] lodScreenSizes;

	[Token(Token = "0x4000ECA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float deactivateAtDistance;

	[Token(Token = "0x4000ECB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Camera customCamera;

	[Token(Token = "0x4000ECC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MeshFilter meshFilter;

	[Token(Token = "0x4000ECD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SkinnedMeshRenderer skinnedMeshRenderer;

	[Token(Token = "0x4000ECE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 centerOffset;

	[Token(Token = "0x4000ECF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float pixelsPerMeter;

	[Token(Token = "0x4000ED0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float objectSize;

	[Token(Token = "0x4000ED1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int fixedLODLevel;

	[Token(Token = "0x4000ED2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int lodLevel;

	[Token(Token = "0x4000ED3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int frameOffset;

	[Token(Token = "0x4000ED4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int frameInterval;

	[Token(Token = "0x6000EB4")]
	[Address(RVA = "0xA81DD0", Offset = "0xA81DD0", VA = "0xA81DD0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EB5")]
	[Address(RVA = "0xA82310", Offset = "0xA82310", VA = "0xA82310")]
	public void ComputeDimensions()
	{
	}

	[Token(Token = "0x6000EB6")]
	[Address(RVA = "0xA82AAC", Offset = "0xA82AAC", VA = "0xA82AAC")]
	public void SetCustomCamera(Camera aCamera)
	{
	}

	[Token(Token = "0x6000EB7")]
	[Address(RVA = "0xA82AC8", Offset = "0xA82AC8", VA = "0xA82AC8")]
	public void SetFixedLODLevel(int aLevel)
	{
	}

	[Token(Token = "0x6000EB8")]
	[Address(RVA = "0xA82B00", Offset = "0xA82B00", VA = "0xA82B00")]
	public void ReleaseFixedLODLevel()
	{
	}

	[Token(Token = "0x6000EB9")]
	[Address(RVA = "0xA82B0C", Offset = "0xA82B0C", VA = "0xA82B0C")]
	public int GetLODLevel()
	{
		return default(int);
	}

	[Token(Token = "0x6000EBA")]
	[Address(RVA = "0xA82AE8", Offset = "0xA82AE8", VA = "0xA82AE8")]
	public int MaxLODLevel()
	{
		return default(int);
	}

	[Token(Token = "0x6000EBB")]
	[Address(RVA = "0xA82B14", Offset = "0xA82B14", VA = "0xA82B14")]
	public Mesh GetMesh(int aLevel)
	{
		return null;
	}

	[Token(Token = "0x6000EBC")]
	[Address(RVA = "0xA82B4C", Offset = "0xA82B4C", VA = "0xA82B4C")]
	public void SetMesh(Mesh aMesh, int aLevel)
	{
	}

	[Token(Token = "0x6000EBD")]
	[Address(RVA = "0xA82CEC", Offset = "0xA82CEC", VA = "0xA82CEC")]
	public void SetRelativeScreenSize(float aValue, int aLevel)
	{
	}

	[Token(Token = "0x6000EBE")]
	[Address(RVA = "0xA82E3C", Offset = "0xA82E3C", VA = "0xA82E3C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000EBF")]
	[Address(RVA = "0xA82E74", Offset = "0xA82E74", VA = "0xA82E74")]
	public Vector3 NearestCameraPositionForLOD(int aLevel)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000EC0")]
	[Address(RVA = "0xA83078", Offset = "0xA83078", VA = "0xA83078")]
	public float ScreenPortion()
	{
		return default(float);
	}

	[Token(Token = "0x6000EC1")]
	[Address(RVA = "0xA8270C", Offset = "0xA8270C", VA = "0xA8270C")]
	private void ComputeLODLevel()
	{
	}

	[Token(Token = "0x6000EC2")]
	[Address(RVA = "0xA829BC", Offset = "0xA829BC", VA = "0xA829BC")]
	private void GetMeshFilter()
	{
	}

	[Token(Token = "0x6000EC3")]
	[Address(RVA = "0xA820B8", Offset = "0xA820B8", VA = "0xA820B8")]
	public void SetLODLevel(int newLodLevel)
	{
	}

	[Token(Token = "0x6000EC4")]
	[Address(RVA = "0xA832CC", Offset = "0xA832CC", VA = "0xA832CC")]
	public LODSwitcher()
	{
	}
}
[Token(Token = "0x20002F1")]
public class SmallTournamentCanvasController : MonoBehaviourPun
{
	[Token(Token = "0x4000ED5")]
	private const int minEuropeTimeZoneOffset = 0;

	[Token(Token = "0x4000ED6")]
	private const int maxEuropeTimeZoneOffset = 4;

	[Token(Token = "0x4000ED7")]
	private const int minAsiaTimeZoneOffset = 5;

	[Token(Token = "0x4000ED8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text connectingText;

	[Token(Token = "0x4000ED9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject tournamentInfo;

	[Token(Token = "0x4000EDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private BeforeEnrollmentTournamentController beforeEnrollmentTournamentController;

	[Token(Token = "0x6000EC5")]
	[Address(RVA = "0xA832E4", Offset = "0xA832E4", VA = "0xA832E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EC6")]
	[Address(RVA = "0xA83314", Offset = "0xA83314", VA = "0xA83314")]
	private CloudRegionCode GetRegionBasedOnLocalTimeZone()
	{
		return default(CloudRegionCode);
	}

	[Token(Token = "0x6000EC7")]
	[Address(RVA = "0xA83540", Offset = "0xA83540", VA = "0xA83540")]
	private void ShowTournamentInfo()
	{
	}

	[Token(Token = "0x6000EC8")]
	[Address(RVA = "0xA83578", Offset = "0xA83578", VA = "0xA83578")]
	public SmallTournamentCanvasController()
	{
	}
}
[Token(Token = "0x20002F2")]
public class BackgroundMusicChanger : MonoBehaviour
{
	[Token(Token = "0x4000EDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<AudioClip> backgroundSound;

	[Token(Token = "0x4000EDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource backgroundPlayer;

	[Token(Token = "0x6000EC9")]
	[Address(RVA = "0xA83580", Offset = "0xA83580", VA = "0xA83580")]
	private void Update()
	{
	}

	[Token(Token = "0x6000ECA")]
	[Address(RVA = "0xA836AC", Offset = "0xA836AC", VA = "0xA836AC")]
	public BackgroundMusicChanger()
	{
	}
}
[Token(Token = "0x20002F3")]
public class RandomOrcRoar : MonoBehaviour
{
	[Token(Token = "0x4000EDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource Breathing;

	[Token(Token = "0x4000EDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource _audioSource;

	[Token(Token = "0x6000ECB")]
	[Address(RVA = "0xA836B4", Offset = "0xA836B4", VA = "0xA836B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000ECC")]
	[Address(RVA = "0xA8370C", Offset = "0xA8370C", VA = "0xA8370C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000ECD")]
	[Address(RVA = "0xA83758", Offset = "0xA83758", VA = "0xA83758")]
	public RandomOrcRoar()
	{
	}
}
[Token(Token = "0x20002F4")]
public class SpatializerDisabler : MonoBehaviour
{
	[Token(Token = "0x6000ECE")]
	[Address(RVA = "0xA83760", Offset = "0xA83760", VA = "0xA83760")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ECF")]
	[Address(RVA = "0xA837FC", Offset = "0xA837FC", VA = "0xA837FC")]
	public SpatializerDisabler()
	{
	}
}
[Token(Token = "0x20002F5")]
public class TorsoEnabler : MonoBehaviour
{
	[Token(Token = "0x6000ED0")]
	[Address(RVA = "0xA83804", Offset = "0xA83804", VA = "0xA83804")]
	public void EnableTorsoOnSuitableGameVersion()
	{
	}

	[Token(Token = "0x6000ED1")]
	[Address(RVA = "0xA8387C", Offset = "0xA8387C", VA = "0xA8387C")]
	public TorsoEnabler()
	{
	}
}
[Token(Token = "0x20002F6")]
public class TorsoTracker : MonoBehaviour
{
	[Token(Token = "0x4000EDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float maxTurnAngleRatio;

	[Token(Token = "0x4000EE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 torsoPitch;

	[Token(Token = "0x4000EE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 horizontalNeckOffset;

	[Token(Token = "0x4000EE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 directionToHands;

	[Token(Token = "0x4000EE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float handsDirectiondampingValue;

	[Token(Token = "0x4000EE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float headDirectionDampingValue;

	[Token(Token = "0x4000EE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float dampingSpeed;

	[Token(Token = "0x4000EE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float distSquared;

	[Token(Token = "0x4000EE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float dotProduct;

	[Token(Token = "0x4000EE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float cachedYRotation;

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float maxHeadPitch;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float neckOffset;

	[Token(Token = "0x4000EEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float HipsOffset;

	[Token(Token = "0x4000EEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float deltaPitch;

	[Token(Token = "0x4000EED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float pitchPole;

	[Token(Token = "0x4000EEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float pitchAdjust;

	[Token(Token = "0x4000EEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform head;

	[Token(Token = "0x4000EF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform rightHand;

	[Token(Token = "0x4000EF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform leftHand;

	[Token(Token = "0x4000EF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float maxTurnAngle;

	[Token(Token = "0x4000EF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float minDistanceToTurn;

	[Token(Token = "0x4000EF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float turnSpeed;

	[Token(Token = "0x6000ED2")]
	[Address(RVA = "0xA83884", Offset = "0xA83884", VA = "0xA83884")]
	public void InitializeWithoutPlayer()
	{
	}

	[Token(Token = "0x6000ED3")]
	[Address(RVA = "0xA838B0", Offset = "0xA838B0", VA = "0xA838B0")]
	public void InitializeWithPlayer()
	{
	}

	[Token(Token = "0x6000ED4")]
	[Address(RVA = "0xA838BC", Offset = "0xA838BC", VA = "0xA838BC", Slot = "4")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000ED5")]
	[Address(RVA = "0xA83E00", Offset = "0xA83E00", VA = "0xA83E00")]
	private float RemapHeadPitchAngle()
	{
		return default(float);
	}

	[Token(Token = "0x6000ED6")]
	[Address(RVA = "0xA83DCC", Offset = "0xA83DCC", VA = "0xA83DCC")]
	private bool IsHeadPitchedTooMuch()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ED7")]
	[Address(RVA = "0xA83E4C", Offset = "0xA83E4C", VA = "0xA83E4C")]
	public TorsoTracker()
	{
	}
}
[Token(Token = "0x20002F7")]
public class TournamentBuildLobbySwitcher : MonoBehaviour
{
	[Token(Token = "0x4000EF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject LobbyWithoutTournament;

	[Token(Token = "0x4000EF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject LobbyWithTournament;

	[Token(Token = "0x4000EF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject LobbyWithTournament_Lobby;

	[Token(Token = "0x4000EF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject LobbyWithTournament_Tournament;

	[Token(Token = "0x6000ED8")]
	[Address(RVA = "0xA83ECC", Offset = "0xA83ECC", VA = "0xA83ECC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000ED9")]
	[Address(RVA = "0xA83FB4", Offset = "0xA83FB4", VA = "0xA83FB4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000EDA")]
	[Address(RVA = "0xA83F54", Offset = "0xA83F54", VA = "0xA83F54")]
	private void SetAllToInactive()
	{
	}

	[Token(Token = "0x6000EDB")]
	[Address(RVA = "0xA83FB8", Offset = "0xA83FB8", VA = "0xA83FB8")]
	public TournamentBuildLobbySwitcher()
	{
	}
}
[Token(Token = "0x20002F8")]
public class TournamentQuitController : WindowController
{
	[Token(Token = "0x6000EDC")]
	[Address(RVA = "0xA83FC0", Offset = "0xA83FC0", VA = "0xA83FC0")]
	public void ResetLobby()
	{
	}

	[Token(Token = "0x6000EDD")]
	[Address(RVA = "0xA84074", Offset = "0xA84074", VA = "0xA84074")]
	public void OnYes()
	{
	}

	[Token(Token = "0x6000EDE")]
	[Address(RVA = "0xA841E0", Offset = "0xA841E0", VA = "0xA841E0")]
	public void OnNo()
	{
	}

	[Token(Token = "0x6000EDF")]
	[Address(RVA = "0xA84260", Offset = "0xA84260", VA = "0xA84260")]
	public TournamentQuitController()
	{
	}
}
[Token(Token = "0x20002F9")]
public class TournamentTimeSynchronizer : MonoBehaviourPun
{
	[Token(Token = "0x4000EF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeOffset;

	[Token(Token = "0x6000EE0")]
	[Address(RVA = "0xA84268", Offset = "0xA84268", VA = "0xA84268")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000EE1")]
	[Address(RVA = "0xA843AC", Offset = "0xA843AC", VA = "0xA843AC")]
	[PunRPC]
	public void RPCRequestTime(int playerID)
	{
	}

	[Token(Token = "0x6000EE2")]
	[Address(RVA = "0xA8473C", Offset = "0xA8473C", VA = "0xA8473C")]
	[PunRPC]
	public void RPCSynchronizeTime(int year, int month, int day, int hour, int minute, int second)
	{
	}

	[Token(Token = "0x6000EE3")]
	[Address(RVA = "0xA84810", Offset = "0xA84810", VA = "0xA84810")]
	public TournamentTimeSynchronizer()
	{
	}
}
[Token(Token = "0x20002FA")]
public class TrailColorSetter : MonoBehaviourPun
{
	[Token(Token = "0x4000EFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PlayerController _playerController;

	[Token(Token = "0x6000EE4")]
	[Address(RVA = "0xA84820", Offset = "0xA84820", VA = "0xA84820")]
	public Gradient GetTrailColor(int playerId)
	{
		return null;
	}

	[Token(Token = "0x6000EE5")]
	[Address(RVA = "0xA848F8", Offset = "0xA848F8", VA = "0xA848F8")]
	public TrailColorSetter()
	{
	}
}
[Token(Token = "0x20002FB")]
public class EagleController : MonoBehaviour
{
	[Token(Token = "0x4000EFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animation EagleAnimation;

	[Token(Token = "0x4000EFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationClip lookAround;

	[Token(Token = "0x4000EFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationClip eatYourWing;

	[Token(Token = "0x4000EFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationClip hop;

	[Token(Token = "0x4000EFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationClip fly;

	[Token(Token = "0x6000EE6")]
	[Address(RVA = "0xA84900", Offset = "0xA84900", VA = "0xA84900")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EE7")]
	[Address(RVA = "0xA849DC", Offset = "0xA849DC", VA = "0xA849DC")]
	public void LookAround()
	{
	}

	[Token(Token = "0x6000EE8")]
	[Address(RVA = "0xA84A7C", Offset = "0xA84A7C", VA = "0xA84A7C")]
	public void FlyAway()
	{
	}

	[Token(Token = "0x6000EE9")]
	[Address(RVA = "0xA84A80", Offset = "0xA84A80", VA = "0xA84A80")]
	public void EatYourWind()
	{
	}

	[Token(Token = "0x6000EEA")]
	[Address(RVA = "0xA84AFC", Offset = "0xA84AFC", VA = "0xA84AFC")]
	public void Hop()
	{
	}

	[Token(Token = "0x6000EEB")]
	[Address(RVA = "0xA84B50", Offset = "0xA84B50", VA = "0xA84B50")]
	public void Fly()
	{
	}

	[Token(Token = "0x6000EEC")]
	[Address(RVA = "0xA84BA4", Offset = "0xA84BA4", VA = "0xA84BA4")]
	public EagleController()
	{
	}
}
[Token(Token = "0x20002FC")]
public class CamMove : MonoBehaviour
{
	[Token(Token = "0x6000EED")]
	[Address(RVA = "0xA84BAC", Offset = "0xA84BAC", VA = "0xA84BAC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EEE")]
	[Address(RVA = "0xA84BB0", Offset = "0xA84BB0", VA = "0xA84BB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0xA84D50", Offset = "0xA84D50", VA = "0xA84D50")]
	public CamMove()
	{
	}
}
[Token(Token = "0x20002FD")]
public class UnusedAssetDestroyer : MonoBehaviour
{
	[Token(Token = "0x4000F00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("(Mainly for Maciek) All these assets will be deleted from the project. Use it before you build to delete files necessary only for other platforms. Unity takes a second to update the project view.")]
	public List<UnityEngine.Object> unusedObjects;

	[Token(Token = "0x6000EF0")]
	[Address(RVA = "0xA84D58", Offset = "0xA84D58", VA = "0xA84D58")]
	public UnusedAssetDestroyer()
	{
	}
}
[Token(Token = "0x20002FE")]
public class UpDownMovementController : MonoBehaviour
{
	[Token(Token = "0x4000F01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float oneDirectionMovementDuration;

	[Token(Token = "0x4000F02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float movementSpeed;

	[Token(Token = "0x4000F03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 movementVector;

	[Token(Token = "0x4000F04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timer;

	[Token(Token = "0x4000F05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isMovingUp;

	[Token(Token = "0x6000EF1")]
	[Address(RVA = "0xA84D60", Offset = "0xA84D60", VA = "0xA84D60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000EF2")]
	[Address(RVA = "0xA84E54", Offset = "0xA84E54", VA = "0xA84E54")]
	public UpDownMovementController()
	{
	}
}
[Token(Token = "0x20002FF")]
public class VRKey : MonoBehaviour
{
	[Token(Token = "0x2000300")]
	public delegate void KeyClickAction(string key, bool isBackSpace);

	[Token(Token = "0x4000F07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color ActiveColor;

	[Token(Token = "0x4000F08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color NormalColor;

	[Token(Token = "0x4000F09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isBackSpace;

	[Token(Token = "0x4000F0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Image _buttonImage;

	[Token(Token = "0x14000015")]
	public event KeyClickAction OnKeyClicked
	{
		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xA84E74", Offset = "0xA84E74", VA = "0xA84E74")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xA84F10", Offset = "0xA84F10", VA = "0xA84F10")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000EF5")]
	[Address(RVA = "0xA84FAC", Offset = "0xA84FAC", VA = "0xA84FAC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EF6")]
	[Address(RVA = "0xA85020", Offset = "0xA85020", VA = "0xA85020")]
	public void KeyAction()
	{
	}

	[Token(Token = "0x6000EF7")]
	[Address(RVA = "0xA85078", Offset = "0xA85078", VA = "0xA85078")]
	public void ActivateKey()
	{
	}

	[Token(Token = "0x6000EF8")]
	[Address(RVA = "0xA850A8", Offset = "0xA850A8", VA = "0xA850A8")]
	public void DeactivateKey()
	{
	}

	[Token(Token = "0x6000EF9")]
	[Address(RVA = "0xA850D8", Offset = "0xA850D8", VA = "0xA850D8")]
	public VRKey()
	{
	}
}
[Token(Token = "0x2000301")]
public class WooshSoundController : MonoBehaviourPun
{
	[Token(Token = "0x4000F0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource wooshSource;

	[Token(Token = "0x4000F0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private CollisionEvents collisionEvents;

	[Token(Token = "0x4000F0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ArrowFlyController arrowFlyController;

	[Token(Token = "0x6000EFE")]
	[Address(RVA = "0xA85284", Offset = "0xA85284", VA = "0xA85284")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EFF")]
	[Address(RVA = "0xA853BC", Offset = "0xA853BC", VA = "0xA853BC")]
	public void PlayWooshSound()
	{
	}

	[Token(Token = "0x6000F00")]
	[Address(RVA = "0xA853D8", Offset = "0xA853D8", VA = "0xA853D8")]
	public void PlayArrowWoosh()
	{
	}

	[Token(Token = "0x6000F01")]
	[Address(RVA = "0xA853F4", Offset = "0xA853F4", VA = "0xA853F4")]
	public void StopWooshSound(Collision collision)
	{
	}

	[Token(Token = "0x6000F02")]
	[Address(RVA = "0xA85410", Offset = "0xA85410", VA = "0xA85410")]
	public WooshSoundController()
	{
	}
}
[Token(Token = "0x2000302")]
public class ZombieAudioEventsController : MonoBehaviour
{
	[Token(Token = "0x4000F0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ZombieSoundController zombieSoundController;

	[Token(Token = "0x6000F03")]
	[Address(RVA = "0xA85418", Offset = "0xA85418", VA = "0xA85418")]
	public void OnFallDown()
	{
	}

	[Token(Token = "0x6000F04")]
	[Address(RVA = "0xA85434", Offset = "0xA85434", VA = "0xA85434")]
	public void OnFootDown()
	{
	}

	[Token(Token = "0x6000F05")]
	[Address(RVA = "0xA85450", Offset = "0xA85450", VA = "0xA85450")]
	public ZombieAudioEventsController()
	{
	}
}
namespace OrbCreationExtensions
{
	[Token(Token = "0x2000303")]
	public static class FloatExtensions
	{
		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xA85458", Offset = "0xA85458", VA = "0xA85458")]
		public static string MakeString(this float aFloat)
		{
			return null;
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xA854B0", Offset = "0xA854B0", VA = "0xA854B0")]
		public static string MakeString(this float aFloat, int decimals)
		{
			return null;
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xA81110", Offset = "0xA81110", VA = "0xA81110")]
		public static float To180Angle(this float f)
		{
			return default(float);
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xA85674", Offset = "0xA85674", VA = "0xA85674")]
		public static float To360Angle(this float f)
		{
			return default(float);
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xA856C0", Offset = "0xA856C0", VA = "0xA856C0")]
		public static float RadToCompassAngle(this float rad)
		{
			return default(float);
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xA85724", Offset = "0xA85724", VA = "0xA85724")]
		public static float DegreesToCompassAngle(this float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xA8577C", Offset = "0xA8577C", VA = "0xA8577C")]
		public static float Distance(this float f1, float f2)
		{
			return default(float);
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xA85784", Offset = "0xA85784", VA = "0xA85784")]
		public static float RelativePositionBetweenAngles(this float angle, float from, float to)
		{
			return default(float);
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xA85920", Offset = "0xA85920", VA = "0xA85920")]
		public static float Round(this float f, int decimals)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000304")]
	public static class GameObjectExtensions
	{
		[Token(Token = "0x2000305")]
		[CompilerGenerated]
		private sealed class <SetUpLODLevelsWithLODSwitcherInBackground>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject go;

			[Token(Token = "0x4000F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float[] maxWeights;

			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float removeSmallParts;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool recalcNormals;

			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float[] lodScreenSizes;

			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Mesh <mesh>5__2;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private LODSwitcher <lodSwitcher>5__3;

			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Mesh <mesh0>5__4;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Mesh[] <lodMeshes>5__5;

			[Token(Token = "0x4000F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int <i>5__6;

			[Token(Token = "0x4000F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private System.Collections.Hashtable <lodInfo>5__7;

			[Token(Token = "0x170001A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F3A")]
				[Address(RVA = "0xA903A0", Offset = "0xA903A0", VA = "0xA903A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F3C")]
				[Address(RVA = "0xA903E8", Offset = "0xA903E8", VA = "0xA903E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F37")]
			[Address(RVA = "0xA8EFD4", Offset = "0xA8EFD4", VA = "0xA8EFD4")]
			[DebuggerHidden]
			public <SetUpLODLevelsWithLODSwitcherInBackground>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6000F38")]
			[Address(RVA = "0xA8EFFC", Offset = "0xA8EFFC", VA = "0xA8EFFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F39")]
			[Address(RVA = "0xA8F000", Offset = "0xA8F000", VA = "0xA8F000", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F3B")]
			[Address(RVA = "0xA903A8", Offset = "0xA903A8", VA = "0xA903A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000306")]
		[CompilerGenerated]
		private sealed class <GetSimplifiedMeshInBackground>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject go;

			[Token(Token = "0x4000F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float maxWeight;

			[Token(Token = "0x4000F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float removeSmallParts;

			[Token(Token = "0x4000F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action<Mesh> result;

			[Token(Token = "0x4000F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool recalcNormals;

			[Token(Token = "0x4000F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private System.Collections.Hashtable <lodInfo>5__2;

			[Token(Token = "0x170001A5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F40")]
				[Address(RVA = "0xA91250", Offset = "0xA91250", VA = "0xA91250", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F42")]
				[Address(RVA = "0xA91298", Offset = "0xA91298", VA = "0xA91298", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F3D")]
			[Address(RVA = "0xA903F0", Offset = "0xA903F0", VA = "0xA903F0")]
			[DebuggerHidden]
			public <GetSimplifiedMeshInBackground>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x6000F3E")]
			[Address(RVA = "0xA90418", Offset = "0xA90418", VA = "0xA90418", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F3F")]
			[Address(RVA = "0xA9041C", Offset = "0xA9041C", VA = "0xA9041C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F41")]
			[Address(RVA = "0xA91258", Offset = "0xA91258", VA = "0xA91258", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xA827B0", Offset = "0xA827B0", VA = "0xA827B0")]
		public static Bounds GetWorldBounds(this GameObject go)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xA859C4", Offset = "0xA859C4", VA = "0xA859C4")]
		public static Vector3[] GetBoundsCorners(this Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xA85AD8", Offset = "0xA85AD8", VA = "0xA85AD8")]
		public static Vector3[] GetBoundsCenterAndCorners(this Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xA85C08", Offset = "0xA85C08", VA = "0xA85C08")]
		public static Vector3[] GetWorldBoundsCorners(this GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xA85C2C", Offset = "0xA85C2C", VA = "0xA85C2C")]
		public static Vector3[] GetWorldBoundsCenterAndCorners(this GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xA85C50", Offset = "0xA85C50", VA = "0xA85C50")]
		public static float GetModelComplexity(this GameObject go)
		{
			return default(float);
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xA85DA0", Offset = "0xA85DA0", VA = "0xA85DA0")]
		public static string GetModelInfoString(this GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xA86040", Offset = "0xA86040", VA = "0xA86040")]
		public static GameObject TopParent(this GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xA860EC", Offset = "0xA860EC", VA = "0xA860EC")]
		public static GameObject FindParentWithName(this GameObject go, string parentName)
		{
			return null;
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xA861BC", Offset = "0xA861BC", VA = "0xA861BC")]
		public static GameObject FindMutualParent(this GameObject go1, GameObject go2)
		{
			return null;
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xA86344", Offset = "0xA86344", VA = "0xA86344")]
		public static GameObject FindFirstChildWithName(this GameObject go, string childName)
		{
			return null;
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xA86458", Offset = "0xA86458", VA = "0xA86458")]
		public static bool IsChildWithNameUnique(this GameObject go, string childName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xA8647C", Offset = "0xA8647C", VA = "0xA8647C")]
		public static void CountChildrenWithName(this GameObject go, string childName, ref int total)
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xA86798", Offset = "0xA86798", VA = "0xA86798")]
		public static GameObject GetGameObjectNamed(this GameObject go, string aStr, GameObject parentGO)
		{
			return null;
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xA8688C", Offset = "0xA8688C", VA = "0xA8688C")]
		public static void DestroyChildren(this GameObject go, bool disabledOnly)
		{
		}

		[Token(Token = "0x6000F1E")]
		public static T GetFirstComponentInParents<T>(this GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F1F")]
		public static T GetFirstComponentInChildren<T>(this GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xA86D1C", Offset = "0xA86D1C", VA = "0xA86D1C")]
		public static Mesh[] GetMeshes(this GameObject aGo)
		{
			return null;
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xA86D24", Offset = "0xA86D24", VA = "0xA86D24")]
		public static Mesh[] GetMeshes(this GameObject aGo, bool includeDisabled)
		{
			return null;
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xA86F24", Offset = "0xA86F24", VA = "0xA86F24")]
		public static int GetTotalVertexCount(this GameObject aGo)
		{
			return default(int);
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xA870E4", Offset = "0xA870E4", VA = "0xA870E4")]
		public static Mesh Get1stSharedMesh(this GameObject aGo)
		{
			return null;
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xA872C4", Offset = "0xA872C4", VA = "0xA872C4")]
		public static void SetMeshes(this GameObject aGo, Mesh[] meshes)
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xA87780", Offset = "0xA87780", VA = "0xA87780")]
		public static void SetMeshes(this GameObject aGo, Mesh[] meshes, int lodLevel)
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xA872D0", Offset = "0xA872D0", VA = "0xA872D0")]
		public static void SetMeshes(this GameObject aGo, Mesh[] meshes, bool includeDisabled, int lodLevel)
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xA8778C", Offset = "0xA8778C", VA = "0xA8778C")]
		public static Material[] GetMaterials(this GameObject aGo, bool includeDisabled)
		{
			return null;
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xA87938", Offset = "0xA87938", VA = "0xA87938")]
		public static Mesh[] CombineMeshes(this GameObject aGO)
		{
			return null;
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xA8798C", Offset = "0xA8798C", VA = "0xA8798C")]
		public static Mesh[] CombineMeshes(this GameObject aGO, string[] skipSubmeshNames)
		{
			return null;
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xA8B924", Offset = "0xA8B924", VA = "0xA8B924")]
		private static int GiveUniqueNameIfNeeded(GameObject aGo, GameObject topGO, int uniqueId)
		{
			return default(int);
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xA8B9F8", Offset = "0xA8B9F8", VA = "0xA8B9F8")]
		public static void SetUpLODLevels(this GameObject go)
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xA8BA00", Offset = "0xA8BA00", VA = "0xA8BA00")]
		public static void SetUpLODLevels(this GameObject go, float maxWeight)
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xA8BAE0", Offset = "0xA8BAE0", VA = "0xA8BAE0")]
		public static void SetUpLODLevels(this GameObject go, float[] lodScreenSizes, float[] maxWeights)
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xA8BBC8", Offset = "0xA8BBC8", VA = "0xA8BBC8")]
		public static Mesh[] SetUpLODLevelsWithLODSwitcher(this GameObject go, float[] lodScreenSizes, float[] maxWeights, bool recalcNormals, float removeSmallParts = 1f, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f, int nrOfSteps = 1)
		{
			return null;
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xA8C06C", Offset = "0xA8C06C", VA = "0xA8C06C")]
		[IteratorStateMachine(typeof(<SetUpLODLevelsWithLODSwitcherInBackground>d__32))]
		public static IEnumerator SetUpLODLevelsWithLODSwitcherInBackground(this GameObject go, float[] lodScreenSizes, float[] maxWeights, bool recalcNormals, float removeSmallParts = 1f, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f)
		{
			return null;
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xA8C134", Offset = "0xA8C134", VA = "0xA8C134")]
		public static Mesh[] SetUpLODLevelsAndChildrenWithLODSwitcher(this GameObject go, float[] lodScreenSizes, float[] maxWeights, bool recalcNormals, float removeSmallParts, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f, int nrOfSteps = 1)
		{
			return null;
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xA8CBF4", Offset = "0xA8CBF4", VA = "0xA8CBF4")]
		public static Mesh[] SetUpLODLevelsAndChildrenWithLODGroup(this GameObject go, float[] relativeTransitionHeights, float[] maxWeights, bool recalcNormals, float removeSmallParts, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f, int nrOfSteps = 1)
		{
			return null;
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xA8D98C", Offset = "0xA8D98C", VA = "0xA8D98C")]
		public static Mesh GetSimplifiedMesh(this GameObject go, float maxWeight, bool recalcNormals, float removeSmallParts, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f, int nrOfSteps = 1)
		{
			return null;
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xA8DCBC", Offset = "0xA8DCBC", VA = "0xA8DCBC")]
		[IteratorStateMachine(typeof(<GetSimplifiedMeshInBackground>d__36))]
		public static IEnumerator GetSimplifiedMeshInBackground(this GameObject go, float maxWeight, bool recalcNormals, float removeSmallParts, Action<Mesh> result)
		{
			return null;
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xA89CF8", Offset = "0xA89CF8", VA = "0xA89CF8")]
		private static bool MergeMeshInto(Mesh fromMesh, Transform[] fromBones, Material[] fromMaterials, List<Vector3> vertices, List<Vector3> normals, List<Vector2> uv1s, List<Vector2> uv2s, List<Vector2> uv3s, List<Vector2> uv4s, List<Color32> colors32, List<BoneWeight> boneWeights, List<Transform> bones, List<Matrix4x4> bindposes, Dictionary<Material, List<int>> subMeshes, bool usesNegativeScale, Vector4 lightmapScaleOffset, Transform fromTransform, Transform topTransform, string submeshName, string[] skipSubmeshNames)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xA8DD6C", Offset = "0xA8DD6C", VA = "0xA8DD6C")]
		private static Vector3 ApplyBindPose(Vector3 vertex, Transform bone, Matrix4x4 bindpose, float boneWeight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xA8DE88", Offset = "0xA8DE88", VA = "0xA8DE88")]
		private static Vector3 UnApplyBindPose(Vector3 vertex, Transform bone, Matrix4x4 bindpose, float boneWeight)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000307")]
	public static class MeshExtensions
	{
		[Token(Token = "0x2000308")]
		[CompilerGenerated]
		private sealed class <MakeLODMeshInBackground>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float maxWeight;

			[Token(Token = "0x4000F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float removeSmallParts;

			[Token(Token = "0x4000F28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Mesh mesh;

			[Token(Token = "0x4000F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action<Mesh> result;

			[Token(Token = "0x4000F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool recalcNormals;

			[Token(Token = "0x4000F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private System.Collections.Hashtable <lodInfo>5__2;

			[Token(Token = "0x170001A7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F5A")]
				[Address(RVA = "0xA956D8", Offset = "0xA956D8", VA = "0xA956D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F5C")]
				[Address(RVA = "0xA95720", Offset = "0xA95720", VA = "0xA95720", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F57")]
			[Address(RVA = "0xA91B84", Offset = "0xA91B84", VA = "0xA91B84")]
			[DebuggerHidden]
			public <MakeLODMeshInBackground>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000F58")]
			[Address(RVA = "0xA949F8", Offset = "0xA949F8", VA = "0xA949F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F59")]
			[Address(RVA = "0xA949FC", Offset = "0xA949FC", VA = "0xA949FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0xA956E0", Offset = "0xA956E0", VA = "0xA956E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xA912A0", Offset = "0xA912A0", VA = "0xA912A0")]
		public static void RecalculateTangents(this Mesh mesh)
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xA91780", Offset = "0xA91780", VA = "0xA91780")]
		public static Mesh ScaledRotatedTranslatedMesh(this Mesh mesh, Vector3 scale, Quaternion rotate, Vector3 translate)
		{
			return null;
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xA91A2C", Offset = "0xA91A2C", VA = "0xA91A2C")]
		public static bool IsSkinnedMesh(this Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xA91A88", Offset = "0xA91A88", VA = "0xA91A88")]
		public static int GetTriangleCount(this Mesh orig)
		{
			return default(int);
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xA91AC4", Offset = "0xA91AC4", VA = "0xA91AC4")]
		public static Mesh MakeLODMesh(this Mesh orig, float aMaxWeight, bool recalcNormals, float removeSmallParts = 1f, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f)
		{
			return null;
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xA91AD4", Offset = "0xA91AD4", VA = "0xA91AD4")]
		[IteratorStateMachine(typeof(<MakeLODMeshInBackground>d__5))]
		public static IEnumerator MakeLODMeshInBackground(this Mesh mesh, float maxWeight, bool recalcNormals, float removeSmallParts, Action<Mesh> result)
		{
			return null;
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xA91BAC", Offset = "0xA91BAC", VA = "0xA91BAC")]
		public static Mesh[] MakeLODMeshes(this Mesh mesh, float[] maxWeights, bool recalcNormals, float removeSmallParts = 1f, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f, int nrOfSteps = 1)
		{
			return null;
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xA91DAC", Offset = "0xA91DAC", VA = "0xA91DAC")]
		public static Vector4 GetUvRange(this Mesh mesh)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xA91E4C", Offset = "0xA91E4C", VA = "0xA91E4C")]
		public static bool CheckUvsWithin01Range(this Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xA91ED8", Offset = "0xA91ED8", VA = "0xA91ED8")]
		public static void ClampUvs(this Mesh mesh)
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xA91F68", Offset = "0xA91F68", VA = "0xA91F68")]
		public static void WrapUvs(this Mesh mesh)
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xA92024", Offset = "0xA92024", VA = "0xA92024")]
		public static void SetAtlasRectForSubmesh(this Mesh mesh, Rect atlasRect, int submeshIndex)
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xA9233C", Offset = "0xA9233C", VA = "0xA9233C")]
		public static void MergeSubmeshInto(this Mesh mesh, int from, int to)
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xA925E8", Offset = "0xA925E8", VA = "0xA925E8")]
		public static Mesh CopyAndRemoveSubmeshes(this Mesh orig, int[] submeshesToRemove)
		{
			return null;
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xA92E90", Offset = "0xA92E90", VA = "0xA92E90")]
		public static Mesh CopyAndRemoveHiddenTriangles(this Mesh orig, int subMeshIdx, Matrix4x4 localToWorldMatrix, Mesh[] hidingMeshes, int[] hidingSubMeshes, Matrix4x4[] hidingLocalToWorldMatrices, float maxRemoveDistance = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xA93FD8", Offset = "0xA93FD8", VA = "0xA93FD8")]
		private static bool IsTriangleHidden(Vector3 v0, Vector3 v1, Vector3 v2, float maxDistance, List<Vector3> triMinCorners, List<Vector3> triMaxCorners, List<Vector3> hidingVs, List<int> hidingTs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xA94508", Offset = "0xA94508", VA = "0xA94508")]
		private static bool IsHidden(Vector3 v, Vector3 n, float maxDistance, List<Vector3> hidingVs, List<int> hidingTs, List<int> trianglesToCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xA942C8", Offset = "0xA942C8", VA = "0xA942C8")]
		private static List<int> GetTrianglesWithinRange(Vector3 v0, Vector3 v1, Vector3 v2, float maxDistance, List<Vector3> triMinCorners, List<Vector3> triMaxCorners)
		{
			return null;
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xA94884", Offset = "0xA94884", VA = "0xA94884")]
		public static float DistanceToPlane(Vector3 fromPos, Vector3 direction, Vector3 pointOnPlane, Vector3 normalPlane)
		{
			return default(float);
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xA941B0", Offset = "0xA941B0", VA = "0xA941B0")]
		public static Vector3 GetNormal(Vector3 v0, Vector3 v1, Vector3 v2)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000309")]
	public static class RectExtensions
	{
		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xA95728", Offset = "0xA95728", VA = "0xA95728")]
		public static bool MouseInRect(this Rect rect, Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xA9575C", Offset = "0xA9575C", VA = "0xA9575C")]
		public static bool MouseInRect(this Rect rect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xA957D4", Offset = "0xA957D4", VA = "0xA957D4")]
		public static bool MouseInRect(this Rect rect, Rect parentRect, Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xA95884", Offset = "0xA95884", VA = "0xA95884")]
		public static bool MouseInRect(this Rect rect, Rect parentRect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xA9591C", Offset = "0xA9591C", VA = "0xA9591C")]
		public static bool MouseInRect(this Rect rect, Rect parentRect1, Rect parentRect2, Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xA95A2C", Offset = "0xA95A2C", VA = "0xA95A2C")]
		public static bool MouseInRect(this Rect rect, Rect parentRect1, Rect parentRect2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xA95AD4", Offset = "0xA95AD4", VA = "0xA95AD4")]
		public static Vector2 RelativeMousePosInRect(this Rect rect, Vector2 point)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xA95BA4", Offset = "0xA95BA4", VA = "0xA95BA4")]
		public static Vector2 RelativeMousePosInRect(this Rect rect)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xA95C0C", Offset = "0xA95C0C", VA = "0xA95C0C")]
		public static Rect RelativeRectInImage(this Rect r, Texture2D img)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xA95D3C", Offset = "0xA95D3C", VA = "0xA95D3C")]
		public static float MaxExtents(this Bounds b)
		{
			return default(float);
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xA95D88", Offset = "0xA95D88", VA = "0xA95D88")]
		public static float MaxSize(this Bounds b)
		{
			return default(float);
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xA95DD4", Offset = "0xA95DD4", VA = "0xA95DD4")]
		public static float MinExtents(this Bounds b)
		{
			return default(float);
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xA95E20", Offset = "0xA95E20", VA = "0xA95E20")]
		public static float MinSize(this Bounds b)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200030A")]
	public static class Texture2DExtensions
	{
		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xA95E6C", Offset = "0xA95E6C", VA = "0xA95E6C")]
		public static Texture2D GetCopy(this Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xA95FE4", Offset = "0xA95FE4", VA = "0xA95FE4")]
		public static Texture2D GetCopy(this Texture2D tex, int x, int y, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xA96040", Offset = "0xA96040", VA = "0xA96040")]
		public static Texture2D GetSection(this Texture2D tex, int x, int y, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xA95ED8", Offset = "0xA95ED8", VA = "0xA95ED8")]
		public static Texture2D GetCopy(this Texture2D tex, int x, int y, int w, int h, bool mipMaps)
		{
			return null;
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xA96124", Offset = "0xA96124", VA = "0xA96124")]
		public static Texture2D ScaledCopy(this Texture2D tex, int width, int height, bool mipMaps)
		{
			return null;
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xA966C4", Offset = "0xA966C4", VA = "0xA966C4")]
		public static void CopyFrom(this Texture2D tex, Texture2D fromTex, int toX, int toY, int fromX, int fromY, int width, int height)
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xA96938", Offset = "0xA96938", VA = "0xA96938")]
		public static void Scale(this Texture2D tex, int width, int height)
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xA9683C", Offset = "0xA9683C", VA = "0xA9683C")]
		public static void MakeFormatWritable(this Texture2D tex)
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xA9609C", Offset = "0xA9609C", VA = "0xA9609C")]
		public static TextureFormat GetWritableFormat(TextureFormat format)
		{
			return default(TextureFormat);
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xA96A88", Offset = "0xA96A88", VA = "0xA96A88")]
		public static Color GetAverageColor(this Texture2D tex)
		{
			return default(Color);
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xA96B78", Offset = "0xA96B78", VA = "0xA96B78")]
		public static Color GetAverageColor(this Texture2D tex, Color useThisColorForAlpha)
		{
			return default(Color);
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xA96CA4", Offset = "0xA96CA4", VA = "0xA96CA4")]
		public static bool IsReadable(this Texture2D tex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xA96D5C", Offset = "0xA96D5C", VA = "0xA96D5C")]
		public static bool HasTransparency(this Texture2D tex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xA962E8", Offset = "0xA962E8", VA = "0xA962E8")]
		private static Color[] ScaledPixels(Color[] originalPixels, int oldWidth, int oldHeight, int width, int height)
		{
			return null;
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xA96E74", Offset = "0xA96E74", VA = "0xA96E74")]
		public static Texture2D GetUnityNormalMap(this Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xA97088", Offset = "0xA97088", VA = "0xA97088")]
		public static Texture2D FromUnityNormalMap(this Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xA972B0", Offset = "0xA972B0", VA = "0xA972B0")]
		public static void Fill(this Texture2D tex, Color aColor)
		{
		}
	}
	[Token(Token = "0x200030B")]
	public static class TransformExtensions
	{
		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xA97374", Offset = "0xA97374", VA = "0xA97374")]
		public static bool IsPartOf(this Transform trans, Transform aTransform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xA97480", Offset = "0xA97480", VA = "0xA97480")]
		public static Transform FindFirstChildWithName(this Transform trans, string childName)
		{
			return null;
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xA977E0", Offset = "0xA977E0", VA = "0xA977E0")]
		public static Transform FindFirstChildWhereNameContains(this Transform trans, string childName)
		{
			return null;
		}

		[Token(Token = "0x6000F7E")]
		public static T GetFirstComponentInParents<T>(this Transform trans) where T : MonoBehaviour
		{
			return null;
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xA97B44", Offset = "0xA97B44", VA = "0xA97B44")]
		public static Vector3 PointToWorldSpace(this Transform trans, Vector3 p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xA97B58", Offset = "0xA97B58", VA = "0xA97B58")]
		public static Vector3 PointToLocalSpace(this Transform trans, Vector3 p)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200030C")]
	public static class Vector3Extensions
	{
		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xA97B6C", Offset = "0xA97B6C", VA = "0xA97B6C")]
		public static string MakeString(this Vector3 v)
		{
			return null;
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xA97E24", Offset = "0xA97E24", VA = "0xA97E24")]
		public static string MakeString(this Vector3 v, int decimals)
		{
			return null;
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xA98554", Offset = "0xA98554", VA = "0xA98554")]
		public static Vector3 Product(this Vector3 v1, Vector3 v2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xA98564", Offset = "0xA98564", VA = "0xA98564")]
		public static float Sum(this Vector3 v1)
		{
			return default(float);
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xA949E0", Offset = "0xA949E0", VA = "0xA949E0")]
		public static float InProduct(this Vector3 v1, Vector3 v2)
		{
			return default(float);
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xA98570", Offset = "0xA98570", VA = "0xA98570")]
		public static Vector3 Abs(this Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xA98580", Offset = "0xA98580", VA = "0xA98580")]
		public static Vector3 VectorMax(this Vector3 v1, Vector3 v2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xA9859C", Offset = "0xA9859C", VA = "0xA9859C")]
		public static bool IsEqual(this Vector3 v1, Vector3 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xA985C4", Offset = "0xA985C4", VA = "0xA985C4")]
		public static bool DiffBetween(this Vector3 v1, Vector3 v2, float from, float to)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xA98610", Offset = "0xA98610", VA = "0xA98610")]
		public static bool IsDiffSmallEnough(this Vector3 v1, Vector3 v2, float maxDiff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xA98660", Offset = "0xA98660", VA = "0xA98660")]
		public static bool IsAllSmaller(this Vector3 v1, Vector3 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xA948E4", Offset = "0xA948E4", VA = "0xA948E4")]
		public static Vector2 Barycentric(this Vector3 p, Vector3 a, Vector3 b, Vector3 c)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xA98688", Offset = "0xA98688", VA = "0xA98688")]
		public static Vector3 To180Angle(this Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xA986E0", Offset = "0xA986E0", VA = "0xA986E0")]
		public static Vector3 To360Angle(this Vector3 v)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200030D")]
	public static class Vector2Extensions
	{
		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xA98738", Offset = "0xA98738", VA = "0xA98738")]
		public static string MakeString(this Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xA98954", Offset = "0xA98954", VA = "0xA98954")]
		public static string MakeString(this Vector2 v, int decimals)
		{
			return null;
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xA98EA8", Offset = "0xA98EA8", VA = "0xA98EA8")]
		public static Vector2 Product(this Vector2 v1, Vector2 v2)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xA98EB4", Offset = "0xA98EB4", VA = "0xA98EB4")]
		public static float InProduct(this Vector2 v1, Vector2 v2)
		{
			return default(float);
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xA98EC4", Offset = "0xA98EC4", VA = "0xA98EC4")]
		public static Vector2 Abs(this Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xA98ED0", Offset = "0xA98ED0", VA = "0xA98ED0")]
		public static bool IsEqual(this Vector2 v1, Vector2 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xA98EE8", Offset = "0xA98EE8", VA = "0xA98EE8")]
		public static bool DiffBetween(this Vector2 v1, Vector2 v2, float from, float to)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xA98F20", Offset = "0xA98F20", VA = "0xA98F20")]
		public static bool IsDiffSmallEnough(this Vector2 v1, Vector2 v2, float maxDiff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xA98F58", Offset = "0xA98F58", VA = "0xA98F58")]
		public static bool IsAllSmaller(this Vector2 v1, Vector2 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xA949B4", Offset = "0xA949B4", VA = "0xA949B4")]
		public static bool IsBarycentricInTriangle(this Vector2 v)
		{
			return default(bool);
		}
	}
}
namespace RandomGenerator
{
	[Token(Token = "0x200030E")]
	public static class RandomNumber
	{
		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly RNGCryptoServiceProvider _generator;

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xA98F70", Offset = "0xA98F70", VA = "0xA98F70")]
		public static int Between(int minimumValue, int maximumValue)
		{
			return default(int);
		}
	}
}
namespace MagicalFX
{
	[Token(Token = "0x200030F")]
	public class FX_Rotation : MonoBehaviour
	{
		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Speed;

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xA99168", Offset = "0xA99168", VA = "0xA99168")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xA9916C", Offset = "0xA9916C", VA = "0xA9916C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xA99198", Offset = "0xA99198", VA = "0xA99198")]
		public FX_Rotation()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput
{
	[Token(Token = "0x2000310")]
	public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axisName;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axisValue;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float responseSpeed;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float returnToCentreSpeed;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AxisTouchButton m_PairedWith;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrossPlatformInputManager.VirtualAxis m_Axis;

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xA991F8", Offset = "0xA991F8", VA = "0xA991F8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xA99480", Offset = "0xA99480", VA = "0xA99480")]
		private void FindPairedButton()
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xA99604", Offset = "0xA99604", VA = "0xA99604")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xA99674", Offset = "0xA99674", VA = "0xA99674", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xA99740", Offset = "0xA99740", VA = "0xA99740", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xA997A4", Offset = "0xA997A4", VA = "0xA997A4")]
		public AxisTouchButton()
		{
		}
	}
	[Token(Token = "0x2000311")]
	public static class CrossPlatformInputManager
	{
		[Token(Token = "0x2000312")]
		public enum ActiveInputMethod
		{
			[Token(Token = "0x4000F38")]
			Hardware,
			[Token(Token = "0x4000F39")]
			Touch
		}

		[Token(Token = "0x2000313")]
		public class VirtualAxis
		{
			[Token(Token = "0x4000F3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private float m_Value;

			[Token(Token = "0x170001AA")]
			public string name
			{
				[Token(Token = "0x6000FBD")]
				[Address(RVA = "0xA9A818", Offset = "0xA9A818", VA = "0xA9A818")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000FBE")]
				[Address(RVA = "0xA9A820", Offset = "0xA9A820", VA = "0xA9A820")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170001AB")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x6000FBF")]
				[Address(RVA = "0xA9A828", Offset = "0xA9A828", VA = "0xA9A828")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000FC0")]
				[Address(RVA = "0xA9A830", Offset = "0xA9A830", VA = "0xA9A830")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170001AC")]
			public float GetValue
			{
				[Token(Token = "0x6000FC5")]
				[Address(RVA = "0xA9A884", Offset = "0xA9A884", VA = "0xA9A884")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170001AD")]
			public float GetValueRaw
			{
				[Token(Token = "0x6000FC6")]
				[Address(RVA = "0xA9A88C", Offset = "0xA9A88C", VA = "0xA9A88C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0xA99374", Offset = "0xA99374", VA = "0xA99374")]
			public VirtualAxis(string name)
			{
			}

			[Token(Token = "0x6000FC2")]
			[Address(RVA = "0xA9A83C", Offset = "0xA9A83C", VA = "0xA9A83C")]
			public VirtualAxis(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0xA9961C", Offset = "0xA9961C", VA = "0xA9961C")]
			public void Remove()
			{
			}

			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0xA9A87C", Offset = "0xA9A87C", VA = "0xA9A87C")]
			public void Update(float value)
			{
			}
		}

		[Token(Token = "0x2000314")]
		public class VirtualButton
		{
			[Token(Token = "0x4000F3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int m_LastPressedFrame;

			[Token(Token = "0x4000F40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_ReleasedFrame;

			[Token(Token = "0x4000F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool m_Pressed;

			[Token(Token = "0x170001AE")]
			public string name
			{
				[Token(Token = "0x6000FC7")]
				[Address(RVA = "0xA9A894", Offset = "0xA9A894", VA = "0xA9A894")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000FC8")]
				[Address(RVA = "0xA9A89C", Offset = "0xA9A89C", VA = "0xA9A89C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170001AF")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x6000FC9")]
				[Address(RVA = "0xA9A8A4", Offset = "0xA9A8A4", VA = "0xA9A8A4")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000FCA")]
				[Address(RVA = "0xA9A8AC", Offset = "0xA9A8AC", VA = "0xA9A8AC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170001B0")]
			public bool GetButton
			{
				[Token(Token = "0x6000FD0")]
				[Address(RVA = "0xA9A9E8", Offset = "0xA9A9E8", VA = "0xA9A9E8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001B1")]
			public bool GetButtonDown
			{
				[Token(Token = "0x6000FD1")]
				[Address(RVA = "0xA9A9F0", Offset = "0xA9A9F0", VA = "0xA9A9F0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001B2")]
			public bool GetButtonUp
			{
				[Token(Token = "0x6000FD2")]
				[Address(RVA = "0xA9AA14", Offset = "0xA9AA14", VA = "0xA9AA14")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000FCB")]
			[Address(RVA = "0xA9A8B8", Offset = "0xA9A8B8", VA = "0xA9A8B8")]
			public VirtualButton(string name)
			{
			}

			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0xA9A8FC", Offset = "0xA9A8FC", VA = "0xA9A8FC")]
			public VirtualButton(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x6000FCD")]
			[Address(RVA = "0xA9A944", Offset = "0xA9A944", VA = "0xA9A944")]
			public void Pressed()
			{
			}

			[Token(Token = "0x6000FCE")]
			[Address(RVA = "0xA9A970", Offset = "0xA9A970", VA = "0xA9A970")]
			public void Released()
			{
			}

			[Token(Token = "0x6000FCF")]
			[Address(RVA = "0xA9A990", Offset = "0xA9A990", VA = "0xA9A990")]
			public void Remove()
			{
			}
		}

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VirtualInput activeInput;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VirtualInput s_TouchInput;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VirtualInput s_HardwareInput;

		[Token(Token = "0x170001A9")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0xA9A644", Offset = "0xA9A644", VA = "0xA9A644")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xA99810", Offset = "0xA99810", VA = "0xA99810")]
		static CrossPlatformInputManager()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xA998E8", Offset = "0xA998E8", VA = "0xA998E8")]
		public static void SwitchActiveInputMethod(ActiveInputMethod activeInputMethod)
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xA9930C", Offset = "0xA9930C", VA = "0xA9930C")]
		public static bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xA999E4", Offset = "0xA999E4", VA = "0xA999E4")]
		public static bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xA993B0", Offset = "0xA993B0", VA = "0xA993B0")]
		public static void RegisterVirtualAxis(VirtualAxis axis)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xA99C3C", Offset = "0xA99C3C", VA = "0xA99C3C")]
		public static void RegisterVirtualButton(VirtualButton button)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0xA99E3C", Offset = "0xA99E3C", VA = "0xA99E3C")]
		public static void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xA99F84", Offset = "0xA99F84", VA = "0xA99F84")]
		public static void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xA99418", Offset = "0xA99418", VA = "0xA99418")]
		public static VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xA9A110", Offset = "0xA9A110", VA = "0xA9A110")]
		public static float GetAxis(string name)
		{
			return default(float);
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xA9A1E8", Offset = "0xA9A1E8", VA = "0xA9A1E8")]
		public static float GetAxisRaw(string name)
		{
			return default(float);
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xA9A168", Offset = "0xA9A168", VA = "0xA9A168")]
		private static float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xA9A240", Offset = "0xA9A240", VA = "0xA9A240")]
		public static bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xA9A2B0", Offset = "0xA9A2B0", VA = "0xA9A2B0")]
		public static bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xA9A320", Offset = "0xA9A320", VA = "0xA9A320")]
		public static bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xA9A390", Offset = "0xA9A390", VA = "0xA9A390")]
		public static void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xA9A400", Offset = "0xA9A400", VA = "0xA9A400")]
		public static void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xA9A470", Offset = "0xA9A470", VA = "0xA9A470")]
		public static void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xA9A4E0", Offset = "0xA9A4E0", VA = "0xA9A4E0")]
		public static void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xA9A550", Offset = "0xA9A550", VA = "0xA9A550")]
		public static void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xA9A5C0", Offset = "0xA9A5C0", VA = "0xA9A5C0")]
		public static void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xA9A6B0", Offset = "0xA9A6B0", VA = "0xA9A6B0")]
		public static void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xA9A728", Offset = "0xA9A728", VA = "0xA9A728")]
		public static void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xA9A7A0", Offset = "0xA9A7A0", VA = "0xA9A7A0")]
		public static void SetVirtualMousePositionZ(float f)
		{
		}
	}
	[Token(Token = "0x2000315")]
	public class InputAxisScrollbar : MonoBehaviour
	{
		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axis;

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xA9AA38", Offset = "0xA9AA38", VA = "0xA9AA38")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xA9AA3C", Offset = "0xA9AA3C", VA = "0xA9AA3C")]
		public void HandleInput(float value)
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xA9AAAC", Offset = "0xA9AAAC", VA = "0xA9AAAC")]
		public InputAxisScrollbar()
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class Joystick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x2000317")]
		public enum AxisOption
		{
			[Token(Token = "0x4000F4D")]
			Both,
			[Token(Token = "0x4000F4E")]
			OnlyHorizontal,
			[Token(Token = "0x4000F4F")]
			OnlyVertical
		}

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int MovementRange;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AxisOption axesToUse;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_StartPos;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_UseX;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_UseY;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xA9AAB4", Offset = "0xA9AAB4", VA = "0xA9AAB4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xA9AC18", Offset = "0xA9AC18", VA = "0xA9AC18")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xA9AC48", Offset = "0xA9AC48", VA = "0xA9AC48")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xA9AAB8", Offset = "0xA9AAB8", VA = "0xA9AAB8")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xA9ACA8", Offset = "0xA9ACA8", VA = "0xA9ACA8", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xA9ADF4", Offset = "0xA9ADF4", VA = "0xA9ADF4", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xA9AE30", Offset = "0xA9AE30", VA = "0xA9AE30", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xA9AE34", Offset = "0xA9AE34", VA = "0xA9AE34")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xA9AE74", Offset = "0xA9AE74", VA = "0xA9AE74")]
		public Joystick()
		{
		}
	}
	[Token(Token = "0x2000318")]
	[ExecuteInEditMode]
	public class MobileControlRig : MonoBehaviour
	{
		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xA9AF00", Offset = "0xA9AF00", VA = "0xA9AF00")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xA9AF10", Offset = "0xA9AF10", VA = "0xA9AF10")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xA9AF08", Offset = "0xA9AF08", VA = "0xA9AF08")]
		private void CheckEnableControlRig()
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xA9B018", Offset = "0xA9B018", VA = "0xA9B018")]
		private void EnableControlRig(bool enabled)
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xA9B390", Offset = "0xA9B390", VA = "0xA9B390")]
		public MobileControlRig()
		{
		}
	}
	[Token(Token = "0x2000319")]
	[RequireComponent(typeof(Image))]
	public class TouchPad : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x200031A")]
		public enum AxisOption
		{
			[Token(Token = "0x4000F63")]
			Both,
			[Token(Token = "0x4000F64")]
			OnlyHorizontal,
			[Token(Token = "0x4000F65")]
			OnlyVertical
		}

		[Token(Token = "0x200031B")]
		public enum ControlStyle
		{
			[Token(Token = "0x4000F67")]
			Absolute,
			[Token(Token = "0x4000F68")]
			Relative,
			[Token(Token = "0x4000F69")]
			Swipe
		}

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisOption axesToUse;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ControlStyle controlStyle;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Xsensitivity;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Ysensitivity;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_StartPos;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 m_PreviousDelta;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_JoytickOutput;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_UseX;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_UseY;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_Dragging;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_Id;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 m_PreviousTouchPos;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Center;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Image m_Image;

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xA9B398", Offset = "0xA9B398", VA = "0xA9B398")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xA9B4FC", Offset = "0xA9B4FC", VA = "0xA9B4FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xA9B39C", Offset = "0xA9B39C", VA = "0xA9B39C")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xA9B584", Offset = "0xA9B584", VA = "0xA9B584")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xA9B684", Offset = "0xA9B684", VA = "0xA9B684", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xA9B6BC", Offset = "0xA9B6BC", VA = "0xA9B6BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xA9B894", Offset = "0xA9B894", VA = "0xA9B894", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xA9B8F4", Offset = "0xA9B8F4", VA = "0xA9B8F4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xA9B9B4", Offset = "0xA9B9B4", VA = "0xA9B9B4")]
		public TouchPad()
		{
		}
	}
	[Token(Token = "0x200031C")]
	public abstract class VirtualInput
	{
		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualAxis> m_VirtualAxes;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualButton> m_VirtualButtons;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<string> m_AlwaysUseVirtual;

		[Token(Token = "0x170001B3")]
		public Vector3 virtualMousePosition
		{
			[Token(Token = "0x6000FED")]
			[Address(RVA = "0xA9BA48", Offset = "0xA9BA48", VA = "0xA9BA48")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0xA9BA54", Offset = "0xA9BA54", VA = "0xA9BA54")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xA9998C", Offset = "0xA9998C", VA = "0xA9998C")]
		public bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xA99A4C", Offset = "0xA99A4C", VA = "0xA99A4C")]
		public bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xA99AA4", Offset = "0xA99AA4", VA = "0xA99AA4")]
		public void RegisterVirtualAxis(CrossPlatformInputManager.VirtualAxis axis)
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xA99CA4", Offset = "0xA99CA4", VA = "0xA99CA4")]
		public void RegisterVirtualButton(CrossPlatformInputManager.VirtualButton button)
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xA99EF4", Offset = "0xA99EF4", VA = "0xA99EF4")]
		public void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xA99FEC", Offset = "0xA99FEC", VA = "0xA99FEC")]
		public void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xA9A07C", Offset = "0xA9A07C", VA = "0xA9A07C")]
		public CrossPlatformInputManager.VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xA9A720", Offset = "0xA9A720", VA = "0xA9A720")]
		public void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xA9A798", Offset = "0xA9A798", VA = "0xA9A798")]
		public void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xA9A810", Offset = "0xA9A810", VA = "0xA9A810")]
		public void SetVirtualMousePositionZ(float f)
		{
		}

		[Token(Token = "0x6000FF9")]
		public abstract float GetAxis(string name, bool raw);

		[Token(Token = "0x6000FFA")]
		public abstract bool GetButton(string name);

		[Token(Token = "0x6000FFB")]
		public abstract bool GetButtonDown(string name);

		[Token(Token = "0x6000FFC")]
		public abstract bool GetButtonUp(string name);

		[Token(Token = "0x6000FFD")]
		public abstract void SetButtonDown(string name);

		[Token(Token = "0x6000FFE")]
		public abstract void SetButtonUp(string name);

		[Token(Token = "0x6000FFF")]
		public abstract void SetAxisPositive(string name);

		[Token(Token = "0x6001000")]
		public abstract void SetAxisNegative(string name);

		[Token(Token = "0x6001001")]
		public abstract void SetAxisZero(string name);

		[Token(Token = "0x6001002")]
		public abstract void SetAxis(string name, float value);

		[Token(Token = "0x6001003")]
		public abstract Vector3 MousePosition();

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xA9BA60", Offset = "0xA9BA60", VA = "0xA9BA60")]
		protected VirtualInput()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput.PlatformSpecific
{
	[Token(Token = "0x200031D")]
	public class MobileInput : VirtualInput
	{
		[Token(Token = "0x6001005")]
		[Address(RVA = "0xA9BB88", Offset = "0xA9BB88", VA = "0xA9BB88")]
		private void AddButton(string name)
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xA9BC38", Offset = "0xA9BC38", VA = "0xA9BC38")]
		private void AddAxes(string name)
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xA9BCE0", Offset = "0xA9BCE0", VA = "0xA9BCE0", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xA9BD78", Offset = "0xA9BD78", VA = "0xA9BD78", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xA9BE2C", Offset = "0xA9BE2C", VA = "0xA9BE2C", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xA9BED4", Offset = "0xA9BED4", VA = "0xA9BED4", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xA9BF70", Offset = "0xA9BF70", VA = "0xA9BF70", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xA9C00C", Offset = "0xA9C00C", VA = "0xA9C00C", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xA9C0A4", Offset = "0xA9C0A4", VA = "0xA9C0A4", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xA9C148", Offset = "0xA9C148", VA = "0xA9C148", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xA9C1F4", Offset = "0xA9C1F4", VA = "0xA9C1F4", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xA9C2A0", Offset = "0xA9C2A0", VA = "0xA9C2A0", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xA9C338", Offset = "0xA9C338", VA = "0xA9C338", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xA998E0", Offset = "0xA998E0", VA = "0xA998E0")]
		public MobileInput()
		{
		}
	}
	[Token(Token = "0x200031E")]
	public class StandaloneInput : VirtualInput
	{
		[Token(Token = "0x6001013")]
		[Address(RVA = "0xA9C344", Offset = "0xA9C344", VA = "0xA9C344", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xA9C358", Offset = "0xA9C358", VA = "0xA9C358", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xA9C364", Offset = "0xA9C364", VA = "0xA9C364", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xA9C370", Offset = "0xA9C370", VA = "0xA9C370", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xA9C37C", Offset = "0xA9C37C", VA = "0xA9C37C", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xA9C3CC", Offset = "0xA9C3CC", VA = "0xA9C3CC", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xA9C41C", Offset = "0xA9C41C", VA = "0xA9C41C", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xA9C46C", Offset = "0xA9C46C", VA = "0xA9C46C", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xA9C4BC", Offset = "0xA9C4BC", VA = "0xA9C4BC", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xA9C50C", Offset = "0xA9C50C", VA = "0xA9C50C", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xA9C55C", Offset = "0xA9C55C", VA = "0xA9C55C", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xA998E4", Offset = "0xA998E4", VA = "0xA998E4")]
		public StandaloneInput()
		{
		}
	}
}
namespace ExitGames.Demos.DemoPunVoice
{
	[Token(Token = "0x200031F")]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(Animator))]
	[RequireComponent(typeof(PhotonView))]
	public abstract class BaseController : MonoBehaviour
	{
		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera ControllerCamera;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Rigidbody rigidBody;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Animator animator;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform camTrans;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float h;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float v;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected float speed;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float cameraDistance;

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xA9C564", Offset = "0xA9C564", VA = "0xA9C564", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xA9C76C", Offset = "0xA9C76C", VA = "0xA9C76C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xA9C890", Offset = "0xA9C890", VA = "0xA9C890", Slot = "6")]
		protected virtual void ChangePOV_CameraChanged(Camera camera)
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xA9C938", Offset = "0xA9C938", VA = "0xA9C938", Slot = "7")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xA9C9C8", Offset = "0xA9C9C8", VA = "0xA9C9C8", Slot = "8")]
		protected virtual void Init()
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xA9CA58", Offset = "0xA9CA58", VA = "0xA9CA58", Slot = "9")]
		protected virtual void SetCamera()
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xA9CB04", Offset = "0xA9CB04", VA = "0xA9CB04", Slot = "10")]
		protected virtual void UpdateAnimator(float h, float v)
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xA9CB7C", Offset = "0xA9CB7C", VA = "0xA9CB7C", Slot = "11")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xA9CC38", Offset = "0xA9CC38", VA = "0xA9CC38", Slot = "12")]
		protected virtual void ShowCamera(Camera camera)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xA9CCC8", Offset = "0xA9CCC8", VA = "0xA9CCC8", Slot = "13")]
		protected virtual void HideCamera(Camera camera)
		{
		}

		[Token(Token = "0x6001029")]
		protected abstract void Move(float h, float v);

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xA9CD58", Offset = "0xA9CD58", VA = "0xA9CD58")]
		protected BaseController()
		{
		}
	}
	[Token(Token = "0x2000320")]
	[RequireComponent(typeof(Toggle))]
	[DisallowMultipleComponent]
	public class BetterToggle : MonoBehaviour
	{
		[Token(Token = "0x2000321")]
		public delegate void OnToggle(Toggle toggle);

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle toggle;

		[Token(Token = "0x14000016")]
		public static event OnToggle ToggleValueChanged
		{
			[Token(Token = "0x600102B")]
			[Address(RVA = "0xA9CD68", Offset = "0xA9CD68", VA = "0xA9CD68")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600102C")]
			[Address(RVA = "0xA9CE20", Offset = "0xA9CE20", VA = "0xA9CE20")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xA9CED8", Offset = "0xA9CED8", VA = "0xA9CED8")]
		private void Start()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xA9CFB4", Offset = "0xA9CFB4", VA = "0xA9CFB4")]
		public void OnToggleValueChanged()
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xA9D020", Offset = "0xA9D020", VA = "0xA9D020")]
		public BetterToggle()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class ChangePOV : MonoBehaviour, IMatchmakingCallbacks
	{
		[Token(Token = "0x2000323")]
		public delegate void OnCameraChanged(Camera newCamera);

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FirstPersonController firstPersonController;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ThirdPersonController thirdPersonController;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OrthographicController orthographicController;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialCameraPosition;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion initialCameraRotation;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Camera defaultCamera;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject ButtonsHolder;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Button FirstPersonCamActivator;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Button ThirdPersonCamActivator;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Button OrthographicCamActivator;

		[Token(Token = "0x14000017")]
		public static event OnCameraChanged CameraChanged
		{
			[Token(Token = "0x6001035")]
			[Address(RVA = "0xA9C6B4", Offset = "0xA9C6B4", VA = "0xA9C6B4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001036")]
			[Address(RVA = "0xA9C7D8", Offset = "0xA9C7D8", VA = "0xA9C7D8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xA9D1A8", Offset = "0xA9D1A8", VA = "0xA9D1A8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xA9D3EC", Offset = "0xA9D3EC", VA = "0xA9D3EC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xA9D54C", Offset = "0xA9D54C", VA = "0xA9D54C")]
		private void Start()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xA9D770", Offset = "0xA9D770", VA = "0xA9D770")]
		private void OnCharacterInstantiated(GameObject character)
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xA9D878", Offset = "0xA9D878", VA = "0xA9D878")]
		private void FirstPersonMode()
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xA9D9FC", Offset = "0xA9D9FC", VA = "0xA9D9FC")]
		private void ThirdPersonMode()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xA9DA04", Offset = "0xA9DA04", VA = "0xA9DA04")]
		private void OrthographicMode()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xA9D880", Offset = "0xA9D880", VA = "0xA9D880")]
		private void ToggleMode(BaseController controller)
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xA9DA0C", Offset = "0xA9DA0C", VA = "0xA9DA0C")]
		private void BroadcastChange(Camera camera)
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xA9DAB0", Offset = "0xA9DAB0", VA = "0xA9DAB0", Slot = "4")]
		public void OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xA9DAB4", Offset = "0xA9DAB4", VA = "0xA9DAB4", Slot = "5")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xA9DAB8", Offset = "0xA9DAB8", VA = "0xA9DAB8", Slot = "6")]
		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0xA9DABC", Offset = "0xA9DABC", VA = "0xA9DABC", Slot = "7")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0xA9DAC0", Offset = "0xA9DAC0", VA = "0xA9DAC0", Slot = "8")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0xA9DAC4", Offset = "0xA9DAC4", VA = "0xA9DAC4", Slot = "9")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xA9DAC8", Offset = "0xA9DAC8", VA = "0xA9DAC8", Slot = "10")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xA9DBDC", Offset = "0xA9DBDC", VA = "0xA9DBDC")]
		public ChangePOV()
		{
		}
	}
	[Token(Token = "0x2000324")]
	public class CharacterInstantiation : MonoBehaviourPunCallbacks, IOnEventCallback
	{
		[Token(Token = "0x2000325")]
		public enum SpawnSequence
		{
			[Token(Token = "0x4000F92")]
			Connection,
			[Token(Token = "0x4000F93")]
			Random,
			[Token(Token = "0x4000F94")]
			RoundRobin
		}

		[Token(Token = "0x2000326")]
		public delegate void OnCharacterInstantiated(GameObject character);

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform SpawnPosition;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float PositionOffset;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] PrefabsToInstantiate;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Transform> SpawnPoints;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool AutoSpawn;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool UseRandomOffset;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public SpawnSequence Sequence;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private byte manualInstantiationEventCode;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected int lastUsedSpawnPointIndex;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool manualInstantiation;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[SerializeField]
		private bool differentPrefabs;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private string localPrefabSuffix;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private string remotePrefabSuffix;

		[Token(Token = "0x14000018")]
		public static event OnCharacterInstantiated CharacterInstantiated
		{
			[Token(Token = "0x600104C")]
			[Address(RVA = "0xA9D334", Offset = "0xA9D334", VA = "0xA9D334")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600104D")]
			[Address(RVA = "0xA9D494", Offset = "0xA9D494", VA = "0xA9D494")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xA9DC24", Offset = "0xA9DC24", VA = "0xA9DC24", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xA9DE38", Offset = "0xA9DE38", VA = "0xA9DE38")]
		private void ManualInstantiation(int index, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xA9E364", Offset = "0xA9E364", VA = "0xA9E364", Slot = "54")]
		public void OnEvent(EventData photonEvent)
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xA9E6C4", Offset = "0xA9E6C4", VA = "0xA9E6C4", Slot = "55")]
		protected virtual void GetSpawnPoint(out Vector3 spawnPos, out Quaternion spawnRot)
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xA9E8DC", Offset = "0xA9E8DC", VA = "0xA9E8DC", Slot = "56")]
		protected virtual Transform GetSpawnPoint()
		{
			return null;
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xA9E9FC", Offset = "0xA9E9FC", VA = "0xA9E9FC")]
		public CharacterInstantiation()
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class FirstPersonController : BaseController
	{
		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private MouseLookHelper mouseLook;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float oldYRotation;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion velRotation;

		[Token(Token = "0x170001B4")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6001058")]
			[Address(RVA = "0xA9EA64", Offset = "0xA9EA64", VA = "0xA9EA64")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xA9EA80", Offset = "0xA9EA80", VA = "0xA9EA80", Slot = "9")]
		protected override void SetCamera()
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xA9EAC4", Offset = "0xA9EAC4", VA = "0xA9EAC4", Slot = "14")]
		protected override void Move(float h, float v)
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xA9EB4C", Offset = "0xA9EB4C", VA = "0xA9EB4C")]
		private void Update()
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xA9EB50", Offset = "0xA9EB50", VA = "0xA9EB50")]
		private void RotateView()
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xA9EC78", Offset = "0xA9EC78", VA = "0xA9EC78")]
		public FirstPersonController()
		{
		}
	}
	[Token(Token = "0x2000328")]
	[RequireComponent(typeof(Canvas))]
	public class Highlighter : MonoBehaviour
	{
		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Canvas canvas;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PhotonVoiceView photonVoiceView;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image recorderSprite;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image speakerSprite;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text bufferLagText;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showSpeakerLag;

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xA9ECF4", Offset = "0xA9ECF4", VA = "0xA9ECF4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xA9EF44", Offset = "0xA9EF44", VA = "0xA9EF44")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xA9F0C0", Offset = "0xA9F0C0", VA = "0xA9F0C0")]
		private void VoiceDemoUI_DebugToggled(bool debugMode)
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xA9F0CC", Offset = "0xA9F0CC", VA = "0xA9F0CC")]
		private void ChangePOV_CameraChanged(Camera camera)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xA9F0E8", Offset = "0xA9F0E8", VA = "0xA9F0E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xA9F218", Offset = "0xA9F218", VA = "0xA9F218")]
		private void Update()
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xA9F378", Offset = "0xA9F378", VA = "0xA9F378")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xA9F490", Offset = "0xA9F490", VA = "0xA9F490")]
		public Highlighter()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class OrthographicController : ThirdPersonController
	{
		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float smoothing;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 offset;

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xA9F498", Offset = "0xA9F498", VA = "0xA9F498", Slot = "8")]
		protected override void Init()
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xA9F4C0", Offset = "0xA9F4C0", VA = "0xA9F4C0", Slot = "9")]
		protected override void SetCamera()
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xA9F530", Offset = "0xA9F530", VA = "0xA9F530", Slot = "14")]
		protected override void Move(float h, float v)
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xA9F6C4", Offset = "0xA9F6C4", VA = "0xA9F6C4")]
		private void CameraFollow()
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xA9F798", Offset = "0xA9F798", VA = "0xA9F798")]
		public OrthographicController()
		{
		}
	}
	[Token(Token = "0x200032A")]
	public class SoundsForJoinAndLeave : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip JoinClip;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip LeaveClip;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource source;

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xA9F7CC", Offset = "0xA9F7CC", VA = "0xA9F7CC", Slot = "42")]
		public override void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xA9F8C8", Offset = "0xA9F8C8", VA = "0xA9F8C8", Slot = "43")]
		public override void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xA9F9C4", Offset = "0xA9F9C4", VA = "0xA9F9C4")]
		public SoundsForJoinAndLeave()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class ThirdPersonController : BaseController
	{
		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float movingTurnSpeed;

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xA9F548", Offset = "0xA9F548", VA = "0xA9F548", Slot = "14")]
		protected override void Move(float h, float v)
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xA9F7B4", Offset = "0xA9F7B4", VA = "0xA9F7B4")]
		public ThirdPersonController()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class VoiceDemoUI : MonoBehaviour
	{
		[Token(Token = "0x200032D")]
		public delegate void OnDebugToggle(bool debugMode);

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text punState;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text voiceState;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PhotonVoiceNetwork punVoiceNetwork;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Canvas canvas;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button punSwitch;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Text punSwitchText;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Button voiceSwitch;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Text voiceSwitchText;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Button calibrateButton;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Text calibrateText;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Text voiceDebugText;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Recorder recorder;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject inGameSettings;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject globalSettings;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Text devicesInfoText;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject debugGO;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool debugMode;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float volumeBeforeMute;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private DebugLevel previousDebugLevel;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private int calibrationMilliSeconds;

		[Token(Token = "0x170001B5")]
		public bool DebugMode
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0xA9F9CC", Offset = "0xA9F9CC", VA = "0xA9F9CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001071")]
			[Address(RVA = "0xA9F9D4", Offset = "0xA9F9D4", VA = "0xA9F9D4")]
			set
			{
			}
		}

		[Token(Token = "0x14000019")]
		public static event OnDebugToggle DebugToggled
		{
			[Token(Token = "0x6001072")]
			[Address(RVA = "0xA9EE8C", Offset = "0xA9EE8C", VA = "0xA9EE8C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001073")]
			[Address(RVA = "0xA9F008", Offset = "0xA9F008", VA = "0xA9F008")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xA9FB04", Offset = "0xA9FB04", VA = "0xA9FB04")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xA9FB68", Offset = "0xA9FB68", VA = "0xA9FB68")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xA9FD6C", Offset = "0xA9FD6C", VA = "0xA9FD6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xA9FF70", Offset = "0xA9FF70", VA = "0xA9FF70")]
		private void CharacterInstantiation_CharacterInstantiated(GameObject character)
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xAA0030", Offset = "0xAA0030", VA = "0xAA0030")]
		private void InitToggles(Toggle[] toggles)
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xAA03B0", Offset = "0xAA03B0", VA = "0xAA03B0")]
		private void BetterToggle_ToggleValueChanged(Toggle toggle)
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xAA0704", Offset = "0xAA0704", VA = "0xAA0704")]
		private void OnCameraChanged(Camera newCamera)
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xAA0720", Offset = "0xAA0720", VA = "0xAA0720")]
		private void Start()
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xAA0D08", Offset = "0xAA0D08", VA = "0xAA0D08")]
		private void PunSwitchOnClick()
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xAA0DD8", Offset = "0xAA0DD8", VA = "0xAA0DD8")]
		private void VoiceSwitchOnClick()
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xAA0E58", Offset = "0xAA0E58", VA = "0xAA0E58")]
		private void CalibrateButtonOnClick()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xAA0EF4", Offset = "0xAA0EF4", VA = "0xAA0EF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xAA1104", Offset = "0xAA1104", VA = "0xAA1104")]
		private void PunClientStateChanged(ClientState fromState, ClientState toState)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xAA16CC", Offset = "0xAA16CC", VA = "0xAA16CC")]
		private void VoiceClientStateChanged(ClientState fromState, ClientState toState)
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xAA1298", Offset = "0xAA1298", VA = "0xAA1298")]
		private void UpdateUiBasedOnVoiceState(ClientState voiceClientState)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xAA16D4", Offset = "0xAA16D4", VA = "0xAA16D4")]
		public VoiceDemoUI()
		{
		}
	}
}
namespace Photon.Voice.Unity.Demos
{
	[Token(Token = "0x200032E")]
	public class BackgroundMusicController : MonoBehaviour
	{
		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text volumeText;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Slider volumeSlider;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioSource audioSource;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float initialVolume;

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xAA1790", Offset = "0xAA1790", VA = "0xAA1790")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xAA18D0", Offset = "0xAA18D0", VA = "0xAA18D0")]
		private void OnVolumeChanged(float newValue)
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xAA199C", Offset = "0xAA199C", VA = "0xAA199C")]
		public BackgroundMusicController()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class SidebarToggle : MonoBehaviour
	{
		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Button sidebarButton;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform panelsHolder;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float sidebarWidth;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool sidebarOpen;

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xAA19AC", Offset = "0xAA19AC", VA = "0xAA19AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xAA1A7C", Offset = "0xAA1A7C", VA = "0xAA1A7C")]
		[ContextMenu("ToggleSidebar")]
		private void ToggleSidebar()
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xAA1A64", Offset = "0xAA1A64", VA = "0xAA1A64")]
		private void ToggleSidebar(bool open)
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xAA1AE0", Offset = "0xAA1AE0", VA = "0xAA1AE0")]
		public SidebarToggle()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public static class UiExtensions
	{
		[Token(Token = "0x600108F")]
		[Address(RVA = "0xAA1A94", Offset = "0xAA1A94", VA = "0xAA1A94")]
		public static void SetPosX(this RectTransform rectTransform, float x)
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xAA1AF8", Offset = "0xAA1AF8", VA = "0xAA1AF8")]
		public static void SetHeight(this RectTransform rectTransform, float h)
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xAA1B10", Offset = "0xAA1B10", VA = "0xAA1B10")]
		public static void SetValue(this Toggle toggle, bool isOn)
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xAA1B28", Offset = "0xAA1B28", VA = "0xAA1B28")]
		public static void SetValue(this Slider slider, float v)
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xAA1B48", Offset = "0xAA1B48", VA = "0xAA1B48")]
		public static void SetValue(this InputField inputField, string v)
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xAA1B5C", Offset = "0xAA1B5C", VA = "0xAA1B5C")]
		public static void DestroyChildren(this Transform transform)
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xAA1CA0", Offset = "0xAA1CA0", VA = "0xAA1CA0")]
		public static void Hide(this CanvasGroup canvasGroup, bool blockRaycasts = false, bool interactable = false)
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xAA1CF0", Offset = "0xAA1CF0", VA = "0xAA1CF0")]
		public static void Show(this CanvasGroup canvasGroup, bool blockRaycasts = true, bool interactable = true)
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xAA1D40", Offset = "0xAA1D40", VA = "0xAA1D40")]
		public static bool IsHidden(this CanvasGroup canvasGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xAA1D64", Offset = "0xAA1D64", VA = "0xAA1D64")]
		public static bool IsShown(this CanvasGroup canvasGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xAA1D88", Offset = "0xAA1D88", VA = "0xAA1D88")]
		public static void SetSingleOnClickCallback(this Button button, UnityAction action)
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xAA1DCC", Offset = "0xAA1DCC", VA = "0xAA1DCC")]
		public static void SetSingleOnValueChangedCallback(this Toggle toggle, UnityAction<bool> action)
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xAA1E38", Offset = "0xAA1E38", VA = "0xAA1E38")]
		public static void SetSingleOnValueChangedCallback(this InputField inputField, UnityAction<string> action)
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xAA1EA4", Offset = "0xAA1EA4", VA = "0xAA1EA4")]
		public static void SetSingleOnEndEditCallback(this InputField inputField, UnityAction<string> action)
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xAA1F10", Offset = "0xAA1F10", VA = "0xAA1F10")]
		public static void SetSingleOnValueChangedCallback(this Dropdown inputField, UnityAction<int> action)
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xAA1864", Offset = "0xAA1864", VA = "0xAA1864")]
		public static void SetSingleOnValueChangedCallback(this Slider slider, UnityAction<float> action)
		{
		}
	}
}
namespace Photon.Voice.Unity.Demos.DemoVoiceUI
{
	[Token(Token = "0x2000331")]
	public class CodecSettingsUI : MonoBehaviour
	{
		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Dropdown frameDurationDropdown;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Dropdown samplingRateDropdown;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InputField bitrateInputField;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Recorder recorder;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<string> frameDurationOptions;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<string> samplingRateOptions;

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xAA1F7C", Offset = "0xAA1F7C", VA = "0xAA1F7C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xAA2280", Offset = "0xAA2280", VA = "0xAA2280")]
		private void Update()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xAA22A0", Offset = "0xAA22A0", VA = "0xAA22A0")]
		private void OnBitrateChanged(string newBitrateString)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xAA2308", Offset = "0xAA2308", VA = "0xAA2308")]
		private void OnFrameDurationChanged(int index)
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xAA2368", Offset = "0xAA2368", VA = "0xAA2368")]
		private void OnSamplingRateChanged(int index)
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xAA213C", Offset = "0xAA213C", VA = "0xAA213C")]
		private void InitFrameDuration()
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xAA21C8", Offset = "0xAA21C8", VA = "0xAA21C8")]
		private void InitSamplingRate()
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xAA2230", Offset = "0xAA2230", VA = "0xAA2230")]
		private void InitBitrate()
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xAA23C8", Offset = "0xAA23C8", VA = "0xAA23C8")]
		public CodecSettingsUI()
		{
		}
	}
	[Token(Token = "0x2000332")]
	[RequireComponent(typeof(VoiceConnection), typeof(ConnectAndJoin))]
	public class DemoVoiceUI : MonoBehaviour, IInRoomCallbacks, IMatchmakingCallbacks
	{
		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text connectionStatusText;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text serverStatusText;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text roomStatusText;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text inputWarningText;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text rttText;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text rttVariationText;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text packetLossWarningText;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private InputField localNicknameText;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Toggle debugEchoToggle;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Toggle reliableTransmissionToggle;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Toggle encryptionToggle;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject webRtcDspGameObject;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Toggle aecToggle;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Toggle aecHighPassToggle;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InputField reverseStreamDelayInputField;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Toggle noiseSuppressionToggle;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Toggle agcToggle;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Slider agcCompressionGainSlider;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Toggle vadToggle;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private Toggle muteToggle;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private Toggle streamAudioClipToggle;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Toggle audioToneToggle;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Toggle dspToggle;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private Toggle highPassToggle;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private Toggle photonVadToggle;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private GameObject microphoneSetupGameObject;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private bool defaultTransmitEnabled;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private int screenWidth;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private int screenHeight;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		private bool fullScreen;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private InputField roomNameInputField;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private InputField globalMinDelaySoftInputField;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private InputField globalMaxDelaySoftInputField;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private InputField globalMaxDelayHardInputField;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private int rttYellowThreshold;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private int rttRedThreshold;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private int rttVariationYellowThreshold;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		private int rttVariationRedThreshold;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private GameObject compressionGainGameObject;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Text compressionGainText;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private GameObject aecOptionsGameObject;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Transform RemoteVoicesPanel;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected VoiceConnection voiceConnection;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private WebRtcAudioDsp voiceAudioPreprocessor;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private ConnectAndJoin connectAndJoin;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private readonly Color warningColor;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private readonly Color okColor;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private readonly Color redColor;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private readonly Color defaultColor;

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xAA2980", Offset = "0xAA2980", VA = "0xAA2980")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xAA36BC", Offset = "0xAA36BC", VA = "0xAA36BC", Slot = "16")]
		protected virtual void SetDefaults()
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xAA36E8", Offset = "0xAA36E8", VA = "0xAA36E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xAA3784", Offset = "0xAA3784", VA = "0xAA3784")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xAA3620", Offset = "0xAA3620", VA = "0xAA3620")]
		private void GetSavedNickname()
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xAA3820", Offset = "0xAA3820", VA = "0xAA3820", Slot = "17")]
		protected virtual void OnSpeakerCreated(Speaker speaker)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xAA3950", Offset = "0xAA3950", VA = "0xAA3950")]
		private void OnRemoteVoiceRemove(Speaker speaker)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xAA39F4", Offset = "0xAA39F4", VA = "0xAA39F4")]
		private void ToggleMute(bool isOn)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xAA3A60", Offset = "0xAA3A60", VA = "0xAA3A60", Slot = "18")]
		protected virtual void ToggleIsRecording(bool isRecording)
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xAA3A90", Offset = "0xAA3A90", VA = "0xAA3A90")]
		private void ToggleDebugEcho(bool isOn)
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xAA3AC0", Offset = "0xAA3AC0", VA = "0xAA3AC0")]
		private void ToggleReliable(bool isOn)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xAA3AF0", Offset = "0xAA3AF0", VA = "0xAA3AF0")]
		private void ToggleEncryption(bool isOn)
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xAA3B20", Offset = "0xAA3B20", VA = "0xAA3B20")]
		private void ToggleAEC(bool isOn)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xAA3B64", Offset = "0xAA3B64", VA = "0xAA3B64")]
		private void ToggleNoiseSuppression(bool isOn)
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xAA3B84", Offset = "0xAA3B84", VA = "0xAA3B84")]
		private void ToggleAGC(bool isOn)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xAA3BC8", Offset = "0xAA3BC8", VA = "0xAA3BC8")]
		private void ToggleVAD(bool isOn)
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xAA3BE8", Offset = "0xAA3BE8", VA = "0xAA3BE8")]
		private void ToggleHighPass(bool isOn)
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xAA3C08", Offset = "0xAA3C08", VA = "0xAA3C08")]
		private void ToggleDsp(bool isOn)
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xAA3C68", Offset = "0xAA3C68", VA = "0xAA3C68")]
		private void ToggleAudioClipStreaming(bool isOn)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xAA3D60", Offset = "0xAA3D60", VA = "0xAA3D60")]
		private void ToggleAudioToneFactory(bool isOn)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xAA3F64", Offset = "0xAA3F64", VA = "0xAA3F64")]
		private void TogglePhotonVAD(bool isOn)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xAA3F94", Offset = "0xAA3F94", VA = "0xAA3F94")]
		private void ToggleAecHighPass(bool isOn)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xAA3FB4", Offset = "0xAA3FB4", VA = "0xAA3FB4")]
		private void OnAgcCompressionGainChanged(float agcCompressionGain)
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xAA4084", Offset = "0xAA4084", VA = "0xAA4084")]
		private void OnGlobalPlaybackDelayMinSoftChanged(string newMinDelaySoftString)
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xAA4154", Offset = "0xAA4154", VA = "0xAA4154")]
		private void OnGlobalPlaybackDelayMaxSoftChanged(string newMaxDelaySoftString)
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xAA4220", Offset = "0xAA4220", VA = "0xAA4220")]
		private void OnGlobalPlaybackDelayMaxHardChanged(string newMaxDelayHardString)
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xAA42EC", Offset = "0xAA42EC", VA = "0xAA42EC")]
		private void OnReverseStreamDelayChanged(string newReverseStreamString)
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xAA4378", Offset = "0xAA4378", VA = "0xAA4378")]
		private void UpdateSyncedNickname(string nickname)
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xAA4420", Offset = "0xAA4420", VA = "0xAA4420")]
		private void JoinOrCreateRoom(string roomName)
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xAA4558", Offset = "0xAA4558", VA = "0xAA4558", Slot = "19")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xAA4AE4", Offset = "0xAA4AE4", VA = "0xAA4AE4")]
		private void SetTextColor(int textValue, Text text, int yellowThreshold, int redThreshold)
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xAA4AAC", Offset = "0xAA4AAC", VA = "0xAA4AAC")]
		private void ResetTextColor(Text text)
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xAA2B34", Offset = "0xAA2B34", VA = "0xAA2B34")]
		private void InitUiCallbacks()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xAA3168", Offset = "0xAA3168", VA = "0xAA3168")]
		private void InitUiValues()
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xAA4B60", Offset = "0xAA4B60", VA = "0xAA4B60")]
		private void SetRoomDebugText()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xAA4E70", Offset = "0xAA4E70", VA = "0xAA4E70", Slot = "20")]
		protected virtual void OnActorPropertiesChanged(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xAA4EE8", Offset = "0xAA4EE8", VA = "0xAA4EE8", Slot = "4")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xAA4EEC", Offset = "0xAA4EEC", VA = "0xAA4EEC", Slot = "5")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xAA4EF0", Offset = "0xAA4EF0", VA = "0xAA4EF0", Slot = "6")]
		private void Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xAA4EF4", Offset = "0xAA4EF4", VA = "0xAA4EF4", Slot = "7")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xAA4F04", Offset = "0xAA4F04", VA = "0xAA4F04", Slot = "8")]
		private void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xAA4F08", Offset = "0xAA4F08", VA = "0xAA4F08", Slot = "9")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xAA4F0C", Offset = "0xAA4F0C", VA = "0xAA4F0C", Slot = "10")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom()
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xAA4F10", Offset = "0xAA4F10", VA = "0xAA4F10", Slot = "11")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xAA4F14", Offset = "0xAA4F14", VA = "0xAA4F14", Slot = "12")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom()
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xAA4F18", Offset = "0xAA4F18", VA = "0xAA4F18", Slot = "13")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xAA4F1C", Offset = "0xAA4F1C", VA = "0xAA4F1C", Slot = "14")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xAA4F20", Offset = "0xAA4F20", VA = "0xAA4F20", Slot = "15")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom()
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xAA4F94", Offset = "0xAA4F94", VA = "0xAA4F94")]
		public DemoVoiceUI()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public struct MicRef
	{
		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Recorder.MicType MicType;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Name;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int PhotonId;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string PhotonIdString;

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xAA50E4", Offset = "0xAA50E4", VA = "0xAA50E4")]
		public MicRef(string name, int id)
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xAA5164", Offset = "0xAA5164", VA = "0xAA5164")]
		public MicRef(string name, string id)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xAA51A4", Offset = "0xAA51A4", VA = "0xAA51A4")]
		public MicRef(string name)
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xAA5220", Offset = "0xAA5220", VA = "0xAA5220", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000335")]
	public class MicrophoneDropdownFiller : MonoBehaviour
	{
		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<MicRef> micOptions;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Dropdown micDropdown;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Recorder recorder;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[FormerlySerializedAs("RefreshButton")]
		[SerializeField]
		private GameObject refreshButton;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[FormerlySerializedAs("ToggleButton")]
		private GameObject toggleButton;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Toggle photonToggle;

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xAA526C", Offset = "0xAA526C", VA = "0xAA526C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xAA52F4", Offset = "0xAA52F4", VA = "0xAA52F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xAA5374", Offset = "0xAA5374", VA = "0xAA5374")]
		private void OnMicrophonePermissionCallback(bool granted)
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xAA538C", Offset = "0xAA538C", VA = "0xAA538C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xAA540C", Offset = "0xAA540C", VA = "0xAA540C")]
		private void SetupMicDropdown()
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xAA5740", Offset = "0xAA5740", VA = "0xAA5740")]
		private void MicDropdownValueChanged(MicRef mic)
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xAA57D4", Offset = "0xAA57D4", VA = "0xAA57D4")]
		private void SetCurrentValue()
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xAA5B70", Offset = "0xAA5B70", VA = "0xAA5B70")]
		public void PhotonMicToggled(bool on)
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xAA52DC", Offset = "0xAA52DC", VA = "0xAA52DC")]
		public void RefreshMicrophones()
		{
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xAA5C04", Offset = "0xAA5C04", VA = "0xAA5C04")]
		private void PhotonVoiceCreated()
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xAA5C1C", Offset = "0xAA5C1C", VA = "0xAA5C1C")]
		public MicrophoneDropdownFiller()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public static class PhotonDemoExtensions
	{
		[Token(Token = "0x4001004")]
		internal const string IS_MUTED_PROPERTY_KEY = "mute";

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xAA5CA4", Offset = "0xAA5CA4", VA = "0xAA5CA4")]
		public static bool Mute(this Player player)
		{
			return default(bool);
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xAA5D98", Offset = "0xAA5D98", VA = "0xAA5D98")]
		public static bool Unmute(this Player player)
		{
			return default(bool);
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xAA5E88", Offset = "0xAA5E88", VA = "0xAA5E88")]
		public static bool IsMuted(this Player player)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000337")]
	[RequireComponent(typeof(Speaker))]
	public class RemoteSpeakerUI : MonoBehaviour, IInRoomCallbacks
	{
		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text nameText;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Image remoteIsMuting;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image remoteIsTalking;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private InputField minDelaySoftInputField;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private InputField maxDelaySoftInputField;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private InputField maxDelayHardInputField;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text bufferLagText;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Speaker speaker;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected VoiceConnection voiceConnection;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected LoadBalancingClient loadBalancingClient;

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xAA5F54", Offset = "0xAA5F54", VA = "0xAA5F54", Slot = "9")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xAA6280", Offset = "0xAA6280", VA = "0xAA6280")]
		private void OnMinDelaySoftChanged(string newMinDelaySoftString)
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xAA6350", Offset = "0xAA6350", VA = "0xAA6350")]
		private void OnMaxDelaySoftChanged(string newMaxDelaySoftString)
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xAA641C", Offset = "0xAA641C", VA = "0xAA641C")]
		private void OnMaxDelayHardChanged(string newMaxDelayHardString)
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xAA64E8", Offset = "0xAA64E8", VA = "0xAA64E8")]
		private void Update()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xAA65C8", Offset = "0xAA65C8", VA = "0xAA65C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xAA6168", Offset = "0xAA6168", VA = "0xAA6168")]
		private void SetNickname()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xAA624C", Offset = "0xAA624C", VA = "0xAA624C")]
		private void SetMutedState()
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xAA65E0", Offset = "0xAA65E0", VA = "0xAA65E0", Slot = "10")]
		protected virtual void SetMutedState(bool isMuted)
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xAA6600", Offset = "0xAA6600", VA = "0xAA6600", Slot = "11")]
		protected virtual void OnActorPropertiesChanged(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xAA664C", Offset = "0xAA664C", VA = "0xAA664C", Slot = "12")]
		public virtual void Init(VoiceConnection vC)
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xAA66AC", Offset = "0xAA66AC", VA = "0xAA66AC", Slot = "4")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xAA66B0", Offset = "0xAA66B0", VA = "0xAA66B0", Slot = "5")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xAA66B4", Offset = "0xAA66B4", VA = "0xAA66B4", Slot = "6")]
		private void Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xAA66B8", Offset = "0xAA66B8", VA = "0xAA66B8", Slot = "7")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xAA66C4", Offset = "0xAA66C4", VA = "0xAA66C4", Slot = "8")]
		private void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xAA66C8", Offset = "0xAA66C8", VA = "0xAA66C8")]
		public RemoteSpeakerUI()
		{
		}
	}
}
namespace Photon.Realtime.Demo
{
	[Token(Token = "0x2000338")]
	public class ConnectAndJoinRandomLb : MonoBehaviour, IConnectionCallbacks, IMatchmakingCallbacks, ILobbyCallbacks
	{
		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AppSettings appSettings;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LoadBalancingClient lbc;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ConnectionHandler ch;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text StateUiText;

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xAA66D0", Offset = "0xAA66D0", VA = "0xAA66D0")]
		public void Start()
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xAA685C", Offset = "0xAA685C", VA = "0xAA685C")]
		public void Update()
		{
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xAA6990", Offset = "0xAA6990", VA = "0xAA6990", Slot = "4")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xAA6994", Offset = "0xAA6994", VA = "0xAA6994", Slot = "5")]
		public void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xAA6A18", Offset = "0xAA6A18", VA = "0xAA6A18", Slot = "6")]
		public void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xAA6B04", Offset = "0xAA6B04", VA = "0xAA6B04", Slot = "8")]
		public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0xAA6B08", Offset = "0xAA6B08", VA = "0xAA6B08", Slot = "9")]
		public void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xAA6B0C", Offset = "0xAA6B0C", VA = "0xAA6B0C", Slot = "7")]
		public void OnRegionListReceived(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xAA6BE8", Offset = "0xAA6BE8", VA = "0xAA6BE8", Slot = "19")]
		public void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xAA6BEC", Offset = "0xAA6BEC", VA = "0xAA6BEC", Slot = "20")]
		public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xAA6BF0", Offset = "0xAA6BF0", VA = "0xAA6BF0", Slot = "17")]
		public void OnJoinedLobby()
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xAA6BF4", Offset = "0xAA6BF4", VA = "0xAA6BF4", Slot = "18")]
		public void OnLeftLobby()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xAA6BF8", Offset = "0xAA6BF8", VA = "0xAA6BF8", Slot = "10")]
		public void OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xAA6BFC", Offset = "0xAA6BFC", VA = "0xAA6BFC", Slot = "11")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xAA6C00", Offset = "0xAA6C00", VA = "0xAA6C00", Slot = "12")]
		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xAA6C04", Offset = "0xAA6C04", VA = "0xAA6C04", Slot = "13")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xAA6C6C", Offset = "0xAA6C6C", VA = "0xAA6C6C", Slot = "14")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xAA6C70", Offset = "0xAA6C70", VA = "0xAA6C70", Slot = "15")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xAA6D24", Offset = "0xAA6D24", VA = "0xAA6D24", Slot = "16")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0xAA6D28", Offset = "0xAA6D28", VA = "0xAA6D28")]
		private void OnRegionPingCompleted(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0xAA6E4C", Offset = "0xAA6E4C", VA = "0xAA6E4C")]
		public ConnectAndJoinRandomLb()
		{
		}
	}
}
namespace Photon.Chat.Demo
{
	[Token(Token = "0x2000339")]
	public static class AppSettingsExtensions
	{
		[Token(Token = "0x6001116")]
		[Address(RVA = "0xAA6EC0", Offset = "0xAA6EC0", VA = "0xAA6EC0")]
		public static ChatAppSettings GetChatSettings(this AppSettings appSettings)
		{
			return null;
		}
	}
	[Token(Token = "0x200033A")]
	public class ChannelSelector : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
	{
		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Channel;

		[Token(Token = "0x6001117")]
		[Address(RVA = "0xAA6FB0", Offset = "0xAA6FB0", VA = "0xAA6FB0")]
		public void SetChannel(string channel)
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xAA7034", Offset = "0xAA7034", VA = "0xAA7034", Slot = "4")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xAA7350", Offset = "0xAA7350", VA = "0xAA7350")]
		public ChannelSelector()
		{
		}
	}
	[Token(Token = "0x200033B")]
	[ExecuteInEditMode]
	public class ChatAppIdCheckerUI : MonoBehaviour
	{
		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text Description;

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xAA7358", Offset = "0xAA7358", VA = "0xAA7358")]
		public void Update()
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xAA7488", Offset = "0xAA7488", VA = "0xAA7488")]
		public ChatAppIdCheckerUI()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public class ChatGui : MonoBehaviour, IChatClientListener
	{
		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] ChannelsToJoinOnConnect;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] FriendsList;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int HistoryLengthToFetch;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string selectedChannelName;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChatClient chatClient;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected internal ChatAppSettings chatAppSettings;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject missingAppIdErrorPanel;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject ConnectingLabel;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RectTransform ChatPanel;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject UserIdFormPanel;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InputField InputFieldChat;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Text CurrentChannelText;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Toggle ChannelToggleToInstantiate;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject FriendListUiItemtoInstantiate;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly Dictionary<string, Toggle> channelToggles;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly Dictionary<string, FriendItem> friendListItemLUT;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool ShowState;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject Title;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Text StateText;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Text UserIdText;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string HelpText;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public int TestLength;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private byte[] testBytes;

		[Token(Token = "0x170001B6")]
		public string UserName
		{
			[Token(Token = "0x600111C")]
			[Address(RVA = "0xAA7490", Offset = "0xAA7490", VA = "0xAA7490")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600111D")]
			[Address(RVA = "0xAA7498", Offset = "0xAA7498", VA = "0xAA7498")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xAA74A0", Offset = "0xAA74A0", VA = "0xAA74A0")]
		public void Start()
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xAA7764", Offset = "0xAA7764", VA = "0xAA7764")]
		public void Connect()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xAA78F8", Offset = "0xAA78F8", VA = "0xAA78F8")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xAA7910", Offset = "0xAA7910", VA = "0xAA7910")]
		public void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xAA7928", Offset = "0xAA7928", VA = "0xAA7928")]
		public void Update()
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xAA79F8", Offset = "0xAA79F8", VA = "0xAA79F8")]
		public void OnEnterSend()
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xAA84F4", Offset = "0xAA84F4", VA = "0xAA84F4")]
		public void OnClickSend()
		{
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xAA7A8C", Offset = "0xAA7A8C", VA = "0xAA7A8C")]
		private void SendChatMessage(string inputLine)
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xAA85A4", Offset = "0xAA85A4", VA = "0xAA85A4")]
		public void PostHelpToCurrentChannel()
		{
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xAA8648", Offset = "0xAA8648", VA = "0xAA8648", Slot = "4")]
		public void DebugReturn(DebugLevel level, string message)
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xAA86F0", Offset = "0xAA86F0", VA = "0xAA86F0", Slot = "6")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xAA8A2C", Offset = "0xAA8A2C", VA = "0xAA8A2C", Slot = "5")]
		public void OnDisconnected()
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xAA8A4C", Offset = "0xAA8A4C", VA = "0xAA8A4C", Slot = "7")]
		public void OnChatStateChange(ChatState state)
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xAA8AE0", Offset = "0xAA8AE0", VA = "0xAA8AE0", Slot = "10")]
		public void OnSubscribed(string[] channels, bool[] results)
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xAA8E30", Offset = "0xAA8E30", VA = "0xAA8E30")]
		public void OnSubscribed(string channel, string[] users, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xAA8C74", Offset = "0xAA8C74", VA = "0xAA8C74")]
		private void InstantiateChannelButton(string channelName)
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xAA88D4", Offset = "0xAA88D4", VA = "0xAA88D4")]
		private void InstantiateFriendButton(string friendId)
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xAA9018", Offset = "0xAA9018", VA = "0xAA9018", Slot = "11")]
		public void OnUnsubscribed(string[] channels)
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xAA945C", Offset = "0xAA945C", VA = "0xAA945C", Slot = "8")]
		public void OnGetMessages(string channelName, string[] senders, object[] messages)
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xAA949C", Offset = "0xAA949C", VA = "0xAA949C", Slot = "9")]
		public void OnPrivateMessage(string sender, object message, string channelName)
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xAA95B0", Offset = "0xAA95B0", VA = "0xAA95B0", Slot = "12")]
		public void OnStatusUpdate(string user, int status, bool gotMessage, object message)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xAA98F0", Offset = "0xAA98F0", VA = "0xAA98F0", Slot = "13")]
		public void OnUserSubscribed(string channel, string user)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xAA9A0C", Offset = "0xAA9A0C", VA = "0xAA9A0C", Slot = "14")]
		public void OnUserUnsubscribed(string channel, string user)
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xAA9B28", Offset = "0xAA9B28", VA = "0xAA9B28")]
		public void OnChannelPropertiesChanged(string channel, string userId, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xAA9CB0", Offset = "0xAA9CB0", VA = "0xAA9CB0")]
		public void OnUserPropertiesChanged(string channel, string targetUserId, string senderUserId, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xAA9E78", Offset = "0xAA9E78", VA = "0xAA9E78")]
		public void OnErrorInfo(string channel, string error, object data)
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xAA9FCC", Offset = "0xAA9FCC", VA = "0xAA9FCC")]
		public void AddMessageToSelectedChannel(string msg)
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xAA70AC", Offset = "0xAA70AC", VA = "0xAA70AC")]
		public void ShowChannel(string channelName)
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xAAA0B8", Offset = "0xAAA0B8", VA = "0xAAA0B8")]
		public void OpenDashboard()
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xAAA0FC", Offset = "0xAAA0FC", VA = "0xAAA0FC")]
		public ChatGui()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class FriendItem : MonoBehaviour
	{
		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text NameLabel;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text StatusLabel;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text Health;

		[Token(Token = "0x170001B7")]
		[HideInInspector]
		public string FriendId
		{
			[Token(Token = "0x600113E")]
			[Address(RVA = "0xAAA280", Offset = "0xAAA280", VA = "0xAAA280")]
			get
			{
				return null;
			}
			[Token(Token = "0x600113D")]
			[Address(RVA = "0xAA8FF4", Offset = "0xAA8FF4", VA = "0xAA8FF4")]
			set
			{
			}
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xAAA2A4", Offset = "0xAAA2A4", VA = "0xAAA2A4")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xAA9770", Offset = "0xAA9770", VA = "0xAA9770")]
		public void OnFriendStatusUpdate(int status, bool gotMessage, object message)
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xAAA308", Offset = "0xAAA308", VA = "0xAAA308")]
		public FriendItem()
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class IgnoreUiRaycastWhenInactive : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x6001142")]
		[Address(RVA = "0xAAA310", Offset = "0xAAA310", VA = "0xAAA310", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xAAA330", Offset = "0xAAA330", VA = "0xAAA330")]
		public IgnoreUiRaycastWhenInactive()
		{
		}
	}
	[Token(Token = "0x200033F")]
	[RequireComponent(typeof(ChatGui))]
	public class NamePickGui : MonoBehaviour
	{
		[Token(Token = "0x4001030")]
		private const string UserNamePlayerPref = "NamePickUserName";

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ChatGui chatNewComponent;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputField idInput;

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xAAA338", Offset = "0xAAA338", VA = "0xAAA338")]
		public void Start()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xAAA404", Offset = "0xAAA404", VA = "0xAAA404")]
		public void EndEditOnEnter()
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xAAA440", Offset = "0xAAA440", VA = "0xAAA440")]
		public void StartChat()
		{
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xAAA524", Offset = "0xAAA524", VA = "0xAAA524")]
		public NamePickGui()
		{
		}
	}
}
namespace Photon.Chat.UtilityScripts
{
	[Token(Token = "0x2000340")]
	public class EventSystemSpawner : MonoBehaviour
	{
		[Token(Token = "0x6001148")]
		[Address(RVA = "0xAAA52C", Offset = "0xAAA52C", VA = "0xAAA52C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xAAA59C", Offset = "0xAAA59C", VA = "0xAAA59C")]
		public EventSystemSpawner()
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class OnStartDelete : MonoBehaviour
	{
		[Token(Token = "0x600114A")]
		[Address(RVA = "0xAAA5A4", Offset = "0xAAA5A4", VA = "0xAAA5A4")]
		private void Start()
		{
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xAAA610", Offset = "0xAAA610", VA = "0xAAA610")]
		public OnStartDelete()
		{
		}
	}
	[Token(Token = "0x2000342")]
	[RequireComponent(typeof(Text))]
	public class TextButtonTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Selectable Selectable;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalColor;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color HoverColor;

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xAAA618", Offset = "0xAAA618", VA = "0xAAA618")]
		public void Awake()
		{
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xAAA670", Offset = "0xAAA670", VA = "0xAAA670")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xAAA6A0", Offset = "0xAAA6A0", VA = "0xAAA6A0")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xAAA6D0", Offset = "0xAAA6D0", VA = "0xAAA6D0", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xAAA780", Offset = "0xAAA780", VA = "0xAAA780", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xAAA830", Offset = "0xAAA830", VA = "0xAAA830")]
		public TextButtonTransition()
		{
		}
	}
	[Token(Token = "0x2000343")]
	[RequireComponent(typeof(Text))]
	public class TextToggleIsOnTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle toggle;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text _text;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalOnColor;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color NormalOffColor;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color HoverOnColor;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color HoverOffColor;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isHover;

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xAAA84C", Offset = "0xAAA84C", VA = "0xAAA84C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xAAA9A0", Offset = "0xAAA9A0", VA = "0xAAA9A0")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xAAA93C", Offset = "0xAAA93C", VA = "0xAAA93C")]
		public void OnValueChanged(bool isOn)
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xAAAA48", Offset = "0xAAAA48", VA = "0xAAAA48", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xAAAABC", Offset = "0xAAAABC", VA = "0xAAAABC", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xAAAB2C", Offset = "0xAAAB2C", VA = "0xAAAB2C")]
		public TextToggleIsOnTransition()
		{
		}
	}
}
namespace OculusRemover
{
	[Token(Token = "0x2000344")]
	internal class Program
	{
		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string path;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool removedFile;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool isWaiting;

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xAAAB50", Offset = "0xAAAB50", VA = "0xAAAB50")]
		private static void Main(string[] args)
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xAAAC00", Offset = "0xAAAC00", VA = "0xAAAC00")]
		public void RemoveOculusDirectory()
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0xAAABA8", Offset = "0xAAABA8", VA = "0xAAABA8")]
		public Program()
		{
		}
	}
}
namespace TriangleNet
{
	[Token(Token = "0x2000345")]
	internal class Behavior
	{
		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool poly;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool quality;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool varArea;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool convex;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool jettison;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool boundaryMarkers;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		private bool noHoles;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		private bool conformDel;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Func<ITriangle, double, bool> usertest;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int noBisect;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double minAngle;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double maxAngle;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double maxArea;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool fixedArea;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		internal bool useSegments;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		internal bool useRegions;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal double goodAngle;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal double maxGoodAngle;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal double offconstant;

		[Token(Token = "0x170001B8")]
		public static bool NoExact
		{
			[Token(Token = "0x600115D")]
			[Address(RVA = "0xAAB17C", Offset = "0xAAB17C", VA = "0xAAB17C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600115E")]
			[Address(RVA = "0xAAB1C4", Offset = "0xAAB1C4", VA = "0xAAB1C4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001B9")]
		public bool Quality
		{
			[Token(Token = "0x600115F")]
			[Address(RVA = "0xAAB210", Offset = "0xAAB210", VA = "0xAAB210")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001160")]
			[Address(RVA = "0xAAB218", Offset = "0xAAB218", VA = "0xAAB218")]
			set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public double MinAngle
		{
			[Token(Token = "0x6001161")]
			[Address(RVA = "0xAAB22C", Offset = "0xAAB22C", VA = "0xAAB22C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001162")]
			[Address(RVA = "0xAAB234", Offset = "0xAAB234", VA = "0xAAB234")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public double MaxAngle
		{
			[Token(Token = "0x6001163")]
			[Address(RVA = "0xAAB23C", Offset = "0xAAB23C", VA = "0xAAB23C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001164")]
			[Address(RVA = "0xAAB244", Offset = "0xAAB244", VA = "0xAAB244")]
			set
			{
			}
		}

		[Token(Token = "0x170001BC")]
		public double MaxArea
		{
			[Token(Token = "0x6001165")]
			[Address(RVA = "0xAAB24C", Offset = "0xAAB24C", VA = "0xAAB24C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001166")]
			[Address(RVA = "0xAAB254", Offset = "0xAAB254", VA = "0xAAB254")]
			set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		public bool VarArea
		{
			[Token(Token = "0x6001167")]
			[Address(RVA = "0xAAB268", Offset = "0xAAB268", VA = "0xAAB268")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001168")]
			[Address(RVA = "0xAAB270", Offset = "0xAAB270", VA = "0xAAB270")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		public bool Poly
		{
			[Token(Token = "0x6001169")]
			[Address(RVA = "0xAAB27C", Offset = "0xAAB27C", VA = "0xAAB27C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600116A")]
			[Address(RVA = "0xAAB284", Offset = "0xAAB284", VA = "0xAAB284")]
			set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public Func<ITriangle, double, bool> UserTest
		{
			[Token(Token = "0x600116B")]
			[Address(RVA = "0xAAB290", Offset = "0xAAB290", VA = "0xAAB290")]
			get
			{
				return null;
			}
			[Token(Token = "0x600116C")]
			[Address(RVA = "0xAAB298", Offset = "0xAAB298", VA = "0xAAB298")]
			set
			{
			}
		}

		[Token(Token = "0x170001C0")]
		public bool Convex
		{
			[Token(Token = "0x600116D")]
			[Address(RVA = "0xAAB2A0", Offset = "0xAAB2A0", VA = "0xAAB2A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600116E")]
			[Address(RVA = "0xAAB2A8", Offset = "0xAAB2A8", VA = "0xAAB2A8")]
			set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public bool ConformingDelaunay
		{
			[Token(Token = "0x600116F")]
			[Address(RVA = "0xAAB2B4", Offset = "0xAAB2B4", VA = "0xAAB2B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001170")]
			[Address(RVA = "0xAAB2BC", Offset = "0xAAB2BC", VA = "0xAAB2BC")]
			set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public int NoBisect
		{
			[Token(Token = "0x6001171")]
			[Address(RVA = "0xAAB2C8", Offset = "0xAAB2C8", VA = "0xAAB2C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001172")]
			[Address(RVA = "0xAAB2D0", Offset = "0xAAB2D0", VA = "0xAAB2D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C3")]
		public bool UseBoundaryMarkers
		{
			[Token(Token = "0x6001173")]
			[Address(RVA = "0xAAB2E0", Offset = "0xAAB2E0", VA = "0xAAB2E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001174")]
			[Address(RVA = "0xAAB2E8", Offset = "0xAAB2E8", VA = "0xAAB2E8")]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public bool NoHoles
		{
			[Token(Token = "0x6001175")]
			[Address(RVA = "0xAAB2F4", Offset = "0xAAB2F4", VA = "0xAAB2F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001176")]
			[Address(RVA = "0xAAB2FC", Offset = "0xAAB2FC", VA = "0xAAB2FC")]
			set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public bool Jettison
		{
			[Token(Token = "0x6001177")]
			[Address(RVA = "0xAAB308", Offset = "0xAAB308", VA = "0xAAB308")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001178")]
			[Address(RVA = "0xAAB310", Offset = "0xAAB310", VA = "0xAAB310")]
			set
			{
			}
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xAAADB8", Offset = "0xAAADB8", VA = "0xAAADB8")]
		public Behavior(bool quality = false, double minAngle = 20.0)
		{
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0xAAAE1C", Offset = "0xAAAE1C", VA = "0xAAAE1C")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class Configuration
	{
		[Token(Token = "0x170001C6")]
		public Func<IPredicates> Predicates
		{
			[Token(Token = "0x600117C")]
			[Address(RVA = "0xAAB5D0", Offset = "0xAAB5D0", VA = "0xAAB5D0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600117D")]
			[Address(RVA = "0xAAB5D8", Offset = "0xAAB5D8", VA = "0xAAB5D8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public Func<TrianglePool> TrianglePool
		{
			[Token(Token = "0x600117E")]
			[Address(RVA = "0xAAB5E0", Offset = "0xAAB5E0", VA = "0xAAB5E0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600117F")]
			[Address(RVA = "0xAAB5E8", Offset = "0xAAB5E8", VA = "0xAAB5E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xAAB31C", Offset = "0xAAB31C", VA = "0xAAB31C")]
		public Configuration()
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xAAB4E0", Offset = "0xAAB4E0", VA = "0xAAB4E0")]
		public Configuration(Func<IPredicates> predicates)
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xAAB49C", Offset = "0xAAB49C", VA = "0xAAB49C")]
		public Configuration(Func<IPredicates> predicates, Func<TrianglePool> trianglePool)
		{
		}
	}
	[Token(Token = "0x2000348")]
	public enum VertexType
	{
		[Token(Token = "0x400105C")]
		InputVertex,
		[Token(Token = "0x400105D")]
		SegmentVertex,
		[Token(Token = "0x400105E")]
		FreeVertex,
		[Token(Token = "0x400105F")]
		DeadVertex,
		[Token(Token = "0x4001060")]
		UndeadVertex
	}
	[Token(Token = "0x2000349")]
	public enum NodeNumbering
	{
		[Token(Token = "0x4001062")]
		None,
		[Token(Token = "0x4001063")]
		Linear,
		[Token(Token = "0x4001064")]
		CuthillMcKee
	}
	[Token(Token = "0x200034A")]
	public enum LocateResult
	{
		[Token(Token = "0x4001066")]
		InTriangle,
		[Token(Token = "0x4001067")]
		OnEdge,
		[Token(Token = "0x4001068")]
		OnVertex,
		[Token(Token = "0x4001069")]
		Outside
	}
	[Token(Token = "0x200034B")]
	internal enum InsertVertexResult
	{
		[Token(Token = "0x400106B")]
		Successful,
		[Token(Token = "0x400106C")]
		Encroaching,
		[Token(Token = "0x400106D")]
		Violating,
		[Token(Token = "0x400106E")]
		Duplicate
	}
	[Token(Token = "0x200034C")]
	internal enum FindDirectionResult
	{
		[Token(Token = "0x4001070")]
		Within,
		[Token(Token = "0x4001071")]
		Leftcollinear,
		[Token(Token = "0x4001072")]
		Rightcollinear
	}
	[Token(Token = "0x200034D")]
	public interface IPredicates
	{
		[Token(Token = "0x6001185")]
		double CounterClockwise(Point a, Point b, Point c);

		[Token(Token = "0x6001186")]
		double InCircle(Point a, Point b, Point c, Point p);

		[Token(Token = "0x6001187")]
		Point FindCircumcenter(Point org, Point dest, Point apex, ref double xi, ref double eta);

		[Token(Token = "0x6001188")]
		Point FindCircumcenter(Point org, Point dest, Point apex, ref double xi, ref double eta, double offconstant);
	}
	[Token(Token = "0x200034E")]
	public sealed class Log : ILog<LogItem>
	{
		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<LogItem> log;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LogLevel level;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Log instance;

		[Token(Token = "0x170001C8")]
		public static bool Verbose
		{
			[Token(Token = "0x6001189")]
			[Address(RVA = "0xAAB770", Offset = "0xAAB770", VA = "0xAAB770")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600118A")]
			[Address(RVA = "0xAAB7C8", Offset = "0xAAB7C8", VA = "0xAAB7C8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public static ILog<LogItem> Instance
		{
			[Token(Token = "0x600118D")]
			[Address(RVA = "0xAAB910", Offset = "0xAAB910", VA = "0xAAB910")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CA")]
		public IList<LogItem> Data
		{
			[Token(Token = "0x6001193")]
			[Address(RVA = "0xAABD68", Offset = "0xAABD68", VA = "0xAABD68", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CB")]
		public LogLevel Level
		{
			[Token(Token = "0x6001194")]
			[Address(RVA = "0xAABD70", Offset = "0xAABD70", VA = "0xAABD70", Slot = "10")]
			get
			{
				return default(LogLevel);
			}
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xAAB824", Offset = "0xAAB824", VA = "0xAAB824")]
		static Log()
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xAAB888", Offset = "0xAAB888", VA = "0xAAB888")]
		private Log()
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xAAB968", Offset = "0xAAB968", VA = "0xAAB968", Slot = "4")]
		public void Add(LogItem item)
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xAABA18", Offset = "0xAABA18", VA = "0xAABA18", Slot = "5")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xAABA88", Offset = "0xAABA88", VA = "0xAABA88", Slot = "6")]
		public void Info(string message)
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xAABB78", Offset = "0xAABB78", VA = "0xAABB78", Slot = "8")]
		public void Warning(string message, string location)
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xAABC70", Offset = "0xAABC70", VA = "0xAABC70", Slot = "7")]
		public void Error(string message, string location)
		{
		}
	}
	[Token(Token = "0x200034F")]
	public class Mesh : IMesh
	{
		[Token(Token = "0x2000350")]
		[CompilerGenerated]
		private sealed class <get_Edges>d__39 : IEnumerable<Edge>, IEnumerable, IEnumerator<Edge>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001096")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001097")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Edge <>2__current;

			[Token(Token = "0x4001098")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001099")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Mesh <>4__this;

			[Token(Token = "0x400109A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private EdgeIterator <e>5__2;

			[Token(Token = "0x170001D6")]
			private Edge System.Collections.Generic.IEnumerator<TriangleNet.Geometry.Edge>.Current
			{
				[Token(Token = "0x60011B9")]
				[Address(RVA = "0xAAFA6C", Offset = "0xAAFA6C", VA = "0xAAFA6C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011BB")]
				[Address(RVA = "0xAAFAB4", Offset = "0xAAFAB4", VA = "0xAAFAB4", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011B6")]
			[Address(RVA = "0xAABEB4", Offset = "0xAABEB4", VA = "0xAABEB4")]
			[DebuggerHidden]
			public <get_Edges>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x60011B7")]
			[Address(RVA = "0xAAF994", Offset = "0xAAF994", VA = "0xAAF994", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011B8")]
			[Address(RVA = "0xAAF998", Offset = "0xAAF998", VA = "0xAAF998", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011BA")]
			[Address(RVA = "0xAAFA74", Offset = "0xAAFA74", VA = "0xAAFA74", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60011BC")]
			[Address(RVA = "0xAAFABC", Offset = "0xAAFABC", VA = "0xAAFABC", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Edge> System.Collections.Generic.IEnumerable<TriangleNet.Geometry.Edge>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60011BD")]
			[Address(RVA = "0xAAFB68", Offset = "0xAAFB68", VA = "0xAAFB68", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ILog<LogItem> logger;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private QualityMesher qualityMesher;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stack<Otri> flipstack;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal TrianglePool triangles;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Dictionary<int, SubSegment> subsegs;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal Dictionary<int, TriangleNet.Geometry.Vertex> vertices;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal int hash_vtx;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal int hash_seg;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal int hash_tri;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal List<Point> holes;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal List<RegionPointer> regions;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal Rectangle bounds;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal int invertices;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal int insegments;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal int undeads;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal int mesh_dim;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal int nextras;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal int hullsize;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal int steinerleft;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		internal bool checksegments;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		internal bool checkquality;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal TriangleNet.Geometry.Vertex infvertex1;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal TriangleNet.Geometry.Vertex infvertex2;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal TriangleNet.Geometry.Vertex infvertex3;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal TriangleLocator locator;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal Behavior behavior;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal NodeNumbering numbering;

		[Token(Token = "0x4001093")]
		internal const int DUMMY = -1;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal Triangle dummytri;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal SubSegment dummysub;

		[Token(Token = "0x170001CC")]
		public Rectangle Bounds
		{
			[Token(Token = "0x6001195")]
			[Address(RVA = "0xAABD78", Offset = "0xAABD78", VA = "0xAABD78", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CD")]
		public ICollection<TriangleNet.Geometry.Vertex> Vertices
		{
			[Token(Token = "0x6001196")]
			[Address(RVA = "0xAABD80", Offset = "0xAABD80", VA = "0xAABD80", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CE")]
		public IList<Point> Holes
		{
			[Token(Token = "0x6001197")]
			[Address(RVA = "0xAABDD0", Offset = "0xAABDD0", VA = "0xAABDD0", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CF")]
		public ICollection<Triangle> Triangles
		{
			[Token(Token = "0x6001198")]
			[Address(RVA = "0xAABDD8", Offset = "0xAABDD8", VA = "0xAABDD8", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D0")]
		public ICollection<SubSegment> Segments
		{
			[Token(Token = "0x6001199")]
			[Address(RVA = "0xAABDE0", Offset = "0xAABDE0", VA = "0xAABDE0", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D1")]
		public IEnumerable<Edge> Edges
		{
			[Token(Token = "0x600119A")]
			[Address(RVA = "0xAABE30", Offset = "0xAABE30", VA = "0xAABE30", Slot = "5")]
			[IteratorStateMachine(typeof(<get_Edges>d__39))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D2")]
		public int NumberOfInputPoints
		{
			[Token(Token = "0x600119B")]
			[Address(RVA = "0xAABEE8", Offset = "0xAABEE8", VA = "0xAABEE8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D3")]
		public int NumberOfEdges
		{
			[Token(Token = "0x600119C")]
			[Address(RVA = "0xAABEF0", Offset = "0xAABEF0", VA = "0xAABEF0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D4")]
		public bool IsPolygon
		{
			[Token(Token = "0x600119D")]
			[Address(RVA = "0xAABF2C", Offset = "0xAABF2C", VA = "0xAABF2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D5")]
		public NodeNumbering CurrentNumbering
		{
			[Token(Token = "0x600119E")]
			[Address(RVA = "0xAABF3C", Offset = "0xAABF3C", VA = "0xAABF3C")]
			get
			{
				return default(NodeNumbering);
			}
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xAABF44", Offset = "0xAABF44", VA = "0xAABF44")]
		private void Initialize()
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xAAC120", Offset = "0xAAC120", VA = "0xAAC120")]
		public Mesh(Configuration config)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xAAC464", Offset = "0xAAC464", VA = "0xAAC464", Slot = "11")]
		public void Refine(QualityOptions quality, bool delaunay = false)
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xAAC620", Offset = "0xAAC620", VA = "0xAAC620", Slot = "10")]
		public void Renumber()
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xAAC628", Offset = "0xAAC628", VA = "0xAAC628")]
		public void Renumber(NodeNumbering num)
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xAACB28", Offset = "0xAACB28", VA = "0xAACB28")]
		internal void SetQualityMesher(QualityMesher qmesher)
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xAACB30", Offset = "0xAACB30", VA = "0xAACB30")]
		internal void CopyTo(Mesh target)
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xAACBC4", Offset = "0xAACBC4", VA = "0xAACBC4")]
		private void ResetData()
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xAAC5B0", Offset = "0xAAC5B0", VA = "0xAAC5B0")]
		private void Reset()
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xAACD00", Offset = "0xAACD00", VA = "0xAACD00")]
		internal void TransferNodes(IList<TriangleNet.Geometry.Vertex> points)
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xAAD300", Offset = "0xAAD300", VA = "0xAAD300")]
		internal void MakeVertexMap()
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xAAD5D8", Offset = "0xAAD5D8", VA = "0xAAD5D8")]
		internal void MakeTriangle(ref Otri newotri)
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xAAD6E0", Offset = "0xAAD6E0", VA = "0xAAD6E0")]
		internal void MakeSegment(ref Osub newsubseg)
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xAAD810", Offset = "0xAAD810", VA = "0xAAD810")]
		internal InsertVertexResult InsertVertex(TriangleNet.Geometry.Vertex newvertex, ref Otri searchtri, ref Osub splitseg, bool segmentflaws, bool triflaws)
		{
			return default(InsertVertexResult);
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xAAE8EC", Offset = "0xAAE8EC", VA = "0xAAE8EC")]
		internal void InsertSubseg(ref Otri tri, int subsegmark)
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xAAEA30", Offset = "0xAAEA30", VA = "0xAAEA30")]
		internal void Flip(ref Otri flipedge)
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xAAED34", Offset = "0xAAED34", VA = "0xAAED34")]
		internal void Unflip(ref Otri flipedge)
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xAAF038", Offset = "0xAAF038", VA = "0xAAF038")]
		private void TriangulatePolygon(Otri firstedge, Otri lastedge, int edgecount, bool doflip, bool triflaws)
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xAAF2C0", Offset = "0xAAF2C0", VA = "0xAAF2C0")]
		internal void DeleteVertex(ref Otri deltri)
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xAAF5D8", Offset = "0xAAF5D8", VA = "0xAAF5D8")]
		internal void UndoVertex()
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xAAF55C", Offset = "0xAAF55C", VA = "0xAAF55C")]
		internal void TriangleDealloc(Triangle dyingtriangle)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xAAF4F8", Offset = "0xAAF4F8", VA = "0xAAF4F8")]
		internal void VertexDealloc(TriangleNet.Geometry.Vertex dyingvertex)
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xAAF92C", Offset = "0xAAF92C", VA = "0xAAF92C")]
		internal void SubsegDealloc(SubSegment dyingsubseg)
		{
		}
	}
	[Token(Token = "0x2000351")]
	public static class MeshValidator
	{
		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RobustPredicates predicates;

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xAAFB6C", Offset = "0xAAFB6C", VA = "0xAAFB6C")]
		public static bool IsConsistent(Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xAB065C", Offset = "0xAB065C", VA = "0xAB065C")]
		public static bool IsDelaunay(Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xAB0F24", Offset = "0xAB0F24", VA = "0xAB0F24")]
		public static bool IsConstrainedDelaunay(Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xAB06B4", Offset = "0xAB06B4", VA = "0xAB06B4")]
		private static bool IsDelaunay(Mesh mesh, bool constrained)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000352")]
	internal class NewLocation
	{
		[Token(Token = "0x400109C")]
		private const double EPS = 1E-50;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Behavior behavior;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double[] petalx;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double[] petaly;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double[] petalr;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double[] wedges;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double[] initialConvexPoly;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private double[] points_p;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private double[] points_q;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private double[] points_r;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private double[] poly1;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private double[] poly2;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private double[][] polys;

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xAB0FFC", Offset = "0xAB0FFC", VA = "0xAB0FFC")]
		public NewLocation(Mesh mesh, IPredicates predicates)
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xAB11DC", Offset = "0xAB11DC", VA = "0xAB11DC")]
		public Point FindLocation(TriangleNet.Geometry.Vertex org, TriangleNet.Geometry.Vertex dest, TriangleNet.Geometry.Vertex apex, ref double xi, ref double eta, bool offcenter, Otri badotri)
		{
			return null;
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xAB121C", Offset = "0xAB121C", VA = "0xAB121C")]
		private Point FindNewLocationWithoutMaxAngle(TriangleNet.Geometry.Vertex torg, TriangleNet.Geometry.Vertex tdest, TriangleNet.Geometry.Vertex tapex, ref double xi, ref double eta, bool offcenter, Otri badotri)
		{
			return null;
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xAB231C", Offset = "0xAB231C", VA = "0xAB231C")]
		private Point FindNewLocation(TriangleNet.Geometry.Vertex torg, TriangleNet.Geometry.Vertex tdest, TriangleNet.Geometry.Vertex tapex, ref double xi, ref double eta, bool offcenter, Otri badotri)
		{
			return null;
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xAB4070", Offset = "0xAB4070", VA = "0xAB4070")]
		private int LongestShortestEdge(double aodist, double dadist, double dodist)
		{
			return default(int);
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xAB40FC", Offset = "0xAB40FC", VA = "0xAB40FC")]
		private int DoSmoothing(Otri badotri, TriangleNet.Geometry.Vertex torg, TriangleNet.Geometry.Vertex tdest, TriangleNet.Geometry.Vertex tapex, ref double[] newloc)
		{
			return default(int);
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xAB535C", Offset = "0xAB535C", VA = "0xAB535C")]
		private int GetStarPoints(Otri badotri, TriangleNet.Geometry.Vertex p, TriangleNet.Geometry.Vertex q, TriangleNet.Geometry.Vertex r, int whichPoint, ref double[] points)
		{
			return default(int);
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xAB4510", Offset = "0xAB4510", VA = "0xAB4510")]
		private bool GetNeighborsVertex(Otri badotri, double first_x, double first_y, double second_x, double second_y, ref double[] thirdpoint, ref Otri neighotri)
		{
			return default(bool);
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xAB57BC", Offset = "0xAB57BC", VA = "0xAB57BC")]
		private bool GetWedgeIntersectionWithoutMaxAngle(int numpoints, double[] points, ref double[] newloc)
		{
			return default(bool);
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xAB6368", Offset = "0xAB6368", VA = "0xAB6368")]
		private bool GetWedgeIntersection(int numpoints, double[] points, ref double[] newloc)
		{
			return default(bool);
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xAB5604", Offset = "0xAB5604", VA = "0xAB5604")]
		private bool ValidPolygonAngles(int numpoints, double[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xAB80F0", Offset = "0xAB80F0", VA = "0xAB80F0")]
		private bool IsBadPolygonAngle(double x1, double y1, double x2, double y2, double x3, double y3)
		{
			return default(bool);
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xAB4EA8", Offset = "0xAB4EA8", VA = "0xAB4EA8")]
		private void LineLineIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, ref double[] p)
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xAB7DC0", Offset = "0xAB7DC0", VA = "0xAB7DC0")]
		private int HalfPlaneIntersection(int numvertices, ref double[] convexPoly, double x1, double y1, double x2, double y2)
		{
			return default(int);
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xAB81F4", Offset = "0xAB81F4", VA = "0xAB81F4")]
		private int SplitConvexPolygon(int numvertices, double[] convexPoly, double x1, double y1, double x2, double y2, double[][] polys)
		{
			return default(int);
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xAB8D10", Offset = "0xAB8D10", VA = "0xAB8D10")]
		private int LinePointLocation(double x1, double y1, double x2, double y2, double x, double y)
		{
			return default(int);
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xAB8B40", Offset = "0xAB8B40", VA = "0xAB8B40")]
		private void LineLineSegmentIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, ref double[] p)
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xAB8040", Offset = "0xAB8040", VA = "0xAB8040")]
		private void FindPolyCentroid(int numpoints, double[] points, ref double[] centroid)
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xAB4998", Offset = "0xAB4998", VA = "0xAB4998")]
		private void CircleLineIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double r, ref double[] p)
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xAB4BEC", Offset = "0xAB4BEC", VA = "0xAB4BEC")]
		private bool ChooseCorrectPoint(double x1, double y1, double x2, double y2, double x3, double y3, bool isObtuse)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xAB4C2C", Offset = "0xAB4C2C", VA = "0xAB4C2C")]
		private void PointBetweenPoints(double x1, double y1, double x2, double y2, double x, double y, ref double[] p)
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xAB4CF0", Offset = "0xAB4CF0", VA = "0xAB4CF0")]
		private bool IsBadTriangleAngle(double x1, double y1, double x2, double y2, double x3, double y3)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xAB5064", Offset = "0xAB5064", VA = "0xAB5064")]
		private double MinDistanceToNeighbor(double newlocX, double newlocY, ref Otri searchtri)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000353")]
	public class RobustPredicates : IPredicates
	{
		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly object creationLock;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static RobustPredicates _default;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static double epsilon;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static double splitter;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static double resulterrbound;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static double ccwerrboundA;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static double ccwerrboundB;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static double ccwerrboundC;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static double iccerrboundA;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static double iccerrboundB;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static double iccerrboundC;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double[] fin1;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double[] fin2;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double[] abdet;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double[] axbc;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double[] axxbc;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double[] aybc;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double[] ayybc;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double[] adet;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private double[] bxca;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private double[] bxxca;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private double[] byca;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private double[] byyca;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private double[] bdet;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private double[] cxab;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private double[] cxxab;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private double[] cyab;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private double[] cyyab;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private double[] cdet;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private double[] temp8;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private double[] temp16a;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private double[] temp16b;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private double[] temp16c;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private double[] temp32a;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private double[] temp32b;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private double[] temp48;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private double[] temp64;

		[Token(Token = "0x170001D8")]
		public static RobustPredicates Default
		{
			[Token(Token = "0x60011DA")]
			[Address(RVA = "0x943BCC", Offset = "0x943BCC", VA = "0x943BCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x943D80", Offset = "0x943D80", VA = "0x943D80")]
		static RobustPredicates()
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x943D64", Offset = "0x943D64", VA = "0x943D64")]
		public RobustPredicates()
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x944210", Offset = "0x944210", VA = "0x944210", Slot = "4")]
		public double CounterClockwise(Point pa, Point pb, Point pc)
		{
			return default(double);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x944B7C", Offset = "0x944B7C", VA = "0x944B7C", Slot = "5")]
		public double InCircle(Point pa, Point pb, Point pc, Point pd)
		{
			return default(double);
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x947B78", Offset = "0x947B78", VA = "0x947B78")]
		public double NonRegular(Point pa, Point pb, Point pc, Point pd)
		{
			return default(double);
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x947B7C", Offset = "0x947B7C", VA = "0x947B7C", Slot = "7")]
		public Point FindCircumcenter(Point org, Point dest, Point apex, ref double xi, ref double eta, double offconstant)
		{
			return null;
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x947EC8", Offset = "0x947EC8", VA = "0x947EC8", Slot = "6")]
		public Point FindCircumcenter(Point org, Point dest, Point apex, ref double xi, ref double eta)
		{
			return null;
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x9480D0", Offset = "0x9480D0", VA = "0x9480D0")]
		private int FastExpansionSumZeroElim(int elen, double[] e, int flen, double[] f, double[] h)
		{
			return default(int);
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x948398", Offset = "0x948398", VA = "0x948398")]
		private int ScaleExpansionZeroElim(int elen, double[] e, double b, double[] h)
		{
			return default(int);
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x9485CC", Offset = "0x9485CC", VA = "0x9485CC")]
		private double Estimate(int elen, double[] e)
		{
			return default(double);
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x9443DC", Offset = "0x9443DC", VA = "0x9443DC")]
		private double CounterClockwiseAdapt(Point pa, Point pb, Point pc, double detsum)
		{
			return default(double);
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x944E24", Offset = "0x944E24", VA = "0x944E24")]
		private double InCircleAdapt(Point pa, Point pb, Point pc, Point pd, double permanent)
		{
			return default(double);
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x943EFC", Offset = "0x943EFC", VA = "0x943EFC")]
		private void AllocateWorkspace()
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x948624", Offset = "0x948624", VA = "0x948624")]
		private void ClearWorkspace()
		{
		}
	}
	[Token(Token = "0x2000354")]
	public class TriangleLocator
	{
		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TriangleSampler sampler;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IPredicates predicates;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Otri recenttri;

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x948628", Offset = "0x948628", VA = "0x948628")]
		public TriangleLocator(Mesh mesh)
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x948694", Offset = "0x948694", VA = "0x948694")]
		public TriangleLocator(Mesh mesh, IPredicates predicates)
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x9487B4", Offset = "0x9487B4", VA = "0x9487B4")]
		public void Update(ref Otri otri)
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x9487C8", Offset = "0x9487C8", VA = "0x9487C8")]
		public void Reset()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x948804", Offset = "0x948804", VA = "0x948804")]
		public LocateResult PreciseLocate(Point searchpoint, ref Otri searchtri, bool stopatsubsegment)
		{
			return default(LocateResult);
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x948B10", Offset = "0x948B10", VA = "0x948B10")]
		public LocateResult Locate(Point searchpoint, ref Otri searchtri)
		{
			return default(LocateResult);
		}
	}
	[Token(Token = "0x2000355")]
	public class TrianglePool : ICollection<Triangle>, IEnumerable<Triangle>, IEnumerable
	{
		[Token(Token = "0x2000356")]
		private class Enumerator : IEnumerator<Triangle>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int count;

			[Token(Token = "0x40010DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Triangle[][] pool;

			[Token(Token = "0x40010DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Triangle current;

			[Token(Token = "0x40010DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int index;

			[Token(Token = "0x40010DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int offset;

			[Token(Token = "0x170001DB")]
			public Triangle Current
			{
				[Token(Token = "0x60011FF")]
				[Address(RVA = "0x949E2C", Offset = "0x949E2C", VA = "0x949E2C", Slot = "4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001201")]
				[Address(RVA = "0x949E38", Offset = "0x949E38", VA = "0x949E38", Slot = "7")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011FE")]
			[Address(RVA = "0x949DDC", Offset = "0x949DDC", VA = "0x949DDC")]
			public Enumerator(TrianglePool pool)
			{
			}

			[Token(Token = "0x6001200")]
			[Address(RVA = "0x949E34", Offset = "0x949E34", VA = "0x949E34", Slot = "5")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001202")]
			[Address(RVA = "0x949E40", Offset = "0x949E40", VA = "0x949E40", Slot = "6")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001203")]
			[Address(RVA = "0x949F00", Offset = "0x949F00", VA = "0x949F00", Slot = "8")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000357")]
		[CompilerGenerated]
		private sealed class <Sample>d__9 : IEnumerable<Triangle>, IEnumerable, IEnumerator<Triangle>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Triangle <>2__current;

			[Token(Token = "0x40010E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40010E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrianglePool <>4__this;

			[Token(Token = "0x40010E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int k;

			[Token(Token = "0x40010E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int <>3__k;

			[Token(Token = "0x40010E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private System.Random random;

			[Token(Token = "0x40010E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public System.Random <>3__random;

			[Token(Token = "0x40010E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <count>5__2;

			[Token(Token = "0x170001DD")]
			private Triangle System.Collections.Generic.IEnumerator<TriangleNet.Topology.Triangle>.Current
			{
				[Token(Token = "0x6001207")]
				[Address(RVA = "0x94A01C", Offset = "0x94A01C", VA = "0x94A01C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001209")]
				[Address(RVA = "0x94A064", Offset = "0x94A064", VA = "0x94A064", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001204")]
			[Address(RVA = "0x949950", Offset = "0x949950", VA = "0x949950")]
			[DebuggerHidden]
			public <Sample>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001205")]
			[Address(RVA = "0x949F08", Offset = "0x949F08", VA = "0x949F08", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001206")]
			[Address(RVA = "0x949F0C", Offset = "0x949F0C", VA = "0x949F0C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001208")]
			[Address(RVA = "0x94A024", Offset = "0x94A024", VA = "0x94A024", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600120A")]
			[Address(RVA = "0x94A06C", Offset = "0x94A06C", VA = "0x94A06C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle> System.Collections.Generic.IEnumerable<TriangleNet.Topology.Triangle>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600120B")]
			[Address(RVA = "0x94A130", Offset = "0x94A130", VA = "0x94A130", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40010D4")]
		private const int BLOCKSIZE = 1024;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int size;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int count;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Triangle[][] pool;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Stack<Triangle> stack;

		[Token(Token = "0x170001D9")]
		public int Count
		{
			[Token(Token = "0x60011F9")]
			[Address(RVA = "0x949D44", Offset = "0x949D44", VA = "0x949D44", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DA")]
		public bool IsReadOnly
		{
			[Token(Token = "0x60011FA")]
			[Address(RVA = "0x949D94", Offset = "0x949D94", VA = "0x949D94", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x9491E0", Offset = "0x9491E0", VA = "0x9491E0")]
		public TrianglePool()
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x949350", Offset = "0x949350", VA = "0x949350")]
		public Triangle Get()
		{
			return null;
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x9496A8", Offset = "0x9496A8", VA = "0x9496A8")]
		public void Release(Triangle triangle)
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x949714", Offset = "0x949714", VA = "0x949714")]
		public TrianglePool Restart()
		{
			return null;
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x9498A8", Offset = "0x9498A8", VA = "0x9498A8")]
		[IteratorStateMachine(typeof(<Sample>d__9))]
		internal IEnumerable<Triangle> Sample(int k, System.Random random)
		{
			return null;
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x9495F4", Offset = "0x9495F4", VA = "0x9495F4")]
		private void Cleanup(Triangle triangle)
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x949984", Offset = "0x949984", VA = "0x949984", Slot = "6")]
		public void Add(Triangle item)
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x9499C4", Offset = "0x9499C4", VA = "0x9499C4", Slot = "7")]
		public void Clear()
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x949ADC", Offset = "0x949ADC", VA = "0x949ADC", Slot = "8")]
		public bool Contains(Triangle item)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x949B5C", Offset = "0x949B5C", VA = "0x949B5C", Slot = "9")]
		public void CopyTo(Triangle[] array, int index)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x949D9C", Offset = "0x949D9C", VA = "0x949D9C", Slot = "10")]
		public bool Remove(Triangle item)
		{
			return default(bool);
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x949CE4", Offset = "0x949CE4", VA = "0x949CE4", Slot = "11")]
		public IEnumerator<Triangle> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x949E28", Offset = "0x949E28", VA = "0x949E28", Slot = "12")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000358")]
	internal class TriangleSampler : IEnumerable<Triangle>, IEnumerable
	{
		[Token(Token = "0x40010E7")]
		private const int RANDOM_SEED = 110503;

		[Token(Token = "0x40010E8")]
		private const int samplefactor = 11;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private System.Random random;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int samples;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int triangleCount;

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x948738", Offset = "0x948738", VA = "0x948738")]
		public TriangleSampler(Mesh mesh)
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x94A134", Offset = "0x94A134", VA = "0x94A134")]
		public TriangleSampler(Mesh mesh, System.Random random)
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x9487F4", Offset = "0x9487F4", VA = "0x9487F4")]
		public void Reset()
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x9490AC", Offset = "0x9490AC", VA = "0x9490AC")]
		public void Update()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x949124", Offset = "0x949124", VA = "0x949124", Slot = "4")]
		public IEnumerator<Triangle> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x94A180", Offset = "0x94A180", VA = "0x94A180", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
}
namespace TriangleNet.Voronoi
{
	[Token(Token = "0x2000359")]
	public class BoundedVoronoi : VoronoiBase
	{
		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int offset;

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x94A184", Offset = "0x94A184", VA = "0x94A184")]
		public BoundedVoronoi(Mesh mesh)
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x94A22C", Offset = "0x94A22C", VA = "0x94A22C")]
		public BoundedVoronoi(Mesh mesh, IVoronoiFactory factory, IPredicates predicates)
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x94A354", Offset = "0x94A354", VA = "0x94A354")]
		private void PostProcess()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x94A63C", Offset = "0x94A63C", VA = "0x94A63C")]
		private void HandleCase1(HalfEdge edge, TriangleNet.Geometry.Vertex v1, TriangleNet.Geometry.Vertex v2)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x94AA50", Offset = "0x94AA50", VA = "0x94AA50")]
		private void HandleCase2(HalfEdge edge, TriangleNet.Geometry.Vertex v1, TriangleNet.Geometry.Vertex v2)
		{
		}
	}
	[Token(Token = "0x200035A")]
	public class DefaultVoronoiFactory : IVoronoiFactory
	{
		[Token(Token = "0x6001217")]
		[Address(RVA = "0x94AE1C", Offset = "0x94AE1C", VA = "0x94AE1C", Slot = "4")]
		public void Initialize(int vertexCount, int edgeCount, int faceCount)
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x94AE20", Offset = "0x94AE20", VA = "0x94AE20", Slot = "5")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x94AE24", Offset = "0x94AE24", VA = "0x94AE24", Slot = "6")]
		public TriangleNet.Topology.DCEL.Vertex CreateVertex(double x, double y)
		{
			return null;
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x94AE98", Offset = "0x94AE98", VA = "0x94AE98", Slot = "7")]
		public HalfEdge CreateHalfEdge(TriangleNet.Topology.DCEL.Vertex origin, Face face)
		{
			return null;
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x94AF0C", Offset = "0x94AF0C", VA = "0x94AF0C", Slot = "8")]
		public Face CreateFace(TriangleNet.Geometry.Vertex vertex)
		{
			return null;
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x94A224", Offset = "0x94A224", VA = "0x94A224")]
		public DefaultVoronoiFactory()
		{
		}
	}
	[Token(Token = "0x200035B")]
	public interface IVoronoiFactory
	{
		[Token(Token = "0x600121D")]
		void Initialize(int vertexCount, int edgeCount, int faceCount);

		[Token(Token = "0x600121E")]
		void Reset();

		[Token(Token = "0x600121F")]
		TriangleNet.Topology.DCEL.Vertex CreateVertex(double x, double y);

		[Token(Token = "0x6001220")]
		HalfEdge CreateHalfEdge(TriangleNet.Topology.DCEL.Vertex origin, Face face);

		[Token(Token = "0x6001221")]
		Face CreateFace(TriangleNet.Geometry.Vertex vertex);
	}
	[Token(Token = "0x200035C")]
	public class StandardVoronoi : VoronoiBase
	{
		[Token(Token = "0x6001222")]
		[Address(RVA = "0x94AF70", Offset = "0x94AF70", VA = "0x94AF70")]
		public StandardVoronoi(Mesh mesh)
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x94B074", Offset = "0x94B074", VA = "0x94B074")]
		public StandardVoronoi(Mesh mesh, Rectangle box)
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x94B01C", Offset = "0x94B01C", VA = "0x94B01C")]
		public StandardVoronoi(Mesh mesh, Rectangle box, IVoronoiFactory factory, IPredicates predicates)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x94B11C", Offset = "0x94B11C", VA = "0x94B11C")]
		private void PostProcess(Rectangle box)
		{
		}
	}
	[Token(Token = "0x200035D")]
	public abstract class VoronoiBase : DcelMesh
	{
		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected IPredicates predicates;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected IVoronoiFactory factory;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<HalfEdge> rays;

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x94A2DC", Offset = "0x94A2DC", VA = "0x94A2DC")]
		protected VoronoiBase(Mesh mesh, IVoronoiFactory factory, IPredicates predicates, bool generate)
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x94B2E0", Offset = "0x94B2E0", VA = "0x94B2E0")]
		protected void Generate(Mesh mesh)
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0x94B81C", Offset = "0x94B81C", VA = "0x94B81C")]
		protected List<HalfEdge>[] ComputeVertices(Mesh mesh, TriangleNet.Topology.DCEL.Vertex[] vertices)
		{
			return null;
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x94BD8C", Offset = "0x94BD8C", VA = "0x94BD8C")]
		protected void ComputeEdges(Mesh mesh, TriangleNet.Topology.DCEL.Vertex[] vertices, Face[] faces, List<HalfEdge>[] map)
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x94C958", Offset = "0x94C958", VA = "0x94C958", Slot = "6")]
		protected virtual void ConnectEdges(List<HalfEdge>[] map)
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0x94CC2C", Offset = "0x94CC2C", VA = "0x94CC2C", Slot = "5")]
		protected override IEnumerable<IEdge> EnumerateEdges()
		{
			return null;
		}
	}
}
namespace TriangleNet.Voronoi.Legacy
{
	[Token(Token = "0x200035E")]
	[Obsolete("Use TriangleNet.Voronoi.BoundedVoronoi class instead.")]
	public class BoundedVoronoiLegacy : IVoronoi
	{
		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Point[] points;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<VoronoiRegion> regions;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Point> segPoints;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int segIndex;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<int, SubSegment> subsegMap;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool includeBoundary;

		[Token(Token = "0x170001DF")]
		public Point[] Points
		{
			[Token(Token = "0x600122E")]
			[Address(RVA = "0x94D4F0", Offset = "0x94D4F0", VA = "0x94D4F0", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E0")]
		public ICollection<VoronoiRegion> Regions
		{
			[Token(Token = "0x600122F")]
			[Address(RVA = "0x94D4F8", Offset = "0x94D4F8", VA = "0x94D4F8", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E1")]
		public IEnumerable<IEdge> Edges
		{
			[Token(Token = "0x6001230")]
			[Address(RVA = "0x94D500", Offset = "0x94D500", VA = "0x94D500", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x94CFB8", Offset = "0x94CFB8", VA = "0x94CFB8")]
		public BoundedVoronoiLegacy(Mesh mesh)
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0x94CFC0", Offset = "0x94CFC0", VA = "0x94CFC0")]
		public BoundedVoronoiLegacy(Mesh mesh, bool includeBoundary)
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x94D060", Offset = "0x94D060", VA = "0x94D060")]
		private void Generate()
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x94DD84", Offset = "0x94DD84", VA = "0x94DD84")]
		private void ComputeCircumCenters()
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x94E178", Offset = "0x94E178", VA = "0x94E178")]
		private void TagBlindTriangles()
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x94FAD0", Offset = "0x94FAD0", VA = "0x94FAD0")]
		private bool TriangleIsBlinded(ref Otri tri, ref Osub seg)
		{
			return default(bool);
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x94E80C", Offset = "0x94E80C", VA = "0x94E80C")]
		private void ConstructCell(TriangleNet.Geometry.Vertex vertex)
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x94EE2C", Offset = "0x94EE2C", VA = "0x94EE2C")]
		private void ConstructBoundaryCell(TriangleNet.Geometry.Vertex vertex)
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x94FBF8", Offset = "0x94FBF8", VA = "0x94FBF8")]
		private bool SegmentsIntersect(Point p1, Point p2, Point p3, Point p4, out Point p, bool strictIntersect)
		{
			return default(bool);
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x94D504", Offset = "0x94D504", VA = "0x94D504")]
		private IEnumerable<IEdge> EnumerateEdges()
		{
			return null;
		}
	}
	[Token(Token = "0x200035F")]
	public interface IVoronoi
	{
		[Token(Token = "0x170001E2")]
		Point[] Points
		{
			[Token(Token = "0x6001239")]
			get;
		}

		[Token(Token = "0x170001E3")]
		ICollection<VoronoiRegion> Regions
		{
			[Token(Token = "0x600123A")]
			get;
		}

		[Token(Token = "0x170001E4")]
		IEnumerable<IEdge> Edges
		{
			[Token(Token = "0x600123B")]
			get;
		}
	}
	[Token(Token = "0x2000360")]
	[Obsolete("Use TriangleNet.Voronoi.StandardVoronoi class instead.")]
	public class SimpleVoronoi : IVoronoi
	{
		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Point[] points;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<int, VoronoiRegion> regions;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, Point> rayPoints;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int rayIndex;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rectangle bounds;

		[Token(Token = "0x170001E5")]
		public Point[] Points
		{
			[Token(Token = "0x600123D")]
			[Address(RVA = "0x950374", Offset = "0x950374", VA = "0x950374", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E6")]
		public ICollection<VoronoiRegion> Regions
		{
			[Token(Token = "0x600123E")]
			[Address(RVA = "0x95037C", Offset = "0x95037C", VA = "0x95037C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E7")]
		public IEnumerable<IEdge> Edges
		{
			[Token(Token = "0x600123F")]
			[Address(RVA = "0x9503CC", Offset = "0x9503CC", VA = "0x9503CC", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x94FE2C", Offset = "0x94FE2C", VA = "0x94FE2C")]
		public SimpleVoronoi(Mesh mesh)
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x94FEBC", Offset = "0x94FEBC", VA = "0x94FEBC")]
		private void Generate()
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0x950C60", Offset = "0x950C60", VA = "0x950C60")]
		private void ComputeCircumCenters()
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x9510EC", Offset = "0x9510EC", VA = "0x9510EC")]
		private void ConstructCell(VoronoiRegion region)
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x9519C4", Offset = "0x9519C4", VA = "0x9519C4")]
		private bool BoxRayIntersection(Point pt, double dx, double dy, out Point intersect)
		{
			return default(bool);
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0x9503D0", Offset = "0x9503D0", VA = "0x9503D0")]
		private IEnumerable<IEdge> EnumerateEdges()
		{
			return null;
		}
	}
	[Token(Token = "0x2000361")]
	public class VoronoiRegion
	{
		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int id;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Point generator;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Point> vertices;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool bounded;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, VoronoiRegion> neighbors;

		[Token(Token = "0x170001E8")]
		public int ID
		{
			[Token(Token = "0x6001245")]
			[Address(RVA = "0x951B74", Offset = "0x951B74", VA = "0x951B74")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E9")]
		public Point Generator
		{
			[Token(Token = "0x6001246")]
			[Address(RVA = "0x951B7C", Offset = "0x951B7C", VA = "0x951B7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EA")]
		public ICollection<Point> Vertices
		{
			[Token(Token = "0x6001247")]
			[Address(RVA = "0x951B84", Offset = "0x951B84", VA = "0x951B84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EB")]
		public bool Bounded
		{
			[Token(Token = "0x6001248")]
			[Address(RVA = "0x951B8C", Offset = "0x951B8C", VA = "0x951B8C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001249")]
			[Address(RVA = "0x951B94", Offset = "0x951B94", VA = "0x951B94")]
			set
			{
			}
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0x951BA0", Offset = "0x951BA0", VA = "0x951BA0")]
		public VoronoiRegion(TriangleNet.Geometry.Vertex generator)
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0x951CAC", Offset = "0x951CAC", VA = "0x951CAC")]
		public void Add(Point point)
		{
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0x951D5C", Offset = "0x951D5C", VA = "0x951D5C")]
		public void Add(List<Point> points)
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0x951DB4", Offset = "0x951DB4", VA = "0x951DB4")]
		public VoronoiRegion GetNeighbor(Point p)
		{
			return null;
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0x951E30", Offset = "0x951E30", VA = "0x951E30")]
		internal void AddNeighbor(int id, VoronoiRegion neighbor)
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x951E98", Offset = "0x951E98", VA = "0x951E98", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace TriangleNet.Topology
{
	[Token(Token = "0x2000362")]
	public struct Osub
	{
		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal SubSegment seg;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int orient;

		[Token(Token = "0x170001EC")]
		public SubSegment Segment
		{
			[Token(Token = "0x6001250")]
			[Address(RVA = "0x951F1C", Offset = "0x951F1C", VA = "0x951F1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x951F24", Offset = "0x951F24", VA = "0x951F24", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x951FC4", Offset = "0x951FC4", VA = "0x951FC4")]
		public void Sym(ref Osub os)
		{
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x952004", Offset = "0x952004", VA = "0x952004")]
		public void Sym()
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x952018", Offset = "0x952018", VA = "0x952018")]
		public void Pivot(ref Osub os)
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x952064", Offset = "0x952064", VA = "0x952064")]
		internal void Pivot(ref Otri ot)
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x9520B0", Offset = "0x9520B0", VA = "0x9520B0")]
		public void Next(ref Osub ot)
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x952104", Offset = "0x952104", VA = "0x952104")]
		public void Next()
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x952150", Offset = "0x952150", VA = "0x952150")]
		public TriangleNet.Geometry.Vertex Org()
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x95218C", Offset = "0x95218C", VA = "0x95218C")]
		public TriangleNet.Geometry.Vertex Dest()
		{
			return null;
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x9521D0", Offset = "0x9521D0", VA = "0x9521D0")]
		internal void SetOrg(TriangleNet.Geometry.Vertex vertex)
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x952240", Offset = "0x952240", VA = "0x952240")]
		internal void SetDest(TriangleNet.Geometry.Vertex vertex)
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x9522B8", Offset = "0x9522B8", VA = "0x9522B8")]
		internal TriangleNet.Geometry.Vertex SegOrg()
		{
			return null;
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x9522F8", Offset = "0x9522F8", VA = "0x9522F8")]
		internal TriangleNet.Geometry.Vertex SegDest()
		{
			return null;
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x95233C", Offset = "0x95233C", VA = "0x95233C")]
		internal void SetSegOrg(TriangleNet.Geometry.Vertex vertex)
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x9523B0", Offset = "0x9523B0", VA = "0x9523B0")]
		internal void SetSegDest(TriangleNet.Geometry.Vertex vertex)
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x952428", Offset = "0x952428", VA = "0x952428")]
		internal void Bond(ref Osub os)
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x9524B0", Offset = "0x9524B0", VA = "0x9524B0")]
		internal void Dissolve(SubSegment dummy)
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0x9524EC", Offset = "0x9524EC", VA = "0x9524EC")]
		internal bool Equal(Osub os)
		{
			return default(bool);
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x952510", Offset = "0x952510", VA = "0x952510")]
		internal void TriDissolve(Triangle dummy)
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x95254C", Offset = "0x95254C", VA = "0x95254C")]
		internal static bool IsDead(SubSegment sub)
		{
			return default(bool);
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x952580", Offset = "0x952580", VA = "0x952580")]
		internal static void Kill(SubSegment sub)
		{
		}
	}
	[Token(Token = "0x2000363")]
	public struct Otri
	{
		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal Triangle tri;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int orient;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] plus1Mod3;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] minus1Mod3;

		[Token(Token = "0x170001ED")]
		public Triangle Triangle
		{
			[Token(Token = "0x6001266")]
			[Address(RVA = "0x9525D4", Offset = "0x9525D4", VA = "0x9525D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001267")]
			[Address(RVA = "0x9525DC", Offset = "0x9525DC", VA = "0x9525DC")]
			set
			{
			}
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x9525E4", Offset = "0x9525E4", VA = "0x9525E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x952684", Offset = "0x952684", VA = "0x952684")]
		public void Sym(ref Otri ot)
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x952708", Offset = "0x952708", VA = "0x952708")]
		public void Sym()
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x952750", Offset = "0x952750", VA = "0x952750")]
		public void Lnext(ref Otri ot)
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0x9527F0", Offset = "0x9527F0", VA = "0x9527F0")]
		public void Lnext()
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0x952874", Offset = "0x952874", VA = "0x952874")]
		public void Lprev(ref Otri ot)
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x952914", Offset = "0x952914", VA = "0x952914")]
		public void Lprev()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0x952998", Offset = "0x952998", VA = "0x952998")]
		public void Onext(ref Otri ot)
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x952A6C", Offset = "0x952A6C", VA = "0x952A6C")]
		public void Onext()
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x952B24", Offset = "0x952B24", VA = "0x952B24")]
		public void Oprev(ref Otri ot)
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x952C0C", Offset = "0x952C0C", VA = "0x952C0C")]
		public void Oprev()
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0x952CCC", Offset = "0x952CCC", VA = "0x952CCC")]
		public void Dnext(ref Otri ot)
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0x952DB4", Offset = "0x952DB4", VA = "0x952DB4")]
		public void Dnext()
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x952E74", Offset = "0x952E74", VA = "0x952E74")]
		public void Dprev(ref Otri ot)
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0x952F48", Offset = "0x952F48", VA = "0x952F48")]
		public void Dprev()
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0x953000", Offset = "0x953000", VA = "0x953000")]
		public void Rnext(ref Otri ot)
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0x95311C", Offset = "0x95311C", VA = "0x95311C")]
		public void Rnext()
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0x953210", Offset = "0x953210", VA = "0x953210")]
		public void Rprev(ref Otri ot)
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0x95332C", Offset = "0x95332C", VA = "0x95332C")]
		public void Rprev()
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0x953420", Offset = "0x953420", VA = "0x953420")]
		public TriangleNet.Geometry.Vertex Org()
		{
			return null;
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x9534C4", Offset = "0x9534C4", VA = "0x9534C4")]
		public TriangleNet.Geometry.Vertex Dest()
		{
			return null;
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x953568", Offset = "0x953568", VA = "0x953568")]
		public TriangleNet.Geometry.Vertex Apex()
		{
			return null;
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x9535A4", Offset = "0x9535A4", VA = "0x9535A4")]
		public void Copy(ref Otri ot)
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0x9535DC", Offset = "0x9535DC", VA = "0x9535DC")]
		public bool Equals(Otri ot)
		{
			return default(bool);
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x953600", Offset = "0x953600", VA = "0x953600")]
		internal void SetOrg(TriangleNet.Geometry.Vertex v)
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0x9536D8", Offset = "0x9536D8", VA = "0x9536D8")]
		internal void SetDest(TriangleNet.Geometry.Vertex v)
		{
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0x9537B0", Offset = "0x9537B0", VA = "0x9537B0")]
		internal void SetApex(TriangleNet.Geometry.Vertex v)
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x953820", Offset = "0x953820", VA = "0x953820")]
		internal void Bond(ref Otri ot)
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0x9538F8", Offset = "0x9538F8", VA = "0x9538F8")]
		internal void Dissolve(Triangle dummy)
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x953964", Offset = "0x953964", VA = "0x953964")]
		internal void Infect()
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x953984", Offset = "0x953984", VA = "0x953984")]
		internal void Uninfect()
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x9539A0", Offset = "0x9539A0", VA = "0x9539A0")]
		internal bool IsInfected()
		{
			return default(bool);
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x9539BC", Offset = "0x9539BC", VA = "0x9539BC")]
		internal void Pivot(ref Osub os)
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0x953A08", Offset = "0x953A08", VA = "0x953A08")]
		internal void SegBond(ref Osub os)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x953A90", Offset = "0x953A90", VA = "0x953A90")]
		internal void SegDissolve(SubSegment dummy)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x953ACC", Offset = "0x953ACC", VA = "0x953ACC")]
		internal static bool IsDead(Triangle tria)
		{
			return default(bool);
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x953B00", Offset = "0x953B00", VA = "0x953B00")]
		internal static void Kill(Triangle tri)
		{
		}
	}
	[Token(Token = "0x2000364")]
	public class SubSegment : ISegment, IEdge
	{
		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int hash;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Osub[] subsegs;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal TriangleNet.Geometry.Vertex[] vertices;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Otri[] triangles;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int boundary;

		[Token(Token = "0x170001EE")]
		public int P0
		{
			[Token(Token = "0x600128F")]
			[Address(RVA = "0x953D08", Offset = "0x953D08", VA = "0x953D08", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001EF")]
		public int P1
		{
			[Token(Token = "0x6001290")]
			[Address(RVA = "0x953D38", Offset = "0x953D38", VA = "0x953D38", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F0")]
		public int Label
		{
			[Token(Token = "0x6001291")]
			[Address(RVA = "0x953D6C", Offset = "0x953D6C", VA = "0x953D6C", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x953C38", Offset = "0x953C38", VA = "0x953C38")]
		public SubSegment()
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0x953D74", Offset = "0x953D74", VA = "0x953D74", Slot = "4")]
		public TriangleNet.Geometry.Vertex GetVertex(int index)
		{
			return null;
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x953DA4", Offset = "0x953DA4", VA = "0x953DA4", Slot = "5")]
		public ITriangle GetTriangle(int index)
		{
			return null;
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0x953DE4", Offset = "0x953DE4", VA = "0x953DE4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x953DEC", Offset = "0x953DEC", VA = "0x953DEC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000365")]
	public class Triangle : ITriangle
	{
		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int hash;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int id;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Otri[] neighbors;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal TriangleNet.Geometry.Vertex[] vertices;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Osub[] subsegs;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int label;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal double area;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool infected;

		[Token(Token = "0x170001F1")]
		public int ID
		{
			[Token(Token = "0x6001297")]
			[Address(RVA = "0x953F3C", Offset = "0x953F3C", VA = "0x953F3C", Slot = "4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001298")]
			[Address(RVA = "0x953F44", Offset = "0x953F44", VA = "0x953F44", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170001F2")]
		public int Label
		{
			[Token(Token = "0x6001299")]
			[Address(RVA = "0x953F4C", Offset = "0x953F4C", VA = "0x953F4C", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600129A")]
			[Address(RVA = "0x953F54", Offset = "0x953F54", VA = "0x953F54", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		public double Area
		{
			[Token(Token = "0x600129B")]
			[Address(RVA = "0x953F5C", Offset = "0x953F5C", VA = "0x953F5C", Slot = "8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600129C")]
			[Address(RVA = "0x953F64", Offset = "0x953F64", VA = "0x953F64", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x953E70", Offset = "0x953E70", VA = "0x953E70")]
		public Triangle()
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x953F6C", Offset = "0x953F6C", VA = "0x953F6C", Slot = "10")]
		public TriangleNet.Geometry.Vertex GetVertex(int index)
		{
			return null;
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x953F9C", Offset = "0x953F9C", VA = "0x953F9C", Slot = "11")]
		public int GetVertexID(int index)
		{
			return default(int);
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0x953FD4", Offset = "0x953FD4", VA = "0x953FD4", Slot = "12")]
		public ITriangle GetNeighbor(int index)
		{
			return null;
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x954014", Offset = "0x954014", VA = "0x954014", Slot = "13")]
		public int GetNeighborID(int index)
		{
			return default(int);
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x954060", Offset = "0x954060", VA = "0x954060", Slot = "14")]
		public ISegment GetSegment(int index)
		{
			return null;
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x9540A0", Offset = "0x9540A0", VA = "0x9540A0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0x9540A8", Offset = "0x9540A8", VA = "0x9540A8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace TriangleNet.Topology.DCEL
{
	[Token(Token = "0x2000366")]
	public class DcelMesh
	{
		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<Vertex> vertices;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected List<HalfEdge> edges;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<Face> faces;

		[Token(Token = "0x170001F4")]
		public List<Vertex> Vertices
		{
			[Token(Token = "0x60012A6")]
			[Address(RVA = "0x954270", Offset = "0x954270", VA = "0x954270")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F5")]
		public List<HalfEdge> HalfEdges
		{
			[Token(Token = "0x60012A7")]
			[Address(RVA = "0x954278", Offset = "0x954278", VA = "0x954278")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F6")]
		public List<Face> Faces
		{
			[Token(Token = "0x60012A8")]
			[Address(RVA = "0x954280", Offset = "0x954280", VA = "0x954280")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F7")]
		public IEnumerable<IEdge> Edges
		{
			[Token(Token = "0x60012A9")]
			[Address(RVA = "0x954288", Offset = "0x954288", VA = "0x954288")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0x95412C", Offset = "0x95412C", VA = "0x95412C")]
		public DcelMesh()
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0x954134", Offset = "0x954134", VA = "0x954134")]
		protected DcelMesh(bool initialize)
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x954294", Offset = "0x954294", VA = "0x954294", Slot = "4")]
		public virtual bool IsConsistent(bool closed = true, int depth = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x954908", Offset = "0x954908", VA = "0x954908")]
		public void ResolveBoundaryEdges()
		{
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x954E48", Offset = "0x954E48", VA = "0x954E48", Slot = "5")]
		protected virtual IEnumerable<IEdge> EnumerateEdges()
		{
			return null;
		}
	}
	[Token(Token = "0x2000367")]
	public class Face
	{
		[Token(Token = "0x2000368")]
		[CompilerGenerated]
		private sealed class <EnumerateEdges>d__18 : IEnumerable<HalfEdge>, IEnumerable, IEnumerator<HalfEdge>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001121")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001122")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private HalfEdge <>2__current;

			[Token(Token = "0x4001123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Face <>4__this;

			[Token(Token = "0x4001125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private HalfEdge <edge>5__2;

			[Token(Token = "0x4001126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <first>5__3;

			[Token(Token = "0x170001FB")]
			private HalfEdge System.Collections.Generic.IEnumerator<TriangleNet.Topology.DCEL.HalfEdge>.Current
			{
				[Token(Token = "0x60012BB")]
				[Address(RVA = "0x955454", Offset = "0x955454", VA = "0x955454", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012BD")]
				[Address(RVA = "0x95549C", Offset = "0x95549C", VA = "0x95549C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012B8")]
			[Address(RVA = "0x9552DC", Offset = "0x9552DC", VA = "0x9552DC")]
			[DebuggerHidden]
			public <EnumerateEdges>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x60012B9")]
			[Address(RVA = "0x955394", Offset = "0x955394", VA = "0x955394", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012BA")]
			[Address(RVA = "0x955398", Offset = "0x955398", VA = "0x955398", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012BC")]
			[Address(RVA = "0x95545C", Offset = "0x95545C", VA = "0x95545C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60012BE")]
			[Address(RVA = "0x9554A4", Offset = "0x9554A4", VA = "0x9554A4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<HalfEdge> System.Collections.Generic.IEnumerable<TriangleNet.Topology.DCEL.HalfEdge>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60012BF")]
			[Address(RVA = "0x955550", Offset = "0x955550", VA = "0x955550", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Face Empty;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int id;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int mark;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Point generator;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal HalfEdge edge;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool bounded;

		[Token(Token = "0x170001F8")]
		public int ID
		{
			[Token(Token = "0x60012AE")]
			[Address(RVA = "0x9551A4", Offset = "0x9551A4", VA = "0x9551A4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012AF")]
			[Address(RVA = "0x9551AC", Offset = "0x9551AC", VA = "0x9551AC")]
			set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		public HalfEdge Edge
		{
			[Token(Token = "0x60012B0")]
			[Address(RVA = "0x9551B4", Offset = "0x9551B4", VA = "0x9551B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012B1")]
			[Address(RVA = "0x9551BC", Offset = "0x9551BC", VA = "0x9551BC")]
			set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public bool Bounded
		{
			[Token(Token = "0x60012B2")]
			[Address(RVA = "0x9551C4", Offset = "0x9551C4", VA = "0x9551C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012B3")]
			[Address(RVA = "0x9551CC", Offset = "0x9551CC", VA = "0x9551CC")]
			set
			{
			}
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0x95510C", Offset = "0x95510C", VA = "0x95510C")]
		static Face()
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x95519C", Offset = "0x95519C", VA = "0x95519C")]
		public Face(Point generator)
		{
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x9551D8", Offset = "0x9551D8", VA = "0x9551D8")]
		public Face(Point generator, HalfEdge edge)
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x955258", Offset = "0x955258", VA = "0x955258")]
		[IteratorStateMachine(typeof(<EnumerateEdges>d__18))]
		public IEnumerable<HalfEdge> EnumerateEdges()
		{
			return null;
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x955310", Offset = "0x955310", VA = "0x955310", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000369")]
	public class HalfEdge
	{
		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int id;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int mark;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Vertex origin;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Face face;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal HalfEdge twin;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal HalfEdge next;

		[Token(Token = "0x170001FD")]
		public int ID
		{
			[Token(Token = "0x60012C0")]
			[Address(RVA = "0x955554", Offset = "0x955554", VA = "0x955554")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012C1")]
			[Address(RVA = "0x95555C", Offset = "0x95555C", VA = "0x95555C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public int Boundary
		{
			[Token(Token = "0x60012C2")]
			[Address(RVA = "0x955564", Offset = "0x955564", VA = "0x955564")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012C3")]
			[Address(RVA = "0x95556C", Offset = "0x95556C", VA = "0x95556C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public Vertex Origin
		{
			[Token(Token = "0x60012C4")]
			[Address(RVA = "0x955574", Offset = "0x955574", VA = "0x955574")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012C5")]
			[Address(RVA = "0x95557C", Offset = "0x95557C", VA = "0x95557C")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public Face Face
		{
			[Token(Token = "0x60012C6")]
			[Address(RVA = "0x955584", Offset = "0x955584", VA = "0x955584")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012C7")]
			[Address(RVA = "0x95558C", Offset = "0x95558C", VA = "0x95558C")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public HalfEdge Twin
		{
			[Token(Token = "0x60012C8")]
			[Address(RVA = "0x955594", Offset = "0x955594", VA = "0x955594")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012C9")]
			[Address(RVA = "0x95559C", Offset = "0x95559C", VA = "0x95559C")]
			set
			{
			}
		}

		[Token(Token = "0x17000202")]
		public HalfEdge Next
		{
			[Token(Token = "0x60012CA")]
			[Address(RVA = "0x9555A4", Offset = "0x9555A4", VA = "0x9555A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012CB")]
			[Address(RVA = "0x9555AC", Offset = "0x9555AC", VA = "0x9555AC")]
			set
			{
			}
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x9555B4", Offset = "0x9555B4", VA = "0x9555B4")]
		public HalfEdge(Vertex origin)
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x954DDC", Offset = "0x954DDC", VA = "0x954DDC")]
		public HalfEdge(Vertex origin, Face face)
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x9555E4", Offset = "0x9555E4", VA = "0x9555E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200036A")]
	public class Vertex : Point
	{
		[Token(Token = "0x200036B")]
		[CompilerGenerated]
		private sealed class <EnumerateEdges>d__6 : IEnumerable<HalfEdge>, IEnumerable, IEnumerator<HalfEdge>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400112E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400112F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private HalfEdge <>2__current;

			[Token(Token = "0x4001130")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001131")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vertex <>4__this;

			[Token(Token = "0x4001132")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private HalfEdge <edge>5__2;

			[Token(Token = "0x4001133")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <first>5__3;

			[Token(Token = "0x17000204")]
			private HalfEdge System.Collections.Generic.IEnumerator<TriangleNet.Topology.DCEL.HalfEdge>.Current
			{
				[Token(Token = "0x60012D8")]
				[Address(RVA = "0x9558DC", Offset = "0x9558DC", VA = "0x9558DC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000205")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012DA")]
				[Address(RVA = "0x955924", Offset = "0x955924", VA = "0x955924", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012D5")]
			[Address(RVA = "0x95575C", Offset = "0x95575C", VA = "0x95575C")]
			[DebuggerHidden]
			public <EnumerateEdges>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60012D6")]
			[Address(RVA = "0x955814", Offset = "0x955814", VA = "0x955814", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012D7")]
			[Address(RVA = "0x955818", Offset = "0x955818", VA = "0x955818", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012D9")]
			[Address(RVA = "0x9558E4", Offset = "0x9558E4", VA = "0x9558E4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60012DB")]
			[Address(RVA = "0x95592C", Offset = "0x95592C", VA = "0x95592C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<HalfEdge> System.Collections.Generic.IEnumerable<TriangleNet.Topology.DCEL.HalfEdge>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60012DC")]
			[Address(RVA = "0x9559D8", Offset = "0x9559D8", VA = "0x9559D8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal HalfEdge leaving;

		[Token(Token = "0x17000203")]
		public HalfEdge Leaving
		{
			[Token(Token = "0x60012CF")]
			[Address(RVA = "0x955690", Offset = "0x955690", VA = "0x955690")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012D0")]
			[Address(RVA = "0x955698", Offset = "0x955698", VA = "0x955698")]
			set
			{
			}
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x9556A0", Offset = "0x9556A0", VA = "0x9556A0")]
		public Vertex(double x, double y)
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x9556A8", Offset = "0x9556A8", VA = "0x9556A8")]
		public Vertex(double x, double y, HalfEdge leaving)
		{
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x9556D8", Offset = "0x9556D8", VA = "0x9556D8")]
		[IteratorStateMachine(typeof(<EnumerateEdges>d__6))]
		public IEnumerable<HalfEdge> EnumerateEdges()
		{
			return null;
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x955790", Offset = "0x955790", VA = "0x955790", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace TriangleNet.Tools
{
	[Token(Token = "0x200036C")]
	public class AdjacencyMatrix
	{
		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int nnz;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] pcol;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] irow;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly int N;

		[Token(Token = "0x17000206")]
		public int[] ColumnPointers
		{
			[Token(Token = "0x60012DD")]
			[Address(RVA = "0x9559DC", Offset = "0x9559DC", VA = "0x9559DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000207")]
		public int[] RowIndices
		{
			[Token(Token = "0x60012DE")]
			[Address(RVA = "0x9559E4", Offset = "0x9559E4", VA = "0x9559E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x9559EC", Offset = "0x9559EC", VA = "0x9559EC")]
		public AdjacencyMatrix(Mesh mesh)
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x9566B8", Offset = "0x9566B8", VA = "0x9566B8")]
		public AdjacencyMatrix(int[] pcol, int[] irow)
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0x9567D4", Offset = "0x9567D4", VA = "0x9567D4")]
		public int Bandwidth()
		{
			return default(int);
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0x955AC0", Offset = "0x955AC0", VA = "0x955AC0")]
		private int[] AdjacencyCount(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0x95602C", Offset = "0x95602C", VA = "0x95602C")]
		private int[] AdjacencySet(Mesh mesh, int[] pcol)
		{
			return null;
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0x956610", Offset = "0x956610", VA = "0x956610")]
		public void SortIndices()
		{
		}
	}
	[Token(Token = "0x200036D")]
	public class CuthillMcKee
	{
		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AdjacencyMatrix matrix;

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0x956918", Offset = "0x956918", VA = "0x956918")]
		public int[] Renumber(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x956994", Offset = "0x956994", VA = "0x956994")]
		public int[] Renumber(AdjacencyMatrix matrix)
		{
			return null;
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0x956C7C", Offset = "0x956C7C", VA = "0x956C7C")]
		private int[] GenerateRcm()
		{
			return null;
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x95723C", Offset = "0x95723C", VA = "0x95723C")]
		private void Rcm(int root, int[] mask, int[] perm, int offset, ref int iccsze)
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0x957048", Offset = "0x957048", VA = "0x957048")]
		private void FindRoot(ref int root, int[] mask, ref int level_num, int[] level_row, int[] level, int offset)
		{
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0x957820", Offset = "0x957820", VA = "0x957820")]
		private void GetLevelSet(ref int root, int[] mask, ref int level_num, int[] level_row, int[] level, int offset)
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x9574F0", Offset = "0x9574F0", VA = "0x9574F0")]
		private void Degree(int root, int[] mask, int[] deg, ref int iccsze, int[] ls, int offset)
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x956E9C", Offset = "0x956E9C", VA = "0x956E9C")]
		private int PermBandwidth(int[] perm, int[] perm_inv)
		{
			return default(int);
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x956DF0", Offset = "0x956DF0", VA = "0x956DF0")]
		private int[] PermInverse(int[] perm)
		{
			return null;
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x95779C", Offset = "0x95779C", VA = "0x95779C")]
		private void ReverseVector(int[] a, int offset, int size)
		{
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x956C1C", Offset = "0x956C1C", VA = "0x956C1C")]
		private void Shift(int[] a, bool up)
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x957A04", Offset = "0x957A04", VA = "0x957A04")]
		public CuthillMcKee()
		{
		}
	}
	[Token(Token = "0x200036E")]
	public static class Interpolation
	{
		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x957A0C", Offset = "0x957A0C", VA = "0x957A0C")]
		public static void InterpolateZ(Point p, ITriangle triangle)
		{
		}
	}
	[Token(Token = "0x200036F")]
	public static class IntersectionHelper
	{
		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x957C20", Offset = "0x957C20", VA = "0x957C20")]
		public static void IntersectSegments(Point p0, Point p1, Point q0, Point q1, ref Point c0)
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x957C98", Offset = "0x957C98", VA = "0x957C98")]
		public static bool LiangBarsky(Rectangle rect, Point p0, Point p1, ref Point c0, ref Point c1)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x957DE0", Offset = "0x957DE0", VA = "0x957DE0")]
		public static bool BoxRayIntersection(Rectangle rect, Point p0, Point p1, ref Point c1)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000370")]
	public static class PolygonValidator
	{
		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x957EFC", Offset = "0x957EFC", VA = "0x957EFC")]
		public static bool IsConsistent(IPolygon poly)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0x9592F8", Offset = "0x9592F8", VA = "0x9592F8")]
		public static bool HasDuplicateVertices(IPolygon poly)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x9595FC", Offset = "0x9595FC", VA = "0x9595FC")]
		public static bool HasBadAngles(IPolygon poly, double threshold = 2E-12)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x959B44", Offset = "0x959B44", VA = "0x959B44")]
		private static bool IsBadAngle(Point a, Point b, Point c, double threshold = 0.0)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x959BF8", Offset = "0x959BF8", VA = "0x959BF8")]
		private static double DotProduct(Point a, Point b, Point c)
		{
			return default(double);
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x959C3C", Offset = "0x959C3C", VA = "0x959C3C")]
		private static double CrossProductLength(Point a, Point b, Point c)
		{
			return default(double);
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x958A70", Offset = "0x958A70", VA = "0x958A70")]
		private static int CheckVertexIDs(IPolygon poly, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x958F90", Offset = "0x958F90", VA = "0x958F90")]
		private static int CheckDuplicateIDs(IPolygon poly)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000371")]
	public class QualityMeasure
	{
		[Token(Token = "0x2000372")]
		private class AreaMeasure
		{
			[Token(Token = "0x400113D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double area_min;

			[Token(Token = "0x400113E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public double area_max;

			[Token(Token = "0x400113F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public double area_total;

			[Token(Token = "0x4001140")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int area_zero;

			[Token(Token = "0x600130C")]
			[Address(RVA = "0x959F40", Offset = "0x959F40", VA = "0x959F40")]
			public void Reset()
			{
			}

			[Token(Token = "0x600130D")]
			[Address(RVA = "0x95A43C", Offset = "0x95A43C", VA = "0x95A43C")]
			public double Measure(Point a, Point b, Point c)
			{
				return default(double);
			}

			[Token(Token = "0x600130E")]
			[Address(RVA = "0x959D78", Offset = "0x959D78", VA = "0x959D78")]
			public AreaMeasure()
			{
			}
		}

		[Token(Token = "0x2000373")]
		private class AlphaMeasure
		{
			[Token(Token = "0x4001141")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double alpha_min;

			[Token(Token = "0x4001142")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public double alpha_max;

			[Token(Token = "0x4001143")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public double alpha_ave;

			[Token(Token = "0x4001144")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public double alpha_area;

			[Token(Token = "0x600130F")]
			[Address(RVA = "0x959F58", Offset = "0x959F58", VA = "0x959F58")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001310")]
			[Address(RVA = "0x95AC68", Offset = "0x95AC68", VA = "0x95AC68")]
			private double acos(double c)
			{
				return default(double);
			}

			[Token(Token = "0x6001311")]
			[Address(RVA = "0x95A550", Offset = "0x95A550", VA = "0x95A550")]
			public double Measure(double ab, double bc, double ca, double area)
			{
				return default(double);
			}

			[Token(Token = "0x6001312")]
			[Address(RVA = "0x95A830", Offset = "0x95A830", VA = "0x95A830")]
			public void Normalize(int n, double area_total)
			{
			}

			[Token(Token = "0x6001313")]
			[Address(RVA = "0x959D8C", Offset = "0x959D8C", VA = "0x959D8C")]
			public AlphaMeasure()
			{
			}
		}

		[Token(Token = "0x2000374")]
		private class Q_Measure
		{
			[Token(Token = "0x4001145")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double q_min;

			[Token(Token = "0x4001146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public double q_max;

			[Token(Token = "0x4001147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public double q_ave;

			[Token(Token = "0x4001148")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public double q_area;

			[Token(Token = "0x6001314")]
			[Address(RVA = "0x959F6C", Offset = "0x959F6C", VA = "0x959F6C")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001315")]
			[Address(RVA = "0x95A744", Offset = "0x95A744", VA = "0x95A744")]
			public double Measure(double ab, double bc, double ca, double area)
			{
				return default(double);
			}

			[Token(Token = "0x6001316")]
			[Address(RVA = "0x95A868", Offset = "0x95A868", VA = "0x95A868")]
			public void Normalize(int n, double area_total)
			{
			}

			[Token(Token = "0x6001317")]
			[Address(RVA = "0x959D94", Offset = "0x959D94", VA = "0x959D94")]
			public Q_Measure()
			{
			}
		}

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AreaMeasure areaMeasure;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AlphaMeasure alphaMeasure;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Q_Measure qMeasure;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Mesh mesh;

		[Token(Token = "0x17000208")]
		public double AreaMinimum
		{
			[Token(Token = "0x60012FE")]
			[Address(RVA = "0x959D9C", Offset = "0x959D9C", VA = "0x959D9C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000209")]
		public double AreaMaximum
		{
			[Token(Token = "0x60012FF")]
			[Address(RVA = "0x959DB8", Offset = "0x959DB8", VA = "0x959DB8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700020A")]
		public double AreaRatio
		{
			[Token(Token = "0x6001300")]
			[Address(RVA = "0x959DD4", Offset = "0x959DD4", VA = "0x959DD4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700020B")]
		public double AlphaMinimum
		{
			[Token(Token = "0x6001301")]
			[Address(RVA = "0x959DF4", Offset = "0x959DF4", VA = "0x959DF4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700020C")]
		public double AlphaMaximum
		{
			[Token(Token = "0x6001302")]
			[Address(RVA = "0x959E10", Offset = "0x959E10", VA = "0x959E10")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700020D")]
		public double AlphaAverage
		{
			[Token(Token = "0x6001303")]
			[Address(RVA = "0x959E2C", Offset = "0x959E2C", VA = "0x959E2C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700020E")]
		public double AlphaArea
		{
			[Token(Token = "0x6001304")]
			[Address(RVA = "0x959E48", Offset = "0x959E48", VA = "0x959E48")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700020F")]
		public double Q_Minimum
		{
			[Token(Token = "0x6001305")]
			[Address(RVA = "0x959E64", Offset = "0x959E64", VA = "0x959E64")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000210")]
		public double Q_Maximum
		{
			[Token(Token = "0x6001306")]
			[Address(RVA = "0x959E80", Offset = "0x959E80", VA = "0x959E80")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000211")]
		public double Q_Average
		{
			[Token(Token = "0x6001307")]
			[Address(RVA = "0x959E9C", Offset = "0x959E9C", VA = "0x959E9C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000212")]
		public double Q_Area
		{
			[Token(Token = "0x6001308")]
			[Address(RVA = "0x959EB8", Offset = "0x959EB8", VA = "0x959EB8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x959C80", Offset = "0x959C80", VA = "0x959C80")]
		public QualityMeasure()
		{
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x959ED4", Offset = "0x959ED4", VA = "0x959ED4")]
		public void Update(Mesh mesh)
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x959F80", Offset = "0x959F80", VA = "0x959F80")]
		private void Compute()
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x95A8A0", Offset = "0x95A8A0", VA = "0x95A8A0")]
		public int Bandwidth()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000375")]
	public class Statistic
	{
		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static long InCircleCount;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static long InCircleAdaptCount;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static long CounterClockwiseCount;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static long CounterClockwiseAdaptCount;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static long Orient3dCount;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static long HyperbolaCount;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static long CircumcenterCount;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static long CircleTopCount;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static long RelocationCount;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double minEdge;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double maxEdge;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double minAspect;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double maxAspect;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double minArea;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double maxArea;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double minAngle;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double maxAngle;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int[] angleTable;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int[] minAngles;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] maxAngles;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly int[] plus1Mod3;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static readonly int[] minus1Mod3;

		[Token(Token = "0x17000213")]
		public double ShortestEdge
		{
			[Token(Token = "0x6001318")]
			[Address(RVA = "0x95ACEC", Offset = "0x95ACEC", VA = "0x95ACEC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000214")]
		public double LongestEdge
		{
			[Token(Token = "0x6001319")]
			[Address(RVA = "0x95ACF4", Offset = "0x95ACF4", VA = "0x95ACF4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000215")]
		public double ShortestAltitude
		{
			[Token(Token = "0x600131A")]
			[Address(RVA = "0x95ACFC", Offset = "0x95ACFC", VA = "0x95ACFC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000216")]
		public double LargestAspectRatio
		{
			[Token(Token = "0x600131B")]
			[Address(RVA = "0x95AD04", Offset = "0x95AD04", VA = "0x95AD04")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000217")]
		public double SmallestArea
		{
			[Token(Token = "0x600131C")]
			[Address(RVA = "0x95AD0C", Offset = "0x95AD0C", VA = "0x95AD0C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000218")]
		public double LargestArea
		{
			[Token(Token = "0x600131D")]
			[Address(RVA = "0x95AD14", Offset = "0x95AD14", VA = "0x95AD14")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000219")]
		public double SmallestAngle
		{
			[Token(Token = "0x600131E")]
			[Address(RVA = "0x95AD1C", Offset = "0x95AD1C", VA = "0x95AD1C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700021A")]
		public double LargestAngle
		{
			[Token(Token = "0x600131F")]
			[Address(RVA = "0x95AD24", Offset = "0x95AD24", VA = "0x95AD24")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700021B")]
		public int[] AngleHistogram
		{
			[Token(Token = "0x6001320")]
			[Address(RVA = "0x95AD2C", Offset = "0x95AD2C", VA = "0x95AD2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021C")]
		public int[] MinAngleHistogram
		{
			[Token(Token = "0x6001321")]
			[Address(RVA = "0x95AD34", Offset = "0x95AD34", VA = "0x95AD34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021D")]
		public int[] MaxAngleHistogram
		{
			[Token(Token = "0x6001322")]
			[Address(RVA = "0x95AD3C", Offset = "0x95AD3C", VA = "0x95AD3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0x95AD44", Offset = "0x95AD44", VA = "0x95AD44")]
		private void GetAspectHistogram(Mesh mesh)
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x95B4C4", Offset = "0x95B4C4", VA = "0x95B4C4")]
		public void Update(Mesh mesh, int sampleDegrees)
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x95C234", Offset = "0x95C234", VA = "0x95C234")]
		public Statistic()
		{
		}
	}
	[Token(Token = "0x2000376")]
	public class TriangleQuadTree
	{
		[Token(Token = "0x2000377")]
		private class QuadNode
		{
			[Token(Token = "0x4001163")]
			private const int SW = 0;

			[Token(Token = "0x4001164")]
			private const int SE = 1;

			[Token(Token = "0x4001165")]
			private const int NW = 2;

			[Token(Token = "0x4001166")]
			private const int NE = 3;

			[Token(Token = "0x4001167")]
			private const double EPS = 1E-06;

			[Token(Token = "0x4001168")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly byte[] BITVECTOR;

			[Token(Token = "0x4001169")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Rectangle bounds;

			[Token(Token = "0x400116A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Point pivot;

			[Token(Token = "0x400116B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private TriangleQuadTree tree;

			[Token(Token = "0x400116C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private QuadNode[] regions;

			[Token(Token = "0x400116D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<int> triangles;

			[Token(Token = "0x400116E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private byte bitRegions;

			[Token(Token = "0x600132B")]
			[Address(RVA = "0x95D338", Offset = "0x95D338", VA = "0x95D338")]
			public QuadNode(Rectangle box, TriangleQuadTree tree)
			{
			}

			[Token(Token = "0x600132C")]
			[Address(RVA = "0x95C40C", Offset = "0x95C40C", VA = "0x95C40C")]
			public QuadNode(Rectangle box, TriangleQuadTree tree, bool init)
			{
			}

			[Token(Token = "0x600132D")]
			[Address(RVA = "0x95D120", Offset = "0x95D120", VA = "0x95D120")]
			public List<int> FindTriangles(Point searchPoint)
			{
				return null;
			}

			[Token(Token = "0x600132E")]
			[Address(RVA = "0x95C698", Offset = "0x95C698", VA = "0x95C698")]
			public void CreateSubRegion(int currentDepth)
			{
			}

			[Token(Token = "0x600132F")]
			[Address(RVA = "0x95D378", Offset = "0x95D378", VA = "0x95D378")]
			private void AddTriangleToRegion(Point[] triangle, int index)
			{
			}

			[Token(Token = "0x6001330")]
			[Address(RVA = "0x95D678", Offset = "0x95D678", VA = "0x95D678")]
			private void FindTriangleIntersections(Point[] triangle, int index)
			{
			}

			[Token(Token = "0x6001331")]
			[Address(RVA = "0x95D754", Offset = "0x95D754", VA = "0x95D754")]
			private void FindIntersectionsWithX(double dx, double dy, Point[] triangle, int index, int k)
			{
			}

			[Token(Token = "0x6001332")]
			[Address(RVA = "0x95D9B0", Offset = "0x95D9B0", VA = "0x95D9B0")]
			private void FindIntersectionsWithY(double dx, double dy, Point[] triangle, int index, int k)
			{
			}

			[Token(Token = "0x6001333")]
			[Address(RVA = "0x95D340", Offset = "0x95D340", VA = "0x95D340")]
			private int FindRegion(Point point)
			{
				return default(int);
			}

			[Token(Token = "0x6001334")]
			[Address(RVA = "0x95D500", Offset = "0x95D500", VA = "0x95D500")]
			private void AddToRegion(int index, int region)
			{
			}
		}

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private QuadNode root;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ITriangle[] triangles;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int sizeBound;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int maxDepth;

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x95C330", Offset = "0x95C330", VA = "0x95C330")]
		public TriangleQuadTree(Mesh mesh, int maxDepth = 10, int sizeBound = 10)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x95CDD8", Offset = "0x95CDD8", VA = "0x95CDD8")]
		public ITriangle Query(double x, double y)
		{
			return null;
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x95D170", Offset = "0x95D170", VA = "0x95D170")]
		internal static bool IsPointInTriangle(Point p, Point t0, Point t1, Point t2)
		{
			return default(bool);
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0x95D310", Offset = "0x95D310", VA = "0x95D310")]
		internal static double DotProduct(Point p, Point q)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000378")]
	public class VertexSorter
	{
		[Token(Token = "0x400116F")]
		private const int RANDOM_SEED = 57113;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private System.Random rand;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TriangleNet.Geometry.Vertex[] points;

		[Token(Token = "0x6001336")]
		[Address(RVA = "0x95DCAC", Offset = "0x95DCAC", VA = "0x95DCAC")]
		private VertexSorter(TriangleNet.Geometry.Vertex[] points, int seed)
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0x95957C", Offset = "0x95957C", VA = "0x95957C")]
		public static void Sort(TriangleNet.Geometry.Vertex[] array, int seed = 57113)
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x95E07C", Offset = "0x95E07C", VA = "0x95E07C")]
		public static void Alternate(TriangleNet.Geometry.Vertex[] array, int length, int seed = 57113)
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x95DD44", Offset = "0x95DD44", VA = "0x95DD44")]
		private void QuickSort(int left, int right)
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x95E138", Offset = "0x95E138", VA = "0x95E138")]
		private void AlternateAxes(int left, int right, int axis)
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x95E1F0", Offset = "0x95E1F0", VA = "0x95E1F0")]
		private void VertexMedianX(int left, int right, int median)
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x95E500", Offset = "0x95E500", VA = "0x95E500")]
		private void VertexMedianY(int left, int right, int median)
		{
		}
	}
}
namespace TriangleNet.Smoothing
{
	[Token(Token = "0x2000379")]
	public interface ISmoother
	{
		[Token(Token = "0x600133D")]
		void Smooth(IMesh mesh);

		[Token(Token = "0x600133E")]
		void Smooth(IMesh mesh, int limit);
	}
	[Token(Token = "0x200037A")]
	public class SimpleSmoother : ISmoother
	{
		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TrianglePool pool;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Configuration config;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IVoronoiFactory factory;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ConstraintOptions options;

		[Token(Token = "0x600133F")]
		[Address(RVA = "0x95E810", Offset = "0x95E810", VA = "0x95E810")]
		public SimpleSmoother()
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0x95E9A4", Offset = "0x95E9A4", VA = "0x95E9A4")]
		public SimpleSmoother(IVoronoiFactory factory)
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x95EBB4", Offset = "0x95EBB4", VA = "0x95EBB4")]
		public SimpleSmoother(IVoronoiFactory factory, Configuration config)
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0x95EC60", Offset = "0x95EC60", VA = "0x95EC60", Slot = "4")]
		public void Smooth(IMesh mesh)
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x95EC68", Offset = "0x95EC68", VA = "0x95EC68", Slot = "5")]
		public void Smooth(IMesh mesh, int limit)
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x95EEC0", Offset = "0x95EEC0", VA = "0x95EEC0")]
		private void Step(Mesh mesh, IVoronoiFactory factory, IPredicates predicates)
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0x95F4C4", Offset = "0x95F4C4", VA = "0x95F4C4")]
		private void Centroid(Face face, out double x, out double y)
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x95F098", Offset = "0x95F098", VA = "0x95F098")]
		private Polygon Rebuild(Mesh mesh)
		{
			return null;
		}
	}
	[Token(Token = "0x200037C")]
	internal class VoronoiFactory : IVoronoiFactory
	{
		[Token(Token = "0x200037D")]
		private class ObjectPool<T> where T : class
		{
			[Token(Token = "0x400117C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x400117D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int count;

			[Token(Token = "0x400117E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T[] pool;

			[Token(Token = "0x1700021E")]
			public int Count
			{
				[Token(Token = "0x6001352")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x1700021F")]
			public int Capacity
			{
				[Token(Token = "0x6001353")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001354")]
				set
				{
				}
			}

			[Token(Token = "0x6001355")]
			public ObjectPool(int capacity = 3)
			{
			}

			[Token(Token = "0x6001356")]
			public ObjectPool(T[] pool)
			{
			}

			[Token(Token = "0x6001357")]
			public bool TryGet(out T obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001358")]
			public void Put(T obj)
			{
			}

			[Token(Token = "0x6001359")]
			public void Release()
			{
			}

			[Token(Token = "0x600135A")]
			private void Resize(int size)
			{
			}
		}

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ObjectPool<TriangleNet.Topology.DCEL.Vertex> vertices;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ObjectPool<HalfEdge> edges;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ObjectPool<Face> faces;

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x95E870", Offset = "0x95E870", VA = "0x95E870")]
		public VoronoiFactory()
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0x95F660", Offset = "0x95F660", VA = "0x95F660", Slot = "4")]
		public void Initialize(int vertexCount, int edgeCount, int faceCount)
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0x95F91C", Offset = "0x95F91C", VA = "0x95F91C", Slot = "5")]
		public void Reset()
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x95F9B4", Offset = "0x95F9B4", VA = "0x95F9B4", Slot = "6")]
		public TriangleNet.Topology.DCEL.Vertex CreateVertex(double x, double y)
		{
			return null;
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x95FAA0", Offset = "0x95FAA0", VA = "0x95FAA0", Slot = "7")]
		public HalfEdge CreateHalfEdge(TriangleNet.Topology.DCEL.Vertex origin, Face face)
		{
			return null;
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0x95FBE0", Offset = "0x95FBE0", VA = "0x95FBE0", Slot = "8")]
		public Face CreateFace(TriangleNet.Geometry.Vertex vertex)
		{
			return null;
		}
	}
}
namespace TriangleNet.Meshing
{
	[Token(Token = "0x200037E")]
	internal class ConstraintMesher
	{
		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Behavior behavior;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TriangleLocator locator;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Triangle> viri;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ILog<LogItem> logger;

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x95FCE4", Offset = "0x95FCE4", VA = "0x95FCE4")]
		public ConstraintMesher(Mesh mesh, Configuration config)
		{
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x95FE48", Offset = "0x95FE48", VA = "0x95FE48")]
		public void Apply(IPolygon input, ConstraintOptions options)
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0x9609A0", Offset = "0x9609A0", VA = "0x9609A0")]
		private void CarveHoles()
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x9601B8", Offset = "0x9601B8", VA = "0x9601B8")]
		private void FormSkeleton(IPolygon input)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x9611E0", Offset = "0x9611E0", VA = "0x9611E0")]
		private void InfectHull()
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x9613D8", Offset = "0x9613D8", VA = "0x9613D8")]
		private void Plague()
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x961CD0", Offset = "0x961CD0", VA = "0x961CD0")]
		private FindDirectionResult FindDirection(ref Otri searchtri, TriangleNet.Geometry.Vertex searchpoint)
		{
			return default(FindDirectionResult);
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x9620CC", Offset = "0x9620CC", VA = "0x9620CC")]
		private void SegmentIntersection(ref Otri splittri, ref Osub splitsubseg, TriangleNet.Geometry.Vertex endpoint2)
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x9624B8", Offset = "0x9624B8", VA = "0x9624B8")]
		private bool ScoutSegment(ref Otri searchtri, TriangleNet.Geometry.Vertex endpoint2, int newmark)
		{
			return default(bool);
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x962670", Offset = "0x962670", VA = "0x962670")]
		private void DelaunayFixup(ref Otri fixuptri, bool leftside)
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x96296C", Offset = "0x96296C", VA = "0x96296C")]
		private void ConstrainedEdge(ref Otri starttri, TriangleNet.Geometry.Vertex endpoint2, int newmark)
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0x961970", Offset = "0x961970", VA = "0x961970")]
		private void InsertSegment(TriangleNet.Geometry.Vertex endpoint1, TriangleNet.Geometry.Vertex endpoint2, int newmark)
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0x961BF4", Offset = "0x961BF4", VA = "0x961BF4")]
		private void MarkHull()
		{
		}
	}
	[Token(Token = "0x200037F")]
	public class ConstraintOptions
	{
		[Token(Token = "0x17000220")]
		[Obsolete("Not used anywhere, will be removed in beta 4.")]
		public bool UseRegions
		{
			[Token(Token = "0x6001368")]
			[Address(RVA = "0x962C08", Offset = "0x962C08", VA = "0x962C08")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001369")]
			[Address(RVA = "0x962C10", Offset = "0x962C10", VA = "0x962C10")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000221")]
		public bool ConformingDelaunay
		{
			[Token(Token = "0x600136A")]
			[Address(RVA = "0x962C1C", Offset = "0x962C1C", VA = "0x962C1C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600136B")]
			[Address(RVA = "0x962C24", Offset = "0x962C24", VA = "0x962C24")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		public bool Convex
		{
			[Token(Token = "0x600136C")]
			[Address(RVA = "0x962C30", Offset = "0x962C30", VA = "0x962C30")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600136D")]
			[Address(RVA = "0x962C38", Offset = "0x962C38", VA = "0x962C38")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		public int SegmentSplitting
		{
			[Token(Token = "0x600136E")]
			[Address(RVA = "0x962C44", Offset = "0x962C44", VA = "0x962C44")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600136F")]
			[Address(RVA = "0x962C4C", Offset = "0x962C4C", VA = "0x962C4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0x95EBAC", Offset = "0x95EBAC", VA = "0x95EBAC")]
		public ConstraintOptions()
		{
		}
	}
	[Token(Token = "0x2000380")]
	public static class Converter
	{
		[Token(Token = "0x6001371")]
		[Address(RVA = "0x962C54", Offset = "0x962C54", VA = "0x962C54")]
		public static Mesh ToMesh(Polygon polygon, IList<ITriangle> triangles)
		{
			return null;
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0x962CB4", Offset = "0x962CB4", VA = "0x962CB4")]
		public static Mesh ToMesh(Polygon polygon, ITriangle[] triangles)
		{
			return null;
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x962EB0", Offset = "0x962EB0", VA = "0x962EB0")]
		private static List<Otri>[] SetNeighbors(Mesh mesh, ITriangle[] triangles)
		{
			return null;
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x963A38", Offset = "0x963A38", VA = "0x963A38")]
		private static void SetSegments(Mesh mesh, Polygon polygon, List<Otri>[] vertexarray)
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0x9643A8", Offset = "0x9643A8", VA = "0x9643A8")]
		public static DcelMesh ToDCEL(Mesh mesh)
		{
			return null;
		}
	}
	[Token(Token = "0x2000381")]
	public class GenericMesher
	{
		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Configuration config;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ITriangulator triangulator;

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x965554", Offset = "0x965554", VA = "0x965554")]
		public GenericMesher()
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x965644", Offset = "0x965644", VA = "0x965644")]
		public GenericMesher(ITriangulator triangulator)
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0x9656B8", Offset = "0x9656B8", VA = "0x9656B8")]
		public GenericMesher(Configuration config)
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x965600", Offset = "0x965600", VA = "0x965600")]
		public GenericMesher(ITriangulator triangulator, Configuration config)
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x965734", Offset = "0x965734", VA = "0x965734")]
		public IMesh Triangulate(IList<TriangleNet.Geometry.Vertex> points)
		{
			return null;
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x9657E4", Offset = "0x9657E4", VA = "0x9657E4")]
		public IMesh Triangulate(IPolygon polygon)
		{
			return null;
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x965A30", Offset = "0x965A30", VA = "0x965A30")]
		public IMesh Triangulate(IPolygon polygon, ConstraintOptions options)
		{
			return null;
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x965A38", Offset = "0x965A38", VA = "0x965A38")]
		public IMesh Triangulate(IPolygon polygon, QualityOptions quality)
		{
			return null;
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x9657F0", Offset = "0x9657F0", VA = "0x9657F0")]
		public IMesh Triangulate(IPolygon polygon, ConstraintOptions options, QualityOptions quality)
		{
			return null;
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x965DCC", Offset = "0x965DCC", VA = "0x965DCC")]
		public static IMesh StructuredMesh(double width, double height, int nx, int ny)
		{
			return null;
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x965ED8", Offset = "0x965ED8", VA = "0x965ED8")]
		public static IMesh StructuredMesh(Rectangle bounds, int nx, int ny)
		{
			return null;
		}
	}
	[Token(Token = "0x2000382")]
	public interface IConstraintMesher
	{
		[Token(Token = "0x6001381")]
		IMesh Triangulate(IPolygon polygon);

		[Token(Token = "0x6001382")]
		IMesh Triangulate(IPolygon polygon, ConstraintOptions options);
	}
	[Token(Token = "0x2000383")]
	public interface IMesh
	{
		[Token(Token = "0x17000224")]
		ICollection<TriangleNet.Geometry.Vertex> Vertices
		{
			[Token(Token = "0x6001383")]
			get;
		}

		[Token(Token = "0x17000225")]
		IEnumerable<Edge> Edges
		{
			[Token(Token = "0x6001384")]
			get;
		}

		[Token(Token = "0x17000226")]
		ICollection<SubSegment> Segments
		{
			[Token(Token = "0x6001385")]
			get;
		}

		[Token(Token = "0x17000227")]
		ICollection<Triangle> Triangles
		{
			[Token(Token = "0x6001386")]
			get;
		}

		[Token(Token = "0x17000228")]
		IList<Point> Holes
		{
			[Token(Token = "0x6001387")]
			get;
		}

		[Token(Token = "0x17000229")]
		Rectangle Bounds
		{
			[Token(Token = "0x6001388")]
			get;
		}

		[Token(Token = "0x6001389")]
		void Renumber();

		[Token(Token = "0x600138A")]
		void Refine(QualityOptions quality, bool delaunay);
	}
	[Token(Token = "0x2000384")]
	public interface IQualityMesher
	{
		[Token(Token = "0x600138B")]
		IMesh Triangulate(IPolygon polygon, QualityOptions quality);

		[Token(Token = "0x600138C")]
		IMesh Triangulate(IPolygon polygon, ConstraintOptions options, QualityOptions quality);
	}
	[Token(Token = "0x2000385")]
	public interface ITriangulator
	{
		[Token(Token = "0x600138D")]
		IMesh Triangulate(IList<TriangleNet.Geometry.Vertex> points, Configuration config);
	}
	[Token(Token = "0x2000386")]
	internal class QualityMesher
	{
		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Queue<BadSubseg> badsubsegs;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BadTriQueue queue;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Mesh mesh;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Behavior behavior;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NewLocation newLocation;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ILog<LogItem> logger;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Triangle newvertex_tri;

		[Token(Token = "0x600138E")]
		[Address(RVA = "0x965A44", Offset = "0x965A44", VA = "0x965A44")]
		public QualityMesher(Mesh mesh, Configuration config)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x965C58", Offset = "0x965C58", VA = "0x965C58")]
		public void Apply(QualityOptions quality, bool delaunay = false)
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x966A8C", Offset = "0x966A8C", VA = "0x966A8C")]
		public void AddBadSubseg(BadSubseg badseg)
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x966AE4", Offset = "0x966AE4", VA = "0x966AE4")]
		public int CheckSeg4Encroach(ref Osub testsubseg)
		{
			return default(int);
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x966DEC", Offset = "0x966DEC", VA = "0x966DEC")]
		public void TestTriangle(ref Otri testtri)
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x9673E8", Offset = "0x9673E8", VA = "0x9673E8")]
		private void TallyEncs()
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x967568", Offset = "0x967568", VA = "0x967568")]
		private void SplitEncSegs(bool triflaws)
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x967DD8", Offset = "0x967DD8", VA = "0x967DD8")]
		private void TallyFaces()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x968068", Offset = "0x968068", VA = "0x968068")]
		private void SplitTriangle(BadTriangle badtri)
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x96683C", Offset = "0x96683C", VA = "0x96683C")]
		private void EnforceQuality()
		{
		}
	}
	[Token(Token = "0x2000387")]
	public class QualityOptions
	{
		[Token(Token = "0x1700022A")]
		public double MaximumAngle
		{
			[Token(Token = "0x6001398")]
			[Address(RVA = "0x968974", Offset = "0x968974", VA = "0x968974")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001399")]
			[Address(RVA = "0x96897C", Offset = "0x96897C", VA = "0x96897C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public double MinimumAngle
		{
			[Token(Token = "0x600139A")]
			[Address(RVA = "0x968984", Offset = "0x968984", VA = "0x968984")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600139B")]
			[Address(RVA = "0x96898C", Offset = "0x96898C", VA = "0x96898C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public double MaximumArea
		{
			[Token(Token = "0x600139C")]
			[Address(RVA = "0x968994", Offset = "0x968994", VA = "0x968994")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600139D")]
			[Address(RVA = "0x96899C", Offset = "0x96899C", VA = "0x96899C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700022D")]
		public Func<ITriangle, double, bool> UserTest
		{
			[Token(Token = "0x600139E")]
			[Address(RVA = "0x9689A4", Offset = "0x9689A4", VA = "0x9689A4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600139F")]
			[Address(RVA = "0x9689AC", Offset = "0x9689AC", VA = "0x9689AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700022E")]
		public bool VariableArea
		{
			[Token(Token = "0x60013A0")]
			[Address(RVA = "0x9689B4", Offset = "0x9689B4", VA = "0x9689B4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013A1")]
			[Address(RVA = "0x9689BC", Offset = "0x9689BC", VA = "0x9689BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700022F")]
		public int SteinerPoints
		{
			[Token(Token = "0x60013A2")]
			[Address(RVA = "0x9689C8", Offset = "0x9689C8", VA = "0x9689C8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013A3")]
			[Address(RVA = "0x9689D0", Offset = "0x9689D0", VA = "0x9689D0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x9689D8", Offset = "0x9689D8", VA = "0x9689D8")]
		public QualityOptions()
		{
		}
	}
}
namespace TriangleNet.Meshing.Iterators
{
	[Token(Token = "0x2000388")]
	public class EdgeIterator : IEnumerator<Edge>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerator<Triangle> triangles;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Otri tri;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Otri neighbor;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Osub sub;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Edge current;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TriangleNet.Geometry.Vertex p1;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TriangleNet.Geometry.Vertex p2;

		[Token(Token = "0x17000230")]
		public Edge Current
		{
			[Token(Token = "0x60013A6")]
			[Address(RVA = "0x968B48", Offset = "0x968B48", VA = "0x968B48", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000231")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013A8")]
			[Address(RVA = "0x968BF0", Offset = "0x968BF0", VA = "0x968BF0", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x9689E0", Offset = "0x9689E0", VA = "0x9689E0")]
		public EdgeIterator(Mesh mesh)
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x968B50", Offset = "0x968B50", VA = "0x968B50", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x968BF8", Offset = "0x968BF8", VA = "0x968BF8", Slot = "6")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x968ED0", Offset = "0x968ED0", VA = "0x968ED0", Slot = "8")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000389")]
	public class RegionIterator
	{
		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Triangle> region;

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x968F74", Offset = "0x968F74", VA = "0x968F74")]
		public RegionIterator(Mesh mesh)
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x968FFC", Offset = "0x968FFC", VA = "0x968FFC")]
		public void Process(Triangle triangle, int boundary = 0)
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x9690E8", Offset = "0x9690E8", VA = "0x9690E8")]
		public void Process(Triangle triangle, Action<Triangle> action, int boundary = 0)
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x969374", Offset = "0x969374", VA = "0x969374")]
		private void ProcessRegion(Action<Triangle> action, Func<SubSegment, bool> protector)
		{
		}
	}
	[Token(Token = "0x200038D")]
	public class VertexCirculator
	{
		[Token(Token = "0x200038E")]
		[CompilerGenerated]
		private sealed class <EnumerateVertices>d__2 : IEnumerable<TriangleNet.Geometry.Vertex>, IEnumerable, IEnumerator<TriangleNet.Geometry.Vertex>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private TriangleNet.Geometry.Vertex <>2__current;

			[Token(Token = "0x40011A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40011A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VertexCirculator <>4__this;

			[Token(Token = "0x40011AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TriangleNet.Geometry.Vertex vertex;

			[Token(Token = "0x40011AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public TriangleNet.Geometry.Vertex <>3__vertex;

			[Token(Token = "0x40011AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<Otri>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000232")]
			private TriangleNet.Geometry.Vertex System.Collections.Generic.IEnumerator<TriangleNet.Geometry.Vertex>.Current
			{
				[Token(Token = "0x60013BE")]
				[Address(RVA = "0x969E60", Offset = "0x969E60", VA = "0x969E60", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000233")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013C0")]
				[Address(RVA = "0x969EA8", Offset = "0x969EA8", VA = "0x969EA8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013BA")]
			[Address(RVA = "0x9698A4", Offset = "0x9698A4", VA = "0x9698A4")]
			[DebuggerHidden]
			public <EnumerateVertices>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60013BB")]
			[Address(RVA = "0x969C2C", Offset = "0x969C2C", VA = "0x969C2C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013BC")]
			[Address(RVA = "0x969C48", Offset = "0x969C48", VA = "0x969C48", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013BD")]
			[Address(RVA = "0x969E10", Offset = "0x969E10", VA = "0x969E10")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60013BF")]
			[Address(RVA = "0x969E68", Offset = "0x969E68", VA = "0x969E68", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60013C1")]
			[Address(RVA = "0x969EB0", Offset = "0x969EB0", VA = "0x969EB0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<TriangleNet.Geometry.Vertex> System.Collections.Generic.IEnumerable<TriangleNet.Geometry.Vertex>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60013C2")]
			[Address(RVA = "0x969F6C", Offset = "0x969F6C", VA = "0x969F6C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200038F")]
		[CompilerGenerated]
		private sealed class <EnumerateTriangles>d__3 : IEnumerable<ITriangle>, IEnumerable, IEnumerator<ITriangle>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private ITriangle <>2__current;

			[Token(Token = "0x40011AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40011B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VertexCirculator <>4__this;

			[Token(Token = "0x40011B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TriangleNet.Geometry.Vertex vertex;

			[Token(Token = "0x40011B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public TriangleNet.Geometry.Vertex <>3__vertex;

			[Token(Token = "0x40011B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<Otri>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000234")]
			private ITriangle System.Collections.Generic.IEnumerator<TriangleNet.Geometry.ITriangle>.Current
			{
				[Token(Token = "0x60013C7")]
				[Address(RVA = "0x96A188", Offset = "0x96A188", VA = "0x96A188", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000235")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013C9")]
				[Address(RVA = "0x96A1D0", Offset = "0x96A1D0", VA = "0x96A1D0", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013C3")]
			[Address(RVA = "0x969978", Offset = "0x969978", VA = "0x969978")]
			[DebuggerHidden]
			public <EnumerateTriangles>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60013C4")]
			[Address(RVA = "0x969F70", Offset = "0x969F70", VA = "0x969F70", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013C5")]
			[Address(RVA = "0x969F8C", Offset = "0x969F8C", VA = "0x969F8C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013C6")]
			[Address(RVA = "0x96A138", Offset = "0x96A138", VA = "0x96A138")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60013C8")]
			[Address(RVA = "0x96A190", Offset = "0x96A190", VA = "0x96A190", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60013CA")]
			[Address(RVA = "0x96A1D8", Offset = "0x96A1D8", VA = "0x96A1D8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<ITriangle> System.Collections.Generic.IEnumerable<TriangleNet.Geometry.ITriangle>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60013CB")]
			[Address(RVA = "0x96A294", Offset = "0x96A294", VA = "0x96A294", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Otri> cache;

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x969760", Offset = "0x969760", VA = "0x969760")]
		public VertexCirculator(Mesh mesh)
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x969804", Offset = "0x969804", VA = "0x969804")]
		[IteratorStateMachine(typeof(<EnumerateVertices>d__2))]
		public IEnumerable<TriangleNet.Geometry.Vertex> EnumerateVertices(TriangleNet.Geometry.Vertex vertex)
		{
			return null;
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x9698D8", Offset = "0x9698D8", VA = "0x9698D8")]
		[IteratorStateMachine(typeof(<EnumerateTriangles>d__3))]
		public IEnumerable<ITriangle> EnumerateTriangles(TriangleNet.Geometry.Vertex vertex)
		{
			return null;
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x9699AC", Offset = "0x9699AC", VA = "0x9699AC")]
		private void BuildCache(TriangleNet.Geometry.Vertex vertex, bool vertices)
		{
		}
	}
}
namespace TriangleNet.Meshing.Data
{
	[Token(Token = "0x2000390")]
	internal class BadSubseg
	{
		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Osub subseg;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TriangleNet.Geometry.Vertex org;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TriangleNet.Geometry.Vertex dest;

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0x96A298", Offset = "0x96A298", VA = "0x96A298", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0x96A2B4", Offset = "0x96A2B4", VA = "0x96A2B4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0x966DE4", Offset = "0x966DE4", VA = "0x966DE4")]
		public BadSubseg()
		{
		}
	}
	[Token(Token = "0x2000391")]
	internal class BadTriangle
	{
		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Otri poortri;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double key;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TriangleNet.Geometry.Vertex org;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TriangleNet.Geometry.Vertex dest;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TriangleNet.Geometry.Vertex apex;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BadTriangle next;

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0x96A33C", Offset = "0x96A33C", VA = "0x96A33C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0x96A3C4", Offset = "0x96A3C4", VA = "0x96A3C4")]
		public BadTriangle()
		{
		}
	}
	[Token(Token = "0x2000392")]
	internal class BadTriQueue
	{
		[Token(Token = "0x40011BD")]
		private const double SQRT2 = 1.4142135623730951;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BadTriangle[] queuefront;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BadTriangle[] queuetail;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] nextnonemptyq;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int firstnonemptyq;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int count;

		[Token(Token = "0x17000236")]
		public int Count
		{
			[Token(Token = "0x60013D1")]
			[Address(RVA = "0x96A3CC", Offset = "0x96A3CC", VA = "0x96A3CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0x966778", Offset = "0x966778", VA = "0x966778")]
		public BadTriQueue()
		{
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0x96874C", Offset = "0x96874C", VA = "0x96874C")]
		public void Enqueue(BadTriangle badtri)
		{
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0x967310", Offset = "0x967310", VA = "0x967310")]
		public void Enqueue(ref Otri enqtri, double minedge, TriangleNet.Geometry.Vertex apex, TriangleNet.Geometry.Vertex org, TriangleNet.Geometry.Vertex dest)
		{
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x968650", Offset = "0x968650", VA = "0x968650")]
		public BadTriangle Dequeue()
		{
			return null;
		}
	}
}
namespace TriangleNet.Meshing.Algorithm
{
	[Token(Token = "0x2000393")]
	public class Dwyer : ITriangulator
	{
		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UseDwyer;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TriangleNet.Geometry.Vertex[] sortarray;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Mesh mesh;

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x96A3D4", Offset = "0x96A3D4", VA = "0x96A3D4", Slot = "4")]
		public IMesh Triangulate(IList<TriangleNet.Geometry.Vertex> points, Configuration config)
		{
			return null;
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x96B590", Offset = "0x96B590", VA = "0x96B590")]
		private void MergeHulls(ref Otri farleft, ref Otri innerleft, ref Otri innerright, ref Otri farright, int axis)
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x96AB78", Offset = "0x96AB78", VA = "0x96AB78")]
		private void DivconqRecurse(int left, int right, int axis, ref Otri farleft, ref Otri farright)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x96B41C", Offset = "0x96B41C", VA = "0x96B41C")]
		private int RemoveGhosts(ref Otri startghost)
		{
			return default(int);
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x9655F0", Offset = "0x9655F0", VA = "0x9655F0")]
		public Dwyer()
		{
		}
	}
	[Token(Token = "0x2000394")]
	public class Incremental : ITriangulator
	{
		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh mesh;

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x96C368", Offset = "0x96C368", VA = "0x96C368", Slot = "4")]
		public IMesh Triangulate(IList<TriangleNet.Geometry.Vertex> points, Configuration config)
		{
			return null;
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x96C784", Offset = "0x96C784", VA = "0x96C784")]
		private void GetBoundingBox()
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x96C9B8", Offset = "0x96C9B8", VA = "0x96C9B8")]
		private int RemoveBox()
		{
			return default(int);
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0x96CC04", Offset = "0x96CC04", VA = "0x96CC04")]
		public Incremental()
		{
		}
	}
	[Token(Token = "0x2000395")]
	public class SweepLine : ITriangulator
	{
		[Token(Token = "0x2000396")]
		private class SweepEvent
		{
			[Token(Token = "0x40011CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double xkey;

			[Token(Token = "0x40011CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public double ykey;

			[Token(Token = "0x40011D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TriangleNet.Geometry.Vertex vertexEvent;

			[Token(Token = "0x40011D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Otri otriEvent;

			[Token(Token = "0x40011D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int heapposition;

			[Token(Token = "0x60013EF")]
			[Address(RVA = "0x96E480", Offset = "0x96E480", VA = "0x96E480")]
			public SweepEvent()
			{
			}
		}

		[Token(Token = "0x2000397")]
		private class SweepEventVertex : TriangleNet.Geometry.Vertex
		{
			[Token(Token = "0x40011D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public SweepEvent evt;

			[Token(Token = "0x60013F0")]
			[Address(RVA = "0x96E700", Offset = "0x96E700", VA = "0x96E700")]
			public SweepEventVertex(SweepEvent e)
			{
			}
		}

		[Token(Token = "0x2000398")]
		private class SplayNode
		{
			[Token(Token = "0x40011D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Otri keyedge;

			[Token(Token = "0x40011D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TriangleNet.Geometry.Vertex keydest;

			[Token(Token = "0x40011D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SplayNode lchild;

			[Token(Token = "0x40011D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SplayNode rchild;

			[Token(Token = "0x60013F1")]
			[Address(RVA = "0x96EEE4", Offset = "0x96EEE4", VA = "0x96EEE4")]
			public SplayNode()
			{
			}
		}

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int randomseed;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int SAMPLERATE;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double xminextreme;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<SplayNode> splaynodes;

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x96CC0C", Offset = "0x96CC0C", VA = "0x96CC0C")]
		private static int randomnation(int choices)
		{
			return default(int);
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x96CCAC", Offset = "0x96CCAC", VA = "0x96CCAC", Slot = "4")]
		public IMesh Triangulate(IList<TriangleNet.Geometry.Vertex> points, Configuration config)
		{
			return null;
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0x96E5C4", Offset = "0x96E5C4", VA = "0x96E5C4")]
		private void HeapInsert(SweepEvent[] heap, int heapsize, SweepEvent newevent)
		{
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x96E89C", Offset = "0x96E89C", VA = "0x96E89C")]
		private void Heapify(SweepEvent[] heap, int heapsize, int eventnum)
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x96DE18", Offset = "0x96DE18", VA = "0x96DE18")]
		private void HeapDelete(SweepEvent[] heap, int heapsize, int eventnum)
		{
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x96DBE4", Offset = "0x96DBE4", VA = "0x96DBE4")]
		private void CreateHeap(out SweepEvent[] eventheap, int size)
		{
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0x96EA74", Offset = "0x96EA74", VA = "0x96EA74")]
		private SplayNode Splay(SplayNode splaytree, Point searchpoint, ref Otri searchtri)
		{
			return null;
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0x96E2CC", Offset = "0x96E2CC", VA = "0x96E2CC")]
		private SplayNode SplayInsert(SplayNode splayroot, Otri newkey, Point searchpoint)
		{
			return null;
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x96E224", Offset = "0x96E224", VA = "0x96E224")]
		private SplayNode FrontLocate(SplayNode splayroot, Otri bottommost, TriangleNet.Geometry.Vertex searchvertex, ref Otri searchtri, ref bool farright)
		{
			return null;
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0x96E070", Offset = "0x96E070", VA = "0x96E070")]
		private SplayNode CircleTopInsert(SplayNode splayroot, Otri newkey, TriangleNet.Geometry.Vertex pa, TriangleNet.Geometry.Vertex pb, TriangleNet.Geometry.Vertex pc, double topy)
		{
			return null;
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x96EDAC", Offset = "0x96EDAC", VA = "0x96EDAC")]
		private bool RightOfHyperbola(ref Otri fronttri, Point newsite)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x96E488", Offset = "0x96E488", VA = "0x96E488")]
		private double CircleTop(TriangleNet.Geometry.Vertex pa, TriangleNet.Geometry.Vertex pb, TriangleNet.Geometry.Vertex pc, double ccwabc)
		{
			return default(double);
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x96DF78", Offset = "0x96DF78", VA = "0x96DF78")]
		private void Check4DeadEvent(ref Otri checktri, SweepEvent[] eventheap, ref int heapsize)
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x96E730", Offset = "0x96E730", VA = "0x96E730")]
		private int RemoveGhosts(ref Otri startghost)
		{
			return default(int);
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x96EEEC", Offset = "0x96EEEC", VA = "0x96EEEC")]
		public SweepLine()
		{
		}
	}
}
namespace TriangleNet.Logging
{
	[Token(Token = "0x2000399")]
	public enum LogLevel
	{
		[Token(Token = "0x40011D9")]
		Info,
		[Token(Token = "0x40011DA")]
		Warning,
		[Token(Token = "0x40011DB")]
		Error
	}
	[Token(Token = "0x200039A")]
	public interface ILog<T> where T : ILogItem
	{
		[Token(Token = "0x17000237")]
		IList<T> Data
		{
			[Token(Token = "0x60013F7")]
			get;
		}

		[Token(Token = "0x17000238")]
		LogLevel Level
		{
			[Token(Token = "0x60013F8")]
			get;
		}

		[Token(Token = "0x60013F2")]
		void Add(T item);

		[Token(Token = "0x60013F3")]
		void Clear();

		[Token(Token = "0x60013F4")]
		void Info(string message);

		[Token(Token = "0x60013F5")]
		void Error(string message, string info);

		[Token(Token = "0x60013F6")]
		void Warning(string message, string info);
	}
	[Token(Token = "0x200039B")]
	public interface ILogItem
	{
		[Token(Token = "0x17000239")]
		DateTime Time
		{
			[Token(Token = "0x60013F9")]
			get;
		}

		[Token(Token = "0x1700023A")]
		LogLevel Level
		{
			[Token(Token = "0x60013FA")]
			get;
		}

		[Token(Token = "0x1700023B")]
		string Message
		{
			[Token(Token = "0x60013FB")]
			get;
		}

		[Token(Token = "0x1700023C")]
		string Info
		{
			[Token(Token = "0x60013FC")]
			get;
		}
	}
	[Token(Token = "0x200039C")]
	public class LogItem : ILogItem
	{
		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DateTime time;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LogLevel level;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string message;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string info;

		[Token(Token = "0x1700023D")]
		public DateTime Time
		{
			[Token(Token = "0x60013FD")]
			[Address(RVA = "0x96EF44", Offset = "0x96EF44", VA = "0x96EF44", Slot = "4")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x1700023E")]
		public LogLevel Level
		{
			[Token(Token = "0x60013FE")]
			[Address(RVA = "0x96EF4C", Offset = "0x96EF4C", VA = "0x96EF4C", Slot = "5")]
			get
			{
				return default(LogLevel);
			}
		}

		[Token(Token = "0x1700023F")]
		public string Message
		{
			[Token(Token = "0x60013FF")]
			[Address(RVA = "0x96EF54", Offset = "0x96EF54", VA = "0x96EF54", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000240")]
		public string Info
		{
			[Token(Token = "0x6001400")]
			[Address(RVA = "0x96EF5C", Offset = "0x96EF5C", VA = "0x96EF5C", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0x96EF64", Offset = "0x96EF64", VA = "0x96EF64")]
		public LogItem(LogLevel level, string message)
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x96EFC4", Offset = "0x96EFC4", VA = "0x96EFC4")]
		public LogItem(LogLevel level, string message, string info)
		{
		}
	}
}
namespace TriangleNet.IO
{
	[Token(Token = "0x200039D")]
	internal class DebugWriter
	{
		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NumberFormatInfo nfi;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int iteration;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string session;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StreamWriter stream;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string tmpFile;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] vertices;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int triangles;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly DebugWriter instance;

		[Token(Token = "0x17000241")]
		public static DebugWriter Session
		{
			[Token(Token = "0x6001405")]
			[Address(RVA = "0x96F134", Offset = "0x96F134", VA = "0x96F134")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0x96F068", Offset = "0x96F068", VA = "0x96F068")]
		static DebugWriter()
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0x96F12C", Offset = "0x96F12C", VA = "0x96F12C")]
		private DebugWriter()
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0x96F18C", Offset = "0x96F18C", VA = "0x96F18C")]
		public void Start(string session)
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x96F2A8", Offset = "0x96F2A8", VA = "0x96F2A8")]
		public void Write(Mesh mesh, bool skip = false)
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x9702CC", Offset = "0x9702CC", VA = "0x9702CC")]
		public void Finish()
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0x970324", Offset = "0x970324", VA = "0x970324")]
		private void Finish(string path)
		{
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0x970750", Offset = "0x970750", VA = "0x970750")]
		private void WriteGeometry(IPolygon geometry)
		{
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0x96F374", Offset = "0x96F374", VA = "0x96F374")]
		private void WriteMesh(Mesh mesh, bool skip)
		{
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0x9707F0", Offset = "0x9707F0", VA = "0x9707F0")]
		private bool VerticesChanged(Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x970BF0", Offset = "0x970BF0", VA = "0x970BF0")]
		private void HashVertices(Mesh mesh)
		{
		}
	}
	[Token(Token = "0x200039E")]
	public static class FileProcessor
	{
		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<IFileFormat> formats;

		[Token(Token = "0x600140E")]
		[Address(RVA = "0x971054", Offset = "0x971054", VA = "0x971054")]
		static FileProcessor()
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0x9711A8", Offset = "0x9711A8", VA = "0x9711A8")]
		public static void Add(IFileFormat format)
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x971280", Offset = "0x971280", VA = "0x971280")]
		public static bool IsSupported(string file)
		{
			return default(bool);
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0x971480", Offset = "0x971480", VA = "0x971480")]
		public static IPolygon Read(string filename)
		{
			return null;
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0x971774", Offset = "0x971774", VA = "0x971774")]
		public static void Write(IPolygon polygon, string filename)
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0x971A6C", Offset = "0x971A6C", VA = "0x971A6C")]
		public static IMesh Import(string filename)
		{
			return null;
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0x971D60", Offset = "0x971D60", VA = "0x971D60")]
		public static void Write(IMesh mesh, string filename)
		{
		}
	}
	[Token(Token = "0x200039F")]
	public interface IFileFormat
	{
		[Token(Token = "0x6001415")]
		bool IsSupported(string file);
	}
	[Token(Token = "0x20003A0")]
	public interface IMeshFormat : IFileFormat
	{
		[Token(Token = "0x6001416")]
		IMesh Import(string filename);

		[Token(Token = "0x6001417")]
		void Write(IMesh mesh, string filename);

		[Token(Token = "0x6001418")]
		void Write(IMesh mesh, Stream stream);
	}
	[Token(Token = "0x20003A1")]
	public class InputTriangle : ITriangle
	{
		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int[] vertices;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int label;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal double area;

		[Token(Token = "0x17000242")]
		public int ID
		{
			[Token(Token = "0x600141A")]
			[Address(RVA = "0x972058", Offset = "0x972058", VA = "0x972058", Slot = "4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600141B")]
			[Address(RVA = "0x972060", Offset = "0x972060", VA = "0x972060", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000243")]
		public int Label
		{
			[Token(Token = "0x600141C")]
			[Address(RVA = "0x972064", Offset = "0x972064", VA = "0x972064", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600141D")]
			[Address(RVA = "0x97206C", Offset = "0x97206C", VA = "0x97206C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000244")]
		public double Area
		{
			[Token(Token = "0x600141E")]
			[Address(RVA = "0x972074", Offset = "0x972074", VA = "0x972074", Slot = "8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600141F")]
			[Address(RVA = "0x97207C", Offset = "0x97207C", VA = "0x97207C", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0x9666C8", Offset = "0x9666C8", VA = "0x9666C8")]
		public InputTriangle(int p0, int p1, int p2)
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0x972084", Offset = "0x972084", VA = "0x972084", Slot = "10")]
		public TriangleNet.Geometry.Vertex GetVertex(int index)
		{
			return null;
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0x97208C", Offset = "0x97208C", VA = "0x97208C", Slot = "11")]
		public int GetVertexID(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x9720BC", Offset = "0x9720BC", VA = "0x9720BC", Slot = "12")]
		public ITriangle GetNeighbor(int index)
		{
			return null;
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0x9720C4", Offset = "0x9720C4", VA = "0x9720C4", Slot = "13")]
		public int GetNeighborID(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0x9720CC", Offset = "0x9720CC", VA = "0x9720CC", Slot = "14")]
		public ISegment GetSegment(int index)
		{
			return null;
		}
	}
	[Token(Token = "0x20003A2")]
	public interface IPolygonFormat : IFileFormat
	{
		[Token(Token = "0x6001425")]
		IPolygon Read(string filename);

		[Token(Token = "0x6001426")]
		void Write(IPolygon polygon, string filename);

		[Token(Token = "0x6001427")]
		void Write(IPolygon polygon, Stream stream);
	}
	[Token(Token = "0x20003A3")]
	public class TriangleFormat : IPolygonFormat, IFileFormat, IMeshFormat
	{
		[Token(Token = "0x6001428")]
		[Address(RVA = "0x9720D4", Offset = "0x9720D4", VA = "0x9720D4", Slot = "7")]
		public bool IsSupported(string file)
		{
			return default(bool);
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0x9721C0", Offset = "0x9721C0", VA = "0x9721C0", Slot = "8")]
		public IMesh Import(string filename)
		{
			return null;
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0x972494", Offset = "0x972494", VA = "0x972494", Slot = "9")]
		public void Write(IMesh mesh, string filename)
		{
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x972D88", Offset = "0x972D88", VA = "0x972D88", Slot = "10")]
		public void Write(IMesh mesh, Stream stream)
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x972DC8", Offset = "0x972DC8", VA = "0x972DC8", Slot = "4")]
		public IPolygon Read(string filename)
		{
			return null;
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x972F6C", Offset = "0x972F6C", VA = "0x972F6C", Slot = "5")]
		public void Write(IPolygon polygon, string filename)
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x9742CC", Offset = "0x9742CC", VA = "0x9742CC", Slot = "6")]
		public void Write(IPolygon polygon, Stream stream)
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x9711A0", Offset = "0x9711A0", VA = "0x9711A0")]
		public TriangleFormat()
		{
		}
	}
	[Token(Token = "0x20003A4")]
	public class TriangleReader
	{
		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NumberFormatInfo nfi;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int startIndex;

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x97430C", Offset = "0x97430C", VA = "0x97430C")]
		public static bool IsNullOrWhiteSpace(string value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x974330", Offset = "0x974330", VA = "0x974330")]
		private bool TryReadLine(StreamReader reader, out string[] token)
		{
			return default(bool);
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x9744C0", Offset = "0x9744C0", VA = "0x9744C0")]
		private void ReadVertex(List<TriangleNet.Geometry.Vertex> data, int index, string[] line, int attributes, int marks)
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x97467C", Offset = "0x97467C", VA = "0x97467C")]
		public void Read(string filename, out Polygon polygon)
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x97239C", Offset = "0x97239C", VA = "0x97239C")]
		public void Read(string filename, out Polygon geometry, out List<ITriangle> triangles)
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x974790", Offset = "0x974790", VA = "0x974790")]
		public IPolygon Read(string filename)
		{
			return null;
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x972F58", Offset = "0x972F58", VA = "0x972F58")]
		public Polygon ReadNodeFile(string nodefilename)
		{
			return null;
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x9747AC", Offset = "0x9747AC", VA = "0x9747AC")]
		public Polygon ReadNodeFile(string nodefilename, bool readElements)
		{
			return null;
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x972F60", Offset = "0x972F60", VA = "0x972F60")]
		public Polygon ReadPolyFile(string polyfilename)
		{
			return null;
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x976814", Offset = "0x976814", VA = "0x976814")]
		public Polygon ReadPolyFile(string polyfilename, bool readElements)
		{
			return null;
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x9754B4", Offset = "0x9754B4", VA = "0x9754B4")]
		public Polygon ReadPolyFile(string polyfilename, bool readElements, bool readArea)
		{
			return null;
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x974788", Offset = "0x974788", VA = "0x974788")]
		public List<ITriangle> ReadEleFile(string elefilename)
		{
			return null;
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x974D68", Offset = "0x974D68", VA = "0x974D68")]
		private List<ITriangle> ReadEleFile(string elefilename, bool readArea)
		{
			return null;
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x976820", Offset = "0x976820", VA = "0x976820")]
		private double[] ReadAreaFile(string areafilename, int intriangles)
		{
			return null;
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0x976D1C", Offset = "0x976D1C", VA = "0x976D1C")]
		public List<Edge> ReadEdgeFile(string edgeFile, int invertices)
		{
			return null;
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x972394", Offset = "0x972394", VA = "0x972394")]
		public TriangleReader()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	public class TriangleWriter
	{
		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NumberFormatInfo nfi;

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x9775B0", Offset = "0x9775B0", VA = "0x9775B0")]
		public void Write(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x977674", Offset = "0x977674", VA = "0x977674")]
		public void WriteNodes(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x97780C", Offset = "0x97780C", VA = "0x97780C")]
		private void WriteNodes(StreamWriter writer, Mesh mesh)
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x977C90", Offset = "0x977C90", VA = "0x977C90")]
		private void WriteNodes(StreamWriter writer, IEnumerable<TriangleNet.Geometry.Vertex> nodes, bool markers, int attribs, bool jettison)
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x972610", Offset = "0x972610", VA = "0x972610")]
		public void WriteElements(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x972FE0", Offset = "0x972FE0", VA = "0x972FE0")]
		public void WritePoly(IPolygon polygon, string filename)
		{
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x972608", Offset = "0x972608", VA = "0x972608")]
		public void WritePoly(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x9780F4", Offset = "0x9780F4", VA = "0x9780F4")]
		public void WritePoly(Mesh mesh, string filename, bool writeNodes)
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0x978E7C", Offset = "0x978E7C", VA = "0x978E7C")]
		public void WriteEdges(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0x979AB8", Offset = "0x979AB8", VA = "0x979AB8")]
		public void WriteNeighbors(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0x972600", Offset = "0x972600", VA = "0x972600")]
		public TriangleWriter()
		{
		}
	}
}
namespace TriangleNet.Geometry
{
	[Token(Token = "0x20003A6")]
	public class Contour
	{
		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int marker;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool convex;

		[Token(Token = "0x17000245")]
		public List<Vertex> Points
		{
			[Token(Token = "0x600144D")]
			[Address(RVA = "0x97A1F8", Offset = "0x97A1F8", VA = "0x97A1F8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600144E")]
			[Address(RVA = "0x97A200", Offset = "0x97A200", VA = "0x97A200")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x97A208", Offset = "0x97A208", VA = "0x97A208")]
		public Contour(IEnumerable<Vertex> points)
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x97A288", Offset = "0x97A288", VA = "0x97A288")]
		public Contour(IEnumerable<Vertex> points, int marker)
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x97A240", Offset = "0x97A240", VA = "0x97A240")]
		public Contour(IEnumerable<Vertex> points, int marker, bool convex)
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x97A3F4", Offset = "0x97A3F4", VA = "0x97A3F4")]
		public List<ISegment> GetSegments()
		{
			return null;
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x97A674", Offset = "0x97A674", VA = "0x97A674")]
		public Point FindInteriorPoint(int limit = 5, double eps = 2E-05)
		{
			return null;
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x97A2C4", Offset = "0x97A2C4", VA = "0x97A2C4")]
		private void AddPoints(IEnumerable<Vertex> points)
		{
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0x97A7C8", Offset = "0x97A7C8", VA = "0x97A7C8")]
		private static Point FindPointInPolygon(List<Vertex> contour, int limit, double eps)
		{
			return null;
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0x97ABA8", Offset = "0x97ABA8", VA = "0x97ABA8")]
		private static bool IsPointInPolygon(Point point, List<Vertex> poly)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003A8")]
	public class Edge : IEdge
	{
		[Token(Token = "0x17000246")]
		public int P0
		{
			[Token(Token = "0x600145A")]
			[Address(RVA = "0x97AE58", Offset = "0x97AE58", VA = "0x97AE58", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600145B")]
			[Address(RVA = "0x97AE60", Offset = "0x97AE60", VA = "0x97AE60")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000247")]
		public int P1
		{
			[Token(Token = "0x600145C")]
			[Address(RVA = "0x97AE68", Offset = "0x97AE68", VA = "0x97AE68", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600145D")]
			[Address(RVA = "0x97AE70", Offset = "0x97AE70", VA = "0x97AE70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public int Label
		{
			[Token(Token = "0x600145E")]
			[Address(RVA = "0x97AE78", Offset = "0x97AE78", VA = "0x97AE78", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600145F")]
			[Address(RVA = "0x97AE80", Offset = "0x97AE80", VA = "0x97AE80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x97AE88", Offset = "0x97AE88", VA = "0x97AE88")]
		public Edge(int p0, int p1)
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x968E94", Offset = "0x968E94", VA = "0x968E94")]
		public Edge(int p0, int p1, int label)
		{
		}
	}
	[Token(Token = "0x20003A9")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x6001462")]
		[Address(RVA = "0x97AEB8", Offset = "0x97AEB8", VA = "0x97AEB8")]
		public static IMesh Triangulate(this IPolygon polygon)
		{
			return null;
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0x97AF20", Offset = "0x97AF20", VA = "0x97AF20")]
		public static IMesh Triangulate(this IPolygon polygon, ConstraintOptions options)
		{
			return null;
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0x97AF94", Offset = "0x97AF94", VA = "0x97AF94")]
		public static IMesh Triangulate(this IPolygon polygon, QualityOptions quality)
		{
			return null;
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0x97B008", Offset = "0x97B008", VA = "0x97B008")]
		public static IMesh Triangulate(this IPolygon polygon, ConstraintOptions options, QualityOptions quality)
		{
			return null;
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0x97B080", Offset = "0x97B080", VA = "0x97B080")]
		public static IMesh Triangulate(this IPolygon polygon, ConstraintOptions options, QualityOptions quality, ITriangulator triangulator)
		{
			return null;
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0x97B108", Offset = "0x97B108", VA = "0x97B108")]
		public static bool Contains(this ITriangle triangle, Point p)
		{
			return default(bool);
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0x97B120", Offset = "0x97B120", VA = "0x97B120")]
		public static bool Contains(this ITriangle triangle, double x, double y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0x97B428", Offset = "0x97B428", VA = "0x97B428")]
		public static Rectangle Bounds(this ITriangle triangle)
		{
			return null;
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0x97B400", Offset = "0x97B400", VA = "0x97B400")]
		internal static double DotProduct(Point p, Point q)
		{
			return default(double);
		}
	}
	[Token(Token = "0x20003AA")]
	public interface IEdge
	{
		[Token(Token = "0x17000249")]
		int P0
		{
			[Token(Token = "0x600146B")]
			get;
		}

		[Token(Token = "0x1700024A")]
		int P1
		{
			[Token(Token = "0x600146C")]
			get;
		}

		[Token(Token = "0x1700024B")]
		int Label
		{
			[Token(Token = "0x600146D")]
			get;
		}
	}
	[Token(Token = "0x20003AB")]
	public interface IPolygon
	{
		[Token(Token = "0x1700024C")]
		List<Vertex> Points
		{
			[Token(Token = "0x600146E")]
			get;
		}

		[Token(Token = "0x1700024D")]
		List<ISegment> Segments
		{
			[Token(Token = "0x600146F")]
			get;
		}

		[Token(Token = "0x1700024E")]
		List<Point> Holes
		{
			[Token(Token = "0x6001470")]
			get;
		}

		[Token(Token = "0x1700024F")]
		List<RegionPointer> Regions
		{
			[Token(Token = "0x6001471")]
			get;
		}

		[Token(Token = "0x17000250")]
		bool HasPointMarkers
		{
			[Token(Token = "0x6001472")]
			get;
			[Token(Token = "0x6001473")]
			set;
		}

		[Token(Token = "0x17000251")]
		bool HasSegmentMarkers
		{
			[Token(Token = "0x6001474")]
			get;
			[Token(Token = "0x6001475")]
			set;
		}

		[Token(Token = "0x6001476")]
		[Obsolete("Use polygon.Add(contour) method instead.")]
		void AddContour(IEnumerable<Vertex> points, int marker, bool hole, bool convex);

		[Token(Token = "0x6001477")]
		[Obsolete("Use polygon.Add(contour) method instead.")]
		void AddContour(IEnumerable<Vertex> points, int marker, Point hole);

		[Token(Token = "0x6001478")]
		Rectangle Bounds();

		[Token(Token = "0x6001479")]
		void Add(Vertex vertex);

		[Token(Token = "0x600147A")]
		void Add(ISegment segment, bool insert = false);

		[Token(Token = "0x600147B")]
		void Add(ISegment segment, int index);

		[Token(Token = "0x600147C")]
		void Add(Contour contour, bool hole = false);

		[Token(Token = "0x600147D")]
		void Add(Contour contour, Point hole);
	}
	[Token(Token = "0x20003AC")]
	public interface ISegment : IEdge
	{
		[Token(Token = "0x600147E")]
		Vertex GetVertex(int index);

		[Token(Token = "0x600147F")]
		ITriangle GetTriangle(int index);
	}
	[Token(Token = "0x20003AD")]
	public interface ITriangle
	{
		[Token(Token = "0x17000252")]
		int ID
		{
			[Token(Token = "0x6001480")]
			get;
			[Token(Token = "0x6001481")]
			set;
		}

		[Token(Token = "0x17000253")]
		int Label
		{
			[Token(Token = "0x6001482")]
			get;
			[Token(Token = "0x6001483")]
			set;
		}

		[Token(Token = "0x17000254")]
		double Area
		{
			[Token(Token = "0x6001484")]
			get;
			[Token(Token = "0x6001485")]
			set;
		}

		[Token(Token = "0x6001486")]
		Vertex GetVertex(int index);

		[Token(Token = "0x6001487")]
		int GetVertexID(int index);

		[Token(Token = "0x6001488")]
		ITriangle GetNeighbor(int index);

		[Token(Token = "0x6001489")]
		int GetNeighborID(int index);

		[Token(Token = "0x600148A")]
		ISegment GetSegment(int index);
	}
	[Token(Token = "0x20003AE")]
	public class Point : IComparable<Point>, IEquatable<Point>
	{
		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int id;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int label;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal double x;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal double y;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal double z;

		[Token(Token = "0x17000255")]
		public int ID
		{
			[Token(Token = "0x600148E")]
			[Address(RVA = "0x97B5B8", Offset = "0x97B5B8", VA = "0x97B5B8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600148F")]
			[Address(RVA = "0x97B5C0", Offset = "0x97B5C0", VA = "0x97B5C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000256")]
		public double X
		{
			[Token(Token = "0x6001490")]
			[Address(RVA = "0x97B5C8", Offset = "0x97B5C8", VA = "0x97B5C8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001491")]
			[Address(RVA = "0x97B5D0", Offset = "0x97B5D0", VA = "0x97B5D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000257")]
		public double Y
		{
			[Token(Token = "0x6001492")]
			[Address(RVA = "0x97B5D8", Offset = "0x97B5D8", VA = "0x97B5D8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001493")]
			[Address(RVA = "0x97B5E0", Offset = "0x97B5E0", VA = "0x97B5E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000258")]
		public double Z
		{
			[Token(Token = "0x6001494")]
			[Address(RVA = "0x97B5E8", Offset = "0x97B5E8", VA = "0x97B5E8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001495")]
			[Address(RVA = "0x97B5F0", Offset = "0x97B5F0", VA = "0x97B5F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000259")]
		public int Label
		{
			[Token(Token = "0x6001496")]
			[Address(RVA = "0x97B5F8", Offset = "0x97B5F8", VA = "0x97B5F8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001497")]
			[Address(RVA = "0x97B600", Offset = "0x97B600", VA = "0x97B600")]
			set
			{
			}
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0x97B528", Offset = "0x97B528", VA = "0x97B528")]
		public Point()
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x97B588", Offset = "0x97B588", VA = "0x97B588")]
		public Point(double x, double y)
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0x97B54C", Offset = "0x97B54C", VA = "0x97B54C")]
		public Point(double x, double y, int label)
		{
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0x97B608", Offset = "0x97B608", VA = "0x97B608")]
		public static bool operator ==(Point a, Point b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0x97B684", Offset = "0x97B684", VA = "0x97B684")]
		public static bool operator !=(Point a, Point b)
		{
			return default(bool);
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0x97B6D0", Offset = "0x97B6D0", VA = "0x97B6D0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0x97B654", Offset = "0x97B654", VA = "0x97B654", Slot = "5")]
		public bool Equals(Point p)
		{
			return default(bool);
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0x97B778", Offset = "0x97B778", VA = "0x97B778", Slot = "4")]
		public int CompareTo(Point other)
		{
			return default(int);
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0x97B7DC", Offset = "0x97B7DC", VA = "0x97B7DC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0x97B8C4", Offset = "0x97B8C4", VA = "0x97B8C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003AF")]
	public class Polygon : IPolygon
	{
		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Vertex> points;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Point> holes;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<RegionPointer> regions;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ISegment> segments;

		[Token(Token = "0x1700025A")]
		public List<Vertex> Points
		{
			[Token(Token = "0x600149F")]
			[Address(RVA = "0x97B96C", Offset = "0x97B96C", VA = "0x97B96C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025B")]
		public List<Point> Holes
		{
			[Token(Token = "0x60014A0")]
			[Address(RVA = "0x97B974", Offset = "0x97B974", VA = "0x97B974", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025C")]
		public List<RegionPointer> Regions
		{
			[Token(Token = "0x60014A1")]
			[Address(RVA = "0x97B97C", Offset = "0x97B97C", VA = "0x97B97C", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025D")]
		public List<ISegment> Segments
		{
			[Token(Token = "0x60014A2")]
			[Address(RVA = "0x97B984", Offset = "0x97B984", VA = "0x97B984", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025E")]
		public bool HasPointMarkers
		{
			[Token(Token = "0x60014A3")]
			[Address(RVA = "0x97B98C", Offset = "0x97B98C", VA = "0x97B98C", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014A4")]
			[Address(RVA = "0x97B994", Offset = "0x97B994", VA = "0x97B994", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700025F")]
		public bool HasSegmentMarkers
		{
			[Token(Token = "0x60014A5")]
			[Address(RVA = "0x97B9A0", Offset = "0x97B9A0", VA = "0x97B9A0", Slot = "10")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014A6")]
			[Address(RVA = "0x97B9A8", Offset = "0x97B9A8", VA = "0x97B9A8", Slot = "11")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000260")]
		public int Count
		{
			[Token(Token = "0x60014A7")]
			[Address(RVA = "0x97B9B4", Offset = "0x97B9B4", VA = "0x97B9B4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0x97B9FC", Offset = "0x97B9FC", VA = "0x97B9FC")]
		public Polygon()
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0x97BBA4", Offset = "0x97BBA4", VA = "0x97BBA4")]
		public Polygon(int capacity)
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0x97BA08", Offset = "0x97BA08", VA = "0x97BA08")]
		public Polygon(int capacity, bool markers)
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0x97BBB0", Offset = "0x97BBB0", VA = "0x97BBB0", Slot = "12")]
		[Obsolete("Use polygon.Add(contour) method instead.")]
		public void AddContour(IEnumerable<Vertex> points, int marker = 0, bool hole = false, bool convex = false)
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0x97BD20", Offset = "0x97BD20", VA = "0x97BD20", Slot = "13")]
		[Obsolete("Use polygon.Add(contour) method instead.")]
		public void AddContour(IEnumerable<Vertex> points, int marker, Point hole)
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0x97BED0", Offset = "0x97BED0", VA = "0x97BED0", Slot = "14")]
		public Rectangle Bounds()
		{
			return null;
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x97C338", Offset = "0x97C338", VA = "0x97C338", Slot = "15")]
		public void Add(Vertex vertex)
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x97C3E8", Offset = "0x97C3E8", VA = "0x97C3E8", Slot = "16")]
		public void Add(ISegment segment, bool insert = false)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x97C668", Offset = "0x97C668", VA = "0x97C668", Slot = "17")]
		public void Add(ISegment segment, int index)
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x97BC44", Offset = "0x97BC44", VA = "0x97BC44", Slot = "18")]
		public void Add(Contour contour, bool hole = false)
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x97BDAC", Offset = "0x97BDAC", VA = "0x97BDAC", Slot = "19")]
		public void Add(Contour contour, Point hole)
		{
		}
	}
	[Token(Token = "0x20003B1")]
	public class Rectangle
	{
		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double xmin;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double ymin;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double xmax;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double ymax;

		[Token(Token = "0x17000261")]
		public double Left
		{
			[Token(Token = "0x60014B9")]
			[Address(RVA = "0x97C928", Offset = "0x97C928", VA = "0x97C928")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000262")]
		public double Right
		{
			[Token(Token = "0x60014BA")]
			[Address(RVA = "0x97C930", Offset = "0x97C930", VA = "0x97C930")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000263")]
		public double Bottom
		{
			[Token(Token = "0x60014BB")]
			[Address(RVA = "0x97C938", Offset = "0x97C938", VA = "0x97C938")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000264")]
		public double Top
		{
			[Token(Token = "0x60014BC")]
			[Address(RVA = "0x97C940", Offset = "0x97C940", VA = "0x97C940")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000265")]
		public double Width
		{
			[Token(Token = "0x60014BD")]
			[Address(RVA = "0x97C948", Offset = "0x97C948", VA = "0x97C948")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000266")]
		public double Height
		{
			[Token(Token = "0x60014BE")]
			[Address(RVA = "0x97C958", Offset = "0x97C958", VA = "0x97C958")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x97C034", Offset = "0x97C034", VA = "0x97C034")]
		public Rectangle()
		{
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0x97C898", Offset = "0x97C898", VA = "0x97C898")]
		public Rectangle(Rectangle other)
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0x97C8E0", Offset = "0x97C8E0", VA = "0x97C8E0")]
		public Rectangle(double x, double y, double width, double height)
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x97C968", Offset = "0x97C968", VA = "0x97C968")]
		public void Resize(double dx, double dy)
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x97C980", Offset = "0x97C980", VA = "0x97C980")]
		public void Expand(Point p)
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x97C060", Offset = "0x97C060", VA = "0x97C060")]
		public void Expand(IEnumerable<Point> points)
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0x97CA3C", Offset = "0x97CA3C", VA = "0x97CA3C")]
		public void Expand(Rectangle other)
		{
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0x97CAF8", Offset = "0x97CAF8", VA = "0x97CAF8")]
		public bool Contains(double x, double y)
		{
			return default(bool);
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0x97CB34", Offset = "0x97CB34", VA = "0x97CB34")]
		public bool Contains(Point pt)
		{
			return default(bool);
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0x97CB88", Offset = "0x97CB88", VA = "0x97CB88")]
		public bool Contains(Rectangle other)
		{
			return default(bool);
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x97CBE4", Offset = "0x97CBE4", VA = "0x97CBE4")]
		public bool Intersects(Rectangle other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003B2")]
	public class RegionPointer
	{
		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Point point;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int id;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal double area;

		[Token(Token = "0x17000267")]
		public double Area
		{
			[Token(Token = "0x60014C7")]
			[Address(RVA = "0x97CC40", Offset = "0x97CC40", VA = "0x97CC40")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60014C8")]
			[Address(RVA = "0x97CC48", Offset = "0x97CC48", VA = "0x97CC48")]
			set
			{
			}
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0x97CCAC", Offset = "0x97CCAC", VA = "0x97CCAC")]
		public RegionPointer(double x, double y, int id)
		{
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0x97CCB4", Offset = "0x97CCB4", VA = "0x97CCB4")]
		public RegionPointer(double x, double y, int id, double area)
		{
		}
	}
	[Token(Token = "0x20003B3")]
	public class Segment : ISegment, IEdge
	{
		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vertex v0;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vertex v1;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int label;

		[Token(Token = "0x17000268")]
		public int Label
		{
			[Token(Token = "0x60014CB")]
			[Address(RVA = "0x97CD64", Offset = "0x97CD64", VA = "0x97CD64", Slot = "8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014CC")]
			[Address(RVA = "0x97CD6C", Offset = "0x97CD6C", VA = "0x97CD6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000269")]
		public int P0
		{
			[Token(Token = "0x60014CD")]
			[Address(RVA = "0x97CD74", Offset = "0x97CD74", VA = "0x97CD74", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700026A")]
		public int P1
		{
			[Token(Token = "0x60014CE")]
			[Address(RVA = "0x97CD90", Offset = "0x97CD90", VA = "0x97CD90", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0x97CDAC", Offset = "0x97CDAC", VA = "0x97CDAC")]
		public Segment(Vertex v0, Vertex v1)
		{
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x97CDB4", Offset = "0x97CDB4", VA = "0x97CDB4")]
		public Segment(Vertex v0, Vertex v1, int label)
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0x97CE0C", Offset = "0x97CE0C", VA = "0x97CE0C", Slot = "4")]
		public Vertex GetVertex(int index)
		{
			return null;
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0x97CE70", Offset = "0x97CE70", VA = "0x97CE70", Slot = "5")]
		public ITriangle GetTriangle(int index)
		{
			return null;
		}
	}
	[Token(Token = "0x20003B4")]
	public class Vertex : Point
	{
		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int hash;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal VertexType type;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Otri tri;

		[Token(Token = "0x1700026B")]
		public VertexType Type
		{
			[Token(Token = "0x60014D6")]
			[Address(RVA = "0x97CF4C", Offset = "0x97CF4C", VA = "0x97CF4C")]
			get
			{
				return default(VertexType);
			}
		}

		[Token(Token = "0x1700026C")]
		public double this[int i]
		{
			[Token(Token = "0x60014D7")]
			[Address(RVA = "0x97CF54", Offset = "0x97CF54", VA = "0x97CF54")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x97CEB0", Offset = "0x97CEB0", VA = "0x97CEB0")]
		public Vertex()
		{
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0x97CF18", Offset = "0x97CF18", VA = "0x97CF18")]
		public Vertex(double x, double y)
		{
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0x97CED8", Offset = "0x97CED8", VA = "0x97CED8")]
		public Vertex(double x, double y, int mark)
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0x97CFC8", Offset = "0x97CFC8", VA = "0x97CFC8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
}
namespace FSG.MeshAnimator
{
	[Token(Token = "0x20003B5")]
	public class AnimatorStateMachine : MonoBehaviour
	{
		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshAnimator meshAnimator;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool crossFade;

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0x97CFD0", Offset = "0x97CFD0", VA = "0x97CFD0")]
		private void Start()
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0x97D0C4", Offset = "0x97D0C4", VA = "0x97D0C4")]
		private void OnAnimationFinished(string anim)
		{
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0x97D2EC", Offset = "0x97D2EC", VA = "0x97D2EC")]
		public AnimatorStateMachine()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public class CrowdSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] options;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] optionsDesc;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int sizeOfCrowd;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int selectedOption;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int maxSize;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string fps;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int previousFrame;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<GameObject> spawnedObjects;

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0x97D2F4", Offset = "0x97D2F4", VA = "0x97D2F4")]
		private void Start()
		{
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0x97D970", Offset = "0x97D970", VA = "0x97D970")]
		private void UpdateFPS()
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0x97D354", Offset = "0x97D354", VA = "0x97D354")]
		private void SpawnCrowd()
		{
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0x97D9FC", Offset = "0x97D9FC", VA = "0x97D9FC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0x97E3DC", Offset = "0x97E3DC", VA = "0x97E3DC")]
		public CrowdSpawner()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class PerformanceTester : MonoBehaviour
	{
		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] animObjects;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] options;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float cameraSpeed;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 spawnOffset;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int[] spawnedMeshes;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<GameObject> meshes;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string fps;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int previousFrame;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 offset;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool crossFade;

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0x97E474", Offset = "0x97E474", VA = "0x97E474")]
		private void Start()
		{
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0x97E4CC", Offset = "0x97E4CC", VA = "0x97E4CC")]
		private void UpdateFPS()
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0x97E558", Offset = "0x97E558", VA = "0x97E558")]
		private void Update()
		{
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0x97E83C", Offset = "0x97E83C", VA = "0x97E83C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0x97E9D4", Offset = "0x97E9D4", VA = "0x97E9D4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0x97F8B0", Offset = "0x97F8B0", VA = "0x97F8B0")]
		public PerformanceTester()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	[ExecuteInEditMode]
	public class AttachObjectToFace : MonoBehaviour
	{
		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshAnimator meshAnimator;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int faceIndex;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 offset;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool drawFaceDebugInfo;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color debugColor;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform mTransform;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform mMeshAnimatorTransform;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] triangles;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] vertices;

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x97F98C", Offset = "0x97F98C", VA = "0x97F98C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0x97FAC8", Offset = "0x97FAC8", VA = "0x97FAC8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0x980478", Offset = "0x980478", VA = "0x980478")]
		public AttachObjectToFace()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public class MecanimMeshAnimatorController : MonoBehaviour
	{
		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshAnimator meshAnimator;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool crossFade;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, string> animHashes;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string cAnim;

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0x98048C", Offset = "0x98048C", VA = "0x98048C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0x980638", Offset = "0x980638", VA = "0x980638", Slot = "5")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x980824", Offset = "0x980824", VA = "0x980824")]
		public MecanimMeshAnimatorController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003BA")]
	public class MeshAnimation : ScriptableObject
	{
		[Token(Token = "0x20003BB")]
		public enum RootMotionMode
		{
			[Token(Token = "0x400124C")]
			None,
			[Token(Token = "0x400124D")]
			Baked,
			[Token(Token = "0x400124E")]
			AppliedToTransform
		}

		[Token(Token = "0x20003BC")]
		private sealed class VertexEntry
		{
			[Token(Token = "0x400124F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int _reserved;

			[Token(Token = "0x4001250")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] TriangleIndex;

			[Token(Token = "0x4001251")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int[] VertexIndex;

			[Token(Token = "0x4001252")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int _count;

			[Token(Token = "0x1700026E")]
			public int Count
			{
				[Token(Token = "0x60014FE")]
				[Address(RVA = "0x983640", Offset = "0x983640", VA = "0x983640")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x60014FF")]
			[Address(RVA = "0x983648", Offset = "0x983648", VA = "0x983648")]
			public VertexEntry()
			{
			}

			[Token(Token = "0x6001500")]
			[Address(RVA = "0x983268", Offset = "0x983268", VA = "0x983268")]
			public void Add(int vertIndex, int triIndex)
			{
			}

			[Token(Token = "0x6001501")]
			[Address(RVA = "0x9831CC", Offset = "0x9831CC", VA = "0x9831CC")]
			public void PopulateArrays()
			{
			}

			[Token(Token = "0x6001502")]
			[Address(RVA = "0x983340", Offset = "0x983340", VA = "0x983340")]
			public void Clear()
			{
			}
		}

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static Dictionary<Mesh, Dictionary<MeshAnimation, Mesh[]>> generatedFrames;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string animationName;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preGenerateFrames;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float playbackSpeed;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int smoothNormalsAngle;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool instantNormalCalculation;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool recalculateNormalsOnRotation;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WrapMode wrapMode;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public RootMotionMode rootMotionMode;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public DeltaCompressedFrameData compressedFrameData;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public string[] exposedTransforms;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MeshAnimationEvent[] events;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float length;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public int frameSkip;

		[NonSerialized]
		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Mesh[] frames;

		[NonSerialized]
		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int totalFrames;

		[NonSerialized]
		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool[] generatedMeshes;

		[NonSerialized]
		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool completelyGenerated;

		[NonSerialized]
		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MeshFrameData[] decompressedFrameData;

		[NonSerialized]
		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion lastRotation;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Queue<Action> mainThreadActions;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<Mesh, KeyValuePair<int[], Vector3[]>> meshInfoCache;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static IEqualityComparer<Vector3> VectorComparer;

		[Token(Token = "0x1700026D")]
		[HideInInspector]
		public MeshFrameData[] frameData
		{
			[Token(Token = "0x60014ED")]
			[Address(RVA = "0x9808D8", Offset = "0x9808D8", VA = "0x9808D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0x980DD8", Offset = "0x980DD8", VA = "0x980DD8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0x980E88", Offset = "0x980E88", VA = "0x980E88")]
		public void GenerateFrames(Mesh baseMesh)
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x981570", Offset = "0x981570", VA = "0x981570")]
		public void GenerateFrameIfNeeded(Mesh baseMesh, int frame)
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0x980184", Offset = "0x980184", VA = "0x980184")]
		public Vector3[] GetFrame(int frame)
		{
			return null;
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0x981A0C", Offset = "0x981A0C", VA = "0x981A0C")]
		public float GetInterpolatingFrames(int frame, out MeshFrameData previousFrame, out MeshFrameData nextFrame)
		{
			return default(float);
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0x981C24", Offset = "0x981C24", VA = "0x981C24")]
		public MeshFrameData GetNearestFrame(int frame)
		{
			return null;
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0x981D88", Offset = "0x981D88", VA = "0x981D88")]
		public void DisplayFrame(MeshFilter meshFilter, int frame, int previousFrame)
		{
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0x982C3C", Offset = "0x982C3C", VA = "0x982C3C")]
		public void FireEvents(GameObject eventReciever, int frame)
		{
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0x982DBC", Offset = "0x982DBC", VA = "0x982DBC")]
		public void Reset()
		{
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0x982EEC", Offset = "0x982EEC", VA = "0x982EEC")]
		public bool IsName(string animationName)
		{
			return default(bool);
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0x98199C", Offset = "0x98199C", VA = "0x98199C")]
		private void CheckFullGeneration(int newFrame)
		{
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0x981154", Offset = "0x981154", VA = "0x981154")]
		private Mesh GenerateFrame(Mesh baseMesh, int frame)
		{
			return null;
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0x982F38", Offset = "0x982F38", VA = "0x982F38")]
		private void RecalculateNormals(Mesh mesh, float angle)
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0x981E90", Offset = "0x981E90", VA = "0x981E90")]
		private void RecalculateNormals(Mesh mesh, float angle, int[] triangles, Vector3[] vertices, bool instant = false)
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0x9833F4", Offset = "0x9833F4", VA = "0x9833F4")]
		public MeshAnimation()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003C0")]
	public class MeshAnimationEvent
	{
		[Token(Token = "0x20003C1")]
		public enum Mode : byte
		{
			[Token(Token = "0x4001262")]
			Data,
			[Token(Token = "0x4001263")]
			String,
			[Token(Token = "0x4001264")]
			Float
		}

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string methodName;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int frame;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Mode eventType;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string stringValue;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float floatValue;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Object data;

		[Token(Token = "0x600150B")]
		[Address(RVA = "0x982CB8", Offset = "0x982CB8", VA = "0x982CB8")]
		public void FireEvent(GameObject eventReciever)
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0x98384C", Offset = "0x98384C", VA = "0x98384C")]
		public MeshAnimationEvent()
		{
		}
	}
	[Token(Token = "0x20003C2")]
	[AddComponentMenu("Miscellaneous/Mesh Animator")]
	[RequireComponent(typeof(MeshFilter))]
	public class MeshAnimator : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003C3")]
		public class MeshAnimatorLODLevel
		{
			[Token(Token = "0x4001290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int fps;

			[Token(Token = "0x4001291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float distance;

			[Token(Token = "0x4001292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float distanceSquared;

			[Token(Token = "0x600152D")]
			[Address(RVA = "0x987980", Offset = "0x987980", VA = "0x987980")]
			public MeshAnimatorLODLevel()
			{
			}
		}

		[Token(Token = "0x20003C4")]
		private struct CurrentCrossFade
		{
			[Token(Token = "0x4001293")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MeshFrameData fromFrame;

			[Token(Token = "0x4001294")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MeshFrameData toFrame;

			[Token(Token = "0x4001295")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int framesNeeded;

			[Token(Token = "0x4001296")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int currentFrame;

			[Token(Token = "0x4001297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int generatedFrame;

			[Token(Token = "0x4001298")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool isFading;

			[Token(Token = "0x4001299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float endTime;

			[Token(Token = "0x400129A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CrossFadeFrameData frame;

			[Token(Token = "0x600152E")]
			[Address(RVA = "0x98437C", Offset = "0x98437C", VA = "0x98437C")]
			public void Reset()
			{
			}

			[Token(Token = "0x600152F")]
			[Address(RVA = "0x98549C", Offset = "0x98549C", VA = "0x98549C")]
			public void PopulateFrame(int length)
			{
			}

			[Token(Token = "0x6001530")]
			[Address(RVA = "0x986AB4", Offset = "0x986AB4", VA = "0x986AB4")]
			public void ReturnFrame()
			{
			}
		}

		[Token(Token = "0x20003C5")]
		private class CrossFadeFrameData
		{
			[Token(Token = "0x400129B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] positions;

			[Token(Token = "0x400129C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x400129D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Bounds bounds;

			[Token(Token = "0x6001531")]
			[Address(RVA = "0x987988", Offset = "0x987988", VA = "0x987988")]
			public CrossFadeFrameData()
			{
			}
		}

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Mesh, int> s_meshCount;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<Thread> s_crossfadeThreads;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool s_shutDownThreads;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Queue<MeshAnimator> s_crossfadeAnimators;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static List<Stack<Mesh>> s_crossFadePool;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Dictionary<Mesh, int> s_crossFadeIndex;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh baseMesh;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshAnimation defaultAnimation;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshAnimation[] animations;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float speed;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool updateWhenOffscreen;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool playAutomatically;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool resetOnEnable;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject eventReciever;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int FPS;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool skipLastLoopFrame;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool recalculateCrossfadeNormals;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action<string> OnAnimationFinished;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action OnFrameUpdated;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action<bool> OnVisibilityChanged;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int currentFrame;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform LODCamera;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public MeshAnimatorLODLevel[] LODLevels;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public float nextTick;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public MeshFilter meshFilter;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public MeshAnimation currentAnimation;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public MeshTriangleData[] meshTriangleData;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int currentAnimIndex;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool isVisible;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float lastFrameTime;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool pingPong;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		private bool isPaused;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float currentAnimTime;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Mesh crossFadeMesh;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Queue<string> queuedAnims;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CurrentCrossFade currentCrossFade;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int currentLodLevel;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform mTransform;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Dictionary<string, Transform> childMap;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool initialized;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private int previousEventFrame;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool hasExposedTransforms;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int crossFadePoolIndex;

		[Token(Token = "0x600150D")]
		[Address(RVA = "0x983854", Offset = "0x983854", VA = "0x983854")]
		private void Start()
		{
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0x983F88", Offset = "0x983F88", VA = "0x983F88")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0x983FB8", Offset = "0x983FB8", VA = "0x983FB8")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0x983FE4", Offset = "0x983FE4", VA = "0x983FE4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0x984264", Offset = "0x984264", VA = "0x984264")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0x9843C0", Offset = "0x9843C0", VA = "0x9843C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0x984ED0", Offset = "0x984ED0", VA = "0x984ED0")]
		private void FireAnimationEvents(MeshAnimation cAnim, float totalSpeed, bool finished)
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0x98503C", Offset = "0x98503C", VA = "0x98503C")]
		private Mesh GetCrossfadeFromPool()
		{
			return null;
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0x984B04", Offset = "0x984B04", VA = "0x984B04")]
		private void ReturnCrossfadeToPool()
		{
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0x985250", Offset = "0x985250", VA = "0x985250")]
		private void GenerateCrossfadeFrame()
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0x9855D8", Offset = "0x9855D8", VA = "0x9855D8")]
		private static void EnqueueAnimatorForCrossfade(MeshAnimator animator)
		{
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0x985718", Offset = "0x985718", VA = "0x985718")]
		private static MeshAnimator DequeueAnimatorForCrossfade()
		{
			return null;
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0x9858A8", Offset = "0x9858A8", VA = "0x9858A8")]
		private static Matrix4x4 MatrixLerp(Matrix4x4 from, Matrix4x4 to, float time)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0x985960", Offset = "0x985960", VA = "0x985960")]
		private static void GenerateThreadedCrossfade()
		{
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0x985BE4", Offset = "0x985BE4", VA = "0x985BE4")]
		public void UpdateTick(float time)
		{
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0x97D210", Offset = "0x97D210", VA = "0x97D210")]
		public void Crossfade(int index)
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0x98079C", Offset = "0x98079C", VA = "0x98079C")]
		public void Crossfade(string animationName)
		{
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0x986C48", Offset = "0x986C48", VA = "0x986C48")]
		public void Crossfade(int index, float speed)
		{
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0x986DD4", Offset = "0x986DD4", VA = "0x986DD4")]
		public void Crossfade(string animationName, float speed)
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0x97D0BC", Offset = "0x97D0BC", VA = "0x97D0BC")]
		public void Play()
		{
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0x9807A8", Offset = "0x9807A8", VA = "0x9807A8")]
		public void Play(string animationName)
		{
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0x97D21C", Offset = "0x97D21C", VA = "0x97D21C")]
		public void Play(int index)
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0x986E64", Offset = "0x986E64", VA = "0x986E64")]
		public void PlayRandom(params string[] animationNames)
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0x986F08", Offset = "0x986F08", VA = "0x986F08")]
		public void PlayQueued(string animationName)
		{
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0x986FB8", Offset = "0x986FB8", VA = "0x986FB8")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0x986FC4", Offset = "0x986FC4", VA = "0x986FC4")]
		public void RestartAnim()
		{
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0x986FCC", Offset = "0x986FCC", VA = "0x986FCC")]
		public void SetTime(float time, bool instantUpdate = false)
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0x987094", Offset = "0x987094", VA = "0x987094")]
		public void SetTimeNormalized(float time, bool instantUpdate = false)
		{
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0x987160", Offset = "0x987160", VA = "0x987160")]
		public MeshAnimation GetClip(string animationName)
		{
			return null;
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0x9871F0", Offset = "0x9871F0", VA = "0x9871F0")]
		public void PrepopulateCrossfadePool(int count)
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0x987504", Offset = "0x987504", VA = "0x987504")]
		public MeshAnimator()
		{
		}
	}
	[Token(Token = "0x20003C7")]
	public class MeshAnimatorManager : MonoBehaviour
	{
		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MeshAnimatorManager mInstance;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<MeshAnimator> mAnimators;

		[Token(Token = "0x1700026F")]
		public static int AnimatorCount
		{
			[Token(Token = "0x6001537")]
			[Address(RVA = "0x983EC0", Offset = "0x983EC0", VA = "0x983EC0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000270")]
		public static MeshAnimatorManager Instance
		{
			[Token(Token = "0x6001538")]
			[Address(RVA = "0x987A14", Offset = "0x987A14", VA = "0x987A14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0x984130", Offset = "0x984130", VA = "0x984130")]
		public static void AddAnimator(MeshAnimator animator)
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0x9842FC", Offset = "0x9842FC", VA = "0x9842FC")]
		public static void RemoveAnimator(MeshAnimator animator)
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0x987BDC", Offset = "0x987BDC", VA = "0x987BDC")]
		private void Update()
		{
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0x987D88", Offset = "0x987D88", VA = "0x987D88")]
		public MeshAnimatorManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003C8")]
	public class MeshFrameData
	{
		[NonSerialized]
		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3[] decompressed;

		[NonSerialized]
		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4[] exposedTransforms;

		[NonSerialized]
		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 rootMotionPosition;

		[NonSerialized]
		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion rootMotionRotation;

		[Token(Token = "0x17000271")]
		public Vector3[] verts
		{
			[Token(Token = "0x600153E")]
			[Address(RVA = "0x987E40", Offset = "0x987E40", VA = "0x987E40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0x987E48", Offset = "0x987E48", VA = "0x987E48")]
		public void SetVerts(Vector3[] v)
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0x987E50", Offset = "0x987E50", VA = "0x987E50", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0x987F74", Offset = "0x987F74", VA = "0x987F74", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0x987F7C", Offset = "0x987F7C", VA = "0x987F7C")]
		public MeshFrameData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003C9")]
	public class MeshTriangleData
	{
		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int submesh;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] triangles;

		[Token(Token = "0x6001543")]
		[Address(RVA = "0x987F84", Offset = "0x987F84", VA = "0x987F84")]
		public MeshTriangleData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003CA")]
	public class DeltaCompressedFrameData
	{
		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float compressionAccuracy;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float accuracy;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int sizeOffset;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int vertLength;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int exposedLength;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public short[] positionsUShort;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public int[] positions;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public int[] frameIndexes;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Matrix4x4[] exposedTransforms;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Vector3[] rootMotionPositions;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Quaternion[] rootMotionRotations;

		[Token(Token = "0x6001544")]
		[Address(RVA = "0x980984", Offset = "0x980984", VA = "0x980984")]
		public static implicit operator MeshFrameData[](DeltaCompressedFrameData s)
		{
			return null;
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0x987F8C", Offset = "0x987F8C", VA = "0x987F8C")]
		public static implicit operator DeltaCompressedFrameData(MeshFrameData[] frames)
		{
			return null;
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0x988908", Offset = "0x988908", VA = "0x988908")]
		public DeltaCompressedFrameData()
		{
		}
	}
	[Token(Token = "0x20003CB")]
	public static class AllocatedArray<T>
	{
		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T defaultValue;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<T[]> allocatedArrays;

		[Token(Token = "0x6001548")]
		private static T[] AllocateArray(int size)
		{
			return null;
		}

		[Token(Token = "0x6001549")]
		public static T[] Get(int size)
		{
			return null;
		}

		[Token(Token = "0x600154A")]
		public static void Return(T[] array, bool resetValues = true)
		{
		}
	}
	[Token(Token = "0x20003CC")]
	public static class Comparers
	{
		[Serializable]
		[Token(Token = "0x20003CD")]
		public class StringComparer : IEqualityComparer<string>
		{
			[Token(Token = "0x600154E")]
			[Address(RVA = "0x988B14", Offset = "0x988B14", VA = "0x988B14", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.String>.Equals(string x, string y)
			{
				return default(bool);
			}

			[Token(Token = "0x600154F")]
			[Address(RVA = "0x988B24", Offset = "0x988B24", VA = "0x988B24", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.String>.GetHashCode(string obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001550")]
			[Address(RVA = "0x988AEC", Offset = "0x988AEC", VA = "0x988AEC")]
			public StringComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003CE")]
		public class FloatComparer : IEqualityComparer<float>
		{
			[Token(Token = "0x6001551")]
			[Address(RVA = "0x988B44", Offset = "0x988B44", VA = "0x988B44", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Single>.Equals(float x, float y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001552")]
			[Address(RVA = "0x988B50", Offset = "0x988B50", VA = "0x988B50", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Single>.GetHashCode(float obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001553")]
			[Address(RVA = "0x988AF4", Offset = "0x988AF4", VA = "0x988AF4")]
			public FloatComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003CF")]
		public class IntComparer : IEqualityComparer<int>
		{
			[Token(Token = "0x6001554")]
			[Address(RVA = "0x988B6C", Offset = "0x988B6C", VA = "0x988B6C", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Int32>.Equals(int x, int y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001555")]
			[Address(RVA = "0x988B78", Offset = "0x988B78", VA = "0x988B78", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Int32>.GetHashCode(int obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001556")]
			[Address(RVA = "0x988AFC", Offset = "0x988AFC", VA = "0x988AFC")]
			public IntComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003D0")]
		public class ByteComparer : IEqualityComparer<byte>
		{
			[Token(Token = "0x6001557")]
			[Address(RVA = "0x988B94", Offset = "0x988B94", VA = "0x988B94", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Byte>.Equals(byte x, byte y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001558")]
			[Address(RVA = "0x988BA4", Offset = "0x988BA4", VA = "0x988BA4", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Byte>.GetHashCode(byte obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001559")]
			[Address(RVA = "0x988B04", Offset = "0x988B04", VA = "0x988B04")]
			public ByteComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003D1")]
		public class BoolComparer : IEqualityComparer<bool>
		{
			[Token(Token = "0x600155A")]
			[Address(RVA = "0x988BC0", Offset = "0x988BC0", VA = "0x988BC0", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Boolean>.Equals(bool x, bool y)
			{
				return default(bool);
			}

			[Token(Token = "0x600155B")]
			[Address(RVA = "0x988BCC", Offset = "0x988BCC", VA = "0x988BCC", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Boolean>.GetHashCode(bool obj)
			{
				return default(int);
			}

			[Token(Token = "0x600155C")]
			[Address(RVA = "0x988B0C", Offset = "0x988B0C", VA = "0x988B0C")]
			public BoolComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003D2")]
		private class FuncEqualityComparer<T> : EqualityComparer<T>
		{
			[Token(Token = "0x40012BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, T, bool> equals;

			[Token(Token = "0x40012BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, int> hash;

			[Token(Token = "0x600155D")]
			public FuncEqualityComparer(Func<T, T, bool> equals, Func<T, int> hash)
			{
			}

			[Token(Token = "0x600155E")]
			public override bool Equals(T a, T b)
			{
				return default(bool);
			}

			[Token(Token = "0x600155F")]
			public override int GetHashCode(T obj)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly StringComparer String;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly FloatComparer Float;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly IntComparer Int;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly ByteComparer Byte;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly BoolComparer Bool;

		[Token(Token = "0x600154C")]
		public static IEqualityComparer<T> Create<T>(Func<T, T, bool> equals, [Optional] Func<T, int> hash)
		{
			return null;
		}
	}
	[Token(Token = "0x20003D4")]
	public static class GenericObjectPool<T>
	{
		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stack<T> pool;

		[Token(Token = "0x17000272")]
		public static int Count
		{
			[Token(Token = "0x6001563")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001564")]
		public static void InitPool(int count)
		{
		}

		[Token(Token = "0x6001565")]
		public static T Get()
		{
			return (T)null;
		}

		[Token(Token = "0x6001566")]
		public static void Return(T obj)
		{
		}
	}
	[Token(Token = "0x20003D5")]
	public static class MatrixUtils
	{
		[Token(Token = "0x6001568")]
		[Address(RVA = "0x986BA8", Offset = "0x986BA8", VA = "0x986BA8")]
		public static void FromMatrix4x4(Transform transform, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0x988BF8", Offset = "0x988BF8", VA = "0x988BF8")]
		public static Quaternion GetRotation(Matrix4x4 matrix)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0x988BEC", Offset = "0x988BEC", VA = "0x988BEC")]
		public static Vector3 GetPosition(Matrix4x4 matrix)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0x988D1C", Offset = "0x988D1C", VA = "0x988D1C")]
		public static Vector3 GetScale(Matrix4x4 m)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20003D6")]
	public class PooledDictionary<T, T2> : Dictionary<T, T2>
	{
		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stack<PooledDictionary<T, T2>> stack;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint checkedOut;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint returned;

		[Token(Token = "0x17000273")]
		public bool recycleable
		{
			[Token(Token = "0x600156C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600156D")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600156E")]
		public static void Init(int initialPoolSize = 10)
		{
		}

		[Token(Token = "0x600156F")]
		public static PooledDictionary<T, T2> Get(int capacity, [Optional] IEqualityComparer<T> comparer)
		{
			return null;
		}

		[Token(Token = "0x6001570")]
		public static PooledDictionary<T, T2> Get()
		{
			return null;
		}

		[Token(Token = "0x6001571")]
		public static PooledDictionary<T, T2> Get(IEqualityComparer<T> comparer)
		{
			return null;
		}

		[Token(Token = "0x6001572")]
		public PooledDictionary()
		{
		}

		[Token(Token = "0x6001573")]
		public PooledDictionary(int capacity)
		{
		}

		[Token(Token = "0x6001574")]
		public PooledDictionary(int capacity, IEqualityComparer<T> comparer)
		{
		}

		[Token(Token = "0x6001575")]
		public void ReturnToPool(bool force = false)
		{
		}
	}
}
namespace LuxWater
{
	[Token(Token = "0x20003D7")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class LuxWater_CameraDepthMode : MonoBehaviour
	{
		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool GrabDepthTexture;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera cam;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material CopyDepthMat;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTextureFormat format;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, CommandBuffer> m_cmdBuffer;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool CamCallBackAdded;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[HideInInspector]
		public bool ShowShaderWarning;

		[Token(Token = "0x6001577")]
		[Address(RVA = "0x988EB0", Offset = "0x988EB0", VA = "0x988EB0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0x9890C8", Offset = "0x9890C8", VA = "0x9890C8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0x98938C", Offset = "0x98938C", VA = "0x98938C")]
		private void OnPrecull(Camera camera)
		{
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0x9897B4", Offset = "0x9897B4", VA = "0x9897B4")]
		public LuxWater_CameraDepthMode()
		{
		}
	}
	[Token(Token = "0x20003D8")]
	public class LuxWater_HelpBtn : PropertyAttribute
	{
		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string URL;

		[Token(Token = "0x600157B")]
		[Address(RVA = "0x989844", Offset = "0x989844", VA = "0x989844")]
		public LuxWater_HelpBtn(string URL)
		{
		}
	}
	[Token(Token = "0x20003D9")]
	public class LuxWater_InfiniteOcean : MonoBehaviour
	{
		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[LuxWater_HelpBtn("h.c1utuz9up55r")]
		[Space(6f)]
		public Camera MainCam;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float GridSize;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform trans;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform camTrans;

		[Token(Token = "0x600157C")]
		[Address(RVA = "0x989874", Offset = "0x989874", VA = "0x989874")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0x9898CC", Offset = "0x9898CC", VA = "0x9898CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0x989BE4", Offset = "0x989BE4", VA = "0x989BE4")]
		public LuxWater_InfiniteOcean()
		{
		}
	}
	[Token(Token = "0x20003DA")]
	[ExecuteInEditMode]
	public class LuxWater_PlanarReflection : MonoBehaviour
	{
		[Token(Token = "0x20003DB")]
		public enum ReflectionResolution
		{
			[Token(Token = "0x40012E5")]
			Full = 1,
			[Token(Token = "0x40012E6")]
			Half = 2,
			[Token(Token = "0x40012E7")]
			Quarter = 4,
			[Token(Token = "0x40012E8")]
			Eighth = 8
		}

		[Token(Token = "0x20003DC")]
		public enum NumberOfShadowCascades
		{
			[Token(Token = "0x40012EA")]
			One = 1,
			[Token(Token = "0x40012EB")]
			Two = 2,
			[Token(Token = "0x40012EC")]
			Four = 4
		}

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Space(6f)]
		[LuxWater_HelpBtn("h.5c3jy4qfh163")]
		public bool UpdateSceneView;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Space(5f)]
		public bool isMaster;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] WaterMaterials;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Space(5f)]
		public LayerMask reflectionMask;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ReflectionResolution Resolution;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color clearColor;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool reflectSkybox;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Space(5f)]
		public bool disablePixelLights;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[Space(5f)]
		public bool renderShadows;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float shadowDistance;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public NumberOfShadowCascades ShadowCascades;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Space(5f)]
		public float WaterSurfaceOffset;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float clipPlaneOffset;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string reflectionSampler;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 m_Oldpos;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Camera m_ReflectionCamera;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material m_SharedMaterial;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<Camera, bool> m_HelperCameras;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RenderTexture m_reflectionMap;

		[Token(Token = "0x600157F")]
		[Address(RVA = "0x989BF4", Offset = "0x989BF4", VA = "0x989BF4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0x989D08", Offset = "0x989D08", VA = "0x989D08")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0x989DE0", Offset = "0x989DE0", VA = "0x989DE0")]
		private Camera CreateReflectionCameraFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0x98A104", Offset = "0x98A104", VA = "0x98A104")]
		private void SetStandardCameraParameter(Camera cam, LayerMask mask)
		{
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0x98A1B8", Offset = "0x98A1B8", VA = "0x98A1B8")]
		private RenderTexture CreateTextureFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0x98A2E8", Offset = "0x98A2E8", VA = "0x98A2E8")]
		public void RenderHelpCameras(Camera currentCam)
		{
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0x98AAD0", Offset = "0x98AAD0", VA = "0x98AAD0")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0x98AB28", Offset = "0x98AB28", VA = "0x98AB28")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0x98AC08", Offset = "0x98AC08", VA = "0x98AC08")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0x98A4DC", Offset = "0x98A4DC", VA = "0x98A4DC")]
		private void RenderReflectionFor(Camera cam, Camera reflectCamera)
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0x98AC30", Offset = "0x98AC30", VA = "0x98AC30")]
		private void SaneCameraSettings(Camera helperCam)
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0x98AEE4", Offset = "0x98AEE4", VA = "0x98AEE4")]
		private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0x98AC90", Offset = "0x98AC90", VA = "0x98AC90")]
		private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0x98B050", Offset = "0x98B050", VA = "0x98B050")]
		private static float Sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0x98AD34", Offset = "0x98AD34", VA = "0x98AD34")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0x98B070", Offset = "0x98B070", VA = "0x98B070")]
		public LuxWater_PlanarReflection()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	[ExecuteInEditMode]
	public class LuxWater_PlanarWaterTile : MonoBehaviour
	{
		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[LuxWater_HelpBtn("h.nu6w5ylbucb7")]
		[Space(6f)]
		public LuxWater_PlanarReflection reflection;

		[Token(Token = "0x600158F")]
		[Address(RVA = "0x98B108", Offset = "0x98B108", VA = "0x98B108")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0x98B10C", Offset = "0x98B10C", VA = "0x98B10C")]
		private void AcquireComponents()
		{
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0x98B218", Offset = "0x98B218", VA = "0x98B218")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0x98B2B0", Offset = "0x98B2B0", VA = "0x98B2B0")]
		public LuxWater_PlanarWaterTile()
		{
		}
	}
	[Token(Token = "0x20003DE")]
	public class LuxWater_Projector : MonoBehaviour
	{
		[Token(Token = "0x20003DF")]
		public enum ProjectorType
		{
			[Token(Token = "0x40012F6")]
			FoamProjector,
			[Token(Token = "0x40012F7")]
			NormalProjector
		}

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Space(8f)]
		public ProjectorType Type;

		[NonSerialized]
		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<LuxWater_Projector> FoamProjectors;

		[NonSerialized]
		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<LuxWater_Projector> NormalProjectors;

		[NonSerialized]
		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer m_Rend;

		[NonSerialized]
		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material m_Mat;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool added;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 origPos;

		[Token(Token = "0x6001593")]
		[Address(RVA = "0x98B2B8", Offset = "0x98B2B8", VA = "0x98B2B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0x98B2D8", Offset = "0x98B2D8", VA = "0x98B2D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0x98B4B4", Offset = "0x98B4B4", VA = "0x98B4B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0x98B570", Offset = "0x98B570", VA = "0x98B570")]
		public LuxWater_Projector()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class LuxWater_ProjectorRenderer : MonoBehaviour
	{
		[Token(Token = "0x20003E1")]
		public enum BufferResolution
		{
			[Token(Token = "0x400130D")]
			Full = 1,
			[Token(Token = "0x400130E")]
			Half = 2,
			[Token(Token = "0x400130F")]
			Quarter = 4,
			[Token(Token = "0x4001310")]
			Eighth = 8
		}

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Space(8f)]
		public BufferResolution FoamBufferResolution;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public BufferResolution NormalBufferResolution;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space(2f)]
		[Header("Debug")]
		[Space(4f)]
		public bool DebugFoamBuffer;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool DebugNormalBuffer;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool DebugStats;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int drawnFoamProjectors;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int drawnNormalProjectors;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CommandBuffer cb_Foam;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static CommandBuffer cb_Normals;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera cam;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform camTransform;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture ProjectedFoam;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture ProjectedNormals;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Texture2D defaultBump;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Bounds tempBounds;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int _LuxWater_FoamOverlayPID;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _LuxWater_NormalOverlayPID;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Plane[] frustumPlanes;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material DebugMat;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material DebugNormalMat;

		[Token(Token = "0x6001598")]
		[Address(RVA = "0x98B644", Offset = "0x98B644", VA = "0x98B644")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0x98B7A8", Offset = "0x98B7A8", VA = "0x98B7A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0x98B9E4", Offset = "0x98B9E4", VA = "0x98B9E4")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0x98C67C", Offset = "0x98C67C", VA = "0x98C67C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0x98C9E4", Offset = "0x98C9E4", VA = "0x98C9E4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0x98CC50", Offset = "0x98CC50", VA = "0x98CC50")]
		public LuxWater_ProjectorRenderer()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	public static class GeomUtil
	{
		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Action<Plane[], Matrix4x4> _calculateFrustumPlanes_Imp;

		[Token(Token = "0x600159E")]
		[Address(RVA = "0x98C368", Offset = "0x98C368", VA = "0x98C368")]
		public static void CalculateFrustumPlanes(Plane[] planes, Matrix4x4 worldToProjectMatrix)
		{
		}
	}
	[Token(Token = "0x20003E3")]
	[RequireComponent(typeof(Camera))]
	public class LuxWater_UnderWaterBlur : MonoBehaviour
	{
		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Space(6f)]
		[LuxWater_HelpBtn("h.3a2840a53u5j")]
		public float blurSpread;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int blurDownSample;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int blurIterations;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2[] m_offsets;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material blurMaterial;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material blitMaterial;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LuxWater_UnderWaterRendering waterrendermanager;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool doBlur;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool initBlur;

		[Token(Token = "0x600159F")]
		[Address(RVA = "0x98CCBC", Offset = "0x98CCBC", VA = "0x98CCBC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0x98CDD4", Offset = "0x98CDD4", VA = "0x98CDD4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0x98CEA4", Offset = "0x98CEA4", VA = "0x98CEA4")]
		private void GetWaterrendermanagerInstance()
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0x98CEF8", Offset = "0x98CEF8", VA = "0x98CEF8")]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0x98D1F0", Offset = "0x98D1F0", VA = "0x98D1F0")]
		private void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0x98D120", Offset = "0x98D120", VA = "0x98D120")]
		private void DownSample(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0x98D2C4", Offset = "0x98D2C4", VA = "0x98D2C4")]
		public LuxWater_UnderWaterBlur()
		{
		}
	}
	[Token(Token = "0x20003E4")]
	[RequireComponent(typeof(Camera))]
	public class LuxWater_UnderWaterRendering : MonoBehaviour
	{
		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static LuxWater_UnderWaterRendering instance;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Space(6f)]
		[LuxWater_HelpBtn("h.d0q6uguuxpy")]
		public Transform Sun;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space(4f)]
		public bool FindSunOnEnable;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string SunGoName;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string SunTagName;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Light SunLight;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space(2f)]
		[Header("Deep Water Lighting")]
		[Space(4f)]
		public bool EnableDeepwaterLighting;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float DefaultWaterSurfacePosition;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float DirectionalLightingFadeRange;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float FogLightingFadeRange;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space(4f)]
		[Header("Advanced Deferred Fog")]
		[Space(2f)]
		public bool EnableAdvancedDeferredFog;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float FogDepthShift;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float FogEdgeBlending;

		[NonSerialized]
		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Space(8f)]
		public int activeWaterVolume;

		[NonSerialized]
		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Camera> activeWaterVolumeCameras;

		[NonSerialized]
		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float activeGridSize;

		[NonSerialized]
		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float WaterSurfacePos;

		[NonSerialized]
		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Space(8f)]
		public List<int> RegisteredWaterVolumesIDs;

		[NonSerialized]
		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<LuxWater_WaterVolume> RegisteredWaterVolumes;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<Mesh> WaterMeshes;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Transform> WaterTransforms;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<Material> WaterMaterials;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<bool> WaterIsOnScreen;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<bool> WaterUsesSlidingVolume;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private RenderTexture UnderWaterMask;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Managed transparent Materials")]
		[Space(2f)]
		[Space(4f)]
		public List<Material> m_aboveWatersurface;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<Material> m_belowWatersurface;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Optimize")]
		[Space(4f)]
		[Space(2f)]
		public ShaderVariantCollection PrewarmedShaders;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int ListCapacity;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Space(4f)]
		[Space(2f)]
		[Header("Debug")]
		public bool enableDebug;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Space(8f)]
		private Material mat;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material blurMaterial;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material blitMaterial;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Camera cam;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool UnderwaterIsSetUp;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform camTransform;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Matrix4x4 frustumCornersArray;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private SphericalHarmonicsL2 ambientProbe;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Vector3[] directions;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Color[] AmbientLightingSamples;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool DoUnderWaterRendering;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private Matrix4x4 camProj;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Vector3[] frustumCorners;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private float Projection;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private bool islinear;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Matrix4x4 WatervolumeMatrix;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private int UnderWaterMaskPID;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		private int Lux_FrustumCornersWSPID;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private int Lux_CameraWSPID;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		private int GerstnerEnabledPID;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private int LuxWaterMask_GerstnerVertexIntensityPID;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private int GerstnerVertexIntensityPID;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private int LuxWaterMask_GAmplitudePID;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private int GAmplitudePID;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private int LuxWaterMask_GFinalFrequencyPID;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		private int GFinalFrequencyPID;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private int LuxWaterMask_GSteepnessPID;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		private int GSteepnessPID;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private int LuxWaterMask_GFinalSpeedPID;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		private int GFinalSpeedPID;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private int LuxWaterMask_GDirectionABPID;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		private int GDirectionABPID;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private int LuxWaterMask_GDirectionCDPID;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		private int GDirectionCDPID;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private int LuxWaterMask_GerstnerSecondaryWaves;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		private int GerstnerSecondaryWaves;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private int Lux_UnderWaterAmbientSkyLightPID;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private int Lux_UnderWaterSunColorPID;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private int Lux_UnderWaterSunDirPID;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		private int Lux_UnderWaterSunDirViewSpacePID;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private int Lux_EdgeLengthPID;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		private int Lux_CausticsEnabledPID;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private int Lux_CausticModePID;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
		private int Lux_UnderWaterFogColorPID;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private int Lux_UnderWaterFogDensityPID;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		private int Lux_UnderWaterFogAbsorptionCancellationPID;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private int Lux_UnderWaterAbsorptionHeightPID;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		private int Lux_UnderWaterAbsorptionMaxHeightPID;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private int Lux_MaxDirLightDepthPID;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		private int Lux_MaxFogLightDepthPID;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private int Lux_UnderWaterAbsorptionDepthPID;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		private int Lux_UnderWaterAbsorptionColorStrengthPID;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private int Lux_UnderWaterAbsorptionStrengthPID;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		private int Lux_UnderWaterUnderwaterScatteringPowerPID;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private int Lux_UnderWaterUnderwaterScatteringIntensityPID;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		private int Lux_UnderWaterUnderwaterScatteringColorPID;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private int Lux_UnderWaterUnderwaterScatteringOcclusionPID;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
		private int Lux_UnderWaterCausticsPID;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private int Lux_UnderWaterDeferredFogParams;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
		private int CausticTexPID;

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0x98D344", Offset = "0x98D344", VA = "0x98D344")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0x98E014", Offset = "0x98E014", VA = "0x98E014")]
		private void CleanUp()
		{
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0x98E1F0", Offset = "0x98E1F0", VA = "0x98E1F0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0x98E1F4", Offset = "0x98E1F4", VA = "0x98E1F4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0x98E1F8", Offset = "0x98E1F8", VA = "0x98E1F8")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0x98DF90", Offset = "0x98DF90", VA = "0x98DF90")]
		public void SetDeferredFogParams()
		{
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0x98DEA4", Offset = "0x98DEA4", VA = "0x98DEA4")]
		public void SetDeepwaterLighting()
		{
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0x98E210", Offset = "0x98E210", VA = "0x98E210")]
		public void RegisterWaterVolume(LuxWater_WaterVolume item, int ID, bool visible, bool SlidingVolume)
		{
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0x98E8F0", Offset = "0x98E8F0", VA = "0x98E8F0")]
		public void DeRegisterWaterVolume(LuxWater_WaterVolume item, int ID)
		{
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0x98EA64", Offset = "0x98EA64", VA = "0x98EA64")]
		public void SetWaterVisible(int ID)
		{
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0x98EAEC", Offset = "0x98EAEC", VA = "0x98EAEC")]
		public void SetWaterInvisible(int ID)
		{
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0x98EB74", Offset = "0x98EB74", VA = "0x98EB74")]
		public void EnteredWaterVolume(LuxWater_WaterVolume item, int ID, Camera triggerCam, float GridSize)
		{
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0x98EDA8", Offset = "0x98EDA8", VA = "0x98EDA8")]
		public void LeftWaterVolume(LuxWater_WaterVolume item, int ID, Camera triggerCam)
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0x98EF30", Offset = "0x98EF30", VA = "0x98EF30")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x98FD70", Offset = "0x98FD70", VA = "0x98FD70")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0x98E63C", Offset = "0x98E63C", VA = "0x98E63C")]
		public void SetGerstnerWaves(int index)
		{
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x98EF50", Offset = "0x98EF50", VA = "0x98EF50")]
		public void RenderWaterMask(Camera currentCamera, bool SecondaryCameraRendering)
		{
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0x98FD7C", Offset = "0x98FD7C", VA = "0x98FD7C")]
		public void RenderUnderWater(RenderTexture src, RenderTexture dest, Camera currentCamera, bool SecondaryCameraRendering)
		{
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0x9907E4", Offset = "0x9907E4", VA = "0x9907E4")]
		public LuxWater_UnderWaterRendering()
		{
		}
	}
	[Token(Token = "0x20003E5")]
	[RequireComponent(typeof(Camera))]
	public class LuxWater_UnderwaterRenderingSlave : MonoBehaviour
	{
		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LuxWater_UnderWaterRendering waterrendermanager;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool readyToGo;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Camera cam;

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0x991C14", Offset = "0x991C14", VA = "0x991C14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0x991C9C", Offset = "0x991C9C", VA = "0x991C9C")]
		private void GetWaterrendermanager()
		{
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0x991D40", Offset = "0x991D40", VA = "0x991D40")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0x991D78", Offset = "0x991D78", VA = "0x991D78")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0x991E1C", Offset = "0x991E1C", VA = "0x991E1C")]
		public LuxWater_UnderwaterRenderingSlave()
		{
		}
	}
	[Token(Token = "0x20003E6")]
	public class LuxWater_WaterVolume : MonoBehaviour
	{
		[Token(Token = "0x20003E7")]
		public delegate void TriggerEnter();

		[Token(Token = "0x20003E8")]
		public delegate void TriggerExit();

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Space(6f)]
		[LuxWater_HelpBtn("h.86taxuhovssb")]
		public Mesh WaterVolumeMesh;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space(8f)]
		public bool SlidingVolume;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float GridSize;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LuxWater_UnderWaterRendering waterrendermanager;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool readyToGo;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int ID;

		[Token(Token = "0x1400001A")]
		public static event TriggerEnter OnEnterWaterVolume
		{
			[Token(Token = "0x60015BE")]
			[Address(RVA = "0x991E24", Offset = "0x991E24", VA = "0x991E24")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60015BF")]
			[Address(RVA = "0x991EDC", Offset = "0x991EDC", VA = "0x991EDC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public static event TriggerExit OnExitWaterVolume
		{
			[Token(Token = "0x60015C0")]
			[Address(RVA = "0x991F94", Offset = "0x991F94", VA = "0x991F94")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60015C1")]
			[Address(RVA = "0x992050", Offset = "0x992050", VA = "0x992050")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0x99210C", Offset = "0x99210C", VA = "0x99210C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0x9922A0", Offset = "0x9922A0", VA = "0x9922A0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0x992370", Offset = "0x992370", VA = "0x992370")]
		private void Register()
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0x9924A8", Offset = "0x9924A8", VA = "0x9924A8")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0x9924DC", Offset = "0x9924DC", VA = "0x9924DC")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0x992510", Offset = "0x992510", VA = "0x992510")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0x992640", Offset = "0x992640", VA = "0x992640")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0x99273C", Offset = "0x99273C", VA = "0x99273C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0x992868", Offset = "0x992868", VA = "0x992868")]
		public LuxWater_WaterVolume()
		{
		}
	}
	[Token(Token = "0x20003E9")]
	public class LuxWater_WaterVolumeTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Space(6f)]
		[LuxWater_HelpBtn("h.cetbv2etlk23")]
		public Camera cam;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool active;

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0x992A90", Offset = "0x992A90", VA = "0x992A90")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0x992B70", Offset = "0x992B70", VA = "0x992B70")]
		public LuxWater_WaterVolumeTrigger()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	public class LuxWater_SetMeshBounds : MonoBehaviour
	{
		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[LuxWater_HelpBtn("h.s0d0kaaphhix")]
		[Space(6f)]
		public float Expand_XZ;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Expand_Y;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer rend;

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0x992B80", Offset = "0x992B80", VA = "0x992B80")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0x992C50", Offset = "0x992C50", VA = "0x992C50")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0x992CB4", Offset = "0x992CB4", VA = "0x992CB4")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0x992D84", Offset = "0x992D84", VA = "0x992D84")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0x992ED8", Offset = "0x992ED8", VA = "0x992ED8")]
		public LuxWater_SetMeshBounds()
		{
		}
	}
}
namespace Prototype.NetworkLobby
{
	[Token(Token = "0x20003EB")]
	public class DraggablePanel : MonoBehaviour, IDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x60015DA")]
		[Address(RVA = "0x992EE0", Offset = "0x992EE0", VA = "0x992EE0", Slot = "4")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0x992F10", Offset = "0x992F10", VA = "0x992F10")]
		public DraggablePanel()
		{
		}
	}
}
namespace HurricaneVR.TechDemo.Scripts
{
	[Token(Token = "0x20003EC")]
	public class DemoBackpack : MonoBehaviour
	{
		[Token(Token = "0x20003EE")]
		[CompilerGenerated]
		private sealed class <IgnoreColliders>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001388")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001389")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400138A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DemoBackpack <>4__this;

			[Token(Token = "0x17000274")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015E6")]
				[Address(RVA = "0x993520", Offset = "0x993520", VA = "0x993520", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000275")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015E8")]
				[Address(RVA = "0x993568", Offset = "0x993568", VA = "0x993568", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015E3")]
			[Address(RVA = "0x99314C", Offset = "0x99314C", VA = "0x99314C")]
			[DebuggerHidden]
			public <IgnoreColliders>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60015E4")]
			[Address(RVA = "0x9933D0", Offset = "0x9933D0", VA = "0x9933D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015E5")]
			[Address(RVA = "0x9933D4", Offset = "0x9933D4", VA = "0x9933D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015E7")]
			[Address(RVA = "0x993528", Offset = "0x993528", VA = "0x993528", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Used to ignore collision with grabbable colliders.")]
		public List<Collider> Colliders;

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0x992F18", Offset = "0x992F18", VA = "0x992F18")]
		private void Start()
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0x9930D8", Offset = "0x9930D8", VA = "0x9930D8")]
		[IteratorStateMachine(typeof(<IgnoreColliders>d__2))]
		public IEnumerator IgnoreColliders()
		{
			return null;
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0x993174", Offset = "0x993174", VA = "0x993174")]
		public void IgnoreCollision(HVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0x9932A8", Offset = "0x9932A8", VA = "0x9932A8")]
		public DemoBackpack()
		{
		}
	}
	[Token(Token = "0x20003EF")]
	public class DemoCodeGrabbing : MonoBehaviour
	{
		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRGrabbable Grabbable;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HVRGrabTrigger GrabTrigger;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HVRPosableGrabPoint GrabPoint;

		[Token(Token = "0x17000276")]
		public HVRHandGrabber Grabber
		{
			[Token(Token = "0x60015E9")]
			[Address(RVA = "0x993570", Offset = "0x993570", VA = "0x993570")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60015EA")]
			[Address(RVA = "0x993578", Offset = "0x993578", VA = "0x993578")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0x993580", Offset = "0x993580", VA = "0x993580")]
		public void Start()
		{
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0x9936E0", Offset = "0x9936E0", VA = "0x9936E0")]
		public void Grab()
		{
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0x993818", Offset = "0x993818", VA = "0x993818")]
		public DemoCodeGrabbing()
		{
		}
	}
	[Token(Token = "0x20003F1")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class DemoDummyArm : MonoBehaviour
	{
		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Anchor;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Length;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LineRenderer Rope;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ArmRopeAnchor;

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0x9938C0", Offset = "0x9938C0", VA = "0x9938C0")]
		private void Start()
		{
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0x993988", Offset = "0x993988", VA = "0x993988")]
		private void Update()
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0x9939F0", Offset = "0x9939F0", VA = "0x9939F0")]
		public DemoDummyArm()
		{
		}
	}
	[Token(Token = "0x20003F2")]
	public class DemoFullStabConfetti : MonoBehaviour
	{
		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HVRStabbable Stabbable;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem Confetti;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool OnFullStab;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 point;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 normal;

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0x993A00", Offset = "0x993A00", VA = "0x993A00")]
		public void Start()
		{
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0x993C2C", Offset = "0x993C2C", VA = "0x993C2C")]
		private void FullStabbed(HVRStabber arg0, HVRStabbable arg1)
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0x993C44", Offset = "0x993C44", VA = "0x993C44")]
		private void PopConfetti(Vector3 dir)
		{
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0x993DD8", Offset = "0x993DD8", VA = "0x993DD8")]
		private void Unstabbed(HVRStabber arg0, HVRStabbable arg1)
		{
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0x993DDC", Offset = "0x993DDC", VA = "0x993DDC")]
		private void Stabbed(StabArgs stabArgs)
		{
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0x993E74", Offset = "0x993E74", VA = "0x993E74")]
		public DemoFullStabConfetti()
		{
		}
	}
	[Token(Token = "0x20003F3")]
	public class DemoGlassRotate : MonoBehaviour
	{
		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Timer;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Degrees;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Unlocked;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool DoneRotating;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SFXOpen;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _elapsed;

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0x993E7C", Offset = "0x993E7C", VA = "0x993E7C")]
		private void Start()
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0x993E80", Offset = "0x993E80", VA = "0x993E80")]
		private void Update()
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0x993FDC", Offset = "0x993FDC", VA = "0x993FDC")]
		public void Unlock()
		{
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0x9940E4", Offset = "0x9940E4", VA = "0x9940E4")]
		public DemoGlassRotate()
		{
		}
	}
	[Token(Token = "0x20003F4")]
	public class DemoHatchDoor : MonoBehaviour
	{
		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Timer;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Degrees;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Unlocked;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool DoneRotating;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SFXOpen;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _elapsed;

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0x9940F8", Offset = "0x9940F8", VA = "0x9940F8")]
		private void Update()
		{
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0x994254", Offset = "0x994254", VA = "0x994254")]
		public void Unlock()
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0x99435C", Offset = "0x99435C", VA = "0x99435C")]
		public DemoHatchDoor()
		{
		}
	}
	[Token(Token = "0x20003F5")]
	public class DemoHeavyDoor : MonoBehaviour
	{
		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody DoorRigidbody;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRRotationTracker ValveTracker;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HVRRotationLimiter Limiter;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MaxAngle;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip[] SFX;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float SFXAngle;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float Angle;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion _startRotation;

		[Token(Token = "0x6001601")]
		[Address(RVA = "0x994370", Offset = "0x994370", VA = "0x994370")]
		private void Start()
		{
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0x9943A8", Offset = "0x9943A8", VA = "0x9943A8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0x99460C", Offset = "0x99460C", VA = "0x99460C")]
		public DemoHeavyDoor()
		{
		}
	}
	[Token(Token = "0x20003F6")]
	public class DemoHelper : MonoBehaviour
	{
		[Token(Token = "0x20003F7")]
		private class ResetState
		{
			[Token(Token = "0x40013B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public HVRGrabbable Grabbable;

			[Token(Token = "0x40013B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HVRGrabbable Clone;

			[Token(Token = "0x40013B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 Position;

			[Token(Token = "0x40013B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion Rotation;

			[Token(Token = "0x40013B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform Parent;

			[Token(Token = "0x17000277")]
			public Vector3 Scale
			{
				[Token(Token = "0x600160C")]
				[Address(RVA = "0x9958B0", Offset = "0x9958B0", VA = "0x9958B0")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600160D")]
				[Address(RVA = "0x9958BC", Offset = "0x9958BC", VA = "0x9958BC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x600160E")]
			[Address(RVA = "0x994EBC", Offset = "0x994EBC", VA = "0x994EBC")]
			public ResetState()
			{
			}
		}

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Transform> Parents;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<HVRGrabbable> Grabbables;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Debug")]
		public bool ForceReset;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<ResetState> _grabbableState;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<HVRGrabbable> _balls;

		[Token(Token = "0x6001604")]
		[Address(RVA = "0x994624", Offset = "0x994624", VA = "0x994624")]
		private void Start()
		{
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0x9948E0", Offset = "0x9948E0", VA = "0x9948E0")]
		private void AddResetGrabbable(Transform parent)
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0x994CB4", Offset = "0x994CB4", VA = "0x994CB4")]
		private void SaveResetGrabbable(Transform parent, HVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0x994EC4", Offset = "0x994EC4", VA = "0x994EC4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0x995630", Offset = "0x995630", VA = "0x995630")]
		public void BallSpawned(HVRSocket socket, GameObject ball)
		{
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0x994EE4", Offset = "0x994EE4", VA = "0x994EE4")]
		public void ResetGrabbables()
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0x995700", Offset = "0x995700", VA = "0x995700")]
		public DemoHelper()
		{
		}
	}
	[Token(Token = "0x20003F9")]
	public class DemoHolster : HVRSocket
	{
		[Token(Token = "0x6001611")]
		[Address(RVA = "0x995954", Offset = "0x995954", VA = "0x995954", Slot = "63")]
		protected override Quaternion GetRotationOffset(HVRGrabbable grabbable)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0x995A40", Offset = "0x995A40", VA = "0x995A40", Slot = "62")]
		protected override Vector3 GetPositionOffset(HVRGrabbable grabbable)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0x995B2C", Offset = "0x995B2C", VA = "0x995B2C")]
		public DemoHolster()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public class DemoHolsterOrientation : MonoBehaviour
	{
		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Orientation;

		[Token(Token = "0x6001614")]
		[Address(RVA = "0x995B34", Offset = "0x995B34", VA = "0x995B34")]
		public DemoHolsterOrientation()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class DemoKeyHologram : MonoBehaviour
	{
		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Interval;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LastMove;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Vector3> Positions;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int Index;

		[Token(Token = "0x6001615")]
		[Address(RVA = "0x995B3C", Offset = "0x995B3C", VA = "0x995B3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0x995B40", Offset = "0x995B40", VA = "0x995B40")]
		private void Update()
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0x995C30", Offset = "0x995C30", VA = "0x995C30")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0x995C9C", Offset = "0x995C9C", VA = "0x995C9C")]
		public DemoKeyHologram()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	public class DemoKeypad : MonoBehaviour
	{
		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent Unlocked;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Code;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshPro Display;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Entry;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ForceUnlock;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool _unlocked;

		[Token(Token = "0x17000278")]
		public int Index
		{
			[Token(Token = "0x6001619")]
			[Address(RVA = "0x995D30", Offset = "0x995D30", VA = "0x995D30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000279")]
		public int MaxLength
		{
			[Token(Token = "0x600161A")]
			[Address(RVA = "0x995D48", Offset = "0x995D48", VA = "0x995D48")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0x995D60", Offset = "0x995D60", VA = "0x995D60", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0x996090", Offset = "0x996090", VA = "0x996090", Slot = "5")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0x9960AC", Offset = "0x9960AC", VA = "0x9960AC", Slot = "6")]
		protected virtual void OnButtonDown(HVRPhysicsButton button)
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0x996284", Offset = "0x996284", VA = "0x996284", Slot = "7")]
		protected virtual void Unlock()
		{
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0x996314", Offset = "0x996314", VA = "0x996314")]
		public DemoKeypad()
		{
		}
	}
	[Token(Token = "0x20003FD")]
	public class DemoKeypadButton : HVRPhysicsButton
	{
		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public char Key;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TextMeshPro TextMeshPro;

		[Token(Token = "0x6001620")]
		[Address(RVA = "0x9963AC", Offset = "0x9963AC", VA = "0x9963AC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0x99642C", Offset = "0x99642C", VA = "0x99642C")]
		public DemoKeypadButton()
		{
		}
	}
	[Token(Token = "0x20003FE")]
	public class DemoLeverDisplay : MonoBehaviour
	{
		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _step;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _angle;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshPro _tm;

		[Token(Token = "0x6001622")]
		[Address(RVA = "0x996434", Offset = "0x996434", VA = "0x996434")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0x99648C", Offset = "0x99648C", VA = "0x99648C")]
		public void OnStepChanged(int step)
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0x996570", Offset = "0x996570", VA = "0x996570")]
		public void OnAngleChanged(float angle, float delta)
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0x996658", Offset = "0x996658", VA = "0x996658")]
		public DemoLeverDisplay()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	[RequireComponent(typeof(DemoPassthroughSocket))]
	public class DemoLock : MonoBehaviour
	{
		[Token(Token = "0x2000400")]
		[CompilerGenerated]
		private sealed class <MoveKey>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HVRGrabbable key;

			[Token(Token = "0x40013D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DemoLock <>4__this;

			[Token(Token = "0x40013D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <start>5__2;

			[Token(Token = "0x40013DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Quaternion <startRot>5__3;

			[Token(Token = "0x40013DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <elapsed>5__4;

			[Token(Token = "0x1700027A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600162E")]
				[Address(RVA = "0x996E04", Offset = "0x996E04", VA = "0x996E04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700027B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001630")]
				[Address(RVA = "0x996E4C", Offset = "0x996E4C", VA = "0x996E4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600162B")]
			[Address(RVA = "0x996A14", Offset = "0x996A14", VA = "0x996A14")]
			[DebuggerHidden]
			public <MoveKey>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x600162C")]
			[Address(RVA = "0x996AC0", Offset = "0x996AC0", VA = "0x996AC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600162D")]
			[Address(RVA = "0x996AC4", Offset = "0x996AC4", VA = "0x996AC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600162F")]
			[Address(RVA = "0x996E0C", Offset = "0x996E0C", VA = "0x996E0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DemoPassthroughSocket Socket;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRGrabbable FaceGrabbable;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject Face;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform Key;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float AnimationTime;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip SFXUnlocked;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip SFXKeyInserted;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LockThreshold;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent Unlocked;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _unlocked;

		[Token(Token = "0x6001626")]
		[Address(RVA = "0x996660", Offset = "0x996660", VA = "0x996660")]
		public void Start()
		{
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0x99673C", Offset = "0x99673C", VA = "0x99673C")]
		public void Update()
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0x996960", Offset = "0x996960", VA = "0x996960")]
		private void OnKeyGrabbed(HVRGrabberBase grabber, HVRGrabbable key)
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0x996984", Offset = "0x996984", VA = "0x996984")]
		[IteratorStateMachine(typeof(<MoveKey>d__13))]
		private IEnumerator MoveKey(HVRGrabbable key)
		{
			return null;
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0x996A3C", Offset = "0x996A3C", VA = "0x996A3C")]
		public DemoLock()
		{
		}
	}
	[Token(Token = "0x2000401")]
	[RequireComponent(typeof(HingeJoint))]
	[RequireComponent(typeof(Rigidbody))]
	public class DemoLockedDoor : MonoBehaviour
	{
		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HingeJoint _hinge;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody _rigidbody;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinAngle;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float MaxAngle;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool LockOnStart;

		[Token(Token = "0x6001631")]
		[Address(RVA = "0x996E54", Offset = "0x996E54", VA = "0x996E54")]
		private void Start()
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0x996F08", Offset = "0x996F08", VA = "0x996F08")]
		private void Lock()
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0x996FBC", Offset = "0x996FBC", VA = "0x996FBC")]
		public void Unlock()
		{
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0x997070", Offset = "0x997070", VA = "0x997070")]
		public DemoLockedDoor()
		{
		}
	}
	[Token(Token = "0x2000402")]
	public class DemoManualTeleport : MonoBehaviour
	{
		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform PositionOne;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform PositionTwo;

		[Token(Token = "0x1700027C")]
		public HVRTeleporter Teleporter
		{
			[Token(Token = "0x6001635")]
			[Address(RVA = "0x997080", Offset = "0x997080", VA = "0x997080")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001636")]
			[Address(RVA = "0x997088", Offset = "0x997088", VA = "0x997088")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0x997090", Offset = "0x997090", VA = "0x997090")]
		public void Start()
		{
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0x9971F0", Offset = "0x9971F0", VA = "0x9971F0")]
		public void GoToOne()
		{
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0x9972FC", Offset = "0x9972FC", VA = "0x9972FC")]
		public void GoToTwo()
		{
		}

		[Token(Token = "0x600163A")]
		[Address(RVA = "0x997408", Offset = "0x997408", VA = "0x997408")]
		public DemoManualTeleport()
		{
		}
	}
	[Token(Token = "0x2000404")]
	public class DemoPassthroughSocket : HVRSocket
	{
		[Token(Token = "0x600163E")]
		[Address(RVA = "0x9974B0", Offset = "0x9974B0", VA = "0x9974B0", Slot = "26")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0x9974DC", Offset = "0x9974DC", VA = "0x9974DC", Slot = "43")]
		protected override void OnGrabbed(HVRGrabArgs args)
		{
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0x997590", Offset = "0x997590", VA = "0x997590")]
		public DemoPassthroughSocket()
		{
		}
	}
	[Token(Token = "0x2000405")]
	public class DemoPowerUnit : MonoBehaviour
	{
		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent PoweredUp;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRSocket LeftSocket;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HVRSocket RightSocket;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshRenderer LeftLight;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MeshRenderer RightLight;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HVRRotationTracker LeverRotation;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float RequiredAngle;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip SFXPoweredOn;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int RequiredCells;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int SocketedCellCount;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool Engaged;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Material OnMaterial;

		[Token(Token = "0x1700027D")]
		public bool IsPoweredUp
		{
			[Token(Token = "0x6001641")]
			[Address(RVA = "0x997598", Offset = "0x997598", VA = "0x997598")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0x9975A8", Offset = "0x9975A8", VA = "0x9975A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0x9976AC", Offset = "0x9976AC", VA = "0x9976AC")]
		private void OnRightSocketGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0x997740", Offset = "0x997740", VA = "0x997740")]
		private void OnLeftSocketGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0x9977D4", Offset = "0x9977D4", VA = "0x9977D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0x997964", Offset = "0x997964", VA = "0x997964")]
		public DemoPowerUnit()
		{
		}
	}
	[Token(Token = "0x2000406")]
	public enum SafeDialState
	{
		[Token(Token = "0x40013F3")]
		CamOne,
		[Token(Token = "0x40013F4")]
		CamTwo,
		[Token(Token = "0x40013F5")]
		CamThree,
		[Token(Token = "0x40013F6")]
		Unlocked
	}
	[Token(Token = "0x2000407")]
	public class DemoSafeDial : HVRRotationTracker
	{
		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshPro NumberLabel;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshPro DebugLabel;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool DisplayDebug;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int First;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int Second;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int Third;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int CurrentNumber;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float CamDistance;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float PreviousDistance;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float Tolerance;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float LowerBound;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float UpperBound;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public int AccuracyAllowance;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UnityEvent Unlocked;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SafeDialState _state;

		[Token(Token = "0x1700027E")]
		public SafeDialState State
		{
			[Token(Token = "0x6001647")]
			[Address(RVA = "0x9979E8", Offset = "0x9979E8", VA = "0x9979E8")]
			get
			{
				return default(SafeDialState);
			}
			[Token(Token = "0x6001648")]
			[Address(RVA = "0x9979F0", Offset = "0x9979F0", VA = "0x9979F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700027F")]
		public int NumberOfRotations
		{
			[Token(Token = "0x6001649")]
			[Address(RVA = "0x997AA8", Offset = "0x997AA8", VA = "0x997AA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000280")]
		public bool IsFirstInRange
		{
			[Token(Token = "0x600164D")]
			[Address(RVA = "0x997EBC", Offset = "0x997EBC", VA = "0x997EBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000281")]
		public bool IsSecondInRange
		{
			[Token(Token = "0x600164E")]
			[Address(RVA = "0x997EE8", Offset = "0x997EE8", VA = "0x997EE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000282")]
		public bool IsThirdInRange
		{
			[Token(Token = "0x600164F")]
			[Address(RVA = "0x997F14", Offset = "0x997F14", VA = "0x997F14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0x997AE8", Offset = "0x997AE8", VA = "0x997AE8", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0x9979F8", Offset = "0x9979F8", VA = "0x9979F8")]
		private void ComputeBounds()
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0x997EB4", Offset = "0x997EB4", VA = "0x997EB4", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0x997E98", Offset = "0x997E98", VA = "0x997E98")]
		public void ResetLockState(SafeDialState state)
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0x997F3C", Offset = "0x997F3C", VA = "0x997F3C", Slot = "6")]
		protected override void OnStepChanged(int step, bool raiseEvents)
		{
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0x99835C", Offset = "0x99835C", VA = "0x99835C", Slot = "7")]
		protected override void OnAngleChanged(float angle, float delta)
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0x9984DC", Offset = "0x9984DC", VA = "0x9984DC")]
		public DemoSafeDial()
		{
		}
	}
	[Token(Token = "0x2000408")]
	public class DemoSafeDoor : MonoBehaviour
	{
		[Token(Token = "0x6001654")]
		[Address(RVA = "0x998570", Offset = "0x998570", VA = "0x998570")]
		public DemoSafeDoor()
		{
		}
	}
	[Token(Token = "0x2000409")]
	public class DemoSlidingDoor : MonoBehaviour
	{
		[Token(Token = "0x200040A")]
		[CompilerGenerated]
		private sealed class <OpenDoorRoutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400140F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001410")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001411")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DemoSlidingDoor <>4__this;

			[Token(Token = "0x4001412")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <elapsed>5__2;

			[Token(Token = "0x4001413")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <LockRotateSpeed>5__3;

			[Token(Token = "0x4001414")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <time>5__4;

			[Token(Token = "0x17000283")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600165C")]
				[Address(RVA = "0x998C60", Offset = "0x998C60", VA = "0x998C60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000284")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600165E")]
				[Address(RVA = "0x998CA8", Offset = "0x998CA8", VA = "0x998CA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001659")]
			[Address(RVA = "0x998718", Offset = "0x998718", VA = "0x998718")]
			[DebuggerHidden]
			public <OpenDoorRoutine>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x600165A")]
			[Address(RVA = "0x998754", Offset = "0x998754", VA = "0x998754", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600165B")]
			[Address(RVA = "0x998758", Offset = "0x998758", VA = "0x998758", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600165D")]
			[Address(RVA = "0x998C68", Offset = "0x998C68", VA = "0x998C68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody LeftDoor;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody RightDoor;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform Lock;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LockRotateTime;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float LockRotateAngles;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float OpenOffset;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Speed;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip OpenedClip;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _opened;

		[Token(Token = "0x6001655")]
		[Address(RVA = "0x998578", Offset = "0x998578", VA = "0x998578")]
		public void Start()
		{
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0x99857C", Offset = "0x99857C", VA = "0x99857C")]
		public void OpenDoors()
		{
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0x9986A4", Offset = "0x9986A4", VA = "0x9986A4")]
		[IteratorStateMachine(typeof(<OpenDoorRoutine>d__11))]
		private IEnumerator OpenDoorRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0x998740", Offset = "0x998740", VA = "0x998740")]
		public DemoSlidingDoor()
		{
		}
	}
	[Token(Token = "0x200040B")]
	public class DemoSocketables : HVREnumFlagsSocketable<DemoSocketableItems>
	{
		[Token(Token = "0x600165F")]
		[Address(RVA = "0x998CB0", Offset = "0x998CB0", VA = "0x998CB0")]
		public DemoSocketables()
		{
		}
	}
	[Token(Token = "0x200040C")]
	[Flags]
	public enum DemoSocketableItems
	{
		[Token(Token = "0x4001416")]
		None = 0,
		[Token(Token = "0x4001417")]
		Pistol = 1,
		[Token(Token = "0x4001418")]
		PistolMagazine = 2,
		[Token(Token = "0x4001419")]
		SMG = 4,
		[Token(Token = "0x400141A")]
		SMGMagazine = 8,
		[Token(Token = "0x400141B")]
		PowerCell = 0x10,
		[Token(Token = "0x400141C")]
		SmallObject = 0x20,
		[Token(Token = "0x400141D")]
		LargeObject = 0x40,
		[Token(Token = "0x400141E")]
		DoorKey = 0x80,
		[Token(Token = "0x400141F")]
		ShotgunShell = 0x100,
		[Token(Token = "0x4001420")]
		Valve = 0x200,
		[Token(Token = "0x4001421")]
		Key = 0x400,
		[Token(Token = "0x4001422")]
		All = -1
	}
	[Token(Token = "0x200040D")]
	public class DemoSocketFilter : HVREnumFlagsSocketFilter<DemoSocketableItems>
	{
		[Token(Token = "0x6001660")]
		[Address(RVA = "0x998CF8", Offset = "0x998CF8", VA = "0x998CF8")]
		public DemoSocketFilter()
		{
		}
	}
	[Token(Token = "0x200040E")]
	public class DemoUIManager : MonoBehaviour
	{
		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HVRPlayerController Player;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRCameraRig CameraRig;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HVRPlayerInputs Inputs;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI SitStandText;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI PauseText;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI ForceGrabText;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI LeftForceText;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI RightForceText;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Slider TurnRateSlider;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Slider SnapTurnSlider;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshProUGUI TurnRateText;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshProUGUI SnapRateText;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Toggle SmoothTurnToggle;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Toggle LineGrabTrigger;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public HVRForceGrabber LeftForce;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public HVRForceGrabber RightForce;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public HVRJointHand LeftHand;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public HVRJointHand RightHand;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform leftparent;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform rightParent;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool Paused;

		[Token(Token = "0x6001661")]
		[Address(RVA = "0x998D40", Offset = "0x998D40", VA = "0x998D40")]
		private void Start()
		{
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0x9999C8", Offset = "0x9999C8", VA = "0x9999C8")]
		private void OnLineGrabTriggerChanged(bool arg0)
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0x9999F0", Offset = "0x9999F0", VA = "0x9999F0")]
		public void CalibrateHeight()
		{
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0x999A70", Offset = "0x999A70", VA = "0x999A70")]
		public void OnSitStandClicked()
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0x999AA8", Offset = "0x999AA8", VA = "0x999AA8")]
		public void OnForceGrabClicked()
		{
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0x99980C", Offset = "0x99980C", VA = "0x99980C")]
		private void UpdateForceGrabButton()
		{
		}

		[Token(Token = "0x6001667")]
		[Address(RVA = "0x999778", Offset = "0x999778", VA = "0x999778")]
		private void UpdateSitStandButton()
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0x999AD4", Offset = "0x999AD4", VA = "0x999AD4")]
		public void OnTurnRateChanged(float rate)
		{
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0x999B18", Offset = "0x999B18", VA = "0x999B18")]
		public void OnSnapTurnRateChanged(float rate)
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0x999B5C", Offset = "0x999B5C", VA = "0x999B5C")]
		public void OnSmoothTurnChanged(bool smooth)
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0x999B80", Offset = "0x999B80", VA = "0x999B80")]
		public void OnLeftForceGrabModeClicked()
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0x999C10", Offset = "0x999C10", VA = "0x999C10")]
		public void OnRightForceGrabModeClicked()
		{
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0x9998A0", Offset = "0x9998A0", VA = "0x9998A0")]
		private void UpdateLeftForceButton()
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0x999934", Offset = "0x999934", VA = "0x999934")]
		private void UpdateRightForceButton()
		{
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0x999CA0", Offset = "0x999CA0", VA = "0x999CA0")]
		public void TogglePause()
		{
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0x999E44", Offset = "0x999E44", VA = "0x999E44")]
		public DemoUIManager()
		{
		}
	}
	[Token(Token = "0x2000410")]
	public class DemoValveHologram : MonoBehaviour
	{
		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Interval;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion StartRotation;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion EndRotation;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion _current;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion _next;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float _elapsed;

		[Token(Token = "0x6001678")]
		[Address(RVA = "0x999F7C", Offset = "0x999F7C", VA = "0x999F7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0x999F90", Offset = "0x999F90", VA = "0x999F90")]
		private void Update()
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0x99A040", Offset = "0x99A040", VA = "0x99A040")]
		public void Destroy()
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0x99A0AC", Offset = "0x99A0AC", VA = "0x99A0AC")]
		public DemoValveHologram()
		{
		}
	}
	[Token(Token = "0x2000411")]
	[RequireComponent(typeof(DemoPassthroughSocket))]
	public class DemoValveLock : MonoBehaviour
	{
		[Token(Token = "0x2000412")]
		[CompilerGenerated]
		private sealed class <MoveKey>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001447")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001448")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001449")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HVRGrabbable key;

			[Token(Token = "0x400144A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DemoValveLock <>4__this;

			[Token(Token = "0x400144B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <start>5__2;

			[Token(Token = "0x400144C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Quaternion <startRot>5__3;

			[Token(Token = "0x400144D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <elapsed>5__4;

			[Token(Token = "0x17000285")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001684")]
				[Address(RVA = "0x99A514", Offset = "0x99A514", VA = "0x99A514", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000286")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001686")]
				[Address(RVA = "0x99A55C", Offset = "0x99A55C", VA = "0x99A55C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001681")]
			[Address(RVA = "0x99A254", Offset = "0x99A254", VA = "0x99A254")]
			[DebuggerHidden]
			public <MoveKey>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001682")]
			[Address(RVA = "0x99A28C", Offset = "0x99A28C", VA = "0x99A28C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001683")]
			[Address(RVA = "0x99A290", Offset = "0x99A290", VA = "0x99A290", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001685")]
			[Address(RVA = "0x99A51C", Offset = "0x99A51C", VA = "0x99A51C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DemoPassthroughSocket Socket;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRGrabbable FaceGrabbable;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AnimationTime;

		[Token(Token = "0x600167C")]
		[Address(RVA = "0x99A0C0", Offset = "0x99A0C0", VA = "0x99A0C0")]
		public void Start()
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0x99A19C", Offset = "0x99A19C", VA = "0x99A19C")]
		public void Update()
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0x99A1A0", Offset = "0x99A1A0", VA = "0x99A1A0")]
		private void OnValveGrabbed(HVRGrabberBase grabber, HVRGrabbable key)
		{
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0x99A1C4", Offset = "0x99A1C4", VA = "0x99A1C4")]
		[IteratorStateMachine(typeof(<MoveKey>d__6))]
		private IEnumerator MoveKey(HVRGrabbable key)
		{
			return null;
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0x99A27C", Offset = "0x99A27C", VA = "0x99A27C")]
		public DemoValveLock()
		{
		}
	}
}
namespace HeurekaGames
{
	[Token(Token = "0x2000413")]
	public static class Extensions
	{
		[Token(Token = "0x6001687")]
		[Address(RVA = "0x99A564", Offset = "0x99A564", VA = "0x99A564")]
		public static Vector2 YZ(this Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0x99A56C", Offset = "0x99A56C", VA = "0x99A56C")]
		public static Vector2[] YZ(this Vector3[] v)
		{
			return null;
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0x99A618", Offset = "0x99A618", VA = "0x99A618")]
		public static float Remap(this float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0x99A634", Offset = "0x99A634", VA = "0x99A634")]
		public static string ToCamelCase(this string camelCaseString)
		{
			return null;
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0x99A6CC", Offset = "0x99A6CC", VA = "0x99A6CC")]
		public static bool Contains(this string source, string toCheck, StringComparison comp)
		{
			return default(bool);
		}

		[Token(Token = "0x600168C")]
		public static void SetComponentRecursively<T>(this GameObject gameObject, bool tf) where T : Component
		{
		}

		[Token(Token = "0x600168D")]
		public static void CastList<T>(this List<T> targetList)
		{
		}

		[Token(Token = "0x600168E")]
		public static bool Has<T>(this Enum type, T value)
		{
			return default(bool);
		}

		[Token(Token = "0x600168F")]
		public static bool Is<T>(this Enum type, T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001690")]
		public static T Add<T>(this Enum type, T value)
		{
			return (T)null;
		}

		[Token(Token = "0x6001691")]
		public static T Remove<T>(this Enum type, T value)
		{
			return (T)null;
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0x99A6FC", Offset = "0x99A6FC", VA = "0x99A6FC")]
		public static Color ModifiedAlpha(this Color color, float alpha)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x2000414")]
	public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
	{
		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool applicationIsQuitting;

		[Token(Token = "0x17000287")]
		public static T Instance
		{
			[Token(Token = "0x6001693")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001694")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6001695")]
		public Singleton()
		{
		}
	}
}
namespace WenklyStudio
{
	[Token(Token = "0x2000415")]
	public class HeadColliderController : MonoBehaviour
	{
		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action OnHornHeadTriggerEnter;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action OnHornHeadTriggerExit;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SalvaHandleController salvaHandleController;

		[Token(Token = "0x6001697")]
		[Address(RVA = "0x99A704", Offset = "0x99A704", VA = "0x99A704")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0x99A804", Offset = "0x99A804", VA = "0x99A804")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0x99A904", Offset = "0x99A904", VA = "0x99A904")]
		public HeadColliderController()
		{
		}
	}
	[Token(Token = "0x2000416")]
	public class DemoScript : MonoBehaviour
	{
		[Token(Token = "0x2000417")]
		private enum RotationAxes
		{
			[Token(Token = "0x4001465")]
			MouseXAndY,
			[Token(Token = "0x4001466")]
			MouseX,
			[Token(Token = "0x4001467")]
			MouseY
		}

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> Mirrors;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject LightBulb;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Toggle RecursionToggle;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float rotationModifier;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float moveModifier;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material lightBulbMaterial;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RotationAxes axes;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float sensitivityX;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float sensitivityY;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float minimumX;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float maximumX;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float minimumY;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float maximumY;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float rotationX;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float rotationY;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion originalRotation;

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x99A90C", Offset = "0x99A90C", VA = "0x99A90C")]
		private void Start()
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0x99A9D0", Offset = "0x99A9D0", VA = "0x99A9D0")]
		private void Update()
		{
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0x99B2EC", Offset = "0x99B2EC", VA = "0x99B2EC")]
		public void MirrorRecursionToggled()
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0x99B2F0", Offset = "0x99B2F0", VA = "0x99B2F0")]
		public void ChangeMirrorRecursion()
		{
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0x99B1A0", Offset = "0x99B1A0", VA = "0x99B1A0")]
		private void UpdateMovement()
		{
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0x99A9F8", Offset = "0x99A9F8", VA = "0x99A9F8")]
		private void RotateMirror()
		{
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0x99AB78", Offset = "0x99AB78", VA = "0x99AB78")]
		private void MoveLightBulb()
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0x99ACEC", Offset = "0x99ACEC", VA = "0x99ACEC")]
		private void UpdateMouseLook()
		{
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0x99B47C", Offset = "0x99B47C", VA = "0x99B47C")]
		public static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0x99B4B8", Offset = "0x99B4B8", VA = "0x99B4B8")]
		public DemoScript()
		{
		}
	}
	[Token(Token = "0x2000418")]
	public class MirrorCameraScript : MonoBehaviour
	{
		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject MirrorObject;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer mirrorRenderer;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material mirrorMaterial;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MirrorScript mirrorScript;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Camera cameraObject;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture reflectionTexture;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Matrix4x4 reflectionMatrix;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int oldReflectionTextureSize;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool renderingMirror;

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0x99B4E4", Offset = "0x99B4E4", VA = "0x99B4E4")]
		private void Start()
		{
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0x99B650", Offset = "0x99B650", VA = "0x99B650")]
		private void CreateRenderTexture()
		{
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0x99B8D4", Offset = "0x99B8D4", VA = "0x99B8D4")]
		private void Update()
		{
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0x99B8D8", Offset = "0x99B8D8", VA = "0x99B8D8")]
		private void UpdateCameraProperties(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0x99BAD4", Offset = "0x99BAD4", VA = "0x99BAD4")]
		internal void RenderMirror()
		{
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0x99C550", Offset = "0x99C550", VA = "0x99C550")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0x99C3D4", Offset = "0x99C3D4", VA = "0x99C3D4")]
		private Vector4 CameraSpacePlane(ref Matrix4x4 worldToCameraMatrix, ref Vector3 pos, ref Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0x99C2D8", Offset = "0x99C2D8", VA = "0x99C2D8")]
		private void CalculateReflectionMatrix(ref Vector4 plane)
		{
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0x99C5EC", Offset = "0x99C5EC", VA = "0x99C5EC")]
		private static void CalculateObliqueMatrix(ref Matrix4x4 projection, ref Vector4 clipPlane)
		{
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0x99C748", Offset = "0x99C748", VA = "0x99C748")]
		private static float Sign(float a)
		{
			return default(float);
		}

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0x99C768", Offset = "0x99C768", VA = "0x99C768")]
		public MirrorCameraScript()
		{
		}
	}
	[Token(Token = "0x2000419")]
	public class MirrorReflectionScript : MonoBehaviour
	{
		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MirrorCameraScript childScript;

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0x99C770", Offset = "0x99C770", VA = "0x99C770")]
		private void Start()
		{
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0x99C888", Offset = "0x99C888", VA = "0x99C888")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0x99C8A0", Offset = "0x99C8A0", VA = "0x99C8A0")]
		public MirrorReflectionScript()
		{
		}
	}
	[Token(Token = "0x200041A")]
	public class MirrorScript : MonoBehaviour
	{
		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Maximum number of per pixel lights that will show in the mirrored image")]
		public int MaximumPerPixelLights;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Texture size for the mirror, depending on how close the player can get to the mirror, this will need to be larger")]
		public int TextureSize;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Subtracted from the near plane of the mirror")]
		public float ClipPlaneOffset;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Far clip plane for mirro camera")]
		public float FarClipPlane;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("What layers will be reflected?")]
		public LayerMask ReflectLayers;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Add a flare layer to the reflection camera?")]
		public bool AddFlareLayer;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Tooltip("For quads, the normal points forward (true). For planes, the normal points up (false)")]
		public bool NormalIsForward;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Aspect ratio (width / height). Set to 0 to use default.")]
		public float AspectRatio;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Set to true if you have multiple mirrors facing each other to get an infinite effect, otherwise leave as false for a more realistic mirror effect.")]
		public bool MirrorRecursion;

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0x99C8A8", Offset = "0x99C8A8", VA = "0x99C8A8")]
		public MirrorScript()
		{
		}
	}
	[Token(Token = "0x200041B")]
	public class PlayerWealthCalculator : MonoBehaviour
	{
		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ShopItemsController shopItemsController;

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0x99C8EC", Offset = "0x99C8EC", VA = "0x99C8EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0x99C8F0", Offset = "0x99C8F0", VA = "0x99C8F0")]
		public float GetPlayerWealth()
		{
			return default(float);
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0x99C8F8", Offset = "0x99C8F8", VA = "0x99C8F8")]
		public PlayerWealthCalculator()
		{
		}
	}
	[Token(Token = "0x200041C")]
	public class CatapultLeverController : MonoBehaviour
	{
		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CatapultController catapultController;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer outline;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color defaultColor;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ArrowHandController oculusController;

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0x99C900", Offset = "0x99C900", VA = "0x99C900")]
		private void Awake()
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0x99C96C", Offset = "0x99C96C", VA = "0x99C96C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0x99CA5C", Offset = "0x99CA5C", VA = "0x99CA5C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0x99CAD4", Offset = "0x99CAD4", VA = "0x99CAD4")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0x99CCC8", Offset = "0x99CCC8", VA = "0x99CCC8")]
		private bool CanPullLever(Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0x99CDE0", Offset = "0x99CDE0", VA = "0x99CDE0")]
		private bool IsOculusPlayerDownTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0x99CE84", Offset = "0x99CE84", VA = "0x99CE84")]
		private bool IsSteamPLayerDownTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0x99CF34", Offset = "0x99CF34", VA = "0x99CF34")]
		public CatapultLeverController()
		{
		}
	}
	[Token(Token = "0x200041D")]
	public class BowController : MonoBehaviourPun, IPunObservable, IResetable, ISettable
	{
		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distanceFromStringStartPointToBowAnimationTimeMultiplier;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float minimalBowTensionToShoot;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float arrowVelocityMultiplierPC;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float arrowVelocityMultiplierMobile;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float bowReleaseAnimationSpeed;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private ArrowHandController arrowHandController;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject arrowPrefab;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform handAttachPoint;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform arrowAttachPoint;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform stringStartPoint;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform bowHandGrip;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Transform arrowHandGrip;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform arrowHandGripOffseted;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Transform bowParent;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private float arrowVelocityMultiplier;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Animator bowAnimator;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private InputActionReference interactionInput;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[Range(0f, 10f)]
		private float vibrationsDuration;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Range(0f, 320f)]
		[SerializeField]
		private float vibrationsFrequency;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private float vibrationsAmplitudeMultiplier;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Quaternion bowParentDefaultLocalRotation;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int distancePart;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float lerpValue;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool isArrowAttached;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		private bool isHandAttached;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float bowAnimationNormalizedTime;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool canRelase;

		[Token(Token = "0x17000288")]
		public Transform HandAttachPoint
		{
			[Token(Token = "0x60016C0")]
			[Address(RVA = "0x99D0D4", Offset = "0x99D0D4", VA = "0x99D0D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016C1")]
			[Address(RVA = "0x99D0DC", Offset = "0x99D0DC", VA = "0x99D0DC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000289")]
		public Transform ArrowAttachPoint
		{
			[Token(Token = "0x60016C2")]
			[Address(RVA = "0x99D0E4", Offset = "0x99D0E4", VA = "0x99D0E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016C3")]
			[Address(RVA = "0x99D0EC", Offset = "0x99D0EC", VA = "0x99D0EC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700028A")]
		public bool IsReleaseAnimationPlaying
		{
			[Token(Token = "0x60016C4")]
			[Address(RVA = "0x99D0F4", Offset = "0x99D0F4", VA = "0x99D0F4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016C5")]
			[Address(RVA = "0x99D0FC", Offset = "0x99D0FC", VA = "0x99D0FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700028B")]
		public bool IsHandAttached
		{
			[Token(Token = "0x60016C6")]
			[Address(RVA = "0x99D108", Offset = "0x99D108", VA = "0x99D108")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016C7")]
			[Address(RVA = "0x99D110", Offset = "0x99D110", VA = "0x99D110")]
			set
			{
			}
		}

		[Token(Token = "0x1700028C")]
		public bool IsArrowAttached
		{
			[Token(Token = "0x60016C8")]
			[Address(RVA = "0x99D154", Offset = "0x99D154", VA = "0x99D154")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016C9")]
			[Address(RVA = "0x99D15C", Offset = "0x99D15C", VA = "0x99D15C")]
			set
			{
			}
		}

		[Token(Token = "0x1700028D")]
		public float BowAnimationNormalizedTime
		{
			[Token(Token = "0x60016CA")]
			[Address(RVA = "0x99D1C8", Offset = "0x99D1C8", VA = "0x99D1C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016CB")]
			[Address(RVA = "0x99D1D0", Offset = "0x99D1D0", VA = "0x99D1D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700028E")]
		private float MinimalBowTensionToShoot
		{
			[Token(Token = "0x60016CC")]
			[Address(RVA = "0x99D210", Offset = "0x99D210", VA = "0x99D210")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700028F")]
		private float ArrowVelocityMultiplier
		{
			[Token(Token = "0x60016CD")]
			[Address(RVA = "0x99D218", Offset = "0x99D218", VA = "0x99D218")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000290")]
		private Transform ArrowHandGrip
		{
			[Token(Token = "0x60016CE")]
			[Address(RVA = "0x99D288", Offset = "0x99D288", VA = "0x99D288")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400001C")]
		public static event Action<GameObject> OnArrowFire
		{
			[Token(Token = "0x60016BE")]
			[Address(RVA = "0x99CF3C", Offset = "0x99CF3C", VA = "0x99CF3C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60016BF")]
			[Address(RVA = "0x99D008", Offset = "0x99D008", VA = "0x99D008")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0x99D2F4", Offset = "0x99D2F4", VA = "0x99D2F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0x99D42C", Offset = "0x99D42C", VA = "0x99D42C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0x99D5B4", Offset = "0x99D5B4", VA = "0x99D5B4")]
		private void Update()
		{
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0x99D784", Offset = "0x99D784", VA = "0x99D784")]
		private void StartArrowReleasing()
		{
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0x99D8A8", Offset = "0x99D8A8", VA = "0x99D8A8")]
		public void InitializeWithoutPlayer()
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x99D8B4", Offset = "0x99D8B4", VA = "0x99D8B4")]
		public void InitializeWithPlayer()
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x99D6C0", Offset = "0x99D6C0", VA = "0x99D6C0")]
		private void UpdateLoadedBow()
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x99D7B4", Offset = "0x99D7B4", VA = "0x99D7B4")]
		private void UpdateArrowReleasing()
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x99E0F8", Offset = "0x99E0F8", VA = "0x99E0F8")]
		private void SetInputClick(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0x99E124", Offset = "0x99E124", VA = "0x99E124")]
		private void SetInputUnClick(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0x99E154", Offset = "0x99E154", VA = "0x99E154")]
		private void StartArrowReleasing(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x99E1FC", Offset = "0x99E1FC", VA = "0x99E1FC")]
		private bool IsBowTensionedEnoughToReleaseArrow()
		{
			return default(bool);
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0x99DAD0", Offset = "0x99DAD0", VA = "0x99DAD0")]
		private bool CanShoot()
		{
			return default(bool);
		}

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0x99D758", Offset = "0x99D758", VA = "0x99D758")]
		private bool CanReleaseArrow()
		{
			return default(bool);
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0x99D8EC", Offset = "0x99D8EC", VA = "0x99D8EC")]
		private void UpdateBowRotation()
		{
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0x99D6D8", Offset = "0x99D6D8", VA = "0x99D6D8")]
		private void UpdateBowSnappingToController()
		{
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0x99D9FC", Offset = "0x99D9FC", VA = "0x99D9FC")]
		private void UpdateBowTensionValue()
		{
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0x99E004", Offset = "0x99E004", VA = "0x99E004")]
		private void TriggerHapticPulseWhenShot()
		{
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0x99D854", Offset = "0x99D854", VA = "0x99D854")]
		private void RumbleControllerInConstPeriodOfDistance(float distfromStringStartPoint)
		{
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0x99E210", Offset = "0x99E210", VA = "0x99E210")]
		private void ApplyHaptics()
		{
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x99E0AC", Offset = "0x99E0AC", VA = "0x99E0AC")]
		private void PlayReleaseAnimation()
		{
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x99DAF4", Offset = "0x99DAF4", VA = "0x99DAF4")]
		public void Shoot()
		{
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0x99E398", Offset = "0x99E398", VA = "0x99E398")]
		[PunRPC]
		private void ReleaseArrow(int ArrowPhotonViewID, Vector3 Position, Vector3 Rotation, Vector3 loacalscale, Vector3 arrowVelocity)
		{
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0x99E31C", Offset = "0x99E31C", VA = "0x99E31C")]
		private Vector3 CountArrowStartingVelocity(Vector3 forward, float distFromStringToHand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0x99E5AC", Offset = "0x99E5AC", VA = "0x99E5AC", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0x99D56C", Offset = "0x99D56C", VA = "0x99D56C", Slot = "5")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0x99E7A4", Offset = "0x99E7A4", VA = "0x99E7A4", Slot = "6")]
		public void SetReferences()
		{
		}

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0x99E7D0", Offset = "0x99E7D0", VA = "0x99E7D0")]
		public BowController()
		{
		}
	}
	[Token(Token = "0x200041E")]
	public class GatlingGunController : MonoBehaviour
	{
		[Token(Token = "0x200041F")]
		[CompilerGenerated]
		private sealed class <ReleaseShellCorutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GatlingGunController <>4__this;

			[Token(Token = "0x17000291")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016F2")]
				[Address(RVA = "0x99EA84", Offset = "0x99EA84", VA = "0x99EA84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000292")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016F4")]
				[Address(RVA = "0x99EACC", Offset = "0x99EACC", VA = "0x99EACC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016EF")]
			[Address(RVA = "0x99E970", Offset = "0x99E970", VA = "0x99E970")]
			[DebuggerHidden]
			public <ReleaseShellCorutine>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60016F0")]
			[Address(RVA = "0x99EA10", Offset = "0x99EA10", VA = "0x99EA10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016F1")]
			[Address(RVA = "0x99EA14", Offset = "0x99EA14", VA = "0x99EA14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016F3")]
			[Address(RVA = "0x99EA8C", Offset = "0x99EA8C", VA = "0x99EA8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GatlingGunCrank gatlingGunCrank;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GatlingGunGripController gatlingGunGripController;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private CardrigeReleaseController cardrigeReleaseController;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private SingleBulletShootController singleBulletShootController;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GunFxController gunFxController;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private WaitForSeconds releaseShellDelay;

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0x99E7F4", Offset = "0x99E7F4", VA = "0x99E7F4")]
		public void Shoot()
		{
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0x99E880", Offset = "0x99E880", VA = "0x99E880")]
		private bool IsMatchingLocalPlayerId(int playerId)
		{
			return default(bool);
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0x99E8EC", Offset = "0x99E8EC", VA = "0x99E8EC")]
		[IteratorStateMachine(typeof(<ReleaseShellCorutine>d__8))]
		private IEnumerator ReleaseShellCorutine()
		{
			return null;
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0x99E998", Offset = "0x99E998", VA = "0x99E998")]
		public GatlingGunController()
		{
		}
	}
	[Token(Token = "0x2000420")]
	public class SalvaHandleController : MonoBehaviourPun, IPunObservable
	{
		[Token(Token = "0x2000421")]
		[CompilerGenerated]
		private sealed class <WaitToDisplayText>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SalvaHandleController <>4__this;

			[Token(Token = "0x17000297")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600170D")]
				[Address(RVA = "0x9A00E8", Offset = "0x9A00E8", VA = "0x9A00E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000298")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600170F")]
				[Address(RVA = "0x9A0130", Offset = "0x9A0130", VA = "0x9A0130", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600170A")]
			[Address(RVA = "0x99F920", Offset = "0x99F920", VA = "0x99F920")]
			[DebuggerHidden]
			public <WaitToDisplayText>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x600170B")]
			[Address(RVA = "0x9A0018", Offset = "0x9A0018", VA = "0x9A0018", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600170C")]
			[Address(RVA = "0x9A001C", Offset = "0x9A001C", VA = "0x9A001C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600170E")]
			[Address(RVA = "0x9A00F0", Offset = "0x9A00F0", VA = "0x9A00F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PickableItemHandleController pickableItemHandleController;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<CatapultController> catapults;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject aimArea;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SpecialSoundEffects soundEffect;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private MicrophoneController microphoneController;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float delayTimeAfterPick;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool isInCorrectPosition;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool wasUsed;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<SalvaHandleController> OnHornTaken;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action<SalvaHandleController> OnHornCloseToHead;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Action<SalvaHandleController> OnSalvaClose;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Action<SalvaHandleController> OnHornWasUsed;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Action<SalvaHandleController> OnMicrophoneNotConnected;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int takerID;

		[Token(Token = "0x17000293")]
		private WaitForSeconds delayAfterFirstPick
		{
			[Token(Token = "0x60016F5")]
			[Address(RVA = "0x99EAD4", Offset = "0x99EAD4", VA = "0x99EAD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000294")]
		public bool WasUsed
		{
			[Token(Token = "0x60016F6")]
			[Address(RVA = "0x99EB44", Offset = "0x99EB44", VA = "0x99EB44")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016F7")]
			[Address(RVA = "0x99EB4C", Offset = "0x99EB4C", VA = "0x99EB4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000295")]
		private bool IsInCorrectPosition
		{
			[Token(Token = "0x60016F8")]
			[Address(RVA = "0x99ECC8", Offset = "0x99ECC8", VA = "0x99ECC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016F9")]
			[Address(RVA = "0x99ECD0", Offset = "0x99ECD0", VA = "0x99ECD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000296")]
		public int TakerID
		{
			[Token(Token = "0x60016FA")]
			[Address(RVA = "0x99ED54", Offset = "0x99ED54", VA = "0x99ED54")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0x99ED5C", Offset = "0x99ED5C", VA = "0x99ED5C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0x99F1D0", Offset = "0x99F1D0", VA = "0x99F1D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0x99F644", Offset = "0x99F644", VA = "0x99F644")]
		private void SetHornWasTaken()
		{
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0x99F770", Offset = "0x99F770", VA = "0x99F770")]
		private void PutTheHornAway()
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0x99F840", Offset = "0x99F840", VA = "0x99F840")]
		[PunRPC]
		private void SendWasUsedtoMaster()
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0x99F880", Offset = "0x99F880", VA = "0x99F880")]
		private void WaveStart()
		{
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0x99EBFC", Offset = "0x99EBFC", VA = "0x99EBFC")]
		private void SetupSalva(bool shouldWait)
		{
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0x99F6FC", Offset = "0x99F6FC", VA = "0x99F6FC")]
		[IteratorStateMachine(typeof(<WaitToDisplayText>d__31))]
		private IEnumerator WaitToDisplayText()
		{
			return null;
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0x99F888", Offset = "0x99F888", VA = "0x99F888")]
		private void SalvaSetter()
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0x99F948", Offset = "0x99F948", VA = "0x99F948")]
		private void SetHornIsCloseToHead()
		{
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0x99FA1C", Offset = "0x99FA1C", VA = "0x99FA1C")]
		private void SetHornIsNotCloseToHead()
		{
		}

		[Token(Token = "0x6001706")]
		[Address(RVA = "0x99FAF0", Offset = "0x99FAF0", VA = "0x99FAF0")]
		private void StartSalva()
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0x99FDD4", Offset = "0x99FDD4", VA = "0x99FDD4")]
		private void TryActivateSalva(SalvaPlayerMicrophoneController salvaPlayerMicrophoneController)
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0x99FF40", Offset = "0x99FF40", VA = "0x99FF40", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0x9A0008", Offset = "0x9A0008", VA = "0x9A0008")]
		public SalvaHandleController()
		{
		}
	}
	[Token(Token = "0x2000422")]
	public class GoldGiftController : MonoBehaviour
	{
		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int goldAmount;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Camera playerCamera;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject floatingText;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Camera vivePlayerCamera;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Camera oculusPlayerCamera;

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x9A0138", Offset = "0x9A0138", VA = "0x9A0138")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0x9A01AC", Offset = "0x9A01AC", VA = "0x9A01AC")]
		public void ShowAmountOfGold()
		{
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0x9A03D8", Offset = "0x9A03D8", VA = "0x9A03D8")]
		public void AddGold()
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0x9A043C", Offset = "0x9A043C", VA = "0x9A043C")]
		public GoldGiftController()
		{
		}
	}
	[Token(Token = "0x2000423")]
	public class SoundPickableController : MonoBehaviour
	{
		[Token(Token = "0x2000424")]
		public enum ObjectType
		{
			[Token(Token = "0x40014C8")]
			metalDish,
			[Token(Token = "0x40014C9")]
			wood,
			[Token(Token = "0x40014CA")]
			papyrus,
			[Token(Token = "0x40014CB")]
			book,
			[Token(Token = "0x40014CC")]
			marble,
			[Token(Token = "0x40014CD")]
			wall,
			[Token(Token = "0x40014CE")]
			metalHelmet,
			[Token(Token = "0x40014CF")]
			candle
		}

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AudioSource hitSound;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip[] hitClipsMetalDish;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip[] hitClipsWood;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip[] hitClipsPapyrus;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip[] hitClipsBook;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip[] hitClipsMarble;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip[] hitClipsWall;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip[] hitClipsMetalHelmet;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip[] hitClipsCandle;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ObjectType type;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int numberRandom;

		[Token(Token = "0x6001714")]
		[Address(RVA = "0x9A044C", Offset = "0x9A044C", VA = "0x9A044C")]
		private void SoundCreateDelete(AudioClip clip, float iVolume)
		{
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0x9A054C", Offset = "0x9A054C", VA = "0x9A054C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0x9A094C", Offset = "0x9A094C", VA = "0x9A094C")]
		public SoundPickableController()
		{
		}
	}
	[Token(Token = "0x2000425")]
	public class ViewPointPerformanceTests : MonoBehaviour
	{
		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isKeyPressedA;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool isKeyPressedB;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool isShootingEnabled;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int viewPointId;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int firstViewPointId;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int lastViewPointId;

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float xAngleOffset;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 handBasePosition;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 baseRotation;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion handBaseRotation;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion parentToFreezeBaseRotation;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform rightControllerPfBaseParent;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform bowParentBaseParent;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Transform cameraVRTransform;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Transform trackingSpace;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Transform viewPointSetter;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Transform bowPositionSetter;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Transform bowParent;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Transform rightControllerPf;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Transform arrowHandGrip;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private List<CapsuleCollider> bodyColliders;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private BoxCollider headCollider;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private ArrowHandController arrowHandController;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private BowController bowController;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private List<Transform> elvenTownViewPoints;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private Vector3 bowCustomRotation;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private Vector3 secondHandPositionOffset;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Vector3 arrowHandGripBaseScale;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private float timeBetweenShootingArrow;

		[Token(Token = "0x6001717")]
		[Address(RVA = "0x9A0954", Offset = "0x9A0954", VA = "0x9A0954")]
		private void Update()
		{
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0x9A0B44", Offset = "0x9A0B44", VA = "0x9A0B44")]
		public void TurnOnViewPointsTests(bool isShooting)
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0x9A0E7C", Offset = "0x9A0E7C", VA = "0x9A0E7C")]
		public void TurnOffViewPointsTests()
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0x9A09F8", Offset = "0x9A09F8", VA = "0x9A09F8")]
		private void TryToReadInput()
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0x9A1060", Offset = "0x9A1060", VA = "0x9A1060")]
		private void ChooseNewViewPoint()
		{
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0x9A096C", Offset = "0x9A096C", VA = "0x9A096C")]
		private void FreezeCamera()
		{
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0x9A0DD4", Offset = "0x9A0DD4", VA = "0x9A0DD4")]
		private void SetViewPoint()
		{
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0x9A0B7C", Offset = "0x9A0B7C", VA = "0x9A0B7C")]
		private void PrepareGameObjectsForViewPointTests(bool isShooting)
		{
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0x9A0E9C", Offset = "0x9A0E9C", VA = "0x9A0E9C")]
		private void ResetGameObjects()
		{
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0x9A1088", Offset = "0x9A1088", VA = "0x9A1088")]
		private void SetActiveColliders(bool isActive)
		{
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0x9A11F8", Offset = "0x9A11F8", VA = "0x9A11F8")]
		public ViewPointPerformanceTests()
		{
		}
	}
}
namespace WenklyStudio.ElvenAssassin
{
	[Token(Token = "0x2000426")]
	public class AODController : MonoBehaviourPun, IResetable
	{
		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool isHouseAOD;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float radius;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float damage;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float detachLimbChance;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float scalingValue;

		[Token(Token = "0x17000299")]
		public float Radius
		{
			[Token(Token = "0x6001722")]
			[Address(RVA = "0x9A1214", Offset = "0x9A1214", VA = "0x9A1214")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700029A")]
		public float Damage
		{
			[Token(Token = "0x6001723")]
			[Address(RVA = "0x9A1224", Offset = "0x9A1224", VA = "0x9A1224")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700029B")]
		public float DetachLimbChance
		{
			[Token(Token = "0x6001724")]
			[Address(RVA = "0x9A1234", Offset = "0x9A1234", VA = "0x9A1234")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0x9A1240", Offset = "0x9A1240", VA = "0x9A1240")]
		public void KillEnemiesInRange(Player owner)
		{
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0x9A188C", Offset = "0x9A188C", VA = "0x9A188C")]
		[PunRPC]
		public void KillPlayersInRange()
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0x9A1A38", Offset = "0x9A1A38", VA = "0x9A1A38")]
		private bool IsLocalPlayerCollider(Collider collider)
		{
			return default(bool);
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0x9A1B94", Offset = "0x9A1B94", VA = "0x9A1B94")]
		public void ScaleExplosion(float sizePercentage)
		{
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0x9A1B9C", Offset = "0x9A1B9C", VA = "0x9A1B9C", Slot = "4")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0x9A1BA8", Offset = "0x9A1BA8", VA = "0x9A1BA8")]
		public AODController()
		{
		}
	}
	[Token(Token = "0x2000427")]
	public class ExplosionSoundPlayer : MonoBehaviourPun
	{
		[Token(Token = "0x40014F2")]
		private const float basePitch = 1f;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource audioSource;

		[Token(Token = "0x600172B")]
		[Address(RVA = "0x9A1BBC", Offset = "0x9A1BBC", VA = "0x9A1BBC")]
		public void PlayExplosionSound()
		{
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0x9A1C84", Offset = "0x9A1C84", VA = "0x9A1C84")]
		[PunRPC]
		private void PlayExplosionSoundRpc()
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x9A1CE0", Offset = "0x9A1CE0", VA = "0x9A1CE0")]
		public ExplosionSoundPlayer()
		{
		}
	}
	[Token(Token = "0x2000428")]
	public class GrenadeController : MonoBehaviourPun, IResetable
	{
		[Token(Token = "0x2000429")]
		[CompilerGenerated]
		private sealed class <FuseCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrenadeController <>4__this;

			[Token(Token = "0x1700029D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600173A")]
				[Address(RVA = "0x9A2118", Offset = "0x9A2118", VA = "0x9A2118", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600173C")]
				[Address(RVA = "0x9A2160", Offset = "0x9A2160", VA = "0x9A2160", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001737")]
			[Address(RVA = "0x9A1E80", Offset = "0x9A1E80", VA = "0x9A1E80")]
			[DebuggerHidden]
			public <FuseCoroutine>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001738")]
			[Address(RVA = "0x9A20B0", Offset = "0x9A20B0", VA = "0x9A20B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001739")]
			[Address(RVA = "0x9A20B4", Offset = "0x9A20B4", VA = "0x9A20B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600173B")]
			[Address(RVA = "0x9A2120", Offset = "0x9A2120", VA = "0x9A2120", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TrailRenderer trailRenderer;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float fuseBurningTime;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject explosionSystem;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject explosionSystemMobile;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AODController AODController;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private List<LayerMask> layersToCollide;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaitForSeconds waitForExplosion;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion zero;

		[Token(Token = "0x1700029C")]
		public GameObject ExplosionSystem
		{
			[Token(Token = "0x600172E")]
			[Address(RVA = "0x9A1CE8", Offset = "0x9A1CE8", VA = "0x9A1CE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0x9A1D58", Offset = "0x9A1D58", VA = "0x9A1D58")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x9A1D94", Offset = "0x9A1D94", VA = "0x9A1D94")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0x9A1D5C", Offset = "0x9A1D5C", VA = "0x9A1D5C")]
		public void StartFuse()
		{
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0x9A1E0C", Offset = "0x9A1E0C", VA = "0x9A1E0C")]
		[IteratorStateMachine(typeof(<FuseCoroutine>d__13))]
		private IEnumerator FuseCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0x9A1EA8", Offset = "0x9A1EA8", VA = "0x9A1EA8")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x9A1EAC", Offset = "0x9A1EAC", VA = "0x9A1EAC")]
		private void Explode()
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x9A2060", Offset = "0x9A2060", VA = "0x9A2060", Slot = "4")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0x9A2094", Offset = "0x9A2094", VA = "0x9A2094")]
		public GrenadeController()
		{
		}
	}
	[Token(Token = "0x200042A")]
	public class GrenadeShootController : MonoBehaviourPun, IShootable, ITwoHandsHoldable
	{
		[Token(Token = "0x40014FF")]
		private const float handBlendDuration = 0.1f;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GunAnimatorController gunAnimatorController;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GunFxController gunFxController;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform barrelTransform;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject grenade;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float shootForce;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private HVRGrabbable grabbale;

		[Token(Token = "0x600173D")]
		[Address(RVA = "0x9A2168", Offset = "0x9A2168", VA = "0x9A2168", Slot = "4")]
		public void Shoot(VRInput.Controller triggerHand)
		{
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0x9A2494", Offset = "0x9A2494", VA = "0x9A2494")]
		[PunRPC]
		private void ShootRPC(int bulletId, Vector3 direction)
		{
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0x9A2548", Offset = "0x9A2548", VA = "0x9A2548")]
		private void AddForceToGrenade(Rigidbody grenadeRigidbody, Vector3 direction)
		{
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0x9A25C4", Offset = "0x9A25C4", VA = "0x9A25C4")]
		private void PlayGunFx()
		{
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0x9A2434", Offset = "0x9A2434", VA = "0x9A2434", Slot = "5")]
		public bool IsHoldingbyTwoHands()
		{
			return default(bool);
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0x9A276C", Offset = "0x9A276C", VA = "0x9A276C")]
		public GrenadeShootController()
		{
		}
	}
	[Token(Token = "0x200042B")]
	public class GunController : MonoBehaviourPun, IHandsType
	{
		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InputActionReference interactionInput;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GunController secondGunToReload;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private VRInput.Controller triggerHand;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private HandsType handsType;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GunAnimatorController gunAnimatorController;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GunFxController gunFxController;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private PoserActivator poserActivator;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private PoserActivator secondGunPoserActivator;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[RequireInterface(typeof(IShootable))]
		private UnityEngine.Object _shootController;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[RequireInterface(typeof(IReloadable))]
		private UnityEngine.Object _reloadController;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AmmoController ammoController;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isActive;

		[Token(Token = "0x1700029F")]
		public HandsType HandsType
		{
			[Token(Token = "0x6001743")]
			[Address(RVA = "0x9A277C", Offset = "0x9A277C", VA = "0x9A277C", Slot = "4")]
			get
			{
				return default(HandsType);
			}
		}

		[Token(Token = "0x170002A0")]
		private IShootable shootController
		{
			[Token(Token = "0x6001744")]
			[Address(RVA = "0x9A2784", Offset = "0x9A2784", VA = "0x9A2784")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A1")]
		private IReloadable reloadController
		{
			[Token(Token = "0x6001745")]
			[Address(RVA = "0x9A27CC", Offset = "0x9A27CC", VA = "0x9A27CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A2")]
		public bool IsActive
		{
			[Token(Token = "0x6001746")]
			[Address(RVA = "0x9A2814", Offset = "0x9A2814", VA = "0x9A2814")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001747")]
			[Address(RVA = "0x9A281C", Offset = "0x9A281C", VA = "0x9A281C")]
			private set
			{
			}
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0x9A2950", Offset = "0x9A2950", VA = "0x9A2950")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0x9A2A14", Offset = "0x9A2A14", VA = "0x9A2A14")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0x9A2AD8", Offset = "0x9A2AD8", VA = "0x9A2AD8")]
		private void Update()
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0x9A2BD0", Offset = "0x9A2BD0", VA = "0x9A2BD0")]
		private void Shoot()
		{
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0x9A2CC4", Offset = "0x9A2CC4", VA = "0x9A2CC4")]
		private void PlayClickSound(InputAction.CallbackContext callbackContext)
		{
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0x9A28B4", Offset = "0x9A28B4", VA = "0x9A28B4")]
		private void SetPropperAnimatorStateOnSwitch(bool activationStatus)
		{
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0x9A2CDC", Offset = "0x9A2CDC", VA = "0x9A2CDC")]
		private void ReloadOnEnable()
		{
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0x9A2DD8", Offset = "0x9A2DD8", VA = "0x9A2DD8")]
		public void ResetGunState()
		{
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0x9A2E94", Offset = "0x9A2E94", VA = "0x9A2E94")]
		public void InitReload()
		{
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0x9A2F40", Offset = "0x9A2F40", VA = "0x9A2F40", Slot = "5")]
		public void SetActive(bool value)
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0x9A2F48", Offset = "0x9A2F48", VA = "0x9A2F48")]
		public GunController()
		{
		}
	}
	[Token(Token = "0x200042C")]
	public class GunFxController : MonoBehaviour
	{
		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<ParticleWithEmitCount> shootParticleSystems;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip shootSound;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip reloadSound;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip reloadFinishSound;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private AudioClip clickSound;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		[SerializeField]
		private float volume;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[RequireInterface(typeof(ITwoHandsHoldable))]
		[SerializeField]
		private UnityEngine.Object gunTwoHandsHoldable;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Range(0f, 10f)]
		private float vibrationsDuration;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 320f)]
		[SerializeField]
		private float vibrationsFrequency;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		[SerializeField]
		private float vibrationsAmplitude;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 10f)]
		[SerializeField]
		private float vibrationsDurationViveWands;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 320f)]
		[SerializeField]
		private float vibrationsFrequencyViveWands;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 1f)]
		[SerializeField]
		private float vibrationsAmplitudeViveWands;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x170002A3")]
		private ITwoHandsHoldable twoHandsHoldable
		{
			[Token(Token = "0x6001753")]
			[Address(RVA = "0x9A2F58", Offset = "0x9A2F58", VA = "0x9A2F58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0x9A25EC", Offset = "0x9A25EC", VA = "0x9A25EC")]
		public void EmitShootParticles()
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x9A2C9C", Offset = "0x9A2C9C", VA = "0x9A2C9C")]
		public void PlayClickSound()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x9A2744", Offset = "0x9A2744", VA = "0x9A2744")]
		public void PlayShootSound()
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0x9A2FA4", Offset = "0x9A2FA4", VA = "0x9A2FA4")]
		public void PlayReloadSound()
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0x9A2FCC", Offset = "0x9A2FCC", VA = "0x9A2FCC")]
		public void PlayReloadFinishSound()
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x9A2FA0", Offset = "0x9A2FA0", VA = "0x9A2FA0")]
		public void TryToPlayAudioBasedHaptics(AudioClip clip)
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0x99E960", Offset = "0x99E960", VA = "0x99E960")]
		public void PerformHaptics(bool IsHoldingByTwoHands, VRInput.Controller controller)
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0x9A30F4", Offset = "0x9A30F4", VA = "0x9A30F4")]
		public void PlaySingleHapticPulse(VRInput.Controller controller)
		{
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x9A2FF4", Offset = "0x9A2FF4", VA = "0x9A2FF4")]
		public void PlayDoubleHapticPulse()
		{
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x9A31C0", Offset = "0x9A31C0", VA = "0x9A31C0")]
		public void SetAdudioSource(AudioSource newSource)
		{
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0x9A31C8", Offset = "0x9A31C8", VA = "0x9A31C8")]
		public GunFxController()
		{
		}
	}
	[Token(Token = "0x200042D")]
	public class GunOffsetSetter : MonoBehaviour
	{
		[Token(Token = "0x4001520")]
		private const float fullStepValue = 1f;

		[Token(Token = "0x4001521")]
		private const float startingStepValue = 0f;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Vector3 offsetValue;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TwoHandedGunGrabController twoHandedGunGrabController;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 offsetTarget;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentOffsetValue;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float step;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float OffsetSpeed;

		[Token(Token = "0x600175F")]
		[Address(RVA = "0x9A31D0", Offset = "0x9A31D0", VA = "0x9A31D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0x9A3204", Offset = "0x9A3204", VA = "0x9A3204")]
		private void Update()
		{
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x9A32E4", Offset = "0x9A32E4", VA = "0x9A32E4")]
		public void ApplyOffset()
		{
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0x9A3308", Offset = "0x9A3308", VA = "0x9A3308")]
		public void ResetOffsetToDefaultValue()
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0x9A32A4", Offset = "0x9A32A4", VA = "0x9A32A4")]
		private Vector3 LerpOffset(Vector3 currentPos, Vector3 TargetPos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0x9A3338", Offset = "0x9A3338", VA = "0x9A3338")]
		public GunOffsetSetter()
		{
		}
	}
	[Token(Token = "0x200042E")]
	public interface IShootable
	{
		[Token(Token = "0x6001765")]
		void Shoot(VRInput.Controller triggerHand);
	}
	[Token(Token = "0x200042F")]
	public class PlayerTeleportController : MonoBehaviourPun
	{
		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action OnTeleportActivation;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action OnTeleportDeactivation;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InputActionReference interactionInput;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private CrosshairController crosshair;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector3 CurveCastGravityVector;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float maxCurveCastDistance;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ProjectorPointerController projectorPointer;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private HandsController handsController;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private HandsDominanceSwitcher handsDominanceSwitcher;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private VRInput.Controller triggerHand;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private HVRHandAnimator handAnimator;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private HVRHandPoser handPoser;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private List<HandGrabController> handGrabControllers;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private LayerMask layerToAvoid;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private TeleportHighlighter activeTeleportHighlighter;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool isActive;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private RaycastHit rayHit;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private RaycastHit hit;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<Vector3> vectors;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Action Teleport;

		[Token(Token = "0x170002A4")]
		private VRInput.Controller controller
		{
			[Token(Token = "0x6001766")]
			[Address(RVA = "0x9A334C", Offset = "0x9A334C", VA = "0x9A334C")]
			get
			{
				return default(VRInput.Controller);
			}
		}

		[Token(Token = "0x170002A5")]
		public RaycastHit RayHit
		{
			[Token(Token = "0x6001767")]
			[Address(RVA = "0x9A33D4", Offset = "0x9A33D4", VA = "0x9A33D4")]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6001768")]
			[Address(RVA = "0x9A33EC", Offset = "0x9A33EC", VA = "0x9A33EC")]
			set
			{
			}
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0x9A35C0", Offset = "0x9A35C0", VA = "0x9A35C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0x9A3818", Offset = "0x9A3818", VA = "0x9A3818")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0x9A3A44", Offset = "0x9A3A44", VA = "0x9A3A44")]
		private void Update()
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0x9A3BE8", Offset = "0x9A3BE8", VA = "0x9A3BE8")]
		private void TryActivateTeleport(InputAction.CallbackContext obj)
		{
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0x9A3E14", Offset = "0x9A3E14", VA = "0x9A3E14")]
		private void TryToTeleport(InputAction.CallbackContext obj)
		{
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0x9A3CF4", Offset = "0x9A3CF4", VA = "0x9A3CF4")]
		private bool AreHandOccupied()
		{
			return default(bool);
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0x9A3CD4", Offset = "0x9A3CD4", VA = "0x9A3CD4")]
		private bool IsHandednessMatchHand()
		{
			return default(bool);
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0x9A405C", Offset = "0x9A405C", VA = "0x9A405C")]
		private void TurnOffPointer()
		{
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0x9A3D8C", Offset = "0x9A3D8C", VA = "0x9A3D8C")]
		private void Activate(bool value)
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0x9A4104", Offset = "0x9A4104", VA = "0x9A4104")]
		private void HandleHandsUsingTeleport(bool isTeleportActive)
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0x9A3F08", Offset = "0x9A3F08", VA = "0x9A3F08")]
		private void TeleportToTeleport()
		{
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x9A41C0", Offset = "0x9A41C0", VA = "0x9A41C0")]
		private bool CheckTeleportHit()
		{
			return default(bool);
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0x9A3A54", Offset = "0x9A3A54", VA = "0x9A3A54")]
		private void DrawCrosshair()
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0x9A340C", Offset = "0x9A340C", VA = "0x9A340C")]
		private void TryHighlightTeleport()
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0x9A42CC", Offset = "0x9A42CC", VA = "0x9A42CC")]
		public PlayerTeleportController()
		{
		}
	}
	[Token(Token = "0x2000430")]
	public class RaycastShooter : MonoBehaviourPun
	{
		[Token(Token = "0x400153D")]
		private const float headShotDmg = float.PositiveInfinity;

		[Token(Token = "0x400153E")]
		private const float noHitVectorMultiplier = 1000f;

		[Token(Token = "0x400153F")]
		private const float hitOffsetForWhiz = 0.2f;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float basicBulletDamage;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float detachLimbChance;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HitParticlesPlayer hitParticlesPlayer;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LayerMask ignoreLayerMask;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject SFXbulletWhiz;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<EnemyGetHitController, BulletHitInfo> enemyGetHitControllersWithInfo;

		[Token(Token = "0x6001778")]
		[Address(RVA = "0x9A435C", Offset = "0x9A435C", VA = "0x9A435C")]
		public Vector3 RayCastToShoot(Vector3 barrelPos, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0x9A4AC0", Offset = "0x9A4AC0", VA = "0x9A4AC0")]
		private void SpawnBulletPassingBySound(Vector3 shotOrigin, Vector3 shotDirection, Vector3 bulletHitPosition)
		{
		}

		[Token(Token = "0x600177A")]
		[Address(RVA = "0x9A44EC", Offset = "0x9A44EC", VA = "0x9A44EC")]
		private void OnBulletCollision(RaycastHit hit, Vector3 direction)
		{
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0x9A4DAC", Offset = "0x9A4DAC", VA = "0x9A4DAC")]
		public void DealDamageToEnemy()
		{
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0x9A4F44", Offset = "0x9A4F44", VA = "0x9A4F44")]
		public RaycastShooter()
		{
		}
	}
	[Token(Token = "0x2000431")]
	public class RealisticRifleReloadController : MonoBehaviour, IReloadable
	{
		[Token(Token = "0x2000432")]
		[CompilerGenerated]
		private sealed class <ReloadBulletManuallyCoroutine>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001553")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001554")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001555")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RealisticRifleReloadController <>4__this;

			[Token(Token = "0x170002A8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001790")]
				[Address(RVA = "0x9A5630", Offset = "0x9A5630", VA = "0x9A5630", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001792")]
				[Address(RVA = "0x9A5678", Offset = "0x9A5678", VA = "0x9A5678", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600178D")]
			[Address(RVA = "0x9A5450", Offset = "0x9A5450", VA = "0x9A5450")]
			[DebuggerHidden]
			public <ReloadBulletManuallyCoroutine>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x600178E")]
			[Address(RVA = "0x9A54F8", Offset = "0x9A54F8", VA = "0x9A54F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600178F")]
			[Address(RVA = "0x9A54FC", Offset = "0x9A54FC", VA = "0x9A54FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001791")]
			[Address(RVA = "0x9A5638", Offset = "0x9A5638", VA = "0x9A5638", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InputActionReference reloadInput;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float reloadAnimTime;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private CardrigeReleaseController cardrigeReleaseController;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GunAnimatorController gunAnimatorController;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private LoadingIndicatorController loadingIndicatorController;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GunFxController gunFxController;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AmmoController ammoController;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MagazineSliderController magazineSliderController;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private MagazineBulletController magazineBulletController;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isOpeningChamber;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool isChamberOpen;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasReleasedCardrige;

		[Token(Token = "0x170002A6")]
		public bool ShouldReleaseBullet
		{
			[Token(Token = "0x600177D")]
			[Address(RVA = "0x9A4FD8", Offset = "0x9A4FD8", VA = "0x9A4FD8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600177E")]
			[Address(RVA = "0x9A4FE0", Offset = "0x9A4FE0", VA = "0x9A4FE0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002A7")]
		private WaitForSeconds waitForReloadAnimation
		{
			[Token(Token = "0x600177F")]
			[Address(RVA = "0x9A4FEC", Offset = "0x9A4FEC", VA = "0x9A4FEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0x9A505C", Offset = "0x9A505C", VA = "0x9A505C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0x9A51B0", Offset = "0x9A51B0", VA = "0x9A51B0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0x9A5288", Offset = "0x9A5288", VA = "0x9A5288")]
		private void Update()
		{
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0x9A5174", Offset = "0x9A5174", VA = "0x9A5174")]
		private void OpenChamber()
		{
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0x9A53B4", Offset = "0x9A53B4", VA = "0x9A53B4")]
		public void ReleaseShell()
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0x9A53FC", Offset = "0x9A53FC", VA = "0x9A53FC")]
		public void ReleaseBullet()
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0x9A5444", Offset = "0x9A5444", VA = "0x9A5444")]
		public void SetOpenChamber()
		{
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0x9A5340", Offset = "0x9A5340", VA = "0x9A5340")]
		[IteratorStateMachine(typeof(<ReloadBulletManuallyCoroutine>d__25))]
		private IEnumerator ReloadBulletManuallyCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0x9A5478", Offset = "0x9A5478", VA = "0x9A5478")]
		public void ReloadMagazine()
		{
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0x9A54B4", Offset = "0x9A54B4", VA = "0x9A54B4", Slot = "6")]
		public void StopCoroutines()
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0x9A54BC", Offset = "0x9A54BC", VA = "0x9A54BC", Slot = "4")]
		public bool IsLoaded()
		{
			return default(bool);
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0x9A54E0", Offset = "0x9A54E0", VA = "0x9A54E0", Slot = "5")]
		public void InitReload()
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0x9A54E4", Offset = "0x9A54E4", VA = "0x9A54E4")]
		public RealisticRifleReloadController()
		{
		}
	}
	[Token(Token = "0x2000433")]
	public class ShotgunReloadController : MonoBehaviour, IReloadable
	{
		[Token(Token = "0x2000434")]
		[CompilerGenerated]
		private sealed class <DisableShootAnimationCoroutine>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001563")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001564")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001565")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ShotgunReloadController <>4__this;

			[Token(Token = "0x170002AA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017A3")]
				[Address(RVA = "0x9A5D48", Offset = "0x9A5D48", VA = "0x9A5D48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017A5")]
				[Address(RVA = "0x9A5D90", Offset = "0x9A5D90", VA = "0x9A5D90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017A0")]
			[Address(RVA = "0x9A5C6C", Offset = "0x9A5C6C", VA = "0x9A5C6C")]
			[DebuggerHidden]
			public <DisableShootAnimationCoroutine>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60017A1")]
			[Address(RVA = "0x9A5CD0", Offset = "0x9A5CD0", VA = "0x9A5CD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017A2")]
			[Address(RVA = "0x9A5CD4", Offset = "0x9A5CD4", VA = "0x9A5CD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017A4")]
			[Address(RVA = "0x9A5D50", Offset = "0x9A5D50", VA = "0x9A5D50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MagazineSliderController magazineSliderController;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AmmoController ammoController;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GrabbableSlider pumpSlider;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GunAnimatorController gunAnimatorController;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private CardrigeReleaseController cardrigeReleaseController;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AnimationClip shootAnimation;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GunFxController gunFxController;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isChamberClosed;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool isChamberOpened;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool isShellInReceiver;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		private bool wasPumpLastInBack;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool hasShellToRelease;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private WaitForSeconds waitForShootAnimationFinish;

		[Token(Token = "0x6001793")]
		[Address(RVA = "0x9A5680", Offset = "0x9A5680", VA = "0x9A5680")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0x9A5708", Offset = "0x9A5708", VA = "0x9A5708")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0x9A586C", Offset = "0x9A586C", VA = "0x9A586C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0x9A5A1C", Offset = "0x9A5A1C", VA = "0x9A5A1C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0x9A5B80", Offset = "0x9A5B80", VA = "0x9A5B80", Slot = "4")]
		public bool IsLoaded()
		{
			return default(bool);
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0x9A599C", Offset = "0x9A599C", VA = "0x9A599C")]
		private void OpenChamber()
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0x9A5958", Offset = "0x9A5958", VA = "0x9A5958")]
		private void CloseChamber()
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0x9A5BA4", Offset = "0x9A5BA4", VA = "0x9A5BA4")]
		private void OnAmmoChange()
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0x9A5BF8", Offset = "0x9A5BF8", VA = "0x9A5BF8")]
		[IteratorStateMachine(typeof(<DisableShootAnimationCoroutine>d__21))]
		private IEnumerator DisableShootAnimationCoroutine()
		{
			return null;
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0x9A5C94", Offset = "0x9A5C94", VA = "0x9A5C94")]
		private void ReloadMagazine()
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0x9A5CC0", Offset = "0x9A5CC0", VA = "0x9A5CC0", Slot = "5")]
		public void InitReload()
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0x9A5CC4", Offset = "0x9A5CC4", VA = "0x9A5CC4", Slot = "6")]
		public void StopCoroutines()
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0x9A5CC8", Offset = "0x9A5CC8", VA = "0x9A5CC8")]
		public ShotgunReloadController()
		{
		}
	}
	[Token(Token = "0x2000435")]
	public class ShotgunShootController : MonoBehaviourPun, IShootable, ITwoHandsHoldable
	{
		[Token(Token = "0x4001566")]
		private const float handBlendDuration = 0.1f;

		[Token(Token = "0x4001567")]
		private const float noHitVectorMultiplier = 1000f;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GunFxController gunFxController;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform barrelTransform;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float basicBulletDamage;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private int numberOfBullets;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int spread;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private RaycastShooter raycastShooter;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private ParticleSystem bulletParticles;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private HVRGrabbable grabbable;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GunAnimatorController gunAnimatorController;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RaycastHit hit;

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0x9A6D98", Offset = "0x9A6D98", VA = "0x9A6D98", Slot = "4")]
		public void Shoot(VRInput.Controller triggerHand)
		{
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0x9A7048", Offset = "0x9A7048", VA = "0x9A7048")]
		[PunRPC]
		private void ShootRPC(Vector3 Position, Vector3 Rotation, int seed)
		{
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0x9A7288", Offset = "0x9A7288", VA = "0x9A7288")]
		private void PlayGunFx()
		{
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0x9A6FE8", Offset = "0x9A6FE8", VA = "0x9A6FE8", Slot = "5")]
		public bool IsHoldingbyTwoHands()
		{
			return default(bool);
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0x9A72B8", Offset = "0x9A72B8", VA = "0x9A72B8")]
		public ShotgunShootController()
		{
		}
	}
	[Token(Token = "0x2000436")]
	public class SimpleReloadController : MonoBehaviour, IReloadable
	{
		[Token(Token = "0x2000437")]
		[CompilerGenerated]
		private sealed class <ReloadCoroutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400157A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400157B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400157C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SimpleReloadController <>4__this;

			[Token(Token = "0x400157D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public WaitForSeconds waitForReload;

			[Token(Token = "0x170002AF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017B9")]
				[Address(RVA = "0x9A7814", Offset = "0x9A7814", VA = "0x9A7814", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017BB")]
				[Address(RVA = "0x9A785C", Offset = "0x9A785C", VA = "0x9A785C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017B6")]
			[Address(RVA = "0x9A76BC", Offset = "0x9A76BC", VA = "0x9A76BC")]
			[DebuggerHidden]
			public <ReloadCoroutine>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60017B7")]
			[Address(RVA = "0x9A7738", Offset = "0x9A7738", VA = "0x9A7738", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017B8")]
			[Address(RVA = "0x9A773C", Offset = "0x9A773C", VA = "0x9A773C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017BA")]
			[Address(RVA = "0x9A781C", Offset = "0x9A781C", VA = "0x9A781C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float reloadTime;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float initialReloadTime;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float reloadAnimTime;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GunAnimatorController gunAnimatorController;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LoadingIndicatorController loadingIndicatorController;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GunFxController gunFxController;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AmmoController ammoController;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool isLoaded;

		[Token(Token = "0x170002AC")]
		private WaitForSeconds waitForReload
		{
			[Token(Token = "0x60017AB")]
			[Address(RVA = "0x9A72D4", Offset = "0x9A72D4", VA = "0x9A72D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AD")]
		private WaitForSeconds WaitForInitialReload
		{
			[Token(Token = "0x60017AC")]
			[Address(RVA = "0x9A7348", Offset = "0x9A7348", VA = "0x9A7348")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AE")]
		private WaitForSeconds waitForReloadAnimation
		{
			[Token(Token = "0x60017AD")]
			[Address(RVA = "0x9A73B8", Offset = "0x9A73B8", VA = "0x9A73B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0x9A7428", Offset = "0x9A7428", VA = "0x9A7428")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0x9A7500", Offset = "0x9A7500", VA = "0x9A7500")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0x9A75D8", Offset = "0x9A75D8", VA = "0x9A75D8", Slot = "4")]
		public bool IsLoaded()
		{
			return default(bool);
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0x9A75E0", Offset = "0x9A75E0", VA = "0x9A75E0")]
		public void ReloadBullet()
		{
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x9A76B4", Offset = "0x9A76B4", VA = "0x9A76B4", Slot = "6")]
		public void StopCoroutines()
		{
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x9A7624", Offset = "0x9A7624", VA = "0x9A7624")]
		[IteratorStateMachine(typeof(<ReloadCoroutine>d__19))]
		private IEnumerator ReloadCoroutine(WaitForSeconds waitForReload)
		{
			return null;
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0x9A76E4", Offset = "0x9A76E4", VA = "0x9A76E4", Slot = "5")]
		public void InitReload()
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0x9A7728", Offset = "0x9A7728", VA = "0x9A7728")]
		public SimpleReloadController()
		{
		}
	}
	[Token(Token = "0x2000438")]
	public class SingleBulletShootController : MonoBehaviourPun, IShootable, ITwoHandsHoldable
	{
		[Token(Token = "0x400157E")]
		private const float handBlendDuration = 0.1f;

		[Token(Token = "0x400157F")]
		private const float headshotDamage = float.PositiveInfinity;

		[Token(Token = "0x4001580")]
		private const float noHitVectorMultiplier = 1000f;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GunAnimatorController gunAnimatorController;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GunFxController gunFxController;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform barrelTransform;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject bullet;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private RaycastShooter raycastShooter;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private HVRGrabbable grabbable;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RaycastHit hit;

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0x9A7864", Offset = "0x9A7864", VA = "0x9A7864", Slot = "4")]
		public void Shoot(VRInput.Controller triggerHand)
		{
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0x9A7BE4", Offset = "0x9A7BE4", VA = "0x9A7BE4")]
		[PunRPC]
		private void ShootRPC(int bulletId, Vector3 Position, Vector3 Rotation)
		{
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0x9A7D3C", Offset = "0x9A7D3C", VA = "0x9A7D3C")]
		private void PlayGunFx()
		{
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0x9A7B84", Offset = "0x9A7B84", VA = "0x9A7B84", Slot = "5")]
		public bool IsHoldingbyTwoHands()
		{
			return default(bool);
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0x9A7D6C", Offset = "0x9A7D6C", VA = "0x9A7D6C")]
		public SingleBulletShootController()
		{
		}
	}
	[Token(Token = "0x2000439")]
	public class TwoHandedGunGrabController : MonoBehaviourPun, IPunObservable
	{
		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform dominantHand;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform additionalHand;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform grabbingPoint;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform additionalHandGrabPoint;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GunController gunController;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GunOffsetSetter offsetSetter;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private HandsController handsController;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private HVRGrabbable grabbable;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isHoldingByTwoHands;

		[Token(Token = "0x170002B1")]
		public bool IsHoldingByTwoHands
		{
			[Token(Token = "0x60017C1")]
			[Address(RVA = "0x9A7D74", Offset = "0x9A7D74", VA = "0x9A7D74")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017C2")]
			[Address(RVA = "0x9A7D7C", Offset = "0x9A7D7C", VA = "0x9A7D7C")]
			set
			{
			}
		}

		[Token(Token = "0x170002B2")]
		public Transform GrabbingPoint
		{
			[Token(Token = "0x60017C3")]
			[Address(RVA = "0x9A7EB8", Offset = "0x9A7EB8", VA = "0x9A7EB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017C4")]
			[Address(RVA = "0x9A7EC0", Offset = "0x9A7EC0", VA = "0x9A7EC0")]
			set
			{
			}
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x9A7EC8", Offset = "0x9A7EC8", VA = "0x9A7EC8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x9A7FF4", Offset = "0x9A7FF4", VA = "0x9A7FF4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0x9A8150", Offset = "0x9A8150", VA = "0x9A8150")]
		private void Update()
		{
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0x9A8154", Offset = "0x9A8154", VA = "0x9A8154")]
		private void HandleTwoHandedGunRotation()
		{
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0x9A82D4", Offset = "0x9A82D4", VA = "0x9A82D4")]
		private void AttachSecondHand(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x9A82DC", Offset = "0x9A82DC", VA = "0x9A82DC")]
		private void DetachSecondHand(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x9A7E8C", Offset = "0x9A7E8C", VA = "0x9A7E8C")]
		private void SetOffsetActive(bool isActive)
		{
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x9A7E2C", Offset = "0x9A7E2C", VA = "0x9A7E2C")]
		private void ResetGrabbingPointRotation()
		{
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0x9A82E4", Offset = "0x9A82E4", VA = "0x9A82E4", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x9A83AC", Offset = "0x9A83AC", VA = "0x9A83AC")]
		public TwoHandedGunGrabController()
		{
		}
	}
	[Token(Token = "0x200043A")]
	public class WeaponSwitchController : MonoBehaviourPun
	{
		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<WeaponWheelSlot> WeaponWheelSlots;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InputActionReference leftHandInteractionInput;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InputActionReference rightHandInteractionInput;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private PlayerDeathController playerDeathController;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private HandsType WeaponToBeSetOnStart;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private HandsController handsControllerRight;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private HandsController handsControllerLeft;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private WeaponWheelInitializer weaponWheelInitializerLeft;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private WeaponWheelInitializer weaponWheelInitializerRight;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject weaponWheelGameobjectLeft;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject weaponWheelGameobjectRight;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private List<WeaponWheelMenuPositionAdjuster> weaponWheelMenuPositionAdjustersLeft;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private List<WeaponWheelMenuPositionAdjuster> weaponWheelMenuPositionAdjustersRight;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private WeaponWheelSlot choosenSlot;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector2 deadZoneVector;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector2 analogInput;

		[Token(Token = "0x170002B3")]
		private WeaponWheelInitializer weaponWheelInitializer
		{
			[Token(Token = "0x60017CF")]
			[Address(RVA = "0x9A83B4", Offset = "0x9A83B4", VA = "0x9A83B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B4")]
		private List<WeaponWheelMenuPositionAdjuster> weaponWheelMenuPositionAdjusters
		{
			[Token(Token = "0x60017D0")]
			[Address(RVA = "0x9A8454", Offset = "0x9A8454", VA = "0x9A8454")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B5")]
		private GameObject weaponWheelGameobject
		{
			[Token(Token = "0x60017D1")]
			[Address(RVA = "0x9A84F4", Offset = "0x9A84F4", VA = "0x9A84F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B6")]
		private InputActionReference interactionInput
		{
			[Token(Token = "0x60017D2")]
			[Address(RVA = "0x9A8594", Offset = "0x9A8594", VA = "0x9A8594")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B7")]
		public HandsController HandsController
		{
			[Token(Token = "0x60017D3")]
			[Address(RVA = "0x9A8634", Offset = "0x9A8634", VA = "0x9A8634")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x9A86D4", Offset = "0x9A86D4", VA = "0x9A86D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0x9A8BC0", Offset = "0x9A8BC0", VA = "0x9A8BC0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0x9A8DD0", Offset = "0x9A8DD0", VA = "0x9A8DD0")]
		private void Update()
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0x9A8F1C", Offset = "0x9A8F1C", VA = "0x9A8F1C")]
		private void GetAxis(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0x9A8968", Offset = "0x9A8968", VA = "0x9A8968")]
		private void SetWeaponOnStart()
		{
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0x9A8DFC", Offset = "0x9A8DFC", VA = "0x9A8DFC")]
		private bool CanSwitchWeapon()
		{
			return default(bool);
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0x9A8EA0", Offset = "0x9A8EA0", VA = "0x9A8EA0")]
		private void SwitchWeapon()
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0x9A8FCC", Offset = "0x9A8FCC", VA = "0x9A8FCC")]
		private bool ShouldHideWheelMenu(Vector2 _analogInput)
		{
			return default(bool);
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0x9A8910", Offset = "0x9A8910", VA = "0x9A8910")]
		private void ToggleWeaponWheelGameobject(bool enabled)
		{
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0x9A8FF8", Offset = "0x9A8FF8", VA = "0x9A8FF8")]
		private void IterateOverSlots(Vector2 analogInput)
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0x9A91DC", Offset = "0x9A91DC", VA = "0x9A91DC")]
		private float ConvertVectorInputToAngleInput(Vector2 analogPosition)
		{
			return default(float);
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0x9A8F78", Offset = "0x9A8F78", VA = "0x9A8F78")]
		private void SwitchToSlot(HandsType weaponType)
		{
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0x9A93F8", Offset = "0x9A93F8", VA = "0x9A93F8")]
		private void SwitchToState(HandsType handsType)
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0x9A926C", Offset = "0x9A926C", VA = "0x9A926C")]
		private void AdjustWeaponWheelMenuPosition(HandsType weaponType)
		{
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0x9A9438", Offset = "0x9A9438", VA = "0x9A9438")]
		public void SetReferences(PlayerDeathController _playerDeathController)
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0x9A9440", Offset = "0x9A9440", VA = "0x9A9440")]
		public WeaponSwitchController()
		{
		}
	}
	[Token(Token = "0x200043B")]
	public class HandsResizer : MonoBehaviour
	{
		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ScaleAdjuster scaleAdjuster;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject handRight;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject handLeft;

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0x9A94F8", Offset = "0x9A94F8", VA = "0x9A94F8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x9A961C", Offset = "0x9A961C", VA = "0x9A961C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0x9A9740", Offset = "0x9A9740", VA = "0x9A9740")]
		private void ResizeHands()
		{
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0x9A9810", Offset = "0x9A9810", VA = "0x9A9810")]
		public HandsResizer()
		{
		}
	}
	[Token(Token = "0x200043C")]
	public class IceRevive : MonoBehaviourPun, IAbility, IResetable
	{
		[Token(Token = "0x200043D")]
		[CompilerGenerated]
		private sealed class <PhotonDestroySpellWithDelayRoutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x40015AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IceRevive <>4__this;

			[Token(Token = "0x170002BA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017F6")]
				[Address(RVA = "0x9A9DBC", Offset = "0x9A9DBC", VA = "0x9A9DBC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017F8")]
				[Address(RVA = "0x9A9E04", Offset = "0x9A9E04", VA = "0x9A9E04", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017F3")]
			[Address(RVA = "0x9A9C6C", Offset = "0x9A9C6C", VA = "0x9A9C6C")]
			[DebuggerHidden]
			public <PhotonDestroySpellWithDelayRoutine>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60017F4")]
			[Address(RVA = "0x9A9CA8", Offset = "0x9A9CA8", VA = "0x9A9CA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017F5")]
			[Address(RVA = "0x9A9CAC", Offset = "0x9A9CAC", VA = "0x9A9CAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017F7")]
			[Address(RVA = "0x9A9DC4", Offset = "0x9A9DC4", VA = "0x9A9DC4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AbilityData abilityData;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AbilityLevelController abilityLevelController;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem spellParticleSystem;

		[Token(Token = "0x170002B8")]
		public AbilityLevelController AbilityLevelController
		{
			[Token(Token = "0x60017E9")]
			[Address(RVA = "0x9A9818", Offset = "0x9A9818", VA = "0x9A9818", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B9")]
		public AbilityData AbilityData
		{
			[Token(Token = "0x60017EA")]
			[Address(RVA = "0x9A9820", Offset = "0x9A9820", VA = "0x9A9820", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0x9A9828", Offset = "0x9A9828", VA = "0x9A9828", Slot = "6")]
		public void Initialize(GameObject arrowObject)
		{
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0x9A98DC", Offset = "0x9A98DC", VA = "0x9A98DC")]
		public void RevivePlayer(Collision collision)
		{
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0x9A9B5C", Offset = "0x9A9B5C", VA = "0x9A9B5C")]
		[PunRPC]
		private void RpcTryRevivePlayer()
		{
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0x9A9C50", Offset = "0x9A9C50", VA = "0x9A9C50", Slot = "9")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0x9A9858", Offset = "0x9A9858", VA = "0x9A9858")]
		[IteratorStateMachine(typeof(<PhotonDestroySpellWithDelayRoutine>d__11))]
		private IEnumerator PhotonDestroySpellWithDelayRoutine(float delay)
		{
			return null;
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0x9A9C94", Offset = "0x9A9C94", VA = "0x9A9C94", Slot = "7")]
		public void InvokeAbility(Collision collision)
		{
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0x9A9C98", Offset = "0x9A9C98", VA = "0x9A9C98", Slot = "8")]
		public void SetQualityReference(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0x9A9CA0", Offset = "0x9A9CA0", VA = "0x9A9CA0")]
		public IceRevive()
		{
		}
	}
	[Token(Token = "0x200043E")]
	public class ScaleAdjuster : MonoBehaviourPun
	{
		[Token(Token = "0x200043F")]
		[CompilerGenerated]
		private sealed class <ResizeAfterTime>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ScaleAdjuster <>4__this;

			[Token(Token = "0x170002BD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001807")]
				[Address(RVA = "0x9AA4C8", Offset = "0x9AA4C8", VA = "0x9AA4C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001809")]
				[Address(RVA = "0x9AA510", Offset = "0x9AA510", VA = "0x9AA510", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001804")]
			[Address(RVA = "0x9AA2AC", Offset = "0x9AA2AC", VA = "0x9AA2AC")]
			[DebuggerHidden]
			public <ResizeAfterTime>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001805")]
			[Address(RVA = "0x9AA3A4", Offset = "0x9AA3A4", VA = "0x9AA3A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001806")]
			[Address(RVA = "0x9AA3A8", Offset = "0x9AA3A8", VA = "0x9AA3A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001808")]
			[Address(RVA = "0x9AA4D0", Offset = "0x9AA4D0", VA = "0x9AA4D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PlayerController playerController;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float defaultHeight;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float minHeight;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float maxHeight;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Camera mainCamera;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform ikIransform;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float scale;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float headHeight;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool wasResizedAtStart;

		[Token(Token = "0x170002BC")]
		public float Scale
		{
			[Token(Token = "0x60017FB")]
			[Address(RVA = "0x9A9E0C", Offset = "0x9A9E0C", VA = "0x9A9E0C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1400001D")]
		public event Action OnResize
		{
			[Token(Token = "0x60017F9")]
			[Address(RVA = "0x9A9580", Offset = "0x9A9580", VA = "0x9A9580")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60017FA")]
			[Address(RVA = "0x9A96A4", Offset = "0x9A96A4", VA = "0x9A96A4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x9A9E14", Offset = "0x9A9E14", VA = "0x9A9E14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x9A9FEC", Offset = "0x9A9FEC", VA = "0x9A9FEC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x9AA138", Offset = "0x9AA138", VA = "0x9AA138")]
		private void Update()
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x9AA198", Offset = "0x9AA198", VA = "0x9AA198")]
		public void Resize()
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x9AA248", Offset = "0x9AA248", VA = "0x9AA248")]
		private void ResetFromSetting(PlayerController _playerController)
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x9A9EA8", Offset = "0x9A9EA8", VA = "0x9A9EA8")]
		[IteratorStateMachine(typeof(<ResizeAfterTime>d__19))]
		private IEnumerator ResizeAfterTime()
		{
			return null;
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x9AA2D4", Offset = "0x9AA2D4", VA = "0x9AA2D4")]
		public ScaleAdjuster()
		{
		}
	}
	[Token(Token = "0x2000440")]
	public class AnalyticsSendOnConnectionFailInfoCaller : MonoBehaviour
	{
		[Token(Token = "0x600180A")]
		[Address(RVA = "0x9AA518", Offset = "0x9AA518", VA = "0x9AA518")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x9AA634", Offset = "0x9AA634", VA = "0x9AA634")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x9AA750", Offset = "0x9AA750", VA = "0x9AA750")]
		private void SendOnConnectionFailInfoCallback(int cause)
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0x9AA75C", Offset = "0x9AA75C", VA = "0x9AA75C")]
		public AnalyticsSendOnConnectionFailInfoCaller()
		{
		}
	}
	[Token(Token = "0x2000441")]
	public class ArrowPlayerHitController : MonoBehaviourPun
	{
		[Token(Token = "0x40015B8")]
		private const float hidingOffset = 1000f;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CollisionEvents arrowCollisionEvents;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool shouldKillPlayer;

		[Token(Token = "0x1400001E")]
		public static event Action<PlayerController, PlayerController> OnArrowHitPlayer
		{
			[Token(Token = "0x600180E")]
			[Address(RVA = "0x9AA764", Offset = "0x9AA764", VA = "0x9AA764")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600180F")]
			[Address(RVA = "0x9AA830", Offset = "0x9AA830", VA = "0x9AA830")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0x9AA8FC", Offset = "0x9AA8FC", VA = "0x9AA8FC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0x9AA9B4", Offset = "0x9AA9B4", VA = "0x9AA9B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0x9AAA6C", Offset = "0x9AAA6C", VA = "0x9AAA6C")]
		private void TryToKillPlayer(Collision collision)
		{
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0x9AAF04", Offset = "0x9AAF04", VA = "0x9AAF04")]
		private void HideArrow()
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0x9AAFBC", Offset = "0x9AAFBC", VA = "0x9AAFBC")]
		private void TryToAttachArrowToPlayer(Collision collision)
		{
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0x9AB10C", Offset = "0x9AB10C", VA = "0x9AB10C")]
		public ArrowPlayerHitController()
		{
		}
	}
	[Token(Token = "0x2000443")]
	public class CannonController : MonoBehaviourPun
	{
		[Token(Token = "0x2000444")]
		[CompilerGenerated]
		private sealed class <ShotHitTargetCoroutine>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CannonController <>4__this;

			[Token(Token = "0x170002BF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001827")]
				[Address(RVA = "0x9ABDA8", Offset = "0x9ABDA8", VA = "0x9ABDA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001829")]
				[Address(RVA = "0x9ABDF0", Offset = "0x9ABDF0", VA = "0x9ABDF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001824")]
			[Address(RVA = "0x9AB904", Offset = "0x9AB904", VA = "0x9AB904")]
			[DebuggerHidden]
			public <ShotHitTargetCoroutine>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x6001825")]
			[Address(RVA = "0x9ABB74", Offset = "0x9ABB74", VA = "0x9ABB74", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001826")]
			[Address(RVA = "0x9ABB78", Offset = "0x9ABB78", VA = "0x9ABB78", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001828")]
			[Address(RVA = "0x9ABDB0", Offset = "0x9ABDB0", VA = "0x9ABDB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015BD")]
		private const string fireTag = "Fire";

		[Token(Token = "0x40015BE")]
		private const string cannonFireAnimatioName = "CannonFireAnim";

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject CannonObject;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationClip CannonFireAnim;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem CannonMuzzleFlash;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light MuzzleFlashLight;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ParticleSystem SparkParticles;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ParticleSystem SmokeParticles;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject FuseObject;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject FuseCentre;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ParticleSystem FuseSmokeParticles;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject FuseSmokeParticlesNode;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Light FuseLight;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioSource CannonFireAudio;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AudioSource BurningFuseAudio;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public CannonShotController cannonShot;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject[] grapeShots;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float timeFromShotToHit;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float offset;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float fuselightintensity;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float explodeset;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float explodehalt;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float cannonfired;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float fadeStart;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float fadeEnd;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float fadeTime;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float t;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool shot;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float fuseLit;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool isFusing;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		private bool finishedFusing;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int shooterID;

		[Token(Token = "0x6001818")]
		[Address(RVA = "0x9AB210", Offset = "0x9AB210", VA = "0x9AB210")]
		private void Start()
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0x9AB230", Offset = "0x9AB230", VA = "0x9AB230")]
		private void Update()
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0x9AB5D0", Offset = "0x9AB5D0", VA = "0x9AB5D0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0x9AB3D4", Offset = "0x9AB3D4", VA = "0x9AB3D4")]
		public void Fuse()
		{
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0x9AB890", Offset = "0x9AB890", VA = "0x9AB890")]
		[IteratorStateMachine(typeof(<ShotHitTargetCoroutine>d__36))]
		public IEnumerator ShotHitTargetCoroutine()
		{
			return null;
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0x9AB92C", Offset = "0x9AB92C", VA = "0x9AB92C")]
		public void FadeLight()
		{
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0x9ABA00", Offset = "0x9ABA00", VA = "0x9ABA00")]
		public void EndCannonShot()
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0x9AB4C0", Offset = "0x9AB4C0", VA = "0x9AB4C0")]
		private void FireCannon()
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0x9AB724", Offset = "0x9AB724", VA = "0x9AB724")]
		private bool AreShootConditionMet(Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0x9ABB20", Offset = "0x9ABB20", VA = "0x9ABB20")]
		[PunRPC]
		private void RpcSetFire(int shooterID)
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0x9ABB3C", Offset = "0x9ABB3C", VA = "0x9ABB3C")]
		public void SetReferences(GameObject[] _grapeShots)
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0x9ABB44", Offset = "0x9ABB44", VA = "0x9ABB44")]
		public CannonController()
		{
		}
	}
	[Token(Token = "0x2000445")]
	public class DeathMatchFloatingTextManager : MonoBehaviourPun
	{
		[Token(Token = "0x2000446")]
		[CompilerGenerated]
		private sealed class <AddColorToText>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DeathMatchFloatingTextManager <>4__this;

			[Token(Token = "0x40015E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string playerNick;

			[Token(Token = "0x40015EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int playerColorIndex;

			[Token(Token = "0x40015EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string infoText;

			[Token(Token = "0x170002C1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001836")]
				[Address(RVA = "0x9AC838", Offset = "0x9AC838", VA = "0x9AC838", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001838")]
				[Address(RVA = "0x9AC880", Offset = "0x9AC880", VA = "0x9AC880", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001833")]
			[Address(RVA = "0x9AC03C", Offset = "0x9AC03C", VA = "0x9AC03C")]
			[DebuggerHidden]
			public <AddColorToText>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001834")]
			[Address(RVA = "0x9AC6C0", Offset = "0x9AC6C0", VA = "0x9AC6C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001835")]
			[Address(RVA = "0x9AC6C4", Offset = "0x9AC6C4", VA = "0x9AC6C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001837")]
			[Address(RVA = "0x9AC840", Offset = "0x9AC840", VA = "0x9AC840", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000447")]
		[CompilerGenerated]
		private sealed class <AddColorToText>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DeathMatchFloatingTextManager <>4__this;

			[Token(Token = "0x40015EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string firstplayerNick;

			[Token(Token = "0x40015F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int firstPlayerColorIndex;

			[Token(Token = "0x40015F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string secondPlayerNick;

			[Token(Token = "0x40015F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int secondPlayerColorIndex;

			[Token(Token = "0x40015F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public string infoText;

			[Token(Token = "0x170002C3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600183C")]
				[Address(RVA = "0x9ACA20", Offset = "0x9ACA20", VA = "0x9ACA20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600183E")]
				[Address(RVA = "0x9ACA68", Offset = "0x9ACA68", VA = "0x9ACA68", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001839")]
			[Address(RVA = "0x9AC13C", Offset = "0x9AC13C", VA = "0x9AC13C")]
			[DebuggerHidden]
			public <AddColorToText>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600183A")]
			[Address(RVA = "0x9AC888", Offset = "0x9AC888", VA = "0x9AC888", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600183B")]
			[Address(RVA = "0x9AC88C", Offset = "0x9AC88C", VA = "0x9AC88C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600183D")]
			[Address(RVA = "0x9ACA28", Offset = "0x9ACA28", VA = "0x9ACA28", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000448")]
		[CompilerGenerated]
		private sealed class <ShowKillStreakMessage>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DeathMatchFloatingTextManager <>4__this;

			[Token(Token = "0x40015F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string killer;

			[Token(Token = "0x40015F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool isOver;

			[Token(Token = "0x40015F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int killCount;

			[Token(Token = "0x170002C5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001842")]
				[Address(RVA = "0x9ACC7C", Offset = "0x9ACC7C", VA = "0x9ACC7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001844")]
				[Address(RVA = "0x9ACCC4", Offset = "0x9ACCC4", VA = "0x9ACCC4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600183F")]
			[Address(RVA = "0x9AC688", Offset = "0x9AC688", VA = "0x9AC688")]
			[DebuggerHidden]
			public <ShowKillStreakMessage>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001840")]
			[Address(RVA = "0x9ACA70", Offset = "0x9ACA70", VA = "0x9ACA70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001841")]
			[Address(RVA = "0x9ACA74", Offset = "0x9ACA74", VA = "0x9ACA74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001843")]
			[Address(RVA = "0x9ACC84", Offset = "0x9ACC84", VA = "0x9ACC84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015E0")]
		private const float killMessageTime = 2f;

		[Token(Token = "0x40015E1")]
		private const float distanceFromPlayer = 2f;

		[Token(Token = "0x40015E2")]
		private const float textDelay = 1.7f;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private FloatingTextController floatingTextController;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int queuedTextsCount;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float timeLastText;

		[Token(Token = "0x600182A")]
		[Address(RVA = "0x9ABDF8", Offset = "0x9ABDF8", VA = "0x9ABDF8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0x9ABEC8", Offset = "0x9ABEC8", VA = "0x9ABEC8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0x9ABF88", Offset = "0x9ABF88", VA = "0x9ABF88")]
		[IteratorStateMachine(typeof(<AddColorToText>d__8))]
		public IEnumerator AddColorToText(string infoText, int playerColorIndex, string playerNick)
		{
			return null;
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0x9AC064", Offset = "0x9AC064", VA = "0x9AC064")]
		[IteratorStateMachine(typeof(<AddColorToText>d__9))]
		public IEnumerator AddColorToText(string infoText, int firstPlayerColorIndex, int secondPlayerColorIndex, string firstplayerNick, string secondPlayerNick)
		{
			return null;
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0x9AC164", Offset = "0x9AC164", VA = "0x9AC164")]
		private void KillStreakAnnounce(PlayerControllerCore killer, int killcount)
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x9AC38C", Offset = "0x9AC38C", VA = "0x9AC38C")]
		private void KillStreakOverAnnounce(PlayerControllerCore killer, int killcount)
		{
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0x9AC5B8", Offset = "0x9AC5B8", VA = "0x9AC5B8")]
		[PunRPC]
		private void RPCKillStreakAnnounce(string killer, int killerColorID, int killCount, bool isOver)
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x9AC5DC", Offset = "0x9AC5DC", VA = "0x9AC5DC")]
		[IteratorStateMachine(typeof(<ShowKillStreakMessage>d__13))]
		private IEnumerator ShowKillStreakMessage(string killer, int killerColorID, int killCount, bool isOver)
		{
			return null;
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0x9AC6B0", Offset = "0x9AC6B0", VA = "0x9AC6B0")]
		public DeathMatchFloatingTextManager()
		{
		}
	}
	[Token(Token = "0x2000449")]
	public class DeathMatchKillsController : MonoBehaviourPun
	{
		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DeathMatchFloatingTextManager deathMatchFloatingTextManager;

		[Token(Token = "0x6001845")]
		[Address(RVA = "0x9ACCCC", Offset = "0x9ACCCC", VA = "0x9ACCCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0x9ACD48", Offset = "0x9ACD48", VA = "0x9ACD48")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x9ACDC4", Offset = "0x9ACDC4", VA = "0x9ACDC4")]
		private void KillPlayer(PlayerControllerCore victim, PlayerControllerCore killer)
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0x9AD158", Offset = "0x9AD158", VA = "0x9AD158")]
		[PunRPC]
		private void RpcPlayerKill(string victimName, int victimColorIndex)
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0x9AD04C", Offset = "0x9AD04C", VA = "0x9AD04C")]
		[PunRPC]
		private void RpcPlayerDie(string killerName, int killerColorIndex)
		{
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0x9AD260", Offset = "0x9AD260", VA = "0x9AD260")]
		public DeathMatchKillsController()
		{
		}
	}
	[Token(Token = "0x200044A")]
	public class DeathMatchMiniScoreboard : MonoBehaviour
	{
		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DeathMatchScoreboard miniScoreboard;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeathMatchScoreboard miniScoreboardLeftHandedOculus;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Camera cameraEye;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text timeLeftText;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text leftHandedTimeLeftText;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool validScore;

		[Token(Token = "0x600184B")]
		[Address(RVA = "0x9AD268", Offset = "0x9AD268", VA = "0x9AD268")]
		private void Awake()
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0x9AD2E8", Offset = "0x9AD2E8", VA = "0x9AD2E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0x9AD368", Offset = "0x9AD368", VA = "0x9AD368")]
		private void UpdateTimeLeftText(float time)
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0x9AD448", Offset = "0x9AD448", VA = "0x9AD448")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0x9AD4CC", Offset = "0x9AD4CC", VA = "0x9AD4CC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0x9AD54C", Offset = "0x9AD54C", VA = "0x9AD54C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0x9AD714", Offset = "0x9AD714", VA = "0x9AD714")]
		private void InvalidateScores()
		{
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0x9AD71C", Offset = "0x9AD71C", VA = "0x9AD71C")]
		public void ScoresValid(bool areThey)
		{
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x9AD728", Offset = "0x9AD728", VA = "0x9AD728")]
		public DeathMatchMiniScoreboard()
		{
		}
	}
	[Token(Token = "0x200044B")]
	public class DeathMatchPlayerSpawnController : MonoBehaviourPun
	{
		[Token(Token = "0x4001601")]
		private const int numberOfPlatformsForRandomization = 3;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool shouldRespawn;

		[Token(Token = "0x6001854")]
		[Address(RVA = "0x9AD730", Offset = "0x9AD730", VA = "0x9AD730")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0x9AD868", Offset = "0x9AD868", VA = "0x9AD868")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0x9AD9A0", Offset = "0x9AD9A0", VA = "0x9AD9A0")]
		private void OnGameStarted()
		{
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0x9ADAF8", Offset = "0x9ADAF8", VA = "0x9ADAF8")]
		private void OnDeathEnd()
		{
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0x9AD9D0", Offset = "0x9AD9D0", VA = "0x9AD9D0")]
		private void SpawnPlayerOnNetwork(PlayerControllerCore playerController)
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x9ADC3C", Offset = "0x9ADC3C", VA = "0x9ADC3C")]
		private void DisableRespawn()
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x9ADC44", Offset = "0x9ADC44", VA = "0x9ADC44")]
		[PunRPC]
		private void RpcRespawnPlayerOnMaster(int playerActorNumber)
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x9ADC84", Offset = "0x9ADC84", VA = "0x9ADC84")]
		[PunRPC]
		private void RpcSpawnPlayer(int playerActorNumber)
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x9ADCE8", Offset = "0x9ADCE8", VA = "0x9ADCE8")]
		private TeleportCollider GetAppropriateTeleportColliderForPlayer(PlayerControllerCore playerController)
		{
			return null;
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x9ADEA8", Offset = "0x9ADEA8", VA = "0x9ADEA8")]
		private float CalculateSumOfDistancesFromPlatformsWithPlayers(TeleportCollider sourcePlatform, List<TeleportCollider> platformsWithPlayers)
		{
			return default(float);
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0x9AE018", Offset = "0x9AE018", VA = "0x9AE018")]
		public DeathMatchPlayerSpawnController()
		{
		}
	}
	[Token(Token = "0x200044D")]
	public class DeathMatchScoreboard : Scoreboard
	{
		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ScoreboardEntryDeathMatch[] scoreboardEntries;

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x9AE088", Offset = "0x9AE088", VA = "0x9AE088")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0x9AE360", Offset = "0x9AE360", VA = "0x9AE360")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x9AE628", Offset = "0x9AE628", VA = "0x9AE628", Slot = "4")]
		public override void RefreshScoreboard()
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0x9AE650", Offset = "0x9AE650", VA = "0x9AE650")]
		public void RefreshPlayers(List<PlayerControllerCore> players)
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0x9AEA78", Offset = "0x9AEA78", VA = "0x9AEA78")]
		public DeathMatchScoreboard()
		{
		}
	}
	[Token(Token = "0x200044E")]
	public class GeometryClippingPenalizer : MonoBehaviour
	{
		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CollisionEvents[] headTorsoColliders;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerController vivePlayerPhotonObserver;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject leftHand;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject rightHand;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MessageDistance;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float timeToDie;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private FloatingTextController floatingTextController;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool bodyInGeometry;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool wasInvoked;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastTextTime;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float messageTimeout;

		[Token(Token = "0x600186A")]
		[Address(RVA = "0x9AEAB0", Offset = "0x9AEAB0", VA = "0x9AEAB0")]
		private void Start()
		{
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0x9AEB3C", Offset = "0x9AEB3C", VA = "0x9AEB3C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x9AED7C", Offset = "0x9AED7C", VA = "0x9AED7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x9AEF34", Offset = "0x9AEF34", VA = "0x9AEF34")]
		private void BodyTriggerEnter(Collision collision)
		{
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0x9AF0F8", Offset = "0x9AF0F8", VA = "0x9AF0F8")]
		private void BodyTriggerStay(Collision collision)
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0x9AF224", Offset = "0x9AF224", VA = "0x9AF224")]
		private void BodyTriggerExit(Collision collision)
		{
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0x9AF31C", Offset = "0x9AF31C", VA = "0x9AF31C")]
		private void EnableInterior(Collision col, bool state)
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0x9AF3D8", Offset = "0x9AF3D8", VA = "0x9AF3D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0x9AF060", Offset = "0x9AF060", VA = "0x9AF060")]
		private void ShowMessage()
		{
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0x9AF420", Offset = "0x9AF420", VA = "0x9AF420")]
		public GeometryClippingPenalizer()
		{
		}
	}
	[Token(Token = "0x200044F")]
	public class PlayerDeathControllerDmPC : PlayerDeathControllerDeathMatch, IInRoomCallbacks
	{
		[Token(Token = "0x2000450")]
		[CompilerGenerated]
		private sealed class <ShowDelayedTextDeathPlayerTimeToRespawn>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001621")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001622")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001623")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerDeathControllerDmPC <>4__this;

			[Token(Token = "0x170002C8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600188C")]
				[Address(RVA = "0x9AFE98", Offset = "0x9AFE98", VA = "0x9AFE98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600188E")]
				[Address(RVA = "0x9AFEE0", Offset = "0x9AFEE0", VA = "0x9AFEE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001889")]
			[Address(RVA = "0x9AFBF4", Offset = "0x9AFBF4", VA = "0x9AFBF4")]
			[DebuggerHidden]
			public <ShowDelayedTextDeathPlayerTimeToRespawn>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600188A")]
			[Address(RVA = "0x9AFCFC", Offset = "0x9AFCFC", VA = "0x9AFCFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600188B")]
			[Address(RVA = "0x9AFD00", Offset = "0x9AFD00", VA = "0x9AFD00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600188D")]
			[Address(RVA = "0x9AFEA0", Offset = "0x9AFEA0", VA = "0x9AFEA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000451")]
		[CompilerGenerated]
		private sealed class <DieSoundRoutine>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001625")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerDeathControllerDmPC <>4__this;

			[Token(Token = "0x170002CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001892")]
				[Address(RVA = "0x9AFF78", Offset = "0x9AFF78", VA = "0x9AFF78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001894")]
				[Address(RVA = "0x9AFFC0", Offset = "0x9AFFC0", VA = "0x9AFFC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600188F")]
			[Address(RVA = "0x9AFC1C", Offset = "0x9AFC1C", VA = "0x9AFC1C")]
			[DebuggerHidden]
			public <DieSoundRoutine>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001890")]
			[Address(RVA = "0x9AFEE8", Offset = "0x9AFEE8", VA = "0x9AFEE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001891")]
			[Address(RVA = "0x9AFEEC", Offset = "0x9AFEEC", VA = "0x9AFEEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001893")]
			[Address(RVA = "0x9AFF80", Offset = "0x9AFF80", VA = "0x9AFF80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001611")]
		private const float timeUntilRespawn = 5f;

		[Token(Token = "0x4001612")]
		private const float respawnTimerTextDistanceFromPlayer = 2f;

		[Token(Token = "0x4001613")]
		private const float timeUntilCounterToRespawnShouldBeVisible = 2f;

		[Token(Token = "0x4001614")]
		private const float animationOffset = 0.5f;

		[Token(Token = "0x4001615")]
		private const int distanceFromPlayer = 0;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Grayscale grayscaleImageEffect;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip deathSound;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private AudioSource deathAudioSource;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private PlayerMaterialsColorSetterPC playerMaterialsColorSetter;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private WaitForSeconds soundDelay;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaitForSeconds textDelay;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isDead;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float currentTimeToRespawn;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FloatTextCanvas canvasWithTimeToRespawn;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private FloatingTextController floatingTextController;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool deathEffectTimeFinished;

		[Token(Token = "0x170002C7")]
		public override bool IsDead
		{
			[Token(Token = "0x6001874")]
			[Address(RVA = "0x9AF43C", Offset = "0x9AF43C", VA = "0x9AF43C", Slot = "4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001875")]
			[Address(RVA = "0x9AF444", Offset = "0x9AF444", VA = "0x9AF444", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0x9AF504", Offset = "0x9AF504", VA = "0x9AF504")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0x9AF57C", Offset = "0x9AF57C", VA = "0x9AF57C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0x9AF5D4", Offset = "0x9AF5D4", VA = "0x9AF5D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0x9AF8B0", Offset = "0x9AF8B0", VA = "0x9AF8B0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0x9AF908", Offset = "0x9AF908", VA = "0x9AF908", Slot = "8")]
		public override void Die()
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0x9AF4E4", Offset = "0x9AF4E4", VA = "0x9AF4E4")]
		public void EnableDeathEffects(bool isEnabled)
		{
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0x9AFAE0", Offset = "0x9AFAE0", VA = "0x9AFAE0", Slot = "6")]
		public override void InitializeWithoutPlayer()
		{
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0x9AFB14", Offset = "0x9AFB14", VA = "0x9AFB14", Slot = "7")]
		public override void InitializeWithPlayer()
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0x9AFB20", Offset = "0x9AFB20", VA = "0x9AFB20", Slot = "13")]
		public void OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0x9AF5D8", Offset = "0x9AF5D8", VA = "0x9AF5D8")]
		private void ProcessDeathEffect()
		{
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0x9AFA6C", Offset = "0x9AFA6C", VA = "0x9AFA6C")]
		[IteratorStateMachine(typeof(<ShowDelayedTextDeathPlayerTimeToRespawn>d__29))]
		private IEnumerator ShowDelayedTextDeathPlayerTimeToRespawn()
		{
			return null;
		}

		[Token(Token = "0x6001881")]
		[Address(RVA = "0x9AF9F8", Offset = "0x9AF9F8", VA = "0x9AF9F8")]
		[IteratorStateMachine(typeof(<DieSoundRoutine>d__30))]
		private IEnumerator DieSoundRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0x9AF4C0", Offset = "0x9AF4C0", VA = "0x9AF4C0")]
		private void SetPlayerMaterialsToGhost(bool isGhost)
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0x9AFBC0", Offset = "0x9AFBC0", VA = "0x9AFBC0")]
		private bool IsWaitingForRespawn()
		{
			return default(bool);
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0x9AFC44", Offset = "0x9AFC44", VA = "0x9AFC44", Slot = "9")]
		public void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0x9AFC48", Offset = "0x9AFC48", VA = "0x9AFC48", Slot = "10")]
		public void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0x9AFC4C", Offset = "0x9AFC4C", VA = "0x9AFC4C", Slot = "11")]
		public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0x9AFC50", Offset = "0x9AFC50", VA = "0x9AFC50", Slot = "12")]
		public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0x9AFC54", Offset = "0x9AFC54", VA = "0x9AFC54")]
		public PlayerDeathControllerDmPC()
		{
		}
	}
	[Token(Token = "0x2000452")]
	public class ScoreboardEntryDeathMatch : MonoBehaviour
	{
		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text playerName;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text hits;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text deaths;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TournamentPlayerResult tournamentPlayerResult;

		[Token(Token = "0x6001895")]
		[Address(RVA = "0x9AE7BC", Offset = "0x9AE7BC", VA = "0x9AE7BC")]
		internal void UpdateEntry(PlayerControllerCore player)
		{
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0x9AFFC8", Offset = "0x9AFFC8", VA = "0x9AFFC8")]
		private void SetEntryColor(Color playerColor)
		{
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0x9AEA50", Offset = "0x9AEA50", VA = "0x9AEA50")]
		public void SetActive(bool shouldBeActive)
		{
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0x9B00DC", Offset = "0x9B00DC", VA = "0x9B00DC")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0x9B00FC", Offset = "0x9B00FC", VA = "0x9B00FC")]
		public ScoreboardEntryDeathMatch()
		{
		}
	}
	[Token(Token = "0x2000453")]
	public class AxeController : MonoBehaviourPun, IResetable
	{
		[Token(Token = "0x2000454")]
		public delegate void PlayerHitState(int playerID);

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 throwDirection;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float throwSpeed;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float StartingRotationSpeed;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationSpeed;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool hitAlready;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isPaused;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float targetScaleMultiplier;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioSource axeWhoosh;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioSource playerFlesh;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioSource woodHit;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSource stoneHit;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MeshRenderer axeMeshRenderer;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Material ghostMaterial;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject playerFleshSoundPrefab;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool defaultHitAlready;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[SerializeField]
		private bool defaultIsPaused;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		[SerializeField]
		private bool defaultAxeWhooshMute;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		[SerializeField]
		private bool defaultAxeWhooshLoop;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Transform defaultPlayerFleshParent;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private bool defaultAxeMeshRendererEnabled;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Material defaultAxeMeshRendererMaterial;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Transform defaultAxeParent;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Vector3 defaultAxeLocalPosition;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		private Quaternion defaultAxeLocalRotation;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		private Vector3 defaultAxeLocalScale;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private AxeBeingUsedController axeBeingUsedController;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private bool hasRecenltyEnabledAxe;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private PhotonPrefabPoolElement photonPrefabPoolElement;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float defaultPreviousDistance;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float defaultLifeTime;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool defaultDestroyedAlready;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float distanceWhenThrown;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private GameObject player;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float lifeTime;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool destroyedAlready;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 axeScale;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Vector3 startingScale;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float previousDistance;

		[Token(Token = "0x170002CC")]
		public AxeHandle AxeHandle
		{
			[Token(Token = "0x600189E")]
			[Address(RVA = "0x9B03EC", Offset = "0x9B03EC", VA = "0x9B03EC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600189F")]
			[Address(RVA = "0x9B03F4", Offset = "0x9B03F4", VA = "0x9B03F4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002CD")]
		public bool HadHitPlayer
		{
			[Token(Token = "0x60018A0")]
			[Address(RVA = "0x9B0404", Offset = "0x9B0404", VA = "0x9B0404")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018A1")]
			[Address(RVA = "0x9B040C", Offset = "0x9B040C", VA = "0x9B040C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public static event PlayerHitState OnPlayerGotHit
		{
			[Token(Token = "0x600189A")]
			[Address(RVA = "0x9B0104", Offset = "0x9B0104", VA = "0x9B0104")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600189B")]
			[Address(RVA = "0x9B01BC", Offset = "0x9B01BC", VA = "0x9B01BC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000020")]
		public static event Action OnPlayerHitByAxe
		{
			[Token(Token = "0x600189C")]
			[Address(RVA = "0x9B0274", Offset = "0x9B0274", VA = "0x9B0274")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600189D")]
			[Address(RVA = "0x9B0330", Offset = "0x9B0330", VA = "0x9B0330")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x9B0418", Offset = "0x9B0418", VA = "0x9B0418")]
		[ContextMenu("Collect Data")]
		public void CollectData()
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x9B0488", Offset = "0x9B0488", VA = "0x9B0488")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0x9B07AC", Offset = "0x9B07AC", VA = "0x9B07AC")]
		private void TryToSetAxeBeingUsed()
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x9B08E4", Offset = "0x9B08E4", VA = "0x9B08E4")]
		private void Update()
		{
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x9B0FC0", Offset = "0x9B0FC0", VA = "0x9B0FC0")]
		private void TryToSetAxeIsNotBeingUsed()
		{
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x9B102C", Offset = "0x9B102C", VA = "0x9B102C")]
		public void OnTriggerEnter(Collider coll)
		{
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0x9B1928", Offset = "0x9B1928", VA = "0x9B1928")]
		private bool IsLocalPlayerCollider(Collider collider)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x9B1A84", Offset = "0x9B1A84", VA = "0x9B1A84")]
		public void SetInitialState()
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0x9B081C", Offset = "0x9B081C", VA = "0x9B081C")]
		public void DisableVisualsOnNetwork()
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0x9B0F90", Offset = "0x9B0F90", VA = "0x9B0F90")]
		public void DisableVisualsLocally()
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0x9B1CA8", Offset = "0x9B1CA8", VA = "0x9B1CA8")]
		[PunRPC]
		public void RpcSetAxeParentToHead(int headPhotonViewID, Quaternion rotation)
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x9B1F50", Offset = "0x9B1F50", VA = "0x9B1F50")]
		private void SetAxeMaterialToGhost()
		{
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x9B1F74", Offset = "0x9B1F74", VA = "0x9B1F74")]
		[PunRPC]
		public void RpcDisableVisuals()
		{
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x9B1FFC", Offset = "0x9B1FFC", VA = "0x9B1FFC")]
		[PunRPC]
		public void RpcPlayPlayerFleshSound()
		{
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x9B1868", Offset = "0x9B1868", VA = "0x9B1868")]
		private void PlayHitOtherSound()
		{
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x9B17A8", Offset = "0x9B17A8", VA = "0x9B17A8")]
		public void RpcPlayHitWoodSound()
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x9B22AC", Offset = "0x9B22AC", VA = "0x9B22AC")]
		public void MarkAxeAsItHitSomething()
		{
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x9B22FC", Offset = "0x9B22FC", VA = "0x9B22FC", Slot = "4")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x9B2300", Offset = "0x9B2300", VA = "0x9B2300")]
		public AxeController()
		{
		}
	}
	[Token(Token = "0x2000455")]
	public class ExplosiveWeapon : MonoBehaviourPun, IThrowableWeaponCustomHit, IResetable, IPunObservable
	{
		[Token(Token = "0x4001655")]
		private const float LowWaveExplosionScalingValue = 1f;

		[Token(Token = "0x4001656")]
		private const float HighWaveExplosionScalingValue = 0.3f;

		[Token(Token = "0x4001657")]
		private const int HighWaveTreshold = 25;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ThrowableWeponController throwableWeponController;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AODController AODController;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Rigidbody rigidbody;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Collider collider;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float timeToExplodeAfterHit;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject explosionFX;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject contentToDisable;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isFuseFired;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float timer;

		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _isPhysicsEnabled;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasExploded;

		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion zeroRotetion;

		[Token(Token = "0x170002CE")]
		private bool isPhysicsEnabled
		{
			[Token(Token = "0x60018B9")]
			[Address(RVA = "0x9B24A4", Offset = "0x9B24A4", VA = "0x9B24A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018BA")]
			[Address(RVA = "0x9B24AC", Offset = "0x9B24AC", VA = "0x9B24AC")]
			set
			{
			}
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x9B2558", Offset = "0x9B2558", VA = "0x9B2558")]
		private void Update()
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x9B2964", Offset = "0x9B2964", VA = "0x9B2964", Slot = "4")]
		public void Hit(Collider other)
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x9B2600", Offset = "0x9B2600", VA = "0x9B2600")]
		public void Explode(int playerId)
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x9B2A9C", Offset = "0x9B2A9C", VA = "0x9B2A9C")]
		[PunRPC]
		private void RPCDestroyDynamite()
		{
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x9B2B08", Offset = "0x9B2B08", VA = "0x9B2B08")]
		[PunRPC]
		private void RPCExplode(int PlayerId, float sizePercentage)
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x9B24FC", Offset = "0x9B24FC", VA = "0x9B24FC")]
		private void EnablePhysics(bool enable)
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x9B2B7C", Offset = "0x9B2B7C", VA = "0x9B2B7C", Slot = "5")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0x9B2BC8", Offset = "0x9B2BC8", VA = "0x9B2BC8", Slot = "6")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x9B2D60", Offset = "0x9B2D60", VA = "0x9B2D60")]
		public ExplosiveWeapon()
		{
		}
	}
	[Token(Token = "0x2000456")]
	internal interface IPhysicsEnabler
	{
		[Token(Token = "0x60018C4")]
		void EnablePhysics(Vector3 velocity);
	}
	[Token(Token = "0x2000457")]
	public class OnBodyPartDetachedItemDroper : MonoBehaviourPun, IResetable
	{
		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<BodyPartDetacher> bodyPartsRelatedToItem;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private EnemyGetKilledController enemyGetKilledController;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject itemPrefab;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject localItemToDisable;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float pushingForce;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private bool dropOnDie;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		private bool wasReleased;

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x9B2D74", Offset = "0x9B2D74", VA = "0x9B2D74")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x9B3068", Offset = "0x9B3068", VA = "0x9B3068")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x9B335C", Offset = "0x9B335C", VA = "0x9B335C")]
		private void ReleaseItem(Vector3 hitDirection, int playerId)
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x9B3940", Offset = "0x9B3940", VA = "0x9B3940")]
		private void ReleaseItem(Player player)
		{
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x9B39A4", Offset = "0x9B39A4", VA = "0x9B39A4")]
		[PunRPC]
		private void RPCReleaseItem(int photonViewID, Vector3 hitDirection, int playerId)
		{
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x9B36A4", Offset = "0x9B36A4", VA = "0x9B36A4")]
		private void Release(GameObject instance, Vector3 hitDirection, int playerId)
		{
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x9B3A70", Offset = "0x9B3A70", VA = "0x9B3A70", Slot = "4")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x9B3A98", Offset = "0x9B3A98", VA = "0x9B3A98")]
		public OnBodyPartDetachedItemDroper()
		{
		}
	}
	[Token(Token = "0x2000458")]
	public class OnTargetReachedExploder : MonoBehaviour
	{
		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float explodeRange;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ThrowableWeaponFlyProcessor FlyProcessor;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[RequireInterface(typeof(IThrowableWeaponCustomHit))]
		[SerializeField]
		private ExplosiveWeapon explosiveWeapon;

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x9B3AA0", Offset = "0x9B3AA0", VA = "0x9B3AA0")]
		private void Update()
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x9B3B90", Offset = "0x9B3B90", VA = "0x9B3B90")]
		public OnTargetReachedExploder()
		{
		}
	}
	[Token(Token = "0x2000459")]
	public class SharpWeapon : MonoBehaviourPun, IThrowableWeaponCustomHit, IResetable
	{
		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer mesh;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Material ghostMaterial;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Material defaultMaterial;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private PhotonPrefabPoolElement poolElement;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool IsSpikedInPlayer;

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x9B3B98", Offset = "0x9B3B98", VA = "0x9B3B98")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x9B3C18", Offset = "0x9B3C18", VA = "0x9B3C18")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0x9B3C98", Offset = "0x9B3C98", VA = "0x9B3C98", Slot = "4")]
		public void Hit(Collider other)
		{
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x9B3EDC", Offset = "0x9B3EDC", VA = "0x9B3EDC", Slot = "5")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0x9B3F18", Offset = "0x9B3F18", VA = "0x9B3F18")]
		public SharpWeapon()
		{
		}
	}
	[Token(Token = "0x200045A")]
	public class ThrowableWeponController : MonoBehaviourPun, IThrowable, IResetable, IPhysicsEnabler, IPunObservable, IInRoomCallbacks
	{
		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float lifeTime;

		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<Collider> triggers;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Collider collider;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Rigidbody rigidbody;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ThrowableWeaponFlyProcessor flyProcessor;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[RequireInterface(typeof(IThrowableWeaponCustomHit))]
		private UnityEngine.Object _customHit;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource startFlyingSound;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioSource playerHitSound;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private AudioSource woodHitSound;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AudioSource otherHitSound;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private ThrowableWeaponSoundController throwableWeaponSoundController;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool isFlying;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float timer;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int playerTargetID;

		[Token(Token = "0x170002CF")]
		private IThrowableWeaponCustomHit customHit
		{
			[Token(Token = "0x60018D6")]
			[Address(RVA = "0x9B4058", Offset = "0x9B4058", VA = "0x9B4058")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D0")]
		public Player PlayerTarget
		{
			[Token(Token = "0x60018D7")]
			[Address(RVA = "0x9B40A0", Offset = "0x9B40A0", VA = "0x9B40A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018D8")]
			[Address(RVA = "0x9B40A8", Offset = "0x9B40A8", VA = "0x9B40A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002D1")]
		public int PlayerTargetID
		{
			[Token(Token = "0x60018D9")]
			[Address(RVA = "0x9B40B0", Offset = "0x9B40B0", VA = "0x9B40B0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018DA")]
			[Address(RVA = "0x9B3A10", Offset = "0x9B3A10", VA = "0x9B3A10")]
			set
			{
			}
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0x9B40B8", Offset = "0x9B40B8", VA = "0x9B40B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0x9B4110", Offset = "0x9B4110", VA = "0x9B4110")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0x9B4168", Offset = "0x9B4168", VA = "0x9B4168")]
		private void Update()
		{
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0x9B425C", Offset = "0x9B425C", VA = "0x9B425C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60018DF")]
		[Address(RVA = "0x9B45C8", Offset = "0x9B45C8", VA = "0x9B45C8")]
		private bool IsLocalPlayerCollider(Collider collider)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E0")]
		[Address(RVA = "0x9B4724", Offset = "0x9B4724", VA = "0x9B4724", Slot = "4")]
		public void Throw(Vector3 target, float force, float torque)
		{
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0x9B4760", Offset = "0x9B4760", VA = "0x9B4760", Slot = "6")]
		public void EnablePhysics(Vector3 velocity)
		{
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0x9B47E4", Offset = "0x9B47E4", VA = "0x9B47E4")]
		public void DisablePhysics()
		{
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x9B4884", Offset = "0x9B4884", VA = "0x9B4884", Slot = "5")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0x9B49E4", Offset = "0x9B49E4", VA = "0x9B49E4", Slot = "7")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0x9B4AAC", Offset = "0x9B4AAC", VA = "0x9B4AAC", Slot = "9")]
		public void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0x9B4AC4", Offset = "0x9B4AC4", VA = "0x9B4AC4", Slot = "8")]
		public void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x60018E7")]
		[Address(RVA = "0x9B4AC8", Offset = "0x9B4AC8", VA = "0x9B4AC8", Slot = "10")]
		public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0x9B4ACC", Offset = "0x9B4ACC", VA = "0x9B4ACC", Slot = "11")]
		public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60018E9")]
		[Address(RVA = "0x9B4AD0", Offset = "0x9B4AD0", VA = "0x9B4AD0", Slot = "12")]
		public void OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0x9B4AD4", Offset = "0x9B4AD4", VA = "0x9B4AD4")]
		public ThrowableWeponController()
		{
		}
	}
	[Token(Token = "0x200045B")]
	public class ArrowsRemover : MonoBehaviour
	{
		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ArrowsRemover instance;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int maxNumberOfArrows;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ArrowResetController> arrowsRemovers;

		[Token(Token = "0x170002D2")]
		public static ArrowsRemover Instance
		{
			[Token(Token = "0x60018EB")]
			[Address(RVA = "0x9B4ADC", Offset = "0x9B4ADC", VA = "0x9B4ADC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0x9B4B9C", Offset = "0x9B4B9C", VA = "0x9B4B9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0x9B4CB0", Offset = "0x9B4CB0", VA = "0x9B4CB0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0x9B4D30", Offset = "0x9B4D30", VA = "0x9B4D30")]
		private void SetNewArrow(GameObject arrow)
		{
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0x9B4F54", Offset = "0x9B4F54", VA = "0x9B4F54")]
		public void RemoveExcessiveArrows()
		{
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0x9B4E20", Offset = "0x9B4E20", VA = "0x9B4E20")]
		public void AddNewArrow(GameObject arrow)
		{
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x9B50C4", Offset = "0x9B50C4", VA = "0x9B50C4")]
		public void RemoveArrow(ArrowResetController arrowResetController)
		{
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x9B5154", Offset = "0x9B5154", VA = "0x9B5154")]
		public ArrowsRemover()
		{
		}
	}
	[Token(Token = "0x200045D")]
	public class ArrowColorSetter : MonoBehaviour, IResetable
	{
		[Token(Token = "0x200045E")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x400168A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PlayerControllerCore playerControllerCore;

			[Token(Token = "0x400168B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ArrowColorSetter <>4__this;

			[Token(Token = "0x60018FA")]
			[Address(RVA = "0x9B5388", Offset = "0x9B5388", VA = "0x9B5388")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x60018FB")]
			[Address(RVA = "0x9B5390", Offset = "0x9B5390", VA = "0x9B5390")]
			internal bool <SetArrowColorCoroutine>b__0()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200045F")]
		[CompilerGenerated]
		private sealed class <SetArrowColorCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400168C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400168D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400168E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArrowColorSetter <>4__this;

			[Token(Token = "0x400168F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass4_0 <>8__1;

			[Token(Token = "0x170002D3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018FF")]
				[Address(RVA = "0x9B5618", Offset = "0x9B5618", VA = "0x9B5618", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001901")]
				[Address(RVA = "0x9B5660", Offset = "0x9B5660", VA = "0x9B5660", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018FC")]
			[Address(RVA = "0x9B5350", Offset = "0x9B5350", VA = "0x9B5350")]
			[DebuggerHidden]
			public <SetArrowColorCoroutine>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60018FD")]
			[Address(RVA = "0x9B5460", Offset = "0x9B5460", VA = "0x9B5460", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018FE")]
			[Address(RVA = "0x9B5464", Offset = "0x9B5464", VA = "0x9B5464", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001900")]
			[Address(RVA = "0x9B5620", Offset = "0x9B5620", VA = "0x9B5620", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer arrowMeshRenderer;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PhotonView photonView;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isColorSet;

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0x9B52AC", Offset = "0x9B52AC", VA = "0x9B52AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0x9B52DC", Offset = "0x9B52DC", VA = "0x9B52DC")]
		[IteratorStateMachine(typeof(<SetArrowColorCoroutine>d__4))]
		private IEnumerator SetArrowColorCoroutine()
		{
			return null;
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0x9B5378", Offset = "0x9B5378", VA = "0x9B5378", Slot = "4")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0x9B5380", Offset = "0x9B5380", VA = "0x9B5380")]
		public ArrowColorSetter()
		{
		}
	}
	[Token(Token = "0x2000460")]
	public class GateExplosionController : MonoBehaviour, IGateExplosionController
	{
		[Token(Token = "0x2000461")]
		[CompilerGenerated]
		private sealed class <DestroyAfterTime>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001698")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001699")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400169A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GateExplosionController <>4__this;

			[Token(Token = "0x170002D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600190E")]
				[Address(RVA = "0x9B5CD8", Offset = "0x9B5CD8", VA = "0x9B5CD8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001910")]
				[Address(RVA = "0x9B5D20", Offset = "0x9B5D20", VA = "0x9B5D20", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600190B")]
			[Address(RVA = "0x9B5A80", Offset = "0x9B5A80", VA = "0x9B5A80")]
			[DebuggerHidden]
			public <DestroyAfterTime>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x600190C")]
			[Address(RVA = "0x9B5C18", Offset = "0x9B5C18", VA = "0x9B5C18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600190D")]
			[Address(RVA = "0x9B5C1C", Offset = "0x9B5C1C", VA = "0x9B5C1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600190F")]
			[Address(RVA = "0x9B5CE0", Offset = "0x9B5CE0", VA = "0x9B5CE0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject particleObject;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject particleObjectMobile;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AODController aodController;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioSource ExplosionAudioSource;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private AudioSource FireAudioSource;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float timeToWait;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool isCityDestroyedSoundsPlaying;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		private bool hasExplosionSoundFinnished;

		[Token(Token = "0x170002D5")]
		public GameObject ParticleObject
		{
			[Token(Token = "0x6001902")]
			[Address(RVA = "0x9B5668", Offset = "0x9B5668", VA = "0x9B5668")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x9B56D8", Offset = "0x9B56D8", VA = "0x9B56D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x9B57D0", Offset = "0x9B57D0", VA = "0x9B57D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x9B58C8", Offset = "0x9B58C8", VA = "0x9B58C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0x9B5A0C", Offset = "0x9B5A0C", VA = "0x9B5A0C")]
		[IteratorStateMachine(typeof(<DestroyAfterTime>d__13))]
		private IEnumerator DestroyAfterTime()
		{
			return null;
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0x9B5AA8", Offset = "0x9B5AA8", VA = "0x9B5AA8")]
		private void Destroy()
		{
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0x9B5B38", Offset = "0x9B5B38", VA = "0x9B5B38")]
		private void DisableParticles()
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x9B5BE8", Offset = "0x9B5BE8", VA = "0x9B5BE8", Slot = "4")]
		public void DestroyCity()
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x9B5C08", Offset = "0x9B5C08", VA = "0x9B5C08")]
		public GateExplosionController()
		{
		}
	}
	[Token(Token = "0x2000462")]
	public class GameOverStats : GameOverStatsCore
	{
		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int localPlayerOwnerID;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string localPlayerDisplayName;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int attacksDodgedCount;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int sniperShotCount;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int arrowsFiredCount;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int arrowsHitCount;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int closeCallKillCount;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float totalMagicDmgDealt;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float totalDmgDealt;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float totalBossDmgDealt;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int airUnitsHitCount;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool castleDied;

		[Token(Token = "0x170002D8")]
		public override int LocalPlayerGameObjectID
		{
			[Token(Token = "0x6001911")]
			[Address(RVA = "0x9B5D28", Offset = "0x9B5D28", VA = "0x9B5D28", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002D9")]
		public override string LocalPlayerDisplayName
		{
			[Token(Token = "0x6001912")]
			[Address(RVA = "0x9B5D30", Offset = "0x9B5D30", VA = "0x9B5D30", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DA")]
		public override int AttacksDodgedCount
		{
			[Token(Token = "0x6001913")]
			[Address(RVA = "0x9B5D38", Offset = "0x9B5D38", VA = "0x9B5D38", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002DB")]
		public override int SniperShotCount
		{
			[Token(Token = "0x6001914")]
			[Address(RVA = "0x9B5D40", Offset = "0x9B5D40", VA = "0x9B5D40", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002DC")]
		public override int ArrowsFiredCount
		{
			[Token(Token = "0x6001915")]
			[Address(RVA = "0x9B5D48", Offset = "0x9B5D48", VA = "0x9B5D48", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002DD")]
		public override int ArrowsHitCount
		{
			[Token(Token = "0x6001916")]
			[Address(RVA = "0x9B5D50", Offset = "0x9B5D50", VA = "0x9B5D50", Slot = "9")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002DE")]
		public override int CloseCallKillCount
		{
			[Token(Token = "0x6001917")]
			[Address(RVA = "0x9B5D58", Offset = "0x9B5D58", VA = "0x9B5D58", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002DF")]
		public override float TotalMagicDmgDealt
		{
			[Token(Token = "0x6001918")]
			[Address(RVA = "0x9B5D60", Offset = "0x9B5D60", VA = "0x9B5D60", Slot = "11")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E0")]
		public override float TotalDmgDealt
		{
			[Token(Token = "0x6001919")]
			[Address(RVA = "0x9B5D68", Offset = "0x9B5D68", VA = "0x9B5D68", Slot = "12")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E1")]
		public override float TotalBossDmgDealt
		{
			[Token(Token = "0x600191A")]
			[Address(RVA = "0x9B5D70", Offset = "0x9B5D70", VA = "0x9B5D70", Slot = "13")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E2")]
		public override int AirUnitsHitCount
		{
			[Token(Token = "0x600191B")]
			[Address(RVA = "0x9B5D78", Offset = "0x9B5D78", VA = "0x9B5D78", Slot = "14")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x9B5D80", Offset = "0x9B5D80", VA = "0x9B5D80")]
		public void InitializeWithPlayer()
		{
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0x9B60A0", Offset = "0x9B60A0", VA = "0x9B60A0")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0x9B6358", Offset = "0x9B6358", VA = "0x9B6358")]
		private void OnEnemyHit(float maxHealth, EnemyInfo enemyInfo, HitInfoAbstract hitinfo, float damageDone)
		{
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0x9B6444", Offset = "0x9B6444", VA = "0x9B6444")]
		public void InitializeWithoutPlayer()
		{
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0x9B6450", Offset = "0x9B6450", VA = "0x9B6450")]
		private void CountAttacksIn(int playerID)
		{
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0x9B65DC", Offset = "0x9B65DC", VA = "0x9B65DC")]
		[PunRPC]
		public void RPCCountAttacksIn(int playerID)
		{
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0x9B6660", Offset = "0x9B6660", VA = "0x9B6660")]
		private void PlayerGotHit(int playerID)
		{
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0x9B66E4", Offset = "0x9B66E4", VA = "0x9B66E4")]
		private void CountSniperShot(int playerID)
		{
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0x9B6870", Offset = "0x9B6870", VA = "0x9B6870")]
		[PunRPC]
		public void RPCCountSniperShot(int playerID)
		{
		}

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x9B6404", Offset = "0x9B6404", VA = "0x9B6404")]
		private void CountAirUnitHits()
		{
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x9B68F4", Offset = "0x9B68F4", VA = "0x9B68F4")]
		private void CountCloseCallKills(int playerID)
		{
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x9B6A80", Offset = "0x9B6A80", VA = "0x9B6A80")]
		[PunRPC]
		public void RPCCountCloseCallKill(int playerID)
		{
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x9B6424", Offset = "0x9B6424", VA = "0x9B6424")]
		private void CountMagicDamage(float damage)
		{
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0x9B6414", Offset = "0x9B6414", VA = "0x9B6414")]
		private void CountBossDamage(float damage)
		{
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0x9B6B04", Offset = "0x9B6B04", VA = "0x9B6B04")]
		private void CountArrowFired(GameObject arrow)
		{
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0x9B6434", Offset = "0x9B6434", VA = "0x9B6434")]
		private void CountArrowHit()
		{
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x9B6BF4", Offset = "0x9B6BF4", VA = "0x9B6BF4", Slot = "15")]
		public override string GetNumbers()
		{
			return null;
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x9B7240", Offset = "0x9B7240", VA = "0x9B7240")]
		public void SendStatsToMaster()
		{
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x9B7748", Offset = "0x9B7748", VA = "0x9B7748")]
		[PunRPC]
		public void RPCSendStatsRequestFromMaster()
		{
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0x9B7318", Offset = "0x9B7318", VA = "0x9B7318")]
		public void PassDataToMaster()
		{
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0x9B774C", Offset = "0x9B774C", VA = "0x9B774C")]
		[PunRPC]
		public void RPCPassDataToMaster(int localPlayerOwnerID, string localPlayerDisplayName, int attacksDodgedCount, int sniperShotCount, int arrowsFiredCount, int arrowsHitCount, int closeCallKillCount, float totalMagicDmgDealt, float totalDmgDealt, float totalBossDmgDealt, int airUnitsHitCount)
		{
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0x9B77DC", Offset = "0x9B77DC", VA = "0x9B77DC")]
		public GameOverStats()
		{
		}
	}
	[Token(Token = "0x2000463")]
	public class HandGrabController : MonoBehaviourPun
	{
		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private HVRHandGrabber handGrabber;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HVRHandGrabber secondHandGrabber;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private HandsDominanceSwitcher handsDominanceSwitcher;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GrabType grabType;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private HandsController handsController;

		[Token(Token = "0x170002E3")]
		public bool IsHandOccupied
		{
			[Token(Token = "0x6001932")]
			[Address(RVA = "0x9B7834", Offset = "0x9B7834", VA = "0x9B7834")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001933")]
			[Address(RVA = "0x9B783C", Offset = "0x9B783C", VA = "0x9B783C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0x9B7848", Offset = "0x9B7848", VA = "0x9B7848")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0x9B78FC", Offset = "0x9B78FC", VA = "0x9B78FC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0x9B7DA4", Offset = "0x9B7DA4", VA = "0x9B7DA4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0x9B824C", Offset = "0x9B824C", VA = "0x9B824C")]
		private void TryEnableGrabHands(HVRGrabberBase handGrabber, HVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0x9B82AC", Offset = "0x9B82AC", VA = "0x9B82AC")]
		private void TryDisableGrabHands(HVRGrabberBase handGrabber, HVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0x9B8314", Offset = "0x9B8314", VA = "0x9B8314")]
		private void Release()
		{
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0x9B8360", Offset = "0x9B8360", VA = "0x9B8360")]
		private void DisableGrabbing()
		{
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0x9B83BC", Offset = "0x9B83BC", VA = "0x9B83BC")]
		private void EnableGrabbing()
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x9B8440", Offset = "0x9B8440", VA = "0x9B8440")]
		public HandGrabController()
		{
		}
	}
	[Token(Token = "0x2000464")]
	public class MenuController : MonoBehaviourPun
	{
		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool inputEnabled;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject menuGameObject;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject startButton;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject continueButton;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject waitingForHostToStartTheGameText;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text infoText;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private List<GameObject> windows;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject mainWindow;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private LevelUI levelUI;

		[Token(Token = "0x40016B6")]
		private const string cartDeliveredText = "Cart successfully delivered!";

		[Token(Token = "0x40016B7")]
		private const string cartDestroyedText = "Cart destroyed!";

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MenuController instance;

		[Token(Token = "0x170002E4")]
		public static MenuController Instance
		{
			[Token(Token = "0x600193D")]
			[Address(RVA = "0x9B8448", Offset = "0x9B8448", VA = "0x9B8448")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E5")]
		public bool IsMenuOpened
		{
			[Token(Token = "0x600193E")]
			[Address(RVA = "0x9B8508", Offset = "0x9B8508", VA = "0x9B8508")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x9B8524", Offset = "0x9B8524", VA = "0x9B8524")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0x9B85E0", Offset = "0x9B85E0", VA = "0x9B85E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0x9B8648", Offset = "0x9B8648", VA = "0x9B8648")]
		private void ToggleMenu()
		{
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0x9B88B0", Offset = "0x9B88B0", VA = "0x9B88B0")]
		public void SetMasterStartMenu()
		{
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0x9B88E8", Offset = "0x9B88E8", VA = "0x9B88E8")]
		public void SetNonMasterStartMenu()
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0x9B8920", Offset = "0x9B8920", VA = "0x9B8920")]
		public void SwitchToDuringGameMenu()
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x9B8720", Offset = "0x9B8720", VA = "0x9B8720")]
		public void ShowMenu()
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0x9B8680", Offset = "0x9B8680", VA = "0x9B8680")]
		public void HideMenu()
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0x9B8A4C", Offset = "0x9B8A4C", VA = "0x9B8A4C")]
		public void ShowDeathMenu(string deathInfo)
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0x9B8AA8", Offset = "0x9B8AA8", VA = "0x9B8AA8")]
		public void ShowCartDeliveredMenu()
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0x9B8B40", Offset = "0x9B8B40", VA = "0x9B8B40")]
		public void ShowCartDestroyedMenu()
		{
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0x9B8BD8", Offset = "0x9B8BD8", VA = "0x9B8BD8")]
		public void SetLevelUI()
		{
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0x9B8BF4", Offset = "0x9B8BF4", VA = "0x9B8BF4")]
		public MenuController()
		{
		}
	}
	[Token(Token = "0x2000466")]
	public class PlayerController : PlayerControllerCore, IPunObservable
	{
		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private FloatTextCanvas playerNameText;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TeleportPlatformHolder teleportPlatformHolder;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform playerRig;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Camera cameraEye;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private PlayerColorSetter playerColorSetter;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MeshRenderer helmetMeshRenderer;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private HandsDominanceSwitcher handsDominanceSwitcher;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private PlayerModelFadingController playerModelFadingController;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private VoiceChatPlayerController voiceChatPlayerController;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform headTransform;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int playerId;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string tournamentPersistentID;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string playerName;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool haveDisabledCameraForBot;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float score;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int deaths;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int kills;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int orderOfLastHit;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera cachedCamera;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool isGameOver;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool shouldDispose;

		[Token(Token = "0x170002E6")]
		public string TournamentPersistentID
		{
			[Token(Token = "0x6001957")]
			[Address(RVA = "0x9B9098", Offset = "0x9B9098", VA = "0x9B9098")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E7")]
		public override bool Disposed
		{
			[Token(Token = "0x6001958")]
			[Address(RVA = "0x9B90A0", Offset = "0x9B90A0", VA = "0x9B90A0", Slot = "18")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001959")]
			[Address(RVA = "0x9B90A8", Offset = "0x9B90A8", VA = "0x9B90A8", Slot = "19")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170002E8")]
		public override Camera CameraEye
		{
			[Token(Token = "0x600195A")]
			[Address(RVA = "0x9B90B4", Offset = "0x9B90B4", VA = "0x9B90B4", Slot = "23")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E9")]
		public override Transform HeadTransform
		{
			[Token(Token = "0x600195B")]
			[Address(RVA = "0x9B90D4", Offset = "0x9B90D4", VA = "0x9B90D4", Slot = "24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EA")]
		public override PlayerColorSetter PlayerColorSetter
		{
			[Token(Token = "0x600195C")]
			[Address(RVA = "0x9B90DC", Offset = "0x9B90DC", VA = "0x9B90DC", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600195D")]
			[Address(RVA = "0x9B90E4", Offset = "0x9B90E4", VA = "0x9B90E4", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170002EB")]
		public override VoiceChatPlayerController VoiceChatPlayerController
		{
			[Token(Token = "0x600195E")]
			[Address(RVA = "0x9B90EC", Offset = "0x9B90EC", VA = "0x9B90EC", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EC")]
		public override float Level
		{
			[Token(Token = "0x600195F")]
			[Address(RVA = "0x9B90F4", Offset = "0x9B90F4", VA = "0x9B90F4", Slot = "16")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001960")]
			[Address(RVA = "0x9B90FC", Offset = "0x9B90FC", VA = "0x9B90FC", Slot = "17")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002ED")]
		public PlayerDeathController PlayerDeathController
		{
			[Token(Token = "0x6001961")]
			[Address(RVA = "0x9A9AE4", Offset = "0x9A9AE4", VA = "0x9A9AE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001962")]
			[Address(RVA = "0x9B9104", Offset = "0x9B9104", VA = "0x9B9104")]
			private set
			{
			}
		}

		[Token(Token = "0x170002EE")]
		public override PlayerModelFadingController PlayerModelFadingController
		{
			[Token(Token = "0x6001963")]
			[Address(RVA = "0x9B910C", Offset = "0x9B910C", VA = "0x9B910C", Slot = "28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EF")]
		public override int PlayerId
		{
			[Token(Token = "0x6001964")]
			[Address(RVA = "0x9B9114", Offset = "0x9B9114", VA = "0x9B9114", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001965")]
			[Address(RVA = "0x9B911C", Offset = "0x9B911C", VA = "0x9B911C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170002F0")]
		public override float Score
		{
			[Token(Token = "0x6001966")]
			[Address(RVA = "0x9B91C8", Offset = "0x9B91C8", VA = "0x9B91C8", Slot = "10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001967")]
			[Address(RVA = "0x9B91D0", Offset = "0x9B91D0", VA = "0x9B91D0", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x170002F1")]
		public override int Deaths
		{
			[Token(Token = "0x6001968")]
			[Address(RVA = "0x9B91EC", Offset = "0x9B91EC", VA = "0x9B91EC", Slot = "14")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001969")]
			[Address(RVA = "0x9B91F4", Offset = "0x9B91F4", VA = "0x9B91F4", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x170002F2")]
		public override int Hits
		{
			[Token(Token = "0x600196A")]
			[Address(RVA = "0x9B9254", Offset = "0x9B9254", VA = "0x9B9254", Slot = "12")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600196B")]
			[Address(RVA = "0x9B925C", Offset = "0x9B925C", VA = "0x9B925C", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x170002F3")]
		public override int OrderOfLastHit
		{
			[Token(Token = "0x600196C")]
			[Address(RVA = "0x9B9358", Offset = "0x9B9358", VA = "0x9B9358", Slot = "20")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600196D")]
			[Address(RVA = "0x9B9360", Offset = "0x9B9360", VA = "0x9B9360", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		public override bool IsPlayerDead
		{
			[Token(Token = "0x600196E")]
			[Address(RVA = "0x9B936C", Offset = "0x9B936C", VA = "0x9B936C", Slot = "22")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F5")]
		public override string Name
		{
			[Token(Token = "0x600196F")]
			[Address(RVA = "0x9B938C", Offset = "0x9B938C", VA = "0x9B938C", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001970")]
			[Address(RVA = "0x9B9394", Offset = "0x9B9394", VA = "0x9B9394", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170002F6")]
		public override TeleportPlatformHolder TeleportPlatformHolder
		{
			[Token(Token = "0x6001971")]
			[Address(RVA = "0x9B93F0", Offset = "0x9B93F0", VA = "0x9B93F0", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F7")]
		public override Transform PlayerRig
		{
			[Token(Token = "0x6001972")]
			[Address(RVA = "0x9B93F8", Offset = "0x9B93F8", VA = "0x9B93F8", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000021")]
		public override event Action OnLocalPlayerKillsNumberChange
		{
			[Token(Token = "0x600194F")]
			[Address(RVA = "0x9B8C90", Offset = "0x9B8C90", VA = "0x9B8C90", Slot = "29")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001950")]
			[Address(RVA = "0x9B8D2C", Offset = "0x9B8D2C", VA = "0x9B8D2C", Slot = "30")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public override event Action OnLocalPlayerDeathsNumberChange
		{
			[Token(Token = "0x6001951")]
			[Address(RVA = "0x9B8DC8", Offset = "0x9B8DC8", VA = "0x9B8DC8", Slot = "31")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001952")]
			[Address(RVA = "0x9B8E64", Offset = "0x9B8E64", VA = "0x9B8E64", Slot = "32")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000023")]
		public static event Action<PlayerControllerCore> OnPlayerIdSet
		{
			[Token(Token = "0x6001953")]
			[Address(RVA = "0x9B8F00", Offset = "0x9B8F00", VA = "0x9B8F00")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001954")]
			[Address(RVA = "0x9B8FCC", Offset = "0x9B8FCC", VA = "0x9B8FCC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000024")]
		public static event Action<PlayerController> OnResetScale
		{
			[Token(Token = "0x6001955")]
			[Address(RVA = "0x9A9F1C", Offset = "0x9A9F1C", VA = "0x9A9F1C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001956")]
			[Address(RVA = "0x9AA068", Offset = "0x9AA068", VA = "0x9AA068")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x9B9400", Offset = "0x9B9400", VA = "0x9B9400")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x9B955C", Offset = "0x9B955C", VA = "0x9B955C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x9B9654", Offset = "0x9B9654", VA = "0x9B9654")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x9B9B38", Offset = "0x9B9B38", VA = "0x9B9B38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x9B9FD8", Offset = "0x9B9FD8", VA = "0x9B9FD8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x9B4F34", Offset = "0x9B4F34", VA = "0x9B4F34")]
		public int GetPhotonID()
		{
			return default(int);
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0x9BA0A0", Offset = "0x9BA0A0", VA = "0x9BA0A0")]
		public GameObject GetPlayerCameraObject()
		{
			return null;
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0x9BA0C8", Offset = "0x9BA0C8", VA = "0x9BA0C8")]
		public void InitializeWithoutPlayer()
		{
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0x9BA128", Offset = "0x9BA128", VA = "0x9BA128")]
		public void InitializeWithPlayer()
		{
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0x9B896C", Offset = "0x9B896C", VA = "0x9B896C")]
		public void ActivateControllers()
		{
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0x9B89D4", Offset = "0x9B89D4", VA = "0x9B89D4")]
		public void ActivatePlayableHands()
		{
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0x9BA0F8", Offset = "0x9BA0F8", VA = "0x9BA0F8")]
		private void SetPlayerNameTextVisibility(bool shouldBeVisible)
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0x9BA408", Offset = "0x9BA408", VA = "0x9BA408")]
		private void RespawnPlayer()
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x9BA444", Offset = "0x9BA444", VA = "0x9BA444")]
		private void SetPlayableHandsOnDeathEnd()
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x9BA488", Offset = "0x9BA488", VA = "0x9BA488")]
		private void SetPlayableHandsOnPauseClosed()
		{
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0x9B93BC", Offset = "0x9B93BC", VA = "0x9B93BC")]
		private void UpdatePlayerNameFloatingText()
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0x9BA4B8", Offset = "0x9BA4B8", VA = "0x9BA4B8")]
		private void SetGameOver()
		{
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0x9BA4C4", Offset = "0x9BA4C4", VA = "0x9BA4C4")]
		private void RestartGame()
		{
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0x9BA4C8", Offset = "0x9BA4C8", VA = "0x9BA4C8")]
		private void PreparePlayerObjectDisposal()
		{
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0x9BA4F8", Offset = "0x9BA4F8", VA = "0x9BA4F8")]
		private void DisposeOffPlayer()
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0x9BA580", Offset = "0x9BA580", VA = "0x9BA580")]
		public void ResetScale()
		{
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0x9BA5EC", Offset = "0x9BA5EC", VA = "0x9BA5EC")]
		public void SetReferences(PlayerDeathController _playerDeathController)
		{
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0x9BA5F4", Offset = "0x9BA5F4", VA = "0x9BA5F4", Slot = "33")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0x9BAB44", Offset = "0x9BAB44", VA = "0x9BAB44")]
		public PlayerController()
		{
		}
	}
	[Token(Token = "0x2000467")]
	public class PlayerInitializer : MonoBehaviourPun, IResetable
	{
		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject rain;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool isDeathMatch;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private PlayerController playerController;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TeleportPlatformHolder teleportPlatformHolder;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameOverStats gameOverStats;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private PlayerNameTextEnabler playerNameTextEnabler;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private PlatformTypeContainer platformTypeContainer;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private HandsDominanceSwitcher handsDominanceSwitcher;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private HandsController rightHandedHandsController;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private HandsController leftHandedHandsController;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private SteamVR_LaserPointer steamVR_LaserPointerRightHand;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private SteamVR_LaserPointer steamVR_LaserPointerLeftHand;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private CameraEnabler cameraEnabler;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private VoiceChatPlayerController voiceChatController;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private List<HVRHandAnimator> handAnimators;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private List<HVRGrabberBase> handGrabbers;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private PlayerDeathController playerDeathController;

		[Token(Token = "0x14000025")]
		public static event Action<PlayerInitializer> OnPlayerInitialize
		{
			[Token(Token = "0x600198B")]
			[Address(RVA = "0x9BAB54", Offset = "0x9BAB54", VA = "0x9BAB54")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600198C")]
			[Address(RVA = "0x9BAC44", Offset = "0x9BAC44", VA = "0x9BAC44")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0x9BAD34", Offset = "0x9BAD34", VA = "0x9BAD34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0x9BAF88", Offset = "0x9BAF88", VA = "0x9BAF88")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0x9BAFE0", Offset = "0x9BAFE0", VA = "0x9BAFE0")]
		public void InitializeWithoutPlayer()
		{
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0x9BAD94", Offset = "0x9BAD94", VA = "0x9BAD94")]
		public void InitializeWithPlayer()
		{
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0x9BB1E8", Offset = "0x9BB1E8", VA = "0x9BB1E8")]
		private void InitializeHVRComponents(bool isMine)
		{
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0x9BB110", Offset = "0x9BB110", VA = "0x9BB110")]
		private void InitializeComponentsWithPlayer(bool isLocalPlayer)
		{
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0x9BB3C8", Offset = "0x9BB3C8", VA = "0x9BB3C8")]
		public void SetReferences(PlayerDeathController _playerDeathController)
		{
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0x9BB3D0", Offset = "0x9BB3D0", VA = "0x9BB3D0", Slot = "4")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0x9BB3D4", Offset = "0x9BB3D4", VA = "0x9BB3D4")]
		public PlayerInitializer()
		{
		}
	}
	[Token(Token = "0x2000469")]
	public class PlayerMaterialsColorSetterMobile : PlayerMaterialsColorSetter, IResetable
	{
		[Token(Token = "0x200046A")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x40016F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool shouldBeGhost;

			[Token(Token = "0x40016F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PlayerMaterialsColorSetterMobile <>4__this;

			[Token(Token = "0x60019A5")]
			[Address(RVA = "0x9BBACC", Offset = "0x9BBACC", VA = "0x9BBACC")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x60019A6")]
			[Address(RVA = "0x9BBAD4", Offset = "0x9BBAD4", VA = "0x9BBAD4")]
			internal void <SetIsUsingGhostMaterialsAsync>b__0(Renderer item)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200046B")]
		[CompilerGenerated]
		private struct <SetIsUsingGhostMaterialsAsync>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x40016F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40016F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x40016F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool shouldBeGhost;

			[Token(Token = "0x40016F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PlayerMaterialsColorSetterMobile <>4__this;

			[Token(Token = "0x40016FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass13_0 <>8__1;

			[Token(Token = "0x40016FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x60019A7")]
			[Address(RVA = "0x9BBB14", Offset = "0x9BBB14", VA = "0x9BBB14", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60019A8")]
			[Address(RVA = "0x9BBE44", Offset = "0x9BBE44", VA = "0x9BBE44", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x40016EB")]
		private const int helmetInitializationDelay = 10;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private PlayerController _playerController;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<Renderer> gauntletRenderers;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Material deathMaterial;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MeshRenderer helmet;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material handInitialMaterial;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool wasHelmetInitialized;

		[Token(Token = "0x14000026")]
		public override event Action<bool> OnMaterialsChanged
		{
			[Token(Token = "0x600199C")]
			[Address(RVA = "0x9BB584", Offset = "0x9BB584", VA = "0x9BB584", Slot = "4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600199D")]
			[Address(RVA = "0x9BB634", Offset = "0x9BB634", VA = "0x9BB634", Slot = "5")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public override event Action OnMaterialsInitialized
		{
			[Token(Token = "0x600199E")]
			[Address(RVA = "0x9BB6E4", Offset = "0x9BB6E4", VA = "0x9BB6E4", Slot = "6")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600199F")]
			[Address(RVA = "0x9BB780", Offset = "0x9BB780", VA = "0x9BB780", Slot = "7")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0x9BB81C", Offset = "0x9BB81C", VA = "0x9BB81C", Slot = "8")]
		[AsyncStateMachine(typeof(<SetIsUsingGhostMaterialsAsync>d__13))]
		public override void SetIsUsingGhostMaterialsAsync(bool shouldBeGhost)
		{
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0x9BB8E0", Offset = "0x9BB8E0", VA = "0x9BB8E0", Slot = "9")]
		public override void InitializeMaterials()
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0x9BBA98", Offset = "0x9BBA98", VA = "0x9BBA98", Slot = "10")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0x9BBAA0", Offset = "0x9BBAA0", VA = "0x9BBAA0")]
		public PlayerMaterialsColorSetterMobile()
		{
		}
	}
	[Token(Token = "0x200046C")]
	public class PlayerMaterialsColorSetterPC : PlayerMaterialsColorSetter, IResetable
	{
		[Token(Token = "0x200046D")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass14_0
		{
			[Token(Token = "0x4001705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PlayerMaterialsColorSetterPC <>4__this;

			[Token(Token = "0x4001706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool shouldBeGhost;

			[Token(Token = "0x60019B5")]
			[Address(RVA = "0x9BC464", Offset = "0x9BC464", VA = "0x9BC464")]
			public <>c__DisplayClass14_0()
			{
			}

			[Token(Token = "0x60019B6")]
			[Address(RVA = "0x9BC46C", Offset = "0x9BC46C", VA = "0x9BC46C")]
			internal void <SetIsUsingGhostMaterialsAsync>b__0(Renderer item)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200046E")]
		[CompilerGenerated]
		private struct <SetIsUsingGhostMaterialsAsync>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x4001707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PlayerMaterialsColorSetterPC <>4__this;

			[Token(Token = "0x400170A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool shouldBeGhost;

			[Token(Token = "0x400170B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass14_0 <>8__1;

			[Token(Token = "0x400170C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x60019B7")]
			[Address(RVA = "0x9BC4AC", Offset = "0x9BC4AC", VA = "0x9BC4AC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60019B8")]
			[Address(RVA = "0x9BC7EC", Offset = "0x9BC7EC", VA = "0x9BC7EC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x40016FC")]
		private const int helmetInitializationDelay = 10;

		[Token(Token = "0x40016FD")]
		private const string nomalMapKey = "_BumpMap";

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private PlayerController playerController;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<Renderer> gauntletRenderers;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Material gauntletGhostMaterial;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material gauntletInitMaterial;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool areMaterialsInitialized;

		[Token(Token = "0x14000028")]
		public override event Action<bool> OnMaterialsChanged
		{
			[Token(Token = "0x60019A9")]
			[Address(RVA = "0x9BBE50", Offset = "0x9BBE50", VA = "0x9BBE50", Slot = "4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60019AA")]
			[Address(RVA = "0x9BBF00", Offset = "0x9BBF00", VA = "0x9BBF00", Slot = "5")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public override event Action OnMaterialsInitialized
		{
			[Token(Token = "0x60019AB")]
			[Address(RVA = "0x9BBFB0", Offset = "0x9BBFB0", VA = "0x9BBFB0", Slot = "6")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60019AC")]
			[Address(RVA = "0x9BC04C", Offset = "0x9BC04C", VA = "0x9BC04C", Slot = "7")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0x9BC0E8", Offset = "0x9BC0E8", VA = "0x9BC0E8", Slot = "9")]
		public override void InitializeMaterials()
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0x9BC338", Offset = "0x9BC338", VA = "0x9BC338", Slot = "8")]
		[AsyncStateMachine(typeof(<SetIsUsingGhostMaterialsAsync>d__14))]
		public override void SetIsUsingGhostMaterialsAsync(bool shouldBeGhost)
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0x9BC2A4", Offset = "0x9BC2A4", VA = "0x9BC2A4")]
		private void SetGhostMaterialNormals()
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0x9BC3F8", Offset = "0x9BC3F8", VA = "0x9BC3F8")]
		private void SetGauntletGhostMaterial(Renderer renderer, Material material)
		{
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0x9BC414", Offset = "0x9BC414", VA = "0x9BC414")]
		private void SetMultipleGauntletMaterials(Renderer render, Material[] materials)
		{
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0x9BC430", Offset = "0x9BC430", VA = "0x9BC430", Slot = "10")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0x9BC438", Offset = "0x9BC438", VA = "0x9BC438")]
		public PlayerMaterialsColorSetterPC()
		{
		}
	}
	[Token(Token = "0x200046F")]
	public class PoserActivator : MonoBehaviour
	{
		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HVRItemToHandsSetter hvrItemToHandsSetter;

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0x9BC7F8", Offset = "0x9BC7F8", VA = "0x9BC7F8")]
		public void EnableAnimation(string animatorParameter)
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0x9BC814", Offset = "0x9BC814", VA = "0x9BC814")]
		public void DisableAnimation(string animatorParameter)
		{
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0x9BC830", Offset = "0x9BC830", VA = "0x9BC830")]
		public void TogglePoserActivator(bool enabled)
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0x9BC85C", Offset = "0x9BC85C", VA = "0x9BC85C")]
		public PoserActivator()
		{
		}
	}
	[Token(Token = "0x2000470")]
	public class PlayerReferenceSetter : MonoBehaviour, ISettable
	{
		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Components")]
		private PlayerDeathControllerNetwork playerDeathControllerNetwork;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DeathIndicatorEffectController deathIndicatorEffectController;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PlayerInitializer playerInitializer;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private PlayerController playerController;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private PlayerColorSetter playerCollorSetter;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<BowToPlatformAdjuster> bowAdjusters;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private PlayerModelFadingController playerModelFadingController;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private WeaponSwitchController weaponSwitchController;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Mobile")]
		[SerializeField]
		private PlayerReferences playerReferencesMobile;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("PC")]
		[SerializeField]
		private PlayerReferences playerReferencesPC;

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0x9BC864", Offset = "0x9BC864", VA = "0x9BC864", Slot = "4")]
		public void SetReferences()
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0x9BC928", Offset = "0x9BC928", VA = "0x9BC928")]
		private void SetReferences(PlayerReferences playerReferences)
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x9BCAF0", Offset = "0x9BCAF0", VA = "0x9BCAF0")]
		public PlayerReferenceSetter()
		{
		}
	}
	[Token(Token = "0x2000472")]
	public class KillNotificationSoundController : MonoBehaviourPun
	{
		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource killNotifiactionSource;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioSource beingKilledNotificationSource;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentSoundPitch;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float initialSoundPitch;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float maxSoundPitch;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int killingStreakCount;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float pitchKillingStreakGain;

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0x9BCB88", Offset = "0x9BCB88", VA = "0x9BCB88")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0x9BCC04", Offset = "0x9BCC04", VA = "0x9BCC04")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0x9BCC80", Offset = "0x9BCC80", VA = "0x9BCC80")]
		public void SetKillNotificationSound(PlayerControllerCore victim, PlayerControllerCore killer)
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0x9BCE08", Offset = "0x9BCE08", VA = "0x9BCE08")]
		[PunRPC]
		public void RpcResetKillNotificationSound()
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x9BCE2C", Offset = "0x9BCE2C", VA = "0x9BCE2C")]
		[PunRPC]
		public void RpcPlayKillNotifiactionSound()
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x9BCE90", Offset = "0x9BCE90", VA = "0x9BCE90")]
		public KillNotificationSoundController()
		{
		}
	}
	[Token(Token = "0x2000473")]
	[RequireComponent(typeof(AudioSource))]
	public class SoundEffectPlayer : MonoBehaviourPun
	{
		[Token(Token = "0x2000474")]
		[CompilerGenerated]
		private sealed class <DestroyAfterPlay>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4001728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SoundEffectPlayer <>4__this;

			[Token(Token = "0x170002F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019D5")]
				[Address(RVA = "0x9BD44C", Offset = "0x9BD44C", VA = "0x9BD44C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019D7")]
				[Address(RVA = "0x9BD494", Offset = "0x9BD494", VA = "0x9BD494", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019D2")]
			[Address(RVA = "0x9BD2FC", Offset = "0x9BD2FC", VA = "0x9BD2FC")]
			[DebuggerHidden]
			public <DestroyAfterPlay>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60019D3")]
			[Address(RVA = "0x9BD338", Offset = "0x9BD338", VA = "0x9BD338", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019D4")]
			[Address(RVA = "0x9BD33C", Offset = "0x9BD33C", VA = "0x9BD33C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019D6")]
			[Address(RVA = "0x9BD454", Offset = "0x9BD454", VA = "0x9BD454", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001721")]
		private const float basePitch = 1f;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<AudioClip> hitClips;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float pitchOffset;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource audioSource;

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0x9BCEBC", Offset = "0x9BCEBC", VA = "0x9BCEBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x9BCF14", Offset = "0x9BCF14", VA = "0x9BCF14")]
		public void PlaySound()
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0x9BCFDC", Offset = "0x9BCFDC", VA = "0x9BCFDC")]
		public void PlaySoundForPlayer(int playerID)
		{
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0x9BD0F4", Offset = "0x9BD0F4", VA = "0x9BD0F4")]
		public void PlaySoundLocal()
		{
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0x9BD0F8", Offset = "0x9BD0F8", VA = "0x9BD0F8")]
		[PunRPC]
		private void PlaySoundRpc()
		{
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0x9BD210", Offset = "0x9BD210", VA = "0x9BD210")]
		[PunRPC]
		private void PlaySoundForPlayerRpc(int playerID)
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0x9BD11C", Offset = "0x9BD11C", VA = "0x9BD11C")]
		private void InitializeSound()
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0x9BD278", Offset = "0x9BD278", VA = "0x9BD278")]
		[IteratorStateMachine(typeof(<DestroyAfterPlay>d__11))]
		private IEnumerator DestroyAfterPlay(float delay)
		{
			return null;
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0x9BD324", Offset = "0x9BD324", VA = "0x9BD324")]
		public SoundEffectPlayer()
		{
		}
	}
	[Token(Token = "0x2000475")]
	public class TournamentLeaderboardController : MonoBehaviourPun, IInRoomCallbacks
	{
		[Token(Token = "0x4001729")]
		private const int asciiIndexOfALetter = 65;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string id;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int nextId;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<TournamentPlayer> allEnrolledPlayers;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<TournamentPlayer> qualifiedPlayers;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<TournamentPlayer> unqualifiedPlayers;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TournamentLeaderboardGUIController finalLeaderboardGUI;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TournamentProgressController progressController;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private TournamentInfoWindowController tournamentInfoWindowController;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int playerCountThatQualifiesForNextRound;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int semiFinalId;

		[Token(Token = "0x170002FA")]
		public string Id
		{
			[Token(Token = "0x60019D8")]
			[Address(RVA = "0x9BD49C", Offset = "0x9BD49C", VA = "0x9BD49C")]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public List<TournamentPlayer> AllPlayersSorted
		{
			[Token(Token = "0x60019D9")]
			[Address(RVA = "0x9BD6B4", Offset = "0x9BD6B4", VA = "0x9BD6B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0x9BD84C", Offset = "0x9BD84C", VA = "0x9BD84C")]
		private static int GetNewId()
		{
			return default(int);
		}

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0x9BD8AC", Offset = "0x9BD8AC", VA = "0x9BD8AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0x9BDC10", Offset = "0x9BDC10", VA = "0x9BDC10")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0x9BDC68", Offset = "0x9BDC68", VA = "0x9BDC68")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0x9BDCC0", Offset = "0x9BDCC0", VA = "0x9BDCC0")]
		public static void ResetID()
		{
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0x9BDD3C", Offset = "0x9BDD3C", VA = "0x9BDD3C")]
		[PunRPC]
		public void RPCAddNewPlayer(Player newPlayer, string playerID)
		{
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0x9BEF5C", Offset = "0x9BEF5C", VA = "0x9BEF5C")]
		internal void UnqualifyPlayersNotReturnedfromLastRound()
		{
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0x9BD9F8", Offset = "0x9BD9F8", VA = "0x9BD9F8")]
		public static string GetPlayerID()
		{
			return null;
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0x9BE4E0", Offset = "0x9BE4E0", VA = "0x9BE4E0")]
		private void SynchronizeLeaderboardsWithOtherPlayers()
		{
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0x9BE008", Offset = "0x9BE008", VA = "0x9BE008")]
		public void AddQualifiedPlayer(TournamentPlayer player)
		{
		}

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0x9BF09C", Offset = "0x9BF09C", VA = "0x9BF09C")]
		public void AddUnqualifiedPlayer(TournamentPlayer player)
		{
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0x9BF07C", Offset = "0x9BF07C", VA = "0x9BF07C")]
		private void ChangePlayerInfoPanelColor(string id, bool qualified)
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0x9BF2FC", Offset = "0x9BF2FC", VA = "0x9BF2FC")]
		public void AddMatchResult(List<TournamentPlayerResult> playerResultsFromMatch)
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0x9BF828", Offset = "0x9BF828", VA = "0x9BF828")]
		[PunRPC]
		private void RpcShowLeaderboard(string[] playersNames, int[] playersHits, int[] playersDeaths, int[] playersOrdersOfHits, int[] stagesThatPlayersGotTo, bool[] playersIsQualifieds, bool[] playersIsFinals, string[] playersIds, int[] playersTotalHits, int[] playersTotalDeaths)
		{
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0x9BD764", Offset = "0x9BD764", VA = "0x9BD764")]
		private void SortTournamentPlayerLists()
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0x9BFE2C", Offset = "0x9BFE2C", VA = "0x9BFE2C")]
		private int CompareTournamentPlayers(TournamentPlayer playerOne, TournamentPlayer playerTwo)
		{
			return default(int);
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0x9BFF10", Offset = "0x9BFF10", VA = "0x9BFF10", Slot = "4")]
		public void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0x9BFF7C", Offset = "0x9BFF7C", VA = "0x9BFF7C", Slot = "5")]
		public void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0x9C039C", Offset = "0x9C039C", VA = "0x9C039C", Slot = "6")]
		public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0x9C03A0", Offset = "0x9C03A0", VA = "0x9C03A0", Slot = "7")]
		public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0x9C03A4", Offset = "0x9C03A4", VA = "0x9C03A4", Slot = "8")]
		public void OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0x9C03A8", Offset = "0x9C03A8", VA = "0x9C03A8")]
		public TournamentLeaderboardController()
		{
		}
	}
	[Token(Token = "0x200047C")]
	public class WeaponWheelInitializer : MonoBehaviourPun
	{
		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<WeaponSlotSO> weaponSlots;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject weaponSlotPrefab;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private RectTransform slotSpawnParent;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float startOffsetRotation;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[Range(1f, 0f)]
		private float weaponIconInSlotOffset;

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0x9C1930", Offset = "0x9C1930", VA = "0x9C1930")]
		public void InitializeWeaponWheel()
		{
		}

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0x9C1C90", Offset = "0x9C1C90", VA = "0x9C1C90")]
		public WeaponWheelInitializer()
		{
		}
	}
	[Token(Token = "0x200047D")]
	public class WeaponWheelMenuPositionAdjuster : MonoBehaviour
	{
		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform weaponWheelMenuAttachmentPoint;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private HandsType weaponType;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Vector3 weaponWheelScale;

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0x9C1C98", Offset = "0x9C1C98", VA = "0x9C1C98")]
		public void AdjustWeaponwheelMenuPosition(Transform weaponWheelMenuTransform, HandsType _weaponType)
		{
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0x9C1D7C", Offset = "0x9C1D7C", VA = "0x9C1D7C")]
		public WeaponWheelMenuPositionAdjuster()
		{
		}
	}
	[Token(Token = "0x200047E")]
	public class WeaponWheelSlot : MonoBehaviour
	{
		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform slotRectTransform;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Image backgroundImageOutline;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image weaponImage;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WeaponSlotSO weaponSlotSO;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float slotAreaStartAngle;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float slotAreaEndAngle;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float radius;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float iconOffset;

		[Token(Token = "0x170002FC")]
		public WeaponSlotSO WeaponSlotSO
		{
			[Token(Token = "0x6001A11")]
			[Address(RVA = "0x9C1D98", Offset = "0x9C1D98", VA = "0x9C1D98")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A12")]
			[Address(RVA = "0x9C1DA0", Offset = "0x9C1DA0", VA = "0x9C1DA0")]
			set
			{
			}
		}

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0x9C1BD0", Offset = "0x9C1BD0", VA = "0x9C1BD0")]
		public void InitializeWeaponWheelSlot(WeaponSlotSO weaponSlot, float fillAmount, float _slotAreaStartAngle, float _slotAreaEndAngle, float _iconOffset)
		{
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0x9C1DA8", Offset = "0x9C1DA8", VA = "0x9C1DA8")]
		private void AdjustWeaponSlotBackground(Image image, float fillAmount)
		{
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0x9C1E24", Offset = "0x9C1E24", VA = "0x9C1E24")]
		private void AdjustWeaponIconPosition()
		{
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0x9C1F80", Offset = "0x9C1F80", VA = "0x9C1F80")]
		public bool IsSlotChoosen(float angleInput)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0x9C1FDC", Offset = "0x9C1FDC", VA = "0x9C1FDC")]
		public void ToggleSlotVisuals(bool enabled)
		{
		}

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0x9C200C", Offset = "0x9C200C", VA = "0x9C200C")]
		public WeaponWheelSlot()
		{
		}
	}
	[Token(Token = "0x200047F")]
	public class SettingsWindowPP : MonoBehaviour
	{
		[Token(Token = "0x6001A19")]
		[Address(RVA = "0x9C2014", Offset = "0x9C2014", VA = "0x9C2014")]
		public void ResetHeight()
		{
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0x9C2098", Offset = "0x9C2098", VA = "0x9C2098")]
		public SettingsWindowPP()
		{
		}
	}
	[Token(Token = "0x2000480")]
	public class TournamentMasterQuitController : MonoBehaviourPun, IInRoomCallbacks
	{
		[Token(Token = "0x2000482")]
		[CompilerGenerated]
		private sealed class <TryToClearBrokenMasterExitCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400175E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400175F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001760")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TournamentMasterQuitController <>4__this;

			[Token(Token = "0x170002FD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A2B")]
				[Address(RVA = "0x9C2AE4", Offset = "0x9C2AE4", VA = "0x9C2AE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A2D")]
				[Address(RVA = "0x9C2B2C", Offset = "0x9C2B2C", VA = "0x9C2B2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A28")]
			[Address(RVA = "0x9C21C4", Offset = "0x9C21C4", VA = "0x9C21C4")]
			[DebuggerHidden]
			public <TryToClearBrokenMasterExitCoroutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001A29")]
			[Address(RVA = "0x9C272C", Offset = "0x9C272C", VA = "0x9C272C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A2A")]
			[Address(RVA = "0x9C2730", Offset = "0x9C2730", VA = "0x9C2730", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A2C")]
			[Address(RVA = "0x9C2AEC", Offset = "0x9C2AEC", VA = "0x9C2AEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001758")]
		private const int wrongPlayersCount = 2;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PlayersManager playersManager;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float retryTime;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool hasTriedMoreThanOnce;

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0x9C20A0", Offset = "0x9C20A0", VA = "0x9C20A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0x9C20F8", Offset = "0x9C20F8", VA = "0x9C20F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0x9C2150", Offset = "0x9C2150", VA = "0x9C2150")]
		[IteratorStateMachine(typeof(<TryToClearBrokenMasterExitCoroutine>d__6))]
		private IEnumerator TryToClearBrokenMasterExitCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0x9C21EC", Offset = "0x9C21EC", VA = "0x9C21EC")]
		private PlayerController TryToGetRepeatedPlayerWithNegativeIndex()
		{
			return null;
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0x9C2450", Offset = "0x9C2450", VA = "0x9C2450", Slot = "8")]
		public void OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0x9C24F8", Offset = "0x9C24F8", VA = "0x9C24F8", Slot = "4")]
		public void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0x9C24FC", Offset = "0x9C24FC", VA = "0x9C24FC", Slot = "5")]
		public void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0x9C25A4", Offset = "0x9C25A4", VA = "0x9C25A4", Slot = "6")]
		public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0x9C25A8", Offset = "0x9C25A8", VA = "0x9C25A8", Slot = "7")]
		public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0x9C25AC", Offset = "0x9C25AC", VA = "0x9C25AC")]
		public TournamentMasterQuitController()
		{
		}
	}
	[Token(Token = "0x2000485")]
	public class TrailRendererEnabler : MonoBehaviourPun, IResetable
	{
		[Token(Token = "0x2000486")]
		[CompilerGenerated]
		private sealed class <DisableRendererAfterTimeDeathMatchKill>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001768")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001769")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400176A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x400176B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrailRendererEnabler <>4__this;

			[Token(Token = "0x170002FF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A41")]
				[Address(RVA = "0x9C34A0", Offset = "0x9C34A0", VA = "0x9C34A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000300")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A43")]
				[Address(RVA = "0x9C34E8", Offset = "0x9C34E8", VA = "0x9C34E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A3E")]
			[Address(RVA = "0x9C31F4", Offset = "0x9C31F4", VA = "0x9C31F4")]
			[DebuggerHidden]
			public <DisableRendererAfterTimeDeathMatchKill>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0x9C33D8", Offset = "0x9C33D8", VA = "0x9C33D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A40")]
			[Address(RVA = "0x9C33DC", Offset = "0x9C33DC", VA = "0x9C33DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A42")]
			[Address(RVA = "0x9C34A8", Offset = "0x9C34A8", VA = "0x9C34A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TrailColorSetter trailColorSetter;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ArrowFlyController _arrowFlyController;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TrailRenderer trailOnArrow;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool shouldBeDisabledOnCollision;

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0x9C2DD0", Offset = "0x9C2DD0", VA = "0x9C2DD0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0x9C2EA8", Offset = "0x9C2EA8", VA = "0x9C2EA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0x9C2FD4", Offset = "0x9C2FD4", VA = "0x9C2FD4")]
		public void InitializeTrail()
		{
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0x9C310C", Offset = "0x9C310C", VA = "0x9C310C")]
		public void EnableRendererOnKill()
		{
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0x9C3170", Offset = "0x9C3170", VA = "0x9C3170")]
		[IteratorStateMachine(typeof(<DisableRendererAfterTimeDeathMatchKill>d__8))]
		public IEnumerator DisableRendererAfterTimeDeathMatchKill(float time)
		{
			return null;
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0x9C321C", Offset = "0x9C321C", VA = "0x9C321C")]
		public void TurnOffTrailRenderer()
		{
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0x9C3230", Offset = "0x9C3230", VA = "0x9C3230")]
		public void EnableTrailRenderer(bool isEnabled)
		{
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0x9C3284", Offset = "0x9C3284", VA = "0x9C3284")]
		public void SetTrail()
		{
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0x9C32A4", Offset = "0x9C32A4", VA = "0x9C32A4", Slot = "4")]
		public void ResetElement()
		{
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0x9C332C", Offset = "0x9C332C", VA = "0x9C332C")]
		private void SetTrailColorForPlayer(PlayerControllerCore playerController)
		{
		}

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0x9C33C8", Offset = "0x9C33C8", VA = "0x9C33C8")]
		public TrailRendererEnabler()
		{
		}
	}
}
namespace Exploder
{
	[Token(Token = "0x2000487")]
	public class Example : MonoBehaviour
	{
		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExploderObject Exploder;

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0x9C34F0", Offset = "0x9C34F0", VA = "0x9C34F0")]
		public void ExplodeObject(GameObject obj)
		{
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0x9C358C", Offset = "0x9C358C", VA = "0x9C358C")]
		private void OnExplosion(float time, ExploderObject.ExplosionState state)
		{
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0x9C3590", Offset = "0x9C3590", VA = "0x9C3590")]
		private void CrackAndExplodeObject(GameObject obj)
		{
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0x9C362C", Offset = "0x9C362C", VA = "0x9C362C")]
		private void OnCracked(float time, ExploderObject.ExplosionState state)
		{
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0x9C36B8", Offset = "0x9C36B8", VA = "0x9C36B8")]
		public Example()
		{
		}
	}
	[Token(Token = "0x2000488")]
	public class Array<T>
	{
		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] array;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int size;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int index;

		[Token(Token = "0x17000301")]
		public int Count
		{
			[Token(Token = "0x6001A4B")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000302")]
		public T this[int key]
		{
			[Token(Token = "0x6001A4C")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6001A49")]
		public Array(int size)
		{
		}

		[Token(Token = "0x6001A4A")]
		public void Initialize(int newSize)
		{
		}

		[Token(Token = "0x6001A4D")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001A4E")]
		public void Add(T data)
		{
		}

		[Token(Token = "0x6001A4F")]
		public void Reverse()
		{
		}
	}
	[Token(Token = "0x2000489")]
	internal class ArrayDictionary<T>
	{
		[Token(Token = "0x200048A")]
		private struct DicItem
		{
			[Token(Token = "0x4001773")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T data;

			[Token(Token = "0x4001774")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool valid;
		}

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Count;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Size;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly DicItem[] dictionary;

		[Token(Token = "0x17000303")]
		public T this[int key]
		{
			[Token(Token = "0x6001A52")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001A53")]
			set
			{
			}
		}

		[Token(Token = "0x6001A50")]
		public ArrayDictionary(int size)
		{
		}

		[Token(Token = "0x6001A51")]
		public bool ContainsKey(int key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A54")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001A55")]
		public void Add(int key, T data)
		{
		}

		[Token(Token = "0x6001A56")]
		public void Remove(int key)
		{
		}

		[Token(Token = "0x6001A57")]
		public T[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6001A58")]
		public bool TryGetValue(int key, out T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A59")]
		public T GetFirstValue()
		{
			return (T)null;
		}
	}
	[Token(Token = "0x200048B")]
	public class Contour
	{
		[Token(Token = "0x200048C")]
		private struct MidPoint
		{
			[Token(Token = "0x4001779")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int id;

			[Token(Token = "0x400177A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int vertexId;

			[Token(Token = "0x400177B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int idNext;

			[Token(Token = "0x400177C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int idPrev;
		}

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Dictionary<int, int>> contour;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ArrayDictionary<MidPoint> midPoints;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LSHash lsHash;

		[Token(Token = "0x17000304")]
		public int MidPointsCount
		{
			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0x9C3B78", Offset = "0x9C3B78", VA = "0x9C3B78")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0x9C3B80", Offset = "0x9C3B80", VA = "0x9C3B80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0x9C36C0", Offset = "0x9C36C0", VA = "0x9C36C0")]
		public Contour(int trianglesNum)
		{
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0x9C36EC", Offset = "0x9C36EC", VA = "0x9C36EC")]
		public void AllocateBuffers(int trianglesNum)
		{
		}

		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0x9C3B88", Offset = "0x9C3B88", VA = "0x9C3B88")]
		public void AddTriangle(int triangleID, int id0, int id1, Vector3 v0, Vector3 v1)
		{
		}

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0x9C3E50", Offset = "0x9C3E50", VA = "0x9C3E50")]
		public bool FindContours()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200048D")]
	internal class Core : Singleton<Core>
	{
		[NonSerialized]
		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExploderParams parameters;

		[NonSerialized]
		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExploderQueue queue;

		[NonSerialized]
		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Stopwatch explosionWatch;

		[NonSerialized]
		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Stopwatch frameWatch;

		[NonSerialized]
		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HashSet<MeshObject> meshSet;

		[NonSerialized]
		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dictionary<int, int> targetFragments;

		[NonSerialized]
		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MeshObject> postList;

		[NonSerialized]
		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Fragment> pool;

		[NonSerialized]
		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSource audioSource;

		[NonSerialized]
		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CrackManager crackManager;

		[NonSerialized]
		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int processingFrames;

		[NonSerialized]
		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int poolIdx;

		[NonSerialized]
		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool splitMeshIslands;

		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ExploderTask[] tasks;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private TaskType currTaskType;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool initialized;

		[Token(Token = "0x6001A60")]
		[Address(RVA = "0x9C41CC", Offset = "0x9C41CC", VA = "0x9C41CC")]
		public void Initialize(ExploderObject exploder)
		{
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0x9C5164", Offset = "0x9C5164", VA = "0x9C5164")]
		public void Enqueue(ExploderObject exploderObject, ExploderObject.OnExplosion callback, GameObject obj, bool crack)
		{
		}

		[Token(Token = "0x6001A62")]
		[Address(RVA = "0x9C5258", Offset = "0x9C5258", VA = "0x9C5258")]
		public void Enqueue(ExploderObject exploderObject, ExploderObject.OnExplosion callback, GameObject obj, Vector3 shotDir, Vector3 hitPosition, float bulletSize)
		{
		}

		[Token(Token = "0x6001A63")]
		[Address(RVA = "0x9C525C", Offset = "0x9C525C", VA = "0x9C525C")]
		public void ExplodeCracked(GameObject obj, ExploderObject.OnExplosion callback)
		{
		}

		[Token(Token = "0x6001A64")]
		[Address(RVA = "0x9C5668", Offset = "0x9C5668", VA = "0x9C5668")]
		public void StartExplosionFromQueue(ExploderParams p)
		{
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0x9C5940", Offset = "0x9C5940", VA = "0x9C5940")]
		public void Update()
		{
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0x9C5A24", Offset = "0x9C5A24", VA = "0x9C5A24", Slot = "4")]
		public override void OnDestroy()
		{
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0x9C5014", Offset = "0x9C5014", VA = "0x9C5014")]
		private void PreAllocateBuffers()
		{
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0x9C57B4", Offset = "0x9C57B4", VA = "0x9C57B4")]
		private bool RunTask(TaskType taskType, float budget = 0f)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A69")]
		[Address(RVA = "0x9C5778", Offset = "0x9C5778", VA = "0x9C5778")]
		private void InitTask(TaskType taskType)
		{
		}

		[Token(Token = "0x6001A6A")]
		[Address(RVA = "0x9C57F0", Offset = "0x9C57F0", VA = "0x9C57F0")]
		private TaskType NextTask(TaskType taskType)
		{
			return default(TaskType);
		}

		[Token(Token = "0x6001A6B")]
		[Address(RVA = "0x9C5AC4", Offset = "0x9C5AC4", VA = "0x9C5AC4")]
		public Core()
		{
		}
	}
	[Token(Token = "0x200048E")]
	internal class CrackedObject
	{
		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Fragment> pool;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Stopwatch watch;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Quaternion initRot;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Vector3 initPos;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameObject originalObject;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ExploderParams parameters;

		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0x9C5B0C", Offset = "0x9C5B0C", VA = "0x9C5B0C")]
		public CrackedObject(GameObject originalObject, ExploderParams parameters)
		{
		}

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0x9C5BF4", Offset = "0x9C5BF4", VA = "0x9C5BF4")]
		public long Explode()
		{
			return default(long);
		}
	}
	[Token(Token = "0x200048F")]
	internal class CrackManager
	{
		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<GameObject, CrackedObject> crackedObjects;

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0x9C4970", Offset = "0x9C4970", VA = "0x9C4970")]
		public CrackManager(Core core)
		{
		}

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0x9C6104", Offset = "0x9C6104", VA = "0x9C6104")]
		public CrackedObject Create(GameObject originalObject, ExploderParams parameters)
		{
			return null;
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0x9C5320", Offset = "0x9C5320", VA = "0x9C5320")]
		public long Explode(GameObject gameObject)
		{
			return default(long);
		}

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0x9C54C8", Offset = "0x9C54C8", VA = "0x9C54C8")]
		public long ExplodeAll()
		{
			return default(long);
		}
	}
	[Token(Token = "0x2000490")]
	internal class CuttingPlane
	{
		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly System.Random random;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Plane plane;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Core core;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3[] rectAxis;

		[Token(Token = "0x6001A72")]
		[Address(RVA = "0x9C61A4", Offset = "0x9C61A4", VA = "0x9C61A4")]
		public CuttingPlane(Core core)
		{
		}

		[Token(Token = "0x6001A73")]
		[Address(RVA = "0x9C6370", Offset = "0x9C6370", VA = "0x9C6370")]
		private Plane GetRandomPlane(ExploderMesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6001A74")]
		[Address(RVA = "0x9C6534", Offset = "0x9C6534", VA = "0x9C6534")]
		private Plane GetRectangularPlane(ExploderMesh mesh, int attempt)
		{
			return null;
		}

		[Token(Token = "0x6001A75")]
		[Address(RVA = "0x9C66E4", Offset = "0x9C66E4", VA = "0x9C66E4")]
		public Plane GetPlane(ExploderMesh mesh, int attempt)
		{
			return null;
		}
	}
	[Token(Token = "0x2000491")]
	internal class ExploderParams
	{
		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 ForceVector;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 CubeRadius;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 HitPosition;

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 ShotDir;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 AdditionalForceVector;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Force;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float FrameBudget;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float Radius;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float DeactivateTimeout;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float BulletSize;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int id;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int TargetFragments;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int FragmentPoolSize;

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public DeactivateOptions DeactivateOptions;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public ExploderObject.ThreadOptions ThreadOptions;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FadeoutOptions FadeoutOptions;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ExploderObject.OnExplosion Callback;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ExploderObject.FragmentOption FragmentOptions;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ExploderObject.SFXOption SFXOptions;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ExploderObject.CuttingStyleOption CuttingStyle;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject Target;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject ExploderGameObject;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject FragmentPrefab;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool UseCubeRadius;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool DontUseTag;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public bool UseForceVector;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
		public bool MeshColliders;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool ExplodeSelf;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		public bool HideSelf;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC6")]
		public bool DestroyOriginalObject;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC7")]
		public bool ExplodeFragments;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool SplitMeshIslands;

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool Use2DCollision;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		public bool DisableRadiusScan;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCB")]
		public bool UniformFragmentDistribution;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool DisableTriangulation;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		public bool PartialExplosion;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		public bool Crack;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
		public bool processing;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool ShouldUseAdditionalForce;

		[Token(Token = "0x6001A77")]
		[Address(RVA = "0x9C47D8", Offset = "0x9C47D8", VA = "0x9C47D8")]
		public ExploderParams(ExploderObject exploder)
		{
		}
	}
	[Token(Token = "0x2000492")]
	internal class ExploderQueue
	{
		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Queue<ExploderParams> queue;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Core core;

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0x9C49F8", Offset = "0x9C49F8", VA = "0x9C49F8")]
		public ExploderQueue(Core core)
		{
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0x9C5180", Offset = "0x9C5180", VA = "0x9C5180")]
		public void Enqueue(ExploderObject exploderObject, ExploderObject.OnExplosion callback, GameObject target, bool crack)
		{
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0x9C6888", Offset = "0x9C6888", VA = "0x9C6888")]
		public void EnqueuePartialExplosion(ExploderObject exploderObject, ExploderObject.OnExplosion callback, GameObject target, Vector3 shotDir, Vector3 hitPosition, float bulletSize)
		{
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0x9C67D8", Offset = "0x9C67D8", VA = "0x9C67D8")]
		private void ProcessQueue()
		{
		}

		[Token(Token = "0x6001A7C")]
		[Address(RVA = "0x9C58B4", Offset = "0x9C58B4", VA = "0x9C58B4")]
		public void OnExplosionFinished(int id, long ellapsedMS)
		{
		}
	}
	[Token(Token = "0x2000493")]
	public struct ExploderTransform
	{
		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion rotation;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 localScale;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform parent;

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0x9C69A8", Offset = "0x9C69A8", VA = "0x9C69A8")]
		public ExploderTransform(Transform unityTransform)
		{
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0x9C6A20", Offset = "0x9C6A20", VA = "0x9C6A20")]
		public Vector3 InverseTransformDirection(Vector3 dir)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0x9C6A6C", Offset = "0x9C6A6C", VA = "0x9C6A6C")]
		public Vector3 InverseTransformPoint(Vector3 pnt)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0x9C6AF0", Offset = "0x9C6AF0", VA = "0x9C6AF0")]
		public Vector3 TransformPoint(Vector3 pnt)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000494")]
	public class LSHash
	{
		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Vector3[] buckets;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float bucketSize2;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int count;

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0x9C3A40", Offset = "0x9C3A40", VA = "0x9C3A40")]
		public LSHash(float bucketSize, int allocSize)
		{
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0x9C3A24", Offset = "0x9C3A24", VA = "0x9C3A24")]
		public int Capacity()
		{
			return default(int);
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0x9C3ACC", Offset = "0x9C3ACC", VA = "0x9C3ACC")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0x9C6B8C", Offset = "0x9C6B8C", VA = "0x9C6B8C")]
		public int Hash(Vector3 p)
		{
			return default(int);
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0x9C3DC0", Offset = "0x9C3DC0", VA = "0x9C3DC0")]
		public void Hash(Vector3 p0, Vector3 p1, out int hash0, out int hash1)
		{
		}
	}
	[Token(Token = "0x2000495")]
	public class ExploderMesh
	{
		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int[] triangles;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] vertices;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] normals;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2[] uv;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector4[] tangents;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color32[] colors32;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 centroid;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int minX;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int maxX;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int minY;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int maxY;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int minZ;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int maxZ;

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0x9C6C54", Offset = "0x9C6C54", VA = "0x9C6C54")]
		public ExploderMesh()
		{
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0x9C6C5C", Offset = "0x9C6C5C", VA = "0x9C6C5C")]
		public ExploderMesh(Mesh unityMesh)
		{
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0x9C6D34", Offset = "0x9C6D34", VA = "0x9C6D34")]
		public void CalculateCentroid()
		{
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0x9C6F00", Offset = "0x9C6F00", VA = "0x9C6F00")]
		public Mesh ToUnityMesh()
		{
			return null;
		}
	}
	[Token(Token = "0x2000496")]
	public class MeshCutter
	{
		[Token(Token = "0x2000497")]
		private struct Triangle
		{
			[Token(Token = "0x40017E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int[] ids;

			[Token(Token = "0x40017E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3[] pos;

			[Token(Token = "0x40017EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] normal;

			[Token(Token = "0x40017EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector2[] uvs;

			[Token(Token = "0x40017EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector4[] tangents;

			[Token(Token = "0x40017ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color32[] colors;
		}

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<int>[] triangles;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Vector3>[] vertices;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Vector3>[] normals;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Vector2>[] uvs;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Vector4>[] tangents;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Color32>[] vertexColors;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<int> cutTris;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] triCache;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3[] centroid;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int[] triCounter;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Array<int> polygonIndicesArray;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Contour contour;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<long, int>[] cutVertCache;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<int, int>[] cornerVertCache;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int contourBufferSize;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Color crossSectionVertexColour;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector4 crossSectionUV;

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0x9C6FC0", Offset = "0x9C6FC0", VA = "0x9C6FC0")]
		public void Init(int trianglesNum, int verticesNum)
		{
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0x9C6FF8", Offset = "0x9C6FF8", VA = "0x9C6FF8")]
		private void AllocateBuffers(int trianglesNum, int verticesNum, bool useMeshTangents, bool useVertexColors)
		{
		}

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0x9C7B3C", Offset = "0x9C7B3C", VA = "0x9C7B3C")]
		private void AllocateContours(int cutTrianglesNum)
		{
		}

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0x9C8028", Offset = "0x9C8028", VA = "0x9C8028")]
		public float Cut(ExploderMesh mesh, ExploderTransform meshTransform, Plane plane, bool triangulateHoles, bool allowOpenMesh, ref List<ExploderMesh> meshes, Color crossSectionVertexColor, Vector4 crossUV)
		{
			return default(float);
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0x9C8044", Offset = "0x9C8044", VA = "0x9C8044")]
		private float Cut(ExploderMesh mesh, ExploderTransform meshTransform, Plane plane, bool triangulateHoles, bool allowOpenMesh, ref List<ExploderMesh> meshes)
		{
			return default(float);
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0x9CE828", Offset = "0x9CE828", VA = "0x9CE828")]
		private int AddIntersectionPoint(Vector3 pos, Triangle tri, int edge0, int edge1, Dictionary<long, int> cache, List<Vector3> vertices, List<Vector3> normals, List<Vector2> uvs, List<Vector4> tangents, List<Color32> colors32, bool useTangents, bool useColors, bool useNormals)
		{
			return default(int);
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0x9CED38", Offset = "0x9CED38", VA = "0x9CED38")]
		private int AddTrianglePoint(Vector3 pos, Vector3 normal, Vector2 uv, Vector4 tangent, Color32 color, int idx, int[] triCache, Dictionary<int, int> cache, List<Vector3> vertices, List<Vector3> normals, List<Vector2> uvs, List<Vector4> tangents, List<Color32> colors, bool useTangents, bool useColors, bool useNormals)
		{
			return default(int);
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0x9CF0E8", Offset = "0x9CF0E8", VA = "0x9CF0E8")]
		private void Triangulate(List<Dictionary<int, int>> contours, Plane plane, List<Vector3>[] vertices, List<Vector3>[] normals, List<Vector2>[] uvs, List<Vector4>[] tangents, List<Color32>[] colors, List<int>[] triangles, bool uvCutMesh, bool useTangents, bool useColors, bool useNormals)
		{
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0x9D1DB0", Offset = "0x9D1DB0", VA = "0x9D1DB0")]
		public MeshCutter()
		{
		}
	}
	[Token(Token = "0x2000498")]
	internal struct MeshObject
	{
		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ExploderMesh mesh;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Material material;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ExploderTransform transform;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform parent;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 position;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Quaternion rotation;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 localScale;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject original;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ExploderOption option;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject skinnedOriginal;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject bakeObject;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float distanceRatio;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int id;
	}
	[Token(Token = "0x2000499")]
	public static class MeshUtils
	{
		[Token(Token = "0x6001A93")]
		[Address(RVA = "0x9D0C40", Offset = "0x9D0C40", VA = "0x9D0C40")]
		public static Vector3 ComputeBarycentricCoordinates(Vector3 a, Vector3 b, Vector3 c, Vector3 p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A94")]
		public static void Swap<T>(ref T a, ref T b)
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0x9D1DB8", Offset = "0x9D1DB8", VA = "0x9D1DB8")]
		public static void CenterPivot(Vector3[] vertices, Vector3 centroid)
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0x9D1E18", Offset = "0x9D1E18", VA = "0x9D1E18")]
		public static List<ExploderMesh> IsolateMeshIslands(ExploderMesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0x9D3628", Offset = "0x9D3628", VA = "0x9D3628")]
		public static void GeneratePolygonCollider(PolygonCollider2D collider, Mesh mesh)
		{
		}
	}
	[Token(Token = "0x200049A")]
	public class Plane
	{
		[Token(Token = "0x200049B")]
		[Flags]
		public enum PointClass
		{
			[Token(Token = "0x4001800")]
			Coplanar = 0,
			[Token(Token = "0x4001801")]
			Front = 1,
			[Token(Token = "0x4001802")]
			Back = 2,
			[Token(Token = "0x4001803")]
			Intersection = 3
		}

		[Token(Token = "0x40017FB")]
		private const float epsylon = 0.0001f;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Normal;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Distance;

		[Token(Token = "0x17000305")]
		public Vector3 Pnt
		{
			[Token(Token = "0x6001A98")]
			[Address(RVA = "0x9D376C", Offset = "0x9D376C", VA = "0x9D376C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001A99")]
			[Address(RVA = "0x9D3778", Offset = "0x9D3778", VA = "0x9D3778")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0x9D3784", Offset = "0x9D3784", VA = "0x9D3784")]
		public Plane(Vector3 a, Vector3 b, Vector3 c)
		{
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0x9C630C", Offset = "0x9C630C", VA = "0x9C630C")]
		public Plane(Vector3 normal, Vector3 p)
		{
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0x9C6420", Offset = "0x9C6420", VA = "0x9C6420")]
		public void Set(Vector3 normal, Vector3 p)
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0x9D3908", Offset = "0x9D3908", VA = "0x9D3908")]
		public Plane(Plane instance)
		{
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0x9D395C", Offset = "0x9D395C", VA = "0x9D395C")]
		public PointClass ClassifyPoint(Vector3 p)
		{
			return default(PointClass);
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0x9CE6F4", Offset = "0x9CE6F4", VA = "0x9CE6F4")]
		public bool GetSide(Vector3 n)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0x9D39AC", Offset = "0x9D39AC", VA = "0x9D39AC")]
		public void Flip()
		{
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0x9CE628", Offset = "0x9CE628", VA = "0x9CE628")]
		public bool GetSideFix(ref Vector3 n)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0x9D39D4", Offset = "0x9D39D4", VA = "0x9D39D4")]
		public bool SameSide(Vector3 a, Vector3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0x9CE72C", Offset = "0x9CE72C", VA = "0x9CE72C")]
		public bool IntersectSegment(Vector3 a, Vector3 b, out float t, ref Vector3 q)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0x9D3A14", Offset = "0x9D3A14", VA = "0x9D3A14")]
		public void InverseTransform(ExploderTransform transform)
		{
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0x9D0D14", Offset = "0x9D0D14", VA = "0x9D0D14")]
		public Matrix4x4 GetPlaneMatrix()
		{
			return default(Matrix4x4);
		}
	}
	[Token(Token = "0x200049C")]
	public class Polygon
	{
		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2[] Points;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float Area;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 Min;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 Max;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<Polygon> holes;

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0x9D0E04", Offset = "0x9D0E04", VA = "0x9D0E04")]
		public Polygon(Vector2[] pnts)
		{
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0x9D3A90", Offset = "0x9D3A90", VA = "0x9D3A90")]
		public float GetArea()
		{
			return default(float);
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0x9D0EB4", Offset = "0x9D0EB4", VA = "0x9D0EB4")]
		public bool IsPointInside(Vector3 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0x9D3B78", Offset = "0x9D3B78", VA = "0x9D3B78")]
		public bool IsPolygonInside(Polygon polygon)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0x9D0FD8", Offset = "0x9D0FD8", VA = "0x9D0FD8")]
		public void AddHole(Polygon polygon)
		{
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0x9D1088", Offset = "0x9D1088", VA = "0x9D1088")]
		public bool Triangulate(Array<int> indicesArray)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0x9D3BC4", Offset = "0x9D3BC4", VA = "0x9D3BC4")]
		private bool Snip(int u, int v, int w, int n, int[] V)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0x9D3DA8", Offset = "0x9D3DA8", VA = "0x9D3DA8")]
		private bool InsideTriangle(Vector2 A, Vector2 B, Vector2 C, Vector2 P)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200049D")]
	internal class CutterMT : CutterST
	{
		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected readonly int THREAD_MAX;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected readonly CutterWorker[] workers;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly int[] splitIDs;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly Stopwatch localWatch;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool cutInitialized;

		[Token(Token = "0x17000306")]
		public override TaskType Type
		{
			[Token(Token = "0x6001AAF")]
			[Address(RVA = "0x9D408C", Offset = "0x9D408C", VA = "0x9D408C", Slot = "4")]
			get
			{
				return default(TaskType);
			}
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0x9C4C00", Offset = "0x9C4C00", VA = "0x9C4C00")]
		public CutterMT(Core Core)
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0x9D4094", Offset = "0x9D4094", VA = "0x9D4094", Slot = "6")]
		public override void Init()
		{
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0x9D41D8", Offset = "0x9D41D8", VA = "0x9D41D8", Slot = "5")]
		public override void OnDestroy()
		{
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0x9D4264", Offset = "0x9D4264", VA = "0x9D4264", Slot = "7")]
		public override bool Run(float frameBudget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0x9D43C0", Offset = "0x9D43C0", VA = "0x9D43C0", Slot = "8")]
		protected override bool Cut(float frameBudget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0x9D5034", Offset = "0x9D5034", VA = "0x9D5034")]
		private int[] SplitMeshTargetFragments(int id)
		{
			return null;
		}
	}
	[Token(Token = "0x200049E")]
	internal class CutterST : ExploderTask
	{
		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly HashSet<MeshObject> newFragments;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected readonly HashSet<MeshObject> meshToRemove;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected readonly MeshCutter cutter;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected readonly CuttingPlane cuttingPlane;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cutAttempt;

		[Token(Token = "0x17000307")]
		public override TaskType Type
		{
			[Token(Token = "0x6001AB6")]
			[Address(RVA = "0x9D52CC", Offset = "0x9D52CC", VA = "0x9D52CC", Slot = "4")]
			get
			{
				return default(TaskType);
			}
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0x9C4A9C", Offset = "0x9C4A9C", VA = "0x9C4A9C")]
		public CutterST(Core Core)
		{
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0x9D4108", Offset = "0x9D4108", VA = "0x9D4108", Slot = "6")]
		public override void Init()
		{
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0x9D5304", Offset = "0x9D5304", VA = "0x9D5304", Slot = "7")]
		public override bool Run(float frameBudget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0x9D5344", Offset = "0x9D5344", VA = "0x9D5344", Slot = "8")]
		protected virtual bool Cut(float frameBudget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0x9D4EEC", Offset = "0x9D4EEC", VA = "0x9D4EEC")]
		protected List<ExploderMesh> CutSingleMesh(MeshObject mesh)
		{
			return null;
		}
	}
	[Token(Token = "0x200049F")]
	internal class CutterWorker
	{
		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly HashSet<MeshObject> newFragments;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly HashSet<MeshObject> meshToRemove;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly HashSet<MeshObject> meshSet;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MeshCutter cutter;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CuttingPlane cuttingPlane;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Core core;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool running;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int cutAttempt;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ManualResetEvent mre;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Thread thread;

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0x9D3E24", Offset = "0x9D3E24", VA = "0x9D3E24")]
		public CutterWorker(Core core, CuttingPlane cuttingPlane)
		{
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0x9D4178", Offset = "0x9D4178", VA = "0x9D4178")]
		public void Init()
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0x9D5180", Offset = "0x9D5180", VA = "0x9D5180")]
		public void AddMesh(MeshObject meshObject)
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0x9D5214", Offset = "0x9D5214", VA = "0x9D5214")]
		public void Run()
		{
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0x9D5C18", Offset = "0x9D5C18", VA = "0x9D5C18")]
		private void ThreadRun()
		{
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0x9D43A4", Offset = "0x9D43A4", VA = "0x9D43A4")]
		public bool IsFinished()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0x9D65CC", Offset = "0x9D65CC", VA = "0x9D65CC")]
		public HashSet<MeshObject> GetResults()
		{
			return null;
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0x9D4244", Offset = "0x9D4244", VA = "0x9D4244")]
		public void Terminate()
		{
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0x9D5CDC", Offset = "0x9D5CDC", VA = "0x9D5CDC")]
		private void Cut()
		{
		}
	}
	[Token(Token = "0x20004A0")]
	public enum TaskType
	{
		[Token(Token = "0x400181E")]
		None,
		[Token(Token = "0x400181F")]
		Preprocess,
		[Token(Token = "0x4001820")]
		ProcessCutter,
		[Token(Token = "0x4001821")]
		PartialSeparator,
		[Token(Token = "0x4001822")]
		IsolateMeshIslands,
		[Token(Token = "0x4001823")]
		PostprocessExplode,
		[Token(Token = "0x4001824")]
		PostprocessCrack,
		[Token(Token = "0x4001825")]
		TaskMax
	}
	[Token(Token = "0x20004A1")]
	internal abstract class ExploderTask
	{
		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Core core;

		[Token(Token = "0x17000308")]
		public abstract TaskType Type
		{
			[Token(Token = "0x6001AC4")]
			get;
		}

		[Token(Token = "0x17000309")]
		public Stopwatch Watch
		{
			[Token(Token = "0x6001AC5")]
			[Address(RVA = "0x9D65D4", Offset = "0x9D65D4", VA = "0x9D65D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AC6")]
			[Address(RVA = "0x9D65DC", Offset = "0x9D65DC", VA = "0x9D65DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0x9D5240", Offset = "0x9D5240", VA = "0x9D5240")]
		protected ExploderTask(Core Core)
		{
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0x9D65E4", Offset = "0x9D65E4", VA = "0x9D65E4", Slot = "5")]
		public virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0x9D52D4", Offset = "0x9D52D4", VA = "0x9D52D4", Slot = "6")]
		public virtual void Init()
		{
		}

		[Token(Token = "0x6001ACA")]
		public abstract bool Run(float frameBudget);
	}
	[Token(Token = "0x20004A2")]
	internal class IsolateMeshIslands : ExploderTask
	{
		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<MeshObject> islands;

		[Token(Token = "0x1700030A")]
		public override TaskType Type
		{
			[Token(Token = "0x6001ACC")]
			[Address(RVA = "0x9D65E8", Offset = "0x9D65E8", VA = "0x9D65E8", Slot = "4")]
			get
			{
				return default(TaskType);
			}
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0x9C4ED4", Offset = "0x9C4ED4", VA = "0x9C4ED4")]
		public IsolateMeshIslands(Core Core)
		{
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0x9D65F0", Offset = "0x9D65F0", VA = "0x9D65F0", Slot = "6")]
		public override void Init()
		{
		}

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0x9D66C0", Offset = "0x9D66C0", VA = "0x9D66C0", Slot = "7")]
		public override bool Run(float frameBudget)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004A3")]
	internal class PartialSeparator : ExploderTask
	{
		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MeshCutter cutter;

		[Token(Token = "0x1700030B")]
		public override TaskType Type
		{
			[Token(Token = "0x6001AD0")]
			[Address(RVA = "0x9D6D78", Offset = "0x9D6D78", VA = "0x9D6D78", Slot = "4")]
			get
			{
				return default(TaskType);
			}
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0x9C4F68", Offset = "0x9C4F68", VA = "0x9C4F68")]
		public PartialSeparator(Core Core)
		{
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0x9D6D80", Offset = "0x9D6D80", VA = "0x9D6D80", Slot = "6")]
		public override void Init()
		{
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0x9D6D84", Offset = "0x9D6D84", VA = "0x9D6D84", Slot = "7")]
		public override bool Run(float frameBudget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0x9D6DB0", Offset = "0x9D6DB0", VA = "0x9D6DB0")]
		private void Separate()
		{
		}
	}
	[Token(Token = "0x20004A4")]
	internal abstract class Postprocess : ExploderTask
	{
		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0x9D828C", Offset = "0x9D828C", VA = "0x9D828C")]
		protected Postprocess(Core Core)
		{
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0x9D8294", Offset = "0x9D8294", VA = "0x9D8294", Slot = "6")]
		public override void Init()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	internal class PostprocessCrack : Postprocess
	{
		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CrackedObject crackedObject;

		[Token(Token = "0x1700030C")]
		public override TaskType Type
		{
			[Token(Token = "0x6001AD7")]
			[Address(RVA = "0x9D83D0", Offset = "0x9D83D0", VA = "0x9D83D0", Slot = "4")]
			get
			{
				return default(TaskType);
			}
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0x9D83C8", Offset = "0x9D83C8", VA = "0x9D83C8")]
		public PostprocessCrack(Core Core)
		{
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0x9D83D8", Offset = "0x9D83D8", VA = "0x9D83D8", Slot = "6")]
		public override void Init()
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0x9D8C84", Offset = "0x9D8C84", VA = "0x9D8C84", Slot = "7")]
		public override bool Run(float frameBudget)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004A6")]
	internal class PostprocessExplode : Postprocess
	{
		[Token(Token = "0x1700030D")]
		public override TaskType Type
		{
			[Token(Token = "0x6001ADB")]
			[Address(RVA = "0x9D9A64", Offset = "0x9D9A64", VA = "0x9D9A64", Slot = "4")]
			get
			{
				return default(TaskType);
			}
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0x9D9A5C", Offset = "0x9D9A5C", VA = "0x9D9A5C")]
		public PostprocessExplode(Core Core)
		{
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0x9D9A6C", Offset = "0x9D9A6C", VA = "0x9D9A6C", Slot = "6")]
		public override void Init()
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0x9DA5BC", Offset = "0x9DA5BC", VA = "0x9DA5BC", Slot = "7")]
		public override bool Run(float frameBudget)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004A7")]
	internal class Preprocess : ExploderTask
	{
		[Token(Token = "0x20004A8")]
		private struct MeshData
		{
			[Token(Token = "0x400182B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Mesh sharedMesh;

			[Token(Token = "0x400182C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Material sharedMaterial;

			[Token(Token = "0x400182D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject gameObject;

			[Token(Token = "0x400182E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject parentObject;

			[Token(Token = "0x400182F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject skinnedBakeOriginal;

			[Token(Token = "0x4001830")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 centroid;
		}

		[Token(Token = "0x1700030E")]
		public override TaskType Type
		{
			[Token(Token = "0x6001ADF")]
			[Address(RVA = "0x9DB2CC", Offset = "0x9DB2CC", VA = "0x9DB2CC", Slot = "4")]
			get
			{
				return default(TaskType);
			}
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0x9DB22C", Offset = "0x9DB22C", VA = "0x9DB22C")]
		public Preprocess(Core Core)
		{
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0x9DB2D4", Offset = "0x9DB2D4", VA = "0x9DB2D4", Slot = "6")]
		public override void Init()
		{
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0x9DB338", Offset = "0x9DB338", VA = "0x9DB338", Slot = "7")]
		public override bool Run(float frameBudget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0x9DB680", Offset = "0x9DB680", VA = "0x9DB680")]
		private List<MeshObject> GetMeshList()
		{
			return null;
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0x9DCA28", Offset = "0x9DCA28", VA = "0x9DCA28")]
		private List<MeshData> GetMeshData(GameObject obj)
		{
			return null;
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0x9DD1F8", Offset = "0x9DD1F8", VA = "0x9DD1F8")]
		private float GetDistanceRatio(float distance, float radius)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0x9DC8DC", Offset = "0x9DC8DC", VA = "0x9DC8DC")]
		private bool IsInRadius(GameObject o)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004A9")]
	public class Explodable : MonoBehaviour
	{
		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0x9DD3FC", Offset = "0x9DD3FC", VA = "0x9DD3FC")]
		public Explodable()
		{
		}
	}
	[Token(Token = "0x20004AA")]
	public class ExploderObject : MonoBehaviour
	{
		[Token(Token = "0x20004AB")]
		public enum ThreadOptions
		{
			[Token(Token = "0x4001852")]
			WorkerThread1x,
			[Token(Token = "0x4001853")]
			WorkerThread2x,
			[Token(Token = "0x4001854")]
			WorkerThread3x,
			[Token(Token = "0x4001855")]
			Disabled
		}

		[Token(Token = "0x20004AC")]
		public enum CuttingStyleOption
		{
			[Token(Token = "0x4001857")]
			Random,
			[Token(Token = "0x4001858")]
			Rectangular
		}

		[Serializable]
		[Token(Token = "0x20004AD")]
		public class SFXOption
		{
			[Token(Token = "0x4001859")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioClip ExplosionSoundClip;

			[Token(Token = "0x400185A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AudioClip FragmentSoundClip;

			[Token(Token = "0x400185B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject FragmentEmitter;

			[Token(Token = "0x400185C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float HitSoundTimeout;

			[Token(Token = "0x400185D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int EmitersMax;

			[Token(Token = "0x400185E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float ParticleTimeout;

			[Token(Token = "0x6001AFC")]
			[Address(RVA = "0x9DDB98", Offset = "0x9DDB98", VA = "0x9DDB98")]
			public SFXOption Clone()
			{
				return null;
			}

			[Token(Token = "0x6001AFD")]
			[Address(RVA = "0x9DDB1C", Offset = "0x9DDB1C", VA = "0x9DDB1C")]
			public SFXOption()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004AE")]
		public class FragmentOption
		{
			[Token(Token = "0x400185F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool FreezePositionX;

			[Token(Token = "0x4001860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool FreezePositionY;

			[Token(Token = "0x4001861")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			public bool FreezePositionZ;

			[Token(Token = "0x4001862")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
			public bool FreezeRotationX;

			[Token(Token = "0x4001863")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool FreezeRotationY;

			[Token(Token = "0x4001864")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			public bool FreezeRotationZ;

			[Token(Token = "0x4001865")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string Layer;

			[Token(Token = "0x4001866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float MaxVelocity;

			[Token(Token = "0x4001867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool InheritParentPhysicsProperty;

			[Token(Token = "0x4001868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float Mass;

			[Token(Token = "0x4001869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public bool UseGravity;

			[Token(Token = "0x400186A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
			public bool DisableColliders;

			[Token(Token = "0x400186B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float AngularVelocity;

			[Token(Token = "0x400186C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float MaxAngularVelocity;

			[Token(Token = "0x400186D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 AngularVelocityVector;

			[Token(Token = "0x400186E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool RandomAngularVelocityVector;

			[Token(Token = "0x400186F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Material FragmentMaterial1;

			[Token(Token = "0x6001AFE")]
			[Address(RVA = "0x9DDC38", Offset = "0x9DDC38", VA = "0x9DDC38")]
			public FragmentOption Clone()
			{
				return null;
			}

			[Token(Token = "0x6001AFF")]
			[Address(RVA = "0x9DDB24", Offset = "0x9DDB24", VA = "0x9DDB24")]
			public FragmentOption()
			{
			}
		}

		[Token(Token = "0x20004AF")]
		public delegate void OnExplosion(float timeMS, ExplosionState state);

		[Token(Token = "0x20004B0")]
		public enum ExplosionState
		{
			[Token(Token = "0x4001871")]
			ExplosionStarted,
			[Token(Token = "0x4001872")]
			ExplosionFinished,
			[Token(Token = "0x4001873")]
			ObjectCracked
		}

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string Tag;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool DontUseTag;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Radius;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 CubeRadius;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool UseCubeRadius;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 ForceVector;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 AdditionalForceVector;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool ShouldUseAdditionalForceVector;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool UseForceVector;

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float Force;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float FrameBudget;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int TargetFragments;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ThreadOptions ThreadOption;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public DeactivateOptions DeactivateOptions;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float DeactivateTimeout;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public FadeoutOptions FadeoutOptions;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool MeshColliders;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool ExplodeSelf;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool DisableRadiusScan;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool HideSelf;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool DestroyOriginalObject;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool ExplodeFragments;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		public bool UniformFragmentDistribution;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public bool SplitMeshIslands;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool DisableTriangulation;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int FragmentPoolSize;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject FragmentPrefab;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool Use2DCollision;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public CuttingStyleOption CuttingStyle;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public SFXOption SFXOptions;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FragmentOption FragmentOptions;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Core core;

		[Token(Token = "0x1700030F")]
		public int ProcessingFrames
		{
			[Token(Token = "0x6001AF6")]
			[Address(RVA = "0x9DD610", Offset = "0x9DD610", VA = "0x9DD610")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0x9DD404", Offset = "0x9DD404", VA = "0x9DD404")]
		public void ExplodeRadius()
		{
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0x9DD40C", Offset = "0x9DD40C", VA = "0x9DD40C")]
		public void ExplodeRadius(OnExplosion callback)
		{
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x9DD43C", Offset = "0x9DD43C", VA = "0x9DD43C")]
		public void ExplodeObject(GameObject obj)
		{
		}

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0x9DD444", Offset = "0x9DD444", VA = "0x9DD444")]
		public void ExplodeObject(GameObject obj, OnExplosion callback)
		{
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0x9DD470", Offset = "0x9DD470", VA = "0x9DD470")]
		public void ExplodePartial(GameObject obj, Vector3 shotDir, Vector3 hitPosition, float bulletSize)
		{
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0x9DD478", Offset = "0x9DD478", VA = "0x9DD478")]
		public void ExplodePartial(GameObject obj, Vector3 shotDir, Vector3 hitPosition, float bulletSize, OnExplosion callback)
		{
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0x9DD4A0", Offset = "0x9DD4A0", VA = "0x9DD4A0")]
		public void CrackRadius()
		{
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0x9DD4A8", Offset = "0x9DD4A8", VA = "0x9DD4A8")]
		public void CrackRadius(OnExplosion callback)
		{
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0x9DD4D8", Offset = "0x9DD4D8", VA = "0x9DD4D8")]
		public void CrackObject(GameObject obj)
		{
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0x9DD4E0", Offset = "0x9DD4E0", VA = "0x9DD4E0")]
		public void CrackObject(GameObject obj, OnExplosion callback)
		{
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0x9DD50C", Offset = "0x9DD50C", VA = "0x9DD50C")]
		public bool CanCrack()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0x9DD58C", Offset = "0x9DD58C", VA = "0x9DD58C")]
		public void ExplodeCracked(GameObject obj, OnExplosion callback)
		{
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0x9DD5A8", Offset = "0x9DD5A8", VA = "0x9DD5A8")]
		public void ExplodeCracked(GameObject obj)
		{
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0x9DD5C8", Offset = "0x9DD5C8", VA = "0x9DD5C8")]
		public void ExplodeCracked(OnExplosion callback)
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0x9DD5EC", Offset = "0x9DD5EC", VA = "0x9DD5EC")]
		public void ExplodeCracked()
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0x9DD62C", Offset = "0x9DD62C", VA = "0x9DD62C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0x9DD69C", Offset = "0x9DD69C", VA = "0x9DD69C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x9DD7C8", Offset = "0x9DD7C8", VA = "0x9DD7C8")]
		private bool IsExplodable(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x9DD8B8", Offset = "0x9DD8B8", VA = "0x9DD8B8")]
		public ExploderObject()
		{
		}
	}
	[Token(Token = "0x20004B1")]
	public class ExploderOption : MonoBehaviour
	{
		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Plane2D;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Color CrossSectionVertexColor;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector4 CrossSectionUV;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool SplitMeshIslands;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public bool UseLocalForce;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float Force;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material FragmentMaterial;

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0x9D94F8", Offset = "0x9D94F8", VA = "0x9D94F8")]
		public void DuplicateSettings(ExploderOption options)
		{
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0x9DDEDC", Offset = "0x9DDEDC", VA = "0x9DDEDC")]
		public ExploderOption()
		{
		}
	}
	[Token(Token = "0x20004B2")]
	public enum DeactivateOptions
	{
		[Token(Token = "0x400187C")]
		Never,
		[Token(Token = "0x400187D")]
		OutsideOfCamera,
		[Token(Token = "0x400187E")]
		Timeout
	}
	[Token(Token = "0x20004B3")]
	public enum FadeoutOptions
	{
		[Token(Token = "0x4001880")]
		None,
		[Token(Token = "0x4001881")]
		FadeoutAlpha,
		[Token(Token = "0x4001882")]
		ScaleDown
	}
	[Token(Token = "0x20004B4")]
	public class Fragment : MonoBehaviour
	{
		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool explodable;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool cracked;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public DeactivateOptions deactivateOptions;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float deactivateTimeout;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public FadeoutOptions fadeoutOptions;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxVelocity;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool disableColliders;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float disableCollidersTimeout;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool visible;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool activeObj;

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minSizeToExplode;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MeshFilter meshFilter;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MeshRenderer meshRenderer;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MeshCollider meshCollider;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BoxCollider boxCollider;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Collider generalCollider;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSource audioSource;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioClip audioClip;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem[] particleSystems;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject particleChild;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public PolygonCollider2D polygonCollider2D;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Rigidbody2D rigid2D;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ExploderOption options;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Rigidbody rigidBody;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 originalScale;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float visibilityCheckTimer;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float deactivateTimer;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float emmitersTimeout;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool stopEmitOnTimeout;

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0x9DDF00", Offset = "0x9DDF00", VA = "0x9DDF00")]
		public bool IsSleeping()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0x9DDF8C", Offset = "0x9DDF8C", VA = "0x9DDF8C")]
		public void Sleep()
		{
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0x9DE018", Offset = "0x9DE018", VA = "0x9DE018")]
		public void WakeUp()
		{
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0x9DE0A4", Offset = "0x9DE0A4", VA = "0x9DE0A4")]
		public void SetConstraints(RigidbodyConstraints constraints)
		{
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0x9DE138", Offset = "0x9DE138", VA = "0x9DE138")]
		public void SetSFX(ExploderObject.SFXOption sfx, bool allowParticle)
		{
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0x9DE494", Offset = "0x9DE494", VA = "0x9DE494")]
		private void OnCollisionEnter()
		{
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0x9DE578", Offset = "0x9DE578", VA = "0x9DE578")]
		public void DisableColliders(bool disable, bool meshColliders, bool physics2d)
		{
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0x9D954C", Offset = "0x9D954C", VA = "0x9D954C")]
		public void ApplyExplosion(ExploderTransform meshTransform, Vector3 centroid, Vector3 mainCentroid, ExploderObject.FragmentOption fragmentOption, bool useForceVector, Vector3 ForceVector, float force, GameObject original, int targetFragments, Vector3 additionalForceVector, bool shouldUseAdditionalForce)
		{
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0x9DE790", Offset = "0x9DE790", VA = "0x9DE790")]
		private void ApplyExplosion2D(ExploderTransform meshTransform, Vector3 centroid, Vector3 mainCentroid, ExploderObject.FragmentOption fragmentOption, bool useForceVector, Vector2 ForceVector, float force, GameObject original, int targetFragments)
		{
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0x9DEA98", Offset = "0x9DEA98", VA = "0x9DEA98")]
		public void RefreshComponentsCache()
		{
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x9DB15C", Offset = "0x9DB15C", VA = "0x9DB15C")]
		public void Explode()
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x9DEC90", Offset = "0x9DEC90", VA = "0x9DEC90")]
		public void Emit(bool centerToBound)
		{
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x9DEDEC", Offset = "0x9DEDEC", VA = "0x9DEDEC")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x9D9428", Offset = "0x9D9428", VA = "0x9D9428")]
		public void AssignMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0x9DEF2C", Offset = "0x9DEF2C", VA = "0x9DEF2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0x9DEF4C", Offset = "0x9DEF4C", VA = "0x9DEF4C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x9DF5F0", Offset = "0x9DF5F0", VA = "0x9DF5F0")]
		public Fragment()
		{
		}
	}
	[Token(Token = "0x20004B5")]
	public class FragmentPool : MonoBehaviour
	{
		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FragmentPool instance;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Fragment[] pool;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool meshColliders;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float fragmentSoundTimeout;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float HitSoundTimeout;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int MaxEmitters;

		[Token(Token = "0x17000310")]
		public static FragmentPool Instance
		{
			[Token(Token = "0x6001B17")]
			[Address(RVA = "0x9D85F0", Offset = "0x9D85F0", VA = "0x9D85F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000311")]
		public int PoolSize
		{
			[Token(Token = "0x6001B1A")]
			[Address(RVA = "0x9DF814", Offset = "0x9DF814", VA = "0x9DF814")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000312")]
		public Fragment[] Pool
		{
			[Token(Token = "0x6001B1B")]
			[Address(RVA = "0x9DF830", Offset = "0x9DF830", VA = "0x9DF830")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x9DF610", Offset = "0x9DF610", VA = "0x9DF610")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0x9DF6AC", Offset = "0x9DF6AC", VA = "0x9DF6AC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x9D87DC", Offset = "0x9D87DC", VA = "0x9D87DC")]
		public List<Fragment> GetAvailableFragments(int size)
		{
			return null;
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0x9DD534", Offset = "0x9DD534", VA = "0x9DD534")]
		public int GetAvailableCrackFragmentsCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x9D9C6C", Offset = "0x9D9C6C", VA = "0x9D9C6C")]
		public void Allocate(int poolSize, bool useMeshColliders, bool use2dCollision, GameObject fragmentPrefab)
		{
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0x9D8700", Offset = "0x9D8700", VA = "0x9D8700")]
		public void ResetTransform()
		{
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0x9DF838", Offset = "0x9DF838", VA = "0x9DF838")]
		public void WakeUp()
		{
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x9DF894", Offset = "0x9DF894", VA = "0x9DF894")]
		public void Sleep()
		{
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0x9DF70C", Offset = "0x9DF70C", VA = "0x9DF70C")]
		public void DestroyFragments()
		{
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x9DF8F0", Offset = "0x9DF8F0", VA = "0x9DF8F0")]
		public void DeactivateFragments()
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0x9DA180", Offset = "0x9DA180", VA = "0x9DA180")]
		public void SetDeactivateOptions(DeactivateOptions options, FadeoutOptions fadeoutOptions, float timeout)
		{
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x9DA1D8", Offset = "0x9DA1D8", VA = "0x9DA1D8")]
		public void SetExplodableFragments(bool explodable, bool dontUseTag)
		{
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0x9DA3AC", Offset = "0x9DA3AC", VA = "0x9DA3AC")]
		public void SetFragmentPhysicsOptions(ExploderObject.FragmentOption options, bool physics2d)
		{
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0x9DA540", Offset = "0x9DA540", VA = "0x9DA540")]
		public void SetSFXOptions(ExploderObject.SFXOption sfx)
		{
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x9DF9A8", Offset = "0x9DF9A8", VA = "0x9DF9A8")]
		public List<Fragment> GetActiveFragments()
		{
			return null;
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x9DFB80", Offset = "0x9DFB80", VA = "0x9DFB80")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x9DE56C", Offset = "0x9DE56C", VA = "0x9DE56C")]
		public void OnFragmentHit()
		{
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x9DE55C", Offset = "0x9DE55C", VA = "0x9DE55C")]
		public bool CanPlayHitSound()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0x9DFBAC", Offset = "0x9DFBAC", VA = "0x9DFBAC")]
		public FragmentPool()
		{
		}
	}
	[Token(Token = "0x20004B6")]
	public static class Profiler
	{
		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, Stopwatch> timeSegments;

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x9DFBC0", Offset = "0x9DFBC0", VA = "0x9DFBC0")]
		public static void Start(string key)
		{
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x9DFCFC", Offset = "0x9DFCFC", VA = "0x9DFCFC")]
		public static void End(string key)
		{
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0x9DFD88", Offset = "0x9DFD88", VA = "0x9DFD88")]
		public static string[] PrintResults()
		{
			return null;
		}
	}
	[Token(Token = "0x20004B7")]
	public class ExploderSlowMotion : MonoBehaviour
	{
		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float slowMotionTime;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ExploderObject Exploder;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float slowMotionSpeed;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool slowmo;

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0x9E00E4", Offset = "0x9E00E4", VA = "0x9E00E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B32")]
		[Address(RVA = "0x9E0138", Offset = "0x9E0138", VA = "0x9E0138")]
		public void EnableSlowMotion(bool status)
		{
		}

		[Token(Token = "0x6001B33")]
		[Address(RVA = "0x9E0218", Offset = "0x9E0218", VA = "0x9E0218")]
		public void Update()
		{
		}

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0x9E0280", Offset = "0x9E0280", VA = "0x9E0280")]
		public ExploderSlowMotion()
		{
		}
	}
	[Token(Token = "0x20004B8")]
	public static class ExploderUtils
	{
		[Token(Token = "0x6001B35")]
		[Address(RVA = "0x9E0294", Offset = "0x9E0294", VA = "0x9E0294")]
		[Conditional("UNITY_EDITOR_NO_DEBUG")]
		public static void Assert(bool condition, string message)
		{
		}

		[Token(Token = "0x6001B36")]
		[Address(RVA = "0x9E0338", Offset = "0x9E0338", VA = "0x9E0338")]
		[Conditional("UNITY_EDITOR_NO_DEBUG")]
		public static void Warning(bool condition, string message)
		{
		}

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0x9E03D4", Offset = "0x9E03D4", VA = "0x9E03D4")]
		[Conditional("UNITY_EDITOR_NO_DEBUG")]
		public static void Log(string message)
		{
		}

		[Token(Token = "0x6001B38")]
		[Address(RVA = "0x9DD214", Offset = "0x9DD214", VA = "0x9DD214")]
		public static Vector3 GetCentroid(GameObject obj)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0x9DB078", Offset = "0x9DB078", VA = "0x9DB078")]
		public static void SetVisible(GameObject obj, bool status)
		{
		}

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0x9E042C", Offset = "0x9E042C", VA = "0x9E042C")]
		public static void ClearLog()
		{
		}

		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0x9DFB00", Offset = "0x9DFB00", VA = "0x9DFB00")]
		public static bool IsActive(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0x9E0430", Offset = "0x9E0430", VA = "0x9E0430")]
		public static void SetActive(GameObject obj, bool status)
		{
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0x9D9334", Offset = "0x9D9334", VA = "0x9D9334")]
		public static void SetActiveRecursively(GameObject obj, bool status)
		{
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0x9DAF94", Offset = "0x9DAF94", VA = "0x9DAF94")]
		public static void EnableCollider(GameObject obj, bool status)
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0x9E04C0", Offset = "0x9E04C0", VA = "0x9E04C0")]
		public static bool IsExplodable(GameObject obj)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004B9")]
	public class HUDFPS : MonoBehaviour
	{
		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float updateInterval;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float accum;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int frames;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float timeleft;

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x9E059C", Offset = "0x9E059C", VA = "0x9E059C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x9E0694", Offset = "0x9E0694", VA = "0x9E0694")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0x9E085C", Offset = "0x9E085C", VA = "0x9E085C")]
		public HUDFPS()
		{
		}
	}
	[Token(Token = "0x20004BA")]
	public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
	{
		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T instance;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool isQuitting;

		[Token(Token = "0x17000313")]
		public static T Instance
		{
			[Token(Token = "0x6001B43")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B44")]
		public virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001B45")]
		public Singleton()
		{
		}
	}
}
namespace Exploder.Utils
{
	[Token(Token = "0x20004BB")]
	public static class Compatibility
	{
		[Token(Token = "0x6001B46")]
		[Address(RVA = "0x9E086C", Offset = "0x9E086C", VA = "0x9E086C")]
		public static void SetVisible(GameObject obj, bool status, bool includeInactive)
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0x9E09C0", Offset = "0x9E09C0", VA = "0x9E09C0")]
		public static bool IsActive(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x9E0A40", Offset = "0x9E0A40", VA = "0x9E0A40")]
		public static void SetActive(GameObject obj, bool status)
		{
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x9E0AD0", Offset = "0x9E0AD0", VA = "0x9E0AD0")]
		public static void SetActiveRecursively(GameObject obj, bool status)
		{
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0x9E0BC4", Offset = "0x9E0BC4", VA = "0x9E0BC4")]
		public static void EnableCollider(GameObject obj, bool status)
		{
		}

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0x9E0CA8", Offset = "0x9E0CA8", VA = "0x9E0CA8")]
		public static void Destroy(UnityEngine.Object obj, bool allowDestroyingAssets)
		{
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x9E0D40", Offset = "0x9E0D40", VA = "0x9E0D40")]
		public static void SetCursorVisible(bool status)
		{
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x9E0D4C", Offset = "0x9E0D4C", VA = "0x9E0D4C")]
		public static void LockCursor(bool status)
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x9E0D60", Offset = "0x9E0D60", VA = "0x9E0D60")]
		public static bool IsCursorLocked()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004BC")]
	public class ExploderSingleton : MonoBehaviour
	{
		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ExploderObject ExploderInstance;

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0x9E0D7C", Offset = "0x9E0D7C", VA = "0x9E0D7C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0x9E0E04", Offset = "0x9E0E04", VA = "0x9E0E04")]
		public ExploderSingleton()
		{
		}
	}
	[Token(Token = "0x20004BD")]
	internal class Hull2D
	{
		[Token(Token = "0x6001B51")]
		[Address(RVA = "0x9E0E0C", Offset = "0x9E0E0C", VA = "0x9E0E0C")]
		public static void Sort(Vector2[] array)
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0x9E0F0C", Offset = "0x9E0F0C", VA = "0x9E0F0C")]
		public static void DumpArray(Vector2[] array)
		{
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0x9E0FFC", Offset = "0x9E0FFC", VA = "0x9E0FFC")]
		public static Vector2[] ChainHull2D(Vector2[] Pnts)
		{
			return null;
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0x9E1268", Offset = "0x9E1268", VA = "0x9E1268")]
		private static float Hull2DCross(ref Vector2 O, ref Vector2 A, ref Vector2 B)
		{
			return default(float);
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0x9E1290", Offset = "0x9E1290", VA = "0x9E1290")]
		public Hull2D()
		{
		}
	}
}
namespace Exploder.Examples
{
	[Token(Token = "0x20004BF")]
	public class ExplodeAllObjects : MonoBehaviour
	{
		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ExploderObject Exploder;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject[] DestroyableObjects;

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0x9E1354", Offset = "0x9E1354", VA = "0x9E1354")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0x9E13E0", Offset = "0x9E13E0", VA = "0x9E13E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0x9E145C", Offset = "0x9E145C", VA = "0x9E145C")]
		private void ExplodeObject(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0x9E14D4", Offset = "0x9E14D4", VA = "0x9E14D4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0x9E1578", Offset = "0x9E1578", VA = "0x9E1578")]
		public ExplodeAllObjects()
		{
		}
	}
}
namespace Exploder.Demo
{
	[Token(Token = "0x20004C0")]
	public class CursorLocking : MonoBehaviour
	{
		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool LockCursor;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode LockKey;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyCode UnlockKey;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool IsLocked;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static CursorLocking instance;

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0x9E1580", Offset = "0x9E1580", VA = "0x9E1580")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0x9E15D0", Offset = "0x9E15D0", VA = "0x9E15D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0x9E168C", Offset = "0x9E168C", VA = "0x9E168C")]
		public static void Lock()
		{
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0x9E16FC", Offset = "0x9E16FC", VA = "0x9E16FC")]
		public static void Unlock()
		{
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0x9E1768", Offset = "0x9E1768", VA = "0x9E1768")]
		public CursorLocking()
		{
		}
	}
	[Token(Token = "0x20004C1")]
	public class ExploderMouseLook : MonoBehaviour
	{
		[Token(Token = "0x20004C2")]
		public enum RotationAxes
		{
			[Token(Token = "0x40018C9")]
			MouseXAndY,
			[Token(Token = "0x40018CA")]
			MouseX,
			[Token(Token = "0x40018CB")]
			MouseY
		}

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RotationAxes axes;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float sensitivityX;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sensitivityY;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minimumX;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maximumX;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float minimumY;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maximumY;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float rotationY;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float kickTimeout;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float kickBackRot;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool kickBack;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float rotationTarget;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Camera mainCamera;

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0x9E1770", Offset = "0x9E1770", VA = "0x9E1770")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0x9E1A90", Offset = "0x9E1A90", VA = "0x9E1A90")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0x9E1B4C", Offset = "0x9E1B4C", VA = "0x9E1B4C")]
		public void Kick()
		{
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0x9E1BA0", Offset = "0x9E1BA0", VA = "0x9E1BA0")]
		public ExploderMouseLook()
		{
		}
	}
	[Token(Token = "0x20004C3")]
	public class GrenadeController : MonoBehaviour
	{
		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip Throw;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource Source;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrenadeObject Grenade;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Camera MainCamera;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float explodeTimer;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float throwTimer;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool exploding;

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0x9E1BC0", Offset = "0x9E1BC0", VA = "0x9E1BC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0x9E1BD4", Offset = "0x9E1BD4", VA = "0x9E1BD4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0x9E1F20", Offset = "0x9E1F20", VA = "0x9E1F20")]
		public GrenadeController()
		{
		}
	}
	[Token(Token = "0x20004C4")]
	public class GrenadeObject : MonoBehaviour
	{
		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip ExplosionSound;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource SourceExplosion;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Light Flash;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool ExplodeFinished;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool Impact;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool throwing;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float explodeTimeoutMax;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool explosionInProgress;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ExploderObject exploder;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int flashing;

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0x9E1DF0", Offset = "0x9E1DF0", VA = "0x9E1DF0")]
		public void Throw()
		{
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0x9E1E10", Offset = "0x9E1E10", VA = "0x9E1E10")]
		public void Explode()
		{
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0x9E1F28", Offset = "0x9E1F28", VA = "0x9E1F28")]
		private void OnExplode(float timeMS, ExploderObject.ExplosionState state)
		{
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0x9E207C", Offset = "0x9E207C", VA = "0x9E207C")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0x9E209C", Offset = "0x9E209C", VA = "0x9E209C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0x9E2134", Offset = "0x9E2134", VA = "0x9E2134")]
		public GrenadeObject()
		{
		}
	}
	[Token(Token = "0x20004C5")]
	public class PanelChairBomb : UseObject
	{
		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ExploderObject Exploder;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject ChairBomb;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioSource SourceExplosion;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip ExplosionSound;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Light Flash;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int flashing;

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0x9E213C", Offset = "0x9E213C", VA = "0x9E213C", Slot = "4")]
		public override void Use()
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0x9E2304", Offset = "0x9E2304", VA = "0x9E2304")]
		private void OnExplode(float timeMS, ExploderObject.ExplosionState state)
		{
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0x9E2428", Offset = "0x9E2428", VA = "0x9E2428")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B73")]
		[Address(RVA = "0x9E2478", Offset = "0x9E2478", VA = "0x9E2478")]
		public PanelChairBomb()
		{
		}
	}
	[Token(Token = "0x20004C6")]
	public class PanelResetScene : UseObject
	{
		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<GameObject> objectList;

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0x9E24E4", Offset = "0x9E24E4", VA = "0x9E24E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0x9E2594", Offset = "0x9E2594", VA = "0x9E2594", Slot = "4")]
		public override void Use()
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0x9E26DC", Offset = "0x9E26DC", VA = "0x9E26DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0x9E2710", Offset = "0x9E2710", VA = "0x9E2710")]
		public PanelResetScene()
		{
		}
	}
	[Token(Token = "0x20004C7")]
	public class PanelThrowObject : UseObject
	{
		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject ThrowBox;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject[] ThrowObjects;

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0x9E2714", Offset = "0x9E2714", VA = "0x9E2714")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0x9E2718", Offset = "0x9E2718", VA = "0x9E2718", Slot = "4")]
		public override void Use()
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0x9E2B44", Offset = "0x9E2B44", VA = "0x9E2B44")]
		public PanelThrowObject()
		{
		}
	}
	[Token(Token = "0x20004C8")]
	internal class RobotScript : MonoBehaviour
	{
		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float velocity;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float angle;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 center;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 lastPos;

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0x9E2B48", Offset = "0x9E2B48", VA = "0x9E2B48")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0x9E2B84", Offset = "0x9E2B84", VA = "0x9E2B84")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0x9E2BDC", Offset = "0x9E2BDC", VA = "0x9E2BDC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0x9E2CEC", Offset = "0x9E2CEC", VA = "0x9E2CEC")]
		public RobotScript()
		{
		}
	}
	[Token(Token = "0x20004C9")]
	public class Rocket : MonoBehaviour
	{
		[Token(Token = "0x20004CA")]
		public delegate void OnHit(Vector3 pos);

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip GunShot;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip Explosion;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSource Source;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject RocketStatic;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light RocketLight;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float RocketVelocity;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public OnHit HitCallback;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Ray direction;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool launch;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float launchTimeout;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform parent;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 shotPos;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float targetDistance;

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0x9E2D00", Offset = "0x9E2D00", VA = "0x9E2D00")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0x9E2D54", Offset = "0x9E2D54", VA = "0x9E2D54")]
		public void OnActivate()
		{
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0x9E2DF0", Offset = "0x9E2DF0", VA = "0x9E2DF0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0x9E2E14", Offset = "0x9E2E14", VA = "0x9E2E14")]
		public void Launch(Ray ray)
		{
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0x9E2FBC", Offset = "0x9E2FBC", VA = "0x9E2FBC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0x9E3360", Offset = "0x9E3360", VA = "0x9E3360")]
		public Rocket()
		{
		}
	}
	[Token(Token = "0x20004CB")]
	public class RPGController : MonoBehaviour
	{
		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExploderObject exploder;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExploderMouseLook MouseLookCamera;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rocket Rocket;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float nextShotTimeout;

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0x9E34EC", Offset = "0x9E34EC", VA = "0x9E34EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0x9E3574", Offset = "0x9E3574", VA = "0x9E3574")]
		public void OnActivate()
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0x9E358C", Offset = "0x9E358C", VA = "0x9E358C")]
		private void OnRocketHit(Vector3 position)
		{
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0x9E3628", Offset = "0x9E3628", VA = "0x9E3628")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0x9E3854", Offset = "0x9E3854", VA = "0x9E3854")]
		public RPGController()
		{
		}
	}
	[Token(Token = "0x20004CC")]
	public class ShotgunController : MonoBehaviour
	{
		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip GunShot;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip Reload;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSource Source;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ExploderMouseLook MouseLookCamera;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light Flash;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Animation ReloadAnim;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationClip HideAnim;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject MuzzleFlash;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int flashing;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float reloadTimeout;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float nextShotTimeout;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private TargetType lastTarget;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ExploderObject exploder;

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0x9E385C", Offset = "0x9E385C", VA = "0x9E385C")]
		public void OnActivate()
		{
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0x9E3868", Offset = "0x9E3868", VA = "0x9E3868")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0x9E3CF4", Offset = "0x9E3CF4", VA = "0x9E3CF4")]
		public ShotgunController()
		{
		}
	}
	[Token(Token = "0x20004CD")]
	public enum TargetType
	{
		[Token(Token = "0x400190A")]
		DestroyableObject,
		[Token(Token = "0x400190B")]
		UseObject,
		[Token(Token = "0x400190C")]
		Default,
		[Token(Token = "0x400190D")]
		None
	}
	[Token(Token = "0x20004CE")]
	public class TargetManager : MonoBehaviour
	{
		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TargetManager instance;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject TargetObject;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TargetType TargetType;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 TargetPosition;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image CrosshairGun;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image CrosshairHand;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ExploderMouseLook MouseLookCamera;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Text PanelText;

		[Token(Token = "0x17000314")]
		public static TargetManager Instance
		{
			[Token(Token = "0x6001B91")]
			[Address(RVA = "0x9E3D04", Offset = "0x9E3D04", VA = "0x9E3D04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0x9E3D4C", Offset = "0x9E3D4C", VA = "0x9E3D4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0x9E3DA4", Offset = "0x9E3DA4", VA = "0x9E3DA4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0x9E3DFC", Offset = "0x9E3DFC", VA = "0x9E3DFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0x9E4430", Offset = "0x9E4430", VA = "0x9E4430")]
		private bool IsDestroyableObject(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x9E4520", Offset = "0x9E4520", VA = "0x9E4520")]
		private bool IsUseObject(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x9E4618", Offset = "0x9E4618", VA = "0x9E4618")]
		public TargetManager()
		{
		}
	}
	[Token(Token = "0x20004CF")]
	public class ThrowObject : MonoBehaviour
	{
		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float destroyTimer;

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x9E4710", Offset = "0x9E4710", VA = "0x9E4710")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0x9E471C", Offset = "0x9E471C", VA = "0x9E471C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0x9E47BC", Offset = "0x9E47BC", VA = "0x9E47BC")]
		public ThrowObject()
		{
		}
	}
	[Token(Token = "0x20004D0")]
	public abstract class UseObject : MonoBehaviour
	{
		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float UseRadius;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string HelperText;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip UseClip;

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0x9E222C", Offset = "0x9E222C", VA = "0x9E222C", Slot = "4")]
		public virtual void Use()
		{
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0x9E47C4", Offset = "0x9E47C4", VA = "0x9E47C4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0x9E247C", Offset = "0x9E247C", VA = "0x9E247C")]
		protected UseObject()
		{
		}
	}
	[Token(Token = "0x20004D1")]
	public class WeaponManager : MonoBehaviour
	{
		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Shotgun;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject RPG;

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0x9E4818", Offset = "0x9E4818", VA = "0x9E4818")]
		private void Update()
		{
		}

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0x9E4908", Offset = "0x9E4908", VA = "0x9E4908")]
		public WeaponManager()
		{
		}
	}
	[Token(Token = "0x20004D2")]
	public class DemoClickExplode : MonoBehaviour
	{
		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject[] DestroyableObjects;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ExploderObject Exploder;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Camera Camera;

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0x9E4910", Offset = "0x9E4910", VA = "0x9E4910")]
		private void Start()
		{
		}

		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0x9E4C98", Offset = "0x9E4C98", VA = "0x9E4C98")]
		private bool IsExplodable(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0x9E4D80", Offset = "0x9E4D80", VA = "0x9E4D80")]
		private void Update()
		{
		}

		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0x9E4ECC", Offset = "0x9E4ECC", VA = "0x9E4ECC")]
		private void ExplodeObject(GameObject obj)
		{
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x9E4F64", Offset = "0x9E4F64", VA = "0x9E4F64")]
		private void OnExplosion(float time, ExploderObject.ExplosionState state)
		{
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0x9E4F68", Offset = "0x9E4F68", VA = "0x9E4F68")]
		private void OnCracked(float time, ExploderObject.ExplosionState state)
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0x9E4F60", Offset = "0x9E4F60", VA = "0x9E4F60")]
		private void ExplodeAfterCrack(GameObject obj)
		{
		}

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0x9E4F6C", Offset = "0x9E4F6C", VA = "0x9E4F6C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0x9E5090", Offset = "0x9E5090", VA = "0x9E5090")]
		public DemoClickExplode()
		{
		}
	}
	[Token(Token = "0x20004D4")]
	public class DemoClickPartialExplode : MonoBehaviour
	{
		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ExploderObject Exploder;

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0x9E5180", Offset = "0x9E5180", VA = "0x9E5180")]
		private void Start()
		{
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0x9E51E0", Offset = "0x9E51E0", VA = "0x9E51E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0x9E53F4", Offset = "0x9E53F4", VA = "0x9E53F4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0x9E5494", Offset = "0x9E5494", VA = "0x9E5494")]
		public DemoClickPartialExplode()
		{
		}
	}
	[Token(Token = "0x20004D6")]
	public class DemoSelfExplode : MonoBehaviour
	{
		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera Camera;

		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0x9E5594", Offset = "0x9E5594", VA = "0x9E5594")]
		private void Start()
		{
		}

		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0x9E5624", Offset = "0x9E5624", VA = "0x9E5624")]
		private bool IsExplodable(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0x9E5690", Offset = "0x9E5690", VA = "0x9E5690")]
		private void Update()
		{
		}

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0x9E57D8", Offset = "0x9E57D8", VA = "0x9E57D8")]
		private void ExplodeObject(GameObject obj)
		{
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0x9E58EC", Offset = "0x9E58EC", VA = "0x9E58EC")]
		private void OnExplosion(float time, ExploderObject.ExplosionState state)
		{
		}

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0x9E58F0", Offset = "0x9E58F0", VA = "0x9E58F0")]
		public DemoSelfExplode()
		{
		}
	}
	[Token(Token = "0x20004D7")]
	public class DemoSimple : MonoBehaviour
	{
		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ExploderObject Exploder;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject[] DestroyableObjects;

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0x9E58F8", Offset = "0x9E58F8", VA = "0x9E58F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0x9E5C74", Offset = "0x9E5C74", VA = "0x9E5C74")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0x9E5E5C", Offset = "0x9E5E5C", VA = "0x9E5E5C")]
		public DemoSimple()
		{
		}
	}
}
namespace UnityEditor.PostProcessing
{
	[Token(Token = "0x20004D9")]
	public static class ReflectionUtils
	{
		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<KeyValuePair<object, string>, FieldInfo> s_FieldInfoFromPaths;

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0x9E5F4C", Offset = "0x9E5F4C", VA = "0x9E5F4C")]
		public static FieldInfo GetFieldInfoFromPath(object source, string path)
		{
			return null;
		}

		[Token(Token = "0x6001BC3")]
		public static string GetFieldPath<T, TValue>(Expression<Func<T, TValue>> expr)
		{
			return null;
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0x9E6110", Offset = "0x9E6110", VA = "0x9E6110")]
		public static object GetFieldValue(object source, string name)
		{
			return null;
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x9E6210", Offset = "0x9E6210", VA = "0x9E6210")]
		public static object GetFieldValueFromPath(object source, ref Type baseType, string path)
		{
			return null;
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0x9E639C", Offset = "0x9E639C", VA = "0x9E639C")]
		public static object GetParentObject(string path, object obj)
		{
			return null;
		}
	}
}
namespace UnityEngine.PostProcessing
{
	[Token(Token = "0x20004DA")]
	public sealed class GetSetAttribute : PropertyAttribute
	{
		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string name;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool dirty;

		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0x9E6554", Offset = "0x9E6554", VA = "0x9E6554")]
		public GetSetAttribute(string name)
		{
		}
	}
	[Token(Token = "0x20004DB")]
	public sealed class MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float min;

		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0x9E6584", Offset = "0x9E6584", VA = "0x9E6584")]
		public MinAttribute(float min)
		{
		}
	}
	[Token(Token = "0x20004DC")]
	public sealed class TrackballAttribute : PropertyAttribute
	{
		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string method;

		[Token(Token = "0x6001BCA")]
		[Address(RVA = "0x9E65AC", Offset = "0x9E65AC", VA = "0x9E65AC")]
		public TrackballAttribute(string method)
		{
		}
	}
	[Token(Token = "0x20004DD")]
	public sealed class TrackballGroupAttribute : PropertyAttribute
	{
		[Token(Token = "0x6001BCB")]
		[Address(RVA = "0x9E65DC", Offset = "0x9E65DC", VA = "0x9E65DC")]
		public TrackballGroupAttribute()
		{
		}
	}
	[Token(Token = "0x20004DE")]
	public sealed class AmbientOcclusionComponent : PostProcessingComponentCommandBuffer<AmbientOcclusionModel>
	{
		[Token(Token = "0x20004DF")]
		private static class Uniforms
		{
			[Token(Token = "0x4001933")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Intensity;

			[Token(Token = "0x4001934")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Radius;

			[Token(Token = "0x4001935")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Downsample;

			[Token(Token = "0x4001936")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _SampleCount;

			[Token(Token = "0x4001937")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _OcclusionTexture1;

			[Token(Token = "0x4001938")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _OcclusionTexture2;

			[Token(Token = "0x4001939")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _OcclusionTexture;

			[Token(Token = "0x400193A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _MainTex;

			[Token(Token = "0x400193B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _TempRT;
		}

		[Token(Token = "0x20004E0")]
		private enum OcclusionSource
		{
			[Token(Token = "0x400193D")]
			DepthTexture,
			[Token(Token = "0x400193E")]
			DepthNormalsTexture,
			[Token(Token = "0x400193F")]
			GBuffer
		}

		[Token(Token = "0x4001930")]
		private const string k_BlitShaderString = "Hidden/Post FX/Blit";

		[Token(Token = "0x4001931")]
		private const string k_ShaderString = "Hidden/Post FX/Ambient Occlusion";

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RenderTargetIdentifier[] m_MRT;

		[Token(Token = "0x17000315")]
		private OcclusionSource occlusionSource
		{
			[Token(Token = "0x6001BCC")]
			[Address(RVA = "0x9E65E4", Offset = "0x9E65E4", VA = "0x9E65E4")]
			get
			{
				return default(OcclusionSource);
			}
		}

		[Token(Token = "0x17000316")]
		private bool ambientOnlySupported
		{
			[Token(Token = "0x6001BCD")]
			[Address(RVA = "0x9E6678", Offset = "0x9E6678", VA = "0x9E6678")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000317")]
		public override bool active
		{
			[Token(Token = "0x6001BCE")]
			[Address(RVA = "0x9E6708", Offset = "0x9E6708", VA = "0x9E6708", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0x9E677C", Offset = "0x9E677C", VA = "0x9E677C", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0x9E67B4", Offset = "0x9E67B4", VA = "0x9E67B4", Slot = "10")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0x9E67F4", Offset = "0x9E67F4", VA = "0x9E67F4", Slot = "9")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0x9E684C", Offset = "0x9E684C", VA = "0x9E684C", Slot = "11")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0x9E7120", Offset = "0x9E7120", VA = "0x9E7120")]
		public AmbientOcclusionComponent()
		{
		}
	}
	[Token(Token = "0x20004E1")]
	public sealed class BloomComponent : PostProcessingComponentRenderTexture<BloomModel>
	{
		[Token(Token = "0x20004E2")]
		private static class Uniforms
		{
			[Token(Token = "0x4001943")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _AutoExposure;

			[Token(Token = "0x4001944")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Threshold;

			[Token(Token = "0x4001945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Curve;

			[Token(Token = "0x4001946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _PrefilterOffs;

			[Token(Token = "0x4001947")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _SampleScale;

			[Token(Token = "0x4001948")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _BaseTex;

			[Token(Token = "0x4001949")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _BloomTex;

			[Token(Token = "0x400194A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Bloom_Settings;

			[Token(Token = "0x400194B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _Bloom_DirtTex;

			[Token(Token = "0x400194C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _Bloom_DirtIntensity;
		}

		[Token(Token = "0x4001940")]
		private const int k_MaxPyramidBlurLevel = 16;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RenderTexture[] m_BlurBuffer1;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly RenderTexture[] m_BlurBuffer2;

		[Token(Token = "0x17000318")]
		public override bool active
		{
			[Token(Token = "0x6001BD5")]
			[Address(RVA = "0x9E742C", Offset = "0x9E742C", VA = "0x9E742C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0x9E74A0", Offset = "0x9E74A0", VA = "0x9E74A0")]
		public void Prepare(RenderTexture source, Material uberMaterial, Texture autoExposure)
		{
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0x9E7E3C", Offset = "0x9E7E3C", VA = "0x9E7E3C")]
		public BloomComponent()
		{
		}
	}
	[Token(Token = "0x20004E3")]
	public sealed class BuiltinDebugViewsComponent : PostProcessingComponentCommandBuffer<BuiltinDebugViewsModel>
	{
		[Token(Token = "0x20004E4")]
		private static class Uniforms
		{
			[Token(Token = "0x400194F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DepthScale;

			[Token(Token = "0x4001950")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _TempRT;

			[Token(Token = "0x4001951")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Opacity;

			[Token(Token = "0x4001952")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _MainTex;

			[Token(Token = "0x4001953")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _TempRT2;

			[Token(Token = "0x4001954")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Amplitude;

			[Token(Token = "0x4001955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Scale;
		}

		[Token(Token = "0x20004E5")]
		private enum Pass
		{
			[Token(Token = "0x4001957")]
			Depth,
			[Token(Token = "0x4001958")]
			Normals,
			[Token(Token = "0x4001959")]
			MovecOpacity,
			[Token(Token = "0x400195A")]
			MovecImaging,
			[Token(Token = "0x400195B")]
			MovecArrows
		}

		[Token(Token = "0x20004E6")]
		private class ArrowArray
		{
			[Token(Token = "0x1700031A")]
			public Mesh mesh
			{
				[Token(Token = "0x6001BE5")]
				[Address(RVA = "0x9E928C", Offset = "0x9E928C", VA = "0x9E928C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001BE6")]
				[Address(RVA = "0x9E9294", Offset = "0x9E9294", VA = "0x9E9294")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700031B")]
			public int columnCount
			{
				[Token(Token = "0x6001BE7")]
				[Address(RVA = "0x9E929C", Offset = "0x9E929C", VA = "0x9E929C")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001BE8")]
				[Address(RVA = "0x9E92A4", Offset = "0x9E92A4", VA = "0x9E92A4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700031C")]
			public int rowCount
			{
				[Token(Token = "0x6001BE9")]
				[Address(RVA = "0x9E92AC", Offset = "0x9E92AC", VA = "0x9E92AC")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001BEA")]
				[Address(RVA = "0x9E92B4", Offset = "0x9E92B4", VA = "0x9E92B4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6001BEB")]
			[Address(RVA = "0x9E8C3C", Offset = "0x9E8C3C", VA = "0x9E8C3C")]
			public void BuildMesh(int columns, int rows)
			{
			}

			[Token(Token = "0x6001BEC")]
			[Address(RVA = "0x9E8C14", Offset = "0x9E8C14", VA = "0x9E8C14")]
			public void Release()
			{
			}

			[Token(Token = "0x6001BED")]
			[Address(RVA = "0x9E8C0C", Offset = "0x9E8C0C", VA = "0x9E8C0C")]
			public ArrowArray()
			{
			}
		}

		[Token(Token = "0x400194D")]
		private const string k_ShaderString = "Hidden/Post FX/Builtin Debug Views";

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ArrowArray m_Arrows;

		[Token(Token = "0x17000319")]
		public override bool active
		{
			[Token(Token = "0x6001BD9")]
			[Address(RVA = "0x9E80EC", Offset = "0x9E80EC", VA = "0x9E80EC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0x9E8178", Offset = "0x9E8178", VA = "0x9E8178", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0x9E81E0", Offset = "0x9E81E0", VA = "0x9E81E0", Slot = "9")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x9E8238", Offset = "0x9E8238", VA = "0x9E8238", Slot = "10")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x9E8278", Offset = "0x9E8278", VA = "0x9E8278", Slot = "11")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x9E8398", Offset = "0x9E8398", VA = "0x9E8398")]
		private void DepthPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0x9E84B0", Offset = "0x9E84B0", VA = "0x9E84B0")]
		private void DepthNormalsPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0x9E8574", Offset = "0x9E8574", VA = "0x9E8574")]
		private void MotionVectorsPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x9E8AFC", Offset = "0x9E8AFC", VA = "0x9E8AFC")]
		private void PrepareArrows()
		{
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0x9E9074", Offset = "0x9E9074", VA = "0x9E9074", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x9E90BC", Offset = "0x9E90BC", VA = "0x9E90BC")]
		public BuiltinDebugViewsComponent()
		{
		}
	}
	[Token(Token = "0x20004E7")]
	public sealed class ChromaticAberrationComponent : PostProcessingComponentRenderTexture<ChromaticAberrationModel>
	{
		[Token(Token = "0x20004E8")]
		private static class Uniforms
		{
			[Token(Token = "0x4001960")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _ChromaticAberration_Amount;

			[Token(Token = "0x4001961")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _ChromaticAberration_Spectrum;
		}

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Texture2D m_SpectrumLut;

		[Token(Token = "0x1700031D")]
		public override bool active
		{
			[Token(Token = "0x6001BEE")]
			[Address(RVA = "0x9E92BC", Offset = "0x9E92BC", VA = "0x9E92BC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0x9E9330", Offset = "0x9E9330", VA = "0x9E9330", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x9E9358", Offset = "0x9E9358", VA = "0x9E9358", Slot = "9")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0x9E95E0", Offset = "0x9E95E0", VA = "0x9E95E0")]
		public ChromaticAberrationComponent()
		{
		}
	}
	[Token(Token = "0x20004E9")]
	public sealed class ColorGradingComponent : PostProcessingComponentRenderTexture<ColorGradingModel>
	{
		[Token(Token = "0x20004EA")]
		private static class Uniforms
		{
			[Token(Token = "0x4001966")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _LutParams;

			[Token(Token = "0x4001967")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _NeutralTonemapperParams1;

			[Token(Token = "0x4001968")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _NeutralTonemapperParams2;

			[Token(Token = "0x4001969")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _HueShift;

			[Token(Token = "0x400196A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _Saturation;

			[Token(Token = "0x400196B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Contrast;

			[Token(Token = "0x400196C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Balance;

			[Token(Token = "0x400196D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Lift;

			[Token(Token = "0x400196E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _InvGamma;

			[Token(Token = "0x400196F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _Gain;

			[Token(Token = "0x4001970")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _Slope;

			[Token(Token = "0x4001971")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _Power;

			[Token(Token = "0x4001972")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _Offset;

			[Token(Token = "0x4001973")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _ChannelMixerRed;

			[Token(Token = "0x4001974")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _ChannelMixerGreen;

			[Token(Token = "0x4001975")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _ChannelMixerBlue;

			[Token(Token = "0x4001976")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _Curves;

			[Token(Token = "0x4001977")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _LogLut;

			[Token(Token = "0x4001978")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _LogLut_Params;

			[Token(Token = "0x4001979")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _ExposureEV;
		}

		[Token(Token = "0x4001962")]
		private const int k_InternalLogLutSize = 32;

		[Token(Token = "0x4001963")]
		private const int k_CurvePrecision = 128;

		[Token(Token = "0x4001964")]
		private const float k_CurveStep = 1f / 128f;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Texture2D m_GradingCurves;

		[Token(Token = "0x1700031E")]
		public override bool active
		{
			[Token(Token = "0x6001BF3")]
			[Address(RVA = "0x9E96C4", Offset = "0x9E96C4", VA = "0x9E96C4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0x9E972C", Offset = "0x9E972C", VA = "0x9E972C")]
		private float StandardIlluminantY(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0x9E9758", Offset = "0x9E9758", VA = "0x9E9758")]
		private Vector3 CIExyToLMS(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x9E97E8", Offset = "0x9E97E8", VA = "0x9E97E8")]
		private Vector3 CalculateColorBalance(float temperature, float tint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x9E98EC", Offset = "0x9E98EC", VA = "0x9E98EC")]
		private static Color NormalizeColor(Color c)
		{
			return default(Color);
		}

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x9E99B8", Offset = "0x9E99B8", VA = "0x9E99B8")]
		private static Vector3 ClampVector(Vector3 v, float min, float max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0x9E99EC", Offset = "0x9E99EC", VA = "0x9E99EC")]
		public static Vector3 GetLiftValue(Color lift)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0x9E9A70", Offset = "0x9E9A70", VA = "0x9E9A70")]
		public static Vector3 GetGammaValue(Color gamma)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0x9E9B54", Offset = "0x9E9B54", VA = "0x9E9B54")]
		public static Vector3 GetGainValue(Color gain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0x9E9C0C", Offset = "0x9E9C0C", VA = "0x9E9C0C")]
		public static void CalculateLiftGammaGain(Color lift, Color gamma, Color gain, out Vector3 outLift, out Vector3 outGamma, out Vector3 outGain)
		{
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0x9E9CA8", Offset = "0x9E9CA8", VA = "0x9E9CA8")]
		public static Vector3 GetSlopeValue(Color slope)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x9E9D44", Offset = "0x9E9D44", VA = "0x9E9D44")]
		public static Vector3 GetPowerValue(Color power)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x9E9DFC", Offset = "0x9E9DFC", VA = "0x9E9DFC")]
		public static Vector3 GetOffsetValue(Color offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x9E9E90", Offset = "0x9E9E90", VA = "0x9E9E90")]
		public static void CalculateSlopePowerOffset(Color slope, Color power, Color offset, out Vector3 outSlope, out Vector3 outPower, out Vector3 outOffset)
		{
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x9E9F2C", Offset = "0x9E9F2C", VA = "0x9E9F2C")]
		private Texture2D GetCurveTexture()
		{
			return null;
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0x9EA240", Offset = "0x9EA240", VA = "0x9EA240")]
		private bool IsLogLutValid(RenderTexture lut)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0x9EA2DC", Offset = "0x9EA2DC", VA = "0x9EA2DC")]
		private void GenerateLut()
		{
		}

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0x9EAA50", Offset = "0x9EAA50", VA = "0x9EAA50", Slot = "9")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0x9EAC30", Offset = "0x9EAC30", VA = "0x9EAC30")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0x9EAD50", Offset = "0x9EAD50", VA = "0x9EAD50", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0x9EADD4", Offset = "0x9EADD4", VA = "0x9EADD4")]
		public ColorGradingComponent()
		{
		}
	}
	[Token(Token = "0x20004EB")]
	public sealed class DepthOfFieldComponent : PostProcessingComponentRenderTexture<DepthOfFieldModel>
	{
		[Token(Token = "0x20004EC")]
		private static class Uniforms
		{
			[Token(Token = "0x400197E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DepthOfFieldTex;

			[Token(Token = "0x400197F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Distance;

			[Token(Token = "0x4001980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _LensCoeff;

			[Token(Token = "0x4001981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _MaxCoC;

			[Token(Token = "0x4001982")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _RcpMaxCoC;

			[Token(Token = "0x4001983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _RcpAspect;

			[Token(Token = "0x4001984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _MainTex;

			[Token(Token = "0x4001985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _HistoryCoC;
		}

		[Token(Token = "0x400197A")]
		private const string k_ShaderString = "Hidden/Post FX/Depth Of Field";

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RenderTexture m_CoCHistory;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderBuffer[] m_MRT;

		[Token(Token = "0x400197D")]
		private const float k_FilmHeight = 0.024f;

		[Token(Token = "0x1700031F")]
		public override bool active
		{
			[Token(Token = "0x6001C09")]
			[Address(RVA = "0x9EC1E8", Offset = "0x9EC1E8", VA = "0x9EC1E8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0x9EC270", Offset = "0x9EC270", VA = "0x9EC270", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0x9EC278", Offset = "0x9EC278", VA = "0x9EC278")]
		private float CalculateFocalLength()
		{
			return default(float);
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0x9EC314", Offset = "0x9EC314", VA = "0x9EC314")]
		private float CalculateMaxCoCRadius(int screenHeight)
		{
			return default(float);
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0x9EC388", Offset = "0x9EC388", VA = "0x9EC388")]
		public void Prepare(RenderTexture source, Material uberMaterial, bool antialiasCoC)
		{
		}

		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0x9ED19C", Offset = "0x9ED19C", VA = "0x9ED19C", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0x9ED21C", Offset = "0x9ED21C", VA = "0x9ED21C")]
		public DepthOfFieldComponent()
		{
		}
	}
	[Token(Token = "0x20004ED")]
	public sealed class EyeAdaptationComponent : PostProcessingComponentRenderTexture<EyeAdaptationModel>
	{
		[Token(Token = "0x20004EE")]
		private static class Uniforms
		{
			[Token(Token = "0x4001991")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Params;

			[Token(Token = "0x4001992")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Speed;

			[Token(Token = "0x4001993")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _ScaleOffsetRes;

			[Token(Token = "0x4001994")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _ExposureCompensation;

			[Token(Token = "0x4001995")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _AutoExposure;

			[Token(Token = "0x4001996")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _DebugWidth;
		}

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ComputeShader m_EyeCompute;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ComputeBuffer m_HistogramBuffer;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly RenderTexture[] m_AutoExposurePool;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int m_AutoExposurePingPing;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_CurrentAutoExposure;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_DebugHistogram;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint[] s_EmptyHistogramBuffer;

		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_FirstFrame;

		[Token(Token = "0x400198E")]
		private const int k_HistogramBins = 64;

		[Token(Token = "0x400198F")]
		private const int k_HistogramThreadX = 16;

		[Token(Token = "0x4001990")]
		private const int k_HistogramThreadY = 16;

		[Token(Token = "0x17000320")]
		public override bool active
		{
			[Token(Token = "0x6001C11")]
			[Address(RVA = "0x9ED458", Offset = "0x9ED458", VA = "0x9ED458", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0x9ED4CC", Offset = "0x9ED4CC", VA = "0x9ED4CC", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0x9ED4D8", Offset = "0x9ED4D8", VA = "0x9ED4D8", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0x9ED658", Offset = "0x9ED658", VA = "0x9ED658")]
		private Vector4 GetHistogramScaleOffsetRes()
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0x9ED728", Offset = "0x9ED728", VA = "0x9ED728")]
		public Texture Prepare(RenderTexture source, Material uberMaterial)
		{
			return null;
		}

		[Token(Token = "0x6001C16")]
		[Address(RVA = "0x9EE1B4", Offset = "0x9EE1B4", VA = "0x9EE1B4")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0x9EE340", Offset = "0x9EE340", VA = "0x9EE340")]
		public EyeAdaptationComponent()
		{
		}
	}
	[Token(Token = "0x20004EF")]
	public sealed class FxaaComponent : PostProcessingComponentRenderTexture<AntialiasingModel>
	{
		[Token(Token = "0x20004F0")]
		private static class Uniforms
		{
			[Token(Token = "0x4001997")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _QualitySettings;

			[Token(Token = "0x4001998")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _ConsoleSettings;
		}

		[Token(Token = "0x17000321")]
		public override bool active
		{
			[Token(Token = "0x6001C19")]
			[Address(RVA = "0x9EE524", Offset = "0x9EE524", VA = "0x9EE524", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0x9EE594", Offset = "0x9EE594", VA = "0x9EE594")]
		public void Render(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0x9EE790", Offset = "0x9EE790", VA = "0x9EE790")]
		public FxaaComponent()
		{
		}
	}
	[Token(Token = "0x20004F1")]
	public sealed class GrainComponent : PostProcessingComponentRenderTexture<GrainModel>
	{
		[Token(Token = "0x20004F2")]
		private static class Uniforms
		{
			[Token(Token = "0x400199A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Grain_Params1;

			[Token(Token = "0x400199B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Grain_Params2;

			[Token(Token = "0x400199C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _GrainTex;

			[Token(Token = "0x400199D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Phase;
		}

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RenderTexture m_GrainLookupRT;

		[Token(Token = "0x17000322")]
		public override bool active
		{
			[Token(Token = "0x6001C1D")]
			[Address(RVA = "0x9EE874", Offset = "0x9EE874", VA = "0x9EE874", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0x9EE8F8", Offset = "0x9EE8F8", VA = "0x9EE8F8", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0x9EE91C", Offset = "0x9EE91C", VA = "0x9EE91C", Slot = "9")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0x9EECC0", Offset = "0x9EECC0", VA = "0x9EECC0")]
		public GrainComponent()
		{
		}
	}
	[Token(Token = "0x20004F3")]
	public sealed class MotionBlurComponent : PostProcessingComponentCommandBuffer<MotionBlurModel>
	{
		[Token(Token = "0x20004F4")]
		private static class Uniforms
		{
			[Token(Token = "0x40019A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _VelocityScale;

			[Token(Token = "0x40019A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _MaxBlurRadius;

			[Token(Token = "0x40019A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _VelocityTex;

			[Token(Token = "0x40019A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Tile4RT;

			[Token(Token = "0x40019A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _MainTex;

			[Token(Token = "0x40019A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Tile8RT;

			[Token(Token = "0x40019A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _TileMaxOffs;

			[Token(Token = "0x40019A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _TileMaxLoop;

			[Token(Token = "0x40019A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _TileVRT;

			[Token(Token = "0x40019AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _NeighborMaxTex;

			[Token(Token = "0x40019AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _LoopCount;

			[Token(Token = "0x40019AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _TempRT;

			[Token(Token = "0x40019AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _History1LumaTex;

			[Token(Token = "0x40019AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _History2LumaTex;

			[Token(Token = "0x40019AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _History3LumaTex;

			[Token(Token = "0x40019B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _History4LumaTex;

			[Token(Token = "0x40019B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _History1ChromaTex;

			[Token(Token = "0x40019B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _History2ChromaTex;

			[Token(Token = "0x40019B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _History3ChromaTex;

			[Token(Token = "0x40019B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _History4ChromaTex;

			[Token(Token = "0x40019B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly int _History1Weight;

			[Token(Token = "0x40019B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal static readonly int _History2Weight;

			[Token(Token = "0x40019B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly int _History3Weight;

			[Token(Token = "0x40019B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal static readonly int _History4Weight;
		}

		[Token(Token = "0x20004F5")]
		private enum Pass
		{
			[Token(Token = "0x40019BA")]
			VelocitySetup,
			[Token(Token = "0x40019BB")]
			TileMax4,
			[Token(Token = "0x40019BC")]
			TileMax2,
			[Token(Token = "0x40019BD")]
			TileMaxV,
			[Token(Token = "0x40019BE")]
			NeighborMax,
			[Token(Token = "0x40019BF")]
			Reconstruction,
			[Token(Token = "0x40019C0")]
			ReconstructionUnroll,
			[Token(Token = "0x40019C1")]
			FrameCompression,
			[Token(Token = "0x40019C2")]
			FrameBlendingChroma,
			[Token(Token = "0x40019C3")]
			FrameBlendingRaw
		}

		[Token(Token = "0x20004F6")]
		public class ReconstructionFilter
		{
			[Token(Token = "0x40019C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private RenderTextureFormat m_VectorRTFormat;

			[Token(Token = "0x40019C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private RenderTextureFormat m_PackedRTFormat;

			[Token(Token = "0x40019C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private bool m_UseUnrolledShader;

			[Token(Token = "0x6001C2E")]
			[Address(RVA = "0x9EEE78", Offset = "0x9EEE78", VA = "0x9EEE78")]
			public ReconstructionFilter()
			{
			}

			[Token(Token = "0x6001C2F")]
			[Address(RVA = "0x9F0CCC", Offset = "0x9F0CCC", VA = "0x9F0CCC")]
			private void CheckTextureFormatSupport()
			{
			}

			[Token(Token = "0x6001C30")]
			[Address(RVA = "0x9EF0B0", Offset = "0x9EF0B0", VA = "0x9EF0B0")]
			public bool IsSupported()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C31")]
			[Address(RVA = "0x9EF890", Offset = "0x9EF890", VA = "0x9EF890")]
			public void ProcessImage(PostProcessingContext context, CommandBuffer cb, ref MotionBlurModel.Settings settings, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material)
			{
			}
		}

		[Token(Token = "0x20004F7")]
		public class FrameBlendingFilter
		{
			[Token(Token = "0x20004F8")]
			private struct Frame
			{
				[Token(Token = "0x40019CB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public RenderTexture lumaTexture;

				[Token(Token = "0x40019CC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public RenderTexture chromaTexture;

				[Token(Token = "0x40019CD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private float m_Time;

				[Token(Token = "0x40019CE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private RenderTargetIdentifier[] m_MRT;

				[Token(Token = "0x6001C39")]
				[Address(RVA = "0x9F1378", Offset = "0x9F1378", VA = "0x9F1378")]
				public float CalculateWeight(float strength, float currentTime)
				{
					return default(float);
				}

				[Token(Token = "0x6001C3A")]
				[Address(RVA = "0x9F0DF0", Offset = "0x9F0DF0", VA = "0x9F0DF0")]
				public void Release()
				{
				}

				[Token(Token = "0x6001C3B")]
				[Address(RVA = "0x9F0EC0", Offset = "0x9F0EC0", VA = "0x9F0EC0")]
				public void MakeRecord(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, Material material)
				{
				}

				[Token(Token = "0x6001C3C")]
				[Address(RVA = "0x9F11A4", Offset = "0x9F11A4", VA = "0x9F11A4")]
				public void MakeRecordRaw(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, RenderTextureFormat format)
				{
				}
			}

			[Token(Token = "0x40019C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool m_UseCompression;

			[Token(Token = "0x40019C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private RenderTextureFormat m_RawTextureFormat;

			[Token(Token = "0x40019C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Frame[] m_FrameList;

			[Token(Token = "0x40019CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_LastFrameCount;

			[Token(Token = "0x6001C32")]
			[Address(RVA = "0x9EEF7C", Offset = "0x9EEF7C", VA = "0x9EEF7C")]
			public FrameBlendingFilter()
			{
			}

			[Token(Token = "0x6001C33")]
			[Address(RVA = "0x9EF120", Offset = "0x9EF120", VA = "0x9EF120")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001C34")]
			[Address(RVA = "0x9F06D0", Offset = "0x9F06D0", VA = "0x9F06D0")]
			public void PushFrame(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, Material material)
			{
			}

			[Token(Token = "0x6001C35")]
			[Address(RVA = "0x9F01EC", Offset = "0x9F01EC", VA = "0x9F01EC")]
			public void BlendFrames(CommandBuffer cb, float strength, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material)
			{
			}

			[Token(Token = "0x6001C36")]
			[Address(RVA = "0x9F0CF0", Offset = "0x9F0CF0", VA = "0x9F0CF0")]
			private static bool CheckSupportCompression()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C37")]
			[Address(RVA = "0x9F0D24", Offset = "0x9F0D24", VA = "0x9F0D24")]
			private static RenderTextureFormat GetPreferredRenderTextureFormat()
			{
				return default(RenderTextureFormat);
			}

			[Token(Token = "0x6001C38")]
			[Address(RVA = "0x9F1314", Offset = "0x9F1314", VA = "0x9F1314")]
			private Frame GetFrameRelative(int offset)
			{
				return default(Frame);
			}
		}

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ReconstructionFilter m_ReconstructionFilter;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FrameBlendingFilter m_FrameBlendingFilter;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_FirstFrame;

		[Token(Token = "0x17000323")]
		public ReconstructionFilter reconstructionFilter
		{
			[Token(Token = "0x6001C22")]
			[Address(RVA = "0x9EEE04", Offset = "0x9EEE04", VA = "0x9EEE04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000324")]
		public FrameBlendingFilter frameBlendingFilter
		{
			[Token(Token = "0x6001C23")]
			[Address(RVA = "0x9EEF08", Offset = "0x9EEF08", VA = "0x9EEF08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000325")]
		public override bool active
		{
			[Token(Token = "0x6001C24")]
			[Address(RVA = "0x9EEFF4", Offset = "0x9EEFF4", VA = "0x9EEFF4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0x9EF0B8", Offset = "0x9EF0B8", VA = "0x9EF0B8", Slot = "10")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0x9EF0F8", Offset = "0x9EF0F8", VA = "0x9EF0F8")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0x9EF194", Offset = "0x9EF194", VA = "0x9EF194", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0x9EF19C", Offset = "0x9EF19C", VA = "0x9EF19C", Slot = "9")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0x9EF1A4", Offset = "0x9EF1A4", VA = "0x9EF1A4", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0x9EF1B0", Offset = "0x9EF1B0", VA = "0x9EF1B0", Slot = "11")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0x9F07F0", Offset = "0x9F07F0", VA = "0x9F07F0", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0x9F0800", Offset = "0x9F0800", VA = "0x9F0800")]
		public MotionBlurComponent()
		{
		}
	}
	[Token(Token = "0x20004F9")]
	public sealed class ScreenSpaceReflectionComponent : PostProcessingComponentCommandBuffer<ScreenSpaceReflectionModel>
	{
		[Token(Token = "0x20004FA")]
		private static class Uniforms
		{
			[Token(Token = "0x40019D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _RayStepSize;

			[Token(Token = "0x40019D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _AdditiveReflection;

			[Token(Token = "0x40019D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _BilateralUpsampling;

			[Token(Token = "0x40019D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _TreatBackfaceHitAsMiss;

			[Token(Token = "0x40019D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _AllowBackwardsRays;

			[Token(Token = "0x40019D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _TraceBehindObjects;

			[Token(Token = "0x40019DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _MaxSteps;

			[Token(Token = "0x40019DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _FullResolutionFiltering;

			[Token(Token = "0x40019DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _HalfResolution;

			[Token(Token = "0x40019DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _HighlightSuppression;

			[Token(Token = "0x40019DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _PixelsPerMeterAtOneMeter;

			[Token(Token = "0x40019DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _ScreenEdgeFading;

			[Token(Token = "0x40019E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _ReflectionBlur;

			[Token(Token = "0x40019E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _MaxRayTraceDistance;

			[Token(Token = "0x40019E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _FadeDistance;

			[Token(Token = "0x40019E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _LayerThickness;

			[Token(Token = "0x40019E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _SSRMultiplier;

			[Token(Token = "0x40019E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _FresnelFade;

			[Token(Token = "0x40019E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _FresnelFadePower;

			[Token(Token = "0x40019E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _ReflectionBufferSize;

			[Token(Token = "0x40019E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly int _ScreenSize;

			[Token(Token = "0x40019E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal static readonly int _InvScreenSize;

			[Token(Token = "0x40019EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly int _ProjInfo;

			[Token(Token = "0x40019EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal static readonly int _CameraClipInfo;

			[Token(Token = "0x40019EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly int _ProjectToPixelMatrix;

			[Token(Token = "0x40019ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal static readonly int _WorldToCameraMatrix;

			[Token(Token = "0x40019EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal static readonly int _CameraToWorldMatrix;

			[Token(Token = "0x40019EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			internal static readonly int _Axis;

			[Token(Token = "0x40019F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal static readonly int _CurrentMipLevel;

			[Token(Token = "0x40019F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			internal static readonly int _NormalAndRoughnessTexture;

			[Token(Token = "0x40019F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal static readonly int _HitPointTexture;

			[Token(Token = "0x40019F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			internal static readonly int _BlurTexture;

			[Token(Token = "0x40019F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal static readonly int _FilteredReflections;

			[Token(Token = "0x40019F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			internal static readonly int _FinalReflectionTexture;

			[Token(Token = "0x40019F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal static readonly int _TempTexture;
		}

		[Token(Token = "0x20004FB")]
		private enum PassIndex
		{
			[Token(Token = "0x40019F8")]
			RayTraceStep,
			[Token(Token = "0x40019F9")]
			CompositeFinal,
			[Token(Token = "0x40019FA")]
			Blur,
			[Token(Token = "0x40019FB")]
			CompositeSSR,
			[Token(Token = "0x40019FC")]
			MinMipGeneration,
			[Token(Token = "0x40019FD")]
			HitPointToReflections,
			[Token(Token = "0x40019FE")]
			BilateralKeyPack,
			[Token(Token = "0x40019FF")]
			BlitDepthAsCSZ,
			[Token(Token = "0x4001A00")]
			PoissonBlur
		}

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool k_HighlightSuppression;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool k_TraceBehindObjects;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		private bool k_TreatBackfaceHitAsMiss;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		private bool k_BilateralUpsample;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int[] m_ReflectionTextures;

		[Token(Token = "0x17000326")]
		public override bool active
		{
			[Token(Token = "0x6001C3E")]
			[Address(RVA = "0x9F16E0", Offset = "0x9F16E0", VA = "0x9F16E0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x9F16D8", Offset = "0x9F16D8", VA = "0x9F16D8", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0x9F1780", Offset = "0x9F1780", VA = "0x9F1780", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0x9F18C8", Offset = "0x9F18C8", VA = "0x9F18C8", Slot = "10")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x9F1908", Offset = "0x9F1908", VA = "0x9F1908", Slot = "9")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x9F1910", Offset = "0x9F1910", VA = "0x9F1910", Slot = "11")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0x9F2934", Offset = "0x9F2934", VA = "0x9F2934")]
		public ScreenSpaceReflectionComponent()
		{
		}
	}
	[Token(Token = "0x20004FC")]
	public sealed class TaaComponent : PostProcessingComponentRenderTexture<AntialiasingModel>
	{
		[Token(Token = "0x20004FD")]
		private static class Uniforms
		{
			[Token(Token = "0x4001A07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static int _Jitter;

			[Token(Token = "0x4001A08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static int _SharpenParameters;

			[Token(Token = "0x4001A09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static int _FinalBlendParameters;

			[Token(Token = "0x4001A0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static int _HistoryTex;

			[Token(Token = "0x4001A0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static int _MainTex;
		}

		[Token(Token = "0x4001A01")]
		private const string k_ShaderString = "Hidden/Post FX/Temporal Anti-aliasing";

		[Token(Token = "0x4001A02")]
		private const int k_SampleCount = 8;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RenderBuffer[] m_MRT;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_SampleIndex;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool m_ResetHistory;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture m_HistoryTexture;

		[Token(Token = "0x17000327")]
		public override bool active
		{
			[Token(Token = "0x6001C45")]
			[Address(RVA = "0x9F3020", Offset = "0x9F3020", VA = "0x9F3020", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0x9F30B0", Offset = "0x9F30B0", VA = "0x9F30B0", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0x9F30B8", Offset = "0x9F30B8", VA = "0x9F30B8")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0x9F30C4", Offset = "0x9F30C4", VA = "0x9F30C4")]
		public void SetProjectionMatrix()
		{
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0x9F390C", Offset = "0x9F390C", VA = "0x9F390C")]
		public void Render(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0x9F3D4C", Offset = "0x9F3D4C", VA = "0x9F3D4C")]
		private float GetHaltonValue(int index, int radix)
		{
			return default(float);
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x9F32E8", Offset = "0x9F32E8", VA = "0x9F32E8")]
		private Vector2 GenerateRandomOffset()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x9F337C", Offset = "0x9F337C", VA = "0x9F337C")]
		private Matrix4x4 GetPerspectiveProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0x9F37B0", Offset = "0x9F37B0", VA = "0x9F37B0")]
		private Matrix4x4 GetOrthographicProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0x9F3D90", Offset = "0x9F3D90", VA = "0x9F3D90", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0x9F3E24", Offset = "0x9F3E24", VA = "0x9F3E24")]
		public TaaComponent()
		{
		}
	}
	[Token(Token = "0x20004FE")]
	public sealed class UserLutComponent : PostProcessingComponentRenderTexture<UserLutModel>
	{
		[Token(Token = "0x20004FF")]
		private static class Uniforms
		{
			[Token(Token = "0x4001A0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _UserLut;

			[Token(Token = "0x4001A0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _UserLut_Params;
		}

		[Token(Token = "0x17000328")]
		public override bool active
		{
			[Token(Token = "0x6001C51")]
			[Address(RVA = "0x9F3FCC", Offset = "0x9F3FCC", VA = "0x9F3FCC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x9F40D8", Offset = "0x9F40D8", VA = "0x9F40D8", Slot = "9")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x9F4218", Offset = "0x9F4218", VA = "0x9F4218")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0x9F4340", Offset = "0x9F4340", VA = "0x9F4340")]
		public UserLutComponent()
		{
		}
	}
	[Token(Token = "0x2000500")]
	public sealed class VignetteComponent : PostProcessingComponentRenderTexture<VignetteModel>
	{
		[Token(Token = "0x2000501")]
		private static class Uniforms
		{
			[Token(Token = "0x4001A0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Vignette_Color;

			[Token(Token = "0x4001A0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Vignette_Center;

			[Token(Token = "0x4001A10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Vignette_Settings;

			[Token(Token = "0x4001A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Vignette_Mask;

			[Token(Token = "0x4001A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _Vignette_Opacity;
		}

		[Token(Token = "0x17000329")]
		public override bool active
		{
			[Token(Token = "0x6001C56")]
			[Address(RVA = "0x9F4424", Offset = "0x9F4424", VA = "0x9F4424", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0x9F448C", Offset = "0x9F448C", VA = "0x9F448C", Slot = "9")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0x9F4790", Offset = "0x9F4790", VA = "0x9F4790")]
		public VignetteComponent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000502")]
	public class AmbientOcclusionModel : PostProcessingModel
	{
		[Token(Token = "0x2000503")]
		public enum SampleCount
		{
			[Token(Token = "0x4001A15")]
			Lowest = 3,
			[Token(Token = "0x4001A16")]
			Low = 6,
			[Token(Token = "0x4001A17")]
			Medium = 10,
			[Token(Token = "0x4001A18")]
			High = 16
		}

		[Serializable]
		[Token(Token = "0x2000504")]
		public struct Settings
		{
			[Token(Token = "0x4001A19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Degree of darkness produced by the effect.")]
			[Range(0f, 4f)]
			public float intensity;

			[Token(Token = "0x4001A1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Radius of sample points, which affects extent of darkened areas.")]
			[Min(0.0001f)]
			public float radius;

			[Token(Token = "0x4001A1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Number of sample points, which affects quality and performance.")]
			public SampleCount sampleCount;

			[Token(Token = "0x4001A1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Halves the resolution of the effect to increase performance.")]
			public bool downsampling;

			[Token(Token = "0x4001A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			[Tooltip("Forces compatibility with Forward rendered objects when working with the Deferred rendering path.")]
			public bool forceForwardCompatibility;

			[Token(Token = "0x4001A1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			[Tooltip("Enables the ambient-only mode in that the effect only affects ambient lighting. This mode is only available with the Deferred rendering path and HDR rendering.")]
			public bool ambientOnly;

			[Token(Token = "0x4001A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			[Tooltip("Toggles the use of a higher precision depth texture with the forward rendering path (may impact performances). Has no effect with the deferred rendering path.")]
			public bool highPrecision;

			[Token(Token = "0x1700032B")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001C5E")]
				[Address(RVA = "0x9F492C", Offset = "0x9F492C", VA = "0x9F492C")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700032A")]
		public Settings settings
		{
			[Token(Token = "0x6001C5A")]
			[Address(RVA = "0x9F4900", Offset = "0x9F4900", VA = "0x9F4900")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001C5B")]
			[Address(RVA = "0x9F4910", Offset = "0x9F4910", VA = "0x9F4910")]
			set
			{
			}
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0x9F491C", Offset = "0x9F491C", VA = "0x9F491C", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0x9F4944", Offset = "0x9F4944", VA = "0x9F4944")]
		public AmbientOcclusionModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000505")]
	public class AntialiasingModel : PostProcessingModel
	{
		[Token(Token = "0x2000506")]
		public enum Method
		{
			[Token(Token = "0x4001A22")]
			Fxaa,
			[Token(Token = "0x4001A23")]
			Taa
		}

		[Token(Token = "0x2000507")]
		public enum FxaaPreset
		{
			[Token(Token = "0x4001A25")]
			ExtremePerformance,
			[Token(Token = "0x4001A26")]
			Performance,
			[Token(Token = "0x4001A27")]
			Default,
			[Token(Token = "0x4001A28")]
			Quality,
			[Token(Token = "0x4001A29")]
			ExtremeQuality
		}

		[Serializable]
		[Token(Token = "0x2000508")]
		public struct FxaaQualitySettings
		{
			[Token(Token = "0x4001A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 1f)]
			[Tooltip("The amount of desired sub-pixel aliasing removal. Effects the sharpeness of the output.")]
			public float subpixelAliasingRemovalAmount;

			[Token(Token = "0x4001A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0.063f, 0.333f)]
			[Tooltip("The minimum amount of local contrast required to qualify a region as containing an edge.")]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4001A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Local contrast adaptation value to disallow the algorithm from executing on the darker regions.")]
			[Range(0f, 0.0833f)]
			public float minimumRequiredLuminance;

			[Token(Token = "0x4001A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static FxaaQualitySettings[] presets;
		}

		[Serializable]
		[Token(Token = "0x2000509")]
		public struct FxaaConsoleSettings
		{
			[Token(Token = "0x4001A2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("The amount of spread applied to the sampling coordinates while sampling for subpixel information.")]
			[Range(0.33f, 0.5f)]
			public float subpixelSpreadAmount;

			[Token(Token = "0x4001A2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("This value dictates how sharp the edges in the image are kept; a higher value implies sharper edges.")]
			[Range(2f, 8f)]
			public float edgeSharpnessAmount;

			[Token(Token = "0x4001A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("The minimum amount of local contrast required to qualify a region as containing an edge.")]
			[Range(0.125f, 0.25f)]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4001A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Local contrast adaptation value to disallow the algorithm from executing on the darker regions.")]
			[Range(0.04f, 0.06f)]
			public float minimumRequiredLuminance;

			[Token(Token = "0x4001A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static FxaaConsoleSettings[] presets;
		}

		[Serializable]
		[Token(Token = "0x200050A")]
		public struct FxaaSettings
		{
			[Token(Token = "0x4001A33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FxaaPreset preset;

			[Token(Token = "0x1700032D")]
			public static FxaaSettings defaultSettings
			{
				[Token(Token = "0x6001C65")]
				[Address(RVA = "0x9F4BD4", Offset = "0x9F4BD4", VA = "0x9F4BD4")]
				get
				{
					return default(FxaaSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200050B")]
		public struct TaaSettings
		{
			[Token(Token = "0x4001A34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0.1f, 1f)]
			[Tooltip("The diameter (in texels) inside which jitter samples are spread. Smaller values result in crisper but more aliased output, while larger values result in more stable but blurrier output.")]
			public float jitterSpread;

			[Token(Token = "0x4001A35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0f, 3f)]
			[Tooltip("Controls the amount of sharpening applied to the color buffer.")]
			public float sharpen;

			[Token(Token = "0x4001A36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("The blend coefficient for a stationary fragment. Controls the percentage of history sample blended into the final color.")]
			[Range(0f, 1f)]
			public float stationaryBlending;

			[Token(Token = "0x4001A37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("The blend coefficient for a fragment with significant motion. Controls the percentage of history sample blended into the final color.")]
			[Range(0f, 1f)]
			public float motionBlending;

			[Token(Token = "0x1700032E")]
			public static TaaSettings defaultSettings
			{
				[Token(Token = "0x6001C66")]
				[Address(RVA = "0x9F4BDC", Offset = "0x9F4BDC", VA = "0x9F4BDC")]
				get
				{
					return default(TaaSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200050C")]
		public struct Settings
		{
			[Token(Token = "0x4001A38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Method method;

			[Token(Token = "0x4001A39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public FxaaSettings fxaaSettings;

			[Token(Token = "0x4001A3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public TaaSettings taaSettings;

			[Token(Token = "0x1700032F")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001C67")]
				[Address(RVA = "0x9F49A4", Offset = "0x9F49A4", VA = "0x9F49A4")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700032C")]
		public Settings settings
		{
			[Token(Token = "0x6001C5F")]
			[Address(RVA = "0x9F4960", Offset = "0x9F4960", VA = "0x9F4960")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001C60")]
			[Address(RVA = "0x9F4974", Offset = "0x9F4974", VA = "0x9F4974")]
			set
			{
			}
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0x9F4988", Offset = "0x9F4988", VA = "0x9F4988", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0x9F49C0", Offset = "0x9F49C0", VA = "0x9F49C0")]
		public AntialiasingModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200050D")]
	public class BloomModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200050E")]
		public struct BloomSettings
		{
			[Token(Token = "0x4001A3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Min(0f)]
			[Tooltip("Blend factor of the result image.")]
			public float intensity;

			[Token(Token = "0x4001A3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Min(0f)]
			[Tooltip("Filters out pixels under this level of brightness.")]
			public float threshold;

			[Token(Token = "0x4001A3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Makes transition between under/over-threshold gradual (0 = hard threshold, 1 = soft threshold).")]
			[Range(0f, 1f)]
			public float softKnee;

			[Token(Token = "0x4001A3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(1f, 7f)]
			[Tooltip("Changes extent of veiling effects in a screen resolution-independent fashion.")]
			public float radius;

			[Token(Token = "0x4001A40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Reduces flashing noise with an additional filter.")]
			public bool antiFlicker;

			[Token(Token = "0x17000331")]
			public float thresholdLinear
			{
				[Token(Token = "0x6001C6D")]
				[Address(RVA = "0x9F4D54", Offset = "0x9F4D54", VA = "0x9F4D54")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001C6C")]
				[Address(RVA = "0x9F4D38", Offset = "0x9F4D38", VA = "0x9F4D38")]
				set
				{
				}
			}

			[Token(Token = "0x17000332")]
			public static BloomSettings defaultSettings
			{
				[Token(Token = "0x6001C6E")]
				[Address(RVA = "0x9F4D60", Offset = "0x9F4D60", VA = "0x9F4D60")]
				get
				{
					return default(BloomSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200050F")]
		public struct LensDirtSettings
		{
			[Token(Token = "0x4001A41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Dirtiness texture to add smudges or dust to the lens.")]
			public Texture texture;

			[Token(Token = "0x4001A42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Min(0f)]
			[Tooltip("Amount of lens dirtiness.")]
			public float intensity;

			[Token(Token = "0x17000333")]
			public static LensDirtSettings defaultSettings
			{
				[Token(Token = "0x6001C6F")]
				[Address(RVA = "0x9F4D7C", Offset = "0x9F4D7C", VA = "0x9F4D7C")]
				get
				{
					return default(LensDirtSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000510")]
		public struct Settings
		{
			[Token(Token = "0x4001A43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BloomSettings bloom;

			[Token(Token = "0x4001A44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LensDirtSettings lensDirt;

			[Token(Token = "0x17000334")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001C70")]
				[Address(RVA = "0x9F4C78", Offset = "0x9F4C78", VA = "0x9F4C78")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000330")]
		public Settings settings
		{
			[Token(Token = "0x6001C68")]
			[Address(RVA = "0x9F4BFC", Offset = "0x9F4BFC", VA = "0x9F4BFC")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001C69")]
			[Address(RVA = "0x9F4C14", Offset = "0x9F4C14", VA = "0x9F4C14")]
			set
			{
			}
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x9F4C38", Offset = "0x9F4C38", VA = "0x9F4C38", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0x9F4CEC", Offset = "0x9F4CEC", VA = "0x9F4CEC")]
		public BloomModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000511")]
	public class BuiltinDebugViewsModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000512")]
		public struct DepthSettings
		{
			[Token(Token = "0x4001A46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Scales the camera far plane before displaying the depth map.")]
			[Range(0f, 1f)]
			public float scale;

			[Token(Token = "0x17000337")]
			public static DepthSettings defaultSettings
			{
				[Token(Token = "0x6001C77")]
				[Address(RVA = "0x9F4E6C", Offset = "0x9F4E6C", VA = "0x9F4E6C")]
				get
				{
					return default(DepthSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000513")]
		public struct MotionVectorsSettings
		{
			[Token(Token = "0x4001A47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 1f)]
			[Tooltip("Opacity of the source render.")]
			public float sourceOpacity;

			[Token(Token = "0x4001A48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0f, 1f)]
			[Tooltip("Opacity of the per-pixel motion vector colors.")]
			public float motionImageOpacity;

			[Token(Token = "0x4001A49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Because motion vectors are mainly very small vectors, you can use this setting to make them more visible.")]
			[Min(0f)]
			public float motionImageAmplitude;

			[Token(Token = "0x4001A4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0f, 1f)]
			[Tooltip("Opacity for the motion vector arrows.")]
			public float motionVectorsOpacity;

			[Token(Token = "0x4001A4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(8f, 64f)]
			[Tooltip("The arrow density on screen.")]
			public int motionVectorsResolution;

			[Token(Token = "0x4001A4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Min(0f)]
			[Tooltip("Tweaks the arrows length.")]
			public float motionVectorsAmplitude;

			[Token(Token = "0x17000338")]
			public static MotionVectorsSettings defaultSettings
			{
				[Token(Token = "0x6001C78")]
				[Address(RVA = "0x9F4E74", Offset = "0x9F4E74", VA = "0x9F4E74")]
				get
				{
					return default(MotionVectorsSettings);
				}
			}
		}

		[Token(Token = "0x2000514")]
		public enum Mode
		{
			[Token(Token = "0x4001A4E")]
			None,
			[Token(Token = "0x4001A4F")]
			Depth,
			[Token(Token = "0x4001A50")]
			Normals,
			[Token(Token = "0x4001A51")]
			MotionVectors,
			[Token(Token = "0x4001A52")]
			AmbientOcclusion,
			[Token(Token = "0x4001A53")]
			EyeAdaptation,
			[Token(Token = "0x4001A54")]
			FocusPlane,
			[Token(Token = "0x4001A55")]
			PreGradingLog,
			[Token(Token = "0x4001A56")]
			LogLut,
			[Token(Token = "0x4001A57")]
			UserLut
		}

		[Serializable]
		[Token(Token = "0x2000515")]
		public struct Settings
		{
			[Token(Token = "0x4001A58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Mode mode;

			[Token(Token = "0x4001A59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public DepthSettings depth;

			[Token(Token = "0x4001A5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MotionVectorsSettings motionVectors;

			[Token(Token = "0x17000339")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001C79")]
				[Address(RVA = "0x9F4E18", Offset = "0x9F4E18", VA = "0x9F4E18")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000335")]
		public Settings settings
		{
			[Token(Token = "0x6001C71")]
			[Address(RVA = "0x9F4DAC", Offset = "0x9F4DAC", VA = "0x9F4DAC")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001C72")]
			[Address(RVA = "0x9F4DBC", Offset = "0x9F4DBC", VA = "0x9F4DBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000336")]
		public bool willInterrupt
		{
			[Token(Token = "0x6001C73")]
			[Address(RVA = "0x9F4DCC", Offset = "0x9F4DCC", VA = "0x9F4DCC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0x9F4DF0", Offset = "0x9F4DF0", VA = "0x9F4DF0", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0x9ED044", Offset = "0x9ED044", VA = "0x9ED044")]
		public bool IsModeActive(Mode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0x9F4E40", Offset = "0x9F4E40", VA = "0x9F4E40")]
		public BuiltinDebugViewsModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000516")]
	public class ChromaticAberrationModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000517")]
		public struct Settings
		{
			[Token(Token = "0x4001A5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Shift the hue of chromatic aberrations.")]
			public Texture2D spectralTexture;

			[Token(Token = "0x4001A5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Amount of tangential distortion.")]
			[Range(0f, 1f)]
			public float intensity;

			[Token(Token = "0x1700033B")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001C7E")]
				[Address(RVA = "0x9F4EF8", Offset = "0x9F4EF8", VA = "0x9F4EF8")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700033A")]
		public Settings settings
		{
			[Token(Token = "0x6001C7A")]
			[Address(RVA = "0x9F4E90", Offset = "0x9F4E90", VA = "0x9F4E90")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001C7B")]
			[Address(RVA = "0x9F4E9C", Offset = "0x9F4E9C", VA = "0x9F4E9C")]
			set
			{
			}
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0x9F4EAC", Offset = "0x9F4EAC", VA = "0x9F4EAC", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0x9F4F2C", Offset = "0x9F4F2C", VA = "0x9F4F2C")]
		public ChromaticAberrationModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000518")]
	public class ColorGradingModel : PostProcessingModel
	{
		[Token(Token = "0x2000519")]
		public enum Tonemapper
		{
			[Token(Token = "0x4001A62")]
			None,
			[Token(Token = "0x4001A63")]
			ACES,
			[Token(Token = "0x4001A64")]
			Neutral
		}

		[Serializable]
		[Token(Token = "0x200051A")]
		public struct TonemappingSettings
		{
			[Token(Token = "0x4001A65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Tonemapping algorithm to use at the end of the color grading process. Use \"Neutral\" if you need a customizable tonemapper or \"Filmic\" to give a standard filmic look to your scenes.")]
			public Tonemapper tonemapper;

			[Token(Token = "0x4001A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(-0.1f, 0.1f)]
			public float neutralBlackIn;

			[Token(Token = "0x4001A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(1f, 20f)]
			public float neutralWhiteIn;

			[Token(Token = "0x4001A68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(-0.09f, 0.1f)]
			public float neutralBlackOut;

			[Token(Token = "0x4001A69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(1f, 19f)]
			public float neutralWhiteOut;

			[Token(Token = "0x4001A6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0.1f, 20f)]
			public float neutralWhiteLevel;

			[Token(Token = "0x4001A6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(1f, 10f)]
			public float neutralWhiteClip;

			[Token(Token = "0x1700033F")]
			public static TonemappingSettings defaultSettings
			{
				[Token(Token = "0x6001C88")]
				[Address(RVA = "0x9F5170", Offset = "0x9F5170", VA = "0x9F5170")]
				get
				{
					return default(TonemappingSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200051B")]
		public struct BasicSettings
		{
			[Token(Token = "0x4001A6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Adjusts the overall exposure of the scene in EV units. This is applied after HDR effect and right before tonemapping so it won't affect previous effects in the chain.")]
			public float postExposure;

			[Token(Token = "0x4001A6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(-100f, 100f)]
			[Tooltip("Sets the white balance to a custom color temperature.")]
			public float temperature;

			[Token(Token = "0x4001A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(-100f, 100f)]
			[Tooltip("Sets the white balance to compensate for a green or magenta tint.")]
			public float tint;

			[Token(Token = "0x4001A6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(-180f, 180f)]
			[Tooltip("Shift the hue of all colors.")]
			public float hueShift;

			[Token(Token = "0x4001A70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(0f, 2f)]
			[Tooltip("Pushes the intensity of all colors.")]
			public float saturation;

			[Token(Token = "0x4001A71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0f, 2f)]
			[Tooltip("Expands or shrinks the overall range of tonal values.")]
			public float contrast;

			[Token(Token = "0x17000340")]
			public static BasicSettings defaultSettings
			{
				[Token(Token = "0x6001C89")]
				[Address(RVA = "0x9F5198", Offset = "0x9F5198", VA = "0x9F5198")]
				get
				{
					return default(BasicSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200051C")]
		public struct ChannelMixerSettings
		{
			[Token(Token = "0x4001A72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 red;

			[Token(Token = "0x4001A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 green;

			[Token(Token = "0x4001A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 blue;

			[Token(Token = "0x4001A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[HideInInspector]
			public int currentEditingChannel;

			[Token(Token = "0x17000341")]
			public static ChannelMixerSettings defaultSettings
			{
				[Token(Token = "0x6001C8A")]
				[Address(RVA = "0x9F51A8", Offset = "0x9F51A8", VA = "0x9F51A8")]
				get
				{
					return default(ChannelMixerSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200051D")]
		public struct LogWheelsSettings
		{
			[Token(Token = "0x4001A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Trackball("GetSlopeValue")]
			public Color slope;

			[Token(Token = "0x4001A77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Trackball("GetPowerValue")]
			public Color power;

			[Token(Token = "0x4001A78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Trackball("GetOffsetValue")]
			public Color offset;

			[Token(Token = "0x17000342")]
			public static LogWheelsSettings defaultSettings
			{
				[Token(Token = "0x6001C8B")]
				[Address(RVA = "0x9F51C0", Offset = "0x9F51C0", VA = "0x9F51C0")]
				get
				{
					return default(LogWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200051E")]
		public struct LinearWheelsSettings
		{
			[Token(Token = "0x4001A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Trackball("GetLiftValue")]
			public Color lift;

			[Token(Token = "0x4001A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Trackball("GetGammaValue")]
			public Color gamma;

			[Token(Token = "0x4001A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Trackball("GetGainValue")]
			public Color gain;

			[Token(Token = "0x17000343")]
			public static LinearWheelsSettings defaultSettings
			{
				[Token(Token = "0x6001C8C")]
				[Address(RVA = "0x9F51D0", Offset = "0x9F51D0", VA = "0x9F51D0")]
				get
				{
					return default(LinearWheelsSettings);
				}
			}
		}

		[Token(Token = "0x200051F")]
		public enum ColorWheelMode
		{
			[Token(Token = "0x4001A7D")]
			Linear,
			[Token(Token = "0x4001A7E")]
			Log
		}

		[Serializable]
		[Token(Token = "0x2000520")]
		public struct ColorWheelsSettings
		{
			[Token(Token = "0x4001A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ColorWheelMode mode;

			[Token(Token = "0x4001A80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[TrackballGroup]
			public LogWheelsSettings log;

			[Token(Token = "0x4001A81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[TrackballGroup]
			public LinearWheelsSettings linear;

			[Token(Token = "0x17000344")]
			public static ColorWheelsSettings defaultSettings
			{
				[Token(Token = "0x6001C8D")]
				[Address(RVA = "0x9F51E0", Offset = "0x9F51E0", VA = "0x9F51E0")]
				get
				{
					return default(ColorWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000521")]
		public struct CurvesSettings
		{
			[Token(Token = "0x4001A82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ColorGradingCurve master;

			[Token(Token = "0x4001A83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ColorGradingCurve red;

			[Token(Token = "0x4001A84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ColorGradingCurve green;

			[Token(Token = "0x4001A85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ColorGradingCurve blue;

			[Token(Token = "0x4001A86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ColorGradingCurve hueVShue;

			[Token(Token = "0x4001A87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ColorGradingCurve hueVSsat;

			[Token(Token = "0x4001A88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ColorGradingCurve satVSsat;

			[Token(Token = "0x4001A89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public ColorGradingCurve lumVSsat;

			[Token(Token = "0x4001A8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[HideInInspector]
			public int e_CurrentEditingCurve;

			[Token(Token = "0x4001A8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[HideInInspector]
			public bool e_CurveY;

			[Token(Token = "0x4001A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
			[HideInInspector]
			public bool e_CurveR;

			[Token(Token = "0x4001A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
			[HideInInspector]
			public bool e_CurveG;

			[Token(Token = "0x4001A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
			[HideInInspector]
			public bool e_CurveB;

			[Token(Token = "0x17000345")]
			public static CurvesSettings defaultSettings
			{
				[Token(Token = "0x6001C8E")]
				[Address(RVA = "0x9F5208", Offset = "0x9F5208", VA = "0x9F5208")]
				get
				{
					return default(CurvesSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000522")]
		public struct Settings
		{
			[Token(Token = "0x4001A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TonemappingSettings tonemapping;

			[Token(Token = "0x4001A90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public BasicSettings basic;

			[Token(Token = "0x4001A91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public ChannelMixerSettings channelMixer;

			[Token(Token = "0x4001A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public ColorWheelsSettings colorWheels;

			[Token(Token = "0x4001A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public CurvesSettings curves;

			[Token(Token = "0x17000346")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001C8F")]
				[Address(RVA = "0x9F5044", Offset = "0x9F5044", VA = "0x9F5044")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700033C")]
		public Settings settings
		{
			[Token(Token = "0x6001C7F")]
			[Address(RVA = "0x9F4F84", Offset = "0x9F4F84", VA = "0x9F4F84")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001C80")]
			[Address(RVA = "0x9F4F94", Offset = "0x9F4F94", VA = "0x9F4F94")]
			set
			{
			}
		}

		[Token(Token = "0x1700033D")]
		public bool isDirty
		{
			[Token(Token = "0x6001C81")]
			[Address(RVA = "0x9F4FC8", Offset = "0x9F4FC8", VA = "0x9F4FC8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C82")]
			[Address(RVA = "0x9F4FD0", Offset = "0x9F4FD0", VA = "0x9F4FD0")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700033E")]
		public RenderTexture bakedLut
		{
			[Token(Token = "0x6001C83")]
			[Address(RVA = "0x9F4FDC", Offset = "0x9F4FDC", VA = "0x9F4FDC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C84")]
			[Address(RVA = "0x9F4FE4", Offset = "0x9F4FE4", VA = "0x9F4FE4")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0x9F4FF4", Offset = "0x9F4FF4", VA = "0x9F4FF4", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0x9F5118", Offset = "0x9F5118", VA = "0x9F5118", Slot = "5")]
		public override void OnValidate()
		{
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0x9F5124", Offset = "0x9F5124", VA = "0x9F5124")]
		public ColorGradingModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000523")]
	public class DepthOfFieldModel : PostProcessingModel
	{
		[Token(Token = "0x2000524")]
		public enum KernelSize
		{
			[Token(Token = "0x4001A96")]
			Small,
			[Token(Token = "0x4001A97")]
			Medium,
			[Token(Token = "0x4001A98")]
			Large,
			[Token(Token = "0x4001A99")]
			VeryLarge
		}

		[Serializable]
		[Token(Token = "0x2000525")]
		public struct Settings
		{
			[Token(Token = "0x4001A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Min(0.1f)]
			[Tooltip("Distance to the point of focus (only used when none is specified in focusTransform).")]
			public float focusDistance;

			[Token(Token = "0x4001A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0.05f, 32f)]
			[Tooltip("Ratio of aperture (known as f-stop or f-number). The smaller the value is, the shallower the depth of field is.")]
			public float aperture;

			[Token(Token = "0x4001A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(1f, 300f)]
			[Tooltip("Distance between the lens and the film. The larger the value is, the shallower the depth of field is.")]
			public float focalLength;

			[Token(Token = "0x4001A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Calculate the focal length automatically from the field-of-view value set on the camera.")]
			public bool useCameraFov;

			[Token(Token = "0x4001A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Convolution kernel size of the bokeh filter, which determines the maximum radius of bokeh. It also affects the performance (the larger the kernel is, the longer the GPU time is required).")]
			public KernelSize kernelSize;

			[Token(Token = "0x17000348")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001C94")]
				[Address(RVA = "0x9F5970", Offset = "0x9F5970", VA = "0x9F5970")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000347")]
		public Settings settings
		{
			[Token(Token = "0x6001C90")]
			[Address(RVA = "0x9F591C", Offset = "0x9F591C", VA = "0x9F591C")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001C91")]
			[Address(RVA = "0x9F5930", Offset = "0x9F5930", VA = "0x9F5930")]
			set
			{
			}
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x9F5944", Offset = "0x9F5944", VA = "0x9F5944", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x9F599C", Offset = "0x9F599C", VA = "0x9F599C")]
		public DepthOfFieldModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000526")]
	public class EyeAdaptationModel : PostProcessingModel
	{
		[Token(Token = "0x2000527")]
		public enum EyeAdaptationType
		{
			[Token(Token = "0x4001AA1")]
			Progressive,
			[Token(Token = "0x4001AA2")]
			Fixed
		}

		[Serializable]
		[Token(Token = "0x2000528")]
		public struct Settings
		{
			[Token(Token = "0x4001AA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(1f, 99f)]
			[Tooltip("Filters the dark part of the histogram when computing the average luminance to avoid very dark pixels from contributing to the auto exposure. Unit is in percent.")]
			public float lowPercent;

			[Token(Token = "0x4001AA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(1f, 99f)]
			[Tooltip("Filters the bright part of the histogram when computing the average luminance to avoid very dark pixels from contributing to the auto exposure. Unit is in percent.")]
			public float highPercent;

			[Token(Token = "0x4001AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Minimum average luminance to consider for auto exposure.")]
			[Min(0f)]
			public float minLuminance;

			[Token(Token = "0x4001AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Min(0f)]
			[Tooltip("Maximum average luminance to consider for auto exposure.")]
			public float maxLuminance;

			[Token(Token = "0x4001AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Exposure bias. Use this to control the global exposure of the scene.")]
			[Min(0f)]
			public float exposureCompensation;

			[Token(Token = "0x4001AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Use \"Progressive\" if you want the auto exposure to be animated. Use \"Fixed\" otherwise.")]
			public EyeAdaptationType adaptationType;

			[Token(Token = "0x4001AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Min(0f)]
			[Tooltip("Adaptation speed from a dark to a light environment.")]
			public float speedUp;

			[Token(Token = "0x4001AAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Adaptation speed from a light to a dark environment.")]
			[Min(0f)]
			public float speedDown;

			[Token(Token = "0x4001AAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(-16f, -1f)]
			[Tooltip("Lower bound for the brightness range of the generated histogram (Log2).")]
			public int logMin;

			[Token(Token = "0x4001AAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Upper bound for the brightness range of the generated histogram (Log2).")]
			[Range(1f, 16f)]
			public int logMax;

			[Token(Token = "0x1700034A")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001C99")]
				[Address(RVA = "0x9F5A2C", Offset = "0x9F5A2C", VA = "0x9F5A2C")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000349")]
		public Settings settings
		{
			[Token(Token = "0x6001C95")]
			[Address(RVA = "0x9F59CC", Offset = "0x9F59CC", VA = "0x9F59CC")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001C96")]
			[Address(RVA = "0x9F59E4", Offset = "0x9F59E4", VA = "0x9F59E4")]
			set
			{
			}
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x9F59FC", Offset = "0x9F59FC", VA = "0x9F59FC", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x9F5A58", Offset = "0x9F5A58", VA = "0x9F5A58")]
		public EyeAdaptationModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000529")]
	public class GrainModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200052A")]
		public struct Settings
		{
			[Token(Token = "0x4001AAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Enable the use of colored grain.")]
			public bool colored;

			[Token(Token = "0x4001AAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0f, 1f)]
			[Tooltip("Grain strength. Higher means more visible grain.")]
			public float intensity;

			[Token(Token = "0x4001AB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(1f, 3f)]
			[Tooltip("Grain particle size in \"Filmic\" mode.")]
			public float size;

			[Token(Token = "0x4001AB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0f, 1f)]
			[Tooltip("Controls the noisiness response curve based on scene luminance. Lower values mean less noise in dark areas.")]
			public float luminanceContribution;

			[Token(Token = "0x1700034C")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001C9E")]
				[Address(RVA = "0x9F5AB8", Offset = "0x9F5AB8", VA = "0x9F5AB8")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700034B")]
		public Settings settings
		{
			[Token(Token = "0x6001C9A")]
			[Address(RVA = "0x9F5A8C", Offset = "0x9F5A8C", VA = "0x9F5A8C")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001C9B")]
			[Address(RVA = "0x9F5A9C", Offset = "0x9F5A9C", VA = "0x9F5A9C")]
			set
			{
			}
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0x9F5AA8", Offset = "0x9F5AA8", VA = "0x9F5AA8", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x9F5AD0", Offset = "0x9F5AD0", VA = "0x9F5AD0")]
		public GrainModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200052B")]
	public class MotionBlurModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200052C")]
		public struct Settings
		{
			[Token(Token = "0x4001AB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 360f)]
			[Tooltip("The angle of rotary shutter. Larger values give longer exposure.")]
			public float shutterAngle;

			[Token(Token = "0x4001AB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(4f, 32f)]
			[Tooltip("The amount of sample points, which affects quality and performances.")]
			public int sampleCount;

			[Token(Token = "0x4001AB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("The strength of multiple frame blending. The opacity of preceding frames are determined from this coefficient and time differences.")]
			[Range(0f, 1f)]
			public float frameBlending;

			[Token(Token = "0x1700034E")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001CA3")]
				[Address(RVA = "0x9F5B14", Offset = "0x9F5B14", VA = "0x9F5B14")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700034D")]
		public Settings settings
		{
			[Token(Token = "0x6001C9F")]
			[Address(RVA = "0x9F5AE4", Offset = "0x9F5AE4", VA = "0x9F5AE4")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001CA0")]
			[Address(RVA = "0x9F5AF4", Offset = "0x9F5AF4", VA = "0x9F5AF4")]
			set
			{
			}
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0x9F5B00", Offset = "0x9F5B00", VA = "0x9F5B00", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0x9F5B24", Offset = "0x9F5B24", VA = "0x9F5B24")]
		public MotionBlurModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200052D")]
	public class ScreenSpaceReflectionModel : PostProcessingModel
	{
		[Token(Token = "0x200052E")]
		public enum SSRResolution
		{
			[Token(Token = "0x4001AB8")]
			High = 0,
			[Token(Token = "0x4001AB9")]
			Low = 2
		}

		[Token(Token = "0x200052F")]
		public enum SSRReflectionBlendType
		{
			[Token(Token = "0x4001ABB")]
			PhysicallyBased,
			[Token(Token = "0x4001ABC")]
			Additive
		}

		[Serializable]
		[Token(Token = "0x2000530")]
		public struct IntensitySettings
		{
			[Token(Token = "0x4001ABD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 2f)]
			[Tooltip("Nonphysical multiplier for the SSR reflections. 1.0 is physically based.")]
			public float reflectionMultiplier;

			[Token(Token = "0x4001ABE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("How far away from the maxDistance to begin fading SSR.")]
			[Range(0f, 1000f)]
			public float fadeDistance;

			[Token(Token = "0x4001ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Amplify Fresnel fade out. Increase if floor reflections look good close to the surface and bad farther 'under' the floor.")]
			[Range(0f, 1f)]
			public float fresnelFade;

			[Token(Token = "0x4001AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Higher values correspond to a faster Fresnel fade as the reflection changes from the grazing angle.")]
			[Range(0.1f, 10f)]
			public float fresnelFadePower;
		}

		[Serializable]
		[Token(Token = "0x2000531")]
		public struct ReflectionSettings
		{
			[Token(Token = "0x4001AC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("How the reflections are blended into the render.")]
			public SSRReflectionBlendType blendType;

			[Token(Token = "0x4001AC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Half resolution SSRR is much faster, but less accurate.")]
			public SSRResolution reflectionQuality;

			[Token(Token = "0x4001AC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Maximum reflection distance in world units.")]
			[Range(0.1f, 300f)]
			public float maxDistance;

			[Token(Token = "0x4001AC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Max raytracing length.")]
			[Range(16f, 1024f)]
			public int iterationCount;

			[Token(Token = "0x4001AC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(1f, 16f)]
			[Tooltip("Log base 2 of ray tracing coarse step size. Higher traces farther, lower gives better quality silhouettes.")]
			public int stepSize;

			[Token(Token = "0x4001AC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0.01f, 10f)]
			[Tooltip("Typical thickness of columns, walls, furniture, and other objects that reflection rays might pass behind.")]
			public float widthModifier;

			[Token(Token = "0x4001AC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0.1f, 8f)]
			[Tooltip("Blurriness of reflections.")]
			public float reflectionBlur;

			[Token(Token = "0x4001AC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Enable for a performance gain in scenes where most glossy objects are horizontal, like floors, water, and tables. Leave on for scenes with glossy vertical objects.")]
			public bool reflectBackfaces;
		}

		[Serializable]
		[Token(Token = "0x2000532")]
		public struct ScreenEdgeMask
		{
			[Token(Token = "0x4001AC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 1f)]
			[Tooltip("Higher = fade out SSRR near the edge of the screen so that reflections don't pop under camera motion.")]
			public float intensity;
		}

		[Serializable]
		[Token(Token = "0x2000533")]
		public struct Settings
		{
			[Token(Token = "0x4001ACA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ReflectionSettings reflection;

			[Token(Token = "0x4001ACB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IntensitySettings intensity;

			[Token(Token = "0x4001ACC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ScreenEdgeMask screenEdgeMask;

			[Token(Token = "0x17000350")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001CA8")]
				[Address(RVA = "0x9F5BCC", Offset = "0x9F5BCC", VA = "0x9F5BCC")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700034F")]
		public Settings settings
		{
			[Token(Token = "0x6001CA4")]
			[Address(RVA = "0x9F5B3C", Offset = "0x9F5B3C", VA = "0x9F5B3C")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001CA5")]
			[Address(RVA = "0x9F5B5C", Offset = "0x9F5B5C", VA = "0x9F5B5C")]
			set
			{
			}
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0x9F5B7C", Offset = "0x9F5B7C", VA = "0x9F5B7C", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0x9F5C20", Offset = "0x9F5C20", VA = "0x9F5C20")]
		public ScreenSpaceReflectionModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000534")]
	public class UserLutModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000535")]
		public struct Settings
		{
			[Token(Token = "0x4001ACE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Custom lookup texture (strip format, e.g. 256x16).")]
			public Texture2D lut;

			[Token(Token = "0x4001ACF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0f, 1f)]
			[Tooltip("Blending factor.")]
			public float contribution;

			[Token(Token = "0x17000352")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001CAD")]
				[Address(RVA = "0x9F5CD8", Offset = "0x9F5CD8", VA = "0x9F5CD8")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000351")]
		public Settings settings
		{
			[Token(Token = "0x6001CA9")]
			[Address(RVA = "0x9F5C74", Offset = "0x9F5C74", VA = "0x9F5C74")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001CAA")]
			[Address(RVA = "0x9F5C80", Offset = "0x9F5C80", VA = "0x9F5C80")]
			set
			{
			}
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0x9F5C90", Offset = "0x9F5C90", VA = "0x9F5C90", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0x9F5D08", Offset = "0x9F5D08", VA = "0x9F5D08")]
		public UserLutModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000536")]
	public class VignetteModel : PostProcessingModel
	{
		[Token(Token = "0x2000537")]
		public enum Mode
		{
			[Token(Token = "0x4001AD2")]
			Classic,
			[Token(Token = "0x4001AD3")]
			Round,
			[Token(Token = "0x4001AD4")]
			Masked
		}

		[Serializable]
		[Token(Token = "0x2000538")]
		public struct Settings
		{
			[Token(Token = "0x4001AD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Use the \"Classic\" mode for parametric controls. Use \"Round\" to get a perfectly round vignette no matter what the aspect ratio is. Use the \"Masked\" mode to use your own texture mask.")]
			public Mode mode;

			[Token(Token = "0x4001AD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[ColorUsage(false)]
			[Tooltip("Vignette color. Use the alpha channel for transparency.")]
			public Color color;

			[Token(Token = "0x4001AD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Sets the vignette center point (screen center is [0.5,0.5]).")]
			public Vector2 center;

			[Token(Token = "0x4001AD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Range(0f, 1f)]
			[Tooltip("Amount of vignetting on screen.")]
			public float intensity;

			[Token(Token = "0x4001AD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0.01f, 1f)]
			[Tooltip("Smoothness of the vignette borders.")]
			public float smoothness;

			[Token(Token = "0x4001ADA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Range(0f, 1f)]
			[Tooltip("Lower values will make a square-ish vignette.")]
			public float roundness;

			[Token(Token = "0x4001ADB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("A black and white mask to use as a vignette.")]
			public Texture mask;

			[Token(Token = "0x4001ADC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Range(0f, 1f)]
			[Tooltip("Mask opacity.")]
			public float opacity;

			[Token(Token = "0x17000354")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001CB2")]
				[Address(RVA = "0x9F5E40", Offset = "0x9F5E40", VA = "0x9F5E40")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000353")]
		public Settings settings
		{
			[Token(Token = "0x6001CAE")]
			[Address(RVA = "0x9F5D5C", Offset = "0x9F5D5C", VA = "0x9F5D5C")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001CAF")]
			[Address(RVA = "0x9F5D7C", Offset = "0x9F5D7C", VA = "0x9F5D7C")]
			set
			{
			}
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0x9F5DA8", Offset = "0x9F5DA8", VA = "0x9F5DA8", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0x9F5EBC", Offset = "0x9F5EBC", VA = "0x9F5EBC")]
		public VignetteModel()
		{
		}
	}
	[Token(Token = "0x2000539")]
	[ImageEffectAllowedInSceneView]
	[RequireComponent(typeof(Camera))]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	[AddComponentMenu("Effects/Post-Processing Behaviour", -1)]
	public class PostProcessingBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PostProcessingProfile profile;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<Type, KeyValuePair<CameraEvent, CommandBuffer>> m_CommandBuffers;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<PostProcessingComponentBase> m_Components;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<PostProcessingComponentBase, bool> m_ComponentStates;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MaterialFactory m_MaterialFactory;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTextureFactory m_RenderTextureFactory;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PostProcessingContext m_Context;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Camera m_Camera;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PostProcessingProfile m_PreviousProfile;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_RenderingInSceneView;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTexture m_JitteredDepthHistory;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BuiltinDebugViewsComponent m_DebugViews;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AmbientOcclusionComponent m_AmbientOcclusion;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ScreenSpaceReflectionComponent m_ScreenSpaceReflection;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MotionBlurComponent m_MotionBlur;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private TaaComponent m_Taa;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private EyeAdaptationComponent m_EyeAdaptation;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private DepthOfFieldComponent m_DepthOfField;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BloomComponent m_Bloom;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private ChromaticAberrationComponent m_ChromaticAberration;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ColorGradingComponent m_ColorGrading;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private UserLutComponent m_UserLut;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private GrainComponent m_Grain;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private VignetteComponent m_Vignette;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private FxaaComponent m_Fxaa;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<PostProcessingComponentBase> m_ComponentsToEnable;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<PostProcessingComponentBase> m_ComponentsToDisable;

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0x9F5F60", Offset = "0x9F5F60", VA = "0x9F5F60")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0x9F6890", Offset = "0x9F6890", VA = "0x9F6890")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0x9F7494", Offset = "0x9F7494", VA = "0x9F7494")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0x9F759C", Offset = "0x9F759C", VA = "0x9F759C")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0x9F7648", Offset = "0x9F7648", VA = "0x9F7648")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0x9F7C74", Offset = "0x9F7C74", VA = "0x9F7C74")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0x9F7E00", Offset = "0x9F7E00", VA = "0x9F7E00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0x9F81E0", Offset = "0x9F81E0", VA = "0x9F81E0")]
		public void ResetTemporalEffects()
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0x9F7050", Offset = "0x9F7050", VA = "0x9F7050")]
		private void CheckObservers()
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0x9F6EDC", Offset = "0x9F6EDC", VA = "0x9F6EDC")]
		private void DisableComponents()
		{
		}

		[Token(Token = "0x6001CBD")]
		private CommandBuffer AddCommandBuffer<T>(CameraEvent evt, string name) where T : PostProcessingModel
		{
			return null;
		}

		[Token(Token = "0x6001CBE")]
		private void RemoveCommandBuffer<T>() where T : PostProcessingModel
		{
		}

		[Token(Token = "0x6001CBF")]
		private CommandBuffer GetCommandBuffer<T>(CameraEvent evt, string name) where T : PostProcessingModel
		{
			return null;
		}

		[Token(Token = "0x6001CC0")]
		private void TryExecuteCommandBuffer<T>(PostProcessingComponentCommandBuffer<T> component) where T : PostProcessingModel
		{
		}

		[Token(Token = "0x6001CC1")]
		private bool TryPrepareUberImageEffect<T>(PostProcessingComponentRenderTexture<T> component, Material material) where T : PostProcessingModel
		{
			return default(bool);
		}

		[Token(Token = "0x6001CC2")]
		private T AddComponent<T>(T component) where T : PostProcessingComponentBase
		{
			return null;
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0x9F8208", Offset = "0x9F8208", VA = "0x9F8208")]
		public PostProcessingBehaviour()
		{
		}
	}
	[Token(Token = "0x200053A")]
	public abstract class PostProcessingComponentBase
	{
		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PostProcessingContext context;

		[Token(Token = "0x17000355")]
		public abstract bool active
		{
			[Token(Token = "0x6001CC5")]
			get;
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0x9F82C0", Offset = "0x9F82C0", VA = "0x9F82C0", Slot = "4")]
		public virtual DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0x9F82C8", Offset = "0x9F82C8", VA = "0x9F82C8", Slot = "6")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x9F82CC", Offset = "0x9F82CC", VA = "0x9F82CC", Slot = "7")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001CC8")]
		public abstract PostProcessingModel GetModel();

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x9F82D0", Offset = "0x9F82D0", VA = "0x9F82D0")]
		protected PostProcessingComponentBase()
		{
		}
	}
	[Token(Token = "0x200053B")]
	public abstract class PostProcessingComponent<T> : PostProcessingComponentBase where T : PostProcessingModel
	{
		[Token(Token = "0x17000356")]
		public T model
		{
			[Token(Token = "0x6001CCA")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CCB")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x6001CCC")]
		public void Init(PostProcessingContext pcontext, T pmodel)
		{
		}

		[Token(Token = "0x6001CCD")]
		public override PostProcessingModel GetModel()
		{
			return null;
		}

		[Token(Token = "0x6001CCE")]
		protected PostProcessingComponent()
		{
		}
	}
	[Token(Token = "0x200053C")]
	public abstract class PostProcessingComponentCommandBuffer<T> : PostProcessingComponent<T> where T : PostProcessingModel
	{
		[Token(Token = "0x6001CCF")]
		public abstract CameraEvent GetCameraEvent();

		[Token(Token = "0x6001CD0")]
		public abstract string GetName();

		[Token(Token = "0x6001CD1")]
		public abstract void PopulateCommandBuffer(CommandBuffer cb);

		[Token(Token = "0x6001CD2")]
		protected PostProcessingComponentCommandBuffer()
		{
		}
	}
	[Token(Token = "0x200053D")]
	public abstract class PostProcessingComponentRenderTexture<T> : PostProcessingComponent<T> where T : PostProcessingModel
	{
		[Token(Token = "0x6001CD3")]
		public virtual void Prepare(Material material)
		{
		}

		[Token(Token = "0x6001CD4")]
		protected PostProcessingComponentRenderTexture()
		{
		}
	}
	[Token(Token = "0x200053E")]
	public class PostProcessingContext
	{
		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PostProcessingProfile profile;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera camera;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MaterialFactory materialFactory;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RenderTextureFactory renderTextureFactory;

		[Token(Token = "0x17000357")]
		public bool interrupted
		{
			[Token(Token = "0x6001CD5")]
			[Address(RVA = "0x9F82D8", Offset = "0x9F82D8", VA = "0x9F82D8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001CD6")]
			[Address(RVA = "0x9F82E0", Offset = "0x9F82E0", VA = "0x9F82E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000358")]
		public bool isGBufferAvailable
		{
			[Token(Token = "0x6001CD9")]
			[Address(RVA = "0x9F1758", Offset = "0x9F1758", VA = "0x9F1758")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000359")]
		public bool isHdr
		{
			[Token(Token = "0x6001CDA")]
			[Address(RVA = "0x9EF874", Offset = "0x9EF874", VA = "0x9EF874")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035A")]
		public int width
		{
			[Token(Token = "0x6001CDB")]
			[Address(RVA = "0x9ECE30", Offset = "0x9ECE30", VA = "0x9ECE30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700035B")]
		public int height
		{
			[Token(Token = "0x6001CDC")]
			[Address(RVA = "0x9ECE4C", Offset = "0x9ECE4C", VA = "0x9ECE4C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700035C")]
		public Rect viewport
		{
			[Token(Token = "0x6001CDD")]
			[Address(RVA = "0x9EE324", Offset = "0x9EE324", VA = "0x9EE324")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0x9ED054", Offset = "0x9ED054", VA = "0x9ED054")]
		public void Interrupt()
		{
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0x9F6E88", Offset = "0x9F6E88", VA = "0x9F6E88")]
		public PostProcessingContext Reset()
		{
			return null;
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0x9F6888", Offset = "0x9F6888", VA = "0x9F6888")]
		public PostProcessingContext()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200053F")]
	public abstract class PostProcessingModel
	{
		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[GetSet("enabled")]
		private bool m_Enabled;

		[Token(Token = "0x1700035D")]
		public bool enabled
		{
			[Token(Token = "0x6001CDF")]
			[Address(RVA = "0x9F82EC", Offset = "0x9F82EC", VA = "0x9F82EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001CE0")]
			[Address(RVA = "0x9F82F4", Offset = "0x9F82F4", VA = "0x9F82F4")]
			set
			{
			}
		}

		[Token(Token = "0x6001CE1")]
		public abstract void Reset();

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0x9F8310", Offset = "0x9F8310", VA = "0x9F8310", Slot = "5")]
		public virtual void OnValidate()
		{
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0x9F4958", Offset = "0x9F4958", VA = "0x9F4958")]
		protected PostProcessingModel()
		{
		}
	}
	[Token(Token = "0x2000540")]
	public class PostProcessingProfile : ScriptableObject
	{
		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BuiltinDebugViewsModel debugViews;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AntialiasingModel antialiasing;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AmbientOcclusionModel ambientOcclusion;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ScreenSpaceReflectionModel screenSpaceReflection;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DepthOfFieldModel depthOfField;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MotionBlurModel motionBlur;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public EyeAdaptationModel eyeAdaptation;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BloomModel bloom;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ColorGradingModel colorGrading;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UserLutModel userLut;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ChromaticAberrationModel chromaticAberration;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GrainModel grain;

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public VignetteModel vignette;

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0x9F8314", Offset = "0x9F8314", VA = "0x9F8314")]
		public PostProcessingProfile()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000541")]
	public sealed class ColorGradingCurve
	{
		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_Loop;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_ZeroValue;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_Range;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationCurve m_InternalLoopingCurve;

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0x9F5868", Offset = "0x9F5868", VA = "0x9F5868")]
		public ColorGradingCurve(AnimationCurve curve, float zeroValue, bool loop, Vector2 bounds)
		{
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0x9F8748", Offset = "0x9F8748", VA = "0x9F8748")]
		public void Cache()
		{
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0x9F8930", Offset = "0x9F8930", VA = "0x9F8930")]
		public float Evaluate(float t)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000542")]
	public static class GraphicsUtils
	{
		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh s_Quad;

		[Token(Token = "0x1700035E")]
		public static bool isLinearColorSpace
		{
			[Token(Token = "0x6001CE8")]
			[Address(RVA = "0x9F7B8C", Offset = "0x9F7B8C", VA = "0x9F7B8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035F")]
		public static bool supportsDX11
		{
			[Token(Token = "0x6001CE9")]
			[Address(RVA = "0x9F89AC", Offset = "0x9F89AC", VA = "0x9F89AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000360")]
		public static Mesh quad
		{
			[Token(Token = "0x6001CEA")]
			[Address(RVA = "0x9F1460", Offset = "0x9F1460", VA = "0x9F1460")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0x9ECF44", Offset = "0x9ECF44", VA = "0x9ECF44")]
		public static void Blit(Material material, int pass)
		{
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0x9F89D8", Offset = "0x9F89D8", VA = "0x9F89D8")]
		public static void ClearAndBlit(Texture source, RenderTexture destination, Material material, int pass, bool clearColor = true, bool clearDepth = false)
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0x9ED5D0", Offset = "0x9ED5D0", VA = "0x9ED5D0")]
		public static void Destroy(Object obj)
		{
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0x9F8198", Offset = "0x9F8198", VA = "0x9F8198")]
		public static void Dispose()
		{
		}
	}
	[Token(Token = "0x2000543")]
	public sealed class MaterialFactory : IDisposable
	{
		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, Material> m_Materials;

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0x9F6778", Offset = "0x9F6778", VA = "0x9F6778")]
		public MaterialFactory()
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0x9ECC2C", Offset = "0x9ECC2C", VA = "0x9ECC2C")]
		public Material Get(string shaderName)
		{
			return null;
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0x9F80BC", Offset = "0x9F80BC", VA = "0x9F80BC", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000544")]
	public sealed class RenderTextureFactory : IDisposable
	{
		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private HashSet<RenderTexture> m_TemporaryRTs;

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0x9F6800", Offset = "0x9F6800", VA = "0x9F6800")]
		public RenderTextureFactory()
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0x9F7A8C", Offset = "0x9F7A8C", VA = "0x9F7A8C")]
		public RenderTexture Get(RenderTexture baseRenderTexture)
		{
			return null;
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0x9ECE68", Offset = "0x9ECE68", VA = "0x9ECE68")]
		public RenderTexture Get(int width, int height, int depthBuffer = 0, RenderTextureFormat format = RenderTextureFormat.ARGBHalf, RenderTextureReadWrite rw = RenderTextureReadWrite.Default, FilterMode filterMode = FilterMode.Bilinear, TextureWrapMode wrapMode = TextureWrapMode.Clamp, string name = "FactoryTempTexture")
		{
			return null;
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0x9ED060", Offset = "0x9ED060", VA = "0x9ED060")]
		public void Release(RenderTexture rt)
		{
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0x9F7BA8", Offset = "0x9F7BA8", VA = "0x9F7BA8")]
		public void ReleaseAll()
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0x9F8194", Offset = "0x9F8194", VA = "0x9F8194", Slot = "4")]
		public void Dispose()
		{
		}
	}
}
namespace UnityTemplateProjects
{
	[Token(Token = "0x2000545")]
	public class CameraFly : MonoBehaviour
	{
		[Token(Token = "0x2000546")]
		private class CameraState
		{
			[Token(Token = "0x4001B1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yaw;

			[Token(Token = "0x4001B1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pitch;

			[Token(Token = "0x4001B1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float roll;

			[Token(Token = "0x4001B1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float x;

			[Token(Token = "0x4001B20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float y;

			[Token(Token = "0x4001B21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float z;

			[Token(Token = "0x6001CFC")]
			[Address(RVA = "0x9F8BC8", Offset = "0x9F8BC8", VA = "0x9F8BC8")]
			public void SetFromTransform(Transform t)
			{
			}

			[Token(Token = "0x6001CFD")]
			[Address(RVA = "0x9F9120", Offset = "0x9F9120", VA = "0x9F9120")]
			public void Translate(Vector3 translation)
			{
			}

			[Token(Token = "0x6001CFE")]
			[Address(RVA = "0x9F91A0", Offset = "0x9F91A0", VA = "0x9F91A0")]
			public void LerpTowards(CameraState target, float positionLerpPct, float rotationLerpPct)
			{
			}

			[Token(Token = "0x6001CFF")]
			[Address(RVA = "0x9F9228", Offset = "0x9F9228", VA = "0x9F9228")]
			public void UpdateTransform(Transform t)
			{
			}

			[Token(Token = "0x6001D00")]
			[Address(RVA = "0x9F944C", Offset = "0x9F944C", VA = "0x9F944C")]
			public CameraState()
			{
			}
		}

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CameraState m_TargetCameraState;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CameraState m_InterpolatingCameraState;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Exponential boost factor on translation, controllable by mouse wheel.")]
		[Header("Movement Settings")]
		public float boost;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0.001f, 1f)]
		[Tooltip("Time it takes to interpolate camera position 99% of the way to the target.")]
		public float positionLerpTime;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Rotation Settings")]
		[Tooltip("X = Change in mouse position.\nY = Multiplicative factor for camera rotation.")]
		public AnimationCurve mouseSensitivityCurve;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Time it takes to interpolate camera rotation 99% of the way to the target.")]
		[Range(0.001f, 1f)]
		public float rotationLerpTime;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Whether or not to invert our Y axis for mouse input to rotation.")]
		public bool invertY;

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0x9F8B74", Offset = "0x9F8B74", VA = "0x9F8B74")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0x9F8C4C", Offset = "0x9F8C4C", VA = "0x9F8C4C")]
		private Vector3 GetInputTranslationDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0x9F8E7C", Offset = "0x9F8E7C", VA = "0x9F8E7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0x9F9270", Offset = "0x9F9270", VA = "0x9F9270")]
		public CameraFly()
		{
		}
	}
}
