using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using ES3Internal;
using ES3Types;
using Il2CppDummyDll;
using Ilumisoft.VisualStateMachine.Internal;
using Ilumisoft.VisualStateMachine.Obsolete;
using RootMotion.FinalIK;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000003")]
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field)]
public class ES3Serializable : Attribute
{
	[Token(Token = "0x6000007")]
	[Address(RVA = "0xBA9004", Offset = "0xBA9004", VA = "0xBA9004")]
	public ES3Serializable()
	{
	}
}
[Token(Token = "0x2000004")]
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field)]
public class ES3NonSerializable : Attribute
{
	[Token(Token = "0x6000008")]
	[Address(RVA = "0xBA900C", Offset = "0xBA900C", VA = "0xBA900C")]
	public ES3NonSerializable()
	{
	}
}
[Token(Token = "0x2000005")]
public class ES3AutoSave : MonoBehaviour, ISerializationCallbackReceiver
{
	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool saveLayer;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool saveTag;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool saveName;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool saveHideFlags;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool saveActive;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool saveChildren;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	private bool isQuitting;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<UnityEngine.Component> componentsToSave;

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xBA9014", Offset = "0xBA9014", VA = "0xBA9014")]
	public void Reset()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xBA9020", Offset = "0xBA9020", VA = "0xBA9020")]
	public void Awake()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xBA93A0", Offset = "0xBA93A0", VA = "0xBA93A0")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xBA93AC", Offset = "0xBA93AC", VA = "0xBA93AC")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xBA9468", Offset = "0xBA9468", VA = "0xBA9468", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xBA946C", Offset = "0xBA946C", VA = "0xBA946C", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xBA9574", Offset = "0xBA9574", VA = "0xBA9574")]
	public ES3AutoSave()
	{
	}
}
[Token(Token = "0x2000007")]
public class ES3AutoSaveMgr : MonoBehaviour
{
	[Token(Token = "0x2000008")]
	public enum LoadEvent
	{
		[Token(Token = "0x4000014")]
		None,
		[Token(Token = "0x4000015")]
		Awake,
		[Token(Token = "0x4000016")]
		Start
	}

	[Token(Token = "0x2000009")]
	public enum SaveEvent
	{
		[Token(Token = "0x4000018")]
		None,
		[Token(Token = "0x4000019")]
		OnApplicationQuit,
		[Token(Token = "0x400001A")]
		OnApplicationPause
	}

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ES3AutoSaveMgr _current;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string key;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SaveEvent saveEvent;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LoadEvent loadEvent;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ES3SerializableSettings settings;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HashSet<ES3AutoSave> autoSaves;

	[Token(Token = "0x17000003")]
	public static ES3AutoSaveMgr Current
	{
		[Token(Token = "0x6000013")]
		[Address(RVA = "0xBA90C4", Offset = "0xBA90C4", VA = "0xBA90C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000004")]
	public static ES3AutoSaveMgr Instance
	{
		[Token(Token = "0x6000014")]
		[Address(RVA = "0xBA9764", Offset = "0xBA9764", VA = "0xBA9764")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xBA9768", Offset = "0xBA9768", VA = "0xBA9768")]
	public void Save()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xBA9F30", Offset = "0xBA9F30", VA = "0xBA9F30")]
	public void Load()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xBAA04C", Offset = "0xBAA04C", VA = "0xBAA04C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xBAA060", Offset = "0xBAA060", VA = "0xBAA060")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xBAA1F8", Offset = "0xBAA1F8", VA = "0xBAA1F8")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xBAA20C", Offset = "0xBAA20C", VA = "0xBAA20C")]
	private void OnApplicationPause(bool paused)
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xBA92F4", Offset = "0xBA92F4", VA = "0xBA92F4")]
	public static void AddAutoSave(ES3AutoSave autoSave)
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xBA93BC", Offset = "0xBA93BC", VA = "0xBA93BC")]
	public static void RemoveAutoSave(ES3AutoSave autoSave)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xBAA274", Offset = "0xBAA274", VA = "0xBAA274")]
	public ES3AutoSaveMgr()
	{
	}
}
[Token(Token = "0x200000A")]
public static class ES3
{
	[Token(Token = "0x200000B")]
	public enum Location
	{
		[Token(Token = "0x400001C")]
		File,
		[Token(Token = "0x400001D")]
		PlayerPrefs,
		[Token(Token = "0x400001E")]
		InternalMS,
		[Token(Token = "0x400001F")]
		Resources,
		[Token(Token = "0x4000020")]
		Cache
	}

	[Token(Token = "0x200000C")]
	public enum Directory
	{
		[Token(Token = "0x4000022")]
		PersistentDataPath,
		[Token(Token = "0x4000023")]
		DataPath
	}

	[Token(Token = "0x200000D")]
	public enum EncryptionType
	{
		[Token(Token = "0x4000025")]
		None,
		[Token(Token = "0x4000026")]
		AES
	}

	[Token(Token = "0x200000E")]
	public enum CompressionType
	{
		[Token(Token = "0x4000028")]
		None,
		[Token(Token = "0x4000029")]
		Gzip
	}

	[Token(Token = "0x200000F")]
	public enum Format
	{
		[Token(Token = "0x400002B")]
		JSON
	}

	[Token(Token = "0x2000010")]
	public enum ReferenceMode
	{
		[Token(Token = "0x400002D")]
		ByRef,
		[Token(Token = "0x400002E")]
		ByValue,
		[Token(Token = "0x400002F")]
		ByRefAndValue
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xBAA3F0", Offset = "0xBAA3F0", VA = "0xBAA3F0")]
	public static void Save(string key, object value)
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xBAA4D0", Offset = "0xBAA4D0", VA = "0xBAA4D0")]
	public static void Save(string key, object value, string filePath)
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xBAA564", Offset = "0xBAA564", VA = "0xBAA564")]
	public static void Save(string key, object value, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xBAA604", Offset = "0xBAA604", VA = "0xBAA604")]
	public static void Save(string key, object value, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000022")]
	public static void Save<T>(string key, T value)
	{
	}

	[Token(Token = "0x6000023")]
	public static void Save<T>(string key, T value, string filePath)
	{
	}

	[Token(Token = "0x6000024")]
	public static void Save<T>(string key, T value, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000025")]
	public static void Save<T>(string key, T value, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xBAA664", Offset = "0xBAA664", VA = "0xBAA664")]
	public static void SaveRaw(byte[] bytes)
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xBAA918", Offset = "0xBAA918", VA = "0xBAA918")]
	public static void SaveRaw(byte[] bytes, string filePath)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xBAA98C", Offset = "0xBAA98C", VA = "0xBAA98C")]
	public static void SaveRaw(byte[] bytes, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xBAA6C8", Offset = "0xBAA6C8", VA = "0xBAA6C8")]
	public static void SaveRaw(byte[] bytes, ES3Settings settings)
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xBAAFD8", Offset = "0xBAAFD8", VA = "0xBAAFD8")]
	public static void SaveRaw(string str)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xBAB074", Offset = "0xBAB074", VA = "0xBAB074")]
	public static void SaveRaw(string str, string filePath)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xBAB0E8", Offset = "0xBAB0E8", VA = "0xBAB0E8")]
	public static void SaveRaw(string str, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xBAB03C", Offset = "0xBAB03C", VA = "0xBAB03C")]
	public static void SaveRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xBAB160", Offset = "0xBAB160", VA = "0xBAB160")]
	public static void AppendRaw(byte[] bytes)
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xBAB3FC", Offset = "0xBAB3FC", VA = "0xBAB3FC")]
	public static void AppendRaw(byte[] bytes, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xBAB1C4", Offset = "0xBAB1C4", VA = "0xBAB1C4")]
	public static void AppendRaw(byte[] bytes, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xBAB4F0", Offset = "0xBAB4F0", VA = "0xBAB4F0")]
	public static void AppendRaw(string str)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xBAB7B0", Offset = "0xBAB7B0", VA = "0xBAB7B0")]
	public static void AppendRaw(string str, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xBAB554", Offset = "0xBAB554", VA = "0xBAB554")]
	public static void AppendRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xBAB828", Offset = "0xBAB828", VA = "0xBAB828")]
	public static void SaveImage(Texture2D texture, string imagePath)
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xBAB8AC", Offset = "0xBAB8AC", VA = "0xBAB8AC")]
	public static void SaveImage(Texture2D texture, string imagePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xBAB8A0", Offset = "0xBAB8A0", VA = "0xBAB8A0")]
	public static void SaveImage(Texture2D texture, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xBABAC8", Offset = "0xBABAC8", VA = "0xBABAC8")]
	public static void SaveImage(Texture2D texture, int quality, string imagePath)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xBABB40", Offset = "0xBABB40", VA = "0xBABB40")]
	public static void SaveImage(Texture2D texture, int quality, string imagePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xBAB928", Offset = "0xBAB928", VA = "0xBAB928")]
	public static void SaveImage(Texture2D texture, int quality, ES3Settings settings)
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xBABBC8", Offset = "0xBABBC8", VA = "0xBABBC8")]
	public static object Load(string key)
	{
		return null;
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xBABC44", Offset = "0xBABC44", VA = "0xBABC44")]
	public static object Load(string key, string filePath)
	{
		return null;
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xBABCD0", Offset = "0xBABCD0", VA = "0xBABCD0")]
	public static object Load(string key, string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xBABD60", Offset = "0xBABD60", VA = "0xBABD60")]
	public static object Load(string key, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600003E")]
	public static T Load<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x600003F")]
	public static T Load<T>(string key, string filePath)
	{
		return (T)null;
	}

	[Token(Token = "0x6000040")]
	public static T Load<T>(string key, string filePath, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000041")]
	public static T Load<T>(string key, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000042")]
	public static T Load<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x6000043")]
	public static T Load<T>(string key, string filePath, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x6000044")]
	public static T Load<T>(string key, string filePath, T defaultValue, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000045")]
	public static T Load<T>(string key, T defaultValue, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000046")]
	public static void LoadInto<T>(string key, object obj) where T : class
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xBABDB8", Offset = "0xBABDB8", VA = "0xBABDB8")]
	public static void LoadInto(string key, string filePath, object obj)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xBABE4C", Offset = "0xBABE4C", VA = "0xBABE4C")]
	public static void LoadInto(string key, string filePath, object obj, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xBABEEC", Offset = "0xBABEEC", VA = "0xBABEEC")]
	public static void LoadInto(string key, object obj, ES3Settings settings)
	{
	}

	[Token(Token = "0x600004A")]
	public static void LoadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x600004B")]
	public static void LoadInto<T>(string key, string filePath, T obj) where T : class
	{
	}

	[Token(Token = "0x600004C")]
	public static void LoadInto<T>(string key, string filePath, T obj, ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x600004D")]
	public static void LoadInto<T>(string key, T obj, ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xBABF4C", Offset = "0xBABF4C", VA = "0xBABF4C")]
	public static string LoadString(string key, string defaultValue, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xBABFB0", Offset = "0xBABFB0", VA = "0xBABFB0")]
	public static string LoadString(string key, string defaultValue, [Optional] string filePath, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xBAC020", Offset = "0xBAC020", VA = "0xBAC020")]
	public static byte[] LoadRawBytes()
	{
		return null;
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xBAC5C0", Offset = "0xBAC5C0", VA = "0xBAC5C0")]
	public static byte[] LoadRawBytes(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xBAC624", Offset = "0xBAC624", VA = "0xBAC624")]
	public static byte[] LoadRawBytes(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xBAC07C", Offset = "0xBAC07C", VA = "0xBAC07C")]
	public static byte[] LoadRawBytes(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xBAC72C", Offset = "0xBAC72C", VA = "0xBAC72C")]
	public static string LoadRawString()
	{
		return null;
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xBAC7C8", Offset = "0xBAC7C8", VA = "0xBAC7C8")]
	public static string LoadRawString(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xBAC82C", Offset = "0xBAC82C", VA = "0xBAC82C")]
	public static string LoadRawString(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xBAC788", Offset = "0xBAC788", VA = "0xBAC788")]
	public static string LoadRawString(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xBAC89C", Offset = "0xBAC89C", VA = "0xBAC89C")]
	public static Texture2D LoadImage(string imagePath)
	{
		return null;
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xBAC914", Offset = "0xBAC914", VA = "0xBAC914")]
	public static Texture2D LoadImage(string imagePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xBAC904", Offset = "0xBAC904", VA = "0xBAC904")]
	public static Texture2D LoadImage(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xBAC988", Offset = "0xBAC988", VA = "0xBAC988")]
	public static Texture2D LoadImage(byte[] bytes)
	{
		return null;
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xBACA00", Offset = "0xBACA00", VA = "0xBACA00")]
	public static AudioClip LoadAudio(string audioFilePath, AudioType audioType)
	{
		return null;
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xBACA74", Offset = "0xBACA74", VA = "0xBACA74")]
	public static AudioClip LoadAudio(string audioFilePath, AudioType audioType, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600005E")]
	public static byte[] Serialize<T>(T value, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xBAD224", Offset = "0xBAD224", VA = "0xBAD224")]
	internal static byte[] Serialize(object value, ES3Type type, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000060")]
	public static T Deserialize<T>(byte[] bytes, [Optional] ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xBAD844", Offset = "0xBAD844", VA = "0xBAD844")]
	internal static object Deserialize(ES3Type type, byte[] bytes, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000062")]
	public static void DeserializeInto<T>(byte[] bytes, T obj, [Optional] ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x6000063")]
	public static void DeserializeInto<T>(ES3Type type, byte[] bytes, T obj, [Optional] ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xBADD70", Offset = "0xBADD70", VA = "0xBADD70")]
	public static byte[] EncryptBytes(byte[] bytes, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xBADF48", Offset = "0xBADF48", VA = "0xBADF48")]
	public static byte[] DecryptBytes(byte[] bytes, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xBAE020", Offset = "0xBAE020", VA = "0xBAE020")]
	public static string EncryptString(string str, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xBAE0D0", Offset = "0xBAE0D0", VA = "0xBAE0D0")]
	public static string DecryptString(string str, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xBAE180", Offset = "0xBAE180", VA = "0xBAE180")]
	public static void DeleteFile()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xBAE32C", Offset = "0xBAE32C", VA = "0xBAE32C")]
	public static void DeleteFile(string filePath)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xBAE390", Offset = "0xBAE390", VA = "0xBAE390")]
	public static void DeleteFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xBAE1DC", Offset = "0xBAE1DC", VA = "0xBAE1DC")]
	public static void DeleteFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xBAE484", Offset = "0xBAE484", VA = "0xBAE484")]
	public static void CopyFile(string oldFilePath, string newFilePath)
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xBAE8F8", Offset = "0xBAE8F8", VA = "0xBAE8F8")]
	public static void CopyFile(string oldFilePath, string newFilePath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xBAE514", Offset = "0xBAE514", VA = "0xBAE514")]
	public static void CopyFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xBAED6C", Offset = "0xBAED6C", VA = "0xBAED6C")]
	public static void RenameFile(string oldFilePath, string newFilePath)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xBAF1F8", Offset = "0xBAF1F8", VA = "0xBAF1F8")]
	public static void RenameFile(string oldFilePath, string newFilePath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xBAEDFC", Offset = "0xBAEDFC", VA = "0xBAEDFC")]
	public static void RenameFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xBAF298", Offset = "0xBAF298", VA = "0xBAF298")]
	public static void CopyDirectory(string oldDirectoryPath, string newDirectoryPath)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xBAF5D0", Offset = "0xBAF5D0", VA = "0xBAF5D0")]
	public static void CopyDirectory(string oldDirectoryPath, string newDirectoryPath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xBAF328", Offset = "0xBAF328", VA = "0xBAF328")]
	public static void CopyDirectory(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xBAF974", Offset = "0xBAF974", VA = "0xBAF974")]
	public static void RenameDirectory(string oldDirectoryPath, string newDirectoryPath)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xBAFB94", Offset = "0xBAFB94", VA = "0xBAFB94")]
	public static void RenameDirectory(string oldDirectoryPath, string newDirectoryPath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xBAFA04", Offset = "0xBAFA04", VA = "0xBAFA04")]
	public static void RenameDirectory(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xBAFC34", Offset = "0xBAFC34", VA = "0xBAFC34")]
	public static void DeleteDirectory(string directoryPath)
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xBAFDC0", Offset = "0xBAFDC0", VA = "0xBAFDC0")]
	public static void DeleteDirectory(string directoryPath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xBAFC98", Offset = "0xBAFC98", VA = "0xBAFC98")]
	public static void DeleteDirectory(ES3Settings settings)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xBAFE30", Offset = "0xBAFE30", VA = "0xBAFE30")]
	public static void DeleteKey(string key)
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xBAFE94", Offset = "0xBAFE94", VA = "0xBAFE94")]
	public static void DeleteKey(string key, string filePath)
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xBAFF08", Offset = "0xBAFF08", VA = "0xBAFF08")]
	public static void DeleteKey(string key, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xBA9C74", Offset = "0xBA9C74", VA = "0xBA9C74")]
	public static void DeleteKey(string key, ES3Settings settings)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xBB0040", Offset = "0xBB0040", VA = "0xBB0040")]
	public static bool KeyExists(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xBB0280", Offset = "0xBB0280", VA = "0xBB0280")]
	public static bool KeyExists(string key, string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xBB02F4", Offset = "0xBB02F4", VA = "0xBB02F4")]
	public static bool KeyExists(string key, string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xBB00A4", Offset = "0xBB00A4", VA = "0xBB00A4")]
	public static bool KeyExists(string key, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xBB04C0", Offset = "0xBB04C0", VA = "0xBB04C0")]
	public static bool FileExists()
	{
		return default(bool);
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xBB051C", Offset = "0xBB051C", VA = "0xBB051C")]
	public static bool FileExists(string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xBB0580", Offset = "0xBB0580", VA = "0xBB0580")]
	public static bool FileExists(string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xBA9AC4", Offset = "0xBA9AC4", VA = "0xBA9AC4")]
	public static bool FileExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xBB0674", Offset = "0xBB0674", VA = "0xBB0674")]
	public static bool DirectoryExists(string folderPath)
	{
		return default(bool);
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xBB06D8", Offset = "0xBB06D8", VA = "0xBB06D8")]
	public static bool DirectoryExists(string folderPath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xBAF670", Offset = "0xBAF670", VA = "0xBAF670")]
	public static bool DirectoryExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xBB0748", Offset = "0xBB0748", VA = "0xBB0748")]
	public static string[] GetKeys()
	{
		return null;
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xBB0D10", Offset = "0xBB0D10", VA = "0xBB0D10")]
	public static string[] GetKeys(string filePath)
	{
		return null;
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xBB0D74", Offset = "0xBB0D74", VA = "0xBB0D74")]
	public static string[] GetKeys(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xBB07A4", Offset = "0xBB07A4", VA = "0xBB07A4")]
	public static string[] GetKeys(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xBB0FBC", Offset = "0xBB0FBC", VA = "0xBB0FBC")]
	public static string[] GetFiles()
	{
		return null;
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xBB1050", Offset = "0xBB1050", VA = "0xBB1050")]
	public static string[] GetFiles(string directoryPath)
	{
		return null;
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xBB10B4", Offset = "0xBB10B4", VA = "0xBB10B4")]
	public static string[] GetFiles(string directoryPath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xBAF79C", Offset = "0xBAF79C", VA = "0xBAF79C")]
	public static string[] GetFiles(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xBB11B8", Offset = "0xBB11B8", VA = "0xBB11B8")]
	public static string[] GetDirectories()
	{
		return null;
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xBB1214", Offset = "0xBB1214", VA = "0xBB1214")]
	public static string[] GetDirectories(string directoryPath)
	{
		return null;
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xBB1278", Offset = "0xBB1278", VA = "0xBB1278")]
	public static string[] GetDirectories(string directoryPath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xBAF8A8", Offset = "0xBAF8A8", VA = "0xBAF8A8")]
	public static string[] GetDirectories(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xBB12E8", Offset = "0xBB12E8", VA = "0xBB12E8")]
	public static void CreateBackup()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xBB13DC", Offset = "0xBB13DC", VA = "0xBB13DC")]
	public static void CreateBackup(string filePath)
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xBB1440", Offset = "0xBB1440", VA = "0xBB1440")]
	public static void CreateBackup(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xBB1344", Offset = "0xBB1344", VA = "0xBB1344")]
	public static void CreateBackup(ES3Settings settings)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xBB14B0", Offset = "0xBB14B0", VA = "0xBB14B0")]
	public static bool RestoreBackup(string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xBB15C8", Offset = "0xBB15C8", VA = "0xBB15C8")]
	public static bool RestoreBackup(string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xBB1514", Offset = "0xBB1514", VA = "0xBB1514")]
	public static bool RestoreBackup(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xBB1638", Offset = "0xBB1638", VA = "0xBB1638")]
	public static DateTime GetTimestamp()
	{
		return default(DateTime);
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xBB1820", Offset = "0xBB1820", VA = "0xBB1820")]
	public static DateTime GetTimestamp(string filePath)
	{
		return default(DateTime);
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xBB1884", Offset = "0xBB1884", VA = "0xBB1884")]
	public static DateTime GetTimestamp(string filePath, ES3Settings settings)
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xBB1694", Offset = "0xBB1694", VA = "0xBB1694")]
	public static DateTime GetTimestamp(ES3Settings settings)
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xBB19DC", Offset = "0xBB19DC", VA = "0xBB19DC")]
	public static void StoreCachedFile()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xBB1C74", Offset = "0xBB1C74", VA = "0xBB1C74")]
	public static void StoreCachedFile(string filePath)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xBB1CD8", Offset = "0xBB1CD8", VA = "0xBB1CD8")]
	public static void StoreCachedFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xBA9EDC", Offset = "0xBA9EDC", VA = "0xBA9EDC")]
	public static void StoreCachedFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xBB1D48", Offset = "0xBB1D48", VA = "0xBB1D48")]
	public static void CacheFile()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xBB1DA4", Offset = "0xBB1DA4", VA = "0xBB1DA4")]
	public static void CacheFile(string filePath)
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xBB1E08", Offset = "0xBB1E08", VA = "0xBB1E08")]
	public static void CacheFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xBA9C20", Offset = "0xBA9C20", VA = "0xBA9C20")]
	public static void CacheFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xBB2010", Offset = "0xBB2010", VA = "0xBB2010")]
	public static void Init()
	{
	}
}
[Token(Token = "0x2000011")]
public class ES3File
{
	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static Dictionary<string, ES3File> cachedFiles;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, ES3Data> cache;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool syncWithFile;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DateTime timestamp;

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xBB2088", Offset = "0xBB2088", VA = "0xBB2088")]
	public ES3File()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xBB2630", Offset = "0xBB2630", VA = "0xBB2630")]
	public ES3File(string filePath)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xBB26A8", Offset = "0xBB26A8", VA = "0xBB26A8")]
	public ES3File(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xBB2724", Offset = "0xBB2724", VA = "0xBB2724")]
	public ES3File(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xBB272C", Offset = "0xBB272C", VA = "0xBB272C")]
	public ES3File(bool syncWithFile)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xBB27A0", Offset = "0xBB27A0", VA = "0xBB27A0")]
	public ES3File(string filePath, bool syncWithFile)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xBB281C", Offset = "0xBB281C", VA = "0xBB281C")]
	public ES3File(string filePath, ES3Settings settings, bool syncWithFile)
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xBB20F0", Offset = "0xBB20F0", VA = "0xBB20F0")]
	public ES3File(ES3Settings settings, bool syncWithFile)
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xBB2984", Offset = "0xBB2984", VA = "0xBB2984")]
	public ES3File(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xBB2AAC", Offset = "0xBB2AAC", VA = "0xBB2AAC")]
	public void Sync()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xBB2E9C", Offset = "0xBB2E9C", VA = "0xBB2E9C")]
	public void Sync(string filePath, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xBB2AB4", Offset = "0xBB2AB4", VA = "0xBB2AB4")]
	public void Sync([Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xBB2F64", Offset = "0xBB2F64", VA = "0xBB2F64")]
	public void Clear()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xBB2FB4", Offset = "0xBB2FB4", VA = "0xBB2FB4")]
	public string[] GetKeys()
	{
		return null;
	}

	[Token(Token = "0x60000B8")]
	public void Save<T>(string key, T value)
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xBAAB1C", Offset = "0xBAAB1C", VA = "0xBAAB1C")]
	public void SaveRaw(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xBAB474", Offset = "0xBAB474", VA = "0xBAB474")]
	public void AppendRaw(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xBB3158", Offset = "0xBB3158", VA = "0xBB3158")]
	public object Load(string key)
	{
		return null;
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xBB31B0", Offset = "0xBB31B0", VA = "0xBB31B0")]
	public object Load(string key, object defaultValue)
	{
		return null;
	}

	[Token(Token = "0x60000BD")]
	public T Load<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x60000BE")]
	public T Load<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x60000BF")]
	public void LoadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xBAC694", Offset = "0xBAC694", VA = "0xBAC694")]
	public byte[] LoadRawBytes()
	{
		return null;
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xBB3798", Offset = "0xBB3798", VA = "0xBB3798")]
	public string LoadRawString()
	{
		return null;
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xBB3210", Offset = "0xBB3210", VA = "0xBB3210")]
	internal byte[] GetBytes([Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xBB3840", Offset = "0xBB3840", VA = "0xBB3840")]
	public void DeleteKey(string key)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xBB3898", Offset = "0xBB3898", VA = "0xBB3898")]
	public bool KeyExists(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xBB38F0", Offset = "0xBB38F0", VA = "0xBB38F0")]
	public int Size()
	{
		return default(int);
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xBB3A50", Offset = "0xBB3A50", VA = "0xBB3A50")]
	public Type GetKeyType(string key)
	{
		return null;
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xBAAA04", Offset = "0xBAAA04", VA = "0xBAAA04")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static ES3File GetOrCreateCachedFile(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xBB1E78", Offset = "0xBB1E78", VA = "0xBB1E78")]
	internal static void CacheFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xBB1A2C", Offset = "0xBB1A2C", VA = "0xBB1A2C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void Store([Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xBAE400", Offset = "0xBAE400", VA = "0xBAE400")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void RemoveCachedFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xBAE998", Offset = "0xBAE998", VA = "0xBAE998")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void CopyCachedFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xBAFF80", Offset = "0xBAFF80", VA = "0xBAFF80")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void DeleteKey(string key, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xBB036C", Offset = "0xBB036C", VA = "0xBB036C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static bool KeyExists(string key, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xBB05F0", Offset = "0xBB05F0", VA = "0xBB05F0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static bool FileExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xBB0DE4", Offset = "0xBB0DE4", VA = "0xBB0DE4")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static string[] GetKeys(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xBB1124", Offset = "0xBB1124", VA = "0xBB1124")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static string[] GetFiles()
	{
		return null;
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xBB18F4", Offset = "0xBB18F4", VA = "0xBB18F4")]
	internal static DateTime GetTimestamp(ES3Settings settings)
	{
		return default(DateTime);
	}
}
[Token(Token = "0x2000012")]
public class ES3InspectorInfo : MonoBehaviour
{
	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xBB3D98", Offset = "0xBB3D98", VA = "0xBB3D98")]
	public ES3InspectorInfo()
	{
	}
}
[Token(Token = "0x2000013")]
public class ES3ReferenceMgr : ES3ReferenceMgrBase
{
	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xBB3DA0", Offset = "0xBB3DA0", VA = "0xBB3DA0")]
	public ES3ReferenceMgr()
	{
	}
}
[Token(Token = "0x2000014")]
public class ES3Spreadsheet
{
	[Token(Token = "0x2000015")]
	protected struct Index
	{
		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int col;

		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int row;

		[Token(Token = "0x60000EC")]
		[Address(RVA = "0xBB3EA4", Offset = "0xBB3EA4", VA = "0xBB3EA4")]
		public Index(int col, int row)
		{
		}
	}

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int cols;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int rows;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Index, string> cells;

	[Token(Token = "0x4000038")]
	private const string QUOTE = "\"";

	[Token(Token = "0x4000039")]
	private const char QUOTE_CHAR = '"';

	[Token(Token = "0x400003A")]
	private const char COMMA_CHAR = ',';

	[Token(Token = "0x400003B")]
	private const char NEWLINE_CHAR = '\n';

	[Token(Token = "0x400003C")]
	private const string ESCAPED_QUOTE = "\"\"";

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static char[] CHARS_TO_ESCAPE;

	[Token(Token = "0x17000005")]
	public int ColumnCount
	{
		[Token(Token = "0x60000D5")]
		[Address(RVA = "0xBB3DF8", Offset = "0xBB3DF8", VA = "0xBB3DF8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000006")]
	public int RowCount
	{
		[Token(Token = "0x60000D6")]
		[Address(RVA = "0xBB3E00", Offset = "0xBB3E00", VA = "0xBB3E00")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60000D7")]
	public void SetCell<T>(int col, int row, T value)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xBB3E08", Offset = "0xBB3E08", VA = "0xBB3E08")]
	private void SetCellString(int col, int row, string value)
	{
	}

	[Token(Token = "0x60000D9")]
	public T GetCell<T>(int col, int row)
	{
		return (T)null;
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xBB3EAC", Offset = "0xBB3EAC", VA = "0xBB3EAC")]
	internal object GetCell(Type type, int col, int row)
	{
		return null;
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xBB42C4", Offset = "0xBB42C4", VA = "0xBB42C4")]
	public void Load(string filePath)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xBB4370", Offset = "0xBB4370", VA = "0xBB4370")]
	public void Load(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xBB4348", Offset = "0xBB4348", VA = "0xBB4348")]
	public void Load(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xBB46F8", Offset = "0xBB46F8", VA = "0xBB46F8")]
	public void LoadRaw(string str)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xBB47D0", Offset = "0xBB47D0", VA = "0xBB47D0")]
	public void LoadRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xBB43F8", Offset = "0xBB43F8", VA = "0xBB43F8")]
	private void Load(Stream stream, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xBB4870", Offset = "0xBB4870", VA = "0xBB4870")]
	public void Save(string filePath)
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xBB4C58", Offset = "0xBB4C58", VA = "0xBB4C58")]
	public void Save(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xBB4CD4", Offset = "0xBB4CD4", VA = "0xBB4CD4")]
	public void Save(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xBB4CDC", Offset = "0xBB4CDC", VA = "0xBB4CDC")]
	public void Save(string filePath, bool append)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xBB4D58", Offset = "0xBB4D58", VA = "0xBB4D58")]
	public void Save(string filePath, ES3Settings settings, bool append)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xBB48E8", Offset = "0xBB48E8", VA = "0xBB48E8")]
	public void Save(ES3Settings settings, bool append)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xBB4FBC", Offset = "0xBB4FBC", VA = "0xBB4FBC")]
	private static string Escape(string str, bool isAlreadyWrappedInQuotes = false)
	{
		return null;
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xBB50C0", Offset = "0xBB50C0", VA = "0xBB50C0")]
	private static string Unescape(string str)
	{
		return null;
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xBB4DE0", Offset = "0xBB4DE0", VA = "0xBB4DE0")]
	private string[,] ToArray()
	{
		return null;
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xBB5194", Offset = "0xBB5194", VA = "0xBB5194")]
	public ES3Spreadsheet()
	{
	}
}
[Token(Token = "0x2000016")]
public abstract class ES3Reader : IDisposable
{
	[Token(Token = "0x2000017")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class ES3ReaderPropertyEnumerator
	{
		[Token(Token = "0x2000018")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000044")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000045")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000046")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3ReaderPropertyEnumerator <>4__this;

			[Token(Token = "0x17000009")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000130")]
				[Address(RVA = "0xBB5C68", Offset = "0xBB5C68", VA = "0xBB5C68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700000A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000132")]
				[Address(RVA = "0xBB5CB0", Offset = "0xBB5CB0", VA = "0xBB5CB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600012D")]
			[Address(RVA = "0xBB5B8C", Offset = "0xBB5B8C", VA = "0xBB5B8C")]
			[DebuggerHidden]
			public <GetEnumerator>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x600012E")]
			[Address(RVA = "0xBB5BB4", Offset = "0xBB5BB4", VA = "0xBB5BB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600012F")]
			[Address(RVA = "0xBB5BB8", Offset = "0xBB5BB8", VA = "0xBB5BB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000131")]
			[Address(RVA = "0xBB5C70", Offset = "0xBB5C70", VA = "0xBB5C70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Reader reader;

		[Token(Token = "0x600012B")]
		[Address(RVA = "0xBB543C", Offset = "0xBB543C", VA = "0xBB543C")]
		public ES3ReaderPropertyEnumerator(ES3Reader reader)
		{
		}

		[Token(Token = "0x600012C")]
		[Address(RVA = "0xBB0F48", Offset = "0xBB0F48", VA = "0xBB0F48")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__2))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x2000019")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class ES3ReaderRawEnumerator
	{
		[Token(Token = "0x200001A")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000048")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400004A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3ReaderRawEnumerator <>4__this;

			[Token(Token = "0x1700000B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000138")]
				[Address(RVA = "0xBB5EA8", Offset = "0xBB5EA8", VA = "0xBB5EA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700000C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600013A")]
				[Address(RVA = "0xBB5EF0", Offset = "0xBB5EF0", VA = "0xBB5EF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000135")]
			[Address(RVA = "0xBB5CB8", Offset = "0xBB5CB8", VA = "0xBB5CB8")]
			[DebuggerHidden]
			public <GetEnumerator>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000136")]
			[Address(RVA = "0xBB5CE0", Offset = "0xBB5CE0", VA = "0xBB5CE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000137")]
			[Address(RVA = "0xBB5CE4", Offset = "0xBB5CE4", VA = "0xBB5CE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000139")]
			[Address(RVA = "0xBB5EB0", Offset = "0xBB5EB0", VA = "0xBB5EB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Reader reader;

		[Token(Token = "0x6000133")]
		[Address(RVA = "0xBB54DC", Offset = "0xBB54DC", VA = "0xBB54DC")]
		public ES3ReaderRawEnumerator(ES3Reader reader)
		{
		}

		[Token(Token = "0x6000134")]
		[Address(RVA = "0xBB2910", Offset = "0xBB2910", VA = "0xBB2910")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__2))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected int serializationDepth;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal string overridePropertiesName;

	[Token(Token = "0x17000007")]
	public virtual ES3ReaderPropertyEnumerator Properties
	{
		[Token(Token = "0x6000110")]
		[Address(RVA = "0xBB53CC", Offset = "0xBB53CC", VA = "0xBB53CC", Slot = "39")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000008")]
	internal virtual ES3ReaderRawEnumerator RawEnumerator
	{
		[Token(Token = "0x6000111")]
		[Address(RVA = "0xBB546C", Offset = "0xBB546C", VA = "0xBB546C", Slot = "40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60000ED")]
	internal abstract int Read_int();

	[Token(Token = "0x60000EE")]
	internal abstract float Read_float();

	[Token(Token = "0x60000EF")]
	internal abstract bool Read_bool();

	[Token(Token = "0x60000F0")]
	internal abstract char Read_char();

	[Token(Token = "0x60000F1")]
	internal abstract decimal Read_decimal();

	[Token(Token = "0x60000F2")]
	internal abstract double Read_double();

	[Token(Token = "0x60000F3")]
	internal abstract long Read_long();

	[Token(Token = "0x60000F4")]
	internal abstract ulong Read_ulong();

	[Token(Token = "0x60000F5")]
	internal abstract byte Read_byte();

	[Token(Token = "0x60000F6")]
	internal abstract sbyte Read_sbyte();

	[Token(Token = "0x60000F7")]
	internal abstract short Read_short();

	[Token(Token = "0x60000F8")]
	internal abstract ushort Read_ushort();

	[Token(Token = "0x60000F9")]
	internal abstract uint Read_uint();

	[Token(Token = "0x60000FA")]
	internal abstract string Read_string();

	[Token(Token = "0x60000FB")]
	internal abstract byte[] Read_byteArray();

	[Token(Token = "0x60000FC")]
	internal abstract long Read_ref();

	[Token(Token = "0x60000FD")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public abstract string ReadPropertyName();

	[Token(Token = "0x60000FE")]
	protected abstract Type ReadKeyPrefix(bool ignore = false);

	[Token(Token = "0x60000FF")]
	protected abstract void ReadKeySuffix();

	[Token(Token = "0x6000100")]
	internal abstract byte[] ReadElement(bool skip = false);

	[Token(Token = "0x6000101")]
	public abstract void Dispose();

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xBB52BC", Offset = "0xBB52BC", VA = "0xBB52BC", Slot = "26")]
	internal virtual bool Goto(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xBB5378", Offset = "0xBB5378", VA = "0xBB5378", Slot = "27")]
	internal virtual bool StartReadObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xBB538C", Offset = "0xBB538C", VA = "0xBB538C", Slot = "28")]
	internal virtual void EndReadObject()
	{
	}

	[Token(Token = "0x6000105")]
	internal abstract bool StartReadDictionary();

	[Token(Token = "0x6000106")]
	internal abstract void EndReadDictionary();

	[Token(Token = "0x6000107")]
	internal abstract bool StartReadDictionaryKey();

	[Token(Token = "0x6000108")]
	internal abstract void EndReadDictionaryKey();

	[Token(Token = "0x6000109")]
	internal abstract void StartReadDictionaryValue();

	[Token(Token = "0x600010A")]
	internal abstract bool EndReadDictionaryValue();

	[Token(Token = "0x600010B")]
	internal abstract bool StartReadCollection();

	[Token(Token = "0x600010C")]
	internal abstract void EndReadCollection();

	[Token(Token = "0x600010D")]
	internal abstract bool StartReadCollectionItem();

	[Token(Token = "0x600010E")]
	internal abstract bool EndReadCollectionItem();

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xBB539C", Offset = "0xBB539C", VA = "0xBB539C")]
	internal ES3Reader(ES3Settings settings, bool readHeaderAndFooter = true)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xBB550C", Offset = "0xBB550C", VA = "0xBB550C", Slot = "41")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Skip()
	{
	}

	[Token(Token = "0x6000113")]
	public virtual T Read<T>()
	{
		return (T)null;
	}

	[Token(Token = "0x6000114")]
	public virtual void ReadInto<T>(object obj)
	{
	}

	[Token(Token = "0x6000115")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public T ReadProperty<T>()
	{
		return (T)null;
	}

	[Token(Token = "0x6000116")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public T ReadProperty<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xBB5520", Offset = "0xBB5520", VA = "0xBB5520")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public long ReadRefProperty()
	{
		return default(long);
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xBB5550", Offset = "0xBB5550", VA = "0xBB5550")]
	internal Type ReadType()
	{
		return null;
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xBB5624", Offset = "0xBB5624", VA = "0xBB5624")]
	public void SetPrivateProperty(string name, object value, object objectContainingProperty)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xBB57C0", Offset = "0xBB57C0", VA = "0xBB57C0")]
	public void SetPrivateField(string name, object value, object objectContainingField)
	{
	}

	[Token(Token = "0x600011B")]
	public virtual T Read<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x600011C")]
	public virtual T Read<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x600011D")]
	public virtual void ReadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x600011E")]
	protected virtual void ReadObject<T>(object obj, ES3Type type)
	{
	}

	[Token(Token = "0x600011F")]
	protected virtual T ReadObject<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000120")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual T Read<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000121")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void ReadInto<T>(object obj, ES3Type type)
	{
	}

	[Token(Token = "0x6000122")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal Type ReadTypeFromHeader<T>()
	{
		return null;
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xBB595C", Offset = "0xBB595C", VA = "0xBB595C")]
	public static ES3Reader Create()
	{
		return null;
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xBB59B8", Offset = "0xBB59B8", VA = "0xBB59B8")]
	public static ES3Reader Create(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xBB5A1C", Offset = "0xBB5A1C", VA = "0xBB5A1C")]
	public static ES3Reader Create(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xBB0428", Offset = "0xBB0428", VA = "0xBB0428")]
	public static ES3Reader Create(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xBB5A8C", Offset = "0xBB5A8C", VA = "0xBB5A8C")]
	public static ES3Reader Create(byte[] bytes)
	{
		return null;
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xBB3080", Offset = "0xBB3080", VA = "0xBB3080")]
	public static ES3Reader Create(byte[] bytes, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xBB5AF0", Offset = "0xBB5AF0", VA = "0xBB5AF0")]
	internal static ES3Reader Create(Stream stream, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xBADCE0", Offset = "0xBADCE0", VA = "0xBADCE0")]
	internal static ES3Reader Create(Stream stream, ES3Settings settings, bool readHeaderAndFooter)
	{
		return null;
	}
}
[Token(Token = "0x200001B")]
public class ES3XMLReader
{
	[Token(Token = "0x600013B")]
	[Address(RVA = "0xBB5EF8", Offset = "0xBB5EF8", VA = "0xBB5EF8")]
	public ES3XMLReader()
	{
	}
}
[Token(Token = "0x200001C")]
public class ES3Defaults : ScriptableObject
{
	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public ES3SerializableSettings settings;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool addMgrToSceneAutomatically;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool autoUpdateReferences;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool addAllPrefabsToManager;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool logDebugInfo;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool logWarnings;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool logErrors;

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xBB5F00", Offset = "0xBB5F00", VA = "0xBB5F00")]
	public ES3Defaults()
	{
	}
}
[Token(Token = "0x200001D")]
public class ES3Settings : ICloneable
{
	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ES3Settings _defaults;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ES3Defaults _defaultSettingsScriptableObject;

	[Token(Token = "0x4000054")]
	private const string defaultSettingsPath = "ES3/ES3Defaults";

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static ES3Settings _unencryptedUncompressedSettings;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly string[] resourcesExtensions;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private ES3.Location _location;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string path;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ES3.EncryptionType encryptionType;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ES3.CompressionType compressionType;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string encryptionPassword;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ES3.Directory directory;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ES3.Format format;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool prettyPrint;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int bufferSize;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Encoding encoding;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool saveChildren;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public bool typeChecking;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public bool safeReflection;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public ES3.ReferenceMode memberReferenceMode;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public ES3.ReferenceMode referenceMode;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public int serializationDepthLimit;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public string[] assemblyNames;

	[Token(Token = "0x1700000D")]
	public static ES3Defaults defaultSettingsScriptableObject
	{
		[Token(Token = "0x600013D")]
		[Address(RVA = "0xBB5FD4", Offset = "0xBB5FD4", VA = "0xBB5FD4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000E")]
	public static ES3Settings defaultSettings
	{
		[Token(Token = "0x600013E")]
		[Address(RVA = "0xBADE48", Offset = "0xBADE48", VA = "0xBADE48")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000F")]
	internal static ES3Settings unencryptedUncompressedSettings
	{
		[Token(Token = "0x600013F")]
		[Address(RVA = "0xBB60E4", Offset = "0xBB60E4", VA = "0xBB60E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000010")]
	public ES3.Location location
	{
		[Token(Token = "0x6000140")]
		[Address(RVA = "0xBA9A80", Offset = "0xBA9A80", VA = "0xBA9A80")]
		get
		{
			return default(ES3.Location);
		}
		[Token(Token = "0x6000141")]
		[Address(RVA = "0xBB6290", Offset = "0xBB6290", VA = "0xBB6290")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public string FullPath
	{
		[Token(Token = "0x6000142")]
		[Address(RVA = "0xBACEC0", Offset = "0xBACEC0", VA = "0xBACEC0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xBAA47C", Offset = "0xBAA47C", VA = "0xBAA47C")]
	public ES3Settings([Optional] string path, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xBB6634", Offset = "0xBB6634", VA = "0xBB6634")]
	public ES3Settings(string path, params Enum[] enums)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xBB3B40", Offset = "0xBB3B40", VA = "0xBB3B40")]
	public ES3Settings(params Enum[] enums)
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xBB6674", Offset = "0xBB6674", VA = "0xBB6674")]
	public ES3Settings(ES3.EncryptionType encryptionType, string encryptionPassword)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xBB66AC", Offset = "0xBB66AC", VA = "0xBB66AC")]
	public ES3Settings(string path, ES3.EncryptionType encryptionType, string encryptionPassword, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xBB6338", Offset = "0xBB6338", VA = "0xBB6338")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public ES3Settings(bool applyDefaults)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xBB6298", Offset = "0xBB6298", VA = "0xBB6298")]
	private static bool IsAbsolute(string path)
	{
		return default(bool);
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xBB28A4", Offset = "0xBB28A4", VA = "0xBB28A4", Slot = "4")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public object Clone()
	{
		return null;
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xBB6578", Offset = "0xBB6578", VA = "0xBB6578")]
	private void CopyInto(ES3Settings newSettings)
	{
	}
}
[Serializable]
[Token(Token = "0x200001E")]
[EditorBrowsable(EditorBrowsableState.Never)]
public class ES3SerializableSettings : ES3Settings
{
	[Token(Token = "0x600014D")]
	[Address(RVA = "0xBB5F7C", Offset = "0xBB5F7C", VA = "0xBB5F7C")]
	public ES3SerializableSettings()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xBB6AD4", Offset = "0xBB6AD4", VA = "0xBB6AD4")]
	public ES3SerializableSettings(bool applyDefaults)
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xBB6B38", Offset = "0xBB6B38", VA = "0xBB6B38")]
	public ES3SerializableSettings(string path)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xBAA384", Offset = "0xBAA384", VA = "0xBAA384")]
	public ES3SerializableSettings(string path, ES3.Location location)
	{
	}
}
[Token(Token = "0x200001F")]
public class ES3Ref
{
	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public long id;

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xBB6BAC", Offset = "0xBB6BAC", VA = "0xBB6BAC")]
	public ES3Ref(long id)
	{
	}
}
[Token(Token = "0x2000020")]
public class ES3Cloud : ES3WebClass
{
	[Token(Token = "0x2000021")]
	[CompilerGenerated]
	private sealed class <Sync>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x17000016")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000198")]
			[Address(RVA = "0xBB95D0", Offset = "0xBB95D0", VA = "0xBB95D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600019A")]
			[Address(RVA = "0xBB9618", Offset = "0xBB9618", VA = "0xBB9618", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000195")]
		[Address(RVA = "0xBB737C", Offset = "0xBB737C", VA = "0xBB737C")]
		[DebuggerHidden]
		public <Sync>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000196")]
		[Address(RVA = "0xBB9488", Offset = "0xBB9488", VA = "0xBB9488", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000197")]
		[Address(RVA = "0xBB948C", Offset = "0xBB948C", VA = "0xBB948C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000199")]
		[Address(RVA = "0xBB95D8", Offset = "0xBB95D8", VA = "0xBB95D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000022")]
	[CompilerGenerated]
	private sealed class <UploadFile>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public long fileTimestamp;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string user;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string password;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public byte[] bytes;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000018")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600019F")]
			[Address(RVA = "0xBB99FC", Offset = "0xBB99FC", VA = "0xBB99FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001A1")]
			[Address(RVA = "0xBB9A44", Offset = "0xBB9A44", VA = "0xBB9A44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600019B")]
		[Address(RVA = "0xBB7C9C", Offset = "0xBB7C9C", VA = "0xBB7C9C")]
		[DebuggerHidden]
		public <UploadFile>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x600019C")]
		[Address(RVA = "0xBB9620", Offset = "0xBB9620", VA = "0xBB9620", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600019D")]
		[Address(RVA = "0xBB963C", Offset = "0xBB963C", VA = "0xBB963C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0xBB994C", Offset = "0xBB994C", VA = "0xBB994C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0xBB9A04", Offset = "0xBB9A04", VA = "0xBB9A04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000023")]
	[CompilerGenerated]
	private sealed class <DownloadFile>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3File es3File;

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long timestamp;

		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700001A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001A6")]
			[Address(RVA = "0xBB9EDC", Offset = "0xBB9EDC", VA = "0xBB9EDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001A8")]
			[Address(RVA = "0xBB9F24", Offset = "0xBB9F24", VA = "0xBB9F24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0xBB8330", Offset = "0xBB8330", VA = "0xBB8330")]
		[DebuggerHidden]
		public <DownloadFile>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60001A3")]
		[Address(RVA = "0xBB9A4C", Offset = "0xBB9A4C", VA = "0xBB9A4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001A4")]
		[Address(RVA = "0xBB9A68", Offset = "0xBB9A68", VA = "0xBB9A68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001A5")]
		[Address(RVA = "0xBB9E2C", Offset = "0xBB9E2C", VA = "0xBB9E2C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001A7")]
		[Address(RVA = "0xBB9EE4", Offset = "0xBB9EE4", VA = "0xBB9EE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000024")]
	[CompilerGenerated]
	private sealed class <DownloadFile>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long timestamp;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700001C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001AD")]
			[Address(RVA = "0xBBA378", Offset = "0xBBA378", VA = "0xBBA378", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001AF")]
			[Address(RVA = "0xBBA3C0", Offset = "0xBBA3C0", VA = "0xBBA3C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0xBB8358", Offset = "0xBB8358", VA = "0xBB8358")]
		[DebuggerHidden]
		public <DownloadFile>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0xBB9F2C", Offset = "0xBB9F2C", VA = "0xBB9F2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001AB")]
		[Address(RVA = "0xBB9F48", Offset = "0xBB9F48", VA = "0xBB9F48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0xBBA2C8", Offset = "0xBBA2C8", VA = "0xBBA2C8")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0xBBA380", Offset = "0xBBA380", VA = "0xBBA380", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000025")]
	[CompilerGenerated]
	private sealed class <DeleteFile>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700001E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001B4")]
			[Address(RVA = "0xBBA708", Offset = "0xBBA708", VA = "0xBBA708", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001B6")]
			[Address(RVA = "0xBBA750", Offset = "0xBBA750", VA = "0xBBA750", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0xBB8834", Offset = "0xBB8834", VA = "0xBB8834")]
		[DebuggerHidden]
		public <DeleteFile>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x60001B1")]
		[Address(RVA = "0xBBA3C8", Offset = "0xBBA3C8", VA = "0xBBA3C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0xBBA3E4", Offset = "0xBBA3E4", VA = "0xBBA3E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001B3")]
		[Address(RVA = "0xBBA658", Offset = "0xBBA658", VA = "0xBBA658")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001B5")]
		[Address(RVA = "0xBBA710", Offset = "0xBBA710", VA = "0xBBA710", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000026")]
	[CompilerGenerated]
	private sealed class <RenameFile>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Settings newSettings;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string user;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string password;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001BB")]
			[Address(RVA = "0xBBAAD8", Offset = "0xBBAAD8", VA = "0xBBAAD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001BD")]
			[Address(RVA = "0xBBAB20", Offset = "0xBBAB20", VA = "0xBBAB20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0xBB8D94", Offset = "0xBB8D94", VA = "0xBB8D94")]
		[DebuggerHidden]
		public <RenameFile>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0xBBA758", Offset = "0xBBA758", VA = "0xBBA758", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0xBBA774", Offset = "0xBBA774", VA = "0xBBA774", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0xBBAA28", Offset = "0xBBAA28", VA = "0xBBAA28")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0xBBAAE0", Offset = "0xBBAAE0", VA = "0xBBAAE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000027")]
	[CompilerGenerated]
	private sealed class <DownloadFilenames>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string user;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string password;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000022")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001C2")]
			[Address(RVA = "0xBBAEB4", Offset = "0xBBAEB4", VA = "0xBBAEB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001C4")]
			[Address(RVA = "0xBBAEFC", Offset = "0xBBAEFC", VA = "0xBBAEFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0xBB8E60", Offset = "0xBB8E60", VA = "0xBB8E60")]
		[DebuggerHidden]
		public <DownloadFilenames>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0xBBAB28", Offset = "0xBBAB28", VA = "0xBBAB28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0xBBAB44", Offset = "0xBBAB44", VA = "0xBBAB44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0xBBAE04", Offset = "0xBBAE04", VA = "0xBBAE04")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0xBBAEBC", Offset = "0xBBAEBC", VA = "0xBBAEBC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000028")]
	[CompilerGenerated]
	private sealed class <SearchFilenames>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string user;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string password;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string searchPattern;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000024")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001C9")]
			[Address(RVA = "0xBBB2D8", Offset = "0xBBB2D8", VA = "0xBBB2D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001CB")]
			[Address(RVA = "0xBBB320", Offset = "0xBBB320", VA = "0xBBB320", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0xBB8F48", Offset = "0xBB8F48", VA = "0xBB8F48")]
		[DebuggerHidden]
		public <SearchFilenames>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0xBBAF04", Offset = "0xBBAF04", VA = "0xBBAF04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0xBBAF20", Offset = "0xBBAF20", VA = "0xBBAF20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0xBBB228", Offset = "0xBBB228", VA = "0xBBB228")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0xBBB2E0", Offset = "0xBBB2E0", VA = "0xBBB2E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000029")]
	[CompilerGenerated]
	private sealed class <DownloadTimestamp>d__70 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000026")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001D0")]
			[Address(RVA = "0xBBB6B4", Offset = "0xBBB6B4", VA = "0xBBB6B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000027")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001D2")]
			[Address(RVA = "0xBBB6FC", Offset = "0xBBB6FC", VA = "0xBBB6FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0xBB9424", Offset = "0xBB9424", VA = "0xBB9424")]
		[DebuggerHidden]
		public <DownloadTimestamp>d__70(int <>1__state)
		{
		}

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0xBBB328", Offset = "0xBBB328", VA = "0xBBB328", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001CE")]
		[Address(RVA = "0xBBB344", Offset = "0xBBB344", VA = "0xBBB344", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0xBBB604", Offset = "0xBBB604", VA = "0xBBB604")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0xBBB6BC", Offset = "0xBBB6BC", VA = "0xBBB6BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int timeout;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Encoding encoding;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private byte[] _data;

	[Token(Token = "0x17000012")]
	public byte[] data
	{
		[Token(Token = "0x6000154")]
		[Address(RVA = "0xBB6C88", Offset = "0xBB6C88", VA = "0xBB6C88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000013")]
	public string text
	{
		[Token(Token = "0x6000155")]
		[Address(RVA = "0xBB6C90", Offset = "0xBB6C90", VA = "0xBB6C90")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000014")]
	public string[] filenames
	{
		[Token(Token = "0x6000156")]
		[Address(RVA = "0xBB6CC8", Offset = "0xBB6CC8", VA = "0xBB6CC8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000015")]
	public DateTime timestamp
	{
		[Token(Token = "0x6000157")]
		[Address(RVA = "0xBB6D8C", Offset = "0xBB6D8C", VA = "0xBB6D8C")]
		get
		{
			return default(DateTime);
		}
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xBB6BD4", Offset = "0xBB6BD4", VA = "0xBB6BD4")]
	public ES3Cloud(string url, string apiKey)
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xBB6C24", Offset = "0xBB6C24", VA = "0xBB6C24")]
	public ES3Cloud(string url, string apiKey, int timeout)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xBB6EC8", Offset = "0xBB6EC8", VA = "0xBB6EC8")]
	public IEnumerator Sync()
	{
		return null;
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xBB7008", Offset = "0xBB7008", VA = "0xBB7008")]
	public IEnumerator Sync(string filePath)
	{
		return null;
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xBB7098", Offset = "0xBB7098", VA = "0xBB7098")]
	public IEnumerator Sync(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xBB712C", Offset = "0xBB712C", VA = "0xBB712C")]
	public IEnumerator Sync(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xBB71B8", Offset = "0xBB71B8", VA = "0xBB71B8")]
	public IEnumerator Sync(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xBB724C", Offset = "0xBB724C", VA = "0xBB724C")]
	public IEnumerator Sync(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xBB72EC", Offset = "0xBB72EC", VA = "0xBB72EC")]
	public IEnumerator Sync(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xBB6F48", Offset = "0xBB6F48", VA = "0xBB6F48")]
	[IteratorStateMachine(typeof(<Sync>d__20))]
	private IEnumerator Sync(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xBB73A4", Offset = "0xBB73A4", VA = "0xBB73A4")]
	public IEnumerator UploadFile()
	{
		return null;
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xBB747C", Offset = "0xBB747C", VA = "0xBB747C")]
	public IEnumerator UploadFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xBB751C", Offset = "0xBB751C", VA = "0xBB751C")]
	public IEnumerator UploadFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xBB75C0", Offset = "0xBB75C0", VA = "0xBB75C0")]
	public IEnumerator UploadFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xBB7658", Offset = "0xBB7658", VA = "0xBB7658")]
	public IEnumerator UploadFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xBB76FC", Offset = "0xBB76FC", VA = "0xBB76FC")]
	public IEnumerator UploadFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xBB77AC", Offset = "0xBB77AC", VA = "0xBB77AC")]
	public IEnumerator UploadFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xBB7848", Offset = "0xBB7848", VA = "0xBB7848")]
	public IEnumerator UploadFile(ES3File es3File)
	{
		return null;
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xBB7ADC", Offset = "0xBB7ADC", VA = "0xBB7ADC")]
	public IEnumerator UploadFile(ES3File es3File, string user)
	{
		return null;
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xBB7B98", Offset = "0xBB7B98", VA = "0xBB7B98")]
	public IEnumerator UploadFile(ES3File es3File, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xBB7434", Offset = "0xBB7434", VA = "0xBB7434")]
	public IEnumerator UploadFile(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xBB7C44", Offset = "0xBB7C44", VA = "0xBB7C44")]
	public IEnumerator UploadFile(byte[] bytes, ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xBB79F8", Offset = "0xBB79F8", VA = "0xBB79F8")]
	[IteratorStateMachine(typeof(<UploadFile>d__33))]
	private IEnumerator UploadFile(byte[] bytes, ES3Settings settings, string user, string password, long fileTimestamp)
	{
		return null;
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xBB7CC4", Offset = "0xBB7CC4", VA = "0xBB7CC4")]
	public IEnumerator DownloadFile()
	{
		return null;
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xBB7E10", Offset = "0xBB7E10", VA = "0xBB7E10")]
	public IEnumerator DownloadFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xBB7EA4", Offset = "0xBB7EA4", VA = "0xBB7EA4")]
	public IEnumerator DownloadFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xBB7F3C", Offset = "0xBB7F3C", VA = "0xBB7F3C")]
	public IEnumerator DownloadFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xBB7FCC", Offset = "0xBB7FCC", VA = "0xBB7FCC")]
	public IEnumerator DownloadFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xBB8064", Offset = "0xBB8064", VA = "0xBB8064")]
	public IEnumerator DownloadFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xBB8108", Offset = "0xBB8108", VA = "0xBB8108")]
	public IEnumerator DownloadFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xBB819C", Offset = "0xBB819C", VA = "0xBB819C")]
	public IEnumerator DownloadFile(ES3File es3File)
	{
		return null;
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xBB82C4", Offset = "0xBB82C4", VA = "0xBB82C4")]
	public IEnumerator DownloadFile(ES3File es3File, string user)
	{
		return null;
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xBB8328", Offset = "0xBB8328", VA = "0xBB8328")]
	public IEnumerator DownloadFile(ES3File es3File, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xBB81FC", Offset = "0xBB81FC", VA = "0xBB81FC")]
	[IteratorStateMachine(typeof(<DownloadFile>d__44))]
	private IEnumerator DownloadFile(ES3File es3File, string user, string password, long timestamp)
	{
		return null;
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xBB7D48", Offset = "0xBB7D48", VA = "0xBB7D48")]
	[IteratorStateMachine(typeof(<DownloadFile>d__45))]
	private IEnumerator DownloadFile(ES3Settings settings, string user, string password, long timestamp)
	{
		return null;
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xBB8380", Offset = "0xBB8380", VA = "0xBB8380")]
	public IEnumerator DeleteFile()
	{
		return null;
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xBB84C0", Offset = "0xBB84C0", VA = "0xBB84C0")]
	public IEnumerator DeleteFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xBB8550", Offset = "0xBB8550", VA = "0xBB8550")]
	public IEnumerator DeleteFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xBB85E4", Offset = "0xBB85E4", VA = "0xBB85E4")]
	public IEnumerator DeleteFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xBB8670", Offset = "0xBB8670", VA = "0xBB8670")]
	public IEnumerator DeleteFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xBB8704", Offset = "0xBB8704", VA = "0xBB8704")]
	public IEnumerator DeleteFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xBB87A4", Offset = "0xBB87A4", VA = "0xBB87A4")]
	public IEnumerator DeleteFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xBB8400", Offset = "0xBB8400", VA = "0xBB8400")]
	[IteratorStateMachine(typeof(<DeleteFile>d__53))]
	private IEnumerator DeleteFile(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xBB885C", Offset = "0xBB885C", VA = "0xBB885C")]
	public IEnumerator RenameFile(string filePath, string newFilePath)
	{
		return null;
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xBB89E4", Offset = "0xBB89E4", VA = "0xBB89E4")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user)
	{
		return null;
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xBB8AA4", Offset = "0xBB8AA4", VA = "0xBB8AA4")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xBB8B54", Offset = "0xBB8B54", VA = "0xBB8B54")]
	public IEnumerator RenameFile(string filePath, string newFilePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xBB8C14", Offset = "0xBB8C14", VA = "0xBB8C14")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xBB8CD8", Offset = "0xBB8CD8", VA = "0xBB8CD8")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xBB8910", Offset = "0xBB8910", VA = "0xBB8910")]
	[IteratorStateMachine(typeof(<RenameFile>d__60))]
	private IEnumerator RenameFile(ES3Settings settings, ES3Settings newSettings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xBB8DBC", Offset = "0xBB8DBC", VA = "0xBB8DBC")]
	[IteratorStateMachine(typeof(<DownloadFilenames>d__61))]
	public IEnumerator DownloadFilenames(string user = "", string password = "")
	{
		return null;
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xBB8E88", Offset = "0xBB8E88", VA = "0xBB8E88")]
	[IteratorStateMachine(typeof(<SearchFilenames>d__62))]
	public IEnumerator SearchFilenames(string searchPattern, string user = "", string password = "")
	{
		return null;
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xBB8F70", Offset = "0xBB8F70", VA = "0xBB8F70")]
	public IEnumerator DownloadTimestamp()
	{
		return null;
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xBB90B0", Offset = "0xBB90B0", VA = "0xBB90B0")]
	public IEnumerator DownloadTimestamp(string filePath)
	{
		return null;
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xBB9140", Offset = "0xBB9140", VA = "0xBB9140")]
	public IEnumerator DownloadTimestamp(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xBB91D4", Offset = "0xBB91D4", VA = "0xBB91D4")]
	public IEnumerator DownloadTimestamp(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xBB9260", Offset = "0xBB9260", VA = "0xBB9260")]
	public IEnumerator DownloadTimestamp(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xBB92F4", Offset = "0xBB92F4", VA = "0xBB92F4")]
	public IEnumerator DownloadTimestamp(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xBB9394", Offset = "0xBB9394", VA = "0xBB9394")]
	public IEnumerator DownloadTimestamp(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xBB8FF0", Offset = "0xBB8FF0", VA = "0xBB8FF0")]
	[IteratorStateMachine(typeof(<DownloadTimestamp>d__70))]
	private IEnumerator DownloadTimestamp(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xBB7900", Offset = "0xBB7900", VA = "0xBB7900")]
	private long DateTimeToUnixTimestamp(DateTime dt)
	{
		return default(long);
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xBB944C", Offset = "0xBB944C", VA = "0xBB944C")]
	private long GetFileTimestamp(ES3Settings settings)
	{
		return default(long);
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xBB9464", Offset = "0xBB9464", VA = "0xBB9464", Slot = "4")]
	protected override void Reset()
	{
	}
}
[Token(Token = "0x200002A")]
public abstract class ES3Writer : IDisposable
{
	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected HashSet<string> keysToDelete;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal bool writeHeaderAndFooter;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	internal bool overwriteKeys;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected int serializationDepth;

	[Token(Token = "0x60001D3")]
	internal abstract void WriteNull();

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xBBB704", Offset = "0xBBB704", VA = "0xBBB704", Slot = "6")]
	internal virtual void StartWriteFile()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xBBB714", Offset = "0xBBB714", VA = "0xBBB714", Slot = "7")]
	internal virtual void EndWriteFile()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xBBB724", Offset = "0xBBB724", VA = "0xBBB724", Slot = "8")]
	internal virtual void StartWriteObject(string name)
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xBBB734", Offset = "0xBBB734", VA = "0xBBB734", Slot = "9")]
	internal virtual void EndWriteObject(string name)
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xBBB744", Offset = "0xBBB744", VA = "0xBBB744", Slot = "10")]
	internal virtual void StartWriteProperty(string name)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xBBB80C", Offset = "0xBBB80C", VA = "0xBBB80C", Slot = "11")]
	internal virtual void EndWriteProperty(string name)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xBBB810", Offset = "0xBBB810", VA = "0xBBB810", Slot = "12")]
	internal virtual void StartWriteCollection()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xBBB820", Offset = "0xBBB820", VA = "0xBBB820", Slot = "13")]
	internal virtual void EndWriteCollection()
	{
	}

	[Token(Token = "0x60001DC")]
	internal abstract void StartWriteCollectionItem(int index);

	[Token(Token = "0x60001DD")]
	internal abstract void EndWriteCollectionItem(int index);

	[Token(Token = "0x60001DE")]
	internal abstract void StartWriteDictionary();

	[Token(Token = "0x60001DF")]
	internal abstract void EndWriteDictionary();

	[Token(Token = "0x60001E0")]
	internal abstract void StartWriteDictionaryKey(int index);

	[Token(Token = "0x60001E1")]
	internal abstract void EndWriteDictionaryKey(int index);

	[Token(Token = "0x60001E2")]
	internal abstract void StartWriteDictionaryValue(int index);

	[Token(Token = "0x60001E3")]
	internal abstract void EndWriteDictionaryValue(int index);

	[Token(Token = "0x60001E4")]
	public abstract void Dispose();

	[Token(Token = "0x60001E5")]
	internal abstract void WriteRawProperty(string name, byte[] bytes);

	[Token(Token = "0x60001E6")]
	internal abstract void WritePrimitive(int value);

	[Token(Token = "0x60001E7")]
	internal abstract void WritePrimitive(float value);

	[Token(Token = "0x60001E8")]
	internal abstract void WritePrimitive(bool value);

	[Token(Token = "0x60001E9")]
	internal abstract void WritePrimitive(decimal value);

	[Token(Token = "0x60001EA")]
	internal abstract void WritePrimitive(double value);

	[Token(Token = "0x60001EB")]
	internal abstract void WritePrimitive(long value);

	[Token(Token = "0x60001EC")]
	internal abstract void WritePrimitive(ulong value);

	[Token(Token = "0x60001ED")]
	internal abstract void WritePrimitive(uint value);

	[Token(Token = "0x60001EE")]
	internal abstract void WritePrimitive(byte value);

	[Token(Token = "0x60001EF")]
	internal abstract void WritePrimitive(sbyte value);

	[Token(Token = "0x60001F0")]
	internal abstract void WritePrimitive(short value);

	[Token(Token = "0x60001F1")]
	internal abstract void WritePrimitive(ushort value);

	[Token(Token = "0x60001F2")]
	internal abstract void WritePrimitive(char value);

	[Token(Token = "0x60001F3")]
	internal abstract void WritePrimitive(string value);

	[Token(Token = "0x60001F4")]
	internal abstract void WritePrimitive(byte[] value);

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xBBB830", Offset = "0xBBB830", VA = "0xBBB830")]
	protected ES3Writer(ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys)
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xBBB904", Offset = "0xBBB904", VA = "0xBBB904", Slot = "39")]
	internal virtual void Write(string key, Type type, byte[] value)
	{
	}

	[Token(Token = "0x60001F7")]
	public virtual void Write<T>(string key, object value)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xBBBA80", Offset = "0xBBBA80", VA = "0xBBBA80", Slot = "41")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Write(Type type, string key, object value)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xBBBBB0", Offset = "0xBBBBB0", VA = "0xBBBBB0", Slot = "42")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Write(object value, ES3.ReferenceMode memberReferenceMode = ES3.ReferenceMode.ByRef)
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xBBBC70", Offset = "0xBBBC70", VA = "0xBBBC70", Slot = "43")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Write(object value, ES3Type type, ES3.ReferenceMode memberReferenceMode = ES3.ReferenceMode.ByRef)
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xBBC268", Offset = "0xBBC268", VA = "0xBBC268", Slot = "44")]
	internal virtual void WriteRef(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xBBC3D0", Offset = "0xBBC3D0", VA = "0xBBC3D0", Slot = "45")]
	public virtual void WriteProperty(string name, object value)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xBBC3F8", Offset = "0xBBC3F8", VA = "0xBBC3F8", Slot = "46")]
	public virtual void WriteProperty(string name, object value, ES3.ReferenceMode memberReferenceMode)
	{
	}

	[Token(Token = "0x60001FE")]
	public virtual void WriteProperty<T>(string name, object value)
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xBBC528", Offset = "0xBBC528", VA = "0xBBC528", Slot = "48")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void WriteProperty(string name, object value, ES3Type type)
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xBBC550", Offset = "0xBBC550", VA = "0xBBC550", Slot = "49")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void WriteProperty(string name, object value, ES3Type type, ES3.ReferenceMode memberReferenceMode)
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xBBC5DC", Offset = "0xBBC5DC", VA = "0xBBC5DC", Slot = "50")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void WritePropertyByRef(string name, UnityEngine.Object value)
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xBBC6E8", Offset = "0xBBC6E8", VA = "0xBBC6E8")]
	public void WritePrivateProperty(string name, object objectContainingProperty)
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xBBC8EC", Offset = "0xBBC8EC", VA = "0xBBC8EC")]
	public void WritePrivateField(string name, object objectContainingField)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xBBCAF0", Offset = "0xBBCAF0", VA = "0xBBCAF0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivateProperty(string name, object objectContainingProperty, ES3Type type)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xBBCCAC", Offset = "0xBBCCAC", VA = "0xBBCCAC")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivateField(string name, object objectContainingField, ES3Type type)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xBBCE68", Offset = "0xBBCE68", VA = "0xBBCE68")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivatePropertyByRef(string name, object objectContainingProperty)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xBBD068", Offset = "0xBBD068", VA = "0xBBD068")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivateFieldByRef(string name, object objectContainingField)
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xBBB9EC", Offset = "0xBBB9EC", VA = "0xBBB9EC")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WriteType(Type type)
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xBBD268", Offset = "0xBBD268", VA = "0xBBD268")]
	public static ES3Writer Create(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xBB0030", Offset = "0xBB0030", VA = "0xBB0030")]
	public static ES3Writer Create(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xBB2F14", Offset = "0xBB2F14", VA = "0xBB2F14")]
	internal static ES3Writer Create(ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys, bool append)
	{
		return null;
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xBAD6CC", Offset = "0xBAD6CC", VA = "0xBAD6CC")]
	internal static ES3Writer Create(Stream stream, ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys)
	{
		return null;
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xBBC47C", Offset = "0xBBC47C", VA = "0xBBC47C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	protected bool SerializationDepthLimitExceeded()
	{
		return default(bool);
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0xBBD2E4", Offset = "0xBBD2E4", VA = "0xBBD2E4", Slot = "51")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void MarkKeyForDeletion(string key)
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xBBD33C", Offset = "0xBBD33C", VA = "0xBBD33C")]
	protected void Merge()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xBBD4A4", Offset = "0xBBD4A4", VA = "0xBBD4A4")]
	protected void Merge(ES3Reader reader)
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xBBD80C", Offset = "0xBBD80C", VA = "0xBBD80C", Slot = "52")]
	public virtual void Save()
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xBBD820", Offset = "0xBBD820", VA = "0xBBD820", Slot = "53")]
	public virtual void Save(bool overwriteKeys)
	{
	}
}
[Token(Token = "0x200002B")]
public class ES3XMLWriter
{
	[Token(Token = "0x6000213")]
	[Address(RVA = "0xBBD8E4", Offset = "0xBBD8E4", VA = "0xBBD8E4")]
	public ES3XMLWriter()
	{
	}
}
namespace RootMotion
{
	[Token(Token = "0x200002C")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page3.html")]
	[AddComponentMenu("Scripts/RootMotion/Baker")]
	public abstract class Baker : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200002D")]
		public enum Mode
		{
			[Token(Token = "0x40000C2")]
			AnimationClips,
			[Token(Token = "0x40000C3")]
			AnimationStates,
			[Token(Token = "0x40000C4")]
			PlayableDirector,
			[Token(Token = "0x40000C5")]
			Realtime
		}

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("In AnimationClips, AnimationStates or PlayableDirector mode - the frame rate at which the animation clip will be sampled. In Realtime mode - the frame rate at which the pose will be sampled. With the latter, the frame rate is not guaranteed if the player is not able to reach it.")]
		[Range(1f, 90f)]
		public int frameRate;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 0.1f)]
		[Tooltip("Maximum allowed error for keyframe reduction.")]
		public float keyReductionError;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("AnimationClips mode can be used to bake a batch of AnimationClips directly without the need of setting up an AnimatorController. AnimationStates mode is useful for when you need to set up a more complex rig with layers and AvatarMasks in Mecanim. PlayableDirector mode bakes a Timeline. Realtime mode is for continuous baking of gameplay, ragdoll phsysics or PuppetMaster dynamics.")]
		public Mode mode;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("AnimationClips to bake.")]
		public AnimationClip[] animationClips;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The name of the AnimationStates to bake (must be on the base layer) in the Animator above (Right-click on this component header and select 'Find Animation States' to have Baker fill those in automatically, required that state names match with the names of the clips used in them).")]
		public string[] animationStates;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Sets the baked animation clip to loop time and matches the last frame keys with the first. Note that when overwriting a previously baked clip, AnimationClipSettings will be copied from the existing clip.")]
		public bool loop;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The folder to save the baked AnimationClips to.")]
		public string saveToFolder;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("String that will be added to each clip or animation state name for the saved clip. For example if your animation state/clip names were 'Idle' and 'Walk', then with '_Baked' as Append Name, the Baker will create 'Idle_Baked' and 'Walk_Baked' animation clips.")]
		public string appendName;

		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the created AnimationClip file.")]
		public string saveName;

		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public Animator animator;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public PlayableDirector director;

		[Token(Token = "0x17000028")]
		public bool isBaking
		{
			[Token(Token = "0x6000218")]
			[Address(RVA = "0xBBD9FC", Offset = "0xBBD9FC", VA = "0xBBD9FC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000219")]
			[Address(RVA = "0xBBDA04", Offset = "0xBBDA04", VA = "0xBBDA04")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000029")]
		public float bakingProgress
		{
			[Token(Token = "0x600021A")]
			[Address(RVA = "0xBBDA10", Offset = "0xBBDA10", VA = "0xBBDA10")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600021B")]
			[Address(RVA = "0xBBDA18", Offset = "0xBBDA18", VA = "0xBBDA18")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700002A")]
		protected float clipLength
		{
			[Token(Token = "0x6000221")]
			[Address(RVA = "0xBBDA20", Offset = "0xBBDA20", VA = "0xBBDA20")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000222")]
			[Address(RVA = "0xBBDA28", Offset = "0xBBDA28", VA = "0xBBDA28")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0xBBD8EC", Offset = "0xBBD8EC", VA = "0xBBD8EC")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0xBBD930", Offset = "0xBBD930", VA = "0xBBD930")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0xBBD974", Offset = "0xBBD974", VA = "0xBBD974")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0xBBD9B8", Offset = "0xBBD9B8", VA = "0xBBD9B8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600021C")]
		protected abstract Transform GetCharacterRoot();

		[Token(Token = "0x600021D")]
		protected abstract void OnStartBaking();

		[Token(Token = "0x600021E")]
		protected abstract void OnSetLoopFrame(float time);

		[Token(Token = "0x600021F")]
		protected abstract void OnSetCurves(ref AnimationClip clip);

		[Token(Token = "0x6000220")]
		protected abstract void OnSetKeyframes(float time, bool lastFrame);

		[Token(Token = "0x6000223")]
		[Address(RVA = "0xBBDA30", Offset = "0xBBDA30", VA = "0xBBDA30")]
		public void BakeClip()
		{
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0xBBDA34", Offset = "0xBBDA34", VA = "0xBBDA34")]
		public void StartBaking()
		{
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0xBBDA38", Offset = "0xBBDA38", VA = "0xBBDA38")]
		public void StopBaking()
		{
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0xBBDA3C", Offset = "0xBBDA3C", VA = "0xBBDA3C")]
		protected Baker()
		{
		}
	}
	[Token(Token = "0x200002E")]
	public class GenericBaker : Baker
	{
		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If true, produced AnimationClips will be marked as Legacy and usable with the Legacy animation system.")]
		public bool markAsLegacy;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Root Transform of the hierarchy to bake.")]
		public Transform root;

		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Root Node used for root motion.")]
		public Transform rootNode;

		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("List of Transforms to ignore, rotation curves will not be baked for these Transforms.")]
		public Transform[] ignoreList;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("LocalPosition curves will be baked for these Transforms only. If you are baking a character, the pelvis bone should be added to this array.")]
		public Transform[] bakePositionList;

		[Token(Token = "0x40000CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerTransform[] children;

		[Token(Token = "0x40000CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerTransform rootChild;

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int rootChildIndex;

		[Token(Token = "0x6000227")]
		[Address(RVA = "0xBBDB64", Offset = "0xBBDB64", VA = "0xBBDB64")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0xBBDFA8", Offset = "0xBBDFA8", VA = "0xBBDFA8", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0xBBDFB0", Offset = "0xBBDFB0", VA = "0xBBDFB0", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0xBBE1EC", Offset = "0xBBE1EC", VA = "0xBBE1EC", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0xBBE450", Offset = "0xBBE450", VA = "0xBBE450", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0xBBE768", Offset = "0xBBE768", VA = "0xBBE768", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0xBBDD90", Offset = "0xBBDD90", VA = "0xBBDD90")]
		private bool IsIgnored(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0xBBDE48", Offset = "0xBBDE48", VA = "0xBBDE48")]
		private bool BakePosition(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0xBBE9C8", Offset = "0xBBE9C8", VA = "0xBBE9C8")]
		public GenericBaker()
		{
		}
	}
	[Token(Token = "0x200002F")]
	public class TQ
	{
		[Token(Token = "0x40000CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 t;

		[Token(Token = "0x40000CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion q;

		[Token(Token = "0x6000230")]
		[Address(RVA = "0xBBEA30", Offset = "0xBBEA30", VA = "0xBBEA30")]
		public TQ(Vector3 translation, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000030")]
	public class AvatarUtility
	{
		[Token(Token = "0x6000231")]
		[Address(RVA = "0xBBEA94", Offset = "0xBBEA94", VA = "0xBBEA94")]
		public static Quaternion GetPostRotation(Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0xBBECF0", Offset = "0xBBECF0", VA = "0xBBECF0")]
		public static TQ GetIKGoalTQ(Avatar avatar, float humanScale, AvatarIKGoal avatarIKGoal, TQ bodyPositionRotation, TQ boneTQ)
		{
			return null;
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0xBBECD0", Offset = "0xBBECD0", VA = "0xBBECD0")]
		public static HumanBodyBones HumanIDFromAvatarIKGoal(AvatarIKGoal avatarIKGoal)
		{
			return default(HumanBodyBones);
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0xBBF360", Offset = "0xBBF360", VA = "0xBBF360")]
		public AvatarUtility()
		{
		}
	}
	[Token(Token = "0x2000031")]
	public static class BakerUtilities
	{
		[Token(Token = "0x6000235")]
		[Address(RVA = "0xBBF368", Offset = "0xBBF368", VA = "0xBBF368")]
		public static void ReduceKeyframes(AnimationCurve curve, float maxError)
		{
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0xBBF3A0", Offset = "0xBBF3A0", VA = "0xBBF3A0")]
		public static Keyframe[] GetReducedKeyframes(AnimationCurve curve, float maxError)
		{
			return null;
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0xBBF764", Offset = "0xBBF764", VA = "0xBBF764")]
		public static void SetLoopFrame(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0xBBF944", Offset = "0xBBF944", VA = "0xBBF944")]
		public static void SetTangentMode(AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0xBBF948", Offset = "0xBBF948", VA = "0xBBF948")]
		public static Quaternion EnsureQuaternionContinuity(Quaternion lastQ, Quaternion q)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x2000032")]
	public class BakerHumanoidQT
	{
		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string Qx;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Qy;

		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Qz;

		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string Qw;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string Tx;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string Ty;

		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string Tz;

		[Token(Token = "0x40000D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve rotX;

		[Token(Token = "0x40000D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve rotY;

		[Token(Token = "0x40000DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve rotZ;

		[Token(Token = "0x40000DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve rotW;

		[Token(Token = "0x40000DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve posX;

		[Token(Token = "0x40000DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve posY;

		[Token(Token = "0x40000DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve posZ;

		[Token(Token = "0x40000DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AvatarIKGoal goal;

		[Token(Token = "0x40000E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion lastQ;

		[Token(Token = "0x40000E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool lastQSet;

		[Token(Token = "0x600023A")]
		[Address(RVA = "0xBBFADC", Offset = "0xBBFADC", VA = "0xBBFADC")]
		public BakerHumanoidQT(string name)
		{
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0xBBFE40", Offset = "0xBBFE40", VA = "0xBBFE40")]
		public BakerHumanoidQT(Transform transform, AvatarIKGoal goal, string name)
		{
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0xBBFCA8", Offset = "0xBBFCA8", VA = "0xBBFCA8")]
		public void Reset()
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0xBC0028", Offset = "0xBC0028", VA = "0xBC0028")]
		public void SetIKKeyframes(float time, Avatar avatar, Transform root, float humanScale, Vector3 bodyPosition, Quaternion bodyRotation)
		{
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0xBC03B8", Offset = "0xBC03B8", VA = "0xBC03B8")]
		public void SetKeyframes(float time, Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0xBC04A8", Offset = "0xBC04A8", VA = "0xBC04A8")]
		public void MoveLastKeyframes(float time)
		{
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0xBC058C", Offset = "0xBC058C", VA = "0xBC058C")]
		public void SetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0xBC0510", Offset = "0xBC0510", VA = "0xBC0510")]
		private void MoveLastKeyframe(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0xBC05F4", Offset = "0xBC05F4", VA = "0xBC05F4")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0xBC069C", Offset = "0xBC069C", VA = "0xBC069C")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000033")]
	public class BakerMuscle
	{
		[Token(Token = "0x40000E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int muscleIndex;

		[Token(Token = "0x40000E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string propertyName;

		[Token(Token = "0x6000244")]
		[Address(RVA = "0xBC0988", Offset = "0xBC0988", VA = "0xBC0988")]
		public BakerMuscle(int muscleIndex)
		{
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0xBC09F8", Offset = "0xBC09F8", VA = "0xBC09F8")]
		private string MuscleNameToPropertyName(string n)
		{
			return null;
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0xBC1494", Offset = "0xBC1494", VA = "0xBC1494")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000247")]
		[Address(RVA = "0xBC153C", Offset = "0xBC153C", VA = "0xBC153C")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0xBC142C", Offset = "0xBC142C", VA = "0xBC142C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0xBC1630", Offset = "0xBC1630", VA = "0xBC1630")]
		public void SetKeyframe(float time, float[] muscles)
		{
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0xBC166C", Offset = "0xBC166C", VA = "0xBC166C")]
		public void SetLoopFrame(float time)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000034")]
	public class BakerTransform
	{
		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve posX;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve posY;

		[Token(Token = "0x40000E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve posZ;

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve rotX;

		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve rotY;

		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve rotZ;

		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve rotW;

		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string relativePath;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool recordPosition;

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 relativePosition;

		[Token(Token = "0x40000F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isRootNode;

		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion relativeRotation;

		[Token(Token = "0x600024B")]
		[Address(RVA = "0xBBDF00", Offset = "0xBBDF00", VA = "0xBBDF00")]
		public BakerTransform(Transform transform, Transform root, bool recordPosition, bool isRootNode)
		{
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0xBBE1D8", Offset = "0xBBE1D8", VA = "0xBBE1D8")]
		public void SetRelativeSpace(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0xBBE4B4", Offset = "0xBBE4B4", VA = "0xBBE4B4")]
		public void SetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x600024E")]
		[Address(RVA = "0xBC1674", Offset = "0xBC1674", VA = "0xBC1674")]
		private void AddRootMotionCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0xBBE080", Offset = "0xBBE080", VA = "0xBBE080")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000250")]
		[Address(RVA = "0xBC18FC", Offset = "0xBC18FC", VA = "0xBC18FC")]
		public void ReduceKeyframes(float maxError)
		{
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0xBBE7D4", Offset = "0xBBE7D4", VA = "0xBBE7D4")]
		public void SetKeyframes(float time)
		{
		}

		[Token(Token = "0x6000252")]
		[Address(RVA = "0xBBE258", Offset = "0xBBE258", VA = "0xBBE258")]
		public void AddLoopFrame(float time)
		{
		}
	}
	[Token(Token = "0x2000035")]
	public class HumanoidBaker : Baker
	{
		[Token(Token = "0x40000F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Should the hand IK curves be added to the animation? Disable this if the original hand positions are not important when using the clip on another character via Humanoid retargeting.")]
		public bool bakeHandIK;

		[Token(Token = "0x40000F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 0.1f)]
		[Tooltip("Max keyframe reduction error for the Root.Q/T, LeftFoot IK and RightFoot IK channels. Having a larger error value for 'Key Reduction Error' and a smaller one for this enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		public float IKKeyReductionError;

		[Token(Token = "0x40000F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Frame rate divider for the muscle curves. If you have 'Frame Rate' set to 30, and this value set to 3, the muscle curves will be baked at 10 fps. Only the Root Q/T and Hand and Foot IK curves will be baked at 30. This enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		[Range(1f, 9f)]
		public int muscleFrameRateDiv;

		[Token(Token = "0x40000F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BakerMuscle[] bakerMuscles;

		[Token(Token = "0x40000F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private BakerHumanoidQT rootQT;

		[Token(Token = "0x40000F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BakerHumanoidQT leftFootQT;

		[Token(Token = "0x40000F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerHumanoidQT rightFootQT;

		[Token(Token = "0x40000F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerHumanoidQT leftHandQT;

		[Token(Token = "0x40000FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BakerHumanoidQT rightHandQT;

		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] muscles;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HumanPose pose;

		[Token(Token = "0x40000FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private HumanPoseHandler handler;

		[Token(Token = "0x40000FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 bodyPosition;

		[Token(Token = "0x40000FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion bodyRotation;

		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int mN;

		[Token(Token = "0x4000101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion lastBodyRotation;

		[Token(Token = "0x6000253")]
		[Address(RVA = "0xBC1964", Offset = "0xBC1964", VA = "0xBC1964")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0xBC1EC4", Offset = "0xBC1EC4", VA = "0xBC1EC4", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0xBC1EE0", Offset = "0xBC1EE0", VA = "0xBC1EE0", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6000256")]
		[Address(RVA = "0xBC1FBC", Offset = "0xBC1FBC", VA = "0xBC1FBC", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0xBC2078", Offset = "0xBC2078", VA = "0xBC2078", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0xBC2218", Offset = "0xBC2218", VA = "0xBC2218", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0xBC252C", Offset = "0xBC252C", VA = "0xBC252C")]
		private void UpdateHumanPose()
		{
		}

		[Token(Token = "0x600025A")]
		[Address(RVA = "0xBC2604", Offset = "0xBC2604", VA = "0xBC2604")]
		public HumanoidBaker()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000036")]
	public enum Axis
	{
		[Token(Token = "0x4000103")]
		X,
		[Token(Token = "0x4000104")]
		Y,
		[Token(Token = "0x4000105")]
		Z
	}
	[Token(Token = "0x2000037")]
	public class AxisTools
	{
		[Token(Token = "0x600025B")]
		[Address(RVA = "0xBC26B4", Offset = "0xBC26B4", VA = "0xBC26B4")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0xBC2794", Offset = "0xBC2794", VA = "0xBC2794")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0xBC27CC", Offset = "0xBC27CC", VA = "0xBC27CC")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0xBC2914", Offset = "0xBC2914", VA = "0xBC2914")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0xBC28C8", Offset = "0xBC28C8", VA = "0xBC28C8")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0xBC2A10", Offset = "0xBC2A10", VA = "0xBC2A10")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0xBC2A54", Offset = "0xBC2A54", VA = "0xBC2A54")]
		public static Vector3 GetAxisVectorToDirection(Quaternion r, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0xBC2EE0", Offset = "0xBC2EE0", VA = "0xBC2EE0")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000038")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x2000039")]
		public class LimbOrientation
		{
			[Token(Token = "0x400010A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x400010B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x400010C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x6000266")]
			[Address(RVA = "0xBC3214", Offset = "0xBC3214", VA = "0xBC3214")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x4000107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x1700002B")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x6000264")]
			[Address(RVA = "0xBC2F5C", Offset = "0xBC2F5C", VA = "0xBC2F5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x6000265")]
			[Address(RVA = "0xBC3288", Offset = "0xBC3288", VA = "0xBC3288")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0xBC2EE8", Offset = "0xBC2EE8", VA = "0xBC2EE8")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x200003A")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x200003B")]
		public enum BoneType
		{
			[Token(Token = "0x4000120")]
			Unassigned,
			[Token(Token = "0x4000121")]
			Spine,
			[Token(Token = "0x4000122")]
			Head,
			[Token(Token = "0x4000123")]
			Arm,
			[Token(Token = "0x4000124")]
			Leg,
			[Token(Token = "0x4000125")]
			Tail,
			[Token(Token = "0x4000126")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x200003C")]
		public enum BoneSide
		{
			[Token(Token = "0x4000128")]
			Center,
			[Token(Token = "0x4000129")]
			Left,
			[Token(Token = "0x400012A")]
			Right
		}

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x400011E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x6000267")]
		[Address(RVA = "0xBC3540", Offset = "0xBC3540", VA = "0xBC3540")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0xBC380C", Offset = "0xBC380C", VA = "0xBC380C")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0xBC3A48", Offset = "0xBC3A48", VA = "0xBC3A48")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0xBC3ABC", Offset = "0xBC3ABC", VA = "0xBC3ABC")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0xBC3B50", Offset = "0xBC3B50", VA = "0xBC3B50")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0xBC36F4", Offset = "0xBC36F4", VA = "0xBC36F4")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0xBC39C0", Offset = "0xBC39C0", VA = "0xBC39C0")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0xBC4288", Offset = "0xBC4288", VA = "0xBC4288")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0xBC40E0", Offset = "0xBC40E0", VA = "0xBC40E0")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0xBC41B4", Offset = "0xBC41B4", VA = "0xBC41B4")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0xBC3D38", Offset = "0xBC3D38", VA = "0xBC3D38")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000272")]
		[Address(RVA = "0xBC3DD4", Offset = "0xBC3DD4", VA = "0xBC3DD4")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0xBC3E70", Offset = "0xBC3E70", VA = "0xBC3E70")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0xBC3F0C", Offset = "0xBC3F0C", VA = "0xBC3F0C")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0xBC3FA8", Offset = "0xBC3FA8", VA = "0xBC3FA8")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0xBC4044", Offset = "0xBC4044", VA = "0xBC4044")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0xBC4470", Offset = "0xBC4470", VA = "0xBC4470")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0xBC3C64", Offset = "0xBC3C64", VA = "0xBC3C64")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000279")]
		[Address(RVA = "0xBC43EC", Offset = "0xBC43EC", VA = "0xBC43EC")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0xBC44D0", Offset = "0xBC44D0", VA = "0xBC44D0")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0xBC4590", Offset = "0xBC4590", VA = "0xBC4590")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0xBC4378", Offset = "0xBC4378", VA = "0xBC4378")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0xBC4308", Offset = "0xBC4308", VA = "0xBC4308")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200003D")]
	public class BipedReferences
	{
		[Token(Token = "0x200003E")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x400013C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x400013D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x1700002F")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x6000298")]
				[Address(RVA = "0xBCB058", Offset = "0xBCB058", VA = "0xBCB058")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x6000297")]
			[Address(RVA = "0xBCB044", Offset = "0xBCB044", VA = "0xBCB044")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x4000135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x1700002D")]
		public virtual bool isFilled
		{
			[Token(Token = "0x600027F")]
			[Address(RVA = "0xBC7380", Offset = "0xBC7380", VA = "0xBC7380", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700002E")]
		public bool isEmpty
		{
			[Token(Token = "0x6000280")]
			[Address(RVA = "0xBC76DC", Offset = "0xBC76DC", VA = "0xBC76DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0xBC76EC", Offset = "0xBC76EC", VA = "0xBC76EC", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0xBC7A78", Offset = "0xBC7A78", VA = "0xBC7A78", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0xBC7E08", Offset = "0xBC7E08", VA = "0xBC7E08")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0xBC852C", Offset = "0xBC852C", VA = "0xBC852C")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0xBC809C", Offset = "0xBC809C", VA = "0xBC809C")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0xBC8DB8", Offset = "0xBC8DB8", VA = "0xBC8DB8")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0xBC8EA4", Offset = "0xBC8EA4", VA = "0xBC8EA4")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0xBC99C4", Offset = "0xBC99C4", VA = "0xBC99C4")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0xBC97D0", Offset = "0xBC97D0", VA = "0xBC97D0")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0xBC9570", Offset = "0xBC9570", VA = "0xBC9570")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0xBC8F40", Offset = "0xBC8F40", VA = "0xBC8F40")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0xBC98C4", Offset = "0xBC98C4", VA = "0xBC98C4")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0xBC9AA4", Offset = "0xBC9AA4", VA = "0xBC9AA4")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0xBCA64C", Offset = "0xBCA64C", VA = "0xBCA64C")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600028F")]
		[Address(RVA = "0xBCA0F4", Offset = "0xBCA0F4", VA = "0xBCA0F4")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0xBCA998", Offset = "0xBCA998", VA = "0xBCA998")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0xBCA454", Offset = "0xBCA454", VA = "0xBCA454")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0xBCA9A0", Offset = "0xBCA9A0", VA = "0xBCA9A0")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0xBCA9A8", Offset = "0xBCA9A8", VA = "0xBCA9A8")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0xBCAB68", Offset = "0xBCAB68", VA = "0xBCAB68")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0xBCAFDC", Offset = "0xBCAFDC", VA = "0xBCAFDC")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0xBC801C", Offset = "0xBC801C", VA = "0xBC801C")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x200003F")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x6000299")]
		[Address(RVA = "0xBCB060", Offset = "0xBCB060", VA = "0xBCB060")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x2000040")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x400013F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x600029A")]
		[Address(RVA = "0xBCB068", Offset = "0xBCB068", VA = "0xBCB068")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0xBCB160", Offset = "0xBCB160", VA = "0xBCB160")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x2000041")]
	public class Hierarchy
	{
		[Token(Token = "0x600029C")]
		[Address(RVA = "0xBCAF58", Offset = "0xBCAF58", VA = "0xBCAF58")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0xBCAE4C", Offset = "0xBCAE4C", VA = "0xBCAE4C")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0xBC90A8", Offset = "0xBC90A8", VA = "0xBC90A8")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0xBC96C0", Offset = "0xBC96C0", VA = "0xBC96C0")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xBC9328", Offset = "0xBC9328", VA = "0xBC9328")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0xBCB170", Offset = "0xBCB170", VA = "0xBCB170")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xBC91D8", Offset = "0xBC91D8", VA = "0xBC91D8")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0xBCB264", Offset = "0xBCB264", VA = "0xBCB264")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0xBCB5D0", Offset = "0xBCB5D0", VA = "0xBCB5D0")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0xBCB3C8", Offset = "0xBCB3C8", VA = "0xBCB3C8")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0xBCB758", Offset = "0xBCB758", VA = "0xBCB758")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x2000042")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x4000141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0xBCB760", Offset = "0xBCB760", VA = "0xBCB760")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xBCB7E8", Offset = "0xBCB7E8", VA = "0xBCB7E8")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000043")]
	public enum InterpolationMode
	{
		[Token(Token = "0x4000144")]
		None,
		[Token(Token = "0x4000145")]
		InOutCubic,
		[Token(Token = "0x4000146")]
		InOutQuintic,
		[Token(Token = "0x4000147")]
		InOutSine,
		[Token(Token = "0x4000148")]
		InQuintic,
		[Token(Token = "0x4000149")]
		InQuartic,
		[Token(Token = "0x400014A")]
		InCubic,
		[Token(Token = "0x400014B")]
		InQuadratic,
		[Token(Token = "0x400014C")]
		InElastic,
		[Token(Token = "0x400014D")]
		InElasticSmall,
		[Token(Token = "0x400014E")]
		InElasticBig,
		[Token(Token = "0x400014F")]
		InSine,
		[Token(Token = "0x4000150")]
		InBack,
		[Token(Token = "0x4000151")]
		OutQuintic,
		[Token(Token = "0x4000152")]
		OutQuartic,
		[Token(Token = "0x4000153")]
		OutCubic,
		[Token(Token = "0x4000154")]
		OutInCubic,
		[Token(Token = "0x4000155")]
		OutInQuartic,
		[Token(Token = "0x4000156")]
		OutElastic,
		[Token(Token = "0x4000157")]
		OutElasticSmall,
		[Token(Token = "0x4000158")]
		OutElasticBig,
		[Token(Token = "0x4000159")]
		OutSine,
		[Token(Token = "0x400015A")]
		OutBack,
		[Token(Token = "0x400015B")]
		OutBackCubic,
		[Token(Token = "0x400015C")]
		OutBackQuartic,
		[Token(Token = "0x400015D")]
		BackInCubic,
		[Token(Token = "0x400015E")]
		BackInQuartic
	}
	[Token(Token = "0x2000044")]
	public class Interp
	{
		[Token(Token = "0x60002A9")]
		[Address(RVA = "0xBCB874", Offset = "0xBCB874", VA = "0xBCB874")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0xBCC1FC", Offset = "0xBCC1FC", VA = "0xBCC1FC")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xBCC26C", Offset = "0xBCC26C", VA = "0xBCC26C")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xBCBC74", Offset = "0xBCBC74", VA = "0xBCBC74")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xBCBC80", Offset = "0xBCBC80", VA = "0xBCBC80")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xBCBCA4", Offset = "0xBCBCA4", VA = "0xBCBCA4")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xBCBCE0", Offset = "0xBCBCE0", VA = "0xBCBCE0")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xBCBCF8", Offset = "0xBCBCF8", VA = "0xBCBCF8")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xBCBD0C", Offset = "0xBCBD0C", VA = "0xBCBD0C")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xBCBD20", Offset = "0xBCBD20", VA = "0xBCBD20")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xBCBD30", Offset = "0xBCBD30", VA = "0xBCBD30")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xBCBD78", Offset = "0xBCBD78", VA = "0xBCBD78")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xBCBDB0", Offset = "0xBCBDB0", VA = "0xBCBDB0")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xBCBDD8", Offset = "0xBCBDD8", VA = "0xBCBDD8")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xBCC2DC", Offset = "0xBCC2DC", VA = "0xBCC2DC")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0xBCBE0C", Offset = "0xBCBE0C", VA = "0xBCBE0C")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0xBCBE34", Offset = "0xBCBE34", VA = "0xBCBE34")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0xBCBE64", Offset = "0xBCBE64", VA = "0xBCBE64")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0xBCBE98", Offset = "0xBCBE98", VA = "0xBCBE98")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0xBCBEDC", Offset = "0xBCBEDC", VA = "0xBCBEDC")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0xBCBF40", Offset = "0xBCBF40", VA = "0xBCBF40")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0xBCBFA4", Offset = "0xBCBFA4", VA = "0xBCBFA4")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xBCBFF8", Offset = "0xBCBFF8", VA = "0xBCBFF8")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0xBCC04C", Offset = "0xBCC04C", VA = "0xBCC04C")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0xBCC084", Offset = "0xBCC084", VA = "0xBCC084")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0xBCC0B8", Offset = "0xBCC0B8", VA = "0xBCC0B8")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0xBCC310", Offset = "0xBCC310", VA = "0xBCC310")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xBCC0FC", Offset = "0xBCC0FC", VA = "0xBCC0FC")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xBCC18C", Offset = "0xBCC18C", VA = "0xBCC18C")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xBCC1BC", Offset = "0xBCC1BC", VA = "0xBCC1BC")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xBCC3A0", Offset = "0xBCC3A0", VA = "0xBCC3A0")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x2000045")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xBCC3A8", Offset = "0xBCC3A8", VA = "0xBCC3A8")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0xBCC430", Offset = "0xBCC430", VA = "0xBCC430")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x2000046")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x60002CA")]
		[Address(RVA = "0xBCC4BC", Offset = "0xBCC4BC", VA = "0xBCC4BC")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0xBCC508", Offset = "0xBCC508", VA = "0xBCC508")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0xBCC5C4", Offset = "0xBCC5C4", VA = "0xBCC5C4")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xBCC51C", Offset = "0xBCC51C", VA = "0xBCC51C")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xBCC5D8", Offset = "0xBCC5D8", VA = "0xBCC5D8")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xBCC668", Offset = "0xBCC668", VA = "0xBCC668")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0xBCC690", Offset = "0xBCC690", VA = "0xBCC690")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0xBCC6DC", Offset = "0xBCC6DC", VA = "0xBCC6DC")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0xBCC744", Offset = "0xBCC744", VA = "0xBCC744")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xBCC8A0", Offset = "0xBCC8A0", VA = "0xBCC8A0")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xBCC9D8", Offset = "0xBCC9D8", VA = "0xBCC9D8")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xBCCA30", Offset = "0xBCCA30", VA = "0xBCCA30")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x2000047")]
	public static class QuaTools
	{
		[Token(Token = "0x60002D6")]
		[Address(RVA = "0xBCCA54", Offset = "0xBCCA54", VA = "0xBCCA54")]
		public static float GetYaw(Quaternion space, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0xBCCAAC", Offset = "0xBCCAAC", VA = "0xBCCAAC")]
		public static float GetPitch(Quaternion space, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0xBCCBDC", Offset = "0xBCCBDC", VA = "0xBCCBDC")]
		public static float GetBank(Quaternion space, Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0xBCCD5C", Offset = "0xBCCD5C", VA = "0xBCCD5C")]
		public static float GetYaw(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xBCCE38", Offset = "0xBCCE38", VA = "0xBCCE38")]
		public static float GetPitch(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xBCCF14", Offset = "0xBCCF14", VA = "0xBCCF14")]
		public static float GetBank(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xBCD12C", Offset = "0xBCD12C", VA = "0xBCD12C")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xBCD178", Offset = "0xBCD178", VA = "0xBCD178")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xBCD1C4", Offset = "0xBCD1C4", VA = "0xBCD1C4")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xBCD2C8", Offset = "0xBCD2C8", VA = "0xBCD2C8")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xBCD3CC", Offset = "0xBCD3CC", VA = "0xBCD3CC")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0xBCD4E0", Offset = "0xBCD4E0", VA = "0xBCD4E0")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0xBCD588", Offset = "0xBCD588", VA = "0xBCD588")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0xBCD694", Offset = "0xBCD694", VA = "0xBCD694")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0xBCD7FC", Offset = "0xBCD7FC", VA = "0xBCD7FC")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xBCD9E0", Offset = "0xBCD9E0", VA = "0xBCD9E0")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xBCDAB0", Offset = "0xBCDAB0", VA = "0xBCDAB0")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetforwardAxis, Vector3 targetUpAxis, Vector3 forwardAxis, Vector3 upAxis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0xBCDC34", Offset = "0xBCDC34", VA = "0xBCDC34")]
		public static Vector3 ToBiPolar(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0xBCDD40", Offset = "0xBCDD40", VA = "0xBCDD40")]
		public static float ToBiPolar(float angle)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000048")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000030")]
		public static T instance
		{
			[Token(Token = "0x60002E9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002EA")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60002EB")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000049")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will fix all the Transforms used by the solver to their initial state in each Update. This prevents potential problems with unanimated bones and animator culling with a small cost of performance. Not recommended for CCD and FABRIK solvers.")]
		public bool fixTransforms;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x17000031")]
		private bool animatePhysics
		{
			[Token(Token = "0x60002F2")]
			[Address(RVA = "0xBCDEB4", Offset = "0xBCDEB4", VA = "0xBCDEB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000032")]
		private bool isAnimated
		{
			[Token(Token = "0x60002F6")]
			[Address(RVA = "0xBCE1B0", Offset = "0xBCE1B0", VA = "0xBCE1B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0xBCDD98", Offset = "0xBCDD98", VA = "0xBCDD98")]
		public void Disable()
		{
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0xBCDE2C", Offset = "0xBCDE2C", VA = "0xBCDE2C", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0xBCDE30", Offset = "0xBCDE30", VA = "0xBCDE30", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0xBCDE34", Offset = "0xBCDE34", VA = "0xBCDE34", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xBCDE38", Offset = "0xBCDE38", VA = "0xBCDE38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xBCDEB0", Offset = "0xBCDEB0", VA = "0xBCDEB0")]
		private void Start()
		{
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xBCDE60", Offset = "0xBCDE60", VA = "0xBCDE60")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xBCE174", Offset = "0xBCE174", VA = "0xBCE174")]
		private void Update()
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xBCDF80", Offset = "0xBCDF80", VA = "0xBCDF80")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0xBCE248", Offset = "0xBCE248", VA = "0xBCE248")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0xBCE294", Offset = "0xBCE294", VA = "0xBCE294")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0xBCE2E0", Offset = "0xBCE2E0", VA = "0xBCE2E0")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0xBCE318", Offset = "0xBCE318", VA = "0xBCE318")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x200004A")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0xBCE328", Offset = "0xBCE328", VA = "0xBCE328")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0xBCE3DC", Offset = "0xBCE3DC", VA = "0xBCE3DC")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0xBCE490", Offset = "0xBCE490", VA = "0xBCE490")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0xBCE544", Offset = "0xBCE544", VA = "0xBCE544")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x200004B")]
	public static class V2Tools
	{
		[Token(Token = "0x60002FF")]
		[Address(RVA = "0xBCE54C", Offset = "0xBCE54C", VA = "0xBCE54C")]
		public static Vector2 XZ(Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0xBCE554", Offset = "0xBCE554", VA = "0xBCE554")]
		public static float DeltaAngle(Vector2 dir1, Vector2 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0xBCE5E4", Offset = "0xBCE5E4", VA = "0xBCE5E4")]
		public static float DeltaAngleXZ(Vector3 dir1, Vector3 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0xBCE678", Offset = "0xBCE678", VA = "0xBCE678")]
		public static bool LineCircleIntersect(Vector2 p1, Vector2 p2, Vector2 c, float r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0xBCE728", Offset = "0xBCE728", VA = "0xBCE728")]
		public static bool RayCircleIntersect(Vector2 p1, Vector2 dir, Vector2 c, float r)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200004C")]
	public static class V3Tools
	{
		[Token(Token = "0x6000304")]
		[Address(RVA = "0xBCE784", Offset = "0xBCE784", VA = "0xBCE784")]
		public static float GetYaw(Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0xBCE7A4", Offset = "0xBCE7A4", VA = "0xBCE7A4")]
		public static float GetPitch(Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0xBCE878", Offset = "0xBCE878", VA = "0xBCE878")]
		public static float GetBank(Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0xBCE930", Offset = "0xBCE930", VA = "0xBCE930")]
		public static float GetYaw(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0xBCE98C", Offset = "0xBCE98C", VA = "0xBCE98C")]
		public static float GetPitch(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0xBCE9E8", Offset = "0xBCE9E8", VA = "0xBCE9E8")]
		public static float GetBank(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0xBCEB00", Offset = "0xBCEB00", VA = "0xBCEB00")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0xBCEB5C", Offset = "0xBCEB5C", VA = "0xBCEB5C")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0xBCEB94", Offset = "0xBCEB94", VA = "0xBCEB94")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0xBCECE4", Offset = "0xBCECE4", VA = "0xBCECE4")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0xBCEE60", Offset = "0xBCEE60", VA = "0xBCEE60")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0xBCF090", Offset = "0xBCF090", VA = "0xBCF090")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0xBCF2E0", Offset = "0xBCF2E0", VA = "0xBCF2E0")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0xBCF538", Offset = "0xBCF538", VA = "0xBCF538")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0xBCF6E4", Offset = "0xBCF6E4", VA = "0xBCF6E4")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0xBCF8DC", Offset = "0xBCF8DC", VA = "0xBCF8DC")]
		public static Vector3 TransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000314")]
		[Address(RVA = "0xBCF958", Offset = "0xBCF958", VA = "0xBCF958")]
		public static Vector3 InverseTransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0xBCF9E8", Offset = "0xBCF9E8", VA = "0xBCF9E8")]
		public static Vector3 InverseTransformPoint(Vector3 tPos, Quaternion tRot, Vector3 tScale, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0xBCFA80", Offset = "0xBCFA80", VA = "0xBCFA80")]
		public static Vector3 TransformPoint(Vector3 tPos, Quaternion tRot, Vector3 tScale, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0xBCFA70", Offset = "0xBCFA70", VA = "0xBCFA70")]
		public static Vector3 Div(Vector3 v1, Vector3 v2)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200004D")]
	public static class Warning
	{
		[Token(Token = "0x200004E")]
		public delegate void Logger(string message);

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x6000318")]
		[Address(RVA = "0xBCFAFC", Offset = "0xBCFAFC", VA = "0xBCFAFC")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0xBC8D04", Offset = "0xBC8D04", VA = "0xBC8D04")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x200004F")]
	public class HitReactionVRIKTrigger : MonoBehaviour
	{
		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReactionVRIK hitReaction;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x600031E")]
		[Address(RVA = "0xBCFCB8", Offset = "0xBCFCB8", VA = "0xBCFCB8")]
		private void Update()
		{
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0xBCFE08", Offset = "0xBCFE08", VA = "0xBCFE08")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0xBCFF6C", Offset = "0xBCFF6C", VA = "0xBCFF6C")]
		public HitReactionVRIKTrigger()
		{
		}
	}
	[Token(Token = "0x2000050")]
	public class VRIKCalibrationBasic : MonoBehaviour
	{
		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The VRIK component.")]
		public VRIK ik;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("HMD.")]
		[Header("Head")]
		public Transform centerEyeAnchor;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Position offset of the camera from the head bone (root space).")]
		public Vector3 headAnchorPositionOffset;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Rotation offset of the camera from the head bone (root space).")]
		public Vector3 headAnchorRotationOffset;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Hands")]
		[Tooltip("Left Hand Controller")]
		public Transform leftHandAnchor;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Right Hand Controller")]
		public Transform rightHandAnchor;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Position offset of the hand controller from the hand bone (controller space).")]
		public Vector3 handAnchorPositionOffset;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Rotation offset of the hand controller from the hand bone (controller space).")]
		public Vector3 handAnchorRotationOffset;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Scale")]
		[Tooltip("Multiplies the scale of the root.")]
		public float scaleMlp;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x6000321")]
		[Address(RVA = "0xBCFF7C", Offset = "0xBCFF7C", VA = "0xBCFF7C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0xBD0110", Offset = "0xBD0110", VA = "0xBD0110")]
		public VRIKCalibrationBasic()
		{
		}
	}
	[Token(Token = "0x2000051")]
	public class VRIKCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the VRIK component on the avatar.")]
		public VRIK ik;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The settings for VRIK calibration.")]
		public VRIKCalibrator.Settings settings;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The HMD.")]
		public Transform headTracker;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) A tracker placed anywhere on the body of the player, preferrably close to the pelvis, on the belt area.")]
		public Transform bodyTracker;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's left hand.")]
		public Transform leftHandTracker;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's right hand.")]
		public Transform rightHandTracker;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's left leg.")]
		public Transform leftFootTracker;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's right leg.")]
		public Transform rightFootTracker;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x6000323")]
		[Address(RVA = "0xBD018C", Offset = "0xBD018C", VA = "0xBD018C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0xBD02F0", Offset = "0xBD02F0", VA = "0xBD02F0")]
		public VRIKCalibrationController()
		{
		}
	}
	[Token(Token = "0x2000052")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000325")]
		[Address(RVA = "0xBD0364", Offset = "0xBD0364", VA = "0xBD0364")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0xBD03B4", Offset = "0xBD03B4", VA = "0xBD03B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0xBD058C", Offset = "0xBD058C", VA = "0xBD058C")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x2000053")]
	public class VRIKPlatformController : MonoBehaviour
	{
		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingSpace;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform platform;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool moveToPlatform;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform lastPlatform;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000328")]
		[Address(RVA = "0xBD05E4", Offset = "0xBD05E4", VA = "0xBD05E4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0xBD0B14", Offset = "0xBD0B14", VA = "0xBD0B14")]
		public VRIKPlatformController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000054")]
	public class Navigator
	{
		[Token(Token = "0x2000055")]
		public enum State
		{
			[Token(Token = "0x4000199")]
			Idle,
			[Token(Token = "0x400019A")]
			Seeking,
			[Token(Token = "0x400019B")]
			OnPath
		}

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Should this Navigator be actively seeking a path.")]
		public bool activeTargetSeeking;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Increase this value if the character starts running in a circle, not able to reach the corner because of a too large turning radius.")]
		public float cornerRadius;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Recalculate path if target position has moved by this distance from the position it was at when the path was originally calculated")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Sample within this distance from sourcePosition.")]
		public float maxSampleDistance;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Interval of updating the path")]
		public float nextPathInterval;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] corners;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x17000033")]
		public Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x600032A")]
			[Address(RVA = "0xBD0B70", Offset = "0xBD0B70", VA = "0xBD0B70")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600032B")]
			[Address(RVA = "0xBD0B7C", Offset = "0xBD0B7C", VA = "0xBD0B7C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000034")]
		public State state
		{
			[Token(Token = "0x600032C")]
			[Address(RVA = "0xBD0B88", Offset = "0xBD0B88", VA = "0xBD0B88")]
			[CompilerGenerated]
			get
			{
				return default(State);
			}
			[Token(Token = "0x600032D")]
			[Address(RVA = "0xBD0B90", Offset = "0xBD0B90", VA = "0xBD0B90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0xBD0B98", Offset = "0xBD0B98", VA = "0xBD0B98")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0xBD0C70", Offset = "0xBD0C70", VA = "0xBD0C70")]
		public void Update(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0xBD11A0", Offset = "0xBD11A0", VA = "0xBD11A0")]
		private void CalculatePath(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0xBD1204", Offset = "0xBD1204", VA = "0xBD1204")]
		private bool Find(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0xBD10C8", Offset = "0xBD10C8", VA = "0xBD10C8")]
		private void Stop()
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0xBD1124", Offset = "0xBD1124", VA = "0xBD1124")]
		private float HorDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0xBD1338", Offset = "0xBD1338", VA = "0xBD1338")]
		public void Visualize()
		{
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0xBD14FC", Offset = "0xBD14FC", VA = "0xBD14FC")]
		public Navigator()
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000056")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Biped IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page4.html")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x6000336")]
		[Address(RVA = "0xBD156C", Offset = "0xBD156C", VA = "0xBD156C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0xBD15B0", Offset = "0xBD15B0", VA = "0xBD15B0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0xBD15F4", Offset = "0xBD15F4", VA = "0xBD15F4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0xBD1638", Offset = "0xBD1638", VA = "0xBD1638")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0xBD167C", Offset = "0xBD167C", VA = "0xBD167C")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0xBD1714", Offset = "0xBD1714", VA = "0xBD1714")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0xBD1730", Offset = "0xBD1730", VA = "0xBD1730")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0xBD175C", Offset = "0xBD175C", VA = "0xBD175C")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0xBD1788", Offset = "0xBD1788", VA = "0xBD1788")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0xBD17C4", Offset = "0xBD17C4", VA = "0xBD17C4")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0xBD1804", Offset = "0xBD1804", VA = "0xBD1804")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0xBD1824", Offset = "0xBD1824", VA = "0xBD1824")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0xBD1844", Offset = "0xBD1844", VA = "0xBD1844")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0xBD1868", Offset = "0xBD1868", VA = "0xBD1868")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0xBD1890", Offset = "0xBD1890", VA = "0xBD1890")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0xBD18B8", Offset = "0xBD18B8", VA = "0xBD18B8")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0xBD1698", Offset = "0xBD1698", VA = "0xBD1698")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0xBD18DC", Offset = "0xBD18DC", VA = "0xBD18DC")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0xBD18E8", Offset = "0xBD18E8", VA = "0xBD18E8")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0xBD18F4", Offset = "0xBD18F4", VA = "0xBD18F4")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0xBD1BA8", Offset = "0xBD1BA8", VA = "0xBD1BA8", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0xBD1C44", Offset = "0xBD1C44", VA = "0xBD1C44", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0xBD1F68", Offset = "0xBD1F68", VA = "0xBD1F68", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0xBD23D4", Offset = "0xBD23D4", VA = "0xBD23D4")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0xBD23F8", Offset = "0xBD23F8", VA = "0xBD23F8")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000057")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x17000035")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x600034F")]
			[Address(RVA = "0xBD1A30", Offset = "0xBD1A30", VA = "0xBD1A30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x6000350")]
			[Address(RVA = "0xBD2694", Offset = "0xBD2694", VA = "0xBD2694")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0xBD1DF4", Offset = "0xBD1DF4", VA = "0xBD1DF4")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0xBD24A8", Offset = "0xBD24A8", VA = "0xBD24A8")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000058")]
	public abstract class Constraint
	{
		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x17000037")]
		public bool isValid
		{
			[Token(Token = "0x6000353")]
			[Address(RVA = "0xBD28BC", Offset = "0xBD28BC", VA = "0xBD28BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000354")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x6000355")]
		[Address(RVA = "0xBD291C", Offset = "0xBD291C", VA = "0xBD291C")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000059")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x6000356")]
		[Address(RVA = "0xBD2924", Offset = "0xBD2924", VA = "0xBD2924", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0xBD29BC", Offset = "0xBD29BC", VA = "0xBD29BC")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0xBD29C4", Offset = "0xBD29C4", VA = "0xBD29C4")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005A")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x17000038")]
		private bool positionChanged
		{
			[Token(Token = "0x600035C")]
			[Address(RVA = "0xBD2AF8", Offset = "0xBD2AF8", VA = "0xBD2AF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0xBD29F4", Offset = "0xBD29F4", VA = "0xBD29F4", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0xBD2B54", Offset = "0xBD2B54", VA = "0xBD2B54")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0xBD2B5C", Offset = "0xBD2B5C", VA = "0xBD2B5C")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005B")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x600035D")]
		[Address(RVA = "0xBD2B8C", Offset = "0xBD2B8C", VA = "0xBD2B8C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0xBD2C08", Offset = "0xBD2C08", VA = "0xBD2C08")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0xBD2C10", Offset = "0xBD2C10", VA = "0xBD2C10")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005C")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x17000039")]
		private bool rotationChanged
		{
			[Token(Token = "0x6000363")]
			[Address(RVA = "0xBD2D44", Offset = "0xBD2D44", VA = "0xBD2D44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0xBD2C40", Offset = "0xBD2C40", VA = "0xBD2C40", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0xBD2D9C", Offset = "0xBD2D9C", VA = "0xBD2D9C")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0xBD2DA4", Offset = "0xBD2DA4", VA = "0xBD2DA4")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005D")]
	public class Constraints
	{
		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x6000364")]
		[Address(RVA = "0xBD2DD4", Offset = "0xBD2DD4", VA = "0xBD2DD4")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0xBD1F14", Offset = "0xBD1F14", VA = "0xBD1F14")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0xBD20DC", Offset = "0xBD20DC", VA = "0xBD20DC")]
		public void Update()
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0xBD28B4", Offset = "0xBD28B4", VA = "0xBD28B4")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005E")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x200005F")]
		public enum DOF
		{
			[Token(Token = "0x40001D1")]
			One,
			[Token(Token = "0x40001D2")]
			Three
		}

		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Master Weight for the finger.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		[Tooltip("The weight of rotating the finger tip and bending the finger to the target.")]
		public float rotationWeight;

		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Rotational degrees of freedom. When set to 'One' the fingers will be able to be rotated only around a single axis. When 3, all 3 axes are free to rotate around.")]
		public DOF rotationDOF;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If enabled, keeps bone1 twist angle fixed relative to bone2.")]
		public bool fixBone1Twist;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The first bone of the finger.")]
		public Transform bone1;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The second bone of the finger.")]
		public Transform bone2;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The (optional) third bone of the finger. This can be ignored for thumbs.")]
		public Transform bone3;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The fingertip object. If your character doesn't have tip bones, you can create an empty GameObject and parent it to the last bone in the finger. Place it to the tip of the finger.")]
		public Transform tip;

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The IK target (optional, can use IKPosition and IKRotation directly).")]
		public Transform target;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 bone1TwistAxis;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 defaultBendNormal;

		[Token(Token = "0x1700003A")]
		public bool initiated
		{
			[Token(Token = "0x6000368")]
			[Address(RVA = "0xBD2E34", Offset = "0xBD2E34", VA = "0xBD2E34")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000369")]
			[Address(RVA = "0xBD2E3C", Offset = "0xBD2E3C", VA = "0xBD2E3C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x600036A")]
			[Address(RVA = "0xBD2E48", Offset = "0xBD2E48", VA = "0xBD2E48")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600036B")]
			[Address(RVA = "0xBD2E68", Offset = "0xBD2E68", VA = "0xBD2E68")]
			set
			{
			}
		}

		[Token(Token = "0x1700003C")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x600036C")]
			[Address(RVA = "0xBD2E88", Offset = "0xBD2E88", VA = "0xBD2E88")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x600036D")]
			[Address(RVA = "0xBD2EA8", Offset = "0xBD2EA8", VA = "0xBD2EA8")]
			set
			{
			}
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0xBD2EC8", Offset = "0xBD2EC8", VA = "0xBD2EC8")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0xBD2FC0", Offset = "0xBD2FC0", VA = "0xBD2FC0")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0xBD3644", Offset = "0xBD3644", VA = "0xBD3644")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0xBD3710", Offset = "0xBD3710", VA = "0xBD3710")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0xBD37C8", Offset = "0xBD37C8", VA = "0xBD37C8")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0xBD3D68", Offset = "0xBD3D68", VA = "0xBD3D68")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x2000060")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The master weight for all fingers.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x1700003D")]
		public bool initiated
		{
			[Token(Token = "0x6000374")]
			[Address(RVA = "0xBD3D78", Offset = "0xBD3D78", VA = "0xBD3D78")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000375")]
			[Address(RVA = "0xBD3D80", Offset = "0xBD3D80", VA = "0xBD3D80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0xBD3D8C", Offset = "0xBD3D8C", VA = "0xBD3D8C")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0xBD3E00", Offset = "0xBD3E00", VA = "0xBD3E00")]
		[ContextMenu("Auto-detect")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0xBD4178", Offset = "0xBD4178", VA = "0xBD4178")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0xBD4330", Offset = "0xBD4330", VA = "0xBD4330")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0xBD4088", Offset = "0xBD4088", VA = "0xBD4088")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0xBD44AC", Offset = "0xBD44AC", VA = "0xBD44AC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0xBD4554", Offset = "0xBD4554", VA = "0xBD4554")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0xBD45B8", Offset = "0xBD45B8", VA = "0xBD45B8")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0xBD4620", Offset = "0xBD4620", VA = "0xBD4620")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0xBD467C", Offset = "0xBD467C", VA = "0xBD467C", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xBD4680", Offset = "0xBD4680", VA = "0xBD4680", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0xBD4694", Offset = "0xBD4694", VA = "0xBD4694")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x2000061")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x2000062")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight. Use this to fade in/out the grounding effect.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Grounding solver. Not to confuse with IK solvers.")]
		public Grounding solver;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x1700003E")]
		public bool initiated
		{
			[Token(Token = "0x6000383")]
			[Address(RVA = "0xBD4708", Offset = "0xBD4708", VA = "0xBD4708")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000384")]
			[Address(RVA = "0xBD4710", Offset = "0xBD4710", VA = "0xBD4710")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000382")]
		public abstract void ResetPosition();

		[Token(Token = "0x6000385")]
		[Address(RVA = "0xBD471C", Offset = "0xBD471C", VA = "0xBD471C")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0xBD49CC", Offset = "0xBD49CC", VA = "0xBD49CC")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0xBD47E0", Offset = "0xBD47E0", VA = "0xBD47E0")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0xBD49F0", Offset = "0xBD49F0", VA = "0xBD49F0")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000389")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x600038A")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x600038B")]
		[Address(RVA = "0xBD4B64", Offset = "0xBD4B64", VA = "0xBD4B64")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x2000063")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Biped")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The BipedIK componet.")]
		public BipedIK ik;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 spineOffset;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x6000390")]
		[Address(RVA = "0xBD4CEC", Offset = "0xBD4CEC", VA = "0xBD4CEC", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0xBD4D30", Offset = "0xBD4D30", VA = "0xBD4D30", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0xBD4D74", Offset = "0xBD4D74", VA = "0xBD4D74", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0xBD4DE0", Offset = "0xBD4DE0", VA = "0xBD4DE0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0xBD4E80", Offset = "0xBD4E80", VA = "0xBD4E80")]
		private void Update()
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0xBD4ED4", Offset = "0xBD4ED4", VA = "0xBD4ED4")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0xBD5234", Offset = "0xBD5234", VA = "0xBD5234")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0xBD5274", Offset = "0xBD5274", VA = "0xBD5274")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0xBD56F4", Offset = "0xBD56F4", VA = "0xBD56F4")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0xBD57B4", Offset = "0xBD57B4", VA = "0xBD57B4")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0xBD5984", Offset = "0xBD5984", VA = "0xBD5984")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0xBD5B5C", Offset = "0xBD5B5C", VA = "0xBD5B5C")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x2000064")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Full Body Biped")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000065")]
		public class SpineEffector
		{
			[Token(Token = "0x40001EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the effector.")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x40001EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The weight of horizontal bend offset towards the slope.")]
			public float horizontalWeight;

			[Token(Token = "0x40001ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The vertical bend offset weight.")]
			public float verticalWeight;

			[Token(Token = "0x60003AA")]
			[Address(RVA = "0xBD68B8", Offset = "0xBD68B8", VA = "0xBD68B8")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x60003AB")]
			[Address(RVA = "0xBD68C8", Offset = "0xBD68C8", VA = "0xBD68C8")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Reference to the FBBIK componet.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 spineOffset;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x600039C")]
		[Address(RVA = "0xBD5C00", Offset = "0xBD5C00", VA = "0xBD5C00")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0xBD5C44", Offset = "0xBD5C44", VA = "0xBD5C44", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0xBD5C88", Offset = "0xBD5C88", VA = "0xBD5C88", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0xBD5CCC", Offset = "0xBD5CCC", VA = "0xBD5CCC", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xBD5D38", Offset = "0xBD5D38", VA = "0xBD5D38")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xBD5DC0", Offset = "0xBD5DC0", VA = "0xBD5DC0")]
		private void Update()
		{
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xBD6070", Offset = "0xBD6070", VA = "0xBD6070")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xBD607C", Offset = "0xBD607C", VA = "0xBD607C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0xBD5E1C", Offset = "0xBD5E1C", VA = "0xBD5E1C")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0xBD6088", Offset = "0xBD6088", VA = "0xBD6088")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0xBD63FC", Offset = "0xBD63FC", VA = "0xBD63FC")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0xBD6580", Offset = "0xBD6580", VA = "0xBD6580")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0xBD66E0", Offset = "0xBD66E0", VA = "0xBD66E0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0xBD6814", Offset = "0xBD6814", VA = "0xBD6814")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x2000066")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder IK")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The pelvis transform. Common ancestor of all the legs.")]
		public Transform pelvis;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The weight of rotating the character root to the ground normal (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The speed of rotating the character root to the ground normal (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum angle of root rotation (range: 0 - 90).")]
		public float maxRootRotationAngle;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0xBD690C", Offset = "0xBD690C", VA = "0xBD690C", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0xBD6950", Offset = "0xBD6950", VA = "0xBD6950", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0xBD6994", Offset = "0xBD6994", VA = "0xBD6994", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0xBD69B0", Offset = "0xBD69B0", VA = "0xBD69B0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0xBD6BCC", Offset = "0xBD6BCC", VA = "0xBD6BCC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0xBD6CAC", Offset = "0xBD6CAC", VA = "0xBD6CAC")]
		private void Update()
		{
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0xBD7224", Offset = "0xBD7224", VA = "0xBD7224")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0xBD76E0", Offset = "0xBD76E0", VA = "0xBD76E0")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0xBD7890", Offset = "0xBD7890", VA = "0xBD7890")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0xBD7C18", Offset = "0xBD7C18", VA = "0xBD7C18")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0xBD7DF0", Offset = "0xBD7DF0", VA = "0xBD7DF0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0xBD8018", Offset = "0xBD8018", VA = "0xBD8018")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x2000067")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Quadruped")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x2000068")]
		public struct Foot
		{
			[Token(Token = "0x4000219")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x400021A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x400021B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x400021C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x60003CA")]
			[Address(RVA = "0xBD8C18", Offset = "0xBD8C18", VA = "0xBD8C18")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The Grounding solver for the forelegs.")]
		public Grounding forelegSolver;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		[Tooltip("The weight of rotating the character root to the ground angle (range: 0 - 1).")]
		public float rootRotationWeight;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(-90f, 0f)]
		[Tooltip("The maximum angle of rotating the quadruped downwards (going downhill, range: -90 - 0).")]
		public float minRootRotation;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The maximum angle of rotating the quadruped upwards (going uphill, range: 0 - 90).")]
		[Range(0f, 90f)]
		public float maxRootRotation;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The speed of interpolating the character root rotation (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum IK offset for the legs (range: 0 - inf).")]
		public float maxLegOffset;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The maximum IK offset for the forelegs (range: 0 - inf).")]
		public float maxForeLegOffset;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The weight of maintaining the head's rotation as it was before solving the Grounding (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The pelvis transform. Common ancestor of both legs and the spine.")]
		public Transform pelvis;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The last bone in the spine that is the common parent for both forelegs.")]
		public Transform lastSpineBone;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The head (optional, if you intend to maintain it's rotation).")]
		public Transform head;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0xBD80BC", Offset = "0xBD80BC", VA = "0xBD80BC", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0xBD8100", Offset = "0xBD8100", VA = "0xBD8100", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0xBD8144", Offset = "0xBD8144", VA = "0xBD8144", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0xBD8174", Offset = "0xBD8174", VA = "0xBD8174")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0xBD8278", Offset = "0xBD8278", VA = "0xBD8278")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0xBD846C", Offset = "0xBD846C", VA = "0xBD846C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0xBD84D0", Offset = "0xBD84D0", VA = "0xBD84D0")]
		private void Update()
		{
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0xBD8528", Offset = "0xBD8528", VA = "0xBD8528")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0xBD887C", Offset = "0xBD887C", VA = "0xBD887C")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0xBD8C78", Offset = "0xBD8C78", VA = "0xBD8C78")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0xBD8D08", Offset = "0xBD8D08", VA = "0xBD8D08")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0xBD9158", Offset = "0xBD9158", VA = "0xBD9158")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0xBD9820", Offset = "0xBD9820", VA = "0xBD9820")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0xBD9AD8", Offset = "0xBD9AD8", VA = "0xBD9AD8")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0xBD9C0C", Offset = "0xBD9C0C", VA = "0xBD9C0C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0xBD9ED4", Offset = "0xBD9ED4", VA = "0xBD9ED4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0xBD9F04", Offset = "0xBD9F04", VA = "0xBD9F04")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0xBDA124", Offset = "0xBDA124", VA = "0xBDA124")]
		public GrounderQuadruped()
		{
		}
	}
	[Token(Token = "0x2000069")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder VRIK")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class GrounderVRIK : Grounder
	{
		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Reference to the VRIK componet.")]
		public VRIK ik;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform[] feet;

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0xBDA22C", Offset = "0xBDA22C", VA = "0xBDA22C")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0xBDA270", Offset = "0xBDA270", VA = "0xBDA270", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0xBDA2B4", Offset = "0xBDA2B4", VA = "0xBDA2B4", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0xBDA2F8", Offset = "0xBDA2F8", VA = "0xBDA2F8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0xBDA314", Offset = "0xBDA314", VA = "0xBDA314")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0xBDA39C", Offset = "0xBDA39C", VA = "0xBDA39C")]
		private void Update()
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0xBDA3F0", Offset = "0xBDA3F0", VA = "0xBDA3F0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0xBDA678", Offset = "0xBDA678", VA = "0xBDA678")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0xBDA870", Offset = "0xBDA870", VA = "0xBDA870")]
		private void SetLegIK(IKSolverVR.PositionOffset positionOffset, Transform bone, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0xBDA8F4", Offset = "0xBDA8F4", VA = "0xBDA8F4")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0xBDAB90", Offset = "0xBDAB90", VA = "0xBDAB90")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0xBDACF0", Offset = "0xBDACF0", VA = "0xBDACF0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0xBDAEB8", Offset = "0xBDAEB8", VA = "0xBDAEB8")]
		public GrounderVRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006A")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x200006B")]
		public enum Quality
		{
			[Token(Token = "0x4000238")]
			Fastest,
			[Token(Token = "0x4000239")]
			Simple,
			[Token(Token = "0x400023A")]
			Best
		}

		[Token(Token = "0x200006C")]
		public class Leg
		{
			[Token(Token = "0x400023D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x4000243")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x4000246")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Grounding grounding;

			[Token(Token = "0x4000247")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float lastTime;

			[Token(Token = "0x4000248")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float deltaTime;

			[Token(Token = "0x4000249")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 lastPosition;

			[Token(Token = "0x400024A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private Quaternion toHitNormal;

			[Token(Token = "0x400024B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Quaternion r;

			[Token(Token = "0x400024C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 up;

			[Token(Token = "0x400024D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool doOverrideFootPosition;

			[Token(Token = "0x400024E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 overrideFootPosition;

			[Token(Token = "0x400024F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 transformPosition;

			[Token(Token = "0x17000047")]
			public bool isGrounded
			{
				[Token(Token = "0x60003F0")]
				[Address(RVA = "0xBE0184", Offset = "0xBE0184", VA = "0xBE0184")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60003F1")]
				[Address(RVA = "0xBE018C", Offset = "0xBE018C", VA = "0xBE018C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000048")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x60003F2")]
				[Address(RVA = "0xBE0198", Offset = "0xBE0198", VA = "0xBE0198")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60003F3")]
				[Address(RVA = "0xBE01A4", Offset = "0xBE01A4", VA = "0xBE01A4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000049")]
			public bool initiated
			{
				[Token(Token = "0x60003F4")]
				[Address(RVA = "0xBE01B0", Offset = "0xBE01B0", VA = "0xBE01B0")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60003F5")]
				[Address(RVA = "0xBE01B8", Offset = "0xBE01B8", VA = "0xBE01B8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700004A")]
			public float heightFromGround
			{
				[Token(Token = "0x60003F6")]
				[Address(RVA = "0xBE01C4", Offset = "0xBE01C4", VA = "0xBE01C4")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60003F7")]
				[Address(RVA = "0xBE01CC", Offset = "0xBE01CC", VA = "0xBE01CC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700004B")]
			public Vector3 velocity
			{
				[Token(Token = "0x60003F8")]
				[Address(RVA = "0xBE01D4", Offset = "0xBE01D4", VA = "0xBE01D4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60003F9")]
				[Address(RVA = "0xBE01E0", Offset = "0xBE01E0", VA = "0xBE01E0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700004C")]
			public Transform transform
			{
				[Token(Token = "0x60003FA")]
				[Address(RVA = "0xBE01EC", Offset = "0xBE01EC", VA = "0xBE01EC")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60003FB")]
				[Address(RVA = "0xBE01F4", Offset = "0xBE01F4", VA = "0xBE01F4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700004D")]
			public float IKOffset
			{
				[Token(Token = "0x60003FC")]
				[Address(RVA = "0xBE01FC", Offset = "0xBE01FC", VA = "0xBE01FC")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60003FD")]
				[Address(RVA = "0xBE0204", Offset = "0xBE0204", VA = "0xBE0204")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700004E")]
			public RaycastHit heelHit
			{
				[Token(Token = "0x60003FE")]
				[Address(RVA = "0xBE020C", Offset = "0xBE020C", VA = "0xBE020C")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x60003FF")]
				[Address(RVA = "0xBE0224", Offset = "0xBE0224", VA = "0xBE0224")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700004F")]
			public RaycastHit capsuleHit
			{
				[Token(Token = "0x6000400")]
				[Address(RVA = "0xBE0244", Offset = "0xBE0244", VA = "0xBE0244")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000401")]
				[Address(RVA = "0xBE025C", Offset = "0xBE025C", VA = "0xBE025C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000050")]
			public RaycastHit GetHitPoint
			{
				[Token(Token = "0x6000402")]
				[Address(RVA = "0xBE027C", Offset = "0xBE027C", VA = "0xBE027C")]
				get
				{
					return default(RaycastHit);
				}
			}

			[Token(Token = "0x17000051")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x6000408")]
				[Address(RVA = "0xBE0B6C", Offset = "0xBE0B6C", VA = "0xBE0B6C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000052")]
			private float rootYOffset
			{
				[Token(Token = "0x6000411")]
				[Address(RVA = "0xBE0CBC", Offset = "0xBE0CBC", VA = "0xBE0CBC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000403")]
			[Address(RVA = "0xBE02C4", Offset = "0xBE02C4", VA = "0xBE02C4")]
			public void SetFootPosition(Vector3 position)
			{
			}

			[Token(Token = "0x6000404")]
			[Address(RVA = "0xBDEC9C", Offset = "0xBDEC9C", VA = "0xBDEC9C")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x6000405")]
			[Address(RVA = "0xBE02D8", Offset = "0xBE02D8", VA = "0xBE02D8")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6000406")]
			[Address(RVA = "0xBDFDA0", Offset = "0xBDFDA0", VA = "0xBDFDA0")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000407")]
			[Address(RVA = "0xBDEFB0", Offset = "0xBDEFB0", VA = "0xBDEFB0")]
			public void Process()
			{
			}

			[Token(Token = "0x6000409")]
			[Address(RVA = "0xBE077C", Offset = "0xBE077C", VA = "0xBE077C")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x600040A")]
			[Address(RVA = "0xBE0318", Offset = "0xBE0318", VA = "0xBE0318")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x600040B")]
			[Address(RVA = "0xBE0C00", Offset = "0xBE0C00", VA = "0xBE0C00")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600040C")]
			[Address(RVA = "0xBE05E4", Offset = "0xBE05E4", VA = "0xBE05E4")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x600040D")]
			[Address(RVA = "0xBE0664", Offset = "0xBE0664", VA = "0xBE0664")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x600040E")]
			[Address(RVA = "0xBE0C6C", Offset = "0xBE0C6C", VA = "0xBE0C6C")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x600040F")]
			[Address(RVA = "0xBE0BA0", Offset = "0xBE0BA0", VA = "0xBE0BA0")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x6000410")]
			[Address(RVA = "0xBE0D48", Offset = "0xBE0D48", VA = "0xBE0D48")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000412")]
			[Address(RVA = "0xBDEBFC", Offset = "0xBDEBFC", VA = "0xBDEBFC")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x200006D")]
		public class Pelvis
		{
			[Token(Token = "0x4000252")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x4000253")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x4000254")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x4000255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x4000256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x17000053")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x6000413")]
				[Address(RVA = "0xBE0EF8", Offset = "0xBE0EF8", VA = "0xBE0EF8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000414")]
				[Address(RVA = "0xBE0F04", Offset = "0xBE0F04", VA = "0xBE0F04")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000054")]
			public float heightOffset
			{
				[Token(Token = "0x6000415")]
				[Address(RVA = "0xBE0F10", Offset = "0xBE0F10", VA = "0xBE0F10")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000416")]
				[Address(RVA = "0xBE0F18", Offset = "0xBE0F18", VA = "0xBE0F18")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000417")]
			[Address(RVA = "0xBDED74", Offset = "0xBDED74", VA = "0xBDED74")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x6000418")]
			[Address(RVA = "0xBDFD0C", Offset = "0xBDFD0C", VA = "0xBDFD0C")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000419")]
			[Address(RVA = "0xBE0F20", Offset = "0xBE0F20", VA = "0xBE0F20")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x600041A")]
			[Address(RVA = "0xBDF930", Offset = "0xBDF930", VA = "0xBDF930")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x600041B")]
			[Address(RVA = "0xBDEC94", Offset = "0xBDEC94", VA = "0xBDEC94")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Layers to ground the character to. Make sure to exclude the layer of the character controller.")]
		public LayerMask layers;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Max step height. Maximum vertical distance of Grounding from the root of the character.")]
		public float maxStep;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The height offset of the root.")]
		public float heightOffset;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The speed of moving the feet up/down.")]
		public float footSpeed;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("CapsuleCast radius. Should match approximately with the size of the feet.")]
		public float footRadius;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Offset of the foot center along character forward axis.")]
		[HideInInspector]
		public float footCenterOffset;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Amount of velocity based prediction of the foot positions.")]
		public float prediction;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Weight of rotating the feet to the ground normal offset.")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Speed of slerping the feet to their grounded rotations.")]
		public float footRotationSpeed;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Max Foot Rotation Angle. Max angular offset from the foot's rotation.")]
		[Range(0f, 90f)]
		public float maxFootRotationAngle;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, solver will rotate with the character root so the character can be grounded for example to spherical planets. For performance reasons leave this off unless needed.")]
		public bool rotateSolver;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The speed of moving the character up/down.")]
		public float pelvisSpeed;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for smoothing out vertical pelvis movement (range 0 - 1).")]
		[Range(0f, 1f)]
		public float pelvisDamper;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The weight of lowering the pelvis to the lowest foot.")]
		public float lowerPelvisWeight;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of lifting the pelvis to the highest foot. This is useful when you don't want the feet to go too high relative to the body when crouching.")]
		public float liftPelvisWeight;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The radius of the spherecast from the root that determines whether the character root is grounded.")]
		public float rootSphereCastRadius;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If false, keeps the foot that is over a ledge at the root level. If true, lowers the overstepping foot and body by the 'Max Step' value.")]
		public bool overstepFallsDown;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The raycasting quality. Fastest is a single raycast per foot, Simple is three raycasts, Best is one raycast and a capsule cast per foot.")]
		public Quality quality;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool initiated;

		[Token(Token = "0x1700003F")]
		public Leg[] legs
		{
			[Token(Token = "0x60003D8")]
			[Address(RVA = "0xBDE4A4", Offset = "0xBDE4A4", VA = "0xBDE4A4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60003D9")]
			[Address(RVA = "0xBDE4AC", Offset = "0xBDE4AC", VA = "0xBDE4AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000040")]
		public Pelvis pelvis
		{
			[Token(Token = "0x60003DA")]
			[Address(RVA = "0xBDE4B4", Offset = "0xBDE4B4", VA = "0xBDE4B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60003DB")]
			[Address(RVA = "0xBDE4BC", Offset = "0xBDE4BC", VA = "0xBDE4BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000041")]
		public bool isGrounded
		{
			[Token(Token = "0x60003DC")]
			[Address(RVA = "0xBDE4C4", Offset = "0xBDE4C4", VA = "0xBDE4C4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003DD")]
			[Address(RVA = "0xBDE4CC", Offset = "0xBDE4CC", VA = "0xBDE4CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000042")]
		public Transform root
		{
			[Token(Token = "0x60003DE")]
			[Address(RVA = "0xBDE4D8", Offset = "0xBDE4D8", VA = "0xBDE4D8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60003DF")]
			[Address(RVA = "0xBDE4E0", Offset = "0xBDE4E0", VA = "0xBDE4E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000043")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x60003E0")]
			[Address(RVA = "0xBDE4E8", Offset = "0xBDE4E8", VA = "0xBDE4E8")]
			[CompilerGenerated]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x60003E1")]
			[Address(RVA = "0xBDE500", Offset = "0xBDE500", VA = "0xBDE500")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000044")]
		public bool rootGrounded
		{
			[Token(Token = "0x60003E2")]
			[Address(RVA = "0xBDE520", Offset = "0xBDE520", VA = "0xBDE520")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000045")]
		public Vector3 up
		{
			[Token(Token = "0x60003EA")]
			[Address(RVA = "0xBDE7C8", Offset = "0xBDE7C8", VA = "0xBDE7C8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000046")]
		private bool useRootRotation
		{
			[Token(Token = "0x60003ED")]
			[Address(RVA = "0xBDFE34", Offset = "0xBDFE34", VA = "0xBDFE34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0xBDE568", Offset = "0xBDE568", VA = "0xBDE568")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0xBDE830", Offset = "0xBDE830", VA = "0xBDE830")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0xBDE938", Offset = "0xBDE938", VA = "0xBDE938")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0xBDED98", Offset = "0xBDED98", VA = "0xBDED98")]
		public void Update()
		{
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0xBDFB1C", Offset = "0xBDFB1C", VA = "0xBDFB1C")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0xBDFC94", Offset = "0xBDFC94", VA = "0xBDFC94")]
		public void Reset()
		{
		}

		[Token(Token = "0x60003E9")]
		[Address(RVA = "0xBDEF98", Offset = "0xBDEF98", VA = "0xBDEF98")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0xBDFEE8", Offset = "0xBDFEE8", VA = "0xBDFEE8")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0xBDFF6C", Offset = "0xBDFF6C", VA = "0xBDFF6C")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0xBE00C0", Offset = "0xBE00C0", VA = "0xBE00C0")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0xBE0130", Offset = "0xBE0130", VA = "0xBE0130")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x200006E")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Aim IK")]
	[HelpURL("https://www.youtube.com/watch?v=wT8fViZpLmQ&index=3&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class AimIK : IK
	{
		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x600041C")]
		[Address(RVA = "0xBE0F74", Offset = "0xBE0F74", VA = "0xBE0F74", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0xBE0FB8", Offset = "0xBE0FB8", VA = "0xBE0FB8", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0xBE0FFC", Offset = "0xBE0FFC", VA = "0xBE0FFC")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0xBE1040", Offset = "0xBE1040", VA = "0xBE1040")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0xBE1084", Offset = "0xBE1084", VA = "0xBE1084")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0xBE10C8", Offset = "0xBE10C8", VA = "0xBE10C8", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0xBE10D0", Offset = "0xBE10D0", VA = "0xBE10D0")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x200006F")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Arm IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page2.html")]
	public class ArmIK : IK
	{
		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x6000423")]
		[Address(RVA = "0xBE114C", Offset = "0xBE114C", VA = "0xBE114C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0xBE1190", Offset = "0xBE1190", VA = "0xBE1190", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0xBE11D4", Offset = "0xBE11D4", VA = "0xBE11D4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0xBE1218", Offset = "0xBE1218", VA = "0xBE1218")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0xBE125C", Offset = "0xBE125C", VA = "0xBE125C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0xBE1264", Offset = "0xBE1264", VA = "0xBE1264")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x2000070")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/CCD IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page5.html")]
	public class CCDIK : IK
	{
		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x6000429")]
		[Address(RVA = "0xBE12D8", Offset = "0xBE12D8", VA = "0xBE12D8", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0xBE131C", Offset = "0xBE131C", VA = "0xBE131C", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0xBE1360", Offset = "0xBE1360", VA = "0xBE1360")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0xBE13A4", Offset = "0xBE13A4", VA = "0xBE13A4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0xBE13E8", Offset = "0xBE13E8", VA = "0xBE13E8", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0xBE13F0", Offset = "0xBE13F0", VA = "0xBE13F0")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x2000071")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page6.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK")]
	public class FABRIK : IK
	{
		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x600042F")]
		[Address(RVA = "0xBE1464", Offset = "0xBE1464", VA = "0xBE1464", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0xBE14A8", Offset = "0xBE14A8", VA = "0xBE14A8", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0xBE14EC", Offset = "0xBE14EC", VA = "0xBE14EC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0xBE1530", Offset = "0xBE1530", VA = "0xBE1530")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0xBE1574", Offset = "0xBE1574", VA = "0xBE1574", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0xBE157C", Offset = "0xBE157C", VA = "0xBE157C")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x2000072")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page7.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK Root")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x6000435")]
		[Address(RVA = "0xBE15F0", Offset = "0xBE15F0", VA = "0xBE15F0", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0xBE1634", Offset = "0xBE1634", VA = "0xBE1634", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0xBE1678", Offset = "0xBE1678", VA = "0xBE1678")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0xBE16BC", Offset = "0xBE16BC", VA = "0xBE16BC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0xBE1700", Offset = "0xBE1700", VA = "0xBE1700", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0xBE1708", Offset = "0xBE1708", VA = "0xBE1708")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x2000073")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Full Body Biped IK")]
	[HelpURL("https://www.youtube.com/watch?v=7__IafZGwvI&index=1&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x600043B")]
		[Address(RVA = "0xBE177C", Offset = "0xBE177C", VA = "0xBE177C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0xBE17C0", Offset = "0xBE17C0", VA = "0xBE17C0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0xBE1804", Offset = "0xBE1804", VA = "0xBE1804")]
		[ContextMenu("TUTORIAL VIDEO (SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0xBE1848", Offset = "0xBE1848", VA = "0xBE1848")]
		[ContextMenu("TUTORIAL VIDEO (INSPECTOR)")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0xBE188C", Offset = "0xBE188C", VA = "0xBE188C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0xBE18D0", Offset = "0xBE18D0", VA = "0xBE18D0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0xBE1914", Offset = "0xBE1914", VA = "0xBE1914")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0xBE1954", Offset = "0xBE1954", VA = "0xBE1954", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0xBE195C", Offset = "0xBE195C", VA = "0xBE195C")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0xBE1B2C", Offset = "0xBE1B2C", VA = "0xBE1B2C")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0xBE1FE8", Offset = "0xBE1FE8", VA = "0xBE1FE8")]
		[ContextMenu("Reinitiate")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0xBE2008", Offset = "0xBE2008", VA = "0xBE2008")]
		[ContextMenu("Auto-detect References")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xBE20F8", Offset = "0xBE20F8", VA = "0xBE20F8")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x2000074")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x6000448")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x6000449")]
		[Address(RVA = "0xBE21A8", Offset = "0xBE21A8", VA = "0xBE21A8", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0xBE2220", Offset = "0xBE2220", VA = "0xBE2220", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xBE2290", Offset = "0xBE2290", VA = "0xBE2290", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x600044C")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x600044D")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x600044E")]
		[Address(RVA = "0xBE1144", Offset = "0xBE1144", VA = "0xBE1144")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x2000075")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The IK components, assign in the order in which you wish to update them.")]
		public IK[] IKComponents;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Optional. Assign it if you are using 'Animate Physics' as the Update Mode.")]
		public Animator animator;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x17000055")]
		private bool animatePhysics
		{
			[Token(Token = "0x600044F")]
			[Address(RVA = "0xBE22E0", Offset = "0xBE22E0", VA = "0xBE22E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0xBE236C", Offset = "0xBE236C", VA = "0xBE236C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0xBE23D0", Offset = "0xBE23D0", VA = "0xBE23D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0xBE2470", Offset = "0xBE2470", VA = "0xBE2470")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0xBE249C", Offset = "0xBE249C", VA = "0xBE249C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0xBE23F4", Offset = "0xBE23F4", VA = "0xBE23F4")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0xBE2520", Offset = "0xBE2520", VA = "0xBE2520")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x2000076")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page11.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Leg IK")]
	public class LegIK : IK
	{
		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x6000456")]
		[Address(RVA = "0xBE2528", Offset = "0xBE2528", VA = "0xBE2528", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0xBE256C", Offset = "0xBE256C", VA = "0xBE256C", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0xBE25B0", Offset = "0xBE25B0", VA = "0xBE25B0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0xBE25F4", Offset = "0xBE25F4", VA = "0xBE25F4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0xBE2638", Offset = "0xBE2638", VA = "0xBE2638", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0xBE2640", Offset = "0xBE2640", VA = "0xBE2640")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x2000077")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Limb IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	public class LimbIK : IK
	{
		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x600045C")]
		[Address(RVA = "0xBE26B4", Offset = "0xBE26B4", VA = "0xBE26B4", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0xBE26F8", Offset = "0xBE26F8", VA = "0xBE26F8", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0xBE273C", Offset = "0xBE273C", VA = "0xBE273C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0xBE2780", Offset = "0xBE2780", VA = "0xBE2780")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0xBE27C4", Offset = "0xBE27C4", VA = "0xBE27C4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0xBE27CC", Offset = "0xBE27CC", VA = "0xBE27CC")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x2000078")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page13.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Look At IK")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x6000462")]
		[Address(RVA = "0xBE2840", Offset = "0xBE2840", VA = "0xBE2840", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0xBE2884", Offset = "0xBE2884", VA = "0xBE2884", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0xBE28C8", Offset = "0xBE28C8", VA = "0xBE28C8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0xBE290C", Offset = "0xBE290C", VA = "0xBE290C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0xBE2950", Offset = "0xBE2950", VA = "0xBE2950", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0xBE2958", Offset = "0xBE2958", VA = "0xBE2958")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x2000079")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page15.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Trigonometric IK")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x6000468")]
		[Address(RVA = "0xBE29CC", Offset = "0xBE29CC", VA = "0xBE29CC", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0xBE2A10", Offset = "0xBE2A10", VA = "0xBE2A10", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0xBE2A54", Offset = "0xBE2A54", VA = "0xBE2A54")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0xBE2A98", Offset = "0xBE2A98", VA = "0xBE2A98")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0xBE2ADC", Offset = "0xBE2ADC", VA = "0xBE2ADC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0xBE2AE4", Offset = "0xBE2AE4", VA = "0xBE2AE4")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x200007A")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/VR IK")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x200007B")]
		public class References
		{
			[Token(Token = "0x4000267")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x4000268")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x4000269")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x400026A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Optional")]
			public Transform chest;

			[Token(Token = "0x400026B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Optional")]
			public Transform neck;

			[Token(Token = "0x400026C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x400026D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("Optional")]
			public Transform leftShoulder;

			[Token(Token = "0x400026E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x400026F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x4000270")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x4000271")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Optional")]
			public Transform rightShoulder;

			[Token(Token = "0x4000272")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x4000273")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x4000274")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x4000275")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftThigh;

			[Token(Token = "0x4000276")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftCalf;

			[Token(Token = "0x4000277")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftFoot;

			[Token(Token = "0x4000278")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Tooltip("Optional")]
			public Transform leftToes;

			[Token(Token = "0x4000279")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightThigh;

			[Token(Token = "0x400027A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightCalf;

			[Token(Token = "0x400027B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightFoot;

			[Token(Token = "0x400027C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[Tooltip("Optional")]
			public Transform rightToes;

			[Token(Token = "0x17000056")]
			public bool isFilled
			{
				[Token(Token = "0x6000478")]
				[Address(RVA = "0xBE3534", Offset = "0xBE3534", VA = "0xBE3534")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000057")]
			public bool isEmpty
			{
				[Token(Token = "0x6000479")]
				[Address(RVA = "0xBE3178", Offset = "0xBE3178", VA = "0xBE3178")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000477")]
			[Address(RVA = "0xBE3B38", Offset = "0xBE3B38", VA = "0xBE3B38")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x600047A")]
			[Address(RVA = "0xBE2C40", Offset = "0xBE2C40", VA = "0xBE2C40")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x600047B")]
			[Address(RVA = "0xBE3B30", Offset = "0xBE3B30", VA = "0xBE3B30")]
			public References()
			{
			}
		}

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[ContextMenuItem("Auto-detect References", "AutoDetectReferences")]
		[Tooltip("Bone mapping. Right-click on the component header and select 'Auto-detect References' of fill in manually if not a Humanoid character. Chest, neck, shoulder and toe bones are optional. VRIK also supports legless characters. If you do not wish to use legs, leave all leg references empty.")]
		public References references;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The VRIK solver.")]
		public IKSolverVR solver;

		[Token(Token = "0x600046E")]
		[Address(RVA = "0xBE2B58", Offset = "0xBE2B58", VA = "0xBE2B58", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0xBE2B9C", Offset = "0xBE2B9C", VA = "0xBE2B9C", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0xBE2BE0", Offset = "0xBE2BE0", VA = "0xBE2BE0")]
		[ContextMenu("TUTORIAL VIDEO (STEAMVR SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0xBE2C24", Offset = "0xBE2C24", VA = "0xBE2C24")]
		[ContextMenu("Auto-detect References")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0xBE30DC", Offset = "0xBE30DC", VA = "0xBE30DC")]
		[ContextMenu("Guess Hand Orientations")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0xBE3104", Offset = "0xBE3104", VA = "0xBE3104", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0xBE310C", Offset = "0xBE310C", VA = "0xBE310C", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0xBE38F0", Offset = "0xBE38F0", VA = "0xBE38F0", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0xBE3A80", Offset = "0xBE3A80", VA = "0xBE3A80")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200007C")]
	public class FABRIKChain
	{
		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x600047C")]
		[Address(RVA = "0xBE407C", Offset = "0xBE407C", VA = "0xBE407C")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0xBE414C", Offset = "0xBE414C", VA = "0xBE414C")]
		public void Initiate()
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0xBE416C", Offset = "0xBE416C", VA = "0xBE416C")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0xBE43C0", Offset = "0xBE43C0", VA = "0xBE43C0")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0xBE422C", Offset = "0xBE422C", VA = "0xBE422C")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0xBE44A4", Offset = "0xBE44A4", VA = "0xBE44A4")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x200007D")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x6000482")]
		[Address(RVA = "0xBE4510", Offset = "0xBE4510", VA = "0xBE4510")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0xBE49C0", Offset = "0xBE49C0", VA = "0xBE49C0")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0xBE4B54", Offset = "0xBE4B54", VA = "0xBE4B54")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0xBE4C80", Offset = "0xBE4C80", VA = "0xBE4C80")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x200007E")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200007F")]
		public class BendBone
		{
			[Token(Token = "0x40002B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Assign spine and/or neck bones.")]
			public Transform transform;

			[Token(Token = "0x40002B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight of rotating this bone.")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x40002B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000494")]
			[Address(RVA = "0xBE7F38", Offset = "0xBE7F38", VA = "0xBE7F38")]
			public BendBone()
			{
			}

			[Token(Token = "0x6000495")]
			[Address(RVA = "0xBE7F98", Offset = "0xBE7F98", VA = "0xBE7F98")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x6000496")]
			[Address(RVA = "0xBE5578", Offset = "0xBE5578", VA = "0xBE5578")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000497")]
			[Address(RVA = "0xBE5948", Offset = "0xBE5948", VA = "0xBE5948")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the FBBIK component.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[LargeHeader("Position")]
		[Range(0f, 1f)]
		[Tooltip("Master weight for positioning the head.")]
		public float positionWeight;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		[Tooltip("The weight of moving the body along with the head")]
		public float bodyWeight;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The weight of moving the thighs along with the head")]
		[Range(0f, 1f)]
		public float thighWeight;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If false, hands will not pull the head away if they are too far. Disabling this will improve performance significantly.")]
		public bool handsPullBody;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The weight of rotating the head bone after solving")]
		[Range(0f, 1f)]
		[LargeHeader("Rotation")]
		public float rotationWeight;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Clamping the rotation of the body")]
		[Range(0f, 1f)]
		public float bodyClampWeight;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Clamping the rotation of the head")]
		[Range(0f, 1f)]
		public float headClampWeight;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The master weight of bending/twisting the spine to the rotation of the head effector. This is similar to CCD, but uses the rotation of the head effector not the position.")]
		[Range(0f, 1f)]
		public float bendWeight;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The bones to use for bending.")]
		public BendBone[] bendBones;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[LargeHeader("CCD")]
		[Range(0f, 1f)]
		[Tooltip("Optional. The master weight of the CCD (Cyclic Coordinate Descent) IK effect that bends the spine towards the head effector before FBBIK solves.")]
		public float CCDWeight;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The weight of rolling the bones in towards the target")]
		[Range(0f, 1f)]
		public float roll;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Smoothing the CCD effect.")]
		[Range(0f, 1000f)]
		public float damper;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Bones to use for the CCD pass. Assign spine and/or neck bones.")]
		public Transform[] CCDBones;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[LargeHeader("Stretching")]
		[Tooltip("Stretching the spine/neck to help reach the target. This is useful for making sure the head stays locked relative to the VR headset. NB! Stretching is done after FBBIK has solved so if you have the hand effectors pinned and spine bones included in the 'Stretch Bones', the hands might become offset from their target positions.")]
		[Range(0f, 1f)]
		public float postStretchWeight;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Stretch magnitude limit.")]
		public float maxStretch;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If > 0, dampers the stretching effect.")]
		public float stretchDamper;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If true, will fix head position to this Transform no matter what. Good for making sure the head will not budge away from the VR headset")]
		public bool fixHead;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Bones to use for stretching. The more bones you add, the less noticable the effect.")]
		public Transform[] stretchBones;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[LargeHeader("Chest Direction")]
		public Vector3 chestDirection;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float chestDirectionWeight;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x6000486")]
		[Address(RVA = "0xBE4C88", Offset = "0xBE4C88", VA = "0xBE4C88")]
		private void Start()
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0xBE50C8", Offset = "0xBE50C8", VA = "0xBE50C8")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0xBE55A4", Offset = "0xBE55A4", VA = "0xBE55A4")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0xBE5970", Offset = "0xBE5970", VA = "0xBE5970")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0xBE626C", Offset = "0xBE626C", VA = "0xBE626C")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0xBE6664", Offset = "0xBE6664", VA = "0xBE6664")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0xBE6A74", Offset = "0xBE6A74", VA = "0xBE6A74")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0xBE73EC", Offset = "0xBE73EC", VA = "0xBE73EC")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0xBE5FB0", Offset = "0xBE5FB0", VA = "0xBE5FB0")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0xBE7628", Offset = "0xBE7628", VA = "0xBE7628")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0xBE730C", Offset = "0xBE730C", VA = "0xBE730C")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0xBE720C", Offset = "0xBE720C", VA = "0xBE720C")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0xBE7988", Offset = "0xBE7988", VA = "0xBE7988")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0xBE7D24", Offset = "0xBE7D24", VA = "0xBE7D24")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000080")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x2000081")]
		public class ChildConstraint
		{
			[Token(Token = "0x40002D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x40002D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x40002D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x40002D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x40002D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x40002D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x40002D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x40002DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x17000058")]
			public float nominalDistance
			{
				[Token(Token = "0x60004AC")]
				[Address(RVA = "0xBEB0A0", Offset = "0xBEB0A0", VA = "0xBEB0A0")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60004AD")]
				[Address(RVA = "0xBEB0A8", Offset = "0xBEB0A8", VA = "0xBEB0A8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000059")]
			public bool isRigid
			{
				[Token(Token = "0x60004AE")]
				[Address(RVA = "0xBEB0B0", Offset = "0xBEB0B0", VA = "0xBEB0B0")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60004AF")]
				[Address(RVA = "0xBEB0B8", Offset = "0xBEB0B8", VA = "0xBEB0B8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60004B0")]
			[Address(RVA = "0xBEB0C4", Offset = "0xBEB0C4", VA = "0xBEB0C4")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x60004B1")]
			[Address(RVA = "0xBE8D74", Offset = "0xBE8D74", VA = "0xBE8D74")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60004B2")]
			[Address(RVA = "0xBE9458", Offset = "0xBE9458", VA = "0xBE9458")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60004B3")]
			[Address(RVA = "0xBEAE64", Offset = "0xBEAE64", VA = "0xBEAE64")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000082")]
		public enum Smoothing
		{
			[Token(Token = "0x40002DC")]
			None,
			[Token(Token = "0x40002DD")]
			Exponential,
			[Token(Token = "0x40002DE")]
			Cubic
		}

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float push;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(-1f, 1f)]
		public float pushParent;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float reach;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x40002D0")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x6000498")]
		[Address(RVA = "0xBE8020", Offset = "0xBE8020", VA = "0xBE8020")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0xBE81B8", Offset = "0xBE81B8", VA = "0xBE81B8")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0xBE8328", Offset = "0xBE8328", VA = "0xBE8328")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0xBE8458", Offset = "0xBE8458", VA = "0xBE8458")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0xBE8514", Offset = "0xBE8514", VA = "0xBE8514")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0xBE8630", Offset = "0xBE8630", VA = "0xBE8630")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0xBE9074", Offset = "0xBE9074", VA = "0xBE9074")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0xBE87AC", Offset = "0xBE87AC", VA = "0xBE87AC")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xBE963C", Offset = "0xBE963C", VA = "0xBE963C")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xBE98D0", Offset = "0xBE98D0", VA = "0xBE98D0")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xBE9BA0", Offset = "0xBE9BA0", VA = "0xBE9BA0")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xBEA568", Offset = "0xBEA568", VA = "0xBEA568")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xBEAA60", Offset = "0xBEAA60", VA = "0xBEAA60")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xBEAC60", Offset = "0xBEAC60", VA = "0xBEAC60")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0xBEA94C", Offset = "0xBEA94C", VA = "0xBEA94C")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xBEA408", Offset = "0xBEA408", VA = "0xBEA408")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0xBEA8E8", Offset = "0xBEA8E8", VA = "0xBEA8E8")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0xBEAD3C", Offset = "0xBEAD3C", VA = "0xBEAD3C")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0xBEA814", Offset = "0xBEA814", VA = "0xBEA814")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0xBEAB64", Offset = "0xBEAB64", VA = "0xBEAB64")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000083")]
	public class IKConstraintBend
	{
		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x1700005A")]
		public bool initiated
		{
			[Token(Token = "0x60004B5")]
			[Address(RVA = "0xBEB2F8", Offset = "0xBEB2F8", VA = "0xBEB2F8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004B6")]
			[Address(RVA = "0xBEB300", Offset = "0xBEB300", VA = "0xBEB300")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xBEB120", Offset = "0xBEB120", VA = "0xBEB120")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xBE814C", Offset = "0xBE814C", VA = "0xBE814C")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xBEB30C", Offset = "0xBEB30C", VA = "0xBEB30C")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xBE8DC8", Offset = "0xBE8DC8", VA = "0xBE8DC8")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xBE8E0C", Offset = "0xBE8E0C", VA = "0xBE8E0C")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xBEB4E8", Offset = "0xBEB4E8", VA = "0xBEB4E8")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xBEB83C", Offset = "0xBEB83C", VA = "0xBEB83C")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xBE9DD8", Offset = "0xBE9DD8", VA = "0xBE9DD8")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xBEB3A0", Offset = "0xBEB3A0", VA = "0xBEB3A0")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xBEB444", Offset = "0xBEB444", VA = "0xBEB444")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000084")]
	public class IKEffector
	{
		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x1700005B")]
		public bool isEndEffector
		{
			[Token(Token = "0x60004C1")]
			[Address(RVA = "0xBEBC04", Offset = "0xBEBC04", VA = "0xBEBC04")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004C2")]
			[Address(RVA = "0xBEBC0C", Offset = "0xBEBC0C", VA = "0xBEBC0C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xBE792C", Offset = "0xBE792C", VA = "0xBE792C")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xBEBC18", Offset = "0xBEBC18", VA = "0xBEBC18")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xBEBC9C", Offset = "0xBEBC9C", VA = "0xBEBC9C")]
		public IKEffector()
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xBEBE6C", Offset = "0xBEBE6C", VA = "0xBEBE6C")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0xBEC078", Offset = "0xBEC078", VA = "0xBEC078")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0xBEC380", Offset = "0xBEC380", VA = "0xBEC380")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0xBEC658", Offset = "0xBEC658", VA = "0xBEC658")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xBEC778", Offset = "0xBEC778", VA = "0xBEC778")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xBEC814", Offset = "0xBEC814", VA = "0xBEC814")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0xBECEC8", Offset = "0xBECEC8", VA = "0xBECEC8")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0xBECF20", Offset = "0xBECF20", VA = "0xBECF20")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xBED0F4", Offset = "0xBED0F4", VA = "0xBED0F4")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0xBED350", Offset = "0xBED350", VA = "0xBED350")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000085")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x2000086")]
		public class BoneMap
		{
			[Token(Token = "0x4000311")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000312")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4000313")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4000314")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000315")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4000316")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4000317")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4000318")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4000319")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x400031A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x400031B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x400031C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x400031D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x400031E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x400031F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4000320")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x4000321")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4000322")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4000323")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4000324")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4000325")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x4000326")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x1700005C")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x60004D5")]
				[Address(RVA = "0xBED8C0", Offset = "0xBED8C0", VA = "0xBED8C0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700005D")]
			public bool isNodeBone
			{
				[Token(Token = "0x60004D8")]
				[Address(RVA = "0xBED978", Offset = "0xBED978", VA = "0xBED978")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700005E")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x60004EC")]
				[Address(RVA = "0xBEDD64", Offset = "0xBEDD64", VA = "0xBEDD64")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x60004D4")]
			[Address(RVA = "0xBED87C", Offset = "0xBED87C", VA = "0xBED87C")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60004D6")]
			[Address(RVA = "0xBED8F0", Offset = "0xBED8F0", VA = "0xBED8F0")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60004D7")]
			[Address(RVA = "0xBED934", Offset = "0xBED934", VA = "0xBED934")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x60004D9")]
			[Address(RVA = "0xBED988", Offset = "0xBED988", VA = "0xBED988")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x60004DA")]
			[Address(RVA = "0xBEDA5C", Offset = "0xBEDA5C", VA = "0xBEDA5C")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x60004DB")]
			[Address(RVA = "0xBEDA64", Offset = "0xBEDA64", VA = "0xBEDA64")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x60004DC")]
			[Address(RVA = "0xBEDB30", Offset = "0xBEDB30", VA = "0xBEDB30")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x60004DD")]
			[Address(RVA = "0xBEDB9C", Offset = "0xBEDB9C", VA = "0xBEDB9C")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x60004DE")]
			[Address(RVA = "0xBEDC54", Offset = "0xBEDC54", VA = "0xBEDC54")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x60004DF")]
			[Address(RVA = "0xBEDECC", Offset = "0xBEDECC", VA = "0xBEDECC")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x60004E0")]
			[Address(RVA = "0xBEDEF8", Offset = "0xBEDEF8", VA = "0xBEDEF8")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x60004E1")]
			[Address(RVA = "0xBEDF24", Offset = "0xBEDF24", VA = "0xBEDF24")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x60004E2")]
			[Address(RVA = "0xBEDF4C", Offset = "0xBEDF4C", VA = "0xBEDF4C")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x60004E3")]
			[Address(RVA = "0xBEE010", Offset = "0xBEE010", VA = "0xBEE010")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60004E4")]
			[Address(RVA = "0xBEE1A4", Offset = "0xBEE1A4", VA = "0xBEE1A4")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60004E5")]
			[Address(RVA = "0xBEE1C8", Offset = "0xBEE1C8", VA = "0xBEE1C8")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x60004E6")]
			[Address(RVA = "0xBEE2E8", Offset = "0xBEE2E8", VA = "0xBEE2E8")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x60004E7")]
			[Address(RVA = "0xBEE34C", Offset = "0xBEE34C", VA = "0xBEE34C")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x60004E8")]
			[Address(RVA = "0xBEE4CC", Offset = "0xBEE4CC", VA = "0xBEE4CC")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x60004E9")]
			[Address(RVA = "0xBEE64C", Offset = "0xBEE64C", VA = "0xBEE64C")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x60004EA")]
			[Address(RVA = "0xBEE6C8", Offset = "0xBEE6C8", VA = "0xBEE6C8")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x60004EB")]
			[Address(RVA = "0xBEE088", Offset = "0xBEE088", VA = "0xBEE088")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60004ED")]
			[Address(RVA = "0xBEE7F0", Offset = "0xBEE7F0", VA = "0xBEE7F0")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xBED60C", Offset = "0xBED60C", VA = "0xBED60C", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0xBED614", Offset = "0xBED614", VA = "0xBED614", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xBED618", Offset = "0xBED618", VA = "0xBED618")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0xBED760", Offset = "0xBED760", VA = "0xBED760")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xBED874", Offset = "0xBED874", VA = "0xBED874")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000087")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xBEE80C", Offset = "0xBEE80C", VA = "0xBEE80C", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xBEE8B4", Offset = "0xBEE8B4", VA = "0xBEE8B4")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xBEE944", Offset = "0xBEE944", VA = "0xBEE944")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xBEE9F0", Offset = "0xBEE9F0", VA = "0xBEE9F0")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xBEEA08", Offset = "0xBEEA08", VA = "0xBEEA08")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xBEEA24", Offset = "0xBEEA24", VA = "0xBEEA24", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xBEEACC", Offset = "0xBEEACC", VA = "0xBEEACC")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xBEEAE4", Offset = "0xBEEAE4", VA = "0xBEEAE4")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000088")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x2000089")]
		public enum BoneMapType
		{
			[Token(Token = "0x4000336")]
			Parent,
			[Token(Token = "0x4000337")]
			Bone1,
			[Token(Token = "0x4000338")]
			Bone2,
			[Token(Token = "0x4000339")]
			Bone3
		}

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updatePlaneRotations;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMapParent;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap1;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap2;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap boneMap3;

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xBEEB08", Offset = "0xBEEB08", VA = "0xBEEB08", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xBEEB7C", Offset = "0xBEEB7C", VA = "0xBEEB7C")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xBEEC44", Offset = "0xBEEC44", VA = "0xBEEC44")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xBEEEFC", Offset = "0xBEEEFC", VA = "0xBEEEFC")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xBEF048", Offset = "0xBEF048", VA = "0xBEF048")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xBEF1CC", Offset = "0xBEF1CC", VA = "0xBEF1CC")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xBEF22C", Offset = "0xBEF22C", VA = "0xBEF22C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0xBEF2C4", Offset = "0xBEF2C4", VA = "0xBEF2C4")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0xBEF36C", Offset = "0xBEF36C", VA = "0xBEF36C", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0xBEF620", Offset = "0xBEF620", VA = "0xBEF620")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0xBEF680", Offset = "0xBEF680", VA = "0xBEF680")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008A")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(1f, 3f)]
		public int iterations;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float twistWeight;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x6000501")]
		[Address(RVA = "0xBEF7C8", Offset = "0xBEF7C8", VA = "0xBEF7C8", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0xBEFAF4", Offset = "0xBEFAF4", VA = "0xBEFAF4")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0xBEFC6C", Offset = "0xBEFC6C", VA = "0xBEFC6C")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0xBEFE24", Offset = "0xBEFE24", VA = "0xBEFE24")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0xBEFE98", Offset = "0xBEFE98", VA = "0xBEFE98")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0xBEFEF4", Offset = "0xBEFEF4", VA = "0xBEFEF4")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0xBEFF6C", Offset = "0xBEFF6C", VA = "0xBEFF6C", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0xBF05E4", Offset = "0xBF05E4", VA = "0xBF05E4")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0xBF061C", Offset = "0xBF061C", VA = "0xBF061C")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0xBF0880", Offset = "0xBF0880", VA = "0xBF0880")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0xBF0BA8", Offset = "0xBF0BA8", VA = "0xBF0BA8")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0xBF0C88", Offset = "0xBF0C88", VA = "0xBF0C88")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0xBF0D3C", Offset = "0xBF0D3C", VA = "0xBF0D3C")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008B")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x200008C")]
		public class Point
		{
			[Token(Token = "0x4000352")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000353")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x4000354")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000355")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000356")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000357")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x6000524")]
			[Address(RVA = "0xBF1620", Offset = "0xBF1620", VA = "0xBF1620")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000525")]
			[Address(RVA = "0xBF1664", Offset = "0xBF1664", VA = "0xBF1664")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000526")]
			[Address(RVA = "0xBF1744", Offset = "0xBF1744", VA = "0xBF1744")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x6000527")]
			[Address(RVA = "0xBF1770", Offset = "0xBF1770", VA = "0xBF1770")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x6000528")]
			[Address(RVA = "0xBF179C", Offset = "0xBF179C", VA = "0xBF179C")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x6000529")]
			[Address(RVA = "0xBF17E0", Offset = "0xBF17E0", VA = "0xBF17E0")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x600052A")]
			[Address(RVA = "0xBF1824", Offset = "0xBF1824", VA = "0xBF1824")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200008D")]
		public class Bone : Point
		{
			[Token(Token = "0x4000358")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000359")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x400035A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x400035B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x400035C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x17000060")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x600052B")]
				[Address(RVA = "0xBF1884", Offset = "0xBF1884", VA = "0xBF1884")]
				get
				{
					return null;
				}
				[Token(Token = "0x600052C")]
				[Address(RVA = "0xBF1974", Offset = "0xBF1974", VA = "0xBF1974")]
				set
				{
				}
			}

			[Token(Token = "0x600052D")]
			[Address(RVA = "0xBF19F8", Offset = "0xBF19F8", VA = "0xBF19F8")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x600052E")]
			[Address(RVA = "0xBF1C64", Offset = "0xBF1C64", VA = "0xBF1C64")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x600052F")]
			[Address(RVA = "0xBF1F20", Offset = "0xBF1F20", VA = "0xBF1F20")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000530")]
			[Address(RVA = "0xBF2114", Offset = "0xBF2114", VA = "0xBF2114")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x6000531")]
			[Address(RVA = "0xBF213C", Offset = "0xBF213C", VA = "0xBF213C")]
			public Bone()
			{
			}

			[Token(Token = "0x6000532")]
			[Address(RVA = "0xBF21A8", Offset = "0xBF21A8", VA = "0xBF21A8")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x6000533")]
			[Address(RVA = "0xBF2228", Offset = "0xBF2228", VA = "0xBF2228")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200008E")]
		public class Node : Point
		{
			[Token(Token = "0x400035D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x400035E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x400035F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x4000360")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x6000534")]
			[Address(RVA = "0xBF22BC", Offset = "0xBF22BC", VA = "0xBF22BC")]
			public Node()
			{
			}

			[Token(Token = "0x6000535")]
			[Address(RVA = "0xBF22C0", Offset = "0xBF22C0", VA = "0xBF22C0")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x6000536")]
			[Address(RVA = "0xBF22EC", Offset = "0xBF22EC", VA = "0xBF22EC")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x200008F")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x2000090")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public bool executedInEditor;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The positional or the master weight of the solver.")]
		[Range(0f, 1f)]
		public float IKPositionWeight;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		protected Transform root;

		[Token(Token = "0x1700005F")]
		public bool initiated
		{
			[Token(Token = "0x6000517")]
			[Address(RVA = "0xBF122C", Offset = "0xBF122C", VA = "0xBF122C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000518")]
			[Address(RVA = "0xBF1234", Offset = "0xBF1234", VA = "0xBF1234")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0xBF0F80", Offset = "0xBF0F80", VA = "0xBF0F80")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600050F")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x6000510")]
		[Address(RVA = "0xBF0FF4", Offset = "0xBF0FF4", VA = "0xBF0FF4")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0xBF1178", Offset = "0xBF1178", VA = "0xBF1178")]
		public void Update()
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0xBF11E8", Offset = "0xBF11E8", VA = "0xBF11E8", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0xBF11F4", Offset = "0xBF11F4", VA = "0xBF11F4")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0xBF1200", Offset = "0xBF1200", VA = "0xBF1200")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0xBF1208", Offset = "0xBF1208", VA = "0xBF1208")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0xBF1224", Offset = "0xBF1224", VA = "0xBF1224")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x6000519")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x600051A")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x600051B")]
		public abstract void FixTransforms();

		[Token(Token = "0x600051C")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x600051D")]
		protected abstract void OnInitiate();

		[Token(Token = "0x600051E")]
		protected abstract void OnUpdate();

		[Token(Token = "0x600051F")]
		[Address(RVA = "0xBF1240", Offset = "0xBF1240", VA = "0xBF1240")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0xBF1258", Offset = "0xBF1258", VA = "0xBF1258")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0xBF137C", Offset = "0xBF137C", VA = "0xBF137C")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0xBF1414", Offset = "0xBF1414", VA = "0xBF1414")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0xBF1608", Offset = "0xBF1608", VA = "0xBF1608")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000091")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float poleWeight;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x17000061")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x6000540")]
			[Address(RVA = "0xBF26E8", Offset = "0xBF26E8", VA = "0xBF26E8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000062")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x6000541")]
			[Address(RVA = "0xBF2718", Offset = "0xBF2718", VA = "0xBF2718")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000063")]
		protected override int minBones
		{
			[Token(Token = "0x6000544")]
			[Address(RVA = "0xBF3368", Offset = "0xBF3368", VA = "0xBF3368", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000064")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x6000548")]
			[Address(RVA = "0xBF38A8", Offset = "0xBF38A8", VA = "0xBF38A8", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0xBF25B0", Offset = "0xBF25B0", VA = "0xBF25B0")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0xBF2748", Offset = "0xBF2748", VA = "0xBF2748", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0xBF29D4", Offset = "0xBF29D4", VA = "0xBF29D4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0xBF32C0", Offset = "0xBF32C0", VA = "0xBF32C0")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0xBF2F5C", Offset = "0xBF2F5C", VA = "0xBF2F5C")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0xBF3370", Offset = "0xBF3370", VA = "0xBF3370")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0xBF3908", Offset = "0xBF3908", VA = "0xBF3908")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000092")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] positions;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x600054A")]
		[Address(RVA = "0xBF3A28", Offset = "0xBF3A28", VA = "0xBF3A28", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0xBF3DCC", Offset = "0xBF3DCC", VA = "0xBF3DCC")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0xBF3E7C", Offset = "0xBF3E7C", VA = "0xBF3E7C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0xBF3FFC", Offset = "0xBF3FFC", VA = "0xBF3FFC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0xBF415C", Offset = "0xBF415C", VA = "0xBF415C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0xBF419C", Offset = "0xBF419C", VA = "0xBF419C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0xBF41EC", Offset = "0xBF41EC", VA = "0xBF41EC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0xBF454C", Offset = "0xBF454C", VA = "0xBF454C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0xBF456C", Offset = "0xBF456C", VA = "0xBF456C")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0xBF4244", Offset = "0xBF4244", VA = "0xBF4244")]
		private void Read()
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0xBF45D0", Offset = "0xBF45D0", VA = "0xBF45D0")]
		private void Write()
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0xBF4748", Offset = "0xBF4748", VA = "0xBF4748")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000093")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x6000556")]
		[Address(RVA = "0xBF493C", Offset = "0xBF493C", VA = "0xBF493C")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0xBF49AC", Offset = "0xBF49AC", VA = "0xBF49AC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0xBF4EA0", Offset = "0xBF4EA0", VA = "0xBF4EA0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0xBF5574", Offset = "0xBF5574", VA = "0xBF5574")]
		protected void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0xBF5C04", Offset = "0xBF5C04", VA = "0xBF5C04")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000094")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x17000065")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x6000560")]
			[Address(RVA = "0xBF6BEC", Offset = "0xBF6BEC", VA = "0xBF6BEC", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0xBF5C08", Offset = "0xBF5C08", VA = "0xBF5C08")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0xBF61E8", Offset = "0xBF61E8", VA = "0xBF61E8")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0xBF6318", Offset = "0xBF6318", VA = "0xBF6318", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0xBF63A0", Offset = "0xBF63A0", VA = "0xBF63A0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0xBF68B4", Offset = "0xBF68B4", VA = "0xBF68B4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0xBF6BF4", Offset = "0xBF6BF4", VA = "0xBF6BF4")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0xBF5CE0", Offset = "0xBF5CE0", VA = "0xBF5CE0")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0xBF62D0", Offset = "0xBF62D0", VA = "0xBF62D0")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0xBF6BA4", Offset = "0xBF6BA4", VA = "0xBF6BA4")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0xBF607C", Offset = "0xBF607C", VA = "0xBF607C")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0xBF72A0", Offset = "0xBF72A0", VA = "0xBF72A0")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0xBF7308", Offset = "0xBF7308", VA = "0xBF7308")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0xBF73D8", Offset = "0xBF73D8", VA = "0xBF73D8")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0xBF74A0", Offset = "0xBF74A0", VA = "0xBF74A0")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0xBF662C", Offset = "0xBF662C", VA = "0xBF662C")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0xBF6770", Offset = "0xBF6770", VA = "0xBF6770")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0xBF7590", Offset = "0xBF7590", VA = "0xBF7590")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0xBF6E90", Offset = "0xBF6E90", VA = "0xBF6E90")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0xBF62C0", Offset = "0xBF62C0", VA = "0xBF62C0")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0xBF7C00", Offset = "0xBF7C00", VA = "0xBF7C00")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0xBF7750", Offset = "0xBF7750", VA = "0xBF7750")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0xBF6D10", Offset = "0xBF6D10", VA = "0xBF6D10")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0xBF6DE0", Offset = "0xBF6DE0", VA = "0xBF6DE0")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0xBF7CB8", Offset = "0xBF7CB8", VA = "0xBF7CB8")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000095")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float rootPin;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x6000574")]
		[Address(RVA = "0xBF7D50", Offset = "0xBF7D50", VA = "0xBF7D50", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0xBF8414", Offset = "0xBF8414", VA = "0xBF8414", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0xBF84A0", Offset = "0xBF84A0", VA = "0xBF84A0", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0xBF8534", Offset = "0xBF8534", VA = "0xBF8534", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0xBF862C", Offset = "0xBF862C", VA = "0xBF862C")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0xBF86BC", Offset = "0xBF86BC", VA = "0xBF86BC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0xBF8ABC", Offset = "0xBF8ABC", VA = "0xBF8ABC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0xBF8CB4", Offset = "0xBF8CB4", VA = "0xBF8CB4", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0xBF8B5C", Offset = "0xBF8B5C", VA = "0xBF8B5C")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0xBF8894", Offset = "0xBF8894", VA = "0xBF8894")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0xBF8D38", Offset = "0xBF8D38", VA = "0xBF8D38")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000096")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 10f)]
		public int iterations;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x600057F")]
		[Address(RVA = "0xBF8DB4", Offset = "0xBF8DB4", VA = "0xBF8DB4")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0xBF8E90", Offset = "0xBF8E90", VA = "0xBF8E90")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0xBF8ED8", Offset = "0xBF8ED8", VA = "0xBF8ED8")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0xBF8FEC", Offset = "0xBF8FEC", VA = "0xBF8FEC")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0xBF903C", Offset = "0xBF903C", VA = "0xBF903C")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0xBF90B0", Offset = "0xBF90B0", VA = "0xBF90B0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0xBF9250", Offset = "0xBF9250", VA = "0xBF9250", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0xBF93AC", Offset = "0xBF93AC", VA = "0xBF93AC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0xBF95B0", Offset = "0xBF95B0", VA = "0xBF95B0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xBF9684", Offset = "0xBF9684", VA = "0xBF9684", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xBF976C", Offset = "0xBF976C", VA = "0xBF976C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0xBF98CC", Offset = "0xBF98CC", VA = "0xBF98CC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0xBF9A68", Offset = "0xBF9A68", VA = "0xBF9A68", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xBF9CA0", Offset = "0xBF9CA0", VA = "0xBF9CA0", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0xBF9F80", Offset = "0xBF9F80", VA = "0xBF9F80", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0xBF9FB8", Offset = "0xBF9FB8", VA = "0xBF9FB8", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0xBFA09C", Offset = "0xBFA09C", VA = "0xBFA09C")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000097")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x4000393")]
		Body,
		[Token(Token = "0x4000394")]
		LeftShoulder,
		[Token(Token = "0x4000395")]
		RightShoulder,
		[Token(Token = "0x4000396")]
		LeftThigh,
		[Token(Token = "0x4000397")]
		RightThigh,
		[Token(Token = "0x4000398")]
		LeftHand,
		[Token(Token = "0x4000399")]
		RightHand,
		[Token(Token = "0x400039A")]
		LeftFoot,
		[Token(Token = "0x400039B")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x2000098")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x400039D")]
		LeftArm,
		[Token(Token = "0x400039E")]
		RightArm,
		[Token(Token = "0x400039F")]
		LeftLeg,
		[Token(Token = "0x40003A0")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x2000099")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		public float spineStiffness;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Range(-1f, 1f)]
		public float pullBodyVertical;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(-1f, 1f)]
		public float pullBodyHorizontal;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x17000066")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x6000590")]
			[Address(RVA = "0xBFA1F4", Offset = "0xBFA1F4", VA = "0xBFA1F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000067")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x6000591")]
			[Address(RVA = "0xBFA334", Offset = "0xBFA334", VA = "0xBFA334")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000068")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x6000592")]
			[Address(RVA = "0xBFA33C", Offset = "0xBFA33C", VA = "0xBFA33C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000069")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x6000593")]
			[Address(RVA = "0xBFA344", Offset = "0xBFA344", VA = "0xBFA344")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006A")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x6000594")]
			[Address(RVA = "0xBFA34C", Offset = "0xBFA34C", VA = "0xBFA34C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006B")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x6000595")]
			[Address(RVA = "0xBFA354", Offset = "0xBFA354", VA = "0xBFA354")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006C")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x6000596")]
			[Address(RVA = "0xBFA35C", Offset = "0xBFA35C", VA = "0xBFA35C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006D")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x6000597")]
			[Address(RVA = "0xBFA364", Offset = "0xBFA364", VA = "0xBFA364")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006E")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x6000598")]
			[Address(RVA = "0xBFA36C", Offset = "0xBFA36C", VA = "0xBFA36C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x6000599")]
			[Address(RVA = "0xBFA374", Offset = "0xBFA374", VA = "0xBFA374")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000070")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x600059A")]
			[Address(RVA = "0xBFA3A0", Offset = "0xBFA3A0", VA = "0xBFA3A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000071")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x600059B")]
			[Address(RVA = "0xBFA3CC", Offset = "0xBFA3CC", VA = "0xBFA3CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x600059C")]
			[Address(RVA = "0xBFA3F8", Offset = "0xBFA3F8", VA = "0xBFA3F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x600059D")]
			[Address(RVA = "0xBFA424", Offset = "0xBFA424", VA = "0xBFA424")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x600059E")]
			[Address(RVA = "0xBFA44C", Offset = "0xBFA44C", VA = "0xBFA44C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x600059F")]
			[Address(RVA = "0xBFA478", Offset = "0xBFA478", VA = "0xBFA478")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x60005A0")]
			[Address(RVA = "0xBFA4A4", Offset = "0xBFA4A4", VA = "0xBFA4A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x60005A1")]
			[Address(RVA = "0xBFA4D0", Offset = "0xBFA4D0", VA = "0xBFA4D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000078")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x60005B1")]
			[Address(RVA = "0xBFC708", Offset = "0xBFC708", VA = "0xBFC708")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60005B2")]
			[Address(RVA = "0xBFC714", Offset = "0xBFC714", VA = "0xBFC714")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0xBFA4F8", Offset = "0xBFA4F8", VA = "0xBFA4F8")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0xBFA5F8", Offset = "0xBFA5F8", VA = "0xBFA5F8")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0xBFA548", Offset = "0xBFA548", VA = "0xBFA548")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0xBFA670", Offset = "0xBFA670", VA = "0xBFA670")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0xBFA1FC", Offset = "0xBFA1FC", VA = "0xBFA1FC")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0xBFA738", Offset = "0xBFA738", VA = "0xBFA738")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xBFA7E8", Offset = "0xBFA7E8", VA = "0xBFA7E8")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0xBFA894", Offset = "0xBFA894", VA = "0xBFA894")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xBFA940", Offset = "0xBFA940", VA = "0xBFA940")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xBFA948", Offset = "0xBFA948", VA = "0xBFA948")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0xBFA970", Offset = "0xBFA970", VA = "0xBFA970")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0xBFAA30", Offset = "0xBFAA30", VA = "0xBFAA30", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xBFABC4", Offset = "0xBFABC4", VA = "0xBFABC4")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0xBFC000", Offset = "0xBFC000", VA = "0xBFC000")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0xBFC5B0", Offset = "0xBFC5B0", VA = "0xBFC5B0")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0xBFC60C", Offset = "0xBFC60C", VA = "0xBFC60C")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xBFC450", Offset = "0xBFC450", VA = "0xBFC450")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xBFC500", Offset = "0xBFC500", VA = "0xBFC500")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xBFC720", Offset = "0xBFC720", VA = "0xBFC720")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0xBFC7E4", Offset = "0xBFC7E4", VA = "0xBFC7E4", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0xBFC8B4", Offset = "0xBFC8B4", VA = "0xBFC8B4")]
		private void PullBody()
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0xBFC9D0", Offset = "0xBFC9D0", VA = "0xBFC9D0")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0xBFCB60", Offset = "0xBFCB60", VA = "0xBFCB60")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0xBFCCD8", Offset = "0xBFCCD8", VA = "0xBFCCD8", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0xBFCF38", Offset = "0xBFCF38", VA = "0xBFCF38", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0xBFCFB0", Offset = "0xBFCFB0", VA = "0xBFCFB0")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009A")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x17000079")]
		protected virtual int minBones
		{
			[Token(Token = "0x60005C5")]
			[Address(RVA = "0xBFD838", Offset = "0xBFD838", VA = "0xBFD838", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700007A")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x60005C6")]
			[Address(RVA = "0xBFD840", Offset = "0xBFD840", VA = "0xBFD840", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007B")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x60005C7")]
			[Address(RVA = "0xBFD848", Offset = "0xBFD848", VA = "0xBFD848", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007C")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x60005CB")]
			[Address(RVA = "0xBFD858", Offset = "0xBFD858", VA = "0xBFD858", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700007D")]
		protected float positionOffset
		{
			[Token(Token = "0x60005CC")]
			[Address(RVA = "0xBF552C", Offset = "0xBF552C", VA = "0xBF552C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0xBFCFBC", Offset = "0xBFCFBC", VA = "0xBFCFBC")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0xBFD164", Offset = "0xBFD164", VA = "0xBFD164")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0xBFD2B0", Offset = "0xBFD2B0", VA = "0xBFD2B0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0xBFD30C", Offset = "0xBFD30C", VA = "0xBFD30C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0xBFD37C", Offset = "0xBFD37C", VA = "0xBFD37C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0xBFD754", Offset = "0xBFD754", VA = "0xBFD754", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0xBFD75C", Offset = "0xBFD75C", VA = "0xBFD75C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0xBFD850", Offset = "0xBFD850", VA = "0xBFD850", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xBFD854", Offset = "0xBFD854", VA = "0xBFD854", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xBF4A18", Offset = "0xBF4A18", VA = "0xBF4A18")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0xBF5180", Offset = "0xBF5180", VA = "0xBF5180")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0xBFD914", Offset = "0xBFD914", VA = "0xBFD914")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0xBF39A8", Offset = "0xBF39A8", VA = "0xBF39A8")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009B")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0xBFDBA8", Offset = "0xBFDBA8", VA = "0xBFDBA8", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0xBFDF4C", Offset = "0xBFDF4C", VA = "0xBFDF4C")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0xBFDFFC", Offset = "0xBFDFFC", VA = "0xBFDFFC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0xBFE17C", Offset = "0xBFE17C", VA = "0xBFE17C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0xBFE2DC", Offset = "0xBFE2DC", VA = "0xBFE2DC", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0xBFE31C", Offset = "0xBFE31C", VA = "0xBFE31C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0xBFE36C", Offset = "0xBFE36C", VA = "0xBFE36C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0xBFE6CC", Offset = "0xBFE6CC", VA = "0xBFE6CC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0xBFE6EC", Offset = "0xBFE6EC", VA = "0xBFE6EC")]
		private void Solve()
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0xBFE3C4", Offset = "0xBFE3C4", VA = "0xBFE3C4")]
		private void Read()
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0xBFE778", Offset = "0xBFE778", VA = "0xBFE778")]
		private void Write()
		{
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0xBFE8F0", Offset = "0xBFE8F0", VA = "0xBFE8F0")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009C")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x200009D")]
		public enum BendModifier
		{
			[Token(Token = "0x40003CB")]
			Animation,
			[Token(Token = "0x40003CC")]
			Target,
			[Token(Token = "0x40003CD")]
			Parent,
			[Token(Token = "0x40003CE")]
			Arm,
			[Token(Token = "0x40003CF")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x200009E")]
		public struct AxisDirection
		{
			[Token(Token = "0x40003D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x40003D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x40003D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x60005E6")]
			[Address(RVA = "0xBFFF00", Offset = "0xBFFF00", VA = "0xBFFF00")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float bendModifierWeight;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x1700007E")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x60005E3")]
			[Address(RVA = "0xBFFEE4", Offset = "0xBFFEE4", VA = "0xBFFEE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0xBFEAE4", Offset = "0xBFEAE4", VA = "0xBFEAE4")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0xBFEB28", Offset = "0xBFEB28", VA = "0xBFEB28")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0xBFEB68", Offset = "0xBFEB68", VA = "0xBFEB68", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0xBFF0A8", Offset = "0xBFF0A8", VA = "0xBFF0A8", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0xBFFBC8", Offset = "0xBFFBC8", VA = "0xBFFBC8", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0xBFFC70", Offset = "0xBFFC70", VA = "0xBFFC70")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0xBFFE4C", Offset = "0xBFFE4C", VA = "0xBFFE4C")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0xBFEEBC", Offset = "0xBFEEBC", VA = "0xBFEEBC")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0xBFF164", Offset = "0xBFF164", VA = "0xBFF164")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200009F")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000A0")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x40003E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Vector3 baseForwardOffsetEuler;

			[Token(Token = "0x17000085")]
			public Vector3 forward
			{
				[Token(Token = "0x6000606")]
				[Address(RVA = "0xC01D74", Offset = "0xC01D74", VA = "0xC01D74")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000602")]
			[Address(RVA = "0xC02430", Offset = "0xC02430", VA = "0xC02430")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x6000603")]
			[Address(RVA = "0xC00E94", Offset = "0xC00E94", VA = "0xC00E94")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x6000604")]
			[Address(RVA = "0xC01184", Offset = "0xC01184", VA = "0xC01184")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x6000605")]
			[Address(RVA = "0xC020BC", Offset = "0xC020BC", VA = "0xC020BC")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 1f)]
		public float headWeight;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float eyesWeight;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Range(0f, 1f)]
		public float clampWeightHead;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		public float clampWeightEyes;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Vector3[] spineForwards;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Vector3[] headForwards;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Vector3[] eyeForward;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool isDirty;

		[Token(Token = "0x1700007F")]
		protected bool spineIsValid
		{
			[Token(Token = "0x60005F6")]
			[Address(RVA = "0xC00624", Offset = "0xC00624", VA = "0xC00624")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000080")]
		protected bool spineIsEmpty
		{
			[Token(Token = "0x60005F7")]
			[Address(RVA = "0xC007CC", Offset = "0xC007CC", VA = "0xC007CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000081")]
		protected bool headIsValid
		{
			[Token(Token = "0x60005F9")]
			[Address(RVA = "0xC006F0", Offset = "0xC006F0", VA = "0xC006F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000082")]
		protected bool headIsEmpty
		{
			[Token(Token = "0x60005FA")]
			[Address(RVA = "0xC007F0", Offset = "0xC007F0", VA = "0xC007F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000083")]
		protected bool eyesIsValid
		{
			[Token(Token = "0x60005FC")]
			[Address(RVA = "0xC00700", Offset = "0xC00700", VA = "0xC00700")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000084")]
		protected bool eyesIsEmpty
		{
			[Token(Token = "0x60005FD")]
			[Address(RVA = "0xC0085C", Offset = "0xC0085C", VA = "0xC0085C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0xC0009C", Offset = "0xC0009C", VA = "0xC0009C")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0xC000B8", Offset = "0xC000B8", VA = "0xC000B8")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0xC000E4", Offset = "0xC000E4", VA = "0xC000E4")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0xC0011C", Offset = "0xC0011C", VA = "0xC0011C")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0xC00164", Offset = "0xC00164", VA = "0xC00164")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0xC001BC", Offset = "0xC001BC", VA = "0xC001BC")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0xC0022C", Offset = "0xC0022C", VA = "0xC0022C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0xC00338", Offset = "0xC00338", VA = "0xC00338")]
		public void SetDirty()
		{
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xC00344", Offset = "0xC00344", VA = "0xC00344", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xC00468", Offset = "0xC00468", VA = "0xC00468", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xC00880", Offset = "0xC00880", VA = "0xC00880", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xC00AD4", Offset = "0xC00AD4", VA = "0xC00AD4", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0xC00C34", Offset = "0xC00C34", VA = "0xC00C34")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xC00EC0", Offset = "0xC00EC0", VA = "0xC00EC0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xC01270", Offset = "0xC01270", VA = "0xC01270", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xC01334", Offset = "0xC01334", VA = "0xC01334")]
		protected void SolveSpine()
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xC01550", Offset = "0xC01550", VA = "0xC01550")]
		protected void SolveHead()
		{
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xC01898", Offset = "0xC01898", VA = "0xC01898")]
		protected void SolveEyes()
		{
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xC01DA4", Offset = "0xC01DA4", VA = "0xC01DA4")]
		protected Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0xC00CF4", Offset = "0xC00CF4", VA = "0xC00CF4")]
		protected void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0xC021C4", Offset = "0xC021C4", VA = "0xC021C4")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A1")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000A2")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x40003EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x40003EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x600061E")]
			[Address(RVA = "0xC03F20", Offset = "0xC03F20", VA = "0xC03F20")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x600061F")]
			[Address(RVA = "0xC04010", Offset = "0xC04010", VA = "0xC04010")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000620")]
			[Address(RVA = "0xC040A0", Offset = "0xC040A0", VA = "0xC040A0")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000621")]
			[Address(RVA = "0xC040D0", Offset = "0xC040D0", VA = "0xC040D0")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6000607")]
		[Address(RVA = "0xC02434", Offset = "0xC02434", VA = "0xC02434")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0xC025C8", Offset = "0xC025C8", VA = "0xC025C8")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0xC02748", Offset = "0xC02748", VA = "0xC02748")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xC02754", Offset = "0xC02754", VA = "0xC02754")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xC02770", Offset = "0xC02770", VA = "0xC02770")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0xC0277C", Offset = "0xC0277C", VA = "0xC0277C")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0xC02784", Offset = "0xC02784", VA = "0xC02784", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0xC02894", Offset = "0xC02894", VA = "0xC02894", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0xC0298C", Offset = "0xC0298C", VA = "0xC0298C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0xC029C0", Offset = "0xC029C0", VA = "0xC029C0", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0xC02A04", Offset = "0xC02A04", VA = "0xC02A04", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0xC02DD8", Offset = "0xC02DD8", VA = "0xC02DD8")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0xC02E50", Offset = "0xC02E50", VA = "0xC02E50")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0xC03344", Offset = "0xC03344", VA = "0xC03344")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0xC0349C", Offset = "0xC0349C", VA = "0xC0349C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0xC03650", Offset = "0xC03650", VA = "0xC03650")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0xC035C8", Offset = "0xC035C8", VA = "0xC035C8")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0xC03740", Offset = "0xC03740", VA = "0xC03740", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0xC03F14", Offset = "0xC03F14", VA = "0xC03F14", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0xC03F18", Offset = "0xC03F18", VA = "0xC03F18", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0xC03F1C", Offset = "0xC03F1C", VA = "0xC03F1C", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0xC03D54", Offset = "0xC03D54", VA = "0xC03D54")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0xBFFCF4", Offset = "0xBFFCF4", VA = "0xBFFCF4")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A3")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000A4")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x20000A5")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4000433")]
				YawPitch,
				[Token(Token = "0x4000434")]
				FromTo
			}

			[Token(Token = "0x4000415")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The hand target. This should not be the hand controller itself, but a child GameObject parented to it so you could adjust it's position/rotation to match the orientation of the hand bone. The best practice for setup would be to move the hand controller to the avatar's hand as it it was held by the avatar, duplicate the avatar's hand bone and parent it to the hand controller. Then assign the duplicate to this slot.")]
			public Transform target;

			[Token(Token = "0x4000416")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The elbow will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x4000417")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Positional weight of the hand target. Note that if you have nulled the target, the hand will still be pulled to the last position of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x4000418")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Rotational weight of the hand target. Note that if you have nulled the target, the hand will still be rotated to the last rotation of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x4000419")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Different techniques for shoulder bone rotation.")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x400041A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("The weight of shoulder rotation")]
			[Range(0f, 1f)]
			public float shoulderRotationWeight;

			[Token(Token = "0x400041B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Range(0f, 1f)]
			[Tooltip("The weight of twisting the shoulders backwards when arms are lifted up.")]
			public float shoulderTwistWeight;

			[Token(Token = "0x400041C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Range(0f, 1f)]
			[Tooltip("If greater than 0, will bend the elbow towards the 'Bend Goal' Transform.")]
			public float bendGoalWeight;

			[Token(Token = "0x400041D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Range(-180f, 180f)]
			[Tooltip("Angular offset of the elbow bending direction.")]
			public float swivelOffset;

			[Token(Token = "0x400041E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Local axis of the hand bone that points from the wrist towards the palm. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x400041F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Local axis of the hand bone that points from the palm towards the thumb. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4000420")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Range(0.01f, 2f)]
			[Tooltip("Use this to make the arm shorter/longer. Works by displacement of hand and forearm localPosition.")]
			public float armLengthMlp;

			[Token(Token = "0x4000421")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Evaluates stretching of the arm by target distance relative to arm length. Value at time 1 represents stretching amount at the point where distance to the target is equal to arm length. Value at time 2 represents stretching amount at the point where distance to the target is double the arm length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce elbow snapping (start stretching the arm slightly before target distance reaches arm length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000422")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000423")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000424")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x4000425")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x4000428")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private bool hasShoulder;

			[Token(Token = "0x4000429")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x400042A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x400042B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion chestRotation;

			[Token(Token = "0x400042C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Vector3 chestForward;

			[Token(Token = "0x400042D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private Vector3 chestUp;

			[Token(Token = "0x400042E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x400042F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			private Vector3 upperArmBendAxis;

			[Token(Token = "0x4000430")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x4000431")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x17000087")]
			public Vector3 position
			{
				[Token(Token = "0x600063E")]
				[Address(RVA = "0xC0C5F8", Offset = "0xC0C5F8", VA = "0xC0C5F8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600063F")]
				[Address(RVA = "0xC0C604", Offset = "0xC0C604", VA = "0xC0C604")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000088")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000640")]
				[Address(RVA = "0xC0C610", Offset = "0xC0C610", VA = "0xC0C610")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000641")]
				[Address(RVA = "0xC0C61C", Offset = "0xC0C61C", VA = "0xC0C61C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000089")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x6000642")]
				[Address(RVA = "0xC0C628", Offset = "0xC0C628", VA = "0xC0C628")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008A")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x6000643")]
				[Address(RVA = "0xC0C650", Offset = "0xC0C650", VA = "0xC0C650")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008B")]
			private VirtualBone forearm
			{
				[Token(Token = "0x6000644")]
				[Address(RVA = "0xC0C684", Offset = "0xC0C684", VA = "0xC0C684")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008C")]
			private VirtualBone hand
			{
				[Token(Token = "0x6000645")]
				[Address(RVA = "0xC0C6C4", Offset = "0xC0C6C4", VA = "0xC0C6C4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000646")]
			[Address(RVA = "0xC0C704", Offset = "0xC0C704", VA = "0xC0C704", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000647")]
			[Address(RVA = "0xC0D08C", Offset = "0xC0D08C", VA = "0xC0D08C", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000648")]
			[Address(RVA = "0xC0D338", Offset = "0xC0D338", VA = "0xC0D338", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x6000649")]
			[Address(RVA = "0xC0D35C", Offset = "0xC0D35C", VA = "0xC0D35C")]
			private void Stretching()
			{
			}

			[Token(Token = "0x600064A")]
			[Address(RVA = "0xC0A1A4", Offset = "0xC0A1A4", VA = "0xC0A1A4")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x600064B")]
			[Address(RVA = "0xC0E2F8", Offset = "0xC0E2F8", VA = "0xC0E2F8", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x600064C")]
			[Address(RVA = "0xC0E350", Offset = "0xC0E350", VA = "0xC0E350", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x600064D")]
			[Address(RVA = "0xC0D6AC", Offset = "0xC0D6AC", VA = "0xC0D6AC")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x600064E")]
			[Address(RVA = "0xC0D8B4", Offset = "0xC0D8B4", VA = "0xC0D8B4")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600064F")]
			[Address(RVA = "0xC0E55C", Offset = "0xC0E55C", VA = "0xC0E55C")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x6000650")]
			[Address(RVA = "0xC0C25C", Offset = "0xC0C25C", VA = "0xC0C25C")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A6")]
		public abstract class BodyPart
		{
			[Token(Token = "0x4000437")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x4000438")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x4000439")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x400043A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x400043B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x400043C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			protected int LOD;

			[Token(Token = "0x1700008D")]
			public float sqrMag
			{
				[Token(Token = "0x6000656")]
				[Address(RVA = "0xC0E718", Offset = "0xC0E718", VA = "0xC0E718")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000657")]
				[Address(RVA = "0xC0E720", Offset = "0xC0E720", VA = "0xC0E720")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700008E")]
			public float mag
			{
				[Token(Token = "0x6000658")]
				[Address(RVA = "0xC0E728", Offset = "0xC0E728", VA = "0xC0E728")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000659")]
				[Address(RVA = "0xC0E730", Offset = "0xC0E730", VA = "0xC0E730")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000651")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x6000652")]
			public abstract void PreSolve();

			[Token(Token = "0x6000653")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6000654")]
			public abstract void ApplyOffsets(float scale);

			[Token(Token = "0x6000655")]
			public abstract void ResetOffsets();

			[Token(Token = "0x600065A")]
			[Address(RVA = "0xC0E738", Offset = "0xC0E738", VA = "0xC0E738")]
			public void SetLOD(int LOD)
			{
			}

			[Token(Token = "0x600065B")]
			[Address(RVA = "0xC07F4C", Offset = "0xC07F4C", VA = "0xC07F4C")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600065C")]
			[Address(RVA = "0xC0E8A0", Offset = "0xC0E8A0", VA = "0xC0E8A0")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x600065D")]
			[Address(RVA = "0xC0E928", Offset = "0xC0E928", VA = "0xC0E928")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x600065E")]
			[Address(RVA = "0xC0EB2C", Offset = "0xC0EB2C", VA = "0xC0EB2C")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x600065F")]
			[Address(RVA = "0xC09DF4", Offset = "0xC09DF4", VA = "0xC09DF4")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x6000660")]
			[Address(RVA = "0xC0E194", Offset = "0xC0E194", VA = "0xC0E194")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x6000661")]
			[Address(RVA = "0xC0EB74", Offset = "0xC0EB74", VA = "0xC0EB74")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x6000662")]
			[Address(RVA = "0xC0EC98", Offset = "0xC0EC98", VA = "0xC0EC98")]
			public void Visualize()
			{
			}

			[Token(Token = "0x6000663")]
			[Address(RVA = "0xC0E674", Offset = "0xC0E674", VA = "0xC0E674")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A7")]
		public class Footstep
		{
			[Token(Token = "0x400043D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x400043E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x400043F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x4000440")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x4000441")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x4000442")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x4000443")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
			public bool relaxFlag;

			[Token(Token = "0x4000445")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x4000446")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x4000447")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x4000448")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x4000449")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x400044A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x400044B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x1700008F")]
			public bool isStepping
			{
				[Token(Token = "0x6000664")]
				[Address(RVA = "0xC0ECAC", Offset = "0xC0ECAC", VA = "0xC0ECAC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000090")]
			public float stepProgress
			{
				[Token(Token = "0x6000665")]
				[Address(RVA = "0xC0ECC0", Offset = "0xC0ECC0", VA = "0xC0ECC0")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000666")]
				[Address(RVA = "0xC0ECC8", Offset = "0xC0ECC8", VA = "0xC0ECC8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000667")]
			[Address(RVA = "0xC0ECD0", Offset = "0xC0ECD0", VA = "0xC0ECD0")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x6000668")]
			[Address(RVA = "0xC0EE94", Offset = "0xC0EE94", VA = "0xC0EE94")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x6000669")]
			[Address(RVA = "0xC0EEDC", Offset = "0xC0EEDC", VA = "0xC0EEDC")]
			public void StepTo(Vector3 p, Quaternion rootRotation, float stepThreshold)
			{
			}

			[Token(Token = "0x600066A")]
			[Address(RVA = "0xC0F120", Offset = "0xC0F120", VA = "0xC0F120")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x600066B")]
			[Address(RVA = "0xC0F328", Offset = "0xC0F328", VA = "0xC0F328")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x600066C")]
			[Address(RVA = "0xC0F50C", Offset = "0xC0F50C", VA = "0xC0F50C")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A8")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x400044C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The foot/toe target. This should not be the foot tracker itself, but a child GameObject parented to it so you could adjust it's position/rotation to match the orientation of the foot/toe bone. If a toe bone is assigned in the References, the solver will match the toe bone to this target. If no toe bone assigned, foot bone will be used instead.")]
			public Transform target;

			[Token(Token = "0x400044D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The knee will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x400044E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the toe/foot target. Note that if you have nulled the target, the foot will still be pulled to the last position of the target until you set this value to 0.")]
			public float positionWeight;

			[Token(Token = "0x400044F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the toe/foot target. Note that if you have nulled the target, the foot will still be rotated to the last rotation of the target until you set this value to 0.")]
			public float rotationWeight;

			[Token(Token = "0x4000450")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Range(0f, 1f)]
			[Tooltip("If greater than 0, will bend the knee towards the 'Bend Goal' Transform.")]
			public float bendGoalWeight;

			[Token(Token = "0x4000451")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Range(-180f, 180f)]
			[Tooltip("Angular offset of knee bending direction.")]
			public float swivelOffset;

			[Token(Token = "0x4000452")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Range(0f, 1f)]
			[Tooltip("If 0, the bend plane will be locked to the rotation of the pelvis and rotating the foot will have no effect on the knee direction. If 1, to the target rotation of the leg so that the knee will bend towards the forward axis of the foot. Values in between will be slerped between the two.")]
			public float bendToTargetWeight;

			[Token(Token = "0x4000453")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Range(0.01f, 2f)]
			[Tooltip("Use this to make the leg shorter/longer. Works by displacement of foot and calf localPosition.")]
			public float legLengthMlp;

			[Token(Token = "0x4000454")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Evaluates stretching of the leg by target distance relative to leg length. Value at time 1 represents stretching amount at the point where distance to the target is equal to leg length. Value at time 1 represents stretching amount at the point where distance to the target is double the leg length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce knee snapping (start stretching the arm slightly before target distance reaches leg length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000455")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000456")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000457")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000458")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000459")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x400045A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x400045B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public bool useAnimatedBendNormal;

			[Token(Token = "0x4000460")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private Vector3 footPosition;

			[Token(Token = "0x4000461")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Quaternion footRotation;

			[Token(Token = "0x4000462")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
			private Vector3 bendNormal;

			[Token(Token = "0x4000463")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x4000464")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x4000465")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			private Vector3 bendNormalRelToPelvis;

			[Token(Token = "0x4000466")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			private Vector3 bendNormalRelToTarget;

			[Token(Token = "0x17000091")]
			public Vector3 position
			{
				[Token(Token = "0x600066D")]
				[Address(RVA = "0xC0F680", Offset = "0xC0F680", VA = "0xC0F680")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600066E")]
				[Address(RVA = "0xC0F68C", Offset = "0xC0F68C", VA = "0xC0F68C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000092")]
			public Quaternion rotation
			{
				[Token(Token = "0x600066F")]
				[Address(RVA = "0xC0F698", Offset = "0xC0F698", VA = "0xC0F698")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000670")]
				[Address(RVA = "0xC0F6A4", Offset = "0xC0F6A4", VA = "0xC0F6A4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000093")]
			public bool hasToes
			{
				[Token(Token = "0x6000671")]
				[Address(RVA = "0xC0F6B0", Offset = "0xC0F6B0", VA = "0xC0F6B0")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000672")]
				[Address(RVA = "0xC0F6B8", Offset = "0xC0F6B8", VA = "0xC0F6B8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000094")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6000673")]
				[Address(RVA = "0xC0F6C4", Offset = "0xC0F6C4", VA = "0xC0F6C4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000095")]
			private VirtualBone calf
			{
				[Token(Token = "0x6000674")]
				[Address(RVA = "0xC0F6EC", Offset = "0xC0F6EC", VA = "0xC0F6EC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000096")]
			private VirtualBone foot
			{
				[Token(Token = "0x6000675")]
				[Address(RVA = "0xC0F718", Offset = "0xC0F718", VA = "0xC0F718")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000097")]
			private VirtualBone toes
			{
				[Token(Token = "0x6000676")]
				[Address(RVA = "0xC0F744", Offset = "0xC0F744", VA = "0xC0F744")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000098")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x6000677")]
				[Address(RVA = "0xC09CE8", Offset = "0xC09CE8", VA = "0xC09CE8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000099")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x6000678")]
				[Address(RVA = "0xC0F770", Offset = "0xC0F770", VA = "0xC0F770")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000679")]
				[Address(RVA = "0xC0F77C", Offset = "0xC0F77C", VA = "0xC0F77C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x600067A")]
			[Address(RVA = "0xC0F788", Offset = "0xC0F788", VA = "0xC0F788", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600067B")]
			[Address(RVA = "0xC0FCF8", Offset = "0xC0FCF8", VA = "0xC0FCF8", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x600067C")]
			[Address(RVA = "0xC10528", Offset = "0xC10528", VA = "0xC10528", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x600067D")]
			[Address(RVA = "0xC104D8", Offset = "0xC104D8", VA = "0xC104D8")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x600067E")]
			[Address(RVA = "0xC1028C", Offset = "0xC1028C", VA = "0xC1028C")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x600067F")]
			[Address(RVA = "0xC09F18", Offset = "0xC09F18", VA = "0xC09F18")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x6000680")]
			[Address(RVA = "0xC10DE0", Offset = "0xC10DE0", VA = "0xC10DE0")]
			private void FixTwistRotations()
			{
			}

			[Token(Token = "0x6000681")]
			[Address(RVA = "0xC10A04", Offset = "0xC10A04", VA = "0xC10A04")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6000682")]
			[Address(RVA = "0xC11238", Offset = "0xC11238", VA = "0xC11238", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000683")]
			[Address(RVA = "0xC11440", Offset = "0xC11440", VA = "0xC11440", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000684")]
			[Address(RVA = "0xC0C3F4", Offset = "0xC0C3F4", VA = "0xC0C3F4")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A9")]
		public class Locomotion
		{
			[Token(Token = "0x4000467")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Used for blending in/out of procedural locomotion.")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x4000468")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Tries to maintain this distance between the legs.")]
			public float footDistance;

			[Token(Token = "0x4000469")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Makes a step only if step target position is at least this far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past the 'Angle Threshold'.")]
			public float stepThreshold;

			[Token(Token = "0x400046A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Makes a step only if step target position is at least 'Step Threshold' far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past this value.")]
			public float angleThreshold;

			[Token(Token = "0x400046B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Multiplies angle of the center of mass - center of pressure vector. Larger value makes the character step sooner if losing balance.")]
			public float comAngleMlp;

			[Token(Token = "0x400046C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Maximum magnitude of head/hand target velocity used in prediction.")]
			public float maxVelocity;

			[Token(Token = "0x400046D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The amount of head/hand target velocity prediction.")]
			public float velocityFactor;

			[Token(Token = "0x400046E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Range(0.9f, 1f)]
			[Tooltip("How much can a leg be extended before it is forced to step to another position? 1 means fully stretched.")]
			public float maxLegStretch;

			[Token(Token = "0x400046F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The speed of lerping the root of the character towards the horizontal mid-point of the footsteps.")]
			public float rootSpeed;

			[Token(Token = "0x4000470")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The speed of moving a foot to the next position.")]
			public float stepSpeed;

			[Token(Token = "0x4000471")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("The height of the foot by normalized step progress (0 - 1).")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x4000472")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("Reduce this value if locomotion makes the head bob too much.")]
			public float maxBodyYOffset;

			[Token(Token = "0x4000473")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The height offset of the heel by normalized step progress (0 - 1).")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x4000474")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Range(0f, 180f)]
			[Tooltip("Rotates the foot while the leg is not stepping to relax the twist rotation of the leg if ideal rotation is past this angle.")]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x4000475")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("The speed of rotating the foot while the leg is not stepping to relax the twist rotation of the leg.")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x4000476")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Interpolation mode of the step.")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x4000477")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Offset for the approximated center of mass.")]
			public Vector3 offset;

			[Token(Token = "0x4000478")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x4000479")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x400047A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x400047B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x400047C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Called when the left foot has finished a step.")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x400047D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Called when the right foot has finished a step")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x400047F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Footstep[] footsteps;

			[Token(Token = "0x4000480")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Vector3 lastComPosition;

			[Token(Token = "0x4000481")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			private Vector3 comVelocity;

			[Token(Token = "0x4000482")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int leftFootIndex;

			[Token(Token = "0x4000483")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int rightFootIndex;

			[Token(Token = "0x1700009A")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6000685")]
				[Address(RVA = "0xC11520", Offset = "0xC11520", VA = "0xC11520")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000686")]
				[Address(RVA = "0xC1152C", Offset = "0xC1152C", VA = "0xC1152C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700009B")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x600068D")]
				[Address(RVA = "0xC11988", Offset = "0xC11988", VA = "0xC11988")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700009C")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x600068E")]
				[Address(RVA = "0xC119BC", Offset = "0xC119BC", VA = "0xC119BC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700009D")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x600068F")]
				[Address(RVA = "0xC119F4", Offset = "0xC119F4", VA = "0xC119F4")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x1700009E")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x6000690")]
				[Address(RVA = "0xC11A28", Offset = "0xC11A28", VA = "0xC11A28")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000687")]
			[Address(RVA = "0xC08008", Offset = "0xC08008", VA = "0xC08008")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes, float scale)
			{
			}

			[Token(Token = "0x6000688")]
			[Address(RVA = "0xC05924", Offset = "0xC05924", VA = "0xC05924")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6000689")]
			[Address(RVA = "0xC11538", Offset = "0xC11538", VA = "0xC11538")]
			public void Relax()
			{
			}

			[Token(Token = "0x600068A")]
			[Address(RVA = "0xC04D8C", Offset = "0xC04D8C", VA = "0xC04D8C")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x600068B")]
			[Address(RVA = "0xC04CD4", Offset = "0xC04CD4", VA = "0xC04CD4")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x600068C")]
			[Address(RVA = "0xC08874", Offset = "0xC08874", VA = "0xC08874")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset, float scale)
			{
			}

			[Token(Token = "0x6000691")]
			[Address(RVA = "0xC115B8", Offset = "0xC115B8", VA = "0xC115B8")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x6000692")]
			[Address(RVA = "0xC1176C", Offset = "0xC1176C", VA = "0xC1176C")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6000693")]
			[Address(RVA = "0xC117D8", Offset = "0xC117D8", VA = "0xC117D8")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6000694")]
			[Address(RVA = "0xC0C4DC", Offset = "0xC0C4DC", VA = "0xC0C4DC")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000AA")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4000484")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The head target. This should not be the camera Transform itself, but a child GameObject parented to it so you could adjust it's position/rotation  to match the orientation of the head bone. The best practice for setup would be to move the camera to the avatar's eyes, duplicate the avatar's head bone and parent it to the camera. Then assign the duplicate to this slot.")]
			public Transform headTarget;

			[Token(Token = "0x4000485")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The pelvis target (optional), useful for seated rigs or if you had an additional tracker on the backpack or belt are. The best practice for setup would be to duplicate the avatar's pelvis bone and parenting it to the pelvis tracker. Then assign the duplicate to this slot.")]
			public Transform pelvisTarget;

			[Token(Token = "0x4000486")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the head target. Note that if you have nulled the headTarget, the head will still be pulled to the last position of the headTarget until you set this value to 0.")]
			public float positionWeight;

			[Token(Token = "0x4000487")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the head target. Note that if you have nulled the headTarget, the head will still be rotated to the last rotation of the headTarget until you set this value to 0.")]
			public float rotationWeight;

			[Token(Token = "0x4000488")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be pulled to the last position of the pelvisTarget until you set this value to 0.")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000489")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("Rotational weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be rotated to the last rotation of the pelvisTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x400048A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("If 'Chest Goal Weight' is greater than 0, the chest will be turned towards this Transform.")]
			public Transform chestGoal;

			[Token(Token = "0x400048B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Weight of turning the chest towards the 'Chest Goal'.")]
			[Range(0f, 1f)]
			public float chestGoalWeight;

			[Token(Token = "0x400048C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Minimum height of the head from the root of the character.")]
			public float minHeadHeight;

			[Token(Token = "0x400048D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Range(0f, 1f)]
			[Tooltip("Determines how much the body will follow the position of the head.")]
			public float bodyPosStiffness;

			[Token(Token = "0x400048E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Range(0f, 1f)]
			[Tooltip("Determines how much the body will follow the rotation of the head.")]
			public float bodyRotStiffness;

			[Token(Token = "0x400048F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Range(0f, 1f)]
			[FormerlySerializedAs("chestRotationWeight")]
			[Tooltip("Determines how much the chest will rotate to the rotation of the head.")]
			public float neckStiffness;

			[Token(Token = "0x4000490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[Range(0f, 1f)]
			[Tooltip("The amount of rotation applied to the chest based on hand positions.")]
			public float rotateChestByHands;

			[Token(Token = "0x4000491")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Range(0f, 1f)]
			[Tooltip("Clamps chest rotation. Value of 0.5 allows 90 degrees of rotation for the chest relative to the head. Value of 0 allows 180 degrees and value of 1 means the chest will be locked relative to the head.")]
			public float chestClampWeight;

			[Token(Token = "0x4000492")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Tooltip("Clamps head rotation. Value of 0.5 allows 90 degrees of rotation for the head relative to the headTarget. Value of 0 allows 180 degrees and value of 1 means head rotation will be locked to the target.")]
			[Range(0f, 1f)]
			public float headClampWeight;

			[Token(Token = "0x4000493")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Moves the body horizontally along -character.forward axis by that value when the player is crouching.")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x4000494")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[Range(0f, 1f)]
			[Tooltip("How much will the pelvis maintain it's animated position?")]
			public float maintainPelvisPosition;

			[Token(Token = "0x4000495")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Tooltip("Will automatically rotate the root of the character if the head target has turned past this angle.")]
			[Range(0f, 180f)]
			public float maxRootAngle;

			[Token(Token = "0x4000496")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[Tooltip("Angular offset for root heading. Adjust this value to turn the root relative to the HMD around the vertical axis. Usefulf for fighting or shooting games where you would sometimes want the avatar to stand at an angled stance.")]
			[Range(-180f, 180f)]
			public float rootHeadingOffset;

			[NonSerialized]
			[Token(Token = "0x4000497")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x4000498")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x4000499")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x400049A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x400049B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x400049C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400049D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400049E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400049F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40004A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40004A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40004A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x40004A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			[HideInInspector]
			public Vector3 locomotionHeadPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40004A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			[HideInInspector]
			public Vector3 headPosition;

			[Token(Token = "0x40004A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private Quaternion headRotation;

			[Token(Token = "0x40004A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x40004A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x40004AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x40004AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x40004AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x40004AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x40004AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x40004AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private int pelvisIndex;

			[Token(Token = "0x40004B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
			private int spineIndex;

			[Token(Token = "0x40004B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int chestIndex;

			[Token(Token = "0x40004B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int neckIndex;

			[Token(Token = "0x40004B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int headIndex;

			[Token(Token = "0x40004B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private float length;

			[Token(Token = "0x40004B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private bool hasChest;

			[Token(Token = "0x40004B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
			private bool hasNeck;

			[Token(Token = "0x40004B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x212")]
			private bool hasLegs;

			[Token(Token = "0x40004B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float headHeight;

			[Token(Token = "0x40004B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private float sizeMlp;

			[Token(Token = "0x40004BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private Vector3 chestForward;

			[Token(Token = "0x1700009F")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x6000695")]
				[Address(RVA = "0xC05B08", Offset = "0xC05B08", VA = "0xC05B08")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A0")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x6000696")]
				[Address(RVA = "0xC11A60", Offset = "0xC11A60", VA = "0xC11A60")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A1")]
			public VirtualBone chest
			{
				[Token(Token = "0x6000697")]
				[Address(RVA = "0xC0A15C", Offset = "0xC0A15C", VA = "0xC0A15C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A2")]
			private VirtualBone neck
			{
				[Token(Token = "0x6000698")]
				[Address(RVA = "0xC11A94", Offset = "0xC11A94", VA = "0xC11A94")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A3")]
			public VirtualBone head
			{
				[Token(Token = "0x6000699")]
				[Address(RVA = "0xC11584", Offset = "0xC11584", VA = "0xC11584")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A4")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x600069A")]
				[Address(RVA = "0xC11AC8", Offset = "0xC11AC8", VA = "0xC11AC8")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600069B")]
				[Address(RVA = "0xC11ADC", Offset = "0xC11ADC", VA = "0xC11ADC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000A5")]
			public Quaternion anchorRelativeToHead
			{
				[Token(Token = "0x600069C")]
				[Address(RVA = "0xC11AF0", Offset = "0xC11AF0", VA = "0xC11AF0")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600069D")]
				[Address(RVA = "0xC11B04", Offset = "0xC11B04", VA = "0xC11B04")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x600069E")]
			[Address(RVA = "0xC11B18", Offset = "0xC11B18", VA = "0xC11B18", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600069F")]
			[Address(RVA = "0xC127B8", Offset = "0xC127B8", VA = "0xC127B8", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x60006A0")]
			[Address(RVA = "0xC129A0", Offset = "0xC129A0", VA = "0xC129A0", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x60006A1")]
			[Address(RVA = "0xC13148", Offset = "0xC13148", VA = "0xC13148")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x60006A2")]
			[Address(RVA = "0xC08330", Offset = "0xC08330", VA = "0xC08330")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms, float scale)
			{
			}

			[Token(Token = "0x60006A3")]
			[Address(RVA = "0xC13BA0", Offset = "0xC13BA0", VA = "0xC13BA0")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp, float weight)
			{
			}

			[Token(Token = "0x60006A4")]
			[Address(RVA = "0xC1426C", Offset = "0xC1426C", VA = "0xC1426C")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x60006A5")]
			[Address(RVA = "0xC1484C", Offset = "0xC1484C", VA = "0xC1484C", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x60006A6")]
			[Address(RVA = "0xC14A1C", Offset = "0xC14A1C", VA = "0xC14A1C", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x60006A7")]
			[Address(RVA = "0xC1338C", Offset = "0xC1338C", VA = "0xC1338C")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x60006A8")]
			[Address(RVA = "0xC09D1C", Offset = "0xC09D1C", VA = "0xC09D1C")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x60006A9")]
			[Address(RVA = "0xC13784", Offset = "0xC13784", VA = "0xC13784")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation, float scale)
			{
			}

			[Token(Token = "0x60006AA")]
			[Address(RVA = "0xC14AF0", Offset = "0xC14AF0", VA = "0xC14AF0")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006AB")]
			[Address(RVA = "0xC14070", Offset = "0xC14070", VA = "0xC14070")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x60006AC")]
			[Address(RVA = "0xC13E00", Offset = "0xC13E00", VA = "0xC13E00")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x60006AD")]
			[Address(RVA = "0xC0C144", Offset = "0xC0C144", VA = "0xC0C144")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000AB")]
		public enum PositionOffset
		{
			[Token(Token = "0x40004BC")]
			Pelvis,
			[Token(Token = "0x40004BD")]
			Chest,
			[Token(Token = "0x40004BE")]
			Head,
			[Token(Token = "0x40004BF")]
			LeftHand,
			[Token(Token = "0x40004C0")]
			RightHand,
			[Token(Token = "0x40004C1")]
			LeftFoot,
			[Token(Token = "0x40004C2")]
			RightFoot,
			[Token(Token = "0x40004C3")]
			LeftHeel,
			[Token(Token = "0x40004C4")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20000AC")]
		public enum RotationOffset
		{
			[Token(Token = "0x40004C6")]
			Pelvis,
			[Token(Token = "0x40004C7")]
			Chest,
			[Token(Token = "0x40004C8")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20000AD")]
		public class VirtualBone
		{
			[Token(Token = "0x40004C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x40004CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x40004CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x40004CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x40004CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x40004CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x40004CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x60006AE")]
			[Address(RVA = "0xC07EBC", Offset = "0xC07EBC", VA = "0xC07EBC")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006AF")]
			[Address(RVA = "0xC07F2C", Offset = "0xC07F2C", VA = "0xC07F2C")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006B0")]
			[Address(RVA = "0xC14D8C", Offset = "0xC14D8C", VA = "0xC14D8C")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60006B1")]
			[Address(RVA = "0xC0E740", Offset = "0xC0E740", VA = "0xC0E740")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x60006B2")]
			[Address(RVA = "0xC0E9BC", Offset = "0xC0E9BC", VA = "0xC0E9BC")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006B3")]
			[Address(RVA = "0xC14F8C", Offset = "0xC14F8C", VA = "0xC14F8C")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006B4")]
			[Address(RVA = "0xC0D72C", Offset = "0xC0D72C", VA = "0xC0D72C")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006B5")]
			[Address(RVA = "0xC15134", Offset = "0xC15134", VA = "0xC15134")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006B6")]
			[Address(RVA = "0xC0DDB0", Offset = "0xC0DDB0", VA = "0xC0DDB0")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x60006B7")]
			[Address(RVA = "0xC151D8", Offset = "0xC151D8", VA = "0xC151D8")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006B8")]
			[Address(RVA = "0xC14480", Offset = "0xC14480", VA = "0xC14480")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x60006B9")]
			[Address(RVA = "0xC15330", Offset = "0xC15330", VA = "0xC15330")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006BA")]
			[Address(RVA = "0xC15444", Offset = "0xC15444", VA = "0xC15444")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasChest;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasNeck;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasShoulders;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool hasToes;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool hasLegs;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] readPositions;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rootV;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rootVelocity;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 bodyOffset;

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int supportLegIndex;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int lastLOD;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("LOD 0: Full quality solving. LOD 1: Shoulder solving, stretching plant feet disabled, spine solving quality reduced. This provides about 30% of performance gain. LOD 2: Culled, but updating root position and rotation if locomotion is enabled.")]
		[Range(0f, 2f)]
		public int LOD;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Scale of the character. Value of 1 means normal adult human size.")]
		public float scale;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("If true, will keep the toes planted even if head target is out of reach, so this can cause the camera to exit the head if it is too high for the model to reach. Enabling this increases the cost of the solver as the legs will have to be solved multiple times.")]
		public bool plantFeet;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The spine solver.")]
		public Spine spine;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The left arm solver.")]
		public Arm leftArm;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The right arm solver.")]
		public Arm rightArm;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("The left leg solver.")]
		public Leg leftLeg;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The right leg solver.")]
		public Leg rightLeg;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Procedural leg shuffling for stationary VR games. Not designed for roomscale and thumbstick locomotion. For those it would be better to use a strafing locomotion blend tree to make the character follow the horizontal direction towards the HMD by root motion or script.")]
		public Locomotion locomotion;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Leg[] legs;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Arm[] arms;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 headPosition;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 lastOffset;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3 debugPos1;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 debugPos2;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Vector3 debugPos3;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Vector3 debugPos4;

		[Token(Token = "0x17000086")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x6000639")]
			[Address(RVA = "0xC0BE50", Offset = "0xC0BE50", VA = "0xC0BE50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600063A")]
			[Address(RVA = "0xC0BE58", Offset = "0xC0BE58", VA = "0xC0BE58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0xC040D8", Offset = "0xC040D8", VA = "0xC040D8")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0xC04544", Offset = "0xC04544", VA = "0xC04544")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0xC043D8", Offset = "0xC043D8", VA = "0xC043D8")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0xC04958", Offset = "0xC04958", VA = "0xC04958")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xC04A9C", Offset = "0xC04A9C", VA = "0xC04A9C")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0xC04ADC", Offset = "0xC04ADC", VA = "0xC04ADC")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0xC04C00", Offset = "0xC04C00", VA = "0xC04C00")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0xC05154", Offset = "0xC05154", VA = "0xC05154")]
		public void Reset()
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0xC05B3C", Offset = "0xC05B3C", VA = "0xC05B3C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0xC05C90", Offset = "0xC05C90", VA = "0xC05C90", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0xC05E7C", Offset = "0xC05E7C", VA = "0xC05E7C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0xC05EEC", Offset = "0xC05EEC", VA = "0xC05EEC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0xC05F5C", Offset = "0xC05F5C", VA = "0xC05F5C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0xC06164", Offset = "0xC06164", VA = "0xC06164")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0xC04844", Offset = "0xC04844", VA = "0xC04844")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0xC05260", Offset = "0xC05260", VA = "0xC05260")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0xC063D4", Offset = "0xC063D4", VA = "0xC063D4", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0xC06410", Offset = "0xC06410", VA = "0xC06410", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0xC079F4", Offset = "0xC079F4", VA = "0xC079F4")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0xC053B0", Offset = "0xC053B0", VA = "0xC053B0")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs)
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xC06814", Offset = "0xC06814", VA = "0xC06814")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0xC07E48", Offset = "0xC07E48", VA = "0xC07E48")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0xC07E84", Offset = "0xC07E84", VA = "0xC07E84")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0xC078B8", Offset = "0xC078B8", VA = "0xC078B8")]
		private void Write()
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0xC0B784", Offset = "0xC0B784", VA = "0xC0B784")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0xC0BE60", Offset = "0xC0BE60", VA = "0xC0BE60")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x20000AE")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If using multiple solvers, add them in inverse hierarchical order - first forearm roll bone, then forearm bone and upper arm bone.")]
		public TwistSolver[] twistSolvers;

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xC155F8", Offset = "0xC155F8", VA = "0xC155F8")]
		public void Start()
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0xC15C78", Offset = "0xC15C78", VA = "0xC15C78")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0xC1620C", Offset = "0xC1620C", VA = "0xC1620C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0xC162BC", Offset = "0xC162BC", VA = "0xC162BC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xC163F4", Offset = "0xC163F4", VA = "0xC163F4")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AF")]
	public class TwistSolver
	{
		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The transform that this solver operates on.")]
		public Transform transform;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this is the forearm roll bone, the parent should be the forearm bone. If null, will be found automatically.")]
		public Transform parent;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If this is the forearm roll bone, the child should be the hand bone. If null, will attempt to find automatically. Assign the hand manually if the hand bone is not a child of the roll bone.")]
		public Transform[] children;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The weight of relaxing the twist of this Transform")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If 0.5, this Transform will be twisted half way from parent to child. If 1, the twist angle will be locked to the child and will rotate with along with it.")]
		[Range(0f, 1f)]
		public float parentChildCrossfade;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(-180f, 180f)]
		[Tooltip("Rotation offset around the twist axis.")]
		public float twistAngleOffset;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 twistAxis;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 axis;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion[] childRotations;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool inititated;

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xC16458", Offset = "0xC16458", VA = "0xC16458")]
		public TwistSolver()
		{
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xC157E0", Offset = "0xC157E0", VA = "0xC157E0")]
		public void Initiate()
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xC15D28", Offset = "0xC15D28", VA = "0xC15D28")]
		public void Relax()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B0")]
	public class InteractionEffector
	{
		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float defaultBendGoalWeight;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float resetTimer;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionWeightUsed;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rotationWeightUsed;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pullUsed;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool reachUsed;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pushUsed;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool pushParentUsed;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool bendGoalWeightUsed;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool pickedUp;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool defaults;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform target;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<bool> triggered;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool started;

		[Token(Token = "0x170000A6")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x60006C3")]
			[Address(RVA = "0xC16550", Offset = "0xC16550", VA = "0xC16550")]
			[CompilerGenerated]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x60006C4")]
			[Address(RVA = "0xC16558", Offset = "0xC16558", VA = "0xC16558")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		public bool isPaused
		{
			[Token(Token = "0x60006C5")]
			[Address(RVA = "0xC16560", Offset = "0xC16560", VA = "0xC16560")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006C6")]
			[Address(RVA = "0xC16568", Offset = "0xC16568", VA = "0xC16568")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x60006C7")]
			[Address(RVA = "0xC16574", Offset = "0xC16574", VA = "0xC16574")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006C8")]
			[Address(RVA = "0xC1657C", Offset = "0xC1657C", VA = "0xC1657C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000A9")]
		public bool inInteraction
		{
			[Token(Token = "0x60006C9")]
			[Address(RVA = "0xC16584", Offset = "0xC16584", VA = "0xC16584")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AA")]
		public float progress
		{
			[Token(Token = "0x60006D2")]
			[Address(RVA = "0xC18E84", Offset = "0xC18E84", VA = "0xC18E84")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0xC165E4", Offset = "0xC165E4", VA = "0xC165E4")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xC16680", Offset = "0xC16680", VA = "0xC16680")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xC16738", Offset = "0xC16738", VA = "0xC16738")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xC168A4", Offset = "0xC168A4", VA = "0xC168A4")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xC16C80", Offset = "0xC16C80", VA = "0xC16C80")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xC16DA0", Offset = "0xC16DA0", VA = "0xC16DA0")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xC16DF4", Offset = "0xC16DF4", VA = "0xC16DF4")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xC17AD8", Offset = "0xC17AD8", VA = "0xC17AD8")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xC1862C", Offset = "0xC1862C", VA = "0xC1862C")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xC1884C", Offset = "0xC1884C", VA = "0xC1884C")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xC18D20", Offset = "0xC18D20", VA = "0xC18D20")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xC19084", Offset = "0xC19084", VA = "0xC19084")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B1")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("(Optional) reference to the LookAtIK component that will be used to make the character look at the objects that it is interacting with.")]
		public LookAtIK ik;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Interpolation speed of the LookAtIK target.")]
		public float lerpSpeed;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Interpolation speed of the LookAtIK weight.")]
		public float weightSpeed;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xC1934C", Offset = "0xC1934C", VA = "0xC1934C")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xC19468", Offset = "0xC19468", VA = "0xC19468")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xC19500", Offset = "0xC19500", VA = "0xC19500")]
		public void Update()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xC19708", Offset = "0xC19708", VA = "0xC19708")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xC197B0", Offset = "0xC197B0", VA = "0xC197B0")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0xC1985C", Offset = "0xC1985C", VA = "0xC1985C")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x20000B2")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Object")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000B3")]
		public class InteractionEvent
		{
			[Token(Token = "0x4000513")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The time of the event since interaction start.")]
			public float time;

			[Token(Token = "0x4000514")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("If true, the interaction will be paused on this event. The interaction can be resumed by InteractionSystem.ResumeInteraction() or InteractionSystem.ResumeAll;")]
			public bool pause;

			[Token(Token = "0x4000515")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[Tooltip("If true, the object will be parented to the effector bone on this event. Note that picking up like this can be done by only a single effector at a time. If you wish to pick up an object with both hands, see the Interaction PickUp2Handed demo scene.")]
			public bool pickUp;

			[Token(Token = "0x4000516")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The animations called on this event.")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4000517")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The messages sent on this event using GameObject.SendMessage().")]
			public Message[] messages;

			[Token(Token = "0x4000518")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The UnityEvent to invoke on this event.")]
			public UnityEvent unityEvent;

			[Token(Token = "0x60006F9")]
			[Address(RVA = "0xC18EB4", Offset = "0xC18EB4", VA = "0xC18EB4")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x60006FA")]
			[Address(RVA = "0xC1A7D8", Offset = "0xC1A7D8", VA = "0xC1A7D8")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B4")]
		public class Message
		{
			[Token(Token = "0x4000519")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The name of the function called.")]
			public string function;

			[Token(Token = "0x400051A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The recipient game object.")]
			public GameObject recipient;

			[Token(Token = "0x400051B")]
			private const string empty = "";

			[Token(Token = "0x60006FB")]
			[Address(RVA = "0xC1A6E0", Offset = "0xC1A6E0", VA = "0xC1A6E0")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x60006FC")]
			[Address(RVA = "0xC1A7E0", Offset = "0xC1A7E0", VA = "0xC1A7E0")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B5")]
		public class AnimatorEvent
		{
			[Token(Token = "0x400051C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Animator component that will receive the AnimatorEvents.")]
			public Animator animator;

			[Token(Token = "0x400051D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Animation component that will receive the AnimatorEvents (Legacy).")]
			public Animation animation;

			[Token(Token = "0x400051E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The name of the animation state.")]
			public string animationState;

			[Token(Token = "0x400051F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The crossfading time.")]
			public float crossfadeTime;

			[Token(Token = "0x4000520")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The layer of the animation state (if using Legacy, the animation state will be forced to this layer).")]
			public int layer;

			[Token(Token = "0x4000521")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Should the animation always start from 0 normalized time?")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4000522")]
			private const string empty = "";

			[Token(Token = "0x60006FD")]
			[Address(RVA = "0xC1A604", Offset = "0xC1A604", VA = "0xC1A604")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x60006FE")]
			[Address(RVA = "0xC1A7E8", Offset = "0xC1A7E8", VA = "0xC1A7E8")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x60006FF")]
			[Address(RVA = "0xC1A898", Offset = "0xC1A898", VA = "0xC1A898")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6000700")]
			[Address(RVA = "0xC1A970", Offset = "0xC1A970", VA = "0xC1A970")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B6")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x20000B7")]
			public enum Type
			{
				[Token(Token = "0x4000526")]
				PositionWeight,
				[Token(Token = "0x4000527")]
				RotationWeight,
				[Token(Token = "0x4000528")]
				PositionOffsetX,
				[Token(Token = "0x4000529")]
				PositionOffsetY,
				[Token(Token = "0x400052A")]
				PositionOffsetZ,
				[Token(Token = "0x400052B")]
				Pull,
				[Token(Token = "0x400052C")]
				Reach,
				[Token(Token = "0x400052D")]
				RotateBoneWeight,
				[Token(Token = "0x400052E")]
				Push,
				[Token(Token = "0x400052F")]
				PushParent,
				[Token(Token = "0x4000530")]
				PoserWeight,
				[Token(Token = "0x4000531")]
				BendGoalWeight
			}

			[Token(Token = "0x4000523")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the curve (InteractionObject.WeightCurve.Type).")]
			public Type type;

			[Token(Token = "0x4000524")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight curve.")]
			public AnimationCurve curve;

			[Token(Token = "0x6000701")]
			[Address(RVA = "0xC19F08", Offset = "0xC19F08", VA = "0xC19F08")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000702")]
			[Address(RVA = "0xC1A984", Offset = "0xC1A984", VA = "0xC1A984")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B8")]
		public class Multiplier
		{
			[Token(Token = "0x4000532")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type to multiply.")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4000533")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x4000534")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The resulting value will be applied to this channel.")]
			public WeightCurve.Type result;

			[Token(Token = "0x6000703")]
			[Address(RVA = "0xC1A510", Offset = "0xC1A510", VA = "0xC1A510")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000704")]
			[Address(RVA = "0xC1A98C", Offset = "0xC1A98C", VA = "0xC1A98C")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If the Interaction System has a 'Look At' LookAtIK component assigned, will use it to make the character look at the specified Transform. If unassigned, will look at this GameObject.")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The root Transform of the InteractionTargets. If null, will use this GameObject. GetComponentsInChildren<InteractionTarget>() will be used at initiation to find all InteractionTargets associated with this InteractionObject.")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If assigned, all PositionOffset channels will be applied in the rotation space of this Transform. If not, they will be in the rotation space of the character.")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x170000AB")]
		public float length
		{
			[Token(Token = "0x60006E5")]
			[Address(RVA = "0xC19A90", Offset = "0xC19A90", VA = "0xC19A90")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006E6")]
			[Address(RVA = "0xC19A98", Offset = "0xC19A98", VA = "0xC19A98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x60006E7")]
			[Address(RVA = "0xC19AA0", Offset = "0xC19AA0", VA = "0xC19AA0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006E8")]
			[Address(RVA = "0xC19AA8", Offset = "0xC19AA8", VA = "0xC19AA8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000AD")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x60006EA")]
			[Address(RVA = "0xC19C68", Offset = "0xC19C68", VA = "0xC19C68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AE")]
		public Transform targetsRoot
		{
			[Token(Token = "0x60006F2")]
			[Address(RVA = "0xC18F78", Offset = "0xC18F78", VA = "0xC18F78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xC19870", Offset = "0xC19870", VA = "0xC19870")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0xC198B4", Offset = "0xC198B4", VA = "0xC198B4")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xC198F8", Offset = "0xC198F8", VA = "0xC198F8")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0xC1993C", Offset = "0xC1993C", VA = "0xC1993C")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0xC19980", Offset = "0xC19980", VA = "0xC19980")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0xC199C4", Offset = "0xC199C4", VA = "0xC199C4")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0xC19A08", Offset = "0xC19A08", VA = "0xC19A08")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xC19A4C", Offset = "0xC19A4C", VA = "0xC19A4C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0xC19AB0", Offset = "0xC19AB0", VA = "0xC19AB0")]
		public void Initiate()
		{
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xC19CE8", Offset = "0xC19CE8", VA = "0xC19CE8")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xC173FC", Offset = "0xC173FC", VA = "0xC173FC")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0xC19E38", Offset = "0xC19E38", VA = "0xC19E38")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xC172C0", Offset = "0xC172C0", VA = "0xC172C0")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xC173F4", Offset = "0xC173F4", VA = "0xC173F4")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xC18224", Offset = "0xC18224", VA = "0xC18224")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xC18B14", Offset = "0xC18B14", VA = "0xC18B14")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0xC1A540", Offset = "0xC1A540", VA = "0xC1A540")]
		private void Start()
		{
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xC19F24", Offset = "0xC19F24", VA = "0xC19F24")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0xC19E40", Offset = "0xC19E40", VA = "0xC19E40")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xC1A4B4", Offset = "0xC1A4B4", VA = "0xC1A4B4")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0xC1A544", Offset = "0xC1A544", VA = "0xC1A544")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0xC1A5A0", Offset = "0xC1A5A0", VA = "0xC1A5A0")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x20000B9")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction System")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20000BA")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20000BB")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If not empty, only the targets with the specified tag will be used by this Interaction System.")]
		public string targetTag;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The fade in time of the interaction.")]
		public float fadeInTime;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The master speed for all interactions.")]
		public float speed;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If > 0, lerps all the FBBIK channels used by the Interaction System back to their default or initial values when not in interaction.")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Triggering")]
		[FormerlySerializedAs("collider")]
		[Tooltip("The collider that registers OnTriggerEnter and OnTriggerExit events with InteractionTriggers.")]
		public Collider characterCollider;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[FormerlySerializedAs("camera")]
		[Tooltip("Will be used by Interaction Triggers that need the camera's position. Assign the first person view character camera.")]
		public Transform FPSCamera;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The layers that will be raycasted from the camera (along camera.forward). All InteractionTrigger look at target colliders should be included.")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Max distance of raycasting from the camera.")]
		public float camRaycastDistance;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[Tooltip("Reference to the FBBIK component.")]
		[Space(10f)]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Handles looking at the interactions.")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x170000AF")]
		public bool inInteraction
		{
			[Token(Token = "0x600070D")]
			[Address(RVA = "0xC1ABBC", Offset = "0xC1ABBC", VA = "0xC1ABBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B0")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x6000727")]
			[Address(RVA = "0xC1C664", Offset = "0xC1C664", VA = "0xC1C664")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000728")]
			[Address(RVA = "0xC1C66C", Offset = "0xC1C66C", VA = "0xC1C66C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x6000729")]
			[Address(RVA = "0xC1C674", Offset = "0xC1C674", VA = "0xC1C674")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600072A")]
			[Address(RVA = "0xC1C67C", Offset = "0xC1C67C", VA = "0xC1C67C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public bool initiated
		{
			[Token(Token = "0x600072B")]
			[Address(RVA = "0xC1C684", Offset = "0xC1C684", VA = "0xC1C684")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600072C")]
			[Address(RVA = "0xC1C68C", Offset = "0xC1C68C", VA = "0xC1C68C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0xC1A99C", Offset = "0xC1A99C", VA = "0xC1A99C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0xC1A9E0", Offset = "0xC1A9E0", VA = "0xC1A9E0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0xC1AA24", Offset = "0xC1AA24", VA = "0xC1AA24")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0xC1AA68", Offset = "0xC1AA68", VA = "0xC1AA68")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0xC1AAAC", Offset = "0xC1AAAC", VA = "0xC1AAAC")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0xC1AAF0", Offset = "0xC1AAF0", VA = "0xC1AAF0")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0xC1AB34", Offset = "0xC1AB34", VA = "0xC1AB34")]
		[ContextMenu("Support")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0xC1AB78", Offset = "0xC1AB78", VA = "0xC1AB78")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0xC1AD34", Offset = "0xC1AD34", VA = "0xC1AD34")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xC1ADEC", Offset = "0xC1ADEC", VA = "0xC1ADEC")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0xC1AEA4", Offset = "0xC1AEA4", VA = "0xC1AEA4")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xC1AF3C", Offset = "0xC1AF3C", VA = "0xC1AF3C")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0xC1B020", Offset = "0xC1B020", VA = "0xC1B020")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0xC1B118", Offset = "0xC1B118", VA = "0xC1B118")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0xC1B19C", Offset = "0xC1B19C", VA = "0xC1B19C")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xC1B220", Offset = "0xC1B220", VA = "0xC1B220")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0xC1B2A4", Offset = "0xC1B2A4", VA = "0xC1B2A4")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xC1B30C", Offset = "0xC1B30C", VA = "0xC1B30C")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0xC1B374", Offset = "0xC1B374", VA = "0xC1B374")]
		public void StopAll()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xC1B3D0", Offset = "0xC1B3D0", VA = "0xC1B3D0")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0xC1B450", Offset = "0xC1B450", VA = "0xC1B450")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xC1B4F8", Offset = "0xC1B4F8", VA = "0xC1B4F8")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0xC1B5C8", Offset = "0xC1B5C8", VA = "0xC1B5C8")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0xC1B858", Offset = "0xC1B858", VA = "0xC1B858")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xC1BA2C", Offset = "0xC1BA2C", VA = "0xC1BA2C")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xC1BC9C", Offset = "0xC1BC9C", VA = "0xC1BC9C")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0xC1BF28", Offset = "0xC1BF28", VA = "0xC1BF28")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xC1BF60", Offset = "0xC1BF60", VA = "0xC1BF60")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xC1BFC0", Offset = "0xC1BFC0", VA = "0xC1BFC0")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0xC1C0EC", Offset = "0xC1C0EC", VA = "0xC1C0EC")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0xC1C2D0", Offset = "0xC1C2D0", VA = "0xC1C2D0")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0xC1C544", Offset = "0xC1C544", VA = "0xC1C544")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0xC1BD84", Offset = "0xC1BD84", VA = "0xC1BD84")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xC1C698", Offset = "0xC1C698", VA = "0xC1C698")]
		public void Start()
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xC1CFBC", Offset = "0xC1CFBC", VA = "0xC1CFBC")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xC1CFDC", Offset = "0xC1CFDC", VA = "0xC1CFDC")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0xC1CFF8", Offset = "0xC1CFF8", VA = "0xC1CFF8")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0xC1D014", Offset = "0xC1D014", VA = "0xC1D014")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xC1D068", Offset = "0xC1D068", VA = "0xC1D068")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xC1D1EC", Offset = "0xC1D1EC", VA = "0xC1D1EC")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xC1D2E8", Offset = "0xC1D2E8", VA = "0xC1D2E8")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xC1D644", Offset = "0xC1D644", VA = "0xC1D644")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xC1D75C", Offset = "0xC1D75C", VA = "0xC1D75C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0xC1DA20", Offset = "0xC1DA20", VA = "0xC1DA20")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xC1CD5C", Offset = "0xC1CD5C", VA = "0xC1CD5C")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xC1DB50", Offset = "0xC1DB50", VA = "0xC1DB50")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xC1DC5C", Offset = "0xC1DC5C", VA = "0xC1DC5C")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0xC1DCE4", Offset = "0xC1DCE4", VA = "0xC1DCE4")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0xC1DDA4", Offset = "0xC1DDA4", VA = "0xC1DDA4")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0xC1DDBC", Offset = "0xC1DDBC", VA = "0xC1DDBC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xC1AC54", Offset = "0xC1AC54", VA = "0xC1AC54")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0xC1B744", Offset = "0xC1B744", VA = "0xC1B744")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0xC1E234", Offset = "0xC1E234", VA = "0xC1E234")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x20000BC")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Target")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000BD")]
		public enum RotationMode
		{
			[Token(Token = "0x400055A")]
			TwoDOF,
			[Token(Token = "0x400055B")]
			ThreeDOF
		}

		[Serializable]
		[Token(Token = "0x20000BE")]
		public class Multiplier
		{
			[Token(Token = "0x400055C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type (InteractionObject.WeightCurve.Type).")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x400055D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x6000755")]
			[Address(RVA = "0xC1EB50", Offset = "0xC1EB50", VA = "0xC1EB50")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The type of the FBBIK effector.")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("InteractionObject weight curve multipliers for this effector target.")]
		public Multiplier[] multipliers;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The interaction speed multiplier for this effector. This can be used to make interactions faster/slower for specific effectors.")]
		public float interactionSpeedMlp;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The pivot to twist/swing this interaction target about. For symmetric objects that can be interacted with from a certain angular range.")]
		public Transform pivot;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("2 or 3 degrees of freedom to match this InteractionTarget's rotation to the effector bone rotation.")]
		public RotationMode rotationMode;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The axis of twisting the interaction target (blue line).")]
		public Vector3 twistAxis;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of twisting the interaction target towards the effector bone in the start of the interaction.")]
		public float twistWeight;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The weight of swinging the interaction target towards the effector bone in the start of the interaction. Swing is defined as a 3-DOF rotation around any axis, while twist is only around the twist axis.")]
		public float swingWeight;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The weight of rotating this InteractionTarget to the effector bone in the start of the interaction (and during if 'Rotate Once' is disabled")]
		[Range(0f, 1f)]
		public float threeDOFWeight;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("If true, will twist/swing around the pivot only once at the start of the interaction. If false, will continue rotating throuout the whole interaction.")]
		public bool rotateOnce;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastPivot;

		[Token(Token = "0x6000749")]
		[Address(RVA = "0xC1E8BC", Offset = "0xC1E8BC", VA = "0xC1E8BC")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0xC1E900", Offset = "0xC1E900", VA = "0xC1E900")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xC1E944", Offset = "0xC1E944", VA = "0xC1E944")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xC1E988", Offset = "0xC1E988", VA = "0xC1E988")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0xC1E9CC", Offset = "0xC1E9CC", VA = "0xC1E9CC")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xC1EA10", Offset = "0xC1EA10", VA = "0xC1EA10")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0xC1EA54", Offset = "0xC1EA54", VA = "0xC1EA54")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xC1EA98", Offset = "0xC1EA98", VA = "0xC1EA98")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xC19EA4", Offset = "0xC19EA4", VA = "0xC19EA4")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xC18FF8", Offset = "0xC18FF8", VA = "0xC18FF8")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xC17490", Offset = "0xC17490", VA = "0xC17490")]
		public void RotateTo(Transform bone)
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xC1EADC", Offset = "0xC1EADC", VA = "0xC1EADC")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x20000BF")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Trigger")]
	[HelpURL("https://www.youtube.com/watch?v=-TDZpNjt2mk&index=15&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000C0")]
		public class CharacterPosition
		{
			[Token(Token = "0x400055F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("If false, will not care where the character stands, as long as it is in contact with the trigger collider.")]
			public bool use;

			[Token(Token = "0x4000560")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The offset of the character's position relative to the trigger in XZ plane. Y position of the character is unlimited as long as it is contact with the collider.")]
			public Vector2 offset;

			[Token(Token = "0x4000561")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Range(-180f, 180f)]
			[Tooltip("Angle offset from the default forward direction.")]
			public float angleOffset;

			[Token(Token = "0x4000562")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max angular offset of the character's forward from the direction of this trigger.")]
			[Range(0f, 180f)]
			public float maxAngle;

			[Token(Token = "0x4000563")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max offset of the character's position from this range's center.")]
			public float radius;

			[Token(Token = "0x4000564")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("If true, will rotate the trigger around it's Y axis relative to the position of the character, so the object can be interacted with from all sides.")]
			public bool orbit;

			[Token(Token = "0x4000565")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object. For example a gun will be able to be picked up from the same direction relative to the barrel no matter which side the gun is resting on.")]
			public bool fixYAxis;

			[Token(Token = "0x170000B3")]
			public Vector3 offset3D
			{
				[Token(Token = "0x600075D")]
				[Address(RVA = "0xC1EDC0", Offset = "0xC1EDC0", VA = "0xC1EDC0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000B4")]
			public Vector3 direction3D
			{
				[Token(Token = "0x600075E")]
				[Address(RVA = "0xC1EDCC", Offset = "0xC1EDCC", VA = "0xC1EDCC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x600075F")]
			[Address(RVA = "0xC1EE8C", Offset = "0xC1EE8C", VA = "0xC1EE8C")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000760")]
			[Address(RVA = "0xC1F5F0", Offset = "0xC1F5F0", VA = "0xC1F5F0")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000C1")]
		public class CameraPosition
		{
			[Token(Token = "0x4000566")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("What the camera should be looking at to trigger the interaction? If null, this camera position will not be used.")]
			public Collider lookAtTarget;

			[Token(Token = "0x4000567")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The direction from the lookAtTarget towards the camera (in lookAtTarget's space).")]
			public Vector3 direction;

			[Token(Token = "0x4000568")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max distance from the lookAtTarget to the camera.")]
			public float maxDistance;

			[Token(Token = "0x4000569")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 180f)]
			[Tooltip("Max angle between the direction and the direction towards the camera.")]
			public float maxAngle;

			[Token(Token = "0x400056A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object.")]
			public bool fixYAxis;

			[Token(Token = "0x6000761")]
			[Address(RVA = "0xC1F604", Offset = "0xC1F604", VA = "0xC1F604")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000762")]
			[Address(RVA = "0xC1F77C", Offset = "0xC1F77C", VA = "0xC1F77C")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000763")]
			[Address(RVA = "0xC1FA84", Offset = "0xC1FA84", VA = "0xC1FA84")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000C2")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x20000C3")]
			public class Interaction
			{
				[Token(Token = "0x4000570")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The InteractionObject to interact with.")]
				public InteractionObject interactionObject;

				[Token(Token = "0x4000571")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Tooltip("The effectors to interact with.")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x6000766")]
				[Address(RVA = "0xC1FB08", Offset = "0xC1FB08", VA = "0xC1FB08")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x400056B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public string name;

			[Token(Token = "0x400056C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public bool show;

			[Token(Token = "0x400056D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The range for the character's position and rotation.")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x400056E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The range for the character camera's position and rotation.")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x400056F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Definitions of the interactions associated with this range.")]
			public Interaction[] interactions;

			[Token(Token = "0x6000764")]
			[Address(RVA = "0xC1ECAC", Offset = "0xC1ECAC", VA = "0xC1ECAC")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x6000765")]
			[Address(RVA = "0xC1FAF8", Offset = "0xC1FAF8", VA = "0xC1FAF8")]
			public Range()
			{
			}
		}

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The valid ranges of the character's and/or it's camera's position for triggering interaction when the character is in contact with the collider of this trigger.")]
		public Range[] ranges;

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xC1EB58", Offset = "0xC1EB58", VA = "0xC1EB58")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xC1EB9C", Offset = "0xC1EB9C", VA = "0xC1EB9C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xC1EBE0", Offset = "0xC1EBE0", VA = "0xC1EBE0")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xC1EC24", Offset = "0xC1EC24", VA = "0xC1EC24")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xC1EC68", Offset = "0xC1EC68", VA = "0xC1EC68")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xC1D490", Offset = "0xC1D490", VA = "0xC1D490")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xC1ED5C", Offset = "0xC1ED5C", VA = "0xC1ED5C")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x20000C4")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20000C5")]
		public class Map
		{
			[Token(Token = "0x4000573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x4000574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x4000575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x4000576")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x600076E")]
			[Address(RVA = "0xC1FE08", Offset = "0xC1FE08", VA = "0xC1FE08")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x600076F")]
			[Address(RVA = "0xC20160", Offset = "0xC20160", VA = "0xC20160")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x6000770")]
			[Address(RVA = "0xC20120", Offset = "0xC20120", VA = "0xC20120")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000771")]
			[Address(RVA = "0xC1FFA4", Offset = "0xC1FFA4", VA = "0xC1FFA4")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xC1FB10", Offset = "0xC1FB10", VA = "0xC1FB10", Slot = "7")]
		[ContextMenu("Auto-Mapping")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xC1FEB0", Offset = "0xC1FEB0", VA = "0xC1FEB0", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xC1FEB4", Offset = "0xC1FEB4", VA = "0xC1FEB4", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0xC200C4", Offset = "0xC200C4", VA = "0xC200C4", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xC1FE54", Offset = "0xC1FE54", VA = "0xC1FE54")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xC1FD74", Offset = "0xC1FD74", VA = "0xC1FD74")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xC201A4", Offset = "0xC201A4", VA = "0xC201A4")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x20000C6")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xC201C4", Offset = "0xC201C4", VA = "0xC201C4", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xC20294", Offset = "0xC20294", VA = "0xC20294", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xC2046C", Offset = "0xC2046C", VA = "0xC2046C", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xC20554", Offset = "0xC20554", VA = "0xC20554", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xC202F4", Offset = "0xC202F4", VA = "0xC202F4")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xC20884", Offset = "0xC20884", VA = "0xC20884")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x20000C7")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float localRotationWeight;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float localPositionWeight;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x6000778")]
		public abstract void AutoMapping();

		[Token(Token = "0x6000779")]
		[Address(RVA = "0xC20894", Offset = "0xC20894", VA = "0xC20894")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x600077A")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x600077B")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x600077C")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x600077D")]
		[Address(RVA = "0xC208A0", Offset = "0xC208A0", VA = "0xC208A0", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0xC208E4", Offset = "0xC208E4", VA = "0xC208E4", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0xC20910", Offset = "0xC20910", VA = "0xC20910", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0xC201B4", Offset = "0xC201B4", VA = "0xC201B4")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x20000C8")]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20000C9")]
		public class Rigidbone
		{
			[Token(Token = "0x4000591")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x4000592")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4000593")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x4000594")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x4000595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x4000596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x4000597")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x4000598")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x4000599")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x400059A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x400059B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x6000793")]
			[Address(RVA = "0xC20F80", Offset = "0xC20F80", VA = "0xC20F80")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x6000794")]
			[Address(RVA = "0xC21B2C", Offset = "0xC21B2C", VA = "0xC21B2C")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x6000795")]
			[Address(RVA = "0xC218EC", Offset = "0xC218EC", VA = "0xC218EC")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20000CA")]
		public class Child
		{
			[Token(Token = "0x400059C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x400059D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x400059E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x6000796")]
			[Address(RVA = "0xC21128", Offset = "0xC21128", VA = "0xC21128")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6000797")]
			[Address(RVA = "0xC21C44", Offset = "0xC21C44", VA = "0xC21C44")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x6000798")]
			[Address(RVA = "0xC21C00", Offset = "0xC21C00", VA = "0xC21C00")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x20000CB")]
		[CompilerGenerated]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400059F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40005A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40005A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x170000B7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600079C")]
				[Address(RVA = "0xC221B0", Offset = "0xC221B0", VA = "0xC221B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600079E")]
				[Address(RVA = "0xC221F8", Offset = "0xC221F8", VA = "0xC221F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000799")]
			[Address(RVA = "0xC21194", Offset = "0xC21194", VA = "0xC21194")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x600079A")]
			[Address(RVA = "0xC21FC0", Offset = "0xC21FC0", VA = "0xC21FC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600079B")]
			[Address(RVA = "0xC21FC4", Offset = "0xC21FC4", VA = "0xC21FC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600079D")]
			[Address(RVA = "0xC221B8", Offset = "0xC221B8", VA = "0xC221B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If you have multiple IK components, then this should be the one that solves last each frame.")]
		public IK ik;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How long does it take to blend from ragdoll to animation?")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, IK can be used on top of physical ragdoll simulation.")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much velocity transfer from animation to ragdoll?")]
		public float applyVelocity;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How much angular velocity to transfer from animation to ragdoll?")]
		public float applyAngularVelocity;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x170000B5")]
		private bool isRagdoll
		{
			[Token(Token = "0x600078C")]
			[Address(RVA = "0xC20954", Offset = "0xC20954", VA = "0xC20954")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B6")]
		private bool ikUsed
		{
			[Token(Token = "0x600078E")]
			[Address(RVA = "0xC21520", Offset = "0xC21520", VA = "0xC21520")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0xC20928", Offset = "0xC20928", VA = "0xC20928")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xC209B8", Offset = "0xC209B8", VA = "0xC209B8")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xC20AD0", Offset = "0xC20AD0", VA = "0xC20AD0")]
		public void Start()
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xC20A5C", Offset = "0xC20A5C", VA = "0xC20A5C")]
		[IteratorStateMachine(typeof(<DisableRagdollSmooth>d__21))]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xC211BC", Offset = "0xC211BC", VA = "0xC211BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xC213E4", Offset = "0xC213E4", VA = "0xC213E4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xC21484", Offset = "0xC21484", VA = "0xC21484")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xC21674", Offset = "0xC21674", VA = "0xC21674")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xC214F4", Offset = "0xC214F4", VA = "0xC214F4")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xC21640", Offset = "0xC21640", VA = "0xC21640")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xC216F4", Offset = "0xC216F4", VA = "0xC216F4")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xC21698", Offset = "0xC21698", VA = "0xC21698")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xC20A00", Offset = "0xC20A00", VA = "0xC20A00")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xC21418", Offset = "0xC21418", VA = "0xC21418")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xC21D54", Offset = "0xC21D54", VA = "0xC21D54")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xC21E8C", Offset = "0xC21E8C", VA = "0xC21E8C")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x20000CC")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initiated;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool applicationQuit;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x170000B9")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x60007A4")]
			[Address(RVA = "0xC22664", Offset = "0xC22664", VA = "0xC22664")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000BA")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x60007A5")]
			[Address(RVA = "0xC22670", Offset = "0xC22670", VA = "0xC22670")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000BB")]
		public bool defaultLocalRotationOverride
		{
			[Token(Token = "0x60007A6")]
			[Address(RVA = "0xC226A0", Offset = "0xC226A0", VA = "0xC226A0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007A7")]
			[Address(RVA = "0xC226A8", Offset = "0xC226A8", VA = "0xC226A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xC22200", Offset = "0xC22200", VA = "0xC22200")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xC2223C", Offset = "0xC2223C", VA = "0xC2223C")]
		public void SetDefaultLocalRotation(Quaternion localRotation)
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xC22254", Offset = "0xC22254", VA = "0xC22254")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xC225D4", Offset = "0xC225D4", VA = "0xC225D4")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xC22638", Offset = "0xC22638", VA = "0xC22638")]
		public void Disable()
		{
		}

		[Token(Token = "0x60007A8")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xC224D8", Offset = "0xC224D8", VA = "0xC224D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xC226B4", Offset = "0xC226B4", VA = "0xC226B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xC226B8", Offset = "0xC226B8", VA = "0xC226B8")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xC226E0", Offset = "0xC226E0", VA = "0xC226E0")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xC227B4", Offset = "0xC227B4", VA = "0xC227B4")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xC22A0C", Offset = "0xC22A0C", VA = "0xC22A0C")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xC22B60", Offset = "0xC22B60", VA = "0xC22B60")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x20000CD")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Angle")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float limit;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xC22BC0", Offset = "0xC22BC0", VA = "0xC22BC0")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xC22C04", Offset = "0xC22C04", VA = "0xC22C04")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xC22C48", Offset = "0xC22C48", VA = "0xC22C48")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xC22C8C", Offset = "0xC22C8C", VA = "0xC22C8C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xC22CD0", Offset = "0xC22CD0", VA = "0xC22CD0", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xC22D08", Offset = "0xC22D08", VA = "0xC22D08")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xC2302C", Offset = "0xC2302C", VA = "0xC2302C")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x20000CE")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Hinge")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useLimits;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float min;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float max;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastAngle;

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xC2303C", Offset = "0xC2303C", VA = "0xC2303C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xC23080", Offset = "0xC23080", VA = "0xC23080")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xC230C4", Offset = "0xC230C4", VA = "0xC230C4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xC23108", Offset = "0xC23108", VA = "0xC23108")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xC2314C", Offset = "0xC2314C", VA = "0xC2314C", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xC23150", Offset = "0xC23150", VA = "0xC23150")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xC23370", Offset = "0xC23370", VA = "0xC23370")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x20000CF")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Polygonal")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20000D0")]
		public class ReachCone
		{
			[Token(Token = "0x40005B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x40005B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x40005B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x40005B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x170000BC")]
			public Vector3 o
			{
				[Token(Token = "0x60007CE")]
				[Address(RVA = "0xC2521C", Offset = "0xC2521C", VA = "0xC2521C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000BD")]
			public Vector3 a
			{
				[Token(Token = "0x60007CF")]
				[Address(RVA = "0xC25248", Offset = "0xC25248", VA = "0xC25248")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000BE")]
			public Vector3 b
			{
				[Token(Token = "0x60007D0")]
				[Address(RVA = "0xC25278", Offset = "0xC25278", VA = "0xC25278")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000BF")]
			public Vector3 c
			{
				[Token(Token = "0x60007D1")]
				[Address(RVA = "0xC252A8", Offset = "0xC252A8", VA = "0xC252A8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000C0")]
			public bool isValid
			{
				[Token(Token = "0x60007D3")]
				[Address(RVA = "0xC24744", Offset = "0xC24744", VA = "0xC24744")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60007D2")]
			[Address(RVA = "0xC24BE8", Offset = "0xC24BE8", VA = "0xC24BE8")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x60007D4")]
			[Address(RVA = "0xC24D60", Offset = "0xC24D60", VA = "0xC24D60")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000D1")]
		public class LimitPoint
		{
			[Token(Token = "0x40005B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x40005B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x60007D5")]
			[Address(RVA = "0xC24754", Offset = "0xC24754", VA = "0xC24754")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 3f)]
		public int smoothIterations;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xC23388", Offset = "0xC23388", VA = "0xC23388")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xC233CC", Offset = "0xC233CC", VA = "0xC233CC")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xC23410", Offset = "0xC23410", VA = "0xC23410")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xC23454", Offset = "0xC23454", VA = "0xC23454")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xC23498", Offset = "0xC23498", VA = "0xC23498")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xC23B7C", Offset = "0xC23B7C", VA = "0xC23B7C", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xC23C04", Offset = "0xC23C04", VA = "0xC23C04")]
		private void Start()
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xC24250", Offset = "0xC24250", VA = "0xC24250")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xC23530", Offset = "0xC23530", VA = "0xC23530")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xC247B8", Offset = "0xC247B8", VA = "0xC247B8")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xC24FD4", Offset = "0xC24FD4", VA = "0xC24FD4")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xC2501C", Offset = "0xC2501C", VA = "0xC2501C")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xC2507C", Offset = "0xC2507C", VA = "0xC2507C")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xC23FAC", Offset = "0xC23FAC", VA = "0xC23FAC")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xC250E8", Offset = "0xC250E8", VA = "0xC250E8")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xC251B4", Offset = "0xC251B4", VA = "0xC251B4")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x20000D2")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Spline")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xC252D8", Offset = "0xC252D8", VA = "0xC252D8")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xC2531C", Offset = "0xC2531C", VA = "0xC2531C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xC25360", Offset = "0xC25360", VA = "0xC25360")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xC253A4", Offset = "0xC253A4", VA = "0xC253A4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xC253E8", Offset = "0xC253E8", VA = "0xC253E8")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xC25404", Offset = "0xC25404", VA = "0xC25404", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xC2543C", Offset = "0xC2543C", VA = "0xC2543C")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xC257E8", Offset = "0xC257E8", VA = "0xC257E8")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x20000D4")]
		[CompilerGenerated]
		private sealed class <TurnToTarget>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40005DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40005DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40005DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x170000C2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60007E8")]
				[Address(RVA = "0xC267EC", Offset = "0xC267EC", VA = "0xC267EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60007EA")]
				[Address(RVA = "0xC26834", Offset = "0xC26834", VA = "0xC26834", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007E5")]
			[Address(RVA = "0xC265EC", Offset = "0xC265EC", VA = "0xC265EC")]
			[DebuggerHidden]
			public <TurnToTarget>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x60007E6")]
			[Address(RVA = "0xC266F8", Offset = "0xC266F8", VA = "0xC266F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60007E7")]
			[Address(RVA = "0xC266FC", Offset = "0xC266FC", VA = "0xC266FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007E9")]
			[Address(RVA = "0xC267F4", Offset = "0xC267F4", VA = "0xC267F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK ik;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("Master weight of the IK solver.")]
		public float weight;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The target to aim at. Do not use the Target transform that is assigned to AimIK. Set to null if you wish to stop aiming.")]
		[Header("Target Smoothing")]
		public Transform target;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The time it takes to blend in/out of AimIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Smoothing time for turning towards the yaw and pitch of the target using Mathf.SmoothDampAngle. Value of 0 means smooth damping is disabled.")]
		public float smoothDampTime;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The position of the pivot that the aim target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Minimum distance of aiming from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Offset applied to the target in world space. Convenient for scripting aiming inaccuracy.")]
		public Vector3 offset;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("RootRotation")]
		[Range(0f, 180f)]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the aiming direction.")]
		public float maxRootAngle;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If enabled, aligns the root forward to target direction after 'Max Root Angle' has been exceeded.")]
		public bool turnToTarget;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The time of turning towards the target direction if 'Max Root Angle has been exceeded and 'Turn To Target' is enabled.")]
		public float turnToTargetTime;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Header("Mode")]
		[Tooltip("If true, AimIK will consider whatever the current direction of the weapon to be the forward aiming direction and work additively on top of that. This enables you to use recoil and reloading animations seamlessly with AimIK. Adjust the Vector3 value below if the weapon is not aiming perfectly forward in the aiming animation clip.")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The direction of the animated weapon aiming in character space. Tweak this value to adjust the aiming. 'Use Animated Aim Direction' must be enabled for this property to work.")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTarget;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float switchWeight;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float switchWeightV;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float weightV;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 lastPosition;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 dir;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		private bool turningToTarget;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float turnToTargetMlp;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float turnToTargetMlpV;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float yawV;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float pitchV;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float dirMagV;

		[Token(Token = "0x170000C1")]
		private Vector3 pivot
		{
			[Token(Token = "0x60007E0")]
			[Address(RVA = "0xC25874", Offset = "0xC25874", VA = "0xC25874")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xC257F4", Offset = "0xC257F4", VA = "0xC257F4")]
		private void Start()
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xC258F8", Offset = "0xC258F8", VA = "0xC258F8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xC26150", Offset = "0xC26150", VA = "0xC26150")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xC262D4", Offset = "0xC262D4", VA = "0xC262D4")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xC26578", Offset = "0xC26578", VA = "0xC26578")]
		[IteratorStateMachine(typeof(<TurnToTarget>d__37))]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xC26614", Offset = "0xC26614", VA = "0xC26614")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000D6")]
		public class Pose
		{
			[Token(Token = "0x40005E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x40005E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x40005E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x40005E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x40005E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x40005E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x60007EE")]
			[Address(RVA = "0xC2690C", Offset = "0xC2690C", VA = "0xC2690C")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x60007EF")]
			[Address(RVA = "0xC26E88", Offset = "0xC26E88", VA = "0xC26E88")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x60007F0")]
			[Address(RVA = "0xC26E90", Offset = "0xC26E90", VA = "0xC26E90")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xC2683C", Offset = "0xC2683C", VA = "0xC2683C")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xC26DBC", Offset = "0xC26DBC", VA = "0xC26DBC")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xC26E1C", Offset = "0xC26E1C", VA = "0xC26E1C")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x20000D7")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000D8")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20000D9")]
			public class EffectorLink
			{
				[Token(Token = "0x40005F0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40005F1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x60007F6")]
				[Address(RVA = "0xC2731C", Offset = "0xC2731C", VA = "0xC2731C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40005E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform that's motion we are reading.")]
			public Transform transform;

			[Token(Token = "0x40005E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Amplify the 'transform's' position relative to this Transform.")]
			public Transform relativeTo;

			[Token(Token = "0x40005E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x40005EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Amplification magnitude along the up axis of the character.")]
			public float verticalWeight;

			[Token(Token = "0x40005EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Amplification magnitude along the horizontal axes of the character.")]
			public float horizontalWeight;

			[Token(Token = "0x40005EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Speed of the amplifier. 0 means instant.")]
			public float speed;

			[Token(Token = "0x40005ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x40005EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x40005EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x60007F3")]
			[Address(RVA = "0xC26FDC", Offset = "0xC26FDC", VA = "0xC26FDC")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x60007F4")]
			[Address(RVA = "0xC272F4", Offset = "0xC272F4", VA = "0xC272F4")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60007F5")]
			[Address(RVA = "0xC27304", Offset = "0xC27304", VA = "0xC27304")]
			public Body()
			{
			}
		}

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The amplified bodies.")]
		public Body[] bodies;

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xC26EAC", Offset = "0xC26EAC", VA = "0xC26EAC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xC272EC", Offset = "0xC272EC", VA = "0xC272EC")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x20000DA")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Speed of tilting")]
		public float tiltSpeed;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Sensitivity of tilting")]
		public float tiltSensitivity;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseLeft;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseRight;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xC27324", Offset = "0xC27324", VA = "0xC27324", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xC27360", Offset = "0xC27360", VA = "0xC27360", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xC2754C", Offset = "0xC2754C", VA = "0xC2754C")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x20000DB")]
	public class CCDBendGoal : MonoBehaviour
	{
		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CCDIK ik;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xC27560", Offset = "0xC27560", VA = "0xC27560")]
		private void Start()
		{
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xC27640", Offset = "0xC27640", VA = "0xC27640")]
		private void BeforeIK()
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xC278D4", Offset = "0xC278D4", VA = "0xC278D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xC27A00", Offset = "0xC27A00", VA = "0xC27A00")]
		public CCDBendGoal()
		{
		}
	}
	[Token(Token = "0x20000DC")]
	[ExecuteInEditMode]
	public class EditorIK : MonoBehaviour
	{
		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If slot assigned, will update Animator before IK.")]
		public Animator animator;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Create/Final IK/Editor IK Pose")]
		public EditorIKPose defaultPose;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Transform[] bones;

		[Token(Token = "0x170000C4")]
		public IK ik
		{
			[Token(Token = "0x60007FE")]
			[Address(RVA = "0xC27A10", Offset = "0xC27A10", VA = "0xC27A10")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60007FF")]
			[Address(RVA = "0xC27A18", Offset = "0xC27A18", VA = "0xC27A18")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xC27A20", Offset = "0xC27A20", VA = "0xC27A20")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xC27BC0", Offset = "0xC27BC0", VA = "0xC27BC0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xC27E1C", Offset = "0xC27E1C", VA = "0xC27E1C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xC27F58", Offset = "0xC27F58", VA = "0xC27F58")]
		public void StoreDefaultPose()
		{
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xC28138", Offset = "0xC28138", VA = "0xC28138")]
		public bool Initiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xC2834C", Offset = "0xC2834C", VA = "0xC2834C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xC285D0", Offset = "0xC285D0", VA = "0xC285D0")]
		public EditorIK()
		{
		}
	}
	[Token(Token = "0x20000DD")]
	[CreateAssetMenu(fileName = "Editor IK Pose", menuName = "Final IK/Editor IK Pose", order = 1)]
	public class EditorIKPose : ScriptableObject
	{
		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] localPositions;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion[] localRotations;

		[Token(Token = "0x170000C5")]
		public bool poseStored
		{
			[Token(Token = "0x6000807")]
			[Address(RVA = "0xC27C9C", Offset = "0xC27C9C", VA = "0xC27C9C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0xC27FD4", Offset = "0xC27FD4", VA = "0xC27FD4")]
		public void Store(Transform[] T)
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xC27CC0", Offset = "0xC27CC0", VA = "0xC27CC0")]
		public bool Restore(Transform[] T)
		{
			return default(bool);
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0xC28634", Offset = "0xC28634", VA = "0xC28634")]
		public EditorIKPose()
		{
		}
	}
	[Token(Token = "0x20000DE")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000DF")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4000602")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000603")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000604")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4000609")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x400060A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x400060B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170000C7")]
			public bool inProgress
			{
				[Token(Token = "0x600080F")]
				[Address(RVA = "0xC2876C", Offset = "0xC2876C", VA = "0xC2876C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000C8")]
			protected float crossFader
			{
				[Token(Token = "0x6000810")]
				[Address(RVA = "0xC28C64", Offset = "0xC28C64", VA = "0xC28C64")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000811")]
				[Address(RVA = "0xC28C6C", Offset = "0xC28C6C", VA = "0xC28C6C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000C9")]
			protected float timer
			{
				[Token(Token = "0x6000812")]
				[Address(RVA = "0xC28C74", Offset = "0xC28C74", VA = "0xC28C74")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000813")]
				[Address(RVA = "0xC28C7C", Offset = "0xC28C7C", VA = "0xC28C7C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000CA")]
			protected Vector3 force
			{
				[Token(Token = "0x6000814")]
				[Address(RVA = "0xC28C84", Offset = "0xC28C84", VA = "0xC28C84")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000815")]
				[Address(RVA = "0xC28C90", Offset = "0xC28C90", VA = "0xC28C90")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000CB")]
			protected Vector3 point
			{
				[Token(Token = "0x6000816")]
				[Address(RVA = "0xC28C9C", Offset = "0xC28C9C", VA = "0xC28C9C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000817")]
				[Address(RVA = "0xC28CA8", Offset = "0xC28CA8", VA = "0xC28CA8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000818")]
			[Address(RVA = "0xC28B34", Offset = "0xC28B34", VA = "0xC28B34")]
			public void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x6000819")]
			[Address(RVA = "0xC28840", Offset = "0xC28840", VA = "0xC28840")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x600081A")]
			protected abstract float GetLength();

			[Token(Token = "0x600081B")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x600081C")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x600081D")]
			[Address(RVA = "0xC28CB4", Offset = "0xC28CB4", VA = "0xC28CB4")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E0")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20000E1")]
			public class EffectorLink
			{
				[Token(Token = "0x400060F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000610")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x4000611")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4000612")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000822")]
				[Address(RVA = "0xC28FEC", Offset = "0xC28FEC", VA = "0xC28FEC")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000823")]
				[Address(RVA = "0xC29088", Offset = "0xC29088", VA = "0xC29088")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000824")]
				[Address(RVA = "0xC2909C", Offset = "0xC2909C", VA = "0xC2909C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400060C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x400060D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x400060E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Linking this offset to the FBBIK effectors")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x600081E")]
			[Address(RVA = "0xC28CC8", Offset = "0xC28CC8", VA = "0xC28CC8", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x600081F")]
			[Address(RVA = "0xC28DE4", Offset = "0xC28DE4", VA = "0xC28DE4", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000820")]
			[Address(RVA = "0xC28E44", Offset = "0xC28E44", VA = "0xC28E44", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000821")]
			[Address(RVA = "0xC28FD8", Offset = "0xC28FD8", VA = "0xC28FD8")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E2")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20000E3")]
			public class BoneLink
			{
				[Token(Token = "0x4000616")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public Transform bone;

				[Token(Token = "0x4000617")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Range(0f, 1f)]
				[Tooltip("Weight of rotating the bone")]
				public float weight;

				[Token(Token = "0x4000618")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x4000619")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6000829")]
				[Address(RVA = "0xC2936C", Offset = "0xC2936C", VA = "0xC2936C")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x600082A")]
				[Address(RVA = "0xC29188", Offset = "0xC29188", VA = "0xC29188")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x600082B")]
				[Address(RVA = "0xC29500", Offset = "0xC29500", VA = "0xC29500")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4000613")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4000614")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this hit point to bone(s)")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4000615")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000825")]
			[Address(RVA = "0xC290A4", Offset = "0xC290A4", VA = "0xC290A4", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000826")]
			[Address(RVA = "0xC29130", Offset = "0xC29130", VA = "0xC29130", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000827")]
			[Address(RVA = "0xC29194", Offset = "0xC29194", VA = "0xC29194", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000828")]
			[Address(RVA = "0xC294F8", Offset = "0xC294F8", VA = "0xC294F8")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x170000C6")]
		public bool inProgress
		{
			[Token(Token = "0x600080B")]
			[Address(RVA = "0xC286D0", Offset = "0xC286D0", VA = "0xC286D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xC28780", Offset = "0xC28780", VA = "0xC28780", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xC28918", Offset = "0xC28918", VA = "0xC28918")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xC28C5C", Offset = "0xC28C5C", VA = "0xC28C5C")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x20000E5")]
		public abstract class Offset
		{
			[Token(Token = "0x400061D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x400061E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x400061F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4000624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000625")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170000CC")]
			protected float crossFader
			{
				[Token(Token = "0x600082F")]
				[Address(RVA = "0xC29A70", Offset = "0xC29A70", VA = "0xC29A70")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000830")]
				[Address(RVA = "0xC29A78", Offset = "0xC29A78", VA = "0xC29A78")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000CD")]
			protected float timer
			{
				[Token(Token = "0x6000831")]
				[Address(RVA = "0xC29A80", Offset = "0xC29A80", VA = "0xC29A80")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000832")]
				[Address(RVA = "0xC29A88", Offset = "0xC29A88", VA = "0xC29A88")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000CE")]
			protected Vector3 force
			{
				[Token(Token = "0x6000833")]
				[Address(RVA = "0xC29A90", Offset = "0xC29A90", VA = "0xC29A90")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000834")]
				[Address(RVA = "0xC29A9C", Offset = "0xC29A9C", VA = "0xC29A9C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000CF")]
			protected Vector3 point
			{
				[Token(Token = "0x6000835")]
				[Address(RVA = "0xC29AA8", Offset = "0xC29AA8", VA = "0xC29AA8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000836")]
				[Address(RVA = "0xC29AB4", Offset = "0xC29AB4", VA = "0xC29AB4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000837")]
			[Address(RVA = "0xC29920", Offset = "0xC29920", VA = "0xC29920")]
			public void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x6000838")]
			[Address(RVA = "0xC2961C", Offset = "0xC2961C", VA = "0xC2961C")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000839")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x600083A")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x600083B")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x600083C")]
			[Address(RVA = "0xC29AC0", Offset = "0xC29AC0", VA = "0xC29AC0")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E6")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20000E7")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x400062A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x400062B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x400062C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x400062D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000841")]
				[Address(RVA = "0xC29EA4", Offset = "0xC29EA4", VA = "0xC29EA4")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000842")]
				[Address(RVA = "0xC29CC8", Offset = "0xC29CC8", VA = "0xC29CC8")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000843")]
				[Address(RVA = "0xC29F38", Offset = "0xC29F38", VA = "0xC29F38")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000627")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public int forceDirCurveIndex;

			[Token(Token = "0x4000628")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public int upDirCurveIndex;

			[Token(Token = "0x4000629")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this offset to the VRIK position offsets")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x600083D")]
			[Address(RVA = "0xC29AD4", Offset = "0xC29AD4", VA = "0xC29AD4", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x600083E")]
			[Address(RVA = "0xC29C68", Offset = "0xC29C68", VA = "0xC29C68", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x600083F")]
			[Address(RVA = "0xC29CDC", Offset = "0xC29CDC", VA = "0xC29CDC", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000840")]
			[Address(RVA = "0xC29F1C", Offset = "0xC29F1C", VA = "0xC29F1C")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E8")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20000E9")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4000631")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4000632")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Range(0f, 1f)]
				[Tooltip("Weight of rotating the bone")]
				public float weight;

				[Token(Token = "0x4000633")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4000634")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6000848")]
				[Address(RVA = "0xC2A30C", Offset = "0xC2A30C", VA = "0xC2A30C")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000849")]
				[Address(RVA = "0xC2A070", Offset = "0xC2A070", VA = "0xC2A070")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x600084A")]
				[Address(RVA = "0xC2A428", Offset = "0xC2A428", VA = "0xC2A428")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x400062E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public int curveIndex;

			[Token(Token = "0x400062F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this hit point to bone(s)")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4000630")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000844")]
			[Address(RVA = "0xC29F40", Offset = "0xC29F40", VA = "0xC29F40", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000845")]
			[Address(RVA = "0xC2A018", Offset = "0xC2A018", VA = "0xC2A018", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000846")]
			[Address(RVA = "0xC2A07C", Offset = "0xC2A07C", VA = "0xC2A07C", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000847")]
			[Address(RVA = "0xC2A414", Offset = "0xC2A414", VA = "0xC2A414")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x600082C")]
		[Address(RVA = "0xC29564", Offset = "0xC29564", VA = "0xC29564", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0xC296FC", Offset = "0xC296FC", VA = "0xC296FC")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xC29A50", Offset = "0xC29A50", VA = "0xC29A50")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x20000EA")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000EB")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20000EC")]
			public class EffectorLink
			{
				[Token(Token = "0x4000642")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000643")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000851")]
				[Address(RVA = "0xC2AA20", Offset = "0xC2AA20", VA = "0xC2AA20")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000637")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform to follow, can be any bone of the character")]
			public Transform transform;

			[Token(Token = "0x4000638")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000639")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The speed to follow the Transform")]
			public float speed;

			[Token(Token = "0x400063A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The acceleration, smaller values means lazyer following")]
			public float acceleration;

			[Token(Token = "0x400063B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 1f)]
			[Tooltip("Matching target velocity")]
			public float matchVelocity;

			[Token(Token = "0x400063C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("gravity applied to the Body")]
			public float gravity;

			[Token(Token = "0x400063D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x400063E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x400063F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x4000640")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000641")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x600084E")]
			[Address(RVA = "0xC2A4F8", Offset = "0xC2A4F8", VA = "0xC2A4F8")]
			public void Reset()
			{
			}

			[Token(Token = "0x600084F")]
			[Address(RVA = "0xC2A698", Offset = "0xC2A698", VA = "0xC2A698")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x6000850")]
			[Address(RVA = "0xC2AA04", Offset = "0xC2AA04", VA = "0xC2AA04")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The array of Bodies")]
		public Body[] bodies;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The array of OffsetLimits")]
		public OffsetLimits[] limits;

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xC2A48C", Offset = "0xC2A48C", VA = "0xC2A48C")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xC2A5D4", Offset = "0xC2A5D4", VA = "0xC2A5D4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0xC2A9E4", Offset = "0xC2A9E4", VA = "0xC2A9E4")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x20000ED")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Target Smoothing")]
		[Tooltip("The target to look at. Do not use the Target transform that is assigned to LookAtIK. Set to null if you wish to stop looking.")]
		public Transform target;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The time it takes to blend in/out of LookAtIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The position of the pivot that the look at target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Minimum distance of looking from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the look direction.")]
		[Header("RootRotation")]
		[Range(0f, 180f)]
		public float maxRootAngle;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 dir;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x170000D0")]
		private Vector3 pivot
		{
			[Token(Token = "0x6000854")]
			[Address(RVA = "0xC2AA90", Offset = "0xC2AA90", VA = "0xC2AA90")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xC2AA28", Offset = "0xC2AA28", VA = "0xC2AA28")]
		private void Start()
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xC2AB14", Offset = "0xC2AB14", VA = "0xC2AB14")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xC2B01C", Offset = "0xC2B01C", VA = "0xC2B01C")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xC2B1A0", Offset = "0xC2B1A0", VA = "0xC2B1A0")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xC2B3EC", Offset = "0xC2B3EC", VA = "0xC2B3EC")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x20000EE")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000EF")]
		public class OffsetLimits
		{
			[Token(Token = "0x400065B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The effector type (this is just an enum)")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x400065C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Spring force, if zero then this is a hard limit, if not, offset can exceed the limit.")]
			public float spring;

			[Token(Token = "0x400065D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool x;

			[Token(Token = "0x400065E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool y;

			[Token(Token = "0x400065F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool z;

			[Token(Token = "0x4000660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The limits")]
			public float minX;

			[Token(Token = "0x4000661")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The limits")]
			public float maxX;

			[Token(Token = "0x4000662")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The limits")]
			public float minY;

			[Token(Token = "0x4000663")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The limits")]
			public float maxY;

			[Token(Token = "0x4000664")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The limits")]
			public float minZ;

			[Token(Token = "0x4000665")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The limits")]
			public float maxZ;

			[Token(Token = "0x6000860")]
			[Address(RVA = "0xC2B614", Offset = "0xC2B614", VA = "0xC2B614")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x6000861")]
			[Address(RVA = "0xC2B8A4", Offset = "0xC2B8A4", VA = "0xC2B8A4")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x6000862")]
			[Address(RVA = "0xC2B914", Offset = "0xC2B914", VA = "0xC2B914")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x6000863")]
			[Address(RVA = "0xC2B95C", Offset = "0xC2B95C", VA = "0xC2B95C")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x20000F0")]
		[CompilerGenerated]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000666")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000667")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000668")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x170000D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000867")]
				[Address(RVA = "0xC2BAD8", Offset = "0xC2BAD8", VA = "0xC2BAD8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000869")]
				[Address(RVA = "0xC2BB20", Offset = "0xC2BB20", VA = "0xC2BB20", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000864")]
			[Address(RVA = "0xC2B518", Offset = "0xC2B518", VA = "0xC2B518")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000865")]
			[Address(RVA = "0xC2B964", Offset = "0xC2B964", VA = "0xC2B964", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000866")]
			[Address(RVA = "0xC2B968", Offset = "0xC2B968", VA = "0xC2B968", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000868")]
			[Address(RVA = "0xC2BAE0", Offset = "0xC2BAE0", VA = "0xC2BAE0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the FBBIK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x170000D1")]
		protected float deltaTime
		{
			[Token(Token = "0x6000858")]
			[Address(RVA = "0xC2A678", Offset = "0xC2A678", VA = "0xC2A678")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000859")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xC2B484", Offset = "0xC2B484", VA = "0xC2B484", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xC2B4A4", Offset = "0xC2B4A4", VA = "0xC2B4A4")]
		[IteratorStateMachine(typeof(<Initiate>d__8))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xC2B540", Offset = "0xC2B540", VA = "0xC2B540")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xC2A93C", Offset = "0xC2A93C", VA = "0xC2A93C")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xC2B778", Offset = "0xC2B778", VA = "0xC2B778", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xC2A9F4", Offset = "0xC2A9F4", VA = "0xC2A9F4")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x20000F1")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x20000F2")]
		[CompilerGenerated]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400066C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400066D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400066E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x170000D5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000874")]
				[Address(RVA = "0xC2BF78", Offset = "0xC2BF78", VA = "0xC2BF78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000876")]
				[Address(RVA = "0xC2BFC0", Offset = "0xC2BFC0", VA = "0xC2BFC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000871")]
			[Address(RVA = "0xC2BBDC", Offset = "0xC2BBDC", VA = "0xC2BBDC")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000872")]
			[Address(RVA = "0xC2BE04", Offset = "0xC2BE04", VA = "0xC2BE04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000873")]
			[Address(RVA = "0xC2BE08", Offset = "0xC2BE08", VA = "0xC2BE08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000875")]
			[Address(RVA = "0xC2BF80", Offset = "0xC2BF80", VA = "0xC2BF80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the VRIK component")]
		public VRIK ik;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x170000D4")]
		protected float deltaTime
		{
			[Token(Token = "0x600086A")]
			[Address(RVA = "0xC2BB28", Offset = "0xC2BB28", VA = "0xC2BB28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600086B")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x600086C")]
		[Address(RVA = "0xC2BB48", Offset = "0xC2BB48", VA = "0xC2BB48", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0xC2BB68", Offset = "0xC2BB68", VA = "0xC2BB68")]
		[IteratorStateMachine(typeof(<Initiate>d__7))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0xC2BC04", Offset = "0xC2BC04", VA = "0xC2BC04")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0xC2BCD8", Offset = "0xC2BCD8", VA = "0xC2BCD8", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0xC29A60", Offset = "0xC29A60", VA = "0xC29A60")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x20000F3")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000F4")]
		public class EffectorLink
		{
			[Token(Token = "0x4000670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4000672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4000673")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x600087A")]
			[Address(RVA = "0xC2C07C", Offset = "0xC2C07C", VA = "0xC2C07C")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x600087B")]
			[Address(RVA = "0xC2C3D4", Offset = "0xC2C3D4", VA = "0xC2C3D4")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000877")]
		[Address(RVA = "0xC2BFC8", Offset = "0xC2BFC8", VA = "0xC2BFC8")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0xC2C2CC", Offset = "0xC2C2CC", VA = "0xC2C2CC")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xC2C370", Offset = "0xC2C370", VA = "0xC2C370")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x20000F5")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000F6")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x20000F7")]
			public class EffectorLink
			{
				[Token(Token = "0x400067F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Effector to apply the offset to.")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000680")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Multiplier of the offset value, can be negative.")]
				public float weight;

				[Token(Token = "0x6000882")]
				[Address(RVA = "0xC2CA28", Offset = "0xC2CA28", VA = "0xC2CA28")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000675")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Bones to start the raycast from. Multiple raycasts can be used by assigning more than 1 bone.")]
			public Transform[] raycastFrom;

			[Token(Token = "0x4000676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Transform to raycast towards. Usually the body part that you want to keep from penetrating.")]
			public Transform raycastTo;

			[Token(Token = "0x4000677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("If 0, will use simple raycasting, if > 0, will use sphere casting (better, but slower).")]
			[Range(0f, 1f)]
			public float raycastRadius;

			[Token(Token = "0x4000678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this to FBBIK effectors.")]
			public EffectorLink[] effectors;

			[Token(Token = "0x4000679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The time of smooth interpolation of the offset value to avoid penetration.")]
			public float smoothTimeIn;

			[Token(Token = "0x400067A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The time of smooth interpolation of the offset value blending out of penetration avoidance.")]
			public float smoothTimeOut;

			[Token(Token = "0x400067B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Layers to keep penetrating from.")]
			public LayerMask layers;

			[Token(Token = "0x400067C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 offset;

			[Token(Token = "0x400067D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 offsetTarget;

			[Token(Token = "0x400067E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 offsetV;

			[Token(Token = "0x600087E")]
			[Address(RVA = "0xC2C44C", Offset = "0xC2C44C", VA = "0xC2C44C")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x600087F")]
			[Address(RVA = "0xC2C5EC", Offset = "0xC2C5EC", VA = "0xC2C5EC")]
			private Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000880")]
			[Address(RVA = "0xC2C6F4", Offset = "0xC2C6F4", VA = "0xC2C6F4")]
			private Vector3 Raycast(Vector3 from, Vector3 to)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000881")]
			[Address(RVA = "0xC2CA14", Offset = "0xC2CA14", VA = "0xC2CA14")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Definitions of penetration avoidances.")]
		public Avoider[] avoiders;

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xC2C3DC", Offset = "0xC2C3DC", VA = "0xC2C3DC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0xC2C5DC", Offset = "0xC2C5DC", VA = "0xC2C5DC")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x20000F8")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000F9")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x20000FA")]
			public class EffectorLink
			{
				[Token(Token = "0x400069E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400069F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000892")]
				[Address(RVA = "0xC2DDD4", Offset = "0xC2DDD4", VA = "0xC2DDD4")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000698")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Offset vector for the associated effector when doing recoil.")]
			public Vector3 offset;

			[Token(Token = "0x4000699")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("When firing before the last recoil has faded, how much of the current recoil offset will be maintained?")]
			[Range(0f, 1f)]
			public float additivity;

			[Token(Token = "0x400069A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max additive recoil for automatic fire.")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x400069B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this recoil offset to FBBIK effectors.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x400069C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x400069D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x600088F")]
			[Address(RVA = "0xC2CBCC", Offset = "0xC2CBCC", VA = "0xC2CBCC")]
			public void Start()
			{
			}

			[Token(Token = "0x6000890")]
			[Address(RVA = "0xC2D74C", Offset = "0xC2D74C", VA = "0xC2D74C")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x6000891")]
			[Address(RVA = "0xC2DDC0", Offset = "0xC2DDC0", VA = "0xC2DDC0")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000FB")]
		public enum Handedness
		{
			[Token(Token = "0x40006A1")]
			Right,
			[Token(Token = "0x40006A2")]
			Left
		}

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the AimIK component. Optional, only used to getting the aiming direction.")]
		public AimIK aimIK;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Set this true if you are using IKExecutionOrder.cs or a custom script to force AimIK solve after FBBIK.")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Which hand is holding the weapon?")]
		public Handedness handedness;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Check for 2-handed weapons.")]
		public bool twoHanded;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Weight curve for the recoil offsets. Recoil procedure is as long as this curve.")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How much is the magnitude randomized each time Recoil is called?")]
		public float magnitudeRandom;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("How much is the rotation randomized each time Recoil is called?")]
		public Vector3 rotationRandom;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Rotating the primary hand bone for the recoil (in local space).")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Time of blending in another recoil when doing automatic fire.")]
		public float blendTime;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("FBBIK effector position offsets for the recoil (in aiming direction space).")]
		[Space(10f)]
		public RecoilOffset[] offsets;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float magnitudeMlp;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float endTime;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion handRotation;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion randomRotation;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float length;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool initiated;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float blendWeight;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float w;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool handRotationsSet;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x170000D7")]
		public bool isFinished
		{
			[Token(Token = "0x6000883")]
			[Address(RVA = "0xC2CA30", Offset = "0xC2CA30", VA = "0xC2CA30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D8")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x6000889")]
			[Address(RVA = "0xC2D950", Offset = "0xC2D950", VA = "0xC2D950")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D9")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x600088A")]
			[Address(RVA = "0xC2D98C", Offset = "0xC2D98C", VA = "0xC2D98C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DA")]
		private Transform primaryHand
		{
			[Token(Token = "0x600088B")]
			[Address(RVA = "0xC2D918", Offset = "0xC2D918", VA = "0xC2D918")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DB")]
		private Transform secondaryHand
		{
			[Token(Token = "0x600088C")]
			[Address(RVA = "0xC2D934", Offset = "0xC2D934", VA = "0xC2D934")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xC2CA54", Offset = "0xC2CA54", VA = "0xC2CA54")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xC2CA80", Offset = "0xC2CA80", VA = "0xC2CA80")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xC2CCA0", Offset = "0xC2CCA0", VA = "0xC2CCA0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xC2D9C8", Offset = "0xC2D9C8", VA = "0xC2D9C8")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xC2DAE0", Offset = "0xC2DAE0", VA = "0xC2DAE0")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0xC2DB30", Offset = "0xC2DB30", VA = "0xC2DB30", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0xC2DD34", Offset = "0xC2DD34", VA = "0xC2DD34")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x20000FC")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Weight of shoulder rotation")]
		public float weight;

		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The greater the offset, the sooner the shoulder will start rotating")]
		public float offset;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xC2DDDC", Offset = "0xC2DDDC", VA = "0xC2DDDC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xC2DEF0", Offset = "0xC2DEF0", VA = "0xC2DEF0")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xC2DFCC", Offset = "0xC2DFCC", VA = "0xC2DFCC")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xC2E3D0", Offset = "0xC2E3D0", VA = "0xC2E3D0")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0xC2E404", Offset = "0xC2E404", VA = "0xC2E404")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0xC2E530", Offset = "0xC2E530", VA = "0xC2E530")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x20000FD")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x20000FE")]
		public class Settings
		{
			[Token(Token = "0x40006A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Multiplies character scale")]
			public float scaleMlp;

			[Token(Token = "0x40006A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Local axis of the HMD facing forward.")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x40006A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Local axis of the HMD facing up.")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x40006AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Local axis of the hand trackers pointing from the wrist towards the palm.")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x40006AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Local axis of the hand trackers pointing in the direction of the surface normal of the back of the hand.")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x40006AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Tooltip("Local axis of the foot trackers towards the player's forward direction.")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x40006AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Local axis of the foot tracker towards the up direction.")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x40006AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Offset of the head bone from the HMD in (headTrackerForward, headTrackerUp) space relative to the head tracker.")]
			[Space(10f)]
			public Vector3 headOffset;

			[Token(Token = "0x40006AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("Offset of the hand bones from the hand trackers in (handTrackerForward, handTrackerUp) space relative to the hand trackers.")]
			public Vector3 handOffset;

			[Token(Token = "0x40006B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Forward offset of the foot bones from the foot trackers.")]
			public float footForwardOffset;

			[Token(Token = "0x40006B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Inward offset of the foot bones from the foot trackers.")]
			public float footInwardOffset;

			[Token(Token = "0x40006B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Used for adjusting foot heading relative to the foot trackers.")]
			[Range(-180f, 180f)]
			public float footHeadingOffset;

			[Token(Token = "0x40006B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x40006B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x60008A8")]
			[Address(RVA = "0xC32600", Offset = "0xC32600", VA = "0xC32600")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000FF")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x2000100")]
			public class Target
			{
				[Token(Token = "0x40006C1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x40006C2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public Vector3 localPosition;

				[Token(Token = "0x40006C3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x60008AA")]
				[Address(RVA = "0xC30284", Offset = "0xC30284", VA = "0xC30284")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x60008AB")]
				[Address(RVA = "0xC30CE4", Offset = "0xC30CE4", VA = "0xC30CE4")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x40006B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x40006B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x40006B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x40006B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x40006B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x40006BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x40006BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x40006BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x40006BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x40006BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 pelvisTargetRight;

			[Token(Token = "0x40006BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x40006C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x60008A9")]
			[Address(RVA = "0xC2F988", Offset = "0xC2F988", VA = "0xC2F988")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0xC2E544", Offset = "0xC2E544", VA = "0xC2E544")]
		public static void RecalibrateScale(VRIK ik, CalibrationData data, Settings settings)
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0xC2E55C", Offset = "0xC2E55C", VA = "0xC2E55C")]
		public static void RecalibrateScale(VRIK ik, CalibrationData data, float scaleMlp)
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xC2E684", Offset = "0xC2E684", VA = "0xC2E684")]
		private static void CalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0xC2E5A4", Offset = "0xC2E5A4", VA = "0xC2E5A4")]
		private static void CalibrateScale(VRIK ik, float scaleMlp = 1f)
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xC2E69C", Offset = "0xC2E69C", VA = "0xC2E69C")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xC2F990", Offset = "0xC2F990", VA = "0xC2F990")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xC30338", Offset = "0xC30338", VA = "0xC30338")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xC30D40", Offset = "0xC30D40", VA = "0xC30D40")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xC31170", Offset = "0xC31170", VA = "0xC31170")]
		public static CalibrationData Calibrate(VRIK ik, Transform centerEyeAnchor, Transform leftHandAnchor, Transform rightHandAnchor, Vector3 centerEyePositionOffset, Vector3 centerEyeRotationOffset, Vector3 handPositionOffset, Vector3 handRotationOffset, float scaleMlp = 1f)
		{
			return null;
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xC313A4", Offset = "0xC313A4", VA = "0xC313A4")]
		public static void CalibrateHead(VRIK ik, Transform centerEyeAnchor, Vector3 anchorPositionOffset, Vector3 anchorRotationOffset)
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xC31B88", Offset = "0xC31B88", VA = "0xC31B88")]
		public static void CalibrateBody(VRIK ik, Transform pelvisTracker, Vector3 trackerPositionOffset, Vector3 trackerRotationOffset)
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0xC31938", Offset = "0xC31938", VA = "0xC31938")]
		public static void CalibrateHands(VRIK ik, Transform leftHandAnchor, Transform rightHandAnchor, Vector3 anchorPositionOffset, Vector3 anchorRotationOffset)
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xC31E3C", Offset = "0xC31E3C", VA = "0xC31E3C")]
		private static void CalibrateHand(Transform hand, Transform forearm, Transform target, Transform anchor, Vector3 positionOffset, Vector3 rotationOffset, bool isLeft)
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xC321D4", Offset = "0xC321D4", VA = "0xC321D4")]
		public static Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xC322B8", Offset = "0xC322B8", VA = "0xC322B8")]
		public static Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000101")]
	public class VRIKLODController : MonoBehaviour
	{
		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer LODRenderer;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LODDistance;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowCulled;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRIK ik;

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xC32794", Offset = "0xC32794", VA = "0xC32794")]
		private void Start()
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xC327EC", Offset = "0xC327EC", VA = "0xC327EC")]
		private void Update()
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xC32814", Offset = "0xC32814", VA = "0xC32814")]
		private int GetLODLevel()
		{
			return default(int);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xC32934", Offset = "0xC32934", VA = "0xC32934")]
		public VRIKLODController()
		{
		}
	}
	[Token(Token = "0x2000102")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x170000DC")]
		public Vector3 pelvisTargetRight
		{
			[Token(Token = "0x60008B0")]
			[Address(RVA = "0xC3294C", Offset = "0xC3294C", VA = "0xC3294C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60008B1")]
			[Address(RVA = "0xC32958", Offset = "0xC32958", VA = "0xC32958")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xC32964", Offset = "0xC32964", VA = "0xC32964")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xC30070", Offset = "0xC30070", VA = "0xC30070")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xC30FD0", Offset = "0xC30FD0", VA = "0xC30FD0")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xC32A80", Offset = "0xC32A80", VA = "0xC32A80")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xC32E48", Offset = "0xC32E48", VA = "0xC32E48")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xC32F74", Offset = "0xC32F74", VA = "0xC32F74")]
		public VRIKRootController()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.ThirdParty.LibTessDotNet
{
	[Token(Token = "0x2000103")]
	internal class Dict<TValue> where TValue : class
	{
		[Token(Token = "0x2000104")]
		public class Node
		{
			[Token(Token = "0x40006CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal TValue _key;

			[Token(Token = "0x40006D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Node _prev;

			[Token(Token = "0x40006D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Node _next;

			[Token(Token = "0x170000DD")]
			public TValue Key
			{
				[Token(Token = "0x60008BE")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DE")]
			public Node Prev
			{
				[Token(Token = "0x60008BF")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DF")]
			public Node Next
			{
				[Token(Token = "0x60008C0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008C1")]
			public Node()
			{
			}
		}

		[Token(Token = "0x2000105")]
		public delegate bool LessOrEqual(TValue lhs, TValue rhs);

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LessOrEqual _leq;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Node _head;

		[Token(Token = "0x60008B8")]
		public Dict(LessOrEqual leq)
		{
		}

		[Token(Token = "0x60008B9")]
		public Node Insert(TValue key)
		{
			return null;
		}

		[Token(Token = "0x60008BA")]
		public Node InsertBefore(Node node, TValue key)
		{
			return null;
		}

		[Token(Token = "0x60008BB")]
		public Node Find(TValue key)
		{
			return null;
		}

		[Token(Token = "0x60008BC")]
		public Node Min()
		{
			return null;
		}

		[Token(Token = "0x60008BD")]
		public void Remove(Node node)
		{
		}
	}
	[Token(Token = "0x2000106")]
	internal static class Geom
	{
		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xC32F7C", Offset = "0xC32F7C", VA = "0xC32F7C")]
		public static bool IsWindingInside(WindingRule rule, int n)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xC33028", Offset = "0xC33028", VA = "0xC33028")]
		public static bool VertCCW(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xC33078", Offset = "0xC33078", VA = "0xC33078")]
		public static bool VertEq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xC330B8", Offset = "0xC330B8", VA = "0xC330B8")]
		public static bool VertLeq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xC33104", Offset = "0xC33104", VA = "0xC33104")]
		public static float EdgeEval(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xC33174", Offset = "0xC33174", VA = "0xC33174")]
		public static float EdgeSign(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xC331D4", Offset = "0xC331D4", VA = "0xC331D4")]
		public static bool TransLeq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xC33220", Offset = "0xC33220", VA = "0xC33220")]
		public static float TransEval(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xC33290", Offset = "0xC33290", VA = "0xC33290")]
		public static float TransSign(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xC332F0", Offset = "0xC332F0", VA = "0xC332F0")]
		public static bool EdgeGoesLeft(MeshUtils.Edge e)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xC33334", Offset = "0xC33334", VA = "0xC33334")]
		public static bool EdgeGoesRight(MeshUtils.Edge e)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xC33358", Offset = "0xC33358", VA = "0xC33358")]
		public static float VertL1dist(MeshUtils.Vertex u, MeshUtils.Vertex v)
		{
			return default(float);
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xC333DC", Offset = "0xC333DC", VA = "0xC333DC")]
		public static void AddWinding(MeshUtils.Edge eDst, MeshUtils.Edge eSrc)
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xC33424", Offset = "0xC33424", VA = "0xC33424")]
		public static float Interpolate(float a, float x, float b, float y)
		{
			return default(float);
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0xC33480", Offset = "0xC33480", VA = "0xC33480")]
		private static void Swap(ref MeshUtils.Vertex a, ref MeshUtils.Vertex b)
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0xC334B4", Offset = "0xC334B4", VA = "0xC334B4")]
		public static void EdgeIntersect(MeshUtils.Vertex o1, MeshUtils.Vertex d1, MeshUtils.Vertex o2, MeshUtils.Vertex d2, MeshUtils.Vertex v)
		{
		}
	}
	[Token(Token = "0x2000107")]
	internal class LTMesh : MeshUtils.Pooled<LTMesh>
	{
		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal MeshUtils.Vertex _vHead;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal MeshUtils.Face _fHead;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal MeshUtils.Edge _eHead;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal MeshUtils.Edge _eHeadSym;

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0xC3392C", Offset = "0xC3392C", VA = "0xC3392C")]
		public LTMesh()
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xC33C48", Offset = "0xC33C48", VA = "0xC33C48", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xC33C90", Offset = "0xC33C90", VA = "0xC33C90", Slot = "5")]
		public override void OnFree()
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xC33D98", Offset = "0xC33D98", VA = "0xC33D98")]
		public MeshUtils.Edge MakeEdge()
		{
			return null;
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xC34144", Offset = "0xC34144", VA = "0xC34144")]
		public void Splice(MeshUtils.Edge eOrg, MeshUtils.Edge eDst)
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xC34408", Offset = "0xC34408", VA = "0xC34408")]
		public void Delete(MeshUtils.Edge eDel)
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xC3460C", Offset = "0xC3460C", VA = "0xC3460C")]
		public MeshUtils.Edge AddEdgeVertex(MeshUtils.Edge eOrg)
		{
			return null;
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0xC346A4", Offset = "0xC346A4", VA = "0xC346A4")]
		public MeshUtils.Edge SplitEdge(MeshUtils.Edge eOrg)
		{
			return null;
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0xC347A0", Offset = "0xC347A0", VA = "0xC347A0")]
		public MeshUtils.Edge Connect(MeshUtils.Edge eOrg, MeshUtils.Edge eDst)
		{
			return null;
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xC34894", Offset = "0xC34894", VA = "0xC34894")]
		public void ZapFace(MeshUtils.Face fZap)
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xC349F0", Offset = "0xC349F0", VA = "0xC349F0")]
		public void MergeConvexFaces(int maxVertsPerFace)
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xC34BB4", Offset = "0xC34BB4", VA = "0xC34BB4")]
		[Conditional("DEBUG")]
		public void Check()
		{
		}
	}
	[Token(Token = "0x2000108")]
	public struct Vec3
	{
		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vec3 Zero;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Z;

		[Token(Token = "0x170000E0")]
		public float this[int index]
		{
			[Token(Token = "0x60008E2")]
			[Address(RVA = "0xC34C4C", Offset = "0xC34C4C", VA = "0xC34C4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008E3")]
			[Address(RVA = "0xC34CB8", Offset = "0xC34CB8", VA = "0xC34CB8")]
			set
			{
			}
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xC34D24", Offset = "0xC34D24", VA = "0xC34D24")]
		public static void Sub(ref Vec3 lhs, ref Vec3 rhs, out Vec3 result)
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xC34D48", Offset = "0xC34D48", VA = "0xC34D48")]
		public static void Neg(ref Vec3 v)
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xC34D64", Offset = "0xC34D64", VA = "0xC34D64")]
		public static void Dot(ref Vec3 u, ref Vec3 v, out float dot)
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xC34D90", Offset = "0xC34D90", VA = "0xC34D90")]
		public static void Normalize(ref Vec3 v)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xC34E2C", Offset = "0xC34E2C", VA = "0xC34E2C")]
		public static int LongAxis(ref Vec3 v)
		{
			return default(int);
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xC34EEC", Offset = "0xC34EEC", VA = "0xC34EEC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000109")]
	internal static class MeshUtils
	{
		[Token(Token = "0x200010A")]
		public abstract class Pooled<T> where T : Pooled<T>, new()
		{
			[Token(Token = "0x40006DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static Stack<T> _stack;

			[Token(Token = "0x60008F3")]
			public abstract void Reset();

			[Token(Token = "0x60008F4")]
			public virtual void OnFree()
			{
			}

			[Token(Token = "0x60008F5")]
			public static T Create()
			{
				return null;
			}

			[Token(Token = "0x60008F6")]
			public void Free()
			{
			}

			[Token(Token = "0x60008F7")]
			protected Pooled()
			{
			}
		}

		[Token(Token = "0x200010B")]
		public class Vertex : Pooled<Vertex>
		{
			[Token(Token = "0x40006DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vertex _prev;

			[Token(Token = "0x40006DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vertex _next;

			[Token(Token = "0x40006DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _anEdge;

			[Token(Token = "0x40006DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Vec3 _coords;

			[Token(Token = "0x40006E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal float _s;

			[Token(Token = "0x40006E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal float _t;

			[Token(Token = "0x40006E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal PQHandle _pqHandle;

			[Token(Token = "0x40006E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal int _n;

			[Token(Token = "0x40006E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal object _data;

			[Token(Token = "0x60008F8")]
			[Address(RVA = "0xC35048", Offset = "0xC35048", VA = "0xC35048", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x60008F9")]
			[Address(RVA = "0xC350F4", Offset = "0xC350F4", VA = "0xC350F4")]
			public Vertex()
			{
			}
		}

		[Token(Token = "0x200010C")]
		public class Face : Pooled<Face>
		{
			[Token(Token = "0x40006E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Face _prev;

			[Token(Token = "0x40006E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Face _next;

			[Token(Token = "0x40006E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _anEdge;

			[Token(Token = "0x40006E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Face _trail;

			[Token(Token = "0x40006E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int _n;

			[Token(Token = "0x40006EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal bool _marked;

			[Token(Token = "0x40006EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
			internal bool _inside;

			[Token(Token = "0x170000E1")]
			internal int VertsCount
			{
				[Token(Token = "0x60008FA")]
				[Address(RVA = "0xC34B64", Offset = "0xC34B64", VA = "0xC34B64")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x60008FB")]
			[Address(RVA = "0xC3513C", Offset = "0xC3513C", VA = "0xC3513C", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x60008FC")]
			[Address(RVA = "0xC35190", Offset = "0xC35190", VA = "0xC35190")]
			public Face()
			{
			}
		}

		[Token(Token = "0x200010D")]
		public struct EdgePair
		{
			[Token(Token = "0x40006EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Edge _e;

			[Token(Token = "0x40006ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Edge _eSym;

			[Token(Token = "0x60008FD")]
			[Address(RVA = "0xC33B78", Offset = "0xC33B78", VA = "0xC33B78")]
			public static EdgePair Create()
			{
				return default(EdgePair);
			}

			[Token(Token = "0x60008FE")]
			[Address(RVA = "0xC351D8", Offset = "0xC351D8", VA = "0xC351D8")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200010E")]
		public class Edge : Pooled<Edge>
		{
			[Token(Token = "0x40006EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal EdgePair _pair;

			[Token(Token = "0x40006EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _next;

			[Token(Token = "0x40006F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Edge _Sym;

			[Token(Token = "0x40006F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Edge _Onext;

			[Token(Token = "0x40006F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Edge _Lnext;

			[Token(Token = "0x40006F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal Vertex _Org;

			[Token(Token = "0x40006F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal Face _Lface;

			[Token(Token = "0x40006F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Tess.ActiveRegion _activeRegion;

			[Token(Token = "0x40006F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal int _winding;

			[Token(Token = "0x170000E2")]
			internal Face _Rface
			{
				[Token(Token = "0x60008FF")]
				[Address(RVA = "0xC34530", Offset = "0xC34530", VA = "0xC34530")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000900")]
				[Address(RVA = "0xC34784", Offset = "0xC34784", VA = "0xC34784")]
				set
				{
				}
			}

			[Token(Token = "0x170000E3")]
			internal Vertex _Dst
			{
				[Token(Token = "0x6000901")]
				[Address(RVA = "0xC33318", Offset = "0xC33318", VA = "0xC33318")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000902")]
				[Address(RVA = "0xC34768", Offset = "0xC34768", VA = "0xC34768")]
				set
				{
				}
			}

			[Token(Token = "0x170000E4")]
			internal Edge _Oprev
			{
				[Token(Token = "0x6000903")]
				[Address(RVA = "0xC3454C", Offset = "0xC3454C", VA = "0xC3454C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000904")]
				[Address(RVA = "0xC35200", Offset = "0xC35200", VA = "0xC35200")]
				set
				{
				}
			}

			[Token(Token = "0x170000E5")]
			internal Edge _Lprev
			{
				[Token(Token = "0x6000905")]
				[Address(RVA = "0xC34B98", Offset = "0xC34B98", VA = "0xC34B98")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000906")]
				[Address(RVA = "0xC3521C", Offset = "0xC3521C", VA = "0xC3521C")]
				set
				{
				}
			}

			[Token(Token = "0x170000E6")]
			internal Edge _Dprev
			{
				[Token(Token = "0x6000907")]
				[Address(RVA = "0xC35238", Offset = "0xC35238", VA = "0xC35238")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000908")]
				[Address(RVA = "0xC35254", Offset = "0xC35254", VA = "0xC35254")]
				set
				{
				}
			}

			[Token(Token = "0x170000E7")]
			internal Edge _Rprev
			{
				[Token(Token = "0x6000909")]
				[Address(RVA = "0xC35270", Offset = "0xC35270", VA = "0xC35270")]
				get
				{
					return null;
				}
				[Token(Token = "0x600090A")]
				[Address(RVA = "0xC3528C", Offset = "0xC3528C", VA = "0xC3528C")]
				set
				{
				}
			}

			[Token(Token = "0x170000E8")]
			internal Edge _Dnext
			{
				[Token(Token = "0x600090B")]
				[Address(RVA = "0xC352A8", Offset = "0xC352A8", VA = "0xC352A8")]
				get
				{
					return null;
				}
				[Token(Token = "0x600090C")]
				[Address(RVA = "0xC352CC", Offset = "0xC352CC", VA = "0xC352CC")]
				set
				{
				}
			}

			[Token(Token = "0x170000E9")]
			internal Edge _Rnext
			{
				[Token(Token = "0x600090D")]
				[Address(RVA = "0xC352F0", Offset = "0xC352F0", VA = "0xC352F0")]
				get
				{
					return null;
				}
				[Token(Token = "0x600090E")]
				[Address(RVA = "0xC35314", Offset = "0xC35314", VA = "0xC35314")]
				set
				{
				}
			}

			[Token(Token = "0x600090F")]
			[Address(RVA = "0xC34FB4", Offset = "0xC34FB4", VA = "0xC34FB4")]
			internal static void EnsureFirst(ref Edge e)
			{
			}

			[Token(Token = "0x6000910")]
			[Address(RVA = "0xC35338", Offset = "0xC35338", VA = "0xC35338", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x6000911")]
			[Address(RVA = "0xC353D8", Offset = "0xC353D8", VA = "0xC353D8")]
			public Edge()
			{
			}
		}

		[Token(Token = "0x40006DA")]
		public const int Undef = -1;

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xC33DE8", Offset = "0xC33DE8", VA = "0xC33DE8")]
		public static Edge MakeEdge(Edge eNext)
		{
			return null;
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xC34384", Offset = "0xC34384", VA = "0xC34384")]
		public static void Splice(Edge a, Edge b)
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xC33F5C", Offset = "0xC33F5C", VA = "0xC33F5C")]
		public static void MakeVertex(Edge eOrig, Vertex vNext)
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xC34040", Offset = "0xC34040", VA = "0xC34040")]
		public static void MakeFace(Edge eOrig, Face fNext)
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xC34568", Offset = "0xC34568", VA = "0xC34568")]
		public static void KillEdge(Edge eDel)
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xC3421C", Offset = "0xC3421C", VA = "0xC3421C")]
		public static void KillVertex(Vertex vDel, Vertex newOrg)
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xC342D0", Offset = "0xC342D0", VA = "0xC342D0")]
		public static void KillFace(Face fDel, Face newLFace)
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xC34FE8", Offset = "0xC34FE8", VA = "0xC34FE8")]
		public static float FaceArea(Face f)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200010F")]
	internal struct PQHandle
	{
		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int Invalid;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int _handle;
	}
	[Token(Token = "0x2000110")]
	internal class PriorityHeap<TValue> where TValue : class
	{
		[Token(Token = "0x2000111")]
		public delegate bool LessOrEqual(TValue lhs, TValue rhs);

		[Token(Token = "0x2000112")]
		protected class HandleElem
		{
			[Token(Token = "0x4000700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal TValue _key;

			[Token(Token = "0x4000701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int _node;

			[Token(Token = "0x6000920")]
			public HandleElem()
			{
			}
		}

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LessOrEqual _leq;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] _nodes;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private HandleElem[] _handles;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _size;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _max;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _freeList;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _initialized;

		[Token(Token = "0x170000EA")]
		public bool Empty
		{
			[Token(Token = "0x6000913")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000914")]
		public PriorityHeap(int initialSize, LessOrEqual leq)
		{
		}

		[Token(Token = "0x6000915")]
		private void FloatDown(int curr)
		{
		}

		[Token(Token = "0x6000916")]
		private void FloatUp(int curr)
		{
		}

		[Token(Token = "0x6000917")]
		public void Init()
		{
		}

		[Token(Token = "0x6000918")]
		public PQHandle Insert(TValue value)
		{
			return default(PQHandle);
		}

		[Token(Token = "0x6000919")]
		public TValue ExtractMin()
		{
			return null;
		}

		[Token(Token = "0x600091A")]
		public TValue Minimum()
		{
			return null;
		}

		[Token(Token = "0x600091B")]
		public void Remove(PQHandle handle)
		{
		}
	}
	[Token(Token = "0x2000113")]
	internal class PriorityQueue<TValue> where TValue : class
	{
		[Token(Token = "0x2000114")]
		private class StackItem
		{
			[Token(Token = "0x4000709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int p;

			[Token(Token = "0x400070A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int r;

			[Token(Token = "0x6000929")]
			public StackItem()
			{
			}
		}

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PriorityHeap<TValue>.LessOrEqual _leq;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PriorityHeap<TValue> _heap;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private TValue[] _keys;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] _order;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _size;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _max;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _initialized;

		[Token(Token = "0x170000EB")]
		public bool Empty
		{
			[Token(Token = "0x6000921")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000922")]
		public PriorityQueue(int initialSize, PriorityHeap<TValue>.LessOrEqual leq)
		{
		}

		[Token(Token = "0x6000923")]
		private static void Swap(ref int a, ref int b)
		{
		}

		[Token(Token = "0x6000924")]
		public void Init()
		{
		}

		[Token(Token = "0x6000925")]
		public PQHandle Insert(TValue value)
		{
			return default(PQHandle);
		}

		[Token(Token = "0x6000926")]
		public TValue ExtractMin()
		{
			return null;
		}

		[Token(Token = "0x6000927")]
		public TValue Minimum()
		{
			return null;
		}

		[Token(Token = "0x6000928")]
		public void Remove(PQHandle handle)
		{
		}
	}
	[Token(Token = "0x2000115")]
	public class Tess
	{
		[Token(Token = "0x2000116")]
		internal class ActiveRegion
		{
			[Token(Token = "0x4000721")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MeshUtils.Edge _eUp;

			[Token(Token = "0x4000722")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Dict<ActiveRegion>.Node _nodeUp;

			[Token(Token = "0x4000723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int _windingNumber;

			[Token(Token = "0x4000724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool _inside;

			[Token(Token = "0x4000725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			internal bool _sentinel;

			[Token(Token = "0x4000726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
			internal bool _dirty;

			[Token(Token = "0x4000727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
			internal bool _fixUpperEdge;

			[Token(Token = "0x600095F")]
			[Address(RVA = "0xC391BC", Offset = "0xC391BC", VA = "0xC391BC")]
			public ActiveRegion()
			{
			}
		}

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LTMesh _mesh;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vec3 _normal;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vec3 _sUnit;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vec3 _tUnit;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _bminX;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _bminY;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _bmaxX;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _bmaxY;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private WindingRule _windingRule;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dict<ActiveRegion> _dict;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PriorityQueue<MeshUtils.Vertex> _pq;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshUtils.Vertex _event;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CombineCallback _combineCallback;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ContourVertex[] _vertices;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _vertexCount;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int[] _elements;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _elementCount;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float SUnitX;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float SUnitY;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float SentinelCoord;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool NoEmptyPolygons;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool UsePooling;

		[Token(Token = "0x170000EC")]
		public Vec3 Normal
		{
			[Token(Token = "0x6000949")]
			[Address(RVA = "0xC377E8", Offset = "0xC377E8", VA = "0xC377E8")]
			get
			{
				return default(Vec3);
			}
			[Token(Token = "0x600094A")]
			[Address(RVA = "0xC377F4", Offset = "0xC377F4", VA = "0xC377F4")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public ContourVertex[] Vertices
		{
			[Token(Token = "0x600094B")]
			[Address(RVA = "0xC37800", Offset = "0xC37800", VA = "0xC37800")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EE")]
		public int VertexCount
		{
			[Token(Token = "0x600094C")]
			[Address(RVA = "0xC37808", Offset = "0xC37808", VA = "0xC37808")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000EF")]
		public int[] Elements
		{
			[Token(Token = "0x600094D")]
			[Address(RVA = "0xC37810", Offset = "0xC37810", VA = "0xC37810")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F0")]
		public int ElementCount
		{
			[Token(Token = "0x600094E")]
			[Address(RVA = "0xC37818", Offset = "0xC37818", VA = "0xC37818")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xC3546C", Offset = "0xC3546C", VA = "0xC3546C")]
		private ActiveRegion RegionBelow(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xC35494", Offset = "0xC35494", VA = "0xC35494")]
		private ActiveRegion RegionAbove(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0xC354BC", Offset = "0xC354BC", VA = "0xC354BC")]
		private bool EdgeLeq(ActiveRegion reg1, ActiveRegion reg2)
		{
			return default(bool);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xC355B8", Offset = "0xC355B8", VA = "0xC355B8")]
		private void DeleteRegion(ActiveRegion reg)
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0xC35628", Offset = "0xC35628", VA = "0xC35628")]
		private void FixUpperEdge(ActiveRegion reg, MeshUtils.Edge newEdge)
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0xC35684", Offset = "0xC35684", VA = "0xC35684")]
		private ActiveRegion TopLeftRegion(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0xC35734", Offset = "0xC35734", VA = "0xC35734")]
		private ActiveRegion TopRightRegion(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xC35788", Offset = "0xC35788", VA = "0xC35788")]
		private ActiveRegion AddRegionBelow(ActiveRegion regAbove, MeshUtils.Edge eNewUp)
		{
			return null;
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xC35868", Offset = "0xC35868", VA = "0xC35868")]
		private void ComputeWinding(ActiveRegion reg)
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xC358BC", Offset = "0xC358BC", VA = "0xC358BC")]
		private void FinishRegion(ActiveRegion reg)
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xC35908", Offset = "0xC35908", VA = "0xC35908")]
		private MeshUtils.Edge FinishLeftRegions(ActiveRegion regFirst, ActiveRegion regLast)
		{
			return null;
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xC35A24", Offset = "0xC35A24", VA = "0xC35A24")]
		private void AddRightEdges(ActiveRegion regUp, MeshUtils.Edge eFirst, MeshUtils.Edge eLast, MeshUtils.Edge eTopLeft, bool cleanUp)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xC35F9C", Offset = "0xC35F9C", VA = "0xC35F9C")]
		private void SpliceMergeVertices(MeshUtils.Edge e1, MeshUtils.Edge e2)
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xC35FB4", Offset = "0xC35FB4", VA = "0xC35FB4")]
		private void VertexWeights(MeshUtils.Vertex isect, MeshUtils.Vertex org, MeshUtils.Vertex dst, out float w0, out float w1)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xC360A4", Offset = "0xC360A4", VA = "0xC360A4")]
		private void GetIntersectData(MeshUtils.Vertex isect, MeshUtils.Vertex orgUp, MeshUtils.Vertex dstUp, MeshUtils.Vertex orgLo, MeshUtils.Vertex dstLo)
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xC35BE0", Offset = "0xC35BE0", VA = "0xC35BE0")]
		private bool CheckForRightSplice(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xC3636C", Offset = "0xC3636C", VA = "0xC3636C")]
		private bool CheckForLeftSplice(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xC364D0", Offset = "0xC364D0", VA = "0xC364D0")]
		private bool CheckForIntersect(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xC35D6C", Offset = "0xC35D6C", VA = "0xC35D6C")]
		private void WalkDirtyRegions(ActiveRegion regUp)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xC36A88", Offset = "0xC36A88", VA = "0xC36A88")]
		private void ConnectRightVertex(ActiveRegion regUp, MeshUtils.Edge eBottomLeft)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xC36C84", Offset = "0xC36C84", VA = "0xC36C84")]
		private void ConnectLeftDegenerate(ActiveRegion regUp, MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xC36E48", Offset = "0xC36E48", VA = "0xC36E48")]
		private void ConnectLeftVertex(MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xC36D7C", Offset = "0xC36D7C", VA = "0xC36D7C")]
		private void SweepEvent(MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xC3706C", Offset = "0xC3706C", VA = "0xC3706C")]
		private void AddSentinel(float smin, float smax, float t)
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xC37188", Offset = "0xC37188", VA = "0xC37188")]
		private void InitEdgeDict()
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xC37278", Offset = "0xC37278", VA = "0xC37278")]
		private void DoneEdgeDict()
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xC37300", Offset = "0xC37300", VA = "0xC37300")]
		private void RemoveDegenerateEdges()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xC37438", Offset = "0xC37438", VA = "0xC37438")]
		private void InitPriorityQ()
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xC37638", Offset = "0xC37638", VA = "0xC37638")]
		private void DonePriorityQ()
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xC37644", Offset = "0xC37644", VA = "0xC37644")]
		private void RemoveDegenerateFaces()
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xC376D0", Offset = "0xC376D0", VA = "0xC376D0")]
		protected void ComputeInterior()
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xC37820", Offset = "0xC37820", VA = "0xC37820")]
		public Tess()
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xC378EC", Offset = "0xC378EC", VA = "0xC378EC")]
		private void ComputeNormal(ref Vec3 norm)
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xC37FD4", Offset = "0xC37FD4", VA = "0xC37FD4")]
		private void CheckOrientation()
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xC380D0", Offset = "0xC380D0", VA = "0xC380D0")]
		private void ProjectPolygon()
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xC383A8", Offset = "0xC383A8", VA = "0xC383A8")]
		private void TessellateMonoRegion(MeshUtils.Face face)
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xC38588", Offset = "0xC38588", VA = "0xC38588")]
		private void TessellateInterior()
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xC385E8", Offset = "0xC385E8", VA = "0xC385E8")]
		private void DiscardExterior()
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xC38644", Offset = "0xC38644", VA = "0xC38644")]
		private void SetWindingNumber(int value, bool keepOnlyBoundary)
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xC386F0", Offset = "0xC386F0", VA = "0xC386F0")]
		private int GetNeighbourFace(MeshUtils.Edge edge)
		{
			return default(int);
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xC38728", Offset = "0xC38728", VA = "0xC38728")]
		private void OutputPolymesh(ElementType elementType, int polySize)
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xC38B70", Offset = "0xC38B70", VA = "0xC38B70")]
		private void OutputContours()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xC38DC8", Offset = "0xC38DC8", VA = "0xC38DC8")]
		private float SignedArea(ContourVertex[] vertices)
		{
			return default(float);
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xC38E5C", Offset = "0xC38E5C", VA = "0xC38E5C")]
		public void AddContour(ContourVertex[] vertices)
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xC38E64", Offset = "0xC38E64", VA = "0xC38E64")]
		public void AddContour(ContourVertex[] vertices, ContourOrientation forceOrientation)
		{
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xC39050", Offset = "0xC39050", VA = "0xC39050")]
		public void Tessellate(WindingRule windingRule, ElementType elementType, int polySize)
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xC39058", Offset = "0xC39058", VA = "0xC39058")]
		public void Tessellate(WindingRule windingRule, ElementType elementType, int polySize, CombineCallback combineCallback)
		{
		}
	}
	[Token(Token = "0x2000117")]
	public enum WindingRule
	{
		[Token(Token = "0x4000729")]
		EvenOdd,
		[Token(Token = "0x400072A")]
		NonZero,
		[Token(Token = "0x400072B")]
		Positive,
		[Token(Token = "0x400072C")]
		Negative,
		[Token(Token = "0x400072D")]
		AbsGeqTwo
	}
	[Token(Token = "0x2000118")]
	public enum ElementType
	{
		[Token(Token = "0x400072F")]
		Polygons,
		[Token(Token = "0x4000730")]
		ConnectedPolygons,
		[Token(Token = "0x4000731")]
		BoundaryContours
	}
	[Token(Token = "0x2000119")]
	public enum ContourOrientation
	{
		[Token(Token = "0x4000733")]
		Original,
		[Token(Token = "0x4000734")]
		Clockwise,
		[Token(Token = "0x4000735")]
		CounterClockwise
	}
	[Token(Token = "0x200011A")]
	public struct ContourVertex
	{
		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vec3 Position;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public object Data;

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xC391C4", Offset = "0xC391C4", VA = "0xC391C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200011B")]
	public delegate object CombineCallback(Vec3 position, object[] data, float[] weights);
	[Token(Token = "0x200011C")]
	public static class LibTessVector3Extension
	{
		[Token(Token = "0x6000965")]
		[Address(RVA = "0xC393EC", Offset = "0xC393EC", VA = "0xC393EC")]
		public static Vec3 Vec3(this Vector3 v)
		{
			return default(Vec3);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xC393F0", Offset = "0xC393F0", VA = "0xC393F0")]
		public static ContourVertex ContourVertex(this Vector3 v)
		{
			return default(ContourVertex);
		}
	}
	[Token(Token = "0x200011D")]
	public static class LibTessV3Extension
	{
		[Token(Token = "0x6000967")]
		[Address(RVA = "0xC39404", Offset = "0xC39404", VA = "0xC39404")]
		public static Vector3 Vector3(this Vec3 v)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200011E")]
	public static class UnityLibTessUtility
	{
		[Token(Token = "0x6000968")]
		[Address(RVA = "0xC39408", Offset = "0xC39408", VA = "0xC39408")]
		public static ContourVertex[] ToContourVertex(Vector3[] v, bool zeroZ = false)
		{
			return null;
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xC394C4", Offset = "0xC394C4", VA = "0xC394C4")]
		public static Vector3[] FromContourVertex(ContourVertex[] v)
		{
			return null;
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xC39534", Offset = "0xC39534", VA = "0xC39534")]
		public static void SetFromContourVertex(ref Vector3[] v3Array, ref ContourVertex[] cvArray)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xC395F8", Offset = "0xC395F8", VA = "0xC395F8")]
		public static void SetToContourVertex(ref ContourVertex[] cvArray, ref Vector3[] v3Array)
		{
		}
	}
}
namespace Ilumisoft.VisualStateMachine
{
	[Serializable]
	[Token(Token = "0x200011F")]
	public class AnyState : Node
	{
		[Token(Token = "0x600096C")]
		[Address(RVA = "0xC396C4", Offset = "0xC396C4", VA = "0xC396C4")]
		public AnyState()
		{
		}
	}
	[Token(Token = "0x2000120")]
	[DefaultExecutionOrder(-1)]
	[DisallowMultipleComponent]
	public class StateMachine : MonoBehaviour
	{
		[Token(Token = "0x2000121")]
		[CompilerGenerated]
		private sealed class <TriggerTransitionCoroutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400073A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400073B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400073C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StateMachine <>4__this;

			[Token(Token = "0x400073D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transition transition;

			[Token(Token = "0x170000F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000987")]
				[Address(RVA = "0xC3B0F8", Offset = "0xC3B0F8", VA = "0xC3B0F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000989")]
				[Address(RVA = "0xC3B140", Offset = "0xC3B140", VA = "0xC3B140", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000984")]
			[Address(RVA = "0xC3A724", Offset = "0xC3A724", VA = "0xC3A724")]
			[DebuggerHidden]
			public <TriggerTransitionCoroutine>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000985")]
			[Address(RVA = "0xC3B000", Offset = "0xC3B000", VA = "0xC3B000", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000986")]
			[Address(RVA = "0xC3B004", Offset = "0xC3B004", VA = "0xC3B004", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000988")]
			[Address(RVA = "0xC3B100", Offset = "0xC3B100", VA = "0xC3B100", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000122")]
		[CompilerGenerated]
		private sealed class <WaitForTransitionDuration>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400073E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400073F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transition transition;

			[Token(Token = "0x170000F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600098D")]
				[Address(RVA = "0xC3B258", Offset = "0xC3B258", VA = "0xC3B258", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600098F")]
				[Address(RVA = "0xC3B2A0", Offset = "0xC3B2A0", VA = "0xC3B2A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600098A")]
			[Address(RVA = "0xC3A7C0", Offset = "0xC3A7C0", VA = "0xC3A7C0")]
			[DebuggerHidden]
			public <WaitForTransitionDuration>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600098B")]
			[Address(RVA = "0xC3B148", Offset = "0xC3B148", VA = "0xC3B148", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600098C")]
			[Address(RVA = "0xC3B14C", Offset = "0xC3B14C", VA = "0xC3B14C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600098E")]
			[Address(RVA = "0xC3B260", Offset = "0xC3B260", VA = "0xC3B260", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Graph graph;

		[Token(Token = "0x170000F1")]
		public string CurrentState
		{
			[Token(Token = "0x600096D")]
			[Address(RVA = "0xC39778", Offset = "0xC39778", VA = "0xC39778")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600096E")]
			[Address(RVA = "0xC39780", Offset = "0xC39780", VA = "0xC39780")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		public Graph Graph
		{
			[Token(Token = "0x600096F")]
			[Address(RVA = "0xC39788", Offset = "0xC39788", VA = "0xC39788")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F3")]
		public string EntryState
		{
			[Token(Token = "0x6000970")]
			[Address(RVA = "0xC39790", Offset = "0xC39790", VA = "0xC39790")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xC397AC", Offset = "0xC397AC", VA = "0xC397AC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xC39934", Offset = "0xC39934", VA = "0xC39934")]
		private void Update()
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xC39818", Offset = "0xC39818", VA = "0xC39818")]
		public void Restart()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xC39A08", Offset = "0xC39A08", VA = "0xC39A08")]
		public bool TryTriggerByLabel(string transitionLabel)
		{
			return default(bool);
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xC3A28C", Offset = "0xC3A28C", VA = "0xC3A28C")]
		public void TriggerByLabel(string transitionLabel)
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0xC3A34C", Offset = "0xC3A34C", VA = "0xC3A34C")]
		public bool TryTrigger(string transitionID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xC3A4FC", Offset = "0xC3A4FC", VA = "0xC3A4FC")]
		public void Trigger(string transitionID)
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0xC3A0D0", Offset = "0xC3A0D0", VA = "0xC3A0D0")]
		public void Trigger(Transition transition)
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xC3A694", Offset = "0xC3A694", VA = "0xC3A694")]
		[IteratorStateMachine(typeof(<TriggerTransitionCoroutine>d__17))]
		private IEnumerator TriggerTransitionCoroutine(Transition transition)
		{
			return null;
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xC3A74C", Offset = "0xC3A74C", VA = "0xC3A74C")]
		[IteratorStateMachine(typeof(<WaitForTransitionDuration>d__18))]
		private IEnumerator WaitForTransitionDuration(Transition transition)
		{
			return null;
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xC3A7E8", Offset = "0xC3A7E8", VA = "0xC3A7E8")]
		private bool TryExitTransitionOriginState(Transition transition)
		{
			return default(bool);
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xC3AA60", Offset = "0xC3AA60", VA = "0xC3AA60")]
		private bool TryEnterTransitionTargetState(Transition transition)
		{
			return default(bool);
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xC3AB40", Offset = "0xC3AB40", VA = "0xC3AB40")]
		[Obsolete("This method is obsolete. Call Graph.HasState instead.")]
		public bool HasState(string id)
		{
			return default(bool);
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xC3AB80", Offset = "0xC3AB80", VA = "0xC3AB80")]
		[Obsolete("This method is obsolete. Call Graph.HasTransition instead.")]
		public bool HasTransition(string id)
		{
			return default(bool);
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xC3ABA0", Offset = "0xC3ABA0", VA = "0xC3ABA0")]
		[Obsolete("This method is obsolete. Call Graph.GetState instead.")]
		public UnityEvent GetOnEnterStateEvent(string stateName)
		{
			return null;
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xC3AC60", Offset = "0xC3AC60", VA = "0xC3AC60")]
		[Obsolete("This method is obsolete. Call Graph.GetState instead.")]
		public UnityEvent GetOnExitStateEvent(string stateName)
		{
			return null;
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xC3AD20", Offset = "0xC3AD20", VA = "0xC3AD20")]
		[Obsolete("This method is obsolete. Call Graph.GetTransition instead.")]
		public UnityEvent GetOnEnterTransitionEvent(string transitionName)
		{
			return null;
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xC3AD5C", Offset = "0xC3AD5C", VA = "0xC3AD5C")]
		[Obsolete("This method is obsolete. Call Graph.GetTransition instead.")]
		public UnityEvent GetOnExitTransitionEvent(string transitionName)
		{
			return null;
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xC3AD98", Offset = "0xC3AD98", VA = "0xC3AD98")]
		public StateMachine()
		{
		}
	}
	[Token(Token = "0x2000123")]
	public class TransitionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000124")]
		public enum TriggerType
		{
			[Token(Token = "0x4000748")]
			ID,
			[Token(Token = "0x4000749")]
			Label
		}

		[Token(Token = "0x2000125")]
		[CompilerGenerated]
		private sealed class <DelayedTriggerCoroutine>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400074A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400074B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400074C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TransitionTrigger <>4__this;

			[Token(Token = "0x400074D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float delay;

			[Token(Token = "0x170000FC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009A1")]
				[Address(RVA = "0xC3B7F0", Offset = "0xC3B7F0", VA = "0xC3B7F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009A3")]
				[Address(RVA = "0xC3B838", Offset = "0xC3B838", VA = "0xC3B838", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600099E")]
			[Address(RVA = "0xC3B4B8", Offset = "0xC3B4B8", VA = "0xC3B4B8")]
			[DebuggerHidden]
			public <DelayedTriggerCoroutine>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x600099F")]
			[Address(RVA = "0xC3B6D0", Offset = "0xC3B6D0", VA = "0xC3B6D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009A0")]
			[Address(RVA = "0xC3B6D4", Offset = "0xC3B6D4", VA = "0xC3B6D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009A2")]
			[Address(RVA = "0xC3B7F8", Offset = "0xC3B7F8", VA = "0xC3B7F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private StateMachine stateMachine;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TriggerType type;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string key;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool executeOnStart;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private TimeMode timeMode;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float delay;

		[Token(Token = "0x170000F8")]
		public StateMachine StateMachine
		{
			[Token(Token = "0x6000990")]
			[Address(RVA = "0xC3B2A8", Offset = "0xC3B2A8", VA = "0xC3B2A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F9")]
		private bool IsStateMachineSet
		{
			[Token(Token = "0x6000991")]
			[Address(RVA = "0xC3B2B0", Offset = "0xC3B2B0", VA = "0xC3B2B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FA")]
		public TimeMode TimeMode
		{
			[Token(Token = "0x6000992")]
			[Address(RVA = "0xC3B310", Offset = "0xC3B310", VA = "0xC3B310")]
			get
			{
				return default(TimeMode);
			}
			[Token(Token = "0x6000993")]
			[Address(RVA = "0xC3B318", Offset = "0xC3B318", VA = "0xC3B318")]
			set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public float Delay
		{
			[Token(Token = "0x6000994")]
			[Address(RVA = "0xC3B320", Offset = "0xC3B320", VA = "0xC3B320")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000995")]
			[Address(RVA = "0xC3B328", Offset = "0xC3B328", VA = "0xC3B328")]
			set
			{
			}
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xC3B330", Offset = "0xC3B330", VA = "0xC3B330")]
		private void Start()
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xC3B340", Offset = "0xC3B340", VA = "0xC3B340")]
		public void Execute()
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xC3B3E4", Offset = "0xC3B3E4", VA = "0xC3B3E4")]
		private void DelayedTriggerTransition(float delay)
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xC3B434", Offset = "0xC3B434", VA = "0xC3B434")]
		[IteratorStateMachine(typeof(<DelayedTriggerCoroutine>d__20))]
		private IEnumerator DelayedTriggerCoroutine(float delay)
		{
			return null;
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xC3B420", Offset = "0xC3B420", VA = "0xC3B420")]
		private void TriggerTransition()
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xC3B4E0", Offset = "0xC3B4E0", VA = "0xC3B4E0")]
		private void TriggerTransitionByID(string id)
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xC3B5A8", Offset = "0xC3B5A8", VA = "0xC3B5A8")]
		private void TriggerTransitionByLabel(string label)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xC3B670", Offset = "0xC3B670", VA = "0xC3B670")]
		public TransitionTrigger()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000126")]
	public class Graph : ISerializationCallbackReceiver
	{
		[Token(Token = "0x2000127")]
		public struct SerializedData
		{
			[Token(Token = "0x17000103")]
			public List<State> States
			{
				[Token(Token = "0x60009BD")]
				[Address(RVA = "0xC3C968", Offset = "0xC3C968", VA = "0xC3C968")]
				[CompilerGenerated]
				readonly get
				{
					return null;
				}
				[Token(Token = "0x60009BE")]
				[Address(RVA = "0xC3C970", Offset = "0xC3C970", VA = "0xC3C970")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000104")]
			public List<AnyState> AnyStates
			{
				[Token(Token = "0x60009BF")]
				[Address(RVA = "0xC3C978", Offset = "0xC3C978", VA = "0xC3C978")]
				[CompilerGenerated]
				readonly get
				{
					return null;
				}
				[Token(Token = "0x60009C0")]
				[Address(RVA = "0xC3C980", Offset = "0xC3C980", VA = "0xC3C980")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000105")]
			public List<Transition> Transitions
			{
				[Token(Token = "0x60009C1")]
				[Address(RVA = "0xC3C988", Offset = "0xC3C988", VA = "0xC3C988")]
				[CompilerGenerated]
				readonly get
				{
					return null;
				}
				[Token(Token = "0x60009C2")]
				[Address(RVA = "0xC3C990", Offset = "0xC3C990", VA = "0xC3C990")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60009BC")]
			[Address(RVA = "0xC3C91C", Offset = "0xC3C91C", VA = "0xC3C91C")]
			public SerializedData(Graph graph)
			{
			}
		}

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<State> states;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<AnyState> anyStates;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<Transition> transitions;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Preferences preferences;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string entryState;

		[NonSerialized]
		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GraphCache cache;

		[Token(Token = "0x170000FE")]
		public string EntryStateID
		{
			[Token(Token = "0x60009A4")]
			[Address(RVA = "0xC3B840", Offset = "0xC3B840", VA = "0xC3B840")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009A5")]
			[Address(RVA = "0xC3B848", Offset = "0xC3B848", VA = "0xC3B848")]
			set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public IList<Transition> Transitions
		{
			[Token(Token = "0x60009A6")]
			[Address(RVA = "0xC3A0B4", Offset = "0xC3A0B4", VA = "0xC3A0B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		public IList<Node> Nodes
		{
			[Token(Token = "0x60009A7")]
			[Address(RVA = "0xC3B850", Offset = "0xC3B850", VA = "0xC3B850")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		public GraphCache Cache
		{
			[Token(Token = "0x60009A8")]
			[Address(RVA = "0xC3B86C", Offset = "0xC3B86C", VA = "0xC3B86C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000102")]
		public Preferences Preferences
		{
			[Token(Token = "0x60009A9")]
			[Address(RVA = "0xC3B874", Offset = "0xC3B874", VA = "0xC3B874")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xC3B87C", Offset = "0xC3B87C", VA = "0xC3B87C", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xC3BDA8", Offset = "0xC3BDA8", VA = "0xC3BDA8", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xC3A48C", Offset = "0xC3A48C", VA = "0xC3A48C")]
		public bool TryGetTransition(string id, out Transition transition)
		{
			return default(bool);
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xC3BE34", Offset = "0xC3BE34", VA = "0xC3BE34")]
		public Transition GetTransition(string id)
		{
			return null;
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xC3BE88", Offset = "0xC3BE88", VA = "0xC3BE88")]
		public Node GetNode(string id)
		{
			return null;
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xC3BEDC", Offset = "0xC3BEDC", VA = "0xC3BEDC")]
		public State GetState(string id)
		{
			return null;
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xC399F0", Offset = "0xC399F0", VA = "0xC399F0")]
		public bool TryGetNode(string id, out Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xC399D8", Offset = "0xC399D8", VA = "0xC399D8")]
		public bool TryGetState(string id, out State state)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xC3C0F4", Offset = "0xC3C0F4", VA = "0xC3C0F4")]
		public bool TryAddNode(Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xC3C224", Offset = "0xC3C224", VA = "0xC3C224")]
		public bool TryRemoveNode(Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xC3C2FC", Offset = "0xC3C2FC", VA = "0xC3C2FC")]
		public bool TryAddTransition(Transition transition)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xC3C42C", Offset = "0xC3C42C", VA = "0xC3C42C")]
		public bool TryRemoveTransition(Transition transition)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xC3A67C", Offset = "0xC3A67C", VA = "0xC3A67C")]
		public bool HasTransition(string id)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xC3C590", Offset = "0xC3C590", VA = "0xC3C590")]
		public bool HasNode(string id)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xC3AB58", Offset = "0xC3AB58", VA = "0xC3AB58")]
		public bool HasState(string id)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xC3C61C", Offset = "0xC3C61C", VA = "0xC3C61C")]
		public void Import(Ilumisoft.VisualStateMachine.Obsolete.Graph container)
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xC3C640", Offset = "0xC3C640", VA = "0xC3C640")]
		public void Import(Ilumisoft.VisualStateMachine.Obsolete.Preferences preferences)
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xC3AE34", Offset = "0xC3AE34", VA = "0xC3AE34")]
		public Graph()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000128")]
	public class Node
	{
		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Width;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int Height;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Vector2 position;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[FormerlySerializedAs("name")]
		[SerializeField]
		private string id;

		[Token(Token = "0x17000106")]
		public string ID
		{
			[Token(Token = "0x60009C3")]
			[Address(RVA = "0xC3C998", Offset = "0xC3C998", VA = "0xC3C998")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009C4")]
			[Address(RVA = "0xC3C9A0", Offset = "0xC3C9A0", VA = "0xC3C9A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public Rect Rect
		{
			[Token(Token = "0x60009C5")]
			[Address(RVA = "0xC3C9A8", Offset = "0xC3C9A8", VA = "0xC3C9A8")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x60009C6")]
			[Address(RVA = "0xC3CAA0", Offset = "0xC3CAA0", VA = "0xC3CAA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public Vector2 Position
		{
			[Token(Token = "0x60009C7")]
			[Address(RVA = "0xC3CAD0", Offset = "0xC3CAD0", VA = "0xC3CAD0")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x60009C8")]
			[Address(RVA = "0xC3CAD8", Offset = "0xC3CAD8", VA = "0xC3CAD8")]
			set
			{
			}
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xC39718", Offset = "0xC39718", VA = "0xC39718")]
		public Node()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000129")]
	public class DragSettings
	{
		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Vector2 dragOffset;

		[Token(Token = "0x17000109")]
		public Vector2 DragOffset
		{
			[Token(Token = "0x60009CB")]
			[Address(RVA = "0xC3CB30", Offset = "0xC3CB30", VA = "0xC3CB30")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x60009CC")]
			[Address(RVA = "0xC3CB38", Offset = "0xC3CB38", VA = "0xC3CB38")]
			set
			{
			}
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xC3CB40", Offset = "0xC3CB40", VA = "0xC3CB40")]
		public DragSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200012A")]
	public class GridSettings
	{
		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private bool isEnabled;

		[Token(Token = "0x1700010A")]
		public bool IsEnabled
		{
			[Token(Token = "0x60009CE")]
			[Address(RVA = "0xC3CB98", Offset = "0xC3CB98", VA = "0xC3CB98")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009CF")]
			[Address(RVA = "0xC3CBA0", Offset = "0xC3CBA0", VA = "0xC3CBA0")]
			set
			{
			}
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xC3CBAC", Offset = "0xC3CBAC", VA = "0xC3CBAC")]
		public GridSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200012B")]
	public class LabelSettings
	{
		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private bool isEnabled;

		[Token(Token = "0x1700010B")]
		public bool IsEnabled
		{
			[Token(Token = "0x60009D1")]
			[Address(RVA = "0xC3CBBC", Offset = "0xC3CBBC", VA = "0xC3CBBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009D2")]
			[Address(RVA = "0xC3CBC4", Offset = "0xC3CBC4", VA = "0xC3CBC4")]
			set
			{
			}
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xC3CBD0", Offset = "0xC3CBD0", VA = "0xC3CBD0")]
		public LabelSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200012C")]
	public class Preferences
	{
		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private ZoomSettings zoomSettings;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private DragSettings dragSettings;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GridSettings gridSettings;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private LabelSettings labelSettings;

		[Token(Token = "0x1700010C")]
		public ZoomSettings ZoomSettings
		{
			[Token(Token = "0x60009D4")]
			[Address(RVA = "0xC3CBE0", Offset = "0xC3CBE0", VA = "0xC3CBE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009D5")]
			[Address(RVA = "0xC3CBE8", Offset = "0xC3CBE8", VA = "0xC3CBE8")]
			set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		public DragSettings DragSettings
		{
			[Token(Token = "0x60009D6")]
			[Address(RVA = "0xC3CBF0", Offset = "0xC3CBF0", VA = "0xC3CBF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009D7")]
			[Address(RVA = "0xC3CBF8", Offset = "0xC3CBF8", VA = "0xC3CBF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700010E")]
		public GridSettings GridSettings
		{
			[Token(Token = "0x60009D8")]
			[Address(RVA = "0xC3CC00", Offset = "0xC3CC00", VA = "0xC3CC00")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009D9")]
			[Address(RVA = "0xC3CC08", Offset = "0xC3CC08", VA = "0xC3CC08")]
			set
			{
			}
		}

		[Token(Token = "0x1700010F")]
		public LabelSettings LabelSettings
		{
			[Token(Token = "0x60009DA")]
			[Address(RVA = "0xC3CC10", Offset = "0xC3CC10", VA = "0xC3CC10")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009DB")]
			[Address(RVA = "0xC3CC18", Offset = "0xC3CC18", VA = "0xC3CC18")]
			set
			{
			}
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xC3C664", Offset = "0xC3C664", VA = "0xC3C664")]
		public Preferences()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200012D")]
	public class ZoomSettings
	{
		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly float MinZoomFactor;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly float MaxZoomFactor;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float zoomFactor;

		[Token(Token = "0x17000110")]
		public float ZoomFactor
		{
			[Token(Token = "0x60009DD")]
			[Address(RVA = "0xC3CC30", Offset = "0xC3CC30", VA = "0xC3CC30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009DE")]
			[Address(RVA = "0xC3CC38", Offset = "0xC3CC38", VA = "0xC3CC38")]
			set
			{
			}
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xC3CC20", Offset = "0xC3CC20", VA = "0xC3CC20")]
		public ZoomSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200012E")]
	public class State : Node
	{
		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private UnityEvent onEnterState;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEvent onExitState;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEvent onUpdateState;

		[Token(Token = "0x17000111")]
		public UnityEvent OnEnterState
		{
			[Token(Token = "0x60009E1")]
			[Address(RVA = "0xC3CD04", Offset = "0xC3CD04", VA = "0xC3CD04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		public UnityEvent OnExitState
		{
			[Token(Token = "0x60009E2")]
			[Address(RVA = "0xC3CD0C", Offset = "0xC3CD0C", VA = "0xC3CD0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000113")]
		public UnityEvent OnUpdateState
		{
			[Token(Token = "0x60009E3")]
			[Address(RVA = "0xC3CD14", Offset = "0xC3CD14", VA = "0xC3CD14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xC3CD1C", Offset = "0xC3CD1C", VA = "0xC3CD1C")]
		public State()
		{
		}
	}
	[Token(Token = "0x200012F")]
	public enum TimeMode
	{
		[Token(Token = "0x4000769")]
		Scaled,
		[Token(Token = "0x400076A")]
		Unscaled
	}
	[Serializable]
	[Token(Token = "0x2000130")]
	public class Transition
	{
		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[FormerlySerializedAs("name")]
		private string id;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string label;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[FormerlySerializedAs("origin")]
		[SerializeField]
		private string originID;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FormerlySerializedAs("target")]
		[SerializeField]
		private string targetID;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEvent onEnterTransition;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEvent onExitTransition;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Min(0f)]
		private float duration;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private TimeMode timeMode;

		[Token(Token = "0x17000114")]
		public TimeMode TimeMode
		{
			[Token(Token = "0x60009E5")]
			[Address(RVA = "0xC3CE00", Offset = "0xC3CE00", VA = "0xC3CE00")]
			get
			{
				return default(TimeMode);
			}
			[Token(Token = "0x60009E6")]
			[Address(RVA = "0xC3CE08", Offset = "0xC3CE08", VA = "0xC3CE08")]
			set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public float Duration
		{
			[Token(Token = "0x60009E7")]
			[Address(RVA = "0xC3CE10", Offset = "0xC3CE10", VA = "0xC3CE10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xC3CE18", Offset = "0xC3CE18", VA = "0xC3CE18")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public string ID
		{
			[Token(Token = "0x60009E9")]
			[Address(RVA = "0xC3CE28", Offset = "0xC3CE28", VA = "0xC3CE28")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009EA")]
			[Address(RVA = "0xC3CE30", Offset = "0xC3CE30", VA = "0xC3CE30")]
			set
			{
			}
		}

		[Token(Token = "0x17000117")]
		public string Label
		{
			[Token(Token = "0x60009EB")]
			[Address(RVA = "0xC3CE38", Offset = "0xC3CE38", VA = "0xC3CE38")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009EC")]
			[Address(RVA = "0xC3CE40", Offset = "0xC3CE40", VA = "0xC3CE40")]
			set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public UnityEvent OnEnterTransition
		{
			[Token(Token = "0x60009ED")]
			[Address(RVA = "0xC3CE48", Offset = "0xC3CE48", VA = "0xC3CE48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000119")]
		public UnityEvent OnExitTransition
		{
			[Token(Token = "0x60009EE")]
			[Address(RVA = "0xC3CE50", Offset = "0xC3CE50", VA = "0xC3CE50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011A")]
		public string OriginID
		{
			[Token(Token = "0x60009EF")]
			[Address(RVA = "0xC3CE58", Offset = "0xC3CE58", VA = "0xC3CE58")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009F0")]
			[Address(RVA = "0xC3CE60", Offset = "0xC3CE60", VA = "0xC3CE60")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public string TargetID
		{
			[Token(Token = "0x60009F1")]
			[Address(RVA = "0xC3CE68", Offset = "0xC3CE68", VA = "0xC3CE68")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009F2")]
			[Address(RVA = "0xC3CE70", Offset = "0xC3CE70", VA = "0xC3CE70")]
			set
			{
			}
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xC3CE78", Offset = "0xC3CE78", VA = "0xC3CE78")]
		public Transition()
		{
		}
	}
}
namespace Ilumisoft.VisualStateMachine.Obsolete
{
	[Token(Token = "0x2000131")]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	[AddComponentMenu("")]
	public class Graph : MonoBehaviour, ISerializationCallbackReceiver
	{
		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string entryState;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<State> states;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<AnyState> anyStates;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<Transition> transitions;

		[Token(Token = "0x1700011C")]
		public string EntryState
		{
			[Token(Token = "0x60009F4")]
			[Address(RVA = "0xC3CF90", Offset = "0xC3CF90", VA = "0xC3CF90")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009F5")]
			[Address(RVA = "0xC3CF98", Offset = "0xC3CF98", VA = "0xC3CF98")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public IList<Node> Nodes
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0xC3CFA0", Offset = "0xC3CFA0", VA = "0xC3CFA0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		public IList<Transition> Transitions
		{
			[Token(Token = "0x60009F7")]
			[Address(RVA = "0xC3CFA8", Offset = "0xC3CFA8", VA = "0xC3CFA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xC3CFB0", Offset = "0xC3CFB0", VA = "0xC3CFB0", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xC3CFD4", Offset = "0xC3CFD4", VA = "0xC3CFD4")]
		private void Start()
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xC3CFFC", Offset = "0xC3CFFC", VA = "0xC3CFFC")]
		private void ExportDataToStateMachineRuntime()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xC3D06C", Offset = "0xC3D06C", VA = "0xC3D06C")]
		public void ExportDataToStateMachine()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xC3D070", Offset = "0xC3D070", VA = "0xC3D070", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xC3D544", Offset = "0xC3D544", VA = "0xC3D544", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xC3D074", Offset = "0xC3D074", VA = "0xC3D074")]
		private void SerializeNodes()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xC3D548", Offset = "0xC3D548", VA = "0xC3D548")]
		private void DeserializeNodes()
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xC3D5FC", Offset = "0xC3D5FC", VA = "0xC3D5FC")]
		private void DeserializeStates()
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xC3D7B8", Offset = "0xC3D7B8", VA = "0xC3D7B8")]
		private void DeserializeAnyStates()
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xC3D974", Offset = "0xC3D974", VA = "0xC3D974")]
		public Graph()
		{
		}
	}
	[Token(Token = "0x2000132")]
	[ExecuteInEditMode]
	[AddComponentMenu("")]
	public class Preferences : MonoBehaviour
	{
		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ZoomSettings zoomSettings;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DragSettings dragSettings;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GridSettings gridSettings;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LabelSettings labelSettings;

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xC3DB20", Offset = "0xC3DB20", VA = "0xC3DB20")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xC3DB24", Offset = "0xC3DB24", VA = "0xC3DB24")]
		private void ExportDataToStateMachine()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xC3DB28", Offset = "0xC3DB28", VA = "0xC3DB28")]
		public Preferences()
		{
		}
	}
}
namespace Ilumisoft.VisualStateMachine.Internal
{
	[Token(Token = "0x2000133")]
	public class GraphCache
	{
		[NonSerialized]
		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Transition> Transitions;

		[NonSerialized]
		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Node> Nodes;

		[Token(Token = "0x1700011F")]
		public Dictionary<string, Node> NodeDictionary
		{
			[Token(Token = "0x6000A06")]
			[Address(RVA = "0xC3DC68", Offset = "0xC3DC68", VA = "0xC3DC68")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000120")]
		public Dictionary<string, Transition> TransitionDictionary
		{
			[Token(Token = "0x6000A07")]
			[Address(RVA = "0xC3DC70", Offset = "0xC3DC70", VA = "0xC3DC70")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xC3B898", Offset = "0xC3B898", VA = "0xC3B898")]
		public void SerializeCache(Graph graph)
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xC3DC78", Offset = "0xC3DC78", VA = "0xC3DC78")]
		public void RebuildDictionary()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xC3BDC4", Offset = "0xC3BDC4", VA = "0xC3BDC4")]
		public void BuildCache(Graph graph)
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xC3E034", Offset = "0xC3E034", VA = "0xC3E034")]
		private void CacheNodes(Graph.SerializedData serializedData)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xC3E39C", Offset = "0xC3E39C", VA = "0xC3E39C")]
		private void CacheTransitions(Graph.SerializedData serializedData)
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xC3DC90", Offset = "0xC3DC90", VA = "0xC3DC90")]
		private void BuildNodeDictionary()
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xC3DE74", Offset = "0xC3DE74", VA = "0xC3DE74")]
		private void BuildTransitionDictionary()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xC3BE64", Offset = "0xC3BE64", VA = "0xC3BE64")]
		public Transition GetTransition(string id)
		{
			return null;
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xC3BEB8", Offset = "0xC3BEB8", VA = "0xC3BEB8")]
		public Node GetNode(string id)
		{
			return null;
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xC3BEF4", Offset = "0xC3BEF4", VA = "0xC3BEF4")]
		public State GetState(string id)
		{
			return null;
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xC3E594", Offset = "0xC3E594", VA = "0xC3E594")]
		public bool TryGetTransition(string id, out Transition transition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xC3BF94", Offset = "0xC3BF94", VA = "0xC3BF94")]
		public bool TryGetNode(string id, out Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xC3BFFC", Offset = "0xC3BFFC", VA = "0xC3BFFC")]
		public bool TryGetState(string id, out State state)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xC3C10C", Offset = "0xC3C10C", VA = "0xC3C10C")]
		public bool TryAddNode(Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xC3C23C", Offset = "0xC3C23C", VA = "0xC3C23C")]
		public bool TryRemoveNode(Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xC3C314", Offset = "0xC3C314", VA = "0xC3C314")]
		public bool TryAddTransition(Transition transition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xC3C444", Offset = "0xC3C444", VA = "0xC3C444")]
		public bool TryRemoveTransition(Transition transition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xC3C538", Offset = "0xC3C538", VA = "0xC3C538")]
		public bool HasTransition(string id)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xC3C5A8", Offset = "0xC3C5A8", VA = "0xC3C5A8")]
		public bool HasNode(string id)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xC3C600", Offset = "0xC3C600", VA = "0xC3C600")]
		public bool HasState(string id)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xC3C7A4", Offset = "0xC3C7A4", VA = "0xC3C7A4")]
		public GraphCache()
		{
		}
	}
}
namespace ES3Types
{
	[Token(Token = "0x2000134")]
	[Preserve]
	public class ES3Type_ES3Prefab : ES3Type
	{
		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xC3E5FC", Offset = "0xC3E5FC", VA = "0xC3E5FC")]
		public ES3Type_ES3Prefab()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xC3E770", Offset = "0xC3E770", VA = "0xC3E770", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A1F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000135")]
	public class ES3Type_ES3PrefabInternal : ES3Type
	{
		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xC3E774", Offset = "0xC3E774", VA = "0xC3E774")]
		public ES3Type_ES3PrefabInternal()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xC3E838", Offset = "0xC3E838", VA = "0xC3E838", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A22")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A23")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000136")]
	public class ES32DArrayType : ES3CollectionType
	{
		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xC3E9BC", Offset = "0xC3E9BC", VA = "0xC3E9BC")]
		public ES32DArrayType(Type type)
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xC3EAAC", Offset = "0xC3EAAC", VA = "0xC3EAAC", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode unityObjectType)
		{
		}

		[Token(Token = "0x6000A27")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xC3ECC8", Offset = "0xC3ECC8", VA = "0xC3ECC8", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A29")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xC3EF1C", Offset = "0xC3EF1C", VA = "0xC3EF1C", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000137")]
	public class ES33DArrayType : ES3CollectionType
	{
		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xC3F200", Offset = "0xC3F200", VA = "0xC3F200")]
		public ES33DArrayType(Type type)
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xC3F204", Offset = "0xC3F204", VA = "0xC3F204", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000A2D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xC3F4B0", Offset = "0xC3F4B0", VA = "0xC3F4B0", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A2F")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xC3F7C4", Offset = "0xC3F7C4", VA = "0xC3F7C4", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000138")]
	[Preserve]
	public class ES3ArrayType : ES3CollectionType
	{
		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xC3FB40", Offset = "0xC3FB40", VA = "0xC3FB40")]
		public ES3ArrayType(Type type)
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xC3FB44", Offset = "0xC3FB44", VA = "0xC3FB44")]
		public ES3ArrayType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xC3FBB4", Offset = "0xC3FBB4", VA = "0xC3FBB4", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xC3FD30", Offset = "0xC3FD30", VA = "0xC3FD30", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A35")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A36")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xC3FF8C", Offset = "0xC3FF8C", VA = "0xC3FF8C", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000139")]
	[Preserve]
	public abstract class ES3CollectionType : ES3Type
	{
		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Type elementType;

		[Token(Token = "0x6000A38")]
		public abstract object Read(ES3Reader reader);

		[Token(Token = "0x6000A39")]
		public abstract void ReadInto(ES3Reader reader, object obj);

		[Token(Token = "0x6000A3A")]
		public abstract void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode);

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xC3E9C0", Offset = "0xC3E9C0", VA = "0xC3E9C0")]
		public ES3CollectionType(Type type)
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xC3FB7C", Offset = "0xC3FB7C", VA = "0xC3FB7C")]
		public ES3CollectionType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xC405D0", Offset = "0xC405D0", VA = "0xC405D0", Slot = "4")]
		[Preserve]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A3E")]
		protected virtual bool ReadICollection<T>(ES3Reader reader, ICollection<T> collection, ES3Type elementType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3F")]
		protected virtual void ReadICollectionInto<T>(ES3Reader reader, ICollection<T> collection, ES3Type elementType)
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xC405E0", Offset = "0xC405E0", VA = "0xC405E0", Slot = "12")]
		[Preserve]
		protected virtual void ReadICollectionInto(ES3Reader reader, ICollection collection, ES3Type elementType)
		{
		}
	}
	[Token(Token = "0x200013A")]
	[Preserve]
	public class ES3DictionaryType : ES3Type
	{
		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Type keyType;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ES3Type valueType;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected ES3Reflection.ES3ReflectedMethod readMethod;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected ES3Reflection.ES3ReflectedMethod readIntoMethod;

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xC40B4C", Offset = "0xC40B4C", VA = "0xC40B4C")]
		public ES3DictionaryType(Type type)
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xC40C70", Offset = "0xC40C70", VA = "0xC40C70")]
		public ES3DictionaryType(Type type, ES3Type keyType, ES3Type valueType)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xC40CCC", Offset = "0xC40CCC", VA = "0xC40CCC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xC40CEC", Offset = "0xC40CEC", VA = "0xC40CEC")]
		public void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000A45")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A46")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xC41134", Offset = "0xC41134", VA = "0xC41134")]
		public object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xC4136C", Offset = "0xC4136C", VA = "0xC4136C")]
		public void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200013B")]
	[Preserve]
	public class ES3HashSetType : ES3CollectionType
	{
		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xC416D4", Offset = "0xC416D4", VA = "0xC416D4")]
		public ES3HashSetType(Type type)
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xC416D8", Offset = "0xC416D8", VA = "0xC416D8", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000A4B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xC41D34", Offset = "0xC41D34", VA = "0xC41D34", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A4D")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xC42004", Offset = "0xC42004", VA = "0xC42004", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200013C")]
	[Preserve]
	public class ES3ListType : ES3CollectionType
	{
		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xC42054", Offset = "0xC42054", VA = "0xC42054")]
		public ES3ListType(Type type)
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xC42058", Offset = "0xC42058", VA = "0xC42058")]
		public ES3ListType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xC42090", Offset = "0xC42090", VA = "0xC42090", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000A52")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A53")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xC424C0", Offset = "0xC424C0", VA = "0xC424C0", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xC426A0", Offset = "0xC426A0", VA = "0xC426A0", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200013D")]
	[Preserve]
	public class ES3QueueType : ES3CollectionType
	{
		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xC42C58", Offset = "0xC42C58", VA = "0xC42C58")]
		public ES3QueueType(Type type)
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xC42C5C", Offset = "0xC42C5C", VA = "0xC42C5C", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000A58")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A59")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xC43068", Offset = "0xC43068", VA = "0xC43068", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xC43338", Offset = "0xC43338", VA = "0xC43338", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200013E")]
	[Preserve]
	public class ES3StackType : ES3CollectionType
	{
		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xC438CC", Offset = "0xC438CC", VA = "0xC438CC")]
		public ES3StackType(Type type)
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xC438D0", Offset = "0xC438D0", VA = "0xC438D0", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000A5E")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A5F")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xC43CDC", Offset = "0xC43CDC", VA = "0xC43CDC", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xC44100", Offset = "0xC44100", VA = "0xC44100", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000140")]
	[Preserve]
	public abstract class ES3ComponentType : ES3UnityObjectType
	{
		[Token(Token = "0x4000789")]
		protected const string gameObjectPropertyName = "goID";

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xC44734", Offset = "0xC44734", VA = "0xC44734")]
		public ES3ComponentType(Type type)
		{
		}

		[Token(Token = "0x6000A66")]
		protected abstract void WriteComponent(object obj, ES3Writer writer);

		[Token(Token = "0x6000A67")]
		protected abstract void ReadComponent<T>(ES3Reader reader, object obj);

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xC44774", Offset = "0xC44774", VA = "0xC44774", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A69")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A6A")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A6B")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xC449F0", Offset = "0xC449F0", VA = "0xC449F0")]
		private static UnityEngine.Component GetOrAddComponent(GameObject go, Type type)
		{
			return null;
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xC44A94", Offset = "0xC44A94", VA = "0xC44A94")]
		public static UnityEngine.Component CreateComponent(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000141")]
	[Preserve]
	public abstract class ES3ObjectType : ES3Type
	{
		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xC44B90", Offset = "0xC44B90", VA = "0xC44B90")]
		public ES3ObjectType(Type type)
		{
		}

		[Token(Token = "0x6000A6F")]
		protected abstract void WriteObject(object obj, ES3Writer writer);

		[Token(Token = "0x6000A70")]
		protected abstract object ReadObject<T>(ES3Reader reader);

		[Token(Token = "0x6000A71")]
		protected virtual void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xC44B94", Offset = "0xC44B94", VA = "0xC44B94", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A73")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A74")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000142")]
	[Preserve]
	public abstract class ES3ScriptableObjectType : ES3UnityObjectType
	{
		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xC44E44", Offset = "0xC44E44", VA = "0xC44E44")]
		public ES3ScriptableObjectType(Type type)
		{
		}

		[Token(Token = "0x6000A76")]
		protected abstract void WriteScriptableObject(object obj, ES3Writer writer);

		[Token(Token = "0x6000A77")]
		protected abstract void ReadScriptableObject<T>(ES3Reader reader, object obj);

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xC44E64", Offset = "0xC44E64", VA = "0xC44E64", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A79")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A7A")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A7B")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000143")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Preserve]
	public abstract class ES3Type
	{
		[Token(Token = "0x400078A")]
		public const string typeFieldName = "__type";

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Member[] members;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isPrimitive;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool isValueType;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool isCollection;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool isDictionary;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isEnum;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isES3TypeUnityObject;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool isReflectedType;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool isUnsupported;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int priority;

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xC3E6B0", Offset = "0xC3E6B0", VA = "0xC3E6B0")]
		protected ES3Type(Type type)
		{
		}

		[Token(Token = "0x6000A7D")]
		public abstract void Write(object obj, ES3Writer writer);

		[Token(Token = "0x6000A7E")]
		public abstract object Read<T>(ES3Reader reader);

		[Token(Token = "0x6000A7F")]
		public virtual void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xC44D44", Offset = "0xC44D44", VA = "0xC44D44")]
		protected bool WriteUsingDerivedType(object obj, ES3Writer writer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A81")]
		protected void ReadUsingDerivedType<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xC4505C", Offset = "0xC4505C", VA = "0xC4505C")]
		internal string ReadPropertyName(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xC450A8", Offset = "0xC450A8", VA = "0xC450A8")]
		protected void WriteProperties(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xC451E8", Offset = "0xC451E8", VA = "0xC451E8")]
		protected object ReadProperties(ES3Reader reader, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xC451DC", Offset = "0xC451DC", VA = "0xC451DC")]
		protected void GetMembers(bool safe)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xC46D58", Offset = "0xC46D58", VA = "0xC46D58")]
		protected void GetMembers(bool safe, string[] memberNames)
		{
		}
	}
	[Token(Token = "0x2000144")]
	[AttributeUsage(AttributeTargets.Class)]
	public class ES3PropertiesAttribute : Attribute
	{
		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string[] members;

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xC46EF8", Offset = "0xC46EF8", VA = "0xC46EF8")]
		public ES3PropertiesAttribute(params string[] members)
		{
		}
	}
	[Token(Token = "0x2000145")]
	[Preserve]
	public abstract class ES3UnityObjectType : ES3ObjectType
	{
		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xC44754", Offset = "0xC44754", VA = "0xC44754")]
		public ES3UnityObjectType(Type type)
		{
		}

		[Token(Token = "0x6000A89")]
		protected abstract void WriteUnityObject(object obj, ES3Writer writer);

		[Token(Token = "0x6000A8A")]
		protected abstract void ReadUnityObject<T>(ES3Reader reader, object obj);

		[Token(Token = "0x6000A8B")]
		protected abstract object ReadUnityObject<T>(ES3Reader reader);

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xC46F28", Offset = "0xC46F28", VA = "0xC46F28", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xC46F3C", Offset = "0xC46F3C", VA = "0xC46F3C", Slot = "13")]
		public virtual void WriteObject(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
		}

		[Token(Token = "0x6000A8E")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A8F")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xC471A4", Offset = "0xC471A4", VA = "0xC471A4")]
		protected bool WriteUsingDerivedType(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000146")]
	[ES3Properties(new string[] { "inext", "inextp", "SeedArray" })]
	[Preserve]
	public class ES3Type_Random : ES3ObjectType
	{
		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xC47300", Offset = "0xC47300", VA = "0xC47300")]
		public ES3Type_Random()
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xC473B4", Offset = "0xC473B4", VA = "0xC473B4", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A93")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000A94")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000147")]
	public class ES3Type_RandomArray : ES3ArrayType
	{
		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xC474B4", Offset = "0xC474B4", VA = "0xC474B4")]
		public ES3Type_RandomArray()
		{
		}
	}
	[Token(Token = "0x2000148")]
	[Preserve]
	public class ES3Type_bool : ES3Type
	{
		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xC475A0", Offset = "0xC475A0", VA = "0xC475A0")]
		public ES3Type_bool()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xC4765C", Offset = "0xC4765C", VA = "0xC4765C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A98")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000149")]
	public class ES3Type_boolArray : ES3ArrayType
	{
		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xC476E4", Offset = "0xC476E4", VA = "0xC476E4")]
		public ES3Type_boolArray()
		{
		}
	}
	[Token(Token = "0x200014A")]
	[Preserve]
	public class ES3Type_byte : ES3Type
	{
		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xC477D0", Offset = "0xC477D0", VA = "0xC477D0")]
		public ES3Type_byte()
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xC4788C", Offset = "0xC4788C", VA = "0xC4788C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A9C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200014B")]
	[Preserve]
	public class ES3Type_byteArray : ES3Type
	{
		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xC47914", Offset = "0xC47914", VA = "0xC47914")]
		public ES3Type_byteArray()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xC479D0", Offset = "0xC479D0", VA = "0xC479D0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000A9F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200014C")]
	[Preserve]
	public class ES3Type_char : ES3Type
	{
		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xC47A58", Offset = "0xC47A58", VA = "0xC47A58")]
		public ES3Type_char()
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xC47B14", Offset = "0xC47B14", VA = "0xC47B14", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AA2")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200014D")]
	public class ES3Type_charArray : ES3ArrayType
	{
		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xC47B9C", Offset = "0xC47B9C", VA = "0xC47B9C")]
		public ES3Type_charArray()
		{
		}
	}
	[Token(Token = "0x200014E")]
	[Preserve]
	public class ES3Type_DateTime : ES3Type
	{
		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xC47C88", Offset = "0xC47C88", VA = "0xC47C88")]
		public ES3Type_DateTime()
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xC47D3C", Offset = "0xC47D3C", VA = "0xC47D3C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AA6")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200014F")]
	public class ES3Type_DateTimeArray : ES3ArrayType
	{
		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xC47E4C", Offset = "0xC47E4C", VA = "0xC47E4C")]
		public ES3Type_DateTimeArray()
		{
		}
	}
	[Token(Token = "0x2000150")]
	[Preserve]
	public class ES3Type_decimal : ES3Type
	{
		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xC47F38", Offset = "0xC47F38", VA = "0xC47F38")]
		public ES3Type_decimal()
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xC47FF4", Offset = "0xC47FF4", VA = "0xC47FF4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AAA")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000151")]
	public class ES3Type_decimalArray : ES3ArrayType
	{
		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xC4807C", Offset = "0xC4807C", VA = "0xC4807C")]
		public ES3Type_decimalArray()
		{
		}
	}
	[Token(Token = "0x2000152")]
	[Preserve]
	public class ES3Type_double : ES3Type
	{
		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xC48168", Offset = "0xC48168", VA = "0xC48168")]
		public ES3Type_double()
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xC48224", Offset = "0xC48224", VA = "0xC48224", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AAE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000153")]
	public class ES3Type_doubleArray : ES3ArrayType
	{
		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xC482AC", Offset = "0xC482AC", VA = "0xC482AC")]
		public ES3Type_doubleArray()
		{
		}
	}
	[Token(Token = "0x2000154")]
	[Preserve]
	public class ES3Type_enum : ES3Type
	{
		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Type underlyingType;

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xC48398", Offset = "0xC48398", VA = "0xC48398")]
		public ES3Type_enum(Type type)
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xC48454", Offset = "0xC48454", VA = "0xC48454", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AB2")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000155")]
	[Preserve]
	public class ES3Type_ES3Ref : ES3Type
	{
		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xC48ED0", Offset = "0xC48ED0", VA = "0xC48ED0")]
		public ES3Type_ES3Ref()
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xC48F9C", Offset = "0xC48F9C", VA = "0xC48F9C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AB5")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000156")]
	public class ES3Type_ES3RefArray : ES3ArrayType
	{
		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xC490B4", Offset = "0xC490B4", VA = "0xC490B4")]
		public ES3Type_ES3RefArray()
		{
		}
	}
	[Token(Token = "0x2000157")]
	public class ES3Type_ES3RefDictionary : ES3DictionaryType
	{
		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xC49238", Offset = "0xC49238", VA = "0xC49238")]
		public ES3Type_ES3RefDictionary()
		{
		}
	}
	[Token(Token = "0x2000158")]
	[Preserve]
	public class ES3Type_float : ES3Type
	{
		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xC493A4", Offset = "0xC493A4", VA = "0xC493A4")]
		public ES3Type_float()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xC49460", Offset = "0xC49460", VA = "0xC49460", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000ABD")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000159")]
	public class ES3Type_floatArray : ES3ArrayType
	{
		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xC494E8", Offset = "0xC494E8", VA = "0xC494E8")]
		public ES3Type_floatArray()
		{
		}
	}
	[Token(Token = "0x200015A")]
	[Preserve]
	public class ES3Type_int : ES3Type
	{
		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xC495D4", Offset = "0xC495D4", VA = "0xC495D4")]
		public ES3Type_int()
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xC49690", Offset = "0xC49690", VA = "0xC49690", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AC1")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200015B")]
	public class ES3Type_intArray : ES3ArrayType
	{
		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xC49718", Offset = "0xC49718", VA = "0xC49718")]
		public ES3Type_intArray()
		{
		}
	}
	[Token(Token = "0x200015C")]
	[Preserve]
	public class ES3Type_IntPtr : ES3Type
	{
		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xC49804", Offset = "0xC49804", VA = "0xC49804")]
		public ES3Type_IntPtr()
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xC498C0", Offset = "0xC498C0", VA = "0xC498C0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AC5")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200015D")]
	public class ES3Type_IntPtrArray : ES3ArrayType
	{
		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xC49954", Offset = "0xC49954", VA = "0xC49954")]
		public ES3Type_IntPtrArray()
		{
		}
	}
	[Token(Token = "0x200015E")]
	[Preserve]
	public class ES3Type_long : ES3Type
	{
		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xC49A40", Offset = "0xC49A40", VA = "0xC49A40")]
		public ES3Type_long()
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xC49AFC", Offset = "0xC49AFC", VA = "0xC49AFC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AC9")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200015F")]
	public class ES3Type_longArray : ES3ArrayType
	{
		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xC49B84", Offset = "0xC49B84", VA = "0xC49B84")]
		public ES3Type_longArray()
		{
		}
	}
	[Token(Token = "0x2000160")]
	[Preserve]
	public class ES3Type_sbyte : ES3Type
	{
		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xC49C70", Offset = "0xC49C70", VA = "0xC49C70")]
		public ES3Type_sbyte()
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xC49D2C", Offset = "0xC49D2C", VA = "0xC49D2C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000ACD")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000161")]
	public class ES3Type_sbyteArray : ES3ArrayType
	{
		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xC49DB4", Offset = "0xC49DB4", VA = "0xC49DB4")]
		public ES3Type_sbyteArray()
		{
		}
	}
	[Token(Token = "0x2000162")]
	[Preserve]
	public class ES3Type_short : ES3Type
	{
		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xC49EA0", Offset = "0xC49EA0", VA = "0xC49EA0")]
		public ES3Type_short()
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xC49F5C", Offset = "0xC49F5C", VA = "0xC49F5C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AD1")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000163")]
	public class ES3Type_shortArray : ES3ArrayType
	{
		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xC49FE4", Offset = "0xC49FE4", VA = "0xC49FE4")]
		public ES3Type_shortArray()
		{
		}
	}
	[Token(Token = "0x2000164")]
	[Preserve]
	public class ES3Type_string : ES3Type
	{
		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xC4A0D0", Offset = "0xC4A0D0", VA = "0xC4A0D0")]
		public ES3Type_string()
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xC4A18C", Offset = "0xC4A18C", VA = "0xC4A18C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AD5")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000165")]
	public class ES3Type_StringArray : ES3ArrayType
	{
		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xC4A208", Offset = "0xC4A208", VA = "0xC4A208")]
		public ES3Type_StringArray()
		{
		}
	}
	[Token(Token = "0x2000166")]
	[Preserve]
	public class ES3Type_uint : ES3Type
	{
		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xC4A2F4", Offset = "0xC4A2F4", VA = "0xC4A2F4")]
		public ES3Type_uint()
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xC4A3B0", Offset = "0xC4A3B0", VA = "0xC4A3B0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AD9")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000167")]
	public class ES3Type_uintArray : ES3ArrayType
	{
		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xC4A438", Offset = "0xC4A438", VA = "0xC4A438")]
		public ES3Type_uintArray()
		{
		}
	}
	[Token(Token = "0x2000168")]
	[Preserve]
	public class ES3Type_UIntPtr : ES3Type
	{
		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xC4A524", Offset = "0xC4A524", VA = "0xC4A524")]
		public ES3Type_UIntPtr()
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xC4A5E0", Offset = "0xC4A5E0", VA = "0xC4A5E0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000ADD")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000169")]
	public class ES3Type_UIntPtrArray : ES3ArrayType
	{
		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xC4A668", Offset = "0xC4A668", VA = "0xC4A668")]
		public ES3Type_UIntPtrArray()
		{
		}
	}
	[Token(Token = "0x200016A")]
	[Preserve]
	public class ES3Type_ulong : ES3Type
	{
		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xC4A754", Offset = "0xC4A754", VA = "0xC4A754")]
		public ES3Type_ulong()
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xC4A810", Offset = "0xC4A810", VA = "0xC4A810", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AE1")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200016B")]
	public class ES3Type_ulongArray : ES3ArrayType
	{
		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xC4A898", Offset = "0xC4A898", VA = "0xC4A898")]
		public ES3Type_ulongArray()
		{
		}
	}
	[Token(Token = "0x200016C")]
	[Preserve]
	public class ES3Type_ushort : ES3Type
	{
		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xC4A984", Offset = "0xC4A984", VA = "0xC4A984")]
		public ES3Type_ushort()
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xC4AA40", Offset = "0xC4AA40", VA = "0xC4AA40", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AE5")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200016D")]
	public class ES3Type_ushortArray : ES3ArrayType
	{
		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xC4AAC8", Offset = "0xC4AAC8", VA = "0xC4AAC8")]
		public ES3Type_ushortArray()
		{
		}
	}
	[Token(Token = "0x200016E")]
	[Preserve]
	internal class ES3ReflectedComponentType : ES3ComponentType
	{
		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xC4ABB4", Offset = "0xC4ABB4", VA = "0xC4ABB4")]
		public ES3ReflectedComponentType(Type type)
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xC4ABE0", Offset = "0xC4ABE0", VA = "0xC4ABE0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AE9")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200016F")]
	[Preserve]
	internal class ES3ReflectedObjectType : ES3ObjectType
	{
		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xC4ABE4", Offset = "0xC4ABE4", VA = "0xC4ABE4")]
		public ES3ReflectedObjectType(Type type)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xC4AC0C", Offset = "0xC4AC0C", VA = "0xC4AC0C", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AEC")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AED")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000170")]
	[Preserve]
	internal class ES3ReflectedScriptableObjectType : ES3ScriptableObjectType
	{
		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xC4AC10", Offset = "0xC4AC10", VA = "0xC4AC10")]
		public ES3ReflectedScriptableObjectType(Type type)
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xC4AC3C", Offset = "0xC4AC3C", VA = "0xC4AC3C", Slot = "14")]
		protected override void WriteScriptableObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AF0")]
		protected override void ReadScriptableObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000171")]
	[Preserve]
	internal class ES3ReflectedType : ES3Type
	{
		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xC4AC40", Offset = "0xC4AC40", VA = "0xC4AC40")]
		public ES3ReflectedType(Type type)
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xC4AC5C", Offset = "0xC4AC5C", VA = "0xC4AC5C")]
		public ES3ReflectedType(Type type, string[] members)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xC4AC90", Offset = "0xC4AC90", VA = "0xC4AC90", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AF4")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AF5")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000172")]
	[Preserve]
	internal class ES3ReflectedUnityObjectType : ES3UnityObjectType
	{
		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xC4B014", Offset = "0xC4B014", VA = "0xC4B014")]
		public ES3ReflectedUnityObjectType(Type type)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xC4B040", Offset = "0xC4B040", VA = "0xC4B040", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AF8")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AF9")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000173")]
	[Preserve]
	internal class ES3ReflectedValueType : ES3Type
	{
		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xC4B044", Offset = "0xC4B044", VA = "0xC4B044")]
		public ES3ReflectedValueType(Type type)
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xC4B06C", Offset = "0xC4B06C", VA = "0xC4B06C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AFC")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AFD")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000174")]
	[Preserve]
	[ES3Properties(new string[] { "center", "size", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	public class ES3Type_BoxCollider : ES3ComponentType
	{
		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xC4B070", Offset = "0xC4B070", VA = "0xC4B070")]
		public ES3Type_BoxCollider()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xC4B130", Offset = "0xC4B130", VA = "0xC4B130", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B00")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000175")]
	[Preserve]
	[ES3Properties(new string[] { "size", "density", "isTrigger", "usedByEffector", "offset", "sharedMaterial", "enabled" })]
	public class ES3Type_BoxCollider2D : ES3ComponentType
	{
		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xC4B3E8", Offset = "0xC4B3E8", VA = "0xC4B3E8")]
		public ES3Type_BoxCollider2D()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xC4B4A8", Offset = "0xC4B4A8", VA = "0xC4B4A8", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B03")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000176")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"fieldOfView", "nearClipPlane", "farClipPlane", "renderingPath", "allowHDR", "orthographicSize", "orthographic", "opaqueSortMode", "transparencySortMode", "depth",
		"aspect", "cullingMask", "eventMask", "backgroundColor", "rect", "pixelRect", "worldToCameraMatrix", "projectionMatrix", "nonJitteredProjectionMatrix", "useJitteredProjectionMatrixForTransparentRendering",
		"clearFlags", "stereoSeparation", "stereoConvergence", "cameraType", "stereoTargetEye", "targetDisplay", "useOcclusionCulling", "cullingMatrix", "layerCullSpherical", "depthTextureMode",
		"clearStencilAfterLightingPass", "enabled", "hideFlags"
	})]
	public class ES3Type_Camera : ES3ComponentType
	{
		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xC4B7F0", Offset = "0xC4B7F0", VA = "0xC4B7F0")]
		public ES3Type_Camera()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xC4B8B0", Offset = "0xC4B8B0", VA = "0xC4B8B0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B06")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000177")]
	[ES3Properties(new string[] { "center", "radius", "height", "direction", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	[Preserve]
	public class ES3Type_CapsuleCollider : ES3ComponentType
	{
		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xC4C44C", Offset = "0xC4C44C", VA = "0xC4C44C")]
		public ES3Type_CapsuleCollider()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xC4C50C", Offset = "0xC4C50C", VA = "0xC4C50C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B09")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000178")]
	[Preserve]
	public class ES3Type_EventSystem : ES3ComponentType
	{
		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xC4C914", Offset = "0xC4C914", VA = "0xC4C914")]
		public ES3Type_EventSystem()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xC4C9D4", Offset = "0xC4C9D4", VA = "0xC4C9D4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B0C")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000179")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"sprite", "overrideSprite", "type", "preserveAspect", "fillCenter", "fillMethod", "fillAmount", "fillClockwise", "fillOrigin", "alphaHitTestMinimumThreshold",
		"useSpriteMesh", "pixelsPerUnitMultiplier", "material", "onCullStateChanged", "maskable", "color", "raycastTarget", "useLegacyMeshGeneration", "useGUILayout", "enabled",
		"hideFlags"
	})]
	public class ES3Type_Image : ES3ComponentType
	{
		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xC4C9D8", Offset = "0xC4C9D8", VA = "0xC4C9D8")]
		public ES3Type_Image()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xC4CAA0", Offset = "0xC4CAA0", VA = "0xC4CAA0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B0F")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200017A")]
	public class ES3Type_ImageArray : ES3ArrayType
	{
		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xC4D290", Offset = "0xC4D290", VA = "0xC4D290")]
		public ES3Type_ImageArray()
		{
		}
	}
	[Token(Token = "0x200017B")]
	[Preserve]
	[ES3Properties(new string[] { "sharedMesh", "convex", "inflateMesh", "skinWidth", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	public class ES3Type_MeshCollider : ES3ComponentType
	{
		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xC4D37C", Offset = "0xC4D37C", VA = "0xC4D37C")]
		public ES3Type_MeshCollider()
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xC4D43C", Offset = "0xC4D43C", VA = "0xC4D43C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B13")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200017C")]
	public class ES3Type_MeshColliderArray : ES3ArrayType
	{
		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xC4D728", Offset = "0xC4D728", VA = "0xC4D728")]
		public ES3Type_MeshColliderArray()
		{
		}
	}
	[Token(Token = "0x200017D")]
	[ES3Properties(new string[] { "sharedMesh" })]
	[Preserve]
	public class ES3Type_MeshFilter : ES3ComponentType
	{
		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xC4D814", Offset = "0xC4D814", VA = "0xC4D814")]
		public ES3Type_MeshFilter()
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xC4D8D4", Offset = "0xC4D8D4", VA = "0xC4D8D4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B17")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200017E")]
	public class ES3Type_MeshFilterArray : ES3ArrayType
	{
		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xC4D970", Offset = "0xC4D970", VA = "0xC4D970")]
		public ES3Type_MeshFilterArray()
		{
		}
	}
	[Token(Token = "0x200017F")]
	[ES3Properties(new string[]
	{
		"additionalVertexStreams", "enabled", "shadowCastingMode", "receiveShadows", "sharedMaterials", "lightmapIndex", "realtimeLightmapIndex", "lightmapScaleOffset", "motionVectorGenerationMode", "realtimeLightmapScaleOffset",
		"lightProbeUsage", "lightProbeProxyVolumeOverride", "probeAnchor", "reflectionProbeUsage", "sortingLayerName", "sortingLayerID", "sortingOrder"
	})]
	[Preserve]
	public class ES3Type_MeshRenderer : ES3ComponentType
	{
		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xC4DA5C", Offset = "0xC4DA5C", VA = "0xC4DA5C")]
		public ES3Type_MeshRenderer()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xC4DB1C", Offset = "0xC4DB1C", VA = "0xC4DB1C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B1B")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000180")]
	public class ES3Type_MeshRendererArray : ES3ArrayType
	{
		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xC4E268", Offset = "0xC4E268", VA = "0xC4E268")]
		public ES3Type_MeshRendererArray()
		{
		}
	}
	[Token(Token = "0x2000181")]
	[ES3Properties(new string[]
	{
		"time", "hideFlags", "collision", "colorBySpeed", "colorOverLifetime", "emission", "externalForces", "forceOverLifetime", "inheritVelocity", "lights",
		"limitVelocityOverLifetime", "main", "noise", "rotatonBySpeed", "rotationOverLifetime", "shape", "sizeBySpeed", "sizeOverLifetime", "subEmitters", "textureSheetAnimation",
		"trails", "trigger", "useAutoRandomSeed", "velocityOverLifetime", "isPaused", "isPlaying", "isStopped"
	})]
	[Preserve]
	public class ES3Type_ParticleSystem : ES3ComponentType
	{
		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xC4E354", Offset = "0xC4E354", VA = "0xC4E354")]
		public ES3Type_ParticleSystem()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xC4E414", Offset = "0xC4E414", VA = "0xC4E414", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B1F")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000182")]
	[ES3Properties(new string[] { "points", "pathCount", "paths", "density", "isTrigger", "usedByEffector", "offset", "sharedMaterial", "enabled" })]
	[Preserve]
	public class ES3Type_PolygonCollider2D : ES3ComponentType
	{
		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xC4EEF0", Offset = "0xC4EEF0", VA = "0xC4EEF0")]
		public ES3Type_PolygonCollider2D()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xC4EFB0", Offset = "0xC4EFB0", VA = "0xC4EFB0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B22")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000183")]
	public class ES3Type_PolygonCollider2DArray : ES3ArrayType
	{
		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xC4F4B8", Offset = "0xC4F4B8", VA = "0xC4F4B8")]
		public ES3Type_PolygonCollider2DArray()
		{
		}
	}
	[Token(Token = "0x2000184")]
	[ES3Properties(new string[]
	{
		"texture", "uvRect", "onCullStateChanged", "maskable", "color", "raycastTarget", "useLegacyMeshGeneration", "material", "useGUILayout", "enabled",
		"hideFlags"
	})]
	[Preserve]
	public class ES3Type_RawImage : ES3ComponentType
	{
		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xC4F5A4", Offset = "0xC4F5A4", VA = "0xC4F5A4")]
		public ES3Type_RawImage()
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xC4F66C", Offset = "0xC4F66C", VA = "0xC4F66C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B26")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000185")]
	public class ES3Type_RawImageArray : ES3ArrayType
	{
		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xC4FB48", Offset = "0xC4FB48", VA = "0xC4FB48")]
		public ES3Type_RawImageArray()
		{
		}
	}
	[Token(Token = "0x2000186")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"velocity", "angularVelocity", "drag", "angularDrag", "mass", "useGravity", "maxDepenetrationVelocity", "isKinematic", "freezeRotation", "constraints",
		"collisionDetectionMode", "centerOfMass", "inertiaTensorRotation", "inertiaTensor", "detectCollisions", "position", "rotation", "interpolation", "solverIterations", "sleepThreshold",
		"maxAngularVelocity", "solverVelocityIterations"
	})]
	public class ES3Type_Rigidbody : ES3ComponentType
	{
		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xC4FC34", Offset = "0xC4FC34", VA = "0xC4FC34")]
		public ES3Type_Rigidbody()
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xC4FCFC", Offset = "0xC4FCFC", VA = "0xC4FCFC", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B2A")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class ES3UserType_RigidbodyArray : ES3ArrayType
	{
		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xC5066C", Offset = "0xC5066C", VA = "0xC5066C")]
		public ES3UserType_RigidbodyArray()
		{
		}
	}
	[Token(Token = "0x2000188")]
	[ES3Properties(new string[] { "center", "radius", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	[Preserve]
	public class ES3Type_SphereCollider : ES3ComponentType
	{
		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xC50758", Offset = "0xC50758", VA = "0xC50758")]
		public ES3Type_SphereCollider()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xC50818", Offset = "0xC50818", VA = "0xC50818", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B2E")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000189")]
	[ES3Properties(new string[]
	{
		"font", "text", "supportRichText", "resizeTextForBestFit", "resizeTextMinSize", "resizeTextMaxSize", "alignment", "alignByGeometry", "fontSize", "horizontalOverflow",
		"verticalOverflow", "lineSpacing", "fontStyle", "onCullStateChanged", "maskable", "color", "raycastTarget", "material", "useGUILayout", "enabled",
		"tag", "name", "hideFlags"
	})]
	[Preserve]
	public class ES3Type_Text : ES3ComponentType
	{
		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xC50B44", Offset = "0xC50B44", VA = "0xC50B44")]
		public ES3Type_Text()
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xC50C04", Offset = "0xC50C04", VA = "0xC50C04", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B31")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200018A")]
	[Preserve]
	[ES3Properties(new string[] { "localPosition", "localRotation", "localScale", "parent", "siblingIndex" })]
	public class ES3Type_Transform : ES3ComponentType
	{
		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int countRead;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xC513E0", Offset = "0xC513E0", VA = "0xC513E0")]
		public ES3Type_Transform()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xC51498", Offset = "0xC51498", VA = "0xC51498", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B34")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200018B")]
	[ES3Properties(new string[] { "keys", "preWrapMode", "postWrapMode" })]
	[Preserve]
	public class ES3Type_AnimationCurve : ES3Type
	{
		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xC516F4", Offset = "0xC516F4", VA = "0xC516F4")]
		public ES3Type_AnimationCurve()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xC517A8", Offset = "0xC517A8", VA = "0xC517A8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B37")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B38")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200018C")]
	[Preserve]
	[ES3Properties(new string[] { "name", "samples", "channels", "frequency", "sampleData" })]
	public class ES3Type_AudioClip : ES3UnityObjectType
	{
		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xC5194C", Offset = "0xC5194C", VA = "0xC5194C")]
		public ES3Type_AudioClip()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xC51A0C", Offset = "0xC51A0C", VA = "0xC51A0C", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B3B")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B3C")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200018D")]
	public class ES3Type_AudioClipArray : ES3ArrayType
	{
		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xC51C5C", Offset = "0xC51C5C", VA = "0xC51C5C")]
		public ES3Type_AudioClipArray()
		{
		}
	}
	[Token(Token = "0x200018E")]
	[Preserve]
	[ES3Properties(new string[] { "boneIndex0", "boneIndex1", "boneIndex2", "boneIndex3", "weight0", "weight1", "weight2", "weight3" })]
	public class ES3Type_BoneWeight : ES3Type
	{
		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xC51D48", Offset = "0xC51D48", VA = "0xC51D48")]
		public ES3Type_BoneWeight()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xC51DFC", Offset = "0xC51DFC", VA = "0xC51DFC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B40")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200018F")]
	public class ES3Type_BoneWeightArray : ES3ArrayType
	{
		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xC521CC", Offset = "0xC521CC", VA = "0xC521CC")]
		public ES3Type_BoneWeightArray()
		{
		}
	}
	[Token(Token = "0x2000190")]
	[Preserve]
	[ES3Properties(new string[] { "center", "size" })]
	public class ES3Type_Bounds : ES3Type
	{
		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xC522B8", Offset = "0xC522B8", VA = "0xC522B8")]
		public ES3Type_Bounds()
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xC5236C", Offset = "0xC5236C", VA = "0xC5236C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B44")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000191")]
	public class ES3Type_BoundsArray : ES3ArrayType
	{
		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xC524EC", Offset = "0xC524EC", VA = "0xC524EC")]
		public ES3Type_BoundsArray()
		{
		}
	}
	[Token(Token = "0x2000192")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "type", "mode", "dampen", "dampenMultiplier", "bounce", "bounceMultiplier", "lifetimeLoss", "lifetimeLossMultiplier", "minKillSpeed",
		"maxKillSpeed", "collidesWith", "enableDynamicColliders", "maxCollisionShapes", "quality", "voxelSize", "radiusScale", "sendCollisionMessages"
	})]
	public class ES3Type_CollisionModule : ES3Type
	{
		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xC525D8", Offset = "0xC525D8", VA = "0xC525D8")]
		public ES3Type_CollisionModule()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xC5268C", Offset = "0xC5268C", VA = "0xC5268C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B48")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B49")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000193")]
	[ES3Properties(new string[] { "r", "g", "b", "a" })]
	[Preserve]
	public class ES3Type_Color : ES3Type
	{
		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xC52D94", Offset = "0xC52D94", VA = "0xC52D94")]
		public ES3Type_Color()
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xC52E48", Offset = "0xC52E48", VA = "0xC52E48", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B4C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000194")]
	public class ES3Type_ColorArray : ES3ArrayType
	{
		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xC53040", Offset = "0xC53040", VA = "0xC53040")]
		public ES3Type_ColorArray()
		{
		}
	}
	[Token(Token = "0x2000195")]
	[Preserve]
	[ES3Properties(new string[] { "r", "g", "b", "a" })]
	public class ES3Type_Color32 : ES3Type
	{
		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xC5312C", Offset = "0xC5312C", VA = "0xC5312C")]
		public ES3Type_Color32()
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xC531E0", Offset = "0xC531E0", VA = "0xC531E0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B50")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xC533E0", Offset = "0xC533E0", VA = "0xC533E0")]
		public static bool Equals(Color32 a, Color32 b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000196")]
	public class ES3Type_Color32Array : ES3ArrayType
	{
		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xC53404", Offset = "0xC53404", VA = "0xC53404")]
		public ES3Type_Color32Array()
		{
		}
	}
	[Token(Token = "0x2000197")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "color", "range" })]
	public class ES3Type_ColorBySpeedModule : ES3Type
	{
		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xC534F0", Offset = "0xC534F0", VA = "0xC534F0")]
		public ES3Type_ColorBySpeedModule()
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0xC535A4", Offset = "0xC535A4", VA = "0xC535A4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B55")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B56")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000198")]
	[ES3Properties(new string[] { "enabled", "color" })]
	[Preserve]
	public class ES3Type_ColorOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xC537EC", Offset = "0xC537EC", VA = "0xC537EC")]
		public ES3Type_ColorOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xC538A0", Offset = "0xC538A0", VA = "0xC538A0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B59")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B5A")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000199")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "rateOverTime", "rateOverTimeMultiplier", "rateOverDistance", "rateOverDistanceMultiplier" })]
	public class ES3Type_EmissionModule : ES3Type
	{
		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xC53A60", Offset = "0xC53A60", VA = "0xC53A60")]
		public ES3Type_EmissionModule()
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xC53B14", Offset = "0xC53B14", VA = "0xC53B14", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B5D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B5E")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200019A")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "multiplier" })]
	public class ES3Type_ExternalForcesModule : ES3Type
	{
		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xC53E18", Offset = "0xC53E18", VA = "0xC53E18")]
		public ES3Type_ExternalForcesModule()
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xC53ECC", Offset = "0xC53ECC", VA = "0xC53ECC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B61")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B62")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200019B")]
	[Preserve]
	[ES3Properties(new string[] { "hideFlags" })]
	public class ES3Type_Flare : ES3Type
	{
		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xC54068", Offset = "0xC54068", VA = "0xC54068")]
		public ES3Type_Flare()
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xC5411C", Offset = "0xC5411C", VA = "0xC5411C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B65")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B66")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class ES3Type_FlareArray : ES3ArrayType
	{
		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xC541F0", Offset = "0xC541F0", VA = "0xC541F0")]
		public ES3Type_FlareArray()
		{
		}
	}
	[Token(Token = "0x200019D")]
	[Preserve]
	[ES3Properties(new string[] { "material", "name" })]
	public class ES3Type_Font : ES3UnityObjectType
	{
		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xC542DC", Offset = "0xC542DC", VA = "0xC542DC")]
		public ES3Type_Font()
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xC5439C", Offset = "0xC5439C", VA = "0xC5439C", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B6A")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B6B")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200019E")]
	public class ES3Type_FontArray : ES3ArrayType
	{
		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xC54498", Offset = "0xC54498", VA = "0xC54498")]
		public ES3Type_FontArray()
		{
		}
	}
	[Token(Token = "0x200019F")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "x", "y", "z", "xMultiplier", "yMultiplier", "zMultiplier", "space", "randomized" })]
	public class ES3Type_ForceOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xC54584", Offset = "0xC54584", VA = "0xC54584")]
		public ES3Type_ForceOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xC54638", Offset = "0xC54638", VA = "0xC54638", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B6F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B70")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001A0")]
	[ES3Properties(new string[] { "layer", "isStatic", "tag", "name", "hideFlags", "children", "components" })]
	[Preserve]
	public class ES3Type_GameObject : ES3UnityObjectType
	{
		[Token(Token = "0x40007ED")]
		private const string prefabPropertyName = "es3Prefab";

		[Token(Token = "0x40007EE")]
		private const string transformPropertyName = "transformID";

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool saveChildren;

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xC54AC4", Offset = "0xC54AC4", VA = "0xC54AC4")]
		public ES3Type_GameObject()
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xC54B84", Offset = "0xC54B84", VA = "0xC54B84", Slot = "13")]
		public override void WriteObject(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
		}

		[Token(Token = "0x6000B73")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B74")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xC55738", Offset = "0xC55738", VA = "0xC55738")]
		private void ReadComponents(ES3Reader reader, GameObject go)
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xC55D58", Offset = "0xC55D58", VA = "0xC55D58")]
		private GameObject CreateNewGameObject(ES3ReferenceMgrBase refMgr, long id)
		{
			return null;
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xC55394", Offset = "0xC55394", VA = "0xC55394")]
		public static List<GameObject> GetChildren(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xC55DEC", Offset = "0xC55DEC", VA = "0xC55DEC", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B79")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B7A")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A2")]
	public class ES3Type_GameObjectArray : ES3ArrayType
	{
		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xC55E70", Offset = "0xC55E70", VA = "0xC55E70")]
		public ES3Type_GameObjectArray()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	[Preserve]
	[ES3Properties(new string[] { "colorKeys", "alphaKeys", "mode" })]
	public class ES3Type_Gradient : ES3Type
	{
		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xC55F5C", Offset = "0xC55F5C", VA = "0xC55F5C")]
		public ES3Type_Gradient()
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xC56010", Offset = "0xC56010", VA = "0xC56010", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B80")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B81")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001A4")]
	[ES3Properties(new string[] { "alpha", "time" })]
	[Preserve]
	public class ES3Type_GradientAlphaKey : ES3Type
	{
		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xC561C0", Offset = "0xC561C0", VA = "0xC561C0")]
		public ES3Type_GradientAlphaKey()
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xC56274", Offset = "0xC56274", VA = "0xC56274", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B84")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A5")]
	public class ES3Type_GradientAlphaKeyArray : ES3ArrayType
	{
		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xC563C0", Offset = "0xC563C0", VA = "0xC563C0")]
		public ES3Type_GradientAlphaKeyArray()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	[ES3Properties(new string[] { "color", "time" })]
	[Preserve]
	public class ES3Type_GradientColorKey : ES3Type
	{
		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xC564AC", Offset = "0xC564AC", VA = "0xC564AC")]
		public ES3Type_GradientColorKey()
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xC56560", Offset = "0xC56560", VA = "0xC56560", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B88")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A7")]
	public class ES3Type_GradientColorKeyArray : ES3ArrayType
	{
		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xC566D8", Offset = "0xC566D8", VA = "0xC566D8")]
		public ES3Type_GradientColorKeyArray()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	[Preserve]
	[ES3Properties(new string[] { "value" })]
	public class ES3Type_Guid : ES3Type
	{
		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xC567C4", Offset = "0xC567C4", VA = "0xC567C4")]
		public ES3Type_Guid()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xC56878", Offset = "0xC56878", VA = "0xC56878", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B8C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A9")]
	public class ES3Type_GuidArray : ES3ArrayType
	{
		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xC5695C", Offset = "0xC5695C", VA = "0xC5695C")]
		public ES3Type_GuidArray()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	[ES3Properties(new string[] { "enabled", "mode", "curve", "curveMultiplier" })]
	[Preserve]
	public class ES3Type_InheritVelocityModule : ES3Type
	{
		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xC56A48", Offset = "0xC56A48", VA = "0xC56A48")]
		public ES3Type_InheritVelocityModule()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xC56AFC", Offset = "0xC56AFC", VA = "0xC56AFC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B90")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B91")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001AB")]
	[Preserve]
	[ES3Properties(new string[] { "time", "value", "inTangent", "outTangent" })]
	public class ES3Type_Keyframe : ES3Type
	{
		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xC56D98", Offset = "0xC56D98", VA = "0xC56D98")]
		public ES3Type_Keyframe()
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xC56E4C", Offset = "0xC56E4C", VA = "0xC56E4C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B94")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001AC")]
	public class ES3Type_KeyframeArray : ES3ArrayType
	{
		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xC57080", Offset = "0xC57080", VA = "0xC57080")]
		public ES3Type_KeyframeArray()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	[ES3Properties(new string[] { "colorKeys", "alphaKeys", "mode" })]
	[Preserve]
	public class ES3Type_LayerMask : ES3Type
	{
		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xC5716C", Offset = "0xC5716C", VA = "0xC5716C")]
		public ES3Type_LayerMask()
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xC57220", Offset = "0xC57220", VA = "0xC57220", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B98")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001AE")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"type", "color", "intensity", "bounceIntensity", "shadows", "shadowStrength", "shadowResolution", "shadowCustomResolution", "shadowBias", "shadowNormalBias",
		"shadowNearPlane", "range", "spotAngle", "cookieSize", "cookie", "flare", "renderMode", "cullingMask", "areaSize", "lightmappingMode",
		"enabled", "hideFlags"
	})]
	public class ES3Type_Light : ES3ComponentType
	{
		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xC57330", Offset = "0xC57330", VA = "0xC57330")]
		public ES3Type_Light()
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xC573F0", Offset = "0xC573F0", VA = "0xC573F0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B9B")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001AF")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "ratio", "useRandomDistribution", "light", "useParticleColor", "sizeAffectsRange", "alphaAffectsIntensity", "range", "rangeMultiplier", "intensity",
		"intensityMultiplier", "maxLights"
	})]
	public class ES3Type_LightsModule : ES3Type
	{
		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xC57C44", Offset = "0xC57C44", VA = "0xC57C44")]
		public ES3Type_LightsModule()
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xC57CF8", Offset = "0xC57CF8", VA = "0xC57CF8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B9E")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B9F")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B0")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "limitX", "limitXMultiplier", "limitY", "limitYMultiplier", "limitZ", "limitZMultiplier", "limit", "limitMultiplier", "dampen",
		"separateAxes", "space"
	})]
	public class ES3Type_LimitVelocityOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xC5828C", Offset = "0xC5828C", VA = "0xC5828C")]
		public ES3Type_LimitVelocityOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xC58340", Offset = "0xC58340", VA = "0xC58340", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BA2")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BA3")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B1")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"duration", "loop", "prewarm", "startDelay", "startDelayMultiplier", "startLifetime", "startLifetimeMultiplier", "startSpeed", "startSpeedMultiplier", "startSize3D",
		"startSize", "startSizeMultiplier", "startSizeX", "startSizeXMultiplier", "startSizeY", "startSizeYMultiplier", "startSizeZ", "startSizeZMultiplier", "startRotation3D", "startRotation",
		"startRotationMultiplier", "startRotationX", "startRotationXMultiplier", "startRotationY", "startRotationYMultiplier", "startRotationZ", "startRotationZMultiplier", "randomizeRotationDirection", "startColor", "gravityModifier",
		"gravityModifierMultiplier", "simulationSpace", "customSimulationSpace", "simulationSpeed", "scalingMode", "playOnAwake", "maxParticles"
	})]
	public class ES3Type_MainModule : ES3Type
	{
		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xC588E0", Offset = "0xC588E0", VA = "0xC588E0")]
		public ES3Type_MainModule()
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xC58994", Offset = "0xC58994", VA = "0xC58994", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BA6")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BA7")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B2")]
	[Preserve]
	[ES3Properties(new string[] { "shader", "renderQueue", "shaderKeywords", "globalIlluminationFlags", "properties" })]
	public class ES3Type_Material : ES3UnityObjectType
	{
		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xC598A0", Offset = "0xC598A0", VA = "0xC598A0")]
		public ES3Type_Material()
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xC59960", Offset = "0xC59960", VA = "0xC59960", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BAA")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BAB")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B3")]
	public class ES3Type_MaterialArray : ES3ArrayType
	{
		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xC60770", Offset = "0xC60770", VA = "0xC60770")]
		public ES3Type_MaterialArray()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	[Preserve]
	[ES3Properties(new string[] { "col0", "col1", "col2", "col3" })]
	public class ES3Type_Matrix4x4 : ES3Type
	{
		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xC60848", Offset = "0xC60848", VA = "0xC60848")]
		public ES3Type_Matrix4x4()
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xC60900", Offset = "0xC60900", VA = "0xC60900", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BAF")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B5")]
	public class ES3Type_Matrix4x4Array : ES3ArrayType
	{
		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xC60B54", Offset = "0xC60B54", VA = "0xC60B54")]
		public ES3Type_Matrix4x4Array()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"bounds", "subMeshCount", "boneWeights", "bindposes", "vertices", "normals", "tangents", "uv", "uv2", "uv3",
		"uv4", "colors32", "triangles", "subMeshes"
	})]
	public class ES3Type_Mesh : ES3UnityObjectType
	{
		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xC60C2C", Offset = "0xC60C2C", VA = "0xC60C2C")]
		public ES3Type_Mesh()
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xC60CE4", Offset = "0xC60CE4", VA = "0xC60CE4", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BB3")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BB4")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B7")]
	[Preserve]
	[ES3Properties(new string[] { "mode", "curveMultiplier", "curveMax", "curveMin", "constantMax", "constantMin", "constant", "curve" })]
	public class ES3Type_MinMaxCurve : ES3Type
	{
		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xC6149C", Offset = "0xC6149C", VA = "0xC6149C")]
		public ES3Type_MinMaxCurve()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xC61554", Offset = "0xC61554", VA = "0xC61554", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Preserve]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BB8")]
		[Preserve]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B8")]
	[Preserve]
	[ES3Properties(new string[] { "mode", "gradientMax", "gradientMin", "colorMax", "colorMin", "color", "gradient" })]
	public class ES3Type_MinMaxGradient : ES3Type
	{
		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xC618DC", Offset = "0xC618DC", VA = "0xC618DC")]
		public ES3Type_MinMaxGradient()
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xC61994", Offset = "0xC61994", VA = "0xC61994", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BBB")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B9")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "separateAxes", "strength", "strengthMultiplier", "strengthX", "strengthXMultiplier", "strengthY", "strengthYMultiplier", "strengthZ", "strengthZMultiplier",
		"frequency", "damping", "octaveCount", "octaveMultiplier", "octaveScale", "quality", "scrollSpeed", "scrollSpeedMultiplier", "remapEnabled", "remap",
		"remapMultiplier", "remapX", "remapXMultiplier", "remapY", "remapYMultiplier", "remapZ", "remapZMultiplier"
	})]
	public class ES3Type_NoiseModule : ES3Type
	{
		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xC61CE8", Offset = "0xC61CE8", VA = "0xC61CE8")]
		public ES3Type_NoiseModule()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xC61DA0", Offset = "0xC61DA0", VA = "0xC61DA0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BBE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BBF")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001BA")]
	[Preserve]
	[ES3Properties(new string[] { "dynamicFriction", "staticFriction", "bounciness", "frictionCombine", "bounceCombine" })]
	public class ES3Type_PhysicMaterial : ES3ObjectType
	{
		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xC628DC", Offset = "0xC628DC", VA = "0xC628DC")]
		public ES3Type_PhysicMaterial()
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xC62994", Offset = "0xC62994", VA = "0xC62994", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BC2")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000BC3")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001BB")]
	public class ES3Type_PhysicMaterialArray : ES3ArrayType
	{
		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xC62C1C", Offset = "0xC62C1C", VA = "0xC62C1C")]
		public ES3Type_PhysicMaterialArray()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	[Preserve]
	[ES3Properties(new string[] { "bounciness", "friction" })]
	public class ES3Type_PhysicsMaterial2D : ES3ObjectType
	{
		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xC62CF4", Offset = "0xC62CF4", VA = "0xC62CF4")]
		public ES3Type_PhysicsMaterial2D()
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xC62DAC", Offset = "0xC62DAC", VA = "0xC62DAC", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BC7")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000BC8")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001BD")]
	public class ES3Type_PhysicsMaterial2DArray : ES3ArrayType
	{
		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xC62EFC", Offset = "0xC62EFC", VA = "0xC62EFC")]
		public ES3Type_PhysicsMaterial2DArray()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "z", "w" })]
	public class ES3Type_Quaternion : ES3Type
	{
		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xC62FD4", Offset = "0xC62FD4", VA = "0xC62FD4")]
		public ES3Type_Quaternion()
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xC6308C", Offset = "0xC6308C", VA = "0xC6308C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BCC")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001BF")]
	public class ES3Type_QuaternionArray : ES3ArrayType
	{
		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xC63284", Offset = "0xC63284", VA = "0xC63284")]
		public ES3Type_QuaternionArray()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "width", "height" })]
	public class ES3Type_Rect : ES3Type
	{
		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xC6335C", Offset = "0xC6335C", VA = "0xC6335C")]
		public ES3Type_Rect()
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xC63414", Offset = "0xC63414", VA = "0xC63414", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BD0")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C1")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"anchorMin", "anchorMax", "anchoredPosition", "sizeDelta", "pivot", "offsetMin", "offsetMax", "localPosition", "localRotation", "localScale",
		"parent", "hideFlags"
	})]
	public class ES3Type_RectTransform : ES3ComponentType
	{
		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xC63638", Offset = "0xC63638", VA = "0xC63638")]
		public ES3Type_RectTransform()
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xC636F0", Offset = "0xC636F0", VA = "0xC636F0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BD3")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001C2")]
	[ES3Properties(new string[]
	{
		"width", "height", "dimension", "graphicsFormat", "useMipMap", "vrUsage", "memorylessMode", "format", "stencilFormat", "autoGenerateMips",
		"volumeDepth", "antiAliasing", "bindTextureMS", "enableRandomWrite", "useDynamicScale", "isPowerOfTwo", "depth", "descriptor", "masterTextureLimit", "anisotropicFiltering",
		"wrapMode", "wrapModeU", "wrapModeV", "wrapModeW", "filterMode", "anisoLevel", "mipMapBias", "imageContentsHash", "streamingTextureForceLoadAll", "streamingTextureDiscardUnusedMips",
		"allowThreadedTextureCreation", "name"
	})]
	[Preserve]
	public class ES3Type_RenderTexture : ES3ObjectType
	{
		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xC63C14", Offset = "0xC63C14", VA = "0xC63C14")]
		public ES3Type_RenderTexture()
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xC63CCC", Offset = "0xC63CCC", VA = "0xC63CCC", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BD6")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000BD7")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C3")]
	public class ES3Type_RenderTextureArray : ES3ArrayType
	{
		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xC64398", Offset = "0xC64398", VA = "0xC64398")]
		public ES3Type_RenderTextureArray()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes", "range" })]
	public class ES3Type_RotationBySpeedModule : ES3Type
	{
		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xC64470", Offset = "0xC64470", VA = "0xC64470")]
		public ES3Type_RotationBySpeedModule()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xC64528", Offset = "0xC64528", VA = "0xC64528", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BDB")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BDC")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001C5")]
	[ES3Properties(new string[] { "enabled", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes" })]
	[Preserve]
	public class ES3Type_RotationOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xC649C0", Offset = "0xC649C0", VA = "0xC649C0")]
		public ES3Type_RotationOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xC64A78", Offset = "0xC64A78", VA = "0xC64A78", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BDF")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BE0")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001C6")]
	[ES3Properties(new string[] { "name", "maximumLOD" })]
	[Preserve]
	public class ES3Type_Shader : ES3Type
	{
		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xC64EA0", Offset = "0xC64EA0", VA = "0xC64EA0")]
		public ES3Type_Shader()
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xC64F58", Offset = "0xC64F58", VA = "0xC64F58", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BE3")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BE4")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001C7")]
	public class ES3Type_ShaderArray : ES3ArrayType
	{
		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xC650B0", Offset = "0xC650B0", VA = "0xC650B0")]
		public ES3Type_ShaderArray()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	[ES3Properties(new string[]
	{
		"enabled", "shapeType", "randomDirectionAmount", "sphericalDirectionAmount", "alignToDirection", "radius", "angle", "length", "box", "meshShapeType",
		"mesh", "meshRenderer", "skinnedMeshRenderer", "useMeshMaterialIndex", "meshMaterialIndex", "useMeshColors", "normalOffset", "meshScale", "arc"
	})]
	[Preserve]
	public class ES3Type_ShapeModule : ES3Type
	{
		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xC65188", Offset = "0xC65188", VA = "0xC65188")]
		public ES3Type_ShapeModule()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xC65240", Offset = "0xC65240", VA = "0xC65240", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BE8")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BE9")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001C9")]
	[ES3Properties(new string[]
	{
		"enabled", "size", "sizeMultiplier", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes",
		"range"
	})]
	[Preserve]
	public class ES3Type_SizeBySpeedModule : ES3Type
	{
		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xC659A8", Offset = "0xC659A8", VA = "0xC659A8")]
		public ES3Type_SizeBySpeedModule()
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xC65A60", Offset = "0xC65A60", VA = "0xC65A60", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BEC")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BED")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001CA")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "size", "sizeMultiplier", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes" })]
	public class ES3Type_SizeOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xC65FBC", Offset = "0xC65FBC", VA = "0xC65FBC")]
		public ES3Type_SizeOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xC66074", Offset = "0xC66074", VA = "0xC66074", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BF0")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BF1")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001CB")]
	[ES3Properties(new string[]
	{
		"bones", "rootBone", "quality", "sharedMesh", "updateWhenOffscreen", "skinnedMotionVectors", "localBounds", "enabled", "shadowCastingMode", "receiveShadows",
		"sharedMaterials", "lightmapIndex", "realtimeLightmapIndex", "lightmapScaleOffset", "motionVectorGenerationMode", "realtimeLightmapScaleOffset", "lightProbeUsage", "lightProbeProxyVolumeOverride", "probeAnchor", "reflectionProbeUsage",
		"sortingLayerName", "sortingLayerID", "sortingOrder"
	})]
	[Preserve]
	public class ES3Type_SkinnedMeshRenderer : ES3ComponentType
	{
		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xC66560", Offset = "0xC66560", VA = "0xC66560")]
		public ES3Type_SkinnedMeshRenderer()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xC66618", Offset = "0xC66618", VA = "0xC66618", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BF4")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public class ES3Type_SkinnedMeshRendererArray : ES3ArrayType
	{
		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xC67058", Offset = "0xC67058", VA = "0xC67058")]
		public ES3Type_SkinnedMeshRendererArray()
		{
		}
	}
	[Token(Token = "0x20001CD")]
	[ES3Properties(new string[] { "texture", "rect", "pivot", "pixelsPerUnit", "border" })]
	[Preserve]
	public class ES3Type_Sprite : ES3UnityObjectType
	{
		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xC67130", Offset = "0xC67130", VA = "0xC67130")]
		public ES3Type_Sprite()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xC671E8", Offset = "0xC671E8", VA = "0xC671E8", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BF8")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000BF9")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CE")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"sprite", "color", "flipX", "flipY", "enabled", "shadowCastingMode", "receiveShadows", "sharedMaterials", "lightmapIndex", "realtimeLightmapIndex",
		"lightmapScaleOffset", "motionVectorGenerationMode", "realtimeLightmapScaleOffset", "lightProbeUsage", "lightProbeProxyVolumeOverride", "probeAnchor", "reflectionProbeUsage", "sortingLayerName", "sortingLayerID", "sortingOrder"
	})]
	public class ES3Type_SpriteRenderer : ES3ComponentType
	{
		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xC67544", Offset = "0xC67544", VA = "0xC67544")]
		public ES3Type_SpriteRenderer()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xC675FC", Offset = "0xC675FC", VA = "0xC675FC", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BFC")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public class ES3Type_SpriteRendererArray : ES3ArrayType
	{
		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xC67E4C", Offset = "0xC67E4C", VA = "0xC67E4C")]
		public ES3Type_SpriteRendererArray()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	[ES3Properties(new string[] { "properties", "systems", "types" })]
	[Preserve]
	public class ES3Type_SubEmittersModule : ES3Type
	{
		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xC67F24", Offset = "0xC67F24", VA = "0xC67F24")]
		public ES3Type_SubEmittersModule()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xC67FDC", Offset = "0xC67FDC", VA = "0xC67FDC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C00")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C01")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001D1")]
	[Preserve]
	[ES3Properties(new string[] { "filterMode", "anisoLevel", "wrapMode", "mipMapBias", "rawTextureData" })]
	public class ES3Type_Texture : ES3Type
	{
		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xC68290", Offset = "0xC68290", VA = "0xC68290")]
		public ES3Type_Texture()
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xC68348", Offset = "0xC68348", VA = "0xC68348", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C04")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000C05")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D2")]
	public class ES3Type_TextureArray : ES3ArrayType
	{
		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xC684DC", Offset = "0xC684DC", VA = "0xC684DC")]
		public ES3Type_TextureArray()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	[ES3Properties(new string[] { "filterMode", "anisoLevel", "wrapMode", "mipMapBias", "rawTextureData" })]
	[Preserve]
	public class ES3Type_Texture2D : ES3UnityObjectType
	{
		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xC685B4", Offset = "0xC685B4", VA = "0xC685B4")]
		public ES3Type_Texture2D()
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xC6866C", Offset = "0xC6866C", VA = "0xC6866C", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C09")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000C0A")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xC68AF4", Offset = "0xC68AF4", VA = "0xC68AF4")]
		protected bool IsReadable(Texture2D instance)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001D4")]
	public class ES3Type_Texture2DArray : ES3ArrayType
	{
		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xC68B7C", Offset = "0xC68B7C", VA = "0xC68B7C")]
		public ES3Type_Texture2DArray()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "numTilesX", "numTilesY", "animation", "useRandomRow", "frameOverTime", "frameOverTimeMultiplier", "startFrame", "startFrameMultiplier", "cycleCount",
		"rowIndex", "uvChannelMask", "flipU", "flipV"
	})]
	public class ES3Type_TextureSheetAnimationModule : ES3Type
	{
		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xC68C54", Offset = "0xC68C54", VA = "0xC68C54")]
		public ES3Type_TextureSheetAnimationModule()
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xC68D0C", Offset = "0xC68D0C", VA = "0xC68D0C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C0F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C10")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001D6")]
	[ES3Properties(new string[]
	{
		"enabled", "ratio", "lifetime", "lifetimeMultiplier", "minVertexDistance", "textureMode", "worldSpace", "dieWithParticles", "sizeAffectsWidth", "sizeAffectsLifetime",
		"inheritParticleColor", "colorOverLifetime", "widthOverTrail", "widthOverTrailMultiplier", "colorOverTrail"
	})]
	[Preserve]
	public class ES3Type_TrailModule : ES3Type
	{
		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xC692CC", Offset = "0xC692CC", VA = "0xC692CC")]
		public ES3Type_TrailModule()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xC69384", Offset = "0xC69384", VA = "0xC69384", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C13")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C14")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001D7")]
	[ES3Properties(new string[] { "enabled", "inside", "outside", "enter", "exit", "radiusScale" })]
	[Preserve]
	public class ES3Type_TriggerModule : ES3Type
	{
		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xC69A94", Offset = "0xC69A94", VA = "0xC69A94")]
		public ES3Type_TriggerModule()
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xC69B4C", Offset = "0xC69B4C", VA = "0xC69B4C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C17")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C18")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001D8")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y" })]
	public class ES3Type_Vector2 : ES3Type
	{
		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xC69E4C", Offset = "0xC69E4C", VA = "0xC69E4C")]
		public ES3Type_Vector2()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xC69F04", Offset = "0xC69F04", VA = "0xC69F04", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C1B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D9")]
	public class ES3Type_Vector2Array : ES3ArrayType
	{
		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xC6A050", Offset = "0xC6A050", VA = "0xC6A050")]
		public ES3Type_Vector2Array()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	[ES3Properties(new string[] { "x", "y" })]
	[Preserve]
	public class ES3Type_Vector2Int : ES3Type
	{
		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xC6A128", Offset = "0xC6A128", VA = "0xC6A128")]
		public ES3Type_Vector2Int()
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xC6A1E0", Offset = "0xC6A1E0", VA = "0xC6A1E0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C1F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001DB")]
	public class ES3Type_Vector2IntArray : ES3ArrayType
	{
		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xC6A330", Offset = "0xC6A330", VA = "0xC6A330")]
		public ES3Type_Vector2IntArray()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "z" })]
	public class ES3Type_Vector3 : ES3Type
	{
		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xC6A408", Offset = "0xC6A408", VA = "0xC6A408")]
		public ES3Type_Vector3()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xC6A4C0", Offset = "0xC6A4C0", VA = "0xC6A4C0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C23")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001DD")]
	public class ES3Type_Vector3Array : ES3ArrayType
	{
		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xC6A664", Offset = "0xC6A664", VA = "0xC6A664")]
		public ES3Type_Vector3Array()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "z" })]
	public class ES3Type_Vector3Int : ES3Type
	{
		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xC6A73C", Offset = "0xC6A73C", VA = "0xC6A73C")]
		public ES3Type_Vector3Int()
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xC6A7F4", Offset = "0xC6A7F4", VA = "0xC6A7F4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C27")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001DF")]
	public class ES3Type_Vector3IntArray : ES3ArrayType
	{
		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xC6A998", Offset = "0xC6A998", VA = "0xC6A998")]
		public ES3Type_Vector3IntArray()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "z", "w" })]
	public class ES3Type_Vector4 : ES3Type
	{
		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xC6AA70", Offset = "0xC6AA70", VA = "0xC6AA70")]
		public ES3Type_Vector4()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xC6AB28", Offset = "0xC6AB28", VA = "0xC6AB28", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C2B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xC6AD20", Offset = "0xC6AD20", VA = "0xC6AD20")]
		public static bool Equals(Vector4 a, Vector4 b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001E1")]
	public class ES3Type_Vector4Array : ES3ArrayType
	{
		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xC6AE58", Offset = "0xC6AE58", VA = "0xC6AE58")]
		public ES3Type_Vector4Array()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "x", "y", "z", "xMultiplier", "yMultiplier", "zMultiplier", "space" })]
	public class ES3Type_VelocityOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xC6AF30", Offset = "0xC6AF30", VA = "0xC6AF30")]
		public ES3Type_VelocityOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xC6AFE8", Offset = "0xC6AFE8", VA = "0xC6AFE8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C30")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C31")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
}
namespace ES3Internal
{
	[Token(Token = "0x20001E3")]
	internal static class ES3Debug
	{
		[Token(Token = "0x4000834")]
		private const string disableInfoMsg = "\n<i>To disable these messages from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Info'</i>";

		[Token(Token = "0x4000835")]
		private const string disableWarningMsg = "\n<i>To disable warnings from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Warnings'</i>";

		[Token(Token = "0x4000836")]
		private const string disableErrorMsg = "\n<i>To disable these error messages from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Errors'</i>";

		[Token(Token = "0x4000837")]
		private const char indentChar = '-';

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xC6B404", Offset = "0xC6B404", VA = "0xC6B404")]
		public static void Log(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xC61318", Offset = "0xC61318", VA = "0xC61318")]
		public static void LogWarning(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xC6B610", Offset = "0xC6B610", VA = "0xC6B610")]
		public static void LogError(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xC6B5AC", Offset = "0xC6B5AC", VA = "0xC6B5AC")]
		private static string Indent(int size)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E4")]
	public static class ES3Hash
	{
		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xC6B794", Offset = "0xC6B794", VA = "0xC6B794")]
		public static string SHA1Hash(string input)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E5")]
	public abstract class EncryptionAlgorithm
	{
		[Token(Token = "0x6000C37")]
		public abstract byte[] Encrypt(byte[] bytes, string password, int bufferSize);

		[Token(Token = "0x6000C38")]
		public abstract byte[] Decrypt(byte[] bytes, string password, int bufferSize);

		[Token(Token = "0x6000C39")]
		public abstract void Encrypt(Stream input, Stream output, string password, int bufferSize);

		[Token(Token = "0x6000C3A")]
		public abstract void Decrypt(Stream input, Stream output, string password, int bufferSize);

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xC6B990", Offset = "0xC6B990", VA = "0xC6B990")]
		protected static void CopyStream(Stream input, Stream output, int bufferSize)
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xC6BA70", Offset = "0xC6BA70", VA = "0xC6BA70")]
		protected EncryptionAlgorithm()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class AESEncryptionAlgorithm : EncryptionAlgorithm
	{
		[Token(Token = "0x4000838")]
		private const int ivSize = 16;

		[Token(Token = "0x4000839")]
		private const int keySize = 16;

		[Token(Token = "0x400083A")]
		private const int pwIterations = 100;

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xC6BA78", Offset = "0xC6BA78", VA = "0xC6BA78", Slot = "4")]
		public override byte[] Encrypt(byte[] bytes, string password, int bufferSize)
		{
			return null;
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xC6BD98", Offset = "0xC6BD98", VA = "0xC6BD98", Slot = "5")]
		public override byte[] Decrypt(byte[] bytes, string password, int bufferSize)
		{
			return null;
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xC6C0B8", Offset = "0xC6C0B8", VA = "0xC6C0B8", Slot = "6")]
		public override void Encrypt(Stream input, Stream output, string password, int bufferSize)
		{
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xC6C614", Offset = "0xC6C614", VA = "0xC6C614", Slot = "7")]
		public override void Decrypt(Stream input, Stream output, string password, int bufferSize)
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xC6CBAC", Offset = "0xC6CBAC", VA = "0xC6CBAC")]
		public AESEncryptionAlgorithm()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class UnbufferedCryptoStream : MemoryStream
	{
		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Stream stream;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly bool isReadStream;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string password;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int bufferSize;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private EncryptionAlgorithm alg;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool disposed;

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xC6CBB4", Offset = "0xC6CBB4", VA = "0xC6CBB4")]
		public UnbufferedCryptoStream(Stream stream, bool isReadStream, string password, int bufferSize, EncryptionAlgorithm alg)
		{
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0xC6CC70", Offset = "0xC6CC70", VA = "0xC6CC70", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public struct ES3Data
	{
		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ES3Type type;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte[] bytes;

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xC6CCF4", Offset = "0xC6CCF4", VA = "0xC6CCF4")]
		public ES3Data(Type type, byte[] bytes)
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xC6CFB4", Offset = "0xC6CFB4", VA = "0xC6CFB4")]
		public ES3Data(ES3Type type, byte[] bytes)
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public static class ES3IO
	{
		[Token(Token = "0x20001EA")]
		public enum ES3FileMode
		{
			[Token(Token = "0x4000847")]
			Read,
			[Token(Token = "0x4000848")]
			Write,
			[Token(Token = "0x4000849")]
			Append
		}

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string persistentDataPath;

		[Token(Token = "0x4000844")]
		internal const string backupFileSuffix = ".bac";

		[Token(Token = "0x4000845")]
		internal const string temporaryFileSuffix = ".tmp";

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xC6CFE4", Offset = "0xC6CFE4", VA = "0xC6CFE4")]
		public static DateTime GetTimestamp(string filePath)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xC6D0B4", Offset = "0xC6D0B4", VA = "0xC6D0B4")]
		public static string GetExtension(string path)
		{
			return null;
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xC6D10C", Offset = "0xC6D10C", VA = "0xC6D10C")]
		public static void DeleteFile(string filePath)
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xC6D0AC", Offset = "0xC6D0AC", VA = "0xC6D0AC")]
		public static bool FileExists(string filePath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xC6D180", Offset = "0xC6D180", VA = "0xC6D180")]
		public static void MoveFile(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xC6D188", Offset = "0xC6D188", VA = "0xC6D188")]
		public static void CopyFile(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xC6D190", Offset = "0xC6D190", VA = "0xC6D190")]
		public static void MoveDirectory(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xC6D198", Offset = "0xC6D198", VA = "0xC6D198")]
		public static void CreateDirectory(string directoryPath)
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xC6D1A0", Offset = "0xC6D1A0", VA = "0xC6D1A0")]
		public static bool DirectoryExists(string directoryPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xC6D1A8", Offset = "0xC6D1A8", VA = "0xC6D1A8")]
		public static string GetDirectoryPath(string path, char seperator = '/')
		{
			return null;
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xC6D2A0", Offset = "0xC6D2A0", VA = "0xC6D2A0")]
		public static bool UsesForwardSlash(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xC6D2F4", Offset = "0xC6D2F4", VA = "0xC6D2F4")]
		public static string CombinePathAndFilename(string directoryPath, string fileOrDirectoryName)
		{
			return null;
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xC6D3A0", Offset = "0xC6D3A0", VA = "0xC6D3A0")]
		public static string[] GetDirectories(string path, bool getFullPaths = true)
		{
			return null;
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xC6D500", Offset = "0xC6D500", VA = "0xC6D500")]
		public static void DeleteDirectory(string directoryPath)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xC6D578", Offset = "0xC6D578", VA = "0xC6D578")]
		public static string[] GetFiles(string path, bool getFullPaths = true)
		{
			return null;
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xC6D68C", Offset = "0xC6D68C", VA = "0xC6D68C")]
		public static byte[] ReadAllBytes(string path)
		{
			return null;
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xC6D694", Offset = "0xC6D694", VA = "0xC6D694")]
		public static void WriteAllBytes(string path, byte[] bytes)
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xC6D69C", Offset = "0xC6D69C", VA = "0xC6D69C")]
		public static void CommitBackup(ES3Settings settings)
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class ES3Prefab : MonoBehaviour
	{
		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long prefabId;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3RefIdDictionary localRefs;

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xC6DAF0", Offset = "0xC6DAF0", VA = "0xC6DAF0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xC6E148", Offset = "0xC6E148", VA = "0xC6E148")]
		public long Get(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xC6E1C0", Offset = "0xC6E1C0", VA = "0xC6E1C0")]
		public long Add(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xC6E2E0", Offset = "0xC6E2E0", VA = "0xC6E2E0")]
		public Dictionary<string, string> GetReferences()
		{
			return null;
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xC6E550", Offset = "0xC6E550", VA = "0xC6E550")]
		public void ApplyReferences(Dictionary<long, long> localToGlobal)
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0xC6E294", Offset = "0xC6E294", VA = "0xC6E294")]
		public static long GetNewRefID()
		{
			return default(long);
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0xC6EAF0", Offset = "0xC6EAF0", VA = "0xC6EAF0")]
		public ES3Prefab()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001EC")]
	[DisallowMultipleComponent]
	public abstract class ES3ReferenceMgrBase : MonoBehaviour
	{
		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object _lock;

		[Token(Token = "0x400084D")]
		public const string referencePropertyName = "_ES3Ref";

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ES3ReferenceMgrBase _current;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static HashSet<ES3ReferenceMgrBase> mgrs;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static System.Random rng;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool openPrefabs;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<ES3Prefab> prefabs;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public ES3IdRefDictionary idRef;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ES3RefIdDictionary _refId;

		[Token(Token = "0x17000121")]
		public static ES3ReferenceMgrBase Current
		{
			[Token(Token = "0x6000C60")]
			[Address(RVA = "0xC6DCDC", Offset = "0xC6DCDC", VA = "0xC6DCDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000122")]
		public bool IsInitialised
		{
			[Token(Token = "0x6000C61")]
			[Address(RVA = "0xC6EBB0", Offset = "0xC6EBB0", VA = "0xC6EBB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000123")]
		public ES3RefIdDictionary refId
		{
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xC6EC0C", Offset = "0xC6EC0C", VA = "0xC6EC0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0xC6EE1C", Offset = "0xC6EE1C", VA = "0xC6EE1C")]
			set
			{
			}
		}

		[Token(Token = "0x17000124")]
		public ES3GlobalReferences GlobalReferences
		{
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xC6EE24", Offset = "0xC6EE24", VA = "0xC6EE24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0xC6EE34", Offset = "0xC6EE34", VA = "0xC6EE34")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xC6F1E4", Offset = "0xC6F1E4", VA = "0xC6F1E4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xC6F090", Offset = "0xC6F090", VA = "0xC6F090")]
		public void Merge(ES3ReferenceMgrBase otherMgr)
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xC6F264", Offset = "0xC6F264", VA = "0xC6F264")]
		public long Get(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xC6F4C4", Offset = "0xC6F4C4", VA = "0xC6F4C4")]
		internal UnityEngine.Object Get(long id, Type type, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xC6FA7C", Offset = "0xC6FA7C", VA = "0xC6FA7C")]
		public UnityEngine.Object Get(long id, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xC6FA88", Offset = "0xC6FA88", VA = "0xC6FA88")]
		public ES3Prefab GetPrefab(long id, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xC6FE5C", Offset = "0xC6FE5C", VA = "0xC6FE5C")]
		public long GetPrefab(ES3Prefab prefabToFind, bool suppressWarnings = false)
		{
			return default(long);
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xC6DFAC", Offset = "0xC6DFAC", VA = "0xC6DFAC")]
		public long Add(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xC6E794", Offset = "0xC6E794", VA = "0xC6E794")]
		public long Add(UnityEngine.Object obj, long id)
		{
			return default(long);
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xC7023C", Offset = "0xC7023C", VA = "0xC7023C")]
		public bool AddPrefab(ES3Prefab prefab)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xC70324", Offset = "0xC70324", VA = "0xC70324")]
		public void Remove(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xC70858", Offset = "0xC70858", VA = "0xC70858")]
		public void Remove(long referenceID)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xC70D84", Offset = "0xC70D84", VA = "0xC70D84")]
		public void RemoveNullOrInvalidValues()
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xC710D8", Offset = "0xC710D8", VA = "0xC710D8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xC711FC", Offset = "0xC711FC", VA = "0xC711FC")]
		public bool Contains(UnityEngine.Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xC71258", Offset = "0xC71258", VA = "0xC71258")]
		public bool Contains(long referenceID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xC712B0", Offset = "0xC712B0", VA = "0xC712B0")]
		public void ChangeId(long oldId, long newId)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xC6E968", Offset = "0xC6E968", VA = "0xC6E968")]
		internal static long GetNewRefID()
		{
			return default(long);
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xC6E28C", Offset = "0xC6E28C", VA = "0xC6E28C")]
		internal static bool CanBeSaved(UnityEngine.Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xC714BC", Offset = "0xC714BC", VA = "0xC714BC")]
		protected ES3ReferenceMgrBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F0")]
	public class ES3IdRefDictionary : ES3SerializableDictionary<long, UnityEngine.Object>
	{
		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xC718C0", Offset = "0xC718C0", VA = "0xC718C0", Slot = "48")]
		protected override bool KeysAreEqual(long a, long b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xC718CC", Offset = "0xC718CC", VA = "0xC718CC", Slot = "49")]
		protected override bool ValuesAreEqual(UnityEngine.Object a, UnityEngine.Object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xC715B8", Offset = "0xC715B8", VA = "0xC715B8")]
		public ES3IdRefDictionary()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F1")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class ES3RefIdDictionary : ES3SerializableDictionary<UnityEngine.Object, long>
	{
		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xC71934", Offset = "0xC71934", VA = "0xC71934", Slot = "48")]
		protected override bool KeysAreEqual(UnityEngine.Object a, UnityEngine.Object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xC7199C", Offset = "0xC7199C", VA = "0xC7199C", Slot = "49")]
		protected override bool ValuesAreEqual(long a, long b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xC6EB68", Offset = "0xC6EB68", VA = "0xC6EB68")]
		public ES3RefIdDictionary()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	public static class ES3Reflection
	{
		[Token(Token = "0x20001F3")]
		public struct ES3ReflectedMember
		{
			[Token(Token = "0x4000868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private FieldInfo fieldInfo;

			[Token(Token = "0x4000869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private PropertyInfo propertyInfo;

			[Token(Token = "0x400086A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isProperty;

			[Token(Token = "0x17000126")]
			public bool IsNull
			{
				[Token(Token = "0x6000CB3")]
				[Address(RVA = "0xC75CB4", Offset = "0xC75CB4", VA = "0xC75CB4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000127")]
			public string Name
			{
				[Token(Token = "0x6000CB4")]
				[Address(RVA = "0xC75CF0", Offset = "0xC75CF0", VA = "0xC75CF0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000128")]
			public Type MemberType
			{
				[Token(Token = "0x6000CB5")]
				[Address(RVA = "0xC75D20", Offset = "0xC75D20", VA = "0xC75D20")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000129")]
			public bool IsPublic
			{
				[Token(Token = "0x6000CB6")]
				[Address(RVA = "0xC75D64", Offset = "0xC75D64", VA = "0xC75D64")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700012A")]
			public bool IsProtected
			{
				[Token(Token = "0x6000CB7")]
				[Address(RVA = "0xC75DF0", Offset = "0xC75DF0", VA = "0xC75DF0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700012B")]
			public bool IsStatic
			{
				[Token(Token = "0x6000CB8")]
				[Address(RVA = "0xC75E40", Offset = "0xC75E40", VA = "0xC75E40")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0xC73774", Offset = "0xC73774", VA = "0xC73774")]
			public ES3ReflectedMember(object fieldPropertyInfo)
			{
			}

			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0xC75E90", Offset = "0xC75E90", VA = "0xC75E90")]
			public void SetValue(object obj, object value)
			{
			}

			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0xC75ED4", Offset = "0xC75ED4", VA = "0xC75ED4")]
			public object GetValue(object obj)
			{
				return null;
			}
		}

		[Token(Token = "0x20001F4")]
		public class ES3ReflectedMethod
		{
			[Token(Token = "0x400086B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MethodInfo method;

			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0xC74178", Offset = "0xC74178", VA = "0xC74178")]
			public ES3ReflectedMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes)
			{
			}

			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0xC75F20", Offset = "0xC75F20", VA = "0xC75F20")]
			public ES3ReflectedMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes, BindingFlags bindingAttr)
			{
			}

			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0xC75FB0", Offset = "0xC75FB0", VA = "0xC75FB0")]
			public object Invoke(object obj, [Optional] object[] parameters)
			{
				return null;
			}
		}

		[Token(Token = "0x400085C")]
		public const string memberFieldPrefix = "m_";

		[Token(Token = "0x400085D")]
		public const string componentTagFieldName = "tag";

		[Token(Token = "0x400085E")]
		public const string componentNameFieldName = "name";

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string[] excludedPropertyNames;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Type serializableAttributeType;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Type serializeFieldAttributeType;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Type obsoleteAttributeType;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Type nonSerializedAttributeType;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly Type es3SerializableAttributeType;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Type es3NonSerializableAttributeType;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Type[] EmptyTypes;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Assembly[] _assemblies;

		[Token(Token = "0x17000125")]
		private static Assembly[] Assemblies
		{
			[Token(Token = "0x6000C89")]
			[Address(RVA = "0xC719A8", Offset = "0xC719A8", VA = "0xC719A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xC71CAC", Offset = "0xC71CAC", VA = "0xC71CAC")]
		public static Type[] GetElementTypes(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xC71E54", Offset = "0xC71E54", VA = "0xC71E54")]
		public static List<FieldInfo> GetSerializableFields(Type type, [Optional] List<FieldInfo> serializableFields, bool safe = true, [Optional] string[] memberNames, BindingFlags bindings = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
		{
			return null;
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xC727A4", Offset = "0xC727A4", VA = "0xC727A4")]
		public static List<PropertyInfo> GetSerializableProperties(Type type, [Optional] List<PropertyInfo> serializableProperties, bool safe = true, [Optional] string[] memberNames, BindingFlags bindings = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
		{
			return null;
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xC72488", Offset = "0xC72488", VA = "0xC72488")]
		public static bool TypeIsSerializable(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xC73000", Offset = "0xC73000", VA = "0xC73000")]
		public static object CreateInstance(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xC73170", Offset = "0xC73170", VA = "0xC73170")]
		public static object CreateInstance(Type type, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xC732E8", Offset = "0xC732E8", VA = "0xC732E8")]
		public static Array ArrayCreateInstance(Type type, int length)
		{
			return null;
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xC73364", Offset = "0xC73364", VA = "0xC73364")]
		public static Array ArrayCreateInstance(Type type, int[] dimensions)
		{
			return null;
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xC7336C", Offset = "0xC7336C", VA = "0xC7336C")]
		public static Type MakeGenericType(Type type, Type genericParam)
		{
			return null;
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xC73428", Offset = "0xC73428", VA = "0xC73428")]
		public static ES3ReflectedMember[] GetSerializableMembers(Type type, bool safe = true, [Optional] string[] memberNames)
		{
			return null;
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xC7399C", Offset = "0xC7399C", VA = "0xC7399C")]
		public static ES3ReflectedMember GetES3ReflectedProperty(Type type, string propertyName)
		{
			return default(ES3ReflectedMember);
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xC73B58", Offset = "0xC73B58", VA = "0xC73B58")]
		public static ES3ReflectedMember GetES3ReflectedMember(Type type, string fieldName)
		{
			return default(ES3ReflectedMember);
		}

		[Token(Token = "0x6000C96")]
		public static IList<T> GetInstances<T>()
		{
			return null;
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xC73D1C", Offset = "0xC73D1C", VA = "0xC73D1C")]
		public static IList<Type> GetDerivedTypes(Type derivedType)
		{
			return null;
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xC72468", Offset = "0xC72468", VA = "0xC72468")]
		public static bool IsAssignableFrom(Type a, Type b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xC74090", Offset = "0xC74090", VA = "0xC74090")]
		public static Type GetGenericTypeDefinition(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xC71E14", Offset = "0xC71E14", VA = "0xC71E14")]
		public static Type[] GetGenericArguments(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xC740B0", Offset = "0xC740B0", VA = "0xC740B0")]
		public static int GetArrayRank(Type type)
		{
			return default(int);
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xC740D0", Offset = "0xC740D0", VA = "0xC740D0")]
		public static string GetAssemblyQualifiedName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xC740F0", Offset = "0xC740F0", VA = "0xC740F0")]
		public static ES3ReflectedMethod GetMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes)
		{
			return null;
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xC72F00", Offset = "0xC72F00", VA = "0xC72F00")]
		public static bool TypeIsArray(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xC71E34", Offset = "0xC71E34", VA = "0xC71E34")]
		public static Type GetElementType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xC741F0", Offset = "0xC741F0", VA = "0xC741F0")]
		public static bool IsAbstract(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xC74204", Offset = "0xC74204", VA = "0xC74204")]
		public static bool IsInterface(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xC71DF4", Offset = "0xC71DF4", VA = "0xC71DF4")]
		public static bool IsGenericType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xC72EEC", Offset = "0xC72EEC", VA = "0xC72EEC")]
		public static bool IsValueType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xC74218", Offset = "0xC74218", VA = "0xC74218")]
		public static bool IsEnum(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xC72F14", Offset = "0xC72F14", VA = "0xC72F14")]
		public static bool HasParameterlessConstructor(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xC74238", Offset = "0xC74238", VA = "0xC74238")]
		public static ConstructorInfo GetParameterlessConstructor(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xC742A4", Offset = "0xC742A4", VA = "0xC742A4")]
		public static string GetShortAssemblyQualifiedName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xC73A18", Offset = "0xC73A18", VA = "0xC73A18")]
		public static PropertyInfo GetProperty(Type type, string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xC73BD4", Offset = "0xC73BD4", VA = "0xC73BD4")]
		public static FieldInfo GetField(Type type, string fieldName)
		{
			return null;
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xC74384", Offset = "0xC74384", VA = "0xC74384")]
		public static MethodInfo[] GetMethods(Type type, string methodName)
		{
			return null;
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xC72DFC", Offset = "0xC72DFC", VA = "0xC72DFC")]
		public static bool IsPrimitive(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xC7245C", Offset = "0xC7245C", VA = "0xC7245C")]
		public static bool AttributeIsDefined(MemberInfo info, Type attributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xC72DDC", Offset = "0xC72DDC", VA = "0xC72DDC")]
		public static bool AttributeIsDefined(Type type, Type attributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xC744A0", Offset = "0xC744A0", VA = "0xC744A0")]
		public static bool ImplementsInterface(Type type, Type interfaceType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xC72784", Offset = "0xC72784", VA = "0xC72784")]
		public static Type BaseType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xC74534", Offset = "0xC74534", VA = "0xC74534")]
		public static Type GetType(string typeString)
		{
			return null;
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xC74EF0", Offset = "0xC74EF0", VA = "0xC74EF0")]
		public static string GetTypeString(Type type)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001F8")]
	public abstract class ES3SerializableDictionary<TKey, TVal> : Dictionary<TKey, TVal>, ISerializationCallbackReceiver
	{
		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<TKey> _Keys;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<TVal> _Values;

		[Token(Token = "0x6000CC8")]
		protected abstract bool KeysAreEqual(TKey a, TKey b);

		[Token(Token = "0x6000CC9")]
		protected abstract bool ValuesAreEqual(TVal a, TVal b);

		[Token(Token = "0x6000CCA")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000CCB")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000CCC")]
		public int RemoveNullValues()
		{
			return default(int);
		}

		[Token(Token = "0x6000CCD")]
		public bool ChangeKey(TKey oldKey, TKey newKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCE")]
		protected ES3SerializableDictionary()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class ES3BinaryReader : ES3Reader
	{
		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BinaryReader baseReader;

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xC761F0", Offset = "0xC761F0", VA = "0xC761F0")]
		internal ES3BinaryReader(Stream stream, ES3Settings settings, bool readHeaderAndFooter = true)
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xC76290", Offset = "0xC76290", VA = "0xC76290", Slot = "21")]
		public override string ReadPropertyName()
		{
			return null;
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xC76370", Offset = "0xC76370", VA = "0xC76370", Slot = "22")]
		protected override Type ReadKeyPrefix(bool ignoreType = false)
		{
			return null;
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xC7653C", Offset = "0xC7653C", VA = "0xC7653C", Slot = "23")]
		protected override void ReadKeySuffix()
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xC76540", Offset = "0xC76540", VA = "0xC76540", Slot = "27")]
		internal override bool StartReadObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xC76548", Offset = "0xC76548", VA = "0xC76548", Slot = "28")]
		internal override void EndReadObject()
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xC76550", Offset = "0xC76550", VA = "0xC76550", Slot = "29")]
		internal override bool StartReadDictionary()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xC76558", Offset = "0xC76558", VA = "0xC76558", Slot = "30")]
		internal override void EndReadDictionary()
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xC7655C", Offset = "0xC7655C", VA = "0xC7655C", Slot = "31")]
		internal override bool StartReadDictionaryKey()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xC76564", Offset = "0xC76564", VA = "0xC76564", Slot = "32")]
		internal override void EndReadDictionaryKey()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xC76568", Offset = "0xC76568", VA = "0xC76568", Slot = "33")]
		internal override void StartReadDictionaryValue()
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xC7656C", Offset = "0xC7656C", VA = "0xC7656C", Slot = "34")]
		internal override bool EndReadDictionaryValue()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xC76574", Offset = "0xC76574", VA = "0xC76574", Slot = "35")]
		internal override bool StartReadCollection()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xC7657C", Offset = "0xC7657C", VA = "0xC7657C", Slot = "36")]
		internal override void EndReadCollection()
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xC76580", Offset = "0xC76580", VA = "0xC76580", Slot = "37")]
		internal override bool StartReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xC76588", Offset = "0xC76588", VA = "0xC76588", Slot = "38")]
		internal override bool EndReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xC76590", Offset = "0xC76590", VA = "0xC76590", Slot = "26")]
		internal override bool Goto(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xC76620", Offset = "0xC76620", VA = "0xC76620")]
		protected void Reset()
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xC76650", Offset = "0xC76650", VA = "0xC76650", Slot = "24")]
		internal override byte[] ReadElement(bool skip = false)
		{
			return null;
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xC768FC", Offset = "0xC768FC", VA = "0xC768FC")]
		private void ReadElement(BinaryWriter writer, bool skip = false)
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xC76DCC", Offset = "0xC76DCC", VA = "0xC76DCC")]
		public void ReadIntoWriter(ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xC76DD0", Offset = "0xC76DD0", VA = "0xC76DD0", Slot = "20")]
		internal override long Read_ref()
		{
			return default(long);
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xC76EC8", Offset = "0xC76EC8", VA = "0xC76EC8", Slot = "18")]
		internal override string Read_string()
		{
			return null;
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xC76EEC", Offset = "0xC76EEC", VA = "0xC76EEC", Slot = "8")]
		internal override char Read_char()
		{
			return default(char);
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xC76F0C", Offset = "0xC76F0C", VA = "0xC76F0C", Slot = "6")]
		internal override float Read_float()
		{
			return default(float);
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xC76F30", Offset = "0xC76F30", VA = "0xC76F30", Slot = "5")]
		internal override int Read_int()
		{
			return default(int);
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xC76F54", Offset = "0xC76F54", VA = "0xC76F54", Slot = "7")]
		internal override bool Read_bool()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xC76F74", Offset = "0xC76F74", VA = "0xC76F74", Slot = "9")]
		internal override decimal Read_decimal()
		{
			return default(decimal);
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xC76F98", Offset = "0xC76F98", VA = "0xC76F98", Slot = "10")]
		internal override double Read_double()
		{
			return default(double);
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xC76FBC", Offset = "0xC76FBC", VA = "0xC76FBC", Slot = "11")]
		internal override long Read_long()
		{
			return default(long);
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xC76FE0", Offset = "0xC76FE0", VA = "0xC76FE0", Slot = "12")]
		internal override ulong Read_ulong()
		{
			return default(ulong);
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xC77004", Offset = "0xC77004", VA = "0xC77004", Slot = "17")]
		internal override uint Read_uint()
		{
			return default(uint);
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xC77028", Offset = "0xC77028", VA = "0xC77028", Slot = "13")]
		internal override byte Read_byte()
		{
			return default(byte);
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xC77048", Offset = "0xC77048", VA = "0xC77048", Slot = "14")]
		internal override sbyte Read_sbyte()
		{
			return default(sbyte);
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xC77068", Offset = "0xC77068", VA = "0xC77068", Slot = "15")]
		internal override short Read_short()
		{
			return default(short);
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xC7708C", Offset = "0xC7708C", VA = "0xC7708C", Slot = "16")]
		internal override ushort Read_ushort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xC770B0", Offset = "0xC770B0", VA = "0xC770B0", Slot = "19")]
		internal override byte[] Read_byteArray()
		{
			return null;
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xC770F0", Offset = "0xC770F0", VA = "0xC770F0", Slot = "25")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	public class ES3JSONReader : ES3Reader
	{
		[Token(Token = "0x4000878")]
		private const char endOfStreamChar = '\uffff';

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StreamReader baseReader;

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xC77110", Offset = "0xC77110", VA = "0xC77110")]
		internal ES3JSONReader(Stream stream, ES3Settings settings, bool readHeaderAndFooter = true)
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xC77338", Offset = "0xC77338", VA = "0xC77338", Slot = "21")]
		public override string ReadPropertyName()
		{
			return null;
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xC7788C", Offset = "0xC7788C", VA = "0xC7788C", Slot = "22")]
		protected override Type ReadKeyPrefix(bool ignoreType = false)
		{
			return null;
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xC77A28", Offset = "0xC77A28", VA = "0xC77A28", Slot = "23")]
		protected override void ReadKeySuffix()
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xC77A38", Offset = "0xC77A38", VA = "0xC77A38", Slot = "27")]
		internal override bool StartReadObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xC77D2C", Offset = "0xC77D2C", VA = "0xC77D2C", Slot = "28")]
		internal override void EndReadObject()
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xC77D4C", Offset = "0xC77D4C", VA = "0xC77D4C", Slot = "29")]
		internal override bool StartReadDictionary()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xC77D5C", Offset = "0xC77D5C", VA = "0xC77D5C", Slot = "30")]
		internal override void EndReadDictionary()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xC77D60", Offset = "0xC77D60", VA = "0xC77D60", Slot = "31")]
		internal override bool StartReadDictionaryKey()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xC77D98", Offset = "0xC77D98", VA = "0xC77D98", Slot = "32")]
		internal override void EndReadDictionaryKey()
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xC77DA0", Offset = "0xC77DA0", VA = "0xC77DA0", Slot = "33")]
		internal override void StartReadDictionaryValue()
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xC77DA4", Offset = "0xC77DA4", VA = "0xC77DA4", Slot = "34")]
		internal override bool EndReadDictionaryValue()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xC77E68", Offset = "0xC77E68", VA = "0xC77E68", Slot = "35")]
		internal override bool StartReadCollection()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xC77E70", Offset = "0xC77E70", VA = "0xC77E70", Slot = "36")]
		internal override void EndReadCollection()
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xC77E74", Offset = "0xC77E74", VA = "0xC77E74", Slot = "37")]
		internal override bool StartReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xC77EAC", Offset = "0xC77EAC", VA = "0xC77EAC", Slot = "38")]
		internal override bool EndReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xC77F70", Offset = "0xC77F70", VA = "0xC77F70")]
		private void ReadString(StreamWriter writer, bool skip = false)
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xC78098", Offset = "0xC78098", VA = "0xC78098", Slot = "24")]
		internal override byte[] ReadElement(bool skip = false)
		{
			return null;
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xC7803C", Offset = "0xC7803C", VA = "0xC7803C")]
		private char ReadOrSkipChar(StreamWriter writer, bool skip)
		{
			return default(char);
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xC77588", Offset = "0xC77588", VA = "0xC77588")]
		private char ReadCharIgnoreWhitespace(bool ignoreTrailingWhitespace = true)
		{
			return default(char);
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xC77A58", Offset = "0xC77A58", VA = "0xC77A58")]
		private bool ReadNullOrCharIgnoreWhitespace(char expectedChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xC77684", Offset = "0xC77684", VA = "0xC77684")]
		private char ReadCharIgnoreWhitespace(char expectedChar)
		{
			return default(char);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xC78644", Offset = "0xC78644", VA = "0xC78644")]
		private bool ReadQuotationMarkOrNullIgnoreWhitespace()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xC78820", Offset = "0xC78820", VA = "0xC78820")]
		private char PeekCharIgnoreWhitespace(char expectedChar)
		{
			return default(char);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xC77500", Offset = "0xC77500", VA = "0xC77500")]
		private char PeekCharIgnoreWhitespace()
		{
			return default(char);
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xC78A24", Offset = "0xC78A24", VA = "0xC78A24")]
		private void SkipWhiteSpace()
		{
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xC77288", Offset = "0xC77288", VA = "0xC77288")]
		private void SkipOpeningBraceOfFile()
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xC7860C", Offset = "0xC7860C", VA = "0xC7860C")]
		private static bool IsWhiteSpace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xC78588", Offset = "0xC78588", VA = "0xC78588")]
		private static bool IsOpeningBrace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xC7859C", Offset = "0xC7859C", VA = "0xC7859C")]
		private static bool IsEndOfValue(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xC77574", Offset = "0xC77574", VA = "0xC77574")]
		private static bool IsTerminator(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xC7765C", Offset = "0xC7765C", VA = "0xC7765C")]
		private static bool IsQuotationMark(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xC78A98", Offset = "0xC78A98", VA = "0xC78A98")]
		private static bool IsEndOfStream(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xC78AA8", Offset = "0xC78AA8", VA = "0xC78AA8")]
		private string GetValueString()
		{
			return null;
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xC78B68", Offset = "0xC78B68", VA = "0xC78B68", Slot = "18")]
		internal override string Read_string()
		{
			return null;
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xC78D08", Offset = "0xC78D08", VA = "0xC78D08", Slot = "20")]
		internal override long Read_ref()
		{
			return default(long);
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xC78E3C", Offset = "0xC78E3C", VA = "0xC78E3C", Slot = "8")]
		internal override char Read_char()
		{
			return default(char);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xC78EB0", Offset = "0xC78EB0", VA = "0xC78EB0", Slot = "6")]
		internal override float Read_float()
		{
			return default(float);
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xC78F24", Offset = "0xC78F24", VA = "0xC78F24", Slot = "5")]
		internal override int Read_int()
		{
			return default(int);
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xC78F38", Offset = "0xC78F38", VA = "0xC78F38", Slot = "7")]
		internal override bool Read_bool()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xC78FA0", Offset = "0xC78FA0", VA = "0xC78FA0", Slot = "9")]
		internal override decimal Read_decimal()
		{
			return default(decimal);
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xC79040", Offset = "0xC79040", VA = "0xC79040", Slot = "10")]
		internal override double Read_double()
		{
			return default(double);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xC790B4", Offset = "0xC790B4", VA = "0xC790B4", Slot = "11")]
		internal override long Read_long()
		{
			return default(long);
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xC790C8", Offset = "0xC790C8", VA = "0xC790C8", Slot = "12")]
		internal override ulong Read_ulong()
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xC790DC", Offset = "0xC790DC", VA = "0xC790DC", Slot = "17")]
		internal override uint Read_uint()
		{
			return default(uint);
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xC790F0", Offset = "0xC790F0", VA = "0xC790F0", Slot = "13")]
		internal override byte Read_byte()
		{
			return default(byte);
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xC79108", Offset = "0xC79108", VA = "0xC79108", Slot = "14")]
		internal override sbyte Read_sbyte()
		{
			return default(sbyte);
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xC79120", Offset = "0xC79120", VA = "0xC79120", Slot = "15")]
		internal override short Read_short()
		{
			return default(short);
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xC79138", Offset = "0xC79138", VA = "0xC79138", Slot = "16")]
		internal override ushort Read_ushort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xC79150", Offset = "0xC79150", VA = "0xC79150", Slot = "19")]
		internal override byte[] Read_byteArray()
		{
			return null;
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xC791C4", Offset = "0xC791C4", VA = "0xC791C4", Slot = "25")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public class ES3GlobalReferences : ScriptableObject
	{
		[Token(Token = "0x1700012C")]
		public static ES3GlobalReferences Instance
		{
			[Token(Token = "0x6000D2C")]
			[Address(RVA = "0xC6EE2C", Offset = "0xC6EE2C", VA = "0xC6EE2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xC6FA74", Offset = "0xC6FA74", VA = "0xC6FA74")]
		public UnityEngine.Object Get(long id)
		{
			return null;
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xC70234", Offset = "0xC70234", VA = "0xC70234")]
		public long GetOrAdd(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xC710D4", Offset = "0xC710D4", VA = "0xC710D4")]
		public void RemoveInvalidKeys()
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xC791E0", Offset = "0xC791E0", VA = "0xC791E0")]
		public ES3GlobalReferences()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class ES3DefaultSettings : MonoBehaviour
	{
		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public ES3SerializableSettings settings;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool autoUpdateReferences;

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xC791E8", Offset = "0xC791E8", VA = "0xC791E8")]
		public ES3DefaultSettings()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public enum ES3FileMode
	{
		[Token(Token = "0x400087D")]
		Read,
		[Token(Token = "0x400087E")]
		Write,
		[Token(Token = "0x400087F")]
		Append
	}
	[Token(Token = "0x20001FF")]
	public class ES3FileStream : FileStream
	{
		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isDisposed;

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xC791F8", Offset = "0xC791F8", VA = "0xC791F8")]
		public ES3FileStream(string path, ES3FileMode fileMode, int bufferSize, bool useAsync)
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xC792BC", Offset = "0xC792BC", VA = "0xC792BC")]
		protected static string GetPath(string path, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xC793AC", Offset = "0xC793AC", VA = "0xC793AC")]
		protected static FileMode GetFileMode(ES3FileMode fileMode)
		{
			return default(FileMode);
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xC793CC", Offset = "0xC793CC", VA = "0xC793CC")]
		protected static FileAccess GetFileAccess(ES3FileMode fileMode)
		{
			return default(FileAccess);
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xC793DC", Offset = "0xC793DC", VA = "0xC793DC", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000200")]
	internal class ES3PlayerPrefsStream : MemoryStream
	{
		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string path;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool append;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool isWriteStream;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool isDisposed;

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xC793FC", Offset = "0xC793FC", VA = "0xC793FC")]
		public ES3PlayerPrefsStream(string path)
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xC79538", Offset = "0xC79538", VA = "0xC79538")]
		public ES3PlayerPrefsStream(string path, int bufferSize, bool append = false)
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xC79448", Offset = "0xC79448", VA = "0xC79448")]
		private static byte[] GetData(string path, bool isWriteStream)
		{
			return null;
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xC79580", Offset = "0xC79580", VA = "0xC79580", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000201")]
	internal class ES3ResourcesStream : MemoryStream
	{
		[Token(Token = "0x1700012D")]
		public bool Exists
		{
			[Token(Token = "0x6000D3B")]
			[Address(RVA = "0xC797FC", Offset = "0xC797FC", VA = "0xC797FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xC7981C", Offset = "0xC7981C", VA = "0xC7981C")]
		public ES3ResourcesStream(string path)
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xC79840", Offset = "0xC79840", VA = "0xC79840")]
		private static byte[] GetData(string path)
		{
			return null;
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xC79934", Offset = "0xC79934", VA = "0xC79934", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000202")]
	public static class ES3Stream
	{
		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xC79940", Offset = "0xC79940", VA = "0xC79940")]
		public static Stream CreateStream(ES3Settings settings, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xC79DFC", Offset = "0xC79DFC", VA = "0xC79DFC")]
		public static Stream CreateStream(Stream stream, ES3Settings settings, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xC7A1D0", Offset = "0xC7A1D0", VA = "0xC7A1D0")]
		public static void CopyTo(Stream source, Stream destination)
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class ES3Member
	{
		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isProperty;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Reflection.ES3ReflectedMember reflectedMember;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useReflection;

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xC7A1E4", Offset = "0xC7A1E4", VA = "0xC7A1E4")]
		public ES3Member(string name, Type type, bool isProperty)
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xC7A23C", Offset = "0xC7A23C", VA = "0xC7A23C")]
		public ES3Member(ES3Reflection.ES3ReflectedMember reflectedMember)
		{
		}
	}
	[Token(Token = "0x2000204")]
	[Preserve]
	public static class ES3TypeMgr
	{
		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public static Dictionary<Type, ES3Type> types;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static ES3Type lastAccessedType;

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xC6CDB8", Offset = "0xC6CDB8", VA = "0xC6CDB8")]
		public static ES3Type GetOrCreateES3Type(Type type, bool throwException = true)
		{
			return null;
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xC7AEAC", Offset = "0xC7AEAC", VA = "0xC7AEAC")]
		public static ES3Type GetES3Type(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xC7AF8C", Offset = "0xC7AF8C", VA = "0xC7AF8C")]
		internal static void Add(Type type, ES3Type es3Type)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xC7A51C", Offset = "0xC7A51C", VA = "0xC7A51C")]
		internal static ES3Type CreateES3Type(Type type, bool throwException = true)
		{
			return null;
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xC7A2C0", Offset = "0xC7A2C0", VA = "0xC7A2C0")]
		internal static void Init()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class ES3WebClass
	{
		[Token(Token = "0x2000206")]
		[CompilerGenerated]
		private sealed class <SendWebRequest>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000895")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3WebClass <>4__this;

			[Token(Token = "0x4000897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityWebRequest webRequest;

			[Token(Token = "0x17000131")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D58")]
				[Address(RVA = "0xC7B974", Offset = "0xC7B974", VA = "0xC7B974", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000132")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D5A")]
				[Address(RVA = "0xC7B9BC", Offset = "0xC7B9BC", VA = "0xC7B9BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D55")]
			[Address(RVA = "0xC7B8A8", Offset = "0xC7B8A8", VA = "0xC7B8A8")]
			[DebuggerHidden]
			public <SendWebRequest>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6000D56")]
			[Address(RVA = "0xC7B8F8", Offset = "0xC7B8F8", VA = "0xC7B8F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D57")]
			[Address(RVA = "0xC7B8FC", Offset = "0xC7B8FC", VA = "0xC7B8FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D59")]
			[Address(RVA = "0xC7B97C", Offset = "0xC7B97C", VA = "0xC7B97C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string url;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string apiKey;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<KeyValuePair<string, string>> formData;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected UnityWebRequest _webRequest;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isDone;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string error;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long errorCode;

		[Token(Token = "0x1700012E")]
		public float uploadProgress
		{
			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0xC7B1E4", Offset = "0xC7B1E4", VA = "0xC7B1E4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700012F")]
		public float downloadProgress
		{
			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0xC7B1FC", Offset = "0xC7B1FC", VA = "0xC7B1FC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000130")]
		public bool isError
		{
			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0xC7B214", Offset = "0xC7B214", VA = "0xC7B214")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xC7B248", Offset = "0xC7B248", VA = "0xC7B248")]
		public static bool IsNetworkError(UnityWebRequest www)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xC7B26C", Offset = "0xC7B26C", VA = "0xC7B26C")]
		protected ES3WebClass(string url, string apiKey)
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xC7B324", Offset = "0xC7B324", VA = "0xC7B324")]
		public void AddPOSTField(string fieldName, string value)
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xC7B418", Offset = "0xC7B418", VA = "0xC7B418")]
		protected string GetUser(string user, string password)
		{
			return null;
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xC7B4A4", Offset = "0xC7B4A4", VA = "0xC7B4A4")]
		protected WWWForm CreateWWWForm()
		{
			return null;
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xC7B630", Offset = "0xC7B630", VA = "0xC7B630")]
		protected bool HandleError(UnityWebRequest webRequest, bool errorIfDataIsDownloaded)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xC7B818", Offset = "0xC7B818", VA = "0xC7B818")]
		[IteratorStateMachine(typeof(<SendWebRequest>d__19))]
		protected IEnumerator SendWebRequest(UnityWebRequest webRequest)
		{
			return null;
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xC7B8D0", Offset = "0xC7B8D0", VA = "0xC7B8D0", Slot = "4")]
		protected virtual void Reset()
		{
		}
	}
	[Token(Token = "0x2000207")]
	internal enum ES3SpecialByte : byte
	{
		[Token(Token = "0x4000899")]
		Null = 0,
		[Token(Token = "0x400089A")]
		Bool = 1,
		[Token(Token = "0x400089B")]
		Byte = 2,
		[Token(Token = "0x400089C")]
		Sbyte = 3,
		[Token(Token = "0x400089D")]
		Char = 4,
		[Token(Token = "0x400089E")]
		Decimal = 5,
		[Token(Token = "0x400089F")]
		Double = 6,
		[Token(Token = "0x40008A0")]
		Float = 7,
		[Token(Token = "0x40008A1")]
		Int = 8,
		[Token(Token = "0x40008A2")]
		Uint = 9,
		[Token(Token = "0x40008A3")]
		Long = 10,
		[Token(Token = "0x40008A4")]
		Ulong = 11,
		[Token(Token = "0x40008A5")]
		Short = 12,
		[Token(Token = "0x40008A6")]
		Ushort = 13,
		[Token(Token = "0x40008A7")]
		String = 14,
		[Token(Token = "0x40008A8")]
		ByteArray = 15,
		[Token(Token = "0x40008A9")]
		Collection = 128,
		[Token(Token = "0x40008AA")]
		Dictionary = 129,
		[Token(Token = "0x40008AB")]
		CollectionItem = 130,
		[Token(Token = "0x40008AC")]
		Object = 254,
		[Token(Token = "0x40008AD")]
		Terminator = byte.MaxValue
	}
	[Token(Token = "0x2000208")]
	internal static class ES3Binary
	{
		[Token(Token = "0x40008AE")]
		internal const string ObjectTerminator = ".";

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly Dictionary<ES3SpecialByte, Type> IdToType;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly Dictionary<Type, ES3SpecialByte> TypeToId;

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xC7B9C4", Offset = "0xC7B9C4", VA = "0xC7B9C4")]
		internal static ES3SpecialByte TypeToByte(Type type)
		{
			return default(ES3SpecialByte);
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xC7BA68", Offset = "0xC7BA68", VA = "0xC7BA68")]
		internal static Type ByteToType(ES3SpecialByte b)
		{
			return null;
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xC7BABC", Offset = "0xC7BABC", VA = "0xC7BABC")]
		internal static Type ByteToType(byte b)
		{
			return null;
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xC76DB8", Offset = "0xC76DB8", VA = "0xC76DB8")]
		internal static bool IsPrimitive(ES3SpecialByte b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000209")]
	internal class ES3CacheWriter : ES3Writer
	{
		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ES3File es3File;

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xC7C240", Offset = "0xC7C240", VA = "0xC7C240")]
		internal ES3CacheWriter(ES3Settings settings, bool writeHeaderAndFooter, bool mergeKeys)
		{
		}

		[Token(Token = "0x6000D61")]
		public override void Write<T>(string key, object value)
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xC7C2E0", Offset = "0xC7C2E0", VA = "0xC7C2E0", Slot = "39")]
		internal override void Write(string key, Type type, byte[] value)
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xC7C328", Offset = "0xC7C328", VA = "0xC7C328", Slot = "41")]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void Write(Type type, string key, object value)
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xC7C390", Offset = "0xC7C390", VA = "0xC7C390", Slot = "24")]
		internal override void WritePrimitive(int value)
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xC7C394", Offset = "0xC7C394", VA = "0xC7C394", Slot = "25")]
		internal override void WritePrimitive(float value)
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xC7C398", Offset = "0xC7C398", VA = "0xC7C398", Slot = "26")]
		internal override void WritePrimitive(bool value)
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xC7C39C", Offset = "0xC7C39C", VA = "0xC7C39C", Slot = "27")]
		internal override void WritePrimitive(decimal value)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xC7C3A0", Offset = "0xC7C3A0", VA = "0xC7C3A0", Slot = "28")]
		internal override void WritePrimitive(double value)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xC7C3A4", Offset = "0xC7C3A4", VA = "0xC7C3A4", Slot = "29")]
		internal override void WritePrimitive(long value)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xC7C3A8", Offset = "0xC7C3A8", VA = "0xC7C3A8", Slot = "30")]
		internal override void WritePrimitive(ulong value)
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xC7C3AC", Offset = "0xC7C3AC", VA = "0xC7C3AC", Slot = "31")]
		internal override void WritePrimitive(uint value)
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xC7C3B0", Offset = "0xC7C3B0", VA = "0xC7C3B0", Slot = "32")]
		internal override void WritePrimitive(byte value)
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xC7C3B4", Offset = "0xC7C3B4", VA = "0xC7C3B4", Slot = "33")]
		internal override void WritePrimitive(sbyte value)
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xC7C3B8", Offset = "0xC7C3B8", VA = "0xC7C3B8", Slot = "34")]
		internal override void WritePrimitive(short value)
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xC7C3BC", Offset = "0xC7C3BC", VA = "0xC7C3BC", Slot = "35")]
		internal override void WritePrimitive(ushort value)
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xC7C3C0", Offset = "0xC7C3C0", VA = "0xC7C3C0", Slot = "36")]
		internal override void WritePrimitive(char value)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xC7C3C4", Offset = "0xC7C3C4", VA = "0xC7C3C4", Slot = "38")]
		internal override void WritePrimitive(byte[] value)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xC7C3C8", Offset = "0xC7C3C8", VA = "0xC7C3C8", Slot = "37")]
		internal override void WritePrimitive(string value)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xC7C3CC", Offset = "0xC7C3CC", VA = "0xC7C3CC", Slot = "5")]
		internal override void WriteNull()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xC7C3D0", Offset = "0xC7C3D0", VA = "0xC7C3D0")]
		private static bool CharacterRequiresEscaping(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xC7C3D8", Offset = "0xC7C3D8", VA = "0xC7C3D8")]
		private void WriteCommaIfRequired()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0xC7C3DC", Offset = "0xC7C3DC", VA = "0xC7C3DC", Slot = "23")]
		internal override void WriteRawProperty(string name, byte[] value)
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0xC7C3E0", Offset = "0xC7C3E0", VA = "0xC7C3E0", Slot = "6")]
		internal override void StartWriteFile()
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xC7C3E4", Offset = "0xC7C3E4", VA = "0xC7C3E4", Slot = "7")]
		internal override void EndWriteFile()
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xC7C3E8", Offset = "0xC7C3E8", VA = "0xC7C3E8", Slot = "10")]
		internal override void StartWriteProperty(string name)
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xC7C3F0", Offset = "0xC7C3F0", VA = "0xC7C3F0", Slot = "11")]
		internal override void EndWriteProperty(string name)
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xC7C3F4", Offset = "0xC7C3F4", VA = "0xC7C3F4", Slot = "8")]
		internal override void StartWriteObject(string name)
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xC7C3F8", Offset = "0xC7C3F8", VA = "0xC7C3F8", Slot = "9")]
		internal override void EndWriteObject(string name)
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xC7C3FC", Offset = "0xC7C3FC", VA = "0xC7C3FC", Slot = "12")]
		internal override void StartWriteCollection()
		{
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xC7C400", Offset = "0xC7C400", VA = "0xC7C400", Slot = "13")]
		internal override void EndWriteCollection()
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xC7C404", Offset = "0xC7C404", VA = "0xC7C404", Slot = "14")]
		internal override void StartWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xC7C408", Offset = "0xC7C408", VA = "0xC7C408", Slot = "15")]
		internal override void EndWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xC7C40C", Offset = "0xC7C40C", VA = "0xC7C40C", Slot = "16")]
		internal override void StartWriteDictionary()
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xC7C410", Offset = "0xC7C410", VA = "0xC7C410", Slot = "17")]
		internal override void EndWriteDictionary()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xC7C414", Offset = "0xC7C414", VA = "0xC7C414", Slot = "18")]
		internal override void StartWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xC7C418", Offset = "0xC7C418", VA = "0xC7C418", Slot = "19")]
		internal override void EndWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xC7C41C", Offset = "0xC7C41C", VA = "0xC7C41C", Slot = "20")]
		internal override void StartWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xC7C420", Offset = "0xC7C420", VA = "0xC7C420", Slot = "21")]
		internal override void EndWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xC7C424", Offset = "0xC7C424", VA = "0xC7C424", Slot = "22")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x200020A")]
	internal class ES3JSONWriter : ES3Writer
	{
		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal StreamWriter baseWriter;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isFirstProperty;

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xC7C428", Offset = "0xC7C428", VA = "0xC7C428")]
		public ES3JSONWriter(Stream stream, ES3Settings settings)
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xC7C434", Offset = "0xC7C434", VA = "0xC7C434")]
		internal ES3JSONWriter(Stream stream, ES3Settings settings, bool writeHeaderAndFooter, bool mergeKeys)
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xC7C4F0", Offset = "0xC7C4F0", VA = "0xC7C4F0", Slot = "24")]
		internal override void WritePrimitive(int value)
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xC7C514", Offset = "0xC7C514", VA = "0xC7C514", Slot = "25")]
		internal override void WritePrimitive(float value)
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xC7C5C4", Offset = "0xC7C5C4", VA = "0xC7C5C4", Slot = "26")]
		internal override void WritePrimitive(bool value)
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xC7C640", Offset = "0xC7C640", VA = "0xC7C640", Slot = "27")]
		internal override void WritePrimitive(decimal value)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xC7C700", Offset = "0xC7C700", VA = "0xC7C700", Slot = "28")]
		internal override void WritePrimitive(double value)
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xC7C7B0", Offset = "0xC7C7B0", VA = "0xC7C7B0", Slot = "29")]
		internal override void WritePrimitive(long value)
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xC7C7D4", Offset = "0xC7C7D4", VA = "0xC7C7D4", Slot = "30")]
		internal override void WritePrimitive(ulong value)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xC7C7F8", Offset = "0xC7C7F8", VA = "0xC7C7F8", Slot = "31")]
		internal override void WritePrimitive(uint value)
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xC7C81C", Offset = "0xC7C81C", VA = "0xC7C81C", Slot = "32")]
		internal override void WritePrimitive(byte value)
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xC7C8A4", Offset = "0xC7C8A4", VA = "0xC7C8A4", Slot = "33")]
		internal override void WritePrimitive(sbyte value)
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xC7C92C", Offset = "0xC7C92C", VA = "0xC7C92C", Slot = "34")]
		internal override void WritePrimitive(short value)
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xC7C9B4", Offset = "0xC7C9B4", VA = "0xC7C9B4", Slot = "35")]
		internal override void WritePrimitive(ushort value)
		{
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xC7CA3C", Offset = "0xC7CA3C", VA = "0xC7CA3C", Slot = "36")]
		internal override void WritePrimitive(char value)
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xC7CA7C", Offset = "0xC7CA7C", VA = "0xC7CA7C", Slot = "38")]
		internal override void WritePrimitive(byte[] value)
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xC7CAF8", Offset = "0xC7CAF8", VA = "0xC7CAF8", Slot = "37")]
		internal override void WritePrimitive(string value)
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xC7CD34", Offset = "0xC7CD34", VA = "0xC7CD34", Slot = "5")]
		internal override void WriteNull()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xC7CD90", Offset = "0xC7CD90", VA = "0xC7CD90")]
		private static bool CharacterRequiresEscaping(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xC7CDC0", Offset = "0xC7CDC0", VA = "0xC7CDC0")]
		private void WriteCommaIfRequired()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xC7CE94", Offset = "0xC7CE94", VA = "0xC7CE94", Slot = "23")]
		internal override void WriteRawProperty(string name, byte[] value)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xC7CF2C", Offset = "0xC7CF2C", VA = "0xC7CF2C", Slot = "6")]
		internal override void StartWriteFile()
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xC7CF6C", Offset = "0xC7CF6C", VA = "0xC7CF6C", Slot = "7")]
		internal override void EndWriteFile()
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xC7CFB8", Offset = "0xC7CFB8", VA = "0xC7CFB8", Slot = "10")]
		internal override void StartWriteProperty(string name)
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xC7D080", Offset = "0xC7D080", VA = "0xC7D080", Slot = "11")]
		internal override void EndWriteProperty(string name)
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xC7D088", Offset = "0xC7D088", VA = "0xC7D088", Slot = "8")]
		internal override void StartWriteObject(string name)
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xC7D0C4", Offset = "0xC7D0C4", VA = "0xC7D0C4", Slot = "9")]
		internal override void EndWriteObject(string name)
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xC7D104", Offset = "0xC7D104", VA = "0xC7D104", Slot = "12")]
		internal override void StartWriteCollection()
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xC7D140", Offset = "0xC7D140", VA = "0xC7D140", Slot = "13")]
		internal override void EndWriteCollection()
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xC7D17C", Offset = "0xC7D17C", VA = "0xC7D17C", Slot = "14")]
		internal override void StartWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xC7D1B0", Offset = "0xC7D1B0", VA = "0xC7D1B0", Slot = "15")]
		internal override void EndWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xC7D1B4", Offset = "0xC7D1B4", VA = "0xC7D1B4", Slot = "16")]
		internal override void StartWriteDictionary()
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xC7D1C4", Offset = "0xC7D1C4", VA = "0xC7D1C4", Slot = "17")]
		internal override void EndWriteDictionary()
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xC7D1D4", Offset = "0xC7D1D4", VA = "0xC7D1D4", Slot = "18")]
		internal override void StartWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xC7D208", Offset = "0xC7D208", VA = "0xC7D208", Slot = "19")]
		internal override void EndWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xC7D230", Offset = "0xC7D230", VA = "0xC7D230", Slot = "20")]
		internal override void StartWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xC7D234", Offset = "0xC7D234", VA = "0xC7D234", Slot = "21")]
		internal override void EndWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xC7D238", Offset = "0xC7D238", VA = "0xC7D238", Slot = "22")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0xC7CE04", Offset = "0xC7CE04", VA = "0xC7CE04")]
		public void WriteNewlineAndTabs()
		{
		}
	}
}
namespace EPOOutline
{
	[Token(Token = "0x200020B")]
	public static class BlitUtility
	{
		[Token(Token = "0x200020C")]
		public struct MeshSetupResult
		{
			[Token(Token = "0x40008BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int VertexIndex;

			[Token(Token = "0x40008BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public readonly int TriangleIndex;

			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0xC80114", Offset = "0xC80114", VA = "0xC80114")]
			public MeshSetupResult(int vertexIndex, int triangleIndex)
			{
			}
		}

		[Token(Token = "0x200020D")]
		public struct Vertex
		{
			[Token(Token = "0x40008BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector4 Position;

			[Token(Token = "0x40008C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 Normal;
		}

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int MainTexHash;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector4[] normals;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector4[] tempVertecies;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static VertexAttributeDescriptor[] vertexParams;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static ushort[] indecies;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Vertex[] vertices;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Matrix4x4[] matrices;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static int itemsToDraw;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static bool? supportsInstancing;

		[Token(Token = "0x17000133")]
		private static bool SupportsInstancing
		{
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0xC7D254", Offset = "0xC7D254", VA = "0xC7D254")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xC7D368", Offset = "0xC7D368", VA = "0xC7D368")]
		private static void UpdateBounds(Renderer renderer, OutlineTarget target)
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xC7D524", Offset = "0xC7D524", VA = "0xC7D524")]
		public static void PrepareForRendering(OutlineParameters parameters)
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xC7EA48", Offset = "0xC7EA48", VA = "0xC7EA48")]
		private static MeshSetupResult? SetupForInstancing(OutlineParameters parameters)
		{
			return null;
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xC7D7E4", Offset = "0xC7D7E4", VA = "0xC7D7E4")]
		private static MeshSetupResult? SetupForBruteForce(OutlineParameters parameters)
		{
			return null;
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xC7F990", Offset = "0xC7F990", VA = "0xC7F990")]
		public static void Blit(OutlineParameters parameters, RenderTargetIdentifier source, RenderTargetIdentifier destination, RenderTargetIdentifier destinationDepth, Material material, CommandBuffer targetBuffer, int pass = -1, [Optional] Rect? viewport)
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xC7FBB4", Offset = "0xC7FBB4", VA = "0xC7FBB4")]
		public static void Draw(OutlineParameters parameters, RenderTargetIdentifier target, RenderTargetIdentifier depth, Material material, [Optional] Rect? viewport)
		{
		}
	}
	[Token(Token = "0x200020E")]
	public enum BlurType
	{
		[Token(Token = "0x40008C2")]
		Anisotropic,
		[Token(Token = "0x40008C3")]
		Box,
		[Token(Token = "0x40008C4")]
		Gaussian5x5,
		[Token(Token = "0x40008C5")]
		Gaussian9x9,
		[Token(Token = "0x40008C6")]
		Gaussian13x13
	}
	[Token(Token = "0x200020F")]
	public static class CameraUtility
	{
		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xC8011C", Offset = "0xC8011C", VA = "0xC8011C")]
		public static int GetMSAA(Camera camera)
		{
			return default(int);
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xC80214", Offset = "0xC80214", VA = "0xC80214")]
		private static int GetRenderPipelineMSAA()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000210")]
	public static class KeywordsUtility
	{
		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<BlurType, string> BlurTypes;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<DilateQuality, string> DilateQualityKeywords;

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xC8021C", Offset = "0xC8021C", VA = "0xC8021C")]
		public static string GetBackKeyword(ComplexMaskingMode mode)
		{
			return null;
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xC802F8", Offset = "0xC802F8", VA = "0xC802F8")]
		public static string GetTextureArrayCutoutKeyword()
		{
			return null;
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xC80338", Offset = "0xC80338", VA = "0xC80338")]
		public static string GetDilateQualityKeyword(DilateQuality quality)
		{
			return null;
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xC803EC", Offset = "0xC803EC", VA = "0xC803EC")]
		public static string GetEnabledInfoBufferKeyword()
		{
			return null;
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xC8042C", Offset = "0xC8042C", VA = "0xC8042C")]
		public static string GetEdgeMaskKeyword()
		{
			return null;
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xC8046C", Offset = "0xC8046C", VA = "0xC8046C")]
		public static string GetInfoBufferStageKeyword()
		{
			return null;
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xC804AC", Offset = "0xC804AC", VA = "0xC804AC")]
		public static string GetBlurKeyword(BlurType type)
		{
			return null;
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xC8052C", Offset = "0xC8052C", VA = "0xC8052C")]
		public static string GetCutoutKeyword()
		{
			return null;
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xC8056C", Offset = "0xC8056C", VA = "0xC8056C")]
		public static void GetAllBlurKeywords(List<string> list)
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xC80788", Offset = "0xC80788", VA = "0xC80788")]
		public static void GetAllDilateKeywords(List<string> list)
		{
		}
	}
	[Token(Token = "0x2000211")]
	[ExecuteAlways]
	public class OnPreRenderEventTransferer : MonoBehaviour
	{
		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera attachedCamera;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<Camera> OnPreRenderEvent;

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xC80C10", Offset = "0xC80C10", VA = "0xC80C10")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xC80C68", Offset = "0xC80C68", VA = "0xC80C68")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xC80C88", Offset = "0xC80C88", VA = "0xC80C88")]
		public OnPreRenderEventTransferer()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public enum DilateRenderMode
	{
		[Token(Token = "0x40008CC")]
		PostProcessing,
		[Token(Token = "0x40008CD")]
		EdgeShift
	}
	[Token(Token = "0x2000213")]
	public enum RenderStyle
	{
		[Token(Token = "0x40008CF")]
		Single = 1,
		[Token(Token = "0x40008D0")]
		FrontBack
	}
	[Token(Token = "0x2000214")]
	[Flags]
	public enum OutlinableDrawingMode
	{
		[Token(Token = "0x40008D2")]
		Normal = 1,
		[Token(Token = "0x40008D3")]
		ZOnly = 2,
		[Token(Token = "0x40008D4")]
		GenericMask = 4,
		[Token(Token = "0x40008D5")]
		Obstacle = 8,
		[Token(Token = "0x40008D6")]
		Mask = 0x10
	}
	[Token(Token = "0x2000215")]
	[Flags]
	public enum RenderersAddingMode
	{
		[Token(Token = "0x40008D8")]
		All = -1,
		[Token(Token = "0x40008D9")]
		None = 0,
		[Token(Token = "0x40008DA")]
		MeshRenderer = 1,
		[Token(Token = "0x40008DB")]
		SkinnedMeshRenderer = 2,
		[Token(Token = "0x40008DC")]
		SpriteRenderer = 4,
		[Token(Token = "0x40008DD")]
		Others = 0x1000
	}
	[Token(Token = "0x2000216")]
	public enum BoundsMode
	{
		[Token(Token = "0x40008DF")]
		Default,
		[Token(Token = "0x40008E0")]
		ForceRecalculate,
		[Token(Token = "0x40008E1")]
		Manual
	}
	[Token(Token = "0x2000217")]
	public enum ComplexMaskingMode
	{
		[Token(Token = "0x40008E3")]
		None,
		[Token(Token = "0x40008E4")]
		ObstaclesMode,
		[Token(Token = "0x40008E5")]
		MaskingMode
	}
	[Token(Token = "0x2000218")]
	[ExecuteAlways]
	public class Outlinable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000219")]
		public class OutlineProperties
		{
			[Token(Token = "0x40008F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private bool enabled;

			[Token(Token = "0x40008F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			private Color color;

			[Token(Token = "0x40008F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Range(0f, 1f)]
			[SerializeField]
			private float dilateShift;

			[Token(Token = "0x40008F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			[Range(0f, 1f)]
			private float blurShift;

			[Token(Token = "0x40008F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializedPassInfo("Fill style", "Hidden/EPO/Fill/")]
			[SerializeField]
			private SerializedPass fillPass;

			[Token(Token = "0x17000140")]
			public bool Enabled
			{
				[Token(Token = "0x6000DEB")]
				[Address(RVA = "0xC82E0C", Offset = "0xC82E0C", VA = "0xC82E0C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000DEC")]
				[Address(RVA = "0xC82E14", Offset = "0xC82E14", VA = "0xC82E14")]
				set
				{
				}
			}

			[Token(Token = "0x17000141")]
			public Color Color
			{
				[Token(Token = "0x6000DED")]
				[Address(RVA = "0xC82E20", Offset = "0xC82E20", VA = "0xC82E20")]
				get
				{
					return default(Color);
				}
				[Token(Token = "0x6000DEE")]
				[Address(RVA = "0xC82E2C", Offset = "0xC82E2C", VA = "0xC82E2C")]
				set
				{
				}
			}

			[Token(Token = "0x17000142")]
			public float DilateShift
			{
				[Token(Token = "0x6000DEF")]
				[Address(RVA = "0xC82E38", Offset = "0xC82E38", VA = "0xC82E38")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000DF0")]
				[Address(RVA = "0xC82E40", Offset = "0xC82E40", VA = "0xC82E40")]
				set
				{
				}
			}

			[Token(Token = "0x17000143")]
			public float BlurShift
			{
				[Token(Token = "0x6000DF1")]
				[Address(RVA = "0xC82E48", Offset = "0xC82E48", VA = "0xC82E48")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000DF2")]
				[Address(RVA = "0xC82E50", Offset = "0xC82E50", VA = "0xC82E50")]
				set
				{
				}
			}

			[Token(Token = "0x17000144")]
			public SerializedPass FillPass
			{
				[Token(Token = "0x6000DF3")]
				[Address(RVA = "0xC82E58", Offset = "0xC82E58", VA = "0xC82E58")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0xC82C94", Offset = "0xC82C94", VA = "0xC82C94")]
			public OutlineProperties()
			{
			}
		}

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<TargetStateListener> tempListeners;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static HashSet<Outlinable> outlinables;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ComplexMaskingMode complexMaskingMode;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private OutlinableDrawingMode drawingMode;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int outlineLayer;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<OutlineTarget> outlineTargets;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private RenderStyle renderStyle;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private OutlineProperties outlineParameters;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private OutlineProperties backParameters;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private OutlineProperties frontParameters;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool shouldValidateTargets;

		[Token(Token = "0x17000134")]
		public RenderStyle RenderStyle
		{
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0xC80C90", Offset = "0xC80C90", VA = "0xC80C90")]
			get
			{
				return default(RenderStyle);
			}
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0xC80C98", Offset = "0xC80C98", VA = "0xC80C98")]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		public ComplexMaskingMode ComplexMaskingMode
		{
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0xC80CA0", Offset = "0xC80CA0", VA = "0xC80CA0")]
			get
			{
				return default(ComplexMaskingMode);
			}
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0xC80CA8", Offset = "0xC80CA8", VA = "0xC80CA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000136")]
		public bool ComplexMaskingEnabled
		{
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0xC80CB0", Offset = "0xC80CB0", VA = "0xC80CB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000137")]
		public OutlinableDrawingMode DrawingMode
		{
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0xC80CC0", Offset = "0xC80CC0", VA = "0xC80CC0")]
			get
			{
				return default(OutlinableDrawingMode);
			}
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0xC80CC8", Offset = "0xC80CC8", VA = "0xC80CC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public int OutlineLayer
		{
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0xC80CD0", Offset = "0xC80CD0", VA = "0xC80CD0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0xC80CD8", Offset = "0xC80CD8", VA = "0xC80CD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public IReadOnlyList<OutlineTarget> OutlineTargets
		{
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0xC80CE0", Offset = "0xC80CE0", VA = "0xC80CE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013A")]
		public OutlineProperties OutlineParameters
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0xC80CE8", Offset = "0xC80CE8", VA = "0xC80CE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		public OutlineProperties BackParameters
		{
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0xC80CF0", Offset = "0xC80CF0", VA = "0xC80CF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		public bool NeedFillMask
		{
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0xC80CF8", Offset = "0xC80CF8", VA = "0xC80CF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013D")]
		public OutlineProperties FrontParameters
		{
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0xC81188", Offset = "0xC81188", VA = "0xC81188")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013E")]
		public bool IsObstacle
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0xC81190", Offset = "0xC81190", VA = "0xC81190")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013F")]
		public OutlineTarget this[int index]
		{
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0xC81724", Offset = "0xC81724", VA = "0xC81724")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0xC8177C", Offset = "0xC8177C", VA = "0xC8177C")]
			set
			{
			}
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xC8119C", Offset = "0xC8119C", VA = "0xC8119C")]
		public bool TryAddTarget(OutlineTarget target)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xC8148C", Offset = "0xC8148C", VA = "0xC8148C")]
		public void RemoveTarget(OutlineTarget target)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xC817EC", Offset = "0xC817EC", VA = "0xC817EC")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xC8194C", Offset = "0xC8194C", VA = "0xC8194C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xC81970", Offset = "0xC81970", VA = "0xC81970")]
		private void SubscribeToVisibilityChange(GameObject go)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xC81DDC", Offset = "0xC81DDC", VA = "0xC81DDC")]
		private void UpdateVisibility()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xC82444", Offset = "0xC82444", VA = "0xC82444")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xC82448", Offset = "0xC82448", VA = "0xC82448")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xC824C8", Offset = "0xC824C8", VA = "0xC824C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xC81258", Offset = "0xC81258", VA = "0xC81258")]
		private void ValidateTargets()
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xC824CC", Offset = "0xC824CC", VA = "0xC824CC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xC8254C", Offset = "0xC8254C", VA = "0xC8254C")]
		public static void GetAllActiveOutlinables(Camera camera, List<Outlinable> outlinablesList)
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xC82758", Offset = "0xC82758", VA = "0xC82758")]
		private int GetSubmeshCount(Renderer renderer)
		{
			return default(int);
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xC817F4", Offset = "0xC817F4", VA = "0xC817F4")]
		public void AddAllChildRenderersToRenderingList(RenderersAddingMode renderersAddingMode = RenderersAddingMode.All)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xC82B60", Offset = "0xC82B60", VA = "0xC82B60")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xC82858", Offset = "0xC82858", VA = "0xC82858")]
		private bool MatchingMode(Renderer renderer, RenderersAddingMode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xC82B74", Offset = "0xC82B74", VA = "0xC82B74")]
		public Outlinable()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public static class OutlineEffect
	{
		[Token(Token = "0x200021C")]
		private struct OutlineTargetGroup
		{
			[Token(Token = "0x4000928")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly Outlinable Outlinable;

			[Token(Token = "0x4000929")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly OutlineTarget Target;

			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0xC84720", Offset = "0xC84720", VA = "0xC84720")]
			public OutlineTargetGroup(Outlinable outlinable, OutlineTarget target)
			{
			}
		}

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int FillRefHash;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int DilateShiftHash;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int ColorMaskHash;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int OutlineRefHash;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int RefHash;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly int ZWriteHash;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int EffectSizeHash;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly int CullHash;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly int ZTestHash;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly int ColorHash;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly int ScaleHash;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static readonly int ShiftHash;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly int InitialTexHash;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static readonly int InfoBufferHash;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly int ComparisonHash;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static readonly int ReadMaskHash;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly int WriteMaskHash;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static readonly int OperationHash;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly int CutoutThresholdHash;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static readonly int CutoutMaskHash;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly int TextureIndexHash;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static readonly int CutoutTextureHash;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly int CutoutTextureSTHash;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static readonly int SrcBlendHash;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly int DstBlendHash;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static readonly int TargetHash;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly int InfoTargetHash;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static readonly int PrimaryBufferHash;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly int HelperBufferHash;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static readonly int PrimaryInfoBufferHash;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly int HelperInfoBufferHash;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static Material TransparentBlitMaterial;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private static Material EmptyFillMaterial;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static Material OutlineMaterial;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private static Material PartialBlitMaterial;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private static Material ObstacleMaterial;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private static Material FillMaskMaterial;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private static Material ZPrepassMaterial;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private static Material OutlineMaskMaterial;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private static Material DilateMaterial;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private static Material BlurMaterial;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private static Material FinalBlitMaterial;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private static Material BasicBlitMaterial;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private static Material ClearStencilMaterial;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private static List<OutlineTargetGroup> targets;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private static List<string> keywords;

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xC83138", Offset = "0xC83138", VA = "0xC83138")]
		public static Material LoadMaterial(string shaderName)
		{
			return null;
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xC83208", Offset = "0xC83208", VA = "0xC83208")]
		[RuntimeInitializeOnLoadMethod]
		private static void InitMaterials()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xC83948", Offset = "0xC83948", VA = "0xC83948")]
		private static void Postprocess(OutlineParameters parameters, int first, int second, Material material, int iterations, bool additionalShift, float shiftValue, ref int stencil, Rect viewport, float scale)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xC83E4C", Offset = "0xC83E4C", VA = "0xC83E4C")]
		private static void Blit(OutlineParameters parameters, RenderTargetIdentifier source, RenderTargetIdentifier destination, RenderTargetIdentifier destinationDepth, Material material, float effectSize, CommandBuffer buffer, int pass = -1, [Optional] Rect? viewport)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xC83FE4", Offset = "0xC83FE4", VA = "0xC83FE4")]
		private static float GetBlurShift(BlurType blurType, int iterrationsCount)
		{
			return default(float);
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xC840A0", Offset = "0xC840A0", VA = "0xC840A0")]
		private static float GetMaskingValueForMode(OutlinableDrawingMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xC840C4", Offset = "0xC840C4", VA = "0xC840C4")]
		private static float ComputeEffectShift(OutlineParameters parameters)
		{
			return default(float);
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xC84154", Offset = "0xC84154", VA = "0xC84154")]
		private static void PrepareTargets(OutlineParameters parameters)
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xC84750", Offset = "0xC84750", VA = "0xC84750")]
		public static void SetupOutline(OutlineParameters parameters)
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xC87200", Offset = "0xC87200", VA = "0xC87200")]
		private static void SetupDilateKeyword(OutlineParameters parameters)
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xC87AE8", Offset = "0xC87AE8", VA = "0xC87AE8")]
		private static void SetupBlurKeyword(OutlineParameters parameters)
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xC87678", Offset = "0xC87678", VA = "0xC87678")]
		private static int DrawOutlineables(OutlineParameters parameters, CompareFunction function, Func<Outlinable, bool> shouldRender, Func<Outlinable, Color> colorProvider, Func<Outlinable, Material> materialProvider, RenderStyle styleMask, OutlinableDrawingMode modeMask = OutlinableDrawingMode.Normal)
		{
			return default(int);
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xC87CFC", Offset = "0xC87CFC", VA = "0xC87CFC")]
		private static void DrawFill(OutlineParameters parameters, RenderTargetIdentifier targetSurface)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xC89940", Offset = "0xC89940", VA = "0xC89940")]
		private static void SetupCutout(OutlineParameters parameters, OutlineTarget target)
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xC89F28", Offset = "0xC89F28", VA = "0xC89F28")]
		private static void SetupCull(OutlineParameters parameters, OutlineTarget target)
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class MeshPool
	{
		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Queue<Mesh> freeMeshes;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Mesh> allMeshes;

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xC8AC54", Offset = "0xC8AC54", VA = "0xC8AC54")]
		public Mesh AllocateMesh()
		{
			return null;
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xC8AE48", Offset = "0xC8AE48", VA = "0xC8AE48")]
		public void ReleaseAllMeshes()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xC8AFD8", Offset = "0xC8AFD8", VA = "0xC8AFD8")]
		public MeshPool()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class OutlineParameters
	{
		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MeshPool MeshPool;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera Camera;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RenderTargetIdentifier Target;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public RenderTargetIdentifier DepthTarget;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CommandBuffer Buffer;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public DilateQuality DilateQuality;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int DilateIterations;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int BlurIterations;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector2 Scale;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Rect? CustomViewport;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public long OutlineLayerMask;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int TargetWidth;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int TargetHeight;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float BlurShift;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float DilateShift;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool UseHDR;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool UseInfoBuffer;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		public bool IsEditorCamera;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public BufferSizeMode PrimaryBufferSizeMode;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public int PrimaryBufferSizeReference;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float PrimaryBufferScale;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public StereoTargetEyeMask EyeMask;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public int Antialiasing;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public BlurType BlurType;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public LayerMask Mask;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Mesh BlitMesh;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public List<Outlinable> OutlinablesToRender;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool isInitialized;

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xC87578", Offset = "0xC87578", VA = "0xC87578")]
		public Vector2Int MakeScaledVector(int x, int y)
		{
			return default(Vector2Int);
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xC8B0B0", Offset = "0xC8B0B0", VA = "0xC8B0B0")]
		public void CheckInitialization()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xC8B12C", Offset = "0xC8B12C", VA = "0xC8B12C")]
		public void Prepare()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xC8B3B0", Offset = "0xC8B3B0", VA = "0xC8B3B0")]
		private static bool CheckDiffers(Outlinable outlinable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xC8B430", Offset = "0xC8B430", VA = "0xC8B430")]
		private static bool CheckIfNonOne(Outlinable.OutlineProperties parameters)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xC8B468", Offset = "0xC8B468", VA = "0xC8B468")]
		public OutlineParameters()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public enum DilateQuality
	{
		[Token(Token = "0x4000964")]
		Base,
		[Token(Token = "0x4000965")]
		High,
		[Token(Token = "0x4000966")]
		Ultra
	}
	[Token(Token = "0x2000222")]
	public enum RenderingMode
	{
		[Token(Token = "0x4000968")]
		LDR,
		[Token(Token = "0x4000969")]
		HDR
	}
	[Token(Token = "0x2000223")]
	public enum OutlineRenderingStrategy
	{
		[Token(Token = "0x400096B")]
		Default,
		[Token(Token = "0x400096C")]
		PerObject
	}
	[Token(Token = "0x2000224")]
	public enum RenderStage
	{
		[Token(Token = "0x400096E")]
		BeforeTransparents,
		[Token(Token = "0x400096F")]
		AfterTransparents
	}
	[Token(Token = "0x2000225")]
	public enum BufferSizeMode
	{
		[Token(Token = "0x4000971")]
		WidthControllsHeight,
		[Token(Token = "0x4000972")]
		HeightControlsWidth,
		[Token(Token = "0x4000973")]
		Scaled,
		[Token(Token = "0x4000974")]
		Native
	}
	[Token(Token = "0x2000226")]
	[ExecuteAlways]
	[RequireComponent(typeof(Camera))]
	public class Outliner : MonoBehaviour
	{
		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Outlinable> temporaryOutlinables;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private OutlineParameters parameters;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera targetCamera;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private RenderStage stage;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private OutlineRenderingStrategy renderingStrategy;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private RenderingMode renderingMode;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private long outlineLayerMask;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private BufferSizeMode primaryBufferSizeMode;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0.15f, 1f)]
		[SerializeField]
		private float primaryRendererScale;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private int primarySizeReference;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[Range(0f, 2f)]
		private float blurShift;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Range(0f, 2f)]
		private float dilateShift;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		[FormerlySerializedAs("dilateIterrations")]
		private int dilateIterations;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private DilateQuality dilateQuality;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[FormerlySerializedAs("blurIterrations")]
		[SerializeField]
		private int blurIterations;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private BlurType blurType;

		[Token(Token = "0x17000145")]
		[Obsolete]
		public float InfoRendererScale
		{
			[Token(Token = "0x6000E31")]
			[Address(RVA = "0xC8B6BC", Offset = "0xC8B6BC", VA = "0xC8B6BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E32")]
			[Address(RVA = "0xC8B6FC", Offset = "0xC8B6FC", VA = "0xC8B6FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000146")]
		public int PrimarySizeReference
		{
			[Token(Token = "0x6000E33")]
			[Address(RVA = "0xC8B73C", Offset = "0xC8B73C", VA = "0xC8B73C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E34")]
			[Address(RVA = "0xC8B744", Offset = "0xC8B744", VA = "0xC8B744")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public BufferSizeMode PrimaryBufferSizeMode
		{
			[Token(Token = "0x6000E35")]
			[Address(RVA = "0xC8B74C", Offset = "0xC8B74C", VA = "0xC8B74C")]
			get
			{
				return default(BufferSizeMode);
			}
			[Token(Token = "0x6000E36")]
			[Address(RVA = "0xC8B754", Offset = "0xC8B754", VA = "0xC8B754")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		private CameraEvent Event
		{
			[Token(Token = "0x6000E37")]
			[Address(RVA = "0xC8B75C", Offset = "0xC8B75C", VA = "0xC8B75C")]
			get
			{
				return default(CameraEvent);
			}
		}

		[Token(Token = "0x17000149")]
		public OutlineRenderingStrategy RenderingStrategy
		{
			[Token(Token = "0x6000E38")]
			[Address(RVA = "0xC8B774", Offset = "0xC8B774", VA = "0xC8B774")]
			get
			{
				return default(OutlineRenderingStrategy);
			}
			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xC8B77C", Offset = "0xC8B77C", VA = "0xC8B77C")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public RenderStage RenderStage
		{
			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0xC8B784", Offset = "0xC8B784", VA = "0xC8B784")]
			get
			{
				return default(RenderStage);
			}
			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0xC8B78C", Offset = "0xC8B78C", VA = "0xC8B78C")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public DilateQuality DilateQuality
		{
			[Token(Token = "0x6000E3C")]
			[Address(RVA = "0xC8B794", Offset = "0xC8B794", VA = "0xC8B794")]
			get
			{
				return default(DilateQuality);
			}
			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0xC8B79C", Offset = "0xC8B79C", VA = "0xC8B79C")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		private RenderingMode RenderingMode
		{
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0xC8B7A4", Offset = "0xC8B7A4", VA = "0xC8B7A4")]
			get
			{
				return default(RenderingMode);
			}
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0xC8B7AC", Offset = "0xC8B7AC", VA = "0xC8B7AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public float BlurShift
		{
			[Token(Token = "0x6000E40")]
			[Address(RVA = "0xC8B7B4", Offset = "0xC8B7B4", VA = "0xC8B7B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E41")]
			[Address(RVA = "0xC8B7BC", Offset = "0xC8B7BC", VA = "0xC8B7BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public float DilateShift
		{
			[Token(Token = "0x6000E42")]
			[Address(RVA = "0xC8B7D8", Offset = "0xC8B7D8", VA = "0xC8B7D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E43")]
			[Address(RVA = "0xC8B7E0", Offset = "0xC8B7E0", VA = "0xC8B7E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public long OutlineLayerMask
		{
			[Token(Token = "0x6000E44")]
			[Address(RVA = "0xC8B7FC", Offset = "0xC8B7FC", VA = "0xC8B7FC")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000E45")]
			[Address(RVA = "0xC8B804", Offset = "0xC8B804", VA = "0xC8B804")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public float PrimaryRendererScale
		{
			[Token(Token = "0x6000E46")]
			[Address(RVA = "0xC8B80C", Offset = "0xC8B80C", VA = "0xC8B80C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E47")]
			[Address(RVA = "0xC8B814", Offset = "0xC8B814", VA = "0xC8B814")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		[Obsolete("Fixed incorrect spelling. Use BlurIterations instead")]
		public int BlurIterrations
		{
			[Token(Token = "0x6000E48")]
			[Address(RVA = "0xC8B830", Offset = "0xC8B830", VA = "0xC8B830")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E49")]
			[Address(RVA = "0xC8B838", Offset = "0xC8B838", VA = "0xC8B838")]
			set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public int BlurIterations
		{
			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0xC8B870", Offset = "0xC8B870", VA = "0xC8B870")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E4B")]
			[Address(RVA = "0xC8B854", Offset = "0xC8B854", VA = "0xC8B854")]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public BlurType BlurType
		{
			[Token(Token = "0x6000E4C")]
			[Address(RVA = "0xC8B878", Offset = "0xC8B878", VA = "0xC8B878")]
			get
			{
				return default(BlurType);
			}
			[Token(Token = "0x6000E4D")]
			[Address(RVA = "0xC8B880", Offset = "0xC8B880", VA = "0xC8B880")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		[Obsolete("Fixed incorrect spelling. Use DilateIterations instead")]
		public int DilateIterration
		{
			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0xC8B888", Offset = "0xC8B888", VA = "0xC8B888")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E4F")]
			[Address(RVA = "0xC8B890", Offset = "0xC8B890", VA = "0xC8B890")]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public int DilateIterations
		{
			[Token(Token = "0x6000E50")]
			[Address(RVA = "0xC8B8C8", Offset = "0xC8B8C8", VA = "0xC8B8C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E51")]
			[Address(RVA = "0xC8B8AC", Offset = "0xC8B8AC", VA = "0xC8B8AC")]
			set
			{
			}
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xC8B8D0", Offset = "0xC8B8D0", VA = "0xC8B8D0")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xC8B8F0", Offset = "0xC8B8F0", VA = "0xC8B8F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xC8BA0C", Offset = "0xC8BA0C", VA = "0xC8BA0C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xC8BA98", Offset = "0xC8BA98", VA = "0xC8BA98")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xC8BB28", Offset = "0xC8BB28", VA = "0xC8BB28")]
		private void UpdateBuffer(Camera targetCamera, CommandBuffer buffer, bool removeOnly)
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xC8BBC0", Offset = "0xC8BBC0", VA = "0xC8BBC0")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xC8BC98", Offset = "0xC8BC98", VA = "0xC8BC98")]
		private void SetupOutline(Camera cameraToUse, OutlineParameters parametersToUse, bool isEditor)
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xC8C348", Offset = "0xC8C348", VA = "0xC8C348")]
		public void UpdateSharedParameters(OutlineParameters parameters, Camera camera, bool editorCamera)
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xC8C02C", Offset = "0xC8C02C", VA = "0xC8C02C")]
		private void UpdateParameters(OutlineParameters parameters, Camera camera, bool editorCamera)
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xC8C78C", Offset = "0xC8C78C", VA = "0xC8C78C")]
		public Outliner()
		{
		}
	}
	[Token(Token = "0x2000227")]
	[Flags]
	public enum ColorMask
	{
		[Token(Token = "0x4000986")]
		None = 0,
		[Token(Token = "0x4000987")]
		R = 1,
		[Token(Token = "0x4000988")]
		G = 2,
		[Token(Token = "0x4000989")]
		B = 4,
		[Token(Token = "0x400098A")]
		A = 8
	}
	[Serializable]
	[Token(Token = "0x2000228")]
	public class OutlineTarget
	{
		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool IsVisible;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public ColorMask CutoutMask;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float edgeDilateAmount;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float frontEdgeDilateAmount;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float backEdgeDilateAmount;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FormerlySerializedAs("Renderer")]
		[SerializeField]
		public Renderer renderer;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public int SubmeshIndex;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		public BoundsMode BoundsMode;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public Bounds Bounds;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		[SerializeField]
		public float CutoutThreshold;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		public CullMode CullMode;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private string cutoutTextureName;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		public DilateRenderMode DilateRenderingMode;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private int cutoutTextureIndex;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int? cutoutTextureId;

		[Token(Token = "0x17000156")]
		public Renderer Renderer
		{
			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0xC8C8C4", Offset = "0xC8C8C4", VA = "0xC8C8C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000157")]
		public bool UsesCutout
		{
			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0xC89FA8", Offset = "0xC89FA8", VA = "0xC89FA8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000158")]
		public int CutoutTextureIndex
		{
			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0xC8C8CC", Offset = "0xC8C8CC", VA = "0xC8C8CC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E60")]
			[Address(RVA = "0xC8C8D4", Offset = "0xC8C8D4", VA = "0xC8C8D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		public int ShiftedSubmeshIndex
		{
			[Token(Token = "0x6000E61")]
			[Address(RVA = "0xC8C954", Offset = "0xC8C954", VA = "0xC8C954")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015A")]
		public int CutoutTextureId
		{
			[Token(Token = "0x6000E62")]
			[Address(RVA = "0xC89FC8", Offset = "0xC89FC8", VA = "0xC89FC8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015B")]
		public string CutoutTextureName
		{
			[Token(Token = "0x6000E63")]
			[Address(RVA = "0xC8C95C", Offset = "0xC8C95C", VA = "0xC8C95C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E64")]
			[Address(RVA = "0xC8C964", Offset = "0xC8C964", VA = "0xC8C964")]
			set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public float EdgeDilateAmount
		{
			[Token(Token = "0x6000E65")]
			[Address(RVA = "0xC8C984", Offset = "0xC8C984", VA = "0xC8C984")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E66")]
			[Address(RVA = "0xC8C98C", Offset = "0xC8C98C", VA = "0xC8C98C")]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public float FrontEdgeDilateAmount
		{
			[Token(Token = "0x6000E67")]
			[Address(RVA = "0xC8C99C", Offset = "0xC8C99C", VA = "0xC8C99C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E68")]
			[Address(RVA = "0xC8C9A4", Offset = "0xC8C9A4", VA = "0xC8C9A4")]
			set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		public float BackEdgeDilateAmount
		{
			[Token(Token = "0x6000E69")]
			[Address(RVA = "0xC8C9B4", Offset = "0xC8C9B4", VA = "0xC8C9B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0xC8C9BC", Offset = "0xC8C9BC", VA = "0xC8C9BC")]
			set
			{
			}
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0xC8C9CC", Offset = "0xC8C9CC", VA = "0xC8C9CC")]
		public OutlineTarget()
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xC829B4", Offset = "0xC829B4", VA = "0xC829B4")]
		public OutlineTarget(Renderer renderer, int submesh = 0)
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0xC8CABC", Offset = "0xC8CABC", VA = "0xC8CABC")]
		public OutlineTarget(Renderer renderer, string cutoutTextureName, float cutoutThreshold = 0.5f)
		{
		}
	}
	[Token(Token = "0x2000229")]
	public static class PipelineFetcher
	{
		[Token(Token = "0x1700015F")]
		public static RenderPipelineAsset CurrentAsset
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0xC8CC90", Offset = "0xC8CC90", VA = "0xC8CC90")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x200022A")]
	public static class RendererFilteringUtility
	{
		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Outlinable> filteredOutlinables;

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0xC8C418", Offset = "0xC8C418", VA = "0xC8C418")]
		public static void Filter(Camera camera, OutlineParameters parameters)
		{
		}
	}
	[Token(Token = "0x200022B")]
	public static class RenderTargetUtility
	{
		[Token(Token = "0x200022C")]
		public struct RenderTextureInfo
		{
			[Token(Token = "0x400099C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly RenderTextureDescriptor Descriptor;

			[Token(Token = "0x400099D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public readonly FilterMode FilterMode;

			[Token(Token = "0x6000E77")]
			[Address(RVA = "0xC8D118", Offset = "0xC8D118", VA = "0xC8D118")]
			public RenderTextureInfo(RenderTextureDescriptor descriptor, FilterMode filterMode)
			{
			}
		}

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RenderTextureFormat? hdrFormat;

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0xC8CDAC", Offset = "0xC8CDAC", VA = "0xC8CDAC")]
		public static int GetDepthSliceForEye(StereoTargetEyeMask mask)
		{
			return default(int);
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0xC83DDC", Offset = "0xC83DDC", VA = "0xC83DDC")]
		public static RenderTargetIdentifier ComposeTarget(OutlineParameters parameters, RenderTargetIdentifier target)
		{
			return default(RenderTargetIdentifier);
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xC8CE18", Offset = "0xC8CE18", VA = "0xC8CE18")]
		public static bool IsUsingVR(OutlineParameters parameters)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xC8CE58", Offset = "0xC8CE58", VA = "0xC8CE58")]
		public static RenderTextureInfo GetTargetInfo(OutlineParameters parameters, int width, int height, int depthBuffer, bool forceNoAA, bool noFiltering)
		{
			return default(RenderTextureInfo);
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0xC87414", Offset = "0xC87414", VA = "0xC87414")]
		public static void GetTemporaryRT(OutlineParameters parameters, int id, int width, int height, int depthBuffer, bool clear, bool forceNoAA, bool noFiltering)
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xC8CFDC", Offset = "0xC8CFDC", VA = "0xC8CFDC")]
		private static RenderTextureFormat GetHDRFormat()
		{
			return default(RenderTextureFormat);
		}
	}
	[Token(Token = "0x200022D")]
	public class SerializedPassInfoAttribute : Attribute
	{
		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Title;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string ShadersFolder;

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xC8D134", Offset = "0xC8D134", VA = "0xC8D134")]
		public SerializedPassInfoAttribute(string title, string shadersFolder)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200022E")]
	public class SerializedPass : ISerializationCallbackReceiver
	{
		[Token(Token = "0x200022F")]
		public enum PropertyType
		{
			[Token(Token = "0x40009A7")]
			Color,
			[Token(Token = "0x40009A8")]
			Vector,
			[Token(Token = "0x40009A9")]
			Float,
			[Token(Token = "0x40009AA")]
			Range,
			[Token(Token = "0x40009AB")]
			TexEnv
		}

		[Serializable]
		[Token(Token = "0x2000230")]
		private class SerializedPropertyKeyValuePair
		{
			[Token(Token = "0x40009AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public string PropertyName;

			[Token(Token = "0x40009AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			public SerializedPassProperty Property;

			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0xC8E5E4", Offset = "0xC8E5E4", VA = "0xC8E5E4")]
			public SerializedPropertyKeyValuePair()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000231")]
		private class SerializedPassProperty
		{
			[Token(Token = "0x40009AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public Color ColorValue;

			[Token(Token = "0x40009AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			public float FloatValue;

			[Token(Token = "0x40009B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[SerializeField]
			public Vector4 VectorValue;

			[Token(Token = "0x40009B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[SerializeField]
			public PropertyType PropertyType;

			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0xC8D700", Offset = "0xC8D700", VA = "0xC8D700")]
			public SerializedPassProperty()
			{
			}
		}

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Shader shader;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<SerializedPropertyKeyValuePair> serializedProperties;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<int, SerializedPassProperty> propertiesById;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<string, SerializedPassProperty> propertiesByName;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material material;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool propertiesIsDirty;

		[Token(Token = "0x17000160")]
		public Shader Shader
		{
			[Token(Token = "0x6000E79")]
			[Address(RVA = "0xC8D178", Offset = "0xC8D178", VA = "0xC8D178")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E7A")]
			[Address(RVA = "0xC8D180", Offset = "0xC8D180", VA = "0xC8D180")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public Material Material
		{
			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0xC80DF8", Offset = "0xC80DF8", VA = "0xC80DF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xC8D190", Offset = "0xC8D190", VA = "0xC8D190")]
		public bool HasProperty(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xC8D1E8", Offset = "0xC8D1E8", VA = "0xC8D1E8")]
		public bool HasProperty(int hash)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xC8D240", Offset = "0xC8D240", VA = "0xC8D240")]
		public Vector4 GetVector(string name)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xC8D3B0", Offset = "0xC8D3B0", VA = "0xC8D3B0")]
		public Vector4 GetVector(int hash)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xC8D534", Offset = "0xC8D534", VA = "0xC8D534")]
		public void SetVector(string name, Vector4 value)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xC8D708", Offset = "0xC8D708", VA = "0xC8D708")]
		public void SetVector(int hash, Vector4 value)
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xC8D8A8", Offset = "0xC8D8A8", VA = "0xC8D8A8")]
		public float GetFloat(string name)
		{
			return default(float);
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xC8D9C8", Offset = "0xC8D9C8", VA = "0xC8D9C8")]
		public float GetFloat(int hash)
		{
			return default(float);
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xC8DAFC", Offset = "0xC8DAFC", VA = "0xC8DAFC")]
		public void SetFloat(string name, float value)
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xC8DCAC", Offset = "0xC8DCAC", VA = "0xC8DCAC")]
		public void SetFloat(int hash, float value)
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xC8DDEC", Offset = "0xC8DDEC", VA = "0xC8DDEC")]
		public Color GetColor(string name)
		{
			return default(Color);
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xC8DF14", Offset = "0xC8DF14", VA = "0xC8DF14")]
		public Color GetColor(int hash)
		{
			return default(Color);
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xC8E038", Offset = "0xC8E038", VA = "0xC8E038")]
		public void SetColor(string name, Color value)
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xC8E1FC", Offset = "0xC8E1FC", VA = "0xC8E1FC")]
		public void SetColor(int hash, Color value)
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xC8E350", Offset = "0xC8E350", VA = "0xC8E350", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xC8E5EC", Offset = "0xC8E5EC", VA = "0xC8E5EC", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xC82E60", Offset = "0xC82E60", VA = "0xC82E60")]
		public SerializedPass()
		{
		}
	}
	[Token(Token = "0x2000232")]
	[ExecuteAlways]
	public class TargetStateListener : MonoBehaviour
	{
		[Token(Token = "0x2000233")]
		public struct Callback
		{
			[Token(Token = "0x40009B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly Outlinable Target;

			[Token(Token = "0x40009B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly Action Action;

			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xC8E84C", Offset = "0xC8E84C", VA = "0xC8E84C")]
			public Callback(Outlinable target, Action action)
			{
			}
		}

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Callback> callbacks;

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xC81AC4", Offset = "0xC81AC4", VA = "0xC81AC4")]
		public void AddCallback(Outlinable outlinable, Action action)
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xC815E8", Offset = "0xC815E8", VA = "0xC815E8")]
		public void RemoveCallback(Outlinable outlinable, Action callback)
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xC8E884", Offset = "0xC8E884", VA = "0xC8E884")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xC81BB4", Offset = "0xC81BB4", VA = "0xC81BB4")]
		public void ForceUpdate()
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xC8E890", Offset = "0xC8E890", VA = "0xC8E890")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xC8E894", Offset = "0xC8E894", VA = "0xC8E894")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xC8E898", Offset = "0xC8E898", VA = "0xC8E898")]
		public TargetStateListener()
		{
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x2000236")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xC8EA8C", Offset = "0xC8EA8C", VA = "0xC8EA8C")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xC8EC40", Offset = "0xC8EC40", VA = "0xC8EC40")]
		public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xC8EDCC", Offset = "0xC8EDCC", VA = "0xC8EDCC")]
		public static TweenerCore<float, float, FloatOptions> DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xC8EF6C", Offset = "0xC8EF6C", VA = "0xC8EF6C")]
		public static int DOComplete(this AudioMixer target, bool withCallbacks = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xC8EFD4", Offset = "0xC8EFD4", VA = "0xC8EFD4")]
		public static int DOKill(this AudioMixer target, bool complete = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xC8F03C", Offset = "0xC8F03C", VA = "0xC8F03C")]
		public static int DOFlip(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xC8F094", Offset = "0xC8F094", VA = "0xC8F094")]
		public static int DOGoto(this AudioMixer target, float to, bool andPlay = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xC8F10C", Offset = "0xC8F10C", VA = "0xC8F10C")]
		public static int DOPause(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xC8F164", Offset = "0xC8F164", VA = "0xC8F164")]
		public static int DOPlay(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xC8F1BC", Offset = "0xC8F1BC", VA = "0xC8F1BC")]
		public static int DOPlayBackwards(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xC8F214", Offset = "0xC8F214", VA = "0xC8F214")]
		public static int DOPlayForward(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xC8F26C", Offset = "0xC8F26C", VA = "0xC8F26C")]
		public static int DORestart(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xC8F2CC", Offset = "0xC8F2CC", VA = "0xC8F2CC")]
		public static int DORewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xC8F328", Offset = "0xC8F328", VA = "0xC8F328")]
		public static int DOSmoothRewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xC8F380", Offset = "0xC8F380", VA = "0xC8F380")]
		public static int DOTogglePause(this AudioMixer target)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200023A")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xC8F4A0", Offset = "0xC8F4A0", VA = "0xC8F4A0")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xC8F658", Offset = "0xC8F658", VA = "0xC8F658")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xC8F804", Offset = "0xC8F804", VA = "0xC8F804")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xC8F9B0", Offset = "0xC8F9B0", VA = "0xC8F9B0")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xC8FB5C", Offset = "0xC8FB5C", VA = "0xC8FB5C")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)
		{
			return null;
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xC8FD10", Offset = "0xC8FD10", VA = "0xC8FD10")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, [Optional] Vector3? up)
		{
			return null;
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xC8FF78", Offset = "0xC8FF78", VA = "0xC8FF78")]
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xC90484", Offset = "0xC90484", VA = "0xC90484")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xC906F8", Offset = "0xC906F8", VA = "0xC906F8")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xC9098C", Offset = "0xC9098C", VA = "0xC9098C")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xC90B60", Offset = "0xC90B60", VA = "0xC90B60")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x2000246")]
	public static class DOTweenModuleSprite
	{
		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xC91174", Offset = "0xC91174", VA = "0xC91174")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xC91328", Offset = "0xC91328", VA = "0xC91328")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this SpriteRenderer target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xC914B4", Offset = "0xC914B4", VA = "0xC914B4")]
		public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xC91690", Offset = "0xC91690", VA = "0xC91690")]
		public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x200024A")]
	public static class DOTweenModuleUI
	{
		[Token(Token = "0x200024B")]
		public static class Utils
		{
			[Token(Token = "0x6000F11")]
			[Address(RVA = "0xC96250", Offset = "0xC96250", VA = "0xC96250")]
			public static Vector2 SwitchToRectTransform(RectTransform from, RectTransform to)
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xC91988", Offset = "0xC91988", VA = "0xC91988")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xC91B14", Offset = "0xC91B14", VA = "0xC91B14")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xC91CC8", Offset = "0xC91CC8", VA = "0xC91CC8")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xC91E54", Offset = "0xC91E54", VA = "0xC91E54")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xC92008", Offset = "0xC92008", VA = "0xC92008")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xC92194", Offset = "0xC92194", VA = "0xC92194")]
		public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xC92344", Offset = "0xC92344", VA = "0xC92344")]
		public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xC92528", Offset = "0xC92528", VA = "0xC92528")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOFlexibleSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xC926D4", Offset = "0xC926D4", VA = "0xC926D4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMinSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xC92880", Offset = "0xC92880", VA = "0xC92880")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPreferredSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xC92A2C", Offset = "0xC92A2C", VA = "0xC92A2C")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Outline target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xC92BE0", Offset = "0xC92BE0", VA = "0xC92BE0")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Outline target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xC92D6C", Offset = "0xC92D6C", VA = "0xC92D6C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOScale(this Outline target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xC92F08", Offset = "0xC92F08", VA = "0xC92F08")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xC930B4", Offset = "0xC930B4", VA = "0xC930B4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xC93258", Offset = "0xC93258", VA = "0xC93258")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xC933FC", Offset = "0xC933FC", VA = "0xC933FC")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3D(this RectTransform target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xC935B0", Offset = "0xC935B0", VA = "0xC935B0")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xC93758", Offset = "0xC93758", VA = "0xC93758")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0xC93900", Offset = "0xC93900", VA = "0xC93900")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xC93AA8", Offset = "0xC93AA8", VA = "0xC93AA8")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMax(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xC93C54", Offset = "0xC93C54", VA = "0xC93C54")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMin(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xC93E00", Offset = "0xC93E00", VA = "0xC93E00")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivot(this RectTransform target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0xC93F9C", Offset = "0xC93F9C", VA = "0xC93F9C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotX(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xC9413C", Offset = "0xC9413C", VA = "0xC9413C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotY(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xC942DC", Offset = "0xC942DC", VA = "0xC942DC")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOSizeDelta(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xC94488", Offset = "0xC94488", VA = "0xC94488")]
		public static Tweener DOPunchAnchorPos(this RectTransform target, Vector2 punch, float duration, int vibrato = 10, float elasticity = 1f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xC94644", Offset = "0xC94644", VA = "0xC94644")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100f, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xC94828", Offset = "0xC94828", VA = "0xC94828")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, Vector2 strength, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xC94A14", Offset = "0xC94A14", VA = "0xC94A14")]
		public static Sequence DOJumpAnchorPos(this RectTransform target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xC94E3C", Offset = "0xC94E3C", VA = "0xC94E3C")]
		public static Tweener DONormalizedPos(this ScrollRect target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xC94FDC", Offset = "0xC94FDC", VA = "0xC94FDC")]
		public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xC9516C", Offset = "0xC9516C", VA = "0xC9516C")]
		public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xC952FC", Offset = "0xC952FC", VA = "0xC952FC")]
		public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xC95498", Offset = "0xC95498", VA = "0xC95498")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xC9564C", Offset = "0xC9564C", VA = "0xC9564C")]
		public static TweenerCore<int, int, NoOptions> DOCounter(this Text target, int fromValue, int endValue, float duration, bool addThousandsSeparator = true, [Optional] CultureInfo culture)
		{
			return null;
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xC95844", Offset = "0xC95844", VA = "0xC95844")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Text target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xC959D0", Offset = "0xC959D0", VA = "0xC959D0")]
		public static TweenerCore<string, string, StringOptions> DOText(this Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = ScrambleMode.None, [Optional] string scrambleChars)
		{
			return null;
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xC95C08", Offset = "0xC95C08", VA = "0xC95C08")]
		public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xC95E20", Offset = "0xC95E20", VA = "0xC95E20")]
		public static Tweener DOBlendableColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xC96038", Offset = "0xC96038", VA = "0xC96038")]
		public static Tweener DOBlendableColor(this Text target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x2000274")]
	public static class DOTweenModuleUnityVersion
	{
		[StructLayout(3)]
		[Token(Token = "0x2000277")]
		[CompilerGenerated]
		private struct <AsyncWaitForCompletion>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x4000A0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000A0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000A0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4000A0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0xC9860C", Offset = "0xC9860C", VA = "0xC9860C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0xC98844", Offset = "0xC98844", VA = "0xC98844", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000278")]
		[CompilerGenerated]
		private struct <AsyncWaitForRewind>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x4000A0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000A10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4000A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0xC98850", Offset = "0xC98850", VA = "0xC98850", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0xC98AAC", Offset = "0xC98AAC", VA = "0xC98AAC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000279")]
		[CompilerGenerated]
		private struct <AsyncWaitForKill>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x4000A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000A15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4000A16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0xC98AB8", Offset = "0xC98AB8", VA = "0xC98AB8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0xC98CDC", Offset = "0xC98CDC", VA = "0xC98CDC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200027A")]
		[CompilerGenerated]
		private struct <AsyncWaitForElapsedLoops>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x4000A17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000A18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000A19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4000A1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int elapsedLoops;

			[Token(Token = "0x4000A1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0xC98CE8", Offset = "0xC98CE8", VA = "0xC98CE8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0xC98F28", Offset = "0xC98F28", VA = "0xC98F28", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200027B")]
		[CompilerGenerated]
		private struct <AsyncWaitForPosition>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x4000A1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000A1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4000A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float position;

			[Token(Token = "0x4000A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0xC98F34", Offset = "0xC98F34", VA = "0xC98F34", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0xC9918C", Offset = "0xC9918C", VA = "0xC9918C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200027C")]
		[CompilerGenerated]
		private struct <AsyncWaitForStart>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x4000A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4000A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0xC99198", Offset = "0xC99198", VA = "0xC99198", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0xC993C4", Offset = "0xC993C4", VA = "0xC993C4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xC971D8", Offset = "0xC971D8", VA = "0xC971D8")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xC973B8", Offset = "0xC973B8", VA = "0xC973B8")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xC975A4", Offset = "0xC975A4", VA = "0xC975A4")]
		public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xC976A0", Offset = "0xC976A0", VA = "0xC976A0")]
		public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xC9779C", Offset = "0xC9779C", VA = "0xC9779C")]
		public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xC97898", Offset = "0xC97898", VA = "0xC97898")]
		public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xC979A8", Offset = "0xC979A8", VA = "0xC979A8")]
		public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xC97AC8", Offset = "0xC97AC8", VA = "0xC97AC8")]
		public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xC97BC4", Offset = "0xC97BC4", VA = "0xC97BC4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOOffset(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xC97DD0", Offset = "0xC97DD0", VA = "0xC97DD0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOTiling(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xC97FDC", Offset = "0xC97FDC", VA = "0xC97FDC")]
		[AsyncStateMachine(typeof(<AsyncWaitForCompletion>d__10))]
		public static Task AsyncWaitForCompletion(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xC980C8", Offset = "0xC980C8", VA = "0xC980C8")]
		[AsyncStateMachine(typeof(<AsyncWaitForRewind>d__11))]
		public static Task AsyncWaitForRewind(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xC981B4", Offset = "0xC981B4", VA = "0xC981B4")]
		[AsyncStateMachine(typeof(<AsyncWaitForKill>d__12))]
		public static Task AsyncWaitForKill(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xC982A0", Offset = "0xC982A0", VA = "0xC982A0")]
		[AsyncStateMachine(typeof(<AsyncWaitForElapsedLoops>d__13))]
		public static Task AsyncWaitForElapsedLoops(this Tween t, int elapsedLoops)
		{
			return null;
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xC98394", Offset = "0xC98394", VA = "0xC98394")]
		[AsyncStateMachine(typeof(<AsyncWaitForPosition>d__14))]
		public static Task AsyncWaitForPosition(this Tween t, float position)
		{
			return null;
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xC98490", Offset = "0xC98490", VA = "0xC98490")]
		[AsyncStateMachine(typeof(<AsyncWaitForStart>d__15))]
		public static Task AsyncWaitForStart(this Tween t)
		{
			return null;
		}
	}
	[Token(Token = "0x200027D")]
	public static class DOTweenCYInstruction
	{
		[Token(Token = "0x200027E")]
		public class WaitForCompletion : CustomYieldInstruction
		{
			[Token(Token = "0x4000A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x17000162")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000FB0")]
				[Address(RVA = "0xC993D0", Offset = "0xC993D0", VA = "0xC993D0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000FB1")]
			[Address(RVA = "0xC97670", Offset = "0xC97670", VA = "0xC97670")]
			public WaitForCompletion(Tween tween)
			{
			}
		}

		[Token(Token = "0x200027F")]
		public class WaitForRewind : CustomYieldInstruction
		{
			[Token(Token = "0x4000A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x17000163")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000FB2")]
				[Address(RVA = "0xC99400", Offset = "0xC99400", VA = "0xC99400", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0xC9776C", Offset = "0xC9776C", VA = "0xC9776C")]
			public WaitForRewind(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000280")]
		public class WaitForKill : CustomYieldInstruction
		{
			[Token(Token = "0x4000A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x17000164")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000FB4")]
				[Address(RVA = "0xC99460", Offset = "0xC99460", VA = "0xC99460", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0xC97868", Offset = "0xC97868", VA = "0xC97868")]
			public WaitForKill(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000281")]
		public class WaitForElapsedLoops : CustomYieldInstruction
		{
			[Token(Token = "0x4000A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4000A29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int elapsedLoops;

			[Token(Token = "0x17000165")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000FB6")]
				[Address(RVA = "0xC9947C", Offset = "0xC9947C", VA = "0xC9947C", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0xC9796C", Offset = "0xC9796C", VA = "0xC9796C")]
			public WaitForElapsedLoops(Tween tween, int elapsedLoops)
			{
			}
		}

		[Token(Token = "0x2000282")]
		public class WaitForPosition : CustomYieldInstruction
		{
			[Token(Token = "0x4000A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4000A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float position;

			[Token(Token = "0x17000166")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000FB8")]
				[Address(RVA = "0xC994BC", Offset = "0xC994BC", VA = "0xC994BC", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0xC97A84", Offset = "0xC97A84", VA = "0xC97A84")]
			public WaitForPosition(Tween tween, float position)
			{
			}
		}

		[Token(Token = "0x2000283")]
		public class WaitForStart : CustomYieldInstruction
		{
			[Token(Token = "0x4000A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x17000167")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000FBA")]
				[Address(RVA = "0xC99514", Offset = "0xC99514", VA = "0xC99514", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0xC97B94", Offset = "0xC97B94", VA = "0xC97B94")]
			public WaitForStart(Tween tween)
			{
			}
		}
	}
	[Token(Token = "0x2000284")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x2000285")]
		public static class Physics
		{
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0xBDAF18", Offset = "0xBDAF18", VA = "0xBDAF18")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0xBDB018", Offset = "0xBDB018", VA = "0xBDB018")]
			public static bool HasRigidbody2D(UnityEngine.Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FC0")]
			[Address(RVA = "0xBDB020", Offset = "0xBDB020", VA = "0xBDB020")]
			[Preserve]
			public static bool HasRigidbody(UnityEngine.Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0xBDB0AC", Offset = "0xBDB0AC", VA = "0xBDB0AC")]
			[Preserve]
			public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xC99548", Offset = "0xC99548", VA = "0xC99548")]
		[Preserve]
		public static void Init()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xC995FC", Offset = "0xC995FC", VA = "0xC995FC")]
		[Preserve]
		private static void Preserver()
		{
		}
	}
	[Token(Token = "0x2000286")]
	[AddComponentMenu("DOTween/DOTween Animation")]
	public class DOTweenAnimation : ABSAnimationComponent
	{
		[Token(Token = "0x2000287")]
		public enum AnimationType
		{
			[Token(Token = "0x4000A55")]
			None,
			[Token(Token = "0x4000A56")]
			Move,
			[Token(Token = "0x4000A57")]
			LocalMove,
			[Token(Token = "0x4000A58")]
			Rotate,
			[Token(Token = "0x4000A59")]
			LocalRotate,
			[Token(Token = "0x4000A5A")]
			Scale,
			[Token(Token = "0x4000A5B")]
			Color,
			[Token(Token = "0x4000A5C")]
			Fade,
			[Token(Token = "0x4000A5D")]
			Text,
			[Token(Token = "0x4000A5E")]
			PunchPosition,
			[Token(Token = "0x4000A5F")]
			PunchRotation,
			[Token(Token = "0x4000A60")]
			PunchScale,
			[Token(Token = "0x4000A61")]
			ShakePosition,
			[Token(Token = "0x4000A62")]
			ShakeRotation,
			[Token(Token = "0x4000A63")]
			ShakeScale,
			[Token(Token = "0x4000A64")]
			CameraAspect,
			[Token(Token = "0x4000A65")]
			CameraBackgroundColor,
			[Token(Token = "0x4000A66")]
			CameraFieldOfView,
			[Token(Token = "0x4000A67")]
			CameraOrthoSize,
			[Token(Token = "0x4000A68")]
			CameraPixelRect,
			[Token(Token = "0x4000A69")]
			CameraRect,
			[Token(Token = "0x4000A6A")]
			UIWidthHeight
		}

		[Token(Token = "0x2000288")]
		public enum TargetType
		{
			[Token(Token = "0x4000A6C")]
			Unset,
			[Token(Token = "0x4000A6D")]
			Camera,
			[Token(Token = "0x4000A6E")]
			CanvasGroup,
			[Token(Token = "0x4000A6F")]
			Image,
			[Token(Token = "0x4000A70")]
			Light,
			[Token(Token = "0x4000A71")]
			RectTransform,
			[Token(Token = "0x4000A72")]
			Renderer,
			[Token(Token = "0x4000A73")]
			SpriteRenderer,
			[Token(Token = "0x4000A74")]
			Rigidbody,
			[Token(Token = "0x4000A75")]
			Rigidbody2D,
			[Token(Token = "0x4000A76")]
			Text,
			[Token(Token = "0x4000A77")]
			Transform,
			[Token(Token = "0x4000A78")]
			tk2dBaseSprite,
			[Token(Token = "0x4000A79")]
			tk2dTextMesh,
			[Token(Token = "0x4000A7A")]
			TextMeshPro,
			[Token(Token = "0x4000A7B")]
			TextMeshProUGUI
		}

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool targetIsSelf;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject targetGO;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool tweenTargetIsTargetGO;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float delay;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float duration;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Ease easeType;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AnimationCurve easeCurve;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public LoopType loopType;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int loops;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string id;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool isRelative;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool isFrom;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		public bool isIndependentUpdate;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
		public bool autoKill;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool isActive;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		public bool isValid;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEngine.Component target;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AnimationType animationType;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public TargetType targetType;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public TargetType forcedTargetType;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool autoPlay;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool useTargetAsV3;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float endValueFloat;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Vector3 endValueV3;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Vector2 endValueV2;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Color endValueColor;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public string endValueString;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Rect endValueRect;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform endValueTransform;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool optionalBool0;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float optionalFloat0;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public int optionalInt0;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public RotateMode optionalRotationMode;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public ScrambleMode optionalScrambleMode;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public string optionalString;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool _tweenCreated;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private int _playCount;

		[Token(Token = "0x14000001")]
		public static event Action<DOTweenAnimation> OnReset
		{
			[Token(Token = "0x6000FC2")]
			[Address(RVA = "0xBDB1F4", Offset = "0xBDB1F4", VA = "0xBDB1F4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0xBDB2C0", Offset = "0xBDB2C0", VA = "0xBDB2C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xBDB38C", Offset = "0xBDB38C", VA = "0xBDB38C")]
		private static void Dispatch_OnReset(DOTweenAnimation anim)
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xBDB3F8", Offset = "0xBDB3F8", VA = "0xBDB3F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xBDC8A4", Offset = "0xBDC8A4", VA = "0xBDC8A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0xBDC8DC", Offset = "0xBDC8DC", VA = "0xBDC8DC")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0xBDC8E0", Offset = "0xBDC8E0", VA = "0xBDC8E0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0xBDB43C", Offset = "0xBDB43C", VA = "0xBDB43C")]
		public void CreateTween()
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0xBDCB48", Offset = "0xBDCB48", VA = "0xBDCB48", Slot = "4")]
		public override void DOPlay()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0xBDCBB4", Offset = "0xBDCBB4", VA = "0xBDCBB4", Slot = "5")]
		public override void DOPlayBackwards()
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xBDCC20", Offset = "0xBDCC20", VA = "0xBDCC20", Slot = "6")]
		public override void DOPlayForward()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xBDCC8C", Offset = "0xBDCC8C", VA = "0xBDCC8C", Slot = "7")]
		public override void DOPause()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xBDCCF8", Offset = "0xBDCCF8", VA = "0xBDCCF8", Slot = "8")]
		public override void DOTogglePause()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xBDCD64", Offset = "0xBDCD64", VA = "0xBDCD64", Slot = "9")]
		public override void DORewind()
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xBDCE48", Offset = "0xBDCE48", VA = "0xBDCE48", Slot = "10")]
		public override void DORestart()
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xBDCE58", Offset = "0xBDCE58", VA = "0xBDCE58", Slot = "11")]
		public override void DORestart(bool fromHere)
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xBDD1A4", Offset = "0xBDD1A4", VA = "0xBDD1A4", Slot = "12")]
		public override void DOComplete()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xBDD214", Offset = "0xBDD214", VA = "0xBDD214", Slot = "13")]
		public override void DOKill()
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xBDD294", Offset = "0xBDD294", VA = "0xBDD294")]
		public void DOPlayById(string id)
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xBDD310", Offset = "0xBDD310", VA = "0xBDD310")]
		public void DOPlayAllById(string id)
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xBDD368", Offset = "0xBDD368", VA = "0xBDD368")]
		public void DOPauseAllById(string id)
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xBDD3C0", Offset = "0xBDD3C0", VA = "0xBDD3C0")]
		public void DOPlayBackwardsById(string id)
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xBDD43C", Offset = "0xBDD43C", VA = "0xBDD43C")]
		public void DOPlayBackwardsAllById(string id)
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xBDD494", Offset = "0xBDD494", VA = "0xBDD494")]
		public void DOPlayForwardById(string id)
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xBDD510", Offset = "0xBDD510", VA = "0xBDD510")]
		public void DOPlayForwardAllById(string id)
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xBDD568", Offset = "0xBDD568", VA = "0xBDD568")]
		public void DOPlayNext()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xBDD69C", Offset = "0xBDD69C", VA = "0xBDD69C")]
		public void DORewindAndPlayNext()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xBDD71C", Offset = "0xBDD71C", VA = "0xBDD71C")]
		public void DORewindAllById(string id)
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xBDD78C", Offset = "0xBDD78C", VA = "0xBDD78C")]
		public void DORestartById(string id)
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xBDD818", Offset = "0xBDD818", VA = "0xBDD818")]
		public void DORestartAllById(string id)
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xBDD88C", Offset = "0xBDD88C", VA = "0xBDD88C")]
		public List<Tween> GetTweens()
		{
			return null;
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xBDC938", Offset = "0xBDC938", VA = "0xBDC938")]
		public static TargetType TypeToDOTargetType(Type t)
		{
			return default(TargetType);
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xBDD9D8", Offset = "0xBDD9D8", VA = "0xBDD9D8")]
		public Tween CreateEditorPreview()
		{
			return null;
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xBDC920", Offset = "0xBDC920", VA = "0xBDC920")]
		private GameObject GetTweenGO()
		{
			return null;
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xBDCF50", Offset = "0xBDCF50", VA = "0xBDCF50")]
		private void ReEvaluateRelativeTween()
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xBDDA08", Offset = "0xBDDA08", VA = "0xBDDA08")]
		public DOTweenAnimation()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public static class DOTweenAnimationExtensions
	{
		[Token(Token = "0x6000FE7")]
		public static bool IsSameOrSubclassOf<T>(this UnityEngine.Component t)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200028A")]
	public static class DOTweenProShortcuts
	{
		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xBDDBF8", Offset = "0xBDDBF8", VA = "0xBDDBF8")]
		static DOTweenProShortcuts()
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xBDDC48", Offset = "0xBDDC48", VA = "0xBDDC48")]
		public static Tweener DOSpiral(this Transform target, float duration, [Optional] Vector3? axis, SpiralMode mode = SpiralMode.Expand, float speed = 1f, float frequency = 10f, float depth = 0f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xBDE00C", Offset = "0xBDE00C", VA = "0xBDE00C")]
		public static Tweener DOSpiral(this Rigidbody target, float duration, [Optional] Vector3? axis, SpiralMode mode = SpiralMode.Expand, float speed = 1f, float frequency = 10f, float depth = 0f, bool snapping = false)
		{
			return null;
		}
	}
}
