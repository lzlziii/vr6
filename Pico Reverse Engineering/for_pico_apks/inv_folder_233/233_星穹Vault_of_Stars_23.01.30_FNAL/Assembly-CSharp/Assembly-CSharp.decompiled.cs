using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using AtmosphericHeightFog;
using Autohand;
using Autohand.Demo;
using DG.Tweening;
using DigitalOpus.MB.Core;
using FMOD;
using FMOD.Studio;
using FMODUnity;
using Game.General.Navigation;
using Il2CppDummyDll;
using NaughtyAttributes;
using Oculus.Platform;
using RoboRyanTron.SearchableEnum;
using RootMotion.FinalIK;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Localization;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class ParticlePauser : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float pauseStartTime;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem system;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xC996A4", Offset = "0xC996A4", VA = "0xC996A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xC9972C", Offset = "0xC9972C", VA = "0xC9972C")]
	private void Pauser()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xC9974C", Offset = "0xC9974C", VA = "0xC9974C")]
	public ParticlePauser()
	{
	}
}
[Token(Token = "0x2000003")]
internal class UVTextureAnimator : MonoBehaviour
{
	[Token(Token = "0x2000004")]
	[CompilerGenerated]
	private sealed class <UpdateCorutine>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400001A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UVTextureAnimator <>4__this;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000012")]
			[Address(RVA = "0xC9A6CC", Offset = "0xC9A6CC", VA = "0xC9A6CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000014")]
			[Address(RVA = "0xC9A714", Offset = "0xC9A714", VA = "0xC9A714", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600000F")]
		[Address(RVA = "0xC9A0E8", Offset = "0xC9A0E8", VA = "0xC9A0E8")]
		[DebuggerHidden]
		public <UpdateCorutine>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000010")]
		[Address(RVA = "0xC9A5C0", Offset = "0xC9A5C0", VA = "0xC9A5C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000011")]
		[Address(RVA = "0xC9A5C4", Offset = "0xC9A5C4", VA = "0xC9A5C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000013")]
		[Address(RVA = "0xC9A6D4", Offset = "0xC9A6D4", VA = "0xC9A6D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] AnimatedMaterialsNotInstance;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int Rows;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int Columns;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Fps;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int OffsetMat;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 SelfTiling;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool IsLoop;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool IsReverse;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool IsRandomOffsetForInctance;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	public bool IsBump;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool IsHeight;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool IsCutOut;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	private bool isInizialised;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int index;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int count;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int allCount;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float deltaFps;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isVisible;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool isCorutineStarted;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer currentRenderer;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material instanceMaterial;

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xC9975C", Offset = "0xC9975C", VA = "0xC9975C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xC9A038", Offset = "0xC9A038", VA = "0xC9A038")]
	public void SetInstanceMaterial(Material mat, Vector2 offsetMat)
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xC9999C", Offset = "0xC9999C", VA = "0xC9999C")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xC99798", Offset = "0xC99798", VA = "0xC99798")]
	private void InitMaterial()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xC9A054", Offset = "0xC9A054", VA = "0xC9A054")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xC9A09C", Offset = "0xC9A09C", VA = "0xC9A09C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xC9A0A8", Offset = "0xC9A0A8", VA = "0xC9A0A8")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xC9A0E0", Offset = "0xC9A0E0", VA = "0xC9A0E0")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xC99FC4", Offset = "0xC99FC4", VA = "0xC99FC4")]
	[IteratorStateMachine(typeof(<UpdateCorutine>d__29))]
	private IEnumerator UpdateCorutine()
	{
		return null;
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xC9A110", Offset = "0xC9A110", VA = "0xC9A110")]
	private void UpdateCorutineFrame()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xC9A5A0", Offset = "0xC9A5A0", VA = "0xC9A5A0")]
	public UVTextureAnimator()
	{
	}
}
[Token(Token = "0x2000005")]
public class MagicProjectileScript : MonoBehaviour
{
	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject impactParticle;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject projectileParticle;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject muzzleParticle;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] trailParticles;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Vector3 impactNormal;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool hasCollided;

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xC9A71C", Offset = "0xC9A71C", VA = "0xC9A71C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xC9A944", Offset = "0xC9A944", VA = "0xC9A944")]
	private void OnCollisionEnter(Collision hit)
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xC9AD60", Offset = "0xC9AD60", VA = "0xC9AD60")]
	public MagicProjectileScript()
	{
	}
}
[Token(Token = "0x2000006")]
public class SciFiBeamStatic : MonoBehaviour
{
	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Prefabs")]
	public GameObject beamLineRendererPrefab;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject beamStartPrefab;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject beamEndPrefab;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject beamStart;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject beamEnd;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject beam;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer line;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Beam Options")]
	public bool alwaysOn;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool beamCollides;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float beamLength;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float beamEndOffset;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float textureScrollSpeed;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float textureLengthScale;

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xC9AD68", Offset = "0xC9AD68", VA = "0xC9AD68")]
	private void Start()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xC9AD6C", Offset = "0xC9AD6C", VA = "0xC9AD6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xC9B04C", Offset = "0xC9B04C", VA = "0xC9B04C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xC9B164", Offset = "0xC9B164", VA = "0xC9B164")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xC9AD7C", Offset = "0xC9AD7C", VA = "0xC9AD7C")]
	public void SpawnBeam()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xC9B050", Offset = "0xC9B050", VA = "0xC9B050")]
	public void RemoveBeam()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xC9B568", Offset = "0xC9B568", VA = "0xC9B568")]
	public SciFiBeamStatic()
	{
	}
}
[Token(Token = "0x2000007")]
public class SciFiLightFlicker : MonoBehaviour
{
	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string waveFunction;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float startValue;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float amplitude;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float phase;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float frequency;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color originalColor;

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xC9B588", Offset = "0xC9B588", VA = "0xC9B588")]
	private void Start()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xC9B5EC", Offset = "0xC9B5EC", VA = "0xC9B5EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xC9B680", Offset = "0xC9B680", VA = "0xC9B680")]
	private float EvalWave()
	{
		return default(float);
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xC9B84C", Offset = "0xC9B84C", VA = "0xC9B84C")]
	public SciFiLightFlicker()
	{
	}
}
[Token(Token = "0x2000008")]
public class EGA_EffectSound : MonoBehaviour
{
	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Repeating;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RepeatTime;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float StartTime;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool RandomVolume;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minVolume;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxVolume;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource soundComponent;

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xC9B8B4", Offset = "0xC9B8B4", VA = "0xC9B8B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xC9B980", Offset = "0xC9B980", VA = "0xC9B980")]
	private void RepeatSound()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xC9B9A0", Offset = "0xC9B9A0", VA = "0xC9B9A0")]
	public EGA_EffectSound()
	{
	}
}
[Token(Token = "0x2000009")]
public class ParticleCollisionInstance : MonoBehaviour
{
	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] EffectsOnCollision;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Offset;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float DestroyTimeDelay;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool UseWorldSpacePosition;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool UseFirePointRotation;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool DestroyMainEffect;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem part;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem ps;

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xC9B9C4", Offset = "0xC9B9C4", VA = "0xC9B9C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xC9BA1C", Offset = "0xC9BA1C", VA = "0xC9BA1C")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xC9BD84", Offset = "0xC9BD84", VA = "0xC9BD84")]
	public ParticleCollisionInstance()
	{
	}
}
[Token(Token = "0x200000A")]
public class ProjectileMover : MonoBehaviour
{
	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float hitOffset;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool UseFirePointRotation;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject hit;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject flash;

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xC9BE1C", Offset = "0xC9BE1C", VA = "0xC9BE1C")]
	private void Start()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xC9C06C", Offset = "0xC9C06C", VA = "0xC9C06C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xC9C148", Offset = "0xC9C148", VA = "0xC9C148")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xC9C564", Offset = "0xC9C564", VA = "0xC9C564")]
	public ProjectileMover()
	{
	}
}
[Token(Token = "0x200000B")]
public class RotatorFX : MonoBehaviour
{
	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float x;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float y;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float z;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xC9C574", Offset = "0xC9C574", VA = "0xC9C574")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xC9C5CC", Offset = "0xC9C5CC", VA = "0xC9C5CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xC9C5D4", Offset = "0xC9C5D4", VA = "0xC9C5D4")]
	private void Rotate()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xC9C624", Offset = "0xC9C624", VA = "0xC9C624")]
	public RotatorFX()
	{
	}
}
[Token(Token = "0x200000C")]
public enum PaintTool
{
	[Token(Token = "0x400004D")]
	DIRECTION,
	[Token(Token = "0x400004E")]
	SPEED,
	[Token(Token = "0x400004F")]
	BLEND
}
[Token(Token = "0x200000D")]
[RequireComponent(typeof(MeshFilter))]
public class FlowBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh procedural;

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xC9C62C", Offset = "0xC9C62C", VA = "0xC9C62C")]
	public FlowBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200000E")]
public struct FluidVertice
{
	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 world;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 fluidVector;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float magnitude;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float blending;
}
[Token(Token = "0x200000F")]
[ExecuteInEditMode]
public class AuraArrayController : MonoBehaviour
{
	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] affectors;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material sourceMaterial;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float auraMargin;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Projector projector;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Bounds bounds;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector4[] positions;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] scales;

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xC9C634", Offset = "0xC9C634", VA = "0xC9C634")]
	private void Start()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xC9CCD0", Offset = "0xC9CCD0", VA = "0xC9CCD0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xC9C808", Offset = "0xC9C808", VA = "0xC9C808")]
	public void UpdateMaterialAndProjector()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xC9CCD4", Offset = "0xC9CCD4", VA = "0xC9CCD4")]
	public void AssignSourceMaterial()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xC9CCF8", Offset = "0xC9CCF8", VA = "0xC9CCF8")]
	public void UpdateAllMaterialInstances()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xC9CE74", Offset = "0xC9CE74", VA = "0xC9CE74")]
	public AuraArrayController()
	{
	}
}
[Token(Token = "0x2000010")]
[ExecuteInEditMode]
public class AuraController : MonoBehaviour
{
	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material sourceMaterial;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float auraMargin;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Projector projector;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float resultRadius;

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xC9CE84", Offset = "0xC9CE84", VA = "0xC9CE84")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xC9CED0", Offset = "0xC9CED0", VA = "0xC9CED0")]
	private void Start()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xC9D0E0", Offset = "0xC9D0E0", VA = "0xC9D0E0")]
	private void Update()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xC9CF8C", Offset = "0xC9CF8C", VA = "0xC9CF8C")]
	public void UpdateMaterialAndProjector()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xC9D0E4", Offset = "0xC9D0E4", VA = "0xC9D0E4")]
	public void AssignSourceMaterial()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xC9D108", Offset = "0xC9D108", VA = "0xC9D108")]
	public void UpdateAllMaterialInstances()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xC9D284", Offset = "0xC9D284", VA = "0xC9D284")]
	public AuraController()
	{
	}
}
[Token(Token = "0x2000011")]
public class LivingParticlesAudioModule : MonoBehaviour
{
	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform audioPosition;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LivingParticlesAudioSource LPaSourse;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useBuffer;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool firstAndLastPixelBlack;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Texture2D t2d;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float[] finalSpectrum;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color col;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleSystemRenderer psr;

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xC9D294", Offset = "0xC9D294", VA = "0xC9D294")]
	private void Start()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xC9D3A0", Offset = "0xC9D3A0", VA = "0xC9D3A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xC9D660", Offset = "0xC9D660", VA = "0xC9D660")]
	public LivingParticlesAudioModule()
	{
	}
}
[Token(Token = "0x2000012")]
public class LivingParticlesAudioSource : MonoBehaviour
{
	[Token(Token = "0x2000013")]
	public enum _numberOfBands
	{
		[Token(Token = "0x4000084")]
		Bands8,
		[Token(Token = "0x4000085")]
		Bands16
	}

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0.1f, 2f)]
	public float bufferInitialDecreaseSpeed;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 10f)]
	public float bufferDecreaseSpeedMultiply;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float freqBandsPower;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float audioProfileInitialValue;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool audioProfileDecreasing;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float audioProfileDecreasingSpeed;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public _numberOfBands numberOfBands;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float[] initialSamplesL;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float[] initialSamplesR;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float[] freqBands8;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float[] freqBands8Buffer;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] freqBands8BufferDecrease;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[] freqBands8Highest;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float[] freqBands16;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float[] freqBands16Buffer;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float[] freqBands16BufferDecrease;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float[] freqBands16Highest;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private AudioSource audioSource;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[HideInInspector]
	public float[] finalBands8;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	public float[] finalBands8Buffer;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[HideInInspector]
	public float[] finalBands16;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[HideInInspector]
	public float[] finalBands16Buffer;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[HideInInspector]
	public float amplitude8;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[HideInInspector]
	public float amplitudeBuffer8;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[HideInInspector]
	public float amplitude16;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[HideInInspector]
	public float amplitudeBuffer16;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float amplitudeHighest;

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xC9D674", Offset = "0xC9D674", VA = "0xC9D674")]
	private void Start()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xC9D744", Offset = "0xC9D744", VA = "0xC9D744")]
	private void Update()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xC9D6D8", Offset = "0xC9D6D8", VA = "0xC9D6D8")]
	private void AudioProfile(float audioProfileValue)
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xC9DB78", Offset = "0xC9DB78", VA = "0xC9DB78")]
	private void CreateAmplitude8()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xC9DFD0", Offset = "0xC9DFD0", VA = "0xC9DFD0")]
	private void CreateAmplitude16()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xC9DA58", Offset = "0xC9DA58", VA = "0xC9DA58")]
	private void CreateFinalBands8()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xC9DEB0", Offset = "0xC9DEB0", VA = "0xC9DEB0")]
	private void CreateFinalBands16()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xC9D900", Offset = "0xC9D900", VA = "0xC9D900")]
	private void CreateBandBuffer8()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xC9DD58", Offset = "0xC9DD58", VA = "0xC9DD58")]
	private void CreateBandBuffer16()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xC9D7E8", Offset = "0xC9D7E8", VA = "0xC9D7E8")]
	private void CreateFreqBands8()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xC9DC04", Offset = "0xC9DC04", VA = "0xC9DC04")]
	private void CreateFreqBands16()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xC9E05C", Offset = "0xC9E05C", VA = "0xC9E05C")]
	public LivingParticlesAudioSource()
	{
	}
}
[Token(Token = "0x2000014")]
public class LivingParticleArrayController : MonoBehaviour
{
	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] affectors;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector4[] positions;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystemRenderer psr;

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xC9E24C", Offset = "0xC9E24C", VA = "0xC9E24C")]
	private void Start()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xC9E310", Offset = "0xC9E310", VA = "0xC9E310")]
	private void Update()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xC9E47C", Offset = "0xC9E47C", VA = "0xC9E47C")]
	public LivingParticleArrayController()
	{
	}
}
[Token(Token = "0x2000015")]
public class LivingParticleController : MonoBehaviour
{
	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform affector;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystemRenderer psr;

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xC9E484", Offset = "0xC9E484", VA = "0xC9E484")]
	private void Start()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xC9E4DC", Offset = "0xC9E4DC", VA = "0xC9E4DC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xC9E55C", Offset = "0xC9E55C", VA = "0xC9E55C")]
	public LivingParticleController()
	{
	}
}
[Token(Token = "0x2000016")]
public class ParticleGridGenerator : MonoBehaviour
{
	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool rewriteVertexStreams;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float particleSize;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color particleColor;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 particleRotation3D;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool randomColorAlpha;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float xDistance;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float yDistance;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float zDistance;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int xSize;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int ySize;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int zSize;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float OffsetEven;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool updateEveryFrame;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float even;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] positions;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem ps;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<Vector4> customData;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<Vector4> customData2;

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xC9E564", Offset = "0xC9E564", VA = "0xC9E564")]
	private void Start()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xC9E6E8", Offset = "0xC9E6E8", VA = "0xC9E6E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xC9E5C4", Offset = "0xC9E5C4", VA = "0xC9E5C4")]
	public void UpdateGrid()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xC9E748", Offset = "0xC9E748", VA = "0xC9E748")]
	private void GenerateGrid()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xC9E884", Offset = "0xC9E884", VA = "0xC9E884")]
	private void GenerateParticles()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xC9ECBC", Offset = "0xC9ECBC", VA = "0xC9ECBC")]
	private void CreateOffsetVector()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xC9ED9C", Offset = "0xC9ED9C", VA = "0xC9ED9C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xC9EDAC", Offset = "0xC9EDAC", VA = "0xC9EDAC")]
	public ParticleGridGenerator()
	{
	}
}
[Token(Token = "0x2000017")]
public class ParticleSystemRampGenerator : MonoBehaviour
{
	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Gradient procedrualGradientRamp;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool procedrualGradientEnabled;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool updateEveryFrame;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystemRenderer psr;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Texture2D rampTexture;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Texture2D tempTexture;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float width;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float height;

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xC9EEA4", Offset = "0xC9EEA4", VA = "0xC9EEA4")]
	private void Start()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xC9EF9C", Offset = "0xC9EF9C", VA = "0xC9EF9C")]
	private void Update()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xC9EFB4", Offset = "0xC9EFB4", VA = "0xC9EFB4")]
	private Texture2D GenerateTextureFromGradient(Gradient grad)
	{
		return null;
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xC9EF1C", Offset = "0xC9EF1C", VA = "0xC9EF1C")]
	public void UpdateRampTexture()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xC9F160", Offset = "0xC9F160", VA = "0xC9F160")]
	public ParticleSystemRampGenerator()
	{
	}
}
[Token(Token = "0x2000018")]
public class SuperSimpleMovement : MonoBehaviour
{
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float movementSpeed;

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xC9F174", Offset = "0xC9F174", VA = "0xC9F174")]
	private void Start()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xC9F178", Offset = "0xC9F178", VA = "0xC9F178")]
	private void Update()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xC9F258", Offset = "0xC9F258", VA = "0xC9F258")]
	public SuperSimpleMovement()
	{
	}
}
[Token(Token = "0x2000019")]
public class UIController : MonoBehaviour
{
	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light directionalLight;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ReflectionProbe reflectionProbe;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material daySkyboxMaterial;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material nightSkyboxMaterial;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform prefabHolder;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text text;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform[] prefabs;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<Transform> lt;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int activeNumber;

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xC9F268", Offset = "0xC9F268", VA = "0xC9F268")]
	private void Start()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xC9F48C", Offset = "0xC9F48C", VA = "0xC9F48C")]
	public void EnableActive()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xC9F564", Offset = "0xC9F564", VA = "0xC9F564")]
	public void ChangeEffect(bool bo)
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xC9F5C0", Offset = "0xC9F5C0", VA = "0xC9F5C0")]
	public void SetDay()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xC9F600", Offset = "0xC9F600", VA = "0xC9F600")]
	public void SetNight()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xC9F640", Offset = "0xC9F640", VA = "0xC9F640")]
	private void Update()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xC9F6BC", Offset = "0xC9F6BC", VA = "0xC9F6BC")]
	public UIController()
	{
	}
}
[Token(Token = "0x200001A")]
public class ConLaser : MonoBehaviour
{
	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxLength;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject hitEffect;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer meshRenderer1;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer meshRenderer2;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ParticleSystem[] hitPsArray;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int segmentCount;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float globalProgressSpeed;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve shaderProgressCurve;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve lineWidthCurve;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Light pl;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float moveHitToSource;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private LineRenderer lr;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3[] resultVectors;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float dist;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float globalProgress;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 hitPosition;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 currentPosition;

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xC9F6C4", Offset = "0xC9F6C4", VA = "0xC9F6C4")]
	private void Start()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xC9F7EC", Offset = "0xC9F7EC", VA = "0xC9F7EC")]
	private void Update()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xCA00A4", Offset = "0xCA00A4", VA = "0xCA00A4")]
	public ConLaser()
	{
	}
}
[Token(Token = "0x200001B")]
[ExecuteInEditMode]
public class EnchantedMeshApply : MonoBehaviour
{
	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform EnchantPoint;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material EnchantMaterial;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Material> rendererMaterials;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshRenderer[] meshRenderers;

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xCA00C0", Offset = "0xCA00C0", VA = "0xCA00C0")]
	private void Start()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xCA036C", Offset = "0xCA036C", VA = "0xCA036C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xCA04D0", Offset = "0xCA04D0", VA = "0xCA04D0")]
	public EnchantedMeshApply()
	{
	}
}
[Token(Token = "0x200001C")]
[RequireComponent(typeof(ParticleSystem))]
public class HomingParticles : MonoBehaviour
{
	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float force;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem particleSystem;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.MainModule particleSystemMainModule;

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xCA0558", Offset = "0xCA0558", VA = "0xCA0558")]
	private void Start()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xCA05D8", Offset = "0xCA05D8", VA = "0xCA05D8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xCA09A0", Offset = "0xCA09A0", VA = "0xCA09A0")]
	public HomingParticles()
	{
	}
}
[Token(Token = "0x200001D")]
public class LaserLine : MonoBehaviour
{
	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxLength;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve shaderProgressCurve;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve lineWidthCurve;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float globalProgressSpeed;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject explosionPrefab;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem psEmbers;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int trailParticleCount;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float moveHitToSource;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float AnimationProgress;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float HitLength;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lr;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 positionForExplosion;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool spawnExplosion;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3[] particleSpawnPositions;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 endPoint;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float globalProgress;

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xCA09B0", Offset = "0xCA09B0", VA = "0xCA09B0")]
	private void DrawLine()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xCA0A58", Offset = "0xCA0A58", VA = "0xCA0A58")]
	private void CastLaserRay()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xCA0E0C", Offset = "0xCA0E0C", VA = "0xCA0E0C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xCA1014", Offset = "0xCA1014", VA = "0xCA1014")]
	private void Update()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xCA1058", Offset = "0xCA1058", VA = "0xCA1058")]
	public LaserLine()
	{
	}
}
[Token(Token = "0x200001E")]
public class MetaAudioController : MonoBehaviour
{
	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource loopingSFX;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] waveSfxPrefabs;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] explosionSfxPregabs;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] smallExplosionSfxPregabs;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float globalProgressSpeed;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float globalProgress;

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xCA1080", Offset = "0xCA1080", VA = "0xCA1080")]
	private void Start()
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xCA1088", Offset = "0xCA1088", VA = "0xCA1088")]
	public void EmitParticleExplosion(Vector3 pos, bool big)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xCA11AC", Offset = "0xCA11AC", VA = "0xCA11AC")]
	private void Update()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xCA134C", Offset = "0xCA134C", VA = "0xCA134C")]
	public MetaAudioController()
	{
	}
}
[Token(Token = "0x200001F")]
public class MouseTarget : MonoBehaviour
{
	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform ms;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem startWavePS;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem startParticles;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ParticleSystem smallMissiles;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int smallMissilesCount;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ParticleSystem bigMissileOne;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ParticleSystem bigMissileTwo;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ParticleSystem bigMissileThree;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int bigMissileThreeCount;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 mouseWorldPosition;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Animator anim;

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xCA135C", Offset = "0xCA135C", VA = "0xCA135C")]
	private void Start()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xCA13B4", Offset = "0xCA13B4", VA = "0xCA13B4")]
	private void Update()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xCA15A0", Offset = "0xCA15A0", VA = "0xCA15A0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xCA1740", Offset = "0xCA1740", VA = "0xCA1740")]
	public MouseTarget()
	{
	}
}
[Token(Token = "0x2000020")]
public class MouseTargetLasers : MonoBehaviour
{
	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform laserShotPosition;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem startWavePS;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem startParticles;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int startParticlesCount;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject laserShotPrefab;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 mouseWorldPosition;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Animator anim;

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xCA1760", Offset = "0xCA1760", VA = "0xCA1760")]
	private void Start()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xCA17B8", Offset = "0xCA17B8", VA = "0xCA17B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xCA198C", Offset = "0xCA198C", VA = "0xCA198C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xCA1B14", Offset = "0xCA1B14", VA = "0xCA1B14")]
	public MouseTargetLasers()
	{
	}
}
[Token(Token = "0x2000021")]
public class ParticleCollisionController : MonoBehaviour
{
	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MetaAudioController mac;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool big;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<ParticleCollisionEvent> colEvents;

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xCA1B2C", Offset = "0xCA1B2C", VA = "0xCA1B2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xCA1BE0", Offset = "0xCA1BE0", VA = "0xCA1BE0")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xCA1CC8", Offset = "0xCA1CC8", VA = "0xCA1CC8")]
	public ParticleCollisionController()
	{
	}
}
[Token(Token = "0x2000022")]
public class RandomSFX : MonoBehaviour
{
	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] clips;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource asource;

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xCA1CD0", Offset = "0xCA1CD0", VA = "0xCA1CD0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xCA1DAC", Offset = "0xCA1DAC", VA = "0xCA1DAC")]
	public RandomSFX()
	{
	}
}
[Token(Token = "0x2000023")]
public class SelfDestroy : MonoBehaviour
{
	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float timeToDestroy;

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xCA1DB4", Offset = "0xCA1DB4", VA = "0xCA1DB4")]
	private void Start()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xCA1E30", Offset = "0xCA1E30", VA = "0xCA1E30")]
	public SelfDestroy()
	{
	}
}
[Token(Token = "0x2000024")]
[RequireComponent(typeof(ParticleSystem))]
public class ParticleSeekOptimized : MonoBehaviour
{
	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float force;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem particleSystem;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.MainModule particleSystemMainModule;

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xCA1E40", Offset = "0xCA1E40", VA = "0xCA1E40")]
	private void Start()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xCA1EC0", Offset = "0xCA1EC0", VA = "0xCA1EC0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xCA2288", Offset = "0xCA2288", VA = "0xCA2288")]
	public ParticleSeekOptimized()
	{
	}
}
[Token(Token = "0x2000025")]
public class StopwatchDebugger
{
	[Token(Token = "0x2000026")]
	public enum AverageType
	{
		[Token(Token = "0x4000103")]
		Single,
		[Token(Token = "0x4000104")]
		Average
	}

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Stopwatch clock;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, List<double>> timeSaves;

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xCA2298", Offset = "0xCA2298", VA = "0xCA2298")]
	public void Start(bool reset = true)
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xCA22CC", Offset = "0xCA22CC", VA = "0xCA22CC")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xCA232C", Offset = "0xCA232C", VA = "0xCA232C")]
	public void StopTotalMilliseconds(string funcName = "Stopwatch", AverageType average = AverageType.Single)
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xCA26F8", Offset = "0xCA26F8", VA = "0xCA26F8")]
	public void StopMicroSeconds(string funcName = "Stopwatch", AverageType average = AverageType.Single)
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xCA2870", Offset = "0xCA2870", VA = "0xCA2870")]
	public void StopNanoSeconds(string funcName = "Stopwatch", AverageType average = AverageType.Single)
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xCA2484", Offset = "0xCA2484", VA = "0xCA2484")]
	private void AddMean(string funcName, double milliseconds)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xCA2624", Offset = "0xCA2624", VA = "0xCA2624")]
	private double GetMeanMiliseconds(string funcName)
	{
		return default(double);
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xCA29E8", Offset = "0xCA29E8", VA = "0xCA29E8")]
	public StopwatchDebugger()
	{
	}
}
[Token(Token = "0x2000027")]
public class EasySaveTester : MonoBehaviour
{
	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ES3Settings settings;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xCA2AAC", Offset = "0xCA2AAC", VA = "0xCA2AAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xCA2B4C", Offset = "0xCA2B4C", VA = "0xCA2B4C")]
	[Button(null, EButtonEnableMode.Always)]
	public void CreateCache()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xCA2C94", Offset = "0xCA2C94", VA = "0xCA2C94")]
	[Button(null, EButtonEnableMode.Always)]
	public void SaveObject()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xCA2DA0", Offset = "0xCA2DA0", VA = "0xCA2DA0")]
	[Button(null, EButtonEnableMode.Always)]
	public void StoreCache()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xCA2F00", Offset = "0xCA2F00", VA = "0xCA2F00")]
	[Button(null, EButtonEnableMode.Always)]
	public void LoadObject()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xCA2FC4", Offset = "0xCA2FC4", VA = "0xCA2FC4")]
	public EasySaveTester()
	{
	}
}
[Token(Token = "0x2000028")]
public class GetHeadsetName : MonoBehaviour
{
	[Token(Token = "0x2000029")]
	public enum eDeviceMaker
	{
		[Token(Token = "0x400010F")]
		Unknown,
		[Token(Token = "0x4000110")]
		Oculus,
		[Token(Token = "0x4000111")]
		Pico
	}

	[Token(Token = "0x200002A")]
	public enum eDeviceType
	{
		[Token(Token = "0x4000113")]
		Unknown,
		[Token(Token = "0x4000114")]
		OculusQuest,
		[Token(Token = "0x4000115")]
		OculusQuest2,
		[Token(Token = "0x4000116")]
		OculusLink,
		[Token(Token = "0x4000117")]
		OculusQuestPro,
		[Token(Token = "0x4000118")]
		Pico3,
		[Token(Token = "0x4000119")]
		Pico4
	}

	[Token(Token = "0x4000106")]
	public const string OCULUSNAME = "Oculus";

	[Token(Token = "0x4000107")]
	public const string PICONAME = "Pico";

	[Token(Token = "0x4000108")]
	public const string PICONEO3 = "Pico Neo 3";

	[Token(Token = "0x4000109")]
	public const string PICO4 = "Pico A8120";

	[Token(Token = "0x400010A")]
	public const string OCULUSPRO = "Pro";

	[Token(Token = "0x400010B")]
	public const string OCULUSLINK = "Link";

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static eDeviceMaker deviceMaker;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static eDeviceType deviceType;

	[Token(Token = "0x17000003")]
	public static eDeviceMaker myMaker
	{
		[Token(Token = "0x600009D")]
		[Address(RVA = "0xCA2FCC", Offset = "0xCA2FCC", VA = "0xCA2FCC")]
		get
		{
			return default(eDeviceMaker);
		}
	}

	[Token(Token = "0x17000004")]
	public static eDeviceType myDevice
	{
		[Token(Token = "0x600009E")]
		[Address(RVA = "0xCA3120", Offset = "0xCA3120", VA = "0xCA3120")]
		get
		{
			return default(eDeviceType);
		}
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xCA3028", Offset = "0xCA3028", VA = "0xCA3028")]
	public static eDeviceMaker GetMaker()
	{
		return default(eDeviceMaker);
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xCA317C", Offset = "0xCA317C", VA = "0xCA317C")]
	public static eDeviceType GetDevice()
	{
		return default(eDeviceType);
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xCA3370", Offset = "0xCA3370", VA = "0xCA3370")]
	public GetHeadsetName()
	{
	}
}
[Token(Token = "0x200002B")]
public class HapticsTester : MonoBehaviour
{
	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xCA3378", Offset = "0xCA3378", VA = "0xCA3378")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xCA337C", Offset = "0xCA337C", VA = "0xCA337C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xCA3464", Offset = "0xCA3464", VA = "0xCA3464")]
	public HapticsTester()
	{
	}
}
[Token(Token = "0x200002C")]
public class LocaleDropdown : MonoBehaviour
{
	[Token(Token = "0x200002D")]
	[CompilerGenerated]
	private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400011E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400011F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocaleDropdown <>4__this;

		[Token(Token = "0x17000005")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000AD")]
			[Address(RVA = "0xCA3BC0", Offset = "0xCA3BC0", VA = "0xCA3BC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000AF")]
			[Address(RVA = "0xCA3C08", Offset = "0xCA3C08", VA = "0xCA3C08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000AA")]
		[Address(RVA = "0xCA34E0", Offset = "0xCA34E0", VA = "0xCA34E0")]
		[DebuggerHidden]
		public <Start>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60000AB")]
		[Address(RVA = "0xCA3740", Offset = "0xCA3740", VA = "0xCA3740", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000AC")]
		[Address(RVA = "0xCA3744", Offset = "0xCA3744", VA = "0xCA3744", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000AE")]
		[Address(RVA = "0xCA3BC8", Offset = "0xCA3BC8", VA = "0xCA3BC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dropdown dropdown;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Dropdown.OptionData> options;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int selected;

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xCA346C", Offset = "0xCA346C", VA = "0xCA346C")]
	[IteratorStateMachine(typeof(<Start>d__3))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xCA3508", Offset = "0xCA3508", VA = "0xCA3508")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xCA3588", Offset = "0xCA3588", VA = "0xCA3588")]
	public void ChangedLocale(Locale locale)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xCA3664", Offset = "0xCA3664", VA = "0xCA3664")]
	private static void LocaleSelected(int index)
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xCA3738", Offset = "0xCA3738", VA = "0xCA3738")]
	public LocaleDropdown()
	{
	}
}
[Token(Token = "0x200002E")]
public class BakeTexturesAtRuntime : MonoBehaviour
{
	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float elapsedTime;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MB3_TextureCombiner.CreateAtlasesCoroutineResult result;

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xCA3C10", Offset = "0xCA3C10", VA = "0xCA3C10")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xCA4124", Offset = "0xCA4124", VA = "0xCA4124")]
	private void OnBuiltAtlasesSuccess()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xCA4318", Offset = "0xCA4318", VA = "0xCA4318")]
	public BakeTexturesAtRuntime()
	{
	}
}
[Token(Token = "0x200002F")]
public class MB_BatchPrepareObjectsForDynamicBatchingDescription : MonoBehaviour
{
	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xCA438C", Offset = "0xCA438C", VA = "0xCA438C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xCA4424", Offset = "0xCA4424", VA = "0xCA4424")]
	public MB_BatchPrepareObjectsForDynamicBatchingDescription()
	{
	}
}
[Token(Token = "0x2000030")]
public class MB_SwapShirts : MonoBehaviour
{
	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshBaker;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] clothingAndBodyPartsBareTorso;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer[] clothingAndBodyPartsBareTorsoDamagedArm;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer[] clothingAndBodyPartsHoodie;

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xCA442C", Offset = "0xCA442C", VA = "0xCA442C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xCA4580", Offset = "0xCA4580", VA = "0xCA4580")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xCA4718", Offset = "0xCA4718", VA = "0xCA4718")]
	private void ChangeOutfit(Renderer[] outfit)
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xCA4D50", Offset = "0xCA4D50", VA = "0xCA4D50")]
	public MB_SwapShirts()
	{
	}
}
[Token(Token = "0x2000031")]
public class MB_PrepareObjectsForDynamicBatchingDescription : MonoBehaviour
{
	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xCA4D58", Offset = "0xCA4D58", VA = "0xCA4D58")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xCA4DF0", Offset = "0xCA4DF0", VA = "0xCA4DF0")]
	public MB_PrepareObjectsForDynamicBatchingDescription()
	{
	}
}
[Token(Token = "0x2000032")]
public class MB_DynamicAddDeleteExample : MonoBehaviour
{
	[Token(Token = "0x2000033")]
	[CompilerGenerated]
	private sealed class <largeNumber>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MB_DynamicAddDeleteExample <>4__this;

		[Token(Token = "0x17000007")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000C3")]
			[Address(RVA = "0xCA5610", Offset = "0xCA5610", VA = "0xCA5610", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000008")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000C5")]
			[Address(RVA = "0xCA5658", Offset = "0xCA5658", VA = "0xCA5658", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000C0")]
		[Address(RVA = "0xCA5354", Offset = "0xCA5354", VA = "0xCA5354")]
		[DebuggerHidden]
		public <largeNumber>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60000C1")]
		[Address(RVA = "0xCA549C", Offset = "0xCA549C", VA = "0xCA549C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000C2")]
		[Address(RVA = "0xCA54A0", Offset = "0xCA54A0", VA = "0xCA54A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000C4")]
		[Address(RVA = "0xCA5618", Offset = "0xCA5618", VA = "0xCA5618", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<GameObject> objsInCombined;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MB3_MultiMeshBaker mbd;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject[] objs;

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xCA4DF8", Offset = "0xCA4DF8", VA = "0xCA4DF8")]
	private float GaussianValue()
	{
		return default(float);
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xCA4E7C", Offset = "0xCA4E7C", VA = "0xCA4E7C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xCA52E0", Offset = "0xCA52E0", VA = "0xCA52E0")]
	[IteratorStateMachine(typeof(<largeNumber>d__6))]
	private IEnumerator largeNumber()
	{
		return null;
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xCA537C", Offset = "0xCA537C", VA = "0xCA537C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xCA5414", Offset = "0xCA5414", VA = "0xCA5414")]
	public MB_DynamicAddDeleteExample()
	{
	}
}
[Token(Token = "0x2000034")]
public class MB_Example : MonoBehaviour
{
	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshbaker;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] objsToCombine;

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xCA5660", Offset = "0xCA5660", VA = "0xCA5660")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xCA56B0", Offset = "0xCA56B0", VA = "0xCA56B0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xCA5730", Offset = "0xCA5730", VA = "0xCA5730")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xCA57C8", Offset = "0xCA57C8", VA = "0xCA57C8")]
	public MB_Example()
	{
	}
}
[Token(Token = "0x2000035")]
public class MB_ExampleMover : MonoBehaviour
{
	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int axis;

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xCA57D0", Offset = "0xCA57D0", VA = "0xCA57D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xCA5900", Offset = "0xCA5900", VA = "0xCA5900")]
	public MB_ExampleMover()
	{
	}
}
[Token(Token = "0x2000036")]
public class MB_ExampleSkinnedMeshDescription : MonoBehaviour
{
	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xCA5908", Offset = "0xCA5908", VA = "0xCA5908")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xCA59A0", Offset = "0xCA59A0", VA = "0xCA59A0")]
	public MB_ExampleSkinnedMeshDescription()
	{
	}
}
[Token(Token = "0x2000037")]
public class MB_SkinnedMeshSceneController : MonoBehaviour
{
	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject swordPrefab;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject hatPrefab;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject glassesPrefab;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject workerPrefab;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject targetCharacter;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MB3_MeshBaker skinnedMeshBaker;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject swordInstance;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject glassesInstance;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject hatInstance;

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xCA59A8", Offset = "0xCA59A8", VA = "0xCA59A8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xCA5B9C", Offset = "0xCA5B9C", VA = "0xCA5B9C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xCA6908", Offset = "0xCA6908", VA = "0xCA6908")]
	public Transform SearchHierarchyForBone(Transform current, string name)
	{
		return null;
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xCA6A14", Offset = "0xCA6A14", VA = "0xCA6A14")]
	public MB_SkinnedMeshSceneController()
	{
	}
}
[Token(Token = "0x2000038")]
public class MB_SwitchBakedObjectsTexture : MonoBehaviour
{
	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer targetRenderer;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] materials;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MB3_MeshBaker meshBaker;

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xCA6A1C", Offset = "0xCA6A1C", VA = "0xCA6A1C")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xCA6AB4", Offset = "0xCA6AB4", VA = "0xCA6AB4")]
	public void Start()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xCA6B54", Offset = "0xCA6B54", VA = "0xCA6B54")]
	public void Update()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xCA6DF0", Offset = "0xCA6DF0", VA = "0xCA6DF0")]
	public MB_SwitchBakedObjectsTexture()
	{
	}
}
[Token(Token = "0x2000039")]
public class MultiTimerSetter : MonoBehaviour
{
	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<TimerSystems> timers;

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xCA6DF8", Offset = "0xCA6DF8", VA = "0xCA6DF8")]
	public void _StartAllTimers()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xCA6E84", Offset = "0xCA6E84", VA = "0xCA6E84")]
	public void _PauseAllTimers()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xCA6F10", Offset = "0xCA6F10", VA = "0xCA6F10")]
	public MultiTimerSetter()
	{
	}
}
[Token(Token = "0x200003A")]
public class ObjectSelector3lb : MonoBehaviour
{
	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] objects;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int currentSelect;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int lastSelect;

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xCA6F98", Offset = "0xCA6F98", VA = "0xCA6F98")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xCA6FB8", Offset = "0xCA6FB8", VA = "0xCA6FB8")]
	public void _Select(int selection)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xCA707C", Offset = "0xCA707C", VA = "0xCA707C")]
	public void _SelectLast()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xCA7084", Offset = "0xCA7084", VA = "0xCA7084")]
	public void _SelectNext()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xCA7018", Offset = "0xCA7018", VA = "0xCA7018")]
	private void HideAll()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xCA70B0", Offset = "0xCA70B0", VA = "0xCA70B0")]
	public ObjectSelector3lb()
	{
	}
}
[Token(Token = "0x200003B")]
public enum ePlayerStats
{
	[Token(Token = "0x4000142")]
	SpiritHealth,
	[Token(Token = "0x4000143")]
	GolemHealth,
	[Token(Token = "0x4000144")]
	EnergyCapacity,
	[Token(Token = "0x4000145")]
	SpiritSpeed,
	[Token(Token = "0x4000146")]
	GolemSpeed,
	[Token(Token = "0x4000147")]
	SpiritDamage,
	[Token(Token = "0x4000148")]
	GolemDamage
}
[Token(Token = "0x200003C")]
[DefaultExecutionOrder(-1)]
public class PlayerManager : MonoBehaviour
{
	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	public float eXP;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayerAvatar spiritForm;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayerAvatarManager avatarManager;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerManager instance;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string islandName;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool init;

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xCA70B8", Offset = "0xCA70B8", VA = "0xCA70B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xCA7170", Offset = "0xCA7170", VA = "0xCA7170")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xCA7174", Offset = "0xCA7174", VA = "0xCA7174")]
	private void Inititalize()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xCA7314", Offset = "0xCA7314", VA = "0xCA7314")]
	public void GainXP(float xp)
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xCA7420", Offset = "0xCA7420", VA = "0xCA7420")]
	public bool SpendXP(float xp)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xCA7364", Offset = "0xCA7364", VA = "0xCA7364")]
	public void SaveXP()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xCA726C", Offset = "0xCA726C", VA = "0xCA726C")]
	private void LoadXP()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xCA747C", Offset = "0xCA747C", VA = "0xCA747C")]
	public void AddStat(float value, ePlayerStats stat)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xCA7480", Offset = "0xCA7480", VA = "0xCA7480")]
	public void RemoveStat(float value, ePlayerStats stat)
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xCA7484", Offset = "0xCA7484", VA = "0xCA7484")]
	public PlayerManager()
	{
	}
}
[Token(Token = "0x200003D")]
public class SimpleDebuggerScript : MonoBehaviour
{
	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMesh myText;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideIf("useArray")]
	public GameObject WhatToToggle;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useArray;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("useArray")]
	public GameObject[] objecTarray;

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xCA748C", Offset = "0xCA748C", VA = "0xCA748C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xCA74B8", Offset = "0xCA74B8", VA = "0xCA74B8")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xCA7624", Offset = "0xCA7624", VA = "0xCA7624")]
	public void ColorSystem(bool chg)
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xCA76B8", Offset = "0xCA76B8", VA = "0xCA76B8")]
	public SimpleDebuggerScript()
	{
	}
}
[Token(Token = "0x200003E")]
public class SpawnObject : MonoBehaviour
{
	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject spawnItem;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float spawnChance;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool spawnOnStart;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] spawnLocations;

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xCA76C0", Offset = "0xCA76C0", VA = "0xCA76C0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xCA76D0", Offset = "0xCA76D0", VA = "0xCA76D0")]
	public void _SpawnObjects()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xCA7920", Offset = "0xCA7920", VA = "0xCA7920")]
	public SpawnObject()
	{
	}
}
[Token(Token = "0x200003F")]
public class ChatController : MonoBehaviour
{
	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_InputField TMP_ChatInput;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TMP_Text TMP_ChatOutput;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Scrollbar ChatScrollbar;

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xCA7938", Offset = "0xCA7938", VA = "0xCA7938")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xCA79E0", Offset = "0xCA79E0", VA = "0xCA79E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xCA7A88", Offset = "0xCA7A88", VA = "0xCA7A88")]
	private void AddToChatOutput(string newText)
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xCA7F14", Offset = "0xCA7F14", VA = "0xCA7F14")]
	public ChatController()
	{
	}
}
[Token(Token = "0x2000040")]
public class EnvMapAnimator : MonoBehaviour
{
	[Token(Token = "0x2000041")]
	[CompilerGenerated]
	private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnvMapAnimator <>4__this;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Matrix4x4 <matrix>5__2;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000FA")]
			[Address(RVA = "0xCA825C", Offset = "0xCA825C", VA = "0xCA825C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000FC")]
			[Address(RVA = "0xCA82A4", Offset = "0xCA82A4", VA = "0xCA82A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000F7")]
		[Address(RVA = "0xCA8018", Offset = "0xCA8018", VA = "0xCA8018")]
		[DebuggerHidden]
		public <Start>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60000F8")]
		[Address(RVA = "0xCA8048", Offset = "0xCA8048", VA = "0xCA8048", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0xCA804C", Offset = "0xCA804C", VA = "0xCA804C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000FB")]
		[Address(RVA = "0xCA8264", Offset = "0xCA8264", VA = "0xCA8264", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 RotationSpeeds;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TMP_Text m_textMeshPro;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material m_material;

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xCA7F1C", Offset = "0xCA7F1C", VA = "0xCA7F1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xCA7FA4", Offset = "0xCA7FA4", VA = "0xCA7FA4")]
	[IteratorStateMachine(typeof(<Start>d__4))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xCA8040", Offset = "0xCA8040", VA = "0xCA8040")]
	public EnvMapAnimator()
	{
	}
}
[Token(Token = "0x2000042")]
public class XRHapticsTest : MonoBehaviour
{
	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xCA82AC", Offset = "0xCA82AC", VA = "0xCA82AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xCA82B0", Offset = "0xCA82B0", VA = "0xCA82B0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xCA831C", Offset = "0xCA831C", VA = "0xCA831C")]
	public void TriggerTest(InputVR3lb.Controller myController)
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xCA83FC", Offset = "0xCA83FC", VA = "0xCA83FC")]
	public XRHapticsTest()
	{
	}
}
[Token(Token = "0x2000043")]
[RequireComponent(typeof(Grabbable))]
[DefaultExecutionOrder(1000)]
public class Cart : MonoBehaviour
{
	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Grabbable grabbable;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnCartAdd;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnCartRemove;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Cartable> carted;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<Autohand.Hand, Vector3> startGrabPos;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<Autohand.Hand, Vector3> startGrabRot;

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xCA8404", Offset = "0xCA8404", VA = "0xCA8404")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xCA8628", Offset = "0xCA8628", VA = "0xCA8628")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xCA8818", Offset = "0xCA8818", VA = "0xCA8818")]
	private void OnCartGrabbed(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xCA8934", Offset = "0xCA8934", VA = "0xCA8934")]
	private void OnCartReleased(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xCA9018", Offset = "0xCA9018", VA = "0xCA9018")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xCA9280", Offset = "0xCA9280", VA = "0xCA9280")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xCA901C", Offset = "0xCA901C", VA = "0xCA901C")]
	private void StabilizeCartAndHands()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xCA9284", Offset = "0xCA9284", VA = "0xCA9284")]
	public void AddCartedObject(Cartable cartable)
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xCA9314", Offset = "0xCA9314", VA = "0xCA9314")]
	public void RemoveCartedObject(Cartable cartable)
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xCA94F4", Offset = "0xCA94F4", VA = "0xCA94F4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xCA956C", Offset = "0xCA956C", VA = "0xCA956C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xCA95E4", Offset = "0xCA95E4", VA = "0xCA95E4")]
	public Cart()
	{
	}
}
[Token(Token = "0x2000044")]
[DefaultExecutionOrder(1001)]
public class Cartable : MonoBehaviour
{
	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Grabbable grabbale;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnStartCarted;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnEndCarted;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Cart cart;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	internal Rigidbody body;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform cartedPoint;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float startMass;

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xCA9758", Offset = "0xCA9758", VA = "0xCA9758")]
	private void Start()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xCA9818", Offset = "0xCA9818", VA = "0xCA9818")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xCA8CC8", Offset = "0xCA8CC8", VA = "0xCA8CC8")]
	public void SetCart(Cart cart)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xCA93A4", Offset = "0xCA93A4", VA = "0xCA93A4")]
	public void UnsetCart(Cart cart)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xCA8E54", Offset = "0xCA8E54", VA = "0xCA8E54")]
	public void AlignToCartedPoint()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xCA982C", Offset = "0xCA982C", VA = "0xCA982C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xCA9830", Offset = "0xCA9830", VA = "0xCA9830")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xCA9834", Offset = "0xCA9834", VA = "0xCA9834")]
	public Cartable()
	{
	}
}
[Token(Token = "0x2000045")]
public static class AutoExtensions
{
	[Token(Token = "0x6000115")]
	public static bool CanGetComponent<T>(this Component componentClass, out T component)
	{
		return default(bool);
	}

	[Token(Token = "0x6000116")]
	public static bool CanGetComponent<T>(this GameObject componentClass, out T component)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000046")]
[RequireComponent(typeof(Rigidbody))]
public class CollisionSound : MonoBehaviour
{
	[Token(Token = "0x2000047")]
	[CompilerGenerated]
	private sealed class <SoundPlayBuffer>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CollisionSound <>4__this;

		[Token(Token = "0x1700000B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000120")]
			[Address(RVA = "0xCA9E8C", Offset = "0xCA9E8C", VA = "0xCA9E8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000122")]
			[Address(RVA = "0xCA9ED4", Offset = "0xCA9ED4", VA = "0xCA9ED4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600011D")]
		[Address(RVA = "0xCA9CF8", Offset = "0xCA9CF8", VA = "0xCA9CF8")]
		[DebuggerHidden]
		public <SoundPlayBuffer>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600011E")]
		[Address(RVA = "0xCA9DB8", Offset = "0xCA9DB8", VA = "0xCA9DB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600011F")]
		[Address(RVA = "0xCA9DBC", Offset = "0xCA9DBC", VA = "0xCA9DBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000121")]
		[Address(RVA = "0xCA9E94", Offset = "0xCA9E94", VA = "0xCA9E94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000048")]
	[CompilerGenerated]
	private sealed class <SoundPlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CollisionSound <>4__this;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x1700000D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000126")]
			[Address(RVA = "0xCA9FB0", Offset = "0xCA9FB0", VA = "0xCA9FB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000128")]
			[Address(RVA = "0xCA9FF8", Offset = "0xCA9FF8", VA = "0xCA9FF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0xCA9D20", Offset = "0xCA9D20", VA = "0xCA9D20")]
		[DebuggerHidden]
		public <SoundPlayBuffer>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0xCA9EDC", Offset = "0xCA9EDC", VA = "0xCA9EDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000125")]
		[Address(RVA = "0xCA9EE0", Offset = "0xCA9EE0", VA = "0xCA9EE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0xCA9FB8", Offset = "0xCA9FB8", VA = "0xCA9FB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The layers that cause the sound to play")]
	public LayerMask collisionTriggers;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Source to play sound from")]
	public AudioSource source;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Source to play sound from")]
	public AudioClip clip;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	[Tooltip("Source to play sound from")]
	public AnimationCurve velocityVolumeCurve;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float volumeAmp;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float velocityAmp;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float soundRepeatDelay;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody body;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canPlaySound;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine playSoundRoutine;

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xCA98D0", Offset = "0xCA98D0", VA = "0xCA98D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xCA99C8", Offset = "0xCA99C8", VA = "0xCA99C8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xCA99DC", Offset = "0xCA99DC", VA = "0xCA99DC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xCA9C84", Offset = "0xCA9C84", VA = "0xCA9C84")]
	[IteratorStateMachine(typeof(<SoundPlayBuffer>d__13))]
	private IEnumerator SoundPlayBuffer()
	{
		return null;
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xCA9944", Offset = "0xCA9944", VA = "0xCA9944")]
	[IteratorStateMachine(typeof(<SoundPlayBuffer>d__14))]
	private IEnumerator SoundPlayBuffer(float time)
	{
		return null;
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xCA9D48", Offset = "0xCA9D48", VA = "0xCA9D48")]
	public CollisionSound()
	{
	}
}
[Token(Token = "0x2000049")]
public class BowlingManager : MonoBehaviour
{
	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Bowling Ball Settings")]
	public GameObject bowlingBall;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Bowling Pin Settings")]
	public Vector3 pinCenter;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float pinSpaceX;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float pinSpaceZ;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<GameObject> pins;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 ballPosition;

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xCAA000", Offset = "0xCAA000", VA = "0xCAA000")]
	private void Start()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xCAA238", Offset = "0xCAA238", VA = "0xCAA238")]
	public void ResetBall()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xCAA03C", Offset = "0xCAA03C", VA = "0xCAA03C")]
	public void ResetPins()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xCAA2DC", Offset = "0xCAA2DC", VA = "0xCAA2DC")]
	public BowlingManager()
	{
	}
}
[Token(Token = "0x200004A")]
public class DemoExitCondition : MonoBehaviour
{
	[Token(Token = "0x600012D")]
	[Address(RVA = "0xCAA364", Offset = "0xCAA364", VA = "0xCAA364")]
	private void Update()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xCAA3FC", Offset = "0xCAA3FC", VA = "0xCAA3FC")]
	public DemoExitCondition()
	{
	}
}
[Token(Token = "0x200004B")]
public class PlatformMover : MonoBehaviour
{
	[Token(Token = "0x200004C")]
	[CompilerGenerated]
	private sealed class <Move>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlatformMover <>4__this;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timePassed>5__2;

		[Token(Token = "0x1700000F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000135")]
			[Address(RVA = "0xCAA760", Offset = "0xCAA760", VA = "0xCAA760", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000010")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000137")]
			[Address(RVA = "0xCAA7A8", Offset = "0xCAA7A8", VA = "0xCAA7A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000132")]
		[Address(RVA = "0xCAA4BC", Offset = "0xCAA4BC", VA = "0xCAA4BC")]
		[DebuggerHidden]
		public <Move>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000133")]
		[Address(RVA = "0xCAA4F4", Offset = "0xCAA4F4", VA = "0xCAA4F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000134")]
		[Address(RVA = "0xCAA4F8", Offset = "0xCAA4F8", VA = "0xCAA4F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000136")]
		[Address(RVA = "0xCAA768", Offset = "0xCAA768", VA = "0xCAA768", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 toRange;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float time;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 startPos;

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xCAA404", Offset = "0xCAA404", VA = "0xCAA404")]
	private void Start()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xCAA448", Offset = "0xCAA448", VA = "0xCAA448")]
	[IteratorStateMachine(typeof(<Move>d__4))]
	private IEnumerator Move()
	{
		return null;
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xCAA4E4", Offset = "0xCAA4E4", VA = "0xCAA4E4")]
	public PlatformMover()
	{
	}
}
[Token(Token = "0x200004D")]
public class TextFieldInspector : MonoBehaviour
{
	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string text;

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xCAA7B0", Offset = "0xCAA7B0", VA = "0xCAA7B0")]
	public TextFieldInspector()
	{
	}
}
[Token(Token = "0x200004E")]
public class TextInformation : MonoBehaviour
{
	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject activateImage;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject deactivateImage;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] texts;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool active;

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xCAA7B8", Offset = "0xCAA7B8", VA = "0xCAA7B8")]
	public void ActivateText()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xCAA84C", Offset = "0xCAA84C", VA = "0xCAA84C")]
	public void DeactivateText()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xCAA8DC", Offset = "0xCAA8DC", VA = "0xCAA8DC")]
	public void ToggleText()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xCAA8EC", Offset = "0xCAA8EC", VA = "0xCAA8EC")]
	public TextInformation()
	{
	}
}
[Token(Token = "0x200004F")]
public class TMPSizeProtector : MonoBehaviour
{
	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float size;

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xCAA8F4", Offset = "0xCAA8F4", VA = "0xCAA8F4")]
	private void Start()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xCAA9B4", Offset = "0xCAA9B4", VA = "0xCAA9B4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xCAAA74", Offset = "0xCAAA74", VA = "0xCAAA74")]
	public TMPSizeProtector()
	{
	}
}
[Token(Token = "0x2000050")]
public static class JointExtensions
{
	[Token(Token = "0x6000140")]
	[Address(RVA = "0xCAAA7C", Offset = "0xCAAA7C", VA = "0xCAAA7C")]
	public static Vector3 Angles(this ConfigurableJoint joint)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000051")]
public class MatchPlacePoint : PlacePoint3lb
{
	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[AutoHeader("Match Point", 0, 0)]
	public bool non;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public Vector3 rotationAxisWeight;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Space]
	public bool mirrorX;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	public bool mirrorY;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10A")]
	public bool mirrorZ;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[Space]
	[Min(0f)]
	public float matchDistance;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Range(0f, 180f)]
	public float matchAngleDistance;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[AutoToggleHeader("Use Near Match Highlight", 0, 0)]
	public bool useMatchHighlight;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[Min(0f)]
	[ShowIf("useMatchHighlight")]
	public float highlightMatchDistance;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	[Range(0f, 180f)]
	[ShowIf("useMatchHighlight")]
	public float highlightMatchAngleDistance;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[ShowIf("useMatchHighlight")]
	public UnityEvent OnHighlightMatchEvent;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[ShowIf("useMatchHighlight")]
	public UnityEvent OnStopMatchHighlightEvent;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float removeTime;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private bool isMatchHighlighting;

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xCAAE98", Offset = "0xCAAE98", VA = "0xCAAE98")]
	protected new void FixedUpdate()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xCAB064", Offset = "0xCAB064", VA = "0xCAB064", Slot = "15")]
	public virtual bool HasMatch(Transform match, float distance, float angleDistance)
	{
		return default(bool);
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xCAB018", Offset = "0xCAB018", VA = "0xCAB018")]
	public void OnMatchHighlight(Grabbable highlightObj)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xCAB040", Offset = "0xCAB040", VA = "0xCAB040")]
	public void OnStopMatchHighlight(Grabbable highlightObj)
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xCAB210", Offset = "0xCAB210", VA = "0xCAB210", Slot = "7")]
	public override void Place(Grabbable placeObj)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xCAB298", Offset = "0xCAB298", VA = "0xCAB298", Slot = "8")]
	public override void Remove(Grabbable placeObj)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xCAB2CC", Offset = "0xCAB2CC", VA = "0xCAB2CC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xCAB928", Offset = "0xCAB928", VA = "0xCAB928")]
	public MatchPlacePoint()
	{
	}
}
[Token(Token = "0x2000052")]
public delegate void PlacePoint3lbEvent(PlacePoint3lb point, Grabbable3lb grabbable);
[Token(Token = "0x2000053")]
[RequireComponent(typeof(SphereCollider))]
public class PlacePoint3lb : PlacePoint
{
	[Token(Token = "0x600014E")]
	[Address(RVA = "0xCABB48", Offset = "0xCABB48", VA = "0xCABB48", Slot = "6")]
	public override bool CanPlace(Grabbable placeObj)
	{
		return default(bool);
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xCAB9B8", Offset = "0xCAB9B8", VA = "0xCAB9B8")]
	public PlacePoint3lb()
	{
	}
}
[Token(Token = "0x2000054")]
[RequireComponent(typeof(PlacePoint))]
public class PlacePointEventDebugger : MonoBehaviour
{
	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlacePoint placePoint;

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xCABD34", Offset = "0xCABD34", VA = "0xCABD34")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xCAC12C", Offset = "0xCAC12C", VA = "0xCAC12C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xCAC524", Offset = "0xCAC524", VA = "0xCAC524")]
	public PlacePointEventDebugger()
	{
	}
}
[Token(Token = "0x2000056")]
public class HandEditor : MonoBehaviour
{
	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool useEditorAutoPose;

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xCAC8E4", Offset = "0xCAC8E4", VA = "0xCAC8E4")]
	public HandEditor()
	{
	}
}
[Token(Token = "0x2000057")]
[DefaultExecutionOrder(-100000)]
public class IgnoreHandLayer : MonoBehaviour
{
	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool includeChildren;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int startLayer;

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xCAC8EC", Offset = "0xCAC8EC", VA = "0xCAC8EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xCAC960", Offset = "0xCAC960", VA = "0xCAC960")]
	private void LateStart()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xCAC9C0", Offset = "0xCAC9C0", VA = "0xCAC9C0")]
	internal void SetLayerRecursive(Transform obj, int newLayer)
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xCACA5C", Offset = "0xCACA5C", VA = "0xCACA5C")]
	public IgnoreHandLayer()
	{
	}
}
[Token(Token = "0x2000058")]
public class AHInputModule : MonoBehaviour
{
	[Token(Token = "0x6000162")]
	[Address(RVA = "0xCACA6C", Offset = "0xCACA6C", VA = "0xCACA6C")]
	public AHInputModule()
	{
	}
}
[Token(Token = "0x2000059")]
public class HeadCameraSmoothing : MonoBehaviour
{
	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 lastPos;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Quaternion lastRot;

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xCACA74", Offset = "0xCACA74", VA = "0xCACA74")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xCACAC4", Offset = "0xCACAC4", VA = "0xCACAC4")]
	public HeadCameraSmoothing()
	{
	}
}
[Token(Token = "0x200005A")]
public class Pushable : MonoBehaviour
{
	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("BETA")]
	public Vector3 strengthScale;

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xCACACC", Offset = "0xCACACC", VA = "0xCACACC")]
	public Pushable()
	{
	}
}
[Token(Token = "0x200005B")]
[CreateAssetMenu(fileName = "AutoHand Pose", menuName = "Auto Hand/Custom Settings", order = 1)]
public class AutoHandSettings : ScriptableObject
{
	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Whether the popup should be ignored on launch or not")]
	public bool ignoreSetup;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("-1 is custom, 0 is low, 1 is medium, 2 is high")]
	public float quality;

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xCACB2C", Offset = "0xCACB2C", VA = "0xCACB2C")]
	public static void ClearSettings()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xCACB9C", Offset = "0xCACB9C", VA = "0xCACB9C")]
	public AutoHandSettings()
	{
	}
}
[Token(Token = "0x200005C")]
public enum eAutoMoveFoward
{
	[Token(Token = "0x40001B3")]
	Override,
	[Token(Token = "0x40001B4")]
	Head,
	[Token(Token = "0x40001B5")]
	Right,
	[Token(Token = "0x40001B6")]
	Left
}
[Token(Token = "0x200005D")]
[DefaultExecutionOrder(-1)]
public class AutoMoveController : MonoBehaviour
{
	[Token(Token = "0x200005E")]
	public enum eControllerType
	{
		[Token(Token = "0x40001D4")]
		None,
		[Token(Token = "0x40001D5")]
		Right,
		[Token(Token = "0x40001D6")]
		Left,
		[Token(Token = "0x40001D7")]
		Both
	}

	[Token(Token = "0x200005F")]
	public enum eMovementMode
	{
		[Token(Token = "0x40001D9")]
		Flight,
		[Token(Token = "0x40001DA")]
		Grounded
	}

	[Token(Token = "0x2000060")]
	[CompilerGenerated]
	private sealed class <Init>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AutoMoveController <>4__this;

		[Token(Token = "0x17000013")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600018C")]
			[Address(RVA = "0xCAE604", Offset = "0xCAE604", VA = "0xCAE604", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600018E")]
			[Address(RVA = "0xCAE64C", Offset = "0xCAE64C", VA = "0xCAE64C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000189")]
		[Address(RVA = "0xCACC68", Offset = "0xCACC68", VA = "0xCACC68")]
		[DebuggerHidden]
		public <Init>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0xCAE4A8", Offset = "0xCAE4A8", VA = "0xCAE4A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600018B")]
		[Address(RVA = "0xCAE4AC", Offset = "0xCAE4AC", VA = "0xCAE4AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600018D")]
		[Address(RVA = "0xCAE60C", Offset = "0xCAE60C", VA = "0xCAE60C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000061")]
	[CompilerGenerated]
	private sealed class <ControlLossTimer>d__63 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AutoMoveController <>4__this;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x17000015")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000192")]
			[Address(RVA = "0xCAE74C", Offset = "0xCAE74C", VA = "0xCAE74C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000016")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000194")]
			[Address(RVA = "0xCAE794", Offset = "0xCAE794", VA = "0xCAE794", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600018F")]
		[Address(RVA = "0xCAE434", Offset = "0xCAE434", VA = "0xCAE434")]
		[DebuggerHidden]
		public <ControlLossTimer>d__63(int <>1__state)
		{
		}

		[Token(Token = "0x6000190")]
		[Address(RVA = "0xCAE654", Offset = "0xCAE654", VA = "0xCAE654", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000191")]
		[Address(RVA = "0xCAE658", Offset = "0xCAE658", VA = "0xCAE658", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000193")]
		[Address(RVA = "0xCAE754", Offset = "0xCAE754", VA = "0xCAE754", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The referenced movement controller")]
	[FancyHeader("References", 0, 0)]
	public AutoMoveCharacter charController;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space]
	public bool nonVRMode;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[ShowIf("nonVRMode")]
	[Tooltip("The added height of the player on start in Non-VR mode")]
	public float nonVRHeight;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ShowIf("nonVRMode")]
	[Tooltip("The speed of the X and Y axis respectivly for turning with the mouse")]
	public Vector2 mouseTurnSpeed;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("nonVRMode")]
	[Tooltip("This point is used to determin where the hand is place (ideally a point under and in front of the camera) in non-VR mode")]
	public Transform nonVRHandFollow;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ShowIf("nonVRMode")]
	[Tooltip("The hand for non-vr mode")]
	public Autohand.Hand nonVRHand;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("nonVRMode")]
	[SearchableEnum]
	[Tooltip("The push force for NONVR mode, for physics testing or pressing things like buttons")]
	public float pushStrength;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[FancyHeader("Input", 0, 0)]
	public bool overrideVRMovement;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Which item represents forward movement")]
	[HideIf("nonVRMode")]
	public eAutoMoveFoward autoMoveForward;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[FancyHeader("Movement Modes", 0, 0)]
	[Tooltip("The speed multiplyer of the player based on the input")]
	[SerializeField]
	private float moveSpeed;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Movement mode")]
	public eMovementMode MovementMode;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[FancyHeader("Sitting", 0, 0)]
	[Tooltip("Whether or not to start the Character with the sitting offset or not")]
	public bool startSitting;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("How much to reduce the players height in sitting mode")]
	public float sittingOffset;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	internal bool disableMovement;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float maxHeadTilt;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform originalHandFollow;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float originalSpeed;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool isSitting;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject grabIndicator;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Quaternion startTrackedRotation;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool lastVRMode;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private int mouseButton;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool controlLoss;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private eMovementMode lastMovementMode;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[ReadOnly]
	public bool initialized;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Coroutine controlLossRoutine;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Coroutine startCoroutine;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float timeLeft;

	[Token(Token = "0x17000011")]
	internal XRHandControllerLink3lb defaultRight
	{
		[Token(Token = "0x6000168")]
		[Address(RVA = "0xCACBAC", Offset = "0xCACBAC", VA = "0xCACBAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000012")]
	internal XRHandControllerLink3lb defaultLeft
	{
		[Token(Token = "0x6000169")]
		[Address(RVA = "0xCACBD0", Offset = "0xCACBD0", VA = "0xCACBD0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xCACBF4", Offset = "0xCACBF4", VA = "0xCACBF4")]
	[IteratorStateMachine(typeof(<Init>d__31))]
	private IEnumerator Init()
	{
		return null;
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xCACC90", Offset = "0xCACC90", VA = "0xCACC90")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xCACCC0", Offset = "0xCACCC0", VA = "0xCACCC0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xCACD24", Offset = "0xCACD24", VA = "0xCACD24")]
	private void SetControllerForward(eAutoMoveFoward autoMoveFoward)
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xCACE3C", Offset = "0xCACE3C", VA = "0xCACE3C")]
	public float GetHeight()
	{
		return default(float);
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xCACEC0", Offset = "0xCACEC0", VA = "0xCACEC0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xCAD978", Offset = "0xCAD978", VA = "0xCAD978")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xCAD918", Offset = "0xCAD918", VA = "0xCAD918")]
	private void ToggleVRMode()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xCADD18", Offset = "0xCADD18", VA = "0xCADD18")]
	private void EnableVRMode()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xCAD9A8", Offset = "0xCAD9A8", VA = "0xCAD9A8")]
	private void DisableVRMode()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xCAE058", Offset = "0xCAE058", VA = "0xCAE058")]
	public void Recenter()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xCACF48", Offset = "0xCACF48", VA = "0xCACF48")]
	public void MoveDesktop()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xCAE07C", Offset = "0xCAE07C", VA = "0xCAE07C")]
	public void AdvancedMove(Vector2 speed)
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xCAE12C", Offset = "0xCAE12C", VA = "0xCAE12C")]
	public void _ToggleSitting()
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xCAE1A4", Offset = "0xCAE1A4", VA = "0xCAE1A4")]
	public void _SetSitting()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xCAE16C", Offset = "0xCAE16C", VA = "0xCAE16C")]
	public void _SetStanding()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xCAD734", Offset = "0xCAD734", VA = "0xCAD734")]
	private void MoveVR()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xCAD94C", Offset = "0xCAD94C", VA = "0xCAD94C")]
	private void SetMoveMode()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xCAE1DC", Offset = "0xCAE1DC", VA = "0xCAE1DC")]
	public void SetPosition(Transform to)
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xCAE200", Offset = "0xCAE200", VA = "0xCAE200")]
	public void SetPosition(Vector3 to)
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xCAE224", Offset = "0xCAE224", VA = "0xCAE224")]
	public void SetPosition(Vector3 pos, Quaternion rot)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xCAE294", Offset = "0xCAE294", VA = "0xCAE294")]
	public void SetRotation(Quaternion to)
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xCAE2B8", Offset = "0xCAE2B8", VA = "0xCAE2B8")]
	public void SetPositionNoRotation(Transform to)
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xCAE2F0", Offset = "0xCAE2F0", VA = "0xCAE2F0")]
	public void SetPositionNoRotation(Vector3 to)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xCAE0C4", Offset = "0xCAE0C4", VA = "0xCAE0C4")]
	public float GetSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xCAE314", Offset = "0xCAE314", VA = "0xCAE314")]
	public float GetStaticSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xCAE31C", Offset = "0xCAE31C", VA = "0xCAE31C")]
	public void SetStaticSpeed(float speed)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xCAE324", Offset = "0xCAE324", VA = "0xCAE324")]
	public void RestoreSpeed()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xCAE330", Offset = "0xCAE330", VA = "0xCAE330")]
	public void ControlLoss(float duration)
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xCAE3B0", Offset = "0xCAE3B0", VA = "0xCAE3B0")]
	[IteratorStateMachine(typeof(<ControlLossTimer>d__63))]
	private IEnumerator ControlLossTimer(float duration)
	{
		return null;
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xCAE45C", Offset = "0xCAE45C", VA = "0xCAE45C")]
	public AutoMoveController()
	{
	}
}
[Serializable]
[Token(Token = "0x2000062")]
internal struct DeviceData
{
	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string[] deviceNames;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Vector3 position;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 rotation;

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xCAE79C", Offset = "0xCAE79C", VA = "0xCAE79C")]
	public DeviceData(string name, Vector3 pos, Vector3 rot)
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xCAE88C", Offset = "0xCAE88C", VA = "0xCAE88C")]
	public DeviceData(string[] names, Vector3 pos, Vector3 rot)
	{
	}
}
[Token(Token = "0x2000063")]
public class XRHandOffset : MonoBehaviour
{
	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This is the device that you are using to setup the innital proper orientation of the hand, all offsets are relative to this device")]
	public string defaultDevice;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform[] rightOffsets;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform[] leftOffsets;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private DeviceData[] devices;

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xCAE8E0", Offset = "0xCAE8E0", VA = "0xCAE8E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xCAED28", Offset = "0xCAED28", VA = "0xCAED28")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xCAEABC", Offset = "0xCAEABC", VA = "0xCAEABC")]
	private void DeviceConnected(InputDevice inputDevice)
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xCAEDA8", Offset = "0xCAEDA8", VA = "0xCAEDA8")]
	private Vector3 GetPositionOffset(string from, string to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xCAEF70", Offset = "0xCAEF70", VA = "0xCAEF70")]
	private Vector3 GetRotationOffset(string from, string to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xCAF138", Offset = "0xCAF138", VA = "0xCAF138")]
	public XRHandOffset()
	{
	}
}
[Token(Token = "0x2000064")]
[RequireComponent(typeof(Rigidbody))]
public class Grabbable3lb : Grabbable
{
	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[Header("Extensions")]
	public int grabPoseIndex;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public string itemID;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private bool alwaysKinematic;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
	public bool isLocked;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DA")]
	[Header("Grabbing Haptics")]
	public bool playHapticsOnGrab;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DB")]
	public bool hapticsWhileHolding;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	[Range(0f, 1f)]
	public float intensity;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public HandIgnoreCondition ignoreHandCondition;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public HandPlayerType handPlayerType;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[Tooltip("These are for collider that will colide with the player and should be turned off/on on grab/release")]
	public List<Collider> playerColliders;

	[Token(Token = "0x17000017")]
	public bool isGrabbed
	{
		[Token(Token = "0x60001A6")]
		[Address(RVA = "0xCAFBCC", Offset = "0xCAFBCC", VA = "0xCAFBCC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xCAF508", Offset = "0xCAF508", VA = "0xCAF508", Slot = "8")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xCAF6E4", Offset = "0xCAF6E4", VA = "0xCAF6E4")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xCAF8BC", Offset = "0xCAF8BC", VA = "0xCAF8BC", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xCAFAFC", Offset = "0xCAFAFC", VA = "0xCAFAFC", Slot = "9")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xCAF524", Offset = "0xCAF524", VA = "0xCAF524")]
	private void SetIgnoreCollision()
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xCAFCB8", Offset = "0xCAFCB8", VA = "0xCAFCB8")]
	public void IgnoreCollisionRecursive(Transform grabbableRoot, Autohand.Hand hand)
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xCAFCEC", Offset = "0xCAFCEC", VA = "0xCAFCEC")]
	public void IgnoreCollisionRecursive(Transform grabbableRoot, Grabbable grab)
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xCAFEE4", Offset = "0xCAFEE4", VA = "0xCAFEE4")]
	public void IgnoreCollider(Collider collider, bool ignore)
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xCAFFB0", Offset = "0xCAFFB0", VA = "0xCAFFB0")]
	private void SetCollidersRecursive(Transform obj)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xCB00E4", Offset = "0xCB00E4", VA = "0xCB00E4")]
	public void _LockGrabbable(bool chg)
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xCB00F0", Offset = "0xCB00F0", VA = "0xCB00F0", Slot = "17")]
	internal override void OnGrab(Autohand.Hand hand)
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xCB0150", Offset = "0xCB0150", VA = "0xCB0150")]
	public void OnGrabbed(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xCB02B8", Offset = "0xCB02B8", VA = "0xCB02B8")]
	public void OnReleased(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xCB0420", Offset = "0xCB0420", VA = "0xCB0420", Slot = "18")]
	public override bool CanGrab(Autohand.Hand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xCAFC94", Offset = "0xCAFC94", VA = "0xCAFC94")]
	public bool HandPlayerTypeMatch(HandPlayerType handPlayerType, HandPlayerType handPlayerType1)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xCAFC1C", Offset = "0xCAFC1C", VA = "0xCAFC1C")]
	public void PlayHaptics(Autohand.Hand hand)
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xCB0520", Offset = "0xCB0520", VA = "0xCB0520", Slot = "19")]
	internal override void OnRelease(Autohand.Hand hand)
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xCB056C", Offset = "0xCB056C", VA = "0xCB056C")]
	public Grabbable3lb()
	{
	}
}
[Token(Token = "0x2000066")]
[RequireComponent(typeof(Grabbable))]
public class GrabbableHighlight : MonoBehaviour
{
	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This object will be instantiated and visible when highlighted")]
	public GameObject highlightObject;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("This represents the center of the object, if null will default to the object")]
	public Transform center;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Whether the highlighted instant should always look forward to look at the camera")]
	public bool useBillboard;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject _currHighlightObject;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _mainCam;

	[Token(Token = "0x17000018")]
	private GameObject currHighlightObject
	{
		[Token(Token = "0x60001B2")]
		[Address(RVA = "0xCB05FC", Offset = "0xCB05FC", VA = "0xCB05FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000019")]
	private Camera mainCam
	{
		[Token(Token = "0x60001B3")]
		[Address(RVA = "0xCB07C4", Offset = "0xCB07C4", VA = "0xCB07C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xCB0848", Offset = "0xCB0848", VA = "0xCB0848")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xCB09D4", Offset = "0xCB09D4", VA = "0xCB09D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xCB0CC4", Offset = "0xCB0CC4", VA = "0xCB0CC4")]
	private void OnHighlight(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xCB0CE4", Offset = "0xCB0CE4", VA = "0xCB0CE4")]
	private void OnUnhighlight(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xCB0D04", Offset = "0xCB0D04", VA = "0xCB0D04")]
	public GrabbableHighlight()
	{
	}
}
[Token(Token = "0x2000067")]
public enum HandIgnoreCondition
{
	[Token(Token = "0x40001FA")]
	None,
	[Token(Token = "0x40001FB")]
	WrongPlayerType
}
[Token(Token = "0x2000068")]
public enum HandPlayerType
{
	[Token(Token = "0x40001FD")]
	Any,
	[Token(Token = "0x40001FE")]
	Spirit,
	[Token(Token = "0x40001FF")]
	Golem
}
[Token(Token = "0x2000069")]
public class Hand3lb : Autohand.Hand
{
	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	public HandPlayerType handPlayerType;

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xCB0D14", Offset = "0xCB0D14", VA = "0xCB0D14", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xCB0DD0", Offset = "0xCB0DD0", VA = "0xCB0DD0", Slot = "16")]
	public override void SetHandLocation(Vector3 pos, Quaternion rot)
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xCB0E64", Offset = "0xCB0E64", VA = "0xCB0E64")]
	public Hand3lb()
	{
	}
}
[Token(Token = "0x200006A")]
public class HandInputTesting : MonoBehaviour
{
	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputVR3lb.Button button;

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xCB0EBC", Offset = "0xCB0EBC", VA = "0xCB0EBC")]
	private void Update()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xCB1118", Offset = "0xCB1118", VA = "0xCB1118")]
	public HandInputTesting()
	{
	}
}
[Token(Token = "0x200006B")]
public class HandLayerIgnore : MonoBehaviour
{
	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Layer]
	public int startLayer;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool ignoreChildrenLayers;

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xCB1128", Offset = "0xCB1128", VA = "0xCB1128")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xCB1198", Offset = "0xCB1198", VA = "0xCB1198")]
	private void SetStartLayer()
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xCB11B8", Offset = "0xCB11B8", VA = "0xCB11B8")]
	public void SetLayerRecursive(Transform obj)
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xCB124C", Offset = "0xCB124C", VA = "0xCB124C")]
	public HandLayerIgnore()
	{
	}
}
[Token(Token = "0x200006C")]
public class AutoForceZone : MonoBehaviour
{
	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FancyHeader("Base Settings", 0, 0)]
	public float magnitude;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool knockback;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool pushPull;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ShowIf("knockback")]
	public float knockbackDuration;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Defaults to Z Value")]
	[FancyHeader("Custom Directions", 0, 0)]
	public bool customDirection;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Required(null)]
	[HideIf("knockback")]
	[ShowIf("customDirection")]
	public Transform directionObject;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("customDirection")]
	[HideIf("knockback")]
	public bool inverseDirection;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[FancyHeader("Events", 0, 0)]
	public bool showEvents;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ShowIf("showEvents")]
	public UnityEvent enterEvent;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("showEvents")]
	public UnityEvent exitEvent;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<AutoMoveController> charControllers;

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xCB125C", Offset = "0xCB125C", VA = "0xCB125C")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xCB12F8", Offset = "0xCB12F8", VA = "0xCB12F8")]
	public void _ApplyForce(AutoMoveController inputController)
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xCB1710", Offset = "0xCB1710", VA = "0xCB1710")]
	private Vector3 CalcuateDirection(AutoMoveCharacter charController)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xCB15E4", Offset = "0xCB15E4", VA = "0xCB15E4")]
	private Vector3 KnockBackBase(AutoMoveCharacter charController)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xCB1428", Offset = "0xCB1428", VA = "0xCB1428")]
	private Vector3 KnockBackDirection(AutoMoveCharacter charController)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xCB1A74", Offset = "0xCB1A74", VA = "0xCB1A74")]
	private Vector3 KnockBackCameraFoward(AutoMoveCharacter charController)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xCB1BF8", Offset = "0xCB1BF8", VA = "0xCB1BF8")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xCB1EF0", Offset = "0xCB1EF0", VA = "0xCB1EF0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xCB1F60", Offset = "0xCB1F60", VA = "0xCB1F60")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xCB2080", Offset = "0xCB2080", VA = "0xCB2080")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xCB2150", Offset = "0xCB2150", VA = "0xCB2150")]
	public AutoForceZone()
	{
	}
}
[Token(Token = "0x200006D")]
[RequireComponent(typeof(CapsuleCollider))]
[DefaultExecutionOrder(-2)]
[RequireComponent(typeof(Rigidbody))]
public class AutoMoveCharacter : MonoBehaviour
{
	[Token(Token = "0x200006E")]
	[CompilerGenerated]
	private sealed class <Start>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AutoMoveCharacter <>4__this;

		[Token(Token = "0x1700001E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001F5")]
			[Address(RVA = "0xCB6240", Offset = "0xCB6240", VA = "0xCB6240", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001F7")]
			[Address(RVA = "0xCB6288", Offset = "0xCB6288", VA = "0xCB6288", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0xCB2264", Offset = "0xCB2264", VA = "0xCB2264")]
		[DebuggerHidden]
		public <Start>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xCB5FD8", Offset = "0xCB5FD8", VA = "0xCB5FD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0xCB5FDC", Offset = "0xCB5FDC", VA = "0xCB5FDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xCB6248", Offset = "0xCB6248", VA = "0xCB6248", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006F")]
	[CompilerGenerated]
	private sealed class <DelayRecenter>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AutoMoveCharacter <>4__this;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001FB")]
			[Address(RVA = "0xCB6490", Offset = "0xCB6490", VA = "0xCB6490", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001FD")]
			[Address(RVA = "0xCB64D8", Offset = "0xCB64D8", VA = "0xCB64D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0xCB4D9C", Offset = "0xCB4D9C", VA = "0xCB4D9C")]
		[DebuggerHidden]
		public <DelayRecenter>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xCB6290", Offset = "0xCB6290", VA = "0xCB6290", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xCB6294", Offset = "0xCB6294", VA = "0xCB6294", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0xCB6498", Offset = "0xCB6498", VA = "0xCB6498", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FancyHeader("References", 0, 0)]
	[Tooltip("The tracked playerRig.rigCamera object")]
	public VRPlayerRig playerRig;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("This should be a GameObject that contains all the tracked objects (head/controllers)")]
	public Transform trackingContainer;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The tracked playerRig.rigCamera object")]
	public HeadPhysicsFollower3lb headPhysicsFollower;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	[FancyHeader("Body Settings", 0, 0)]
	public bool headOnly;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[HideIf("headOnly")]
	public bool useStaticHeight;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideIf("headOnly")]
	public Transform headTarget;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideIf("headOnly")]
	public float staticHeightSpeed;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideIf("useStaticHeight")]
	public float heightOffset;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Maximum distance that the head is allowed to be from the body before being stopped")]
	[Range(0f, 2f)]
	public float maxHeadDistance;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("Whether or not the capsule height should be adjusted to match the playerRig.rigCamera height")]
	public bool autoAdjustColliderHeight;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[MinMaxSlider(0f, 3f)]
	[ShowIf("autoAdjustColliderHeight")]
	[Tooltip("Minimum and maximum auto adjusted height, to adjust height without auto adjustment change capsule collider height instead")]
	public Vector2 minMaxHeight;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Min(0f)]
	[Space]
	[FancyHeader("Grounding", 0, 0)]
	[Tooltip("Maximum height that the body can step up onto")]
	public float maxStepHeight;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Min(0f)]
	[Tooltip("Maximum angle the player can walk on")]
	public float maxStepAngle;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("The layers that count as ground")]
	public LayerMask groundLayerMask;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[HideInInspector]
	public bool useGrounding;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public CapsuleCollider bodyCapsule;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float forceRolloff;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[HideInInspector]
	public bool overrideMovement;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	[HideInInspector]
	public bool canMove;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public Transform forwardFollow;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Rigidbody body;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected float turnAngle;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected float heightSmoothSpeed;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected float trackingSmoothHeightOffset;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected Transform moveTo;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected Vector3 adjustedOffset;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	protected float deltaY;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected bool isGrounded;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	protected float playerHeight;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected float lastHeightOffset;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	protected Quaternion startRot;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	protected Vector3 moveDirection;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected Vector3 moveVelocity;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected List<Vector3> moveDirections;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected float groundedDrag;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	protected float fallingDrag;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected float movementDeadzone;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	protected float groundedOffset;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	protected float headFollowSpeed;

	[Token(Token = "0x4000236")]
	protected const int groundRayCount = 21;

	[Token(Token = "0x4000237")]
	protected const float heightGroundingDepth = 2f;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	internal InterpolatedTransform3lb interpolatedTransform;

	[Token(Token = "0x1700001A")]
	public Transform _trackingContainer
	{
		[Token(Token = "0x60001CD")]
		[Address(RVA = "0xCB21E8", Offset = "0xCB21E8", VA = "0xCB21E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001B")]
	internal Camera headCamera
	{
		[Token(Token = "0x60001CE")]
		[Address(RVA = "0xCACDD8", Offset = "0xCACDD8", VA = "0xCACDD8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001C")]
	internal Autohand.Hand handRight
	{
		[Token(Token = "0x60001CF")]
		[Address(RVA = "0xCACDF4", Offset = "0xCACDF4", VA = "0xCACDF4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001D")]
	internal Autohand.Hand handLeft
	{
		[Token(Token = "0x60001D0")]
		[Address(RVA = "0xCACE18", Offset = "0xCACE18", VA = "0xCACE18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xCB21F0", Offset = "0xCB21F0", VA = "0xCB21F0", Slot = "4")]
	[IteratorStateMachine(typeof(<Start>d__50))]
	public virtual IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xCB228C", Offset = "0xCB228C", VA = "0xCB228C", Slot = "5")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xCB2538", Offset = "0xCB2538", VA = "0xCB2538", Slot = "6")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xCB2640", Offset = "0xCB2640", VA = "0xCB2640")]
	private void CreateHeadFollower()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xCB2A74", Offset = "0xCB2A74", VA = "0xCB2A74")]
	public void SetStaticHeight()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xCB2B38", Offset = "0xCB2B38", VA = "0xCB2B38")]
	private void _SetStaticHeight()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xCAE0DC", Offset = "0xCAE0DC", VA = "0xCAE0DC")]
	public void Move(Vector3 axis, bool useDeadzone = false)
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xCB1934", Offset = "0xCB1934", VA = "0xCB1934")]
	public void AddMove(Vector3 axis, bool useDeadzone = false)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xCB15C4", Offset = "0xCB15C4", VA = "0xCB15C4")]
	public void AddVelocity(Vector3 velocity)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xCB2C60", Offset = "0xCB2C60", VA = "0xCB2C60", Slot = "7")]
	public virtual void UpdateMove()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xCB2F24", Offset = "0xCB2F24", VA = "0xCB2F24", Slot = "8")]
	protected virtual void UpdateMove(float deltaTime)
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xCB3E74", Offset = "0xCB3E74", VA = "0xCB3E74", Slot = "9")]
	protected virtual void ManageHeadOffset(float deltaTime)
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xCB40A4", Offset = "0xCB40A4", VA = "0xCB40A4", Slot = "10")]
	protected virtual bool UseSmoothHeight()
	{
		return default(bool);
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xCB41D8", Offset = "0xCB41D8", VA = "0xCB41D8", Slot = "11")]
	protected virtual Vector3 AlterDirection(Vector3 moveAxis, float deltaTime)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xCB4398", Offset = "0xCB4398", VA = "0xCB4398")]
	public Vector3 GetMoveDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xCB4448", Offset = "0xCB4448", VA = "0xCB4448", Slot = "12")]
	public virtual void SetPosition(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xCB48A8", Offset = "0xCB48A8", VA = "0xCB48A8", Slot = "13")]
	public virtual void SetPosition(Vector3 position)
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xCB4934", Offset = "0xCB4934", VA = "0xCB4934", Slot = "14")]
	public virtual void SetPosition(Transform to)
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xCB49C4", Offset = "0xCB49C4", VA = "0xCB49C4", Slot = "15")]
	public virtual void SetRotation(Quaternion rotation)
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xCB4B1C", Offset = "0xCB4B1C", VA = "0xCB4B1C", Slot = "16")]
	public virtual void AddRotation(Quaternion deltaRotation)
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xCB4C28", Offset = "0xCB4C28", VA = "0xCB4C28", Slot = "17")]
	public virtual void AddLocalRotation(Quaternion deltaRotation, Vector3 axis)
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xCB4D08", Offset = "0xCB4D08", VA = "0xCB4D08", Slot = "18")]
	public virtual void Recenter()
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xCB4D28", Offset = "0xCB4D28", VA = "0xCB4D28")]
	[IteratorStateMachine(typeof(<DelayRecenter>d__72))]
	private IEnumerator DelayRecenter()
	{
		return null;
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xCB4DC4", Offset = "0xCB4DC4", VA = "0xCB4DC4", Slot = "19")]
	protected virtual void Ground(float radius, float yPos, Transform transform)
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xCB55B8", Offset = "0xCB55B8", VA = "0xCB55B8")]
	public bool IsGrounded()
	{
		return default(bool);
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xCB2DD0", Offset = "0xCB2DD0", VA = "0xCB2DD0")]
	private void UpdatePlayerHeight()
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xCB55C0", Offset = "0xCB55C0", VA = "0xCB55C0")]
	public static LayerMask GetPhysicsLayerMask(int currentLayer)
	{
		return default(LayerMask);
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xCB5628", Offset = "0xCB5628", VA = "0xCB5628")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xCB5D44", Offset = "0xCB5D44", VA = "0xCB5D44")]
	public AutoMoveCharacter()
	{
	}
}
[Token(Token = "0x2000070")]
[RequireComponent(typeof(AutoMoveCharacter))]
public class AutoMoveClimbing : MonoBehaviour
{
	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Whether or not the player move while climbing")]
	[FancyHeader("Climbing", 0, 0)]
	public bool allowClimbingMovement;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("How quickly the player can climb")]
	public Vector3 climbingStrength;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 climbAxis;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<Autohand.Hand, Climbable> climbing;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AutoMoveCharacter player;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Autohand.Hand lastLeftHand;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Autohand.Hand lastRightHand;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AutoMovePushing pushingModule;

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xCB64E0", Offset = "0xCB64E0", VA = "0xCB64E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xCB6718", Offset = "0xCB6718", VA = "0xCB6718")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xCB68CC", Offset = "0xCB68CC", VA = "0xCB68CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xCB6A10", Offset = "0xCB6A10", VA = "0xCB6A10")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xCB68D0", Offset = "0xCB68D0", VA = "0xCB68D0")]
	private void CheckHands()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xCB65F8", Offset = "0xCB65F8", VA = "0xCB65F8")]
	private void EnableHand(Autohand.Hand hand)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xCB6758", Offset = "0xCB6758", VA = "0xCB6758")]
	private void DisableHand(Autohand.Hand hand)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xCB6D08", Offset = "0xCB6D08", VA = "0xCB6D08")]
	private void StartClimb(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xCB6EA8", Offset = "0xCB6EA8", VA = "0xCB6EA8")]
	private void EndClimb(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xCB6A34", Offset = "0xCB6A34", VA = "0xCB6A34")]
	public Vector3 GetClimbForce()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xCB6F60", Offset = "0xCB6F60", VA = "0xCB6F60")]
	public bool IsClimbing()
	{
		return default(bool);
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xCB70CC", Offset = "0xCB70CC", VA = "0xCB70CC")]
	public int ClimbingCount()
	{
		return default(int);
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xCB711C", Offset = "0xCB711C", VA = "0xCB711C")]
	public AutoMoveClimbing()
	{
	}
}
[Token(Token = "0x2000071")]
public class AutoMoveContextBlock : MonoBehaviour
{
	[Token(Token = "0x2000072")]
	public enum Context
	{
		[Token(Token = "0x4000250")]
		DisableMovement
	}

	[Token(Token = "0x2000073")]
	public enum ContextActivation
	{
		[Token(Token = "0x4000252")]
		HoldingGrabbable,
		[Token(Token = "0x4000253")]
		HandTrigger
	}

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Context context;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public ContextActivation contextActivation;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ShowIf("contextActivation", ContextActivation.HoldingGrabbable)]
	public Grabbable grabbable;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ShowIf("contextActivation", ContextActivation.HandTrigger)]
	public HandType handDisableType;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int _rightMovementFreezeCount;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int _leftMovementFreezeCount;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool _allowRightHandMovement;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	private bool _allowLeftHandMovement;

	[Token(Token = "0x17000022")]
	public static int rightMovementFreezeCount
	{
		[Token(Token = "0x600020B")]
		[Address(RVA = "0xCB71C0", Offset = "0xCB71C0", VA = "0xCB71C0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600020C")]
		[Address(RVA = "0xCB7208", Offset = "0xCB7208", VA = "0xCB7208")]
		set
		{
		}
	}

	[Token(Token = "0x17000023")]
	public static int leftMovementFreezeCount
	{
		[Token(Token = "0x600020D")]
		[Address(RVA = "0xCB7258", Offset = "0xCB7258", VA = "0xCB7258")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600020E")]
		[Address(RVA = "0xCB72A0", Offset = "0xCB72A0", VA = "0xCB72A0")]
		set
		{
		}
	}

	[Token(Token = "0x17000024")]
	public bool allowRightHandMovement
	{
		[Token(Token = "0x600020F")]
		[Address(RVA = "0xCB72F0", Offset = "0xCB72F0", VA = "0xCB72F0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000210")]
		[Address(RVA = "0xCB72F8", Offset = "0xCB72F8", VA = "0xCB72F8")]
		set
		{
		}
	}

	[Token(Token = "0x17000025")]
	public bool allowLeftHandMovement
	{
		[Token(Token = "0x6000211")]
		[Address(RVA = "0xCB7598", Offset = "0xCB7598", VA = "0xCB7598")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000212")]
		[Address(RVA = "0xCB75A0", Offset = "0xCB75A0", VA = "0xCB75A0")]
		set
		{
		}
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xCB7840", Offset = "0xCB7840", VA = "0xCB7840")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xCB7B8C", Offset = "0xCB7B8C", VA = "0xCB7B8C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xCB7ED8", Offset = "0xCB7ED8", VA = "0xCB7ED8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xCB8030", Offset = "0xCB8030", VA = "0xCB8030")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xCB7FF0", Offset = "0xCB7FF0", VA = "0xCB7FF0")]
	private bool IsHandType(Autohand.Hand hand, HandType type)
	{
		return default(bool);
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xCB8148", Offset = "0xCB8148", VA = "0xCB8148")]
	public AutoMoveContextBlock()
	{
	}
}
[Token(Token = "0x2000074")]
[RequireComponent(typeof(AutoMoveCharacter))]
public class AutoMovePlatforming : MonoBehaviour
{
	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AutoMoveCharacter player;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody body;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<PlayerPlatform> platforms;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<PlayerPlatform, int> platformsCount;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<PlayerPlatform, Vector3> platformPositions;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<PlayerPlatform, Quaternion> platformRotations;

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xCB8290", Offset = "0xCB8290", VA = "0xCB8290")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xCB8324", Offset = "0xCB8324", VA = "0xCB8324")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xCB8328", Offset = "0xCB8328", VA = "0xCB8328")]
	private void CheckPlatforms()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xCB8938", Offset = "0xCB8938", VA = "0xCB8938")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xCB8B64", Offset = "0xCB8B64", VA = "0xCB8B64")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xCB8D10", Offset = "0xCB8D10", VA = "0xCB8D10")]
	public int PlatformCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xCB8D58", Offset = "0xCB8D58", VA = "0xCB8D58")]
	public AutoMovePlatforming()
	{
	}
}
[Token(Token = "0x2000075")]
[RequireComponent(typeof(AutoMoveCharacter))]
public class AutoMovePushing : MonoBehaviour
{
	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Space]
	[Tooltip("How quickly the player can climb")]
	[FancyHeader("Pushing", 0, 0)]
	public Vector3 pushingStrength;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<Pushable, Autohand.Hand> pushRight;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<Pushable, int> pushRightCount;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<Pushable, Autohand.Hand> pushLeft;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<Pushable, int> pushLeftCount;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 pushAxis;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AutoMoveCharacter player;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Autohand.Hand lastLeftHand;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Autohand.Hand lastRightHand;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private AutoMoveClimbing climbingModule;

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xCB8ED0", Offset = "0xCB8ED0", VA = "0xCB8ED0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xCB91A4", Offset = "0xCB91A4", VA = "0xCB91A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xCB940C", Offset = "0xCB940C", VA = "0xCB940C")]
	private void Update()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xCB9410", Offset = "0xCB9410", VA = "0xCB9410")]
	private void CheckHands()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xCB8FE8", Offset = "0xCB8FE8", VA = "0xCB8FE8")]
	private void EnableHand(Autohand.Hand hand)
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xCB91E4", Offset = "0xCB91E4", VA = "0xCB91E4")]
	private void DisableHand(Autohand.Hand hand)
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xCB9550", Offset = "0xCB9550", VA = "0xCB9550")]
	private void StartPush(Autohand.Hand hand, GameObject other)
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xCB97BC", Offset = "0xCB97BC", VA = "0xCB97BC")]
	private void StopPush(Autohand.Hand hand, GameObject other)
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xCB99A8", Offset = "0xCB99A8", VA = "0xCB99A8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xCB99CC", Offset = "0xCB99CC", VA = "0xCB99CC")]
	public Vector3 GetPushForce()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xCBA598", Offset = "0xCBA598", VA = "0xCBA598")]
	private void StartGrabPush(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xCBA764", Offset = "0xCBA764", VA = "0xCBA764")]
	private void EndGrabPush(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xCB6E14", Offset = "0xCB6E14", VA = "0xCB6E14")]
	public void ClearPushing()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xCBA8D8", Offset = "0xCBA8D8", VA = "0xCBA8D8")]
	public bool IsPushing()
	{
		return default(bool);
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xCBAB14", Offset = "0xCBAB14", VA = "0xCBAB14")]
	public int PushingCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xCBAB84", Offset = "0xCBAB84", VA = "0xCBAB84")]
	public AutoMovePushing()
	{
	}
}
[Token(Token = "0x2000076")]
[RequireComponent(typeof(AutoMoveController))]
[DefaultExecutionOrder(1)]
public class AutoMoveRubberband : MonoBehaviour
{
	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FancyHeader("References", 0, 0)]
	[Tooltip("Reference for right handed line")]
	[InfoBox("Uses InputVR3lb \"flightButton\" for input and \"moveController\" for controller hand", EInfoBoxType.Normal)]
	public LineArcSystem RubberBandLineL;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Reference for left handed line")]
	public LineArcSystem RubberBandLineR;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The max radius of the rubberband movement, >= max radius = maxspeed (on moveInput speed)")]
	[FancyHeader("Settings", 0, 0)]
	public float maxRadius;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Whether or not to show the lines with rubberbanding")]
	public bool showLines;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	[Tooltip("Whether or not to invert the movement directions")]
	public bool invertDirection;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool disableWhileHolding;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	internal static AutoMoveController.eControllerType rubberbandController;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	private bool isHoldingRight;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isHoldingLeft;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool _allowRightHandMovement;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool _allowLeftHandMovement;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform _dragPointL;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform _dragPointR;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool rbLeftOn;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool rbRightOn;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AutoMoveCharacter refCharacter;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AutoMoveController refController;

	[Token(Token = "0x17000026")]
	public bool allowRightHandMovement
	{
		[Token(Token = "0x6000238")]
		[Address(RVA = "0xCBACCC", Offset = "0xCBACCC", VA = "0xCBACCC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000239")]
		[Address(RVA = "0xCBACD4", Offset = "0xCBACD4", VA = "0xCBACD4")]
		set
		{
		}
	}

	[Token(Token = "0x17000027")]
	public bool allowLeftHandMovement
	{
		[Token(Token = "0x600023A")]
		[Address(RVA = "0xCBAF74", Offset = "0xCBAF74", VA = "0xCBAF74")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600023B")]
		[Address(RVA = "0xCBAF7C", Offset = "0xCBAF7C", VA = "0xCBAF7C")]
		set
		{
		}
	}

	[Token(Token = "0x17000028")]
	private Transform DragPointL
	{
		[Token(Token = "0x600023C")]
		[Address(RVA = "0xCBB21C", Offset = "0xCBB21C", VA = "0xCBB21C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000029")]
	private Transform DragPointR
	{
		[Token(Token = "0x600023D")]
		[Address(RVA = "0xCBB364", Offset = "0xCBB364", VA = "0xCBB364")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xCBB4AC", Offset = "0xCBB4AC", VA = "0xCBB4AC")]
	private void Start()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xCBB580", Offset = "0xCBB580", VA = "0xCBB580")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xCBB784", Offset = "0xCBB784", VA = "0xCBB784")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xCBB984", Offset = "0xCBB984", VA = "0xCBB984")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xCBC3D0", Offset = "0xCBC3D0", VA = "0xCBC3D0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xCBC514", Offset = "0xCBC514", VA = "0xCBC514")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xCBB99C", Offset = "0xCBB99C", VA = "0xCBB99C")]
	public void RubberBandMoveL()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xCBBE94", Offset = "0xCBBE94", VA = "0xCBBE94")]
	public void RubberBandMoveR()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xCBC638", Offset = "0xCBC638", VA = "0xCBC638")]
	public float ConvertRange(float originalStart, float originalEnd, float newStart, float newEnd, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xCBC650", Offset = "0xCBC650", VA = "0xCBC650")]
	public AutoMoveRubberband()
	{
	}
}
[Token(Token = "0x2000077")]
[DefaultExecutionOrder(1)]
[RequireComponent(typeof(AutoMoveController))]
public class AutoMoveTurning : MonoBehaviour
{
	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool useSmoothTurning;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float smoothTurnSpeed;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Turn speed when not using snap turning - if snap turning, represents angle per snap")]
	[FancyHeader("Turning", 0, 0)]
	public float turnAngle;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	internal float turningAxis;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal float smoothTurnDeadzone;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float snapTurnDeadzone;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool axisReset;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AutoMoveController _controller;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly float turnResetzone;

	[Token(Token = "0x1700002A")]
	private AutoMoveController controller
	{
		[Token(Token = "0x6000251")]
		[Address(RVA = "0xCBC9FC", Offset = "0xCBC9FC", VA = "0xCBC9FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xCBCAA4", Offset = "0xCBCAA4", VA = "0xCBCAA4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xCBD1C4", Offset = "0xCBD1C4", VA = "0xCBD1C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xCBCB1C", Offset = "0xCBCB1C", VA = "0xCBCB1C")]
	private void UpdateControllerAxis()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xCBD23C", Offset = "0xCBD23C", VA = "0xCBD23C")]
	private void SmoothTurn()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xCBCC60", Offset = "0xCBCC60", VA = "0xCBCC60")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xCBD338", Offset = "0xCBD338", VA = "0xCBD338")]
	public AutoMoveTurning()
	{
	}
}
[Token(Token = "0x2000078")]
[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
public class AutoMoveVignette : MonoBehaviour
{
	[Token(Token = "0x2000079")]
	public enum MeshComplexityLevel
	{
		[Token(Token = "0x400029F")]
		VerySimple,
		[Token(Token = "0x40002A0")]
		Simple,
		[Token(Token = "0x40002A1")]
		Normal,
		[Token(Token = "0x40002A2")]
		Detailed,
		[Token(Token = "0x40002A3")]
		VeryDetailed
	}

	[Token(Token = "0x200007A")]
	public enum FalloffType
	{
		[Token(Token = "0x40002A5")]
		Linear,
		[Token(Token = "0x40002A6")]
		Quadratic
	}

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string QUADRATIC_FALLOFF;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Shader VignetteShader;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool useMovementVingette;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Movement Settings")]
	public AutoMoveCharacter moveCharacter;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AutoMoveTurning turnController;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxSpeed;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector2 vignetteRange;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve vignetteCurve;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float vignetteRadius;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[Tooltip("Controls the number of triangles used for the vignette mesh. Normal is best for most purposes.")]
	private MeshComplexityLevel MeshComplexity;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("Controls how the falloff looks.")]
	private FalloffType Falloff;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Tooltip("The Vertical FOV of the vignette")]
	public float VignetteFieldOfView;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The Aspect ratio of the vignette controls the Horizontal FOV. (Larger numbers are wider)")]
	public float VignetteAspectRatio;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Tooltip("The width of the falloff for the vignette in degrees")]
	public float VignetteFalloffDegrees;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ColorUsage(false)]
	[Tooltip("The color of the vignette. Alpha value is ignored")]
	public Color VignetteColor;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Camera _Camera;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private MeshFilter _OpaqueMeshFilter;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private MeshFilter _TransparentMeshFilter;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private MeshRenderer _OpaqueMeshRenderer;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private MeshRenderer _TransparentMeshRenderer;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Mesh _OpaqueMesh;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Mesh _TransparentMesh;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Material _OpaqueMaterial;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Material _TransparentMaterial;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int _ShaderScaleAndOffset0Property;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int _ShaderScaleAndOffset1Property;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector4[] _TransparentScaleAndOffset0;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector4[] _TransparentScaleAndOffset1;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector4[] _OpaqueScaleAndOffset0;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector4[] _OpaqueScaleAndOffset1;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool _OpaqueVignetteVisible;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	private bool _TransparentVignetteVisible;

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xCBD3BC", Offset = "0xCBD3BC", VA = "0xCBD3BC")]
	private int GetTriangleCount()
	{
		return default(int);
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xCBD3E0", Offset = "0xCBD3E0", VA = "0xCBD3E0")]
	private void BuildMeshes()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xCBDA88", Offset = "0xCBDA88", VA = "0xCBDA88")]
	private void BuildMaterials()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xCBDE6C", Offset = "0xCBDE6C", VA = "0xCBDE6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xCBDF10", Offset = "0xCBDF10", VA = "0xCBDF10")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xCBDFF4", Offset = "0xCBDFF4", VA = "0xCBDFF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xCBE358", Offset = "0xCBE358", VA = "0xCBE358")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xCBE624", Offset = "0xCBE624", VA = "0xCBE624")]
	private void GetTanFovAndOffsetForStereoEye(Camera.StereoscopicEye eye, out float tanFovX, out float tanFovY, out float offsetX, out float offsetY)
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xCBE81C", Offset = "0xCBE81C", VA = "0xCBE81C")]
	private void GetTanFovAndOffsetForMonoEye(out float tanFovX, out float tanFovY, out float offsetX, out float offsetY)
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xCBE8A8", Offset = "0xCBE8A8", VA = "0xCBE8A8")]
	private bool VisibilityTest(float scaleX, float scaleY, float offsetX, float offsetY)
	{
		return default(bool);
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xCBE8DC", Offset = "0xCBE8DC", VA = "0xCBE8DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xCBE5EC", Offset = "0xCBE5EC", VA = "0xCBE5EC")]
	private void EnableRenderers()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xCBDFBC", Offset = "0xCBDFBC", VA = "0xCBDFBC")]
	private void DisableRenderers()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xCBEC80", Offset = "0xCBEC80", VA = "0xCBEC80")]
	private void OnPreCull()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xCBEC84", Offset = "0xCBEC84", VA = "0xCBEC84")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xCBEC88", Offset = "0xCBEC88", VA = "0xCBEC88")]
	private void OnBeginCameraRendering(ScriptableRenderContext context, Camera camera)
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xCBED14", Offset = "0xCBED14", VA = "0xCBED14")]
	public AutoMoveVignette()
	{
	}
}
[Token(Token = "0x200007B")]
public class CopyTransform : MonoBehaviour
{
	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform copy;

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xD0F7F4", Offset = "0xD0F7F4", VA = "0xD0F7F4")]
	private void Update()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xD0F8D0", Offset = "0xD0F8D0", VA = "0xD0F8D0")]
	public CopyTransform()
	{
	}
}
[Token(Token = "0x200007C")]
public class NetworkGrabbable : MonoBehaviour
{
	[Token(Token = "0x600026D")]
	[Address(RVA = "0xD0F8D8", Offset = "0xD0F8D8", VA = "0xD0F8D8")]
	public NetworkGrabbable()
	{
	}
}
[Token(Token = "0x200007D")]
public class NetworkHand : MonoBehaviour
{
	[Token(Token = "0x600026E")]
	[Address(RVA = "0xD0F8E0", Offset = "0xD0F8E0", VA = "0xD0F8E0")]
	public NetworkHand()
	{
	}
}
[Token(Token = "0x200007E")]
public class NetworkHandPlayer : MonoBehaviour
{
	[Token(Token = "0x600026F")]
	[Address(RVA = "0xD0F8E8", Offset = "0xD0F8E8", VA = "0xD0F8E8")]
	public NetworkHandPlayer()
	{
	}
}
[Token(Token = "0x200007F")]
public class NetworkPlayerSpawner : MonoBehaviour
{
	[Token(Token = "0x6000270")]
	[Address(RVA = "0xD0F8F0", Offset = "0xD0F8F0", VA = "0xD0F8F0")]
	public NetworkPlayerSpawner()
	{
	}
}
[Token(Token = "0x2000080")]
[RequireComponent(typeof(Grabbable))]
public class OnGrabDisableKinematic : MonoBehaviour
{
	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Grabbable grab;

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xD0F8F8", Offset = "0xD0F8F8", VA = "0xD0F8F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xD0FA08", Offset = "0xD0FA08", VA = "0xD0FA08")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xD0FB18", Offset = "0xD0FB18", VA = "0xD0FB18")]
	private void OnBeforeGrab(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xD0FB3C", Offset = "0xD0FB3C", VA = "0xD0FB3C")]
	public OnGrabDisableKinematic()
	{
	}
}
[Token(Token = "0x2000081")]
[RequireComponent(typeof(DualInputModule))]
public class CanvasInputModule3lb : BaseInputModule
{
	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CanvasInputModule3lb _instance;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public List<CanvasPointer3lb> pointers;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[FancyHeader(" Input Settings", 0, 0)]
	[Tooltip("Toggles camera settings and dualinput modual to allow for mouse inputs")]
	public bool usingMouse;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[Tooltip("Whether multiple pointers can point at once, or if pressing the click button sets the primary controller")]
	public bool allowMultiplePointers;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Space]
	[Tooltip("Max distance required for highlighting canvas in world space")]
	public float highlightDistance;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("Distance click will trigger mouse click event when pointer is within the targets distance")]
	public bool useDistanceClick;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Tooltip("Max distance required for clicking canvas in world space")]
	[ShowIf("useDistanceClick")]
	public float clickDistance;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public bool hitThisFrame;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[HideInInspector]
	public bool buttenPressedThisFrame;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Generated Controllers")]
	private GameObject[] CurrentPoint;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject[] CurrentPressed;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject[] CurrentDragging;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private PointerEventData[] PointEvents;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool[] clicked;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool Initialized;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("Generated non rendering camera (used for raycasting ui)")]
	private Camera controllerCamera;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Camera _mainCam;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool lastUsingMouse;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<GameObject, float> pressDelayManager;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float pressDelay;

	[Token(Token = "0x1700002B")]
	public static CanvasInputModule3lb Instance
	{
		[Token(Token = "0x6000275")]
		[Address(RVA = "0xD0FB44", Offset = "0xD0FB44", VA = "0xD0FB44")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002C")]
	private Camera mainCamera
	{
		[Token(Token = "0x6000276")]
		[Address(RVA = "0xD0FD28", Offset = "0xD0FD28", VA = "0xD0FD28")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xD0FDAC", Offset = "0xD0FDAC", VA = "0xD0FDAC", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xD102F4", Offset = "0xD102F4", VA = "0xD102F4")]
	public void AddController(CanvasPointer3lb controller)
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xD104AC", Offset = "0xD104AC", VA = "0xD104AC")]
	public void RemoveController(CanvasPointer3lb controller)
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xD10610", Offset = "0xD10610", VA = "0xD10610")]
	public void SetPrimaryPointer(CanvasPointer3lb controller)
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xD106EC", Offset = "0xD106EC", VA = "0xD106EC")]
	private new void OnEnable()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xD1080C", Offset = "0xD1080C", VA = "0xD1080C")]
	private new void OnDisable()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xD10814", Offset = "0xD10814", VA = "0xD10814")]
	private void UsingPointerInput()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xD108DC", Offset = "0xD108DC", VA = "0xD108DC")]
	private void UsingMouseInput()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xD109BC", Offset = "0xD109BC", VA = "0xD109BC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xD10FC8", Offset = "0xD10FC8", VA = "0xD10FC8", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xD10148", Offset = "0xD10148", VA = "0xD10148")]
	private void SetCanvasCamera(Camera cam)
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xD125FC", Offset = "0xD125FC", VA = "0xD125FC")]
	private bool GetLookPointerEventData(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xD10C30", Offset = "0xD10C30", VA = "0xD10C30")]
	private void UpdateCursor(PointerEventData pointData, int index)
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xD129F8", Offset = "0xD129F8", VA = "0xD129F8")]
	public void ClearSelection()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xD12A84", Offset = "0xD12A84", VA = "0xD12A84")]
	private void Select(GameObject go)
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xD13118", Offset = "0xD13118", VA = "0xD13118")]
	private bool SendUpdateEventToSelectedObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xD10B10", Offset = "0xD10B10", VA = "0xD10B10")]
	private void UpdateCameraPosition(int index)
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xD12DF4", Offset = "0xD12DF4", VA = "0xD12DF4")]
	protected Vector2 GetExtraScrollDelta(int index)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xD12324", Offset = "0xD12324", VA = "0xD12324")]
	private bool ButtonDown(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xD12BA4", Offset = "0xD12BA4", VA = "0xD12BA4")]
	private bool ButtonUp(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xD13260", Offset = "0xD13260", VA = "0xD13260")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xD13468", Offset = "0xD13468", VA = "0xD13468")]
	public CanvasInputModule3lb()
	{
	}
}
[Token(Token = "0x2000082")]
public class CanvasPointer3lb : MonoBehaviour
{
	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FancyHeader("Input", 0, 0)]
	public Autohand.Hand hand;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[FancyHeader("Indicators", 0, 0)]
	public GameObject hitPointMarker;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LineRenderer lineRenderer;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Gradient pointColor;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Gradient selectColor;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[FancyHeader("Events", 0, 0)]
	[Tooltip("Sets as the main pointer if useMultiplePointers is disabled on the InputModule3lb")]
	public bool startAsPrimary;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Foldout("Events")]
	public UnityEvent StartSelect;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Foldout("Events")]
	public UnityEvent StopSelect;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Foldout("Events")]
	public UnityEvent StartPoint;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Foldout("Events")]
	public UnityEvent StopPoint;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isPointing;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool isSetPointing;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	private bool wasPointing;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject target;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float startLookAssist;

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xD13560", Offset = "0xD13560", VA = "0xD13560")]
	private void Awake()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xD13658", Offset = "0xD13658", VA = "0xD13658")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xD136EC", Offset = "0xD136EC", VA = "0xD136EC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xD137BC", Offset = "0xD137BC", VA = "0xD137BC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xD12B68", Offset = "0xD12B68", VA = "0xD12B68")]
	public void OnSelect()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xD12DB8", Offset = "0xD12DB8", VA = "0xD12DB8")]
	public void OnDeselect()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xD137F0", Offset = "0xD137F0", VA = "0xD137F0")]
	public void StartPointing()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xD12EC8", Offset = "0xD12EC8", VA = "0xD12EC8")]
	public void StopPointing()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xD12FB8", Offset = "0xD12FB8", VA = "0xD12FB8")]
	public void SetPointer(Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xD138D4", Offset = "0xD138D4", VA = "0xD138D4")]
	public GameObject GetTarget()
	{
		return null;
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xD138DC", Offset = "0xD138DC", VA = "0xD138DC")]
	public void SetTarget(GameObject target)
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xD129EC", Offset = "0xD129EC", VA = "0xD129EC")]
	public void ClearTarget()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xD138E4", Offset = "0xD138E4", VA = "0xD138E4")]
	public CanvasPointer3lb()
	{
	}
}
[Token(Token = "0x2000083")]
public class VRDispenserAutoHand : HandTriggerAreaEvents
{
	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[FancyHeader("Dispenser", 0, 0)]
	[SerializeField]
	private Grabbable3lb objectToSpawn;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private bool oneShot;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	[SerializeField]
	private bool isNetworked;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<GameObject> myList;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Header("0 Means infinite")]
	public int maxSpawns;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<GameObject> waitingtoDestroy;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public UnityEvent spawnEvent;

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xD138F4", Offset = "0xD138F4", VA = "0xD138F4")]
	public void Start()
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xD139A0", Offset = "0xD139A0", VA = "0xD139A0", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0xD13A80", Offset = "0xD13A80", VA = "0xD13A80", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xD13B60", Offset = "0xD13B60", VA = "0xD13B60")]
	public void Reset()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xD13B84", Offset = "0xD13B84", VA = "0xD13B84")]
	private void DoGrabbing(Autohand.Hand hand)
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xD13CFC", Offset = "0xD13CFC", VA = "0xD13CFC")]
	public void RunDepsenseEvent()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xD13D18", Offset = "0xD13D18", VA = "0xD13D18")]
	public VRDispenserAutoHand()
	{
	}
}
[Token(Token = "0x2000084")]
public class BreakApartManager : MonoBehaviour
{
	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BreakApartPiece[] thePieces;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("-Repel Point-")]
	[Required(null)]
	public Transform repelObject;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ShowIf("shared")]
	[Header("-Shared Across Objects-")]
	public bool rotateRandomly;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[ShowIf("shared")]
	public bool randomizeEachExplode;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[MinMaxSlider(0f, 50f)]
	[ShowIf("shared")]
	public Vector2 explodeDistance;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[ShowIf("shared")]
	[MinMaxSlider(0f, 10f)]
	public Vector2 explodeTime;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0f, 5f)]
	[Tooltip("Wobbles the Position A bit")]
	public float directionWobble;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool showEvents;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("showEvents")]
	public UnityEvent ExplodeAllEvent;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ShowIf("showEvents")]
	public UnityEvent ImplodeAllEvent;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("-Local Requires Parenting to a Root-")]
	public bool useLocal;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[Header("-Settings-")]
	public bool startExploded;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	[Tooltip("Only in Play Mode")]
	public bool showDebug;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
	public bool shared;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool isPuzzle;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("-Simple Puzzle-")]
	[ShowIf("isPuzzle")]
	[ReadOnly]
	[Tooltip("-Count not Run When Instant-")]
	public int puzzleCount;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[ShowIf("isPuzzle")]
	public float puzzleCompleteExtraDelay;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[ShowIf("isPuzzle")]
	public UnityEvent Completed;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isReady;

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xD13D20", Offset = "0xD13D20", VA = "0xD13D20")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xD140FC", Offset = "0xD140FC", VA = "0xD140FC")]
	public void CalcuateDistance(BreakApartPiece chg)
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xD143F4", Offset = "0xD143F4", VA = "0xD143F4")]
	private float RandomFromVector(Vector2 what)
	{
		return default(float);
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xD143FC", Offset = "0xD143FC", VA = "0xD143FC")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xD14540", Offset = "0xD14540", VA = "0xD14540")]
	[Button(null, EButtonEnableMode.Always)]
	public void _ExplodeAll()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xD143C0", Offset = "0xD143C0", VA = "0xD143C0")]
	public void _ExplodeInstant()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xD145E4", Offset = "0xD145E4", VA = "0xD145E4")]
	[Button(null, EButtonEnableMode.Always)]
	public void _ImplodeAll()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xD145F0", Offset = "0xD145F0", VA = "0xD145F0")]
	[Button(null, EButtonEnableMode.Always)]
	public void _ResetAll()
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xD14570", Offset = "0xD14570", VA = "0xD14570")]
	internal void CycleArray(bool isExplode, bool isInstant)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xD14600", Offset = "0xD14600", VA = "0xD14600")]
	internal void CyclePieces(bool isExplode, bool isInstant, BreakApartPiece chg)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xD14C68", Offset = "0xD14C68", VA = "0xD14C68")]
	public void CompletePuzzle()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xD14C90", Offset = "0xD14C90", VA = "0xD14C90")]
	[Button("Recalcuate Vectors", EButtonEnableMode.Always)]
	private void ReCalcVectors()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xD14CEC", Offset = "0xD14CEC", VA = "0xD14CEC")]
	public BreakApartManager()
	{
	}
}
[Token(Token = "0x2000085")]
public class BreakApartPiece : MonoBehaviour
{
	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Settings Override if Shared-")]
	public bool randomizeEachTime;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool randomizeEachExplode;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Wobbles the Position A bit")]
	[Range(0f, 5f)]
	public float directionWobble;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[MinMaxSlider(0f, 10f)]
	public Vector2 explodeDistance;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[MinMaxSlider(0f, 10f)]
	public Vector2 explodeTime;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("-Override for GotoPosition/Rotation-")]
	public Transform posOverride;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ReadOnly]
	public Vector3 posN;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[ReadOnly]
	public Quaternion rotN;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[ReadOnly]
	public Vector3 posO;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ReadOnly]
	public Quaternion rotO;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[ReadOnly]
	public bool exploded;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool showEvents;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[ShowIf("showEvents")]
	public UnityEvent explodeEvent;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[ShowIf("showEvents")]
	public UnityEvent implodeEvent;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[ShowIf("showEvents")]
	public UnityEvent reachTargetImplode;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[ShowIf("showEvents")]
	public UnityEvent resetEvent;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	public BreakApartManager myManager;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[ReadOnly]
	public float currentRandomTime;

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xD14D70", Offset = "0xD14D70", VA = "0xD14D70")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Explode()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xD14DB8", Offset = "0xD14DB8", VA = "0xD14DB8")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Implode()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xD14E00", Offset = "0xD14E00", VA = "0xD14E00")]
	public void _ExplodeInstant()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xD14E24", Offset = "0xD14E24", VA = "0xD14E24")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Reset()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xD146F8", Offset = "0xD146F8", VA = "0xD146F8")]
	internal void ExplodeI(bool isInstant)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xD14E90", Offset = "0xD14E90", VA = "0xD14E90")]
	private void ReachPosImplode()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xD1494C", Offset = "0xD1494C", VA = "0xD1494C")]
	internal void _ImplodeI(bool isInstant)
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xD14E48", Offset = "0xD14E48", VA = "0xD14E48")]
	private float RandomFromVector(Vector2 what)
	{
		return default(float);
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xD143A0", Offset = "0xD143A0", VA = "0xD143A0")]
	internal void RandomFromVectorStarter()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xD14EAC", Offset = "0xD14EAC", VA = "0xD14EAC")]
	public BreakApartPiece()
	{
	}
}
[Token(Token = "0x2000086")]
public class SequenceCaller : MonoBehaviour
{
	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SequencePiece[] thePieces;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<SequencePiece> orderedArray;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public int currentItem;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool mustBeOrdered;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[MinMaxSlider(0f, 20f)]
	public Vector2 randomRange;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent NewSequenceCalled;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent PuzzleComplete;

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xD14F1C", Offset = "0xD14F1C", VA = "0xD14F1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xD14FE8", Offset = "0xD14FE8", VA = "0xD14FE8")]
	[Button(null, EButtonEnableMode.Always)]
	public void _ActivateNextInSequence()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xD150E4", Offset = "0xD150E4", VA = "0xD150E4")]
	[Button(null, EButtonEnableMode.Always)]
	public void _DeactivateAll()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xD15164", Offset = "0xD15164", VA = "0xD15164")]
	[Button(null, EButtonEnableMode.Always)]
	public void _ActivateAllInSequence()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xD15214", Offset = "0xD15214", VA = "0xD15214")]
	internal void RemoveFromSequence(SequencePiece chg)
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xD15094", Offset = "0xD15094", VA = "0xD15094")]
	[Button(null, EButtonEnableMode.Always)]
	public void _SetRandomOrder()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xD15374", Offset = "0xD15374", VA = "0xD15374")]
	public void _SetRandomOrderAmount(int howMany)
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xD152A4", Offset = "0xD152A4", VA = "0xD152A4")]
	internal void SetOrderedAmount(int howMany)
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xD153BC", Offset = "0xD153BC", VA = "0xD153BC")]
	internal bool IsCorrect(SequencePiece chg)
	{
		return default(bool);
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xD154E8", Offset = "0xD154E8", VA = "0xD154E8")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xD155A4", Offset = "0xD155A4", VA = "0xD155A4")]
	public SequenceCaller()
	{
	}
}
[Token(Token = "0x2000087")]
public class SequencePiece : MonoBehaviour
{
	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public SequenceCaller manager;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public bool isActive;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool showEvents;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ShowIf("showEvents")]
	public UnityEvent correctEvent;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("showEvents")]
	public UnityEvent inCorrectEvent;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ShowIf("showEvents")]
	public UnityEvent activateEvent;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("showEvents")]
	[Tooltip("Return to Original State")]
	public UnityEvent resetEventBase;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("showEvents")]
	[Tooltip("Extra Stuff done to that State")]
	public UnityEvent resetEventFX;

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xD155AC", Offset = "0xD155AC", VA = "0xD155AC")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Use()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xD150B8", Offset = "0xD150B8", VA = "0xD150B8")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Activate()
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xD15378", Offset = "0xD15378", VA = "0xD15378")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Reset()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xD15140", Offset = "0xD15140", VA = "0xD15140")]
	[Button(null, EButtonEnableMode.Always)]
	public void _ResetForced()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xD15604", Offset = "0xD15604", VA = "0xD15604")]
	public SequencePiece()
	{
	}
}
[Token(Token = "0x2000088")]
public class DisableOnStart : MonoBehaviour
{
	[Token(Token = "0x2000089")]
	public enum eDisableWhen
	{
		[Token(Token = "0x400030C")]
		OnStart,
		[Token(Token = "0x400030D")]
		AfterStart,
		[Token(Token = "0x400030E")]
		OnAwake
	}

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public eDisableWhen disableWhen;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[ShowIf("disableWhen", eDisableWhen.AfterStart)]
	public float disableDelay;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Deprecated - Only for reference")]
	public bool disableAfterStart;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool disableOnAwake;

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xD1560C", Offset = "0xD1560C", VA = "0xD1560C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xD15644", Offset = "0xD15644", VA = "0xD15644")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xD15620", Offset = "0xD15620", VA = "0xD15620")]
	public void TurnOff()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xD156BC", Offset = "0xD156BC", VA = "0xD156BC")]
	public DisableOnStart()
	{
	}
}
[Token(Token = "0x200008A")]
public class EscapeAndRecenter : MonoBehaviour
{
	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xD156D0", Offset = "0xD156D0", VA = "0xD156D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xD1576C", Offset = "0xD1576C", VA = "0xD1576C")]
	public void MakeRecenter()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xD15814", Offset = "0xD15814", VA = "0xD15814")]
	public EscapeAndRecenter()
	{
	}
}
[Token(Token = "0x200008B")]
public class EventOnStart : MonoBehaviour
{
	[Token(Token = "0x200008C")]
	[CompilerGenerated]
	private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EventOnStart <>4__this;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002D5")]
			[Address(RVA = "0xD159C4", Offset = "0xD159C4", VA = "0xD159C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002D7")]
			[Address(RVA = "0xD15A0C", Offset = "0xD15A0C", VA = "0xD15A0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0xD158AC", Offset = "0xD158AC", VA = "0xD158AC")]
		[DebuggerHidden]
		public <Start>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xD158E8", Offset = "0xD158E8", VA = "0xD158E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xD158EC", Offset = "0xD158EC", VA = "0xD158EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0xD159CC", Offset = "0xD159CC", VA = "0xD159CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEvent awakeEvent;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent startEvent;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent delayStartEvent;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float delay;

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xD1581C", Offset = "0xD1581C", VA = "0xD1581C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xD15838", Offset = "0xD15838", VA = "0xD15838")]
	[IteratorStateMachine(typeof(<Start>d__5))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xD158D4", Offset = "0xD158D4", VA = "0xD158D4")]
	public EventOnStart()
	{
	}
}
[Token(Token = "0x200008D")]
public class Facing : MonoBehaviour
{
	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideIf("facePlayer")]
	public GameObject faceTo;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool facePlayer;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isFacing;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public AxisConstraint axisConstraint;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float turnSpeed;

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xD15A14", Offset = "0xD15A14", VA = "0xD15A14")]
	public void FacingToggle()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xD15A24", Offset = "0xD15A24", VA = "0xD15A24")]
	public void FaceTo(GameObject loc)
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xD15A48", Offset = "0xD15A48", VA = "0xD15A48")]
	public void FacingOff()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xD15A50", Offset = "0xD15A50", VA = "0xD15A50")]
	public void FacingOn()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xD15A5C", Offset = "0xD15A5C", VA = "0xD15A5C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xD15A6C", Offset = "0xD15A6C", VA = "0xD15A6C")]
	private void FaceObject()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xD15B5C", Offset = "0xD15B5C", VA = "0xD15B5C")]
	public Facing()
	{
	}
}
[Token(Token = "0x200008E")]
public class GetPivots : MonoBehaviour
{
	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform GrabObject;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform AnchorPoint;

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xD15B74", Offset = "0xD15B74", VA = "0xD15B74")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xD15B80", Offset = "0xD15B80", VA = "0xD15B80")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xD15DFC", Offset = "0xD15DFC", VA = "0xD15DFC")]
	public GetPivots()
	{
	}
}
[Token(Token = "0x200008F")]
public class MovementSFX : MonoBehaviour
{
	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 holder;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float amount;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeScale;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float rotateSpeed;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool ShouldRotate;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool RandomRotation;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool randomTimeScale;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 rotationDirection;

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xD15E04", Offset = "0xD15E04", VA = "0xD15E04")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xD15E5C", Offset = "0xD15E5C", VA = "0xD15E5C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xD15F1C", Offset = "0xD15F1C", VA = "0xD15F1C")]
	public MovementSFX()
	{
	}
}
[Token(Token = "0x2000090")]
[RequireComponent(typeof(LineRenderer))]
public class SimpleLineConnector : MonoBehaviour
{
	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LineRenderer myLine;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform LineTo;

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xD15F30", Offset = "0xD15F30", VA = "0xD15F30")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xD15FF4", Offset = "0xD15FF4", VA = "0xD15FF4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xD16060", Offset = "0xD16060", VA = "0xD16060")]
	public SimpleLineConnector()
	{
	}
}
[Token(Token = "0x2000091")]
public class ToggleObjects : MonoBehaviour
{
	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] ThingsToToggle;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] ThingsToToggleInverse;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isOn;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[ReadOnly]
	public int curIndex;

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xD16068", Offset = "0xD16068", VA = "0xD16068")]
	public void _ToggleOneObject(int index)
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xD16124", Offset = "0xD16124", VA = "0xD16124")]
	public void ToggleThings()
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xD161E4", Offset = "0xD161E4", VA = "0xD161E4")]
	public void _TurnThingsOn()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xD16290", Offset = "0xD16290", VA = "0xD16290")]
	public void _TurnThingsOff()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xD1633C", Offset = "0xD1633C", VA = "0xD1633C")]
	public ToggleObjects()
	{
	}
}
[Token(Token = "0x2000092")]
[ExecuteInEditMode]
public class NoteGizmo : MonoBehaviour
{
	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xD1634C", Offset = "0xD1634C", VA = "0xD1634C")]
	public NoteGizmo()
	{
	}
}
[Token(Token = "0x2000093")]
[ExecuteInEditMode]
public class NoteGizmoAdvanced : MonoBehaviour
{
	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xD16354", Offset = "0xD16354", VA = "0xD16354")]
	public NoteGizmoAdvanced()
	{
	}
}
[Token(Token = "0x2000094")]
public class DoHapticThings : MonoBehaviour
{
	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool useTrigger;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool isProcedrual;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 1f)]
	[Tooltip("How Powerful 255 is Max")]
	public int intensity;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("In Miliseconds")]
	public int howLong;

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xD1635C", Offset = "0xD1635C", VA = "0xD1635C")]
	public void _HapticProcedrualLeftSet(float intensity)
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xD163CC", Offset = "0xD163CC", VA = "0xD163CC")]
	public void _HapticProcedrualRightSet(float intensity)
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xD1643C", Offset = "0xD1643C", VA = "0xD1643C")]
	public void _HapticProcedrualBothSet(float intensity)
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xD164A0", Offset = "0xD164A0", VA = "0xD164A0")]
	public void _HapticProcedrualLeft()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xD16504", Offset = "0xD16504", VA = "0xD16504")]
	public void _HapticProcedrualRight()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xD16568", Offset = "0xD16568", VA = "0xD16568")]
	public void _HapticProcedrualBoth()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xD165CC", Offset = "0xD165CC", VA = "0xD165CC")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xD1664C", Offset = "0xD1664C", VA = "0xD1664C")]
	public void CollisionHaptics(Autohand.Hand chg)
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xD166C8", Offset = "0xD166C8", VA = "0xD166C8")]
	public DoHapticThings()
	{
	}
}
[Token(Token = "0x2000095")]
public class HapticHelper : MonoBehaviour
{
	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HapticHelper instance;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRHaptics.OVRHapticsChannel m_hapticsChannelL;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRHaptics.OVRHapticsChannel m_hapticsChannelR;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("-ClipHookUps-")]
	public AudioClip GoodAudio;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip BadAudio;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OVRHapticsClip GoodClip;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVRHapticsClip BadClip;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private OVRHapticsClip proceduralClip;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private OVRHapticsClip ExtraClip;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("-Settings-")]
	public bool AlwaysPreempt;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[Header("-Haptics Test-")]
	public bool TestMode;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public OVRInput.Controller myController;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public OVRInput.Button ClipButton;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public OVRInput.Button ProceduralButton;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip ClipToTest;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("-Procedural Testing-")]
	public bool continuous;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Range(0f, 255f)]
	public int pIntensity;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Range(1f, 1000f)]
	public int pLength;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool useSin;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float SinSpeed;

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xD166E0", Offset = "0xD166E0", VA = "0xD166E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xD167F8", Offset = "0xD167F8", VA = "0xD167F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xD16984", Offset = "0xD16984", VA = "0xD16984")]
	public void Update()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xD16B20", Offset = "0xD16B20", VA = "0xD16B20")]
	public static void PlayGoodClip(OVRInput.Controller myController, bool preempt = false)
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xD16D14", Offset = "0xD16D14", VA = "0xD16D14")]
	public static void PlayBadClip(OVRInput.Controller myController, bool preempt = false)
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xD16A50", Offset = "0xD16A50", VA = "0xD16A50")]
	public static void PlayHapticAudioClip(OVRInput.Controller myController, AudioClip aClip, bool preempt = false)
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xD16AB8", Offset = "0xD16AB8", VA = "0xD16AB8")]
	public static void ProceduralTone(OVRInput.Controller myController, int intensity, int length = 25)
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xD16DE4", Offset = "0xD16DE4", VA = "0xD16DE4")]
	public static void ProceduralToneBoth(int intensity, int length = 25)
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xD16DF4", Offset = "0xD16DF4", VA = "0xD16DF4")]
	public void GenerateSinPulse(OVRInput.Controller myController, int intensity, float speed, int length = 25)
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xD16C70", Offset = "0xD16C70", VA = "0xD16C70")]
	public static void ClipPlayer(OVRInput.Controller myController, OVRHapticsClip clip)
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xD16BF0", Offset = "0xD16BF0", VA = "0xD16BF0")]
	public static void ClipPlayerNow(OVRInput.Controller myController, OVRHapticsClip clip)
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xD16EA8", Offset = "0xD16EA8", VA = "0xD16EA8")]
	public HapticHelper()
	{
	}
}
[Token(Token = "0x2000096")]
public class Activator3lb : EventHolder3lb
{
	[Token(Token = "0x6000304")]
	[Address(RVA = "0xD16EC0", Offset = "0xD16EC0", VA = "0xD16EC0")]
	public Activator3lb()
	{
	}
}
[Token(Token = "0x2000097")]
public class AnimationHolder : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000098")]
	public class AnimationTask
	{
		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string param;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float floatChange;

		[Token(Token = "0x600030B")]
		[Address(RVA = "0xD170E4", Offset = "0xD170E4", VA = "0xD170E4")]
		public AnimationTask()
		{
		}
	}

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator setAnimator;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReorderableList]
	public AnimationTask[] theTasks;

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xD16F54", Offset = "0xD16F54", VA = "0xD16F54")]
	public void _AnimateTaskBoolTrue(int chg)
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xD16F9C", Offset = "0xD16F9C", VA = "0xD16F9C")]
	public void _AnimateTaskBoolToggle(int chg)
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xD17008", Offset = "0xD17008", VA = "0xD17008")]
	public void _AnimateTaskBoolFalse(int chg)
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0xD17050", Offset = "0xD17050", VA = "0xD17050")]
	public void _AnimateTaskTrigger(int chg)
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xD17094", Offset = "0xD17094", VA = "0xD17094")]
	public void _AnimateTaskFloat(int chg)
	{
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0xD170DC", Offset = "0xD170DC", VA = "0xD170DC")]
	public AnimationHolder()
	{
	}
}
[Token(Token = "0x2000099")]
public class CountPuzzle : MonoBehaviour
{
	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxAmount;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int amount;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isDone;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent add;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent subtract;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent complete;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent resetEvent;

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xD170EC", Offset = "0xD170EC", VA = "0xD170EC")]
	[Button("Add", EButtonEnableMode.Always)]
	public void Add()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xD17160", Offset = "0xD17160", VA = "0xD17160")]
	[Button("Subtract", EButtonEnableMode.Always)]
	public void Subtract()
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xD1719C", Offset = "0xD1719C", VA = "0xD1719C")]
	[Button("Reset", EButtonEnableMode.Always)]
	public void ResetEvent()
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xD17138", Offset = "0xD17138", VA = "0xD17138")]
	public void Complete()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xD171A0", Offset = "0xD171A0", VA = "0xD171A0")]
	public void DoReset()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xD171C8", Offset = "0xD171C8", VA = "0xD171C8")]
	public void SetMaxAmount(int amt)
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xD171E0", Offset = "0xD171E0", VA = "0xD171E0")]
	public CountPuzzle()
	{
	}
}
[Token(Token = "0x200009A")]
public class DoAllTheThings : MonoBehaviour
{
	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ObjectDoThings[] objectsToDoThings;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool setActive;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool scaleDownAndOff;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool scaleUpOn;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool materialChange;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool materialTween;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool animSetActive;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool animSetInactive;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float valueChange;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material matChange;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool doOnStart;

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xD171E8", Offset = "0xD171E8", VA = "0xD171E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xD1738C", Offset = "0xD1738C", VA = "0xD1738C")]
	public void ScaleAllDownAndOff()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xD173EC", Offset = "0xD173EC", VA = "0xD173EC")]
	public void ScaleAllUpOn()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xD171F8", Offset = "0xD171F8", VA = "0xD171F8")]
	public void DoTheThings()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xD1744C", Offset = "0xD1744C", VA = "0xD1744C")]
	public DoAllTheThings()
	{
	}
}
[Token(Token = "0x200009B")]
public class EventHolder3lb : MonoBehaviour
{
	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ResizableTextArea]
	public string Notes;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool runOnOnlyOnce;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onEvent;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool onHasBeenRun;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool runOffOnlyOnce;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent offEvent;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool offHasBeenRun;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[Header("Extra Settings")]
	public bool advancedEvents;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("advancedEvents")]
	public UnityEvent resetEvent;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Space(10f)]
	[ShowIf("advancedEvents")]
	public bool runIndexEventsOnlyOnce;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ShowIf("advancedEvents")]
	public UnityEvent[] eventIndex;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<bool> eventsRun;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool debugMessages;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool isOn;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	private bool doEventOnstart;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	private bool doEventOnAwake;

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xD17454", Offset = "0xD17454", VA = "0xD17454")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xD17568", Offset = "0xD17568", VA = "0xD17568")]
	private void Start()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xD175E8", Offset = "0xD175E8", VA = "0xD175E8")]
	[Button("Do On Event", EButtonEnableMode.Always)]
	public void OnEvent()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xD17694", Offset = "0xD17694", VA = "0xD17694")]
	[Button("Do Off Event", EButtonEnableMode.Always)]
	public void OffEvent()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xD17740", Offset = "0xD17740", VA = "0xD17740")]
	public void ResetEvent()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xD177D4", Offset = "0xD177D4", VA = "0xD177D4")]
	[Button("Do Toggle", EButtonEnableMode.Always)]
	public void Toggle()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xD177EC", Offset = "0xD177EC", VA = "0xD177EC")]
	public void DoEventIndex(int chg)
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xD16EC4", Offset = "0xD16EC4", VA = "0xD16EC4")]
	public EventHolder3lb()
	{
	}
}
[Token(Token = "0x200009C")]
public class EventHolderState3lb : MonoBehaviour
{
	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	[InfoBox("Dear Robin and Cordelia - Do not Abuse! - Thank you", EInfoBoxType.Normal)]
	public int curIndex;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int debugIndex;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool InvokeStateOnlyOnChange;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReorderableList]
	public UnityEvent[] myEventList;

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xD1792C", Offset = "0xD1792C", VA = "0xD1792C")]
	[Button(null, EButtonEnableMode.Always)]
	public void _RunState()
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xD17968", Offset = "0xD17968", VA = "0xD17968")]
	public void _RChangeState(int chg)
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xD179C0", Offset = "0xD179C0", VA = "0xD179C0")]
	public void _ChangeState(int chg)
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xD179C8", Offset = "0xD179C8", VA = "0xD179C8")]
	[Button(null, EButtonEnableMode.Always)]
	public void _RunDebugState()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xD17A04", Offset = "0xD17A04", VA = "0xD17A04")]
	public EventHolderState3lb()
	{
	}
}
[Token(Token = "0x200009D")]
public class EventSequencer3lb : MonoBehaviour
{
	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent[] listOfEvents;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent endOfIndex;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public int curIndex;

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xD17A0C", Offset = "0xD17A0C", VA = "0xD17A0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xD17A18", Offset = "0xD17A18", VA = "0xD17A18")]
	[Button(null, EButtonEnableMode.Always)]
	public void _DoNextEvent()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xD17A5C", Offset = "0xD17A5C", VA = "0xD17A5C")]
	public void _DoIndexEvent(int chg)
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xD17B38", Offset = "0xD17B38", VA = "0xD17B38")]
	public void _SetAndDoIndex(int chg)
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xD17B40", Offset = "0xD17B40", VA = "0xD17B40")]
	public void _SetIndex(int chg)
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xD17B48", Offset = "0xD17B48", VA = "0xD17B48")]
	public void _Reset()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xD17B50", Offset = "0xD17B50", VA = "0xD17B50")]
	public EventSequencer3lb()
	{
	}
}
[Token(Token = "0x200009E")]
public class EventTester3lb : MonoBehaviour
{
	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent check;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public KeyCode myKeyCode;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool moreEvents;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Secondary Events")]
	[ShowIf("moreEvents")]
	public UnityEvent keyUpEvent;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("moreEvents")]
	public UnityEvent check2;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ShowIf("moreEvents")]
	public KeyCode myKeyCode2;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("moreEvents")]
	public UnityEvent check3;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("moreEvents")]
	public KeyCode myKeyCode3;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ShowIf("moreEvents")]
	public UnityEvent check4;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ShowIf("moreEvents")]
	public KeyCode myKeyCode4;

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xD17B58", Offset = "0xD17B58", VA = "0xD17B58")]
	private void Start()
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xD17C04", Offset = "0xD17C04", VA = "0xD17C04")]
	private void Update()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xD17CC8", Offset = "0xD17CC8", VA = "0xD17CC8")]
	[Button("Check Event", EButtonEnableMode.Always)]
	public void CheckEvent()
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xD17CE4", Offset = "0xD17CE4", VA = "0xD17CE4")]
	[Button("Check Event KeyUp/Secondary", EButtonEnableMode.Always)]
	public void KeyUpEvent()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xD17D00", Offset = "0xD17D00", VA = "0xD17D00")]
	public EventTester3lb()
	{
	}
}
[Token(Token = "0x200009F")]
public class EventTesterVR3lb : MonoBehaviour
{
	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Button myButton;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool useBoth;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInput.Controller myController;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent myEvent;

	[Token(Token = "0x6000331")]
	[Address(RVA = "0xD17D28", Offset = "0xD17D28", VA = "0xD17D28")]
	private void Update()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xD17EAC", Offset = "0xD17EAC", VA = "0xD17EAC")]
	[Button("Check Event", EButtonEnableMode.Always)]
	public void CheckEvent()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xD17E10", Offset = "0xD17E10", VA = "0xD17E10")]
	public void ReCenter()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xD17EC8", Offset = "0xD17EC8", VA = "0xD17EC8")]
	public EventTesterVR3lb()
	{
	}
}
[Token(Token = "0x20000A0")]
public class GrowingObject : MonoBehaviour
{
	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform scaledObject;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minScale;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxScale;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string searchTag;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float scaleRateUp;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float scaleRateDown;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Script Vars")]
	public bool isGrowing;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool isShrinking;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource mySource;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float minVolume;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float maxVolume;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject currentObject;

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xD17EE0", Offset = "0xD17EE0", VA = "0xD17EE0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xD18354", Offset = "0xD18354", VA = "0xD18354")]
	public void StartGrow()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xD18244", Offset = "0xD18244", VA = "0xD18244")]
	public void SoundScale()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xD17F7C", Offset = "0xD17F7C", VA = "0xD17F7C")]
	public void ScaleSystem()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0xD18360", Offset = "0xD18360", VA = "0xD18360")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xD183C4", Offset = "0xD183C4", VA = "0xD183C4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xD183FC", Offset = "0xD183FC", VA = "0xD183FC")]
	public GrowingObject()
	{
	}
}
[Token(Token = "0x20000A1")]
public class KeyPadPuzzle : MonoBehaviour
{
	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	public string code;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool autoCheckCode;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool continuousEntry;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public string inputedCode;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool disabled;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshPro textOutput;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshPro textClue;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string acceptedChars;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Randomizer")]
	public bool randomPassCode;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int length;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Events")]
	public UnityEvent correctCode;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent inCorrectCode;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent badKey;

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xD18424", Offset = "0xD18424", VA = "0xD18424")]
	private void Start()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xD185C4", Offset = "0xD185C4", VA = "0xD185C4")]
	public void DisablePuzzle()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xD185D0", Offset = "0xD185D0", VA = "0xD185D0")]
	public void RandomizeCode()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xD18710", Offset = "0xD18710", VA = "0xD18710")]
	public void InputChar(string chg)
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xD18894", Offset = "0xD18894", VA = "0xD18894")]
	public void Backspace()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xD188D0", Offset = "0xD188D0", VA = "0xD188D0")]
	public void ClearCode()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xD18990", Offset = "0xD18990", VA = "0xD18990")]
	public void CheckPuzzle()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xD1886C", Offset = "0xD1886C", VA = "0xD1886C")]
	[Button(null, EButtonEnableMode.Always)]
	public void CorrectCode()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xD184EC", Offset = "0xD184EC", VA = "0xD184EC")]
	public void ResetPuzzle()
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xD18A88", Offset = "0xD18A88", VA = "0xD18A88")]
	public KeyPadPuzzle()
	{
	}
}
[Token(Token = "0x20000A2")]
public class MirrorMirror : MonoBehaviour
{
	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Required(null)]
	public GameObject objectToCopy;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool copyEnabled;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[Label("Action At a Distance")]
	[Header("Transform Options")]
	public bool actionAtaDistance;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool copyScale;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool copyRotation;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool copyPosition;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 rotationA;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 transformShow;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Incriments")]
	public bool useIncriments;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[ShowIf("useIncriments")]
	[Label("Rotation Incriment")]
	[Tooltip("Best if you keep this Equal to 360")]
	[Range(0f, 180f)]
	public float incrimentsR;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("useIncriments")]
	[Label("Position Incriment")]
	public float incrimentsT;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 oldposition;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Other Options")]
	public bool copyText;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool copyColor;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[ShowIf("copyScale")]
	public float scaleTime;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ShowIf("copyRotation")]
	public float rotateTime;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[ShowIf("copyPosition")]
	public float moveTime;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 offsetPosition;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private TextMeshPro copyTMPro;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private TextMeshProUGUI copyTMProUGUI;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Text copyUGIText;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private TextMeshPro myCopyTMPro;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private TextMeshProUGUI myCopyTMProUGUI;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Text myCopyUGIText;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Renderer myRenderer;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Renderer myCopyRenderer;

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xD18B14", Offset = "0xD18B14", VA = "0xD18B14")]
	private void Start()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xD18B18", Offset = "0xD18B18", VA = "0xD18B18")]
	public void MirrorPrepare()
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xD18DB8", Offset = "0xD18DB8", VA = "0xD18DB8")]
	public void _ActionAtDistanceToggle()
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xD18DC8", Offset = "0xD18DC8", VA = "0xD18DC8")]
	public void _ActionAtDistanceChange(bool chg)
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xD18DD4", Offset = "0xD18DD4", VA = "0xD18DD4")]
	public void _CopyToggle()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xD18DE4", Offset = "0xD18DE4", VA = "0xD18DE4")]
	public void _CopyChange(bool chg)
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0xD18DF0", Offset = "0xD18DF0", VA = "0xD18DF0")]
	public void _ChangeMirror(GameObject chg)
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0xD18E0C", Offset = "0xD18E0C", VA = "0xD18E0C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0xD18E1C", Offset = "0xD18E1C", VA = "0xD18E1C")]
	private void CopyFunction()
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xD18E3C", Offset = "0xD18E3C", VA = "0xD18E3C")]
	private void CopyTransforms()
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xD1948C", Offset = "0xD1948C", VA = "0xD1948C")]
	private Vector3 SnappyReturn(Vector3 where, int increment)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xD192DC", Offset = "0xD192DC", VA = "0xD192DC")]
	private Vector3 SnappyReturnfloat(Vector3 where, float increment)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xD19174", Offset = "0xD19174", VA = "0xD19174")]
	private void TextCopy()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xD18FA8", Offset = "0xD18FA8", VA = "0xD18FA8")]
	private void CopyColors()
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xD1963C", Offset = "0xD1963C", VA = "0xD1963C")]
	public MirrorMirror()
	{
	}
}
[Token(Token = "0x20000A3")]
public class ReloadMovePlayer : MonoBehaviour
{
	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject PlayerPrefab;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] playerPoints;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Editor Debug Keys")]
	public KeyCode playerMoveKey;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int whatPoint;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public KeyCode playerMoveKey2;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int whatPoint2;

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xD19658", Offset = "0xD19658", VA = "0xD19658")]
	public void ReloadLevel()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xD196C8", Offset = "0xD196C8", VA = "0xD196C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xD19720", Offset = "0xD19720", VA = "0xD19720")]
	public void MovePlayer(int chg)
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xD197FC", Offset = "0xD197FC", VA = "0xD197FC")]
	public ReloadMovePlayer()
	{
	}
}
[Token(Token = "0x20000A4")]
public class TimedDeactivateTrigger : MonoBehaviour
{
	[Token(Token = "0x20000A5")]
	public enum eTriggerType
	{
		[Token(Token = "0x40003C1")]
		Hand,
		[Token(Token = "0x40003C2")]
		Tag
	}

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Settings-")]
	public eTriggerType triggerType;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[NaughtyAttributes.Tag]
	public string seekTag;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[MinMaxSlider(0f, 50f)]
	[Header("-CountDown-")]
	public Vector2 countDownTime;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReadOnly]
	public float timer;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[ReadOnly]
	public float countDown;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ReadOnly]
	public bool isActive;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Foldout("-UnityEvents-")]
	public UnityEvent activateEvent;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Foldout("-UnityEvents-")]
	public UnityEvent deactivateEvent;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Foldout("-UnityEvents-")]
	public UnityEvent resetEvent;

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xD19814", Offset = "0xD19814", VA = "0xD19814")]
	private void Start()
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xD19834", Offset = "0xD19834", VA = "0xD19834")]
	private void RandomizeTime()
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xD19854", Offset = "0xD19854", VA = "0xD19854")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xD198CC", Offset = "0xD198CC", VA = "0xD198CC")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Activate()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xD198A4", Offset = "0xD198A4", VA = "0xD198A4")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Deactivate()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xD19908", Offset = "0xD19908", VA = "0xD19908")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Reset()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xD19940", Offset = "0xD19940", VA = "0xD19940")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xD19A18", Offset = "0xD19A18", VA = "0xD19A18")]
	public TimedDeactivateTrigger()
	{
	}
}
[Token(Token = "0x20000A6")]
public class TimerSystems : MonoBehaviour
{
	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	[Header("-Settings-")]
	public float timer;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool startOnAwake;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool activeTimer;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[Header("CountDown Zone")]
	public bool isCountDown;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("In Seconds")]
	public float countDownTime;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool resetOnCountDownEnd;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[Header("-Text Output-")]
	public bool ShowText;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Format Listed in Script ")]
	[ShowIf("ShowText")]
	public string formatTimer;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("ShowText")]
	public string stringPreview;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ShowIf("ShowText")]
	public TextMeshPro timerText;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Event at End of CountDown")]
	[Header("-Events-")]
	public bool ShowMoreEvents;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent TimerStartEvent;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent CountDownEvent;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ShowIf("ShowMoreEvents")]
	public UnityEvent PauseEvent;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ShowIf("ShowMoreEvents")]
	public UnityEvent ResumeEvent;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool timerFinished;

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xD19A74", Offset = "0xD19A74", VA = "0xD19A74")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xD19A90", Offset = "0xD19A90", VA = "0xD19A90")]
	private void Update()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xD19C30", Offset = "0xD19C30", VA = "0xD19C30")]
	public void Reset(bool pauseToo)
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xD1A30C", Offset = "0xD1A30C", VA = "0xD1A30C")]
	public void StopAndReset(bool pauseToo)
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xD1A320", Offset = "0xD1A320", VA = "0xD1A320")]
	public void PauseTimer()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xD1A348", Offset = "0xD1A348", VA = "0xD1A348")]
	public void ResumeTimer()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xD1A370", Offset = "0xD1A370", VA = "0xD1A370")]
	public void _StartTimerNew()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xD1A3A8", Offset = "0xD1A3A8", VA = "0xD1A3A8")]
	public void StartTimer()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xD19C44", Offset = "0xD19C44", VA = "0xD19C44")]
	private string FloatToTime(float toConvert, string format)
	{
		return null;
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xD1A3DC", Offset = "0xD1A3DC", VA = "0xD1A3DC")]
	public TimerSystems()
	{
	}
}
[Token(Token = "0x20000A7")]
public class TriggerButtonVR3lb : MonoBehaviour
{
	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent enterEvent;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent exitEvent;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent Activate;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent Deactivate;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool showDebug;

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xD1A434", Offset = "0xD1A434", VA = "0xD1A434")]
	public void Awake()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xD1A4A4", Offset = "0xD1A4A4", VA = "0xD1A4A4")]
	public void Update()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xD1A4A8", Offset = "0xD1A4A8", VA = "0xD1A4A8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xD1A4AC", Offset = "0xD1A4AC", VA = "0xD1A4AC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xD1A4B0", Offset = "0xD1A4B0", VA = "0xD1A4B0")]
	public void EnterEvent()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xD1A4E8", Offset = "0xD1A4E8", VA = "0xD1A4E8")]
	public void ActivateEvent()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xD1A4F0", Offset = "0xD1A4F0", VA = "0xD1A4F0")]
	public void DeactivateEvent()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xD1A4F8", Offset = "0xD1A4F8", VA = "0xD1A4F8")]
	public void ExitEvent()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xD1A4CC", Offset = "0xD1A4CC", VA = "0xD1A4CC")]
	public void ActualEventEnter()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xD1A514", Offset = "0xD1A514", VA = "0xD1A514")]
	public void ActualEventExit()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xD1A4EC", Offset = "0xD1A4EC", VA = "0xD1A4EC")]
	public void ActualActivate()
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xD1A4F4", Offset = "0xD1A4F4", VA = "0xD1A4F4")]
	public void ActualDeactivate()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xD1A530", Offset = "0xD1A530", VA = "0xD1A530")]
	public TriggerButtonVR3lb()
	{
	}
}
[Token(Token = "0x20000A8")]
public class TriggerEvent : MonoBehaviour
{
	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string SearchTag;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isOneShot;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent enterEvent;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent exitEvent;

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xD1A538", Offset = "0xD1A538", VA = "0xD1A538")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xD1A5A0", Offset = "0xD1A5A0", VA = "0xD1A5A0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xD1A654", Offset = "0xD1A654", VA = "0xD1A654")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xD1A5E0", Offset = "0xD1A5E0", VA = "0xD1A5E0")]
	private void EnterEvent()
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xD1A69C", Offset = "0xD1A69C", VA = "0xD1A69C")]
	private void ExitEvent()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xD1A6B8", Offset = "0xD1A6B8", VA = "0xD1A6B8")]
	public TriggerEvent()
	{
	}
}
[Token(Token = "0x20000A9")]
public class TriggerEvent3lb : MonoBehaviour
{
	[Token(Token = "0x20000AA")]
	public enum eTriggerType
	{
		[Token(Token = "0x40003EC")]
		Hand,
		[Token(Token = "0x40003ED")]
		Tag,
		[Token(Token = "0x40003EE")]
		Object,
		[Token(Token = "0x40003EF")]
		None,
		[Token(Token = "0x40003F0")]
		ItemID
	}

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public eTriggerType triggerType;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Takes Object Overrides Tags")]
	[Space(10f)]
	public GameObject takesObject;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[TagSelector]
	public string searchTag;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[TagSelector]
	[Tooltip("Optional for MultiTag")]
	public string[] searchTagFilter;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[DisableIf("repeater")]
	[Space(10f)]
	public bool isOneShot;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[DisableIf("isOneShot")]
	public bool repeater;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool isBlocked;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[ShowIf("repeater")]
	public float repeatDelay;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string searchID;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Space(10f)]
	public UnityEvent enterEvent;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent exitEvent;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool triggerSendMessage;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ShowIf("triggerSendMessage")]
	public string sendMessage;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool showDebug;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject target;

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xD1A710", Offset = "0xD1A710", VA = "0xD1A710")]
	private void Awake()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xD1A780", Offset = "0xD1A780", VA = "0xD1A780")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xD1AC68", Offset = "0xD1AC68", VA = "0xD1AC68")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xD1ABD0", Offset = "0xD1ABD0", VA = "0xD1ABD0")]
	private bool IsOnTagList(string chg)
	{
		return default(bool);
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xD1ABCC", Offset = "0xD1ABCC", VA = "0xD1ABCC")]
	public void EnterEvent()
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xD1B084", Offset = "0xD1B084", VA = "0xD1B084")]
	public void ExitEvent()
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xD1B0A0", Offset = "0xD1B0A0", VA = "0xD1B0A0")]
	[Button("Enter Event", EButtonEnableMode.Always)]
	public void ActualEventEnter()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0xD1B1D0", Offset = "0xD1B1D0", VA = "0xD1B1D0")]
	[Button("Exit Event", EButtonEnableMode.Always)]
	public void ActualEventExit()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xD1B1EC", Offset = "0xD1B1EC", VA = "0xD1B1EC")]
	private void CooldownComplete()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xD1B214", Offset = "0xD1B214", VA = "0xD1B214")]
	public TriggerEvent3lb()
	{
	}
}
[Token(Token = "0x20000AB")]
public class URLOpener : MonoBehaviour
{
	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string theURL;

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xD1B2B8", Offset = "0xD1B2B8", VA = "0xD1B2B8")]
	public void _OpenURLName(string chg)
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xD1B2C4", Offset = "0xD1B2C4", VA = "0xD1B2C4")]
	public void _OpenURL()
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xD1B2D0", Offset = "0xD1B2D0", VA = "0xD1B2D0")]
	public URLOpener()
	{
	}
}
[Token(Token = "0x20000AC")]
public class VRToggleInteract : MonoBehaviour
{
	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent toggleOnEvent;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent toggleOffEvent;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Optional Settings")]
	public HandPlayerType handPlayerType;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer changeRenderer;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject activateEffect;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material onImage;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material offImage;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isOn;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Autohand.Hand myGrabber;

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xD1B2D8", Offset = "0xD1B2D8", VA = "0xD1B2D8")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xD1B3C4", Offset = "0xD1B3C4", VA = "0xD1B3C4")]
	public bool HandPlayerTypeMatch(HandPlayerType handPlayerType, HandPlayerType handPlayerType1)
	{
		return default(bool);
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xD1B3E8", Offset = "0xD1B3E8", VA = "0xD1B3E8")]
	private void Update()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xD1B644", Offset = "0xD1B644", VA = "0xD1B644")]
	public void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xD1B494", Offset = "0xD1B494", VA = "0xD1B494")]
	public void ToggleSystem()
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xD1B700", Offset = "0xD1B700", VA = "0xD1B700")]
	public VRToggleInteract()
	{
	}
}
[Token(Token = "0x20000AD")]
public class VRTouchInteract : MonoBehaviour
{
	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent touchEvent;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isButton;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isOneShot;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool requireButton;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Autohand.Hand myGrabber;

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xD1B708", Offset = "0xD1B708", VA = "0xD1B708")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xD1B7E8", Offset = "0xD1B7E8", VA = "0xD1B7E8")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xD1B988", Offset = "0xD1B988", VA = "0xD1B988")]
	private void Update()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xD1BA3C", Offset = "0xD1BA3C", VA = "0xD1BA3C")]
	public void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xD1B8C8", Offset = "0xD1B8C8", VA = "0xD1B8C8")]
	public void UseEvent()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xD1BB38", Offset = "0xD1BB38", VA = "0xD1BB38")]
	public VRTouchInteract()
	{
	}
}
[Token(Token = "0x20000AE")]
public class NPCPathNode : MonoBehaviour
{
	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NPCPathSystem mySystem;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Only one Place to Go")]
	public bool isMultiPath;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideIf("isMultiPath")]
	public Transform gotoArea;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("If Hover Around")]
	[ShowIf("isMultiPath")]
	public Transform[] idlePaths;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent startEvent;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent finishEvent;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent leaveEvent;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool showDebug;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[ShowIf("showDebug")]
	public float sphereSize;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ShowIf("showDebug")]
	public bool wireFrame;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[ShowIf("showDebug")]
	public Color myColor;

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xD1BB48", Offset = "0xD1BB48", VA = "0xD1BB48")]
	public void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xD1BBDC", Offset = "0xD1BBDC", VA = "0xD1BBDC")]
	public NPCPathNode()
	{
	}
}
[Token(Token = "0x20000AF")]
public class NPCPathSystem : MonoBehaviour
{
	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Settings-")]
	public NPCPathNode[] nodes;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NPCPathNode currentNode;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Tween pathTween;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent endEvent;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int curIndex;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool loop;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("-Path Settings-")]
	public Ease myEase;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool playOnStart;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool isPathing;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float lookAhead;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float rotSpeed;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion lastRot;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float timeCount;

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xD1BBF8", Offset = "0xD1BBF8", VA = "0xD1BBF8")]
	public void Start()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xD1BC10", Offset = "0xD1BC10", VA = "0xD1BC10")]
	public void Next()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xD1C114", Offset = "0xD1C114", VA = "0xD1C114")]
	public void End()
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xD1C130", Offset = "0xD1C130", VA = "0xD1C130")]
	public void Goto(int chg)
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xD1BCA4", Offset = "0xD1BCA4", VA = "0xD1BCA4")]
	private void StartNode()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xD1C1BC", Offset = "0xD1C1BC", VA = "0xD1C1BC")]
	public void FinishNode()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xD1C200", Offset = "0xD1C200", VA = "0xD1C200")]
	private void IdleHover()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xD1C504", Offset = "0xD1C504", VA = "0xD1C504")]
	protected void OnPathUpdate()
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xD1C64C", Offset = "0xD1C64C", VA = "0xD1C64C")]
	public NPCPathSystem()
	{
	}
}
[Token(Token = "0x20000B1")]
public class BuildInfo
{
	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static BuildInfo _instance;

	[Token(Token = "0x1700002F")]
	public static BuildInfo Instance
	{
		[Token(Token = "0x60003A5")]
		[Address(RVA = "0xD1C6F0", Offset = "0xD1C6F0", VA = "0xD1C6F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000030")]
	public DateTime BuildTime
	{
		[Token(Token = "0x60003A6")]
		[Address(RVA = "0xD1C83C", Offset = "0xD1C83C", VA = "0xD1C83C")]
		[CompilerGenerated]
		get
		{
			return default(DateTime);
		}
		[Token(Token = "0x60003A7")]
		[Address(RVA = "0xD1C844", Offset = "0xD1C844", VA = "0xD1C844")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000031")]
	public string BuildDate
	{
		[Token(Token = "0x60003A8")]
		[Address(RVA = "0xD1C84C", Offset = "0xD1C84C", VA = "0xD1C84C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60003A9")]
		[Address(RVA = "0xD1C854", Offset = "0xD1C854", VA = "0xD1C854")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xD1C77C", Offset = "0xD1C77C", VA = "0xD1C77C")]
	protected BuildInfo()
	{
	}
}
[Token(Token = "0x20000B2")]
public class ShowBuildInfo : MonoBehaviour
{
	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI myTMP;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text myText;

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xD1C85C", Offset = "0xD1C85C", VA = "0xD1C85C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xD1C940", Offset = "0xD1C940", VA = "0xD1C940")]
	public ShowBuildInfo()
	{
	}
}
[Token(Token = "0x20000B3")]
[RequireComponent(typeof(SimpleMovingPlatform))]
public class AttachToPlatform : TriggerSetParent
{
	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool startOnEnter;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool stopOnExit;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SimpleMovingPlatform platform;

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xD1C948", Offset = "0xD1C948", VA = "0xD1C948")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xD1C9A0", Offset = "0xD1C9A0", VA = "0xD1C9A0", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xD1CA00", Offset = "0xD1CA00", VA = "0xD1CA00", Slot = "5")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xD1CA78", Offset = "0xD1CA78", VA = "0xD1CA78")]
	public AttachToPlatform()
	{
	}
}
[Token(Token = "0x20000B4")]
public class SimpleMovingPlatform : MonoBehaviour
{
	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] movePoints;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Ease easeType;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float delay;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float time;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool gotoAndStop;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool isPaused;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform whereToGo;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int curIndex;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool canMove;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Tween myTween;

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xD1CB54", Offset = "0xD1CB54", VA = "0xD1CB54")]
	private void Start()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xD1CBDC", Offset = "0xD1CBDC", VA = "0xD1CBDC")]
	private void MoveTo()
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xD1CCEC", Offset = "0xD1CCEC", VA = "0xD1CCEC")]
	private void PlatformDelay()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xD1CBC4", Offset = "0xD1CBC4", VA = "0xD1CBC4")]
	private void PlatformGo()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xD1CA28", Offset = "0xD1CA28", VA = "0xD1CA28")]
	public void PausePlatform()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xD1CDA4", Offset = "0xD1CDA4", VA = "0xD1CDA4")]
	public void UnpausePlatform()
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xD1C9C8", Offset = "0xD1C9C8", VA = "0xD1C9C8")]
	public void StartPlatform()
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xD1CDF0", Offset = "0xD1CDF0", VA = "0xD1CDF0")]
	public void GotoIndex(int index)
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xD1CE60", Offset = "0xD1CE60", VA = "0xD1CE60")]
	public void GotoLocation(Transform where)
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xD1CEAC", Offset = "0xD1CEAC", VA = "0xD1CEAC")]
	public SimpleMovingPlatform()
	{
	}
}
[Token(Token = "0x20000B5")]
public class TriggerSetParent : MonoBehaviour
{
	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TagSelector]
	public string[] tagsToCheck;

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xD1CEBC", Offset = "0xD1CEBC", VA = "0xD1CEBC")]
	public bool CheckForTag(string tag)
	{
		return default(bool);
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xD1CF40", Offset = "0xD1CF40", VA = "0xD1CF40")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xD1CFD4", Offset = "0xD1CFD4", VA = "0xD1CFD4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xD1D048", Offset = "0xD1D048", VA = "0xD1D048", Slot = "4")]
	public virtual void OnEnter()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xD1D04C", Offset = "0xD1D04C", VA = "0xD1D04C", Slot = "5")]
	public virtual void OnExit()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xD1CA7C", Offset = "0xD1CA7C", VA = "0xD1CA7C")]
	public TriggerSetParent()
	{
	}
}
[Token(Token = "0x20000B6")]
public class StoryBeat : MonoBehaviour
{
	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool autoAdvance;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool breakForDialog;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] arrayofWaits;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float waitTime;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string[] text;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float delayForReminder;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int languageOffset;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent startEvent;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent endEvent;

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xD1D050", Offset = "0xD1D050", VA = "0xD1D050")]
	public StoryBeat()
	{
	}
}
[Token(Token = "0x20000B7")]
public class StorySequencer : MonoBehaviour
{
	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StoryBeat[] yourBeats;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isPlaying;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int currentIndex;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float startDelay;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool autoPlay;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent startEvent;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent endEvent;

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xD1D058", Offset = "0xD1D058", VA = "0xD1D058")]
	public void Next()
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xD1D068", Offset = "0xD1D068", VA = "0xD1D068")]
	public void Backwards()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xD1D06C", Offset = "0xD1D06C", VA = "0xD1D06C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xD1D070", Offset = "0xD1D070", VA = "0xD1D070")]
	public StorySequencer()
	{
	}
}
[Token(Token = "0x20000B8")]
public class StoryText : MonoBehaviour
{
	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string englishText;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string spanishText;

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xD1D078", Offset = "0xD1D078", VA = "0xD1D078")]
	public StoryText()
	{
	}
}
[Token(Token = "0x20000B9")]
public class TagSelectorAttribute : PropertyAttribute
{
	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool UseDefaultTagFieldDrawer;

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xD1D080", Offset = "0xD1D080", VA = "0xD1D080")]
	public TagSelectorAttribute()
	{
	}
}
[Token(Token = "0x20000BA")]
public class TouchSphere : MonoBehaviour
{
	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Main Event-")]
	public UnityEvent useEvent;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool oneUse;

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xD1D088", Offset = "0xD1D088", VA = "0xD1D088")]
	public void Start()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xD1D0F0", Offset = "0xD1D0F0", VA = "0xD1D0F0")]
	public void Use()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xD1D164", Offset = "0xD1D164", VA = "0xD1D164")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xD1D168", Offset = "0xD1D168", VA = "0xD1D168")]
	public TouchSphere()
	{
	}
}
[Token(Token = "0x20000BB")]
public class VRInputComponent : MonoBehaviour
{
	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent useEvent;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isButton;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isSelected;

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xD1D170", Offset = "0xD1D170", VA = "0xD1D170")]
	private void Start()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xD1D208", Offset = "0xD1D208", VA = "0xD1D208")]
	[Button(null, EButtonEnableMode.Always)]
	public void Use()
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xD1D280", Offset = "0xD1D280", VA = "0xD1D280")]
	public VRInputComponent()
	{
	}
}
[Token(Token = "0x20000BC")]
[RequireComponent(typeof(VRInputComponent))]
public class VRInputPulse : MonoBehaviour
{
	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer rend;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRInputComponent myComp;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool canPulse;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool pulseOn;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startValue;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string shaderVariable;

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xD1D288", Offset = "0xD1D288", VA = "0xD1D288")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xD1D384", Offset = "0xD1D384", VA = "0xD1D384")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xD1D430", Offset = "0xD1D430", VA = "0xD1D430")]
	public VRInputPulse()
	{
	}
}
[Token(Token = "0x20000BD")]
public class VRInputRay : MonoBehaviour
{
	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Button button;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public OVRInput.Controller controller;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool canDoInput;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rayDistance;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject pointer;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private VRInputComponent curTarget;

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xD1D488", Offset = "0xD1D488", VA = "0xD1D488")]
	private void Update()
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xD1D498", Offset = "0xD1D498", VA = "0xD1D498")]
	private void InputControl()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xD1D62C", Offset = "0xD1D62C", VA = "0xD1D62C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xD1D63C", Offset = "0xD1D63C", VA = "0xD1D63C")]
	private void ShowRay()
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xD1D8F0", Offset = "0xD1D8F0", VA = "0xD1D8F0")]
	private void MovePointer(RaycastHit hit)
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xD1D82C", Offset = "0xD1D82C", VA = "0xD1D82C")]
	private void HidePointer()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xD1DA04", Offset = "0xD1DA04", VA = "0xD1DA04")]
	public VRInputRay()
	{
	}
}
[Token(Token = "0x20000BE")]
[RequireComponent(typeof(QuickOutline))]
public class GrabOutline : MonoBehaviour
{
	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private QuickOutline quickOutline;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool wasSelected;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Grabbable3lb myGrabObject;

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xD1DA14", Offset = "0xD1DA14", VA = "0xD1DA14")]
	private void Start()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xD1DB0C", Offset = "0xD1DB0C", VA = "0xD1DB0C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xD1DB10", Offset = "0xD1DB10", VA = "0xD1DB10")]
	public GrabOutline()
	{
	}
}
[Token(Token = "0x20000BF")]
public class SliderData : MonoBehaviour
{
	[Token(Token = "0x20000C0")]
	public enum SliderAxis
	{
		[Token(Token = "0x400045D")]
		X,
		[Token(Token = "0x400045E")]
		Y,
		[Token(Token = "0x400045F")]
		Z
	}

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[InfoBox("Parent object must be at 1,1,1 world scale.", EInfoBoxType.Normal)]
	[Tooltip("Direction of the slider relative to the parent (local axis).")]
	public SliderAxis sliderAxis;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("The value to use in other scripts, like SliderResult.")]
	[ReadOnly]
	public float outputValue;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 axis;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float theLimit;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject startPoint;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float rawValue;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent onChange;

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xD1DB18", Offset = "0xD1DB18", VA = "0xD1DB18")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xD1DE74", Offset = "0xD1DE74", VA = "0xD1DE74")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xD1DD84", Offset = "0xD1DD84", VA = "0xD1DD84")]
	private void CalcuateSlider()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xD1DEBC", Offset = "0xD1DEBC", VA = "0xD1DEBC")]
	public SliderData()
	{
	}
}
[Token(Token = "0x20000C1")]
public class SliderResult : MonoBehaviour
{
	[Token(Token = "0x20000C2")]
	public enum RotateAxis
	{
		[Token(Token = "0x400046A")]
		X,
		[Token(Token = "0x400046B")]
		Y,
		[Token(Token = "0x400046C")]
		Z
	}

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color From;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color To;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Renderer Result;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public SliderData Slider;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject rotateObject;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RotateAxis rotateAxis;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Range(0f, 180f)]
	public float incrimentsR;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float rotateTime;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 rAxis;

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xD1DEDC", Offset = "0xD1DEDC", VA = "0xD1DEDC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xD1DFB0", Offset = "0xD1DFB0", VA = "0xD1DFB0")]
	public void SliderChange()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xD1E098", Offset = "0xD1E098", VA = "0xD1E098")]
	private Vector3 SnappyReturnFloat(Vector3 value, float increment)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xD1E248", Offset = "0xD1E248", VA = "0xD1E248")]
	public SliderResult()
	{
	}
}
[Token(Token = "0x20000C3")]
public class VRGrabFX : MonoBehaviour
{
	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VRGrabObjectOLD myGrab;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Grabbing Haptics")]
	[Header("Grabbing Audio")]
	public bool hasHaptics;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 255f)]
	public int intensity;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(25f, 3000f)]
	public int howLong;

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xD1E268", Offset = "0xD1E268", VA = "0xD1E268")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xD1E30C", Offset = "0xD1E30C", VA = "0xD1E30C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xD1E310", Offset = "0xD1E310", VA = "0xD1E310")]
	public void DropFX()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xD1E318", Offset = "0xD1E318", VA = "0xD1E318")]
	public void GrabFX()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xD1E314", Offset = "0xD1E314", VA = "0xD1E314")]
	public void PlayHaptics()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xD1E31C", Offset = "0xD1E31C", VA = "0xD1E31C")]
	public VRGrabFX()
	{
	}
}
[Token(Token = "0x20000C4")]
public class VRGrabObjectOLD : MonoBehaviour
{
	[Token(Token = "0x20000C5")]
	public delegate void Grabbed();

	[Token(Token = "0x20000C6")]
	public delegate void Dropped();

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("ItemID used for Detecting it's Name")]
	public string itemID;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRSimpleGrabSystemOLD.eGrabFilter grabFilter;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Will snap object to hand.")]
	[Header("-General Settings-")]
	public bool teleportToHand;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[Tooltip("When grabbed and dropped, the object will no longer respond to outside forces except for grabbing.")]
	public bool alwaysKinematic;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Distance at will be dropped.")]
	public float breakDistance;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Foldout("AdvancedSettings")]
	[Tooltip("Can continue holding without holding the grab button. Press grab button again to release")]
	public bool isSticky;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	[Foldout("AdvancedSettings")]
	[Tooltip("Object collider becomes a trigger while in grab.")]
	private bool isTriggerWhileGrabbed;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	[Tooltip("Object cannot be Grabbed.")]
	[Foldout("AdvancedSettings")]
	public bool isLocked;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	[Foldout("AdvancedSettings")]
	public bool shakeTween;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Foldout("AdvancedSettings")]
	[Tooltip("Determines what the item is scaled when added to a pocket.")]
	public float scaleMultiplier;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Foldout("AdvancedSettings")]
	public bool scaleOnGrab;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[Foldout("AdvancedSettings")]
	public bool restoreScaleOnDrop;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	[Header("-Hand Parenting-")]
	public bool parentHand;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Will parent to object if nothing is selected.")]
	[ShowIf("parentHand")]
	public Transform parentToLocation;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("parentHand")]
	[Tooltip("Snap hand to location.")]
	public bool zeroTransform;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[Header("-Tool Settings-")]
	[Tooltip("Object gets set to a specific location and orientation when held. Does not apply to handles or object grabbed at range.")]
	public bool isTool;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[ShowIf("isTool")]
	[Tooltip("Set tool rotation offset in grip.")]
	public Vector3 rotationOverride;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ShowIf("isTool")]
	[Tooltip("Rotate 180 degrees on y-axis in when held in left hand. Useful with things that need a correct facing direction, like a shovel")]
	public bool flipInLeftHand;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[ShowIf("isTool")]
	[Tooltip("Set tool position offset in grip.")]
	public Vector3 positionOverride;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[DisableIf("usePhysicsGrab")]
	[Header("-Physics Settings-")]
	[Tooltip("Handles are used to move Physics Objects, and will not move one to one with the hand.")]
	public bool isHandle;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[ShowIf("isHandle")]
	[Tooltip("Physics Object that the handle is connected to and controls the movement of.")]
	public Rigidbody attachedTo;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("-Throw Settings-")]
	[Range(0.5f, 2.5f)]
	[Tooltip("Adjusts the force of the throw.")]
	private float throwForceMultiplier;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int sampleCount;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Tween theTween;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform whoHasMe;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<Vector3> positions;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Foldout("ReadOnly")]
	[ReadOnly]
	public bool isSelected;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	[ReadOnly]
	[Foldout("ReadOnly")]
	public bool isGrabbed;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[ReadOnly]
	[Foldout("ReadOnly")]
	public VRSimpleGrabSystemOLD grabScript;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Foldout("ReadOnly")]
	[ReadOnly]
	public Rigidbody yourBody;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 yourScale;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private bool wasTrigger;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
	[Tooltip("This is for the Physics grab system for grabbing only use if nesscary")]
	[DisableIf("isHandle")]
	public bool usePhysicsGrab;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private ConfigurableJoint connectedJoint;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private List<Transform> heldByGrabbers;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[ShowIf("usePhysicsGrab")]
	public bool ParentToHands;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 _grabPositionOffset;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[ShowIf("usePhysicsGrab")]
	public float CollisionSpring;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[ShowIf("usePhysicsGrab")]
	public float CollisionSlerp;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[HorizontalLine(2f, EColor.Gray)]
	private List<Collider> collisions;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[Header("-Events-")]
	public bool showEvents;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[ShowIf("showEvents")]
	public UnityEvent grabEvent;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[ShowIf("showEvents")]
	public UnityEvent dropEvent;

	[Token(Token = "0x14000001")]
	public event Grabbed GrabE
	{
		[Token(Token = "0x60003EA")]
		[Address(RVA = "0xD1E338", Offset = "0xD1E338", VA = "0xD1E338")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003EB")]
		[Address(RVA = "0xD1E3D4", Offset = "0xD1E3D4", VA = "0xD1E3D4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event Dropped DropE
	{
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0xD1E470", Offset = "0xD1E470", VA = "0xD1E470")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003ED")]
		[Address(RVA = "0xD1E50C", Offset = "0xD1E50C", VA = "0xD1E50C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xD1E5A8", Offset = "0xD1E5A8", VA = "0xD1E5A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xD1E770", Offset = "0xD1E770", VA = "0xD1E770")]
	public void ShakeIt()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xD1E820", Offset = "0xD1E820", VA = "0xD1E820")]
	private void GrabbingAltFunction()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xD1EB94", Offset = "0xD1EB94", VA = "0xD1EB94")]
	private void DroppingAltFunction()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xD1EA0C", Offset = "0xD1EA0C", VA = "0xD1EA0C")]
	public void AdjustScale(bool restore)
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xD1EBE4", Offset = "0xD1EBE4", VA = "0xD1EBE4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xD1EC2C", Offset = "0xD1EC2C", VA = "0xD1EC2C")]
	private void SoftAttachMove()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xD1EE94", Offset = "0xD1EE94", VA = "0xD1EE94")]
	private void TrackVelocity()
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xD1E870", Offset = "0xD1E870", VA = "0xD1E870")]
	public void HandParenting(bool doParent)
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xD1F4A0", Offset = "0xD1F4A0", VA = "0xD1F4A0")]
	public void PickUp(Transform chg)
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xD1F684", Offset = "0xD1F684", VA = "0xD1F684")]
	private void Throw()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xD1F688", Offset = "0xD1F688", VA = "0xD1F688")]
	public void AddForce()
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xD1F2D0", Offset = "0xD1F2D0", VA = "0xD1F2D0")]
	public void InstantDrop()
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xD1F8E4", Offset = "0xD1F8E4", VA = "0xD1F8E4")]
	public void Drop()
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xD1F770", Offset = "0xD1F770", VA = "0xD1F770")]
	public Vector3 GetWorldVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xD1FAB4", Offset = "0xD1FAB4", VA = "0xD1FAB4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xD1FB10", Offset = "0xD1FB10", VA = "0xD1FB10")]
	private void PhyStart()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xD1EFA0", Offset = "0xD1EFA0", VA = "0xD1EFA0")]
	private void PhyFixedUpdate()
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xD1FFE4", Offset = "0xD1FFE4", VA = "0xD1FFE4", Slot = "4")]
	public virtual void PhyDropItem(Transform droppedBy)
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xD1FCE8", Offset = "0xD1FCE8", VA = "0xD1FCE8")]
	private void updateJoints(Transform g)
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xD201D8", Offset = "0xD201D8", VA = "0xD201D8", Slot = "5")]
	public virtual void PhysicsPickUp(Transform grabbedBy)
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xD204C4", Offset = "0xD204C4", VA = "0xD204C4")]
	private void SetupConfigJointSnap(Transform g)
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xD20308", Offset = "0xD20308", VA = "0xD20308")]
	public void ResetGrabbing()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xD20074", Offset = "0xD20074", VA = "0xD20074")]
	private void removeConfigJoint()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xD20384", Offset = "0xD20384", VA = "0xD20384")]
	private void addGrabber(Transform g)
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xD20148", Offset = "0xD20148", VA = "0xD20148")]
	private void removeGrabber(Transform g)
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xD1FB14", Offset = "0xD1FB14", VA = "0xD1FB14")]
	private void filterCollisions()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xD205D8", Offset = "0xD205D8", VA = "0xD205D8")]
	public VRGrabObjectOLD()
	{
	}
}
[Token(Token = "0x20000C7")]
public class VRGrabThrowPocket : MonoBehaviour
{
	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Settings-")]
	public bool isOneShot;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("Only accept item that matches the seach ID or correct object.")]
	public bool onlyTakeMatchingObject;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideIf("useMultiID")]
	[Tooltip("The ID Name for items able to be placed in this pocket.")]
	public string searchID;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useMultiID;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("useMultiID")]
	public string[] searchList;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("-Key Object Settings-")]
	[Tooltip("If this object is a specific item, like a key for a door, add that item here for comparison.")]
	public VRGrabObjectOLD correctObject;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Events to happen when the correct item is placed (such as opening a door).")]
	public UnityEvent myEvent;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Events to happen if item is removed.")]
	public UnityEvent lostEvent;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Grabs and parents the object to the pocket.")]
	public bool pickupObject;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	[Tooltip("Takes The Object Instantly")]
	public bool forceTake;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	[Tooltip("If the object should not be able to be removed after being placed.")]
	public bool lockObject;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	public bool killObject;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool killRigidbody;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	[Tooltip("If the object should be centered on the pocket when placed.")]
	public bool centerObject;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	[Tooltip("If the object should be rotated when placed.")]
	public bool snapToRotation;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
	[Tooltip("Object can be scaled")]
	public bool scaleObject;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Swapping")]
	[Tooltip("This will override all other object settings and swap the object on connect.")]
	public bool swapObject;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("Object that will be swapped to.")]
	public GameObject swapTo;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("-Visible for Debugging-")]
	public VRGrabObjectOLD slottedObject;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public VRGrabObjectOLD grabbedObject;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool hasObject;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public VRPocketPuzzle myPuzzle;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public bool correctObjectSlotted;

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xD20918", Offset = "0xD20918", VA = "0xD20918")]
	private void Start()
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xD20A9C", Offset = "0xD20A9C", VA = "0xD20A9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xD20B30", Offset = "0xD20B30", VA = "0xD20B30")]
	private void LoseObject()
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xD20E10", Offset = "0xD20E10", VA = "0xD20E10")]
	private void DestroyPocketedObject()
	{
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xD20CC0", Offset = "0xD20CC0", VA = "0xD20CC0")]
	private void GainObject()
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xD211D0", Offset = "0xD211D0", VA = "0xD211D0")]
	public bool isCorrectSearchID(string chg)
	{
		return default(bool);
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xD20EBC", Offset = "0xD20EBC", VA = "0xD20EBC")]
	private void TakeObject()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xD2136C", Offset = "0xD2136C", VA = "0xD2136C")]
	public void ForceSlotObject(VRGrabObjectOLD myObject)
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xD21264", Offset = "0xD21264", VA = "0xD21264")]
	public void CorrectObjectFound()
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xD212E4", Offset = "0xD212E4", VA = "0xD212E4")]
	public void IncorrectObjectFound()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xD21430", Offset = "0xD21430", VA = "0xD21430")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xD21538", Offset = "0xD21538", VA = "0xD21538")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xD21650", Offset = "0xD21650", VA = "0xD21650")]
	public VRGrabThrowPocket()
	{
	}
}
[Token(Token = "0x20000C8")]
public class VRPlayerRigOLD : MonoBehaviour
{
	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool isMainPlayer;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("-Rig Objects-")]
	public Camera headCamera;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Space]
	public VRMovementOculus movementSystem;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	public VRSimpleGrabSystemOLD leftGrab;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VRSimpleGrabSystemOLD rightGrab;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Space]
	public Transform leftHandTarget;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform rightHandTarget;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Space]
	[Space]
	public GameObject headVisual;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Space]
	[Tooltip("Rig Must be off On start with Multiplayer")]
	public OVRCameraRig oculusRig;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool offlineOnly;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VRUISystem myUI;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VRPlayerRigOLD currentMainPlayer;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("-Vault Specific-")]
	public GameObject hudCanvas;

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xD216A8", Offset = "0xD216A8", VA = "0xD216A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xD2172C", Offset = "0xD2172C", VA = "0xD2172C")]
	public static void Recenter()
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xD216AC", Offset = "0xD216AC", VA = "0xD216AC")]
	public void OfflineStart()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xD21960", Offset = "0xD21960", VA = "0xD21960")]
	public static void SetMainPlayer(VRPlayerRigOLD chg)
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xD219B8", Offset = "0xD219B8", VA = "0xD219B8")]
	public static VRPlayerRigOLD ReturnPlayer()
	{
		return null;
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xD217C0", Offset = "0xD217C0", VA = "0xD217C0")]
	public void PrepareRig()
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xD21B40", Offset = "0xD21B40", VA = "0xD21B40")]
	public VRPlayerRigOLD()
	{
	}
}
[Token(Token = "0x20000C9")]
public class VRPocketPuzzle : MonoBehaviour
{
	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRGrabThrowPocket[] myPockets;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isOrdered;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int curindex;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent correctEvent;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent wrongEvent;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent completedEvent;

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xD21B48", Offset = "0xD21B48", VA = "0xD21B48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xD21C1C", Offset = "0xD21C1C", VA = "0xD21C1C")]
	public bool CheckForDoneNess()
	{
		return default(bool);
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xD21374", Offset = "0xD21374", VA = "0xD21374")]
	public void CorrectPiece()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xD21414", Offset = "0xD21414", VA = "0xD21414")]
	public void IncorrectPiece()
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xD21C84", Offset = "0xD21C84", VA = "0xD21C84")]
	public VRPocketPuzzle()
	{
	}
}
[Token(Token = "0x20000CA")]
public class VRSimpleGrabSystemOLD : MonoBehaviour
{
	[Token(Token = "0x20000CB")]
	public enum eGrabFilter
	{
		[Token(Token = "0x40004E2")]
		none,
		[Token(Token = "0x40004E3")]
		spirit,
		[Token(Token = "0x40004E4")]
		golem
	}

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool hideInGrab;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public eGrabFilter grabFilter;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer[] objectsToHide;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Allow grabbing at a distance.")]
	[Header("-Ranged Grab Settings-")]
	public bool useRanged;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Will snap all objects to this object's position.")]
	public Transform handvisualTransform;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform handTransformOld;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool alwaysTeleportToHand;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[ShowIf("useRanged")]
	[Tooltip("Allow interactive handles to be grabbed at a distance.")]
	public bool rangedOnHandles;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[ShowIf("useRanged")]
	[Tooltip("Distance things can be grabbed at.")]
	public float grabDistance;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("useRanged")]
	[Tooltip("Object to use as a guide for ranged grabbing (leave blank for none). Shows the direction of the ranged grab ray.")]
	[Header("-Optional Hookups for Ranged Grab-")]
	public GameObject grabTrackingVisual;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ShowIf("useRanged")]
	[Tooltip("Object to use as a guide for ranged grabbing (leave blank for none). Shows the currently selected object by placing this object at the hit point.")]
	public GameObject pickVisual;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public bool isLeft;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject rangedGrabPoint;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isStuck;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	[Header("-Oculus Settings-")]
	public OVRInput.Controller myController;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private OVRInput.Button GrabButton;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Header("-Visible for Debugging-")]
	public bool showDebugs;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	[ShowIf("showDebugs")]
	[Tooltip("Is the system currently grabbing something.")]
	public bool inGrab;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[ShowIf("showDebugs")]
	[Tooltip("What does the system currently have selected to be able to grab.")]
	public VRGrabObjectOLD pickedObject;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform grabTransform;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[ShowIf("showDebugs")]
	[Tooltip("What does the system currently have grabbed.")]
	public VRGrabObjectOLD grabObject;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool inGrabRange;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Ray ray;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector3 lastPos;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 vel;

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xD21C8C", Offset = "0xD21C8C", VA = "0xD21C8C")]
	private void Start()
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xD21E6C", Offset = "0xD21E6C", VA = "0xD21E6C")]
	private void UsingOVRTouch()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xD222A4", Offset = "0xD222A4", VA = "0xD222A4", Slot = "4")]
	public virtual bool GetUp()
	{
		return default(bool);
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xD22304", Offset = "0xD22304", VA = "0xD22304", Slot = "5")]
	public virtual bool GetDown()
	{
		return default(bool);
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xD22364", Offset = "0xD22364", VA = "0xD22364", Slot = "6")]
	public virtual bool Get()
	{
		return default(bool);
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xD223C4", Offset = "0xD223C4", VA = "0xD223C4")]
	public void AutoGrab(VRGrabObjectOLD theObject)
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xD223E0", Offset = "0xD223E0", VA = "0xD223E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xD22840", Offset = "0xD22840", VA = "0xD22840")]
	private void OnTriggerStay(Collider col)
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xD22AD0", Offset = "0xD22AD0", VA = "0xD22AD0")]
	private void OnTriggerExit(Collider col)
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xD1F890", Offset = "0xD1F890", VA = "0xD1F890")]
	public void DropImmediate()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xD21ECC", Offset = "0xD21ECC", VA = "0xD21ECC")]
	public void Drop()
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xD22C40", Offset = "0xD22C40", VA = "0xD22C40")]
	private void DelayNulls()
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xD22A0C", Offset = "0xD22A0C", VA = "0xD22A0C")]
	public bool CheckFilter(eGrabFilter myObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xD21F90", Offset = "0xD21F90", VA = "0xD21F90")]
	public void Grab()
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xD224B4", Offset = "0xD224B4", VA = "0xD224B4")]
	private void RangeGrab()
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xD22D00", Offset = "0xD22D00", VA = "0xD22D00")]
	public void PickVisualShow(Vector3 where)
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xD21D64", Offset = "0xD21D64", VA = "0xD21D64")]
	public void PickVisualHide()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xD21DE8", Offset = "0xD21DE8", VA = "0xD21DE8")]
	public void TrackingVisualHide()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xD22C7C", Offset = "0xD22C7C", VA = "0xD22C7C")]
	public void TrackingVisualShow()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xD22DD0", Offset = "0xD22DD0", VA = "0xD22DD0")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xD22BD0", Offset = "0xD22BD0", VA = "0xD22BD0")]
	public void ToggleHideInGrab(bool visual, bool forceHide = false)
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xD22DF4", Offset = "0xD22DF4", VA = "0xD22DF4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xD22A4C", Offset = "0xD22A4C", VA = "0xD22A4C")]
	private void ObjectIsSelected(bool toOn)
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xD22EFC", Offset = "0xD22EFC", VA = "0xD22EFC")]
	public VRSimpleGrabSystemOLD()
	{
	}
}
[Token(Token = "0x20000CC")]
public class ContextBlockTrigger : MonoBehaviour
{
	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isBlocked;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ElementalSocket lastPullable;

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xD22F10", Offset = "0xD22F10", VA = "0xD22F10")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xD22F90", Offset = "0xD22F90", VA = "0xD22F90")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xD2305C", Offset = "0xD2305C", VA = "0xD2305C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xD230F4", Offset = "0xD230F4", VA = "0xD230F4")]
	public ContextBlockTrigger()
	{
	}
}
[Token(Token = "0x20000CD")]
public class VRMovementOculus : MonoBehaviour
{
	[Token(Token = "0x20000CE")]
	public enum eControllerType
	{
		[Token(Token = "0x4000507")]
		Left,
		[Token(Token = "0x4000508")]
		Right,
		[Token(Token = "0x4000509")]
		Both
	}

	[Token(Token = "0x20000CF")]
	public enum eHMD
	{
		[Token(Token = "0x400050B")]
		Rift
	}

	[Token(Token = "0x20000D0")]
	public enum eMovementMode
	{
		[Token(Token = "0x400050D")]
		Flight,
		[Token(Token = "0x400050E")]
		Grounded,
		[Token(Token = "0x400050F")]
		None,
		[Token(Token = "0x4000510")]
		NoneWithGravity
	}

	[Token(Token = "0x20000D1")]
	public struct InputData
	{
		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool pressed;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform selectedController;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isLeft;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isRight;
	}

	[Token(Token = "0x20000D2")]
	[CompilerGenerated]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRMovementOculus <>4__this;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000465")]
			[Address(RVA = "0xD24690", Offset = "0xD24690", VA = "0xD24690", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000467")]
			[Address(RVA = "0xD246D8", Offset = "0xD246D8", VA = "0xD246D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0xD23170", Offset = "0xD23170", VA = "0xD23170")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0xD24424", Offset = "0xD24424", VA = "0xD24424", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0xD24428", Offset = "0xD24428", VA = "0xD24428", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0xD24698", Offset = "0xD24698", VA = "0xD24698", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Oculus Settings-")]
	[HideInInspector]
	public eHMD oculusType;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public OVRInput.Controller defaultLeft;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public OVRInput.Controller defaultRight;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("-Movement Control Settings-")]
	public eControllerType ControlsOn;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRInput.Button ForwardButton;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public OVRInput.Button BackwardButton;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("-Movement Modes-")]
	public bool canMove;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public eMovementMode MovementMode;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("-General Settings-")]
	[HideInInspector]
	public bool headIsForward;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float moveSpeed;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float PlayerGravity;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Range(1f, 10f)]
	[HideInInspector]
	public float basicAcceleration;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[Header("-Fade Settings-")]
	public float fadeTime;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool accelSpeed;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float decay;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Header("Recenter Options")]
	public bool recenterOnStart;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool stickClickRecenter;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float acc;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("-Contact Block-")]
	[Header("-Hookups-")]
	public CharacterController yourRig;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool AutoAssignTheRest;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform headRig;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform leftController;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform rightController;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public OVRScreenFade myFade;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float curSpeed;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool gravityOverRide;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	[HideInInspector]
	public bool mainMovementOverRide;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform selectedController;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float originalSpeed;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float controlLossTime;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 moveDirection;

	[Token(Token = "0x17000032")]
	public Vector3 MoveDirection
	{
		[Token(Token = "0x600044E")]
		[Address(RVA = "0xD23444", Offset = "0xD23444", VA = "0xD23444")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xD230FC", Offset = "0xD230FC", VA = "0xD230FC")]
	[IteratorStateMachine(typeof(<Start>d__33))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xD23198", Offset = "0xD23198", VA = "0xD23198")]
	public float GetHeight()
	{
		return default(float);
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xD23204", Offset = "0xD23204", VA = "0xD23204")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xD2322C", Offset = "0xD2322C", VA = "0xD2322C")]
	public void SlowBy(float percent)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xD23218", Offset = "0xD23218", VA = "0xD23218")]
	public void RestoreSpeed()
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xD2323C", Offset = "0xD2323C", VA = "0xD2323C")]
	private void Update()
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xD233B0", Offset = "0xD233B0", VA = "0xD233B0")]
	public static void RecenterPose()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xD23450", Offset = "0xD23450", VA = "0xD23450")]
	public void AddMoveDirection(Vector3 chg)
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xD2347C", Offset = "0xD2347C", VA = "0xD2347C")]
	public void ControlLoss(float time, Vector3 chg)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xD232F0", Offset = "0xD232F0", VA = "0xD232F0")]
	public void DoMovement()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xD234A0", Offset = "0xD234A0", VA = "0xD234A0")]
	public void ApplyGravity()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xD23598", Offset = "0xD23598", VA = "0xD23598")]
	public void MovePlayerSafely(Transform where, bool doRotation = true)
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xD23650", Offset = "0xD23650", VA = "0xD23650")]
	public void _MovePlayerSafely(Transform where)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xD236F8", Offset = "0xD236F8", VA = "0xD236F8")]
	public void MovePlayerSafely(Vector3 pos)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xD23774", Offset = "0xD23774", VA = "0xD23774")]
	public void RotatePlayerSafely(Quaternion rot)
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xD237F8", Offset = "0xD237F8", VA = "0xD237F8")]
	public void RotatePlayerSafely(Vector3 euler)
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xD23874", Offset = "0xD23874", VA = "0xD23874")]
	public void MovePlayerSafely(Vector3 pos, Quaternion rot)
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xD2393C", Offset = "0xD2393C", VA = "0xD2393C")]
	public void MovePlayerSafely(Vector3 pos, Vector3 euler)
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xD239F4", Offset = "0xD239F4", VA = "0xD239F4")]
	public float GetGravity()
	{
		return default(float);
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xD23A24", Offset = "0xD23A24", VA = "0xD23A24")]
	private void MoveInputSystem()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xD23DD4", Offset = "0xD23DD4", VA = "0xD23DD4")]
	public void AdvancedMove(Transform thisController, float speed)
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xD23CE4", Offset = "0xD23CE4", VA = "0xD23CE4")]
	private float GetAxisFromButton(OVRInput.Button theButton, OVRInput.Controller theController, bool isPositive = true)
	{
		return default(float);
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xD23EF0", Offset = "0xD23EF0", VA = "0xD23EF0")]
	public InputData InputReturnGet(OVRInput.Button myButton)
	{
		return default(InputData);
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xD24094", Offset = "0xD24094", VA = "0xD24094")]
	public InputData InputReturnDown(OVRInput.Button myButton)
	{
		return default(InputData);
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xD24238", Offset = "0xD24238", VA = "0xD24238")]
	public InputData InputReturnUp(OVRInput.Button myButton)
	{
		return default(InputData);
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xD243DC", Offset = "0xD243DC", VA = "0xD243DC")]
	public VRMovementOculus()
	{
	}
}
[Token(Token = "0x20000D3")]
[RequireComponent(typeof(LineRenderer))]
public class LineArcSystem : MonoBehaviour
{
	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineRenderer myLine;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3[] thePoints;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 curveOffset;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 50f)]
	public float smoothness;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 1f)]
	public float AppogeePoint;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 1f)]
	public float Alpha;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Renderer cachedRenderer;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("-Test Mode-")]
	public bool TestMode;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LineStart;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform LineEnd;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Color TestColor;

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xD246E0", Offset = "0xD246E0", VA = "0xD246E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xD24788", Offset = "0xD24788", VA = "0xD24788")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xD249B8", Offset = "0xD249B8", VA = "0xD249B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xD24A50", Offset = "0xD24A50", VA = "0xD24A50")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xD24820", Offset = "0xD24820", VA = "0xD24820")]
	public void CreateLine(Vector3 start, Vector3 end, Color yourColor)
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xD24DFC", Offset = "0xD24DFC", VA = "0xD24DFC")]
	public void SetColor(Color chg)
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xD24A54", Offset = "0xD24A54", VA = "0xD24A54")]
	public void HideLine()
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xD24A74", Offset = "0xD24A74", VA = "0xD24A74")]
	public Vector3 LerpByDistance(Vector3 start, Vector3 end, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xD24A9C", Offset = "0xD24A9C", VA = "0xD24A9C")]
	public static Vector3[] MakeSmoothCurve(Vector3[] arrayToCurve, float smoothness)
	{
		return null;
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xD24EEC", Offset = "0xD24EEC", VA = "0xD24EEC")]
	public LineArcSystem()
	{
	}
}
[Token(Token = "0x20000D4")]
public class VRFadeScript : MonoBehaviour
{
	[Token(Token = "0x20000D5")]
	[CompilerGenerated]
	private sealed class <FadeIn>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRFadeScript <>4__this;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Color <color>5__3;

		[Token(Token = "0x17000035")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000481")]
			[Address(RVA = "0xD2552C", Offset = "0xD2552C", VA = "0xD2552C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000483")]
			[Address(RVA = "0xD25574", Offset = "0xD25574", VA = "0xD25574", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0xD250B4", Offset = "0xD250B4", VA = "0xD250B4")]
		[DebuggerHidden]
		public <FadeIn>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0xD25420", Offset = "0xD25420", VA = "0xD25420", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0xD25424", Offset = "0xD25424", VA = "0xD25424", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0xD25534", Offset = "0xD25534", VA = "0xD25534", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D6")]
	[CompilerGenerated]
	private sealed class <FadeIn>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRFadeScript <>4__this;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color <color>5__3;

		[Token(Token = "0x17000037")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000487")]
			[Address(RVA = "0xD25684", Offset = "0xD25684", VA = "0xD25684", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000489")]
			[Address(RVA = "0xD256CC", Offset = "0xD256CC", VA = "0xD256CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0xD25160", Offset = "0xD25160", VA = "0xD25160")]
		[DebuggerHidden]
		public <FadeIn>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0xD2557C", Offset = "0xD2557C", VA = "0xD2557C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0xD25580", Offset = "0xD25580", VA = "0xD25580", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0xD2568C", Offset = "0xD2568C", VA = "0xD2568C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D7")]
	[CompilerGenerated]
	private sealed class <FadeOut>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRFadeScript <>4__this;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color <color>5__3;

		[Token(Token = "0x17000039")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600048D")]
			[Address(RVA = "0xD25804", Offset = "0xD25804", VA = "0xD25804", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600048F")]
			[Address(RVA = "0xD2584C", Offset = "0xD2584C", VA = "0xD2584C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0xD2520C", Offset = "0xD2520C", VA = "0xD2520C")]
		[DebuggerHidden]
		public <FadeOut>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0xD256D4", Offset = "0xD256D4", VA = "0xD256D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0xD256D8", Offset = "0xD256D8", VA = "0xD256D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0xD2580C", Offset = "0xD2580C", VA = "0xD2580C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fadeTime;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color fadeColor;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material fadeMaterial;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isFading;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private YieldInstruction fadeInstruction;

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xD24EF4", Offset = "0xD24EF4", VA = "0xD24EF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xD24F90", Offset = "0xD24F90", VA = "0xD24F90")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xD25024", Offset = "0xD25024", VA = "0xD25024")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xD24FB0", Offset = "0xD24FB0", VA = "0xD24FB0")]
	[IteratorStateMachine(typeof(<FadeIn>d__8))]
	private IEnumerator FadeIn()
	{
		return null;
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xD250DC", Offset = "0xD250DC", VA = "0xD250DC")]
	[IteratorStateMachine(typeof(<FadeIn>d__9))]
	private IEnumerator FadeIn(float time)
	{
		return null;
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xD25188", Offset = "0xD25188", VA = "0xD25188")]
	[IteratorStateMachine(typeof(<FadeOut>d__10))]
	private IEnumerator FadeOut(float time)
	{
		return null;
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xD25234", Offset = "0xD25234", VA = "0xD25234")]
	public void StartFadeIn()
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xD25258", Offset = "0xD25258", VA = "0xD25258")]
	public void StartFadeIn(float time)
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xD25278", Offset = "0xD25278", VA = "0xD25278")]
	public void StartFadeOut()
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xD2529C", Offset = "0xD2529C", VA = "0xD2529C")]
	public void StartFadeOut(float time)
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xD252BC", Offset = "0xD252BC", VA = "0xD252BC")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xD25398", Offset = "0xD25398", VA = "0xD25398")]
	public VRFadeScript()
	{
	}
}
[Token(Token = "0x20000D8")]
public class KnockBackModule : MonoBehaviour
{
	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform testObject;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float KTime;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tDuration;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float tPower;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 directionArea;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CharacterController tController;

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xD25854", Offset = "0xD25854", VA = "0xD25854")]
	private void Update()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xD259CC", Offset = "0xD259CC", VA = "0xD259CC")]
	private void KnockBackFoward(float time)
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xD258E8", Offset = "0xD258E8", VA = "0xD258E8")]
	private void KnockBackDirection(float time)
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xD25A7C", Offset = "0xD25A7C", VA = "0xD25A7C")]
	private void KnockBackFoward()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xD25B30", Offset = "0xD25B30", VA = "0xD25B30")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xD25CB0", Offset = "0xD25CB0", VA = "0xD25CB0")]
	private void KnockBackSystem(Vector3 direction, float duration)
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xD25CBC", Offset = "0xD25CBC", VA = "0xD25CBC")]
	public KnockBackModule()
	{
	}
}
[Token(Token = "0x20000D9")]
public class MasterMovingPlatforms : MonoBehaviour
{
	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-HookUp-")]
	public Transform[] movePoints;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Tween myTween;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Ease easeType;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Header("Settings")]
	public float delay;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float time;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("-Toggles-")]
	public bool gotoAndStop;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool isPaused;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform whereToGo;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int curIndex;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool canMove;

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xD25CCC", Offset = "0xD25CCC", VA = "0xD25CCC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xD25D20", Offset = "0xD25D20", VA = "0xD25D20")]
	private void MoveTo()
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xD25E30", Offset = "0xD25E30", VA = "0xD25E30")]
	private void PlatformPause()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xD25ED8", Offset = "0xD25ED8", VA = "0xD25ED8")]
	private void UnPausePlatform()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xD25EE4", Offset = "0xD25EE4", VA = "0xD25EE4")]
	public void StartPlatform()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xD25EF4", Offset = "0xD25EF4", VA = "0xD25EF4")]
	private void GotoPoint(int where)
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xD25F34", Offset = "0xD25F34", VA = "0xD25F34")]
	private void GotoPointTrans(Transform where)
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xD25F5C", Offset = "0xD25F5C", VA = "0xD25F5C")]
	public MasterMovingPlatforms()
	{
	}
}
[Token(Token = "0x20000DA")]
public class MovingPlatformModule : MonoBehaviour
{
	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("AntiBumpSettings")]
	public bool antiBump;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(-0.001f, -0.075f)]
	public float antiBumpAmount;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("MovingPlatformSettings")]
	public bool enableMovingPlatforms;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CharacterController controller;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform activePlatform;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 activeLocalPlatformPoint;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 activeGlobalPlatformPoint;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 lastPlatformVelocity;

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xD25F6C", Offset = "0xD25F6C", VA = "0xD25F6C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xD25FC4", Offset = "0xD25FC4", VA = "0xD25FC4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xD260A0", Offset = "0xD260A0", VA = "0xD260A0")]
	private void MovingPlatforms()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xD26294", Offset = "0xD26294", VA = "0xD26294")]
	private void OnControllerColliderHit(ControllerColliderHit hit)
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xD26350", Offset = "0xD26350", VA = "0xD26350")]
	public MovingPlatformModule()
	{
	}
}
[Token(Token = "0x20000DB")]
public class VROculusRotate : MonoBehaviour
{
	[Token(Token = "0x20000DC")]
	public enum eRotationMode
	{
		[Token(Token = "0x4000563")]
		ButtonPointAndShoot,
		[Token(Token = "0x4000564")]
		QuickStick,
		[Token(Token = "0x4000565")]
		DoubleTapQuickStick,
		[Token(Token = "0x4000566")]
		SlowStick
	}

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool canRotate;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("-Handness-")]
	public VRMovementOculus.eControllerType RotateOnHand;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool copyHandFromMain;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool invertHand;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("-Rotate Modes-")]
	public eRotationMode RotationMode;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("-Rotate Settings-")]
	[Range(0f, 180f)]
	public float rotateDegrees;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float rotateTime;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float slowRotateSpeed;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float doubleTapTime;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private VRMovementOculus refSystem;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool doubleTapLeft;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool doubleTapRight;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float dTapTimeLeft;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float dTapTimeRight;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Header("CoolDown Time")]
	[HideInInspector]
	public float coolDownTime;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float quickTurnCoolDown;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float currentTime;

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xD26364", Offset = "0xD26364", VA = "0xD26364")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xD263BC", Offset = "0xD263BC", VA = "0xD263BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xD26680", Offset = "0xD26680", VA = "0xD26680")]
	private void TouchPadMove()
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xD26544", Offset = "0xD26544", VA = "0xD26544")]
	private void SlowStickRotate()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xD26474", Offset = "0xD26474", VA = "0xD26474")]
	private void QuickStickRotate()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xD267EC", Offset = "0xD267EC", VA = "0xD267EC")]
	private void QuickStickResolve(OVRInput.Controller selectedController)
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xD264E0", Offset = "0xD264E0", VA = "0xD264E0")]
	private void DoubleTapQuickStick()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xD268A8", Offset = "0xD268A8", VA = "0xD268A8")]
	private void DoubleTapResolve(OVRInput.Controller selectedController)
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xD269D8", Offset = "0xD269D8", VA = "0xD269D8")]
	private void PointAndShootRotation(Transform selectedController)
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xD267E8", Offset = "0xD267E8", VA = "0xD267E8")]
	public void RotateByDegrees(float degrees)
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xD26B64", Offset = "0xD26B64", VA = "0xD26B64")]
	private void RotateByDegrees2(float degrees)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xD26C9C", Offset = "0xD26C9C", VA = "0xD26C9C")]
	public VROculusRotate()
	{
	}
}
[Token(Token = "0x20000DD")]
[RequireComponent(typeof(VRMovementOculus))]
public class VROculusRubberBand : MonoBehaviour
{
	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xD26CCC", Offset = "0xD26CCC", VA = "0xD26CCC")]
	public VROculusRubberBand()
	{
	}
}
[Token(Token = "0x20000DE")]
[RequireComponent(typeof(VRMovementOculus))]
public class VROculusStrafe : MonoBehaviour
{
	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VRMovementOculus refSystem;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool useController;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool canSprint;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 10f)]
	public float sprintMulti;

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xD26CD4", Offset = "0xD26CD4", VA = "0xD26CD4")]
	private void Start()
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xD26DA8", Offset = "0xD26DA8", VA = "0xD26DA8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xD26E14", Offset = "0xD26E14", VA = "0xD26E14")]
	private void FPSMove(OVRInput.Controller pickedController)
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xD26FC8", Offset = "0xD26FC8", VA = "0xD26FC8")]
	public VROculusStrafe()
	{
	}
}
[Token(Token = "0x20000DF")]
public class VRPhyZone : MonoBehaviour
{
	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Base Settings-")]
	public float magnitude;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool knockback;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool pushPull;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ShowIf("knockback")]
	public float knockbackDuration;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("-Custom Directions-")]
	[Tooltip("Defaults to Z Value")]
	public bool customDirection;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ShowIf("customDirection")]
	[Required(null)]
	[HideIf("knockback")]
	public Transform directionObject;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("customDirection")]
	[HideIf("knockback")]
	public bool inverseDirection;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[Header("-Events-")]
	public bool showEvents;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ShowIf("showEvents")]
	public UnityEvent enterEvent;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("showEvents")]
	public UnityEvent exitEvent;

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xD26FD8", Offset = "0xD26FD8", VA = "0xD26FD8")]
	public void Awake()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xD27058", Offset = "0xD27058", VA = "0xD27058")]
	public void _ApplyForce()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xD2705C", Offset = "0xD2705C", VA = "0xD2705C")]
	public AutoMoveController ReturnPlayer()
	{
		return null;
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xD270C0", Offset = "0xD270C0", VA = "0xD270C0")]
	private Vector3 CalcuateDirection(AutoMoveController body)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xD272E0", Offset = "0xD272E0", VA = "0xD272E0")]
	private Vector3 KnockBackBase()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xD27350", Offset = "0xD27350", VA = "0xD27350")]
	private Vector3 KnockBackDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xD2742C", Offset = "0xD2742C", VA = "0xD2742C")]
	private Vector3 KnockBackCameraFoward()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xD2753C", Offset = "0xD2753C", VA = "0xD2753C")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xD27834", Offset = "0xD27834", VA = "0xD27834")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xD278B0", Offset = "0xD278B0", VA = "0xD278B0")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xD2791C", Offset = "0xD2791C", VA = "0xD2791C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xD27938", Offset = "0xD27938", VA = "0xD27938")]
	public VRPhyZone()
	{
	}
}
[Token(Token = "0x20000E0")]
public class AddSpeed : MonoBehaviour
{
	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fSpeed;

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xD27950", Offset = "0xD27950", VA = "0xD27950")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xD279F4", Offset = "0xD279F4", VA = "0xD279F4")]
	public AddSpeed()
	{
	}
}
[Token(Token = "0x20000E1")]
public class AreaDamage : MonoBehaviour
{
	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isPlayerDamager;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool damagesGolems;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool isEnemyDamager;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool isBossStunner;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float damage;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float cooldown;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<HealthSystem> targets;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<HealthSystem, float> _table;

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xD279FC", Offset = "0xD279FC", VA = "0xD279FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xD27AC8", Offset = "0xD27AC8", VA = "0xD27AC8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xD27CDC", Offset = "0xD27CDC", VA = "0xD27CDC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xD27E9C", Offset = "0xD27E9C", VA = "0xD27E9C")]
	private void AddTarget(HitBox target)
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xD2805C", Offset = "0xD2805C", VA = "0xD2805C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xD281A4", Offset = "0xD281A4", VA = "0xD281A4")]
	public AreaDamage()
	{
	}
}
[Token(Token = "0x20000E2")]
public class Barrier : MonoBehaviour
{
	[Token(Token = "0x20000E3")]
	[CompilerGenerated]
	private sealed class <BarrierDeactivate>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Barrier <>4__this;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <i>5__2;

		[Token(Token = "0x1700003B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004D4")]
			[Address(RVA = "0xD288F4", Offset = "0xD288F4", VA = "0xD288F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004D6")]
			[Address(RVA = "0xD2893C", Offset = "0xD2893C", VA = "0xD2893C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xD28774", Offset = "0xD28774", VA = "0xD28774")]
		[DebuggerHidden]
		public <BarrierDeactivate>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0xD287D0", Offset = "0xD287D0", VA = "0xD287D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xD287D4", Offset = "0xD287D4", VA = "0xD287D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0xD288FC", Offset = "0xD288FC", VA = "0xD288FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float curHealth;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxHealth;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material mat;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isOpaque;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool fadeInOnStart;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Tween theTween;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject deathEffect;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float startOpacity;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public float curOpacity;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public bool isBeingDestroyed;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[HideInInspector]
	public bool isHit;

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xD28288", Offset = "0xD28288", VA = "0xD28288")]
	private void Start()
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xD283C4", Offset = "0xD283C4", VA = "0xD283C4")]
	public void SetOpacity(float opacityIn)
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xD28450", Offset = "0xD28450", VA = "0xD28450")]
	private void TakeDamage(float dmg)
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xD2855C", Offset = "0xD2855C", VA = "0xD2855C")]
	public void DestructionSequence()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xD2867C", Offset = "0xD2867C", VA = "0xD2867C")]
	public void SimpleDeactivate()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xD28700", Offset = "0xD28700", VA = "0xD28700")]
	[IteratorStateMachine(typeof(<BarrierDeactivate>d__16))]
	private IEnumerator BarrierDeactivate()
	{
		return null;
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xD2879C", Offset = "0xD2879C", VA = "0xD2879C")]
	private void DisableBarrier()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xD287C0", Offset = "0xD287C0", VA = "0xD287C0")]
	public Barrier()
	{
	}
}
[Token(Token = "0x20000E4")]
public class BulletBase : MonoBehaviour
{
	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float damage;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float deathTime;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject Explosion;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float explosionMultiplier;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject bulletFizzle;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject muzzleEffect;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float muzzleEffectMultiplier;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[ReadOnly]
	public bool canMove;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ReadOnly]
	public Collider myCollider;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ReadOnly]
	public bool isPlayer;

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xD28944", Offset = "0xD28944", VA = "0xD28944")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xD289B4", Offset = "0xD289B4", VA = "0xD289B4", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xD289B8", Offset = "0xD289B8", VA = "0xD289B8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xD289C4", Offset = "0xD289C4", VA = "0xD289C4", Slot = "5")]
	public virtual void MoveBullet()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0xD28A70", Offset = "0xD28A70", VA = "0xD28A70")]
	private void PlayFizzle()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0xD28C30", Offset = "0xD28C30", VA = "0xD28C30", Slot = "6")]
	public virtual void LaunchBullet(float dmg)
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0xD28D48", Offset = "0xD28D48", VA = "0xD28D48")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0xD28FB0", Offset = "0xD28FB0", VA = "0xD28FB0", Slot = "7")]
	public virtual void Death(float deathTime = 0f)
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xD2915C", Offset = "0xD2915C", VA = "0xD2915C")]
	public BulletBase()
	{
	}
}
[Token(Token = "0x20000E5")]
public class EnemyBullet : BulletBase
{
	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xD2918C", Offset = "0xD2918C", VA = "0xD2918C", Slot = "4")]
	public override void Start()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xD291A0", Offset = "0xD291A0", VA = "0xD291A0")]
	public EnemyBullet()
	{
	}
}
[Token(Token = "0x20000E6")]
public class PlayerBullet : BulletBase
{
	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xD291D0", Offset = "0xD291D0", VA = "0xD291D0", Slot = "4")]
	public override void Start()
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xD291E0", Offset = "0xD291E0", VA = "0xD291E0")]
	public PlayerBullet()
	{
	}
}
[Token(Token = "0x20000E7")]
public class SimpleShooter : MonoBehaviour
{
	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool canShoot;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 fireRate;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float fireTime;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fireDistance;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool CheckForVisual;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject bullet;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float accuracy;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool leadShots;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool targetRigidBody;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float enableShotDelay;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool runDebugs;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool showGizmos;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	[ReadOnly]
	public bool targetOverride;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ReadOnly]
	public Transform target;

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xD29210", Offset = "0xD29210", VA = "0xD29210")]
	private void Start()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xD29248", Offset = "0xD29248", VA = "0xD29248")]
	private void GetNewTarget()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xD2934C", Offset = "0xD2934C", VA = "0xD2934C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xD293D0", Offset = "0xD293D0", VA = "0xD293D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xD293F4", Offset = "0xD293F4", VA = "0xD293F4")]
	public void TurnOnShooting()
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xD29400", Offset = "0xD29400", VA = "0xD29400")]
	private bool CheckVisual()
	{
		return default(bool);
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xD29644", Offset = "0xD29644", VA = "0xD29644", Slot = "4")]
	public virtual void ShootThings()
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xD297F0", Offset = "0xD297F0", VA = "0xD297F0", Slot = "5")]
	public virtual void Shoot()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xD29AC4", Offset = "0xD29AC4", VA = "0xD29AC4")]
	public Vector3 CalcuateLead()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xD29F6C", Offset = "0xD29F6C", VA = "0xD29F6C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xD29FAC", Offset = "0xD29FAC", VA = "0xD29FAC")]
	public SimpleShooter()
	{
	}
}
[Token(Token = "0x20000E8")]
public class VREnemy : MonoBehaviour
{
	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text myText;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Tween theTween;

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xD29FC8", Offset = "0xD29FC8", VA = "0xD29FC8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xD2A054", Offset = "0xD2A054", VA = "0xD2A054")]
	private void TakeDamage(float dmg)
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xD2A130", Offset = "0xD2A130", VA = "0xD2A130")]
	public VREnemy()
	{
	}
}
[Token(Token = "0x20000E9")]
public class VRMeleeWeapon : MonoBehaviour
{
	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isActive;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int sampleCount;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 DamageRange;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float[] DamageDistances;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Vector3> positions;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float distanceTraveled;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float curDamage;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool gotBlocked;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject blocker;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject hitExplosion;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public VRGrabObjectOLD grabObject;

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xD2A138", Offset = "0xD2A138", VA = "0xD2A138")]
	private void Start()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xD2A308", Offset = "0xD2A308", VA = "0xD2A308")]
	public void ColliderSolid()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xD2A370", Offset = "0xD2A370", VA = "0xD2A370")]
	public void ColliderTrigger()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xD2A3D8", Offset = "0xD2A3D8", VA = "0xD2A3D8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xD2A628", Offset = "0xD2A628", VA = "0xD2A628")]
	private void DistanceCheck()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xD2A51C", Offset = "0xD2A51C", VA = "0xD2A51C")]
	private void TrackVelocity()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xD2A6B8", Offset = "0xD2A6B8", VA = "0xD2A6B8")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xD2AA78", Offset = "0xD2AA78", VA = "0xD2AA78")]
	private void OnTriggerExit(Collider col)
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xD2A960", Offset = "0xD2A960", VA = "0xD2A960")]
	public void HitExplosion()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xD2AB34", Offset = "0xD2AB34", VA = "0xD2AB34")]
	public VRMeleeWeapon()
	{
	}
}
[Token(Token = "0x20000EA")]
public class FancyHeaderAttribute : PropertyAttribute
{
	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int count;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int depth;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string label;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string tooltip;

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xD2ABC4", Offset = "0xD2ABC4", VA = "0xD2ABC4")]
	public FancyHeaderAttribute(string label, int count = 0, int depth = 0)
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xD2AC08", Offset = "0xD2AC08", VA = "0xD2AC08")]
	public FancyHeaderAttribute(string label, string tooltip, int count = 0, int depth = 0)
	{
	}
}
[Token(Token = "0x20000EB")]
public static class ExtensionMethods
{
	[Token(Token = "0x20000ED")]
	[CompilerGenerated]
	private sealed class <ExecuteAfterTime>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action theDelegate;

		[Token(Token = "0x1700003D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000529")]
			[Address(RVA = "0xD2CA1C", Offset = "0xD2CA1C", VA = "0xD2CA1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600052B")]
			[Address(RVA = "0xD2CA64", Offset = "0xD2CA64", VA = "0xD2CA64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0xD2C8F0", Offset = "0xD2C8F0", VA = "0xD2C8F0")]
		[DebuggerHidden]
		public <ExecuteAfterTime>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0xD2C954", Offset = "0xD2C954", VA = "0xD2C954", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0xD2C958", Offset = "0xD2C958", VA = "0xD2C958", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0xD2CA24", Offset = "0xD2CA24", VA = "0xD2CA24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xD2AC60", Offset = "0xD2AC60", VA = "0xD2AC60")]
	public static Vector3 RandomInsideUnitShell(float min, float max)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xD2ACC0", Offset = "0xD2ACC0", VA = "0xD2ACC0")]
	public static string RandomString(int length, string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")
	{
		return null;
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xD2AE34", Offset = "0xD2AE34", VA = "0xD2AE34")]
	public static Quaternion AddRotEuler(this Quaternion quat, Vector3 rot)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xD2AEEC", Offset = "0xD2AEEC", VA = "0xD2AEEC")]
	public static Quaternion AddRotationQuat(this Quaternion quat, Quaternion rot)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xD2AF60", Offset = "0xD2AF60", VA = "0xD2AF60")]
	public static Quaternion DifferenceRotation(this Quaternion from, Quaternion to)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xD2B004", Offset = "0xD2B004", VA = "0xD2B004")]
	public static Vector3 DifferenceEularRotation(this Quaternion from, Quaternion to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xD2B07C", Offset = "0xD2B07C", VA = "0xD2B07C")]
	public static Ray ReturnSpotLightRay(this Light light)
	{
		return default(Ray);
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xD2B2AC", Offset = "0xD2B2AC", VA = "0xD2B2AC")]
	public static bool PointInOABBFromBox(this Collider box2, Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xD2B480", Offset = "0xD2B480", VA = "0xD2B480")]
	public static float Truncate(this float value, int digits)
	{
		return default(float);
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xD2B508", Offset = "0xD2B508", VA = "0xD2B508")]
	public static float RoundTo(this float value, int digits)
	{
		return default(float);
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xD2B5B0", Offset = "0xD2B5B0", VA = "0xD2B5B0")]
	public static int GetDifferentInt(this int lastInt, int max)
	{
		return default(int);
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xD2B5E4", Offset = "0xD2B5E4", VA = "0xD2B5E4")]
	public static string FloatToTimeConverterMinutes(this float time)
	{
		return null;
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xD2B6A8", Offset = "0xD2B6A8", VA = "0xD2B6A8")]
	public static string FloatToTimeConverterSeconds(this float time)
	{
		return null;
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xD2B770", Offset = "0xD2B770", VA = "0xD2B770")]
	public static float ReturnScalefromLight(this Light light, float distance)
	{
		return default(float);
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xD2B7B4", Offset = "0xD2B7B4", VA = "0xD2B7B4")]
	public static void ResetTransformation(this Transform trans)
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xD2B870", Offset = "0xD2B870", VA = "0xD2B870")]
	public static Vector3 GetDifferenceAngles(this Transform from, Transform compare)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xD2BBAC", Offset = "0xD2BBAC", VA = "0xD2BBAC")]
	public static Vector3 GetTorqueTo(this Rigidbody body, Quaternion torqueTo, float strength)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xD2BF98", Offset = "0xD2BF98", VA = "0xD2BF98")]
	public static float Randomize(this Vector2 v0)
	{
		return default(float);
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xD2BFA0", Offset = "0xD2BFA0", VA = "0xD2BFA0")]
	public static int RandomizeInt(this Vector2 v0)
	{
		return default(int);
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xD2C084", Offset = "0xD2C084", VA = "0xD2C084")]
	public static Vector3 ReturnIncremented(this Vector3 where, int increment)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xD2C234", Offset = "0xD2C234", VA = "0xD2C234")]
	public static Vector3 SnapVectorTo(this Vector3 v3, float snapAngle)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000513")]
	public static void AddToFront<T>(this List<T> list, T item)
	{
	}

	[Token(Token = "0x6000514")]
	public static bool AddIf<T>(this List<T> list, T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000515")]
	public static bool RemoveIf<T>(this List<T> list, T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000516")]
	public static int RemoveNulls<T>(this List<T> list)
	{
		return default(int);
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xD2C56C", Offset = "0xD2C56C", VA = "0xD2C56C")]
	public static int[] GetUniqueRandomIndexes(this Array theArray, int count)
	{
		return null;
	}

	[Token(Token = "0x6000518")]
	public static T[] GetUniqueRandomArray<T>(this T[] theArray, int count)
	{
		return null;
	}

	[Token(Token = "0x6000519")]
	public static bool ArrayContains<T>(this T[] theArr, T target)
	{
		return default(bool);
	}

	[Token(Token = "0x600051A")]
	public static T RandomItem<T>(this T[] theArr)
	{
		return (T)null;
	}

	[Token(Token = "0x600051B")]
	public static void SetArrayGO<T>(this GameObject[] theArr, bool chg)
	{
	}

	[Token(Token = "0x600051C")]
	public static void ToggleActiveGO<T>(this GameObject[] theArr, bool chg)
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xD2C760", Offset = "0xD2C760", VA = "0xD2C760")]
	public static float CalculateAngle(Vector3 from, Vector3 to)
	{
		return default(float);
	}

	[Token(Token = "0x600051E")]
	public static int RandomIndex<T>(this T[] theArr)
	{
		return default(int);
	}

	[Token(Token = "0x600051F")]
	public static T RandomItemDifferent<T>(this T[] theArr, int lastint)
	{
		return (T)null;
	}

	[Token(Token = "0x6000520")]
	public static bool IsBetween<T>(this T item, T start, T end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xD2C810", Offset = "0xD2C810", VA = "0xD2C810")]
	public static bool Between(this float num, float lower, float upper, bool inclusive = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xD2C840", Offset = "0xD2C840", VA = "0xD2C840")]
	public static void InvokeBetter(this MonoBehaviour me, Action theDelegate, float time)
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xD2C86C", Offset = "0xD2C86C", VA = "0xD2C86C")]
	[IteratorStateMachine(typeof(<ExecuteAfterTime>d__37))]
	private static IEnumerator ExecuteAfterTime(Action theDelegate, float delay)
	{
		return null;
	}
}
[Token(Token = "0x20000EE")]
public class InputVR3lb : MonoBehaviour
{
	[Token(Token = "0x20000EF")]
	public enum InputType
	{
		[Token(Token = "0x40005D9")]
		OVR,
		[Token(Token = "0x40005DA")]
		XR
	}

	[Token(Token = "0x20000F0")]
	public enum Controller
	{
		[Token(Token = "0x40005DC")]
		Both,
		[Token(Token = "0x40005DD")]
		Right,
		[Token(Token = "0x40005DE")]
		Left
	}

	[Token(Token = "0x20000F1")]
	private enum InputRequest
	{
		[Token(Token = "0x40005E0")]
		GetDown,
		[Token(Token = "0x40005E1")]
		GetUp,
		[Token(Token = "0x40005E2")]
		Get
	}

	[Token(Token = "0x20000F2")]
	public enum ButtonTouch
	{
		[Token(Token = "0x40005E4")]
		None,
		[Token(Token = "0x40005E5")]
		TouchOne,
		[Token(Token = "0x40005E6")]
		TouchTwo,
		[Token(Token = "0x40005E7")]
		TouchThumbstickClick,
		[Token(Token = "0x40005E8")]
		TouchIndexTrigger
	}

	[Token(Token = "0x20000F3")]
	public enum Button
	{
		[Token(Token = "0x40005EA")]
		None,
		[Token(Token = "0x40005EB")]
		Left,
		[Token(Token = "0x40005EC")]
		Right,
		[Token(Token = "0x40005ED")]
		Up,
		[Token(Token = "0x40005EE")]
		Down,
		[Token(Token = "0x40005EF")]
		One,
		[Token(Token = "0x40005F0")]
		Two,
		[Token(Token = "0x40005F1")]
		Menu,
		[Token(Token = "0x40005F2")]
		Thumbstick,
		[Token(Token = "0x40005F3")]
		IndexTrigger,
		[Token(Token = "0x40005F4")]
		HandTrigger,
		[Token(Token = "0x40005F5")]
		TouchOne,
		[Token(Token = "0x40005F6")]
		TouchTwo,
		[Token(Token = "0x40005F7")]
		TouchThumbstick,
		[Token(Token = "0x40005F8")]
		TouchIndexTrigger
	}

	[Token(Token = "0x20000F4")]
	public enum ButtonAxis1D
	{
		[Token(Token = "0x40005FA")]
		None,
		[Token(Token = "0x40005FB")]
		IndexTrigger,
		[Token(Token = "0x40005FC")]
		HandTrigger
	}

	[Token(Token = "0x20000F5")]
	public enum ButtonAxis2D
	{
		[Token(Token = "0x40005FE")]
		None,
		[Token(Token = "0x40005FF")]
		Thumbstick
	}

	[Token(Token = "0x20000F6")]
	public class VibrationCommand
	{
		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float maxDuration;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float vibrationDuration;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float vibrationAmp;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Controller vibrationHand;

		[Token(Token = "0x6000564")]
		[Address(RVA = "0xD30818", Offset = "0xD30818", VA = "0xD30818")]
		public VibrationCommand(float duration, float amp, Controller hand)
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0xD31C48", Offset = "0xD31C48", VA = "0xD31C48")]
		public void ReduceDuration(float amount)
		{
		}
	}

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static InputVR3lb _instance;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("VR Input")]
	public InputType controllerInputType;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public InputType hapticInputType;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Button shootButton;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Button grabButton;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Button squeezeButton;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Space]
	public AutoMoveController.eControllerType moveController;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AutoMoveController.eControllerType turnController;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ButtonAxis2D moveAxis;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ButtonAxis2D turnAxis;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Space]
	public Button recenterButton;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Button altMoveButton;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Button menuButton;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Non-VR Settings")]
	public KeyCode pcGrab;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<Controller, Dictionary<Button, UnityEvent>> pressedEvents;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<Controller, Dictionary<Button, UnityEvent>> releasedEvents;

	[Token(Token = "0x40005CC")]
	private const float thumbstickButtonDeadzone = 0.7f;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<Controller, Dictionary<Button, List<float>>> lastButtonPressedTime;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<Controller, Dictionary<Button, List<float>>> lastButtonReleasedTime;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Dictionary<Controller, Dictionary<Button, bool>> lastButtonGet;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static List<VibrationCommand> vibrationCommands;

	[Token(Token = "0x40005D1")]
	private const float DEFAULT_HAPTIC_TIME = 0.25f;

	[Token(Token = "0x40005D2")]
	private const float MAX_HAPTIC_AMP = 255f;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static List<InputDevice> rightDevices;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static List<InputDevice> leftDevices;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static List<InputDevice> bothDevices;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool[] inputStatesRight;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool[] inputStatesLeft;

	[Token(Token = "0x1700003F")]
	public static InputVR3lb Instance
	{
		[Token(Token = "0x600052C")]
		[Address(RVA = "0xD2CA6C", Offset = "0xD2CA6C", VA = "0xD2CA6C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xD2CD68", Offset = "0xD2CD68", VA = "0xD2CD68")]
	private void Update()
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xD2D254", Offset = "0xD2D254", VA = "0xD2D254")]
	public static bool GetDown(Button mybutton, Controller myController)
	{
		return default(bool);
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xD2D2F0", Offset = "0xD2D2F0", VA = "0xD2D2F0")]
	public static bool GetUp(Button mybutton, Controller myController)
	{
		return default(bool);
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xD2DEA0", Offset = "0xD2DEA0", VA = "0xD2DEA0")]
	public static bool Get(Button mybutton, Controller myController)
	{
		return default(bool);
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xD2DF28", Offset = "0xD2DF28", VA = "0xD2DF28")]
	public static bool GetDoublePressDown(float maxPressDelay, Button mybutton, Controller myController)
	{
		return default(bool);
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xD2E53C", Offset = "0xD2E53C", VA = "0xD2E53C")]
	public static Controller GetController(bool left)
	{
		return default(Controller);
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xD2E54C", Offset = "0xD2E54C", VA = "0xD2E54C")]
	public static float GetAxis1D(ButtonAxis1D mybutton, Controller myController)
	{
		return default(float);
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xD2E6C0", Offset = "0xD2E6C0", VA = "0xD2E6C0")]
	public static Vector2 GetAxis2D(ButtonAxis2D mybutton, Controller myController)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xD2E854", Offset = "0xD2E854", VA = "0xD2E854")]
	public static void PlayHaptic(float amplitude, Controller controller, float seconds = 0.25f)
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xD2EB70", Offset = "0xD2EB70", VA = "0xD2EB70")]
	public static void AddPressedEvent(Controller controller, Button button, UnityAction action, bool removeAfterUse = false)
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xD2EF04", Offset = "0xD2EF04", VA = "0xD2EF04")]
	public static void RemovePressedEvent(Controller controller, Button button, UnityAction action, bool removeAfterUse = false)
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xD2F298", Offset = "0xD2F298", VA = "0xD2F298")]
	public static void AddReleaseEvent(Controller controller, Button button, UnityAction action, bool removeAfterUse = false)
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xD2F62C", Offset = "0xD2F62C", VA = "0xD2F62C")]
	public static void RemoveReleaseEvent(Controller controller, Button button, UnityAction action, bool removeAfterUse = false)
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xD2D4A8", Offset = "0xD2D4A8", VA = "0xD2D4A8")]
	private static void SaveButtonTime(bool pressed, Controller hand, Button button, InputRequest request)
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xD2E014", Offset = "0xD2E014", VA = "0xD2E014")]
	private static float GetLastButtonTime(Controller hand, Button button, InputRequest request)
	{
		return default(float);
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xD2E328", Offset = "0xD2E328", VA = "0xD2E328")]
	private static void ClearLastButtonTime(Controller hand, Button button, InputRequest request)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xD2F9C0", Offset = "0xD2F9C0", VA = "0xD2F9C0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xD2D38C", Offset = "0xD2D38C", VA = "0xD2D38C")]
	private static bool PressSolver(Button button, Controller controller, InputRequest request)
	{
		return default(bool);
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xD2E5B0", Offset = "0xD2E5B0", VA = "0xD2E5B0")]
	private static float Axis1DSolver(ButtonAxis1D button, Controller controller)
	{
		return default(float);
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xD2E724", Offset = "0xD2E724", VA = "0xD2E724")]
	private static Vector2 Axis2DSolver(ButtonAxis2D button, Controller controller)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xD2E8D8", Offset = "0xD2E8D8", VA = "0xD2E8D8")]
	private static void HapticSolver(float duration, float amplitude, Controller hand)
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xD308BC", Offset = "0xD308BC", VA = "0xD308BC")]
	public static bool GetGrabButton(Autohand.Hand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xD30930", Offset = "0xD30930", VA = "0xD30930")]
	public static bool GetGrabButtonDown(Autohand.Hand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xD309A4", Offset = "0xD309A4", VA = "0xD309A4")]
	public static bool GetGrabButtonUp(Autohand.Hand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xD30A18", Offset = "0xD30A18", VA = "0xD30A18")]
	public static bool GetSqueezeButton(Autohand.Hand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xD30A8C", Offset = "0xD30A8C", VA = "0xD30A8C")]
	public static bool GetSqueezeButtonDown(Autohand.Hand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xD30B00", Offset = "0xD30B00", VA = "0xD30B00")]
	public static bool GetSqueezeButtonUp(Autohand.Hand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xD30B74", Offset = "0xD30B74", VA = "0xD30B74")]
	public static void PlayHaptic(float amplitude, Autohand.Hand hand, float seconds = 0.25f)
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xD2FF88", Offset = "0xD2FF88", VA = "0xD2FF88")]
	private static bool OVR_PressSolver(Button button, Controller controller, InputRequest request)
	{
		return default(bool);
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xD302B4", Offset = "0xD302B4", VA = "0xD302B4")]
	private static float OVR_Axis1DSolver(ButtonAxis1D button, Controller controller)
	{
		return default(float);
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xD30530", Offset = "0xD30530", VA = "0xD30530")]
	private static Vector2 OVR_Axis2DSolver(ButtonAxis2D button, Controller controller)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xD2FA74", Offset = "0xD2FA74", VA = "0xD2FA74")]
	private static void OVR_Update()
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xD30C28", Offset = "0xD30C28", VA = "0xD30C28")]
	private static OVRInput.Controller OVR_ControllerReturn(Controller myController)
	{
		return default(OVRInput.Controller);
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xD30BF4", Offset = "0xD30BF4", VA = "0xD30BF4")]
	private static bool IsTouchButton(Button mybutton)
	{
		return default(bool);
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xD30C44", Offset = "0xD30C44", VA = "0xD30C44")]
	private static OVRInput.Button OVR_ReturnButton(Button mybutton)
	{
		return default(OVRInput.Button);
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xD30C04", Offset = "0xD30C04", VA = "0xD30C04")]
	private static OVRInput.Touch OVR_ReturnTouch(Button mybutton)
	{
		return default(OVRInput.Touch);
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xD30C68", Offset = "0xD30C68", VA = "0xD30C68")]
	private static OVRInput.Axis1D OVR_ReturnAxis1D(ButtonAxis1D mybutton)
	{
		return default(OVRInput.Axis1D);
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xD30C80", Offset = "0xD30C80", VA = "0xD30C80")]
	private static OVRInput.Axis2D OVR_ReturnAxis2D(ButtonAxis2D mybutton)
	{
		return default(OVRInput.Axis2D);
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xD2FE54", Offset = "0xD2FE54", VA = "0xD2FE54")]
	private void XR_Update()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xD301D4", Offset = "0xD301D4", VA = "0xD301D4")]
	private static bool XR_PressSolver(Button button, Controller controller, InputRequest request)
	{
		return default(bool);
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xD3036C", Offset = "0xD3036C", VA = "0xD3036C")]
	private static float XR_Axis1DSolver(ButtonAxis1D button, Controller controller)
	{
		return default(float);
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xD305DC", Offset = "0xD305DC", VA = "0xD305DC")]
	private static Vector2 XR_Axis2DSolver(ButtonAxis2D button, Controller controller)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xD313D4", Offset = "0xD313D4", VA = "0xD313D4")]
	private static bool XR_GetButton(Button button, Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xD30F80", Offset = "0xD30F80", VA = "0xD30F80")]
	private static bool XR_GetButton(Button button, Controller controller, List<InputDevice> devices)
	{
		return default(bool);
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xD314B0", Offset = "0xD314B0", VA = "0xD314B0")]
	private static bool XR_GetPadButton(Button button, Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xD3118C", Offset = "0xD3118C", VA = "0xD3118C")]
	private static bool XR_GetButtonDown(Button button, Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xD312B0", Offset = "0xD312B0", VA = "0xD312B0")]
	private static bool XR_GetButtonUp(Button button, Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xD30C8C", Offset = "0xD30C8C", VA = "0xD30C8C")]
	private static List<InputDevice> XR_ControllerReturn(Controller myController)
	{
		return null;
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xD315D4", Offset = "0xD315D4", VA = "0xD315D4")]
	private static InputFeatureUsage<bool> XR_ReturnButton(Button button)
	{
		return default(InputFeatureUsage<bool>);
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xD31444", Offset = "0xD31444", VA = "0xD31444")]
	private static InputFeatureUsage<float> XR_ReturnAxis1D(ButtonAxis1D axis)
	{
		return default(InputFeatureUsage<float>);
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xD3174C", Offset = "0xD3174C", VA = "0xD3174C")]
	private static InputFeatureUsage<Vector2> XR_ReturnAxis2D(ButtonAxis2D axis)
	{
		return default(InputFeatureUsage<Vector2>);
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xD30858", Offset = "0xD30858", VA = "0xD30858")]
	public static void XR_PlayHaptic(float duration, float amplitude, Controller hand)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xD317A4", Offset = "0xD317A4", VA = "0xD317A4")]
	public static void SendPulse(Controller controller, float amp = 0.5f)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xD31848", Offset = "0xD31848", VA = "0xD31848")]
	public InputVR3lb()
	{
	}
}
[Token(Token = "0x20000FB")]
public class VRPlayerRig : MonoBehaviour
{
	[Token(Token = "0x20000FC")]
	[CompilerGenerated]
	private sealed class <FixHandsHead>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRPlayerRig <>4__this;

		[Token(Token = "0x17000040")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600057E")]
			[Address(RVA = "0xD32614", Offset = "0xD32614", VA = "0xD32614", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000580")]
			[Address(RVA = "0xD3265C", Offset = "0xD3265C", VA = "0xD3265C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0xD322E8", Offset = "0xD322E8", VA = "0xD322E8")]
		[DebuggerHidden]
		public <FixHandsHead>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0xD324E0", Offset = "0xD324E0", VA = "0xD324E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0xD324E4", Offset = "0xD324E4", VA = "0xD324E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0xD3261C", Offset = "0xD3261C", VA = "0xD3261C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	public bool isMainPlayer;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[FancyHeader("Rig Objects", 0, 0)]
	public Camera rigCamera;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject headVisual;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	public AutoMoveController movementController;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Space]
	public XRHandControllerLink3lb leftHandController;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public XRHandControllerLink3lb rightHandController;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Space]
	public Transform leftHandVisual;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform rightHandVisual;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Space]
	public Transform leftControllerVisual;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform rightControllerVisual;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VRPlayerRig currentMainPlayer;

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xD31F28", Offset = "0xD31F28", VA = "0xD31F28")]
	private void Start()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xD31F2C", Offset = "0xD31F2C", VA = "0xD31F2C")]
	public void OfflineStart()
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xD32018", Offset = "0xD32018", VA = "0xD32018")]
	public static VRPlayerRig ReturnPlayer()
	{
		return null;
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xD321A0", Offset = "0xD321A0", VA = "0xD321A0")]
	public static void SetMainPlayer(VRPlayerRig chg)
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xD31F94", Offset = "0xD31F94", VA = "0xD31F94")]
	public void PrepareRig()
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xD321F8", Offset = "0xD321F8", VA = "0xD321F8")]
	public void SetHandVisual(bool chg)
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xD32254", Offset = "0xD32254", VA = "0xD32254")]
	public void ResetPlayerBody()
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xD32274", Offset = "0xD32274", VA = "0xD32274")]
	[IteratorStateMachine(typeof(<FixHandsHead>d__18))]
	private IEnumerator FixHandsHead()
	{
		return null;
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xD32310", Offset = "0xD32310", VA = "0xD32310")]
	public void PhotonSetUp()
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xD32314", Offset = "0xD32314", VA = "0xD32314")]
	public void SetupRemotePlayer()
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xD32404", Offset = "0xD32404", VA = "0xD32404")]
	public void SetupLocalPlayer()
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xD324BC", Offset = "0xD324BC", VA = "0xD324BC")]
	public void _Recenter()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xD324D8", Offset = "0xD324D8", VA = "0xD324D8")]
	public VRPlayerRig()
	{
	}
}
[Serializable]
[Token(Token = "0x20000FD")]
public class LightControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float intensity;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float bounceIntensity;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float range;

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xD32664", Offset = "0xD32664", VA = "0xD32664")]
	public LightControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000FE")]
public class LightControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LightControlBehaviour template;

	[Token(Token = "0x17000042")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000582")]
		[Address(RVA = "0xD32684", Offset = "0xD32684", VA = "0xD32684", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xD3268C", Offset = "0xD3268C", VA = "0xD3268C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xD32734", Offset = "0xD32734", VA = "0xD32734")]
	public LightControlClip()
	{
	}
}
[Token(Token = "0x20000FF")]
public class LightControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_DefaultIntensity;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_DefaultBounceIntensity;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_DefaultRange;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light m_TrackBinding;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xD327C0", Offset = "0xD327C0", VA = "0xD327C0", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xD32B88", Offset = "0xD32B88", VA = "0xD32B88", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xD32C54", Offset = "0xD32C54", VA = "0xD32C54")]
	public LightControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000100")]
[TrackBindingType(typeof(Light))]
[TrackColor(0.9454092f, 0.9779412f, 0.3883002f)]
[TrackClipType(typeof(LightControlClip))]
public class LightControlTrack : TrackAsset
{
	[Token(Token = "0x6000588")]
	[Address(RVA = "0xD32C5C", Offset = "0xD32C5C", VA = "0xD32C5C", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xD32CFC", Offset = "0xD32CFC", VA = "0xD32CFC", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xD32D04", Offset = "0xD32D04", VA = "0xD32D04")]
	public LightControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000101")]
public class NavMeshAgentControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform destination;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool destinationSet;

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xD32D5C", Offset = "0xD32D5C", VA = "0xD32D5C", Slot = "15")]
	public override void OnPlayableCreate(Playable playable)
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xD32D64", Offset = "0xD32D64", VA = "0xD32D64")]
	public NavMeshAgentControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000102")]
public class NavMeshAgentControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ExposedReference<Transform> destination;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public NavMeshAgentControlBehaviour template;

	[Token(Token = "0x17000043")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600058D")]
		[Address(RVA = "0xD32D6C", Offset = "0xD32D6C", VA = "0xD32D6C", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xD32D74", Offset = "0xD32D74", VA = "0xD32D74", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xD32EB4", Offset = "0xD32EB4", VA = "0xD32EB4")]
	public NavMeshAgentControlClip()
	{
	}
}
[Token(Token = "0x2000103")]
public class NavMeshAgentControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x6000590")]
	[Address(RVA = "0xD32F28", Offset = "0xD32F28", VA = "0xD32F28", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xD3318C", Offset = "0xD3318C", VA = "0xD3318C")]
	public NavMeshAgentControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000104")]
[TrackBindingType(typeof(NavMeshAgent))]
[TrackClipType(typeof(NavMeshAgentControlClip))]
[TrackColor(0.855f, 0.8623f, 0.87f)]
public class NavMeshAgentControlTrack : TrackAsset
{
	[Token(Token = "0x6000592")]
	[Address(RVA = "0xD33194", Offset = "0xD33194", VA = "0xD33194", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0xD33234", Offset = "0xD33234", VA = "0xD33234")]
	public NavMeshAgentControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000105")]
public class ScreenFaderBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xD3328C", Offset = "0xD3328C", VA = "0xD3328C")]
	public ScreenFaderBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000106")]
public class ScreenFaderClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ScreenFaderBehaviour template;

	[Token(Token = "0x17000044")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000595")]
		[Address(RVA = "0xD332A0", Offset = "0xD332A0", VA = "0xD332A0", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xD332A8", Offset = "0xD332A8", VA = "0xD332A8", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xD33350", Offset = "0xD33350", VA = "0xD33350")]
	public ScreenFaderClip()
	{
	}
}
[Token(Token = "0x2000107")]
public class ScreenFaderMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Image m_TrackBinding;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xD333D0", Offset = "0xD333D0", VA = "0xD333D0", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xD33710", Offset = "0xD33710", VA = "0xD33710", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0xD337A8", Offset = "0xD337A8", VA = "0xD337A8")]
	public ScreenFaderMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000108")]
[TrackBindingType(typeof(Image))]
[TrackClipType(typeof(ScreenFaderClip))]
[TrackColor(0.875f, 0.5944853f, 0.1737132f)]
public class ScreenFaderTrack : TrackAsset
{
	[Token(Token = "0x600059B")]
	[Address(RVA = "0xD337B0", Offset = "0xD337B0", VA = "0xD337B0", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xD33850", Offset = "0xD33850", VA = "0xD33850", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xD33858", Offset = "0xD33858", VA = "0xD33858")]
	public ScreenFaderTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000109")]
public class TextSwitcherBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int fontSize;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string text;

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xD338B0", Offset = "0xD338B0", VA = "0xD338B0")]
	public TextSwitcherBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200010A")]
public class TextSwitcherClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextSwitcherBehaviour template;

	[Token(Token = "0x17000045")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600059F")]
		[Address(RVA = "0xD338C8", Offset = "0xD338C8", VA = "0xD338C8", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xD338D0", Offset = "0xD338D0", VA = "0xD338D0", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xD33978", Offset = "0xD33978", VA = "0xD33978")]
	public TextSwitcherClip()
	{
	}
}
[Token(Token = "0x200010B")]
public class TextSwitcherMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_DefaultFontSize;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string m_DefaultText;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Text m_TrackBinding;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xD339FC", Offset = "0xD339FC", VA = "0xD339FC", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xD33F58", Offset = "0xD33F58", VA = "0xD33F58", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xD34020", Offset = "0xD34020", VA = "0xD34020")]
	public TextSwitcherMixerBehaviour()
	{
	}
}
[Token(Token = "0x200010C")]
[TrackClipType(typeof(TextSwitcherClip))]
[TrackColor(0.1394896f, 0.4411765f, 0.3413077f)]
[TrackBindingType(typeof(Text))]
public class TextSwitcherTrack : TrackAsset
{
	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xD34028", Offset = "0xD34028", VA = "0xD34028", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xD340C8", Offset = "0xD340C8", VA = "0xD340C8", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xD340D0", Offset = "0xD340D0", VA = "0xD340D0")]
	public TextSwitcherTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x200010D")]
public class TimeDilationBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float timeScale;

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xD34128", Offset = "0xD34128", VA = "0xD34128")]
	public TimeDilationBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200010E")]
public class TimeDilationClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TimeDilationBehaviour template;

	[Token(Token = "0x17000046")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60005A9")]
		[Address(RVA = "0xD34138", Offset = "0xD34138", VA = "0xD34138", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xD34140", Offset = "0xD34140", VA = "0xD34140", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xD341E8", Offset = "0xD341E8", VA = "0xD341E8")]
	public TimeDilationClip()
	{
	}
}
[Token(Token = "0x200010F")]
public class TimeDilationMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float m_OldTimeScale;

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xD34264", Offset = "0xD34264", VA = "0xD34264", Slot = "15")]
	public override void OnPlayableCreate(Playable playable)
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xD34280", Offset = "0xD34280", VA = "0xD34280", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xD34448", Offset = "0xD34448", VA = "0xD34448", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xD34454", Offset = "0xD34454", VA = "0xD34454")]
	public TimeDilationMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000110")]
[TrackClipType(typeof(TimeDilationClip))]
[TrackColor(0.855f, 0.8623f, 0.87f)]
public class TimeDilationTrack : TrackAsset
{
	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xD34464", Offset = "0xD34464", VA = "0xD34464", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xD34504", Offset = "0xD34504", VA = "0xD34504")]
	public TimeDilationTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000111")]
public class TransformTweenBehaviour : PlayableBehaviour
{
	[Token(Token = "0x2000112")]
	public enum TweenType
	{
		[Token(Token = "0x400064B")]
		Linear,
		[Token(Token = "0x400064C")]
		Deceleration,
		[Token(Token = "0x400064D")]
		Harmonic,
		[Token(Token = "0x400064E")]
		Custom
	}

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform startLocation;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform endLocation;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool tweenPosition;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool tweenRotation;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public TweenType tweenType;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve customCurve;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 startingPosition;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Quaternion startingRotation;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AnimationCurve m_LinearCurve;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AnimationCurve m_DecelerationCurve;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AnimationCurve m_HarmonicCurve;

	[Token(Token = "0x4000649")]
	private const float k_RightAngleInRads = (float)Math.PI / 2f;

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xD3455C", Offset = "0xD3455C", VA = "0xD3455C", Slot = "19")]
	public override void PrepareFrame(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xD345F4", Offset = "0xD345F4", VA = "0xD345F4")]
	public float EvaluateCurrentCurve(float time)
	{
		return default(float);
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xD346E8", Offset = "0xD346E8", VA = "0xD346E8")]
	private bool IsCustomCurveNormalised()
	{
		return default(bool);
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xD3498C", Offset = "0xD3498C", VA = "0xD3498C")]
	public TransformTweenBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000113")]
public class TransformTweenClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TransformTweenBehaviour template;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ExposedReference<Transform> startLocation;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ExposedReference<Transform> endLocation;

	[Token(Token = "0x17000047")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xD34BA0", Offset = "0xD34BA0", VA = "0xD34BA0", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xD34BA8", Offset = "0xD34BA8", VA = "0xD34BA8", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xD34D18", Offset = "0xD34D18", VA = "0xD34D18")]
	public TransformTweenClip()
	{
	}
}
[Token(Token = "0x2000114")]
public class TransformTweenMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xD34D88", Offset = "0xD34D88", VA = "0xD34D88", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xD35458", Offset = "0xD35458", VA = "0xD35458", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xD35444", Offset = "0xD35444", VA = "0xD35444")]
	private static Quaternion AddQuaternions(Quaternion first, Quaternion second)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xD35430", Offset = "0xD35430", VA = "0xD35430")]
	private static Quaternion ScaleQuaternion(Quaternion rotation, float multiplier)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xD35460", Offset = "0xD35460", VA = "0xD35460")]
	private static float QuaternionMagnitude(Quaternion rotation)
	{
		return default(float);
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xD35330", Offset = "0xD35330", VA = "0xD35330")]
	private static Quaternion NormalizeQuaternion(Quaternion rotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xD35484", Offset = "0xD35484", VA = "0xD35484")]
	public TransformTweenMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000115")]
[TrackClipType(typeof(TransformTweenClip))]
[TrackColor(0.855f, 0.8623f, 0.87f)]
[TrackBindingType(typeof(Transform))]
public class TransformTweenTrack : TrackAsset
{
	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xD3548C", Offset = "0xD3548C", VA = "0xD3548C", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xD3552C", Offset = "0xD3552C", VA = "0xD3552C", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xD35534", Offset = "0xD35534", VA = "0xD35534")]
	public TransformTweenTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000116")]
public class EventHolderClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EventHolderTBehaviour template;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ExposedReference<EventHolder3lb> EventHolder;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ExposedReference<EventHolderMulti> EventArray;

	[Token(Token = "0x17000048")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60005C3")]
		[Address(RVA = "0xD3558C", Offset = "0xD3558C", VA = "0xD3558C", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xD35594", Offset = "0xD35594", VA = "0xD35594", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xD35718", Offset = "0xD35718", VA = "0xD35718")]
	public EventHolderClip()
	{
	}
}
[Token(Token = "0x2000117")]
public class EventHolderMulti : MonoBehaviour
{
	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EventHolder3lb[] theEvents;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EventHolderTBehaviour.eEventHolderType eventHolderType;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int index;

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xD35794", Offset = "0xD35794", VA = "0xD35794")]
	[Button(null, EButtonEnableMode.Always)]
	public void _UseOnEvents()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xD357F4", Offset = "0xD357F4", VA = "0xD357F4")]
	[Button(null, EButtonEnableMode.Always)]
	public void _UseOffEvents()
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xD35854", Offset = "0xD35854", VA = "0xD35854")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Use()
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xD359EC", Offset = "0xD359EC", VA = "0xD359EC")]
	public EventHolderMulti()
	{
	}
}
[Serializable]
[Token(Token = "0x2000118")]
public class EventHolderTBehaviour : PlayableBehaviour
{
	[Token(Token = "0x2000119")]
	public enum eEventHolderType
	{
		[Token(Token = "0x4000661")]
		OnEvent,
		[Token(Token = "0x4000662")]
		OffEvent,
		[Token(Token = "0x4000663")]
		Toggle,
		[Token(Token = "0x4000664")]
		Reset,
		[Token(Token = "0x4000665")]
		EventIndex
	}

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public EventHolder3lb EventHolder;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EventHolderMulti EventMulti;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool playOffAtEnd;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool useEventMulti;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int index;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public eEventHolderType eventHolderType;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool useHolderList;

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xD359F4", Offset = "0xD359F4", VA = "0xD359F4", Slot = "17")]
	public override void OnBehaviourPlay(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xD35AAC", Offset = "0xD35AAC", VA = "0xD35AAC", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xD3578C", Offset = "0xD3578C", VA = "0xD3578C")]
	public EventHolderTBehaviour()
	{
	}
}
[Token(Token = "0x200011A")]
[TrackColor(105f / 106f, 0.5653702f, 0.6068693f)]
[TrackClipType(typeof(EventHolderClip))]
public class EventHolderTrack : TrackAsset
{
	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xD35C5C", Offset = "0xD35C5C", VA = "0xD35C5C")]
	public EventHolderTrack()
	{
	}
}
[Token(Token = "0x200011B")]
public enum UIType
{
	[Token(Token = "0x4000667")]
	None,
	[Token(Token = "0x4000668")]
	Welcome,
	[Token(Token = "0x4000669")]
	Invocation,
	[Token(Token = "0x400066A")]
	Finish
}
[Token(Token = "0x200011C")]
public class TestTimeLineEvent : MonoBehaviour
{
	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent myEvent;

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xD35CB4", Offset = "0xD35CB4", VA = "0xD35CB4")]
	public void Changecolor()
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xD35D28", Offset = "0xD35D28", VA = "0xD35D28")]
	public void DoWiggle(float howLong)
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xD35D64", Offset = "0xD35D64", VA = "0xD35D64")]
	public void DoLinkedEvent()
	{
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xD35D80", Offset = "0xD35D80", VA = "0xD35D80")]
	public TestTimeLineEvent()
	{
	}
}
[Token(Token = "0x200011D")]
public class TimeLord : MonoBehaviour
{
	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector myDirector;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public double duration;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public double currentTime;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent endingEvent;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool hasEnded;

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xD35D88", Offset = "0xD35D88", VA = "0xD35D88")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xD35E4C", Offset = "0xD35E4C", VA = "0xD35E4C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xD35ECC", Offset = "0xD35ECC", VA = "0xD35ECC")]
	public void Pause()
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xD35EE8", Offset = "0xD35EE8", VA = "0xD35EE8")]
	public void Play()
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xD35F04", Offset = "0xD35F04", VA = "0xD35F04")]
	public void ChangeTimePause(int theTime)
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xD35F44", Offset = "0xD35F44", VA = "0xD35F44")]
	public void ChangeTimePlay(float theTime)
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xD35F84", Offset = "0xD35F84", VA = "0xD35F84")]
	public TimeLord()
	{
	}
}
[Token(Token = "0x200011E")]
[ExecuteInEditMode]
[DisallowMultipleComponent]
public class GuidComponent : MonoBehaviour, ISerializationCallbackReceiver
{
	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Guid guid;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private byte[] serializedGuid;

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xD35F8C", Offset = "0xD35F8C", VA = "0xD35F8C")]
	public bool IsGuidAssigned()
	{
		return default(bool);
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xD35FE0", Offset = "0xD35FE0", VA = "0xD35FE0")]
	private void CreateGuid()
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xD361AC", Offset = "0xD361AC", VA = "0xD361AC", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xD36234", Offset = "0xD36234", VA = "0xD36234", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xD36278", Offset = "0xD36278", VA = "0xD36278")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xD3627C", Offset = "0xD3627C", VA = "0xD3627C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xD36280", Offset = "0xD36280", VA = "0xD36280")]
	public Guid GetGuid()
	{
		return default(Guid);
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xD3631C", Offset = "0xD3631C", VA = "0xD3631C")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xD363D0", Offset = "0xD363D0", VA = "0xD363D0")]
	public GuidComponent()
	{
	}
}
[Token(Token = "0x200011F")]
public class GuidManager
{
	[Token(Token = "0x2000120")]
	private struct GuidInfo
	{
		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject go;

		[Token(Token = "0x14000003")]
		public event Action<GameObject> OnAdd
		{
			[Token(Token = "0x60005EB")]
			[Address(RVA = "0xD36D04", Offset = "0xD36D04", VA = "0xD36D04")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60005EC")]
			[Address(RVA = "0xD36E50", Offset = "0xD36E50", VA = "0xD36E50")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event Action OnRemove
		{
			[Token(Token = "0x60005ED")]
			[Address(RVA = "0xD36DB4", Offset = "0xD36DB4", VA = "0xD36DB4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60005EE")]
			[Address(RVA = "0xD36F00", Offset = "0xD36F00", VA = "0xD36F00")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xD36C78", Offset = "0xD36C78", VA = "0xD36C78")]
		public GuidInfo(GuidComponent comp)
		{
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xD36CC8", Offset = "0xD36CC8", VA = "0xD36CC8")]
		public void HandleAddCallback()
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xD36CE8", Offset = "0xD36CE8", VA = "0xD36CE8")]
		public void HandleRemoveCallback()
		{
		}
	}

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GuidManager Instance;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<Guid, GuidInfo> guidToObjectMap;

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xD36114", Offset = "0xD36114", VA = "0xD36114")]
	public static bool Add(GuidComponent guidComponent)
	{
		return default(bool);
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xD36328", Offset = "0xD36328", VA = "0xD36328")]
	public static void Remove(Guid guid)
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xD368D4", Offset = "0xD368D4", VA = "0xD368D4")]
	public static GameObject ResolveGuid(Guid guid, Action<GameObject> onAddCallback, Action onRemoveCallback)
	{
		return null;
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xD36B14", Offset = "0xD36B14", VA = "0xD36B14")]
	public static GameObject ResolveGuid(Guid guid, Action onDestroyCallback)
	{
		return null;
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xD36BC8", Offset = "0xD36BC8", VA = "0xD36BC8")]
	public static GameObject ResolveGuid(Guid guid)
	{
		return null;
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xD36428", Offset = "0xD36428", VA = "0xD36428")]
	private GuidManager()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xD364B0", Offset = "0xD364B0", VA = "0xD364B0")]
	private bool InternalAdd(GuidComponent guidComponent)
	{
		return default(bool);
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xD3680C", Offset = "0xD3680C", VA = "0xD3680C")]
	private void InternalRemove(Guid guid)
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xD36994", Offset = "0xD36994", VA = "0xD36994")]
	private GameObject ResolveGuidInternal(Guid guid, Action<GameObject> onAddCallback, Action onRemoveCallback)
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000121")]
public class GuidReference : ISerializationCallbackReceiver
{
	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject cachedReference;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isCacheSet;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private byte[] serializedGuid;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Guid guid;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Action<GameObject> addDelegate;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Action removeDelegate;

	[Token(Token = "0x17000049")]
	public GameObject gameObject
	{
		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xD37234", Offset = "0xD37234", VA = "0xD37234")]
		get
		{
			return null;
		}
		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xD3727C", Offset = "0xD3727C", VA = "0xD3727C")]
		private set
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action<GameObject> OnGuidAdded
	{
		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xD36F9C", Offset = "0xD36F9C", VA = "0xD36F9C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005F3")]
		[Address(RVA = "0xD3704C", Offset = "0xD3704C", VA = "0xD3704C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action OnGuidRemoved
	{
		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xD370FC", Offset = "0xD370FC", VA = "0xD370FC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xD37198", Offset = "0xD37198", VA = "0xD37198")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xD37280", Offset = "0xD37280", VA = "0xD37280")]
	public GuidReference()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xD37420", Offset = "0xD37420", VA = "0xD37420")]
	public GuidReference(GuidComponent target)
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xD375D8", Offset = "0xD375D8", VA = "0xD375D8")]
	private void GuidAdded(GameObject go)
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xD3761C", Offset = "0xD3761C", VA = "0xD3761C")]
	private void GuidRemoved()
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xD37658", Offset = "0xD37658", VA = "0xD37658", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xD37680", Offset = "0xD37680", VA = "0xD37680", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}
}
[Token(Token = "0x2000123")]
public class LoadScenes : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000124")]
	public struct SceneInfo
	{
		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool shouldLoad;
	}

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<SceneInfo> scenes;

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xD37868", Offset = "0xD37868", VA = "0xD37868")]
	private void Update()
	{
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xD37A60", Offset = "0xD37A60", VA = "0xD37A60")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xD37C54", Offset = "0xD37C54", VA = "0xD37C54")]
	public LoadScenes()
	{
	}
}
[Token(Token = "0x2000125")]
public class TestCrossScene : MonoBehaviour
{
	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GuidReference crossSceneReference;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer cachedRenderer;

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xD37CDC", Offset = "0xD37CDC", VA = "0xD37CDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xD37D64", Offset = "0xD37D64", VA = "0xD37D64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xD37F18", Offset = "0xD37F18", VA = "0xD37F18")]
	private void ClearCache()
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0xD37F24", Offset = "0xD37F24", VA = "0xD37F24")]
	private void TestPerformance()
	{
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0xD37F58", Offset = "0xD37F58", VA = "0xD37F58")]
	public TestCrossScene()
	{
	}
}
[Token(Token = "0x2000126")]
[DisallowMultipleComponent]
public class QuickOutline : MonoBehaviour
{
	[Token(Token = "0x2000127")]
	public enum Mode
	{
		[Token(Token = "0x4000696")]
		OutlineAll,
		[Token(Token = "0x4000697")]
		OutlineVisible,
		[Token(Token = "0x4000698")]
		OutlineHidden,
		[Token(Token = "0x4000699")]
		OutlineAndSilhouette,
		[Token(Token = "0x400069A")]
		SilhouetteOnly
	}

	[Serializable]
	[Token(Token = "0x2000128")]
	private class ListVector3
	{
		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> data;

		[Token(Token = "0x600061E")]
		[Address(RVA = "0xD39BA0", Offset = "0xD39BA0", VA = "0xD39BA0")]
		public ListVector3()
		{
		}
	}

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<Mesh> registeredMeshes;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Mode outlineMode;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Color outlineColor;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[Range(0f, 10f)]
	private float outlineWidth;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Optional")]
	[SerializeField]
	[Tooltip("Precompute enabled: Per-vertex calculations are performed in the editor and serialized with the object. Precompute disabled: Per-vertex calculations are performed at runtime in Awake(). This may cause a pause for large meshes.")]
	private bool precomputeOutline;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	private List<Mesh> bakeKeys;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[HideInInspector]
	private List<ListVector3> bakeValues;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer[] renderers;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material outlineMaskMaterial;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material outlineFillMaterial;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool needsUpdate;

	[Token(Token = "0x1700004A")]
	public Mode OutlineMode
	{
		[Token(Token = "0x600060C")]
		[Address(RVA = "0xD37FC8", Offset = "0xD37FC8", VA = "0xD37FC8")]
		get
		{
			return default(Mode);
		}
		[Token(Token = "0x600060D")]
		[Address(RVA = "0xD37FD0", Offset = "0xD37FD0", VA = "0xD37FD0")]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public Color OutlineColor
	{
		[Token(Token = "0x600060E")]
		[Address(RVA = "0xD37FE0", Offset = "0xD37FE0", VA = "0xD37FE0")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x600060F")]
		[Address(RVA = "0xD37FEC", Offset = "0xD37FEC", VA = "0xD37FEC")]
		set
		{
		}
	}

	[Token(Token = "0x1700004C")]
	public float OutlineWidth
	{
		[Token(Token = "0x6000610")]
		[Address(RVA = "0xD38000", Offset = "0xD38000", VA = "0xD38000")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000611")]
		[Address(RVA = "0xD38008", Offset = "0xD38008", VA = "0xD38008")]
		set
		{
		}
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xD38018", Offset = "0xD38018", VA = "0xD38018")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xD38524", Offset = "0xD38524", VA = "0xD38524")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xD387A8", Offset = "0xD387A8", VA = "0xD387A8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xD38B38", Offset = "0xD38B38", VA = "0xD38B38")]
	private void Update()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0xD38CF8", Offset = "0xD38CF8", VA = "0xD38CF8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xD38EE0", Offset = "0xD38EE0", VA = "0xD38EE0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xD388C0", Offset = "0xD388C0", VA = "0xD388C0")]
	private void Bake()
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xD381B8", Offset = "0xD381B8", VA = "0xD381B8")]
	private void LoadSmoothNormals()
	{
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xD38F48", Offset = "0xD38F48", VA = "0xD38F48")]
	private List<Vector3> SmoothNormals(Mesh mesh)
	{
		return null;
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xD38B4C", Offset = "0xD38B4C", VA = "0xD38B4C")]
	private void UpdateMaterialProperties()
	{
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0xD39BA8", Offset = "0xD39BA8", VA = "0xD39BA8")]
	public QuickOutline()
	{
	}
}
[Token(Token = "0x200012A")]
public class FPSController3lb : MonoBehaviour
{
	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-HookUp-")]
	public Camera playerCamera;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	private CharacterController characterController;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("-Speeds-")]
	public float walkingSpeed;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float runningSpeed;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float jumpSpeed;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float gravity;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("-MouseLook-")]
	public bool requireButton;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public KeyCode mouseLookButton;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float lookSpeed;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float lookXLimit;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("-Settings-")]
	public bool useFlight;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 moveDirection;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float rotationX;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float rotationY;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float curSpeed;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool canMove;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[Tooltip("Item is only one object not a combinedPlayer")]
	[Header("DebugUnityCamera")]
	public bool singleItem;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	[Tooltip("noClipAndCanIgnoreCollisions")]
	public bool Noclip;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	public bool forceKeyboard;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Quaternion originalRotation;

	[Token(Token = "0x6000623")]
	[Address(RVA = "0xD39E80", Offset = "0xD39E80", VA = "0xD39E80")]
	private void Start()
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0xD39F14", Offset = "0xD39F14", VA = "0xD39F14")]
	public void NetworkedSetup()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xD39F18", Offset = "0xD39F18", VA = "0xD39F18")]
	public void ToggleFlight()
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xD39F28", Offset = "0xD39F28", VA = "0xD39F28")]
	public void MovePlayerNow(Vector3 pos, Quaternion rot)
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xD39FE8", Offset = "0xD39FE8", VA = "0xD39FE8")]
	public void _MovePlayerNow(Transform where)
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xD3A088", Offset = "0xD3A088", VA = "0xD3A088")]
	private void Update()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xD3A470", Offset = "0xD3A470", VA = "0xD3A470")]
	public void CheckMouseLook()
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xD3A4DC", Offset = "0xD3A4DC", VA = "0xD3A4DC")]
	private void MouseLooking()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xD3A6E4", Offset = "0xD3A6E4", VA = "0xD3A6E4")]
	public FPSController3lb()
	{
	}
}
[Token(Token = "0x200012B")]
public class VRRecordingCameraSetup : MonoBehaviour
{
	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RecorderCameraDelay myRecordercameraDelay;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera myCamera;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FPSController3lb myController;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject thePrefab;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject turnOffOnFollow;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool followHead;

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xD3A76C", Offset = "0xD3A76C", VA = "0xD3A76C")]
	private void Start()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xD3AA18", Offset = "0xD3AA18", VA = "0xD3AA18")]
	public void Update()
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xD3A794", Offset = "0xD3A794", VA = "0xD3A794")]
	private void FollowOrNot()
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xD3ABF8", Offset = "0xD3ABF8", VA = "0xD3ABF8")]
	public VRRecordingCameraSetup()
	{
	}
}
[Token(Token = "0x200012C")]
public class EntitlementCheck3lb : MonoBehaviour
{
	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool exitAppOnFailure;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool overrideID;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ShowIf("overrideID")]
	public string AppIDOverride;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent Passed;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent Failed;

	[Token(Token = "0x14000007")]
	public static event Action UserFailedEntitlementCheck
	{
		[Token(Token = "0x6000630")]
		[Address(RVA = "0xD3AC00", Offset = "0xD3AC00", VA = "0xD3AC00")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000631")]
		[Address(RVA = "0xD3ACB8", Offset = "0xD3ACB8", VA = "0xD3ACB8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public static event Action UserPassedEntitlementCheck
	{
		[Token(Token = "0x6000632")]
		[Address(RVA = "0xD3AD70", Offset = "0xD3AD70", VA = "0xD3AD70")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000633")]
		[Address(RVA = "0xD3AE2C", Offset = "0xD3AE2C", VA = "0xD3AE2C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xD3AEE8", Offset = "0xD3AEE8", VA = "0xD3AEE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xD3B400", Offset = "0xD3B400", VA = "0xD3B400")]
	private void EntitlementCheckCallback(Message msg)
	{
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0xD3B0CC", Offset = "0xD3B0CC", VA = "0xD3B0CC")]
	private void HandleEntitlementCheckResult(bool result)
	{
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xD3B430", Offset = "0xD3B430", VA = "0xD3B430")]
	public EntitlementCheck3lb()
	{
	}
}
[Token(Token = "0x200012D")]
public class GravityDebugger : MonoBehaviour
{
	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool running;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Stopwatch watch;

	[Token(Token = "0x6000638")]
	[Address(RVA = "0xD3B488", Offset = "0xD3B488", VA = "0xD3B488")]
	[Button("Test Gravity", EButtonEnableMode.Always)]
	public void TestGravity()
	{
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0xD3B574", Offset = "0xD3B574", VA = "0xD3B574")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xD3B648", Offset = "0xD3B648", VA = "0xD3B648")]
	public GravityDebugger()
	{
	}
}
[Token(Token = "0x200012E")]
public class MoveDebugger : MonoBehaviour
{
	[Token(Token = "0x600063B")]
	[Address(RVA = "0xD3B6BC", Offset = "0xD3B6BC", VA = "0xD3B6BC")]
	public MoveDebugger()
	{
	}
}
[Token(Token = "0x200012F")]
public class OculusPlatformUploadStringer : MonoBehaviour
{
	[Token(Token = "0x2000130")]
	[HideInInspector]
	public enum appType
	{
		[Token(Token = "0x40006CE")]
		rift,
		[Token(Token = "0x40006CF")]
		quest
	}

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	private appType AppType;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string AppID;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string AppSecret;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public string buildDirectory;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public string launchFile;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public string notes;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public string version;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string releasechannel;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("QuestOnly")]
	public string apkPath;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[TextArea(3, 5)]
	public string commandlineOutput;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[TextArea]
	public string pathCheck;

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xD3B6C4", Offset = "0xD3B6C4", VA = "0xD3B6C4")]
	private void Start()
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xD3B6D0", Offset = "0xD3B6D0", VA = "0xD3B6D0")]
	[Button(null, EButtonEnableMode.Always)]
	private void GenerateCommandLine()
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xD3BA5C", Offset = "0xD3BA5C", VA = "0xD3BA5C")]
	private void DoCommandLine()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xD3B6D4", Offset = "0xD3B6D4", VA = "0xD3B6D4")]
	private void DoCommandQuest()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xD3BFE4", Offset = "0xD3BFE4", VA = "0xD3BFE4")]
	private string ConvertAppToString(appType test)
	{
		return null;
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xD3C068", Offset = "0xD3C068", VA = "0xD3C068")]
	private string QouteIt(string text)
	{
		return null;
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xD3C0B8", Offset = "0xD3C0B8", VA = "0xD3C0B8")]
	public OculusPlatformUploadStringer()
	{
	}
}
[Token(Token = "0x2000131")]
public class PositionTest : MonoBehaviour
{
	[Token(Token = "0x2000132")]
	[CompilerGenerated]
	private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositionTest <>4__this;

		[Token(Token = "0x1700004D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600064A")]
			[Address(RVA = "0xD3DA5C", Offset = "0xD3DA5C", VA = "0xD3DA5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600064C")]
			[Address(RVA = "0xD3DAA4", Offset = "0xD3DAA4", VA = "0xD3DAA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0xD3CB64", Offset = "0xD3CB64", VA = "0xD3CB64")]
		[DebuggerHidden]
		public <Start>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0xD3CB94", Offset = "0xD3CB94", VA = "0xD3CB94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0xD3CB98", Offset = "0xD3CB98", VA = "0xD3CB98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0xD3DA64", Offset = "0xD3DA64", VA = "0xD3DA64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform tracked;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform tracked1;

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xD3C0C8", Offset = "0xD3C0C8", VA = "0xD3C0C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xD3C5DC", Offset = "0xD3C5DC", VA = "0xD3C5DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xD3CAF0", Offset = "0xD3CAF0", VA = "0xD3CAF0")]
	[IteratorStateMachine(typeof(<Start>d__4))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xD3CB8C", Offset = "0xD3CB8C", VA = "0xD3CB8C")]
	public PositionTest()
	{
	}
}
[Token(Token = "0x2000133")]
public class VaultTesting3lb : MonoBehaviour
{
	[Token(Token = "0x600064D")]
	[Address(RVA = "0xD3DAAC", Offset = "0xD3DAAC", VA = "0xD3DAAC")]
	[Button(null, EButtonEnableMode.Always)]
	public void KillPlayer()
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0xD3DB18", Offset = "0xD3DB18", VA = "0xD3DB18")]
	[Button(null, EButtonEnableMode.Always)]
	public void RespawnTime()
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xD3DB94", Offset = "0xD3DB94", VA = "0xD3DB94")]
	public VaultTesting3lb()
	{
	}
}
[Token(Token = "0x2000134")]
public class AgentAttackGrounded : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000135")]
	public class AttackInfo
	{
		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string attackAnimTrigger;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject attackFX;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float attackTime;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isContinuousAnim;

		[Token(Token = "0x600065D")]
		[Address(RVA = "0xD3E3B8", Offset = "0xD3E3B8", VA = "0xD3E3B8")]
		public AttackInfo()
		{
		}
	}

	[Token(Token = "0x2000136")]
	[CompilerGenerated]
	private sealed class <AttackOver>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttackInfo attack;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AgentAttackGrounded <>4__this;

		[Token(Token = "0x1700004F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000661")]
			[Address(RVA = "0xD3E594", Offset = "0xD3E594", VA = "0xD3E594", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000663")]
			[Address(RVA = "0xD3E5DC", Offset = "0xD3E5DC", VA = "0xD3E5DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0xD3E100", Offset = "0xD3E100", VA = "0xD3E100")]
		[DebuggerHidden]
		public <AttackOver>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0xD3E418", Offset = "0xD3E418", VA = "0xD3E418", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0xD3E41C", Offset = "0xD3E41C", VA = "0xD3E41C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0xD3E59C", Offset = "0xD3E59C", VA = "0xD3E59C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AgentMoveGrounded agentMove;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool prioritizeMelee;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AttackInfo[] meleeAttackInfos;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AttackInfo[] cleaveAttackInfos;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AttackInfo[] rangedAttackInfos;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector2 timeBetweenAttacks;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AttackInfo currentAttack;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float attackTime;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float meleeAttackRadius;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float cleaveAttackRadius;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float cleaveAttackHeight;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float cleaveCD;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float rangedAttackRadius;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private IEnumerator attackCoroutine;

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xD3DB9C", Offset = "0xD3DB9C", VA = "0xD3DB9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xD3DDBC", Offset = "0xD3DDBC", VA = "0xD3DDBC")]
	public void AttackDecisions(float distance, float yDistance)
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xD3DEC8", Offset = "0xD3DEC8", VA = "0xD3DEC8", Slot = "4")]
	public virtual void MeleeAttack()
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0xD3DED8", Offset = "0xD3DED8", VA = "0xD3DED8", Slot = "5")]
	public virtual void CleaveAttack()
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0xD3DEE8", Offset = "0xD3DEE8", VA = "0xD3DEE8", Slot = "6")]
	public virtual void RangedAttack()
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0xD3DEF8", Offset = "0xD3DEF8", VA = "0xD3DEF8", Slot = "7")]
	public virtual void Attack(AttackInfo[] infos)
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0xD3E070", Offset = "0xD3E070", VA = "0xD3E070")]
	[IteratorStateMachine(typeof(<AttackOver>d__21))]
	private IEnumerator AttackOver(AttackInfo attack)
	{
		return null;
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0xD3E128", Offset = "0xD3E128", VA = "0xD3E128", Slot = "8")]
	public virtual void AttackAnimation(AttackInfo attack)
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0xD3E1E0", Offset = "0xD3E1E0", VA = "0xD3E1E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0xD3E1E4", Offset = "0xD3E1E4", VA = "0xD3E1E4")]
	private void DeactivateFX()
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0xD3E248", Offset = "0xD3E248", VA = "0xD3E248")]
	private void ActivateFX()
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xD3E2AC", Offset = "0xD3E2AC", VA = "0xD3E2AC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xD3E390", Offset = "0xD3E390", VA = "0xD3E390")]
	public AgentAttackGrounded()
	{
	}
}
[Token(Token = "0x2000137")]
public class AgentMoveGrounded : MonoBehaviour
{
	[Token(Token = "0x2000138")]
	public enum BehaviorType
	{
		[Token(Token = "0x400070E")]
		Stay,
		[Token(Token = "0x400070F")]
		Chase,
		[Token(Token = "0x4000710")]
		Attack,
		[Token(Token = "0x4000711")]
		Flee
	}

	[Token(Token = "0x2000139")]
	public enum IdleType
	{
		[Token(Token = "0x4000713")]
		Patrolling,
		[Token(Token = "0x4000714")]
		Guarding,
		[Token(Token = "0x4000715")]
		Wandering,
		[Token(Token = "0x4000716")]
		None
	}

	[Token(Token = "0x200013A")]
	public delegate void AttackDelegate(float distance, float yDistance);

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool spawnOnStart;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[ShowIf("spawnOnStart")]
	public float spawnTime;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BehaviorType behaviorType;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[ReadOnly]
	public bool isInteracting;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Animation Settings")]
	public Animator theAnimator;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string speedAnimVar;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string stunAnimVar;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Idle Settings")]
	public IdleType idleType;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform[] patrolPoints;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector2 wanderTimeRange;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float wanderTime;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Header("Distance Settings")]
	private float minRadius;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float sightRadius;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float leashRadius;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float alertTime;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float alertTimer;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("-Debug-")]
	public bool drawGizmos;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool showRuntimeVariables;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	[ShowIf("showRuntimeVariables")]
	public bool canMove;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[ShowIf("showRuntimeVariables")]
	public Transform myTarget;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[ShowIf("showRuntimeVariables")]
	public Transform startLoc;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[ShowIf("showRuntimeVariables")]
	public NavMeshAgent myAgent;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[ShowIf("showRuntimeVariables")]
	public HealthSystem myHealthSystem;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[ShowIf("showRuntimeVariables")]
	public bool isReturning;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[ShowIf("showRuntimeVariables")]
	public int patrolIndex;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[ShowIf("showRuntimeVariables")]
	public Vector3 wayPoint;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[ShowIf("showRuntimeVariables")]
	public bool isStunned;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
	public bool targetOverride;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[ReadOnly]
	public float speed;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[ReadOnly]
	public float speedOriginal;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public bool showEvents;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[ShowIf("showEvents")]
	public UnityEvent stunEvent;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[ShowIf("showEvents")]
	public UnityEvent unStunEvent;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public AttackDelegate attackDelegate;

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xD3E5E4", Offset = "0xD3E5E4", VA = "0xD3E5E4")]
	public void _ModSpeed(float mod)
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0xD3E620", Offset = "0xD3E620", VA = "0xD3E620")]
	public void _ChangeSpeed(float chg)
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0xD3E63C", Offset = "0xD3E63C", VA = "0xD3E63C")]
	public void _RestoreSpeedIn(float chg)
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0xD3E698", Offset = "0xD3E698", VA = "0xD3E698")]
	public void _RestoreSpeed()
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xD3E6A4", Offset = "0xD3E6A4", VA = "0xD3E6A4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0xD3E840", Offset = "0xD3E840", VA = "0xD3E840")]
	private void CanMove()
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0xD3E84C", Offset = "0xD3E84C", VA = "0xD3E84C")]
	public void _OverrideTarget(Transform target)
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0xD3E85C", Offset = "0xD3E85C", VA = "0xD3E85C")]
	public void _UnlockTarget()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0xD3EA38", Offset = "0xD3EA38", VA = "0xD3EA38")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xD3EB3C", Offset = "0xD3EB3C", VA = "0xD3EB3C")]
	private void Think()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xD3E864", Offset = "0xD3E864", VA = "0xD3E864")]
	private void FindPlayerSingleTarget()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xD3EE84", Offset = "0xD3EE84", VA = "0xD3EE84")]
	public void Wandering()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xD3F3B0", Offset = "0xD3F3B0", VA = "0xD3F3B0")]
	public void FindNewWaypoint()
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xD3F430", Offset = "0xD3F430", VA = "0xD3F430")]
	private void GoTo(Transform target)
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0xD3DEAC", Offset = "0xD3DEAC", VA = "0xD3DEAC")]
	public void GoToMyTarget()
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0xD3F2C0", Offset = "0xD3F2C0", VA = "0xD3F2C0")]
	private void GoToStart()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xD3F0F0", Offset = "0xD3F0F0", VA = "0xD3F0F0")]
	private void RotateTowards(Transform target)
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0xD3EDE0", Offset = "0xD3EDE0", VA = "0xD3EDE0")]
	private void Patrol()
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xD3F42C", Offset = "0xD3F42C", VA = "0xD3F42C")]
	public void MoveAgent(Vector3 pos)
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xD3F434", Offset = "0xD3F434", VA = "0xD3F434")]
	public void MoveAgent(Transform pos)
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xD3F45C", Offset = "0xD3F45C", VA = "0xD3F45C")]
	private void MoveAgentBase(Vector3 pos)
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xD3F088", Offset = "0xD3F088", VA = "0xD3F088")]
	public void StopAgent(bool reallyStop = false)
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xD3F4D0", Offset = "0xD3F4D0", VA = "0xD3F4D0")]
	public void CanMoveToggle(bool chg)
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xD3F4DC", Offset = "0xD3F4DC", VA = "0xD3F4DC")]
	public void Pacify(bool chg)
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xD3F4F0", Offset = "0xD3F4F0", VA = "0xD3F4F0")]
	public void Stun()
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xD3F54C", Offset = "0xD3F54C", VA = "0xD3F54C")]
	public void _StunAmount(float chg)
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xD3F5B0", Offset = "0xD3F5B0", VA = "0xD3F5B0")]
	public void UnStun()
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xD3EF7C", Offset = "0xD3EF7C", VA = "0xD3EF7C")]
	public void SpeedSet()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xD3F5F8", Offset = "0xD3F5F8", VA = "0xD3F5F8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xD3F76C", Offset = "0xD3F76C", VA = "0xD3F76C")]
	public AgentMoveGrounded()
	{
	}
}
[Token(Token = "0x200013B")]
public class AIPhyZone : MonoBehaviour
{
	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Settings-")]
	public bool effectFlyers;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool effectGrounded;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[Foldout("-Slowing-")]
	public bool slowOnEnter;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 2f)]
	[Foldout("-Slowing-")]
	public float slowMod;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Foldout("-Slowing-")]
	public bool restoreOnExit;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[Foldout("-Stunning-")]
	public bool stunOnEnter;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Foldout("-Stunning-")]
	public float stunDuration;

	[Token(Token = "0x6000686")]
	[Address(RVA = "0xD3F8E0", Offset = "0xD3F8E0", VA = "0xD3F8E0")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0xD3FC98", Offset = "0xD3FC98", VA = "0xD3FC98")]
	public void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0xD3FDC8", Offset = "0xD3FDC8", VA = "0xD3FDC8")]
	public AIPhyZone()
	{
	}
}
[Token(Token = "0x200013C")]
public class AttackZoneOnVision : MonoBehaviour
{
	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform lookOutPoint;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Sets target 100 units above player")]
	[SerializeField]
	private bool useTargetUp;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float extraWait;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float waitTimer;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Time in Seconds before it Activates")]
	[Header("-Triggering Settings-")]
	[SerializeField]
	private float spotTime;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool isContinuous;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SerializeField]
	[ReadOnly]
	private bool hasSpotted;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[SerializeField]
	private bool isEngaged;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[ReadOnly]
	private float spotTimer;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Foldout("-UnityEvents")]
	public UnityEvent onSpot;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Foldout("-UnityEvents")]
	public UnityEvent onLoseVision;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Foldout("-UnityEvents")]
	public UnityEvent onEngage;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Target Object cannot Ignore RayCast")]
	public Transform targetPlayer;

	[Token(Token = "0x6000689")]
	[Address(RVA = "0xD3FDD8", Offset = "0xD3FDD8", VA = "0xD3FDD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0xD3FEC0", Offset = "0xD3FEC0", VA = "0xD3FEC0")]
	public void _SetTarget(Transform chg)
	{
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0xD3FEC8", Offset = "0xD3FEC8", VA = "0xD3FEC8")]
	public void _RemoveTarget()
	{
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0xD3FED4", Offset = "0xD3FED4", VA = "0xD3FED4")]
	private bool CheckLine(Vector3 where)
	{
		return default(bool);
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0xD40054", Offset = "0xD40054", VA = "0xD40054")]
	private void Update()
	{
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0xD401C8", Offset = "0xD401C8", VA = "0xD401C8")]
	public void Spotted()
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0xD4019C", Offset = "0xD4019C", VA = "0xD4019C")]
	public void VisionLost()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0xD40180", Offset = "0xD40180", VA = "0xD40180")]
	public void OnEngage()
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0xD401F4", Offset = "0xD401F4", VA = "0xD401F4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0xD40278", Offset = "0xD40278", VA = "0xD40278")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0xD40318", Offset = "0xD40318", VA = "0xD40318")]
	public AttackZoneOnVision()
	{
	}
}
[Token(Token = "0x200013D")]
public class ComplicatedAgent : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200013E")]
	public class AttackInfo
	{
		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string attackAnimTrigger;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject attackFX;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float attackTime;

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xD42164", Offset = "0xD42164", VA = "0xD42164")]
		public AttackInfo()
		{
		}
	}

	[Token(Token = "0x200013F")]
	public enum BehaviorType
	{
		[Token(Token = "0x400075B")]
		Relaxed,
		[Token(Token = "0x400075C")]
		Curious,
		[Token(Token = "0x400075D")]
		Aggressive,
		[Token(Token = "0x400075E")]
		Afraid,
		[Token(Token = "0x400075F")]
		Asleep
	}

	[Token(Token = "0x2000140")]
	public enum IdleType
	{
		[Token(Token = "0x4000761")]
		Patrolling,
		[Token(Token = "0x4000762")]
		Guarding,
		[Token(Token = "0x4000763")]
		Wandering,
		[Token(Token = "0x4000764")]
		None
	}

	[Token(Token = "0x2000141")]
	[CompilerGenerated]
	private sealed class <AttackOver>d__79 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttackInfo[] infos;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int index;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ComplicatedAgent <>4__this;

		[Token(Token = "0x17000051")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006C3")]
			[Address(RVA = "0xD42354", Offset = "0xD42354", VA = "0xD42354", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006C5")]
			[Address(RVA = "0xD4239C", Offset = "0xD4239C", VA = "0xD4239C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xD4157C", Offset = "0xD4157C", VA = "0xD4157C")]
		[DebuggerHidden]
		public <AttackOver>d__79(int <>1__state)
		{
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xD421C4", Offset = "0xD421C4", VA = "0xD421C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xD421C8", Offset = "0xD421C8", VA = "0xD421C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xD4235C", Offset = "0xD4235C", VA = "0xD4235C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool spawnOnStart;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[ShowIf("spawnOnStart")]
	public float spawnTime;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BehaviorType behaviorType;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool prioritizeMelee;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AttackInfo[] meleeAttackInfos;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AttackInfo[] cleaveAttackInfos;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AttackInfo[] rangedAttackInfos;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector2 timeBetweenAttacks;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AttackInfo currentAttack;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float attackTime;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool isAttacking;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Animation Settings")]
	public Animator theAnimator;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string speedAnimVar;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string stunAnimVar;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Idle Settings")]
	public IdleType idleType;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform[] patrolPoints;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Vector2 wanderTimeRange;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float wanderTime;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Header("Distance Settings")]
	private float minRadius;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float meleeAttackRadius;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float cleaveAttackRadius;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float cleaveAttackHeight;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float cleaveCD;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float rangedAttackRadius;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float sightRadius;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float leashRadius;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float alertTime;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float alertTimer;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[Header("-Debug-")]
	public bool drawGizmos;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
	public bool showRuntimeVariables;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB6")]
	[ShowIf("showRuntimeVariables")]
	public bool canMove;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[ShowIf("showRuntimeVariables")]
	public Transform myTarget;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[ShowIf("showRuntimeVariables")]
	public Transform startLoc;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[ShowIf("showRuntimeVariables")]
	public NavMeshAgent myAgent;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[ShowIf("showRuntimeVariables")]
	public HealthSystem myHealthSystem;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[ShowIf("showRuntimeVariables")]
	public bool isReturning;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[ShowIf("showRuntimeVariables")]
	public int patrolIndex;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[ShowIf("showRuntimeVariables")]
	public Vector3 wayPoint;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public bool targetOverride;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[ReadOnly]
	public float speed;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[ReadOnly]
	public float speedOriginal;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[Foldout("-UnityEvents-")]
	public UnityEvent stunEvent;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[Foldout("-UnityEvents-")]
	public UnityEvent unStunEvent;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private IEnumerator attackCoroutine;

	[Token(Token = "0x6000694")]
	[Address(RVA = "0xD40340", Offset = "0xD40340", VA = "0xD40340")]
	public void _ModSpeed(float mod)
	{
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0xD4037C", Offset = "0xD4037C", VA = "0xD4037C")]
	public void _ChangeSpeed(float chg)
	{
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0xD40398", Offset = "0xD40398", VA = "0xD40398")]
	public void _RestoreSpeedIn(float chg)
	{
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0xD3FBD0", Offset = "0xD3FBD0", VA = "0xD3FBD0")]
	public void _RestoreSpeed()
	{
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xD403F4", Offset = "0xD403F4", VA = "0xD403F4", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xD4058C", Offset = "0xD4058C", VA = "0xD4058C")]
	private void CanMove()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0xD40598", Offset = "0xD40598", VA = "0xD40598")]
	public void _OverrideTarget(Transform target)
	{
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0xD405A8", Offset = "0xD405A8", VA = "0xD405A8")]
	public void _UnlockTarget()
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0xD40784", Offset = "0xD40784", VA = "0xD40784")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0xD408A0", Offset = "0xD408A0", VA = "0xD408A0")]
	private void Think(Transform target)
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0xD405B0", Offset = "0xD405B0", VA = "0xD405B0")]
	private void FindPlayerSingleTarget()
	{
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0xD40CCC", Offset = "0xD40CCC", VA = "0xD40CCC")]
	public void Wandering()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0xD410B8", Offset = "0xD410B8", VA = "0xD410B8")]
	public void FindNewWaypoint()
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0xD41134", Offset = "0xD41134", VA = "0xD41134")]
	private void GoTo(Transform target)
	{
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0xD40F9C", Offset = "0xD40F9C", VA = "0xD40F9C")]
	private void GoToMyTarget()
	{
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0xD40FC0", Offset = "0xD40FC0", VA = "0xD40FC0")]
	private void GoToStart()
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0xD40DCC", Offset = "0xD40DCC", VA = "0xD40DCC")]
	private void RotateTowards(Transform target)
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0xD40C20", Offset = "0xD40C20", VA = "0xD40C20")]
	private void Patrol()
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0xD41140", Offset = "0xD41140", VA = "0xD41140", Slot = "5")]
	public virtual void MoveAgent(Vector3 pos)
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0xD4114C", Offset = "0xD4114C", VA = "0xD4114C", Slot = "6")]
	public virtual void MoveAgent(Transform pos)
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0xD4117C", Offset = "0xD4117C", VA = "0xD4117C", Slot = "7")]
	public virtual void MoveAgentRPC(Vector3 pos)
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0xD411F0", Offset = "0xD411F0", VA = "0xD411F0", Slot = "8")]
	public virtual void StopAgent(bool reallyStop = false)
	{
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0xD41258", Offset = "0xD41258", VA = "0xD41258")]
	public void CanMoveToggle(bool chg)
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0xD41264", Offset = "0xD41264", VA = "0xD41264")]
	public void Pacify(bool chg)
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0xD4127C", Offset = "0xD4127C", VA = "0xD4127C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0xD3FBDC", Offset = "0xD3FBDC", VA = "0xD3FBDC")]
	public void Stun()
	{
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xD3FC34", Offset = "0xD3FC34", VA = "0xD3FC34")]
	public void _StunAmount(float chg)
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xD412AC", Offset = "0xD412AC", VA = "0xD412AC")]
	public void UnStun()
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xD41308", Offset = "0xD41308", VA = "0xD41308", Slot = "9")]
	public virtual void MeleeAttack()
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xD41318", Offset = "0xD41318", VA = "0xD41318", Slot = "10")]
	public virtual void CleaveAttack()
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xD41328", Offset = "0xD41328", VA = "0xD41328", Slot = "11")]
	public virtual void RangedAttack()
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xD41338", Offset = "0xD41338", VA = "0xD41338", Slot = "12")]
	public virtual void Attack(AttackInfo[] infos)
	{
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xD414E4", Offset = "0xD414E4", VA = "0xD414E4")]
	[IteratorStateMachine(typeof(<AttackOver>d__79))]
	private IEnumerator AttackOver(int index, AttackInfo[] infos)
	{
		return null;
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xD415A4", Offset = "0xD415A4", VA = "0xD415A4", Slot = "13")]
	public virtual void AttackAnimation(int index, AttackInfo[] infos)
	{
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0xD4165C", Offset = "0xD4165C", VA = "0xD4165C", Slot = "14")]
	public virtual void SpeedSet()
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0xD41768", Offset = "0xD41768", VA = "0xD41768")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0xD41998", Offset = "0xD41998", VA = "0xD41998")]
	public Transform GetClosetTarget(Transform[] targets)
	{
		return null;
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0xD41A78", Offset = "0xD41A78", VA = "0xD41A78")]
	public HealthSystem GetClosetKillableTarget(HealthSystem[] targets)
	{
		return null;
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0xD41B64", Offset = "0xD41B64", VA = "0xD41B64")]
	public bool IsPossiblePath(Vector3 hit)
	{
		return default(bool);
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0xD41CDC", Offset = "0xD41CDC", VA = "0xD41CDC")]
	private bool CalculateNewPath(Vector3 hit)
	{
		return default(bool);
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0xD41BB4", Offset = "0xD41BB4", VA = "0xD41BB4")]
	private bool RandomPoint(Vector3 center, float range, out Vector3 result)
	{
		return default(bool);
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0xD41D88", Offset = "0xD41D88", VA = "0xD41D88")]
	private void LookForFoe()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xD4209C", Offset = "0xD4209C", VA = "0xD4209C")]
	public ComplicatedAgent()
	{
	}
}
[Token(Token = "0x2000142")]
public class EnemyHealth : MonoBehaviour
{
	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxHealth;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public float curHealth;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Slider healthBar;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool hitTween;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Tween theTween;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] destroyWith;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject deathEffect;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject dropOnDeath;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CharacterController character;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Animator animations;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool destroyOnDeath;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	[HideInInspector]
	public bool isDead;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ShadowSpawner spawner;

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0xD423A4", Offset = "0xD423A4", VA = "0xD423A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0xD42540", Offset = "0xD42540", VA = "0xD42540")]
	private void SetSpawner(GameObject source)
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0xD425A4", Offset = "0xD425A4", VA = "0xD425A4")]
	private void TakeDamage(float dmg)
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0xD429E8", Offset = "0xD429E8", VA = "0xD429E8")]
	public EnemyHealth()
	{
	}
}
[Token(Token = "0x2000143")]
public class FishMotorScript : MonoBehaviour
{
	[Token(Token = "0x2000144")]
	[CompilerGenerated]
	private sealed class <FirstRun>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FishMotorScript <>4__this;

		[Token(Token = "0x17000053")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006D6")]
			[Address(RVA = "0xD4358C", Offset = "0xD4358C", VA = "0xD4358C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006D8")]
			[Address(RVA = "0xD435D4", Offset = "0xD435D4", VA = "0xD435D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xD42B54", Offset = "0xD42B54", VA = "0xD42B54")]
		[DebuggerHidden]
		public <FirstRun>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xD434B4", Offset = "0xD434B4", VA = "0xD434B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xD434B8", Offset = "0xD434B8", VA = "0xD434B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xD43594", Offset = "0xD43594", VA = "0xD43594", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000145")]
	[CompilerGenerated]
	private sealed class <Wonder>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FishMotorScript <>4__this;

		[Token(Token = "0x17000055")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006DC")]
			[Address(RVA = "0xD436F0", Offset = "0xD436F0", VA = "0xD436F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006DE")]
			[Address(RVA = "0xD43738", Offset = "0xD43738", VA = "0xD43738", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xD4343C", Offset = "0xD4343C", VA = "0xD4343C")]
		[DebuggerHidden]
		public <Wonder>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xD435DC", Offset = "0xD435DC", VA = "0xD435DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xD435E0", Offset = "0xD435E0", VA = "0xD435E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xD436F8", Offset = "0xD436F8", VA = "0xD436F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer myRender;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 _wayPoint;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _speed;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool _dived;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float _damping;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool _move;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float _minDamping;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float _maxDamping;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _stuckCounter;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float _lerpCounter;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float _targetSpeed;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float _minSpeed;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float _maxSpeed;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float _avoidValue;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float _avoidDistance;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float avoidForceV;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float avoidForceH;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float wonderRadius;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float _waypointDistance;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float _soarTimer;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float moveAdd;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 startPos;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private RaycastHit hit;

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0xD429FC", Offset = "0xD429FC", VA = "0xD429FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0xD42AE0", Offset = "0xD42AE0", VA = "0xD42AE0")]
	[IteratorStateMachine(typeof(<FirstRun>d__24))]
	private IEnumerator FirstRun()
	{
		return null;
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0xD42B7C", Offset = "0xD42B7C", VA = "0xD42B7C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0xD432B8", Offset = "0xD432B8", VA = "0xD432B8")]
	private void ChangeHeading(Vector3 chg)
	{
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0xD432A4", Offset = "0xD432A4", VA = "0xD432A4")]
	private float Accelerate(float distance)
	{
		return default(float);
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0xD43364", Offset = "0xD43364", VA = "0xD43364")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0xD433E0", Offset = "0xD433E0", VA = "0xD433E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0xD42A5C", Offset = "0xD42A5C", VA = "0xD42A5C")]
	[IteratorStateMachine(typeof(<Wonder>d__30))]
	private IEnumerator Wonder(float delay)
	{
		return null;
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0xD43464", Offset = "0xD43464", VA = "0xD43464")]
	public FishMotorScript()
	{
	}
}
[Token(Token = "0x2000146")]
public class FlyingChaseAI : FlyingMovementAI
{
	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private bool targetOverride;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[Header("-Distances-")]
	public float aggroDistance;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	public float leashDistance;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[Header("-Chase System-")]
	public bool SpottedTarget;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
	public bool isPayingAttention;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x172")]
	private bool isFiring;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[Header("-Shooting-")]
	public SimpleShooter shooter;

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0xD43740", Offset = "0xD43740", VA = "0xD43740", Slot = "4")]
	public override void Start()
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xD438E8", Offset = "0xD438E8", VA = "0xD438E8")]
	public void _OverrideTarget(Transform newTarget)
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xD439A0", Offset = "0xD439A0", VA = "0xD439A0")]
	public void _UnlockTarget()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0xD43A34", Offset = "0xD43A34", VA = "0xD43A34", Slot = "6")]
	public override void FixedUpdate()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0xD43A44", Offset = "0xD43A44", VA = "0xD43A44")]
	public void ChaseThink()
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0xD4385C", Offset = "0xD4385C", VA = "0xD4385C")]
	private void GetNewTarget()
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0xD43E1C", Offset = "0xD43E1C", VA = "0xD43E1C", Slot = "10")]
	public virtual void ChaseTarget()
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0xD445F0", Offset = "0xD445F0", VA = "0xD445F0", Slot = "9")]
	public override void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0xD4490C", Offset = "0xD4490C", VA = "0xD4490C")]
	public FlyingChaseAI()
	{
	}
}
[Token(Token = "0x2000147")]
public class FlyingChaseAIOLD : FlyingMovementAI
{
	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private bool targetOverride;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[Header("-Distances-")]
	public float aggroDistance;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	public float leashDistance;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[Header("-Chase System-")]
	public bool SpottedTarget;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
	public bool isPayingAttention;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x172")]
	private bool isFiring;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[Header("-Shooting-")]
	public SimpleShooter shooter;

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xD44A18", Offset = "0xD44A18", VA = "0xD44A18", Slot = "4")]
	public override void Start()
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0xD44AC0", Offset = "0xD44AC0", VA = "0xD44AC0")]
	public void _OverrideTarget(Transform newTarget)
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xD44B78", Offset = "0xD44B78", VA = "0xD44B78")]
	public void _UnlockTarget()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xD44C0C", Offset = "0xD44C0C", VA = "0xD44C0C", Slot = "6")]
	public override void FixedUpdate()
	{
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xD44C1C", Offset = "0xD44C1C", VA = "0xD44C1C")]
	public void ChaseThink()
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0xD44A34", Offset = "0xD44A34", VA = "0xD44A34")]
	private void GetNewTarget()
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0xD44E6C", Offset = "0xD44E6C", VA = "0xD44E6C", Slot = "10")]
	public virtual void ChaseTarget()
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xD44FE8", Offset = "0xD44FE8", VA = "0xD44FE8", Slot = "9")]
	public override void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xD45048", Offset = "0xD45048", VA = "0xD45048")]
	public FlyingChaseAIOLD()
	{
	}
}
[Token(Token = "0x2000148")]
public class FlyingMovementAI : MonoBehaviour
{
	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Targets-")]
	public Transform target;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float targetDistance;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("-Orbit Settings-")]
	[SerializeField]
	private bool showOrbitSettings;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[ShowIf("showOrbitSettings")]
	private bool orbitInsteadofWander;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ShowIf("showOrbitSettings")]
	[SerializeField]
	private float orbitSpeed;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[ShowIf("showOrbitSettings")]
	public float orbitDistance;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("showOrbitSettings")]
	[SerializeField]
	private bool alterOrbitalDistance;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[ShowIf("showOrbitSettings")]
	[SerializeField]
	private float orbitChangeSpeed;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 desiredPosition;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float radius;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float storedRadius;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Header("-Movement Settings-")]
	public float speed;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float turnSpeed;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 axis;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 newAxis;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public ForceMode force;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Foldout("-Animation Settings-")]
	[SerializeField]
	private Animator theAnimator;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Foldout("-Animation Settings-")]
	[AnimatorParam("theAnimator")]
	public string speedAnimVar;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AnimatorParam("theAnimator")]
	[Foldout("-Animation Settings-")]
	public string stunAnimVar;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("-Patrol Settings-")]
	public bool shouldPatrol;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	[ShowIf("shouldPatrol")]
	[SerializeField]
	private bool wonderAtPoint;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[ShowIf("shouldPatrol")]
	[SerializeField]
	private Transform[] patrolPoints;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[ShowIf("shouldPatrol")]
	private int curIndex;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("-Avoid Settings-")]
	public Light spotLightViewCone;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float avoidPower;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool useWhiskers;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[ShowIf("useWhiskers")]
	public float detectDistance;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[ShowIf("useWhiskers")]
	public float whiskerRadius;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[ShowIf("useWhiskers")]
	public bool extraSenstivity;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[HideInInspector]
	public Vector3[] CheckPoints;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[HideInInspector]
	public Vector3 newHeading;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[HideInInspector]
	public Vector3 wayPoint;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[Header("-AI Settings-")]
	public bool canMove;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float wanderRadius;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float wanderTimeOut;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public bool wanderNoY;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float wanderTime;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[HideInInspector]
	public Vector3 originalStart;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool showDebug;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private RaycastHit hit;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[HideInInspector]
	public float speedOriginal;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[Foldout("-UnityEvents-")]
	public UnityEvent stunEvent;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[Foldout("-UnityEvents-")]
	public UnityEvent unStunEvent;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Rigidbody body;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private SphereCollider bodyCollider;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Vector3 startPos;

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xD3FB30", Offset = "0xD3FB30", VA = "0xD3FB30")]
	public void _Stun()
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xD45054", Offset = "0xD45054", VA = "0xD45054")]
	public void _UnStun()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xD3FB6C", Offset = "0xD3FB6C", VA = "0xD3FB6C")]
	public void _StunAmount(float chg)
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xD45094", Offset = "0xD45094", VA = "0xD45094")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xD4514C", Offset = "0xD4514C", VA = "0xD4514C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xD45158", Offset = "0xD45158", VA = "0xD45158")]
	public void _ModSpeed(float chg)
	{
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xD45168", Offset = "0xD45168", VA = "0xD45168")]
	public void _ChangeSpeed(float chg)
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xD45170", Offset = "0xD45170", VA = "0xD45170")]
	public void _RestoreSpeedIn(float chg)
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xD3FDBC", Offset = "0xD3FDBC", VA = "0xD3FDBC")]
	public void _RestoreSpeed()
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xD4375C", Offset = "0xD4375C", VA = "0xD4375C", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xD45A4C", Offset = "0xD45A4C", VA = "0xD45A4C", Slot = "5")]
	public virtual void SpeedSet()
	{
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xD45B58", Offset = "0xD45B58", VA = "0xD45B58", Slot = "6")]
	public virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xD45A1C", Offset = "0xD45A1C", VA = "0xD45A1C")]
	public void RefreshDistances()
	{
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0xD45B8C", Offset = "0xD45B8C", VA = "0xD45B8C", Slot = "7")]
	public virtual void Think()
	{
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0xD45CFC", Offset = "0xD45CFC", VA = "0xD45CFC", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0xD45D38", Offset = "0xD45D38", VA = "0xD45D38")]
	private void NormalMove()
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0xD43CF8", Offset = "0xD43CF8", VA = "0xD43CF8")]
	internal void Wandering()
	{
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0xD45C1C", Offset = "0xD45C1C", VA = "0xD45C1C")]
	internal void GoToTarget()
	{
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0xD43C94", Offset = "0xD43C94", VA = "0xD43C94")]
	internal void GoToVector3(Vector3 whereto)
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0xD46534", Offset = "0xD46534", VA = "0xD46534", Slot = "8")]
	internal virtual void PatrolSystem()
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xD43F98", Offset = "0xD43F98", VA = "0xD43F98")]
	internal void RotateAround()
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xD466F8", Offset = "0xD466F8", VA = "0xD466F8")]
	internal void MoveTowardsTarget(Vector3 target)
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xD4669C", Offset = "0xD4669C", VA = "0xD4669C")]
	public static Vector3 RotatePointAroundPivot(Vector3 point, Vector3 pivot, Quaternion angle)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xD44578", Offset = "0xD44578", VA = "0xD44578")]
	internal void Chase()
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xD451CC", Offset = "0xD451CC", VA = "0xD451CC")]
	internal void FindNewWanderPoint()
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xD46A28", Offset = "0xD46A28", VA = "0xD46A28")]
	public void ChangeTarget(Transform chg)
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xD4629C", Offset = "0xD4629C", VA = "0xD4629C")]
	internal void AvoidAI()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0xD46C48", Offset = "0xD46C48", VA = "0xD46C48")]
	private Ray ReturnSpotLightRay(Light light)
	{
		return default(Ray);
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0xD46A30", Offset = "0xD46A30", VA = "0xD46A30")]
	private void RayCheck(Vector3 adder)
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0xD46E3C", Offset = "0xD46E3C", VA = "0xD46E3C")]
	private Vector3 GetPointOnUnitSphereCap(Quaternion targetDirection, float angle)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0xD44650", Offset = "0xD44650", VA = "0xD44650", Slot = "9")]
	public virtual void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xD45220", Offset = "0xD45220", VA = "0xD45220")]
	private void WhiskerCreation()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0xD44918", Offset = "0xD44918", VA = "0xD44918")]
	public FlyingMovementAI()
	{
	}
}
[Token(Token = "0x2000149")]
public class FlyingMovementAIOLD : MonoBehaviour
{
	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Targets-")]
	public Transform target;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float targetDistance;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CharacterController yourController;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("-Orbit Settings-")]
	[SerializeField]
	private bool showOrbitSettings;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[ShowIf("showOrbitSettings")]
	private bool orbitInsteadofWander;

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[ShowIf("showOrbitSettings")]
	[SerializeField]
	private float orbitSpeed;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ShowIf("showOrbitSettings")]
	public float orbitDistance;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[ShowIf("showOrbitSettings")]
	[SerializeField]
	private bool alterOrbitalDistance;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[ShowIf("showOrbitSettings")]
	private float orbitChangeSpeed;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 desiredPosition;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float radius;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float storedRadius;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("-Movement Settings-")]
	public float speed;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float turnSpeed;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 axis;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 newAxis;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Foldout("-Animation Settings-")]
	[SerializeField]
	private Animator theAnimator;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Foldout("-Animation Settings-")]
	[AnimatorParam("theAnimator")]
	public string speedAnimVar;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Foldout("-Animation Settings-")]
	[AnimatorParam("theAnimator")]
	public string stunAnimVar;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("-Patrol Settings-")]
	public bool shouldPatrol;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	[SerializeField]
	[ShowIf("shouldPatrol")]
	private bool wonderAtPoint;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[ShowIf("shouldPatrol")]
	[SerializeField]
	private Transform[] patrolPoints;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[ShowIf("shouldPatrol")]
	private int curIndex;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("-Avoid Settings-")]
	public Light spotLightViewCone;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float avoidPower;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public bool useWhiskers;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[ShowIf("useWhiskers")]
	public float detectDistance;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[ShowIf("useWhiskers")]
	public float whiskerRadius;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[ShowIf("useWhiskers")]
	public bool extraSenstivity;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[HideInInspector]
	public Vector3[] CheckPoints;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[HideInInspector]
	public Vector3 newHeading;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[HideInInspector]
	public Vector3 wayPoint;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[Header("-AI Settings-")]
	public bool canMove;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float wanderRadius;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float wanderTimeOut;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public bool wanderNoY;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float wanderTime;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	[HideInInspector]
	public Vector3 originalStart;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public bool showDebug;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private RaycastHit hit;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[HideInInspector]
	public float speedOriginal;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[Foldout("-UnityEvents-")]
	public UnityEvent stunEvent;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[Foldout("-UnityEvents-")]
	public UnityEvent unStunEvent;

	[Token(Token = "0x6000712")]
	[Address(RVA = "0xD46F78", Offset = "0xD46F78", VA = "0xD46F78")]
	public void _Stun()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0xD46FB4", Offset = "0xD46FB4", VA = "0xD46FB4")]
	public void _UnStun()
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0xD46FF4", Offset = "0xD46FF4", VA = "0xD46FF4")]
	public void _StunAmount(float chg)
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0xD47058", Offset = "0xD47058", VA = "0xD47058")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0xD47064", Offset = "0xD47064", VA = "0xD47064")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0xD47070", Offset = "0xD47070", VA = "0xD47070")]
	public void _ModSpeed(float chg)
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0xD47080", Offset = "0xD47080", VA = "0xD47080")]
	public void _ChangeSpeed(float chg)
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0xD47088", Offset = "0xD47088", VA = "0xD47088")]
	public void _RestoreSpeedIn(float chg)
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0xD470E4", Offset = "0xD470E4", VA = "0xD470E4")]
	public void _RestoreSpeed()
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0xD470F0", Offset = "0xD470F0", VA = "0xD470F0", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0xD47AA0", Offset = "0xD47AA0", VA = "0xD47AA0", Slot = "5")]
	public virtual void SpeedSet()
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0xD47BAC", Offset = "0xD47BAC", VA = "0xD47BAC", Slot = "6")]
	public virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xD47A70", Offset = "0xD47A70", VA = "0xD47A70")]
	public void RefreshDistances()
	{
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xD47BE0", Offset = "0xD47BE0", VA = "0xD47BE0", Slot = "7")]
	public virtual void Think()
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xD47E74", Offset = "0xD47E74", VA = "0xD47E74")]
	private void NormalMove()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xD47D50", Offset = "0xD47D50", VA = "0xD47D50")]
	internal void Wandering()
	{
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xD47C70", Offset = "0xD47C70", VA = "0xD47C70")]
	internal void GoToTarget()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xD48304", Offset = "0xD48304", VA = "0xD48304")]
	internal void GoToVector3(Vector3 whereto)
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xD48368", Offset = "0xD48368", VA = "0xD48368", Slot = "8")]
	internal virtual void PatrolSystem()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xD484D0", Offset = "0xD484D0", VA = "0xD484D0")]
	internal void RotateAround()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xD48B0C", Offset = "0xD48B0C", VA = "0xD48B0C")]
	internal void MoveTowardsTarget(Vector3 target)
	{
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xD48AB0", Offset = "0xD48AB0", VA = "0xD48AB0")]
	public static Vector3 RotatePointAroundPivot(Vector3 point, Vector3 pivot, Quaternion angle)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xD48C58", Offset = "0xD48C58", VA = "0xD48C58")]
	internal void Chase()
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xD47220", Offset = "0xD47220", VA = "0xD47220")]
	internal void FindNewWanderPoint()
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xD48CD0", Offset = "0xD48CD0", VA = "0xD48CD0")]
	public void ChangeTarget(Transform chg)
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0xD4806C", Offset = "0xD4806C", VA = "0xD4806C")]
	internal void AvoidAI()
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0xD48EF0", Offset = "0xD48EF0", VA = "0xD48EF0")]
	private Ray ReturnSpotLightRay(Light light)
	{
		return default(Ray);
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0xD48CD8", Offset = "0xD48CD8", VA = "0xD48CD8")]
	private void RayCheck(Vector3 adder)
	{
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xD490E4", Offset = "0xD490E4", VA = "0xD490E4")]
	private Vector3 GetPointOnUnitSphereCap(Quaternion targetDirection, float angle)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xD49220", Offset = "0xD49220", VA = "0xD49220", Slot = "9")]
	public virtual void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0xD47274", Offset = "0xD47274", VA = "0xD47274")]
	private void WhiskerCreation()
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xD494DC", Offset = "0xD494DC", VA = "0xD494DC")]
	public FlyingMovementAIOLD()
	{
	}
}
[Token(Token = "0x200014A")]
public class PlayerAwareness : MonoBehaviour
{
	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[DisableIf("useUpdate")]
	public bool useFixedUpdate;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[DisableIf("useFixedUpdate")]
	public bool useUpdate;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideIf("useFixedUpdate")]
	public float checksPerSecond;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float radius;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnPlayerEnter;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnPlayerExit;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private VRPlayerRig player;

	[Token(Token = "0x6000732")]
	[Address(RVA = "0xD495DC", Offset = "0xD495DC", VA = "0xD495DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0xD49670", Offset = "0xD49670", VA = "0xD49670")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0xD49678", Offset = "0xD49678", VA = "0xD49678")]
	private void Update()
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0xD49984", Offset = "0xD49984", VA = "0xD49984")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0xD49688", Offset = "0xD49688", VA = "0xD49688")]
	private void RunCheck()
	{
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0xD49994", Offset = "0xD49994", VA = "0xD49994")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0xD499E8", Offset = "0xD499E8", VA = "0xD499E8")]
	public PlayerAwareness()
	{
	}
}
[Token(Token = "0x200014B")]
public class SimpleFollow : MonoBehaviour
{
	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform targetToFollow;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform targetToLookAt;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float followDistance;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float followSpeed;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float lookTime;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool isFollowing;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool isLooking;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool findPlayer;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float teleportRange;

	[Token(Token = "0x6000739")]
	[Address(RVA = "0xD499FC", Offset = "0xD499FC", VA = "0xD499FC")]
	private void Start()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0xD49B14", Offset = "0xD49B14", VA = "0xD49B14")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0xD49E48", Offset = "0xD49E48", VA = "0xD49E48")]
	public void FindPlayer()
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0xD49F68", Offset = "0xD49F68", VA = "0xD49F68")]
	public void ChangeFollowTarget(Transform target)
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0xD49F70", Offset = "0xD49F70", VA = "0xD49F70")]
	public void ChangeLookTarget(Transform target)
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0xD49F78", Offset = "0xD49F78", VA = "0xD49F78")]
	public SimpleFollow()
	{
	}
}
[Token(Token = "0x200014C")]
public class AnalyticComponent : MonoBehaviour
{
	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Label("Event/Action")]
	public string eventID;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("-EventHolder-")]
	public EventHolder3lb myHolder;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Label("Off Event/Action")]
	public bool runOff;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("runOff")]
	public string eventIDOff;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("-Complex Event-")]
	public bool sendName;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("sendName")]
	public string objectNameString;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("sendName")]
	public bool sendExtraParam;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ShowIf("sendExtraParam")]
	public string extraParam;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("-Trigger-")]
	public bool doOnTriggered;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[ShowIf("doOnTriggered")]
	public bool isOneShot;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	[ShowIf("doOnTriggered")]
	[ReadOnly]
	public bool wasTriggered;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[NaughtyAttributes.Tag]
	[ShowIf("doOnTriggered")]
	public string searchTag;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("-Enable/Disable-")]
	public bool sendOnEnable;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[ShowIf("sendOnEnable")]
	public string enableMessage;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool sendOnDisable;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[ShowIf("sendOnDisable")]
	public string disableMessage;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("-IsTimer-")]
	public bool isTimer;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[ReadOnly]
	[ShowIf("isTimer")]
	public float timer;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[ShowIf("isTimer")]
	[ReadOnly]
	public bool timerOn;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	[Header("-Distance-")]
	public bool trackDistance;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[ReadOnly]
	[Tooltip("Distance in Meters")]
	[ShowIf("trackDistance")]
	public float distance;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("Distance in Meters")]
	[ShowIf("trackDistance")]
	[ReadOnly]
	public bool trackingDistance;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("-Counter-")]
	[ReadOnly]
	public int currentCount;

	[Token(Token = "0x600073F")]
	[Address(RVA = "0xD49FA0", Offset = "0xD49FA0", VA = "0xD49FA0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0xD4A0E0", Offset = "0xD4A0E0", VA = "0xD4A0E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xD4A1E0", Offset = "0xD4A1E0", VA = "0xD4A1E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xD4A2C8", Offset = "0xD4A2C8", VA = "0xD4A2C8")]
	public void _SendString(string chg)
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xD4A3AC", Offset = "0xD4A3AC", VA = "0xD4A3AC")]
	public void _SendInt(int chg)
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xD4A4FC", Offset = "0xD4A4FC", VA = "0xD4A4FC")]
	public void _SendFloat(float chg)
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0xD4A50C", Offset = "0xD4A50C", VA = "0xD4A50C")]
	public void _SendBool(bool chg)
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xD4A3C4", Offset = "0xD4A3C4", VA = "0xD4A3C4")]
	private void InternalSendEventComplex(string chg, float floatData = 0f, int countData = 0, bool boolData = false)
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xD4A53C", Offset = "0xD4A53C", VA = "0xD4A53C")]
	public void _SendEvent()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xD4A0F4", Offset = "0xD4A0F4", VA = "0xD4A0F4")]
	private void InternalSendEvent(string chg)
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xD4A630", Offset = "0xD4A630", VA = "0xD4A630")]
	public void _AddToCount()
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xD4A640", Offset = "0xD4A640", VA = "0xD4A640")]
	public void _ResetCount()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xD4A2A0", Offset = "0xD4A2A0", VA = "0xD4A2A0")]
	public void _SendCount()
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xD4A648", Offset = "0xD4A648", VA = "0xD4A648")]
	public void _SendEventOff()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0xD4A650", Offset = "0xD4A650", VA = "0xD4A650")]
	public void _SendEventCustom(string chg)
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xD4A654", Offset = "0xD4A654", VA = "0xD4A654")]
	public void _StartTimer()
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0xD4A248", Offset = "0xD4A248", VA = "0xD4A248")]
	public void _StopTimer()
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0xD4A678", Offset = "0xD4A678", VA = "0xD4A678")]
	public void _StartDistanceTrack()
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0xD4A274", Offset = "0xD4A274", VA = "0xD4A274")]
	public void _StopDistanceTrack()
	{
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0xD4A6C8", Offset = "0xD4A6C8", VA = "0xD4A6C8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0xD4A728", Offset = "0xD4A728", VA = "0xD4A728")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0xD4A83C", Offset = "0xD4A83C", VA = "0xD4A83C")]
	public AnalyticComponent()
	{
	}
}
[Token(Token = "0x200014D")]
public class AnalyticPlayerDistance : MonoBehaviour
{
	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool trackingDistance;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Label("Ignore if Greater Than")]
	public float distanceIgnore;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string extraText;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[ReadOnly]
	[SerializeField]
	private float distanceHolder;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float distance;

	[Token(Token = "0x6000755")]
	[Address(RVA = "0xD4A960", Offset = "0xD4A960", VA = "0xD4A960")]
	private void Start()
	{
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0xD4AA04", Offset = "0xD4AA04", VA = "0xD4AA04")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0xD4AB98", Offset = "0xD4AB98", VA = "0xD4AB98")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xD4ACF4", Offset = "0xD4ACF4", VA = "0xD4ACF4")]
	private void SendDistance(Scene current)
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0xD4ACF8", Offset = "0xD4ACF8", VA = "0xD4ACF8")]
	private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xD4AB9C", Offset = "0xD4AB9C", VA = "0xD4AB9C")]
	[Button(null, EButtonEnableMode.Always)]
	private void SendAnalytic()
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0xD4AD70", Offset = "0xD4AD70", VA = "0xD4AD70")]
	public AnalyticPlayerDistance()
	{
	}
}
[Token(Token = "0x200014E")]
public class VaultAnalytics : MonoBehaviour
{
	[Token(Token = "0x200014F")]
	[CompilerGenerated]
	private sealed class <SendData>d__67 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string url;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public WWWForm form;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VaultAnalytics <>4__this;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<string> callBackOnFinish;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <www>5__2;

		[Token(Token = "0x17000057")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600078C")]
			[Address(RVA = "0xD4DB28", Offset = "0xD4DB28", VA = "0xD4DB28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600078E")]
			[Address(RVA = "0xD4DB70", Offset = "0xD4DB70", VA = "0xD4DB70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xD4D830", Offset = "0xD4D830", VA = "0xD4D830")]
		[DebuggerHidden]
		public <SendData>d__67(int <>1__state)
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xD4D858", Offset = "0xD4D858", VA = "0xD4D858", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xD4D874", Offset = "0xD4D874", VA = "0xD4D874", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xD4DA78", Offset = "0xD4DA78", VA = "0xD4DA78")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xD4DB30", Offset = "0xD4DB30", VA = "0xD4DB30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Logins-")]
	public string userName;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string password;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string source;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("-TestName-")]
	public string testType;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Is Registered")]
	public bool resgisteredUsers;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideIf("resgisteredUsers")]
	public string overrideEmail;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[ShowNonSerializedField]
	public static string unregisteredEmail;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("-Autos-")]
	public bool autoStartSession;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool autoLogin;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text loginText;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text confirmationText;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string VtokenID;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string VapiToken;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("-HeartBeat-")]
	public bool sendHeartBeat;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float heartbeatTime;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[ReadOnly]
	public float heartBeatTimer;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool debugEvents;

	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[ShowIf("debugEvents")]
	[TextArea(7, 7)]
	public string myReturn;

	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[TextArea(4, 4)]
	[ShowIf("debugEvents")]
	public string detailsData;

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[ShowIf("debugEvents")]
	[TextArea(2, 2)]
	public string debugString;

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[ShowNonSerializedField]
	public static string testSessionInitId;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[ShowNonSerializedField]
	public static string apiToken;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ShowNonSerializedField]
	public static bool isLoggedIn;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[ShowNonSerializedField]
	public static bool inSession;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ShowNonSerializedField]
	public static string userID;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static VaultAnalytics instance;

	[Token(Token = "0x600075C")]
	[Address(RVA = "0xD4ADD8", Offset = "0xD4ADD8", VA = "0xD4ADD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0xD4AF58", Offset = "0xD4AF58", VA = "0xD4AF58")]
	public void LevelLoaded()
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0xD4B130", Offset = "0xD4B130", VA = "0xD4B130")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0xD4AFA8", Offset = "0xD4AFA8", VA = "0xD4AFA8")]
	[Button(null, EButtonEnableMode.Always)]
	public void Login()
	{
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0xD4B008", Offset = "0xD4B008", VA = "0xD4B008")]
	private void UpdateConfirmation()
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0xD4B3B8", Offset = "0xD4B3B8", VA = "0xD4B3B8")]
	[Button(null, EButtonEnableMode.Always)]
	public void _TESTEmailQuickly()
	{
	}

	[Token(Token = "0x6000762")]
	[Address(RVA = "0xD4B440", Offset = "0xD4B440", VA = "0xD4B440")]
	[Button(null, EButtonEnableMode.Always)]
	public void AddEmailToSession()
	{
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0xD4B7CC", Offset = "0xD4B7CC", VA = "0xD4B7CC")]
	public void AddEmailToSessionString(string email)
	{
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0xD4B850", Offset = "0xD4B850", VA = "0xD4B850")]
	public void RestartTestSession()
	{
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0xD4B8B0", Offset = "0xD4B8B0", VA = "0xD4B8B0")]
	public void SendTransform(Transform chg)
	{
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0xD4A5C8", Offset = "0xD4A5C8", VA = "0xD4A5C8")]
	public void _SendEvent(string eventType)
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0xD4A340", Offset = "0xD4A340", VA = "0xD4A340")]
	public void _SendEventString(string eventType, string chg)
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0xD4C14C", Offset = "0xD4C14C", VA = "0xD4C14C")]
	public void _SendEventInt(string eventType, int chg)
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0xD4ACFC", Offset = "0xD4ACFC", VA = "0xD4ACFC")]
	public void _SendEventfloat(string eventType, float chg)
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xD4C1B4", Offset = "0xD4C1B4", VA = "0xD4C1B4")]
	public void _SendEventBool(string eventType, bool chg)
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xD4A55C", Offset = "0xD4A55C", VA = "0xD4A55C")]
	public void _SendNamedObjectEvent(string eventType, string objectName)
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0xD4A524", Offset = "0xD4A524", VA = "0xD4A524")]
	public void _SendEventComplex(string eventType, string objectInteractName = "", string stringData = "", float floatData = 0f, int countData = 0, bool boolData = false)
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0xD4A544", Offset = "0xD4A544", VA = "0xD4A544")]
	public void _SendNamedObjectEventParam(string eventType, string objectName, string otherParam)
	{
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0xD4C21C", Offset = "0xD4C21C", VA = "0xD4C21C")]
	[Button(null, EButtonEnableMode.Always)]
	public void StartTestSession()
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0xD4B1CC", Offset = "0xD4B1CC", VA = "0xD4B1CC")]
	[Button(null, EButtonEnableMode.Always)]
	public void SendHeartBeat()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xD4C9C4", Offset = "0xD4C9C4", VA = "0xD4C9C4")]
	[Button(null, EButtonEnableMode.Always)]
	public void LogOut()
	{
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xD4CA28", Offset = "0xD4CA28", VA = "0xD4CA28")]
	[Button(null, EButtonEnableMode.Always)]
	public void EndSession()
	{
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0xD4B258", Offset = "0xD4B258", VA = "0xD4B258")]
	private void LoginInternal()
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0xD4CB4C", Offset = "0xD4CB4C", VA = "0xD4CB4C")]
	public void LoginCallBack(string chg)
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0xD4CD48", Offset = "0xD4CD48", VA = "0xD4CD48")]
	[Button(null, EButtonEnableMode.Always)]
	public void SetSessionComplete()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xD4CFB8", Offset = "0xD4CFB8", VA = "0xD4CFB8")]
	private void SessionCompleteCallBack(string chg)
	{
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xD4C754", Offset = "0xD4C754", VA = "0xD4C754")]
	public void HeartBeatInternal()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0xD4D06C", Offset = "0xD4D06C", VA = "0xD4D06C")]
	private void HeartBeatCallBack(string chg)
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xD4B5A4", Offset = "0xD4B5A4", VA = "0xD4B5A4")]
	public void UpdateSessionEmailInternal()
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xD4D120", Offset = "0xD4D120", VA = "0xD4D120")]
	private void SessionEmailCallBack(string chg)
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xD4B934", Offset = "0xD4B934", VA = "0xD4B934")]
	private void SendTransformInternal(Transform chg)
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0xD4D1B4", Offset = "0xD4D1B4", VA = "0xD4D1B4")]
	private void SendTransformCallBack(string chg)
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xD4C3AC", Offset = "0xD4C3AC", VA = "0xD4C3AC")]
	private void StartTestSessionInternal()
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xD4BD20", Offset = "0xD4BD20", VA = "0xD4BD20")]
	private void SendEventInternal(string eventType, string testTypeI = "NoTest", string objectInteractName = "", string stringData = "", float floatData = 0f, int countData = 0, bool boolData = false)
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xD4D248", Offset = "0xD4D248", VA = "0xD4D248")]
	private void SendEventCallBack(string chg)
	{
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0xD4D2FC", Offset = "0xD4D2FC", VA = "0xD4D2FC")]
	private void StartTestSessionCallBack(string chg)
	{
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0xD4D474", Offset = "0xD4D474", VA = "0xD4D474")]
	public void Debugger(object what)
	{
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0xD4C2E4", Offset = "0xD4C2E4", VA = "0xD4C2E4")]
	public void Debugger(string what)
	{
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0xD4D578", Offset = "0xD4D578", VA = "0xD4D578")]
	[Button(null, EButtonEnableMode.Always)]
	public void TestEvent()
	{
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0xD4D5C0", Offset = "0xD4D5C0", VA = "0xD4D5C0")]
	[Button(null, EButtonEnableMode.Always)]
	public void TestEventGrab()
	{
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0xD4D628", Offset = "0xD4D628", VA = "0xD4D628")]
	[Button(null, EButtonEnableMode.Always)]
	public void TestEventInt()
	{
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0xD4CA8C", Offset = "0xD4CA8C", VA = "0xD4CA8C")]
	[IteratorStateMachine(typeof(<SendData>d__67))]
	private IEnumerator SendData(WWWForm form, string url, Action<string> callBackOnFinish)
	{
		return null;
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0xD4D670", Offset = "0xD4D670", VA = "0xD4D670")]
	public VaultAnalytics()
	{
	}
}
[Token(Token = "0x2000150")]
public class AttachToView : MonoBehaviour
{
	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform playerController;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform headCamera;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 currentPostion;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float distanceCheck;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float smoothTime;

	[Token(Token = "0x600078F")]
	[Address(RVA = "0xD4DB78", Offset = "0xD4DB78", VA = "0xD4DB78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0xD4DC10", Offset = "0xD4DC10", VA = "0xD4DC10")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xD4DD64", Offset = "0xD4DD64", VA = "0xD4DD64")]
	public AttachToView()
	{
	}
}
[Token(Token = "0x2000151")]
public class EventEmitterFMOD3lbTimeline : StudioEventEmitter
{
	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Header("-New Settings-")]
	public int currentTimeofClip;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("-Param-")]
	public string nameofParamToCall;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Range(0f, 1f)]
	public float valueofParam;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[Header("GoToTime - MilliSeconds")]
	public int whereInTime;

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xD4DD78", Offset = "0xD4DD78", VA = "0xD4DD78")]
	private new void Start()
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0xD4DD7C", Offset = "0xD4DD7C", VA = "0xD4DD7C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0xD4DDC0", Offset = "0xD4DDC0", VA = "0xD4DDC0")]
	private RESULT TestCallback(EVENT_CALLBACK_TYPE type, IntPtr _event, IntPtr parameters)
	{
		return default(RESULT);
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0xD4DE78", Offset = "0xD4DE78", VA = "0xD4DE78")]
	[Button(null, EButtonEnableMode.Always)]
	private void PlayThis()
	{
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0xD4DF18", Offset = "0xD4DF18", VA = "0xD4DF18")]
	[Button(null, EButtonEnableMode.Always)]
	private void SetTimelinePause()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xD4DF60", Offset = "0xD4DF60", VA = "0xD4DF60")]
	[Button(null, EButtonEnableMode.Always)]
	private void SetTimelinePlay()
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xD4DFA8", Offset = "0xD4DFA8", VA = "0xD4DFA8")]
	[Button(null, EButtonEnableMode.Always)]
	private void SetPramValue()
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xD4DFBC", Offset = "0xD4DFBC", VA = "0xD4DFBC")]
	public EventEmitterFMOD3lbTimeline()
	{
	}
}
[Token(Token = "0x2000152")]
public class FMOD3lbMixerControl : MonoBehaviour
{
	[Token(Token = "0x4000854")]
	public const string mixerMusic = "bus:/Master/Music";

	[Token(Token = "0x4000855")]
	public const string mixerSFX = "bus:/Master/SFX";

	[Token(Token = "0x4000856")]
	public const string mixerVoice = "bus:/Master/VoiceOver";

	[Token(Token = "0x4000857")]
	public const string musicSave = "musicSave";

	[Token(Token = "0x4000858")]
	public const string sFXSave = "sFXSave";

	[Token(Token = "0x4000859")]
	public const string voiceSave = "voiceSave";

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-This is for Seeing Current Volume-")]
	[ReadOnly]
	[SerializeField]
	private float musicActual;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[ReadOnly]
	[SerializeField]
	private float sfxActual;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[ReadOnly]
	private float voiceActual;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("-Debug-")]
	[Range(0f, 1f)]
	public float changeAmount;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool AudioLogDebug;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public Bus busHolder;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Bus myinstance;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float MuteTime;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Header("-Saved and Visual Levels-")]
	[ReadOnly]
	public float savedandVisualFXLevels;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ReadOnly]
	public float savedandVisualMusicLevels;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[ReadOnly]
	public float savedandVisualVoiceLevels;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ReadOnly]
	public bool doFade;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Range(0.1f, 5f)]
	public float fadeTime;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static FMOD3lbMixerControl instance;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool showDebugs;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float audioVolumeM;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float audioVolumeS;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float audioVolumeV;

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xD4DFC4", Offset = "0xD4DFC4", VA = "0xD4DFC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0xD4E2E0", Offset = "0xD4E2E0", VA = "0xD4E2E0")]
	[Button(null, EButtonEnableMode.Always)]
	public void DeleteKEYS()
	{
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xD4E098", Offset = "0xD4E098", VA = "0xD4E098")]
	public void LoadAudioLevels()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xD4E288", Offset = "0xD4E288", VA = "0xD4E288")]
	[Button(null, EButtonEnableMode.Always)]
	public void FadeOnStart()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0xD4E4F4", Offset = "0xD4E4F4", VA = "0xD4E4F4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xD4E8B0", Offset = "0xD4E8B0", VA = "0xD4E8B0")]
	public void UnMuteAll()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0xD4E7B8", Offset = "0xD4E7B8", VA = "0xD4E7B8")]
	public void GetAllVolumes()
	{
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0xD4E9B4", Offset = "0xD4E9B4", VA = "0xD4E9B4")]
	public static void StopAllAudioNow()
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0xD4E8B8", Offset = "0xD4E8B8", VA = "0xD4E8B8")]
	public void MuteAllToggle(bool chg)
	{
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0xD4EAA8", Offset = "0xD4EAA8", VA = "0xD4EAA8")]
	public static void MusicMuteToggle(bool musicMute)
	{
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0xD4EB38", Offset = "0xD4EB38", VA = "0xD4EB38")]
	public static void VOMuteToggle(bool voMute)
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0xD4EBC8", Offset = "0xD4EBC8", VA = "0xD4EBC8")]
	public void _ChangeMusicVol(float chg)
	{
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0xD4EC24", Offset = "0xD4EC24", VA = "0xD4EC24")]
	public void _ChangeSFXVol(float chg)
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0xD4EC80", Offset = "0xD4EC80", VA = "0xD4EC80")]
	public void _ChangeVoiceVol(float chg)
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0xD4E590", Offset = "0xD4E590", VA = "0xD4E590")]
	private void ChangeVol(string bus, float chg, bool doSave = true)
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0xD4E36C", Offset = "0xD4E36C", VA = "0xD4E36C")]
	private void SetVol(string bus, float chg)
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0xD4ECDC", Offset = "0xD4ECDC", VA = "0xD4ECDC")]
	public float ReturnVolume(string bus)
	{
		return default(float);
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0xD4EDFC", Offset = "0xD4EDFC", VA = "0xD4EDFC")]
	public FMOD3lbMixerControl()
	{
	}
}
[Token(Token = "0x2000153")]
public class FMODAudioHelper
{
	[Token(Token = "0x60007AC")]
	[Address(RVA = "0xD4EE24", Offset = "0xD4EE24", VA = "0xD4EE24")]
	public static void PlayAudioOneShot(string fmodEventS, GameObject where)
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xD4EF64", Offset = "0xD4EF64", VA = "0xD4EF64")]
	public static void PlayAudio2DOneShot(string fmodEventS)
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0xD4F054", Offset = "0xD4F054", VA = "0xD4F054")]
	public static void PlayAudioOneShotParamater(string fmodEventS, string parameterName, float parameterValue, GameObject where)
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xD4F1D8", Offset = "0xD4F1D8", VA = "0xD4F1D8")]
	public static void PlayAudio2DOneShotParamater(string fmodEventS, string parameterName, float parameterValue)
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xD4EFD0", Offset = "0xD4EFD0", VA = "0xD4EFD0")]
	private static void InternalPlay(string fmodEventS)
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xD4EEA4", Offset = "0xD4EEA4", VA = "0xD4EEA4")]
	private static void InternalPlay(string fmodEventS, GameObject where)
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0xD4F0F0", Offset = "0xD4F0F0", VA = "0xD4F0F0")]
	private static void InternalPlayParam(string fmodEventS, string parameterName, float parameterValue, GameObject where)
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0xD4F26C", Offset = "0xD4F26C", VA = "0xD4F26C")]
	private static void InternalPlayParam(string fmodEventS, string parameterName, float parameterValue)
	{
	}

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0xD4F320", Offset = "0xD4F320", VA = "0xD4F320")]
	public FMODAudioHelper()
	{
	}
}
[Token(Token = "0x2000154")]
public class FMODImpactScript : MonoBehaviour
{
	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[EventRef(MigrateTo = "fmodEventRef")]
	public string fmodEvent;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EventReference fmodEventRef;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private EventInstance instance;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string[] collisionTag;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool useParameter;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private string parameterName;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Range(0.01f, 0.5f)]
	public float minCollisionVolume;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float maxCollisionVelocity;

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Debug")]
	[Range(0.01f, 5f)]
	public float parameterValueTest;

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0xD4F328", Offset = "0xD4F328", VA = "0xD4F328")]
	[Button(null, EButtonEnableMode.Always)]
	public void PlayAudio()
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0xD4F4A4", Offset = "0xD4F4A4", VA = "0xD4F4A4")]
	[Button(null, EButtonEnableMode.Always)]
	public void TestInstanceCreator()
	{
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0xD4F560", Offset = "0xD4F560", VA = "0xD4F560")]
	private float CalculateImpactVolume(float speed)
	{
		return default(float);
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0xD4F58C", Offset = "0xD4F58C", VA = "0xD4F58C")]
	private float CubicEaseOut(float velocity, float startingValue = 0f, float changeInValue = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0xD4F5B8", Offset = "0xD4F5B8", VA = "0xD4F5B8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0xD4F8C4", Offset = "0xD4F8C4", VA = "0xD4F8C4")]
	public FMODImpactScript()
	{
	}
}
[Token(Token = "0x2000155")]
public class FMODOneShotPlayer : MonoBehaviour
{
	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool playOnObject;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideIf("playOnObject")]
	public GameObject whereAudio;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[EventRef(MigrateTo = "fmodEventRef")]
	public string fmodEvent;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EventReference fmodEventRef;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private EventInstance instance;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string parameterName;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float parameterValue;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool useEvents;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	[Header("-Event Settings-")]
	[ShowIf("useEvents")]
	public bool is2D;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	[ShowIf("useEvents")]
	public bool useParameters;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
	[Header("-Enable/Disable-")]
	[ShowIf("useEvents")]
	public bool onEnable;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ShowIf("useEvents")]
	public bool onDisable;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("-Triggers-")]
	[ShowIf("useEvents")]
	[NaughtyAttributes.Tag]
	public string whichTag;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[ShowIf("useEvents")]
	public bool onTriggerExit;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[ShowIf("useEvents")]
	public bool onTrigger;

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0xD4F930", Offset = "0xD4F930", VA = "0xD4F930")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xD4F964", Offset = "0xD4F964", VA = "0xD4F964")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0xD4F974", Offset = "0xD4F974", VA = "0xD4F974")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0xD4F9B8", Offset = "0xD4F9B8", VA = "0xD4F9B8")]
	public void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0xD4F940", Offset = "0xD4F940", VA = "0xD4F940")]
	private void PlayInternal()
	{
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0xD4FEC4", Offset = "0xD4FEC4", VA = "0xD4FEC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0xD4FD88", Offset = "0xD4FD88", VA = "0xD4FD88")]
	[Button(null, EButtonEnableMode.Always)]
	public void PlayFX()
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0xD4FEF8", Offset = "0xD4FEF8", VA = "0xD4FEF8")]
	public void PlayFXHere(GameObject where)
	{
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0xD4FAC8", Offset = "0xD4FAC8", VA = "0xD4FAC8")]
	public void PlayFX2D()
	{
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0xD4FB94", Offset = "0xD4FB94", VA = "0xD4FB94")]
	public void PlayFXParam()
	{
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0xD50038", Offset = "0xD50038", VA = "0xD50038")]
	public void PlayFXParamHere(GameObject where)
	{
	}

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0xD4F9FC", Offset = "0xD4F9FC", VA = "0xD4F9FC")]
	public void PlayFX2DParam()
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0xD50294", Offset = "0xD50294", VA = "0xD50294")]
	public void PlayFXWithParamValue(float chg)
	{
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0xD50498", Offset = "0xD50498", VA = "0xD50498")]
	public void PlayFX2DWithParamValue(float chg)
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0xD50564", Offset = "0xD50564", VA = "0xD50564")]
	public FMODOneShotPlayer()
	{
	}
}
[Serializable]
[Token(Token = "0x2000156")]
public class FmodCustomLookup
{
	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string description;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float value;

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0xD505C4", Offset = "0xD505C4", VA = "0xD505C4")]
	public FmodCustomLookup()
	{
	}
}
[Token(Token = "0x2000157")]
public class FMODParamHelper3lb : MonoBehaviour
{
	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[InfoBox("Set name of Gameobject to Param", EInfoBoxType.Normal)]
	public StudioParameterTrigger myParamTrigger;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string myParamName;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int currentIndex;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReorderableList]
	public FmodCustomLookup[] myLookUps;

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0xD505CC", Offset = "0xD505CC", VA = "0xD505CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0xD50694", Offset = "0xD50694", VA = "0xD50694")]
	public void _TriggerParam()
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0xD506B0", Offset = "0xD506B0", VA = "0xD506B0")]
	public void _TriggerLookUpName(string chg)
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0xD50824", Offset = "0xD50824", VA = "0xD50824")]
	public void _TriggerLookUpIndex(int chg)
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xD50860", Offset = "0xD50860", VA = "0xD50860")]
	public void _PTriggerLookUpName(string chg)
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xD508A0", Offset = "0xD508A0", VA = "0xD508A0")]
	public void _PTriggerLookUpIndex(int chg)
	{
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0xD50878", Offset = "0xD50878", VA = "0xD50878")]
	public void _PTriggerParamValue(float chg)
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0xD507CC", Offset = "0xD507CC", VA = "0xD507CC")]
	public void _TriggerParamValue(float chg)
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0xD506C8", Offset = "0xD506C8", VA = "0xD506C8")]
	private float LookUpValueByName(string myMatch)
	{
		return default(float);
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0xD508DC", Offset = "0xD508DC", VA = "0xD508DC")]
	private void ChangeParamValue(string myMatch, float myChang)
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0xD50A8C", Offset = "0xD50A8C", VA = "0xD50A8C")]
	private float ParamValueReturn(string myMatch)
	{
		return default(float);
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0xD50C20", Offset = "0xD50C20", VA = "0xD50C20")]
	public FMODParamHelper3lb()
	{
	}
}
[Token(Token = "0x2000158")]
[RequireComponent(typeof(StudioEventEmitter))]
public class FMODParamTester : MonoBehaviour
{
	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StudioEventEmitter myEmitter;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool useFloat;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string paramName;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("useFloat")]
	[OnValueChanged("SetParamF")]
	[Range(0f, 1f)]
	public float changeFloat;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 20f)]
	[HideIf("useFloat")]
	[OnValueChanged("SetParamI")]
	public int changeInt;

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0xD50C28", Offset = "0xD50C28", VA = "0xD50C28")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0xD50D50", Offset = "0xD50D50", VA = "0xD50D50")]
	[Button(null, EButtonEnableMode.Always)]
	public void StartEvent()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0xD50DD0", Offset = "0xD50DD0", VA = "0xD50DD0")]
	[Button(null, EButtonEnableMode.Always)]
	public void StopEvent()
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0xD50E50", Offset = "0xD50E50", VA = "0xD50E50")]
	public void SetParamF()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xD50EE8", Offset = "0xD50EE8", VA = "0xD50EE8")]
	public void SetParamI()
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0xD50F84", Offset = "0xD50F84", VA = "0xD50F84")]
	public FMODParamTester()
	{
	}
}
[Token(Token = "0x2000159")]
public class Fmod_Forcerer : MonoBehaviour
{
	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FMOD.Studio.System lowlevel;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FMOD.INITFLAGS myFlags;

	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public FMOD.Studio.INITFLAGS mySFlags;

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0xD50F94", Offset = "0xD50F94", VA = "0xD50F94")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0xD51000", Offset = "0xD51000", VA = "0xD51000")]
	private void Start()
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0xD51070", Offset = "0xD51070", VA = "0xD51070")]
	private void Update()
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0xD51074", Offset = "0xD51074", VA = "0xD51074")]
	public Fmod_Forcerer()
	{
	}
}
[Token(Token = "0x200015A")]
public class MasterImpactAudio : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200015B")]
	public class ImpactSound
	{
		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PhysicMaterial SurfaceMaterial;

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xD5149C", Offset = "0xD5149C", VA = "0xD5149C")]
		public ImpactSound()
		{
		}
	}

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float nextImpactTime;

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<PhysicMaterial, ImpactSound> surfaceTable;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ImpactSound DefaultSound;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<ImpactSound> SurfaceImpacts;

	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float MinImpactSpeed;

	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float MinImpactInterval;

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Master Settings")]
	public bool justOneMoreTime;

	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool noMorePlay;

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("DebugOptions")]
	public Renderer yourRenderer;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool showDebug;

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0xD5107C", Offset = "0xD5107C", VA = "0xD5107C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0xD511F0", Offset = "0xD511F0", VA = "0xD511F0")]
	public void ActivateOneMoreTime()
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0xD511FC", Offset = "0xD511FC", VA = "0xD511FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0xD51208", Offset = "0xD51208", VA = "0xD51208")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0xD51408", Offset = "0xD51408", VA = "0xD51408")]
	public MasterImpactAudio()
	{
	}
}
[Token(Token = "0x200015C")]
public class MusicTriggerCrossFade : MonoBehaviour
{
	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string searchTag;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource musicAudioSource1;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource musicAudioSource2;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip musicClip;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int musicMeasures;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource tracktoDisable;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float musicWait;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float currentTime;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool musicCued;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int trackPlaying;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float crossfadeTime;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Ease easeMaster;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Ease easeFader;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent enterEvent;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent exitEvent;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float measureTime;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int whatmeasure;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform audioPosition;

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0xD514A4", Offset = "0xD514A4", VA = "0xD514A4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0xD51984", Offset = "0xD51984", VA = "0xD51984")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0xD51564", Offset = "0xD51564", VA = "0xD51564")]
	public void PlaySound(AudioClip soundPlay, bool isMusic)
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0xD51B60", Offset = "0xD51B60", VA = "0xD51B60")]
	public void CrossComplete()
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0xD519CC", Offset = "0xD519CC", VA = "0xD519CC")]
	private void CrossFadeAudio(AudioSource masterTrack, AudioSource fadeTrack, float crossFadeTime, float delay = 0f)
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0xD51B9C", Offset = "0xD51B9C", VA = "0xD51B9C")]
	public MusicTriggerCrossFade()
	{
	}
}
[Token(Token = "0x200015D")]
public class MusicTriggerEventScript : MonoBehaviour
{
	[Token(Token = "0x200015E")]
	[CompilerGenerated]
	private sealed class <TransitionMusicLoop>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MusicTriggerEventScript <>4__this;

		[Token(Token = "0x17000059")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007F5")]
			[Address(RVA = "0xD52250", Offset = "0xD52250", VA = "0xD52250", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007F7")]
			[Address(RVA = "0xD52298", Offset = "0xD52298", VA = "0xD52298", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xD520AC", Offset = "0xD520AC", VA = "0xD520AC")]
		[DebuggerHidden]
		public <TransitionMusicLoop>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xD5212C", Offset = "0xD5212C", VA = "0xD5212C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xD52130", Offset = "0xD52130", VA = "0xD52130", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xD52258", Offset = "0xD52258", VA = "0xD52258", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string searchTag;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource MusicAudioSource1;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource MusicAudioSource2;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip musicClip;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int musicMeasures;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float musicWait;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float currentTime;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool musicCued;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int trackPlaying;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip enterOneShotSound;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent enterEvent;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip exitOneShotSound;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent exitEvent;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform audioPosition;

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0xD51BFC", Offset = "0xD51BFC", VA = "0xD51BFC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0xD51FF0", Offset = "0xD51FF0", VA = "0xD51FF0")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0xD51CCC", Offset = "0xD51CCC", VA = "0xD51CCC")]
	public void PlaySound(AudioClip soundPlay, bool isMusic)
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0xD52038", Offset = "0xD52038", VA = "0xD52038")]
	[IteratorStateMachine(typeof(<TransitionMusicLoop>d__17))]
	private IEnumerator TransitionMusicLoop()
	{
		return null;
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0xD520D4", Offset = "0xD520D4", VA = "0xD520D4")]
	public MusicTriggerEventScript()
	{
	}
}
[Token(Token = "0x200015F")]
public class SoundEvent : MonoBehaviour
{
	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StudioEventEmitter myEmitter;

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0xD522A0", Offset = "0xD522A0", VA = "0xD522A0")]
	public void PlaySound(string eventSound)
	{
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0xD52374", Offset = "0xD52374", VA = "0xD52374")]
	public SoundEvent()
	{
	}
}
[Token(Token = "0x2000160")]
public class DogBossSequence : MonoBehaviour
{
	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-TriggerOnly-")]
	public bool triggerOnly;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideIf("triggerOnly")]
	[Header("-Dog Agents-")]
	public ComplicatedAgent dogRed;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideIf("triggerOnly")]
	public ComplicatedAgent dogBlue;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideIf("triggerOnly")]
	public ComplicatedAgent dogGreen;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideIf("triggerOnly")]
	[Header("-StatuePuzzles-")]
	public BreakApartManager StatueA;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideIf("triggerOnly")]
	public BreakApartManager StatueB;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideIf("triggerOnly")]
	public BreakApartManager StatueC;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("-Boss Runtime-")]
	[ReadOnly]
	public List<ComplicatedAgent> dogList;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ReadOnly]
	[HideIf("triggerOnly")]
	public int statueCount;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[ReadOnly]
	[HideIf("triggerOnly")]
	public bool waitingForCircle;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideIf("triggerOnly")]
	public DogBossSequence triggerForDogBoss;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Collider myCollider;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[ShowIf("triggerOnly")]
	public UnityEvent completedEvent;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideIf("triggerOnly")]
	public UnityEvent dogsPhase2Event;

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0xD5237C", Offset = "0xD5237C", VA = "0xD5237C")]
	public void Start()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0xD52380", Offset = "0xD52380", VA = "0xD52380")]
	public void _SquirrelDogRed(Transform i)
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0xD5239C", Offset = "0xD5239C", VA = "0xD5239C")]
	public void StatueRepaired()
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xD523D4", Offset = "0xD523D4", VA = "0xD523D4")]
	public void _ReleaseDogRed()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0xD523F0", Offset = "0xD523F0", VA = "0xD523F0")]
	public void _SquirrelDogBlue(Transform what)
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0xD5240C", Offset = "0xD5240C", VA = "0xD5240C")]
	public void _ReleaseDogBlue()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0xD52428", Offset = "0xD52428", VA = "0xD52428")]
	public void _SquirrelDogGreen(Transform what)
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0xD52444", Offset = "0xD52444", VA = "0xD52444")]
	public void _ReleaseDogGreen()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0xD52460", Offset = "0xD52460", VA = "0xD52460")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0xD52600", Offset = "0xD52600", VA = "0xD52600")]
	public void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0xD526C4", Offset = "0xD526C4", VA = "0xD526C4")]
	public DogBossSequence()
	{
	}
}
[Token(Token = "0x2000161")]
public class PuzzlePieceBinary : MonoBehaviour
{
	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isCorrect;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent correctEvent;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent wrongEvent;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent ResetEvent;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useMoreEvents;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("useMoreEvents")]
	public UnityEvent whenSetCorrect;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("useMoreEvents")]
	public UnityEvent whenSetWrong;

	[Token(Token = "0x6000805")]
	[Address(RVA = "0xD526CC", Offset = "0xD526CC", VA = "0xD526CC")]
	public void _Use()
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0xD526F8", Offset = "0xD526F8", VA = "0xD526F8")]
	public void _SetCorrect()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0xD52704", Offset = "0xD52704", VA = "0xD52704")]
	public void _SetWrong()
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0xD5270C", Offset = "0xD5270C", VA = "0xD5270C")]
	public void _Reset()
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0xD52730", Offset = "0xD52730", VA = "0xD52730")]
	public PuzzlePieceBinary()
	{
	}
}
[Token(Token = "0x2000162")]
public class RavenBossSequence : MonoBehaviour
{
	[Token(Token = "0x2000163")]
	public enum ephaseType
	{
		[Token(Token = "0x40008E7")]
		Start,
		[Token(Token = "0x40008E8")]
		Memory,
		[Token(Token = "0x40008E9")]
		Laser,
		[Token(Token = "0x40008EA")]
		Ending
	}

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ephaseType phaseType;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CountPuzzle mainCounter;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float laserphaseTimeout;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int phaseCount;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool showEvents;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("-Laser Phase-")]
	public GameObject laserRavenParentPrefab;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform laserRavenpivot;

	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform birdTargetOverRide;

	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform birdHead;

	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("-Memory Phase-")]
	public GameObject memoryParentPrefab;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform teleportPoints;

	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public BreakApartManager memories;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public BreakApartManager debris;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public PuzzlePieceBinary[] memoriesList;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Renderer[] MemoryCircles;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Color[] ColorList;

	[Token(Token = "0x600080A")]
	[Address(RVA = "0xD52740", Offset = "0xD52740", VA = "0xD52740")]
	public void Update()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0xD5283C", Offset = "0xD5283C", VA = "0xD5283C")]
	public void NextPhase()
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xD52868", Offset = "0xD52868", VA = "0xD52868")]
	public void ActivateMemoryPhase()
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xD528EC", Offset = "0xD528EC", VA = "0xD528EC")]
	public void PrepareMemories()
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xD52754", Offset = "0xD52754", VA = "0xD52754")]
	public void BirdFollow()
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0xD52B2C", Offset = "0xD52B2C", VA = "0xD52B2C")]
	public void ActivateLaserPhase()
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0xD52B98", Offset = "0xD52B98", VA = "0xD52B98")]
	public void EndingPhase()
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0xD52B9C", Offset = "0xD52B9C", VA = "0xD52B9C")]
	public RavenBossSequence()
	{
	}
}
[Token(Token = "0x2000164")]
public class ButtonDoEvent : MonoBehaviour
{
	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Button buttonOVR;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool needsBothHands;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent buttonEvent;

	[Token(Token = "0x6000812")]
	[Address(RVA = "0xD52BA4", Offset = "0xD52BA4", VA = "0xD52BA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0xD52BFC", Offset = "0xD52BFC", VA = "0xD52BFC")]
	private bool GetDownL()
	{
		return default(bool);
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0xD52C5C", Offset = "0xD52C5C", VA = "0xD52C5C")]
	private bool GetDownR()
	{
		return default(bool);
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xD52CBC", Offset = "0xD52CBC", VA = "0xD52CBC")]
	private bool GetUpL()
	{
		return default(bool);
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xD52D1C", Offset = "0xD52D1C", VA = "0xD52D1C")]
	private bool GetUpR()
	{
		return default(bool);
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0xD52D7C", Offset = "0xD52D7C", VA = "0xD52D7C")]
	public ButtonDoEvent()
	{
	}
}
[Token(Token = "0x2000165")]
public class CameraClippingController : MonoBehaviour
{
	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Message;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float clipFar;

	[Token(Token = "0x6000818")]
	[Address(RVA = "0xD52D84", Offset = "0xD52D84", VA = "0xD52D84")]
	private void Start()
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0xD52DD8", Offset = "0xD52DD8", VA = "0xD52DD8")]
	public void SetFarClip()
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0xD52E64", Offset = "0xD52E64", VA = "0xD52E64")]
	public CameraClippingController()
	{
	}
}
[Token(Token = "0x2000166")]
public class LevelKeyTesters : MonoBehaviour
{
	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool dontAllowKeybinds;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool isMusicMuted;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool isvoMuted;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool deleteSaveOnAwake;

	[Token(Token = "0x600081B")]
	[Address(RVA = "0xD52EC4", Offset = "0xD52EC4", VA = "0xD52EC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0xD52ED8", Offset = "0xD52ED8", VA = "0xD52ED8")]
	private void Start()
	{
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0xD52FA8", Offset = "0xD52FA8", VA = "0xD52FA8")]
	public void _SaveDestruction()
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0xD5308C", Offset = "0xD5308C", VA = "0xD5308C")]
	public void ToggleTutorial()
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0xD5301C", Offset = "0xD5301C", VA = "0xD5301C")]
	public static void ReloadScene()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0xD530DC", Offset = "0xD530DC", VA = "0xD530DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xD53280", Offset = "0xD53280", VA = "0xD53280")]
	public void SceneLoad(int chg)
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xD532DC", Offset = "0xD532DC", VA = "0xD532DC")]
	public LevelKeyTesters()
	{
	}
}
[Token(Token = "0x2000167")]
public class WinningBeam : MonoBehaviour
{
	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider myTest;

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xD532EC", Offset = "0xD532EC", VA = "0xD532EC")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xD53378", Offset = "0xD53378", VA = "0xD53378")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xD536CC", Offset = "0xD536CC", VA = "0xD536CC")]
	public static void FindParentWithHolder(GameObject childObject)
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xD53800", Offset = "0xD53800", VA = "0xD53800")]
	public WinningBeam()
	{
	}
}
[Token(Token = "0x2000168")]
public class ChildCheckEvent : MonoBehaviour
{
	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string tagToCheck;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int numberNeeded;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent activate;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool complete;

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xD53808", Offset = "0xD53808", VA = "0xD53808")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xD53C1C", Offset = "0xD53C1C", VA = "0xD53C1C")]
	public ChildCheckEvent()
	{
	}
}
[Token(Token = "0x2000169")]
public class DeathModule : MonoBehaviour
{
	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float deathTime;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject deathFX;

	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float deathFXDestroyTime;

	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float deathFXDelay;

	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] offAtDeath;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("-Drop-")]
	public GameObject dropItem;

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform dropLoc;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("-Animation-")]
	public bool deathAnim;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string animationTrigger;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Collider col;

	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("-Events-")]
	public bool showEvents;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[ShowIf("showEvents")]
	public UnityEvent OnDeathImmediate;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[ShowIf("showEvents")]
	public UnityEvent OnDeathDelayed;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private HealthSystem myHealthSystem;

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xD53C24", Offset = "0xD53C24", VA = "0xD53C24")]
	private void Start()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xD53DA0", Offset = "0xD53DA0", VA = "0xD53DA0")]
	public void DoDeath()
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xD53F28", Offset = "0xD53F28", VA = "0xD53F28")]
	public void DelayedDeathEvent()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xD53F4C", Offset = "0xD53F4C", VA = "0xD53F4C")]
	public void DeathExplosion()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xD5421C", Offset = "0xD5421C", VA = "0xD5421C")]
	public DeathModule()
	{
	}
}
[Token(Token = "0x200016A")]
public class EnergySystem : MonoBehaviour
{
	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxValue;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("-Events-")]
	public bool showEvents;

	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ShowIf("showEvents")]
	public UnityEvent gainEnergyEvent;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ShowIf("showEvents")]
	public UnityEvent loseEnergyEvent;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("showEvents")]
	public UnityEvent notEnoughEnergyEvent;

	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 1f)]
	[Header("Haptics")]
	public float hapticAmount;

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Header("-Debug-")]
	public float curEnergy;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ProgressBar("Energy Percent", 100f, EColor.Green)]
	public float energyPercent;

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xD5427C", Offset = "0xD5427C", VA = "0xD5427C")]
	private void Start()
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xD54360", Offset = "0xD54360", VA = "0xD54360")]
	[Button(null, EButtonEnableMode.Always)]
	public void FullEnergy()
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0xD54444", Offset = "0xD54444", VA = "0xD54444")]
	public bool EnergyCheck(float value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0xD54368", Offset = "0xD54368", VA = "0xD54368")]
	public void _GainEnergy(float value)
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0xD54480", Offset = "0xD54480", VA = "0xD54480")]
	public void _LoseEnergy(float value)
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0xD54340", Offset = "0xD54340", VA = "0xD54340")]
	private void EnergyPercent()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0xD54554", Offset = "0xD54554", VA = "0xD54554")]
	public void SaveEnergy()
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0xD542AC", Offset = "0xD542AC", VA = "0xD542AC")]
	private void LoadEnergy()
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0xD545E0", Offset = "0xD545E0", VA = "0xD545E0")]
	public EnergySystem()
	{
	}
}
[Token(Token = "0x200016B")]
public class HealthEvents : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200016C")]
	public class HealthEvent
	{
		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 100f)]
		public float healthPercentTrigger;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent healthTriggeredEvent;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool wasRun;

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xD54800", Offset = "0xD54800", VA = "0xD54800")]
		public void RunEvent()
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xD54834", Offset = "0xD54834", VA = "0xD54834")]
		public void ResetEvent()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xD5489C", Offset = "0xD5489C", VA = "0xD5489C")]
		public HealthEvent()
		{
		}
	}

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HealthSystem healthSystem;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HealthEvent[] healthEvents;

	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useHealthLerp;

	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("useHealthLerp")]
	public Renderer healthRenderer;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ShowIf("useHealthLerp")]
	public string materialProperty;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("useHealthLerp")]
	public Vector2 range;

	[Token(Token = "0x6000837")]
	[Address(RVA = "0xD545F0", Offset = "0xD545F0", VA = "0xD545F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0xD54684", Offset = "0xD54684", VA = "0xD54684")]
	public void CheckForHealthEvent()
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0xD54844", Offset = "0xD54844", VA = "0xD54844")]
	public HealthEvents()
	{
	}
}
[Token(Token = "0x200016D")]
public class HealthSystem : MonoBehaviour
{
	[Token(Token = "0x200016E")]
	public enum HittableType
	{
		[Token(Token = "0x4000932")]
		PlayerSpirit,
		[Token(Token = "0x4000933")]
		PlayerGolem,
		[Token(Token = "0x4000934")]
		EnemyMote,
		[Token(Token = "0x4000935")]
		EnemyCreature,
		[Token(Token = "0x4000936")]
		Critter,
		[Token(Token = "0x4000937")]
		Smashable,
		[Token(Token = "0x4000938")]
		None
	}

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HittableType hittableType;

	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxValue;

	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool canRegen;

	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[ShowIf("canRegen")]
	public float regenAmount;

	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ShowIf("canRegen")]
	public float regenDelay;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float regenTimeblocker;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject collectParticles;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Animator myAnimator;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool immuneToDamage;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Range(0f, 10f)]
	public float damageResistance;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("-HitSystem-")]
	public bool hitTween;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Tween theTween;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float hitReactTime;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool hitAnim;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ShowIf("hitAnim")]
	public string hitTrigger;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Range(0f, 1f)]
	[Header("Haptics")]
	public float hapticAmount;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Header("-Events-")]
	public bool showEvents;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[ShowIf("showEvents")]
	public UnityEvent healEvent;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[ShowIf("showEvents")]
	public UnityEvent damageEvent;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[ShowIf("showEvents")]
	public UnityEvent deathEvent;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("-Debug-")]
	public float curHealth;

	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[ProgressBar("Health Percent", 100f, EColor.Green)]
	public float healthPercent;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool isBoosting;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	public bool isHit;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
	public bool isDying;

	[Token(Token = "0x600083D")]
	[Address(RVA = "0xD548A4", Offset = "0xD548A4", VA = "0xD548A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0xD54948", Offset = "0xD54948", VA = "0xD54948")]
	[Button(null, EButtonEnableMode.Always)]
	public void FullHealth()
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0xD54AB0", Offset = "0xD54AB0", VA = "0xD54AB0")]
	[Button(null, EButtonEnableMode.Always)]
	public void MakeImmortal()
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0xD54AD0", Offset = "0xD54AD0", VA = "0xD54AD0")]
	[Button(null, EButtonEnableMode.Always)]
	public void MakeMortal()
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0xD54AD8", Offset = "0xD54AD8", VA = "0xD54AD8")]
	[Button(null, EButtonEnableMode.Always)]
	public void TestDamage()
	{
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0xD54C78", Offset = "0xD54C78", VA = "0xD54C78")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0xD54CE4", Offset = "0xD54CE4", VA = "0xD54CE4")]
	public void Regenerate()
	{
	}

	[Token(Token = "0x6000844")]
	[Address(RVA = "0xD54950", Offset = "0xD54950", VA = "0xD54950")]
	public void GainHealth(float amount)
	{
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0xD54CEC", Offset = "0xD54CEC", VA = "0xD54CEC")]
	public void LoseHealth(float amount)
	{
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0xD54928", Offset = "0xD54928", VA = "0xD54928")]
	private void HealthPercent()
	{
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0xD54E4C", Offset = "0xD54E4C", VA = "0xD54E4C")]
	public void HealSelf(float dmg)
	{
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0xD54AE0", Offset = "0xD54AE0", VA = "0xD54AE0")]
	public void TakeDamage(float dmg)
	{
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0xD54E94", Offset = "0xD54E94", VA = "0xD54E94")]
	[Button(null, EButtonEnableMode.Always)]
	public void ResetHealth()
	{
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0xD54EA4", Offset = "0xD54EA4", VA = "0xD54EA4")]
	private void UnHit()
	{
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0xD54E70", Offset = "0xD54E70", VA = "0xD54E70")]
	public void HitAnim()
	{
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0xD54EAC", Offset = "0xD54EAC", VA = "0xD54EAC")]
	public void BriefImmunity(float time)
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0xD54F10", Offset = "0xD54F10", VA = "0xD54F10")]
	private void UnImmune()
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0xD54F18", Offset = "0xD54F18", VA = "0xD54F18")]
	public HealthSystem()
	{
	}
}
[Token(Token = "0x200016F")]
public class HitBlocker : HitBox
{
	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool canBeBroken;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float durability;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool hitTween;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Tween theTween;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject destroyFX;

	[Token(Token = "0x600084F")]
	[Address(RVA = "0xD54F98", Offset = "0xD54F98", VA = "0xD54F98", Slot = "4")]
	public override void Start()
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0xD55178", Offset = "0xD55178", VA = "0xD55178", Slot = "5")]
	public override void TakeDamage(float dmg)
	{
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0xD553BC", Offset = "0xD553BC", VA = "0xD553BC")]
	public HitBlocker()
	{
	}
}
[Token(Token = "0x2000170")]
public class HitBox : MonoBehaviour
{
	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HealthSystem healthSystem;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 10f)]
	public float damageMulti;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject hitEffect;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject wrongHitEffect;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public EventReference fmodEventRef;

	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string parameterName;

	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float parameterValue;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private EventInstance instance;

	[Token(Token = "0x6000852")]
	[Address(RVA = "0xD54FEC", Offset = "0xD54FEC", VA = "0xD54FEC", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0xD553EC", Offset = "0xD553EC", VA = "0xD553EC")]
	private float GetHitPercent(float dmg)
	{
		return default(float);
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0xD55414", Offset = "0xD55414", VA = "0xD55414", Slot = "5")]
	public virtual void TakeDamage(float dmg)
	{
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0xD557F8", Offset = "0xD557F8", VA = "0xD557F8", Slot = "6")]
	public virtual void TakeDamage(float dmg, Transform hitLoc)
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0xD55664", Offset = "0xD55664", VA = "0xD55664")]
	public void HitExplosion()
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0xD55854", Offset = "0xD55854", VA = "0xD55854")]
	public void HitExplosion(Transform hitLoc)
	{
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0xD55998", Offset = "0xD55998", VA = "0xD55998")]
	public void WrongHitExplosion()
	{
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0xD55B60", Offset = "0xD55B60", VA = "0xD55B60")]
	public void WrongHitExplosion(Transform hitLoc)
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0xD554DC", Offset = "0xD554DC", VA = "0xD554DC")]
	private void PlayHitFXWithParamValue(GameObject whereAudio, float chg)
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0xD553DC", Offset = "0xD553DC", VA = "0xD553DC")]
	public HitBox()
	{
	}
}
[Token(Token = "0x2000171")]
public class MeleeWeaponSystem : MonoBehaviour
{
	[Token(Token = "0x2000172")]
	public enum DamageType
	{
		[Token(Token = "0x400094F")]
		Bash,
		[Token(Token = "0x4000950")]
		Stab,
		[Token(Token = "0x4000951")]
		Slash,
		[Token(Token = "0x4000952")]
		None
	}

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DamageType damageType;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float damageMod;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float minDistance;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isPlayer;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Vector3> positions;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReadOnly]
	public bool gotBlocked;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<GameObject> blockers;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool showDebugs;

	[Token(Token = "0x600085C")]
	[Address(RVA = "0xD55CB4", Offset = "0xD55CB4", VA = "0xD55CB4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0xD55FF8", Offset = "0xD55FF8", VA = "0xD55FF8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0xD56084", Offset = "0xD56084", VA = "0xD56084")]
	public void DebugMessage(string message)
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0xD560F4", Offset = "0xD560F4", VA = "0xD560F4")]
	private float DistanceCheck()
	{
		return default(float);
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0xD5623C", Offset = "0xD5623C", VA = "0xD5623C")]
	private float VelocityCheck()
	{
		return default(float);
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0xD55EA4", Offset = "0xD55EA4", VA = "0xD55EA4")]
	private void TrackVelocity()
	{
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0xD56304", Offset = "0xD56304", VA = "0xD56304")]
	private float CalculateDamage(float sqrLength)
	{
		return default(float);
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0xD5635C", Offset = "0xD5635C", VA = "0xD5635C")]
	private void Hit(HitBox target, float damage)
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0xD56410", Offset = "0xD56410", VA = "0xD56410")]
	private void HitBlocker(HitBlocker target, float damage)
	{
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0xD564B4", Offset = "0xD564B4", VA = "0xD564B4")]
	private void NotHit(HitBox target)
	{
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0xD5655C", Offset = "0xD5655C", VA = "0xD5655C")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0xD56A08", Offset = "0xD56A08", VA = "0xD56A08")]
	private void OnTriggerExit(Collider col)
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0xD56930", Offset = "0xD56930", VA = "0xD56930")]
	private void Block(GameObject blocker)
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0xD55FAC", Offset = "0xD55FAC", VA = "0xD55FAC")]
	private void Unblock()
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0xD56910", Offset = "0xD56910", VA = "0xD56910")]
	private bool DoDamage(HitBox hit)
	{
		return default(bool);
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0xD56B00", Offset = "0xD56B00", VA = "0xD56B00")]
	public MeleeWeaponSystem()
	{
	}
}
[Token(Token = "0x2000174")]
public class DeleteSavesBeta : MonoBehaviour
{
	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool goToScene;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SceneLoaderTrigger sceneLoader;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool showDebugs;

	[Token(Token = "0x6000870")]
	[Address(RVA = "0xD56CE8", Offset = "0xD56CE8", VA = "0xD56CE8")]
	public void _SaveDestruction()
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0xD56E30", Offset = "0xD56E30", VA = "0xD56E30")]
	public static void ReloadScene()
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0xD56EA0", Offset = "0xD56EA0", VA = "0xD56EA0")]
	public DeleteSavesBeta()
	{
	}
}
[Token(Token = "0x2000175")]
public class EnableAfterSeconds : MonoBehaviour
{
	[Token(Token = "0x2000176")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnableAfterSeconds <>4__this;

		[Token(Token = "0x1700005B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000878")]
			[Address(RVA = "0xD57024", Offset = "0xD57024", VA = "0xD57024", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600087A")]
			[Address(RVA = "0xD5706C", Offset = "0xD5706C", VA = "0xD5706C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0xD56F1C", Offset = "0xD56F1C", VA = "0xD56F1C")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0xD56F54", Offset = "0xD56F54", VA = "0xD56F54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0xD56F58", Offset = "0xD56F58", VA = "0xD56F58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xD5702C", Offset = "0xD5702C", VA = "0xD5702C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float time;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject whatObject;

	[Token(Token = "0x6000873")]
	[Address(RVA = "0xD56EA8", Offset = "0xD56EA8", VA = "0xD56EA8")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	public IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0xD56F44", Offset = "0xD56F44", VA = "0xD56F44")]
	public EnableAfterSeconds()
	{
	}
}
[Token(Token = "0x2000177")]
[RequireComponent(typeof(Camera))]
public class EnableCameraDepthInForward : MonoBehaviour
{
	[Token(Token = "0x600087B")]
	[Address(RVA = "0xD57074", Offset = "0xD57074", VA = "0xD57074")]
	private void Start()
	{
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0xD57078", Offset = "0xD57078", VA = "0xD57078")]
	private void Set()
	{
	}

	[Token(Token = "0x600087D")]
	[Address(RVA = "0xD570FC", Offset = "0xD570FC", VA = "0xD570FC")]
	public EnableCameraDepthInForward()
	{
	}
}
[Token(Token = "0x2000178")]
public class FXRandomizer : MonoBehaviour
{
	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This should be an in scene FX object.")]
	public ParticleSystem effect;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool randomPosition;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[ShowIf("randomPosition")]
	public bool onNavmesh;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[ShowIf("randomPosition")]
	public float rangeRadius;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 timeFrame;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public StudioEventEmitter myEmitter;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float timer;

	[Token(Token = "0x600087E")]
	[Address(RVA = "0xD57104", Offset = "0xD57104", VA = "0xD57104")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0xD572E0", Offset = "0xD572E0", VA = "0xD572E0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0xD5733C", Offset = "0xD5733C", VA = "0xD5733C")]
	public FXRandomizer()
	{
	}
}
[Token(Token = "0x2000179")]
public class GolemSwapper : MonoBehaviour
{
	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ToggleObjects bodyToggle;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Hand3lb leftHand;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Hand3lb rightHand;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MaterialTransition leftMT;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MaterialTransition rightMT;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MaterialTransition bodyMT;

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material golemOnMat;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material golemOffMat;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform TrackerOffsets;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform leftHandJoint;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform rightHandJoint;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Collider leftTouch;

	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Collider rightTouch;

	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Rigidbody leftBody;

	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Rigidbody rightBody;

	[Token(Token = "0x6000881")]
	[Address(RVA = "0xD57344", Offset = "0xD57344", VA = "0xD57344")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0xD573C8", Offset = "0xD573C8", VA = "0xD573C8")]
	public void SwapOnEnter()
	{
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0xD576F4", Offset = "0xD576F4", VA = "0xD576F4")]
	public void SwapOnExit()
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0xD57A70", Offset = "0xD57A70", VA = "0xD57A70")]
	public GolemSwapper()
	{
	}
}
[Token(Token = "0x200017A")]
public class KnockBackTrigger : MonoBehaviour
{
	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float knockBackTime;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float KnockDistance;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject thePlayer;

	[Token(Token = "0x6000885")]
	[Address(RVA = "0xD57A78", Offset = "0xD57A78", VA = "0xD57A78")]
	private void OnTriggerEnter(Collider Col)
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0xD57B10", Offset = "0xD57B10", VA = "0xD57B10")]
	public void DoKnockBack(float KnockDistance)
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0xD57BF0", Offset = "0xD57BF0", VA = "0xD57BF0")]
	public KnockBackTrigger()
	{
	}
}
[Token(Token = "0x200017B")]
public class MultiTriggerGrabObject : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200017C")]
	public struct MultiEvent
	{
		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string lookUpID;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Grabbable3lb myObject;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEvent useEvent;
	}

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	public Grabbable3lb lastObjectTaken;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public TriggerEvent3lb lastObjectTriggered;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool destroyOnTake;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool isMyObject;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool isOneShot;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReorderableList]
	public MultiEvent[] myEvents;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent onExit;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool showDebug;

	[Token(Token = "0x6000888")]
	[Address(RVA = "0xD57C00", Offset = "0xD57C00", VA = "0xD57C00")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0xD57F20", Offset = "0xD57F20", VA = "0xD57F20")]
	public void SearchEvents(TriggerEvent3lb holder)
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0xD57D5C", Offset = "0xD57D5C", VA = "0xD57D5C")]
	public void SearchEvents(Grabbable3lb holder)
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0xD58054", Offset = "0xD58054", VA = "0xD58054")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0xD5826C", Offset = "0xD5826C", VA = "0xD5826C")]
	public MultiTriggerGrabObject()
	{
	}
}
[Token(Token = "0x200017D")]
public class OculusDashSupportScript : MonoBehaviour
{
	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera[] cameras;

	[Token(Token = "0x600088D")]
	[Address(RVA = "0xD58274", Offset = "0xD58274", VA = "0xD58274")]
	private void Update()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0xD58380", Offset = "0xD58380", VA = "0xD58380")]
	public OculusDashSupportScript()
	{
	}
}
[Token(Token = "0x200017E")]
public class Checkpoint : MonoBehaviour
{
	[Token(Token = "0x600088F")]
	[Address(RVA = "0xD58388", Offset = "0xD58388", VA = "0xD58388")]
	private void Start()
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0xD5838C", Offset = "0xD5838C", VA = "0xD5838C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0xD58390", Offset = "0xD58390", VA = "0xD58390")]
	public Checkpoint()
	{
	}
}
[Token(Token = "0x200017F")]
[RequireComponent(typeof(PlayerAvatar))]
public class MenuAreaScript : MonoBehaviour
{
	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	public GameObject menuArea;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PlayerAvatar player;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isPaused;

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool inMenu;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	private bool initialized;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 lastLocation;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Quaternion lastRotation;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityEvent EnterMenu;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEvent ExitMenu;

	[Token(Token = "0x6000892")]
	[Address(RVA = "0xD58398", Offset = "0xD58398", VA = "0xD58398")]
	private void Start()
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0xD584A0", Offset = "0xD584A0", VA = "0xD584A0")]
	private void DelayedInit()
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0xD584AC", Offset = "0xD584AC", VA = "0xD584AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0xD58894", Offset = "0xD58894", VA = "0xD58894")]
	public void ButtonPress(Collider other)
	{
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0xD586B4", Offset = "0xD586B4", VA = "0xD586B4")]
	public void TeleportToArea()
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0xD58560", Offset = "0xD58560", VA = "0xD58560")]
	public void ReturnTeleport()
	{
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0xD5892C", Offset = "0xD5892C", VA = "0xD5892C")]
	private void ChangeMovement(bool chg)
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0xD58968", Offset = "0xD58968", VA = "0xD58968")]
	public MenuAreaScript()
	{
	}
}
[Token(Token = "0x2000180")]
public class PlayerAvatar : MonoBehaviour
{
	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject bodyTrackingSpace;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isMainBody;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float baseHeight;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 collectOffset;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Lists")]
	public GameObject[] turnOnWhenOccupied;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] turnOffWhenOccupied;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Collider[] listColliders;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VRIK yourVRIK;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Animator animator;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AutoMoveCharacter movementSystem;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Command Vars")]
	public bool isCommanded;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool isBeingTakenOver;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	public bool offAtStart;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("FX and Events")]
	public GameObject particleBlast;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEvent EnableBodyEvent;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEvent BodyDisableEvent;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Camera myCamera;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public HealthSystem healthSystem;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public VRPlayerRig myRig;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform playerTaggedBody;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public RespawnModule respawnModule;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public AbilityManager abilityManager;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public bool isGolemBody;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[ShowIf("isGolemBody")]
	public GolemSwapper golemSwapper;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[ShowIf("isGolemBody")]
	public GuidComponent saveGuid;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[ShowIf("isGolemBody")]
	public float saveCooldown;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private string myGuid;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Vector3 savedPosition;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private Vector3 savedRotation;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float timeStamp;

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private bool doneLoading;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private ES3Settings saveFile;

	[Token(Token = "0x600089A")]
	[Address(RVA = "0xD58970", Offset = "0xD58970", VA = "0xD58970")]
	private void Awake()
	{
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0xD58B40", Offset = "0xD58B40", VA = "0xD58B40", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0xD58D90", Offset = "0xD58D90", VA = "0xD58D90")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0xD58F50", Offset = "0xD58F50", VA = "0xD58F50")]
	public void TransferBody(PlayerAvatar oldBody)
	{
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0xD59044", Offset = "0xD59044", VA = "0xD59044", Slot = "5")]
	public virtual void DisableBody()
	{
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0xD59308", Offset = "0xD59308", VA = "0xD59308", Slot = "6")]
	public virtual void EnableBody()
	{
	}

	[Token(Token = "0x60008A0")]
	[Address(RVA = "0xD597C8", Offset = "0xD597C8", VA = "0xD597C8")]
	public void PlayParticleBlast()
	{
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0xD58E34", Offset = "0xD58E34", VA = "0xD58E34")]
	public void SaveLocation()
	{
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0xD5984C", Offset = "0xD5984C", VA = "0xD5984C")]
	private void LoadLocation()
	{
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0xD59A34", Offset = "0xD59A34", VA = "0xD59A34")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0xD59AA0", Offset = "0xD59AA0", VA = "0xD59AA0")]
	public PlayerAvatar()
	{
	}
}
[Token(Token = "0x2000181")]
public class PlayerAvatarManager : MonoBehaviour
{
	[Token(Token = "0x2000182")]
	[CompilerGenerated]
	private sealed class <RestoreFadeTime>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float waitTime;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerAvatarManager <>4__this;

		[Token(Token = "0x1700005D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008BF")]
			[Address(RVA = "0xD5ADE8", Offset = "0xD5ADE8", VA = "0xD5ADE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008C1")]
			[Address(RVA = "0xD5AE30", Offset = "0xD5AE30", VA = "0xD5AE30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xD5A414", Offset = "0xD5A414", VA = "0xD5A414")]
		[DebuggerHidden]
		public <RestoreFadeTime>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xD5AD18", Offset = "0xD5AD18", VA = "0xD5AD18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xD5AD1C", Offset = "0xD5AD1C", VA = "0xD5AD1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xD5ADF0", Offset = "0xD5ADF0", VA = "0xD5ADF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000183")]
	[CompilerGenerated]
	private sealed class <FadeBackIn>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float waitTime;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerAvatarManager <>4__this;

		[Token(Token = "0x1700005F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008C5")]
			[Address(RVA = "0xD5AF6C", Offset = "0xD5AF6C", VA = "0xD5AF6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000060")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008C7")]
			[Address(RVA = "0xD5AFB4", Offset = "0xD5AFB4", VA = "0xD5AFB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xD5A580", Offset = "0xD5A580", VA = "0xD5A580")]
		[DebuggerHidden]
		public <FadeBackIn>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xD5AE38", Offset = "0xD5AE38", VA = "0xD5AE38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xD5AE3C", Offset = "0xD5AE3C", VA = "0xD5AE3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xD5AF74", Offset = "0xD5AF74", VA = "0xD5AF74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayerAvatar originalBody;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayerAvatar remoteBody;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnergySystem energySystem;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public InputVR3lb.Button exitButton;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float leaveRadius;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PlayerAvatar currentBody;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject AudioSystem;

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SubtitleManager SubtitleCanvas;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 subtitleCanvasScale;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerAvatarManager instance;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Foldout("Events")]
	public UnityEvent TransferBodyEvent;

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Foldout("Events")]
	public UnityEvent ReturnToBodyEvent;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform menuAreaLoc;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform deathArea;

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private MenuAreaScript menuAreaScript;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float longFadeInTime;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private OVRScreenFade fader;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float originalFadeTime;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private IEnumerator fadeCoroutine;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 awakePos;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Quaternion awakeRot;

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0xD59AB4", Offset = "0xD59AB4", VA = "0xD59AB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0xD59C18", Offset = "0xD59C18", VA = "0xD59C18")]
	private void Start()
	{
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0xD5A03C", Offset = "0xD5A03C", VA = "0xD5A03C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0xD59E38", Offset = "0xD59E38", VA = "0xD59E38")]
	private void SetTracking()
	{
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0xD5A19C", Offset = "0xD5A19C", VA = "0xD5A19C")]
	private void ResetMe()
	{
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0xD5A1D8", Offset = "0xD5A1D8", VA = "0xD5A1D8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0xD5A27C", Offset = "0xD5A27C", VA = "0xD5A27C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0xD5A2D0", Offset = "0xD5A2D0", VA = "0xD5A2D0")]
	public void FadeOut(float fadeTime)
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0xD59F7C", Offset = "0xD59F7C", VA = "0xD59F7C")]
	public void FadeIn(float fadeTime)
	{
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0xD5A390", Offset = "0xD5A390", VA = "0xD5A390")]
	[IteratorStateMachine(typeof(<RestoreFadeTime>d__30))]
	private IEnumerator RestoreFadeTime(float waitTime)
	{
		return null;
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0xD5A43C", Offset = "0xD5A43C", VA = "0xD5A43C")]
	public void FadeOutIn(float fadeTime)
	{
	}

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0xD5A4FC", Offset = "0xD5A4FC", VA = "0xD5A4FC")]
	[IteratorStateMachine(typeof(<FadeBackIn>d__32))]
	private IEnumerator FadeBackIn(float waitTime)
	{
		return null;
	}

	[Token(Token = "0x60008B1")]
	[Address(RVA = "0xD59C9C", Offset = "0xD59C9C", VA = "0xD59C9C")]
	private void TransferAudioAndCamera()
	{
	}

	[Token(Token = "0x60008B2")]
	[Address(RVA = "0xD5A5A8", Offset = "0xD5A5A8", VA = "0xD5A5A8")]
	public void TransferIntoBody(PlayerAvatar newBody)
	{
	}

	[Token(Token = "0x60008B3")]
	[Address(RVA = "0xD5A6B4", Offset = "0xD5A6B4", VA = "0xD5A6B4")]
	public void ReturnToBody(Transform whereTo2)
	{
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0xD5A154", Offset = "0xD5A154", VA = "0xD5A154")]
	public void ReturnToBody()
	{
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0xD5A6E8", Offset = "0xD5A6E8", VA = "0xD5A6E8")]
	private void BodyReturn(Vector3 whereTo)
	{
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0xD5A980", Offset = "0xD5A980", VA = "0xD5A980")]
	private bool RandomPoint(Vector3 center, float range, out Vector3 result)
	{
		return default(bool);
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0xD5AAD0", Offset = "0xD5AAD0", VA = "0xD5AAD0")]
	private void SpawnPoints()
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0xD5AAD4", Offset = "0xD5AAD4", VA = "0xD5AAD4")]
	public void ExitMenu()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0xD5AAEC", Offset = "0xD5AAEC", VA = "0xD5AAEC")]
	public void RespawnPlayer()
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0xD5AC58", Offset = "0xD5AC58", VA = "0xD5AC58")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0xD5AD08", Offset = "0xD5AD08", VA = "0xD5AD08")]
	public PlayerAvatarManager()
	{
	}
}
[Token(Token = "0x2000184")]
[RequireComponent(typeof(HealthSystem))]
public class RespawnModule : MonoBehaviour
{
	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform deathArea;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform respawnPoint;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject visibleBody;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject rebirthEffect;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PlayerAvatar player;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Collider col;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private HealthSystem healthScript;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float respawnTime;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent goToDeathEvent;

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0xD5AFBC", Offset = "0xD5AFBC", VA = "0xD5AFBC")]
	public void Start()
	{
	}

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0xD5B204", Offset = "0xD5B204", VA = "0xD5B204")]
	public void SetRespawnPoint(Transform point)
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0xD5B20C", Offset = "0xD5B20C", VA = "0xD5B20C")]
	public void RespawnSystem()
	{
	}

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0xD5B440", Offset = "0xD5B440", VA = "0xD5B440")]
	public void QuickRespawn()
	{
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0xD5B390", Offset = "0xD5B390", VA = "0xD5B390")]
	public void KickOut()
	{
	}

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0xD5B56C", Offset = "0xD5B56C", VA = "0xD5B56C")]
	public void GotoDeathArea()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0xD5AB44", Offset = "0xD5AB44", VA = "0xD5AB44")]
	public void Rebirth()
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0xD5B848", Offset = "0xD5B848", VA = "0xD5B848")]
	public void ForceRecall()
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0xD5B5B8", Offset = "0xD5B5B8", VA = "0xD5B5B8")]
	private void PlayerGoto(Transform location)
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0xD5B850", Offset = "0xD5B850", VA = "0xD5B850")]
	public RespawnModule()
	{
	}
}
[Token(Token = "0x2000185")]
public class RespawnPoint : MonoBehaviour
{
	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	public bool isActive;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform spawnPoint;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isStartPoint;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool simpleCheckpoint;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideIf("simpleCheckpoint")]
	public GameObject activateFX;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideIf("simpleCheckpoint")]
	public Renderer water;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideIf("simpleCheckpoint")]
	public Material litWater;

	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideIf("simpleCheckpoint")]
	public UnityEvent onRespawn;

	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool dontSave;

	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GuidComponent saveGuid;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ReadOnly]
	public string myGuid;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ES3Settings saveFile;

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0xD5B860", Offset = "0xD5B860", VA = "0xD5B860")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0xD5BA28", Offset = "0xD5BA28", VA = "0xD5BA28")]
	private void Start()
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0xD5BCD8", Offset = "0xD5BCD8", VA = "0xD5BCD8")]
	private void SaveUsed()
	{
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0xD5BA98", Offset = "0xD5BA98", VA = "0xD5BA98")]
	private void CheckLastUsed()
	{
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0xD5BBFC", Offset = "0xD5BBFC", VA = "0xD5BBFC")]
	private void LoadUsed()
	{
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0xD5BEC4", Offset = "0xD5BEC4", VA = "0xD5BEC4")]
	private void SpawnPlayerHere()
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0xD5BF38", Offset = "0xD5BF38", VA = "0xD5BF38")]
	[Button("Activate Respawn Point", EButtonEnableMode.Always)]
	public void Activate()
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0xD5BDF8", Offset = "0xD5BDF8", VA = "0xD5BDF8")]
	private void SetActive()
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0xD5C048", Offset = "0xD5C048", VA = "0xD5C048")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0xD5C0B8", Offset = "0xD5C0B8", VA = "0xD5C0B8")]
	public RespawnPoint()
	{
	}
}
[Token(Token = "0x2000186")]
public class VRPlayerController : MonoBehaviour
{
	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Main Class-")]
	public Transform leftHandLoc;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rightHandLoc;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRMovementOculus moveControl;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject playerCamera;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform lastSavePoint;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HealthSystem healthScript;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static VRPlayerController instance;

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0xD5C0C0", Offset = "0xD5C0C0", VA = "0xD5C0C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0xD5C118", Offset = "0xD5C118", VA = "0xD5C118")]
	private void Start()
	{
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0xD5C228", Offset = "0xD5C228", VA = "0xD5C228")]
	private void Update()
	{
	}

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0xD5C308", Offset = "0xD5C308", VA = "0xD5C308")]
	public Transform HandsReturn()
	{
		return null;
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0xD5C25C", Offset = "0xD5C25C", VA = "0xD5C25C")]
	public void Respawn()
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0xD5C348", Offset = "0xD5C348", VA = "0xD5C348")]
	public VRPlayerController()
	{
	}
}
[Token(Token = "0x2000187")]
public class AreaCleanse : MonoBehaviour
{
	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cleanseMusicArea;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] SwitchOn;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] SwitchOff;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ReflectionProbe[] reflectionProbes;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject cleanseVFX;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent cleanseEvent;

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0xD5C350", Offset = "0xD5C350", VA = "0xD5C350")]
	public void Cleanse()
	{
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0xD5C4A4", Offset = "0xD5C4A4", VA = "0xD5C4A4")]
	public AreaCleanse()
	{
	}
}
[Token(Token = "0x2000188")]
public class BeamPuzzleNode : MonoBehaviour
{
	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Visual Hookups-")]
	public GameObject activeVisual;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject inactiveVisual;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool myColorAltered;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color beamColor;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool willAlterColor;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("-LineRenderer-")]
	public LineArcSystem myLine;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject lineHitPrefab;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RaycastHit hit;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[Header("-Node Control-")]
	public bool isEmitter;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	[DisableIf("lockOnStart")]
	public bool UnControllable;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
	[DisableIf("UnControllable")]
	public bool lockOnStart;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
	[HideIf("UnControllable")]
	private bool isControlled;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool lockOnConnect;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	[DisableIf("cantBeLockedOnto")]
	public bool noCenterOnLock;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	public bool cantBeLockedOnto;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform lockPoint;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[ReadOnly]
	public Vector3 lockPos;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Required(null)]
	[HideIf("UnControllable")]
	public NodeController myNodeController;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[HideIf("UnControllable")]
	[Range(0f, 1f)]
	public float intensity;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool leftControlled;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
	private bool rightControlled;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
	[Header("-EndPoint-")]
	public bool isEndPoint;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
	[ShowIf("isEndPoint")]
	public bool stayPowered;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[ShowIf("isEndPoint")]
	public bool endPointHasBeam;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	private bool isPowered;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[ShowIf("isEndPoint")]
	public int requiredNodes;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[ShowIf("isEndPoint")]
	public GameObject[] nodeIndicatorsOff;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[ShowIf("isEndPoint")]
	public GameObject[] nodeIndicatorsOn;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[ShowIf("isEndPoint")]
	public bool useSpecificNodes;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[ShowIf("isEndPoint")]
	public BeamPuzzleNode[] NodesForPuzzle;

	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[ShowIf("isEndPoint")]
	public UnityEvent EndPointConnect;

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[ShowIf("isEndPoint")]
	public UnityEvent EndPointDisconnect;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[Header("-Runtime Variables-")]
	public BeamPuzzleNode myConnection;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public int nodeCount;

	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public bool hasEnergy;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public List<BeamPuzzleNode> connectedNodes;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool showAudioRefs;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[EventRef]
	[ShowIf("showAudioRefs")]
	public string nodeConnectedAudio;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[ShowIf("showAudioRefs")]
	[EventRef]
	public string nodeDisconnectedAudio;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[ShowIf("showAudioRefs")]
	[EventRef]
	public string EndnodeConnect;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[ShowIf("showAudioRefs")]
	[EventRef]
	public string EndnodeConnectDisconnect;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public StudioEventEmitter hummEmitter;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Quaternion lastRotation;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float lastTime;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private float waitTime;

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0xD5C4AC", Offset = "0xD5C4AC", VA = "0xD5C4AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0xD5CBD8", Offset = "0xD5CBD8", VA = "0xD5CBD8")]
	private void Update()
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0xD5CF8C", Offset = "0xD5CF8C", VA = "0xD5CF8C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0xD5CFA4", Offset = "0xD5CFA4", VA = "0xD5CFA4")]
	private void FireRay()
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0xD5D400", Offset = "0xD5D400", VA = "0xD5D400", Slot = "4")]
	public virtual void FormRay(Vector3 endPoint, bool isConnection)
	{
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0xD5C82C", Offset = "0xD5C82C", VA = "0xD5C82C")]
	private void LightUp()
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0xD5C984", Offset = "0xD5C984", VA = "0xD5C984")]
	private void Darken()
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0xD5CB40", Offset = "0xD5CB40", VA = "0xD5CB40")]
	public void Lock()
	{
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0xD5D674", Offset = "0xD5D674", VA = "0xD5D674")]
	public void Unlock()
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0xD5D320", Offset = "0xD5D320", VA = "0xD5D320")]
	private bool CheckIfUpstreamNode(BeamPuzzleNode node)
	{
		return default(bool);
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0xD5D708", Offset = "0xD5D708", VA = "0xD5D708")]
	public void PlayHaptics()
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0xD5CBE8", Offset = "0xD5CBE8", VA = "0xD5CBE8")]
	public void ControlNode()
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0xD5D9C4", Offset = "0xD5D9C4", VA = "0xD5D9C4", Slot = "5")]
	public virtual void MakeConnection(BeamPuzzleNode theNode)
	{
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0xD5DBD8", Offset = "0xD5DBD8", VA = "0xD5DBD8", Slot = "6")]
	public virtual void Empower()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0xD5DE7C", Offset = "0xD5DE7C", VA = "0xD5DE7C")]
	public void Depower()
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0xD5DBC8", Offset = "0xD5DBC8", VA = "0xD5DBC8")]
	public bool AttemptConnection()
	{
		return default(bool);
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0xD5DE90", Offset = "0xD5DE90", VA = "0xD5DE90", Slot = "7")]
	public virtual bool AttemptDisconnectNode()
	{
		return default(bool);
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0xD5DF84", Offset = "0xD5DF84", VA = "0xD5DF84", Slot = "8")]
	public virtual void BreakConnection()
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0xD5DC70", Offset = "0xD5DC70", VA = "0xD5DC70")]
	public void GetConnectedNodes()
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0xD5E05C", Offset = "0xD5E05C", VA = "0xD5E05C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0xD5E154", Offset = "0xD5E154", VA = "0xD5E154")]
	public BeamPuzzleNode()
	{
	}
}
[Token(Token = "0x2000189")]
public class NodeController : MonoBehaviour
{
	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform leftController;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rightController;

	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject readyVis;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject controlVisual;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AutoMoveContextBlock contextBlocker;

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool activated;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform activatedHand;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 startNodePosition;

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0xD5E17C", Offset = "0xD5E17C", VA = "0xD5E17C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0xD5E1AC", Offset = "0xD5E1AC", VA = "0xD5E1AC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0xD5E268", Offset = "0xD5E268", VA = "0xD5E268")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0xD5E288", Offset = "0xD5E288", VA = "0xD5E288")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0xD5E2C8", Offset = "0xD5E2C8", VA = "0xD5E2C8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0xD5E374", Offset = "0xD5E374", VA = "0xD5E374")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0xD5D8B8", Offset = "0xD5D8B8", VA = "0xD5D8B8")]
	public void Activate(Transform hand)
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0xD5D548", Offset = "0xD5D548", VA = "0xD5D548")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0xD5D7BC", Offset = "0xD5D7BC", VA = "0xD5D7BC")]
	public bool ReadyToActivate()
	{
		return default(bool);
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0xD5E414", Offset = "0xD5E414", VA = "0xD5E414")]
	public NodeController()
	{
	}
}
[Token(Token = "0x200018A")]
public class CheckConnect : MonoBehaviour
{
	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float checkRadius;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool outOnly;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[ShowIf("outOnly")]
	public bool isEmitter;

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideIf("outOnly")]
	public CheckConnect[] linkedPoints;

	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideIf("outOnly")]
	public EventHolder3lb eventHolder;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReadOnly]
	public bool isPowered;

	[Token(Token = "0x6000903")]
	[Address(RVA = "0xD5E41C", Offset = "0xD5E41C", VA = "0xD5E41C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0xD5E434", Offset = "0xD5E434", VA = "0xD5E434")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0xD5E46C", Offset = "0xD5E46C", VA = "0xD5E46C")]
	public bool CheckForConnection()
	{
		return default(bool);
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0xD5E5C4", Offset = "0xD5E5C4", VA = "0xD5E5C4")]
	internal void CreateConnection()
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0xD5E64C", Offset = "0xD5E64C", VA = "0xD5E64C")]
	internal void DestroyConnection()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0xD5E6CC", Offset = "0xD5E6CC", VA = "0xD5E6CC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0xD5E720", Offset = "0xD5E720", VA = "0xD5E720")]
	public CheckConnect()
	{
	}
}
[Token(Token = "0x200018B")]
public class CheckPlayer : MonoBehaviour
{
	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float checkRadius;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EventHolder3lb eventHolder;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public bool isConnected;

	[Token(Token = "0x600090A")]
	[Address(RVA = "0xD5E730", Offset = "0xD5E730", VA = "0xD5E730")]
	private void Start()
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0xD5E848", Offset = "0xD5E848", VA = "0xD5E848")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0xD5E784", Offset = "0xD5E784", VA = "0xD5E784")]
	public bool CheckForPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0xD5E84C", Offset = "0xD5E84C", VA = "0xD5E84C")]
	internal void CreateConnection()
	{
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0xD5E888", Offset = "0xD5E888", VA = "0xD5E888")]
	internal void DestroyConnection()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0xD5E8C0", Offset = "0xD5E8C0", VA = "0xD5E8C0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0xD5E914", Offset = "0xD5E914", VA = "0xD5E914")]
	public CheckPlayer()
	{
	}
}
[Token(Token = "0x200018C")]
public class ConnectionPiece : MonoBehaviour
{
	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isEmitter;

	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[ReadOnly]
	public bool isConnected;

	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public List<ConnectionPiece> myConnections;

	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent connectedEvent;

	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent disconnectedEvent;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<ConnectionPiece> holdList;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int count;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int timeout;

	[Token(Token = "0x6000911")]
	[Address(RVA = "0xD5E924", Offset = "0xD5E924", VA = "0xD5E924")]
	private void Start()
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0xD5E9D8", Offset = "0xD5E9D8", VA = "0xD5E9D8")]
	[Button(null, EButtonEnableMode.Always)]
	public void _MakeEmitter()
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0xD5EA8C", Offset = "0xD5EA8C", VA = "0xD5EA8C")]
	[Button(null, EButtonEnableMode.Always)]
	public void _MakeNotEmitter()
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0xD5EBF0", Offset = "0xD5EBF0", VA = "0xD5EBF0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0xD5EE74", Offset = "0xD5EE74", VA = "0xD5EE74")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0xD5EFE4", Offset = "0xD5EFE4", VA = "0xD5EFE4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0xD5EB2C", Offset = "0xD5EB2C", VA = "0xD5EB2C")]
	internal void CheckForDisconnects()
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0xD5F074", Offset = "0xD5F074", VA = "0xD5F074")]
	private void FindAllParentConnections()
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0xD5F10C", Offset = "0xD5F10C", VA = "0xD5F10C")]
	private void RecruseAdd()
	{
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0xD5F3C4", Offset = "0xD5F3C4", VA = "0xD5F3C4")]
	public bool CheckForConnection()
	{
		return default(bool);
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0xD5EDC4", Offset = "0xD5EDC4", VA = "0xD5EDC4")]
	internal void EstablishedConnection()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0xD5E9E4", Offset = "0xD5E9E4", VA = "0xD5E9E4")]
	internal void EstablishedConnectionEmitter()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0xD5F040", Offset = "0xD5F040", VA = "0xD5F040")]
	internal void DestroyConnection()
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0xD5F45C", Offset = "0xD5F45C", VA = "0xD5F45C")]
	public ConnectionPiece()
	{
	}
}
[Token(Token = "0x200018D")]
public class LineDrawingNode : MonoBehaviour
{
	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public LineDrawingPuzzleMgr myManager;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool nodeActive;

	[Token(Token = "0x600091F")]
	[Address(RVA = "0xD60470", Offset = "0xD60470", VA = "0xD60470")]
	public void ResetNode()
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0xD6047C", Offset = "0xD6047C", VA = "0xD6047C")]
	private void ActivateNode()
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0xD60590", Offset = "0xD60590", VA = "0xD60590")]
	private void LightUp()
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0xD60478", Offset = "0xD60478", VA = "0xD60478")]
	public void Darken()
	{
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0xD60594", Offset = "0xD60594", VA = "0xD60594")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0xD60630", Offset = "0xD60630", VA = "0xD60630")]
	public LineDrawingNode()
	{
	}
}
[Token(Token = "0x200018E")]
public class LineDrawingPuzzleMgr : MonoBehaviour
{
	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineDrawingNode[] AllNodes;

	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LineDrawingNode[] correctPattern;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<LineDrawingNode> activatedNodes;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LineRenderer myLine;

	[Token(Token = "0x4000A38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Transform SelectedFinger;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float activeDistance;

	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool puzzleActive;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool puzzleSolved;

	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int totalJumps;

	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent puzzleCompleteEvent;

	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int curJumps;

	[Token(Token = "0x6000925")]
	[Address(RVA = "0xD60638", Offset = "0xD60638", VA = "0xD60638")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0xD6071C", Offset = "0xD6071C", VA = "0xD6071C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0xD604A0", Offset = "0xD604A0", VA = "0xD604A0")]
	public void NodeWasActivated(LineDrawingNode myNode)
	{
	}

	[Token(Token = "0x6000928")]
	[Address(RVA = "0xD60A80", Offset = "0xD60A80", VA = "0xD60A80")]
	private void AddPointToLine(Vector3 location)
	{
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0xD609FC", Offset = "0xD609FC", VA = "0xD609FC")]
	public void TrackFingerWithLine()
	{
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0xD60C48", Offset = "0xD60C48", VA = "0xD60C48")]
	private Vector3[] LineArray()
	{
		return null;
	}

	[Token(Token = "0x600092B")]
	[Address(RVA = "0xD60CCC", Offset = "0xD60CCC", VA = "0xD60CCC")]
	private void CheckForPattern()
	{
	}

	[Token(Token = "0x600092C")]
	[Address(RVA = "0xD608F4", Offset = "0xD608F4", VA = "0xD608F4")]
	public void ResetPuzzle()
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0xD60E90", Offset = "0xD60E90", VA = "0xD60E90")]
	private void ResetGraphicsSFX()
	{
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0xD60DFC", Offset = "0xD60DFC", VA = "0xD60DFC")]
	private void PuzzleComplete()
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0xD60E94", Offset = "0xD60E94", VA = "0xD60E94")]
	private void PuzzleCompleteSFX()
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0xD60F10", Offset = "0xD60F10", VA = "0xD60F10")]
	public LineDrawingPuzzleMgr()
	{
	}
}
[Token(Token = "0x200018F")]
public class TriggerRunsEvent : MonoBehaviour
{
	[Token(Token = "0x2000190")]
	public enum eTriggerType
	{
		[Token(Token = "0x4000A4B")]
		Hand,
		[Token(Token = "0x4000A4C")]
		Tag,
		[Token(Token = "0x4000A4D")]
		Thing,
		[Token(Token = "0x4000A4E")]
		None
	}

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public eTriggerType triggerType;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent theEvent;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent exitEvent;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool turnOffAfterUse;

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string target;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isBuffered;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject thing;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool killThing;

	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float killDelay;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Animator animationToBool;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ParticleSystem particlesToPlay;

	[Token(Token = "0x6000931")]
	[Address(RVA = "0xD60F18", Offset = "0xD60F18", VA = "0xD60F18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0xD60F80", Offset = "0xD60F80", VA = "0xD60F80")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0xD61220", Offset = "0xD61220", VA = "0xD61220")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0xD610C0", Offset = "0xD610C0", VA = "0xD610C0")]
	public void RunEnterEvent()
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0xD61354", Offset = "0xD61354", VA = "0xD61354")]
	public void RunExitEvent()
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0xD61400", Offset = "0xD61400", VA = "0xD61400")]
	public TriggerRunsEvent()
	{
	}
}
[Token(Token = "0x2000191")]
public enum eElementalType
{
	[Token(Token = "0x4000A50")]
	None,
	[Token(Token = "0x4000A51")]
	Light,
	[Token(Token = "0x4000A52")]
	Water,
	[Token(Token = "0x4000A53")]
	Lava,
	[Token(Token = "0x4000A54")]
	Silver,
	[Token(Token = "0x4000A55")]
	Earth
}
[Token(Token = "0x2000192")]
[RequireComponent(typeof(Grabbable3lb))]
public class ElementalEnergy : MonoBehaviour
{
	[Token(Token = "0x2000193")]
	[CompilerGenerated]
	private sealed class <ActivatePullDelay>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ElementalEnergy <>4__this;

		[Token(Token = "0x17000062")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000947")]
			[Address(RVA = "0xD61FD0", Offset = "0xD61FD0", VA = "0xD61FD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000949")]
			[Address(RVA = "0xD62018", Offset = "0xD62018", VA = "0xD62018", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xD616FC", Offset = "0xD616FC", VA = "0xD616FC")]
		[DebuggerHidden]
		public <ActivatePullDelay>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xD61F00", Offset = "0xD61F00", VA = "0xD61F00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xD61F04", Offset = "0xD61F04", VA = "0xD61F04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xD61FD8", Offset = "0xD61FD8", VA = "0xD61FD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public eElementalType elementalType;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ElementalSocket yourHome;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ElementalSocket yourPocket;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ElementalSocket yourHolder;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LineArcSystem myLine;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isPulled;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float pullDelay;

	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool canPlace;

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	internal Grabbable3lb grab;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine _pullDelayCoroutine;

	[Token(Token = "0x17000061")]
	private Coroutine pullDelayCoroutine
	{
		[Token(Token = "0x6000938")]
		[Address(RVA = "0xD61460", Offset = "0xD61460", VA = "0xD61460")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000937")]
		[Address(RVA = "0xD6141C", Offset = "0xD6141C", VA = "0xD6141C")]
		set
		{
		}
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0xD61468", Offset = "0xD61468", VA = "0xD61468")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0xD6160C", Offset = "0xD6160C", VA = "0xD6160C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0xD61598", Offset = "0xD61598", VA = "0xD61598")]
	[IteratorStateMachine(typeof(<ActivatePullDelay>d__15))]
	private IEnumerator ActivatePullDelay()
	{
		return null;
	}

	[Token(Token = "0x600093C")]
	[Address(RVA = "0xD61724", Offset = "0xD61724", VA = "0xD61724")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0xD61880", Offset = "0xD61880", VA = "0xD61880")]
	public void DroppedByPerson(Autohand.Hand hand, Grabbable grabbable)
	{
	}

	[Token(Token = "0x600093E")]
	[Address(RVA = "0xD61A0C", Offset = "0xD61A0C", VA = "0xD61A0C")]
	protected void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600093F")]
	[Address(RVA = "0xD61A94", Offset = "0xD61A94", VA = "0xD61A94")]
	public void SocketSocket(ElementalSocket socket)
	{
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0xD61BCC", Offset = "0xD61BCC", VA = "0xD61BCC")]
	public void InfuseObject(ElementalSocket holder)
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0xD6194C", Offset = "0xD6194C", VA = "0xD6194C")]
	public void VisualDeath(bool forceHome = false)
	{
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0xD61E68", Offset = "0xD61E68", VA = "0xD61E68")]
	public void GotoHere(Transform where)
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0xD61EEC", Offset = "0xD61EEC", VA = "0xD61EEC")]
	public ElementalEnergy()
	{
	}
}
[Serializable]
[Token(Token = "0x2000194")]
public class Elements
{
	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public eElementalType elementalType;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject chargedVisual;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ElementalEnergy elementPrefab;

	[Token(Token = "0x600094A")]
	[Address(RVA = "0xD62020", Offset = "0xD62020", VA = "0xD62020")]
	public Elements()
	{
	}
}
[Token(Token = "0x2000195")]
public class ElementalSocket : MonoBehaviour
{
	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public eElementalType elementalType;

	[Token(Token = "0x4000A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ElementalEnergy elementPrefab;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public ElementalEnergy elementEnergy;

	[Token(Token = "0x4000A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject chargedVisual;

	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject unchargedVisual;

	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool startCharged;

	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[ReadOnly]
	public bool hasCharge;

	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	[ReadOnly]
	public bool wasUsed;

	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	public bool isPocket;

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[DisableIf(EConditionOperator.Or, new string[] { "isPocket", "breakOnUse" })]
	public bool canBeReactivated;

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	[DisableIf(EConditionOperator.Or, new string[] { "isPocket", "canBeReactivated" })]
	public bool breakOnUse;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("breakOnUse")]
	public GameObject breakFX;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Label("Lock On Activate")]
	[Tooltip("Will only accept motes, not give them.")]
	public bool onlyTake;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Tooltip("Distance Required to Pull")]
	public float distance;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("Fmod Events")]
	public StudioEventEmitter pushEmitter;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public StudioEventEmitter pullEmitter;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Autohand.Hand attachedGrab;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isPulling;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool inTrigger;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject triggerObject;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GuidComponent saveGuid;

	[Token(Token = "0x4000A7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[ReadOnly]
	public string myGuid;

	[Token(Token = "0x4000A7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool savedState;

	[Token(Token = "0x4000A7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ES3Settings saveFile;

	[Token(Token = "0x4000A7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool showEvents;

	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[ShowIf("showEvents")]
	public UnityEvent activateEvent;

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[ShowIf("showEvents")]
	public UnityEvent deactivateEvent;

	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[ShowIf("showEvents")]
	public UnityEvent lockEvent;

	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Header("MultiElement")]
	public bool isMultiElementHolder;

	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[ShowIf("isMultiElementHolder")]
	public int curIndex;

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[ShowIf("isMultiElementHolder")]
	public Elements[] elements;

	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private ElementalEnergy energyMote;

	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private bool skipEventsOnStart;

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[ShowIf("showEvents")]
	private UnityEvent pullEvent;

	[Token(Token = "0x600094B")]
	[Address(RVA = "0xD62028", Offset = "0xD62028", VA = "0xD62028")]
	private void Awake()
	{
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0xD621F0", Offset = "0xD621F0", VA = "0xD621F0")]
	private void Start()
	{
	}

	[Token(Token = "0x600094D")]
	[Address(RVA = "0xD62884", Offset = "0xD62884", VA = "0xD62884")]
	private void SaveState()
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0xD625D4", Offset = "0xD625D4", VA = "0xD625D4")]
	private void LoadState()
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0xD62A04", Offset = "0xD62A04", VA = "0xD62A04")]
	private void SaveBroken()
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0xD627C8", Offset = "0xD627C8", VA = "0xD627C8")]
	private void LoadBroken()
	{
	}

	[Token(Token = "0x6000951")]
	[Address(RVA = "0xD62A7C", Offset = "0xD62A7C", VA = "0xD62A7C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0xD62B24", Offset = "0xD62B24", VA = "0xD62B24")]
	private void CheckPull()
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0xD62C88", Offset = "0xD62C88", VA = "0xD62C88")]
	private void CreateMote()
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0xD62DB4", Offset = "0xD62DB4", VA = "0xD62DB4")]
	private void CalcuatePull()
	{
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0xD62EC0", Offset = "0xD62EC0", VA = "0xD62EC0")]
	private void DoPull()
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0xD62F70", Offset = "0xD62F70", VA = "0xD62F70")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0xD62F98", Offset = "0xD62F98", VA = "0xD62F98")]
	internal void CheckBreak()
	{
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0xD63068", Offset = "0xD63068", VA = "0xD63068")]
	[Button(null, EButtonEnableMode.Always)]
	public void Activate()
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0xD61D70", Offset = "0xD61D70", VA = "0xD61D70")]
	internal void Imbue()
	{
	}

	[Token(Token = "0x600095A")]
	[Address(RVA = "0xD61918", Offset = "0xD61918", VA = "0xD61918")]
	internal void ReturnHome()
	{
	}

	[Token(Token = "0x600095B")]
	[Address(RVA = "0xD62460", Offset = "0xD62460", VA = "0xD62460")]
	private void SetActive()
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0xD6251C", Offset = "0xD6251C", VA = "0xD6251C")]
	private void SetInactive()
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0xD61E40", Offset = "0xD61E40", VA = "0xD61E40")]
	internal void ReleaseEnergy()
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0xD6313C", Offset = "0xD6313C", VA = "0xD6313C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0xD631C8", Offset = "0xD631C8", VA = "0xD631C8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0xD61CD0", Offset = "0xD61CD0", VA = "0xD61CD0")]
	internal void SetCurrentEnergy(int index)
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0xD63294", Offset = "0xD63294", VA = "0xD63294")]
	private void SaveElement()
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0xD6231C", Offset = "0xD6231C", VA = "0xD6231C")]
	private void LoadElement()
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0xD622B0", Offset = "0xD622B0", VA = "0xD622B0")]
	private void HideVisuals()
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0xD63348", Offset = "0xD63348", VA = "0xD63348")]
	public ElementalSocket()
	{
	}
}
[Token(Token = "0x2000196")]
public class MoveObjectsToAndFrom : MonoBehaviour
{
	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] objects;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 xRange;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 yRange;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 zRange;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool disassembleOnStart;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool disableOnStart;

	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float moveTime;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isAssembled;

	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<Vector3> objectStartLocations;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<Vector3> objectEndPositions;

	[Token(Token = "0x6000965")]
	[Address(RVA = "0xD6335C", Offset = "0xD6335C", VA = "0xD6335C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0xD638E0", Offset = "0xD638E0", VA = "0xD638E0")]
	public void Assemble()
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0xD63760", Offset = "0xD63760", VA = "0xD63760")]
	public void Disassemble()
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0xD63A00", Offset = "0xD63A00", VA = "0xD63A00")]
	public void MakeAllActive()
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0xD6387C", Offset = "0xD6387C", VA = "0xD6387C")]
	public void MakeAllInactive()
	{
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0xD63A64", Offset = "0xD63A64", VA = "0xD63A64")]
	public MoveObjectsToAndFrom()
	{
	}
}
[Token(Token = "0x2000197")]
public class ObjectDoThings : MonoBehaviour
{
	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool disableOnStart;

	[Token(Token = "0x4000A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 delay;

	[Token(Token = "0x4000A94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Ease easeType;

	[Token(Token = "0x4000A95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Foldout("Position Settings")]
	public Transform goToLocation;

	[Token(Token = "0x4000A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Foldout("Position Settings")]
	public float moveTime;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Foldout("Position Settings")]
	public bool goToOnStart;

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[Foldout("Position Settings")]
	public bool doPopUp;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Foldout("Position Settings")]
	public float popUpTime;

	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Foldout("Scale Settings")]
	public bool scaleOnEnable;

	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[Foldout("Scale Settings")]
	public bool scaleBackDown;

	[Token(Token = "0x4000A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Foldout("Scale Settings")]
	public float scaleBackDownDelay;

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Foldout("Scale Settings")]
	public Vector2 scaleTime;

	[Token(Token = "0x4000A9E")]
	[Foldout("Scale Settings")]
	private const float minScale = 0.0001f;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Foldout("Spawn Settings")]
	public GameObject spawnItem;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Foldout("Spawn Settings")]
	public Transform spawnWhere;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Foldout("Spawn Settings")]
	public bool killSpawnedObject;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Foldout("Spawn Settings")]
	public float deathTime;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Foldout("Turn On/Off Delay")]
	public float turnOffTime;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Foldout("Turn On/Off Delay")]
	public float turnOnTime;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Foldout("Turn On/Off Delay")]
	public GameObject TurnonItem;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HorizontalLine(2f, EColor.Gray)]
	[Foldout("Material Settings - DEPRECATED")]
	public string materialProp;

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Foldout("Material Settings - DEPRECATED")]
	public float matChangeDuration;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Foldout("Material Settings - DEPRECATED")]
	public Renderer myRender;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Foldout("Material Settings - DEPRECATED")]
	private Color startColor;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Foldout("Material Settings - DEPRECATED")]
	public Color[] goToColors;

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Material oldMaterial;

	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Foldout("Animation Settings - DEPRECATED")]
	public Animator animator;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Foldout("SFX Settings - DEPRECATED")]
	public GameObject audioEffect;

	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Foldout("SFX Settings - DEPRECATED")]
	public GameObject whereAudio;

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Foldout("VFX Settings - DEPRECATED")]
	public GameObject poof;

	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Foldout("VFX Settings - DEPRECATED")]
	public Transform poofWhere;

	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 oldScale;

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Vector3 startPosition;

	[Token(Token = "0x4000AB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Quaternion startRotation;

	[Token(Token = "0x4000AB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool moved;

	[Token(Token = "0x4000AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Sequence moveSequence;

	[Token(Token = "0x600096B")]
	[Address(RVA = "0xD63B44", Offset = "0xD63B44", VA = "0xD63B44")]
	private void Awake()
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0xD63F68", Offset = "0xD63F68", VA = "0xD63F68")]
	public void CreatePoof()
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0xD6411C", Offset = "0xD6411C", VA = "0xD6411C")]
	public void CreateObject()
	{
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0xD64278", Offset = "0xD64278", VA = "0xD64278")]
	public void CreateObject(GameObject item)
	{
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0xD643D4", Offset = "0xD643D4", VA = "0xD643D4")]
	public void DestroyThing(GameObject thing)
	{
	}

	[Token(Token = "0x6000970")]
	[Address(RVA = "0xD6442C", Offset = "0xD6442C", VA = "0xD6442C")]
	public void DestroySelf()
	{
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0xD64498", Offset = "0xD64498", VA = "0xD64498")]
	public void MatchToTransform()
	{
	}

	[Token(Token = "0x6000972")]
	[Address(RVA = "0xD63E4C", Offset = "0xD63E4C", VA = "0xD63E4C")]
	public void SetToTransform()
	{
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0xD6463C", Offset = "0xD6463C", VA = "0xD6463C")]
	public void ReturnToStart()
	{
	}

	[Token(Token = "0x6000974")]
	[Address(RVA = "0xD6479C", Offset = "0xD6479C", VA = "0xD6479C")]
	public void ToggleTransform()
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0xD647AC", Offset = "0xD647AC", VA = "0xD647AC")]
	public void ScaleDownAndOff()
	{
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0xD64900", Offset = "0xD64900", VA = "0xD64900")]
	public void ScaleUpOn()
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0xD64AAC", Offset = "0xD64AAC", VA = "0xD64AAC")]
	public void ScaleMulti(float multi)
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0xD64B38", Offset = "0xD64B38", VA = "0xD64B38")]
	public void ScaleTo(float scale)
	{
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0xD64BD8", Offset = "0xD64BD8", VA = "0xD64BD8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0xD64BE8", Offset = "0xD64BE8", VA = "0xD64BE8")]
	private void InvokeScaleDown()
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0xD64C4C", Offset = "0xD64C4C", VA = "0xD64C4C")]
	public void TurnOnWithDelay()
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0xD64D4C", Offset = "0xD64D4C", VA = "0xD64D4C")]
	public void TurnOn()
	{
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0xD64D6C", Offset = "0xD64D6C", VA = "0xD64D6C")]
	public void TurnOffWithDelay()
	{
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0xD64E6C", Offset = "0xD64E6C", VA = "0xD64E6C")]
	public void TurnOff()
	{
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0xD63E28", Offset = "0xD63E28", VA = "0xD63E28")]
	public void DisableNow()
	{
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0xD64E8C", Offset = "0xD64E8C", VA = "0xD64E8C")]
	public void GoToSequence(Vector3 pos)
	{
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0xD65074", Offset = "0xD65074", VA = "0xD65074")]
	public void GoToTransform(Transform pos)
	{
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0xD650DC", Offset = "0xD650DC", VA = "0xD650DC")]
	public void GoToSetPosition()
	{
	}

	[Token(Token = "0x6000983")]
	[Address(RVA = "0xD65140", Offset = "0xD65140", VA = "0xD65140")]
	public void GoToStartPosition()
	{
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0xD65198", Offset = "0xD65198", VA = "0xD65198")]
	public void SetActiveOrNot(bool chg)
	{
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0xD651C0", Offset = "0xD651C0", VA = "0xD651C0")]
	public void MaterialTween(float valueChange)
	{
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0xD652C0", Offset = "0xD652C0", VA = "0xD652C0")]
	public void MaterialGoToColor(int index)
	{
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0xD653D8", Offset = "0xD653D8", VA = "0xD653D8")]
	public void MaterialStartColor()
	{
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0xD654CC", Offset = "0xD654CC", VA = "0xD654CC")]
	public void MaterialDurationChange(float valueChange)
	{
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0xD655A8", Offset = "0xD655A8", VA = "0xD655A8")]
	public void MaterialChange(Material chg)
	{
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0xD65690", Offset = "0xD65690", VA = "0xD65690")]
	public void MaterialRevert()
	{
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0xD65774", Offset = "0xD65774", VA = "0xD65774")]
	public void AnimSetActive()
	{
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0xD658A8", Offset = "0xD658A8", VA = "0xD658A8")]
	public void AnimSetInactive()
	{
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0xD659DC", Offset = "0xD659DC", VA = "0xD659DC")]
	public ObjectDoThings()
	{
	}
}
[Token(Token = "0x2000198")]
public class ObjectSwapper : MonoBehaviour
{
	[Token(Token = "0x4000AB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] SetA;

	[Token(Token = "0x4000AB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] SetB;

	[Token(Token = "0x600098E")]
	[Address(RVA = "0xD65A90", Offset = "0xD65A90", VA = "0xD65A90")]
	public void SwapSets(bool toA)
	{
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0xD65B48", Offset = "0xD65B48", VA = "0xD65B48")]
	public ObjectSwapper()
	{
	}
}
[Token(Token = "0x2000199")]
public class PhyZone : MonoBehaviour
{
	[Token(Token = "0x4000AB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Base Settings-")]
	[NaughtyAttributes.Tag]
	public string acceptedTag;

	[Token(Token = "0x4000AB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool zeroVel;

	[Token(Token = "0x4000ABA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[HideIf("knockback")]
	public bool applyForce;

	[Token(Token = "0x4000ABB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float magintude;

	[Token(Token = "0x4000ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool knockback;

	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[Header("-Other Settings-")]
	[HideIf("knockback")]
	[Tooltip("Defaults to Z Value")]
	[Header("Custom Directions")]
	public bool customDirection;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("customDirection")]
	[HideIf("knockback")]
	[Required(null)]
	public Transform directionObject;

	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ShowIf("customDirection")]
	[HideIf("knockback")]
	public bool inverseDirection;

	[Token(Token = "0x4000AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[Header("-Collisions-")]
	public bool doOnEnter;

	[Token(Token = "0x4000AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool doOnStay;

	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	public bool doOnExit;

	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Header("Alter RigidBody")]
	public bool alterBody;

	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[ShowIf("alterBody")]
	public bool makeKinamatic;

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	[ShowIf("alterBody")]
	public bool makeGravity;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
	[Header("-Events-")]
	public bool showEvents;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("showEvents")]
	public UnityEvent enterEvent;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("showEvents")]
	public UnityEvent exitEvent;

	[Token(Token = "0x6000990")]
	[Address(RVA = "0xD65B50", Offset = "0xD65B50", VA = "0xD65B50")]
	public void _ApplyForce(Rigidbody body)
	{
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0xD65C2C", Offset = "0xD65C2C", VA = "0xD65C2C")]
	private Vector3 CalcuateDirection(Rigidbody body)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0xD65E38", Offset = "0xD65E38", VA = "0xD65E38")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0xD66130", Offset = "0xD66130", VA = "0xD66130")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0xD661C8", Offset = "0xD661C8", VA = "0xD661C8")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0xD66250", Offset = "0xD66250", VA = "0xD66250")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0xD662E8", Offset = "0xD662E8", VA = "0xD662E8")]
	public PhyZone()
	{
	}
}
[Token(Token = "0x200019A")]
public class PuzzleRotator : MonoBehaviour
{
	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 direction;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rotateBy;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float duration;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int rotateStepsOnstart;

	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Ease whatEase;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 originalRotation;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isBlocked;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GuidComponent saveGuid;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string myGuid;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 savedRotation;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ES3Settings saveFile;

	[Token(Token = "0x6000997")]
	[Address(RVA = "0xD662F8", Offset = "0xD662F8", VA = "0xD662F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000998")]
	[Address(RVA = "0xD664C0", Offset = "0xD664C0", VA = "0xD664C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0xD666A8", Offset = "0xD666A8", VA = "0xD666A8")]
	[Button("Do Rotate", EButtonEnableMode.Always)]
	public void RotateStep()
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0xD667EC", Offset = "0xD667EC", VA = "0xD667EC")]
	public void RotateBack()
	{
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0xD66930", Offset = "0xD66930", VA = "0xD66930")]
	public void ResetRotation()
	{
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0xD669B0", Offset = "0xD669B0", VA = "0xD669B0")]
	public void RotateComplete()
	{
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0xD66A84", Offset = "0xD66A84", VA = "0xD66A84")]
	[Button("Curve Examples - Open Browser", EButtonEnableMode.Always)]
	public void ShowCurves()
	{
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0xD669C8", Offset = "0xD669C8", VA = "0xD669C8")]
	private void SaveRotation()
	{
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0xD665C0", Offset = "0xD665C0", VA = "0xD665C0")]
	private void LoadRotation()
	{
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0xD66AC8", Offset = "0xD66AC8", VA = "0xD66AC8")]
	public PuzzleRotator()
	{
	}
}
[Token(Token = "0x200019B")]
public class TeleportPad : MonoBehaviour
{
	[Token(Token = "0x200019C")]
	[CompilerGenerated]
	private sealed class <Teleport>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportPad <>4__this;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject other;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <isPlayer>5__2;

		[Token(Token = "0x17000064")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009AB")]
			[Address(RVA = "0xD6791C", Offset = "0xD6791C", VA = "0xD6791C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009AD")]
			[Address(RVA = "0xD67964", Offset = "0xD67964", VA = "0xD67964", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xD66BCC", Offset = "0xD66BCC", VA = "0xD66BCC")]
		[DebuggerHidden]
		public <Teleport>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xD67228", Offset = "0xD67228", VA = "0xD67228", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xD6722C", Offset = "0xD6722C", VA = "0xD6722C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xD67924", Offset = "0xD67924", VA = "0xD67924", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200019D")]
	[CompilerGenerated]
	private sealed class <Unused>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delayTime;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TeleportPad pad;

		[Token(Token = "0x17000066")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009B1")]
			[Address(RVA = "0xD67A30", Offset = "0xD67A30", VA = "0xD67A30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000067")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009B3")]
			[Address(RVA = "0xD67A78", Offset = "0xD67A78", VA = "0xD67A78", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xD671A8", Offset = "0xD671A8", VA = "0xD671A8")]
		[DebuggerHidden]
		public <Unused>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xD6796C", Offset = "0xD6796C", VA = "0xD6796C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xD67970", Offset = "0xD67970", VA = "0xD67970", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xD67A38", Offset = "0xD67A38", VA = "0xD67A38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TeleportPad teleportTo;

	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[DisableIf("forceRotationMatch")]
	public bool takeRotation;

	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[DisableIf("takeRotation")]
	public bool forceRotationMatch;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float rotationOffset;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool oneWay;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 offset;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float delayTime;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject fxParticle;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool effectOnOther;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[NaughtyAttributes.Tag]
	public string playerTag;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool wasUsed;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent OnUse;

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0xD66B3C", Offset = "0xD66B3C", VA = "0xD66B3C")]
	[IteratorStateMachine(typeof(<Teleport>d__12))]
	private IEnumerator Teleport(GameObject other)
	{
		return null;
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0xD66BF4", Offset = "0xD66BF4", VA = "0xD66BF4")]
	public void MakeTeleport()
	{
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0xD66DF4", Offset = "0xD66DF4", VA = "0xD66DF4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0xD66FC8", Offset = "0xD66FC8", VA = "0xD66FC8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0xD670A4", Offset = "0xD670A4", VA = "0xD670A4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0xD67020", Offset = "0xD67020", VA = "0xD67020")]
	[IteratorStateMachine(typeof(<Unused>d__17))]
	private IEnumerator Unused(TeleportPad pad, float delayTime)
	{
		return null;
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0xD671D0", Offset = "0xD671D0", VA = "0xD671D0")]
	public TeleportPad()
	{
	}
}
[Token(Token = "0x200019E")]
public class TimeActiveNode : MonoBehaviour
{
	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Node Settings-")]
	[Tooltip("Defaulted to True")]
	public bool isCorrect;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("-Timer Settings-")]
	[Tooltip("Count Down Handled by TimeNodePuzzle if Linked")]
	public float coolDown;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public float currentTime;

	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[ReadOnly]
	public bool timerActive;

	[Token(Token = "0x4000AED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[Header("-Debug Systems-")]
	public bool ShowGizmos;

	[Token(Token = "0x4000AEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	[Tooltip("Resets Puzzle")]
	public bool resetBomb;

	[Token(Token = "0x4000AEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
	[ReadOnly]
	public bool wasUsed;

	[Token(Token = "0x4000AF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public TimeActivePuzzle myPuzzle;

	[Token(Token = "0x4000AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("These events are for if puzzle piece adds to count puzzle or not")]
	public UnityEvent correctEvent;

	[Token(Token = "0x4000AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Incorrect can also be used to hide information like this isn't the right rune")]
	public UnityEvent incorrectEvent;

	[Token(Token = "0x4000AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent ResetEvent;

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0xD67A80", Offset = "0xD67A80", VA = "0xD67A80")]
	[Button("Test Use", EButtonEnableMode.Always)]
	public void _Use()
	{
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0xD67BB4", Offset = "0xD67BB4", VA = "0xD67BB4")]
	public void StartTimer()
	{
	}

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0xD67C28", Offset = "0xD67C28", VA = "0xD67C28")]
	internal void Reset()
	{
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0xD67CA4", Offset = "0xD67CA4", VA = "0xD67CA4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60009B8")]
	[Address(RVA = "0xD67D68", Offset = "0xD67D68", VA = "0xD67D68")]
	public TimeActiveNode()
	{
	}
}
[Token(Token = "0x200019F")]
public class TimeActivePuzzle : MonoBehaviour
{
	[Token(Token = "0x4000AF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Main Hookup-")]
	public TimeActiveNode[] timeActivePuzzleNodes;

	[Token(Token = "0x4000AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("-Timer Settings-")]
	[Tooltip("Shared for Main Puzzle or Put to Other Objects")]
	public float resetTime;

	[Token(Token = "0x4000AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Nodes Share Same Time")]
	public bool useSameTimeSettings;

	[Token(Token = "0x4000AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public float timer;

	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[ReadOnly]
	public bool isCountingDown;

	[Token(Token = "0x4000AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	[Tooltip("All Nodes Start and Stop at Exact Time if not they each do their own time")]
	[Header("-Puzzle Settings-")]
	public bool nodesShareCountDown;

	[Token(Token = "0x4000AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool isDone;

	[Token(Token = "0x4000AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public bool allIncorrectResets;

	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReadOnly]
	[Header("-Debug Settings-")]
	public int maxAmount;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[ReadOnly]
	public int amount;

	[Token(Token = "0x4000AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("-UnityEvents-")]
	public bool ShowUnityEvents;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("ShowUnityEvents")]
	public UnityEvent complete;

	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("ShowUnityEvents")]
	public UnityEvent timerStartEvent;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ShowIf("ShowUnityEvents")]
	public UnityEvent timeExpiredEvent;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ShowIf("ShowUnityEvents")]
	[Header("Only works if nodes ShareCoolDown")]
	public UnityEvent resetEvent;

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ShowIf("ShowUnityEvents")]
	public bool runRestOnExpired;

	[Token(Token = "0x60009B9")]
	[Address(RVA = "0xD67D80", Offset = "0xD67D80", VA = "0xD67D80")]
	private void Start()
	{
	}

	[Token(Token = "0x60009BA")]
	[Address(RVA = "0xD67E4C", Offset = "0xD67E4C", VA = "0xD67E4C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0xD67E50", Offset = "0xD67E50", VA = "0xD67E50")]
	private void TimerSystem()
	{
	}

	[Token(Token = "0x60009BC")]
	[Address(RVA = "0xD67B44", Offset = "0xD67B44", VA = "0xD67B44")]
	public void _Reset()
	{
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0xD67AFC", Offset = "0xD67AFC", VA = "0xD67AFC")]
	internal void InteralAdd()
	{
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0xD67C00", Offset = "0xD67C00", VA = "0xD67C00")]
	public void StartingTimer()
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0xD67C84", Offset = "0xD67C84", VA = "0xD67C84")]
	internal void InteralSubtract()
	{
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0xD67F44", Offset = "0xD67F44", VA = "0xD67F44")]
	private void Complete()
	{
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0xD67F6C", Offset = "0xD67F6C", VA = "0xD67F6C")]
	public TimeActivePuzzle()
	{
	}
}
[Token(Token = "0x20001A0")]
public class RecorderCameraDelay : MonoBehaviour
{
	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform followObject;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float delayRotation;

	[Token(Token = "0x4000B06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float delaymove;

	[Token(Token = "0x4000B07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool startOff;

	[Token(Token = "0x4000B08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool directFollow;

	[Token(Token = "0x4000B09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 offset;

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0xD67F7C", Offset = "0xD67F7C", VA = "0xD67F7C")]
	private void Start()
	{
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0xD67FEC", Offset = "0xD67FEC", VA = "0xD67FEC")]
	private void MovementStuff()
	{
	}

	[Token(Token = "0x60009C4")]
	[Address(RVA = "0xD681B8", Offset = "0xD681B8", VA = "0xD681B8")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x60009C5")]
	[Address(RVA = "0xD681BC", Offset = "0xD681BC", VA = "0xD681BC")]
	public RecorderCameraDelay()
	{
	}
}
[Token(Token = "0x20001A1")]
public class RecycleDispenser : MonoBehaviour
{
	[Token(Token = "0x4000B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] spawnObjects;

	[Token(Token = "0x4000B0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int index;

	[Token(Token = "0x4000B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool resetVelocity;

	[Token(Token = "0x4000B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool isLocked;

	[Token(Token = "0x4000B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent dispenseEvent;

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0xD681CC", Offset = "0xD681CC", VA = "0xD681CC")]
	public void Start()
	{
	}

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0xD68230", Offset = "0xD68230", VA = "0xD68230")]
	public void Lock()
	{
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0xD6823C", Offset = "0xD6823C", VA = "0xD6823C")]
	public void _Dispense()
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0xD68488", Offset = "0xD68488", VA = "0xD68488")]
	public RecycleDispenser()
	{
	}
}
[Token(Token = "0x20001A2")]
public class RespawnObject : MonoBehaviour
{
	[Token(Token = "0x4000B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform respawnLoc;

	[Token(Token = "0x4000B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public Vector3 respawnPos;

	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[ReadOnly]
	public Quaternion respawnRot;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Rigidbody body;

	[Token(Token = "0x4000B13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool init;

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0xD68490", Offset = "0xD68490", VA = "0xD68490")]
	private void Start()
	{
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0xD685CC", Offset = "0xD685CC", VA = "0xD685CC")]
	[Button(null, EButtonEnableMode.Always)]
	public void GoToRespawn()
	{
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0xD68768", Offset = "0xD68768", VA = "0xD68768")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0xD687DC", Offset = "0xD687DC", VA = "0xD687DC")]
	public RespawnObject()
	{
	}
}
[Token(Token = "0x20001A3")]
public class GameState : MonoBehaviour
{
	[Token(Token = "0x20001A4")]
	public struct GamePlayerState
	{
		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int islandsCompleted;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int SFXvolume;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int playerXP;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int moreOptions;
	}

	[Token(Token = "0x4000B14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameState myState;

	[Token(Token = "0x4000B15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string playerName;

	[Token(Token = "0x4000B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool isReady;

	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public static bool inEditor;

	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GamePlayerState currentPlayerState;

	[Token(Token = "0x17000068")]
	public static GameState instance
	{
		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xD688BC", Offset = "0xD688BC", VA = "0xD688BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0xD687E4", Offset = "0xD687E4", VA = "0xD687E4")]
	public static void ChangeGameState(string chg)
	{
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0xD68834", Offset = "0xD68834", VA = "0xD68834")]
	public void AddXP(int chg)
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0xD68848", Offset = "0xD68848", VA = "0xD68848")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0xD68844", Offset = "0xD68844", VA = "0xD68844")]
	public void PlayerStateSave()
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0xD6884C", Offset = "0xD6884C", VA = "0xD6884C")]
	public void PlayerStateLoad()
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0xD68850", Offset = "0xD68850", VA = "0xD68850")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0xD68A18", Offset = "0xD68A18", VA = "0xD68A18")]
	public GameState()
	{
	}
}
[Token(Token = "0x20001A5")]
public class GuidSaver : MonoBehaviour
{
	[Token(Token = "0x20001A6")]
	[CompilerGenerated]
	private sealed class <Start>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GuidSaver <>4__this;

		[Token(Token = "0x17000069")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009E5")]
			[Address(RVA = "0xD69318", Offset = "0xD69318", VA = "0xD69318", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009E7")]
			[Address(RVA = "0xD69360", Offset = "0xD69360", VA = "0xD69360", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xD68A94", Offset = "0xD68A94", VA = "0xD68A94")]
		[DebuggerHidden]
		public <Start>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xD690C0", Offset = "0xD690C0", VA = "0xD690C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xD690C4", Offset = "0xD690C4", VA = "0xD690C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xD69320", Offset = "0xD69320", VA = "0xD69320", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GuidComponent saveGuid;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform transformToSave;

	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool realTimeSaving;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SerializeField]
	private bool savePosition;

	[Token(Token = "0x4000B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	[SerializeField]
	private bool saveRotation;

	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float saveCooldown;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("This goes off if the bool is true.")]
	private UnityEvent wasUsedEvent;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string myGuid;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ES3Settings saveFile;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool savedBool;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 savedPosition;

	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 savedRotation;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float timeStamp;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool doneLoading;

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0xD68A20", Offset = "0xD68A20", VA = "0xD68A20")]
	[IteratorStateMachine(typeof(<Start>d__14))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0xD68ABC", Offset = "0xD68ABC", VA = "0xD68ABC")]
	private void LoadAll()
	{
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0xD68D38", Offset = "0xD68D38", VA = "0xD68D38")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60009D9")]
	[Address(RVA = "0xD68F94", Offset = "0xD68F94", VA = "0xD68F94")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009DA")]
	[Address(RVA = "0xD69018", Offset = "0xD69018", VA = "0xD69018")]
	public void _SaveUsed()
	{
	}

	[Token(Token = "0x60009DB")]
	[Address(RVA = "0xD69020", Offset = "0xD69020", VA = "0xD69020")]
	public void _SaveBool(bool mB)
	{
	}

	[Token(Token = "0x60009DC")]
	[Address(RVA = "0xD68AE8", Offset = "0xD68AE8", VA = "0xD68AE8")]
	private void LoadBool()
	{
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0xD68E18", Offset = "0xD68E18", VA = "0xD68E18")]
	public void _SavePosition()
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0xD68BA0", Offset = "0xD68BA0", VA = "0xD68BA0")]
	private void LoadPosition()
	{
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0xD68EC4", Offset = "0xD68EC4", VA = "0xD68EC4")]
	public void _SaveRotation()
	{
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0xD68C5C", Offset = "0xD68C5C", VA = "0xD68C5C")]
	private void LoadRotation()
	{
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0xD690B0", Offset = "0xD690B0", VA = "0xD690B0")]
	public GuidSaver()
	{
	}
}
[Token(Token = "0x20001A7")]
public class MultiStateSaver : MonoBehaviour
{
	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GuidComponent saveGuid;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public string myGuid;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string saveKey;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ES3Settings saveFile;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ReadOnly]
	public int completedIndex;

	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent[] solutions;

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool init;

	[Token(Token = "0x60009E8")]
	[Address(RVA = "0xD69368", Offset = "0xD69368", VA = "0xD69368")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009E9")]
	[Address(RVA = "0xD69534", Offset = "0xD69534", VA = "0xD69534")]
	private void Start()
	{
	}

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0xD6958C", Offset = "0xD6958C", VA = "0xD6958C")]
	private void SaveInit()
	{
	}

	[Token(Token = "0x60009EB")]
	[Address(RVA = "0xD69684", Offset = "0xD69684", VA = "0xD69684")]
	[Button(null, EButtonEnableMode.Always)]
	public void DeleteKey()
	{
	}

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0xD69694", Offset = "0xD69694", VA = "0xD69694")]
	public void _SaveState(int chg = 0)
	{
	}

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0xD69740", Offset = "0xD69740", VA = "0xD69740")]
	internal void LoadState()
	{
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0xD69704", Offset = "0xD69704", VA = "0xD69704")]
	private void Complete()
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0xD697DC", Offset = "0xD697DC", VA = "0xD697DC")]
	public MultiStateSaver()
	{
	}
}
[Token(Token = "0x20001A8")]
public class PlayerInfoDisplay : MonoBehaviour
{
	[Token(Token = "0x20001A9")]
	[CompilerGenerated]
	private sealed class <Start>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerInfoDisplay <>4__this;

		[Token(Token = "0x1700006B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0xD6A6C8", Offset = "0xD6A6C8", VA = "0xD6A6C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0xD6A710", Offset = "0xD6A710", VA = "0xD6A710", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xD69858", Offset = "0xD69858", VA = "0xD69858")]
		[DebuggerHidden]
		public <Start>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xD6A454", Offset = "0xD6A454", VA = "0xD6A454", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xD6A458", Offset = "0xD6A458", VA = "0xD6A458", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xD6A6D0", Offset = "0xD6A6D0", VA = "0xD6A6D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool showCurrentPlayer;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideIf("showCurrentPlayer")]
	public eSaveFile saveProfile;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text playerText;

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text timePlayedText;

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text lastPlayedText;

	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float timePlayed;

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private DateTime lastPlayed;

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0xD697E4", Offset = "0xD697E4", VA = "0xD697E4")]
	[IteratorStateMachine(typeof(<Start>d__7))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0xD69880", Offset = "0xD69880", VA = "0xD69880")]
	public void LoadPlayerInfo(string saveFile)
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0xD69D8C", Offset = "0xD69D8C", VA = "0xD69D8C")]
	public void ChangedLocale(Locale locale)
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0xD69E38", Offset = "0xD69E38", VA = "0xD69E38")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0xD69D90", Offset = "0xD69D90", VA = "0xD69D90")]
	public void _RefreshPlayerInfo()
	{
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0xD69D08", Offset = "0xD69D08", VA = "0xD69D08")]
	private string FormatPlayerName(string s)
	{
		return null;
	}

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0xD69EB8", Offset = "0xD69EB8", VA = "0xD69EB8")]
	private string TimeToString(TimeSpan t)
	{
		return null;
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0xD6A0D0", Offset = "0xD6A0D0", VA = "0xD6A0D0")]
	private string DateToString(DateTime d)
	{
		return null;
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0xD6A44C", Offset = "0xD6A44C", VA = "0xD6A44C")]
	public PlayerInfoDisplay()
	{
	}
}
[Serializable]
[Token(Token = "0x20001AA")]
public class SolutionsType
{
	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject solutionOn;

	[Token(Token = "0x4000B40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject solutionOff;

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent myEvent;

	[Token(Token = "0x60009FF")]
	[Address(RVA = "0xD6A718", Offset = "0xD6A718", VA = "0xD6A718")]
	public void RunSolution()
	{
	}

	[Token(Token = "0x6000A00")]
	[Address(RVA = "0xD6A7D8", Offset = "0xD6A7D8", VA = "0xD6A7D8")]
	public void HideObject()
	{
	}

	[Token(Token = "0x6000A01")]
	[Address(RVA = "0xD6A894", Offset = "0xD6A894", VA = "0xD6A894")]
	public SolutionsType()
	{
	}
}
[Token(Token = "0x20001AB")]
public class PuzzleState : MonoBehaviour
{
	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("-Settings-")]
	public string myName;

	[Token(Token = "0x4000B43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public bool isCompleted;

	[Token(Token = "0x4000B44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string saveKey;

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isMultiSolution;

	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[ReadOnly]
	[ShowIf("isMultiSolution")]
	public int completedIndex;

	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("-Universal-")]
	public SolutionsType complete;

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("isMultiSolution")]
	[Header("-MultiSolution-")]
	[ReorderableList]
	public SolutionsType[] multiSolutions;

	[Token(Token = "0x4000B49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ES3Settings saveFile;

	[Token(Token = "0x6000A02")]
	[Address(RVA = "0xD6A89C", Offset = "0xD6A89C", VA = "0xD6A89C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A03")]
	[Address(RVA = "0xD6A90C", Offset = "0xD6A90C", VA = "0xD6A90C")]
	private void SetESKey()
	{
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0xD6AB00", Offset = "0xD6AB00", VA = "0xD6AB00")]
	[Button(null, EButtonEnableMode.Always)]
	public void _SaveStateCleansed()
	{
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0xD6ABE4", Offset = "0xD6ABE4", VA = "0xD6ABE4")]
	[Button(null, EButtonEnableMode.Always)]
	public void _SaveStateCorrupted()
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0xD6ABEC", Offset = "0xD6ABEC", VA = "0xD6ABEC")]
	[Button(null, EButtonEnableMode.Always)]
	public void DeleteKey()
	{
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0xD6AB08", Offset = "0xD6AB08", VA = "0xD6AB08")]
	public void _SaveState(int chg = 0)
	{
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0xD6A9D0", Offset = "0xD6A9D0", VA = "0xD6A9D0")]
	internal void LoadState()
	{
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0xD6AC00", Offset = "0xD6AC00", VA = "0xD6AC00")]
	[Button("Show Completed", EButtonEnableMode.Always)]
	private void ShowCompletedPuzzle()
	{
	}

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0xD6AC50", Offset = "0xD6AC50", VA = "0xD6AC50")]
	[Button("Restore Puzzle", EButtonEnableMode.Always)]
	private void RestorePuzzle()
	{
	}

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0xD6ACA0", Offset = "0xD6ACA0", VA = "0xD6ACA0")]
	public PuzzleState()
	{
	}
}
[Token(Token = "0x20001AC")]
public enum eSaveFile
{
	[Token(Token = "0x4000B4B")]
	player1,
	[Token(Token = "0x4000B4C")]
	player2,
	[Token(Token = "0x4000B4D")]
	player3
}
[Token(Token = "0x20001AD")]
public static class SaveConstants
{
	[Token(Token = "0x4000B4E")]
	public const int creditsLevel = 4;

	[Token(Token = "0x4000B4F")]
	public const string maxLevelKey = "MaxLevel";

	[Token(Token = "0x4000B50")]
	public const string lastLevelKey = "LastLevel";

	[Token(Token = "0x4000B51")]
	public const string timePlayedKey = "TimePlayed";

	[Token(Token = "0x4000B52")]
	public const string lastPlayedKey = "LastPlayed";
}
[Token(Token = "0x20001AE")]
public class SaveManager : MonoBehaviour
{
	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Save Slots")]
	[ReadOnly]
	public eSaveFile saveFile;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public string currentSave;

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public ES3Settings currentSettings;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReadOnly]
	public int currentSlot;

	[Token(Token = "0x4000B57")]
	public const string saveSlotName = "PlayerSaveSlot";

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SaveManager instance;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("Level Save")]
	[ReadOnly]
	public int lastLevelSaved;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ReadOnly]
	public int maxLevelSaved;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("This will force a delete of any saves from a different version.")]
	public int saveVersion;

	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int savedVersion;

	[Token(Token = "0x4000B5D")]
	public const string saveVersionName = "SaveVersion";

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0xD6AD00", Offset = "0xD6AD00", VA = "0xD6AD00")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A0D")]
	[Address(RVA = "0xD6B0CC", Offset = "0xD6B0CC", VA = "0xD6B0CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A0E")]
	[Address(RVA = "0xD6B0D0", Offset = "0xD6B0D0", VA = "0xD6B0D0")]
	public void StoreCurrentCache()
	{
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0xD6B108", Offset = "0xD6B108", VA = "0xD6B108")]
	public void SavePlayerSlot(int slot)
	{
	}

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0xD6AE34", Offset = "0xD6AE34", VA = "0xD6AE34")]
	private void LoadPlayerSlot()
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0xD6AF00", Offset = "0xD6AF00", VA = "0xD6AF00")]
	private void CreateCache()
	{
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0xD6B02C", Offset = "0xD6B02C", VA = "0xD6B02C")]
	private void LoadLevelSave()
	{
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0xD6AD78", Offset = "0xD6AD78", VA = "0xD6AD78")]
	private void LoadSaveVersion()
	{
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0xD6A5B0", Offset = "0xD6A5B0", VA = "0xD6A5B0")]
	public string ReturnSaveFile(int slot)
	{
		return null;
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0xD6B2BC", Offset = "0xD6B2BC", VA = "0xD6B2BC")]
	public void DeleteASave(int slot)
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0xD6B2F0", Offset = "0xD6B2F0", VA = "0xD6B2F0")]
	[Button(null, EButtonEnableMode.Always)]
	public void DeleteSave1()
	{
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0xD6B2F8", Offset = "0xD6B2F8", VA = "0xD6B2F8")]
	[Button(null, EButtonEnableMode.Always)]
	public void DeleteSave2()
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0xD6B300", Offset = "0xD6B300", VA = "0xD6B300")]
	[Button(null, EButtonEnableMode.Always)]
	public void DeleteSave3()
	{
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0xD6B250", Offset = "0xD6B250", VA = "0xD6B250")]
	[Button(null, EButtonEnableMode.Always)]
	public void DeleteALLSaves()
	{
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0xD6B1E0", Offset = "0xD6B1E0", VA = "0xD6B1E0")]
	[Button(null, EButtonEnableMode.Always)]
	public static void ReloadScene()
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0xD6B308", Offset = "0xD6B308", VA = "0xD6B308")]
	[Button(null, EButtonEnableMode.Always)]
	public void GetKeys()
	{
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0xD6B3BC", Offset = "0xD6B3BC", VA = "0xD6B3BC")]
	public SaveManager()
	{
	}
}
[Token(Token = "0x20001AF")]
public enum eIsland
{
	[Token(Token = "0x4000B5F")]
	island0,
	[Token(Token = "0x4000B60")]
	island1,
	[Token(Token = "0x4000B61")]
	island2,
	[Token(Token = "0x4000B62")]
	island3,
	[Token(Token = "0x4000B63")]
	island4,
	[Token(Token = "0x4000B64")]
	island5,
	[Token(Token = "0x4000B65")]
	island6,
	[Token(Token = "0x4000B66")]
	island7,
	[Token(Token = "0x4000B67")]
	island8
}
[Token(Token = "0x20001B0")]
public enum eLocation
{
	[Token(Token = "0x4000B69")]
	exterior,
	[Token(Token = "0x4000B6A")]
	interior
}
[Token(Token = "0x20001B1")]
[DefaultExecutionOrder(-100)]
public class SceneState : MonoBehaviour
{
	[Token(Token = "0x4000B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SceneState instance;

	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public eIsland island;

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public eLocation location;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int maxLevel;

	[Token(Token = "0x4000B6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayerAvatar[] golems;

	[Token(Token = "0x4000B70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool loadRespawnPoint;

	[Token(Token = "0x4000B71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 respawnPointPos;

	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 respawnPointRot;

	[Token(Token = "0x4000B73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int cleanseLevel;

	[Token(Token = "0x4000B74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AtmosphereManager atmoManager;

	[Token(Token = "0x4000B75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public PuzzleState[] scenePuzzles;

	[Token(Token = "0x4000B76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private DateTime startTime;

	[Token(Token = "0x4000B77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float endTime;

	[Token(Token = "0x4000B78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ES3Settings saveFile;

	[Token(Token = "0x4000B79")]
	public const string respawnPosKey = "RespawnPos";

	[Token(Token = "0x4000B7A")]
	public const string respawnRotKey = "RespawnRot";

	[Token(Token = "0x4000B7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform startPoint;

	[Token(Token = "0x4000B7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string islandName;

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0xD6B3CC", Offset = "0xD6B3CC", VA = "0xD6B3CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0xD6B424", Offset = "0xD6B424", VA = "0xD6B424")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0xD6B90C", Offset = "0xD6B90C", VA = "0xD6B90C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0xD6B968", Offset = "0xD6B968", VA = "0xD6B968")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0xD6B96C", Offset = "0xD6B96C", VA = "0xD6B96C")]
	private void OnApplicationFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0xD6BA3C", Offset = "0xD6BA3C", VA = "0xD6BA3C")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0xD6B9AC", Offset = "0xD6B9AC", VA = "0xD6B9AC")]
	private void HardPause(bool stopAll)
	{
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0xD6B724", Offset = "0xD6B724", VA = "0xD6B724")]
	private void SaveTime()
	{
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0xD6B6B0", Offset = "0xD6B6B0", VA = "0xD6B6B0")]
	private void SetSaveFile()
	{
	}

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0xD6BA78", Offset = "0xD6BA78", VA = "0xD6BA78")]
	public void SaveLastCheckpoint(RespawnPoint rP)
	{
	}

	[Token(Token = "0x6000A27")]
	[Address(RVA = "0xD6BBE4", Offset = "0xD6BBE4", VA = "0xD6BBE4")]
	public string LoadLastRespawn()
	{
		return null;
	}

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0xD6BCE0", Offset = "0xD6BCE0", VA = "0xD6BCE0")]
	public string LoadLastCheckpoint()
	{
		return null;
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0xD6BDDC", Offset = "0xD6BDDC", VA = "0xD6BDDC")]
	public void SaveGolemCheckpoint(RespawnGolems golemCheckpoint)
	{
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0xD6BF28", Offset = "0xD6BF28", VA = "0xD6BF28")]
	public void LoadGolemCheckpoint(RespawnGolems golemCheckpoint)
	{
	}

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0xD6C06C", Offset = "0xD6C06C", VA = "0xD6C06C")]
	public SceneState()
	{
	}
}
[Token(Token = "0x20001B2")]
public class StatsManager : MonoBehaviour
{
	[Token(Token = "0x4000B7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ePlayerStats playerStat;

	[Token(Token = "0x4000B7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public StatToggle[] statsToggles;

	[Token(Token = "0x4000B7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text statCountText;

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0xD6C07C", Offset = "0xD6C07C", VA = "0xD6C07C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0xD6C080", Offset = "0xD6C080", VA = "0xD6C080")]
	private void SetListeners()
	{
	}

	[Token(Token = "0x6000A2E")]
	[Address(RVA = "0xD6C1EC", Offset = "0xD6C1EC", VA = "0xD6C1EC")]
	private void ToggleValueChanged(StatToggle tgl, ePlayerStats stat)
	{
	}

	[Token(Token = "0x6000A2F")]
	[Address(RVA = "0xD6C2A8", Offset = "0xD6C2A8", VA = "0xD6C2A8")]
	public StatsManager()
	{
	}
}
[Token(Token = "0x20001B4")]
public class StorySaveManager : MonoBehaviour
{
	[Token(Token = "0x4000B83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[InspectorNote("Do NOT change this name!", "")]
	public string storyName;

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("These don't need to be in order.")]
	public StoryStepSaver[] storySteps;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ES3Settings saveFile;

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string lastStepGuid;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string saveKey;

	[Token(Token = "0x6000A32")]
	[Address(RVA = "0xD6C2F0", Offset = "0xD6C2F0", VA = "0xD6C2F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A33")]
	[Address(RVA = "0xD6C354", Offset = "0xD6C354", VA = "0xD6C354")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A34")]
	[Address(RVA = "0xD6C63C", Offset = "0xD6C63C", VA = "0xD6C63C")]
	public void SaveLastStepTriggered(StoryStepSaver step)
	{
	}

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0xD6C4F0", Offset = "0xD6C4F0", VA = "0xD6C4F0")]
	public void LoadLastStepTriggered()
	{
	}

	[Token(Token = "0x6000A36")]
	[Address(RVA = "0xD6C698", Offset = "0xD6C698", VA = "0xD6C698")]
	public StorySaveManager()
	{
	}
}
[Token(Token = "0x20001B5")]
public class StoryStepSaver : MonoBehaviour
{
	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StoryStepSaver lastStep;

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string stepName;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GuidComponent saveGuid;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent stepFirstTimeEvent;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent stepCompletedEvent;

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ReadOnly]
	public bool wasPlayed;

	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool doneLoading;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ES3Settings saveFile;

	[Token(Token = "0x4000B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ReadOnly]
	public StorySaveManager saveManager;

	[Token(Token = "0x4000B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ReadOnly]
	public string myGuid;

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0xD6C6F0", Offset = "0xD6C6F0", VA = "0xD6C6F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0xD6C884", Offset = "0xD6C884", VA = "0xD6C884")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0xD6C8E4", Offset = "0xD6C8E4", VA = "0xD6C8E4")]
	public void _PlayStoryStep()
	{
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0xD6C930", Offset = "0xD6C930", VA = "0xD6C930")]
	public void SaveStepCompleted()
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0xD6C56C", Offset = "0xD6C56C", VA = "0xD6C56C")]
	public void LoadStepCompleted()
	{
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0xD6C988", Offset = "0xD6C988", VA = "0xD6C988")]
	public StoryStepSaver()
	{
	}
}
[Token(Token = "0x20001B6")]
public class StoryStepTracker : MonoBehaviour
{
	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0xD6C990", Offset = "0xD6C990", VA = "0xD6C990")]
	public StoryStepTracker()
	{
	}
}
[Token(Token = "0x20001B7")]
public class TitleSaveManager : MonoBehaviour
{
	[Token(Token = "0x4000B92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneLoaderTrigger levelLoader;

	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Button cinematicButton;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Button tutorialButton;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Button creditsButton;

	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Button playButton;

	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Button startNewButton;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isLoading;

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0xD6C998", Offset = "0xD6C998", VA = "0xD6C998")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0xD6CB20", Offset = "0xD6CB20", VA = "0xD6CB20")]
	public void LoadSavedScene()
	{
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0xD6C99C", Offset = "0xD6C99C", VA = "0xD6C99C")]
	public void SetButtons()
	{
	}

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0xD6CC9C", Offset = "0xD6CC9C", VA = "0xD6CC9C")]
	public TitleSaveManager()
	{
	}
}
[Token(Token = "0x20001B8")]
public class TrackedObject : MonoBehaviour
{
	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GuidComponent saveGuid;

	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public string myGuid;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useOverrideName;

	[Token(Token = "0x4000B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("useOverrideName")]
	public string nameID;

	[Token(Token = "0x4000B9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ReadOnly]
	public int myIndex;

	[Token(Token = "0x4000B9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[ReadOnly]
	public int groupIndex;

	[Token(Token = "0x4000B9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ReadOnly]
	public bool wasUsed;

	[Token(Token = "0x4000BA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[ReadOnly]
	public int useCase;

	[Token(Token = "0x4000BA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool hideIfLoadsUsed;

	[Token(Token = "0x4000BA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent wasUsedEvent;

	[Token(Token = "0x4000BA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool extraEvents;

	[Token(Token = "0x4000BA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ShowIf("extraEvents")]
	public UnityEvent positiveEvent;

	[Token(Token = "0x4000BA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[ShowIf("extraEvents")]
	public UnityEvent negativeEvent;

	[Token(Token = "0x4000BA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[ReadOnly]
	public TrackedObjectManager myManager;

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0xD6CCA4", Offset = "0xD6CCA4", VA = "0xD6CCA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0xD6CCA8", Offset = "0xD6CCA8", VA = "0xD6CCA8")]
	public string GetGuidString()
	{
		return null;
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0xD6CE44", Offset = "0xD6CE44", VA = "0xD6CE44")]
	public void SaveUsed()
	{
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0xD6CF24", Offset = "0xD6CF24", VA = "0xD6CF24")]
	public void LoadObject()
	{
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0xD6D0B8", Offset = "0xD6D0B8", VA = "0xD6D0B8")]
	[Button(null, EButtonEnableMode.Always)]
	public void _PostiveEvent()
	{
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0xD6D178", Offset = "0xD6D178", VA = "0xD6D178")]
	[Button(null, EButtonEnableMode.Always)]
	public void _NegativeEvent()
	{
	}

	[Token(Token = "0x6000A48")]
	[Address(RVA = "0xD6D23C", Offset = "0xD6D23C", VA = "0xD6D23C")]
	public void _UsedEvent()
	{
	}

	[Token(Token = "0x6000A49")]
	[Address(RVA = "0xD6D2FC", Offset = "0xD6D2FC", VA = "0xD6D2FC")]
	public TrackedObject()
	{
	}
}
[Token(Token = "0x20001B9")]
public class TrackedObjectDisplay : MonoBehaviour
{
	[Token(Token = "0x4000BA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public eIsland island;

	[Token(Token = "0x4000BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public eTrackedGroup groupName;

	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text countText;

	[Token(Token = "0x4000BAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public string[] guidArray;

	[Token(Token = "0x4000BAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReadOnly]
	public bool[] usedArray;

	[Token(Token = "0x4000BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ReadOnly]
	public int usedCount;

	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ES3Settings saveFile;

	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0xD6D30C", Offset = "0xD6D30C", VA = "0xD6D30C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A4B")]
	[Address(RVA = "0xD6D374", Offset = "0xD6D374", VA = "0xD6D374")]
	public void LoadObjects()
	{
	}

	[Token(Token = "0x6000A4C")]
	[Address(RVA = "0xD6D59C", Offset = "0xD6D59C", VA = "0xD6D59C")]
	private void GetUsedCount()
	{
	}

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0xD6D724", Offset = "0xD6D724", VA = "0xD6D724")]
	public void DisplayCount()
	{
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0xD6D7D4", Offset = "0xD6D7D4", VA = "0xD6D7D4")]
	public TrackedObjectDisplay()
	{
	}
}
[Token(Token = "0x20001BA")]
public enum eTrackedGroup
{
	[Token(Token = "0x4000BAF")]
	None,
	[Token(Token = "0x4000BB0")]
	StagShrines,
	[Token(Token = "0x4000BB1")]
	Frogs,
	[Token(Token = "0x4000BB2")]
	Butterflies,
	[Token(Token = "0x4000BB3")]
	Fish,
	[Token(Token = "0x4000BB4")]
	HermitCrabs
}
[Serializable]
[Token(Token = "0x20001BB")]
public class TrackedObjectGroup
{
	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Tooltip("This name must be unique per island.")]
	public eTrackedGroup groupName;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrackedObject[] trackedObjects;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public string[] guidArray;

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0xD6D7DC", Offset = "0xD6D7DC", VA = "0xD6D7DC")]
	public TrackedObjectGroup()
	{
	}
}
[Token(Token = "0x20001BC")]
public class TrackedObjectManager : MonoBehaviour
{
	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrackedObjectGroup[] myGroups;

	[Token(Token = "0x4000BB9")]
	public const string TYPE = "Collectable";

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public ES3Settings saveFile;

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0xD6D7E4", Offset = "0xD6D7E4", VA = "0xD6D7E4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000A51")]
	[Address(RVA = "0xD6D854", Offset = "0xD6D854", VA = "0xD6D854")]
	public void LoadObjects()
	{
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0xD6DC04", Offset = "0xD6DC04", VA = "0xD6DC04")]
	private string GetKey(int index)
	{
		return null;
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0xD6DA1C", Offset = "0xD6DA1C", VA = "0xD6DA1C")]
	private void InitGuidArray()
	{
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0xD6DD24", Offset = "0xD6DD24", VA = "0xD6DD24")]
	public TrackedObjectManager()
	{
	}
}
[Token(Token = "0x20001BD")]
public class SceneLoaderTrigger : MonoBehaviour
{
	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneField sceneField;

	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public StudioEventEmitter myStartEmitter;

	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public StudioEventEmitter myStopEmitter;

	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool fastTriggerLoad;

	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OVRScreenFade fader;

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float originalFadeTime;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string sceneName;

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int sceneIndex;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool isLoading;

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0xD6DD2C", Offset = "0xD6DD2C", VA = "0xD6DD2C")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0xD6DF38", Offset = "0xD6DF38", VA = "0xD6DF38")]
	public void LoadScene()
	{
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0xD6DE10", Offset = "0xD6DE10", VA = "0xD6DE10")]
	public void LoadSceneSetTime(float fT)
	{
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0xD6E04C", Offset = "0xD6E04C", VA = "0xD6E04C")]
	public void LoadScene(string name)
	{
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0xD6CB9C", Offset = "0xD6CB9C", VA = "0xD6CB9C")]
	public void LoadScene(int index)
	{
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0xD6E15C", Offset = "0xD6E15C", VA = "0xD6E15C")]
	private void DelayedLoadName()
	{
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0xD6E250", Offset = "0xD6E250", VA = "0xD6E250")]
	private void DelayedLoadIndex()
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0xD6E334", Offset = "0xD6E334", VA = "0xD6E334")]
	public SceneLoaderTrigger()
	{
	}
}
[Serializable]
[Token(Token = "0x20001BE")]
public class SceneField
{
	[Token(Token = "0x4000BC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private UnityEngine.Object m_SceneAsset;

	[Token(Token = "0x4000BC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string m_SceneName;

	[Token(Token = "0x1700006D")]
	public string SceneName
	{
		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xD6E33C", Offset = "0xD6E33C", VA = "0xD6E33C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0xD6E344", Offset = "0xD6E344", VA = "0xD6E344")]
	public static implicit operator string(SceneField sceneField)
	{
		return null;
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0xD6E35C", Offset = "0xD6E35C", VA = "0xD6E35C")]
	public SceneField()
	{
	}
}
[Token(Token = "0x20001BF")]
public class SetCorrectCameraHeight : MonoBehaviour
{
	[Token(Token = "0x20001C0")]
	private enum TrackingSpace
	{
		[Token(Token = "0x4000BCA")]
		Stationary,
		[Token(Token = "0x4000BCB")]
		RoomScale
	}

	[Token(Token = "0x4000BC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("Decide if experience is Room Scale or Stationary. Note this option does nothing for mobile VR experiences, these experience will default to Stationary")]
	[Header("Camera Settings")]
	private TrackingSpace m_TrackingSpace;

	[Token(Token = "0x4000BC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Camera Height - overwritten by device settings when using Room Scale ")]
	[SerializeField]
	private float m_StationaryCameraYOffset;

	[Token(Token = "0x4000BC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("GameObject to move to desired height off the floor (defaults to this object if none provided)")]
	[SerializeField]
	private GameObject m_CameraFloorOffsetObject;

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0xD6E3B4", Offset = "0xD6E3B4", VA = "0xD6E3B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0xD6E490", Offset = "0xD6E490", VA = "0xD6E490")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0xD6E494", Offset = "0xD6E494", VA = "0xD6E494")]
	private void SetCameraHeight()
	{
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0xD6E5C0", Offset = "0xD6E5C0", VA = "0xD6E5C0")]
	public SetCorrectCameraHeight()
	{
	}
}
[Token(Token = "0x20001C1")]
public class SubtitleList : MonoBehaviour
{
	[Token(Token = "0x4000BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReorderableList]
	public List<SubtitleHolder> subtitleList;

	[Token(Token = "0x6000A64")]
	[Address(RVA = "0xD6E5D4", Offset = "0xD6E5D4", VA = "0xD6E5D4")]
	public void _DisplaySubtitle(int index)
	{
	}

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0xD6E724", Offset = "0xD6E724", VA = "0xD6E724")]
	public SubtitleList()
	{
	}
}
[Token(Token = "0x20001C2")]
public class TeleportKillBox : MonoBehaviour
{
	[Token(Token = "0x4000BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool killOnExit;

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0xD6E72C", Offset = "0xD6E72C", VA = "0xD6E72C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0xD6E928", Offset = "0xD6E928", VA = "0xD6E928")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0xD6E7AC", Offset = "0xD6E7AC", VA = "0xD6E7AC")]
	private void DoKill(Collider other)
	{
	}

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0xD6E9A8", Offset = "0xD6E9A8", VA = "0xD6E9A8")]
	public TeleportKillBox()
	{
	}
}
[Token(Token = "0x20001C3")]
public class TimelineList : MonoBehaviour
{
	[Token(Token = "0x4000BCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<PlayableDirector> timelineList;

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0xD6E9B0", Offset = "0xD6E9B0", VA = "0xD6E9B0")]
	public void _PlayTimeline(int index)
	{
	}

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0xD6EA1C", Offset = "0xD6EA1C", VA = "0xD6EA1C")]
	public void _StopAllTimelines()
	{
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0xD6EAA8", Offset = "0xD6EAA8", VA = "0xD6EAA8")]
	public void _PauseAllTimelines()
	{
	}

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0xD6EB7C", Offset = "0xD6EB7C", VA = "0xD6EB7C")]
	public void _UnpauseAllTimelines()
	{
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0xD6EC5C", Offset = "0xD6EC5C", VA = "0xD6EC5C")]
	public TimelineList()
	{
	}
}
[Token(Token = "0x20001C4")]
public class TransparentBackgroundScreenshotRecorder : MonoBehaviour
{
	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0xD6EC64", Offset = "0xD6EC64", VA = "0xD6EC64")]
	public TransparentBackgroundScreenshotRecorder()
	{
	}
}
[Token(Token = "0x20001C5")]
public class BarDisplayBase : MonoBehaviour
{
	[Token(Token = "0x20001C6")]
	[CompilerGenerated]
	private sealed class <FlashReturn>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BarDisplayBase <>4__this;

		[Token(Token = "0x1700006E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A7E")]
			[Address(RVA = "0xD6F458", Offset = "0xD6F458", VA = "0xD6F458", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A80")]
			[Address(RVA = "0xD6F4A0", Offset = "0xD6F4A0", VA = "0xD6F4A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xD6F1A8", Offset = "0xD6F1A8", VA = "0xD6F1A8")]
		[DebuggerHidden]
		public <FlashReturn>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xD6F30C", Offset = "0xD6F30C", VA = "0xD6F30C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xD6F310", Offset = "0xD6F310", VA = "0xD6F310", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xD6F460", Offset = "0xD6F460", VA = "0xD6F460", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image statBar;

	[Token(Token = "0x4000BD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image barBG;

	[Token(Token = "0x4000BD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text statText;

	[Token(Token = "0x4000BD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MaterialTransition flashMT;

	[Token(Token = "0x4000BD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ParticleSystem particleFlashGood;

	[Token(Token = "0x4000BD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem particleFlashBad;

	[Token(Token = "0x4000BD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float flashHoldTime;

	[Token(Token = "0x4000BD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float remapValue;

	[Token(Token = "0x4000BD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool doFade;

	[Token(Token = "0x4000BD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[ShowIf("doFade")]
	public float fadeTime;

	[Token(Token = "0x4000BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ShowIf("doFade")]
	public float visibleTime;

	[Token(Token = "0x4000BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[ReadOnly]
	public bool faded;

	[Token(Token = "0x4000BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("FMOD")]
	public StudioEventEmitter myEmitter;

	[Token(Token = "0x4000BDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string fmodStateParam;

	[Token(Token = "0x4000BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int fmodCurrentState;

	[Token(Token = "0x4000BDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private IEnumerator coroutine;

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0xD6EC6C", Offset = "0xD6EC6C", VA = "0xD6EC6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A71")]
	[Address(RVA = "0xD6EE7C", Offset = "0xD6EE7C", VA = "0xD6EE7C", Slot = "4")]
	public virtual void UpdateInfo()
	{
	}

	[Token(Token = "0x6000A72")]
	[Address(RVA = "0xD6EE80", Offset = "0xD6EE80", VA = "0xD6EE80")]
	public void FlashGood()
	{
	}

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0xD6F05C", Offset = "0xD6F05C", VA = "0xD6F05C")]
	public void FlashBad()
	{
	}

	[Token(Token = "0x6000A74")]
	[Address(RVA = "0xD6EFE8", Offset = "0xD6EFE8", VA = "0xD6EFE8")]
	[IteratorStateMachine(typeof(<FlashReturn>d__20))]
	private IEnumerator FlashReturn()
	{
		return null;
	}

	[Token(Token = "0x6000A75")]
	[Address(RVA = "0xD6F1D0", Offset = "0xD6F1D0", VA = "0xD6F1D0")]
	public void FadeIn()
	{
	}

	[Token(Token = "0x6000A76")]
	[Address(RVA = "0xD6ED04", Offset = "0xD6ED04", VA = "0xD6ED04")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x6000A77")]
	[Address(RVA = "0xD6F294", Offset = "0xD6F294", VA = "0xD6F294")]
	private void StatBarDisable()
	{
	}

	[Token(Token = "0x6000A78")]
	[Address(RVA = "0xD6F2B4", Offset = "0xD6F2B4", VA = "0xD6F2B4")]
	private void BGDisable()
	{
	}

	[Token(Token = "0x6000A79")]
	[Address(RVA = "0xD6F2D4", Offset = "0xD6F2D4", VA = "0xD6F2D4")]
	public float RemapImageFill(float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000A7A")]
	[Address(RVA = "0xD6F2EC", Offset = "0xD6F2EC", VA = "0xD6F2EC")]
	public BarDisplayBase()
	{
	}
}
[Token(Token = "0x20001C7")]
public class EnergyBar : BarDisplayBase
{
	[Token(Token = "0x6000A81")]
	[Address(RVA = "0xD6F4A8", Offset = "0xD6F4A8", VA = "0xD6F4A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A82")]
	[Address(RVA = "0xD6F688", Offset = "0xD6F688", VA = "0xD6F688", Slot = "4")]
	public override void UpdateInfo()
	{
	}

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0xD6F80C", Offset = "0xD6F80C", VA = "0xD6F80C")]
	public EnergyBar()
	{
	}
}
[Token(Token = "0x20001C8")]
public class HealthBar : BarDisplayBase
{
	[Token(Token = "0x4000BE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public HealthSystem healthScript;

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0xD6F82C", Offset = "0xD6F82C", VA = "0xD6F82C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A85")]
	[Address(RVA = "0xD6F9B4", Offset = "0xD6F9B4", VA = "0xD6F9B4", Slot = "4")]
	public override void UpdateInfo()
	{
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0xD6FB40", Offset = "0xD6FB40", VA = "0xD6FB40")]
	public HealthBar()
	{
	}
}
[Token(Token = "0x20001C9")]
public class StatToggle : MonoBehaviour
{
	[Token(Token = "0x4000BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Toggle toggleButton;

	[Token(Token = "0x4000BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float valueChange;

	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float eXPCost;

	[Token(Token = "0x4000BE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text eXPCostText;

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0xD6FB60", Offset = "0xD6FB60", VA = "0xD6FB60")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0xD6FB64", Offset = "0xD6FB64", VA = "0xD6FB64")]
	[Button(null, EButtonEnableMode.Always)]
	public void SetCostText()
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0xD6FB9C", Offset = "0xD6FB9C", VA = "0xD6FB9C")]
	public StatToggle()
	{
	}
}
[Token(Token = "0x20001CA")]
public class SubtitleHolder : MonoBehaviour
{
	[Token(Token = "0x4000BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SubtitleSO subtitleSO;

	[Token(Token = "0x4000BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[TextArea(1, 10)]
	protected string m_Text;

	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite sprite;

	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float hideTime;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Space]
	public ParamRef[] Params;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public StudioEventEmitter myEmitter;

	[Token(Token = "0x17000070")]
	public string text
	{
		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xD6FBA4", Offset = "0xD6FBA4", VA = "0xD6FBA4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xD6FBAC", Offset = "0xD6FBAC", VA = "0xD6FBAC")]
		set
		{
		}
	}

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0xD6E634", Offset = "0xD6E634", VA = "0xD6E634")]
	[Button(null, EButtonEnableMode.Playmode)]
	public void _DisplaySubtitle()
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0xD6FD40", Offset = "0xD6FD40", VA = "0xD6FD40")]
	public void _HideAll()
	{
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0xD6FDC4", Offset = "0xD6FDC4", VA = "0xD6FDC4")]
	public SubtitleHolder()
	{
	}
}
[Token(Token = "0x20001CB")]
public class SubtitleManager : MonoBehaviour
{
	[Token(Token = "0x20001CC")]
	[CompilerGenerated]
	private sealed class <HideText>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SubtitleManager <>4__this;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x17000071")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0xD708C4", Offset = "0xD708C4", VA = "0xD708C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0xD7090C", Offset = "0xD7090C", VA = "0xD7090C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xD706EC", Offset = "0xD706EC", VA = "0xD706EC")]
		[DebuggerHidden]
		public <HideText>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xD70780", Offset = "0xD70780", VA = "0xD70780", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xD70784", Offset = "0xD70784", VA = "0xD70784", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xD708CC", Offset = "0xD708CC", VA = "0xD708CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SubtitleManager instance;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Required(null)]
	public Canvas subtitleCanvas;

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Required(null)]
	public Text subtitleText;

	[Token(Token = "0x4000BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image subtitleBG;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image subtitleImage;

	[Token(Token = "0x4000BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IEnumerator coroutine;

	[Token(Token = "0x4000BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isWaiting;

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool slowFollowView;

	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[ShowIf("slowFollowView")]
	public float distanceCheck;

	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("slowFollowView")]
	public float smoothTime;

	[Token(Token = "0x4000BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 currentRotation;

	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 currentPosition;

	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("-Runtime Variables")]
	public Camera myCamera;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool doNotDisplay;

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0xD6FE64", Offset = "0xD6FE64", VA = "0xD6FE64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0xD6FEC4", Offset = "0xD6FEC4", VA = "0xD6FEC4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0xD70314", Offset = "0xD70314", VA = "0xD70314")]
	public void ToggleSubtitles()
	{
	}

	[Token(Token = "0x6000A92")]
	[Address(RVA = "0xD7037C", Offset = "0xD7037C", VA = "0xD7037C")]
	public void SetSubtitlesOn()
	{
	}

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0xD703C4", Offset = "0xD703C4", VA = "0xD703C4")]
	public void SetSubtitlesOff()
	{
	}

	[Token(Token = "0x6000A94")]
	[Address(RVA = "0xD6FC50", Offset = "0xD6FC50", VA = "0xD6FC50")]
	public void ChangeTextAndShow(string text, Sprite sprite, float hideTime)
	{
	}

	[Token(Token = "0x6000A95")]
	[Address(RVA = "0xD70418", Offset = "0xD70418", VA = "0xD70418")]
	private void SubtitleFadeIn(string text, Sprite sprite)
	{
	}

	[Token(Token = "0x6000A96")]
	[Address(RVA = "0xD70620", Offset = "0xD70620", VA = "0xD70620")]
	private void SubtitleFadeOut()
	{
	}

	[Token(Token = "0x6000A97")]
	[Address(RVA = "0xD7059C", Offset = "0xD7059C", VA = "0xD7059C")]
	[IteratorStateMachine(typeof(<HideText>d__22))]
	private IEnumerator HideText(float time)
	{
		return null;
	}

	[Token(Token = "0x6000A98")]
	[Address(RVA = "0xD6FD90", Offset = "0xD6FD90", VA = "0xD6FD90")]
	public void HideTextNow()
	{
	}

	[Token(Token = "0x6000A99")]
	[Address(RVA = "0xD70714", Offset = "0xD70714", VA = "0xD70714")]
	public void ChangeCamera(Camera camera)
	{
	}

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0xD6FF68", Offset = "0xD6FF68", VA = "0xD6FF68")]
	public void SetCameraAngle(float time)
	{
	}

	[Token(Token = "0x6000A9B")]
	[Address(RVA = "0xD70194", Offset = "0xD70194", VA = "0xD70194")]
	public void SetCameraPosition(float time)
	{
	}

	[Token(Token = "0x6000A9C")]
	[Address(RVA = "0xD7076C", Offset = "0xD7076C", VA = "0xD7076C")]
	public SubtitleManager()
	{
	}
}
[Token(Token = "0x20001CD")]
[CreateAssetMenu(fileName = "Subtitle", menuName = "SO/SubtitleSO")]
public class SubtitleSO : ScriptableObject
{
	[Token(Token = "0x4000BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea(1, 10)]
	public string text;

	[Token(Token = "0x4000C00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ShowAssetPreview(128, 128)]
	public Sprite sprite;

	[Token(Token = "0x4000C01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float hideTime;

	[Token(Token = "0x4000C02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	private string Event;

	[Token(Token = "0x4000C03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private EventReference EventReference;

	[Token(Token = "0x4000C04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ParamRef[] Params;

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0xD70914", Offset = "0xD70914", VA = "0xD70914")]
	public SubtitleSO()
	{
	}
}
[Token(Token = "0x20001CE")]
public class ToggleButton : MonoBehaviour
{
	[Token(Token = "0x4000C05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Toggle toggleButton;

	[Token(Token = "0x4000C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string saveString;

	[Token(Token = "0x4000C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onEvent;

	[Token(Token = "0x4000C08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent offEvent;

	[Token(Token = "0x4000C09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int settingSave;

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0xD709AC", Offset = "0xD709AC", VA = "0xD709AC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AA5")]
	[Address(RVA = "0xD709D4", Offset = "0xD709D4", VA = "0xD709D4")]
	public void ToggleSetup()
	{
	}

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0xD70A5C", Offset = "0xD70A5C", VA = "0xD70A5C")]
	public void _Toggle()
	{
	}

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0xD709FC", Offset = "0xD709FC", VA = "0xD709FC")]
	public void SetToggle()
	{
	}

	[Token(Token = "0x6000AA8")]
	[Address(RVA = "0xD70AA0", Offset = "0xD70AA0", VA = "0xD70AA0")]
	public ToggleButton()
	{
	}
}
[Token(Token = "0x20001CF")]
public class VaultUIController : MonoBehaviour
{
	[Token(Token = "0x4000C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Audio")]
	public Text musicText;

	[Token(Token = "0x4000C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text SFXtext;

	[Token(Token = "0x4000C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text VoiceText;

	[Token(Token = "0x4000C0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Slow Turn")]
	public Text instantText;

	[Token(Token = "0x4000C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text slowText;

	[Token(Token = "0x4000C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text mediumText;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text fastText;

	[Token(Token = "0x4000C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject slowTurnWarning;

	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ReadOnly]
	public int slowTurnIndex;

	[Token(Token = "0x4000C13")]
	public const string subtitleSave = "subtitleInt";

	[Token(Token = "0x4000C14")]
	public const string vignetteSave = "vignetteInt";

	[Token(Token = "0x4000C15")]
	public const string objectivesSave = "objectivesInt";

	[Token(Token = "0x4000C16")]
	public const string slowTurnSave = "slowTurnInt";

	[Token(Token = "0x6000AA9")]
	[Address(RVA = "0xD70AA8", Offset = "0xD70AA8", VA = "0xD70AA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AAA")]
	[Address(RVA = "0xD70B44", Offset = "0xD70B44", VA = "0xD70B44")]
	public void VolumeSetup()
	{
	}

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0xD70CB0", Offset = "0xD70CB0", VA = "0xD70CB0")]
	private string ReturnNiceString(float curVol)
	{
		return null;
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0xD70D38", Offset = "0xD70D38", VA = "0xD70D38")]
	public void _MakeRecenter()
	{
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0xD70DE0", Offset = "0xD70DE0", VA = "0xD70DE0")]
	[Button(null, EButtonEnableMode.Always)]
	public void _RaiseMusic()
	{
	}

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0xD70EA0", Offset = "0xD70EA0", VA = "0xD70EA0")]
	[Button(null, EButtonEnableMode.Always)]
	public void _LowerMusic()
	{
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0xD70F64", Offset = "0xD70F64", VA = "0xD70F64")]
	[Button(null, EButtonEnableMode.Always)]
	public void _RaiseSFX()
	{
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0xD71024", Offset = "0xD71024", VA = "0xD71024")]
	[Button(null, EButtonEnableMode.Always)]
	public void _LowerSFX()
	{
	}

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0xD710E8", Offset = "0xD710E8", VA = "0xD710E8")]
	[Button(null, EButtonEnableMode.Always)]
	public void _RaiseVoice()
	{
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0xD711A8", Offset = "0xD711A8", VA = "0xD711A8")]
	[Button(null, EButtonEnableMode.Always)]
	public void _LowerVoice()
	{
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0xD7126C", Offset = "0xD7126C", VA = "0xD7126C")]
	[Button(null, EButtonEnableMode.Always)]
	public void _SubtitlesOn()
	{
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0xD71368", Offset = "0xD71368", VA = "0xD71368")]
	[Button(null, EButtonEnableMode.Always)]
	public void _SubtitlesOff()
	{
	}

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0xD7143C", Offset = "0xD7143C", VA = "0xD7143C")]
	[Button(null, EButtonEnableMode.Always)]
	public void _VignetteOn()
	{
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0xD71498", Offset = "0xD71498", VA = "0xD71498")]
	[Button(null, EButtonEnableMode.Always)]
	public void _VignetteOff()
	{
	}

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0xD714F0", Offset = "0xD714F0", VA = "0xD714F0")]
	[Button(null, EButtonEnableMode.Always)]
	public void _ObjectivesOn()
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0xD7153C", Offset = "0xD7153C", VA = "0xD7153C")]
	[Button(null, EButtonEnableMode.Always)]
	public void _ObjectivesOff()
	{
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0xD70AC0", Offset = "0xD70AC0", VA = "0xD70AC0")]
	public void SlowTurnSetup()
	{
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0xD71784", Offset = "0xD71784", VA = "0xD71784")]
	[Button(null, EButtonEnableMode.Always)]
	public void _SlowTurnUp()
	{
	}

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0xD717F0", Offset = "0xD717F0", VA = "0xD717F0")]
	[Button(null, EButtonEnableMode.Always)]
	public void _SlowTurnDown()
	{
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0xD71584", Offset = "0xD71584", VA = "0xD71584")]
	private void SetSlowTurn()
	{
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0xD71860", Offset = "0xD71860", VA = "0xD71860")]
	public VaultUIController()
	{
	}
}
[Token(Token = "0x20001D0")]
public class VRUISystem : MonoBehaviour
{
	[Token(Token = "0x4000C17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Required(null)]
	public GameObject vrUIGroup;

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInput.Button menuButton;

	[Token(Token = "0x4000C19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool doParent;

	[Token(Token = "0x4000C1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float delayClose;

	[Token(Token = "0x4000C1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Header("singlePoint")]
	public bool singlePoint;

	[Token(Token = "0x4000C1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform[] singlePointLocations;

	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int locationIndex;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Header("slowFollowView")]
	public bool slowFollowView;

	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float distanceCheck;

	[Token(Token = "0x4000C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float smoothTime;

	[Token(Token = "0x4000C21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 currentPostion;

	[Token(Token = "0x4000C22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("handLocated")]
	public Transform targetLocationL;

	[Token(Token = "0x4000C23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform targetLocationR;

	[Token(Token = "0x4000C24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform targetLocation;

	[Token(Token = "0x4000C25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector3 offset;

	[Token(Token = "0x4000C26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector3 rotOffset;

	[Token(Token = "0x4000C27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEvent UIOpen;

	[Token(Token = "0x4000C28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public UnityEvent UIClose;

	[Token(Token = "0x4000C29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public KeyCode DebugKey;

	[Token(Token = "0x4000C2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[ReadOnly]
	public bool UIOn;

	[Token(Token = "0x4000C2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	private bool isClosing;

	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
	private bool isLeft;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Camera myCamera;

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0xD71868", Offset = "0xD71868", VA = "0xD71868")]
	private void Start()
	{
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0xD71944", Offset = "0xD71944", VA = "0xD71944")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0xD71AFC", Offset = "0xD71AFC", VA = "0xD71AFC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0xD71E68", Offset = "0xD71E68", VA = "0xD71E68")]
	public void _ChangeToSinglePointLocation(int index)
	{
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0xD71F64", Offset = "0xD71F64", VA = "0xD71F64")]
	public void _AttachToHands()
	{
	}

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0xD71D68", Offset = "0xD71D68", VA = "0xD71D68")]
	private void ParentAndRelocate()
	{
	}

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0xD71D58", Offset = "0xD71D58", VA = "0xD71D58")]
	public void ToggleVRUI()
	{
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0xD718D8", Offset = "0xD718D8", VA = "0xD718D8")]
	public void CloseVRUI()
	{
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0xD71FE0", Offset = "0xD71FE0", VA = "0xD71FE0")]
	public void CloseDelay()
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0xD7200C", Offset = "0xD7200C", VA = "0xD7200C")]
	public void CloseVRNow()
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0xD71F90", Offset = "0xD71F90", VA = "0xD71F90")]
	public void OpenVRUI()
	{
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0xD71A5C", Offset = "0xD71A5C", VA = "0xD71A5C")]
	private void SetCameraAngle(float time)
	{
	}

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0xD72038", Offset = "0xD72038", VA = "0xD72038")]
	public VRUISystem()
	{
	}
}
[Token(Token = "0x20001D1")]
public class UnparentMe : MonoBehaviour
{
	[Token(Token = "0x20001D2")]
	public enum eDisableWhen
	{
		[Token(Token = "0x4000C32")]
		OnStart,
		[Token(Token = "0x4000C33")]
		AfterStart,
		[Token(Token = "0x4000C34")]
		OnAwake,
		[Token(Token = "0x4000C35")]
		None
	}

	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public eDisableWhen disableWhen;

	[Token(Token = "0x4000C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[ShowIf("disableWhen", eDisableWhen.AfterStart)]
	public float delayAfterStart;

	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Deprecated - reference only")]
	public bool onStart;

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0xD7204C", Offset = "0xD7204C", VA = "0xD7204C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0xD720E0", Offset = "0xD720E0", VA = "0xD720E0")]
	public void Unparent()
	{
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0xD72104", Offset = "0xD72104", VA = "0xD72104")]
	public UnparentMe()
	{
	}
}
[Token(Token = "0x20001D3")]
public class AbsorbObject : MonoBehaviour
{
	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string target;

	[Token(Token = "0x4000C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string sFX;

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0xD72118", Offset = "0xD72118", VA = "0xD72118")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0xD721B0", Offset = "0xD721B0", VA = "0xD721B0")]
	public AbsorbObject()
	{
	}
}
[Token(Token = "0x20001D4")]
public class GolemPartsController : MonoBehaviour
{
	[Token(Token = "0x4000C38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] golemParts;

	[Token(Token = "0x4000C39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 moveTime;

	[Token(Token = "0x4000C3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isAssembled;

	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onAssembled;

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0xD72208", Offset = "0xD72208", VA = "0xD72208")]
	[Button("Assemble", EButtonEnableMode.Always)]
	public void Assemble()
	{
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0xD723E8", Offset = "0xD723E8", VA = "0xD723E8")]
	public GolemPartsController()
	{
	}
}
[Token(Token = "0x20001D5")]
public class InfuseObject : InteractableBase
{
	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("-InfuseSettings-")]
	[HideInInspector]
	public bool isInfused;

	[Token(Token = "0x4000C3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject swapTo;

	[Token(Token = "0x4000C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject infuseEffect;

	[Token(Token = "0x4000C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float particleTime;

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0xD723F0", Offset = "0xD723F0", VA = "0xD723F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0xD72408", Offset = "0xD72408", VA = "0xD72408")]
	private void Infuse()
	{
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0xD7266C", Offset = "0xD7266C", VA = "0xD7266C", Slot = "5")]
	public virtual void InfuseResult()
	{
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0xD72670", Offset = "0xD72670", VA = "0xD72670")]
	public InfuseObject()
	{
	}
}
[Token(Token = "0x20001D6")]
public class Interact : MonoBehaviour
{
	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isInteractable;

	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InteractableBase curInteract;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image interactTime;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float shotDelay;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[ReadOnly]
	public float timeUsed;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ReadOnly]
	public float energyUsed;

	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[ReadOnly]
	public bool isInteracting;

	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[ReadOnly]
	public bool isDraining;

	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject onComplete;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject offComplete;

	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool useColorChange;

	[Token(Token = "0x4000C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ShowIf("useColorChange")]
	public Renderer interactRenderer;

	[Token(Token = "0x4000C4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ShowIf("useColorChange")]
	public List<Renderer> extraRenderers;

	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[ShowIf("useColorChange")]
	public string colorProperty;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[ShowIf("useColorChange")]
	public Color endColor;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Gradient gradient;

	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GradientColorKey[] colorKey;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GradientAlphaKey[] alphaKey;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool showDebugs;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("FMOD")]
	public StudioEventEmitter myEmitter;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public string fmodValueParam;

	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public string fmodStateParam;

	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Header("Events")]
	public bool showEvents;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	public bool touchEventOnlyWithEnoughEnergy;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	public bool doCancelOnComplete;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[ShowIf("showEvents")]
	public UnityEvent TouchEvent;

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[ShowIf("showEvents")]
	public UnityEvent CancelEvent;

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[ShowIf("showEvents")]
	public UnityEvent Complete;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[ShowIf("showEvents")]
	public UnityEvent Reset;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private readonly List<GameObject> interacts;

	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[ReadOnly]
	[Header("Timer")]
	public float extraInteractTime;

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0xD72680", Offset = "0xD72680", VA = "0xD72680")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0xD729D0", Offset = "0xD729D0", VA = "0xD729D0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0xD73328", Offset = "0xD73328", VA = "0xD73328")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AD9")]
	[Address(RVA = "0xD733CC", Offset = "0xD733CC", VA = "0xD733CC")]
	public static float RoundUp(float value, int digits)
	{
		return default(float);
	}

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0xD733FC", Offset = "0xD733FC", VA = "0xD733FC")]
	public static float Round(float value, int digits)
	{
		return default(float);
	}

	[Token(Token = "0x6000ADB")]
	[Address(RVA = "0xD729E8", Offset = "0xD729E8", VA = "0xD729E8")]
	private void InteractsCheck()
	{
	}

	[Token(Token = "0x6000ADC")]
	[Address(RVA = "0xD72B6C", Offset = "0xD72B6C", VA = "0xD72B6C")]
	private void Interacting()
	{
	}

	[Token(Token = "0x6000ADD")]
	[Address(RVA = "0xD73654", Offset = "0xD73654", VA = "0xD73654")]
	public void _AddInteractTime(float chg)
	{
	}

	[Token(Token = "0x6000ADE")]
	[Address(RVA = "0xD73664", Offset = "0xD73664", VA = "0xD73664")]
	public void _SetInteractTime(float chg)
	{
	}

	[Token(Token = "0x6000ADF")]
	[Address(RVA = "0xD7366C", Offset = "0xD7366C", VA = "0xD7366C")]
	public void ResetInteract()
	{
	}

	[Token(Token = "0x6000AE0")]
	[Address(RVA = "0xD738E0", Offset = "0xD738E0", VA = "0xD738E0")]
	public void SetOnInteractVisuals()
	{
	}

	[Token(Token = "0x6000AE1")]
	[Address(RVA = "0xD73994", Offset = "0xD73994", VA = "0xD73994")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000AE2")]
	[Address(RVA = "0xD73B70", Offset = "0xD73B70", VA = "0xD73B70")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000AE3")]
	[Address(RVA = "0xD734A0", Offset = "0xD734A0", VA = "0xD734A0")]
	private void CompleteCharge()
	{
	}

	[Token(Token = "0x6000AE4")]
	[Address(RVA = "0xD73CA4", Offset = "0xD73CA4", VA = "0xD73CA4")]
	[Button(null, EButtonEnableMode.Always)]
	public void _Charge()
	{
	}

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0xD73CA8", Offset = "0xD73CA8", VA = "0xD73CA8")]
	public Interact()
	{
	}
}
[Token(Token = "0x20001D7")]
public class InteractableBase : MonoBehaviour
{
	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[Header("-MainClass-")]
	public bool isInteracted;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0.1f, 10f)]
	public float useTime;

	[Token(Token = "0x4000C61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float energyCost;

	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0xD74DB4", Offset = "0xD74DB4", VA = "0xD74DB4", Slot = "4")]
	public virtual void OnInteracted()
	{
	}

	[Token(Token = "0x6000AE7")]
	[Address(RVA = "0xD74DC0", Offset = "0xD74DC0", VA = "0xD74DC0")]
	public InteractableBase()
	{
	}
}
[Token(Token = "0x20001D8")]
public class InteractPossess : InteractableBase
{
	[Token(Token = "0x4000C62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("-Possess Settings-")]
	public PlayerAvatar hostBody;

	[Token(Token = "0x4000C63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Interact[] interacts;

	[Token(Token = "0x4000C64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("-Assemble Settings-")]
	public GolemPartsController golemPartsController;

	[Token(Token = "0x4000C65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int partsRequired;

	[Token(Token = "0x4000C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int partsActive;

	[Token(Token = "0x4000C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("-Runtime Variables-")]
	public bool isPossessed;

	[Token(Token = "0x6000AE8")]
	[Address(RVA = "0xD74DC8", Offset = "0xD74DC8", VA = "0xD74DC8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AE9")]
	[Address(RVA = "0xD74EA0", Offset = "0xD74EA0", VA = "0xD74EA0", Slot = "4")]
	public override void OnInteracted()
	{
	}

	[Token(Token = "0x6000AEA")]
	[Address(RVA = "0xD74F48", Offset = "0xD74F48", VA = "0xD74F48")]
	private void Possess()
	{
	}

	[Token(Token = "0x6000AEB")]
	[Address(RVA = "0xD75050", Offset = "0xD75050", VA = "0xD75050")]
	public void Unpossess()
	{
	}

	[Token(Token = "0x6000AEC")]
	[Address(RVA = "0xD750B8", Offset = "0xD750B8", VA = "0xD750B8")]
	public InteractPossess()
	{
	}
}
[Token(Token = "0x20001D9")]
public class PowerPickup : MonoBehaviour
{
	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float addedHealth;

	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float addedEnergy;

	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float addedXP;

	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float collectSpeed;

	[Token(Token = "0x4000C6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float collectDistance;

	[Token(Token = "0x4000C6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 1f)]
	public float hapticsAmount;

	[Token(Token = "0x4000C6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject pickupVFX;

	[Token(Token = "0x4000C6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Space]
	public bool despawnTimer;

	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[ShowIf("despawnTimer")]
	public float despawnTime;

	[Token(Token = "0x4000C71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent pickupEvent;

	[Token(Token = "0x4000C72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PlayerAvatar collector;

	[Token(Token = "0x4000C73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool pickedUp;

	[Token(Token = "0x4000C74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 oldScale;

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0xD750C0", Offset = "0xD750C0", VA = "0xD750C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0xD7517C", Offset = "0xD7517C", VA = "0xD7517C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0xD751C8", Offset = "0xD751C8", VA = "0xD751C8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0xD75634", Offset = "0xD75634", VA = "0xD75634")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0xD756A4", Offset = "0xD756A4", VA = "0xD756A4")]
	private void Give()
	{
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0xD7547C", Offset = "0xD7547C", VA = "0xD7547C")]
	public void CollectFXAndDestroy()
	{
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0xD757B0", Offset = "0xD757B0", VA = "0xD757B0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0xD757FC", Offset = "0xD757FC", VA = "0xD757FC")]
	public PowerPickup()
	{
	}
}
[Token(Token = "0x20001DA")]
[CreateAssetMenu(fileName = "Atmosphere", menuName = "SO/AtmosphereDetailsSO")]
public class AtmosphereDetails : ScriptableObject
{
	[Token(Token = "0x4000C75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lightIntensity;

	[Token(Token = "0x4000C76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color skyboxColor;

	[Token(Token = "0x4000C77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color equatorColor;

	[Token(Token = "0x4000C78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ambientIntensity;

	[Token(Token = "0x4000C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float reflectionIntensity;

	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float fogDensity;

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color heightFogColor1;

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float heightFogDistanceEnd;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Range(0f, 1f)]
	public float heightFogIntensity;

	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Old and Unused Settings")]
	[Range(-100f, 100f)]
	public float tempurature;

	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Range(-100f, 100f)]
	public float tint;

	[Token(Token = "0x4000C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float exposure;

	[Token(Token = "0x4000C81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float hueShift;

	[Token(Token = "0x4000C82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float saturation;

	[Token(Token = "0x4000C83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float contrast;

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0xD75828", Offset = "0xD75828", VA = "0xD75828")]
	public AtmosphereDetails()
	{
	}
}
[Token(Token = "0x20001DB")]
public class AtmosphereManager : MonoBehaviour
{
	[Token(Token = "0x4000C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float islandCorruptionPercent;

	[Token(Token = "0x4000C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float changeTime;

	[Token(Token = "0x4000C86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AtmosphereDetails corruptedAtmo;

	[Token(Token = "0x4000C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useJSky;

	[Token(Token = "0x4000C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool useAmbientGradient;

	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool useFog;

	[Token(Token = "0x4000C8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HeightFogGlobal heightFogGlobal;

	[Token(Token = "0x4000C8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Light mainLight;

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float lastLevel;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float ambientIntensity;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float reflectionIntensity;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Color skyboxColor;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Color equatorColor;

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float lightIntensity;

	[Token(Token = "0x4000C92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float fogDensity;

	[Token(Token = "0x4000C93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float fogEnd;

	[Token(Token = "0x4000C94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float fogIntensity;

	[Token(Token = "0x4000C95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Color startSkyboxColor;

	[Token(Token = "0x4000C96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Color startEquatorColor;

	[Token(Token = "0x4000C97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float startAmbientIntensity;

	[Token(Token = "0x4000C98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float startReflectionIntensity;

	[Token(Token = "0x4000C99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float startLightIntensity;

	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float startFogDensity;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float startFogEnd;

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Color startFogColor;

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float startFogIntensity;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AtmosphereManager instance;

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Color skyTo;

	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Color equatorTo;

	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[Header("Old")]
	public List<AtmosphereDetails> islandAtmosphereLevels;

	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public int islandCorruptionLevel;

	[Token(Token = "0x4000CA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public List<AtmosphereDetails> atmosphereLayers;

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0xD75870", Offset = "0xD75870", VA = "0xD75870")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0xD75A60", Offset = "0xD75A60", VA = "0xD75A60")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0xD75C9C", Offset = "0xD75C9C", VA = "0xD75C9C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0xD75D3C", Offset = "0xD75D3C", VA = "0xD75D3C")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0xD75DDC", Offset = "0xD75DDC", VA = "0xD75DDC")]
	private float CorruptionMap(float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0xD758D4", Offset = "0xD758D4", VA = "0xD758D4")]
	private void InitAtmoValues()
	{
	}

	[Token(Token = "0x6000AFC")]
	[Address(RVA = "0xD758D0", Offset = "0xD758D0", VA = "0xD758D0")]
	private void GetColorGrading()
	{
	}

	[Token(Token = "0x6000AFD")]
	[Address(RVA = "0xD75A78", Offset = "0xD75A78", VA = "0xD75A78")]
	private void GetAtmoValues()
	{
	}

	[Token(Token = "0x6000AFE")]
	[Address(RVA = "0xD75BB0", Offset = "0xD75BB0", VA = "0xD75BB0")]
	private void SetAtmoValuesInstant()
	{
	}

	[Token(Token = "0x6000AFF")]
	[Address(RVA = "0xD760D8", Offset = "0xD760D8", VA = "0xD760D8")]
	public void SetAtmoValuesOverTime(AtmosphereDetails atmo)
	{
	}

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0xD765AC", Offset = "0xD765AC", VA = "0xD765AC")]
	private void SetValueOverTime(float value, float toValue)
	{
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0xD766F8", Offset = "0xD766F8", VA = "0xD766F8")]
	public void SetAtmoValuesOverTime()
	{
	}

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0xD76CA8", Offset = "0xD76CA8", VA = "0xD76CA8")]
	[Button(null, EButtonEnableMode.Always)]
	public void TestCorruptionReduce()
	{
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0xD76CFC", Offset = "0xD76CFC", VA = "0xD76CFC")]
	[Button(null, EButtonEnableMode.Always)]
	public void TestCorruptionIncrease()
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0xD76CD4", Offset = "0xD76CD4", VA = "0xD76CD4")]
	public void ReduceCorruption(float amount)
	{
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0xD76D24", Offset = "0xD76D24", VA = "0xD76D24")]
	public void IncreaseCorruption(float amount)
	{
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0xD75EA4", Offset = "0xD75EA4", VA = "0xD75EA4")]
	private void SetFogDensity()
	{
	}

	[Token(Token = "0x6000B07")]
	[Address(RVA = "0xD75E0C", Offset = "0xD75E0C", VA = "0xD75E0C")]
	private void SetAmbientIntensity()
	{
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0xD75E18", Offset = "0xD75E18", VA = "0xD75E18")]
	private void SetReflectionIntensity()
	{
	}

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0xD75EBC", Offset = "0xD75EBC", VA = "0xD75EBC")]
	private void SetLightIntensity()
	{
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0xD75E24", Offset = "0xD75E24", VA = "0xD75E24")]
	private void SetSkyboxTint()
	{
	}

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0xD75DFC", Offset = "0xD75DFC", VA = "0xD75DFC")]
	private void SetEquatorTint()
	{
	}

	[Token(Token = "0x6000B0C")]
	[Address(RVA = "0xD75F40", Offset = "0xD75F40", VA = "0xD75F40")]
	private void SetHeightFogDistanceEnd()
	{
	}

	[Token(Token = "0x6000B0D")]
	[Address(RVA = "0xD75FB8", Offset = "0xD75FB8", VA = "0xD75FB8")]
	private void SetHeightFogStartColor()
	{
	}

	[Token(Token = "0x6000B0E")]
	[Address(RVA = "0xD76060", Offset = "0xD76060", VA = "0xD76060")]
	private void SetHeightFogIntensity()
	{
	}

	[Token(Token = "0x6000B0F")]
	[Address(RVA = "0xD76D48", Offset = "0xD76D48", VA = "0xD76D48")]
	public void ReduceCorruptionLevel()
	{
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0xD76D5C", Offset = "0xD76D5C", VA = "0xD76D5C")]
	public void IncreaseCorruptionLevel()
	{
	}

	[Token(Token = "0x6000B11")]
	[Address(RVA = "0xD76DBC", Offset = "0xD76DBC", VA = "0xD76DBC")]
	public void AddAtmosphereLayer(AtmosphereDetails atmo)
	{
	}

	[Token(Token = "0x6000B12")]
	[Address(RVA = "0xD76E70", Offset = "0xD76E70", VA = "0xD76E70")]
	public void RemoveAtmosphereLayer(AtmosphereDetails atmo)
	{
	}

	[Token(Token = "0x6000B13")]
	[Address(RVA = "0xD76ED0", Offset = "0xD76ED0", VA = "0xD76ED0")]
	public AtmosphereManager()
	{
	}
}
[Token(Token = "0x20001DD")]
public class AtmosphereTrigger : MonoBehaviour
{
	[Token(Token = "0x20001DE")]
	[CompilerGenerated]
	private sealed class <SoulMemoryActivate>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AtmosphereTrigger <>4__this;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRScreenFade <fader>5__2;

		[Token(Token = "0x17000073")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0xD7788C", Offset = "0xD7788C", VA = "0xD7788C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B44")]
			[Address(RVA = "0xD778D4", Offset = "0xD778D4", VA = "0xD778D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xD77480", Offset = "0xD77480", VA = "0xD77480")]
		[DebuggerHidden]
		public <SoulMemoryActivate>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xD775C8", Offset = "0xD775C8", VA = "0xD775C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xD775CC", Offset = "0xD775CC", VA = "0xD775CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xD77894", Offset = "0xD77894", VA = "0xD77894", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001DF")]
	[CompilerGenerated]
	private sealed class <SoulMemoryDeactivate>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AtmosphereTrigger <>4__this;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRScreenFade <fader>5__2;

		[Token(Token = "0x17000075")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B48")]
			[Address(RVA = "0xD77B64", Offset = "0xD77B64", VA = "0xD77B64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0xD77BAC", Offset = "0xD77BAC", VA = "0xD77BAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xD774A8", Offset = "0xD774A8", VA = "0xD774A8")]
		[DebuggerHidden]
		public <SoulMemoryDeactivate>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xD778DC", Offset = "0xD778DC", VA = "0xD778DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xD778E0", Offset = "0xD778E0", VA = "0xD778E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xD77B6C", Offset = "0xD77B6C", VA = "0xD77B6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AtmosphereDetails atmosphereDetails;

	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool onTriggerEnter;

	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool onTriggerExit;

	[Token(Token = "0x4000CA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onActivate;

	[Token(Token = "0x4000CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onDeactivate;

	[Token(Token = "0x4000CAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isActive;

	[Token(Token = "0x4000CAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[Header("-Soul Memory Settings-")]
	public bool isSoulMemory;

	[Token(Token = "0x4000CAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PlayableDirector timelineDirector;

	[Token(Token = "0x4000CAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject soulMemoryBarrier;

	[Token(Token = "0x4000CAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isActivating;

	[Token(Token = "0x4000CAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool isDeactivating;

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0xD77084", Offset = "0xD77084", VA = "0xD77084")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B34")]
	[Address(RVA = "0xD77124", Offset = "0xD77124", VA = "0xD77124")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B35")]
	[Address(RVA = "0xD77288", Offset = "0xD77288", VA = "0xD77288")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000B36")]
	[Address(RVA = "0xD771C0", Offset = "0xD771C0", VA = "0xD771C0")]
	public void SoulMemorySwitch(bool activate)
	{
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0xD77398", Offset = "0xD77398", VA = "0xD77398")]
	[IteratorStateMachine(typeof(<SoulMemoryActivate>d__15))]
	private IEnumerator SoulMemoryActivate()
	{
		return null;
	}

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0xD7740C", Offset = "0xD7740C", VA = "0xD7740C")]
	[IteratorStateMachine(typeof(<SoulMemoryDeactivate>d__16))]
	private IEnumerator SoulMemoryDeactivate()
	{
		return null;
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0xD77324", Offset = "0xD77324", VA = "0xD77324")]
	public void ExitAtmosphere()
	{
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0xD77214", Offset = "0xD77214", VA = "0xD77214")]
	public void EnterAtmosphere()
	{
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0xD774D0", Offset = "0xD774D0", VA = "0xD774D0")]
	public void DeactivateTrigger()
	{
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0xD775A0", Offset = "0xD775A0", VA = "0xD775A0")]
	public AtmosphereTrigger()
	{
	}
}
[Token(Token = "0x20001E0")]
public class CombatTower : MonoBehaviour
{
	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("BaseTower")]
	public float attackRange;

	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform currentTarget;

	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string enemyTag;

	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReadOnly]
	public bool isActivated;

	[Token(Token = "0x4000CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("BaseBulletInfo")]
	public TowerBullet theBullet;

	[Token(Token = "0x4000CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float fireRate;

	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TowerBullet curBullet;

	[Token(Token = "0x4000CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform shotPoint;

	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float fireTime;

	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Header("ForVolleyAbility")]
	public bool useVolley;

	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	public bool isCharging;

	[Token(Token = "0x4000CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[ReadOnly]
	public float currentChargeTime;

	[Token(Token = "0x4000CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VolleyProjectilePower VolleyTest;

	[Token(Token = "0x6000B4B")]
	[Address(RVA = "0xD77BB4", Offset = "0xD77BB4", VA = "0xD77BB4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0xD77BDC", Offset = "0xD77BDC", VA = "0xD77BDC", Slot = "4")]
	public virtual void FireTurret()
	{
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0xD77CD0", Offset = "0xD77CD0", VA = "0xD77CD0")]
	public void UseVolleyAblity()
	{
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0xD77F80", Offset = "0xD77F80", VA = "0xD77F80")]
	public void ActivateAblity()
	{
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0xD77F40", Offset = "0xD77F40", VA = "0xD77F40")]
	public void ReleaseAblity()
	{
	}

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0xD77F60", Offset = "0xD77F60", VA = "0xD77F60")]
	public void HoldAblity()
	{
	}

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0xD77D7C", Offset = "0xD77D7C", VA = "0xD77D7C")]
	public void BaseBullet()
	{
	}

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0xD77FA0", Offset = "0xD77FA0", VA = "0xD77FA0", Slot = "5")]
	public virtual void FindTargets()
	{
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0xD78198", Offset = "0xD78198", VA = "0xD78198")]
	public Transform GetClosetTarget(Transform[] targets)
	{
		return null;
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0xD78278", Offset = "0xD78278", VA = "0xD78278")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0xD7830C", Offset = "0xD7830C", VA = "0xD7830C")]
	public CombatTower()
	{
	}
}
[Token(Token = "0x20001E1")]
public class DemiBoss : MonoBehaviour
{
	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnemyHealth healthInfo;

	[Token(Token = "0x4000CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool hasDied;

	[Token(Token = "0x4000CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onDeath;

	[Token(Token = "0x6000B56")]
	[Address(RVA = "0xD7831C", Offset = "0xD7831C", VA = "0xD7831C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0xD783AC", Offset = "0xD783AC", VA = "0xD783AC")]
	public DemiBoss()
	{
	}
}
[Token(Token = "0x20001E2")]
public class DemoBoss : MonoBehaviour
{
	[Token(Token = "0x4000CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector bossDirector;

	[Token(Token = "0x4000CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayableDirector creatureDirector;

	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator animations;

	[Token(Token = "0x4000CCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool hasDied;

	[Token(Token = "0x4000CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] toggleWithStun;

	[Token(Token = "0x4000CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] offWithDeath;

	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onDeath;

	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent delayedOnDeath;

	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float delay;

	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent onArrive;

	[Token(Token = "0x6000B58")]
	[Address(RVA = "0xD783B4", Offset = "0xD783B4", VA = "0xD783B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B59")]
	[Address(RVA = "0xD783B8", Offset = "0xD783B8", VA = "0xD783B8")]
	public void Begin()
	{
	}

	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0xD7841C", Offset = "0xD7841C", VA = "0xD7841C")]
	public void Stun()
	{
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0xD784F8", Offset = "0xD784F8", VA = "0xD784F8")]
	public void UnStun()
	{
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0xD785B4", Offset = "0xD785B4", VA = "0xD785B4")]
	public void Death()
	{
	}

	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0xD78758", Offset = "0xD78758", VA = "0xD78758")]
	public void PlayDirector()
	{
	}

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0xD784C8", Offset = "0xD784C8", VA = "0xD784C8")]
	private void StopDirectors()
	{
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0xD78700", Offset = "0xD78700", VA = "0xD78700")]
	private void FullStopDirectors()
	{
	}

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0xD78788", Offset = "0xD78788", VA = "0xD78788")]
	private void DelayedDeath()
	{
	}

	[Token(Token = "0x6000B61")]
	[Address(RVA = "0xD787A4", Offset = "0xD787A4", VA = "0xD787A4")]
	public DemoBoss()
	{
	}
}
[Token(Token = "0x20001E3")]
public class DestroyOnEmpty : MonoBehaviour
{
	[Token(Token = "0x6000B62")]
	[Address(RVA = "0xD787B4", Offset = "0xD787B4", VA = "0xD787B4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000B63")]
	[Address(RVA = "0xD7884C", Offset = "0xD7884C", VA = "0xD7884C")]
	public DestroyOnEmpty()
	{
	}
}
[Token(Token = "0x20001E4")]
public class FadeInLogo : MonoBehaviour
{
	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material fadeMat;

	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float value;

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool fadeIn;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fadeTime;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string sFX;

	[Token(Token = "0x6000B64")]
	[Address(RVA = "0xD78854", Offset = "0xD78854", VA = "0xD78854")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B65")]
	[Address(RVA = "0xD788EC", Offset = "0xD788EC", VA = "0xD788EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B66")]
	[Address(RVA = "0xD78994", Offset = "0xD78994", VA = "0xD78994")]
	public void FadeStart()
	{
	}

	[Token(Token = "0x6000B67")]
	[Address(RVA = "0xD789A0", Offset = "0xD789A0", VA = "0xD789A0")]
	public FadeInLogo()
	{
	}
}
[Token(Token = "0x20001E5")]
public class InfusionVisuals : MonoBehaviour
{
	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] stuffOnOverTime;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] stuffOffOverTime;

	[Token(Token = "0x6000B68")]
	[Address(RVA = "0xD78A00", Offset = "0xD78A00", VA = "0xD78A00")]
	private void IncrementVisuals(int inc)
	{
	}

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0xD78A7C", Offset = "0xD78A7C", VA = "0xD78A7C")]
	public InfusionVisuals()
	{
	}
}
[Token(Token = "0x20001E6")]
public class AbilityActivator : MonoBehaviour
{
	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputVR3lb.Controller myController;

	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AttackPowerBase curAbility;

	[Token(Token = "0x4000CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool shootingDisabled;

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0xD78A84", Offset = "0xD78A84", VA = "0xD78A84")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0xD78B14", Offset = "0xD78B14", VA = "0xD78B14")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0xD78A88", Offset = "0xD78A88", VA = "0xD78A88")]
	private void Shoot()
	{
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0xD78BB0", Offset = "0xD78BB0", VA = "0xD78BB0")]
	public bool GetShoot()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0xD78B34", Offset = "0xD78B34", VA = "0xD78B34")]
	public bool GetShootDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0xD78C1C", Offset = "0xD78C1C", VA = "0xD78C1C")]
	public bool GetShootUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0xD78C88", Offset = "0xD78C88", VA = "0xD78C88")]
	public AbilityActivator()
	{
	}
}
[Token(Token = "0x20001E7")]
public class AbilityManager : MonoBehaviour
{
	[Token(Token = "0x4000CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AttackPowerBase[] playerAbilities;

	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int currentAbilityIndex;

	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AbilityActivator abilityActivatorLeft;

	[Token(Token = "0x4000CDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AbilityActivator abilityActivatorRight;

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0xD78C90", Offset = "0xD78C90", VA = "0xD78C90")]
	public void DisableShooters()
	{
	}

	[Token(Token = "0x6000B72")]
	[Address(RVA = "0xD78CE0", Offset = "0xD78CE0", VA = "0xD78CE0")]
	public void EnableShooters()
	{
	}

	[Token(Token = "0x6000B73")]
	[Address(RVA = "0xD78D30", Offset = "0xD78D30", VA = "0xD78D30")]
	public AbilityManager()
	{
	}
}
[Token(Token = "0x20001E8")]
public class AttackPowerBase : MonoBehaviour
{
	[Token(Token = "0x4000CE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float damage;

	[Token(Token = "0x4000CE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[ReadOnly]
	public float hapticsOut;

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float hapticsAmount;

	[Token(Token = "0x4000CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private InputVR3lb.Controller myController;

	[Token(Token = "0x4000CE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isPlayerActivated;

	[Token(Token = "0x6000B74")]
	[Address(RVA = "0xD78D38", Offset = "0xD78D38", VA = "0xD78D38", Slot = "4")]
	public virtual void Activate()
	{
	}

	[Token(Token = "0x6000B75")]
	[Address(RVA = "0xD78D3C", Offset = "0xD78D3C", VA = "0xD78D3C", Slot = "5")]
	public virtual void Hold()
	{
	}

	[Token(Token = "0x6000B76")]
	[Address(RVA = "0xD78D40", Offset = "0xD78D40", VA = "0xD78D40", Slot = "6")]
	public virtual void Deactivate()
	{
	}

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0xD78D44", Offset = "0xD78D44", VA = "0xD78D44", Slot = "7")]
	public virtual void Clear()
	{
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0xD78BA0", Offset = "0xD78BA0", VA = "0xD78BA0")]
	public void SetPlayerController(InputVR3lb.Controller mC)
	{
	}

	[Token(Token = "0x6000B79")]
	[Address(RVA = "0xD78D48", Offset = "0xD78D48", VA = "0xD78D48")]
	public void PlayHaptics(float intensity)
	{
	}

	[Token(Token = "0x6000B7A")]
	[Address(RVA = "0xD78DD0", Offset = "0xD78DD0", VA = "0xD78DD0")]
	public AttackPowerBase()
	{
	}
}
[Token(Token = "0x20001E9")]
public class ChargeProjectilePower : FireProjectilePower
{
	[Token(Token = "0x4000CE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Header("-ChargeSystem-")]
	public float maxDamage;

	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float chargeTime;

	[Token(Token = "0x4000CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector2 chargeSizes;

	[Token(Token = "0x4000CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject targeting;

	[Token(Token = "0x4000CE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool chargeStarted;

	[Token(Token = "0x4000CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float chargeLevel;

	[Token(Token = "0x4000CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float finalDamage;

	[Token(Token = "0x4000CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float playerShotVolume;

	[Token(Token = "0x6000B7B")]
	[Address(RVA = "0xD78DE0", Offset = "0xD78DE0", VA = "0xD78DE0", Slot = "4")]
	public override void Activate()
	{
	}

	[Token(Token = "0x6000B7C")]
	[Address(RVA = "0xD78F74", Offset = "0xD78F74", VA = "0xD78F74", Slot = "5")]
	public override void Hold()
	{
	}

	[Token(Token = "0x6000B7D")]
	[Address(RVA = "0xD79060", Offset = "0xD79060", VA = "0xD79060", Slot = "6")]
	public override void Deactivate()
	{
	}

	[Token(Token = "0x6000B7E")]
	[Address(RVA = "0xD79218", Offset = "0xD79218", VA = "0xD79218")]
	public ChargeProjectilePower()
	{
	}
}
[Token(Token = "0x20001EA")]
public class FireProjectilePower : AttackPowerBase
{
	[Token(Token = "0x4000CED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("-ProjectilePower-")]
	public GameObject bullet;

	[Token(Token = "0x4000CEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public PlayerBullet curBullet;

	[Token(Token = "0x4000CEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public float bulletScale;

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0xD79240", Offset = "0xD79240", VA = "0xD79240", Slot = "4")]
	public override void Activate()
	{
	}

	[Token(Token = "0x6000B80")]
	[Address(RVA = "0xD79314", Offset = "0xD79314", VA = "0xD79314", Slot = "5")]
	public override void Hold()
	{
	}

	[Token(Token = "0x6000B81")]
	[Address(RVA = "0xD79318", Offset = "0xD79318", VA = "0xD79318", Slot = "6")]
	public override void Deactivate()
	{
	}

	[Token(Token = "0x6000B82")]
	[Address(RVA = "0xD7931C", Offset = "0xD7931C", VA = "0xD7931C", Slot = "7")]
	public override void Clear()
	{
	}

	[Token(Token = "0x6000B83")]
	[Address(RVA = "0xD78E08", Offset = "0xD78E08", VA = "0xD78E08")]
	public void MakeABullet()
	{
	}

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0xD796CC", Offset = "0xD796CC", VA = "0xD796CC")]
	public void FireBullet()
	{
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0xD7922C", Offset = "0xD7922C", VA = "0xD7922C")]
	public FireProjectilePower()
	{
	}
}
[Token(Token = "0x20001EB")]
public class VolleyProjectilePower : FireProjectilePower
{
	[Token(Token = "0x4000CF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Header("-VolleySystem-")]
	public float targetCheckRadius;

	[Token(Token = "0x4000CF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public int missileCount;

	[Token(Token = "0x4000CF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int maxMissileCount;

	[Token(Token = "0x4000CF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform playerHead;

	[Token(Token = "0x4000CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 targetArea;

	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[HideInInspector]
	public float chargeLevel;

	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float chargeTime;

	[Token(Token = "0x4000CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float spawnAroundRadius;

	[Token(Token = "0x4000CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<PlayerBullet> bullets;

	[Token(Token = "0x4000CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string targetTag;

	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool isForwardShifted;

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0xD7973C", Offset = "0xD7973C", VA = "0xD7973C", Slot = "4")]
	public override void Activate()
	{
	}

	[Token(Token = "0x6000B87")]
	[Address(RVA = "0xD797F8", Offset = "0xD797F8", VA = "0xD797F8", Slot = "5")]
	public override void Hold()
	{
	}

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0xD79A44", Offset = "0xD79A44", VA = "0xD79A44", Slot = "6")]
	public override void Deactivate()
	{
	}

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0xD7A054", Offset = "0xD7A054", VA = "0xD7A054")]
	public VolleyProjectilePower()
	{
	}
}
[Token(Token = "0x20001EC")]
public class RespawnGolems : MonoBehaviour
{
	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayerAvatar myGolem;

	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform golemLoc;

	[Token(Token = "0x4000CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isActive;

	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool takeNewGolems;

	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnActivated;

	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public SpriteRenderer activeIcon;

	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GuidComponent saveGuid;

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ReadOnly]
	public string myGuid;

	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ES3Settings saveFile;

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0xD7A0E8", Offset = "0xD7A0E8", VA = "0xD7A0E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0xD7A2B0", Offset = "0xD7A2B0", VA = "0xD7A2B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0xD7A4A0", Offset = "0xD7A4A0", VA = "0xD7A4A0")]
	private void SaveUsed()
	{
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0xD7A388", Offset = "0xD7A388", VA = "0xD7A388")]
	private void LoadUsed()
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0xD7A628", Offset = "0xD7A628", VA = "0xD7A628")]
	private void SpawnGolemHere()
	{
	}

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0xD7A760", Offset = "0xD7A760", VA = "0xD7A760")]
	public void ResetGolem()
	{
	}

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0xD7A590", Offset = "0xD7A590", VA = "0xD7A590")]
	public void _SetActivated()
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0xD7A89C", Offset = "0xD7A89C", VA = "0xD7A89C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0xD7A9B0", Offset = "0xD7A9B0", VA = "0xD7A9B0")]
	public RespawnGolems()
	{
	}
}
[Token(Token = "0x20001ED")]
public class SceneEventsHolder : MonoBehaviour
{
	[Token(Token = "0x4000D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SceneEventsHolder instance;

	[Token(Token = "0x4000D05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent enterMenuEvent;

	[Token(Token = "0x4000D06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent exitMenuEvent;

	[Token(Token = "0x6000B93")]
	[Address(RVA = "0xD7A9B8", Offset = "0xD7A9B8", VA = "0xD7A9B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0xD7AA10", Offset = "0xD7AA10", VA = "0xD7AA10")]
	public SceneEventsHolder()
	{
	}
}
[Token(Token = "0x20001EE")]
public class ShadowSpawner : MonoBehaviour
{
	[Token(Token = "0x20001EF")]
	public enum SpawnTypes
	{
		[Token(Token = "0x4000D16")]
		Normal,
		[Token(Token = "0x4000D17")]
		Once,
		[Token(Token = "0x4000D18")]
		Wave,
		[Token(Token = "0x4000D19")]
		TimedWave
	}

	[Token(Token = "0x4000D07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] enemies;

	[Token(Token = "0x4000D08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int totalEnemy;

	[Token(Token = "0x4000D09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int numEnemy;

	[Token(Token = "0x4000D0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int spawnedEnemy;

	[Token(Token = "0x4000D0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool waveSpawn;

	[Token(Token = "0x4000D0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool Spawn;

	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SpawnTypes spawnType;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float waveTimer;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float timeTillWave;

	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int totalWaves;

	[Token(Token = "0x4000D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int numWaves;

	[Token(Token = "0x4000D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float spawnAroundRadius;

	[Token(Token = "0x4000D13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float chargeLevel;

	[Token(Token = "0x4000D14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float chargeTime;

	[Token(Token = "0x17000077")]
	public float TimeTillWave
	{
		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xD7AED0", Offset = "0xD7AED0", VA = "0xD7AED0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0xD7AA18", Offset = "0xD7AA18", VA = "0xD7AA18")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0xD7AA64", Offset = "0xD7AA64", VA = "0xD7AA64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0xD7AC30", Offset = "0xD7AC30", VA = "0xD7AC30")]
	private void SpawnEnemy()
	{
	}

	[Token(Token = "0x6000B98")]
	[Address(RVA = "0xD7AEAC", Offset = "0xD7AEAC", VA = "0xD7AEAC")]
	public void KillEnemy()
	{
	}

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0xD7AEBC", Offset = "0xD7AEBC", VA = "0xD7AEBC")]
	public void EnableSpawner()
	{
	}

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0xD7AEC8", Offset = "0xD7AEC8", VA = "0xD7AEC8")]
	public void DisableSpawner()
	{
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0xD7AED8", Offset = "0xD7AED8", VA = "0xD7AED8")]
	public ShadowSpawner()
	{
	}
}
[Token(Token = "0x20001F0")]
public class SpritesAndLightsFadeIn : MonoBehaviour
{
	[Token(Token = "0x4000D1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool startFaded;

	[Token(Token = "0x4000D1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SpriteRenderer[] sprites;

	[Token(Token = "0x4000D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Light[] lights;

	[Token(Token = "0x4000D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color[] lightColors;

	[Token(Token = "0x4000D1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Color> originalColors;

	[Token(Token = "0x4000D1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float intensity;

	[Token(Token = "0x4000D20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float fadeTime;

	[Token(Token = "0x4000D21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool fadeBackOut;

	[Token(Token = "0x4000D22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[ShowIf("fadeBackOut")]
	public float fadeBackOutTime;

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0xD7AF08", Offset = "0xD7AF08", VA = "0xD7AF08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B9E")]
	[Address(RVA = "0xD7B090", Offset = "0xD7B090", VA = "0xD7B090")]
	public void FadeIn()
	{
	}

	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0xD7B194", Offset = "0xD7B194", VA = "0xD7B194")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x6000BA0")]
	[Address(RVA = "0xD7B240", Offset = "0xD7B240", VA = "0xD7B240")]
	public void LightsColorToIndex(int colorIndex)
	{
	}

	[Token(Token = "0x6000BA1")]
	[Address(RVA = "0xD7B2D0", Offset = "0xD7B2D0", VA = "0xD7B2D0")]
	public void LightOriginalColor()
	{
	}

	[Token(Token = "0x6000BA2")]
	[Address(RVA = "0xD7B378", Offset = "0xD7B378", VA = "0xD7B378")]
	public void SpritesEnable()
	{
	}

	[Token(Token = "0x6000BA3")]
	[Address(RVA = "0xD7B3DC", Offset = "0xD7B3DC", VA = "0xD7B3DC")]
	public void SpritesDisable()
	{
	}

	[Token(Token = "0x6000BA4")]
	[Address(RVA = "0xD7B440", Offset = "0xD7B440", VA = "0xD7B440")]
	public SpritesAndLightsFadeIn()
	{
	}
}
[Token(Token = "0x20001F1")]
public class TauntField : MonoBehaviour
{
	[Token(Token = "0x4000D23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tauntRange;

	[Token(Token = "0x4000D24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform tauntCenter;

	[Token(Token = "0x4000D25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float pulseCooldown;

	[Token(Token = "0x4000D26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string enemyTag;

	[Token(Token = "0x4000D27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isActivated;

	[Token(Token = "0x4000D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Transform> enemies;

	[Token(Token = "0x4000D29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float timeStamp;

	[Token(Token = "0x4000D2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject activeFX;

	[Token(Token = "0x4000D2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent onPulseEvent;

	[Token(Token = "0x6000BA5")]
	[Address(RVA = "0xD7B4E4", Offset = "0xD7B4E4", VA = "0xD7B4E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BA6")]
	[Address(RVA = "0xD7B5FC", Offset = "0xD7B5FC", VA = "0xD7B5FC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000BA7")]
	[Address(RVA = "0xD7B5A0", Offset = "0xD7B5A0", VA = "0xD7B5A0")]
	public void _Activate()
	{
	}

	[Token(Token = "0x6000BA8")]
	[Address(RVA = "0xD7B5CC", Offset = "0xD7B5CC", VA = "0xD7B5CC")]
	public void _Deactivate()
	{
	}

	[Token(Token = "0x6000BA9")]
	[Address(RVA = "0xD7BA40", Offset = "0xD7BA40", VA = "0xD7BA40")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BAA")]
	[Address(RVA = "0xD7B670", Offset = "0xD7B670", VA = "0xD7B670")]
	public void Taunt()
	{
	}

	[Token(Token = "0x6000BAB")]
	[Address(RVA = "0xD7B85C", Offset = "0xD7B85C", VA = "0xD7B85C")]
	public void UnTaunt()
	{
	}

	[Token(Token = "0x6000BAC")]
	[Address(RVA = "0xD7BA44", Offset = "0xD7BA44", VA = "0xD7BA44", Slot = "4")]
	public virtual void FindTargets()
	{
	}

	[Token(Token = "0x6000BAD")]
	[Address(RVA = "0xD7BBA4", Offset = "0xD7BBA4", VA = "0xD7BBA4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000BAE")]
	[Address(RVA = "0xD7BC38", Offset = "0xD7BC38", VA = "0xD7BC38")]
	public TauntField()
	{
	}
}
[Token(Token = "0x20001F2")]
public class TowerBullet : BulletBase
{
	[Token(Token = "0x4000D2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform bulletTarget;

	[Token(Token = "0x4000D2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float currentTime;

	[Token(Token = "0x6000BAF")]
	[Address(RVA = "0xD7BCFC", Offset = "0xD7BCFC", VA = "0xD7BCFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BB0")]
	[Address(RVA = "0xD7BD0C", Offset = "0xD7BD0C", VA = "0xD7BD0C", Slot = "8")]
	public virtual void LaunchBullet(float dmg, Transform target)
	{
	}

	[Token(Token = "0x6000BB1")]
	[Address(RVA = "0xD7BD40", Offset = "0xD7BD40", VA = "0xD7BD40", Slot = "5")]
	public override void MoveBullet()
	{
	}

	[Token(Token = "0x6000BB2")]
	[Address(RVA = "0xD7BEA0", Offset = "0xD7BEA0", VA = "0xD7BEA0")]
	public TowerBullet()
	{
	}
}
[Token(Token = "0x20001F3")]
public class VaultCheater : MonoBehaviour
{
	[Token(Token = "0x4000D2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] whereTo;

	[Token(Token = "0x4000D2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int currentIndex;

	[Token(Token = "0x4000D30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool runSteveOnEventsOnSelect;

	[Token(Token = "0x4000D31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AtmosphereManager atmoManager;

	[Token(Token = "0x4000D32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float atmoChangeBy;

	[Token(Token = "0x4000D33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool skipUP;

	[Token(Token = "0x4000D34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool isRecording;

	[Token(Token = "0x4000D35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int screenshotCount;

	[Token(Token = "0x4000D36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public OVRInput.Button screenButtonVR;

	[Token(Token = "0x4000D37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public KeyCode screenButtonKey;

	[Token(Token = "0x6000BB3")]
	[Address(RVA = "0xD7BEA8", Offset = "0xD7BEA8", VA = "0xD7BEA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BB4")]
	[Address(RVA = "0xD7BF70", Offset = "0xD7BF70", VA = "0xD7BF70")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BB5")]
	[Address(RVA = "0xD7C60C", Offset = "0xD7C60C", VA = "0xD7C60C")]
	[Button(null, EButtonEnableMode.Always)]
	public void _SaveDestruction()
	{
	}

	[Token(Token = "0x6000BB6")]
	[Address(RVA = "0xD7C9A4", Offset = "0xD7C9A4", VA = "0xD7C9A4")]
	public static void ReloadScene()
	{
	}

	[Token(Token = "0x6000BB7")]
	[Address(RVA = "0xD7C6A4", Offset = "0xD7C6A4", VA = "0xD7C6A4")]
	[Button(null, EButtonEnableMode.Always)]
	public void GoToNext()
	{
	}

	[Token(Token = "0x6000BB8")]
	[Address(RVA = "0xD7C7DC", Offset = "0xD7C7DC", VA = "0xD7C7DC")]
	[Button(null, EButtonEnableMode.Always)]
	public void GoToPrevious()
	{
	}

	[Token(Token = "0x6000BB9")]
	[Address(RVA = "0xD7CA14", Offset = "0xD7CA14", VA = "0xD7CA14")]
	public void RecordingReady()
	{
	}

	[Token(Token = "0x6000BBA")]
	[Address(RVA = "0xD7C8A0", Offset = "0xD7C8A0", VA = "0xD7C8A0")]
	public void DoMove()
	{
	}

	[Token(Token = "0x6000BBB")]
	[Address(RVA = "0xD7CAC0", Offset = "0xD7CAC0", VA = "0xD7CAC0")]
	public VaultCheater()
	{
	}
}
[Token(Token = "0x20001F4")]
public class FancyDestroy : MonoBehaviour
{
	[Token(Token = "0x20001F5")]
	[CompilerGenerated]
	private sealed class <DelayedDestroy>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FancyDestroy <>4__this;

		[Token(Token = "0x17000078")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0xD7CE14", Offset = "0xD7CE14", VA = "0xD7CE14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000079")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0xD7CE5C", Offset = "0xD7CE5C", VA = "0xD7CE5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xD7CB9C", Offset = "0xD7CB9C", VA = "0xD7CB9C")]
		[DebuggerHidden]
		public <DelayedDestroy>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xD7CBD4", Offset = "0xD7CBD4", VA = "0xD7CBD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xD7CBD8", Offset = "0xD7CBD8", VA = "0xD7CBD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xD7CE1C", Offset = "0xD7CE1C", VA = "0xD7CE1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject poofEffect;

	[Token(Token = "0x4000D39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float delay;

	[Token(Token = "0x6000BBC")]
	[Address(RVA = "0xD7CADC", Offset = "0xD7CADC", VA = "0xD7CADC")]
	public void Destruction()
	{
	}

	[Token(Token = "0x6000BBD")]
	[Address(RVA = "0xD7CB28", Offset = "0xD7CB28", VA = "0xD7CB28")]
	[IteratorStateMachine(typeof(<DelayedDestroy>d__3))]
	private IEnumerator DelayedDestroy()
	{
		return null;
	}

	[Token(Token = "0x6000BBE")]
	[Address(RVA = "0xD7CBC4", Offset = "0xD7CBC4", VA = "0xD7CBC4")]
	public FancyDestroy()
	{
	}
}
[Token(Token = "0x20001F6")]
public class FogCameraSwapper : MonoBehaviour
{
	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0xD7CE64", Offset = "0xD7CE64", VA = "0xD7CE64")]
	public void Start()
	{
	}

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0xD7CF6C", Offset = "0xD7CF6C", VA = "0xD7CF6C")]
	public void ChangeCamera()
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0xD7D08C", Offset = "0xD7D08C", VA = "0xD7D08C")]
	public FogCameraSwapper()
	{
	}
}
[Token(Token = "0x20001F7")]
public class GraphicsSwapScript : MonoBehaviour
{
	[Token(Token = "0x20001F8")]
	[CompilerGenerated]
	private sealed class <DoArraySlow>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GraphicsSwapScript <>4__this;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] myArray;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__2;

		[Token(Token = "0x1700007A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BD2")]
			[Address(RVA = "0xD7D5B4", Offset = "0xD7D5B4", VA = "0xD7D5B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BD4")]
			[Address(RVA = "0xD7D5FC", Offset = "0xD7D5FC", VA = "0xD7D5FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xD7D304", Offset = "0xD7D304", VA = "0xD7D304")]
		[DebuggerHidden]
		public <DoArraySlow>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xD7D45C", Offset = "0xD7D45C", VA = "0xD7D45C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xD7D460", Offset = "0xD7D460", VA = "0xD7D460", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xD7D5BC", Offset = "0xD7D5BC", VA = "0xD7D5BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] turnOn;

	[Token(Token = "0x4000D3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] turnOff;

	[Token(Token = "0x4000D3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float delay;

	[Token(Token = "0x4000D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sequence doSequence;

	[Token(Token = "0x4000D41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject particleSpawn;

	[Token(Token = "0x4000D42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool curMode;

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0xD7D094", Offset = "0xD7D094", VA = "0xD7D094")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0xD7D15C", Offset = "0xD7D15C", VA = "0xD7D15C")]
	public void Activate()
	{
	}

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0xD7D0A4", Offset = "0xD7D0A4", VA = "0xD7D0A4")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0xD7D274", Offset = "0xD7D274", VA = "0xD7D274")]
	[IteratorStateMachine(typeof(<DoArraySlow>d__9))]
	private IEnumerator DoArraySlow(GameObject[] myArray)
	{
		return null;
	}

	[Token(Token = "0x6000BCC")]
	[Address(RVA = "0xD7D1D4", Offset = "0xD7D1D4", VA = "0xD7D1D4")]
	private void DoArrayInstant(GameObject[] myArray)
	{
	}

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0xD7D32C", Offset = "0xD7D32C", VA = "0xD7D32C")]
	public void MakeParticle(Vector3 pos)
	{
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0xD7D454", Offset = "0xD7D454", VA = "0xD7D454")]
	public GraphicsSwapScript()
	{
	}
}
[Token(Token = "0x20001F9")]
public class MaterialTransition : MonoBehaviour
{
	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer[] renderers;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float transitionTime;

	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool setOnStart;

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool transitionOnStart;

	[Token(Token = "0x4000D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool isMultiMat;

	[Token(Token = "0x4000D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ShowIf("isMultiMat")]
	public int multiMatIndex;

	[Token(Token = "0x4000D4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HorizontalLine(2f, EColor.Gray)]
	public bool useFloatChanges;

	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ShowIf("useFloatChanges")]
	public string materialProperty;

	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ShowIf("useFloatChanges")]
	public float setTo;

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[ShowIf("useFloatChanges")]
	public float transistionTo;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ShowIf("useFloatChanges")]
	[ReadOnly]
	public float matOriginalValue;

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HorizontalLine(2f, EColor.Gray)]
	public bool useColorChanges;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("useColorChanges")]
	public string colorProperty;

	[Token(Token = "0x4000D55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ColorUsage(true, true)]
	[ShowIf("useColorChanges")]
	public Color[] colors;

	[Token(Token = "0x4000D56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ShowIf("useColorChanges")]
	public int setColorTo;

	[Token(Token = "0x4000D57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[ColorUsage(true, true)]
	[ShowIf("useColorChanges")]
	[ReadOnly]
	public Color originalColor;

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0xD7D604", Offset = "0xD7D604", VA = "0xD7D604")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0xD7D7D4", Offset = "0xD7D7D4", VA = "0xD7D7D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0xD7DBAC", Offset = "0xD7DBAC", VA = "0xD7DBAC")]
	[Button(null, EButtonEnableMode.Always)]
	public void PauseTransitions()
	{
	}

	[Token(Token = "0x6000BD8")]
	[Address(RVA = "0xD7DC44", Offset = "0xD7DC44", VA = "0xD7DC44")]
	[Button(null, EButtonEnableMode.Always)]
	public void TransitionColor()
	{
	}

	[Token(Token = "0x6000BD9")]
	[Address(RVA = "0xD7DD38", Offset = "0xD7DD38", VA = "0xD7DD38")]
	public void TransitionColorTo(int index)
	{
	}

	[Token(Token = "0x6000BDA")]
	[Address(RVA = "0xD7DE1C", Offset = "0xD7DE1C", VA = "0xD7DE1C")]
	public void TransitionColorTo(Color color, string colorProp, float time)
	{
	}

	[Token(Token = "0x6000BDB")]
	[Address(RVA = "0xD7DA0C", Offset = "0xD7DA0C", VA = "0xD7DA0C")]
	public void SetColorTo(int index)
	{
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0xD7DEFC", Offset = "0xD7DEFC", VA = "0xD7DEFC")]
	[Button(null, EButtonEnableMode.Always)]
	public void ResetColor()
	{
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0xD7DAFC", Offset = "0xD7DAFC", VA = "0xD7DAFC")]
	public void TransitionTo(float value)
	{
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0xD7E01C", Offset = "0xD7E01C", VA = "0xD7E01C")]
	public void TransitionTime(float value)
	{
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0xD7D958", Offset = "0xD7D958", VA = "0xD7D958")]
	public void SetTo(float value)
	{
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0xD7E0CC", Offset = "0xD7E0CC", VA = "0xD7E0CC")]
	public void SwitchTo(Material mat)
	{
	}

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0xD7E1CC", Offset = "0xD7E1CC", VA = "0xD7E1CC")]
	public MaterialTransition()
	{
	}
}
[Token(Token = "0x20001FA")]
public class ObjectiveMarker : MonoBehaviour
{
	[Token(Token = "0x4000D58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject beacon;

	[Token(Token = "0x4000D59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool scaleByDistance;

	[Token(Token = "0x4000D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool showObjectiveMarkers;

	[Token(Token = "0x4000D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float scaleMulti;

	[Token(Token = "0x4000D5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float lastScale;

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0xD7E22C", Offset = "0xD7E22C", VA = "0xD7E22C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0xD7E284", Offset = "0xD7E284", VA = "0xD7E284")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0xD7E28C", Offset = "0xD7E28C", VA = "0xD7E28C")]
	public void UpdateObjectiveMarkers()
	{
	}

	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0xD7E528", Offset = "0xD7E528", VA = "0xD7E528")]
	public ObjectiveMarker()
	{
	}
}
[Token(Token = "0x20001FB")]
public class ParticleRestartOnEnable : MonoBehaviour
{
	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem particles;

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0xD7E538", Offset = "0xD7E538", VA = "0xD7E538")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0xD7E590", Offset = "0xD7E590", VA = "0xD7E590")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0xD7E5B0", Offset = "0xD7E5B0", VA = "0xD7E5B0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0xD7E5D0", Offset = "0xD7E5D0", VA = "0xD7E5D0")]
	public ParticleRestartOnEnable()
	{
	}
}
[Token(Token = "0x20001FC")]
public class ScrollingUVs : MonoBehaviour
{
	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 Scroll;

	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2 Offset;

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0xD7E5D8", Offset = "0xD7E5D8", VA = "0xD7E5D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0xD7E678", Offset = "0xD7E678", VA = "0xD7E678")]
	public ScrollingUVs()
	{
	}
}
[Token(Token = "0x20001FD")]
public class SkyBoxChanger : MonoBehaviour
{
	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] skyboxMats;

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0xD7E68C", Offset = "0xD7E68C", VA = "0xD7E68C")]
	public void ChangeSkybox(int index)
	{
	}

	[Token(Token = "0x6000BED")]
	[Address(RVA = "0xD7E6C0", Offset = "0xD7E6C0", VA = "0xD7E6C0")]
	public SkyBoxChanger()
	{
	}
}
[Token(Token = "0x20001FE")]
public class SpawnParticle : MonoBehaviour
{
	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject poofEffect;

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0xD7E6C8", Offset = "0xD7E6C8", VA = "0xD7E6C8")]
	public void CausePoof()
	{
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0xD7E810", Offset = "0xD7E810", VA = "0xD7E810")]
	public SpawnParticle()
	{
	}
}
[Token(Token = "0x20001FF")]
public class VisualKeyPadPuzzle : MonoBehaviour
{
	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[InfoBox("Visual Keypad, ToggleObjects Zero should be setup as Empty/Blank", EInfoBoxType.Normal)]
	public int[] code;

	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public int inputIndex;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool autoCheckCode;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int[] inputedCode;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool disabled;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ToggleObjects[] visualOutput;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Clue")]
	public bool hasClue;

	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[ShowIf("hasClue")]
	public ToggleObjects[] visualClue;

	[Token(Token = "0x4000D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ReadOnly]
	public int maxValuesinToggles;

	[Token(Token = "0x4000D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Header("Randomizer")]
	public bool randomPassCode;

	[Token(Token = "0x4000D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool noZeros;

	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ReadOnly]
	public int length;

	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Events")]
	public UnityEvent correctCode;

	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent inCorrectCode;

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0xD7E818", Offset = "0xD7E818", VA = "0xD7E818")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0xD7E8B8", Offset = "0xD7E8B8", VA = "0xD7E8B8")]
	public void _DisablePuzzle()
	{
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0xD7E8C4", Offset = "0xD7E8C4", VA = "0xD7E8C4")]
	public void RandomizeCode()
	{
	}

	[Token(Token = "0x6000BF3")]
	[Address(RVA = "0xD7E9B0", Offset = "0xD7E9B0", VA = "0xD7E9B0")]
	public void _InputNumber(int chg)
	{
	}

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0xD7EBC4", Offset = "0xD7EBC4", VA = "0xD7EBC4")]
	private void SetupClue()
	{
	}

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0xD7EA48", Offset = "0xD7EA48", VA = "0xD7EA48")]
	private void SetupInput()
	{
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0xD7EC40", Offset = "0xD7EC40", VA = "0xD7EC40")]
	public void _ClearCode()
	{
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0xD7EAC4", Offset = "0xD7EAC4", VA = "0xD7EAC4")]
	public void _CheckPuzzle()
	{
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0xD7E81C", Offset = "0xD7E81C", VA = "0xD7E81C")]
	public void _ResetPuzzle()
	{
	}

	[Token(Token = "0x6000BF9")]
	[Address(RVA = "0xD7ECC4", Offset = "0xD7ECC4", VA = "0xD7ECC4")]
	public VisualKeyPadPuzzle()
	{
	}
}
[Token(Token = "0x2000200")]
public class VoidbringerFader : MonoBehaviour
{
	[Token(Token = "0x2000201")]
	[CompilerGenerated]
	private sealed class <FadeOutDelay>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VoidbringerFader <>4__this;

		[Token(Token = "0x1700007C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C03")]
			[Address(RVA = "0xD7F128", Offset = "0xD7F128", VA = "0xD7F128", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C05")]
			[Address(RVA = "0xD7F170", Offset = "0xD7F170", VA = "0xD7F170", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0xD7EF24", Offset = "0xD7EF24", VA = "0xD7EF24")]
		[DebuggerHidden]
		public <FadeOutDelay>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xD7EF84", Offset = "0xD7EF84", VA = "0xD7EF84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xD7EF88", Offset = "0xD7EF88", VA = "0xD7EF88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xD7F130", Offset = "0xD7F130", VA = "0xD7F130", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000202")]
	[CompilerGenerated]
	private sealed class <FadeInDelay>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VoidbringerFader <>4__this;

		[Token(Token = "0x1700007E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C09")]
			[Address(RVA = "0xD7F31C", Offset = "0xD7F31C", VA = "0xD7F31C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0xD7F364", Offset = "0xD7F364", VA = "0xD7F364", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xD7EF4C", Offset = "0xD7EF4C", VA = "0xD7EF4C")]
		[DebuggerHidden]
		public <FadeInDelay>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xD7F178", Offset = "0xD7F178", VA = "0xD7F178", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xD7F17C", Offset = "0xD7F17C", VA = "0xD7F17C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xD7F324", Offset = "0xD7F324", VA = "0xD7F324", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MaterialTransition[] fadeMaterials;

	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MaterialTransition[] fadeInOutMaterials;

	[Token(Token = "0x4000D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject activateBetween;

	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float delayTimeBetween;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool offOnStart;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IEnumerator fadeOutCoroutine;

	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private IEnumerator fadeInCoroutine;

	[Token(Token = "0x6000BFA")]
	[Address(RVA = "0xD7ECE0", Offset = "0xD7ECE0", VA = "0xD7ECE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BFB")]
	[Address(RVA = "0xD7EDAC", Offset = "0xD7EDAC", VA = "0xD7EDAC")]
	[Button(null, EButtonEnableMode.Always)]
	public void _FadeOut()
	{
	}

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0xD7EE68", Offset = "0xD7EE68", VA = "0xD7EE68")]
	[Button(null, EButtonEnableMode.Always)]
	public void _FadeIn()
	{
	}

	[Token(Token = "0x6000BFD")]
	[Address(RVA = "0xD7EDF4", Offset = "0xD7EDF4", VA = "0xD7EDF4")]
	[IteratorStateMachine(typeof(<FadeOutDelay>d__10))]
	private IEnumerator FadeOutDelay()
	{
		return null;
	}

	[Token(Token = "0x6000BFE")]
	[Address(RVA = "0xD7EEB0", Offset = "0xD7EEB0", VA = "0xD7EEB0")]
	[IteratorStateMachine(typeof(<FadeInDelay>d__11))]
	private IEnumerator FadeInDelay()
	{
		return null;
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0xD7EF74", Offset = "0xD7EF74", VA = "0xD7EF74")]
	public VoidbringerFader()
	{
	}
}
[Token(Token = "0x2000203")]
public class VRDisabler : MonoBehaviour
{
	[Token(Token = "0x6000C0C")]
	[Address(RVA = "0xD7F36C", Offset = "0xD7F36C", VA = "0xD7F36C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C0D")]
	[Address(RVA = "0xD7F3E0", Offset = "0xD7F3E0", VA = "0xD7F3E0")]
	public VRDisabler()
	{
	}
}
[Token(Token = "0x2000204")]
[RequireComponent(typeof(VRMovementOculus))]
public class VRMoveAnimator : MonoBehaviour
{
	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VRMovementOculus refSystem;

	[Token(Token = "0x4000D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator myAnimator;

	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AnimatorParam("myAnimator")]
	public string speedAnimVar;

	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 5f)]
	public float speedMulti;

	[Token(Token = "0x6000C0E")]
	[Address(RVA = "0xD7F3E8", Offset = "0xD7F3E8", VA = "0xD7F3E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C0F")]
	[Address(RVA = "0xD7F440", Offset = "0xD7F440", VA = "0xD7F440")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000C10")]
	[Address(RVA = "0xD7F44C", Offset = "0xD7F44C", VA = "0xD7F44C", Slot = "4")]
	public virtual void SpeedSet()
	{
	}

	[Token(Token = "0x6000C11")]
	[Address(RVA = "0xD7F584", Offset = "0xD7F584", VA = "0xD7F584")]
	public VRMoveAnimator()
	{
	}
}
[Token(Token = "0x2000205")]
public class VRScreenShotSystem : MonoBehaviour
{
	[Token(Token = "0x2000206")]
	[CompilerGenerated]
	private sealed class <ScreenshotEncode>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRScreenShotSystem <>4__this;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Texture2D <texture>5__2;

		[Token(Token = "0x17000080")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0xD7FBA0", Offset = "0xD7FBA0", VA = "0xD7FBA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000081")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0xD7FBE8", Offset = "0xD7FBE8", VA = "0xD7FBE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xD7F8D0", Offset = "0xD7F8D0", VA = "0xD7F8D0")]
		[DebuggerHidden]
		public <ScreenshotEncode>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xD7F908", Offset = "0xD7F908", VA = "0xD7F908", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xD7F90C", Offset = "0xD7F90C", VA = "0xD7F90C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xD7FBA8", Offset = "0xD7FBA8", VA = "0xD7FBA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int screenshotCount;

	[Token(Token = "0x4000D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public OVRInput.Button screenButton;

	[Token(Token = "0x6000C12")]
	[Address(RVA = "0xD7F594", Offset = "0xD7F594", VA = "0xD7F594")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000C13")]
	[Address(RVA = "0xD7F664", Offset = "0xD7F664", VA = "0xD7F664")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C14")]
	[Address(RVA = "0xD7F85C", Offset = "0xD7F85C", VA = "0xD7F85C")]
	[IteratorStateMachine(typeof(<ScreenshotEncode>d__4))]
	private IEnumerator ScreenshotEncode()
	{
		return null;
	}

	[Token(Token = "0x6000C15")]
	[Address(RVA = "0xD7F8F8", Offset = "0xD7F8F8", VA = "0xD7F8F8")]
	public VRScreenShotSystem()
	{
	}
}
[Token(Token = "0x2000207")]
public class _DebugTools3lb : MonoBehaviour
{
	[Token(Token = "0x4000D87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool hideMeshOnAwake;

	[Token(Token = "0x4000D88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool disableInBuild;

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0xD7FBF0", Offset = "0xD7FBF0", VA = "0xD7FBF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0xD7FCF0", Offset = "0xD7FCF0", VA = "0xD7FCF0")]
	public _DebugTools3lb()
	{
	}
}
namespace PixelCrushers.DialogueSystem.Demo
{
	[Token(Token = "0x2000208")]
	public class AssignMainCameraToCanvas : MonoBehaviour
	{
		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xD7FD00", Offset = "0xD7FD00", VA = "0xD7FD00")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xD7FEB4", Offset = "0xD7FEB4", VA = "0xD7FEB4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xD7FF58", Offset = "0xD7FF58", VA = "0xD7FF58")]
		private void OnSceneLoaded(Scene arg0, LoadSceneMode arg1)
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xD7FDAC", Offset = "0xD7FDAC", VA = "0xD7FDAC")]
		public void AssignMainCamera()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xD7FF5C", Offset = "0xD7FF5C", VA = "0xD7FF5C")]
		public AssignMainCameraToCanvas()
		{
		}
	}
}
namespace VRStandardAssets.Utils
{
	[Token(Token = "0x2000209")]
	public class VRInput : MonoBehaviour
	{
		[Token(Token = "0x200020A")]
		public enum SwipeDirection
		{
			[Token(Token = "0x4000D97")]
			NONE,
			[Token(Token = "0x4000D98")]
			UP,
			[Token(Token = "0x4000D99")]
			DOWN,
			[Token(Token = "0x4000D9A")]
			LEFT,
			[Token(Token = "0x4000D9B")]
			RIGHT
		}

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float m_DoubleClickTime;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_SwipeWidth;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector2 m_MouseDownPosition;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector2 m_MouseUpPosition;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float m_LastMouseUpTime;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_LastHorizontalValue;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_LastVerticalValue;

		[Token(Token = "0x17000082")]
		public float DoubleClickTime
		{
			[Token(Token = "0x6000C2F")]
			[Address(RVA = "0xD806DC", Offset = "0xD806DC", VA = "0xD806DC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x14000009")]
		public event Action<SwipeDirection> OnSwipe
		{
			[Token(Token = "0x6000C23")]
			[Address(RVA = "0xD7FF64", Offset = "0xD7FF64", VA = "0xD7FF64")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C24")]
			[Address(RVA = "0xD80014", Offset = "0xD80014", VA = "0xD80014")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event Action OnClick
		{
			[Token(Token = "0x6000C25")]
			[Address(RVA = "0xD800C4", Offset = "0xD800C4", VA = "0xD800C4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C26")]
			[Address(RVA = "0xD80160", Offset = "0xD80160", VA = "0xD80160")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event Action OnDown
		{
			[Token(Token = "0x6000C27")]
			[Address(RVA = "0xD801FC", Offset = "0xD801FC", VA = "0xD801FC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C28")]
			[Address(RVA = "0xD80298", Offset = "0xD80298", VA = "0xD80298")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event Action OnUp
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0xD80334", Offset = "0xD80334", VA = "0xD80334")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0xD803D0", Offset = "0xD803D0", VA = "0xD803D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event Action OnDoubleClick
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0xD8046C", Offset = "0xD8046C", VA = "0xD8046C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0xD80508", Offset = "0xD80508", VA = "0xD80508")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000E")]
		public event Action OnCancel
		{
			[Token(Token = "0x6000C2D")]
			[Address(RVA = "0xD805A4", Offset = "0xD805A4", VA = "0xD805A4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C2E")]
			[Address(RVA = "0xD80640", Offset = "0xD80640", VA = "0xD80640")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xD806E4", Offset = "0xD806E4", VA = "0xD806E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xD806E8", Offset = "0xD806E8", VA = "0xD806E8")]
		private void CheckInput()
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xD80888", Offset = "0xD80888", VA = "0xD80888")]
		private SwipeDirection DetectSwipe()
		{
			return default(SwipeDirection);
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xD809C0", Offset = "0xD809C0", VA = "0xD809C0")]
		private SwipeDirection DetectKeyboardEmulatedSwipe()
		{
			return default(SwipeDirection);
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xD80ACC", Offset = "0xD80ACC", VA = "0xD80ACC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xD80B24", Offset = "0xD80B24", VA = "0xD80B24")]
		public VRInput()
		{
		}
	}
}
namespace VRKeyboard.Utils
{
	[Token(Token = "0x200020B")]
	public class KeyboardManager : MonoBehaviour
	{
		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If the character is uppercase at the initialization")]
		[Header("User defined")]
		public bool isUppercase;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxInputLength;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("UI Elements")]
		public Text inputText;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Essentials")]
		public Transform keys;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Key[] keyList;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool capslockFlag;

		[Token(Token = "0x17000083")]
		private string Input
		{
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0xD80B3C", Offset = "0xD80B3C", VA = "0xD80B3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0xD80B60", Offset = "0xD80B60", VA = "0xD80B60")]
			set
			{
			}
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xD80B84", Offset = "0xD80B84", VA = "0xD80B84")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xD80BE4", Offset = "0xD80BE4", VA = "0xD80BE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xD80F14", Offset = "0xD80F14", VA = "0xD80F14")]
		public void Backspace()
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xD80FD4", Offset = "0xD80FD4", VA = "0xD80FD4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xD80E40", Offset = "0xD80E40", VA = "0xD80E40")]
		public void CapsLock()
		{
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xD81030", Offset = "0xD81030", VA = "0xD81030")]
		public void Shift()
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xD810F4", Offset = "0xD810F4", VA = "0xD810F4")]
		public void GenerateInput(string s)
		{
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xD8118C", Offset = "0xD8118C", VA = "0xD8118C")]
		public KeyboardManager()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class Alphabet : Key
	{
		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xD81194", Offset = "0xD81194", VA = "0xD81194", Slot = "5")]
		public override void CapsLock(bool isUppercase)
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xD811F8", Offset = "0xD811F8", VA = "0xD811F8")]
		public Alphabet()
		{
		}
	}
	[Token(Token = "0x200020D")]
	public class Key : MonoBehaviour
	{
		[Token(Token = "0x200020E")]
		public delegate void OnKeyClickedHandler(string key);

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Text key;

		[Token(Token = "0x1400000F")]
		public event OnKeyClickedHandler OnKeyClicked
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0xD80DA4", Offset = "0xD80DA4", VA = "0xD80DA4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0xD81208", Offset = "0xD81208", VA = "0xD81208")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xD812A4", Offset = "0xD812A4", VA = "0xD812A4", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xD813B4", Offset = "0xD813B4", VA = "0xD813B4", Slot = "5")]
		public virtual void CapsLock(bool isUppercase)
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xD813B8", Offset = "0xD813B8", VA = "0xD813B8", Slot = "6")]
		public virtual void ShiftKey()
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xD81200", Offset = "0xD81200", VA = "0xD81200")]
		public Key()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class Number : Key
	{
		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xD81440", Offset = "0xD81440", VA = "0xD81440")]
		public Number()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class Shift : Key
	{
		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text subscript;

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xD81448", Offset = "0xD81448", VA = "0xD81448", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xD814DC", Offset = "0xD814DC", VA = "0xD814DC", Slot = "6")]
		public override void ShiftKey()
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xD81568", Offset = "0xD81568", VA = "0xD81568")]
		public Shift()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class Symbol : Key
	{
		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xD81570", Offset = "0xD81570", VA = "0xD81570")]
		public Symbol()
		{
		}
	}
}
namespace Pinwheel.Jupiter
{
	[Token(Token = "0x2000212")]
	public static class JCommon
	{
		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string SUPPORT_EMAIL;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string BUSINESS_EMAIL;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string YOUTUBE_CHANNEL;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string ONLINE_MANUAL;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string FORUM;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string DISCORD;

		[Token(Token = "0x4000DAB")]
		public const int PREVIEW_TEXTURE_SIZE = 512;

		[Token(Token = "0x4000DAC")]
		public const int TEXTURE_SIZE_MIN = 1;

		[Token(Token = "0x4000DAD")]
		public const int TEXTURE_SIZE_MAX = 8192;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Vector2[] fullRectUvPoints;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Mesh emptyMesh;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Material[] emptyMaterials;

		[Token(Token = "0x17000084")]
		public static JRenderPipelineType CurrentRenderPipeline
		{
			[Token(Token = "0x6000C52")]
			[Address(RVA = "0xD81578", Offset = "0xD81578", VA = "0xD81578")]
			get
			{
				return default(JRenderPipelineType);
			}
		}

		[Token(Token = "0x17000085")]
		public static Vector2[] FullRectUvPoints
		{
			[Token(Token = "0x6000C53")]
			[Address(RVA = "0xD81600", Offset = "0xD81600", VA = "0xD81600")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		public static Mesh EmptyMesh
		{
			[Token(Token = "0x6000C54")]
			[Address(RVA = "0xD817C8", Offset = "0xD817C8", VA = "0xD817C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		public static Material[] EmptyMaterials
		{
			[Token(Token = "0x6000C55")]
			[Address(RVA = "0xD818CC", Offset = "0xD818CC", VA = "0xD818CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		public static Rect UnitRect
		{
			[Token(Token = "0x6000C56")]
			[Address(RVA = "0xD81990", Offset = "0xD81990", VA = "0xD81990")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xD819CC", Offset = "0xD819CC", VA = "0xD819CC")]
		public static string GetUniqueID()
		{
			return null;
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xD81A34", Offset = "0xD81A34", VA = "0xD81A34")]
		public static long GetTimeTick()
		{
			return default(long);
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xD81A9C", Offset = "0xD81A9C", VA = "0xD81A9C")]
		public static string Reverse(string s)
		{
			return null;
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xD81B08", Offset = "0xD81B08", VA = "0xD81B08")]
		public static void SetDirty(UnityEngine.Object o)
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xD81B0C", Offset = "0xD81B0C", VA = "0xD81B0C")]
		public static void AddObjectToAsset(UnityEngine.Object objectToAdd, UnityEngine.Object asset)
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xD81B10", Offset = "0xD81B10", VA = "0xD81B10")]
		public static Texture2D CreateTexture(int resolution, Color fill, TextureFormat format = TextureFormat.ARGB32)
		{
			return null;
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xD81C4C", Offset = "0xD81C4C", VA = "0xD81C4C")]
		public static void CopyToRT(Texture t, RenderTexture rt)
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0xD81CCC", Offset = "0xD81CCC", VA = "0xD81CCC")]
		public static void CopyFromRT(Texture2D t, RenderTexture rt)
		{
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0xD81D80", Offset = "0xD81D80", VA = "0xD81D80")]
		public static void CopyTexture(Texture2D src, Texture2D des)
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0xD81EA8", Offset = "0xD81EA8", VA = "0xD81EA8")]
		public static Texture2D CloneTexture(Texture2D t)
		{
			return null;
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xD82070", Offset = "0xD82070", VA = "0xD82070")]
		public static void FillTexture(Texture2D t, Color c)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0xD82188", Offset = "0xD82188", VA = "0xD82188")]
		public static void FillTexture(RenderTexture rt, Color c)
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0xD822A8", Offset = "0xD822A8", VA = "0xD822A8")]
		public static Texture2D CloneAndResizeTexture(Texture2D t, int width, int height)
		{
			return null;
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0xD82420", Offset = "0xD82420", VA = "0xD82420")]
		public static RenderTexture CopyToRT(Texture src, int startX, int startY, int width, int height, Color defaultColor)
		{
			return null;
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0xD82708", Offset = "0xD82708", VA = "0xD82708")]
		public static void DrawTexture(RenderTexture rt, Texture texture, Rect uvRect, Material mat, int pass = 0)
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xD82934", Offset = "0xD82934", VA = "0xD82934")]
		public static void DrawTriangle(RenderTexture rt, Vector2 v0, Vector2 v1, Vector2 v2, Color c)
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xD82A68", Offset = "0xD82A68", VA = "0xD82A68")]
		public static void DrawQuad(RenderTexture rt, Vector2[] quadCorners, Material mat, int pass)
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xD82BA0", Offset = "0xD82BA0", VA = "0xD82BA0")]
		public static List<Type> GetAllLoadedTypes()
		{
			return null;
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xD82E24", Offset = "0xD82E24", VA = "0xD82E24")]
		public static IEnumerable<Rect> CompareHeightMap(int gridSize, Color[] oldValues, Color[] newValues)
		{
			return null;
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xD833DC", Offset = "0xD833DC", VA = "0xD833DC")]
		public static Rect GetUvRange(int gridSize, int x, int z)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xD83470", Offset = "0xD83470", VA = "0xD83470")]
		public static Texture2D CreateTextureFromCurve(AnimationCurve curve, int width, int height)
		{
			return null;
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xD83634", Offset = "0xD83634", VA = "0xD83634")]
		public static Vector3[] GetBrushQuadCorners(Vector3 center, float radius, float rotation)
		{
			return null;
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xD837F8", Offset = "0xD837F8", VA = "0xD837F8")]
		public static void ClearRT(RenderTexture rt)
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xD83834", Offset = "0xD83834", VA = "0xD83834")]
		public static void SetMaterialKeywordActive(Material mat, string keyword, bool active)
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xD83854", Offset = "0xD83854", VA = "0xD83854")]
		public static void Editor_ProgressBar(string title, string detail, float percent)
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xD83858", Offset = "0xD83858", VA = "0xD83858")]
		public static void Editor_CancelableProgressBar(string title, string detail, float percent)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xD8385C", Offset = "0xD8385C", VA = "0xD8385C")]
		public static void Editor_ClearProgressBar()
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xD83860", Offset = "0xD83860", VA = "0xD83860")]
		public static Camera CreateCamera()
		{
			return null;
		}
	}
	[Token(Token = "0x2000213")]
	public enum JDetailOverlayLayer
	{
		[Token(Token = "0x4000DB2")]
		AfterSky,
		[Token(Token = "0x4000DB3")]
		AfterStars,
		[Token(Token = "0x4000DB4")]
		AfterSun,
		[Token(Token = "0x4000DB5")]
		AfterMoon,
		[Token(Token = "0x4000DB6")]
		AfterHorizonCloud,
		[Token(Token = "0x4000DB7")]
		AfterOverheadCloud
	}
	[Token(Token = "0x2000214")]
	public enum JFogSyncOption
	{
		[Token(Token = "0x4000DB9")]
		DontSync,
		[Token(Token = "0x4000DBA")]
		SkyColor,
		[Token(Token = "0x4000DBB")]
		HorizonColor,
		[Token(Token = "0x4000DBC")]
		GroundColor,
		[Token(Token = "0x4000DBD")]
		CustomColor
	}
	[Token(Token = "0x2000215")]
	public class JJupiterSettings : ScriptableObject
	{
		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static JJupiterSettings instance;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Material defaultSkybox;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Texture2D noiseTexture;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Texture2D cloudTexture;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private JSkyProfile defaultProfileSunnyDay;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private JSkyProfile defaultProfileStarryNight;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private JDayNightCycleProfile defaultDayNightCycleProfile;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private JInternalShaderSettings internalShaders;

		[Token(Token = "0x17000089")]
		public static JJupiterSettings Instance
		{
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0xD83A20", Offset = "0xD83A20", VA = "0xD83A20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		public Material DefaultSkybox
		{
			[Token(Token = "0x6000C75")]
			[Address(RVA = "0xD83B64", Offset = "0xD83B64", VA = "0xD83B64")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0xD83B6C", Offset = "0xD83B6C", VA = "0xD83B6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public Texture2D NoiseTexture
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0xD83B74", Offset = "0xD83B74", VA = "0xD83B74")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0xD83B7C", Offset = "0xD83B7C", VA = "0xD83B7C")]
			set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public Texture2D CloudTexture
		{
			[Token(Token = "0x6000C79")]
			[Address(RVA = "0xD83B84", Offset = "0xD83B84", VA = "0xD83B84")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0xD83B8C", Offset = "0xD83B8C", VA = "0xD83B8C")]
			set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public JSkyProfile DefaultProfileSunnyDay
		{
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0xD83B94", Offset = "0xD83B94", VA = "0xD83B94")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0xD83B9C", Offset = "0xD83B9C", VA = "0xD83B9C")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public JSkyProfile DefaultProfileStarryNight
		{
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0xD83BA4", Offset = "0xD83BA4", VA = "0xD83BA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0xD83BAC", Offset = "0xD83BAC", VA = "0xD83BAC")]
			set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public JDayNightCycleProfile DefaultDayNightCycleProfile
		{
			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0xD83BB4", Offset = "0xD83BB4", VA = "0xD83BB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C80")]
			[Address(RVA = "0xD83BBC", Offset = "0xD83BBC", VA = "0xD83BBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public JInternalShaderSettings InternalShaders
		{
			[Token(Token = "0x6000C81")]
			[Address(RVA = "0xD83BC4", Offset = "0xD83BC4", VA = "0xD83BC4")]
			get
			{
				return default(JInternalShaderSettings);
			}
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0xD83BD4", Offset = "0xD83BD4", VA = "0xD83BD4")]
			set
			{
			}
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xD83BF0", Offset = "0xD83BF0", VA = "0xD83BF0")]
		public JJupiterSettings()
		{
		}
	}
	[Token(Token = "0x2000216")]
	public static class JMat
	{
		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int NOISE_TEX;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int CLOUD_TEX;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int SKY_COLOR;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int HORIZON_COLOR;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int GROUND_COLOR;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly int HORIZON_THICKNESS;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int HORIZON_EXPONENT;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly int HORIZON_STEP;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly int FOG_COLOR;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string KW_STARS;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string KW_STARS_LAYER_0;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string KW_STARS_LAYER_1;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string KW_STARS_LAYER_2;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly int STARS_START;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static readonly int STARS_END;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly int STARS_OPACITY;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static readonly int STARS_COLOR_0;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly int STARS_COLOR_1;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static readonly int STARS_COLOR_2;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly int STARS_DENSITY_0;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static readonly int STARS_DENSITY_1;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly int STARS_DENSITY_2;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static readonly int STARS_SIZE_0;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly int STARS_SIZE_1;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static readonly int STARS_SIZE_2;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly int STARS_GLOW_0;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public static readonly int STARS_GLOW_1;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly int STARS_GLOW_2;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public static readonly int STARS_TWINKLE_0;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly int STARS_TWINKLE_1;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public static readonly int STARS_TWINKLE_2;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly string KW_STARS_BAKED;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly int STARS_CUBEMAP;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public static readonly int STARS_TWINKLE_MAP;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly string KW_SUN;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly string KW_SUN_USE_TEXTURE;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly int SUN_TEX;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public static readonly int SUN_COLOR;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly int SUN_SIZE;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public static readonly int SUN_SOFT_EDGE;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly int SUN_GLOW;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public static readonly int SUN_DIRECTION;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly int SUN_TRANSFORM_MATRIX;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public static readonly int SUN_LIGHT_COLOR;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly int SUN_LIGHT_INTENSITY;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly string KW_SUN_BAKED;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly int SUN_CUBEMAP;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public static readonly int SUN_ROTATION_MATRIX;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly string KW_MOON;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly string KW_MOON_USE_TEXTURE;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static readonly int MOON_TEX;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public static readonly int MOON_COLOR;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static readonly int MOON_SIZE;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public static readonly int MOON_SOFT_EDGE;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly int MOON_GLOW;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public static readonly int MOON_DIRECTION;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public static readonly int MOON_TRANSFORM_MATRIX;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public static readonly int MOON_LIGHT_COLOR;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public static readonly int MOON_LIGHT_INTENSITY;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public static readonly string KW_MOON_BAKED;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static readonly int MOON_CUBEMAP;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public static readonly int MOON_ROTATION_MATRIX;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public static readonly string KW_HORIZON_CLOUD;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public static readonly int HORIZON_CLOUD_COLOR;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public static readonly int HORIZON_CLOUD_START;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public static readonly int HORIZON_CLOUD_END;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public static readonly int HORIZON_CLOUD_SIZE;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public static readonly int HORIZON_CLOUD_STEP;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public static readonly int HORIZON_CLOUD_ANIMATION_SPEED;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public static readonly string KW_OVERHEAD_CLOUD;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public static readonly int OVERHEAD_CLOUD_COLOR;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public static readonly int OVERHEAD_CLOUD_ALTITUDE;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public static readonly int OVERHEAD_CLOUD_SIZE;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public static readonly int OVERHEAD_CLOUD_STEP;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public static readonly int OVERHEAD_CLOUD_ANIMATION_SPEED;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public static readonly int OVERHEAD_CLOUD_FLOW_X;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public static readonly int OVERHEAD_CLOUD_FLOW_Z;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public static readonly int OVERHEAD_CLOUD_REMAP_MIN;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public static readonly int OVERHEAD_CLOUD_REMAP_MAX;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public static readonly int OVERHEAD_CLOUD_SHADOW_CLIP_MASK;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public static readonly string KW_DETAIL_OVERLAY;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public static readonly string KW_DETAIL_OVERLAY_ROTATION;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public static readonly int DETAIL_OVERLAY_COLOR;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public static readonly int DETAIL_OVERLAY_CUBEMAP;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public static readonly int DETAIL_OVERLAY_LAYER;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public static readonly int DETAIL_OVERLAY_ROTATION_SPEED;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public static readonly string KW_ALLOW_STEP_EFFECT;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private static Material activeMaterial;

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xD83BF8", Offset = "0xD83BF8", VA = "0xD83BF8")]
		public static void SetActiveMaterial(Material mat)
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xD83C5C", Offset = "0xD83C5C", VA = "0xD83C5C")]
		public static void GetColor(int prop, ref Color value)
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xD83E10", Offset = "0xD83E10", VA = "0xD83E10")]
		public static void GetFloat(int prop, ref float value)
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xD83FC0", Offset = "0xD83FC0", VA = "0xD83FC0")]
		public static void GetVector(int prop, ref Vector4 value)
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xD84174", Offset = "0xD84174", VA = "0xD84174")]
		public static void GetTexture(int prop, ref Texture value)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xD84330", Offset = "0xD84330", VA = "0xD84330")]
		public static void GetKeywordEnabled(string kw, ref bool value)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xD844A4", Offset = "0xD844A4", VA = "0xD844A4")]
		public static void SetColor(int prop, Color value)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xD84674", Offset = "0xD84674", VA = "0xD84674")]
		public static void SetFloat(int prop, float value)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xD8481C", Offset = "0xD8481C", VA = "0xD8481C")]
		public static void SetVector(int prop, Vector4 value)
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xD849EC", Offset = "0xD849EC", VA = "0xD849EC")]
		public static void SetTexture(int prop, Texture value)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xD84B94", Offset = "0xD84B94", VA = "0xD84B94")]
		public static void SetMatrix(int prop, Matrix4x4 value)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xD84D5C", Offset = "0xD84D5C", VA = "0xD84D5C")]
		public static void SetKeywordEnable(string kw, bool enable)
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xD84EF8", Offset = "0xD84EF8", VA = "0xD84EF8")]
		public static void SetOverrideTag(string tag, string value)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xD84F74", Offset = "0xD84F74", VA = "0xD84F74")]
		public static void SetRenderQueue(int queue)
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xD84FE0", Offset = "0xD84FE0", VA = "0xD84FE0")]
		public static void SetRenderQueue(RenderQueue queue)
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xD8504C", Offset = "0xD8504C", VA = "0xD8504C")]
		public static void SetSourceBlend(BlendMode mode)
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xD850D0", Offset = "0xD850D0", VA = "0xD850D0")]
		public static void SetDestBlend(BlendMode mode)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xD85154", Offset = "0xD85154", VA = "0xD85154")]
		public static void SetZWrite(bool value)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xD851D8", Offset = "0xD851D8", VA = "0xD851D8")]
		public static void SetBlend(bool value)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xD8525C", Offset = "0xD8525C", VA = "0xD8525C")]
		public static void SetShader(Shader shader)
		{
		}
	}
	[Token(Token = "0x2000217")]
	[ExecuteInEditMode]
	public class JSky : MonoBehaviour
	{
		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3 DefaultSunDirection;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly Vector3 DefaultMoonDirection;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private JSkyProfile profile;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Light sunLightSource;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Light moonLightSource;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Mesh sphereMesh;

		[Token(Token = "0x17000091")]
		public JSkyProfile Profile
		{
			[Token(Token = "0x6000C99")]
			[Address(RVA = "0xD861B0", Offset = "0xD861B0", VA = "0xD861B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0xD861B8", Offset = "0xD861B8", VA = "0xD861B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public Light SunLightSource
		{
			[Token(Token = "0x6000C9B")]
			[Address(RVA = "0xD861C0", Offset = "0xD861C0", VA = "0xD861C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0xD861C8", Offset = "0xD861C8", VA = "0xD861C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public Light MoonLightSource
		{
			[Token(Token = "0x6000C9D")]
			[Address(RVA = "0xD86270", Offset = "0xD86270", VA = "0xD86270")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0xD86278", Offset = "0xD86278", VA = "0xD86278")]
			set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public JDayNightCycle DNC
		{
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0xD86320", Offset = "0xD86320", VA = "0xD86320")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0xD86328", Offset = "0xD86328", VA = "0xD86328")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000095")]
		private static Mesh SphereMesh
		{
			[Token(Token = "0x6000CA1")]
			[Address(RVA = "0xD86330", Offset = "0xD86330", VA = "0xD86330")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xD86440", Offset = "0xD86440", VA = "0xD86440")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xD865B4", Offset = "0xD865B4", VA = "0xD865B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xD8673C", Offset = "0xD8673C", VA = "0xD8673C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xD8675C", Offset = "0xD8675C", VA = "0xD8675C")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xD86848", Offset = "0xD86848", VA = "0xD86848")]
		private void OnCameraPreCull(Camera cam)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xD877B8", Offset = "0xD877B8", VA = "0xD877B8")]
		private void OnBeginCameraRenderingSRP(ScriptableRenderContext context, Camera cam)
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xD86878", Offset = "0xD86878", VA = "0xD86878")]
		private void SetupSkyMaterial()
		{
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xD872E0", Offset = "0xD872E0", VA = "0xD872E0")]
		private void SyncFog()
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xD87468", Offset = "0xD87468", VA = "0xD87468")]
		private void RenderShadow(Camera cam)
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xD879A0", Offset = "0xD879A0", VA = "0xD879A0")]
		public JSky()
		{
		}
	}
	[Token(Token = "0x2000218")]
	[CreateAssetMenu(menuName = "Jupiter/Sky Profile")]
	public class JSkyProfile : ScriptableObject
	{
		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Color skyColor;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Color horizonColor;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Color groundColor;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float horizonThickness;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float horizonExponent;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private int horizonStep;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private JFogSyncOption fogSyncOption;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Color fogColor;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private bool enableStars;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float starsStartPosition;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float starsEndPosition;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float starsOpacity;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private int starsLayerCount;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Color starsColor0;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		private Color starsColor1;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		private Color starsColor2;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		private float starsDensity0;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private float starsDensity1;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		private float starsDensity2;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private float starsSize0;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		private float starsSize1;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private float starsSize2;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float starsGlow0;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float starsGlow1;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private float starsGlow2;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float starsTwinkle0;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private float starsTwinkle1;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private float starsTwinkle2;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private bool useBakedStars;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private Cubemap starsCubemap;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private Texture2D starsTwinkleMap;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private bool enableSun;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private Texture2D sunTexture;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private Color sunColor;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private float sunSize;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		private float sunSoftEdge;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private float sunGlow;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private bool useBakedSun;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private Cubemap sunCubemap;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private Color sunLightColor;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private float sunLightIntensity;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		private bool enableMoon;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private Texture2D moonTexture;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private Color moonColor;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private float moonSize;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[SerializeField]
		private float moonSoftEdge;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private float moonGlow;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[SerializeField]
		private bool useBakedMoon;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private Cubemap moonCubemap;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private Color moonLightColor;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private float moonLightIntensity;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private Texture2D customCloudTexture;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		private bool enableHorizonCloud;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[SerializeField]
		private Color horizonCloudColor;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		[SerializeField]
		private float horizonCloudStartPosition;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private float horizonCloudEndPosition;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[SerializeField]
		private float horizonCloudSize;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private int horizonCloudStep;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		[SerializeField]
		private float horizonCloudAnimationSpeed;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[SerializeField]
		private bool enableOverheadCloud;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[SerializeField]
		private Color overheadCloudColor;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[SerializeField]
		private float overheadCloudAltitude;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[SerializeField]
		private float overheadCloudSize;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		[SerializeField]
		private int overheadCloudStep;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SerializeField]
		private float overheadCloudAnimationSpeed;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		[SerializeField]
		private float overheadCloudFlowDirectionX;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[SerializeField]
		private float overheadCloudFlowDirectionZ;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		[SerializeField]
		private float overheadCloudRemapMin;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[SerializeField]
		private float overheadCloudRemapMax;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[SerializeField]
		private bool overheadCloudCastShadow;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[SerializeField]
		private float overheadCloudShadowClipMask;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		[SerializeField]
		private bool enableDetailOverlay;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		private Color detailOverlayTintColor;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[SerializeField]
		private Cubemap detailOverlayCubeMap;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[SerializeField]
		private JDetailOverlayLayer detailOverlayLayer;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		[SerializeField]
		private float detailOverlayRotationSpeed;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[SerializeField]
		private bool allowStepEffect;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		[SerializeField]
		private Material material;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		[SerializeField]
		private Material shadowMaterial;

		[Token(Token = "0x17000096")]
		[JAnimatable("Sky/Sky Color", JCurveOrGradient.Gradient)]
		public Color SkyColor
		{
			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0xD87A4C", Offset = "0xD87A4C", VA = "0xD87A4C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000CAE")]
			[Address(RVA = "0xD87A58", Offset = "0xD87A58", VA = "0xD87A58")]
			set
			{
			}
		}

		[Token(Token = "0x17000097")]
		[JAnimatable("Sky/Horizon Color", JCurveOrGradient.Gradient)]
		public Color HorizonColor
		{
			[Token(Token = "0x6000CAF")]
			[Address(RVA = "0xD87A64", Offset = "0xD87A64", VA = "0xD87A64")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0xD87A70", Offset = "0xD87A70", VA = "0xD87A70")]
			set
			{
			}
		}

		[Token(Token = "0x17000098")]
		[JAnimatable("Sky/Ground Color", JCurveOrGradient.Gradient)]
		public Color GroundColor
		{
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0xD87A7C", Offset = "0xD87A7C", VA = "0xD87A7C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0xD87A88", Offset = "0xD87A88", VA = "0xD87A88")]
			set
			{
			}
		}

		[Token(Token = "0x17000099")]
		[JAnimatable("Sky/Horizon Thickness", JCurveOrGradient.Curve)]
		public float HorizonThickness
		{
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0xD87A94", Offset = "0xD87A94", VA = "0xD87A94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0xD87A9C", Offset = "0xD87A9C", VA = "0xD87A9C")]
			set
			{
			}
		}

		[Token(Token = "0x1700009A")]
		[JAnimatable("Sky/Horizon Exponent", JCurveOrGradient.Curve)]
		public float HorizonExponent
		{
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0xD87AB8", Offset = "0xD87AB8", VA = "0xD87AB8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0xD87AC0", Offset = "0xD87AC0", VA = "0xD87AC0")]
			set
			{
			}
		}

		[Token(Token = "0x1700009B")]
		public int HorizonStep
		{
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0xD87AD4", Offset = "0xD87AD4", VA = "0xD87AD4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0xD87ADC", Offset = "0xD87ADC", VA = "0xD87ADC")]
			set
			{
			}
		}

		[Token(Token = "0x1700009C")]
		public JFogSyncOption FogSyncOption
		{
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0xD87AEC", Offset = "0xD87AEC", VA = "0xD87AEC")]
			get
			{
				return default(JFogSyncOption);
			}
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0xD87AF4", Offset = "0xD87AF4", VA = "0xD87AF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700009D")]
		[JAnimatable("Sky/Fog Color", JCurveOrGradient.Gradient)]
		public Color FogColor
		{
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0xD87AFC", Offset = "0xD87AFC", VA = "0xD87AFC")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0xD87B08", Offset = "0xD87B08", VA = "0xD87B08")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public bool EnableStars
		{
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0xD87B14", Offset = "0xD87B14", VA = "0xD87B14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0xD87B1C", Offset = "0xD87B1C", VA = "0xD87B1C")]
			set
			{
			}
		}

		[Token(Token = "0x1700009F")]
		[JAnimatable("Stars/Start Position", JCurveOrGradient.Curve)]
		public float StarsStartPosition
		{
			[Token(Token = "0x6000CBF")]
			[Address(RVA = "0xD87B28", Offset = "0xD87B28", VA = "0xD87B28")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0xD87B30", Offset = "0xD87B30", VA = "0xD87B30")]
			set
			{
			}
		}

		[Token(Token = "0x170000A0")]
		[JAnimatable("Stars/End Position", JCurveOrGradient.Curve)]
		public float StarsEndPosition
		{
			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0xD87B50", Offset = "0xD87B50", VA = "0xD87B50")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CC2")]
			[Address(RVA = "0xD87B58", Offset = "0xD87B58", VA = "0xD87B58")]
			set
			{
			}
		}

		[Token(Token = "0x170000A1")]
		[JAnimatable("Stars/Opacity", JCurveOrGradient.Curve)]
		public float StarsOpacity
		{
			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0xD87B78", Offset = "0xD87B78", VA = "0xD87B78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CC4")]
			[Address(RVA = "0xD87B80", Offset = "0xD87B80", VA = "0xD87B80")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public int StarsLayerCount
		{
			[Token(Token = "0x6000CC5")]
			[Address(RVA = "0xD87B9C", Offset = "0xD87B9C", VA = "0xD87B9C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CC6")]
			[Address(RVA = "0xD87BA4", Offset = "0xD87BA4", VA = "0xD87BA4")]
			set
			{
			}
		}

		[Token(Token = "0x170000A3")]
		[JAnimatable("Stars/Color 0", JCurveOrGradient.Gradient)]
		public Color StarsColor0
		{
			[Token(Token = "0x6000CC7")]
			[Address(RVA = "0xD87BC0", Offset = "0xD87BC0", VA = "0xD87BC0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000CC8")]
			[Address(RVA = "0xD87BCC", Offset = "0xD87BCC", VA = "0xD87BCC")]
			set
			{
			}
		}

		[Token(Token = "0x170000A4")]
		[JAnimatable("Stars/Color 1", JCurveOrGradient.Gradient)]
		public Color StarsColor1
		{
			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0xD87BD8", Offset = "0xD87BD8", VA = "0xD87BD8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000CCA")]
			[Address(RVA = "0xD87BE4", Offset = "0xD87BE4", VA = "0xD87BE4")]
			set
			{
			}
		}

		[Token(Token = "0x170000A5")]
		[JAnimatable("Stars/Color 2", JCurveOrGradient.Gradient)]
		public Color StarsColor2
		{
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0xD87BF0", Offset = "0xD87BF0", VA = "0xD87BF0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0xD87BFC", Offset = "0xD87BFC", VA = "0xD87BFC")]
			set
			{
			}
		}

		[Token(Token = "0x170000A6")]
		[JAnimatable("Stars/Density 0", JCurveOrGradient.Curve)]
		public float StarsDensity0
		{
			[Token(Token = "0x6000CCD")]
			[Address(RVA = "0xD87C08", Offset = "0xD87C08", VA = "0xD87C08")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CCE")]
			[Address(RVA = "0xD87C10", Offset = "0xD87C10", VA = "0xD87C10")]
			set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		[JAnimatable("Stars/Density 1", JCurveOrGradient.Curve)]
		public float StarsDensity1
		{
			[Token(Token = "0x6000CCF")]
			[Address(RVA = "0xD87C2C", Offset = "0xD87C2C", VA = "0xD87C2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CD0")]
			[Address(RVA = "0xD87C34", Offset = "0xD87C34", VA = "0xD87C34")]
			set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		[JAnimatable("Stars/Density 2", JCurveOrGradient.Curve)]
		public float StarsDensity2
		{
			[Token(Token = "0x6000CD1")]
			[Address(RVA = "0xD87C50", Offset = "0xD87C50", VA = "0xD87C50")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CD2")]
			[Address(RVA = "0xD87C58", Offset = "0xD87C58", VA = "0xD87C58")]
			set
			{
			}
		}

		[Token(Token = "0x170000A9")]
		[JAnimatable("Stars/Size 0", JCurveOrGradient.Curve)]
		public float StarsSize0
		{
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0xD87C74", Offset = "0xD87C74", VA = "0xD87C74")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CD4")]
			[Address(RVA = "0xD87C7C", Offset = "0xD87C7C", VA = "0xD87C7C")]
			set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		[JAnimatable("Stars/Size 1", JCurveOrGradient.Curve)]
		public float StarsSize1
		{
			[Token(Token = "0x6000CD5")]
			[Address(RVA = "0xD87C90", Offset = "0xD87C90", VA = "0xD87C90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0xD87C98", Offset = "0xD87C98", VA = "0xD87C98")]
			set
			{
			}
		}

		[Token(Token = "0x170000AB")]
		[JAnimatable("Stars/Size 2", JCurveOrGradient.Curve)]
		public float StarsSize2
		{
			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0xD87CAC", Offset = "0xD87CAC", VA = "0xD87CAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0xD87CB4", Offset = "0xD87CB4", VA = "0xD87CB4")]
			set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		[JAnimatable("Stars/Glow 0", JCurveOrGradient.Curve)]
		public float StarsGlow0
		{
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0xD87CC8", Offset = "0xD87CC8", VA = "0xD87CC8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CDA")]
			[Address(RVA = "0xD87CD0", Offset = "0xD87CD0", VA = "0xD87CD0")]
			set
			{
			}
		}

		[Token(Token = "0x170000AD")]
		[JAnimatable("Stars/Glow 1", JCurveOrGradient.Curve)]
		public float StarsGlow1
		{
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0xD87CE4", Offset = "0xD87CE4", VA = "0xD87CE4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0xD87CEC", Offset = "0xD87CEC", VA = "0xD87CEC")]
			set
			{
			}
		}

		[Token(Token = "0x170000AE")]
		[JAnimatable("Stars/Glow 2", JCurveOrGradient.Curve)]
		public float StarsGlow2
		{
			[Token(Token = "0x6000CDD")]
			[Address(RVA = "0xD87D00", Offset = "0xD87D00", VA = "0xD87D00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0xD87D08", Offset = "0xD87D08", VA = "0xD87D08")]
			set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		[JAnimatable("Stars/Twinkle 0", JCurveOrGradient.Curve)]
		public float StarsTwinkle0
		{
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0xD87D1C", Offset = "0xD87D1C", VA = "0xD87D1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0xD87D24", Offset = "0xD87D24", VA = "0xD87D24")]
			set
			{
			}
		}

		[Token(Token = "0x170000B0")]
		[JAnimatable("Stars/Twinkle 1", JCurveOrGradient.Curve)]
		public float StarsTwinkle1
		{
			[Token(Token = "0x6000CE1")]
			[Address(RVA = "0xD87D2C", Offset = "0xD87D2C", VA = "0xD87D2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CE2")]
			[Address(RVA = "0xD87D34", Offset = "0xD87D34", VA = "0xD87D34")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		[JAnimatable("Stars/Twinkle 2", JCurveOrGradient.Curve)]
		public float StarsTwinkle2
		{
			[Token(Token = "0x6000CE3")]
			[Address(RVA = "0xD87D3C", Offset = "0xD87D3C", VA = "0xD87D3C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CE4")]
			[Address(RVA = "0xD87D44", Offset = "0xD87D44", VA = "0xD87D44")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public bool UseBakedStars
		{
			[Token(Token = "0x6000CE5")]
			[Address(RVA = "0xD87D4C", Offset = "0xD87D4C", VA = "0xD87D4C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CE6")]
			[Address(RVA = "0xD87D54", Offset = "0xD87D54", VA = "0xD87D54")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public Cubemap StarsCubemap
		{
			[Token(Token = "0x6000CE7")]
			[Address(RVA = "0xD87D60", Offset = "0xD87D60", VA = "0xD87D60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE8")]
			[Address(RVA = "0xD87D68", Offset = "0xD87D68", VA = "0xD87D68")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public Texture2D StarsTwinkleMap
		{
			[Token(Token = "0x6000CE9")]
			[Address(RVA = "0xD87D70", Offset = "0xD87D70", VA = "0xD87D70")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CEA")]
			[Address(RVA = "0xD87D78", Offset = "0xD87D78", VA = "0xD87D78")]
			set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		public bool EnableSun
		{
			[Token(Token = "0x6000CEB")]
			[Address(RVA = "0xD87D80", Offset = "0xD87D80", VA = "0xD87D80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CEC")]
			[Address(RVA = "0xD87D88", Offset = "0xD87D88", VA = "0xD87D88")]
			set
			{
			}
		}

		[Token(Token = "0x170000B6")]
		public Texture2D SunTexture
		{
			[Token(Token = "0x6000CED")]
			[Address(RVA = "0xD87D94", Offset = "0xD87D94", VA = "0xD87D94")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CEE")]
			[Address(RVA = "0xD87D9C", Offset = "0xD87D9C", VA = "0xD87D9C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B7")]
		[JAnimatable("Sun/Color", JCurveOrGradient.Gradient)]
		public Color SunColor
		{
			[Token(Token = "0x6000CEF")]
			[Address(RVA = "0xD87DA4", Offset = "0xD87DA4", VA = "0xD87DA4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000CF0")]
			[Address(RVA = "0xD87DB8", Offset = "0xD87DB8", VA = "0xD87DB8")]
			set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		[JAnimatable("Sun/Size", JCurveOrGradient.Curve)]
		public float SunSize
		{
			[Token(Token = "0x6000CF1")]
			[Address(RVA = "0xD87DCC", Offset = "0xD87DCC", VA = "0xD87DCC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0xD87DD4", Offset = "0xD87DD4", VA = "0xD87DD4")]
			set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		[JAnimatable("Sun/Soft Edge", JCurveOrGradient.Curve)]
		public float SunSoftEdge
		{
			[Token(Token = "0x6000CF3")]
			[Address(RVA = "0xD87DF0", Offset = "0xD87DF0", VA = "0xD87DF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0xD87DF8", Offset = "0xD87DF8", VA = "0xD87DF8")]
			set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		[JAnimatable("Sun/Glow", JCurveOrGradient.Curve)]
		public float SunGlow
		{
			[Token(Token = "0x6000CF5")]
			[Address(RVA = "0xD87E14", Offset = "0xD87E14", VA = "0xD87E14")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CF6")]
			[Address(RVA = "0xD87E1C", Offset = "0xD87E1C", VA = "0xD87E1C")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public bool UseBakedSun
		{
			[Token(Token = "0x6000CF7")]
			[Address(RVA = "0xD87E38", Offset = "0xD87E38", VA = "0xD87E38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CF8")]
			[Address(RVA = "0xD87E40", Offset = "0xD87E40", VA = "0xD87E40")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public Cubemap SunCubemap
		{
			[Token(Token = "0x6000CF9")]
			[Address(RVA = "0xD87E4C", Offset = "0xD87E4C", VA = "0xD87E4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0xD87E54", Offset = "0xD87E54", VA = "0xD87E54")]
			set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		[JAnimatable("Sun/Light Color", JCurveOrGradient.Gradient)]
		public Color SunLightColor
		{
			[Token(Token = "0x6000CFB")]
			[Address(RVA = "0xD87E64", Offset = "0xD87E64", VA = "0xD87E64")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000CFC")]
			[Address(RVA = "0xD87E78", Offset = "0xD87E78", VA = "0xD87E78")]
			set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		[JAnimatable("Sun/Light Intensity", JCurveOrGradient.Curve)]
		public float SunLightIntensity
		{
			[Token(Token = "0x6000CFD")]
			[Address(RVA = "0xD87E8C", Offset = "0xD87E8C", VA = "0xD87E8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CFE")]
			[Address(RVA = "0xD87E94", Offset = "0xD87E94", VA = "0xD87E94")]
			set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public bool EnableMoon
		{
			[Token(Token = "0x6000CFF")]
			[Address(RVA = "0xD87E9C", Offset = "0xD87E9C", VA = "0xD87E9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D00")]
			[Address(RVA = "0xD87EA4", Offset = "0xD87EA4", VA = "0xD87EA4")]
			set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public Texture2D MoonTexture
		{
			[Token(Token = "0x6000D01")]
			[Address(RVA = "0xD87EB0", Offset = "0xD87EB0", VA = "0xD87EB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D02")]
			[Address(RVA = "0xD87EB8", Offset = "0xD87EB8", VA = "0xD87EB8")]
			set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		[JAnimatable("Moon/Color", JCurveOrGradient.Gradient)]
		public Color MoonColor
		{
			[Token(Token = "0x6000D03")]
			[Address(RVA = "0xD87EC8", Offset = "0xD87EC8", VA = "0xD87EC8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000D04")]
			[Address(RVA = "0xD87EDC", Offset = "0xD87EDC", VA = "0xD87EDC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		[JAnimatable("Moon/Size", JCurveOrGradient.Curve)]
		public float MoonSize
		{
			[Token(Token = "0x6000D05")]
			[Address(RVA = "0xD87EF0", Offset = "0xD87EF0", VA = "0xD87EF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0xD87EF8", Offset = "0xD87EF8", VA = "0xD87EF8")]
			set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		[JAnimatable("Moon/Soft Edge", JCurveOrGradient.Curve)]
		public float MoonSoftEdge
		{
			[Token(Token = "0x6000D07")]
			[Address(RVA = "0xD87F14", Offset = "0xD87F14", VA = "0xD87F14")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D08")]
			[Address(RVA = "0xD87F1C", Offset = "0xD87F1C", VA = "0xD87F1C")]
			set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		[JAnimatable("Moon/Glow", JCurveOrGradient.Curve)]
		public float MoonGlow
		{
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0xD87F38", Offset = "0xD87F38", VA = "0xD87F38")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0xD87F40", Offset = "0xD87F40", VA = "0xD87F40")]
			set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public bool UseBakedMoon
		{
			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0xD87F5C", Offset = "0xD87F5C", VA = "0xD87F5C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D0C")]
			[Address(RVA = "0xD87F64", Offset = "0xD87F64", VA = "0xD87F64")]
			set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public Cubemap MoonCubemap
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0xD87F70", Offset = "0xD87F70", VA = "0xD87F70")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0xD87F78", Offset = "0xD87F78", VA = "0xD87F78")]
			set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		[JAnimatable("Moon/Light Color", JCurveOrGradient.Gradient)]
		public Color MoonLightColor
		{
			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0xD87F88", Offset = "0xD87F88", VA = "0xD87F88")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0xD87F9C", Offset = "0xD87F9C", VA = "0xD87F9C")]
			set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		[JAnimatable("Moon/Light Intensity", JCurveOrGradient.Curve)]
		public float MoonLightIntensity
		{
			[Token(Token = "0x6000D11")]
			[Address(RVA = "0xD87FB0", Offset = "0xD87FB0", VA = "0xD87FB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0xD87FB8", Offset = "0xD87FB8", VA = "0xD87FB8")]
			set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		public Texture2D CustomCloudTexture
		{
			[Token(Token = "0x6000D13")]
			[Address(RVA = "0xD87FC0", Offset = "0xD87FC0", VA = "0xD87FC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D14")]
			[Address(RVA = "0xD87FC8", Offset = "0xD87FC8", VA = "0xD87FC8")]
			set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public bool EnableHorizonCloud
		{
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0xD87FD8", Offset = "0xD87FD8", VA = "0xD87FD8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0xD87FE0", Offset = "0xD87FE0", VA = "0xD87FE0")]
			set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		[JAnimatable("Horizon Cloud/Color", JCurveOrGradient.Gradient)]
		public Color HorizonCloudColor
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0xD87FEC", Offset = "0xD87FEC", VA = "0xD87FEC")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0xD88000", Offset = "0xD88000", VA = "0xD88000")]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		[JAnimatable("Horizon Cloud/Start Position", JCurveOrGradient.Curve)]
		public float HorizonCloudStartPosition
		{
			[Token(Token = "0x6000D19")]
			[Address(RVA = "0xD88014", Offset = "0xD88014", VA = "0xD88014")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D1A")]
			[Address(RVA = "0xD8801C", Offset = "0xD8801C", VA = "0xD8801C")]
			set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		[JAnimatable("Horizon Cloud/End Position", JCurveOrGradient.Curve)]
		public float HorizonCloudEndPosition
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0xD88030", Offset = "0xD88030", VA = "0xD88030")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0xD88038", Offset = "0xD88038", VA = "0xD88038")]
			set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		[JAnimatable("Horizon Cloud/Size", JCurveOrGradient.Curve)]
		public float HorizonCloudSize
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xD8804C", Offset = "0xD8804C", VA = "0xD8804C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0xD88054", Offset = "0xD88054", VA = "0xD88054")]
			set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		public int HorizonCloudStep
		{
			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0xD88064", Offset = "0xD88064", VA = "0xD88064")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D20")]
			[Address(RVA = "0xD8806C", Offset = "0xD8806C", VA = "0xD8806C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		[JAnimatable("Horizon Cloud/Animation Speed", JCurveOrGradient.Curve)]
		public float HorizonCloudAnimationSpeed
		{
			[Token(Token = "0x6000D21")]
			[Address(RVA = "0xD8807C", Offset = "0xD8807C", VA = "0xD8807C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xD88084", Offset = "0xD88084", VA = "0xD88084")]
			set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public bool EnableOverheadCloud
		{
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0xD8808C", Offset = "0xD8808C", VA = "0xD8808C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0xD88094", Offset = "0xD88094", VA = "0xD88094")]
			set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		[JAnimatable("Overhead Cloud/Color", JCurveOrGradient.Gradient)]
		public Color OverheadCloudColor
		{
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0xD880A0", Offset = "0xD880A0", VA = "0xD880A0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000D26")]
			[Address(RVA = "0xD880B4", Offset = "0xD880B4", VA = "0xD880B4")]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		[JAnimatable("Overhead Cloud/Altitude", JCurveOrGradient.Curve)]
		public float OverheadCloudAltitude
		{
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0xD880C8", Offset = "0xD880C8", VA = "0xD880C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D28")]
			[Address(RVA = "0xD880D0", Offset = "0xD880D0", VA = "0xD880D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		[JAnimatable("Overhead Cloud/Size", JCurveOrGradient.Curve)]
		public float OverheadCloudSize
		{
			[Token(Token = "0x6000D29")]
			[Address(RVA = "0xD880E0", Offset = "0xD880E0", VA = "0xD880E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D2A")]
			[Address(RVA = "0xD880E8", Offset = "0xD880E8", VA = "0xD880E8")]
			set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		public int OverheadCloudStep
		{
			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0xD880F8", Offset = "0xD880F8", VA = "0xD880F8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D2C")]
			[Address(RVA = "0xD88100", Offset = "0xD88100", VA = "0xD88100")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		[JAnimatable("Overhead Cloud/Animation Speed", JCurveOrGradient.Curve)]
		public float OverheadCloudAnimationSpeed
		{
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0xD88110", Offset = "0xD88110", VA = "0xD88110")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0xD88118", Offset = "0xD88118", VA = "0xD88118")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		[JAnimatable("Overhead Cloud/Flow X", JCurveOrGradient.Curve)]
		public float OverheadCloudFlowDirectionX
		{
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0xD88120", Offset = "0xD88120", VA = "0xD88120")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D30")]
			[Address(RVA = "0xD88128", Offset = "0xD88128", VA = "0xD88128")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		[JAnimatable("Overhead Cloud/Flow Z", JCurveOrGradient.Curve)]
		public float OverheadCloudFlowDirectionZ
		{
			[Token(Token = "0x6000D31")]
			[Address(RVA = "0xD88144", Offset = "0xD88144", VA = "0xD88144")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D32")]
			[Address(RVA = "0xD8814C", Offset = "0xD8814C", VA = "0xD8814C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		[JAnimatable("Overhead Cloud/Remap Min", JCurveOrGradient.Curve)]
		public float OverheadCloudRemapMin
		{
			[Token(Token = "0x6000D33")]
			[Address(RVA = "0xD88168", Offset = "0xD88168", VA = "0xD88168")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D34")]
			[Address(RVA = "0xD88170", Offset = "0xD88170", VA = "0xD88170")]
			set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		[JAnimatable("Overhead Cloud/Remap Max", JCurveOrGradient.Curve)]
		public float OverheadCloudRemapMax
		{
			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xD88178", Offset = "0xD88178", VA = "0xD88178")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D36")]
			[Address(RVA = "0xD88180", Offset = "0xD88180", VA = "0xD88180")]
			set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		public bool OverheadCloudCastShadow
		{
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0xD88188", Offset = "0xD88188", VA = "0xD88188")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0xD88190", Offset = "0xD88190", VA = "0xD88190")]
			set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public float OverheadCloudShadowClipMask
		{
			[Token(Token = "0x6000D39")]
			[Address(RVA = "0xD8819C", Offset = "0xD8819C", VA = "0xD8819C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D3A")]
			[Address(RVA = "0xD881A4", Offset = "0xD881A4", VA = "0xD881A4")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		public bool EnableDetailOverlay
		{
			[Token(Token = "0x6000D3B")]
			[Address(RVA = "0xD881AC", Offset = "0xD881AC", VA = "0xD881AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D3C")]
			[Address(RVA = "0xD881B4", Offset = "0xD881B4", VA = "0xD881B4")]
			set
			{
			}
		}

		[Token(Token = "0x170000DE")]
		[JAnimatable("Detail Overlay/Color", JCurveOrGradient.Gradient)]
		public Color DetailOverlayTintColor
		{
			[Token(Token = "0x6000D3D")]
			[Address(RVA = "0xD881C0", Offset = "0xD881C0", VA = "0xD881C0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0xD881D4", Offset = "0xD881D4", VA = "0xD881D4")]
			set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		public Cubemap DetailOverlayCubeMap
		{
			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0xD881E8", Offset = "0xD881E8", VA = "0xD881E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D40")]
			[Address(RVA = "0xD881F0", Offset = "0xD881F0", VA = "0xD881F0")]
			set
			{
			}
		}

		[Token(Token = "0x170000E0")]
		public JDetailOverlayLayer DetailOverlayLayer
		{
			[Token(Token = "0x6000D41")]
			[Address(RVA = "0xD88200", Offset = "0xD88200", VA = "0xD88200")]
			get
			{
				return default(JDetailOverlayLayer);
			}
			[Token(Token = "0x6000D42")]
			[Address(RVA = "0xD88208", Offset = "0xD88208", VA = "0xD88208")]
			set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		[JAnimatable("Detail Overlay/Rotation Speed", JCurveOrGradient.Curve)]
		public float DetailOverlayRotationSpeed
		{
			[Token(Token = "0x6000D43")]
			[Address(RVA = "0xD88210", Offset = "0xD88210", VA = "0xD88210")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D44")]
			[Address(RVA = "0xD88218", Offset = "0xD88218", VA = "0xD88218")]
			set
			{
			}
		}

		[Token(Token = "0x170000E2")]
		public bool AllowStepEffect
		{
			[Token(Token = "0x6000D45")]
			[Address(RVA = "0xD88220", Offset = "0xD88220", VA = "0xD88220")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D46")]
			[Address(RVA = "0xD88228", Offset = "0xD88228", VA = "0xD88228")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public Material Material
		{
			[Token(Token = "0x6000D47")]
			[Address(RVA = "0xD877C0", Offset = "0xD877C0", VA = "0xD877C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E4")]
		public Material ShadowMaterial
		{
			[Token(Token = "0x6000D48")]
			[Address(RVA = "0xD878B0", Offset = "0xD878B0", VA = "0xD878B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xD88234", Offset = "0xD88234", VA = "0xD88234")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xD886CC", Offset = "0xD886CC", VA = "0xD886CC")]
		public void UpdateMaterialProperties(Material mat)
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xD88F54", Offset = "0xD88F54", VA = "0xD88F54")]
		public void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xD882C0", Offset = "0xD882C0", VA = "0xD882C0")]
		public void CopyFrom(JSkyProfile p)
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xD88F84", Offset = "0xD88F84", VA = "0xD88F84")]
		public JSkyProfile()
		{
		}
	}
	[Token(Token = "0x2000219")]
	[AttributeUsage(AttributeTargets.Property)]
	public class JAnimatableAttribute : Attribute
	{
		[Token(Token = "0x170000E5")]
		public string DisplayName
		{
			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0xD89F8C", Offset = "0xD89F8C", VA = "0xD89F8C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0xD89F94", Offset = "0xD89F94", VA = "0xD89F94")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public JCurveOrGradient CurveOrGradient
		{
			[Token(Token = "0x6000D50")]
			[Address(RVA = "0xD89F9C", Offset = "0xD89F9C", VA = "0xD89F9C")]
			[CompilerGenerated]
			get
			{
				return default(JCurveOrGradient);
			}
			[Token(Token = "0x6000D51")]
			[Address(RVA = "0xD89FA4", Offset = "0xD89FA4", VA = "0xD89FA4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xD89FAC", Offset = "0xD89FAC", VA = "0xD89FAC")]
		public JAnimatableAttribute(string displayName, JCurveOrGradient curveOrGradient)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021A")]
	public class JAnimatedProperty
	{
		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string name;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string displayName;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private JCurveOrGradient curveOrGradient;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AnimationCurve curve;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Gradient gradient;

		[Token(Token = "0x170000E7")]
		public string Name
		{
			[Token(Token = "0x6000D53")]
			[Address(RVA = "0xD89FE8", Offset = "0xD89FE8", VA = "0xD89FE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D54")]
			[Address(RVA = "0xD8A04C", Offset = "0xD8A04C", VA = "0xD8A04C")]
			set
			{
			}
		}

		[Token(Token = "0x170000E8")]
		public string DisplayName
		{
			[Token(Token = "0x6000D55")]
			[Address(RVA = "0xD8A054", Offset = "0xD8A054", VA = "0xD8A054")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0xD8A0B8", Offset = "0xD8A0B8", VA = "0xD8A0B8")]
			set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public JCurveOrGradient CurveOrGradient
		{
			[Token(Token = "0x6000D57")]
			[Address(RVA = "0xD8A0C0", Offset = "0xD8A0C0", VA = "0xD8A0C0")]
			get
			{
				return default(JCurveOrGradient);
			}
			[Token(Token = "0x6000D58")]
			[Address(RVA = "0xD8A0C8", Offset = "0xD8A0C8", VA = "0xD8A0C8")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public AnimationCurve Curve
		{
			[Token(Token = "0x6000D59")]
			[Address(RVA = "0xD8A0D0", Offset = "0xD8A0D0", VA = "0xD8A0D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0xD8A110", Offset = "0xD8A110", VA = "0xD8A110")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		public Gradient Gradient
		{
			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0xD8A118", Offset = "0xD8A118", VA = "0xD8A118")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0xD8A2E4", Offset = "0xD8A2E4", VA = "0xD8A2E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xD8A2EC", Offset = "0xD8A2EC", VA = "0xD8A2EC")]
		public float EvaluateFloat(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xD8A318", Offset = "0xD8A318", VA = "0xD8A318")]
		public Color EvaluateColor(float t)
		{
			return default(Color);
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xD8A344", Offset = "0xD8A344", VA = "0xD8A344")]
		public static JAnimatedProperty Create(string name, string displayName, JCurveOrGradient curveOrGradient)
		{
			return null;
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xD8A3D8", Offset = "0xD8A3D8", VA = "0xD8A3D8")]
		public JAnimatedProperty()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public enum JCurveOrGradient
	{
		[Token(Token = "0x4000E7C")]
		Curve,
		[Token(Token = "0x4000E7D")]
		Gradient
	}
	[Token(Token = "0x200021C")]
	[ExecuteInEditMode]
	public class JDayNightCycle : MonoBehaviour
	{
		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private JDayNightCycleProfile profile;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private JSky sky;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool useSunPivot;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform sunOrbitPivot;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool useMoonPivot;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform moonOrbitPivot;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float startTime;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float timeIncrement;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool autoTimeIncrement;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float time;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool shouldUpdateEnvironmentReflection;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private int environmentReflectionResolution;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ReflectionProbeTimeSlicingMode environmentReflectionTimeSlicingMode;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ReflectionProbe environmentProbe;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Cubemap environmentReflection;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int probeRenderId;

		[Token(Token = "0x170000EC")]
		public JDayNightCycleProfile Profile
		{
			[Token(Token = "0x6000D61")]
			[Address(RVA = "0xD8A3E0", Offset = "0xD8A3E0", VA = "0xD8A3E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D62")]
			[Address(RVA = "0xD8A3E8", Offset = "0xD8A3E8", VA = "0xD8A3E8")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public JSky Sky
		{
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0xD8A3F0", Offset = "0xD8A3F0", VA = "0xD8A3F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0xD8A3F8", Offset = "0xD8A3F8", VA = "0xD8A3F8")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public bool UseSunPivot
		{
			[Token(Token = "0x6000D65")]
			[Address(RVA = "0xD8A400", Offset = "0xD8A400", VA = "0xD8A400")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D66")]
			[Address(RVA = "0xD8A408", Offset = "0xD8A408", VA = "0xD8A408")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public Transform SunOrbitPivot
		{
			[Token(Token = "0x6000D67")]
			[Address(RVA = "0xD8A414", Offset = "0xD8A414", VA = "0xD8A414")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D68")]
			[Address(RVA = "0xD8A41C", Offset = "0xD8A41C", VA = "0xD8A41C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		public bool UseMoonPivot
		{
			[Token(Token = "0x6000D69")]
			[Address(RVA = "0xD8A424", Offset = "0xD8A424", VA = "0xD8A424")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0xD8A42C", Offset = "0xD8A42C", VA = "0xD8A42C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public Transform MoonOrbitPivot
		{
			[Token(Token = "0x6000D6B")]
			[Address(RVA = "0xD8A438", Offset = "0xD8A438", VA = "0xD8A438")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0xD8A440", Offset = "0xD8A440", VA = "0xD8A440")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		public float StartTime
		{
			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0xD8A448", Offset = "0xD8A448", VA = "0xD8A448")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D6E")]
			[Address(RVA = "0xD8A450", Offset = "0xD8A450", VA = "0xD8A450")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public float TimeIncrement
		{
			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0xD8A46C", Offset = "0xD8A46C", VA = "0xD8A46C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D70")]
			[Address(RVA = "0xD8A474", Offset = "0xD8A474", VA = "0xD8A474")]
			set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public bool AutoTimeIncrement
		{
			[Token(Token = "0x6000D71")]
			[Address(RVA = "0xD8A484", Offset = "0xD8A484", VA = "0xD8A484")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D72")]
			[Address(RVA = "0xD8A48C", Offset = "0xD8A48C", VA = "0xD8A48C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F5")]
		public float Time
		{
			[Token(Token = "0x6000D73")]
			[Address(RVA = "0xD8A498", Offset = "0xD8A498", VA = "0xD8A498")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0xD8A4A4", Offset = "0xD8A4A4", VA = "0xD8A4A4")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public bool ShouldUpdateEnvironmentReflection
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0xD8A4C0", Offset = "0xD8A4C0", VA = "0xD8A4C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0xD8A4C8", Offset = "0xD8A4C8", VA = "0xD8A4C8")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public int EnvironmentReflectionResolution
		{
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0xD8A4D4", Offset = "0xD8A4D4", VA = "0xD8A4D4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0xD8A4DC", Offset = "0xD8A4DC", VA = "0xD8A4DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F8")]
		public ReflectionProbeTimeSlicingMode EnvironmentReflectionTimeSlicingMode
		{
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0xD8A6C0", Offset = "0xD8A6C0", VA = "0xD8A6C0")]
			get
			{
				return default(ReflectionProbeTimeSlicingMode);
			}
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0xD8A6C8", Offset = "0xD8A6C8", VA = "0xD8A6C8")]
			set
			{
			}
		}

		[Token(Token = "0x170000F9")]
		private ReflectionProbe EnvironmentProbe
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0xD8A6D0", Offset = "0xD8A6D0", VA = "0xD8A6D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FA")]
		private Cubemap EnvironmentReflection
		{
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0xD8A970", Offset = "0xD8A970", VA = "0xD8A970")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FB")]
		private float DeltaTime
		{
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0xD8AA50", Offset = "0xD8AA50", VA = "0xD8AA50")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xD8AA7C", Offset = "0xD8AA7C", VA = "0xD8AA7C")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xD8AAF0", Offset = "0xD8AAF0", VA = "0xD8AAF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xD8AC6C", Offset = "0xD8AC6C", VA = "0xD8AC6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xD8AF2C", Offset = "0xD8AF2C", VA = "0xD8AF2C")]
		private void OnCameraPreCull(Camera cam)
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xD8AF84", Offset = "0xD8AF84", VA = "0xD8AF84")]
		private void OnBeginFrameRenderingSRP(ScriptableRenderContext context, Camera[] cameras)
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xD8ADE8", Offset = "0xD8ADE8", VA = "0xD8ADE8")]
		private void CleanUp()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xD8AF54", Offset = "0xD8AF54", VA = "0xD8AF54")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xD8AFAC", Offset = "0xD8AFAC", VA = "0xD8AFAC")]
		private void AnimateSky()
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xD8B5E8", Offset = "0xD8B5E8", VA = "0xD8B5E8")]
		private void UpdateEnvironmentReflection()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xD8B914", Offset = "0xD8B914", VA = "0xD8B914")]
		public JDayNightCycle()
		{
		}
	}
	[Token(Token = "0x200021D")]
	[CreateAssetMenu(menuName = "Jupiter/Day Night Cycle Profile")]
	public class JDayNightCycleProfile : ScriptableObject
	{
		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, int> propertyRemap;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<JAnimatedProperty> animatedProperties;

		[Token(Token = "0x170000FC")]
		private static Dictionary<string, int> PropertyRemap
		{
			[Token(Token = "0x6000D88")]
			[Address(RVA = "0xD8B924", Offset = "0xD8B924", VA = "0xD8B924")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D89")]
			[Address(RVA = "0xD8BA0C", Offset = "0xD8BA0C", VA = "0xD8BA0C")]
			set
			{
			}
		}

		[Token(Token = "0x170000FD")]
		public List<JAnimatedProperty> AnimatedProperties
		{
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0xD8BCC4", Offset = "0xD8BCC4", VA = "0xD8BCC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0xD8BD50", Offset = "0xD8BD50", VA = "0xD8BD50")]
			set
			{
			}
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xD8BA74", Offset = "0xD8BA74", VA = "0xD8BA74")]
		static JDayNightCycleProfile()
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xD8BA78", Offset = "0xD8BA78", VA = "0xD8BA78")]
		private static void InitPropertyRemap()
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xD8BD58", Offset = "0xD8BD58", VA = "0xD8BD58")]
		public void AddProperty(JAnimatedProperty p, bool setDefaultValue = true)
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xD8B768", Offset = "0xD8B768", VA = "0xD8B768")]
		public void Animate(JSky sky, float t)
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xD8BF78", Offset = "0xD8BF78", VA = "0xD8BF78")]
		private void CheckDefaultProfileAndThrow(JSkyProfile p)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xD8C09C", Offset = "0xD8C09C", VA = "0xD8C09C")]
		public bool ContainProperty(string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xD8C198", Offset = "0xD8C198", VA = "0xD8C198")]
		public JDayNightCycleProfile()
		{
		}
	}
	[Token(Token = "0x2000220")]
	public static class JCubemapRenderer
	{
		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xD8C234", Offset = "0xD8C234", VA = "0xD8C234")]
		public static bool Render(JCubemapRendererArgs args)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000221")]
	public struct JCubemapRendererArgs
	{
		[Token(Token = "0x170000FE")]
		public Cubemap Cubemap
		{
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0xD8C384", Offset = "0xD8C384", VA = "0xD8C384")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0xD8C38C", Offset = "0xD8C38C", VA = "0xD8C38C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public Vector3 CameraPosition
		{
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0xD8C394", Offset = "0xD8C394", VA = "0xD8C394")]
			[CompilerGenerated]
			readonly get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0xD8C3A0", Offset = "0xD8C3A0", VA = "0xD8C3A0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public float CameraNearPlane
		{
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0xD8C3AC", Offset = "0xD8C3AC", VA = "0xD8C3AC")]
			[CompilerGenerated]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0xD8C3B4", Offset = "0xD8C3B4", VA = "0xD8C3B4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public float CameraFarPlane
		{
			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0xD8C3BC", Offset = "0xD8C3BC", VA = "0xD8C3BC")]
			[CompilerGenerated]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0xD8C3C4", Offset = "0xD8C3C4", VA = "0xD8C3C4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public CameraClearFlags CameraClearFlag
		{
			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0xD8C3CC", Offset = "0xD8C3CC", VA = "0xD8C3CC")]
			[CompilerGenerated]
			readonly get
			{
				return default(CameraClearFlags);
			}
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0xD8C3D4", Offset = "0xD8C3D4", VA = "0xD8C3D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public Color CameraBackgroundColor
		{
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0xD8C3DC", Offset = "0xD8C3DC", VA = "0xD8C3DC")]
			[CompilerGenerated]
			readonly get
			{
				return default(Color);
			}
			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0xD8C3E8", Offset = "0xD8C3E8", VA = "0xD8C3E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public int Resolution
		{
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0xD8C3F4", Offset = "0xD8C3F4", VA = "0xD8C3F4")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0xD8C3FC", Offset = "0xD8C3FC", VA = "0xD8C3FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public CubemapFace Face
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0xD8C404", Offset = "0xD8C404", VA = "0xD8C404")]
			[CompilerGenerated]
			readonly get
			{
				return default(CubemapFace);
			}
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0xD8C40C", Offset = "0xD8C40C", VA = "0xD8C40C")]
			[CompilerGenerated]
			set
			{
			}
		}
	}
	[Token(Token = "0x2000222")]
	[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
	public class JDisplayName : Attribute
	{
		[Token(Token = "0x17000106")]
		public string DisplayName
		{
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0xD8C414", Offset = "0xD8C414", VA = "0xD8C414")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0xD8C41C", Offset = "0xD8C41C", VA = "0xD8C41C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xD8C424", Offset = "0xD8C424", VA = "0xD8C424")]
		public JDisplayName(string name)
		{
		}
	}
	[Token(Token = "0x2000223")]
	public static class JInternalMaterials
	{
		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material copyTextureMaterial;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material solidColorMaterial;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Material unlitTextureMaterial;

		[Token(Token = "0x17000107")]
		public static Material CopyTextureMaterial
		{
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0xD8C454", Offset = "0xD8C454", VA = "0xD8C454")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000108")]
		public static Material SolidColorMaterial
		{
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0xD8C540", Offset = "0xD8C540", VA = "0xD8C540")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000109")]
		public static Material UnlitTextureMaterial
		{
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0xD8C624", Offset = "0xD8C624", VA = "0xD8C624")]
			get
			{
				return null;
			}
		}
	}
	[Serializable]
	[Token(Token = "0x2000224")]
	public struct JInternalShaderSettings
	{
		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private Shader skyShader;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		private Shader skyShadowShader;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Shader copyTextureShader;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Shader solidColorShader;

		[Token(Token = "0x1700010A")]
		public Shader SkyShader
		{
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0xD8C720", Offset = "0xD8C720", VA = "0xD8C720")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0xD8C728", Offset = "0xD8C728", VA = "0xD8C728")]
			set
			{
			}
		}

		[Token(Token = "0x1700010B")]
		public Shader SkyShadowShader
		{
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0xD8C730", Offset = "0xD8C730", VA = "0xD8C730")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0xD8C738", Offset = "0xD8C738", VA = "0xD8C738")]
			set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		public Shader CopyTextureShader
		{
			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0xD8C740", Offset = "0xD8C740", VA = "0xD8C740")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0xD8C748", Offset = "0xD8C748", VA = "0xD8C748")]
			set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		public Shader SolidColorShader
		{
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0xD8C750", Offset = "0xD8C750", VA = "0xD8C750")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0xD8C758", Offset = "0xD8C758", VA = "0xD8C758")]
			set
			{
			}
		}
	}
	[Token(Token = "0x2000225")]
	public class JProgressCancelledException : Exception
	{
		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xD8C760", Offset = "0xD8C760", VA = "0xD8C760")]
		public JProgressCancelledException()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public enum JRenderPipelineType
	{
		[Token(Token = "0x4000EA3")]
		Builtin,
		[Token(Token = "0x4000EA4")]
		Lightweight,
		[Token(Token = "0x4000EA5")]
		Universal
	}
	[Token(Token = "0x2000227")]
	public static class JUtilities
	{
		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float DELTA_TIME;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Mesh quadMesh;

		[Token(Token = "0x1700010E")]
		public static Mesh QuadMesh
		{
			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0xD8C7B8", Offset = "0xD8C7B8", VA = "0xD8C7B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DB8")]
		public static string ListElementsToString<T>(this IEnumerable<T> list, string separator)
		{
			return null;
		}

		[Token(Token = "0x6000DB9")]
		public static T[][] CreateJaggedArray<T>(int dimension1, int dimension2)
		{
			return null;
		}

		[Token(Token = "0x6000DBA")]
		public static T[] To1dArray<T>(T[][] jaggedArray)
		{
			return null;
		}

		[Token(Token = "0x6000DBB")]
		public static T[] To1dArray<T>(T[,] grid)
		{
			return null;
		}

		[Token(Token = "0x6000DBC")]
		public static void Fill<T>(T[] array, T value)
		{
		}

		[Token(Token = "0x6000DBD")]
		public static void CopyTo<T>(T[] src, T[] des)
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xD8C93C", Offset = "0xD8C93C", VA = "0xD8C93C")]
		public static int Sum(int[,] array)
		{
			return default(int);
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xD8CA00", Offset = "0xD8CA00", VA = "0xD8CA00")]
		public static int To1DIndex(int x, int z, int width)
		{
			return default(int);
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xD8CA08", Offset = "0xD8CA08", VA = "0xD8CA08")]
		public static bool IsInRange(float number, float minValue, float maxValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xD8CA20", Offset = "0xD8CA20", VA = "0xD8CA20")]
		public static bool IsInRangeExclusive(float number, float minValue, float maxValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xD8CA38", Offset = "0xD8CA38", VA = "0xD8CA38")]
		public static float GetFraction(float value, float floor, float ceil)
		{
			return default(float);
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xD8CA48", Offset = "0xD8CA48", VA = "0xD8CA48")]
		public static void ClearChildren(Transform t)
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xD8A188", Offset = "0xD8A188", VA = "0xD8A188")]
		public static Gradient CreateFullWhiteGradient()
		{
			return null;
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xD8CAF4", Offset = "0xD8CAF4", VA = "0xD8CAF4")]
		public static Gradient CreateFullTransparentGradient()
		{
			return null;
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xD8CC50", Offset = "0xD8CC50", VA = "0xD8CC50")]
		public static void CalculateBarycentricCoord(Vector2 p, Vector2 p1, Vector2 p2, Vector2 p3, ref Vector3 bary)
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xD8CCEC", Offset = "0xD8CCEC", VA = "0xD8CCEC")]
		public static void ExpandTrisUvCoord(Texture2D tex, Vector2[] trisUv)
		{
		}

		[Token(Token = "0x6000DC8")]
		public static bool ContainIdenticalElements<T>(T[] arr1, T[] arr2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xD8D034", Offset = "0xD8D034", VA = "0xD8D034")]
		public static float GetNearestMultiple(float number, float multipleOf)
		{
			return default(float);
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xD8D06C", Offset = "0xD8D06C", VA = "0xD8D06C")]
		public static Transform GetChildrenWithName(Transform parent, string name)
		{
			return null;
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xD8D19C", Offset = "0xD8D19C", VA = "0xD8D19C")]
		public static void ResetTransform(Transform t, Transform parent)
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xD8A668", Offset = "0xD8A668", VA = "0xD8A668")]
		public static void DestroyGameobject(GameObject g)
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xD8D284", Offset = "0xD8D284", VA = "0xD8D284")]
		public static void DestroyGameObjectWithUndo(GameObject g)
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xD8A610", Offset = "0xD8A610", VA = "0xD8A610")]
		public static void DestroyObject(UnityEngine.Object o)
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xD8D2D8", Offset = "0xD8D2D8", VA = "0xD8D2D8")]
		public static string Repeat(char src, int count)
		{
			return null;
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xD8D360", Offset = "0xD8D360", VA = "0xD8D360")]
		public static void MarkCurrentSceneDirty()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xD8D364", Offset = "0xD8D364", VA = "0xD8D364")]
		public static GameObject[] GetChildrenGameObjects(Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xD8D484", Offset = "0xD8D484", VA = "0xD8D484")]
		public static Transform[] GetChildrenTransforms(Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xD8D598", Offset = "0xD8D598", VA = "0xD8D598")]
		public static Vector3 RotateVectorAroundNormal(Vector3 vector, Vector3 normal, float angleDegree)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xD8C898", Offset = "0xD8C898", VA = "0xD8C898")]
		public static Mesh GetPrimitiveMesh(PrimitiveType type)
		{
			return null;
		}

		[Token(Token = "0x6000DD5")]
		public static void ShuffleList<T>(List<T> list)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0xD8D678", Offset = "0xD8D678", VA = "0xD8D678")]
		public static int[] GetShuffleIndicesArray(int length)
		{
			return null;
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xD8D748", Offset = "0xD8D748", VA = "0xD8D748")]
		public static int[] GetIndicesArray(int length)
		{
			return null;
		}

		[Token(Token = "0x6000DD8")]
		public static void ResetArray<T>(ref T[] array, int count, T defaultValue)
		{
		}

		[Token(Token = "0x6000DD9")]
		public static bool EnsureArrayLength<T>(ref T[] array, int count)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xD8D7D0", Offset = "0xD8D7D0", VA = "0xD8D7D0")]
		public static float GetValueBilinear(float[] data, int width, int height, Vector2 uv)
		{
			return default(float);
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xD8DA70", Offset = "0xD8DA70", VA = "0xD8DA70")]
		public static Color GetColorBilinear(Color[] textureData, int width, int height, Vector2 uv)
		{
			return default(Color);
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xD8DD20", Offset = "0xD8DD20", VA = "0xD8DD20")]
		public static GameObject CreatePreviewGameObject(Mesh m, Material mat, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xD8DF18", Offset = "0xD8DF18", VA = "0xD8DF18")]
		public static Camera CreatePreviewCamera(GameObject target, float distance, float padding)
		{
			return null;
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xD8E22C", Offset = "0xD8E22C", VA = "0xD8E22C")]
		public static void EnsureDirectoryExists(string dir)
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xD8E258", Offset = "0xD8E258", VA = "0xD8E258")]
		public static void SetStaticRecursively(GameObject g, bool isStatic)
		{
		}

		[Token(Token = "0x6000DE0")]
		public static void EnsureLengthSufficient<T>(List<T> list, int preferredLength) where T : UnityEngine.Object
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xD8E25C", Offset = "0xD8E25C", VA = "0xD8E25C")]
		public static void EnsureLengthSufficient(List<string> list, int preferredLength)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xD8E388", Offset = "0xD8E388", VA = "0xD8E388")]
		public static void EnsureLengthSufficient(List<bool> list, int preferredLength)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xD8E48C", Offset = "0xD8E48C", VA = "0xD8E48C")]
		public static string Ellipsis(string s, int length)
		{
			return null;
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xD8E510", Offset = "0xD8E510", VA = "0xD8E510")]
		public static bool IsRectContainPointExclusive(Rect r, Vector2 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xD8E594", Offset = "0xD8E594", VA = "0xD8E594")]
		public static Color GetColor(Color baseColor, float alpha)
		{
			return default(Color);
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xD8E59C", Offset = "0xD8E59C", VA = "0xD8E59C")]
		public static Rect GetRectContainsPoints(params Vector2[] points)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xD8E644", Offset = "0xD8E644", VA = "0xD8E644")]
		public static float InverseLerpUnclamped(float a, float b, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xD8E664", Offset = "0xD8E664", VA = "0xD8E664")]
		public static Vector2 PointToNormalizedUnclampled(Rect r, Vector2 point)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xD8E754", Offset = "0xD8E754", VA = "0xD8E754")]
		public static Rect GetUvRect(Vector2 v0, Vector2 v1, Vector2 v2)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xD8E97C", Offset = "0xD8E97C", VA = "0xD8E97C")]
		public static Gradient Clone(Gradient src)
		{
			return null;
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xD8EA18", Offset = "0xD8EA18", VA = "0xD8EA18")]
		public static AnimationCurve Clone(AnimationCurve src)
		{
			return null;
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xD8EB3C", Offset = "0xD8EB3C", VA = "0xD8EB3C")]
		public static bool IsPointInsideQuadXZ(Vector3 point, Vector3[] quad)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xD8ED18", Offset = "0xD8ED18", VA = "0xD8ED18")]
		public static void DestroyMeshArray(Mesh[] meshes)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xD8EDF4", Offset = "0xD8EDF4", VA = "0xD8EDF4")]
		public static Vector2 FlipY(Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xD8EE00", Offset = "0xD8EE00", VA = "0xD8EE00")]
		public static bool IsPointInCircumcircle(Vector2 v0, Vector2 v1, Vector2 v2, Vector2 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xD8EF08", Offset = "0xD8EF08", VA = "0xD8EF08")]
		public static bool IsPointInCircumcircleXZ(Vector3 v0, Vector3 v1, Vector3 v2, Vector3 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xD8F014", Offset = "0xD8F014", VA = "0xD8F014")]
		public static bool AreSetEqual(ushort[] setA, ushort[] setB)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF2")]
		public static void Distinct<T>(this List<T> list)
		{
		}

		[Token(Token = "0x6000DF3")]
		public static void AddIfNotContains<T>(this IList<T> list, IEnumerable<T> items)
		{
		}

		[Token(Token = "0x6000DF4")]
		public static void AddIfNotContains<T>(this IList<T> list, T item)
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xD8F0D0", Offset = "0xD8F0D0", VA = "0xD8F0D0")]
		public static Vector3 ToX0Y(this Vector2 v)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000228")]
	public static class JVersionInfo
	{
		[Token(Token = "0x1700010F")]
		public static string Code
		{
			[Token(Token = "0x6000DF7")]
			[Address(RVA = "0xD8F12C", Offset = "0xD8F12C", VA = "0xD8F12C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		public static string ProductName
		{
			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0xD8F16C", Offset = "0xD8F16C", VA = "0xD8F16C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000111")]
		public static string ProductNameAndVersion
		{
			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0xD8F1AC", Offset = "0xD8F1AC", VA = "0xD8F1AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		public static string ProductNameShort
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0xD8F254", Offset = "0xD8F254", VA = "0xD8F254")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000113")]
		public static string ProductNameAndVersionShort
		{
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0xD8F294", Offset = "0xD8F294", VA = "0xD8F294")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x2000229")]
	public class JTakeScreenshot : MonoBehaviour
	{
		[Token(Token = "0x200022A")]
		[CompilerGenerated]
		private sealed class <CrTakeScreenshot>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JTakeScreenshot <>4__this;

			[Token(Token = "0x4000EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Texture2D <texture>5__2;

			[Token(Token = "0x17000116")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E07")]
				[Address(RVA = "0xD8FB74", Offset = "0xD8FB74", VA = "0xD8FB74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000117")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E09")]
				[Address(RVA = "0xD8FBBC", Offset = "0xD8FBBC", VA = "0xD8FBBC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E04")]
			[Address(RVA = "0xD8F460", Offset = "0xD8F460", VA = "0xD8F460")]
			[DebuggerHidden]
			public <CrTakeScreenshot>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000E05")]
			[Address(RVA = "0xD8F490", Offset = "0xD8F490", VA = "0xD8F490", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E06")]
			[Address(RVA = "0xD8F494", Offset = "0xD8F494", VA = "0xD8F494", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E08")]
			[Address(RVA = "0xD8FB7C", Offset = "0xD8FB7C", VA = "0xD8FB7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private KeyCode hotKey;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string fileNamePrefix;

		[Token(Token = "0x17000114")]
		public KeyCode HotKey
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0xD8F33C", Offset = "0xD8F33C", VA = "0xD8F33C")]
			get
			{
				return default(KeyCode);
			}
			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0xD8F344", Offset = "0xD8F344", VA = "0xD8F344")]
			set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public string FileNamePrefix
		{
			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0xD8F34C", Offset = "0xD8F34C", VA = "0xD8F34C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DFF")]
			[Address(RVA = "0xD8F354", Offset = "0xD8F354", VA = "0xD8F354")]
			set
			{
			}
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xD8F35C", Offset = "0xD8F35C", VA = "0xD8F35C")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xD8F3B0", Offset = "0xD8F3B0", VA = "0xD8F3B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xD8F3EC", Offset = "0xD8F3EC", VA = "0xD8F3EC")]
		[IteratorStateMachine(typeof(<CrTakeScreenshot>d__10))]
		private IEnumerator CrTakeScreenshot()
		{
			return null;
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xD8F488", Offset = "0xD8F488", VA = "0xD8F488")]
		public JTakeScreenshot()
		{
		}
	}
}
namespace nTools.PrefabPainter
{
	[Token(Token = "0x200022B")]
	public class PrefabPainterSceneSettings : MonoBehaviour
	{
		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject parentForPrefabs;

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xD8FBC4", Offset = "0xD8FBC4", VA = "0xD8FBC4")]
		public PrefabPainterSceneSettings()
		{
		}
	}
}
namespace HighlightPlus
{
	[Token(Token = "0x200022C")]
	public delegate bool OnObjectHighlightEvent(GameObject obj);
	[Token(Token = "0x200022D")]
	public delegate bool OnRendererHighlightEvent(Renderer renderer);
	[Token(Token = "0x200022E")]
	public delegate void OnTargetAnimatesEvent(ref Vector3 center, ref Quaternion rotation, ref Vector3 scale, float t);
	[Token(Token = "0x200022F")]
	public enum NormalsOption
	{
		[Token(Token = "0x4000EB0")]
		Smooth,
		[Token(Token = "0x4000EB1")]
		PreserveOriginal,
		[Token(Token = "0x4000EB2")]
		Reorient,
		[Token(Token = "0x4000EB3")]
		Planar
	}
	[Token(Token = "0x2000230")]
	public enum SeeThroughMode
	{
		[Token(Token = "0x4000EB5")]
		WhenHighlighted,
		[Token(Token = "0x4000EB6")]
		AlwaysWhenOccluded,
		[Token(Token = "0x4000EB7")]
		Never
	}
	[Token(Token = "0x2000231")]
	public enum QualityLevel
	{
		[Token(Token = "0x4000EB9")]
		Fastest,
		[Token(Token = "0x4000EBA")]
		High,
		[Token(Token = "0x4000EBB")]
		Highest,
		[Token(Token = "0x4000EBC")]
		Medium
	}
	[Token(Token = "0x2000232")]
	public static class QualityLevelExtensions
	{
		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xD900D0", Offset = "0xD900D0", VA = "0xD900D0")]
		public static bool UsesMultipleOffsets(this QualityLevel qualityLevel)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000233")]
	public enum TargetOptions
	{
		[Token(Token = "0x4000EBE")]
		Children,
		[Token(Token = "0x4000EBF")]
		OnlyThisObject,
		[Token(Token = "0x4000EC0")]
		RootToChildren,
		[Token(Token = "0x4000EC1")]
		LayerInScene,
		[Token(Token = "0x4000EC2")]
		LayerInChildren,
		[Token(Token = "0x4000EC3")]
		Scripting
	}
	[Token(Token = "0x2000234")]
	public enum Visibility
	{
		[Token(Token = "0x4000EC5")]
		Normal,
		[Token(Token = "0x4000EC6")]
		AlwaysOnTop,
		[Token(Token = "0x4000EC7")]
		OnlyWhenOccluded
	}
	[Token(Token = "0x2000235")]
	public enum GlowBlendMode
	{
		[Token(Token = "0x4000EC9")]
		Additive,
		[Token(Token = "0x4000ECA")]
		AlphaBlending
	}
	[Serializable]
	[Token(Token = "0x2000236")]
	public struct GlowPassData
	{
		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float offset;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float alpha;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Color color;
	}
	[Token(Token = "0x2000237")]
	[ExecuteInEditMode]
	[HelpURL("https://kronnect.com/guides/highlight-plus-introduction/")]
	public class HighlightEffect : MonoBehaviour
	{
		[Token(Token = "0x2000238")]
		private struct ModelMaterials
		{
			[Token(Token = "0x4000F9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool render;

			[Token(Token = "0x4000F9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4000F9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool bakedTransform;

			[Token(Token = "0x4000FA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 currentPosition;

			[Token(Token = "0x4000FA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 currentRotation;

			[Token(Token = "0x4000FA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 currentScale;

			[Token(Token = "0x4000FA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool renderWasVisibleDuringSetup;

			[Token(Token = "0x4000FA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Mesh mesh;

			[Token(Token = "0x4000FA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Mesh originalMesh;

			[Token(Token = "0x4000FA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Renderer renderer;

			[Token(Token = "0x4000FA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public bool isSkinnedMesh;

			[Token(Token = "0x4000FA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public NormalsOption normalsOption;

			[Token(Token = "0x4000FA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Material[] fxMatMask;

			[Token(Token = "0x4000FAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Material[] fxMatSolidColor;

			[Token(Token = "0x4000FAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Material[] fxMatSeeThroughInner;

			[Token(Token = "0x4000FAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Material[] fxMatSeeThroughBorder;

			[Token(Token = "0x4000FAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Material[] fxMatOverlay;

			[Token(Token = "0x4000FAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Material[] fxMatInnerGlow;

			[Token(Token = "0x4000FAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Matrix4x4 renderingMatrix;

			[Token(Token = "0x4000FB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public bool isCombined;

			[Token(Token = "0x17000121")]
			public bool preserveOriginalMesh
			{
				[Token(Token = "0x6000E6B")]
				[Address(RVA = "0xD9FA10", Offset = "0xD9FA10", VA = "0xD9FA10")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0xD9FA30", Offset = "0xD9FA30", VA = "0xD9FA30")]
			public void Init()
			{
			}
		}

		[Token(Token = "0x2000239")]
		private enum FadingState
		{
			[Token(Token = "0x4000FB2")]
			FadingOut = -1,
			[Token(Token = "0x4000FB3")]
			NoFading,
			[Token(Token = "0x4000FB4")]
			FadingIn
		}

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The current profile (optional). A profile let you store Highlight Plus settings and apply those settings easily to many objects. You can also load a profile and apply its settings at runtime, using the ProfileLoad() method of the Highlight Effect component.")]
		public HighlightProfile profile;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If enabled, settings from the profile will be applied to this component automatically when game starts or when any profile setting is updated.")]
		public bool profileSync;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("If enabled, effects will be visible also when not in Play mode.")]
		public bool previewInEditor;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Which cameras can render the effect.")]
		public LayerMask camerasLayerMask;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Different options to specify which objects are affected by this Highlight Effect component.")]
		public TargetOptions effectGroup;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The layer that contains the affected objects by this effect when effectGroup is set to LayerMask.")]
		public LayerMask effectGroupLayer;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Only include objects whose names contains this text.")]
		public string effectNameFilter;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Combine meshes of all objects in this group affected by Highlight Effect reducing draw calls.")]
		public bool combineMeshes;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[Tooltip("The alpha threshold for transparent cutout objects. Pixels with alpha below this value will be discarded.")]
		public float alphaCutOff;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If back facing triangles are ignored.Backfaces triangles are not visible but you may set this property to false to force highlight effects to act on those triangles as well.")]
		public bool cullBackFaces;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("Show highlight effects even if the object is not visible. If this object or its children use GPU Instancing tools, the MeshRenderer can be disabled although the object is visible. In this case, this option is useful to enable highlighting.")]
		public bool ignoreObjectVisibility;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[Tooltip("Support reflection probes. Enable only if you want the effects to be visible in reflections.")]
		public bool reflectionProbes;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		[Tooltip("Enables GPU instancing. Reduces draw calls in outline and outer glow effects on platforms that support GPU instancing. Should be enabled by default.")]
		public bool GPUInstancing;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Enables depth buffer clipping. Only applies to outline or outer glow in High Quality mode.")]
		public bool depthClip;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Tooltip("Fades out effects based on distance to camera")]
		public bool cameraDistanceFade;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The closest distance particles can get to the camera before they fade from the camera’s view.")]
		public float cameraDistanceFadeNear;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The farthest distance particles can get away from the camera before they fade from the camera’s view.")]
		public float cameraDistanceFadeFar;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Normals handling option:\nPreserve original: use original mesh normals.\nSmooth: average normals to produce a smoother outline/glow mesh based effect.\nReorient: recomputes normals based on vertex direction to centroid.\nPlanar: same than reorient but renders outline and glow in an optimized way for 2D or planar meshes like quads or planes.")]
		public NormalsOption normalsOption;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Ignore highlighting on this object.")]
		public bool ignore;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[SerializeField]
		private bool _highlighted;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float fadeInDuration;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float fadeOutDuration;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool flipY;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Keeps the outline/glow size unaffected by object distance.")]
		public bool constantWidth;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Mask to include or exclude certain submeshes. By default, all submeshes are included.")]
		public int subMeshMask;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		[Tooltip("Intensity of the overlay effect. A value of 0 disables the overlay completely.")]
		public float overlay;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[ColorUsage(true, true)]
		public Color overlayColor;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float overlayAnimationSpeed;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float overlayMinIntensity;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Controls the blending or mix of the overlay color with the natural colors of the object.")]
		[Range(0f, 1f)]
		public float overlayBlending;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional overlay texture.")]
		public Texture2D overlayTexture;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float overlayTextureScale;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Range(0f, 1f)]
		[Tooltip("Intensity of the outline. A value of 0 disables the outline completely.")]
		public float outline;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ColorUsage(true, true)]
		public Color outlineColor;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float outlineWidth;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public QualityLevel outlineQuality;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Reduces the quality of the outline but improves performance a bit.")]
		[Range(1f, 8f)]
		public int outlineDownsampling;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Visibility outlineVisibility;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GlowBlendMode glowBlendMode;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool outlineOptimalBlit;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool outlineBlitDebug;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
		[Tooltip("If enabled, this object won't combine the outline with other objects.")]
		public bool outlineIndependent;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The intensity of the outer glow effect. A value of 0 disables the glow completely.")]
		[Range(0f, 5f)]
		public float glow;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float glowWidth;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public QualityLevel glowQuality;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Range(1f, 8f)]
		[Tooltip("Reduces the quality of the glow but improves performance a bit.")]
		public int glowDownsampling;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[ColorUsage(true, true)]
		public Color glowHQColor;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("When enabled, outer glow renders with dithering. When disabled, glow appears as a solid color.")]
		public bool glowDithering;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("Seed for the dithering effect")]
		public float glowMagicNumber1;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Another seed for the dithering effect that combines with first seed to create different patterns")]
		public float glowMagicNumber2;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float glowAnimationSpeed;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Visibility glowVisibility;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("Performs a blit to screen only over the affected area, instead of a full-screen pass")]
		public bool glowOptimalBlit;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		public bool glowBlitDebug;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF6")]
		[Tooltip("Blends glow passes one after another. If this option is disabled, glow passes won't overlap (in this case, make sure the glow pass 1 has a smaller offset than pass 2, etc.)")]
		public bool glowBlendPasses;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[NonReorderable]
		public GlowPassData[] glowPasses;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("If enabled, glow effect will not use a stencil mask. This can be used to render the glow effect alone.")]
		public bool glowIgnoreMask;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Range(0f, 5f)]
		[Tooltip("The intensity of the inner glow effect. A value of 0 disables the glow completely.")]
		public float innerGlow;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Range(0f, 2f)]
		public float innerGlowWidth;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[ColorUsage(true, true)]
		public Color innerGlowColor;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public Visibility innerGlowVisibility;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Enables the targetFX effect. This effect draws an animated sprite over the object.")]
		public bool targetFX;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Texture2D targetFXTexture;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[ColorUsage(true, true)]
		public Color targetFXColor;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Transform targetFXCenter;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float targetFXRotationSpeed;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float targetFXInitialScale;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float targetFXEndScale;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[Tooltip("Makes target scale relative to object renderer bounds")]
		public bool targetFXScaleToRenderBounds;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x155")]
		[Tooltip("Places target FX sprite at the bottom of the highlighted object.")]
		public bool targetFXAlignToGround;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Tooltip("Fade out effect with altitude")]
		public float targetFXFadePower;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public float targetFXGroundMaxDistance;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public LayerMask targetFXGroundLayerMask;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public float targetFXTransitionDuration;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[Tooltip("The duration of the effect. A value of 0 will keep the target sprite on screen while object is highlighted.")]
		public float targetFXStayDuration;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public Visibility targetFXVisibility;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[Tooltip("See-through mode for this Highlight Effect component.")]
		public SeeThroughMode seeThrough;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[Tooltip("This mask setting let you specify which objects will be considered as occluders and cause the see-through effect for this Highlight Effect component. For example, you assign your walls to a different layer and specify that layer here, so only walls and not other objects, like ground or ceiling, will trigger the see-through effect.")]
		public LayerMask seeThroughOccluderMask;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[Tooltip("A multiplier for the occluder volume size which can be used to reduce the actual size of occluders when Highlight Effect checks if they're occluding this object.")]
		[Range(0.01f, 0.6f)]
		public float seeThroughOccluderThreshold;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		[Tooltip("Uses stencil buffers to ensure pixel-accurate occlusion test. If this option is disabled, only physics raycasting is used to test for occlusion.")]
		public bool seeThroughOccluderMaskAccurate;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[Tooltip("The interval of time between occlusion tests.")]
		public float seeThroughOccluderCheckInterval;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		[Tooltip("If enabled, occlusion test is performed for each children element. If disabled, the bounds of all children is combined and a single occlusion test is performed for the combined bounds.")]
		public bool seeThroughOccluderCheckIndividualObjects;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[Tooltip("Shows the see-through effect only if the occluder if at this 'offset' distance from the object.")]
		public float seeThroughDepthOffset;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[Tooltip("Hides the see-through effect if the occluder is further than this distance from the object (0 = infinite)")]
		public float seeThroughMaxDepth;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[Range(0f, 5f)]
		public float seeThroughIntensity;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		[Range(0f, 1f)]
		public float seeThroughTintAlpha;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[ColorUsage(true, true)]
		public Color seeThroughTintColor;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[Range(0f, 1f)]
		public float seeThroughNoise;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[Range(0f, 1f)]
		public float seeThroughBorder;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Color seeThroughBorderColor;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[Tooltip("Only display the border instead of the full see-through effect.")]
		public bool seeThroughBorderOnly;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public float seeThroughBorderWidth;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[Tooltip("Renders see-through effect on overlapping objects in a sequence that's relative to the distance to the camera")]
		public bool seeThroughOrdered;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[HideInInspector]
		[SerializeField]
		private ModelMaterials[] rms;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		[HideInInspector]
		private int rmsCount;

		[NonSerialized]
		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public Transform target;

		[NonSerialized]
		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public float highlightStartTime;

		[NonSerialized]
		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public float targetFxStartTime;

		[NonSerialized]
		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public bool isSelected;

		[NonSerialized]
		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public HighlightProfile previousSettings;

		[Token(Token = "0x4000F36")]
		private const float TAU = 0.70711f;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material fxMatMask;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material fxMatSolidColor;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Material fxMatSeeThroughInner;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Material fxMatSeeThroughBorder;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Material fxMatOverlay;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Material fxMatClearStencil;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Material fxMatGlowRef;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Material fxMatInnerGlow;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Material fxMatOutlineRef;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Material fxMatTargetRef;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static Material fxMatComposeGlowRef;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static Material fxMatComposeOutlineRef;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static Material fxMatBlurGlowRef;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static Material fxMatBlurOutlineRef;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static Material fxMatSeeThroughMask;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Material _fxMatOutline;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Material _fxMatGlow;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Material _fxMatTarget;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Material _fxMatComposeGlow;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Material _fxMatComposeOutline;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Material _fxMatBlurGlow;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private Material _fxMatBlurOutline;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static Vector4[] offsets;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private float fadeStartTime;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		private FadingState fading;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private CommandBuffer cbMask;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private CommandBuffer cbSeeThrough;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private CommandBuffer cbGlow;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private CommandBuffer cbOutline;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private CommandBuffer cbOverlay;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private CommandBuffer cbInnerGlow;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private CommandBuffer cbSmoothBlend;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private int[] mipGlowBuffers;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private int[] mipOutlineBuffers;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private int glowRT;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private int outlineRT;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static Mesh quadMesh;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private static Mesh cubeMesh;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private int sourceRT;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		private Matrix4x4 quadGlowMatrix;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		private Matrix4x4 quadOutlineMatrix;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private Vector3[] corners;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private RenderTextureDescriptor sourceDesc;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		private Color debugColor;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
		private Color blackColor;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x394")]
		private Visibility lastOutlineVisibility;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private bool requireUpdateMaterial;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x399")]
		private bool usingPipeline;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39C")]
		private float occlusionCheckLastTime;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		private int occlusionRenderFrame;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A4")]
		private bool lastOcclusionTestResult;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A5")]
		private bool useGPUInstancing;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		private MaterialPropertyBlock glowPropertyBlock;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private MaterialPropertyBlock outlinePropertyBlock;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static readonly List<Vector4> matDataDirection;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private static readonly List<Vector4> matDataGlow;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private static readonly List<Vector4> matDataColor;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private static Matrix4x4[] matrices;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly List<HighlightEffect> effects;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static bool customSorting;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private static int customSortingFrame;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private static Camera customSortingCamera;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private int skipThisFrame;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
		private int outlineOffsetsMin;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private int outlineOffsetsMax;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		private int glowOffsetsMin;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private int glowOffsetsMax;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private static CombineInstance[] combineInstances;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3CC")]
		private Matrix4x4 matrix4X4Identity;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40C")]
		private bool maskRequired;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		private readonly List<Renderer> tempRR;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private static List<Vector3> vertices;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private static List<Vector3> normals;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private static Vector3[] newNormals;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private static int[] matches;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private static readonly Dictionary<Vector3, int> vv;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private static readonly Dictionary<int, Mesh> smoothMeshes;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private static readonly Dictionary<int, Mesh> reorientedMeshes;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private static readonly Dictionary<int, Mesh> combinedMeshes;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private static readonly List<Material> rendererSharedMaterials;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		private int combinedMeshesHashId;

		[Token(Token = "0x4000F88")]
		private const int MAX_VERTEX_COUNT = 65535;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41C")]
		[Range(0f, 1f)]
		public float hitFxInitialIntensity;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		public HitFxMode hitFxMode;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x424")]
		public float hitFxFadeOutDuration;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		[ColorUsage(true, true)]
		public Color hitFxColor;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		public float hitFxRadius;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43C")]
		private float hitInitialIntensity;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		private float hitStartTime;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x444")]
		private float hitFadeOutDuration;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		private Color hitColor;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		private bool hitActive;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
		private Vector3 hitPosition;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		private float hitRadius;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private static readonly List<HighlightSeeThroughOccluder> occluders;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private static readonly Dictionary<Camera, int> occludersFrameCount;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private static CommandBuffer cbOccluder;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private static Material fxMatOccluder;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private static RaycastHit[] hits;

		[Token(Token = "0x4000F9A")]
		private const int MAX_OCCLUDER_HITS = 50;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private static RaycastHit[] occluderHits;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		private readonly Dictionary<Camera, List<Renderer>> cachedOccludersPerCamera;

		[Token(Token = "0x17000118")]
		public bool highlighted
		{
			[Token(Token = "0x6000E18")]
			[Address(RVA = "0xD900E0", Offset = "0xD900E0", VA = "0xD900E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E19")]
			[Address(RVA = "0xD900E8", Offset = "0xD900E8", VA = "0xD900E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public int includedObjectsCount
		{
			[Token(Token = "0x6000E22")]
			[Address(RVA = "0xD90790", Offset = "0xD90790", VA = "0xD90790")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700011A")]
		private Material fxMatOutline
		{
			[Token(Token = "0x6000E24")]
			[Address(RVA = "0xD907B8", Offset = "0xD907B8", VA = "0xD907B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		private Material fxMatGlow
		{
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0xD90910", Offset = "0xD90910", VA = "0xD90910")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		private Material fxMatTarget
		{
			[Token(Token = "0x6000E26")]
			[Address(RVA = "0xD90A68", Offset = "0xD90A68", VA = "0xD90A68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		private Material fxMatComposeGlow
		{
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0xD90B98", Offset = "0xD90B98", VA = "0xD90B98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		private Material fxMatComposeOutline
		{
			[Token(Token = "0x6000E28")]
			[Address(RVA = "0xD90CC8", Offset = "0xD90CC8", VA = "0xD90CC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011F")]
		private Material fxMatBlurGlow
		{
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0xD90DF8", Offset = "0xD90DF8", VA = "0xD90DF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000120")]
		private Material fxMatBlurOutline
		{
			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0xD90F28", Offset = "0xD90F28", VA = "0xD90F28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000010")]
		public event OnObjectHighlightEvent OnObjectHighlightStart
		{
			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0xD90290", Offset = "0xD90290", VA = "0xD90290")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E1B")]
			[Address(RVA = "0xD90330", Offset = "0xD90330", VA = "0xD90330")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000011")]
		public event OnObjectHighlightEvent OnObjectHighlightEnd
		{
			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0xD903D0", Offset = "0xD903D0", VA = "0xD903D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0xD90470", Offset = "0xD90470", VA = "0xD90470")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event OnRendererHighlightEvent OnRendererHighlightStart
		{
			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0xD90510", Offset = "0xD90510", VA = "0xD90510")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0xD905B0", Offset = "0xD905B0", VA = "0xD905B0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event OnTargetAnimatesEvent OnTargetAnimates
		{
			[Token(Token = "0x6000E20")]
			[Address(RVA = "0xD90650", Offset = "0xD90650", VA = "0xD90650")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E21")]
			[Address(RVA = "0xD906F0", Offset = "0xD906F0", VA = "0xD906F0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xD90798", Offset = "0xD90798", VA = "0xD90798")]
		public void RestorePreviousHighlightEffectSettings()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xD91058", Offset = "0xD91058", VA = "0xD91058")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xD92058", Offset = "0xD92058", VA = "0xD92058")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xD93A9C", Offset = "0xD93A9C", VA = "0xD93A9C")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xD93AA0", Offset = "0xD93AA0", VA = "0xD93AA0")]
		private void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xD93B28", Offset = "0xD93B28", VA = "0xD93B28")]
		private void DestroyMaterialArray(Material[] mm)
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xD93B80", Offset = "0xD93B80", VA = "0xD93B80")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xD93E2C", Offset = "0xD93E2C", VA = "0xD93E2C")]
		public static void DrawEffectsNow([Optional] Camera cam)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xD941B4", Offset = "0xD941B4", VA = "0xD941B4")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xD941E4", Offset = "0xD941E4", VA = "0xD941E4")]
		public void ProfileLoad(HighlightProfile profile)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xD94288", Offset = "0xD94288", VA = "0xD94288")]
		public void ProfileReload()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xD94310", Offset = "0xD94310", VA = "0xD94310")]
		public void ProfileSaveChanges(HighlightProfile profile)
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xD943A4", Offset = "0xD943A4", VA = "0xD943A4")]
		public void ProfileSaveChanges()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xD9442C", Offset = "0xD9442C", VA = "0xD9442C")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xD93FC8", Offset = "0xD93FC8", VA = "0xD93FC8")]
		private void DoOnRenderObject(Camera cam)
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xD94454", Offset = "0xD94454", VA = "0xD94454")]
		private void RenderEffect(Camera cam)
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xD99EF8", Offset = "0xD99EF8", VA = "0xD99EF8")]
		private void RenderMask(int k, Mesh mesh, bool alwaysOnTop)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xD9A354", Offset = "0xD9A354", VA = "0xD9A354")]
		private void RenderSeeThroughClearStencil(int k, Mesh mesh)
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xD9A56C", Offset = "0xD9A56C", VA = "0xD9A56C")]
		private void RenderSeeThroughMask(int k, Mesh mesh)
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xD9A7EC", Offset = "0xD9A7EC", VA = "0xD9A7EC")]
		private bool ComputeSmoothQuadMatrix(Camera cam, Bounds bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xD9BD38", Offset = "0xD9BD38", VA = "0xD9BD38")]
		private void BuildMatrix(Camera cam, Vector3 scrMin, Vector3 scrMax, int border, ref Matrix4x4 quadMatrix)
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xD9ABA4", Offset = "0xD9ABA4", VA = "0xD9ABA4")]
		private void SmoothGlow(int rtWidth, int rtHeight)
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xD9B0E0", Offset = "0xD9B0E0", VA = "0xD9B0E0")]
		private void SmoothOutline(int rtWidth, int rtHeight)
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xD9B61C", Offset = "0xD9B61C", VA = "0xD9B61C")]
		private void ComposeSmoothBlend(Visibility smoothGlowVisibility, Visibility smoothOutlineVisibility)
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xD9BF84", Offset = "0xD9BF84", VA = "0xD9BF84")]
		private void InitMaterial(ref Material material, string shaderName)
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xD9C114", Offset = "0xD9C114", VA = "0xD9C114")]
		public void SetTarget(Transform transform)
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xD9C26C", Offset = "0xD9C26C", VA = "0xD9C26C")]
		public void SetTargets(Transform transform, Renderer[] renderers)
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xD900F0", Offset = "0xD900F0", VA = "0xD900F0")]
		public void SetHighlighted(bool state)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xD9C1E4", Offset = "0xD9C1E4", VA = "0xD9C1E4")]
		private void ImmediateFadeOut()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xD91CB0", Offset = "0xD91CB0", VA = "0xD91CB0")]
		private void SetupMaterial()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xD9C320", Offset = "0xD9C320", VA = "0xD9C320")]
		private void SetupMaterial(Renderer[] rr)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xD9CB10", Offset = "0xD9CB10", VA = "0xD9CB10")]
		private Renderer[] FindRenderersWithLayerInScene(LayerMask layer)
		{
			return null;
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xD9CCEC", Offset = "0xD9CCEC", VA = "0xD9CCEC")]
		private Renderer[] FindRenderersWithLayerInChildren(LayerMask layer)
		{
			return null;
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xD919AC", Offset = "0xD919AC", VA = "0xD919AC")]
		private void CheckGeometrySupportDependencies()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xD9E784", Offset = "0xD9E784", VA = "0xD9E784")]
		private void CheckRequiredCommandBuffers()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xD9CEAC", Offset = "0xD9CEAC", VA = "0xD9CEAC")]
		private void CheckCommandBuffers()
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0xD9A27C", Offset = "0xD9A27C", VA = "0xD9A27C")]
		private void CheckBlurCommandBuffer()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0xD9D104", Offset = "0xD9D104", VA = "0xD9D104")]
		private void Fork(Material mat, ref Material[] mats, Mesh mesh)
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xD99AD0", Offset = "0xD99AD0", VA = "0xD99AD0")]
		private void BakeTransform(int objIndex, bool duplicateMesh)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xD9E8DC", Offset = "0xD9E8DC", VA = "0xD9E8DC")]
		public void UpdateMaterialProperties(bool forceNow = false)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xD9205C", Offset = "0xD9205C", VA = "0xD9205C")]
		private void UpdateMaterialPropertiesNow()
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xD9A73C", Offset = "0xD9A73C", VA = "0xD9A73C")]
		private float ComputeCameraDistanceFade(Vector3 position, Transform cameraTransform)
		{
			return default(float);
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xD9BF64", Offset = "0xD9BF64", VA = "0xD9BF64")]
		private int GetZTestValue(Visibility param)
		{
			return default(int);
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xD91618", Offset = "0xD91618", VA = "0xD91618")]
		private void BuildQuad()
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xD9190C", Offset = "0xD9190C", VA = "0xD9190C")]
		private void BuildCube()
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xD9E914", Offset = "0xD9E914", VA = "0xD9E914")]
		public bool Includes(Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xD9E9E0", Offset = "0xD9E9E0", VA = "0xD9E9E0")]
		public void SetGlowColor(Color color)
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xD9D8D8", Offset = "0xD9D8D8", VA = "0xD9D8D8")]
		private void AverageNormals(int objIndex)
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xD9D2C8", Offset = "0xD9D2C8", VA = "0xD9D2C8")]
		private void ReorientNormals(int objIndex)
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xD9E1F4", Offset = "0xD9E1F4", VA = "0xD9E1F4")]
		private void CombineMeshes()
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0xD9EA64", Offset = "0xD9EA64", VA = "0xD9EA64")]
		public void HitFX()
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xD9EAEC", Offset = "0xD9EAEC", VA = "0xD9EAEC")]
		public void HitFX(Vector3 position)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xD9EA80", Offset = "0xD9EA80", VA = "0xD9EA80")]
		public void HitFX(Color color, float fadeOutDuration, float initialIntensity = 1f)
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xD9EB38", Offset = "0xD9EB38", VA = "0xD9EB38")]
		public void HitFX(Color color, float fadeOutDuration, float initialIntensity, Vector3 position, float radius)
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xD9EBD8", Offset = "0xD9EBD8", VA = "0xD9EBD8")]
		public void TargetFX()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xD9EC30", Offset = "0xD9EC30", VA = "0xD9EC30")]
		public bool IsSeeThroughOccluded(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xD9F18C", Offset = "0xD9F18C", VA = "0xD9F18C")]
		public static void RegisterOccluder(HighlightSeeThroughOccluder occluder)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xD9F2B4", Offset = "0xD9F2B4", VA = "0xD9F2B4")]
		public static void UnregisterOccluder(HighlightSeeThroughOccluder occluder)
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0xD9834C", Offset = "0xD9834C", VA = "0xD9834C")]
		public bool RenderSeeThroughOccluders(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xD99390", Offset = "0xD99390", VA = "0xD99390")]
		private bool CheckOcclusion(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E66")]
		private void AddWithoutRepetition<T>(List<T> target, List<T> source)
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0xD98860", Offset = "0xD98860", VA = "0xD98860")]
		private void CheckOcclusionAccurate(Camera cam)
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0xD9F384", Offset = "0xD9F384", VA = "0xD9F384")]
		public List<Renderer> GetOccluders(Camera camera)
		{
			return null;
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0xD9F3F0", Offset = "0xD9F3F0", VA = "0xD9F3F0")]
		public HighlightEffect()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public enum HitFxMode
	{
		[Token(Token = "0x4000FB6")]
		Overlay,
		[Token(Token = "0x4000FB7")]
		InnerGlow,
		[Token(Token = "0x4000FB8")]
		LocalHit
	}
	[Token(Token = "0x200023B")]
	public delegate bool OnObjectSelectionEvent(GameObject obj);
	[Token(Token = "0x200023C")]
	[HelpURL("https://kronnect.com/guides/highlight-plus-introduction/")]
	[DefaultExecutionOrder(100)]
	[RequireComponent(typeof(HighlightEffect))]
	public class HighlightManager : MonoBehaviour
	{
		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Enables highlight when pointer is over this object.")]
		public bool highlightOnHover;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask layerMask;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera raycastCamera;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RayCastSource raycastSource;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Minimum distance for target.")]
		public float minDistance;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximum distance for target. 0 = infinity")]
		public float maxDistance;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Blocks interaction if pointer is over an UI element")]
		public bool respectUI;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Tooltip("If the object will be selected by clicking with mouse or tapping on it.")]
		public bool selectOnClick;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Optional profile for objects selected by clicking on them")]
		public HighlightProfile selectedProfile;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Profile to use whtn object is selected and highlighted.")]
		public HighlightProfile selectedAndHighlightedProfile;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Automatically deselects other previously selected objects")]
		public bool singleSelection;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Toggles selection on/off when clicking object")]
		public bool toggle;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[Tooltip("Keeps current selection when clicking outside of any selectable object")]
		public bool keepSelection;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HighlightEffect baseEffect;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private HighlightEffect currentEffect;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform currentObject;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly List<HighlightEffect> selectedObjects;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int lastTriggerFrame;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static HighlightManager _instance;

		[Token(Token = "0x17000122")]
		public static HighlightManager instance
		{
			[Token(Token = "0x6000E79")]
			[Address(RVA = "0xDA0104", Offset = "0xDA0104", VA = "0xDA0104")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000014")]
		public event OnObjectSelectionEvent OnObjectSelected
		{
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xD9FC24", Offset = "0xD9FC24", VA = "0xD9FC24")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0xD9FCC0", Offset = "0xD9FCC0", VA = "0xD9FCC0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event OnObjectSelectionEvent OnObjectUnSelected
		{
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0xD9FD5C", Offset = "0xD9FD5C", VA = "0xD9FD5C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0xD9FDF8", Offset = "0xD9FDF8", VA = "0xD9FDF8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		public event OnObjectHighlightEvent OnObjectHighlightStart
		{
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0xD9FE94", Offset = "0xD9FE94", VA = "0xD9FE94")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0xD9FF30", Offset = "0xD9FF30", VA = "0xD9FF30")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000017")]
		public event OnObjectHighlightEvent OnObjectHighlightEnd
		{
			[Token(Token = "0x6000E77")]
			[Address(RVA = "0xD9FFCC", Offset = "0xD9FFCC", VA = "0xD9FFCC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E78")]
			[Address(RVA = "0xDA0068", Offset = "0xDA0068", VA = "0xDA0068")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xDA020C", Offset = "0xDA020C", VA = "0xDA020C")]
		[RuntimeInitializeOnLoadMethod]
		private void DomainReloadDisabledSupport()
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xDA02B0", Offset = "0xDA02B0", VA = "0xDA02B0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xDA05C4", Offset = "0xDA05C4", VA = "0xDA05C4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xDA0B30", Offset = "0xDA0B30", VA = "0xDA0B30")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xDA1250", Offset = "0xDA1250", VA = "0xDA1250")]
		private EventSystem CreateEventSystem()
		{
			return null;
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xDA05E0", Offset = "0xDA05E0", VA = "0xDA05E0")]
		private void SwitchesCollider(Transform newObject)
		{
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xDA1D6C", Offset = "0xDA1D6C", VA = "0xDA1D6C")]
		private bool CanInteract()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xDA1694", Offset = "0xDA1694", VA = "0xDA1694")]
		private void ToggleSelection(Transform t, bool forceSelection)
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xDA1B34", Offset = "0xDA1B34", VA = "0xDA1B34")]
		private void Highlight(bool state)
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xDA04F8", Offset = "0xDA04F8", VA = "0xDA04F8")]
		public static Camera GetCamera()
		{
			return null;
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xDA088C", Offset = "0xDA088C", VA = "0xDA088C")]
		private void internal_DeselectAll()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xDA2484", Offset = "0xDA2484", VA = "0xDA2484")]
		public static void DeselectAll()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xDA276C", Offset = "0xDA276C", VA = "0xDA276C")]
		public void SelectObject(Transform t)
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xDA2774", Offset = "0xDA2774", VA = "0xDA2774")]
		public void ToggleObject(Transform t)
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xDA277C", Offset = "0xDA277C", VA = "0xDA277C")]
		public void UnselectObject(Transform t)
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xDA2930", Offset = "0xDA2930", VA = "0xDA2930")]
		public HighlightManager()
		{
		}
	}
	[Token(Token = "0x200023D")]
	[CreateAssetMenu(menuName = "Highlight Plus Profile", fileName = "Highlight Plus Profile", order = 100)]
	[HelpURL("https://www.dropbox.com/s/v9qgn68ydblqz8x/Documentation.pdf?dl=0")]
	public class HighlightProfile : ScriptableObject
	{
		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Different options to specify which objects are affected by this Highlight Effect component.")]
		public TargetOptions effectGroup;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The layer that contains the affected objects by this effect when effectGroup is set to LayerMask.")]
		public LayerMask effectGroupLayer;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Only include objects whose names contains this text.")]
		public string effectNameFilter;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Combine meshes of all objects in this group affected by Highlight Effect reducing draw calls.")]
		public bool combineMeshes;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The alpha threshold for transparent cutout objects. Pixels with alpha below this value will be discarded.")]
		[Range(0f, 1f)]
		public float alphaCutOff;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If back facing triangles are ignored.Backfaces triangles are not visible but you may set this property to false to force highlight effects to act on those triangles as well.")]
		public bool cullBackFaces;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool depthClip;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Normals handling option:\nPreserve original: use original mesh normals.\nSmooth: average normals to produce a smoother outline/glow mesh based effect.\nReorient: recomputes normals based on vertex direction to centroid.")]
		public NormalsOption normalsOption;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float fadeInDuration;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float fadeOutDuration;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Fades out effects based on distance to camera")]
		public bool cameraDistanceFade;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The closest distance particles can get to the camera before they fade from the camera’s view.")]
		public float cameraDistanceFadeNear;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The farthest distance particles can get away from the camera before they fade from the camera’s view.")]
		public float cameraDistanceFadeFar;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Keeps the outline/glow size unaffected by object distance.")]
		public bool constantWidth;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Intensity of the overlay effect. A value of 0 disables the overlay completely.")]
		[Range(0f, 1f)]
		public float overlay;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[ColorUsage(true, true)]
		public Color overlayColor;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float overlayAnimationSpeed;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float overlayMinIntensity;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Controls the blending or mix of the overlay color with the natural colors of the object.")]
		[Range(0f, 1f)]
		public float overlayBlending;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional overlay texture.")]
		public Texture2D overlayTexture;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float overlayTextureScale;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Intensity of the outline. A value of 0 disables the outline completely.")]
		[Range(0f, 1f)]
		public float outline;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ColorUsage(true, true)]
		public Color outlineColor;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float outlineWidth;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public QualityLevel outlineQuality;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Reduces the quality of the outline but improves performance a bit.")]
		[Range(1f, 8f)]
		public int outlineDownsampling;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool outlineOptimalBlit;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Visibility outlineVisibility;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("If enabled, this object won't combine the outline with other objects.")]
		public bool outlineIndependent;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 5f)]
		[Tooltip("The intensity of the outer glow effect. A value of 0 disables the glow completely.")]
		public float glow;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float glowWidth;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public QualityLevel glowQuality;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Reduces the quality of the glow but improves performance a bit.")]
		[Range(1f, 8f)]
		public int glowDownsampling;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[ColorUsage(true, true)]
		public Color glowHQColor;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("When enabled, outer glow renders with dithering. When disabled, glow appears as a solid color.")]
		public bool glowDithering;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool glowOptimalBlit;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("Seed for the dithering effect")]
		public float glowMagicNumber1;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Another seed for the dithering effect that combines with first seed to create different patterns")]
		public float glowMagicNumber2;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float glowAnimationSpeed;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Visibility glowVisibility;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public GlowBlendMode glowBlendMode;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Blends glow passes one after another. If this option is disabled, glow passes won't overlap (in this case, make sure the glow pass 1 has a smaller offset than pass 2, etc.)")]
		public bool glowBlendPasses;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GlowPassData[] glowPasses;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("If enabled, glow effect will not use a stencil mask. This can be used to render the glow effect alone.")]
		public bool glowIgnoreMask;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("The intensity of the inner glow effect. A value of 0 disables the glow completely.")]
		[Range(0f, 5f)]
		public float innerGlow;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Range(0f, 2f)]
		public float innerGlowWidth;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[ColorUsage(true, true)]
		public Color innerGlowColor;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public Visibility innerGlowVisibility;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Enables the targetFX effect. This effect draws an animated sprite over the object.")]
		public bool targetFX;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Texture2D targetFXTexture;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[ColorUsage(true, true)]
		public Color targetFXColor;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float targetFXRotationSpeed;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public float targetFXInitialScale;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public float targetFXEndScale;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[Tooltip("Makes target scale relative to object renderer bounds.")]
		public bool targetFXScaleToRenderBounds;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
		[Tooltip("Places target FX sprite at the bottom of the highlighted object.")]
		public bool targetFXAlignToGround;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Tooltip("Max distance from the center of the highlighted object to the ground.")]
		public float targetFXGroundMaxDistance;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public LayerMask targetFXGroundLayerMask;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Tooltip("Fade out effect with altitude")]
		public float targetFXFadePower;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float targetFXTransitionDuration;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float targetFXStayDuration;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public Visibility targetFXVisibility;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Tooltip("See-through mode for this Highlight Effect component.")]
		public SeeThroughMode seeThrough;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[Tooltip("This mask setting let you specify which objects will be considered as occluders and cause the see-through effect for this Highlight Effect component. For example, you assign your walls to a different layer and specify that layer here, so only walls and not other objects, like ground or ceiling, will trigger the see-through effect.")]
		public LayerMask seeThroughOccluderMask;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[Tooltip("Uses stencil buffers to ensure pixel-accurate occlusion test. If this option is disabled, only physics raycasting is used to test for occlusion.")]
		public bool seeThroughOccluderMaskAccurate;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[Range(0.01f, 0.9f)]
		[Tooltip("A multiplier for the occluder volume size which can be used to reduce the actual size of occluders when Highlight Effect checks if they're occluding this object.")]
		public float seeThroughOccluderThreshold;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[Tooltip("The interval of time between occlusion tests.")]
		public float seeThroughOccluderCheckInterval;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[Tooltip("If enabled, occlusion test is performed for each children element. If disabled, the bounds of all children is combined and a single occlusion test is performed for the combined bounds.")]
		public bool seeThroughOccluderCheckIndividualObjects;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Tooltip("Shows the see-through effect only if the occluder if at this 'offset' distance from the object.")]
		public float seeThroughDepthOffset;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		[Tooltip("Hides the see-through effect if the occluder is further than this distance from the object (0 = infinite)")]
		public float seeThroughMaxDepth;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[Range(0f, 5f)]
		public float seeThroughIntensity;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[Range(0f, 1f)]
		public float seeThroughTintAlpha;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Color seeThroughTintColor;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[Range(0f, 1f)]
		public float seeThroughNoise;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[Range(0f, 1f)]
		public float seeThroughBorder;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Color seeThroughBorderColor;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public float seeThroughBorderWidth;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[Tooltip("Only display the border instead of the full see-through effect.")]
		public bool seeThroughBorderOnly;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AD")]
		[Tooltip("Renders see-through effect on overlapping objects in a sequence that's relative to the distance to the camera")]
		public bool seeThroughOrdered;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[Range(0f, 1f)]
		public float hitFxInitialIntensity;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public HitFxMode hitFxMode;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float hitFxFadeOutDuration;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[ColorUsage(true, true)]
		public Color hitFxColor;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public float hitFxRadius;

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xDA21F0", Offset = "0xDA21F0", VA = "0xDA21F0")]
		public void Load(HighlightEffect effect)
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xDA1F78", Offset = "0xDA1F78", VA = "0xDA1F78")]
		public void Save(HighlightEffect effect)
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xDA2A08", Offset = "0xDA2A08", VA = "0xDA2A08")]
		private GlowPassData[] GetGlowPassesCopy(GlowPassData[] glowPasses)
		{
			return null;
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xDA2ADC", Offset = "0xDA2ADC", VA = "0xDA2ADC")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xDA2C28", Offset = "0xDA2C28", VA = "0xDA2C28")]
		public HighlightProfile()
		{
		}
	}
	[Token(Token = "0x200023E")]
	public struct MeshData
	{
		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Renderer renderer;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int subMeshCount;
	}
	[Token(Token = "0x200023F")]
	public enum DetectionMethod
	{
		[Token(Token = "0x4001027")]
		Stencil,
		[Token(Token = "0x4001028")]
		RayCast
	}
	[Token(Token = "0x2000240")]
	[ExecuteInEditMode]
	public class HighlightSeeThroughOccluder : MonoBehaviour
	{
		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DetectionMethod detectionMethod;

		[NonSerialized]
		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshData[] meshData;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Renderer> rr;

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xDA2DBC", Offset = "0xDA2DBC", VA = "0xDA2DBC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xDA2DF4", Offset = "0xDA2DF4", VA = "0xDA2DF4")]
		private void Init()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xDA3240", Offset = "0xDA3240", VA = "0xDA3240")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xDA3298", Offset = "0xDA3298", VA = "0xDA3298")]
		public HighlightSeeThroughOccluder()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public enum TriggerMode
	{
		[Token(Token = "0x400102D")]
		ColliderEventsOnlyOnThisObject,
		[Token(Token = "0x400102E")]
		RaycastOnThisObjectAndChildren,
		[Token(Token = "0x400102F")]
		Volume
	}
	[Token(Token = "0x2000242")]
	public enum RayCastSource
	{
		[Token(Token = "0x4001031")]
		MousePosition,
		[Token(Token = "0x4001032")]
		CameraDirection
	}
	[Token(Token = "0x2000243")]
	[HelpURL("https://kronnect.com/guides/highlight-plus-introduction/")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(HighlightEffect))]
	public class HighlightTrigger : MonoBehaviour
	{
		[Token(Token = "0x2000244")]
		[CompilerGenerated]
		private sealed class <DoRayCast>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400104C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400104D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400104E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HighlightTrigger <>4__this;

			[Token(Token = "0x400104F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForEndOfFrame <w>5__2;

			[Token(Token = "0x17000124")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EB1")]
				[Address(RVA = "0xDA52CC", Offset = "0xDA52CC", VA = "0xDA52CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000125")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EB3")]
				[Address(RVA = "0xDA5314", Offset = "0xDA5314", VA = "0xDA5314", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0xDA3E1C", Offset = "0xDA3E1C", VA = "0xDA3E1C")]
			[DebuggerHidden]
			public <DoRayCast>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0xDA492C", Offset = "0xDA492C", VA = "0xDA492C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0xDA4930", Offset = "0xDA4930", VA = "0xDA4930", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xDA52D4", Offset = "0xDA52D4", VA = "0xDA52D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Enables highlight when pointer is over this object.")]
		public bool highlightOnHover;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Used to trigger automatic highlighting including children objects.")]
		public TriggerMode triggerMode;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera raycastCamera;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RayCastSource raycastSource;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayerMask;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Minimum distance for target.")]
		public float minDistance;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Maximum distance for target. 0 = infinity")]
		public float maxDistance;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Blocks interaction if pointer is over an UI element")]
		public bool respectUI;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public LayerMask volumeLayerMask;

		[Token(Token = "0x400103C")]
		private const int MAX_RAYCAST_HITS = 100;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If the object will be selected by clicking with mouse or tapping on it.")]
		public bool selectOnClick;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Profile to use when object is selected by clicking on it.")]
		public HighlightProfile selectedProfile;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Profile to use whtn object is selected and highlighted.")]
		public HighlightProfile selectedAndHighlightedProfile;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Automatically deselects any other selected object prior selecting this one")]
		public bool singleSelection;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Tooltip("Toggles selection on/off when clicking object")]
		public bool toggle;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		[Tooltip("Keeps current selection when clicking outside of any selectable object")]
		public bool keepSelection;

		[NonSerialized]
		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Collider[] colliders;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Collider currentCollider;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RaycastHit[] hits;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private HighlightEffect hb;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TriggerMode currentTriggerMode;

		[Token(Token = "0x17000123")]
		public HighlightEffect highlightEffect
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0xDA32A0", Offset = "0xDA32A0", VA = "0xDA32A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000018")]
		public event OnObjectSelectionEvent OnObjectSelected
		{
			[Token(Token = "0x6000E95")]
			[Address(RVA = "0xDA32A8", Offset = "0xDA32A8", VA = "0xDA32A8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xDA3344", Offset = "0xDA3344", VA = "0xDA3344")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event OnObjectSelectionEvent OnObjectUnSelected
		{
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xDA33E0", Offset = "0xDA33E0", VA = "0xDA33E0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xDA347C", Offset = "0xDA347C", VA = "0xDA347C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event OnObjectHighlightEvent OnObjectHighlightStart
		{
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xDA3518", Offset = "0xDA3518", VA = "0xDA3518")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0xDA35B4", Offset = "0xDA35B4", VA = "0xDA35B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public event OnObjectHighlightEvent OnObjectHighlightEnd
		{
			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0xDA3650", Offset = "0xDA3650", VA = "0xDA3650")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E9C")]
			[Address(RVA = "0xDA36EC", Offset = "0xDA36EC", VA = "0xDA36EC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xDA3788", Offset = "0xDA3788", VA = "0xDA3788")]
		[RuntimeInitializeOnLoadMethod]
		private void DomainReloadDisabledSupport()
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xDA3820", Offset = "0xDA3820", VA = "0xDA3820")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xDA398C", Offset = "0xDA398C", VA = "0xDA398C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xDA3824", Offset = "0xDA3824", VA = "0xDA3824")]
		public void Init()
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xDA3B3C", Offset = "0xDA3B3C", VA = "0xDA3B3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xDA3AC8", Offset = "0xDA3AC8", VA = "0xDA3AC8")]
		[IteratorStateMachine(typeof(<DoRayCast>d__40))]
		private IEnumerator DoRayCast()
		{
			return null;
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xDA3E44", Offset = "0xDA3E44", VA = "0xDA3E44")]
		private EventSystem CreateEventSystem()
		{
			return null;
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xDA3FEC", Offset = "0xDA3FEC", VA = "0xDA3FEC")]
		private void SwitchCollider(Collider newCollider)
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xDA42DC", Offset = "0xDA42DC", VA = "0xDA42DC")]
		private bool CanInteract()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xDA43E4", Offset = "0xDA43E4", VA = "0xDA43E4")]
		private void OnMouseDown()
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xDA4770", Offset = "0xDA4770", VA = "0xDA4770")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xDA47B0", Offset = "0xDA47B0", VA = "0xDA47B0")]
		private void OnMouseExit()
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xDA40A4", Offset = "0xDA40A4", VA = "0xDA40A4")]
		private void Highlight(bool state)
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xDA4444", Offset = "0xDA4444", VA = "0xDA4444")]
		private void ToggleSelection()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xDA47F0", Offset = "0xDA47F0", VA = "0xDA47F0")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xDA486C", Offset = "0xDA486C", VA = "0xDA486C")]
		public void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xDA48E8", Offset = "0xDA48E8", VA = "0xDA48E8")]
		public HighlightTrigger()
		{
		}
	}
	[Token(Token = "0x2000245")]
	public static class InputProxy
	{
		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 lastPointerPosition;

		[Token(Token = "0x17000126")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0xDA13F8", Offset = "0xDA13F8", VA = "0xDA13F8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000127")]
		public static int touchCount
		{
			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0xDA1E74", Offset = "0xDA1E74", VA = "0xDA1E74")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xDA05A0", Offset = "0xDA05A0", VA = "0xDA05A0")]
		public static void Init()
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xDA154C", Offset = "0xDA154C", VA = "0xDA154C")]
		public static bool GetMouseButtonDown(int buttonIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xDA1ED8", Offset = "0xDA1ED8", VA = "0xDA1ED8")]
		public static int GetFingerIdFromTouch(int touchIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xDA531C", Offset = "0xDA531C", VA = "0xDA531C")]
		public static bool GetKeyDown(string name)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000246")]
	public static class ShaderParams
	{
		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int Cull;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int BlurScale;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int Speed;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static int ConstantWidth;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int CutOff;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int ZTest;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static int Flip;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static int Debug;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static int Color;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static int MainTex;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static int BlendSrc;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static int BlendDst;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static int OutlineWidth;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static int OutlineZTest;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static int OutlineDirection;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static int OutlineColor;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static int OutlineVertexWidth;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static int GlowZTest;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static int GlowStencilComp;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static int GlowStencilOp;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static int GlowDirection;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static int Glow;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static int GlowColor;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static int Glow2;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static int SeeThrough;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static int SeeThroughNoise;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static int SeeThroughBorderWidth;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static int SeeThroughBorderConstantWidth;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static int SeeThroughTintColor;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static int SeeThroughBorderColor;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static int SeeThroughStencilRef;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public static int SeeThroughStencilComp;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static int SeeThroughStencilPassOp;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public static int SeeThroughDepthOffset;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static int SeeThroughMaxDepth;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public static int SeeThroughOrdered;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static int InnerGlowWidth;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public static int InnerGlowZTest;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static int InnerGlowColor;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public static int OverlayData;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static int OverlayBackColor;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public static int OverlayColor;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static int OverlayHitPosData;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public static int OverlayHitStartTime;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static int OverlayTexture;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public static int TargetFXRenderData;

		[Token(Token = "0x400107F")]
		public const string SKW_ALPHACLIP = "HP_ALPHACLIP";

		[Token(Token = "0x4001080")]
		public const string SKW_DEPTHCLIP = "HP_DEPTHCLIP";

		[Token(Token = "0x4001081")]
		public const string SKW_DEPTH_OFFSET = "HP_DEPTH_OFFSET";

		[Token(Token = "0x4001082")]
		public const string SKW_USES_OVERLAY_TEXTURE = "HP_USES_OVERLAY_TEXTURE";

		[Token(Token = "0x4001083")]
		public const string SKW_SEETHROUGH_ONLY_BORDER = "HP_SEETHROUGH_ONLY_BORDER";
	}
}
namespace Tantawowa.TimelineEvents
{
	[Token(Token = "0x2000247")]
	public class EventInvocationInfo
	{
		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Behaviour TargetBehaviour;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MethodInfo MethodInfo;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Type[] SupportedTypes;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Key;

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xDA5C20", Offset = "0xDA5C20", VA = "0xDA5C20")]
		public EventInvocationInfo(string key, Behaviour targetBehaviour, MethodInfo methodInfo)
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xDA5C80", Offset = "0xDA5C80", VA = "0xDA5C80")]
		public void Invoke(object value)
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xDA5D60", Offset = "0xDA5D60", VA = "0xDA5D60")]
		public void InvokEnum(int value)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xDA5EBC", Offset = "0xDA5EBC", VA = "0xDA5EBC")]
		public void InvokeNoArgs()
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xDA5F00", Offset = "0xDA5F00", VA = "0xDA5F00")]
		public void Invoke(bool isSingleArg, string value)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000248")]
	public class TimelineEventBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string HandlerKey;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsMethodWithParam;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool InvokeEventsInEditMode;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject TargetObject;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string ArgValue;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EventInvocationInfo invocationInfo;

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xDA6AEC", Offset = "0xDA6AEC", VA = "0xDA6AEC", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xDA6B50", Offset = "0xDA6B50", VA = "0xDA6B50")]
		private void UpdateDelegates()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xDA6BAC", Offset = "0xDA6BAC", VA = "0xDA6BAC")]
		private EventInvocationInfo GetInvocationInfo(bool isEnabled, string methodKey, EventInvocationInfo currentInfo, bool methodWitharg)
		{
			return null;
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xDA6DF0", Offset = "0xDA6DF0", VA = "0xDA6DF0")]
		private void GetBehaviourAndMethod(bool isEnabled, string key, ref Behaviour targetBehaviour, ref string methodName)
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xDA70C8", Offset = "0xDA70C8", VA = "0xDA70C8")]
		public TimelineEventBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024A")]
	public class TimelineEventClip : PlayableAsset, ITimelineClipAsset
	{
		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TimelineEventBehaviour template;

		[Token(Token = "0x17000128")]
		public GameObject TrackTargetObject
		{
			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0xDA71D8", Offset = "0xDA71D8", VA = "0xDA71D8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0xDA71E0", Offset = "0xDA71E0", VA = "0xDA71E0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000129")]
		public ClipCaps clipCaps
		{
			[Token(Token = "0x6000ECA")]
			[Address(RVA = "0xDA71E8", Offset = "0xDA71E8", VA = "0xDA71E8", Slot = "9")]
			get
			{
				return default(ClipCaps);
			}
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xDA71F0", Offset = "0xDA71F0", VA = "0xDA71F0", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
		{
			return default(Playable);
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xDA72F0", Offset = "0xDA72F0", VA = "0xDA72F0")]
		public TimelineEventClip()
		{
		}
	}
	[Token(Token = "0x200024B")]
	public class TimelineEventMixerBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xDA7364", Offset = "0xDA7364", VA = "0xDA7364")]
		public TimelineEventMixerBehaviour()
		{
		}
	}
	[Token(Token = "0x200024C")]
	[TrackBindingType(typeof(GameObject))]
	[TrackClipType(typeof(TimelineEventClip))]
	[TrackColor(0.4448276f, 0f, 1f)]
	public class TimelineEventTrack : TrackAsset
	{
		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xDA736C", Offset = "0xDA736C", VA = "0xDA736C", Slot = "24")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xDA7808", Offset = "0xDA7808", VA = "0xDA7808")]
		public TimelineEventTrack()
		{
		}
	}
}
namespace Tantawowa.Extensions
{
	[Token(Token = "0x200024D")]
	public static class PrimitiveExtensions
	{
		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xDA7860", Offset = "0xDA7860", VA = "0xDA7860")]
		public static int ClampIndex(this int value, int min, int max)
		{
			return default(int);
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xDA787C", Offset = "0xDA787C", VA = "0xDA787C")]
		public static bool IsValidAsType(this string input, Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED2")]
		public static T ConvertToType<T>(this string input)
		{
			return (T)null;
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xDA7A68", Offset = "0xDA7A68", VA = "0xDA7A68")]
		public static double RoundUpToNearest(this double passednumber, double roundto)
		{
			return default(double);
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xDA7AD4", Offset = "0xDA7AD4", VA = "0xDA7AD4")]
		public static double RoundDownToNearest(this double passednumber, double roundto)
		{
			return default(double);
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xDA7B40", Offset = "0xDA7B40", VA = "0xDA7B40")]
		public static float RoundUpToNearest(this float passednumber, float roundto)
		{
			return default(float);
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xDA7B58", Offset = "0xDA7B58", VA = "0xDA7B58")]
		public static float RoundDownToNearest(this float passednumber, float roundto)
		{
			return default(float);
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xDA7B70", Offset = "0xDA7B70", VA = "0xDA7B70")]
		public static int RoundUpToNearest(this int passednumber, int roundto)
		{
			return default(int);
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xDA7BA8", Offset = "0xDA7BA8", VA = "0xDA7BA8")]
		public static int RoundDownToNearest(this int passednumber, int roundto)
		{
			return default(int);
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xDA7BE0", Offset = "0xDA7BE0", VA = "0xDA7BE0")]
		public static int Flip(this int value)
		{
			return default(int);
		}
	}
}
namespace Tantawowa.Demo.DemoScripts
{
	[Token(Token = "0x200024E")]
	public enum RobotState
	{
		[Token(Token = "0x4001093")]
		Sleeping,
		[Token(Token = "0x4001094")]
		GoToWork,
		[Token(Token = "0x4001095")]
		GoHome
	}
	[Token(Token = "0x200024F")]
	public class Robot : MonoBehaviour
	{
		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int points;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private RobotState currentState;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMesh Message;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NavMeshAgent Agent;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public NavMeshFollower NavMeshFollower;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform Work;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform Home;

		[Token(Token = "0x1700012A")]
		public int Points
		{
			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0xDA7BEC", Offset = "0xDA7BEC", VA = "0xDA7BEC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0xDA7BF4", Offset = "0xDA7BF4", VA = "0xDA7BF4")]
			set
			{
			}
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xDA7C70", Offset = "0xDA7C70", VA = "0xDA7C70")]
		public void AddScore(int points)
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xDA7C7C", Offset = "0xDA7C7C", VA = "0xDA7C7C")]
		public void ResetScore()
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xDA7C84", Offset = "0xDA7C84", VA = "0xDA7C84")]
		public void SetState(RobotState state)
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xDA7EE0", Offset = "0xDA7EE0", VA = "0xDA7EE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xDA7FB8", Offset = "0xDA7FB8", VA = "0xDA7FB8")]
		public Robot()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class UIManager : MonoBehaviour
	{
		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> UIElements;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject Light;

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xDA7FC0", Offset = "0xDA7FC0", VA = "0xDA7FC0")]
		public void ChangeUI(UIType type)
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xDA8048", Offset = "0xDA8048", VA = "0xDA8048")]
		public void ToggleLight(bool isOn)
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xDA8068", Offset = "0xDA8068", VA = "0xDA8068")]
		public UIManager()
		{
		}
	}
}
namespace Game.General.Navigation
{
	[Token(Token = "0x2000251")]
	public class NavMeshFollower : MonoBehaviour
	{
		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<NavMeshFollower> OnArrive;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NavMeshAgent Agent;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x1700012B")]
		public Transform Target
		{
			[Token(Token = "0x6000EE4")]
			[Address(RVA = "0xDA8070", Offset = "0xDA8070", VA = "0xDA8070")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0xDA7D94", Offset = "0xDA7D94", VA = "0xDA7D94")]
			set
			{
			}
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xDA8078", Offset = "0xDA8078", VA = "0xDA8078")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xDA810C", Offset = "0xDA810C", VA = "0xDA810C")]
		public NavMeshFollower()
		{
		}
	}
}
namespace Tools3lb
{
	[Token(Token = "0x2000252")]
	public static class Utility3lb
	{
	}
}
namespace RoboRyanTron.SearchableEnum
{
	[Token(Token = "0x2000253")]
	[AttributeUsage(AttributeTargets.Field)]
	public class SearchableEnumAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xDA8114", Offset = "0xDA8114", VA = "0xDA8114")]
		public SearchableEnumAttribute()
		{
		}
	}
}
namespace UnityEngine.Timeline
{
	[Token(Token = "0x2000254")]
	public class VideoPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VideoPlayer videoPlayer;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VideoClip videoClip;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mute;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loop;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double preloadTime;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double clipInTime;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool playedOnce;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool preparing;

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xDA811C", Offset = "0xDA811C", VA = "0xDA811C")]
		public void PrepareVideo()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xDA84C0", Offset = "0xDA84C0", VA = "0xDA84C0")]
		private void LoopPointReached(VideoPlayer vp)
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xDA84D0", Offset = "0xDA84D0", VA = "0xDA84D0", Slot = "19")]
		public override void PrepareFrame(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xDA8788", Offset = "0xDA8788", VA = "0xDA8788", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xDA88C8", Offset = "0xDA88C8", VA = "0xDA88C8", Slot = "18")]
		public override void OnBehaviourPause(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xDA89DC", Offset = "0xDA89DC", VA = "0xDA89DC", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xDA8BA8", Offset = "0xDA8BA8", VA = "0xDA8BA8", Slot = "13")]
		public override void OnGraphStart(Playable playable)
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xDA8BB0", Offset = "0xDA8BB0", VA = "0xDA8BB0", Slot = "14")]
		public override void OnGraphStop(Playable playable)
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xDA8BD8", Offset = "0xDA8BD8", VA = "0xDA8BD8", Slot = "16")]
		public override void OnPlayableDestroy(Playable playable)
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xDA882C", Offset = "0xDA882C", VA = "0xDA882C")]
		public void PlayVideo()
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xDA895C", Offset = "0xDA895C", VA = "0xDA895C")]
		public void PauseVideo()
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xDA843C", Offset = "0xDA843C", VA = "0xDA843C")]
		public void StopVideo()
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xDA8628", Offset = "0xDA8628", VA = "0xDA8628")]
		private void SyncVideoToPlayable(Playable playable)
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xDA8BDC", Offset = "0xDA8BDC", VA = "0xDA8BDC")]
		public VideoPlayableBehaviour()
		{
		}
	}
	[Token(Token = "0x2000255")]
	public sealed class VideoSchedulerPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerable<TimelineClip> m_Clips;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayableDirector m_Director;

		[Token(Token = "0x1700012C")]
		internal PlayableDirector director
		{
			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0xDA8BF8", Offset = "0xDA8BF8", VA = "0xDA8BF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EF8")]
			[Address(RVA = "0xDA8C00", Offset = "0xDA8C00", VA = "0xDA8C00")]
			set
			{
			}
		}

		[Token(Token = "0x1700012D")]
		internal IEnumerable<TimelineClip> clips
		{
			[Token(Token = "0x6000EF9")]
			[Address(RVA = "0xDA8C08", Offset = "0xDA8C08", VA = "0xDA8C08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EFA")]
			[Address(RVA = "0xDA8C10", Offset = "0xDA8C10", VA = "0xDA8C10")]
			set
			{
			}
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0xDA8C18", Offset = "0xDA8C18", VA = "0xDA8C18", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xDA90CC", Offset = "0xDA90CC", VA = "0xDA90CC")]
		public VideoSchedulerPlayableBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000256")]
	public class VideoScriptPlayableAsset : PlayableAsset
	{
		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExposedReference<VideoPlayer> videoPlayer;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[NotKeyable]
		[SerializeField]
		public VideoClip videoClip;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[NotKeyable]
		[SerializeField]
		public bool mute;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		[NotKeyable]
		public bool loop;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[NotKeyable]
		public double preloadTime;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[NotKeyable]
		public double clipInTime;

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xDA90D4", Offset = "0xDA90D4", VA = "0xDA90D4", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go)
		{
			return default(Playable);
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xDA9234", Offset = "0xDA9234", VA = "0xDA9234")]
		public VideoScriptPlayableAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000257")]
	[TrackClipType(typeof(VideoScriptPlayableAsset))]
	[TrackMediaType(TimelineAsset.MediaType.Script)]
	[TrackColor(0.008f, 0.698f, 0.655f)]
	public class VideoScriptPlayableTrack : TrackAsset
	{
		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0xDA9250", Offset = "0xDA9250", VA = "0xDA9250", Slot = "24")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xDA93BC", Offset = "0xDA93BC", VA = "0xDA93BC")]
		public VideoScriptPlayableTrack()
		{
		}
	}
}
namespace UnityEngine.UI
{
	[Token(Token = "0x2000258")]
	[AddComponentMenu("UI/Raycast Filters/Ignore Raycast Filter")]
	public class UIIgnoreRaycast : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xDA9414", Offset = "0xDA9414", VA = "0xDA9414", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xDA941C", Offset = "0xDA941C", VA = "0xDA941C")]
		public UIIgnoreRaycast()
		{
		}
	}
}
namespace UnityEngine.EventSystems
{
	[Token(Token = "0x2000259")]
	public class DualInputModule : PointerInputModule
	{
		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 m_LastMousePosition;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector2 m_MousePosition;

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xDA9424", Offset = "0xDA9424", VA = "0xDA9424")]
		protected DualInputModule()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xDA942C", Offset = "0xDA942C", VA = "0xDA942C", Slot = "24")]
		public override void UpdateModule()
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xDA9450", Offset = "0xDA9450", VA = "0xDA9450", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xDA9550", Offset = "0xDA9550", VA = "0xDA9550")]
		private bool UseFakeInput()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xDA956C", Offset = "0xDA956C", VA = "0xDA956C", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xDA9570", Offset = "0xDA9570", VA = "0xDA9570")]
		private void FakeTouches()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xDA9690", Offset = "0xDA9690", VA = "0xDA9690")]
		private void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released)
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xDA9E10", Offset = "0xDA9E10", VA = "0xDA9E10", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xDA9E30", Offset = "0xDA9E30", VA = "0xDA9E30", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace CustomAttributes
{
	[Token(Token = "0x200025A")]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Property | AttributeTargets.Field, Inherited = true)]
	public class ConditionalHideAttribute : PropertyAttribute
	{
		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ConditionalSourceField;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool HideInInspector;

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xDAA074", Offset = "0xDAA074", VA = "0xDAA074")]
		public ConditionalHideAttribute(string conditionalSourceField)
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xDAA0F4", Offset = "0xDAA0F4", VA = "0xDAA0F4")]
		public ConditionalHideAttribute(string conditionalSourceField, bool hideInInspector)
		{
		}
	}
	[Token(Token = "0x200025B")]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Property | AttributeTargets.Field, Inherited = true)]
	public class ConditionalShowAttribute : PropertyAttribute
	{
		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ConditionalSourceField;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool HideInInspector;

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xDAA178", Offset = "0xDAA178", VA = "0xDAA178")]
		public ConditionalShowAttribute(string conditionalSourceField)
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xDAA1F8", Offset = "0xDAA1F8", VA = "0xDAA1F8")]
		public ConditionalShowAttribute(string conditionalSourceField, bool hideInInspector)
		{
		}
	}
}
namespace Autohand
{
	[Token(Token = "0x200025C")]
	public class AutoHeaderAttribute : PropertyAttribute
	{
		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int count;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string label;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tooltip;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string toggleBool;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Type type;

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xDAA27C", Offset = "0xDAA27C", VA = "0xDAA27C")]
		public AutoHeaderAttribute(string label, int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xDAA2C0", Offset = "0xDAA2C0", VA = "0xDAA2C0")]
		public AutoHeaderAttribute(string label, string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class AutoLineAttribute : PropertyAttribute
	{
		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int count;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string tooltip;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string toggleBool;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Type type;

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xDAA318", Offset = "0xDAA318", VA = "0xDAA318")]
		public AutoLineAttribute(int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xDAA344", Offset = "0xDAA344", VA = "0xDAA344")]
		public AutoLineAttribute(string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class AutoToggleHeaderAttribute : PropertyAttribute
	{
		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int count;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string label;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tooltip;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string toggleBool;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Type type;

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xDAA388", Offset = "0xDAA388", VA = "0xDAA388")]
		public AutoToggleHeaderAttribute(string label, int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xDAA3CC", Offset = "0xDAA3CC", VA = "0xDAA3CC")]
		public AutoToggleHeaderAttribute(string label, string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x200025F")]
	public static class AutoHandExtensions
	{
		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform _transformRuler;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Transform _transformRulerChild;

		[Token(Token = "0x1700012E")]
		public static Transform transformRuler
		{
			[Token(Token = "0x6000F16")]
			[Address(RVA = "0xDAA424", Offset = "0xDAA424", VA = "0xDAA424")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		public static Transform transformRulerChild
		{
			[Token(Token = "0x6000F17")]
			[Address(RVA = "0xDAA624", Offset = "0xDAA624", VA = "0xDAA624")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xDAA848", Offset = "0xDAA848", VA = "0xDAA848")]
		public static float Round(this float value, int digits)
		{
			return default(float);
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xDAA8EC", Offset = "0xDAA8EC", VA = "0xDAA8EC")]
		public static bool HasGrabbable(this Hand hand, GameObject obj, out Grabbable grabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xDAA8F8", Offset = "0xDAA8F8", VA = "0xDAA8F8")]
		public static bool HasGrabbable(this GameObject obj, out Grabbable grabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1B")]
		public static T GetCopyOf<T>(this Component comp, T other) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F1C")]
		public static bool CanGetComponent<T>(this Component componentClass, out T component)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1D")]
		public static bool CanGetComponent<T>(this GameObject componentClass, out T component)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000260")]
	public class Stabbable : MonoBehaviour
	{
		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody body;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grabbable;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The index that must match the stabbers index to allow stabbing")]
		public int stabIndex;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxStabbers;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float positionDamper;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationDamper;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool parentOnStab;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Events")]
		public UnityEvent StartStab;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent EndStab;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public StabEvent StartStabEvent;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public StabEvent EndStabEvent;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int currentStabs;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Stabber> stabbing;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform stabParent;

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xDAA9F4", Offset = "0xDAA9F4", VA = "0xDAA9F4")]
		public void Start()
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xDAADC8", Offset = "0xDAADC8", VA = "0xDAADC8", Slot = "4")]
		public virtual void OnStab(Stabber stabber)
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xDAAECC", Offset = "0xDAAECC", VA = "0xDAAECC", Slot = "5")]
		public virtual void OnEndStab(Stabber stabber)
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xDAAF5C", Offset = "0xDAAF5C", VA = "0xDAAF5C", Slot = "6")]
		public virtual bool CanStab(Stabber stabber)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xDAAF98", Offset = "0xDAAF98", VA = "0xDAAF98")]
		public int StabbedCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xDAAFE0", Offset = "0xDAAFE0", VA = "0xDAAFE0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xDAB0C0", Offset = "0xDAB0C0", VA = "0xDAB0C0")]
		public Stabbable()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public delegate void StabEvent(Stabber stabber, Stabbable stab);
	[Token(Token = "0x2000262")]
	public class Stabber : MonoBehaviour
	{
		[Token(Token = "0x2000263")]
		[CompilerGenerated]
		private sealed class <StartWait>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Stabber <>4__this;

			[Token(Token = "0x40010FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000130")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F3B")]
				[Address(RVA = "0xDAD300", Offset = "0xDAD300", VA = "0xDAD300", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000131")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F3D")]
				[Address(RVA = "0xDAD348", Offset = "0xDAD348", VA = "0xDAD348", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F38")]
			[Address(RVA = "0xDAB58C", Offset = "0xDAB58C", VA = "0xDAB58C")]
			[DebuggerHidden]
			public <StartWait>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6000F39")]
			[Address(RVA = "0xDAD1FC", Offset = "0xDAD1FC", VA = "0xDAD1FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F3A")]
			[Address(RVA = "0xDAD200", Offset = "0xDAD200", VA = "0xDAD200", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F3C")]
			[Address(RVA = "0xDAD308", Offset = "0xDAD308", VA = "0xDAD308", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Can be left null")]
		public Grabbable grabbable;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Stab Settings")]
		public CapsuleCollider stabCapsule;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If left empty, will default to grabbable layers")]
		public LayerMask stabbableLayers;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The index that must match the stabbables index to allow stabbing")]
		public int stabIndex;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int maxStabs;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Joint Settings")]
		public Vector3 axis;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float limit;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ConfigurableJointMotion xMotion;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ConfigurableJointMotion yMotion;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public ConfigurableJointMotion zMotion;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ConfigurableJointMotion angularXMotion;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ConfigurableJointMotion angularYMotion;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ConfigurableJointMotion angularZMotion;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Space]
		public float positionDampeningMultiplyer;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float rotationDampeningMultiplyer;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Events")]
		public UnityEvent StartStab;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent EndStab;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public StabEvent StartStabEvent;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public StabEvent EndStabEvent;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Stabbable> stabbed;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<ConfigurableJoint> stabbedJoints;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<Stabbable, int> stabbedFrames;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Collider[] resultsNonAlloc;

		[Token(Token = "0x40010F0")]
		private const int STABFRAMES = 3;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 startPos;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Quaternion startRot;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 lastPos;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion lastRot;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int frames;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Dictionary<Transform, Transform> originalParents;

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xDAB1C8", Offset = "0xDAB1C8", VA = "0xDAB1C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xDAB518", Offset = "0xDAB518", VA = "0xDAB518")]
		[IteratorStateMachine(typeof(<StartWait>d__31))]
		private IEnumerator StartWait()
		{
			return null;
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xDAB5B4", Offset = "0xDAB5B4", VA = "0xDAB5B4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xDAB6A0", Offset = "0xDAB6A0", VA = "0xDAB6A0", Slot = "4")]
		protected virtual void CheckStabArea()
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xDABFF4", Offset = "0xDABFF4", VA = "0xDABFF4", Slot = "5")]
		protected virtual void OnStabbableEnter(Stabbable stab)
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xDAC8FC", Offset = "0xDAC8FC", VA = "0xDAC8FC", Slot = "6")]
		protected virtual void OnStabbableExit(Stabbable stab)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xDACC6C", Offset = "0xDACC6C", VA = "0xDACC6C")]
		public List<Stabbable> GetStabbed()
		{
			return null;
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xDACC74", Offset = "0xDACC74", VA = "0xDACC74")]
		public int GetStabbedCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xDACCBC", Offset = "0xDACCBC", VA = "0xDACCBC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xDAD134", Offset = "0xDAD134", VA = "0xDAD134")]
		public Stabber()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class Stickable : MonoBehaviour
	{
		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Sticky Settings")]
		public Rigidbody body;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How strong the joint is between the stickable and this")]
		public float stickStrength;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Multiplyer for required stick speed to activate")]
		public float stickSpeedMultiplyer;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This index must match the sticky object to stick")]
		public int stickIndex;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Event")]
		public UnityEvent OnStick;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent EndStick;

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xDAD350", Offset = "0xDAD350", VA = "0xDAD350")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xDAD430", Offset = "0xDAD430", VA = "0xDAD430")]
		public Stickable()
		{
		}
	}
	[Token(Token = "0x2000265")]
	[RequireComponent(typeof(Rigidbody))]
	public class Sticky : MonoBehaviour
	{
		[Token(Token = "0x2000266")]
		[CompilerGenerated]
		private sealed class <JointBreak>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001108")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001109")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400110A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Sticky <>4__this;

			[Token(Token = "0x17000132")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F4A")]
				[Address(RVA = "0xDADC40", Offset = "0xDADC40", VA = "0xDADC40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000133")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F4C")]
				[Address(RVA = "0xDADC88", Offset = "0xDADC88", VA = "0xDADC88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F47")]
			[Address(RVA = "0xDAD93C", Offset = "0xDAD93C", VA = "0xDAD93C")]
			[DebuggerHidden]
			public <JointBreak>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000F48")]
			[Address(RVA = "0xDADA54", Offset = "0xDADA54", VA = "0xDADA54", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F49")]
			[Address(RVA = "0xDADA58", Offset = "0xDADA58", VA = "0xDADA58", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F4B")]
			[Address(RVA = "0xDADC48", Offset = "0xDADC48", VA = "0xDADC48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Sticky Settings")]
		[Tooltip("How strong the joint is between the stickable and this")]
		public float stickStrength;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplyer for required stick speed to activate")]
		public float requiredStickSpeed;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This index must match the stickable object to stick")]
		public int stickIndex;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Event")]
		public UnityEvent OnStick;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody body;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Stickable> stickers;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Joint> joints;

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xDAD440", Offset = "0xDAD440", VA = "0xDAD440")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xDAD584", Offset = "0xDAD584", VA = "0xDAD584")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xDAD604", Offset = "0xDAD604", VA = "0xDAD604")]
		private void CreateStick(Stickable sticker)
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xDAD8A8", Offset = "0xDAD8A8", VA = "0xDAD8A8")]
		private void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xDAD8C8", Offset = "0xDAD8C8", VA = "0xDAD8C8")]
		[IteratorStateMachine(typeof(<JointBreak>d__11))]
		private IEnumerator JointBreak()
		{
			return null;
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xDAD964", Offset = "0xDAD964", VA = "0xDAD964")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xDADA44", Offset = "0xDADA44", VA = "0xDADA44")]
		public Sticky()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class PhysicsGadgetButton : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool pressed;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Min(0.01f)]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnPressed will be called at 0.9, and OnUnpressed at 0.1")]
		public float threshold;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool lockOnPressed;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space]
		public UnityEvent OnPressed;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnUnpressed;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 startPos;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pressedPos;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float pressedValue;

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xDADC90", Offset = "0xDADC90", VA = "0xDADC90")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xDADDD4", Offset = "0xDADDD4", VA = "0xDADDD4")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xDAE03C", Offset = "0xDAE03C", VA = "0xDAE03C")]
		public void Pressed()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xDAE094", Offset = "0xDAE094", VA = "0xDAE094")]
		public void Unpressed()
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xDAE0B0", Offset = "0xDAE0B0", VA = "0xDAE0B0")]
		public void Unlock()
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xDAE10C", Offset = "0xDAE10C", VA = "0xDAE10C")]
		public PhysicsGadgetButton()
		{
		}
	}
	[Token(Token = "0x2000268")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class PhysicsGadgetConfigurableLimitReader : MonoBehaviour
	{
		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool invertValue;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ConfigurableJoint joint;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Vector3 axisPos;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float value;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 limitAxis;

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xDADCC8", Offset = "0xDADCC8", VA = "0xDADCC8")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xDADEC4", Offset = "0xDADEC4", VA = "0xDADEC4")]
		public float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xDAE12C", Offset = "0xDAE12C", VA = "0xDAE12C")]
		public PhysicsGadgetConfigurableLimitReader()
		{
		}
	}
	[Token(Token = "0x2000269")]
	[RequireComponent(typeof(HingeJoint))]
	public class PhysicsGadgetHingeAngleReader : MonoBehaviour
	{
		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool invertValue;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HingeJoint joint;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float value;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion startRot;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion deltaParentRotation;

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xDAE140", Offset = "0xDAE140", VA = "0xDAE140")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xDAE1C0", Offset = "0xDAE1C0", VA = "0xDAE1C0")]
		public float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xDAE2B8", Offset = "0xDAE2B8", VA = "0xDAE2B8")]
		public PhysicsGadgetHingeAngleReader()
		{
		}
	}
	[Token(Token = "0x200026A")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class PhysicsGadgetJoystick : MonoBehaviour
	{
		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool invertX;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool invertY;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 xRange;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 zRange;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 value;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 jointRotation;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody body;

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xDAE2CC", Offset = "0xDAE2CC", VA = "0xDAE2CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xDAE35C", Offset = "0xDAE35C", VA = "0xDAE35C")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xDAE464", Offset = "0xDAE464", VA = "0xDAE464")]
		public Vector2 GetValue()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xDAE4E0", Offset = "0xDAE4E0", VA = "0xDAE4E0")]
		public PhysicsGadgetJoystick()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class PhysicsGadgetLever : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnMax will be called at 0.9, OnMin at -0.9, and OnMiddle at -0.1 or 0.1")]
		[Min(0.01f)]
		public float threshold;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent OnMax;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnMid;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent OnMin;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool min;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool max;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool mid;

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xDAE4F4", Offset = "0xDAE4F4", VA = "0xDAE4F4")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xDAE614", Offset = "0xDAE614", VA = "0xDAE614")]
		private void Max()
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xDAE658", Offset = "0xDAE658", VA = "0xDAE658")]
		private void Mid()
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xDAE634", Offset = "0xDAE634", VA = "0xDAE634")]
		private void Min()
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xDAE67C", Offset = "0xDAE67C", VA = "0xDAE67C")]
		public PhysicsGadgetLever()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class PhysicsGadgetSlider : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnMax will be called at 0.9, OnMin at -0.9, and OnMiddle at -0.1 or 0.1")]
		[Min(0.01f)]
		public float threshold;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent OnMax;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent OnMid;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnMin;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool min;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool max;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool mid;

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xDAE69C", Offset = "0xDAE69C", VA = "0xDAE69C")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xDAE7BC", Offset = "0xDAE7BC", VA = "0xDAE7BC")]
		private void Max()
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xDAE800", Offset = "0xDAE800", VA = "0xDAE800")]
		private void Mid()
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xDAE7DC", Offset = "0xDAE7DC", VA = "0xDAE7DC")]
		private void Min()
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xDAE824", Offset = "0xDAE824", VA = "0xDAE824")]
		public PhysicsGadgetSlider()
		{
		}
	}
	[Token(Token = "0x200026D")]
	[RequireComponent(typeof(Grabbable))]
	[HelpURL("https://www.notion.so/Distance-Grabbing-19e1d18eb7724a278b42b905ba813713")]
	public class DistanceGrabbable : MonoBehaviour
	{
		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pull")]
		public bool instantPull;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Velocity Shoot")]
		[Range(0.4f, 1.1f)]
		[Tooltip("Use this to adjust the angle of the arch that the gameobject follows while shooting towards your hand.")]
		[HideIf("instantPull")]
		public float archMultiplier;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Slow down or speed up gravitation to your liking.")]
		[HideIf("instantPull")]
		public float gravitationVelocity;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Rotation")]
		[Tooltip("This enables rotation which makes the gameobject orient to the rotation of you hand as it moves through the air. All below rotation variables have no use when this is false.")]
		[HideIf("instantPull")]
		public bool rotate;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Speed that the object orients to the rotation of your hand.")]
		[HideIf("instantPull")]
		public float rotationSpeed;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AutoToggleHeader("Enable Highlighting", 0, 0)]
		[Tooltip("Whether or not to ignore all highlights include default highlights on HandPointGrab")]
		public bool ignoreHighlights;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Highlight targeted material to use - defaults to HandPointGrab materials if none")]
		[EnableIf("ignoreHighlights")]
		public Material targetedMaterial;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[EnableIf("ignoreHighlights")]
		[Tooltip("Highlight selected material to use - defaults to HandPointGrab materials if none")]
		public Material selectedMaterial;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent OnPull;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ShowIf("showEvents")]
		[Tooltip("Called when the object has been targeted/aimed at by the pointer")]
		[Space]
		public UnityHandGrabEvent StartTargeting;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopTargeting;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ShowIf("showEvents")]
		[Tooltip("Called when the object has been selected before being pulled or flicked")]
		[Space]
		public UnityHandGrabEvent StartSelecting;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopSelecting;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HandGrabEvent OnPullCanceled;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal Grabbable grabbable;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform target;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 calculatedNecessaryVelocity;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool gravitationEnabled;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		private bool gravitationMethodBegun;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
		private bool pullStarted;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody body;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float timePassedSincePull;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 lastGravitationVelocity;

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xDAE84C", Offset = "0xDAE84C", VA = "0xDAE84C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xDAE8C4", Offset = "0xDAE8C4", VA = "0xDAE8C4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xDAEA40", Offset = "0xDAEA40", VA = "0xDAEA40")]
		private void FollowHandRotation()
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xDAEB20", Offset = "0xDAEB20", VA = "0xDAEB20")]
		private void GravitateTowardsHand()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xDAE978", Offset = "0xDAE978", VA = "0xDAE978")]
		private void InitialVelocityPushToHand()
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xDAED58", Offset = "0xDAED58", VA = "0xDAED58")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xDAECE8", Offset = "0xDAECE8", VA = "0xDAECE8")]
		private Vector3 CalculateTrajectoryVelocity(Vector3 origin, Vector3 target, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xDAEDB8", Offset = "0xDAEDB8", VA = "0xDAEDB8")]
		public void SetTarget(Transform theObject)
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xDAED94", Offset = "0xDAED94", VA = "0xDAED94")]
		public void CancelTarget()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xDAEDDC", Offset = "0xDAEDDC", VA = "0xDAEDDC")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x200026E")]
	public enum HandGrabType
	{
		[Token(Token = "0x400114F")]
		Default,
		[Token(Token = "0x4001150")]
		HandToGrabbable,
		[Token(Token = "0x4001151")]
		GrabbableToHand
	}
	[Token(Token = "0x200026F")]
	[HelpURL("https://www.notion.so/Grabbables-9308c564e60848a882eb23e9778ee2b6")]
	public class Grabbable : GrabbableBase
	{
		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("This will copy the given grabbables settings to this grabbable when applied")]
		[OnValueChanged("EditorCopyGrabbable")]
		public Grabbable CopySettings;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Whether or not this can be grabbed with more than one hand")]
		[Header("Grab Settings")]
		public bool singleHandOnly;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		[Tooltip("if false single handed items cannot be passes back and forth on grab")]
		[ShowIf("singleHandOnly")]
		public bool allowHeldSwapping;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		[Tooltip("Will the item automatically return the hand on grab - good for saved poses, bad for heavy things")]
		public bool instantGrab;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		[Tooltip("Experimental - ignores weight of held object while held")]
		public bool ignoreWeight;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("Creates an offset an grab so the hand will not return to the hand on grab - Good for statically jointed grabbable objects")]
		public bool maintainGrabOffset;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		[Tooltip("This will NOT parent the object under the hands on grab. This will parent the object to the parents of the hand, which allow you to move the hand parent object smoothly while holding an item, but will also allow you to move items that are very heavy - recommended for all objects that aren't very heavy or jointed to other rigidbodies")]
		public bool parentOnGrab;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[FormerlySerializedAs("throwMultiplyer")]
		[Tooltip("How much to multiply throw by for this grabbable when releasing - 0-1 for no or reduced throw strength")]
		[Header("Release Settings")]
		public float throwPower;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("The required force to break the fixedJoint\n Turn this to \"infinity\" to disable (Might cause jitter)\nIdeal value depends on hand mass and velocity settings")]
		public float jointBreakForce;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AutoToggleHeader("Show Advanced", 0, 0)]
		public bool showAdvancedSettings;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("Which hand this can be held by")]
		[ShowIf("showAdvancedSettings")]
		public HandGrabType grabType;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("Which hand this can be held by")]
		public HandType handType;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Tooltip("Adds and links a GrabbableChild to each child with a collider on start - So the hand can grab them")]
		[ShowIf("showAdvancedSettings")]
		public bool makeChildrenGrabbable;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		[Tooltip("Whether or not the break call made only when holding with multiple hands - if this is false the break event can be called by forcing an object into a static collider")]
		[ShowIf("showAdvancedSettings")]
		public bool pullApartBreakOnly;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Space]
		[ShowIf("showAdvancedSettings")]
		[Min(0f)]
		[Tooltip("The joint that connects the hand and the grabbable. Defaults to the joint in AutoHand/Resources/DefaultJoint.prefab if empty")]
		public ConfigurableJoint customGrabJoint;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The number of seconds that the hand collision should ignore the released object\n (Good for increased placement precision and resolves clipping errors)")]
		[Min(0f)]
		[ShowIf("showAdvancedSettings")]
		public float ignoreReleaseTime;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Min(0f)]
		[Tooltip("I.E. Grab Prioirty - BIGGER IS BETTER - divides highlight distance by this when calculating which object to grab. Hands always grab closest object to palm")]
		[ShowIf("showAdvancedSettings")]
		public float grabPriorityWeight;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Space]
		[Tooltip("For the special use case of having grabbable objects with physics jointed peices move properly while being held")]
		[ShowIf("showAdvancedSettings")]
		public List<Rigidbody> jointedBodies;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("For the special use case of having things connected to the grabbable that the hand should ignore while being held (good for doors and drawers) -> for always active use the [GrabbableIgnoreHands] Component")]
		[ShowIf("showAdvancedSettings")]
		public List<Collider> heldIgnoreColliders;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[ShowIf("showEvents")]
		[Space]
		public UnityHandGrabEvent onGrab;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent onRelease;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AutoToggleHeader("Show Advanced Events", 0, 0)]
		public bool showAdvancedEvents;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Space]
		[Space]
		[ShowIf("showAdvancedEvents")]
		public UnityHandGrabEvent onSqueeze;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[ShowIf("showAdvancedEvents")]
		public UnityHandGrabEvent onUnsqueeze;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[ShowIf("showAdvancedEvents")]
		[Space]
		[Space]
		public UnityHandGrabEvent onHighlight;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[ShowIf("showAdvancedEvents")]
		public UnityHandGrabEvent onUnhighlight;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[Space]
		[Space]
		[ShowIf("showAdvancedEvents")]
		public UnityHandGrabEvent OnJointBreak;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[ShowIf("showAdvancedSettings")]
		[HideInInspector]
		[Tooltip("Lock hand in place on grab (This is a legacy setting, set hand kinematic on grab/release instead)")]
		public bool lockHandOnGrab;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[ShowIf("showAdvancedSettings")]
		[HideInInspector]
		[Tooltip("Offsets the grabbable by this much when being held")]
		public Vector3 heldPositionOffset;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[ShowIf("showAdvancedSettings")]
		[HideInInspector]
		[Tooltip("Offsets the grabbable by this many degrees when being held")]
		public Vector3 heldRotationOffset;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public HandGrabEvent OnBeforeGrabEvent;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public HandGrabEvent OnGrabEvent;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public HandGrabEvent OnReleaseEvent;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public HandGrabEvent OnJointBreakEvent;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public HandGrabEvent OnSqueezeEvent;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public HandGrabEvent OnUnsqueezeEvent;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public HandGrabEvent OnHighlightEvent;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public HandGrabEvent OnUnhighlightEvent;

		[Token(Token = "0x17000134")]
		public float throwMultiplyer
		{
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0xDAEE04", Offset = "0xDAEE04", VA = "0xDAEE04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F72")]
			[Address(RVA = "0xDAEE0C", Offset = "0xDAEE0C", VA = "0xDAEE0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		public bool wasForceReleased
		{
			[Token(Token = "0x6000F73")]
			[Address(RVA = "0xDAEE14", Offset = "0xDAEE14", VA = "0xDAEE14")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F74")]
			[Address(RVA = "0xDAEE1C", Offset = "0xDAEE1C", VA = "0xDAEE1C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000136")]
		public Hand lastHeldBy
		{
			[Token(Token = "0x6000F75")]
			[Address(RVA = "0xDAEE28", Offset = "0xDAEE28", VA = "0xDAEE28")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F76")]
			[Address(RVA = "0xDAEE30", Offset = "0xDAEE30", VA = "0xDAEE30")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xDAEE40", Offset = "0xDAEE40", VA = "0xDAEE40", Slot = "8")]
		protected new virtual void Awake()
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xDAF324", Offset = "0xDAF324", VA = "0xDAF324", Slot = "9")]
		protected new virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xDAF428", Offset = "0xDAF428", VA = "0xDAF428", Slot = "10")]
		public virtual void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xDAF500", Offset = "0xDAF500", VA = "0xDAF500", Slot = "11")]
		public virtual void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xDAF630", Offset = "0xDAF630", VA = "0xDAF630", Slot = "12")]
		internal virtual void Highlight(Hand hand, [Optional] Material customMat)
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xDAFA84", Offset = "0xDAFA84", VA = "0xDAFA84", Slot = "13")]
		internal virtual void Unhighlight(Hand hand)
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xDAFB70", Offset = "0xDAFB70", VA = "0xDAFB70", Slot = "14")]
		internal virtual void OnSqueeze(Hand hand)
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xDAFBF4", Offset = "0xDAFBF4", VA = "0xDAFBF4", Slot = "15")]
		internal virtual void OnUnsqueeze(Hand hand)
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xDAFC78", Offset = "0xDAFC78", VA = "0xDAFC78", Slot = "16")]
		internal virtual void OnBeforeGrab(Hand hand)
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xDAFDD0", Offset = "0xDAFDD0", VA = "0xDAFDD0", Slot = "17")]
		internal virtual void OnGrab(Hand hand)
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xDB02D0", Offset = "0xDB02D0", VA = "0xDB02D0", Slot = "18")]
		public virtual bool CanGrab(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xDB0348", Offset = "0xDB0348", VA = "0xDB0348", Slot = "19")]
		internal virtual void OnRelease(Hand hand)
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xDB0638", Offset = "0xDB0638", VA = "0xDB0638", Slot = "20")]
		internal virtual void BreakHandConnection(Hand hand)
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xDB0A10", Offset = "0xDB0A10", VA = "0xDB0A10", Slot = "21")]
		public virtual void HandsRelease()
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xDB0AA4", Offset = "0xDB0AA4", VA = "0xDB0AA4", Slot = "22")]
		public virtual void HandRelease(Hand hand)
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xDB0B24", Offset = "0xDB0B24", VA = "0xDB0B24", Slot = "23")]
		public virtual void ForceHandsRelease()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xDB0BBC", Offset = "0xDB0BBC", VA = "0xDB0BBC", Slot = "24")]
		public virtual void ForceHandRelease(Hand hand)
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xDB0C48", Offset = "0xDB0C48", VA = "0xDB0C48", Slot = "25")]
		public virtual void OnHandJointBreak(Hand hand)
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xDB0E00", Offset = "0xDB0E00", VA = "0xDB0E00")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xDB0E48", Offset = "0xDB0E48", VA = "0xDB0E48")]
		public Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xDB0F80", Offset = "0xDB0F80", VA = "0xDB0F80")]
		public List<Hand> GetHeldBy()
		{
			return null;
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xDB0F88", Offset = "0xDB0F88", VA = "0xDB0F88")]
		public int HeldCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xDB0FD0", Offset = "0xDB0FD0", VA = "0xDB0FD0")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xDB1020", Offset = "0xDB1020", VA = "0xDB1020")]
		public bool BeingGrabbed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xDB1028", Offset = "0xDB1028", VA = "0xDB1028")]
		public void PlayHapticVibration(float duration = 0.2f)
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xDB1184", Offset = "0xDB1184", VA = "0xDB1184")]
		public void PlayHapticVibration(float duration, float amp = 0.5f)
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xDB12E8", Offset = "0xDB12E8", VA = "0xDB12E8", Slot = "26")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xDAC63C", Offset = "0xDAC63C", VA = "0xDAC63C")]
		public void AddJointedBody(Rigidbody body)
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xDACAC0", Offset = "0xDACAC0", VA = "0xDACAC0")]
		public void RemoveJointedBody(Rigidbody body)
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xDB1400", Offset = "0xDB1400", VA = "0xDB1400")]
		public void DoDestroy()
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xDB146C", Offset = "0xDB146C", VA = "0xDB146C")]
		public bool PhysicsMovementOnly()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xDAEF70", Offset = "0xDAEF70", VA = "0xDAEF70")]
		private void MakeChildrenGrabbable()
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xDB1388", Offset = "0xDB1388", VA = "0xDB1388")]
		private void MakeChildrenUngrabbable()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xDB0880", Offset = "0xDB0880", VA = "0xDB0880")]
		internal void ResetGrabbableAfterRlease()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xDB180C", Offset = "0xDB180C", VA = "0xDB180C")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x2000270")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableAdvancedEvents : MonoBehaviour
	{
		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityHandGrabEvent OnFirstGrab;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityHandGrabEvent OnLastRelease;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable grab;

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xDB1AE4", Offset = "0xDB1AE4", VA = "0xDB1AE4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xDB1C8C", Offset = "0xDB1C8C", VA = "0xDB1C8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xDB1E3C", Offset = "0xDB1E3C", VA = "0xDB1E3C")]
		public void Grab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xDB1EC8", Offset = "0xDB1EC8", VA = "0xDB1EC8")]
		public void Release(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xDB1F50", Offset = "0xDB1F50", VA = "0xDB1F50")]
		public GrabbableAdvancedEvents()
		{
		}
	}
	[Token(Token = "0x2000271")]
	public class GrabbableBase : MonoBehaviour
	{
		[Token(Token = "0x2000273")]
		[CompilerGenerated]
		private sealed class <IgnoreHandCollision>d__39 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001199")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400119A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400119B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableBase <>4__this;

			[Token(Token = "0x400119C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Hand hand;

			[Token(Token = "0x400119D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float time;

			[Token(Token = "0x17000139")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FBB")]
				[Address(RVA = "0xCBFFE0", Offset = "0xCBFFE0", VA = "0xCBFFE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FBD")]
				[Address(RVA = "0xCC0028", Offset = "0xCC0028", VA = "0xCC0028", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FB8")]
			[Address(RVA = "0xCBFEAC", Offset = "0xCBFEAC", VA = "0xCBFEAC")]
			[DebuggerHidden]
			public <IgnoreHandCollision>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0xCBFED4", Offset = "0xCBFED4", VA = "0xCBFED4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0xCBFED8", Offset = "0xCBFED8", VA = "0xCBFED8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0xCBFFE8", Offset = "0xCBFFE8", VA = "0xCBFFE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Grabbable", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The physics body to connect this colliders grab to - if left empty will default to local body")]
		public Rigidbody body;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A copy of the mesh will be created and slighly scaled and this material will be applied to create a highlight effect with options")]
		public Material hightlightMaterial;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public bool isGrabbable;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlacePoint _placePoint;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected List<Hand> heldBy;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool hightlighting;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected GameObject highlightObj;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected PlacePoint lastPlacePoint;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Transform originalParent;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Vector3 lastCenterOfMassPos;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Quaternion lastCenterOfMassRot;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected CollisionDetectionMode detectionMode;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected internal bool beingGrabbed;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		protected bool heldBodyJointed;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		protected bool wasIsGrabbable;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		protected bool beingDestroyed;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected int originalLayer;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Hand lastHand;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Coroutine resetLayerRoutine;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected List<GrabbableChild> grabChildren;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected List<Transform> jointedParents;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Dictionary<Transform, GrabbablePoseCombiner> poses;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private CollisionTracker _collisionTracker;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected List<Collider> grabColliders;

		[Token(Token = "0x17000137")]
		public PlacePoint placePoint
		{
			[Token(Token = "0x6000FA1")]
			[Address(RVA = "0xDB1F58", Offset = "0xDB1F58", VA = "0xDB1F58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0xDB1F60", Offset = "0xDB1F60", VA = "0xDB1F60")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public CollisionTracker collisionTracker
		{
			[Token(Token = "0x6000FA3")]
			[Address(RVA = "0xDB0218", Offset = "0xDB0218", VA = "0xDB0218")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0xDB1F68", Offset = "0xDB1F68", VA = "0xDB1F68")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xDAEFE8", Offset = "0xDAEFE8", VA = "0xDAEFE8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xDB2170", Offset = "0xDB2170", VA = "0xDB2170", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xDAF390", Offset = "0xDAF390", VA = "0xDAF390", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xDB2274", Offset = "0xDB2274", VA = "0xDB2274", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xDB22B8", Offset = "0xDB22B8", VA = "0xDB22B8")]
		internal void SetPlacePoint(PlacePoint point)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0xDB22C0", Offset = "0xDB22C0", VA = "0xDB22C0")]
		internal void SetGrabbableChild(GrabbableChild child)
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xDB23A8", Offset = "0xDB23A8", VA = "0xDB23A8")]
		protected int GetOriginalLayer()
		{
			return default(int);
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xDB23B0", Offset = "0xDB23B0", VA = "0xDB23B0")]
		internal void SetLayerRecursive(Transform obj, int oldLayer, int newLayer)
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xDB2554", Offset = "0xDB2554", VA = "0xDB2554")]
		internal void SetLayerRecursive(Transform obj, int newLayer)
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xDAFD30", Offset = "0xDAFD30", VA = "0xDAFD30")]
		[IteratorStateMachine(typeof(<IgnoreHandCollision>d__39))]
		protected IEnumerator IgnoreHandCollision(float time, Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xDB25A4", Offset = "0xDB25A4", VA = "0xDB25A4")]
		public bool GetSavedPose(Transform poseTarget, out GrabbablePoseCombiner pose)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xDB2664", Offset = "0xDB2664", VA = "0xDB2664")]
		public int HeldCollisions()
		{
			return default(int);
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xDB26B8", Offset = "0xDB26B8", VA = "0xDB26B8")]
		public void IgnoreHand(Hand hand, bool ignore)
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xDB2008", Offset = "0xDB2008", VA = "0xDB2008")]
		private void SetCollidersRecursive(Transform obj)
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xDB2820", Offset = "0xDB2820", VA = "0xDB2820")]
		protected void OriginalCollisionDetection()
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xDB28CC", Offset = "0xDB28CC", VA = "0xDB28CC")]
		public void DebugBreak()
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xDB1914", Offset = "0xDB1914", VA = "0xDB1914")]
		public GrabbableBase()
		{
		}
	}
	[Token(Token = "0x2000274")]
	[DefaultExecutionOrder(1)]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabbable grabParent;

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xCC0030", Offset = "0xCC0030", VA = "0xCC0030")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xCC0098", Offset = "0xCC0098", VA = "0xCC0098")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x2000275")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableCollisionHaptics : MonoBehaviour
	{
		[Token(Token = "0x2000276")]
		[CompilerGenerated]
		private sealed class <PlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableCollisionHaptics <>4__this;

			[Token(Token = "0x1700013B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FC9")]
				[Address(RVA = "0xCC0690", Offset = "0xCC0690", VA = "0xCC0690", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FCB")]
				[Address(RVA = "0xCC06D8", Offset = "0xCC06D8", VA = "0xCC06D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0xCC04D4", Offset = "0xCC04D4", VA = "0xCC04D4")]
			[DebuggerHidden]
			public <PlayBuffer>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0xCC05BC", Offset = "0xCC05BC", VA = "0xCC05BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0xCC05C0", Offset = "0xCC05C0", VA = "0xCC05C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0xCC0698", Offset = "0xCC0698", VA = "0xCC0698", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000277")]
		[CompilerGenerated]
		private sealed class <HapticPlayBuffer>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableCollisionHaptics <>4__this;

			[Token(Token = "0x40011B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x1700013D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FCF")]
				[Address(RVA = "0xCC07B4", Offset = "0xCC07B4", VA = "0xCC07B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FD1")]
				[Address(RVA = "0xCC07FC", Offset = "0xCC07FC", VA = "0xCC07FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0xCC04FC", Offset = "0xCC04FC", VA = "0xCC04FC")]
			[DebuggerHidden]
			public <HapticPlayBuffer>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000FCD")]
			[Address(RVA = "0xCC06E0", Offset = "0xCC06E0", VA = "0xCC06E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FCE")]
			[Address(RVA = "0xCC06E4", Offset = "0xCC06E4", VA = "0xCC06E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FD0")]
			[Address(RVA = "0xCC07BC", Offset = "0xCC07BC", VA = "0xCC07BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The layers that cause the sound to play")]
		public LayerMask collisionTriggers;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float hapticAmp;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float velocityAmp;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float repeatDelay;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxDuration;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityAmpCurve;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityDurationCurve;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabbable grab;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody body;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool canPlay;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine playRoutine;

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xCC00A0", Offset = "0xCC00A0", VA = "0xCC00A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xCC01D0", Offset = "0xCC01D0", VA = "0xCC01D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xCC01E4", Offset = "0xCC01E4", VA = "0xCC01E4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xCC0460", Offset = "0xCC0460", VA = "0xCC0460")]
		[IteratorStateMachine(typeof(<PlayBuffer>d__14))]
		private IEnumerator PlayBuffer()
		{
			return null;
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xCC014C", Offset = "0xCC014C", VA = "0xCC014C")]
		[IteratorStateMachine(typeof(<HapticPlayBuffer>d__15))]
		private IEnumerator HapticPlayBuffer(float time)
		{
			return null;
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xCC0524", Offset = "0xCC0524", VA = "0xCC0524")]
		public GrabbableCollisionHaptics()
		{
		}
	}
	[Token(Token = "0x2000278")]
	public class GrabbablePoint : GrabbablePointBase
	{
		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform rightPoint;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftPoint;

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xCC0804", Offset = "0xCC0804", VA = "0xCC0804", Slot = "4")]
		public override bool Align(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xCC0978", Offset = "0xCC0978", VA = "0xCC0978")]
		public GrabbablePoint()
		{
		}
	}
	[Token(Token = "0x2000279")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbablePointBase : MonoBehaviour
	{
		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xCC0988", Offset = "0xCC0988", VA = "0xCC0988", Slot = "4")]
		public virtual bool Align(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xCC0980", Offset = "0xCC0980", VA = "0xCC0980")]
		public GrabbablePointBase()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public class GrabbablePoints : GrabbablePointBase
	{
		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] leftPoints;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform[] rightPoints;

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xCC0990", Offset = "0xCC0990", VA = "0xCC0990", Slot = "4")]
		public override bool Align(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xCC0A48", Offset = "0xCC0A48", VA = "0xCC0A48")]
		private Transform ClosestGrabPoint(Transform[] points, Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xCC0D94", Offset = "0xCC0D94", VA = "0xCC0D94")]
		public GrabbablePoints()
		{
		}
	}
	[Token(Token = "0x200027B")]
	[HelpURL("https://www.notion.so/Grabbable-Poses-868c1fa0590542a0b5b7937b5feb6b0d")]
	public class GrabbablePose : MonoBehaviour
	{
		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Grabbable Pose", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Purely for organizational purposes in the editor")]
		public string poseName;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This value should match the ")]
		public int poseIndex;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public bool showEditorTools;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Scriptable options NOT REQUIRED -> Create scriptable throught [Auto Hand/Custom Pose]")]
		[HideInInspector]
		public HandPoseScriptable poseScriptable;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[Tooltip("Used to pose for the grabbable")]
		public Hand editorHand;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public HandPoseData rightPose;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool rightPoseSet;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public HandPoseData leftPose;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public bool leftPoseSet;

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xCC0D9C", Offset = "0xCC0D9C", VA = "0xCC0D9C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xCC0E34", Offset = "0xCC0E34", VA = "0xCC0E34")]
		public bool CanSetPose(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xCC0E7C", Offset = "0xCC0E7C", VA = "0xCC0E7C", Slot = "5")]
		public virtual HandPoseData GetHandPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xCC0F44", Offset = "0xCC0F44", VA = "0xCC0F44", Slot = "6")]
		public virtual void SetHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xCC0FC4", Offset = "0xCC0FC4", VA = "0xCC0FC4")]
		public HandPoseData GetNewPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xCC1484", Offset = "0xCC1484", VA = "0xCC1484")]
		public bool HasPose(bool left)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xCC1538", Offset = "0xCC1538", VA = "0xCC1538")]
		public GrabbablePose()
		{
		}
	}
	[Token(Token = "0x200027D")]
	[HelpURL("https://www.notion.so/Grabbable-Poses-868c1fa0590542a0b5b7937b5feb6b0d")]
	public class GrabbablePoseAdvanced : GrabbablePose
	{
		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Usually this can be left empty, used to create a different center point if the objects transform isn't ceneterd for the prefered rotation/movement axis")]
		public Transform centerObject;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("You want this set so the disc gizmo is around the axis you want the hand to rotate, or that the line is straight through the axis you want to move")]
		[Space]
		public Vector3 up;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Space]
		public bool useInvertPose;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The minimum angle rotation around the included directions")]
		[Space]
		public int minAngle;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("The maximum angle rotation around the included directions")]
		public int maxAngle;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The minimum distance allowed from the saved posed along the included directions")]
		[Space]
		public float maxRange;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("The maximum distance allowed from the saved posed along the included directions")]
		public float minRange;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Helps test pose by setting the angle of the editor hand, REQUIRES GIZMOS ENABLED")]
		[Header("Requires Gizmos Enabled")]
		public int testAngle;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Tooltip("Helps test pose by setting the range position of the editor hand, REQUIRES GIZMOS ENABLED")]
		public float testRange;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int lastAngle;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float lastRange;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector3 pregrabPos;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion pregrabRot;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform tempContainer;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Transform handMatch;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Transform getTransform;

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xCC1718", Offset = "0xCC1718", VA = "0xCC1718", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xCC174C", Offset = "0xCC174C", VA = "0xCC174C", Slot = "5")]
		public override HandPoseData GetHandPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xCC1B24", Offset = "0xCC1B24", VA = "0xCC1B24")]
		public Quaternion GetClosestRotation(Hand hand, Vector3 up, bool addInverse)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xCC2618", Offset = "0xCC2618", VA = "0xCC2618")]
		public Vector3 GetClosestPosition(Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xCC29FC", Offset = "0xCC29FC", VA = "0xCC29FC")]
		public HandPoseData GetHandPoseData(Hand hand, int angle, float range)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xCC1AA4", Offset = "0xCC1AA4", VA = "0xCC1AA4")]
		private Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xCC2D54", Offset = "0xCC2D54", VA = "0xCC2D54")]
		public GrabbablePoseAdvanced()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public class GrabbablePoseCombiner : MonoBehaviour
	{
		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float positionWeight;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotationWeight;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrabbablePose[] poses;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HandPoseData pose;

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xCC2DC0", Offset = "0xCC2DC0", VA = "0xCC2DC0")]
		public void Start()
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xCC2E18", Offset = "0xCC2E18", VA = "0xCC2E18")]
		public bool CanSetPose(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xCC2E8C", Offset = "0xCC2E8C", VA = "0xCC2E8C")]
		public GrabbablePose GetClosestPose(Hand hand, Grabbable grab)
		{
			return null;
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xCC337C", Offset = "0xCC337C", VA = "0xCC337C")]
		public GrabbablePoseCombiner()
		{
		}
	}
	[Token(Token = "0x200027F")]
	[RequireComponent(typeof(Rigidbody), typeof(Grabbable))]
	public class GrabbableThrowEvent : MonoBehaviour
	{
		[Token(Token = "0x2000280")]
		[CompilerGenerated]
		private sealed class <ResetThrown>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableThrowEvent <>4__this;

			[Token(Token = "0x1700013F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FF8")]
				[Address(RVA = "0xCC3B38", Offset = "0xCC3B38", VA = "0xCC3B38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000140")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FFA")]
				[Address(RVA = "0xCC3B80", Offset = "0xCC3B80", VA = "0xCC3B80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FF5")]
			[Address(RVA = "0xCC3868", Offset = "0xCC3868", VA = "0xCC3868")]
			[DebuggerHidden]
			public <ResetThrown>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0xCC3A6C", Offset = "0xCC3A6C", VA = "0xCC3A6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0xCC3A70", Offset = "0xCC3A70", VA = "0xCC3A70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FF9")]
			[Address(RVA = "0xCC3B40", Offset = "0xCC3B40", VA = "0xCC3B40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The velocity magnitude required on collision to cause the break event")]
		public float breakVelocity;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The layers that will cause this grabbale to break")]
		public LayerMask collisionLayers;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent OnBreak;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rb;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool thrown;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine resetThrowing;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float throwTime;

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xCC338C", Offset = "0xCC338C", VA = "0xCC338C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xCC341C", Offset = "0xCC341C", VA = "0xCC341C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xCC3634", Offset = "0xCC3634", VA = "0xCC3634")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xCC370C", Offset = "0xCC370C", VA = "0xCC370C")]
		private void OnReleased(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xCC37F4", Offset = "0xCC37F4", VA = "0xCC37F4")]
		[IteratorStateMachine(typeof(<ResetThrown>d__12))]
		private IEnumerator ResetThrown()
		{
			return null;
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xCC3890", Offset = "0xCC3890", VA = "0xCC3890")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xCC3A18", Offset = "0xCC3A18", VA = "0xCC3A18")]
		private void Break()
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xCC3A34", Offset = "0xCC3A34", VA = "0xCC3A34")]
		public GrabbableThrowEvent()
		{
		}
	}
	[Token(Token = "0x2000281")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabLock : MonoBehaviour
	{
		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand.Released() must be called elsewhere")]
		[Header("Use this script to prevent grabbable release")]
		public UnityEvent OnGrabPressed;

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xCC3B88", Offset = "0xCC3B88", VA = "0xCC3B88")]
		public GrabLock()
		{
		}
	}
	[Token(Token = "0x2000282")]
	public delegate void PlacePointEvent(PlacePoint point, Grabbable grabbable);
	[Token(Token = "0x2000283")]
	[HelpURL("https://www.notion.so/Place-Points-c877798acb0347c1bed5acedd28f5702")]
	[RequireComponent(typeof(SphereCollider))]
	public class PlacePoint : MonoBehaviour
	{
		[Token(Token = "0x2000284")]
		[CompilerGenerated]
		private sealed class <HighlighSafetyCheck>d__44 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlacePoint <>4__this;

			[Token(Token = "0x17000144")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600101A")]
				[Address(RVA = "0xCC51A4", Offset = "0xCC51A4", VA = "0xCC51A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000145")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600101C")]
				[Address(RVA = "0xCC51EC", Offset = "0xCC51EC", VA = "0xCC51EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001017")]
			[Address(RVA = "0xCC3EDC", Offset = "0xCC3EDC", VA = "0xCC3EDC")]
			[DebuggerHidden]
			public <HighlighSafetyCheck>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x6001018")]
			[Address(RVA = "0xCC5078", Offset = "0xCC5078", VA = "0xCC5078", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001019")]
			[Address(RVA = "0xCC507C", Offset = "0xCC507C", VA = "0xCC507C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600101B")]
			[Address(RVA = "0xCC51AC", Offset = "0xCC51AC", VA = "0xCC51AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Place Point", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If used, the place point will only accept this grabbable as a target")]
		public Grabbable matchTarget;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Will allow placement for any grabbable with a name containing this array of strings, leave blank for any grabbable allowed")]
		public string[] placeNames;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float placeRadius;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("This will make the point place the object as soon as it enters the radius, instead of on release")]
		public bool forcePlace;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Tooltip("Whether or not the grabbable should be disabled on placement")]
		public bool disableGrabOnPlace;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		[AutoToggleHeader("Use Kinematic", 0, 0)]
		[Tooltip("Makes the object being placedObject kinematic")]
		public bool makePlacedKinematic;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The rigidbody to attach the placed grabbable to - leave empty means no joint")]
		[Space]
		[HideIf("makePlacedKinematic")]
		public Rigidbody placedJointLink;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideIf("makePlacedKinematic")]
		[FormerlySerializedAs("placedJointBreakForce")]
		public float jointBreakForce;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AutoToggleHeader("Show Advanced", 0, 0)]
		public bool showAdvanced;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[ShowIf("showAdvanced")]
		[Tooltip("Snaps an object to the point at start, leave empty for no target")]
		public Grabbable startPlaced;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The object will snap to this point instead of the place point on place")]
		[ShowIf("showAdvanced")]
		public Transform placedOffset;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("This will make the point place the object as soon as it enters the radius, instead of on release")]
		[ShowIf("showAdvanced")]
		public bool parentOnPlace;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Tooltip("Whether or not to only allow placement of an object while it's being held (or released)")]
		[ShowIf("showAdvanced")]
		public bool heldPlaceOnly;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ShowIf("showAdvanced")]
		[Tooltip("Will prevent placement for any name containing this array of strings")]
		public string[] blacklistNames;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ShowIf("showEvents")]
		public UnityEvent OnPlace;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ShowIf("showEvents")]
		public UnityEvent OnRemove;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ShowIf("showEvents")]
		public UnityEvent OnHighlight;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ShowIf("showEvents")]
		public UnityEvent OnStopHighlight;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public PlacePointEvent OnPlaceEvent;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public PlacePointEvent OnRemoveEvent;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public PlacePointEvent OnHighlightEvent;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public PlacePointEvent OnStopHighlightEvent;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected FixedJoint joint;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected float removalDistance;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected Vector3 placePosition;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected SphereCollider col;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Transform originParent;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool placingFrame;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected CollisionDetectionMode placedObjDetectionMode;

		[Token(Token = "0x17000141")]
		public Grabbable highlightingObj
		{
			[Token(Token = "0x6001000")]
			[Address(RVA = "0xCC3D18", Offset = "0xCC3D18", VA = "0xCC3D18")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001001")]
			[Address(RVA = "0xCC3D20", Offset = "0xCC3D20", VA = "0xCC3D20")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public Grabbable placedObject
		{
			[Token(Token = "0x6001002")]
			[Address(RVA = "0xCC3D28", Offset = "0xCC3D28", VA = "0xCC3D28")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001003")]
			[Address(RVA = "0xCC3D30", Offset = "0xCC3D30", VA = "0xCC3D30")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public Grabbable lastPlacedObject
		{
			[Token(Token = "0x6001004")]
			[Address(RVA = "0xCC3D38", Offset = "0xCC3D38", VA = "0xCC3D38")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001005")]
			[Address(RVA = "0xCC3D40", Offset = "0xCC3D40", VA = "0xCC3D40")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xCC3D48", Offset = "0xCC3D48", VA = "0xCC3D48", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xCC3E68", Offset = "0xCC3E68", VA = "0xCC3E68")]
		[IteratorStateMachine(typeof(<HighlighSafetyCheck>d__44))]
		private IEnumerator HighlighSafetyCheck()
		{
			return null;
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xCC3F04", Offset = "0xCC3F04", VA = "0xCC3F04", Slot = "5")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xCC3F08", Offset = "0xCC3F08", VA = "0xCC3F08", Slot = "6")]
		public virtual bool CanPlace(Grabbable placeObj)
		{
			return default(bool);
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xCC40EC", Offset = "0xCC40EC", VA = "0xCC40EC", Slot = "7")]
		public virtual void Place(Grabbable placeObj)
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xCC4634", Offset = "0xCC4634", VA = "0xCC4634", Slot = "8")]
		public virtual void Remove(Grabbable placeObj)
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xCC48F0", Offset = "0xCC48F0", VA = "0xCC48F0", Slot = "9")]
		internal virtual void Highlight(Grabbable from)
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xCC4A10", Offset = "0xCC4A10", VA = "0xCC4A10")]
		private bool IsOverlapping(Grabbable from)
		{
			return default(bool);
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xCC4B74", Offset = "0xCC4B74", VA = "0xCC4B74", Slot = "10")]
		internal virtual void StopHighlight(Grabbable from)
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xCC4CAC", Offset = "0xCC4CAC", VA = "0xCC4CAC", Slot = "11")]
		public virtual void SetStartPlaced()
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xCC4D48", Offset = "0xCC4D48", VA = "0xCC4D48")]
		public Grabbable GetPlacedObject()
		{
			return null;
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xCC4D50", Offset = "0xCC4D50", VA = "0xCC4D50")]
		internal float Distance(Transform from)
		{
			return default(float);
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xCC4E58", Offset = "0xCC4E58", VA = "0xCC4E58", Slot = "12")]
		protected virtual void OnPlacedObjectGrabbed(Hand pHand, Grabbable pGrabbable)
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xCC4E8C", Offset = "0xCC4E8C", VA = "0xCC4E8C", Slot = "13")]
		protected virtual void OnPlacedObjectReleased(Hand pHand, Grabbable pGrabbable)
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xCC4EAC", Offset = "0xCC4EAC", VA = "0xCC4EAC", Slot = "14")]
		protected virtual void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xCC4F30", Offset = "0xCC4F30", VA = "0xCC4F30")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xCC5048", Offset = "0xCC5048", VA = "0xCC5048")]
		public PlacePoint()
		{
		}
	}
	[Token(Token = "0x2000285")]
	[DefaultExecutionOrder(1)]
	[RequireComponent(typeof(Rigidbody))]
	public class WeightlessFollower : MonoBehaviour
	{
		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Transform follow;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Transform follow1;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<Hand, Transform> heldMoveTo;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float followPositionStrength;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float followRotationStrength;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public float maxVelocity;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Grabbable grab;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Rigidbody body;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform moveTo;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float startMass;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float startDrag;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float startAngleDrag;

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xCC51F4", Offset = "0xCC51F4", VA = "0xCC51F4")]
		public void Start()
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xCC52E4", Offset = "0xCC52E4", VA = "0xCC52E4", Slot = "4")]
		public virtual void Set(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xCC59C8", Offset = "0xCC59C8", VA = "0xCC59C8", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xCC5BC0", Offset = "0xCC5BC0", VA = "0xCC5BC0", Slot = "6")]
		internal virtual void MoveTo()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xCC5FD0", Offset = "0xCC5FD0", VA = "0xCC5FD0", Slot = "7")]
		internal virtual void TorqueTo()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xCC64EC", Offset = "0xCC64EC", VA = "0xCC64EC")]
		public void RemoveFollow(Hand hand, Transform follow)
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xCC6804", Offset = "0xCC6804", VA = "0xCC6804")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xCC6A04", Offset = "0xCC6A04", VA = "0xCC6A04")]
		public WeightlessFollower()
		{
		}
	}
	[Token(Token = "0x2000286")]
	public class EditorHand : MonoBehaviour
	{
		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useEditorGUI;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrabbablePose grabbablePose;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Hand _hand;

		[Token(Token = "0x17000146")]
		public Hand hand
		{
			[Token(Token = "0x6001027")]
			[Address(RVA = "0xCC6B6C", Offset = "0xCC6B6C", VA = "0xCC6B6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xCC6C14", Offset = "0xCC6C14", VA = "0xCC6C14")]
		public EditorHand()
		{
		}
	}
	[Token(Token = "0x2000287")]
	[HelpURL("https://www.notion.so/Fingers-63ae83cda0b14a35b5ae15beeb51dc03")]
	public class Finger : MonoBehaviour
	{
		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This transfrom will represent the tip/stopper of the finger")]
		[Header("Tips")]
		public Transform tip;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This determines the radius of the spherecast check when bending fingers")]
		public float tipRadius;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This will offset the fingers bend (0 is no bend, 1 is full bend)")]
		[Range(0f, 1f)]
		public float bendOffset;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fingerSmoothSpeed;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public float secondaryOffset;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currBendOffset;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float bend;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		private Quaternion[] minGripRotPose;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		private Vector3[] minGripPosPose;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private Quaternion[] maxGripRotPose;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private Vector3[] maxGripPosPose;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		[SerializeField]
		private Transform[] fingerJoints;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float lastHitBend;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Collider[] results;

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xCC6C24", Offset = "0xCC6C24", VA = "0xCC6C24")]
		private void Update()
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xCC6CA4", Offset = "0xCC6CA4", VA = "0xCC6CA4")]
		public bool BendFingerUntilHit(int steps, int layermask)
		{
			return default(bool);
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xCC74E0", Offset = "0xCC74E0", VA = "0xCC74E0")]
		public bool UpdateFingerBend(float bend, int layermask)
		{
			return default(bool);
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xCC7744", Offset = "0xCC7744", VA = "0xCC7744")]
		public void UpdateFinger()
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xCC78CC", Offset = "0xCC78CC", VA = "0xCC78CC")]
		public void UpdateFinger(float bend)
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xCC7A58", Offset = "0xCC7A58", VA = "0xCC7A58")]
		public void SetFingerBend(float bend)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xCC6C28", Offset = "0xCC6C28", VA = "0xCC6C28")]
		private void SlowBend()
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xCC73F8", Offset = "0xCC73F8", VA = "0xCC73F8")]
		[ContextMenu("ResetBend")]
		public void ResetBend()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xCC7BE0", Offset = "0xCC7BE0", VA = "0xCC7BE0")]
		[ContextMenu("Grip")]
		public void Grip()
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xCC7CC8", Offset = "0xCC7CC8", VA = "0xCC7CC8")]
		public float GetLastHitBend()
		{
			return default(float);
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xCC7CD0", Offset = "0xCC7CD0", VA = "0xCC7CD0")]
		[ContextMenu("Set Open Finger Pose")]
		public void SetMinPose()
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xCC8010", Offset = "0xCC8010", VA = "0xCC8010")]
		[ContextMenu("Set Closed Finger Pose")]
		public void SetMaxPose()
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xCC8350", Offset = "0xCC8350", VA = "0xCC8350")]
		public bool IsMinPoseSaved()
		{
			return default(bool);
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xCC8374", Offset = "0xCC8374", VA = "0xCC8374")]
		public bool IsMaxPoseSaved()
		{
			return default(bool);
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xCC8398", Offset = "0xCC8398", VA = "0xCC8398")]
		public float GetCurrentBend()
		{
			return default(float);
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xCC83A4", Offset = "0xCC83A4", VA = "0xCC83A4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xCC8458", Offset = "0xCC8458", VA = "0xCC8458")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xCC85E8", Offset = "0xCC85E8", VA = "0xCC85E8")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x2000288")]
	[HelpURL("https://www.notion.so/Hands-967e36c2ab2945b2b0f75cea84624b2f")]
	public class Hand : HandBase
	{
		[Token(Token = "0x200028B")]
		[CompilerGenerated]
		private sealed class <HighlightUpdate>d__108 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001249")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400124A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400124B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x400124C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float timestep;

			[Token(Token = "0x1700014A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010A7")]
				[Address(RVA = "0xCCF12C", Offset = "0xCCF12C", VA = "0xCCF12C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010A9")]
				[Address(RVA = "0xCCF174", Offset = "0xCCF174", VA = "0xCCF174", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010A4")]
			[Address(RVA = "0xCCDC74", Offset = "0xCCDC74", VA = "0xCCDC74")]
			[DebuggerHidden]
			public <HighlightUpdate>d__108(int <>1__state)
			{
			}

			[Token(Token = "0x60010A5")]
			[Address(RVA = "0xCCF014", Offset = "0xCCF014", VA = "0xCCF014", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010A6")]
			[Address(RVA = "0xCCF018", Offset = "0xCCF018", VA = "0xCCF018", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010A8")]
			[Address(RVA = "0xCCF134", Offset = "0xCCF134", VA = "0xCCF134", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200028C")]
		[CompilerGenerated]
		private struct <>c__DisplayClass109_0
		{
			[Token(Token = "0x400124D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Hand <>4__this;

			[Token(Token = "0x400124E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Grabbable startHoldingObj;
		}

		[Token(Token = "0x200028D")]
		[CompilerGenerated]
		private sealed class <GrabObject>d__109 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400124F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001250")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001251")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x4001252")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Grabbable grab;

			[Token(Token = "0x4001253")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GrabType grabType;

			[Token(Token = "0x4001254")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public RaycastHit hit;

			[Token(Token = "0x4001255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private <>c__DisplayClass109_0 <>8__1;

			[Token(Token = "0x4001256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool <instantGrab>5__2;

			[Token(Token = "0x4001257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private HandPoseData <startGrabPose>5__3;

			[Token(Token = "0x4001258")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private float <startGrabDist>5__4;

			[Token(Token = "0x4001259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private Vector3 <startGrabbablePosition>5__5;

			[Token(Token = "0x400125A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Quaternion <startGrabbableRotation>5__6;

			[Token(Token = "0x400125B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			private Transform <grabTarget>5__7;

			[Token(Token = "0x400125C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private HandPoseData <postGrabPose>5__8;

			[Token(Token = "0x400125D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private float <adjustedGrabTime>5__9;

			[Token(Token = "0x400125E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private float <i>5__10;

			[Token(Token = "0x400125F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private bool <useGravity>5__11;

			[Token(Token = "0x1700014C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010AD")]
				[Address(RVA = "0xCD0E34", Offset = "0xCD0E34", VA = "0xCD0E34", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010AF")]
				[Address(RVA = "0xCD0E7C", Offset = "0xCD0E7C", VA = "0xCD0E7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010AA")]
			[Address(RVA = "0xCCDC9C", Offset = "0xCCDC9C", VA = "0xCCDC9C")]
			[DebuggerHidden]
			public <GrabObject>d__109(int <>1__state)
			{
			}

			[Token(Token = "0x60010AB")]
			[Address(RVA = "0xCCF17C", Offset = "0xCCF17C", VA = "0xCCF17C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010AC")]
			[Address(RVA = "0xCCF180", Offset = "0xCCF180", VA = "0xCCF180", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010AE")]
			[Address(RVA = "0xCD0E3C", Offset = "0xCD0E3C", VA = "0xCD0E3C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200028E")]
		[CompilerGenerated]
		private sealed class <LerpHandPose>d__111 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001260")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001261")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x4001263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HandPoseData fromPose;

			[Token(Token = "0x4001264")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public HandPoseData toPose;

			[Token(Token = "0x4001265")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public float totalTime;

			[Token(Token = "0x4001266")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float <timePassed>5__2;

			[Token(Token = "0x1700014E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010B3")]
				[Address(RVA = "0xCD10C4", Offset = "0xCD10C4", VA = "0xCD10C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010B5")]
				[Address(RVA = "0xCD110C", Offset = "0xCD110C", VA = "0xCD110C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010B0")]
			[Address(RVA = "0xCCDDF0", Offset = "0xCCDDF0", VA = "0xCCDDF0")]
			[DebuggerHidden]
			public <LerpHandPose>d__111(int <>1__state)
			{
			}

			[Token(Token = "0x60010B1")]
			[Address(RVA = "0xCD0E84", Offset = "0xCD0E84", VA = "0xCD0E84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010B2")]
			[Address(RVA = "0xCD0E88", Offset = "0xCD0E88", VA = "0xCD0E88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010B4")]
			[Address(RVA = "0xCD10CC", Offset = "0xCD10CC", VA = "0xCD10CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[AutoToggleHeader("Enable Highlight", 0, 0, tooltip = "Raycasting for grabbables to highlight is expensive, you can disable it here if you aren't using it")]
		public bool usingHighlight;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[EnableIf("usingHighlight")]
		[Tooltip("The layers to highlight and use look assist on --- Nothing will default on start")]
		public LayerMask highlightLayers;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[EnableIf("usingHighlight")]
		[Tooltip("Leave empty for none - used as a default option for all grabbables with empty highlight material")]
		public Material defaultHighlight;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[AutoToggleHeader("Show Advanced", 0, 0)]
		public bool showAdvanced;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[ShowIf("showAdvanced")]
		[Tooltip("For which movement algorithm the hand should use")]
		public HandMovementType moveType;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[ShowIf("showAdvanced")]
		[Tooltip("Whether the hand should go to the object and come back on grab, or the object to float to the hand on grab. Will default to HandToGrabbable for objects that have \"parentOnGrab\" disabled")]
		public GrabType grabType;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[ShowIf("showAdvanced")]
		[Min(0f)]
		[Tooltip("The animation curve based on the grab time 0-1")]
		public AnimationCurve grabCurve;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[ShowIf("showAdvanced")]
		[Tooltip("This is used in conjunction with custom poses. For a custom pose to work it must has the same PoseIndex as the hand. Used for when your game has multiple hands")]
		public int poseIndex;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		[AutoLine(0, 0)]
		public bool ignoreMe1;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] grabbableLayers;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string grabbableLayerNameDefault;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string grabbingLayerName;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string rightHandLayerName;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string leftHandLayerName;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private List<HandTriggerAreaEvents> triggerEventAreas;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private Coroutine tryGrab;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private Coroutine highlightRoutine;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private Coroutine _grabRoutine;

		[Token(Token = "0x17000147")]
		private Coroutine grabRoutine
		{
			[Token(Token = "0x600105E")]
			[Address(RVA = "0xCC9810", Offset = "0xCC9810", VA = "0xCC9810")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105F")]
			[Address(RVA = "0xCC9818", Offset = "0xCC9818", VA = "0xCC9818")]
			set
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public event HandGrabEvent OnTriggerGrab
		{
			[Token(Token = "0x6001042")]
			[Address(RVA = "0xCC87D0", Offset = "0xCC87D0", VA = "0xCC87D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001043")]
			[Address(RVA = "0xCC8870", Offset = "0xCC8870", VA = "0xCC8870")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event HandGrabEvent OnBeforeGrabbed
		{
			[Token(Token = "0x6001044")]
			[Address(RVA = "0xCC8910", Offset = "0xCC8910", VA = "0xCC8910")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001045")]
			[Address(RVA = "0xCC89B0", Offset = "0xCC89B0", VA = "0xCC89B0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public event HandGrabEvent OnGrabbed
		{
			[Token(Token = "0x6001046")]
			[Address(RVA = "0xCC8A50", Offset = "0xCC8A50", VA = "0xCC8A50")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001047")]
			[Address(RVA = "0xCC8AF0", Offset = "0xCC8AF0", VA = "0xCC8AF0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public event HandGrabEvent OnTriggerRelease
		{
			[Token(Token = "0x6001048")]
			[Address(RVA = "0xCC8B90", Offset = "0xCC8B90", VA = "0xCC8B90")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001049")]
			[Address(RVA = "0xCC8C30", Offset = "0xCC8C30", VA = "0xCC8C30")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000020")]
		public event HandGrabEvent OnReleased
		{
			[Token(Token = "0x600104A")]
			[Address(RVA = "0xCC5928", Offset = "0xCC5928", VA = "0xCC5928")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600104B")]
			[Address(RVA = "0xCC6764", Offset = "0xCC6764", VA = "0xCC6764")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000021")]
		public event HandGrabEvent OnSqueezed
		{
			[Token(Token = "0x600104C")]
			[Address(RVA = "0xCC8CD0", Offset = "0xCC8CD0", VA = "0xCC8CD0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600104D")]
			[Address(RVA = "0xCC8D70", Offset = "0xCC8D70", VA = "0xCC8D70")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public event HandGrabEvent OnUnsqueezed
		{
			[Token(Token = "0x600104E")]
			[Address(RVA = "0xCC8E10", Offset = "0xCC8E10", VA = "0xCC8E10")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600104F")]
			[Address(RVA = "0xCC8EB0", Offset = "0xCC8EB0", VA = "0xCC8EB0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000023")]
		public event HandGrabEvent OnHighlight
		{
			[Token(Token = "0x6001050")]
			[Address(RVA = "0xCC8F50", Offset = "0xCC8F50", VA = "0xCC8F50")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001051")]
			[Address(RVA = "0xCC8FF0", Offset = "0xCC8FF0", VA = "0xCC8FF0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000024")]
		public event HandGrabEvent OnStopHighlight
		{
			[Token(Token = "0x6001052")]
			[Address(RVA = "0xCC9090", Offset = "0xCC9090", VA = "0xCC9090")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001053")]
			[Address(RVA = "0xCC9130", Offset = "0xCC9130", VA = "0xCC9130")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public event HandGrabEvent OnGrabJointBreak
		{
			[Token(Token = "0x6001054")]
			[Address(RVA = "0xCC91D0", Offset = "0xCC91D0", VA = "0xCC91D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001055")]
			[Address(RVA = "0xCC9270", Offset = "0xCC9270", VA = "0xCC9270")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000026")]
		public event HandGameObjectEvent OnHandCollisionStart
		{
			[Token(Token = "0x6001056")]
			[Address(RVA = "0xCC9310", Offset = "0xCC9310", VA = "0xCC9310")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001057")]
			[Address(RVA = "0xCC93B0", Offset = "0xCC93B0", VA = "0xCC93B0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event HandGameObjectEvent OnHandCollisionStop
		{
			[Token(Token = "0x6001058")]
			[Address(RVA = "0xCC9450", Offset = "0xCC9450", VA = "0xCC9450")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001059")]
			[Address(RVA = "0xCC94F0", Offset = "0xCC94F0", VA = "0xCC94F0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000028")]
		public event HandGameObjectEvent OnHandTriggerStart
		{
			[Token(Token = "0x600105A")]
			[Address(RVA = "0xCC9590", Offset = "0xCC9590", VA = "0xCC9590")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600105B")]
			[Address(RVA = "0xCC9630", Offset = "0xCC9630", VA = "0xCC9630")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public event HandGameObjectEvent OnHandTriggerStop
		{
			[Token(Token = "0x600105C")]
			[Address(RVA = "0xCC96D0", Offset = "0xCC96D0", VA = "0xCC96D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600105D")]
			[Address(RVA = "0xCC9770", Offset = "0xCC9770", VA = "0xCC9770")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xCC9978", Offset = "0xCC9978", VA = "0xCC9978", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xCC9F94", Offset = "0xCC9F94", VA = "0xCC9F94", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xCCA140", Offset = "0xCCA140", VA = "0xCCA140", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xCCA4FC", Offset = "0xCCA4FC", VA = "0xCCA4FC", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xCCA6F0", Offset = "0xCCA6F0", VA = "0xCCA6F0", Slot = "20")]
		public virtual void Grab()
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xCCA704", Offset = "0xCCA704", VA = "0xCCA704", Slot = "21")]
		public virtual void Grab(GrabType grabType)
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xCCAB70", Offset = "0xCCAB70", VA = "0xCCAB70", Slot = "22")]
		public virtual void Grab(RaycastHit hit, Grabbable grab, GrabType grabType = GrabType.InstantGrab)
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xCCB0EC", Offset = "0xCCB0EC", VA = "0xCCB0EC", Slot = "23")]
		public virtual void TryGrab(Grabbable grab)
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xCCB294", Offset = "0xCCB294", VA = "0xCCB294", Slot = "24")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xCCB4FC", Offset = "0xCCB4FC", VA = "0xCCB4FC", Slot = "25")]
		public virtual void ForceReleaseGrab()
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xCCB51C", Offset = "0xCCB51C", VA = "0xCCB51C", Slot = "26")]
		public virtual void Squeeze()
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xCCB6B4", Offset = "0xCCB6B4", VA = "0xCCB6B4", Slot = "27")]
		public virtual void Unsqueeze()
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xCCB848", Offset = "0xCCB848", VA = "0xCCB848", Slot = "28")]
		public virtual void BreakGrabConnection(bool callEvent = true)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xCCBAFC", Offset = "0xCCBAFC", VA = "0xCCBAFC", Slot = "29")]
		public virtual void CreateGrabConnection(Grabbable grab, Vector3 handPos, Quaternion handRot, Vector3 grabPos, Quaternion grabRot, bool executeGrabEvents = false)
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xCCC0D0", Offset = "0xCCC0D0", VA = "0xCCC0D0", Slot = "30")]
		public virtual void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xCCC1E4", Offset = "0xCCC1E4", VA = "0xCCC1E4", Slot = "31")]
		protected virtual void UpdateHighlight()
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xCCC544", Offset = "0xCCC544", VA = "0xCCC544")]
		public RaycastHit GetHighlightHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xCCC55C", Offset = "0xCCC55C", VA = "0xCCC55C")]
		public void AutoPose(RaycastHit hit, Grabbable grabbable)
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xCCCDDC", Offset = "0xCCCDDC", VA = "0xCCCDDC")]
		public HandPoseData GetHandPose()
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xCCCDFC", Offset = "0xCCCDFC", VA = "0xCCCDFC")]
		public HandPoseData GetHeldPose()
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xCCCEB8", Offset = "0xCCCEB8", VA = "0xCCCEB8", Slot = "32")]
		public virtual void SetHeldPose(HandPoseData pose, Grabbable grabbable, bool createJoint = true)
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xCCD140", Offset = "0xCCD140", VA = "0xCCD140")]
		public void SetHandPose(HandPoseData pose)
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xCCD158", Offset = "0xCCD158", VA = "0xCCD158")]
		public void SetHandPose(GrabbablePose pose)
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xCCD1D0", Offset = "0xCCD1D0", VA = "0xCCD1D0")]
		public void UpdatePose(HandPoseData pose, float time)
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xCCD2E4", Offset = "0xCCD2E4", VA = "0xCCD2E4")]
		public bool GetGrabPose(Transform from, Grabbable grabbable, out GrabbablePose grabPose, out Transform relativeTo)
		{
			return default(bool);
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xCCD418", Offset = "0xCCD418", VA = "0xCCD418")]
		public Grabbable GetHeldGrabbable()
		{
			return null;
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xCCD420", Offset = "0xCCD420", VA = "0xCCD420")]
		public Grabbable GetHeld()
		{
			return null;
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xCCD428", Offset = "0xCCD428", VA = "0xCCD428")]
		public bool IsSqueezing()
		{
			return default(bool);
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xCCB06C", Offset = "0xCCB06C", VA = "0xCCB06C")]
		public bool CanGrab(Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xCCD430", Offset = "0xCCD430", VA = "0xCCD430")]
		public void SetGrip(float grip)
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xCCD438", Offset = "0xCCD438", VA = "0xCCD438")]
		[ContextMenu("Set Pose - Relax Hand")]
		public void RelaxHand()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xCCD49C", Offset = "0xCCD49C", VA = "0xCCD49C")]
		[ContextMenu("Set Pose - Open Hand")]
		public void OpenHand()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xCCD4FC", Offset = "0xCCD4FC", VA = "0xCCD4FC")]
		[ContextMenu("Set Pose - Close Hand")]
		public void CloseHand()
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xCCD568", Offset = "0xCCD568", VA = "0xCCD568")]
		[ContextMenu("Bend Fingers Until Hit")]
		public void ProceduralFingerBend()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xCCD690", Offset = "0xCCD690", VA = "0xCCD690")]
		public void ProceduralFingerBend(int layermask)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xCCD704", Offset = "0xCCD704", VA = "0xCCD704")]
		public void ProceduralFingerBend(RaycastHit hit)
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xCCD7AC", Offset = "0xCCD7AC", VA = "0xCCD7AC")]
		public void PlayHapticVibration()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xCCD83C", Offset = "0xCCD83C", VA = "0xCCD83C")]
		public void PlayHapticVibration(float duration)
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xCCD7B8", Offset = "0xCCD7B8", VA = "0xCCD7B8")]
		public void PlayHapticVibration(float duration, float amp = 0.5f)
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xCCD844", Offset = "0xCCD844", VA = "0xCCD844")]
		[Button("Save Open Pose", EButtonEnableMode.Always)]
		[ContextMenu("SAVE OPEN")]
		public void SaveOpenPose()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xCCD8F8", Offset = "0xCCD8F8", VA = "0xCCD8F8")]
		[Button("Save Closed Pose", EButtonEnableMode.Always)]
		[ContextMenu("SAVE CLOSED")]
		public void SaveClosedPose()
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xCCD9AC", Offset = "0xCCD9AC", VA = "0xCCD9AC", Slot = "33")]
		protected virtual void OnCollisionFirstEnter(GameObject collision)
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xCCDA28", Offset = "0xCCDA28", VA = "0xCCDA28", Slot = "34")]
		protected virtual void OnCollisionLastExit(GameObject collision)
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xCCDAA4", Offset = "0xCCDAA4", VA = "0xCCDAA4", Slot = "35")]
		protected virtual void OnTriggerFirstEnter(GameObject other)
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xCCDBB4", Offset = "0xCCDBB4", VA = "0xCCDBB4", Slot = "36")]
		protected virtual void OnTriggerLastExit(GameObject other)
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xCCA0BC", Offset = "0xCCA0BC", VA = "0xCCA0BC")]
		[IteratorStateMachine(typeof(<HighlightUpdate>d__108))]
		private IEnumerator HighlightUpdate(float timestep)
		{
			return null;
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xCCAAB0", Offset = "0xCCAAB0", VA = "0xCCAAB0")]
		[IteratorStateMachine(typeof(<GrabObject>d__109))]
		protected IEnumerator GrabObject(RaycastHit hit, Grabbable grab, GrabType grabType)
		{
			return null;
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xCCDCC4", Offset = "0xCCDCC4", VA = "0xCCDCC4")]
		protected void CancelPose()
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xCCDD10", Offset = "0xCCDD10", VA = "0xCCDD10", Slot = "37")]
		[IteratorStateMachine(typeof(<LerpHandPose>d__111))]
		protected virtual IEnumerator LerpHandPose(HandPoseData fromPose, HandPoseData toPose, float totalTime)
		{
			return null;
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xCCDE18", Offset = "0xCCDE18", VA = "0xCCDE18", Slot = "38")]
		protected virtual void CheckEnterPoseArea(GameObject other)
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xCCE14C", Offset = "0xCCE14C", VA = "0xCCE14C", Slot = "39")]
		protected virtual void CheckExitPoseArea(GameObject other)
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xCCE330", Offset = "0xCCE330", VA = "0xCCE330")]
		private void ClearPoseArea()
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xCCE3E4", Offset = "0xCCE3E4", VA = "0xCCE3E4", Slot = "40")]
		internal virtual void RemoveHandTriggerArea(HandTriggerAreaEvents handTrigger)
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xCCE454", Offset = "0xCCE454", VA = "0xCCE454")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x200028F")]
	[DefaultExecutionOrder(10000)]
	[RequireComponent(typeof(Hand))]
	public class HandAdvancedOptions : MonoBehaviour
	{
		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Meant for things childed under the Hand. These transforms will not be set to the hand layer on start")]
		public List<Collider> ignoreHandCollider;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Hand hand;

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xCD1114", Offset = "0xCD1114", VA = "0xCD1114")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xCD116C", Offset = "0xCD116C", VA = "0xCD116C")]
		private void Start()
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xCD120C", Offset = "0xCD120C", VA = "0xCD120C")]
		public HandAdvancedOptions()
		{
		}
	}
	[Token(Token = "0x2000290")]
	public enum HandMovementType
	{
		[Token(Token = "0x400126A")]
		Legacy,
		[Token(Token = "0x400126B")]
		Forces
	}
	[Token(Token = "0x2000291")]
	public enum HandType
	{
		[Token(Token = "0x400126D")]
		both,
		[Token(Token = "0x400126E")]
		right,
		[Token(Token = "0x400126F")]
		left,
		[Token(Token = "0x4001270")]
		none
	}
	[Token(Token = "0x2000292")]
	public enum GrabType
	{
		[Token(Token = "0x4001272")]
		HandToGrabbable,
		[Token(Token = "0x4001273")]
		GrabbableToHand,
		[Token(Token = "0x4001274")]
		InstantGrab
	}
	[Serializable]
	[Token(Token = "0x2000293")]
	public struct VelocityTimePair
	{
		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float time;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 velocity;
	}
	[Token(Token = "0x2000294")]
	public delegate void HandGrabEvent(Hand hand, Grabbable grabbable);
	[Token(Token = "0x2000295")]
	public delegate void HandGameObjectEvent(Hand hand, GameObject other);
	[Serializable]
	[Token(Token = "0x2000296")]
	public class UnityHandGrabEvent : UnityEvent<Hand, Grabbable>
	{
		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xCD1464", Offset = "0xCD1464", VA = "0xCD1464")]
		public UnityHandGrabEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000297")]
	public class UnityHandEvent : UnityEvent<Hand>
	{
		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xCD14AC", Offset = "0xCD14AC", VA = "0xCD14AC")]
		public UnityHandEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000298")]
	[DefaultExecutionOrder(-1000)]
	[RequireComponent(typeof(Rigidbody))]
	public class HandBase : MonoBehaviour
	{
		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Auto Hand", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Finger[] fingers;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("An empty GameObject that should be placed on the surface of the center of the palm")]
		public Transform palmTransform;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[FormerlySerializedAs("isLeft")]
		[Tooltip("Whether this is the left (on) or right (off) hand")]
		public bool left;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Space]
		[Min(0.01f)]
		[Tooltip("Maximum distance for pickup")]
		public float reachDistance;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Min(0f)]
		[Tooltip("Makes grab smoother; also based on range and reach distance - a very near grab is instant and a max distance grab is [X] frames")]
		public float grabTime;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AutoToggleHeader("Enable Movement", 0, 0, tooltip = "Whether or not to enable the hand's Rigidbody Physics movement")]
		public bool enableMovement;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[EnableIf("enableMovement")]
		[Tooltip("Follow target, the hand will always try to match this transforms position with rigidbody movements")]
		public Transform follow;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[EnableIf("enableMovement")]
		[Tooltip("Returns hand to the target after this distance [helps just in case it gets stuck]")]
		[Min(0f)]
		public float maxFollowDistance;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Amplifier for applied velocity on released object")]
		[Min(0f)]
		[EnableIf("enableMovement")]
		public float throwPower;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public bool advancedFollowSettings;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("Turn this on when you want to animate the hand or use other IK Drivers")]
		[AutoToggleHeader("Enable Auto Posing", 0, 0, tooltip = "Auto Posing will override Unity Animations -- This will disable all the Auto Hand IK, including animations from: finger sway, pose areas, finger bender scripts (runtime Auto Posing will still work)")]
		public bool enableIK;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("How much the fingers sway from the velocity")]
		[EnableIf("enableIK")]
		public float swayStrength;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("This will offset each fingers bend (0 is no bend, 1 is full bend)")]
		[EnableIf("enableIK")]
		public float gripOffset;

		[NonSerialized]
		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Min(0f)]
		[Tooltip("The maximum allowed velocity of the hand")]
		public float maxVelocity;

		[NonSerialized]
		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Min(0f)]
		[Tooltip("Follow target speed (Can cause jittering if turned too high - recommend increasing drag with speed)")]
		public float followPositionStrength;

		[NonSerialized]
		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Min(0f)]
		[Tooltip("Follow target rotation speed (Can cause jittering if turned too high - recommend increasing angular drag with speed)")]
		[HideInInspector]
		public float followRotationStrength;

		[NonSerialized]
		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		[Tooltip("After this many seconds velocity data within a 'throw window' will be tossed out. (This allows you to get only use acceeleration data from the last 'x' seconds of the throw.)")]
		public float throwVelocityExpireTime;

		[NonSerialized]
		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Increase for closer finger tip results / Decrease for less physics checks - The number of steps the fingers take when bending to grab something")]
		[HideInInspector]
		public int fingerBendSteps;

		[NonSerialized]
		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public float sphereCastRadius;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[HideInInspector]
		public bool usingPoseAreas;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected HandMovementType _moveType;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float baseVelocity;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float relativeVelocityMultiplier;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float baseRotVelocity;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float relativeRotVelocityMultiplier;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabbable HoldingObj;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabbable _lookingAtObj;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform _moveTo;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Rigidbody _body;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 _grabPositionOffset;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion _grabRotationOffset;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private CollisionTracker _collisionTracker;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Joint heldJoint;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected bool grabbing;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		protected bool squeezing;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE2")]
		protected bool grabbed;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected float triggerPoint;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected GrabbablePose grabPose;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Coroutine handAnimateRoutine;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected HandPoseArea handPoseArea;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected HandPoseData preHandPoseAreaPose;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected List<Collider> handColliders;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Transform _grabPoint;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal int handLayers;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected Collider palmCollider;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected RaycastHit highlightHit;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected HandVelocityTracker velocityTracker;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected Transform palmChild;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		internal bool allowUpdateMovement;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Vector3[] handRays;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private RaycastHit[] rayHits;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private List<RaycastHit> closestHits;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private List<Grabbable> closestGrabs;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private int tryMaxDistanceCount;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private bool prerendered;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Vector3 preRenderPos;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private Quaternion preRenderRot;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private float currGrip;

		[Token(Token = "0x17000150")]
		public Grabbable holdingObj
		{
			[Token(Token = "0x60010C3")]
			[Address(RVA = "0xCD14F4", Offset = "0xCD14F4", VA = "0xCD14F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010C4")]
			[Address(RVA = "0xCD14FC", Offset = "0xCD14FC", VA = "0xCD14FC")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public Grabbable lookingAtObj
		{
			[Token(Token = "0x60010C5")]
			[Address(RVA = "0xCD1504", Offset = "0xCD1504", VA = "0xCD1504")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010C6")]
			[Address(RVA = "0xCD150C", Offset = "0xCD150C", VA = "0xCD150C")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public Transform moveTo
		{
			[Token(Token = "0x60010C7")]
			[Address(RVA = "0xCD1514", Offset = "0xCD1514", VA = "0xCD1514")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010C8")]
			[Address(RVA = "0xCD151C", Offset = "0xCD151C", VA = "0xCD151C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public Rigidbody body
		{
			[Token(Token = "0x60010C9")]
			[Address(RVA = "0xCD1524", Offset = "0xCD1524", VA = "0xCD1524")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010CA")]
			[Address(RVA = "0xCD152C", Offset = "0xCD152C", VA = "0xCD152C")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public Vector3 grabPositionOffset
		{
			[Token(Token = "0x60010CB")]
			[Address(RVA = "0xCD1534", Offset = "0xCD1534", VA = "0xCD1534")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0xCD1540", Offset = "0xCD1540", VA = "0xCD1540")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public Quaternion grabRotationOffset
		{
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0xCD154C", Offset = "0xCD154C", VA = "0xCD154C")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60010CE")]
			[Address(RVA = "0xCD1558", Offset = "0xCD1558", VA = "0xCD1558")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public bool disableIK
		{
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0xCD1564", Offset = "0xCD1564", VA = "0xCD1564")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010D0")]
			[Address(RVA = "0xCD1574", Offset = "0xCD1574", VA = "0xCD1574")]
			set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public CollisionTracker collisionTracker
		{
			[Token(Token = "0x60010D1")]
			[Address(RVA = "0xCCA444", Offset = "0xCCA444", VA = "0xCCA444")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010D2")]
			[Address(RVA = "0xCD1584", Offset = "0xCD1584", VA = "0xCD1584")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000158")]
		protected Transform grabPoint
		{
			[Token(Token = "0x60010D3")]
			[Address(RVA = "0xCCBFE8", Offset = "0xCCBFE8", VA = "0xCCBFE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xCC9B34", Offset = "0xCC9B34", VA = "0xCC9B34", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xCC9FE4", Offset = "0xCC9FE4", VA = "0xCC9FE4", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xCCA424", Offset = "0xCCA424", VA = "0xCCA424", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xCCA680", Offset = "0xCCA680", VA = "0xCCA680", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xCD1698", Offset = "0xCD1698", VA = "0xCD1698", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xCD177C", Offset = "0xCD177C", VA = "0xCD177C", Slot = "9")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xCD2428", Offset = "0xCD2428", VA = "0xCD2428", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xCD253C", Offset = "0xCD253C", VA = "0xCD253C", Slot = "11")]
		public virtual void OnPreRender()
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xCD269C", Offset = "0xCD269C", VA = "0xCD269C", Slot = "12")]
		public virtual void OnPostRender()
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xCD279C", Offset = "0xCD279C", VA = "0xCD279C", Slot = "13")]
		protected virtual void CreateJoint(Grabbable grab, float breakForce, float breakTorque)
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xCD2A3C", Offset = "0xCD2A3C", VA = "0xCD2A3C", Slot = "14")]
		protected virtual void MoveTo()
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xCD3344", Offset = "0xCD3344", VA = "0xCD3344", Slot = "15")]
		protected virtual void TorqueTo()
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xCD38A4", Offset = "0xCD38A4", VA = "0xCD38A4", Slot = "16")]
		public virtual void SetHandLocation(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xCD3FD4", Offset = "0xCD3FD4", VA = "0xCD3FD4")]
		public void ResetHandLocation()
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xCD098C", Offset = "0xCD098C", VA = "0xCD098C")]
		protected void SetMoveTo()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xCD405C", Offset = "0xCD405C", VA = "0xCD405C", Slot = "17")]
		protected virtual Vector3 HandClosestHit(out RaycastHit closestHit, out Grabbable grabbable, float dist, int layerMask, [Optional] Grabbable target)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xCD4804", Offset = "0xCD4804", VA = "0xCD4804")]
		public bool IsPosing()
		{
			return default(bool);
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xCD48CC", Offset = "0xCD48CC", VA = "0xCD48CC", Slot = "18")]
		protected virtual void UpdateFingers()
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xCD4A30", Offset = "0xCD4A30", VA = "0xCD4A30")]
		public int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xCD08E8", Offset = "0xCD08E8", VA = "0xCD08E8")]
		public void HandIgnoreCollider(Collider collider, bool ignore)
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xCCA01C", Offset = "0xCCA01C", VA = "0xCCA01C")]
		public void SetLayer()
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xCD4A84", Offset = "0xCD4A84", VA = "0xCD4A84")]
		internal void SetLayerRecursive(Transform obj, int newLayer)
		{
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xCD1624", Offset = "0xCD1624", VA = "0xCD1624")]
		protected void SetHandCollidersRecursive(Transform obj)
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xCD4C88", Offset = "0xCD4C88", VA = "0xCD4C88")]
		public Vector3[] GetPalmRays()
		{
			return null;
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xCD4CAC", Offset = "0xCD4CAC", VA = "0xCD4CAC", Slot = "19")]
		protected virtual void SetPalmRays()
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xCD4F38", Offset = "0xCD4F38", VA = "0xCD4F38")]
		public Vector3 ThrowVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xCD4F54", Offset = "0xCD4F54", VA = "0xCD4F54")]
		public Vector3 ThrowAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xCD4F70", Offset = "0xCD4F70", VA = "0xCD4F70")]
		public bool IsGrabbing()
		{
			return default(bool);
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xCD4F78", Offset = "0xCD4F78", VA = "0xCD4F78")]
		public static int GetHandsLayerMask()
		{
			return default(int);
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xCCE4E4", Offset = "0xCCE4E4", VA = "0xCCE4E4")]
		public HandBase()
		{
		}
	}
	[Token(Token = "0x2000299")]
	[RequireComponent(typeof(Hand))]
	public class HandCollisionHaptics : MonoBehaviour
	{
		[Token(Token = "0x200029A")]
		[CompilerGenerated]
		private sealed class <PlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandCollisionHaptics <>4__this;

			[Token(Token = "0x17000159")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010FC")]
				[Address(RVA = "0xCD5678", Offset = "0xCD5678", VA = "0xCD5678", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010FE")]
				[Address(RVA = "0xCD56C0", Offset = "0xCD56C0", VA = "0xCD56C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010F9")]
			[Address(RVA = "0xCD54BC", Offset = "0xCD54BC", VA = "0xCD54BC")]
			[DebuggerHidden]
			public <PlayBuffer>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60010FA")]
			[Address(RVA = "0xCD55A4", Offset = "0xCD55A4", VA = "0xCD55A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010FB")]
			[Address(RVA = "0xCD55A8", Offset = "0xCD55A8", VA = "0xCD55A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010FD")]
			[Address(RVA = "0xCD5680", Offset = "0xCD5680", VA = "0xCD5680", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200029B")]
		[CompilerGenerated]
		private sealed class <HapticPlayBuffer>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandCollisionHaptics <>4__this;

			[Token(Token = "0x40012C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x1700015B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001102")]
				[Address(RVA = "0xCD579C", Offset = "0xCD579C", VA = "0xCD579C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001104")]
				[Address(RVA = "0xCD57E4", Offset = "0xCD57E4", VA = "0xCD57E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010FF")]
			[Address(RVA = "0xCD54E4", Offset = "0xCD54E4", VA = "0xCD54E4")]
			[DebuggerHidden]
			public <HapticPlayBuffer>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001100")]
			[Address(RVA = "0xCD56C8", Offset = "0xCD56C8", VA = "0xCD56C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001101")]
			[Address(RVA = "0xCD56CC", Offset = "0xCD56CC", VA = "0xCD56CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001103")]
			[Address(RVA = "0xCD57A4", Offset = "0xCD57A4", VA = "0xCD57A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The layers that cause the sound to play")]
		public LayerMask collisionTriggers;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float hapticAmp;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float velocityAmp;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float repeatDelay;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxDuration;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityAmpCurve;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityDurationCurve;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Hand hand;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody body;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool canPlay;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine playRoutine;

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xCD5088", Offset = "0xCD5088", VA = "0xCD5088")]
		private void Start()
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xCD51B8", Offset = "0xCD51B8", VA = "0xCD51B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xCD51CC", Offset = "0xCD51CC", VA = "0xCD51CC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xCD5448", Offset = "0xCD5448", VA = "0xCD5448")]
		[IteratorStateMachine(typeof(<PlayBuffer>d__14))]
		private IEnumerator PlayBuffer()
		{
			return null;
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xCD5134", Offset = "0xCD5134", VA = "0xCD5134")]
		[IteratorStateMachine(typeof(<HapticPlayBuffer>d__15))]
		private IEnumerator HapticPlayBuffer(float time)
		{
			return null;
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xCD550C", Offset = "0xCD550C", VA = "0xCD550C")]
		public HandCollisionHaptics()
		{
		}
	}
	[Token(Token = "0x200029C")]
	public class HandControllerLink : MonoBehaviour
	{
		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HandControllerLink handLeft;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static HandControllerLink handRight;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xCD57EC", Offset = "0xCD57EC", VA = "0xCD57EC", Slot = "4")]
		public virtual void TryHapticImpulse(float duration, float amp)
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xCD57F0", Offset = "0xCD57F0", VA = "0xCD57F0")]
		public HandControllerLink()
		{
		}
	}
	[Token(Token = "0x200029D")]
	[DefaultExecutionOrder(2)]
	public class HandDistanceGrabber : MonoBehaviour
	{
		[Token(Token = "0x200029E")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass61_0
		{
			[Token(Token = "0x40012ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public HandDistanceGrabber <>4__this;

			[Token(Token = "0x40012EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DistanceGrabbable grab;

			[Token(Token = "0x40012EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float estimatedRadius;

			[Token(Token = "0x6001124")]
			[Address(RVA = "0xCD7B8C", Offset = "0xCD7B8C", VA = "0xCD7B8C")]
			public <>c__DisplayClass61_0()
			{
			}

			[Token(Token = "0x6001125")]
			[Address(RVA = "0xCD7B94", Offset = "0xCD7B94", VA = "0xCD7B94")]
			internal void <StartCatchAssist>b__0(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6001126")]
			[Address(RVA = "0xCD7C30", Offset = "0xCD7C30", VA = "0xCD7C30")]
			internal void <StartCatchAssist>b__1(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6001128")]
			[Address(RVA = "0xCD81D4", Offset = "0xCD81D4", VA = "0xCD81D4")]
			internal void <StartCatchAssist>b__5(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6001129")]
			[Address(RVA = "0xCD8270", Offset = "0xCD8270", VA = "0xCD8270")]
			internal void <StartCatchAssist>b__6(Hand hand, Grabbable grabbable)
			{
			}
		}

		[Token(Token = "0x200029F")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass61_1
		{
			[Token(Token = "0x40012F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool cancelInstantGrab;

			[Token(Token = "0x600112A")]
			[Address(RVA = "0xCD830C", Offset = "0xCD830C", VA = "0xCD830C")]
			public <>c__DisplayClass61_1()
			{
			}

			[Token(Token = "0x600112B")]
			[Address(RVA = "0xCD8314", Offset = "0xCD8314", VA = "0xCD8314")]
			internal void <StartCatchAssist>b__2(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x600112C")]
			[Address(RVA = "0xCD8320", Offset = "0xCD8320", VA = "0xCD8320")]
			internal void <StartCatchAssist>b__4(Hand hand, Grabbable grabbable)
			{
			}
		}

		[Token(Token = "0x20002A0")]
		[CompilerGenerated]
		private sealed class <StartCatchAssist>d__61 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandDistanceGrabber <>4__this;

			[Token(Token = "0x40012F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DistanceGrabbable grab;

			[Token(Token = "0x40012F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float estimatedRadius;

			[Token(Token = "0x40012F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass61_0 <>8__1;

			[Token(Token = "0x40012F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass61_1 <>8__2;

			[Token(Token = "0x40012F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <time>5__2;

			[Token(Token = "0x1700015E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001130")]
				[Address(RVA = "0xCD89F4", Offset = "0xCD89F4", VA = "0xCD89F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001132")]
				[Address(RVA = "0xCD8A3C", Offset = "0xCD8A3C", VA = "0xCD8A3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600112D")]
			[Address(RVA = "0xCD7878", Offset = "0xCD7878", VA = "0xCD7878")]
			[DebuggerHidden]
			public <StartCatchAssist>d__61(int <>1__state)
			{
			}

			[Token(Token = "0x600112E")]
			[Address(RVA = "0xCD832C", Offset = "0xCD832C", VA = "0xCD832C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600112F")]
			[Address(RVA = "0xCD8330", Offset = "0xCD8330", VA = "0xCD8330", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001131")]
			[Address(RVA = "0xCD89FC", Offset = "0xCD89FC", VA = "0xCD89FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The primaryHand used to trigger pulling or flicking")]
		[Header("Hands")]
		public Hand primaryHand;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This is important for catch assistance")]
		public Hand secondaryHand;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Pointer Options")]
		[Header("Grabbable")]
		public Transform forwardPointer;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LineRenderer line;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		public float maxRange;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Defaults to grabbable on start if none")]
		public LayerMask layers;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space]
		public Material defaultTargetedMaterial;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The highlight material to use when pulling")]
		public Material defaultSelectedMaterial;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Pull Options")]
		public bool useInstantPull;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("If false will default to distance pull, set pullGrabDistance to 0 for instant pull on select")]
		public bool useFlickPull;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[ShowIf("useFlickPull")]
		[Tooltip("The magnitude of your hands angular velocity for \"flick\" to start")]
		public float flickThreshold;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount you need to move your hand from the select position to trigger the grab")]
		[HideIf("useFlickPull")]
		public float pullGrabDistance;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("If this is true the object will be grabbed when entering the radius")]
		[Space]
		public bool instantGrabAssist;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The radius around of thrown object")]
		public float catchAssistRadius;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Space]
		[Foldout("Events")]
		public UnityHandGrabEvent OnPull;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Space]
		[Space]
		[Foldout("Events")]
		public UnityHandEvent StartPoint;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Foldout("Events")]
		public UnityHandEvent StopPoint;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Space]
		[Space]
		[Foldout("Events")]
		public UnityHandGrabEvent StartTarget;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Foldout("Events")]
		public UnityHandGrabEvent StopTarget;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Foldout("Events")]
		[Space]
		[Space]
		public UnityHandGrabEvent StartSelect;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Foldout("Events")]
		public UnityHandGrabEvent StopSelect;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<CatchAssistData> catchAssisted;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private DistanceGrabbable targetingDistanceGrabbable;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private DistanceGrabbable selectingDistanceGrabbable;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float catchAssistSeconds;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool pointing;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		private bool pulling;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 startPullPosition;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private RaycastHit hit;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion lastRotation;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private RaycastHit selectionHit;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float selectedEstimatedRadius;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float startLookAssist;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool lastInstantPull;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GameObject _hitPoint;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Coroutine catchAssistRoutine;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private DistanceGrabbable catchAsistGrabbable;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private CatchAssistData catchAssistData;

		[Token(Token = "0x1700015D")]
		private GameObject hitPoint
		{
			[Token(Token = "0x6001107")]
			[Address(RVA = "0xCD57F8", Offset = "0xCD57F8", VA = "0xCD57F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xCD58F4", Offset = "0xCD58F4", VA = "0xCD58F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xCD5A58", Offset = "0xCD5A58", VA = "0xCD5A58")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xCD5BB4", Offset = "0xCD5BB4", VA = "0xCD5BB4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xCD5E74", Offset = "0xCD5E74", VA = "0xCD5E74")]
		private void Update()
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xCD6284", Offset = "0xCD6284", VA = "0xCD6284")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xCD5A4C", Offset = "0xCD5A4C", VA = "0xCD5A4C")]
		public void SetInstantPull()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xCD62EC", Offset = "0xCD62EC", VA = "0xCD62EC")]
		public void SetPull(float distance)
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xCD62F8", Offset = "0xCD62F8", VA = "0xCD62F8")]
		public void SetFlickPull(float threshold)
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xCD5EA8", Offset = "0xCD5EA8", VA = "0xCD5EA8")]
		private void CheckDistanceGrabbable()
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xCD66A0", Offset = "0xCD66A0", VA = "0xCD66A0", Slot = "4")]
		public virtual void StartPointing()
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xCD6704", Offset = "0xCD6704", VA = "0xCD6704", Slot = "5")]
		public virtual void StopPointing()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xCD67F4", Offset = "0xCD67F4", VA = "0xCD67F4", Slot = "6")]
		public virtual void StartTargeting(DistanceGrabbable target)
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0xCD69E8", Offset = "0xCD69E8", VA = "0xCD69E8", Slot = "7")]
		public virtual void StopTargeting()
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0xCD6B20", Offset = "0xCD6B20", VA = "0xCD6B20", Slot = "8")]
		public virtual void SelectTarget()
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0xCD6F00", Offset = "0xCD6F00", VA = "0xCD6F00", Slot = "9")]
		public virtual void CancelSelect()
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0xCD7010", Offset = "0xCD7010", VA = "0xCD7010", Slot = "10")]
		public virtual void ActivatePull()
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xCD65B0", Offset = "0xCD65B0", VA = "0xCD65B0")]
		private void TryDistancePull()
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xCD6308", Offset = "0xCD6308", VA = "0xCD6308")]
		private void TryFlickPull()
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xCD6E70", Offset = "0xCD6E70", VA = "0xCD6E70")]
		private Material GetSelectedMaterial(DistanceGrabbable grabbable)
		{
			return null;
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xCD6954", Offset = "0xCD6954", VA = "0xCD6954")]
		private Material GetTargetedMaterial(DistanceGrabbable grabbable)
		{
			return null;
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xCD733C", Offset = "0xCD733C", VA = "0xCD733C")]
		private void TryCatchAssist(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xCD729C", Offset = "0xCD729C", VA = "0xCD729C")]
		[IteratorStateMachine(typeof(<StartCatchAssist>d__61))]
		private IEnumerator StartCatchAssist(DistanceGrabbable grab, float estimatedRadius)
		{
			return null;
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xCD78A0", Offset = "0xCD78A0", VA = "0xCD78A0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xCD79EC", Offset = "0xCD79EC", VA = "0xCD79EC")]
		public HandDistanceGrabber()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	internal struct CatchAssistData
	{
		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Grabbable grab;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float estimatedRadius;

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xCD89CC", Offset = "0xCD89CC", VA = "0xCD89CC")]
		public CatchAssistData(Grabbable grab, float estimatedRadius)
		{
		}
	}
	[Token(Token = "0x20002A2")]
	[RequireComponent(typeof(Hand))]
	public class HandGizmos : MonoBehaviour
	{
		[Token(Token = "0x6001134")]
		[Address(RVA = "0xCD8A44", Offset = "0xCD8A44", VA = "0xCD8A44")]
		public HandGizmos()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	[HelpURL("https://www.notion.so/Pose-Areas-99b9af26d297442a91a9d73f65f13635")]
	public class HandPoseArea : MonoBehaviour
	{
		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string poseName;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Scriptable options NOT REQUIRED (will be saved locally instead if empty) -> Create scriptable throught [Auto Hand/Custom Pose]")]
		public HandPoseScriptable poseScriptable;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int poseIndex;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Pose Area")]
		public float transitionTime;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandEvent OnHandEnter;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityHandEvent OnHandExit;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public HandPoseData rightPose;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool rightPoseSet;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public HandPoseData leftPose;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public bool leftPoseSet;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal HandPoseArea[] poseAreas;

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xCD8A4C", Offset = "0xCD8A4C", VA = "0xCD8A4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xCD8AA4", Offset = "0xCD8AA4", VA = "0xCD8AA4", Slot = "4")]
		public virtual HandPoseData GetHandPoseData(bool left)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xCD8B64", Offset = "0xCD8B64", VA = "0xCD8B64")]
		public void SetHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xCD8EB0", Offset = "0xCD8EB0", VA = "0xCD8EB0")]
		public bool HasPose(bool left)
		{
			return default(bool);
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xCD8F64", Offset = "0xCD8F64", VA = "0xCD8F64")]
		public HandPoseArea()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002A4")]
	public struct HandPoseData
	{
		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 handOffset;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Quaternion localQuaternionOffset;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3[] posePositions;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Quaternion[] poseRotations;

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xCD8F78", Offset = "0xCD8F78", VA = "0xCD8F78")]
		public HandPoseData(Hand hand, Grabbable grabbable)
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xCD9528", Offset = "0xCD9528", VA = "0xCD9528")]
		public HandPoseData(Hand hand, Transform point)
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xCD9658", Offset = "0xCD9658", VA = "0xCD9658")]
		public HandPoseData(Hand hand)
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xCD977C", Offset = "0xCD977C", VA = "0xCD977C")]
		public HandPoseData(HandPoseData data)
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xCD90BC", Offset = "0xCD90BC", VA = "0xCD90BC")]
		public void SavePose(Hand hand, Transform relativeTo)
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xCD9984", Offset = "0xCD9984", VA = "0xCD9984")]
		public Quaternion GetRotationOffset()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xCD8BE8", Offset = "0xCD8BE8", VA = "0xCD8BE8")]
		public void SetPose(Hand hand, [Optional] Transform relativeTo)
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xCD9B58", Offset = "0xCD9B58", VA = "0xCD9B58")]
		public static HandPoseData LerpPose(HandPoseData from, HandPoseData to, float point)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xCD9DD8", Offset = "0xCD9DD8", VA = "0xCD9DD8")]
		public static void LerpPose(ref HandPoseData lerpPose, HandPoseData from, HandPoseData to, float point)
		{
		}
	}
	[Token(Token = "0x20002A7")]
	public class HandPoseDriver : MonoBehaviour
	{
		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float transitionTime;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public HandPoseData rightPose;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public bool rightPoseSet;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public HandPoseData leftPose;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public bool leftPoseSet;

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xCDA1B8", Offset = "0xCDA1B8", VA = "0xCDA1B8")]
		public HandPoseData GetHandPoseData(bool left)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xCDA1E4", Offset = "0xCDA1E4", VA = "0xCDA1E4")]
		public void AnimateHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xCDA274", Offset = "0xCDA274", VA = "0xCDA274")]
		public void SetHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xCDA25C", Offset = "0xCDA25C", VA = "0xCDA25C")]
		public bool HasPose(bool left)
		{
			return default(bool);
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xCDA2F8", Offset = "0xCDA2F8", VA = "0xCDA2F8")]
		public HandPoseDriver()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	[CreateAssetMenu(fileName = "AutoHand Pose", menuName = "Auto Hand/Custom Pose", order = 1)]
	public class HandPoseScriptable : ScriptableObject
	{
		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool rightSaved;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool leftSaved;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandPoseData rightPose;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HandPoseData leftPose;

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xCDA30C", Offset = "0xCDA30C", VA = "0xCDA30C")]
		public void SavePoses(HandPoseData right, HandPoseData left)
		{
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xCDA380", Offset = "0xCDA380", VA = "0xCDA380")]
		public void SaveRightPose(HandPoseData right)
		{
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xCDA3BC", Offset = "0xCDA3BC", VA = "0xCDA3BC")]
		public void SaveLeftPose(HandPoseData left)
		{
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xCDA3FC", Offset = "0xCDA3FC", VA = "0xCDA3FC")]
		public HandPoseScriptable()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	[DefaultExecutionOrder(10)]
	public class HandProjector : MonoBehaviour
	{
		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public Hand hand;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This should be a copy of the hand with the desired visual setup for your projection hand")]
		public Hand handProjection;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true everything in the handVisuals will be disabled/hidden when projection hand is showing")]
		public bool hideHand;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[ShowIf("hideHand")]
		[Tooltip("The Object(s) under your Hand that contain the MeshRenderer Component(s)")]
		public Transform[] handVisuals;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float speed;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Events")]
		public UnityHandGrabEvent OnStartProjection;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityHandGrabEvent OnEndProjection;

		[Token(Token = "0x400131E")]
		private const int REQUIRED_TARGET_FRAMES = 5;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HandPoseData lastProjectionPose;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private HandPoseData newProjectionPose;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool lastFrameDidProjection;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 lastProjectionPosition;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion lastProjectionRotation;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Grabbable target;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Grabbable lastTarget;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RaycastHit targetHit;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private RaycastHit currHit;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private int targetFrames;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private int newTargetFrames;

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xCDA404", Offset = "0xCDA404", VA = "0xCDA404")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xCDA510", Offset = "0xCDA510", VA = "0xCDA510")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xCDA59C", Offset = "0xCDA59C", VA = "0xCDA59C")]
		private void OnGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xCDAE70", Offset = "0xCDAE70", VA = "0xCDAE70")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xCDB2D8", Offset = "0xCDB2D8", VA = "0xCDB2D8")]
		private void OnProjectionStart(Hand projectionHand, Grabbable lookingAtObj)
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xCDB4B8", Offset = "0xCDB4B8", VA = "0xCDB4B8")]
		private void OnProjectionEnd(Hand projectionHand, Grabbable lookingAtObj)
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xCDA73C", Offset = "0xCDA73C", VA = "0xCDA73C")]
		private void ShowProjection(bool show)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xCDAEA4", Offset = "0xCDAEA4", VA = "0xCDAEA4")]
		private void SetTarget(Grabbable newTarget)
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xCDB234", Offset = "0xCDB234", VA = "0xCDB234")]
		private bool IsProjectionActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xCDB530", Offset = "0xCDB530", VA = "0xCDB530")]
		public HandProjector()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	public class HandPublicEvents : MonoBehaviour
	{
		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Foldout("Grab Events")]
		public UnityHandGrabEvent OnBeforeGrab;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Foldout("Grab Events")]
		public UnityHandGrabEvent OnGrab;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Foldout("Grab Events")]
		public UnityHandGrabEvent OnRelease;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Foldout("Grab Events")]
		public UnityHandGrabEvent OnForceRelease;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Foldout("Squeeze Events")]
		public UnityHandGrabEvent OnSqueeze;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Foldout("Squeeze Events")]
		public UnityHandGrabEvent OnUnsqueeze;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Foldout("Highlight Events")]
		public UnityHandGrabEvent OnHighlight;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Foldout("Highlight Events")]
		public UnityHandGrabEvent OnStopHighlight;

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xCDB540", Offset = "0xCDB540", VA = "0xCDB540")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0xCDB79C", Offset = "0xCDB79C", VA = "0xCDB79C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xCDB9F8", Offset = "0xCDB9F8", VA = "0xCDB9F8")]
		public void OnBeforeGrabEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0xCDBA6C", Offset = "0xCDBA6C", VA = "0xCDBA6C")]
		public void OnGrabEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0xCDBAE0", Offset = "0xCDBAE0", VA = "0xCDBAE0")]
		public void OnReleaseEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xCDBB54", Offset = "0xCDBB54", VA = "0xCDBB54")]
		public void OnSqueezeEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xCDBBC8", Offset = "0xCDBBC8", VA = "0xCDBBC8")]
		public void OnUnsqueezeEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xCDBC3C", Offset = "0xCDBC3C", VA = "0xCDBC3C")]
		public void OnForceReleaseEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xCDBCB0", Offset = "0xCDBCB0", VA = "0xCDBCB0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xCDBD94", Offset = "0xCDBD94", VA = "0xCDBD94")]
		public void OnHighlightEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xCDBE08", Offset = "0xCDBE08", VA = "0xCDBE08")]
		public void OnStopHighlightEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xCDBE7C", Offset = "0xCDBE7C", VA = "0xCDBE7C")]
		public HandPublicEvents()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	public class HandStabilizer : MonoBehaviour
	{
		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand[] hands;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] handsDeltaPos;

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xCDBE84", Offset = "0xCDBE84", VA = "0xCDBE84")]
		private void Start()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xCDBF8C", Offset = "0xCDBF8C", VA = "0xCDBF8C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xCDC0D0", Offset = "0xCDC0D0", VA = "0xCDC0D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xCDC214", Offset = "0xCDC214", VA = "0xCDC214")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xCDC2B0", Offset = "0xCDC2B0", VA = "0xCDC2B0")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xCDC34C", Offset = "0xCDC34C", VA = "0xCDC34C")]
		private void OnPreRender(ScriptableRenderContext src, Camera cam)
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xCDC3E8", Offset = "0xCDC3E8", VA = "0xCDC3E8")]
		private void OnPostRender(ScriptableRenderContext src, Camera cam)
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xCDC484", Offset = "0xCDC484", VA = "0xCDC484")]
		public HandStabilizer()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public class HandVelocityTracker
	{
		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private HandBase hand;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float minThrowVelocity;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<VelocityTimePair> m_ThrowVelocityList;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<VelocityTimePair> m_ThrowFrameVelocityList;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<VelocityTimePair> m_ThrowAngleVelocityList;

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xCDC48C", Offset = "0xCDC48C", VA = "0xCDC48C")]
		public HandVelocityTracker(HandBase hand)
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xCDC588", Offset = "0xCDC588", VA = "0xCDC588")]
		public void UpdateFrameThrowing(Vector3 vel)
		{
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0xCDC700", Offset = "0xCDC700", VA = "0xCDC700")]
		public void UpdateThrowing()
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0xCDCA30", Offset = "0xCDCA30", VA = "0xCDCA30")]
		public Vector3 ThrowVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0xCDCE08", Offset = "0xCDCE08", VA = "0xCDCE08")]
		public Vector3 ThrowAngularVelocity()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20002AD")]
	public class HandClippingGuard : MonoBehaviour
	{
		[Token(Token = "0x20002AE")]
		[CompilerGenerated]
		private sealed class <Guard>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001341")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001342")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001343")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4001344")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HandClippingGuard <>4__this;

			[Token(Token = "0x17000160")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600117A")]
				[Address(RVA = "0xCDD668", Offset = "0xCDD668", VA = "0xCDD668", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000161")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600117C")]
				[Address(RVA = "0xCDD6B0", Offset = "0xCDD6B0", VA = "0xCDD6B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001177")]
			[Address(RVA = "0xCDD390", Offset = "0xCDD390", VA = "0xCDD390")]
			[DebuggerHidden]
			public <Guard>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001178")]
			[Address(RVA = "0xCDD3CC", Offset = "0xCDD3CC", VA = "0xCDD3CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001179")]
			[Address(RVA = "0xCDD3D0", Offset = "0xCDD3D0", VA = "0xCDD3D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600117B")]
			[Address(RVA = "0xCDD670", Offset = "0xCDD670", VA = "0xCDD670", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This should be a sphere collider that covers the hand (similar, but seperate from the recommended trigger sphere collider)")]
		public SphereCollider collisionGuard;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform body;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float guardTime;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 grabPoint;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool runProtection;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine guardRoutine;

		[Token(Token = "0x6001172")]
		[Address(RVA = "0xCDD0A8", Offset = "0xCDD0A8", VA = "0xCDD0A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xCDD19C", Offset = "0xCDD19C", VA = "0xCDD19C")]
		private void BeforeGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xCDD2C0", Offset = "0xCDD2C0", VA = "0xCDD2C0")]
		private void OnRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xCDD300", Offset = "0xCDD300", VA = "0xCDD300")]
		[IteratorStateMachine(typeof(<Guard>d__10))]
		private IEnumerator Guard(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xCDD3B8", Offset = "0xCDD3B8", VA = "0xCDD3B8")]
		public HandClippingGuard()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	[DefaultExecutionOrder(1)]
	public class HandTeleportGuard : MonoBehaviour
	{
		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Helps prevent hand from passing through static collision boundries")]
		public Hand hand;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The amount of distance change required to activate")]
		public float buffer;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Whether this should always run or only run when activated by the teleporter")]
		public bool alwaysRun;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[Tooltip("If strict that hands wont teleport return when past the max distance, if something is in the way")]
		public bool strict;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 deltaHandPos;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int mask;

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xCDD6B8", Offset = "0xCDD6B8", VA = "0xCDD6B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xCDD964", Offset = "0xCDD964", VA = "0xCDD964")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xCDDB14", Offset = "0xCDDB14", VA = "0xCDDB14")]
		public void TeleportProtection(Vector3 fromPos, Vector3 toPos)
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xCDDFC8", Offset = "0xCDDFC8", VA = "0xCDDFC8")]
		public HandTeleportGuard()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	[HelpURL("https://www.notion.so/Touch-Events-1341b3e627dd443a99593ff7f0412aa6")]
	public class HandTouchEvent : MonoBehaviour
	{
		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Whether or not first hand to enter should take ownership and be the only one to call events")]
		[Header("For Solid Collision")]
		public bool oneHanded;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HandType handType;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Events")]
		public UnityHandEvent HandStartTouch;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityHandEvent HandStopTouch;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HandEvent HandStartTouchEvent;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HandEvent HandStopTouchEvent;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Hand> hands;

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xCDDFDC", Offset = "0xCDDFDC", VA = "0xCDDFDC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xCDE2BC", Offset = "0xCDE2BC", VA = "0xCDE2BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xCDE410", Offset = "0xCDE410", VA = "0xCDE410")]
		public void Touch(Hand hand)
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xCDE570", Offset = "0xCDE570", VA = "0xCDE570")]
		public void Untouch(Hand hand)
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xCDE718", Offset = "0xCDE718", VA = "0xCDE718")]
		public HandTouchEvent()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	public delegate void HandEvent(Hand hand);
	[Token(Token = "0x20002B2")]
	public class HandTriggerAreaEvents : MonoBehaviour
	{
		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Trigger Events Settings")]
		[Tooltip("Whether or not first hand to enter should take ownership and be the only one to call events")]
		public bool oneHanded;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HandType handType;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Whether or not to call the release event if exiting while grab event activated")]
		public bool exitTriggerRelease;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Whether or not to call the release event if exiting while grab event activated")]
		public bool exitTriggerUnsqueeze;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Events")]
		public UnityHandEvent HandEnter;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandEvent HandExit;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityHandEvent HandGrab;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandEvent HandRelease;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityHandEvent HandSqueeze;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityHandEvent HandUnsqueeze;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HandEvent HandEnterEvent;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public HandEvent HandExitEvent;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public HandEvent HandGrabEvent;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HandEvent HandReleaseEvent;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public HandEvent HandSqueezeEvent;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public HandEvent HandUnsqueezeEvent;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Hand> hands;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool grabbing;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool squeezing;

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xCDE8E8", Offset = "0xCDE8E8", VA = "0xCDE8E8", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xCDEC9C", Offset = "0xCDEC9C", VA = "0xCDEC9C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xCDF06C", Offset = "0xCDF06C", VA = "0xCDF06C", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xCDF1E8", Offset = "0xCDF1E8", VA = "0xCDF1E8", Slot = "7")]
		public virtual void Enter(Hand hand)
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xCDF348", Offset = "0xCDF348", VA = "0xCDF348", Slot = "8")]
		public virtual void Exit(Hand hand)
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xCDF5D0", Offset = "0xCDF5D0", VA = "0xCDF5D0", Slot = "9")]
		public virtual void Grab(Hand hand)
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xCDF6E4", Offset = "0xCDF6E4", VA = "0xCDF6E4", Slot = "10")]
		public virtual void Release(Hand hand)
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xCDF7F4", Offset = "0xCDF7F4", VA = "0xCDF7F4", Slot = "11")]
		public virtual void Squeeze(Hand hand)
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xCDF938", Offset = "0xCDF938", VA = "0xCDF938", Slot = "12")]
		public virtual void Unsqueeze(Hand hand)
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xCDFA74", Offset = "0xCDFA74", VA = "0xCDFA74")]
		public HandTriggerAreaEvents()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	[RequireComponent(typeof(Rigidbody))]
	[DefaultExecutionOrder(-1)]
	public class PhysicsFollower : MonoBehaviour
	{
		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Follow Settings")]
		[Space]
		[Tooltip("Follow target, the hand will always try to match this transforms rotation and position with rigidbody movements")]
		public Transform follow;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Stops hand physics follow - to freeze from all forces change rigidbody to kinematic or change rigidbody constraints")]
		public bool freezePos;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Stops hand physics follow - to freeze from all forces change rigidbody to kinematic or change rigidbody constraints")]
		public bool freezeRot;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This will offset the position without offsetting the rotation pivot")]
		public Vector3 followPositionOffset;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rotationOffset;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Follow target speed (This will cause jittering if turned too high)")]
		[Min(0f)]
		public float followPositionStrength;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Follow target rotation speed (This will cause jittering if turned too high)")]
		[Min(0f)]
		public float followRotationStrength;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The maximum allowed velocity of the hand")]
		[Min(0f)]
		public float maxVelocity;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Rigidbody body;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform moveTo;

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xCDFF0C", Offset = "0xCDFF0C", VA = "0xCDFF0C")]
		public void Start()
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xCDFF18", Offset = "0xCDFF18", VA = "0xCDFF18", Slot = "4")]
		public virtual void Set()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xCE00EC", Offset = "0xCE00EC", VA = "0xCE00EC")]
		public void Update()
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xCE00F8", Offset = "0xCE00F8", VA = "0xCE00F8", Slot = "5")]
		protected virtual void OnUpdate()
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xCE02B0", Offset = "0xCE02B0", VA = "0xCE02B0")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xCE02BC", Offset = "0xCE02BC", VA = "0xCE02BC", Slot = "6")]
		protected virtual void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xCE04A4", Offset = "0xCE04A4", VA = "0xCE04A4", Slot = "7")]
		internal virtual void MoveTo()
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xCE06E4", Offset = "0xCE06E4", VA = "0xCE06E4", Slot = "8")]
		internal virtual void TorqueTo()
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xCE0B2C", Offset = "0xCE0B2C", VA = "0xCE0B2C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xCE0BA0", Offset = "0xCE0BA0", VA = "0xCE0BA0")]
		public PhysicsFollower()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(CapsuleCollider))]
	[DefaultExecutionOrder(-1)]
	[HelpURL("https://www.notion.so/Auto-Move-Player-02d91305a4294e039049bd45cacc5b90")]
	public class AutoHandPlayer : MonoBehaviour
	{
		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Auto Hand Player", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The tracked headCamera object")]
		public Camera headCamera;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The object that represents the forward direction movement, usually should be set as the camera or a tracked controller")]
		public Transform forwardFollow;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This should NOT be a child of this body. This should be a GameObject that contains all the tracked objects (head/controllers)")]
		public Transform trackingContainer;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Hand handRight;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Hand handLeft;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AutoToggleHeader("Movement", 0, 0)]
		public bool useMovement;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[EnableIf("useMovement")]
		[Tooltip("Movement speed when isGrounded")]
		public float moveSpeed;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[EnableIf("useMovement")]
		[Tooltip("Maximum distance that the head is allowed to be from the body before movement on that axis is stopped")]
		[Min(0.1f)]
		public float maxHeadDistance;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float heightOffset;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AutoToggleHeader("Auto Adjust Height", 0, 0)]
		[Tooltip("Whether or not the capsule height should be adjusted to match the headCamera height")]
		public bool autoAdjustColliderHeight;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Minimum and maximum auto adjusted height, to adjust height without auto adjustment change capsule collider height instead")]
		[ShowIf("autoAdjustColliderHeight")]
		public Vector2 minMaxHeight;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AutoToggleHeader("Snap Turning", 0, 0)]
		[Tooltip("Whether or not to use snap turning or smooth turning")]
		[Min(0f)]
		public bool snapTurning;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("turn speed when not using snap turning - if snap turning, represents angle per snap")]
		[ShowIf("snapTurning")]
		public float snapTurnAngle;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[HideIf("snapTurning")]
		public float smoothTurnSpeed;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AutoToggleHeader("Use Grounding", 0, 0)]
		public bool useGrounding;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Maximum height that the body can step up onto")]
		[Min(0f)]
		[EnableIf("useGrounding")]
		public float maxStepHeight;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[EnableIf("useGrounding")]
		[Tooltip("Maximum angle the player can walk on")]
		[Min(0f)]
		public float maxStepAngle;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[EnableIf("useGrounding")]
		[Tooltip("The layers that count as ground")]
		public LayerMask groundLayerMask;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Foldout("Crouching")]
		[Header("Crouching")]
		public bool crouching;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Foldout("Crouching")]
		public float crouchHeight;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Whether or not the player can use Climbable objects  (Objects with the Climbable component)")]
		[AutoToggleHeader("Enable Climbing", 0, 0)]
		public bool allowClimbing;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[Tooltip("Whether or not the player move while climbing")]
		[ShowIf("allowClimbing")]
		public bool allowClimbingMovement;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("How quickly the player can climb")]
		[ShowIf("allowClimbing")]
		public Vector3 climbingStrength;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AutoToggleHeader("Enable Pushing", 0, 0)]
		[Tooltip("Whether or not the player can use Pushable objects (Objects with the Pushable component)")]
		public bool allowBodyPushing;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("How quickly the player can climb")]
		[EnableIf("allowBodyPushing")]
		public Vector3 pushingStrength;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Platforms will move the player with them. A platform is an object with the PlayerPlatform component on it")]
		[AutoToggleHeader("Enable Platforming", 0, 0)]
		public bool allowPlatforms;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float movementDeadzone;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float turnDeadzone;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float turnResetzone;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float groundedOffset;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float headFollowSpeed;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float groundedDrag;

		[Token(Token = "0x4001390")]
		private const int groundRayCount = 21;

		[Token(Token = "0x4001391")]
		private const float groundingDepth = 0.1f;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private HeadPhysicsFollower3lb headPhysicsFollower;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rigidbody body;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private CapsuleCollider bodyCapsule;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform moveTo;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 moveDirection;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Vector3 moveVelocity;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private List<Vector3> moveDirections;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 climbAxis;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 adjustedOffset;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float turningAxis;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float deltaY;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool isGrounded;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		private bool axisReset;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float playerHeight;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastHeightOffset;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private bool lastCrouching;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Hand lastRightHand;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Hand lastLeftHand;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Dictionary<Hand, Climbable> climbing;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Dictionary<Pushable, Hand> pushRight;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Dictionary<Pushable, int> pushRightCount;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Dictionary<Pushable, Hand> pushLeft;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Dictionary<Pushable, int> pushLeftCount;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private List<GameObject> collisions;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Vector3 pushAxis;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private RaycastHit groundHit;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private List<PlayerPlatform> platforms;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Dictionary<PlayerPlatform, int> platformsCount;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Dictionary<PlayerPlatform, Vector3> platformPositions;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Dictionary<PlayerPlatform, Quaternion> platformRotations;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Quaternion startRot;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float headDistance;

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xCE0BB8", Offset = "0xCE0BB8", VA = "0xCE0BB8", Slot = "4")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xCE12C4", Offset = "0xCE12C4", VA = "0xCE12C4", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xCE14E4", Offset = "0xCE14E4", VA = "0xCE14E4", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xCE0FCC", Offset = "0xCE0FCC", VA = "0xCE0FCC")]
		private void CreateHeadFollower()
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xCE17C4", Offset = "0xCE17C4", VA = "0xCE17C4")]
		private void CheckHands()
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xCE12E4", Offset = "0xCE12E4", VA = "0xCE12E4")]
		private void EnableHand(Hand hand)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xCE1504", Offset = "0xCE1504", VA = "0xCE1504")]
		private void DisableHand(Hand hand)
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xCE18B0", Offset = "0xCE18B0", VA = "0xCE18B0", Slot = "7")]
		public virtual void Move(Vector2 axis, bool useDeadzone = false)
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xCE190C", Offset = "0xCE190C", VA = "0xCE190C", Slot = "8")]
		public virtual void Move(Vector3 axis, bool useDeadzone = false)
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xCE1968", Offset = "0xCE1968", VA = "0xCE1968", Slot = "9")]
		public virtual void AddMove(Vector3 axis, bool useDeadzone = false)
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xCE1AA0", Offset = "0xCE1AA0", VA = "0xCE1AA0", Slot = "10")]
		public virtual void AddVelocity(Vector3 velocity)
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xCE1AC0", Offset = "0xCE1AC0", VA = "0xCE1AC0", Slot = "11")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xCE1BAC", Offset = "0xCE1BAC", VA = "0xCE1BAC", Slot = "12")]
		public virtual void Turn(float turnAxis)
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xCE1BB4", Offset = "0xCE1BB4", VA = "0xCE1BB4", Slot = "13")]
		protected virtual void UpdateMove(float deltaTime)
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xCE248C", Offset = "0xCE248C", VA = "0xCE248C")]
		private Vector3 AlterDirection(Vector3 moveAxis, float deltaTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xCE2F04", Offset = "0xCE2F04", VA = "0xCE2F04", Slot = "14")]
		protected virtual void UpdateTurn()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xCE3238", Offset = "0xCE3238", VA = "0xCE3238", Slot = "15")]
		public virtual void SetPosition(Vector3 position)
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xCE32C0", Offset = "0xCE32C0", VA = "0xCE32C0", Slot = "16")]
		public virtual void SetPosition(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xCE3838", Offset = "0xCE3838", VA = "0xCE3838", Slot = "17")]
		public virtual void SetRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xCE3C80", Offset = "0xCE3C80", VA = "0xCE3C80", Slot = "18")]
		public virtual void AddRotation(Quaternion addRotation)
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xCE4018", Offset = "0xCE4018", VA = "0xCE4018", Slot = "19")]
		public virtual void AddLocalRotation(Quaternion addRotation)
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xCE4384", Offset = "0xCE4384", VA = "0xCE4384", Slot = "20")]
		public virtual void Recenter()
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xCE452C", Offset = "0xCE452C", VA = "0xCE452C", Slot = "21")]
		protected virtual void Ground(float radius, float yPos, Transform transform)
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xCE4D58", Offset = "0xCE4D58", VA = "0xCE4D58")]
		public bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xCE4D60", Offset = "0xCE4D60", VA = "0xCE4D60")]
		public void ToggleFlying()
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xCE4D70", Offset = "0xCE4D70", VA = "0xCE4D70", Slot = "22")]
		protected virtual void UpdatePlayerHeight()
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xCE4ED8", Offset = "0xCE4ED8", VA = "0xCE4ED8", Slot = "23")]
		protected virtual void StartPush(Hand hand, GameObject other)
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xCE510C", Offset = "0xCE510C", VA = "0xCE510C", Slot = "24")]
		protected virtual void StopPush(Hand hand, GameObject other)
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xCE5300", Offset = "0xCE5300", VA = "0xCE5300", Slot = "25")]
		protected virtual void StartGrabPush(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xCE5558", Offset = "0xCE5558", VA = "0xCE5558", Slot = "26")]
		protected virtual void EndGrabPush(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xCE56CC", Offset = "0xCE56CC", VA = "0xCE56CC", Slot = "27")]
		protected virtual void ApplyPushingForce()
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xCE27B4", Offset = "0xCE27B4", VA = "0xCE27B4")]
		public bool IsPushing()
		{
			return default(bool);
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xCE609C", Offset = "0xCE609C", VA = "0xCE609C", Slot = "28")]
		protected virtual void StartClimb(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xCE6304", Offset = "0xCE6304", VA = "0xCE6304", Slot = "29")]
		protected virtual void EndClimb(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xCE63C4", Offset = "0xCE63C4", VA = "0xCE63C4", Slot = "30")]
		protected virtual void ApplyClimbingForce()
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xCE264C", Offset = "0xCE264C", VA = "0xCE264C")]
		public bool IsClimbing()
		{
			return default(bool);
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xCE66AC", Offset = "0xCE66AC", VA = "0xCE66AC", Slot = "31")]
		protected virtual void CheckPlatforms()
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xCE6CD8", Offset = "0xCE6CD8", VA = "0xCE6CD8", Slot = "32")]
		protected virtual void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xCE6F0C", Offset = "0xCE6F0C", VA = "0xCE6F0C", Slot = "33")]
		protected virtual void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xCE70C0", Offset = "0xCE70C0", VA = "0xCE70C0")]
		private bool UsePhysicsMovement()
		{
			return default(bool);
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xCE717C", Offset = "0xCE717C", VA = "0xCE717C", Slot = "34")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xCE7280", Offset = "0xCE7280", VA = "0xCE7280", Slot = "35")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xCE7334", Offset = "0xCE7334", VA = "0xCE7334")]
		public static LayerMask GetPhysicsLayerMask(int currentLayer)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xCE739C", Offset = "0xCE739C", VA = "0xCE739C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xCE7A10", Offset = "0xCE7A10", VA = "0xCE7A10")]
		public AutoHandPlayer()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	[RequireComponent(typeof(Grabbable))]
	public class Climbable : MonoBehaviour
	{
		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xCE7F78", Offset = "0xCE7F78", VA = "0xCE7F78")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	[DefaultExecutionOrder(100)]
	public class InterpolatedTransformUpdater : MonoBehaviour
	{
		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InterpolatedTransform3lb _interpolatedTransform;

		[Token(Token = "0x17000162")]
		private InterpolatedTransform3lb interpolatedTransform
		{
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0xCE7FD8", Offset = "0xCE7FD8", VA = "0xCE7FD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xCE8080", Offset = "0xCE8080", VA = "0xCE8080")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xCE818C", Offset = "0xCE818C", VA = "0xCE818C")]
		public InterpolatedTransformUpdater()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	[DefaultExecutionOrder(-100)]
	public class InterpolationController : MonoBehaviour
	{
		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] m_lastFixedUpdateTimes;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_newTimeIndex;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float m_interpolationFactor;

		[Token(Token = "0x17000163")]
		public static float InterpolationFactor
		{
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0xCE8194", Offset = "0xCE8194", VA = "0xCE8194")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xCE81DC", Offset = "0xCE81DC", VA = "0xCE81DC")]
		public void Start()
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xCE823C", Offset = "0xCE823C", VA = "0xCE823C")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xCE82A4", Offset = "0xCE82A4", VA = "0xCE82A4")]
		public void Update()
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xCE8294", Offset = "0xCE8294", VA = "0xCE8294")]
		private int OldTimeIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xCE8364", Offset = "0xCE8364", VA = "0xCE8364")]
		public InterpolationController()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class PlayerPlatform : MonoBehaviour
	{
		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xCE836C", Offset = "0xCE836C", VA = "0xCE836C")]
		public PlayerPlatform()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public class Teleporter : MonoBehaviour
	{
		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The object to teleport")]
		[Header("Teleport")]
		public GameObject teleportObject;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Can be left empty - Used for if there is a container that should be teleported in addition to the main teleport object")]
		public Transform[] additionalTeleports;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Aim Settings")]
		[Tooltip("The Object to Shoot the Beam From")]
		public Transform aimer;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Layers You Can Teleport On")]
		public LayerMask layer;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The Maximum Slope You Can Teleport On")]
		public float maxSurfaceAngle;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Min(0f)]
		public float distanceMultiplyer;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Min(0f)]
		public float curveStrength;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Use Worldspace Must be True")]
		public LineRenderer line;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum Length of The Teleport Line")]
		public int lineSegments;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Line Settings")]
		public Gradient canTeleportColor;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Gradient cantTeleportColor;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("This gameobject will match the position of the teleport point when aiming")]
		public GameObject indicator;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Unity Events")]
		public UnityEvent OnStartTeleport;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent OnStopTeleport;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent OnTeleport;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3[] lineArr;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool aiming;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool hitting;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private RaycastHit aimHit;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HandTeleportGuard[] teleportGuards;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AutoHandPlayer playerBody;

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xCE8374", Offset = "0xCE8374", VA = "0xCE8374")]
		private void Start()
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xCE84DC", Offset = "0xCE84DC", VA = "0xCE84DC")]
		private void Update()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xCE851C", Offset = "0xCE851C", VA = "0xCE851C")]
		private void CalculateTeleport()
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xCE8A48", Offset = "0xCE8A48", VA = "0xCE8A48")]
		private void DrawIndicator()
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xCE8B5C", Offset = "0xCE8B5C", VA = "0xCE8B5C")]
		public void StartTeleport()
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xCE8B7C", Offset = "0xCE8B7C", VA = "0xCE8B7C")]
		public void CancelTeleport()
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xCE8BBC", Offset = "0xCE8BBC", VA = "0xCE8BBC")]
		public void Teleport()
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xCE8F30", Offset = "0xCE8F30", VA = "0xCE8F30")]
		public Teleporter()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class AutoInputModule : BaseInputModule
	{
		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<HandCanvasPointer> pointers;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PointerEventData[] eventDatas;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AutoInputModule _instance;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _isDestroyed;

		[Token(Token = "0x17000164")]
		public AutoInputModule Instance
		{
			[Token(Token = "0x60011F3")]
			[Address(RVA = "0xCE9078", Offset = "0xCE9078", VA = "0xCE9078")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xCE91A4", Offset = "0xCE91A4", VA = "0xCE91A4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xCE91AC", Offset = "0xCE91AC", VA = "0xCE91AC", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xCE91B8", Offset = "0xCE91B8", VA = "0xCE91B8")]
		public int AddPointer(HandCanvasPointer pointer)
		{
			return default(int);
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xCE946C", Offset = "0xCE946C", VA = "0xCE946C")]
		public void RemovePointer(HandCanvasPointer pointer)
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xCE97E8", Offset = "0xCE97E8", VA = "0xCE97E8", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xCE9C80", Offset = "0xCE9C80", VA = "0xCE9C80")]
		public void ProcessPress(int index)
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xCE9F08", Offset = "0xCE9F08", VA = "0xCE9F08")]
		public void ProcessRelease(int index)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xCEA2B4", Offset = "0xCEA2B4", VA = "0xCEA2B4")]
		public PointerEventData GetData(int index)
		{
			return null;
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xCEA2E4", Offset = "0xCEA2E4", VA = "0xCEA2E4")]
		public AutoInputModule()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	public delegate void CollisionEvent(GameObject from);
	[Token(Token = "0x20002BD")]
	public class CollisionTracker : MonoBehaviour
	{
		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool disableCollisionTracking;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool disableTriggersTracking;

		[Token(Token = "0x17000165")]
		public int collisionCount
		{
			[Token(Token = "0x6001209")]
			[Address(RVA = "0xCEA970", Offset = "0xCEA970", VA = "0xCEA970")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000166")]
		public int triggerCount
		{
			[Token(Token = "0x600120A")]
			[Address(RVA = "0xCEA9B8", Offset = "0xCEA9B8", VA = "0xCEA9B8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000167")]
		public List<GameObject> triggerObjects
		{
			[Token(Token = "0x600120B")]
			[Address(RVA = "0xCEAA00", Offset = "0xCEAA00", VA = "0xCEAA00")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600120C")]
			[Address(RVA = "0xCEAA08", Offset = "0xCEAA08", VA = "0xCEAA08")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000168")]
		public List<int> triggerObjectsCount
		{
			[Token(Token = "0x600120D")]
			[Address(RVA = "0xCEAA10", Offset = "0xCEAA10", VA = "0xCEAA10")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600120E")]
			[Address(RVA = "0xCEAA18", Offset = "0xCEAA18", VA = "0xCEAA18")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public List<GameObject> collisionObjects
		{
			[Token(Token = "0x600120F")]
			[Address(RVA = "0xCEAA20", Offset = "0xCEAA20", VA = "0xCEAA20")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001210")]
			[Address(RVA = "0xCEAA28", Offset = "0xCEAA28", VA = "0xCEAA28")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public List<int> collisionObjectsCount
		{
			[Token(Token = "0x6001211")]
			[Address(RVA = "0xCEAA30", Offset = "0xCEAA30", VA = "0xCEAA30")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001212")]
			[Address(RVA = "0xCEAA38", Offset = "0xCEAA38", VA = "0xCEAA38")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1400002A")]
		public event CollisionEvent OnCollisionFirstEnter
		{
			[Token(Token = "0x6001201")]
			[Address(RVA = "0xCEA490", Offset = "0xCEA490", VA = "0xCEA490")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001202")]
			[Address(RVA = "0xCEA52C", Offset = "0xCEA52C", VA = "0xCEA52C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002B")]
		public event CollisionEvent OnCollisionLastExit
		{
			[Token(Token = "0x6001203")]
			[Address(RVA = "0xCEA5C8", Offset = "0xCEA5C8", VA = "0xCEA5C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001204")]
			[Address(RVA = "0xCEA664", Offset = "0xCEA664", VA = "0xCEA664")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public event CollisionEvent OnTriggerFirstEnter
		{
			[Token(Token = "0x6001205")]
			[Address(RVA = "0xCEA700", Offset = "0xCEA700", VA = "0xCEA700")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001206")]
			[Address(RVA = "0xCEA79C", Offset = "0xCEA79C", VA = "0xCEA79C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002D")]
		public event CollisionEvent OnTriggeLastExit
		{
			[Token(Token = "0x6001207")]
			[Address(RVA = "0xCEA838", Offset = "0xCEA838", VA = "0xCEA838")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001208")]
			[Address(RVA = "0xCEA8D4", Offset = "0xCEA8D4", VA = "0xCEA8D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xCEAA40", Offset = "0xCEAA40", VA = "0xCEAA40")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xCEAB08", Offset = "0xCEAB08", VA = "0xCEAB08", Slot = "4")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xCEAD54", Offset = "0xCEAD54", VA = "0xCEAD54")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xCEAD58", Offset = "0xCEAD58", VA = "0xCEAD58")]
		private void CheckCollisions()
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xCEB000", Offset = "0xCEB000", VA = "0xCEB000", Slot = "5")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xCEB260", Offset = "0xCEB260", VA = "0xCEB260", Slot = "6")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xCEB438", Offset = "0xCEB438", VA = "0xCEB438", Slot = "7")]
		protected virtual void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xCEB674", Offset = "0xCEB674", VA = "0xCEB674", Slot = "8")]
		protected virtual void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xCEB844", Offset = "0xCEB844", VA = "0xCEB844")]
		public CollisionTracker()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	public class HandCanvasPointer : MonoBehaviour
	{
		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public GameObject hitPointMarker;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Ray settings")]
		public float raycastLength;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool autoShowTarget;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LayerMask UILayer;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Events")]
		public UnityEvent StartSelect;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent StopSelect;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent StartPoint;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent StopPoint;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool hover;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AutoInputModule inputModule;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Camera cam;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int pointerIndex;

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xCEB97C", Offset = "0xCEB97C", VA = "0xCEB97C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xCEBC88", Offset = "0xCEBC88", VA = "0xCEBC88")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xCEBCB8", Offset = "0xCEBCB8", VA = "0xCEBCB8")]
		public void SetIndex(int index)
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xCE9BB8", Offset = "0xCE9BB8", VA = "0xCE9BB8")]
		internal void Preprocess()
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xCEBCC0", Offset = "0xCEBCC0", VA = "0xCEBCC0")]
		public void Press()
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xCEBD58", Offset = "0xCEBD58", VA = "0xCEBD58")]
		public void Release()
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xCEBD90", Offset = "0xCEBD90", VA = "0xCEBD90")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xCEBFE4", Offset = "0xCEBFE4", VA = "0xCEBFE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xCEBFE8", Offset = "0xCEBFE8", VA = "0xCEBFE8")]
		private void UpdateLine()
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xCEC21C", Offset = "0xCEC21C", VA = "0xCEC21C")]
		private RaycastHit CreateRaycast(float dist)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xCEBD14", Offset = "0xCEBD14", VA = "0xCEBD14")]
		private void ShowRay(bool show)
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xCEC30C", Offset = "0xCEC30C", VA = "0xCEC30C")]
		public HandCanvasPointer()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	public class XRMover : MonoBehaviour
	{
		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Controllers")]
		[Header("TEMP DEMO SCRIPT - Advanced script coming soon")]
		public XRHandControllerLink moverController;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink turningController;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Common2DAxis moverAxis;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Body")]
		public GameObject cam;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CharacterController controller;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CapsuleCollider collisionCapsule;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Settings")]
		public bool snapTurning;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float turnAngle;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float speed;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float gravity;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float currentGravity;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool axisReset;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 moveAxis;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector2 turningAxis;

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xCEC324", Offset = "0xCEC324", VA = "0xCEC324")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xCEC784", Offset = "0xCEC784", VA = "0xCEC784")]
		private void Awake()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xCEC404", Offset = "0xCEC404", VA = "0xCEC404")]
		public void Move(float x, float y, float z)
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xCEC510", Offset = "0xCEC510", VA = "0xCEC510")]
		private void Turning()
		{
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xCEC828", Offset = "0xCEC828", VA = "0xCEC828")]
		public XRMover()
		{
		}
	}
	[Token(Token = "0x20002C0")]
	public class KeyboardHand : MonoBehaviour
	{
		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float flySpeed;

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xCEC844", Offset = "0xCEC844", VA = "0xCEC844")]
		private void Update()
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xCECAC8", Offset = "0xCECAC8", VA = "0xCECAC8")]
		public KeyboardHand()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	[RequireComponent(typeof(AutoMoveController))]
	public class AutoMoveTeleporter : MonoBehaviour
	{
		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Can be left empty - Used for if there is a container that should be teleported in addition to the main teleport object")]
		[FancyHeader("Teleport", 0, 0)]
		public Transform[] additionalTeleports;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[FancyHeader("Input", 0, 0)]
		public AutoMoveController.eControllerType controllerType;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The button that triggers teleport")]
		public InputVR3lb.Button button;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FancyHeader("Targeting", 0, 0)]
		public bool usingNavMesh;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Layers You Can Teleport On")]
		[HideIf("usingNavMesh")]
		public LayerMask teleportLayers;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space]
		[Tooltip("The Object to Shoot the Beam From, should be a child of a hand or tracked controller")]
		public LineRenderer lineRight;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Object to Shoot the Beam From, should be a child of a hand or tracked controller")]
		public LineRenderer lineLeft;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The Maximum Slope You Can Teleport On")]
		public float maxSurfaceAngle;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The distance multiplyer of the teleport line")]
		[Min(0f)]
		public float distanceMultiplyer;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Min(0f)]
		[Tooltip("The \"gravity\" of the teleport line")]
		public float curveStrength;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[FancyHeader("Line Settings", 0, 0)]
		[Tooltip("Maximum Length of The Teleport Line")]
		public int lineSegments;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Use Worldspace Must be True")]
		public Gradient canTeleportColor;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Sets the line renderer teleport color to this")]
		public Gradient cantTeleportColor;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("This gameobject will match the position of the teleport point when aiming")]
		public GameObject indicator;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[FancyHeader("Unity Events", 0, 0)]
		private bool showEvents;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ShowIf("showEvents")]
		public UnityEvent OnStartTeleportAim;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ShowIf("showEvents")]
		public UnityEvent OnStopTeleportAim;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ShowIf("showEvents")]
		public UnityEvent OnTeleport;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3[] lineArr;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public HandTeleportGuard[] teleportGuards;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AutoMoveCharacter refCharController;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AutoMoveController refInput;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private RaycastHit rayHitRight;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private RaycastHit rayHitLeft;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private NavMeshHit navHitRight;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private NavMeshHit navHitLeft;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private bool hittingRight;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		private bool hittingLeft;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		private bool aimingRight;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14B")]
		private bool aimingLeft;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private bool teleportingRight;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
		private bool teleportingLeft;

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xCECAD8", Offset = "0xCECAD8", VA = "0xCECAD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xCECB80", Offset = "0xCECB80", VA = "0xCECB80")]
		private void Update()
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xCECBF0", Offset = "0xCECBF0", VA = "0xCECBF0")]
		private void CheckTeleport()
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xCECB98", Offset = "0xCECB98", VA = "0xCECB98")]
		private void CheckInput()
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xCECCA0", Offset = "0xCECCA0", VA = "0xCECCA0")]
		private void CalculateTeleport(LineRenderer line, ref bool hitting, ref RaycastHit rayHit, ref NavMeshHit navHit)
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xCED5E0", Offset = "0xCED5E0", VA = "0xCED5E0")]
		private void DrawIndicator(bool hitting, RaycastHit aimHit, NavMeshHit navHit)
		{
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xCED764", Offset = "0xCED764", VA = "0xCED764")]
		public void StartTeleport(LineRenderer line, ref bool aiming)
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xCED780", Offset = "0xCED780", VA = "0xCED780")]
		public void CancelTeleport(LineRenderer line, ref bool aiming, ref bool hitting)
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xCED7D8", Offset = "0xCED7D8", VA = "0xCED7D8")]
		public void Teleport(LineRenderer forward, RaycastHit aimHit, NavMeshHit navHit, ref bool aiming, ref bool hitting)
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xCEDB28", Offset = "0xCEDB28", VA = "0xCEDB28")]
		public AutoMoveTeleporter()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	[RequireComponent(typeof(Rigidbody))]
	public class HeadPhysicsFollower3lb : MonoBehaviour
	{
		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public Camera headCamera;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingContainer;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform followBody;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Follow Settings")]
		public float followStrength;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The maximum allowed distance from the body for the headCamera to still move")]
		public float maxBodyDistance;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal SphereCollider headCollider;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 startHeadPos;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool started;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform moveTo;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal Rigidbody body;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CollisionTracker collisionTracker;

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xCEDC7C", Offset = "0xCEDC7C", VA = "0xCEDC7C")]
		public void Start()
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xCEE018", Offset = "0xCEE018", VA = "0xCEE018")]
		internal void Init()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xCEE324", Offset = "0xCEE324", VA = "0xCEE324")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xCEE404", Offset = "0xCEE404", VA = "0xCEE404")]
		public bool Started()
		{
			return default(bool);
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xCEE40C", Offset = "0xCEE40C", VA = "0xCEE40C", Slot = "4")]
		internal virtual void MoveTo()
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xCEE654", Offset = "0xCEE654", VA = "0xCEE654")]
		public int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xCEE66C", Offset = "0xCEE66C", VA = "0xCEE66C")]
		public HeadPhysicsFollower3lb()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	[RequireComponent(typeof(InterpolatedTransformUpdater))]
	[DefaultExecutionOrder(-50)]
	public class InterpolatedTransform3lb : MonoBehaviour
	{
		[Token(Token = "0x20002C4")]
		private struct TransformData
		{
			[Token(Token = "0x400142B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x400142C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Quaternion rotation;

			[Token(Token = "0x400142D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 scale;

			[Token(Token = "0x600124C")]
			[Address(RVA = "0xCEE8B0", Offset = "0xCEE8B0", VA = "0xCEE8B0")]
			public TransformData(Vector3 position, Quaternion rotation, Vector3 scale)
			{
			}
		}

		[Token(Token = "0x20002C5")]
		[CompilerGenerated]
		private sealed class <Disable>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400142E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400142F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001430")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InterpolatedTransform3lb <>4__this;

			[Token(Token = "0x4001431")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x1700016B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001250")]
				[Address(RVA = "0xCEEEA8", Offset = "0xCEEEA8", VA = "0xCEEEA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001252")]
				[Address(RVA = "0xCEEEF0", Offset = "0xCEEEF0", VA = "0xCEEEF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600124D")]
			[Address(RVA = "0xCEEDA0", Offset = "0xCEEDA0", VA = "0xCEEDA0")]
			[DebuggerHidden]
			public <Disable>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x600124E")]
			[Address(RVA = "0xCEEDD8", Offset = "0xCEEDD8", VA = "0xCEEDD8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600124F")]
			[Address(RVA = "0xCEEDDC", Offset = "0xCEEDDC", VA = "0xCEEDDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001251")]
			[Address(RVA = "0xCEEEB0", Offset = "0xCEEEB0", VA = "0xCEEEB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TransformData[] m_lastTransforms;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_newTransformIndex;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool run;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool runRotation;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine disableForTime;

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xCEE680", Offset = "0xCEE680", VA = "0xCEE680")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xCEE770", Offset = "0xCEE770", VA = "0xCEE770")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xCEE774", Offset = "0xCEE774", VA = "0xCEE774")]
		public void ForgetPreviousTransforms()
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xCEE8D4", Offset = "0xCEE8D4", VA = "0xCEE8D4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xCE809C", Offset = "0xCE809C", VA = "0xCE809C")]
		public void LateFixedUpdate()
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xCEE9F4", Offset = "0xCEE9F4", VA = "0xCEE9F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xCEEC78", Offset = "0xCEEC78", VA = "0xCEEC78")]
		public void DisableForSeconds(float time)
		{
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xCEED1C", Offset = "0xCEED1C", VA = "0xCEED1C")]
		[IteratorStateMachine(typeof(<Disable>d__12))]
		private IEnumerator Disable(float time)
		{
			return null;
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xCEE9E4", Offset = "0xCEE9E4", VA = "0xCEE9E4")]
		private int OldTransformIndex()
		{
			return default(int);
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xCEEDC8", Offset = "0xCEEDC8", VA = "0xCEEDC8")]
		public InterpolatedTransform3lb()
		{
		}
	}
}
namespace Autohand.Demo
{
	[Token(Token = "0x20002C6")]
	public class CubeBreak : MonoBehaviour
	{
		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float force;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] offsets;

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xCEEEF8", Offset = "0xCEEEF8", VA = "0xCEEEF8")]
		[ContextMenu("Break")]
		public void Break()
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xCEF4F4", Offset = "0xCEF4F4", VA = "0xCEF4F4")]
		public CubeBreak()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class Door : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Door should start closed")]
		public Rigidbody body;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 closedPosition;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion closedRotation;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("The door needs to reach this level of open before it can be reset")]
		public float minThreshold;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float midThreshold;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The door needs to reach this level of open before it can be reset")]
		public float maxThreshold;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Space]
		public UnityEvent OnMax;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent OnMid;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent OnMin;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool min;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool max;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool mid;

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xCEF614", Offset = "0xCEF614", VA = "0xCEF614")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0xCEF72C", Offset = "0xCEF72C", VA = "0xCEF72C")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xCEF868", Offset = "0xCEF868", VA = "0xCEF868")]
		private void Max()
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xCEF8AC", Offset = "0xCEF8AC", VA = "0xCEF8AC")]
		private void Mid()
		{
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xCEF888", Offset = "0xCEF888", VA = "0xCEF888")]
		private void Min()
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xCEF8D0", Offset = "0xCEF8D0", VA = "0xCEF8D0")]
		public void ClosedDoor()
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xCEF930", Offset = "0xCEF930", VA = "0xCEF930")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xCEFA10", Offset = "0xCEFA10", VA = "0xCEFA10")]
		public Door()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public class ExplosionSource : MonoBehaviour
	{
		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float force;

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xCEFA34", Offset = "0xCEFA34", VA = "0xCEFA34")]
		public void Explode(bool destroy)
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xCEFBD4", Offset = "0xCEFBD4", VA = "0xCEFBD4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xCEFC20", Offset = "0xCEFC20", VA = "0xCEFC20")]
		public ExplosionSource()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class HandSwapper : MonoBehaviour
	{
		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AutoHandPlayer player;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hand fromHand;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Hand toHand;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject fromModel;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject toModel;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool swapped;

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xCEFC34", Offset = "0xCEFC34", VA = "0xCEFC34")]
		public void Swap()
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xCEFDC8", Offset = "0xCEFDC8", VA = "0xCEFDC8")]
		public HandSwapper()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	public class JoystickObjectMover : PhysicsGadgetJoystick
	{
		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform move;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float speed;

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xCEFDD0", Offset = "0xCEFDD0", VA = "0xCEFDD0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xCEFE74", Offset = "0xCEFE74", VA = "0xCEFE74")]
		public JoystickObjectMover()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public class Pistol : MonoBehaviour
	{
		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody body;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform barrelTip;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float hitPower;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float recoilPower;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float range;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask layer;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip shootSound;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float shootVolume;

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xCEFE84", Offset = "0xCEFE84", VA = "0xCEFE84")]
		private void Start()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xCEFF6C", Offset = "0xCEFF6C", VA = "0xCEFF6C")]
		public void Shoot()
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xCF03F8", Offset = "0xCF03F8", VA = "0xCF03F8")]
		public Pistol()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class PlayerFallCatcher : MonoBehaviour
	{
		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AutoHandPlayer player;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 startPos;

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xCF0418", Offset = "0xCF0418", VA = "0xCF0418")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xCF04E8", Offset = "0xCF04E8", VA = "0xCF04E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xCF05A8", Offset = "0xCF05A8", VA = "0xCF05A8")]
		public PlayerFallCatcher()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public class ScaleHighlight : MonoBehaviour
	{
		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 highlighScale;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 normalScale;

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xCF05B0", Offset = "0xCF05B0", VA = "0xCF05B0")]
		public void Highlight()
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xCF05DC", Offset = "0xCF05DC", VA = "0xCF05DC")]
		public void HighlightStop()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xCF0608", Offset = "0xCF0608", VA = "0xCF0608")]
		public ScaleHighlight()
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public class Spinner : MonoBehaviour
	{
		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 rotationSpeed;

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xCF0610", Offset = "0xCF0610", VA = "0xCF0610")]
		private void Update()
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xCF066C", Offset = "0xCF066C", VA = "0xCF066C")]
		public Spinner()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public class ToggleAutoMoveFlying : MonoBehaviour
	{
		[Token(Token = "0x600126F")]
		[Address(RVA = "0xCF0674", Offset = "0xCF0674", VA = "0xCF0674")]
		public void ToggleFlying()
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xCF06D8", Offset = "0xCF06D8", VA = "0xCF06D8")]
		public ToggleAutoMoveFlying()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class TomatoSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] tomatoes;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<GameObject> copies;

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xCF06E0", Offset = "0xCF06E0", VA = "0xCF06E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xCF0954", Offset = "0xCF0954", VA = "0xCF0954")]
		public void SpawnTomato()
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xCF0AEC", Offset = "0xCF0AEC", VA = "0xCF0AEC")]
		public TomatoSpawner()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class ButtonDemoRespawn : MonoBehaviour
	{
		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform root;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Transform> respawns;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Vector3> startPos;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Quaternion> startRot;

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xCF0AF4", Offset = "0xCF0AF4", VA = "0xCF0AF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xCF0FD4", Offset = "0xCF0FD4", VA = "0xCF0FD4")]
		public void Respawn()
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xCF1308", Offset = "0xCF1308", VA = "0xCF1308")]
		public void ReloadScene()
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xCF1378", Offset = "0xCF1378", VA = "0xCF1378")]
		public ButtonDemoRespawn()
		{
		}
	}
	[Token(Token = "0x20002D2")]
	public class DialHandScaler : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Hand hand;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 minScale;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 maxScale;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float startReach;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 startScale;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float[] fingersStartScale;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 lastHandScale;

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xCF1400", Offset = "0xCF1400", VA = "0xCF1400")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xCF1534", Offset = "0xCF1534", VA = "0xCF1534")]
		private void Update()
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xCF17F8", Offset = "0xCF17F8", VA = "0xCF17F8")]
		public DialHandScaler()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public class MoverLever : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform move;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 axis;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float speed;

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xCF1800", Offset = "0xCF1800", VA = "0xCF1800")]
		private void Update()
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xCF19C0", Offset = "0xCF19C0", VA = "0xCF19C0")]
		public MoverLever()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class PhysicsSliderPositionMover : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Movement")]
		public Transform move;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Acts as speed")]
		public Vector3 axis;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Header("Range")]
		public bool useRange;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 minRange;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 maxRange;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 startPos;

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xCF19D0", Offset = "0xCF19D0", VA = "0xCF19D0")]
		protected new void Start()
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xCF1A04", Offset = "0xCF1A04", VA = "0xCF1A04")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xCF1B5C", Offset = "0xCF1B5C", VA = "0xCF1B5C")]
		public PhysicsSliderPositionMover()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public class WheelRotator : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform move;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 angle;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool useLocal;

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xCF1BEC", Offset = "0xCF1BEC", VA = "0xCF1BEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xCF1E18", Offset = "0xCF1E18", VA = "0xCF1E18")]
		public WheelRotator()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public class Smash : MonoBehaviour
	{
		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Smash Options")]
		[Tooltip("Required velocity magnitude from Smasher to smash")]
		public float smashForce;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Whether or not to destroy this object on smash")]
		public bool destroyOnSmash;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[HideIf("destroyOnSmash")]
		[Tooltip("Whether or not to release this object on smash")]
		public bool releaseOnSmash;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Plays this effect on smash")]
		[Header("Particle Effect")]
		public ParticleSystem effect;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Whether or not to instantiates a new a particle system on smash")]
		public bool createNewEffect;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("Whether or not to apply rigidbody velocity to particle velocity on smash")]
		public bool applyVelocityOnSmash;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Sound Options")]
		public AudioClip smashSound;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float smashVolume;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Event")]
		public UnityEvent OnSmash;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SmashEvent OnSmashEvent;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal Grabbable grabbable;

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xCF1E20", Offset = "0xCF1E20", VA = "0xCF1E20")]
		public void Start()
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xCF20F8", Offset = "0xCF20F8", VA = "0xCF20F8")]
		public void DelayedSmash(float delay)
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xCF03F0", Offset = "0xCF03F0", VA = "0xCF03F0")]
		public void DoSmash()
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xCF2154", Offset = "0xCF2154", VA = "0xCF2154")]
		public void DoSmash(Smasher smash)
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xCF24EC", Offset = "0xCF24EC", VA = "0xCF24EC")]
		public Smash()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public delegate void SmashEvent(Smasher smasher, Smash smashable);
	[Token(Token = "0x20002D8")]
	[RequireComponent(typeof(Rigidbody))]
	public class Smasher : MonoBehaviour
	{
		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Options")]
		public LayerMask smashableLayers;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How much to multiply the magnitude on smash")]
		public float forceMulti;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Can be left empty - The center of mass point to calculate velocity magnitude - for example: the camera of the hammer is a better point vs the pivot center of the hammer object")]
		public Transform centerOfMassPoint;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Event")]
		public UnityEvent OnSmash;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SmashEvent OnSmashEvent;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] velocityOverTime;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastPos;

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xCF2564", Offset = "0xCF2564", VA = "0xCF2564")]
		private void Start()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xCF272C", Offset = "0xCF272C", VA = "0xCF272C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xCF2898", Offset = "0xCF2898", VA = "0xCF2898")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xCF2950", Offset = "0xCF2950", VA = "0xCF2950")]
		private float GetMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xCF2A6C", Offset = "0xCF2A6C", VA = "0xCF2A6C")]
		public Smasher()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class LeverTextChanger : MonoBehaviour
	{
		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicsGadgetHingeAngleReader sliderReader;

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xCF2AEC", Offset = "0xCF2AEC", VA = "0xCF2AEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xCF2BD8", Offset = "0xCF2BD8", VA = "0xCF2BD8")]
		public LeverTextChanger()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class SliderTextChanger : MonoBehaviour
	{
		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicsGadgetConfigurableLimitReader sliderReader;

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xCF2BE0", Offset = "0xCF2BE0", VA = "0xCF2BE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xCF2CCC", Offset = "0xCF2CCC", VA = "0xCF2CCC")]
		public SliderTextChanger()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class TextChanger : MonoBehaviour
	{
		[Token(Token = "0x20002DC")]
		[CompilerGenerated]
		private sealed class <ChangeText>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400148A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400148B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400148C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextChanger <>4__this;

			[Token(Token = "0x400148D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string newText;

			[Token(Token = "0x400148E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float seconds;

			[Token(Token = "0x400148F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <totalTime>5__2;

			[Token(Token = "0x4001490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <timePassed>5__3;

			[Token(Token = "0x1700016D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600129E")]
				[Address(RVA = "0xCF3210", Offset = "0xCF3210", VA = "0xCF3210", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012A0")]
				[Address(RVA = "0xCF3258", Offset = "0xCF3258", VA = "0xCF3258", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600129B")]
			[Address(RVA = "0xCF2EEC", Offset = "0xCF2EEC", VA = "0xCF2EEC")]
			[DebuggerHidden]
			public <ChangeText>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600129C")]
			[Address(RVA = "0xCF2F78", Offset = "0xCF2F78", VA = "0xCF2F78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600129D")]
			[Address(RVA = "0xCF2F7C", Offset = "0xCF2F7C", VA = "0xCF2F7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600129F")]
			[Address(RVA = "0xCF3218", Offset = "0xCF3218", VA = "0xCF3218", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine changing;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine hide;

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xCF2CD4", Offset = "0xCF2CD4", VA = "0xCF2CD4")]
		public void UpdateText(string newText, float upTime)
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xCF2E38", Offset = "0xCF2E38", VA = "0xCF2E38")]
		public void UpdateText(string newText)
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xCF2D98", Offset = "0xCF2D98", VA = "0xCF2D98")]
		[IteratorStateMachine(typeof(<ChangeText>d__5))]
		private IEnumerator ChangeText(float seconds, string newText)
		{
			return null;
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xCF2F14", Offset = "0xCF2F14", VA = "0xCF2F14")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xCF2F70", Offset = "0xCF2F70", VA = "0xCF2F70")]
		public TextChanger()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public class TextGrabEvent : MonoBehaviour
	{
		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextChanger changer;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grab;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[TextArea]
		public string message;

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xCF3260", Offset = "0xCF3260", VA = "0xCF3260")]
		private void Start()
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xCF3450", Offset = "0xCF3450", VA = "0xCF3450")]
		private void OnGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xCF3468", Offset = "0xCF3468", VA = "0xCF3468")]
		public TextGrabEvent()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	public class TextPlacePointEvent : MonoBehaviour
	{
		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextChanger changer;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlacePoint point;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[TextArea]
		public string placeMessage;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[TextArea]
		public string highlightMessage;

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xCF3470", Offset = "0xCF3470", VA = "0xCF3470")]
		private void Start()
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xCF3684", Offset = "0xCF3684", VA = "0xCF3684")]
		private void OnGrab(PlacePoint hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xCF36A4", Offset = "0xCF36A4", VA = "0xCF36A4")]
		private void OnHighlight(PlacePoint hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xCF36C4", Offset = "0xCF36C4", VA = "0xCF36C4")]
		public TextPlacePointEvent()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableEventDebugger : MonoBehaviour
	{
		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xCF36D4", Offset = "0xCF36D4", VA = "0xCF36D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xCF3E04", Offset = "0xCF3E04", VA = "0xCF3E04")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xCF4534", Offset = "0xCF4534", VA = "0xCF4534")]
		public GrabbableEventDebugger()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	[RequireComponent(typeof(Hand))]
	public class HandEventDebugger : MonoBehaviour
	{
		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showSqueezeEvents;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool showHighlightEvents;

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xCF4EF4", Offset = "0xCF4EF4", VA = "0xCF4EF4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xCF51B8", Offset = "0xCF51B8", VA = "0xCF51B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xCF547C", Offset = "0xCF547C", VA = "0xCF547C")]
		public HandEventDebugger()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class WristLookEvent : MonoBehaviour
	{
		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera head;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The minimum head->wrist distance required to activate")]
		public float maxDistance;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The angle precisness required to activate; 0 is any angle, 1 is exactly pointed at the face")]
		[Range(0f, 1f)]
		public float anglePreciseness;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool disableWhileHolding;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Header("Debug")]
		public bool useDebug;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Events")]
		public UnityHandEvent OnShow;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandEvent OnHide;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool showing;

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xCF5ECC", Offset = "0xCF5ECC", VA = "0xCF5ECC")]
		private void Update()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xCF6348", Offset = "0xCF6348", VA = "0xCF6348")]
		public WristLookEvent()
		{
		}
	}
	[Token(Token = "0x20002E3")]
	public class AutoHandAxisFingerBender3lb : MonoBehaviour
	{
		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputVR3lb.ButtonAxis1D axis;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lastAxis;

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xCF6360", Offset = "0xCF6360", VA = "0xCF6360")]
		private void Update()
		{
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xCF6464", Offset = "0xCF6464", VA = "0xCF6464")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xCF658C", Offset = "0xCF658C", VA = "0xCF658C")]
		public AutoHandAxisFingerBender3lb()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class AutoHandFingerBender3lb : MonoBehaviour
	{
		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputVR3lb.Button button;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pressed;

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xCF6594", Offset = "0xCF6594", VA = "0xCF6594")]
		private void Update()
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xCF675C", Offset = "0xCF675C", VA = "0xCF675C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xCF6884", Offset = "0xCF6884", VA = "0xCF6884")]
		public AutoHandFingerBender3lb()
		{
		}
	}
	[Token(Token = "0x20002E5")]
	public class HandPointGrabLink3lb : MonoBehaviour
	{
		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandDistanceGrabber pointGrab;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Input")]
		public InputVR3lb.Button pointInput;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public InputVR3lb.Button selectInput;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool pointing;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool selecting;

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xCF688C", Offset = "0xCF688C", VA = "0xCF688C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xCF6A34", Offset = "0xCF6A34", VA = "0xCF6A34")]
		public HandPointGrabLink3lb()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public class InputVR3lbEvent : MonoBehaviour
	{
		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputVR3lb.Button button;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public InputVR3lb.Controller controller;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent Pressed;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent Released;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pressed;

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xCF6A3C", Offset = "0xCF6A3C", VA = "0xCF6A3C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xCF6AE0", Offset = "0xCF6AE0", VA = "0xCF6AE0")]
		public InputVR3lbEvent()
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class XRAutoHandAxisFingerBender : MonoBehaviour
	{
		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink controller;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonAxis axis;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lastAxis;

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xCF6AE8", Offset = "0xCF6AE8", VA = "0xCF6AE8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xCF6BE8", Offset = "0xCF6BE8", VA = "0xCF6BE8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xCF6D18", Offset = "0xCF6D18", VA = "0xCF6D18")]
		public XRAutoHandAxisFingerBender()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class XRAutoHandFingerBender : MonoBehaviour
	{
		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink controller;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton button;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pressed;

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xCF6D20", Offset = "0xCF6D20", VA = "0xCF6D20")]
		private void Update()
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xCF6EC8", Offset = "0xCF6EC8", VA = "0xCF6EC8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xCF6FF8", Offset = "0xCF6FF8", VA = "0xCF6FF8")]
		public XRAutoHandFingerBender()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class XRControllerEvent : MonoBehaviour
	{
		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink link;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton button;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent Pressed;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent Released;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool pressed;

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xCF7000", Offset = "0xCF7000", VA = "0xCF7000")]
		private void Update()
		{
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xCF707C", Offset = "0xCF707C", VA = "0xCF707C")]
		public XRControllerEvent()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public enum CommonButton
	{
		[Token(Token = "0x40014D5")]
		gripButton,
		[Token(Token = "0x40014D6")]
		menuButton,
		[Token(Token = "0x40014D7")]
		primaryButton,
		[Token(Token = "0x40014D8")]
		secondaryButton,
		[Token(Token = "0x40014D9")]
		triggerButton,
		[Token(Token = "0x40014DA")]
		primary2DAxisClick,
		[Token(Token = "0x40014DB")]
		primary2DAxisTouch,
		[Token(Token = "0x40014DC")]
		secondary2DAxisClick,
		[Token(Token = "0x40014DD")]
		secondary2DAxisTouch,
		[Token(Token = "0x40014DE")]
		primaryTouch,
		[Token(Token = "0x40014DF")]
		secondaryTouch,
		[Token(Token = "0x40014E0")]
		none
	}
	[Token(Token = "0x20002EB")]
	public enum CommonAxis
	{
		[Token(Token = "0x40014E2")]
		trigger,
		[Token(Token = "0x40014E3")]
		grip,
		[Token(Token = "0x40014E4")]
		none
	}
	[Token(Token = "0x20002EC")]
	public enum Common2DAxis
	{
		[Token(Token = "0x40014E6")]
		primaryAxis,
		[Token(Token = "0x40014E7")]
		secondaryAxis,
		[Token(Token = "0x40014E8")]
		none
	}
	[Token(Token = "0x20002ED")]
	public class XRHandControllerLink : HandControllerLink
	{
		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton grabButton;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This axis will bend all the fingers on the hand -> replaced with finger bender scripts")]
		public CommonAxis grabAxis;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CommonButton squeezeButton;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private XRNode role;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool squeezing;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool grabbing;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InputDevice device;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<InputDevice> devices;

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xCF7084", Offset = "0xCF7084", VA = "0xCF7084")]
		private void Start()
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xCF71C0", Offset = "0xCF71C0", VA = "0xCF71C0")]
		private void Update()
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xCF752C", Offset = "0xCF752C", VA = "0xCF752C")]
		public List<InputDevice> Devices()
		{
			return null;
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xCF6E68", Offset = "0xCF6E68", VA = "0xCF6E68")]
		public bool ButtonPressed(CommonButton button)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xCF6B94", Offset = "0xCF6B94", VA = "0xCF6B94")]
		public float GetAxis(CommonAxis axis)
		{
			return default(float);
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xCEC378", Offset = "0xCEC378", VA = "0xCEC378")]
		public Vector2 GetAxis2D(Common2DAxis axis)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xCF760C", Offset = "0xCF760C", VA = "0xCF760C", Slot = "4")]
		public override void TryHapticImpulse(float duration, float amp)
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xCF7378", Offset = "0xCF7378", VA = "0xCF7378")]
		public static InputFeatureUsage<bool> GetCommonButton(CommonButton button)
		{
			return default(InputFeatureUsage<bool>);
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xCF7534", Offset = "0xCF7534", VA = "0xCF7534")]
		public static InputFeatureUsage<float> GetCommonAxis(CommonAxis axis)
		{
			return default(InputFeatureUsage<float>);
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xCF75A0", Offset = "0xCF75A0", VA = "0xCF75A0")]
		public static InputFeatureUsage<Vector2> GetCommon2DAxis(Common2DAxis axis)
		{
			return default(InputFeatureUsage<Vector2>);
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xCF77B4", Offset = "0xCF77B4", VA = "0xCF77B4")]
		public XRHandControllerLink()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public class XRHandControllerLink3lb : MonoBehaviour
	{
		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xCF77C4", Offset = "0xCF77C4", VA = "0xCF77C4")]
		private void Update()
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xCF7950", Offset = "0xCF7950", VA = "0xCF7950")]
		public XRHandControllerLink3lb()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class XRHandPlayerControllerLink : MonoBehaviour
	{
		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink moveController;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink turnController;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AutoHandPlayer player;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Input")]
		public Common2DAxis moveAxis;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Common2DAxis turnAxis;

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xCF7958", Offset = "0xCF7958", VA = "0xCF7958")]
		private void Update()
		{
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xCF79C4", Offset = "0xCF79C4", VA = "0xCF79C4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xCF7A00", Offset = "0xCF7A00", VA = "0xCF7A00")]
		public XRHandPlayerControllerLink()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class XRHandPointGrabLink : MonoBehaviour
	{
		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandDistanceGrabber pointGrab;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink link;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Input")]
		public CommonButton pointInput;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public CommonButton selectInput;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pointing;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool selecting;

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xCF7A08", Offset = "0xCF7A08", VA = "0xCF7A08")]
		private void Update()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xCF7AF8", Offset = "0xCF7AF8", VA = "0xCF7AF8")]
		public XRHandPointGrabLink()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public class XRHeadTracking : MonoBehaviour
	{
		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackingOriginModeFlags mode;

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xCF7B00", Offset = "0xCF7B00", VA = "0xCF7B00")]
		private void Start()
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xCF7C1C", Offset = "0xCF7C1C", VA = "0xCF7C1C")]
		public XRHeadTracking()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class XRTeleporterLink : MonoBehaviour
	{
		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Teleporter hand;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRNode role;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CommonButton button;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool teleporting;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InputDevice device;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<InputDevice> devices;

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xCF7C2C", Offset = "0xCF7C2C", VA = "0xCF7C2C")]
		private void Start()
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xCF7CA8", Offset = "0xCF7CA8", VA = "0xCF7CA8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xCF7DB8", Offset = "0xCF7DB8", VA = "0xCF7DB8")]
		public XRTeleporterLink()
		{
		}
	}
}
namespace TMPro
{
	[Serializable]
	[Token(Token = "0x20002F3")]
	public class TMP_DigitValidator : TMP_InputValidator
	{
		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xCF7DC0", Offset = "0xCF7DC0", VA = "0xCF7DC0", Slot = "4")]
		public override char Validate(ref string text, ref int pos, char ch)
		{
			return default(char);
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xCF7DEC", Offset = "0xCF7DEC", VA = "0xCF7DEC")]
		public TMP_DigitValidator()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F4")]
	public class TMP_PhoneNumberValidator : TMP_InputValidator
	{
		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xCF7DF4", Offset = "0xCF7DF4", VA = "0xCF7DF4", Slot = "4")]
		public override char Validate(ref string text, ref int pos, char ch)
		{
			return default(char);
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xCF8268", Offset = "0xCF8268", VA = "0xCF8268")]
		public TMP_PhoneNumberValidator()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class TMP_TextEventHandler : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Serializable]
		[Token(Token = "0x20002F6")]
		public class CharacterSelectionEvent : UnityEvent<char, int>
		{
			[Token(Token = "0x6001313")]
			[Address(RVA = "0xCF8CA0", Offset = "0xCF8CA0", VA = "0xCF8CA0")]
			public CharacterSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002F7")]
		public class SpriteSelectionEvent : UnityEvent<char, int>
		{
			[Token(Token = "0x6001314")]
			[Address(RVA = "0xCF8CE8", Offset = "0xCF8CE8", VA = "0xCF8CE8")]
			public SpriteSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002F8")]
		public class WordSelectionEvent : UnityEvent<string, int, int>
		{
			[Token(Token = "0x6001315")]
			[Address(RVA = "0xCF8D30", Offset = "0xCF8D30", VA = "0xCF8D30")]
			public WordSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002F9")]
		public class LineSelectionEvent : UnityEvent<string, int, int>
		{
			[Token(Token = "0x6001316")]
			[Address(RVA = "0xCF8D78", Offset = "0xCF8D78", VA = "0xCF8D78")]
			public LineSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002FA")]
		public class LinkSelectionEvent : UnityEvent<string, string, int>
		{
			[Token(Token = "0x6001317")]
			[Address(RVA = "0xCF8DC0", Offset = "0xCF8DC0", VA = "0xCF8DC0")]
			public LinkSelectionEvent()
			{
			}
		}

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CharacterSelectionEvent m_OnCharacterSelection;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private SpriteSelectionEvent m_OnSpriteSelection;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private WordSelectionEvent m_OnWordSelection;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LineSelectionEvent m_OnLineSelection;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private LinkSelectionEvent m_OnLinkSelection;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_Camera;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Canvas m_Canvas;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_selectedLink;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_lastCharIndex;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_lastWordIndex;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_lastLineIndex;

		[Token(Token = "0x1700016F")]
		public CharacterSelectionEvent onCharacterSelection
		{
			[Token(Token = "0x60012FF")]
			[Address(RVA = "0xCF8270", Offset = "0xCF8270", VA = "0xCF8270")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001300")]
			[Address(RVA = "0xCF8278", Offset = "0xCF8278", VA = "0xCF8278")]
			set
			{
			}
		}

		[Token(Token = "0x17000170")]
		public SpriteSelectionEvent onSpriteSelection
		{
			[Token(Token = "0x6001301")]
			[Address(RVA = "0xCF8280", Offset = "0xCF8280", VA = "0xCF8280")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001302")]
			[Address(RVA = "0xCF8288", Offset = "0xCF8288", VA = "0xCF8288")]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public WordSelectionEvent onWordSelection
		{
			[Token(Token = "0x6001303")]
			[Address(RVA = "0xCF8290", Offset = "0xCF8290", VA = "0xCF8290")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001304")]
			[Address(RVA = "0xCF8298", Offset = "0xCF8298", VA = "0xCF8298")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public LineSelectionEvent onLineSelection
		{
			[Token(Token = "0x6001305")]
			[Address(RVA = "0xCF82A0", Offset = "0xCF82A0", VA = "0xCF82A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001306")]
			[Address(RVA = "0xCF82A8", Offset = "0xCF82A8", VA = "0xCF82A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public LinkSelectionEvent onLinkSelection
		{
			[Token(Token = "0x6001307")]
			[Address(RVA = "0xCF82B0", Offset = "0xCF82B0", VA = "0xCF82B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001308")]
			[Address(RVA = "0xCF82B8", Offset = "0xCF82B8", VA = "0xCF82B8")]
			set
			{
			}
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xCF82C0", Offset = "0xCF82C0", VA = "0xCF82C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xCF8478", Offset = "0xCF8478", VA = "0xCF8478")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xCF8B40", Offset = "0xCF8B40", VA = "0xCF8B40", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xCF8B44", Offset = "0xCF8B44", VA = "0xCF8B44", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xCF88E4", Offset = "0xCF88E4", VA = "0xCF88E4")]
		private void SendOnCharacterSelection(char character, int characterIndex)
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xCF8958", Offset = "0xCF8958", VA = "0xCF8958")]
		private void SendOnSpriteSelection(char character, int characterIndex)
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xCF89CC", Offset = "0xCF89CC", VA = "0xCF89CC")]
		private void SendOnWordSelection(string word, int charIndex, int length)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xCF8A48", Offset = "0xCF8A48", VA = "0xCF8A48")]
		private void SendOnLineSelection(string line, int charIndex, int length)
		{
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xCF8AC4", Offset = "0xCF8AC4", VA = "0xCF8AC4")]
		private void SendOnLinkSelection(string linkID, string linkText, int linkIndex)
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xCF8B48", Offset = "0xCF8B48", VA = "0xCF8B48")]
		public TMP_TextEventHandler()
		{
		}
	}
}
namespace TMPro.Examples
{
	[Token(Token = "0x20002FB")]
	public class Benchmark01 : MonoBehaviour
	{
		[Token(Token = "0x20002FC")]
		[CompilerGenerated]
		private sealed class <Start>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400151A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400151B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400151C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Benchmark01 <>4__this;

			[Token(Token = "0x400151D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000174")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600131D")]
				[Address(RVA = "0xCF9460", Offset = "0xCF9460", VA = "0xCF9460", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000175")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600131F")]
				[Address(RVA = "0xCF94A8", Offset = "0xCF94A8", VA = "0xCF94A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600131A")]
			[Address(RVA = "0xCF8E7C", Offset = "0xCF8E7C", VA = "0xCF8E7C")]
			[DebuggerHidden]
			public <Start>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x600131B")]
			[Address(RVA = "0xCF8EAC", Offset = "0xCF8EAC", VA = "0xCF8EAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600131C")]
			[Address(RVA = "0xCF8EB0", Offset = "0xCF8EB0", VA = "0xCF8EB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600131E")]
			[Address(RVA = "0xCF9468", Offset = "0xCF9468", VA = "0xCF9468", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int BenchmarkType;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TMP_FontAsset TMProFont;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Font TextMeshFont;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshPro m_textMeshPro;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextContainer m_textContainer;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TextMesh m_textMesh;

		[Token(Token = "0x4001516")]
		private const string label01 = "The <#0050FF>count is: </color>{0}";

		[Token(Token = "0x4001517")]
		private const string label02 = "The <color=#0050FF>count is: </color>";

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_material01;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_material02;

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xCF8E08", Offset = "0xCF8E08", VA = "0xCF8E08")]
		[IteratorStateMachine(typeof(<Start>d__10))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xCF8EA4", Offset = "0xCF8EA4", VA = "0xCF8EA4")]
		public Benchmark01()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public class Benchmark01_UGUI : MonoBehaviour
	{
		[Token(Token = "0x20002FE")]
		[CompilerGenerated]
		private sealed class <Start>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001528")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001529")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400152A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Benchmark01_UGUI <>4__this;

			[Token(Token = "0x400152B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000176")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001325")]
				[Address(RVA = "0xCF99EC", Offset = "0xCF99EC", VA = "0xCF99EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000177")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001327")]
				[Address(RVA = "0xCF9A34", Offset = "0xCF9A34", VA = "0xCF9A34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001322")]
			[Address(RVA = "0xCF9524", Offset = "0xCF9524", VA = "0xCF9524")]
			[DebuggerHidden]
			public <Start>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001323")]
			[Address(RVA = "0xCF9554", Offset = "0xCF9554", VA = "0xCF9554", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001324")]
			[Address(RVA = "0xCF9558", Offset = "0xCF9558", VA = "0xCF9558", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001326")]
			[Address(RVA = "0xCF99F4", Offset = "0xCF99F4", VA = "0xCF99F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int BenchmarkType;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas canvas;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TMP_FontAsset TMProFont;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Font TextMeshFont;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextMeshProUGUI m_textMeshPro;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Text m_textMesh;

		[Token(Token = "0x4001524")]
		private const string label01 = "The <#0050FF>count is: </color>";

		[Token(Token = "0x4001525")]
		private const string label02 = "The <color=#0050FF>count is: </color>";

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_material01;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_material02;

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xCF94B0", Offset = "0xCF94B0", VA = "0xCF94B0")]
		[IteratorStateMachine(typeof(<Start>d__10))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xCF954C", Offset = "0xCF954C", VA = "0xCF954C")]
		public Benchmark01_UGUI()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class Benchmark02 : MonoBehaviour
	{
		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SpawnType;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int NumberOfNPC;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshProFloatingText floatingText_Script;

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xCF9A3C", Offset = "0xCF9A3C", VA = "0xCF9A3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xCF9FE4", Offset = "0xCF9FE4", VA = "0xCF9FE4")]
		public Benchmark02()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class Benchmark03 : MonoBehaviour
	{
		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SpawnType;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int NumberOfNPC;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Font TheFont;

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xCF9FF4", Offset = "0xCF9FF4", VA = "0xCF9FF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xCF9FF8", Offset = "0xCF9FF8", VA = "0xCF9FF8")]
		private void Start()
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xCFA24C", Offset = "0xCFA24C", VA = "0xCFA24C")]
		public Benchmark03()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class Benchmark04 : MonoBehaviour
	{
		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SpawnType;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int MinPointSize;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int MaxPointSize;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int Steps;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform m_Transform;

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xCFA25C", Offset = "0xCFA25C", VA = "0xCFA25C")]
		private void Start()
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xCFA564", Offset = "0xCFA564", VA = "0xCFA564")]
		public Benchmark04()
		{
		}
	}
	[Token(Token = "0x2000302")]
	public class CameraController : MonoBehaviour
	{
		[Token(Token = "0x2000303")]
		public enum CameraModes
		{
			[Token(Token = "0x4001551")]
			Follow,
			[Token(Token = "0x4001552")]
			Isometric,
			[Token(Token = "0x4001553")]
			Free
		}

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform cameraTransform;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform dummyTarget;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform CameraTarget;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FollowDistance;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MaxFollowDistance;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MinFollowDistance;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float ElevationAngle;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MaxElevationAngle;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MinElevationAngle;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float OrbitalAngle;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public CameraModes CameraMode;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool MovementSmoothing;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool RotationSmoothing;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool previousSmoothing;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float MovementSmoothingValue;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float RotationSmoothingValue;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float MoveSensitivity;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentVelocity;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 desiredPosition;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float mouseX;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float mouseY;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 moveVector;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float mouseWheel;

		[Token(Token = "0x400154E")]
		private const string event_SmoothingValue = "Slider - Smoothing Value";

		[Token(Token = "0x400154F")]
		private const string event_FollowDistance = "Slider - Camera Zoom";

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xCFA580", Offset = "0xCFA580", VA = "0xCFA580")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xCFA5FC", Offset = "0xCFA5FC", VA = "0xCFA5FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xCFA6F0", Offset = "0xCFA6F0", VA = "0xCFA6F0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xCFAA24", Offset = "0xCFAA24", VA = "0xCFAA24")]
		private void GetPlayerInput()
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xCFB24C", Offset = "0xCFB24C", VA = "0xCFB24C")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x2000304")]
	public class ObjectSpin : MonoBehaviour
	{
		[Token(Token = "0x2000305")]
		public enum MotionType
		{
			[Token(Token = "0x400155F")]
			Rotation,
			[Token(Token = "0x4001560")]
			BackAndForth,
			[Token(Token = "0x4001561")]
			Translation
		}

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float SpinSpeed;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int RotationRange;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_transform;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_time;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_prevPOS;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_initial_Rotation;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_initial_Position;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color32 m_lightColor;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int frames;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MotionType Motion;

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xCFB2D8", Offset = "0xCFB2D8", VA = "0xCFB2D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xCFB6C0", Offset = "0xCFB6C0", VA = "0xCFB6C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xCFB808", Offset = "0xCFB808", VA = "0xCFB808")]
		public ObjectSpin()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class ShaderPropAnimator : MonoBehaviour
	{
		[Token(Token = "0x2000307")]
		[CompilerGenerated]
		private sealed class <AnimateProperties>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001566")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001567")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001568")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ShaderPropAnimator <>4__this;

			[Token(Token = "0x17000178")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600133E")]
				[Address(RVA = "0xCFBAC8", Offset = "0xCFBAC8", VA = "0xCFBAC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000179")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001340")]
				[Address(RVA = "0xCFBB10", Offset = "0xCFBB10", VA = "0xCFBB10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600133B")]
			[Address(RVA = "0xCFB930", Offset = "0xCFB930", VA = "0xCFB930")]
			[DebuggerHidden]
			public <AnimateProperties>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600133C")]
			[Address(RVA = "0xCFB960", Offset = "0xCFB960", VA = "0xCFB960", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600133D")]
			[Address(RVA = "0xCFB964", Offset = "0xCFB964", VA = "0xCFB964", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600133F")]
			[Address(RVA = "0xCFBAD0", Offset = "0xCFBAD0", VA = "0xCFBAD0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer m_Renderer;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve GlowCurve;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_frame;

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xCFB81C", Offset = "0xCFB81C", VA = "0xCFB81C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xCFB89C", Offset = "0xCFB89C", VA = "0xCFB89C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xCFB8BC", Offset = "0xCFB8BC", VA = "0xCFB8BC")]
		[IteratorStateMachine(typeof(<AnimateProperties>d__6))]
		private IEnumerator AnimateProperties()
		{
			return null;
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xCFB958", Offset = "0xCFB958", VA = "0xCFB958")]
		public ShaderPropAnimator()
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class SimpleScript : MonoBehaviour
	{
		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMeshPro m_textMeshPro;

		[Token(Token = "0x400156A")]
		private const string label = "The <#0050FF>count is: </color>{0:2}";

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_frame;

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xCFBB18", Offset = "0xCFBB18", VA = "0xCFBB18")]
		private void Start()
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xCFBBDC", Offset = "0xCFBBDC", VA = "0xCFBBDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xCFBC68", Offset = "0xCFBC68", VA = "0xCFBC68")]
		public SimpleScript()
		{
		}
	}
	[Token(Token = "0x2000309")]
	public class SkewTextExample : MonoBehaviour
	{
		[Token(Token = "0x200030A")]
		[CompilerGenerated]
		private sealed class <WarpText>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001570")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001571")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SkewTextExample <>4__this;

			[Token(Token = "0x4001573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <old_CurveScale>5__2;

			[Token(Token = "0x4001574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <old_ShearValue>5__3;

			[Token(Token = "0x4001575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AnimationCurve <old_curve>5__4;

			[Token(Token = "0x1700017A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600134C")]
				[Address(RVA = "0xCFC988", Offset = "0xCFC988", VA = "0xCFC988", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600134E")]
				[Address(RVA = "0xCFC9D0", Offset = "0xCFC9D0", VA = "0xCFC9D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001349")]
			[Address(RVA = "0xCFBDEC", Offset = "0xCFBDEC", VA = "0xCFBDEC")]
			[DebuggerHidden]
			public <WarpText>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600134A")]
			[Address(RVA = "0xCFC050", Offset = "0xCFC050", VA = "0xCFC050", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600134B")]
			[Address(RVA = "0xCFC054", Offset = "0xCFC054", VA = "0xCFC054", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600134D")]
			[Address(RVA = "0xCFC990", Offset = "0xCFC990", VA = "0xCFC990", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve VertexCurve;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float CurveScale;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ShearAmount;

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xCFBC70", Offset = "0xCFBC70", VA = "0xCFBC70")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xCFBCD8", Offset = "0xCFBCD8", VA = "0xCFBCD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xCFBD6C", Offset = "0xCFBD6C", VA = "0xCFBD6C")]
		private AnimationCurve CopyAnimationCurve(AnimationCurve curve)
		{
			return null;
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xCFBCF8", Offset = "0xCFBCF8", VA = "0xCFBCF8")]
		[IteratorStateMachine(typeof(<WarpText>d__7))]
		private IEnumerator WarpText()
		{
			return null;
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xCFBE14", Offset = "0xCFBE14", VA = "0xCFBE14")]
		public SkewTextExample()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class TeleType : MonoBehaviour
	{
		[Token(Token = "0x200030C")]
		[CompilerGenerated]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001579")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400157A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400157B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TeleType <>4__this;

			[Token(Token = "0x400157C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <totalVisibleCharacters>5__2;

			[Token(Token = "0x400157D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <counter>5__3;

			[Token(Token = "0x1700017C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001355")]
				[Address(RVA = "0xCFCDC8", Offset = "0xCFCDC8", VA = "0xCFCDC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001357")]
				[Address(RVA = "0xCFCE10", Offset = "0xCFCE10", VA = "0xCFCE10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001352")]
			[Address(RVA = "0xCFCAF0", Offset = "0xCFCAF0", VA = "0xCFCAF0")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001353")]
			[Address(RVA = "0xCFCB9C", Offset = "0xCFCB9C", VA = "0xCFCB9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001354")]
			[Address(RVA = "0xCFCBA0", Offset = "0xCFCBA0", VA = "0xCFCBA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001356")]
			[Address(RVA = "0xCFCDD0", Offset = "0xCFCDD0", VA = "0xCFCDD0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string label01;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string label02;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_textMeshPro;

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xCFC9D8", Offset = "0xCFC9D8", VA = "0xCFC9D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xCFCA7C", Offset = "0xCFCA7C", VA = "0xCFCA7C")]
		[IteratorStateMachine(typeof(<Start>d__4))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xCFCB18", Offset = "0xCFCB18", VA = "0xCFCB18")]
		public TeleType()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class TextConsoleSimulator : MonoBehaviour
	{
		[Token(Token = "0x200030E")]
		[CompilerGenerated]
		private sealed class <RevealCharacters>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001580")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001581")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001582")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TMP_Text textComponent;

			[Token(Token = "0x4001583")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TextConsoleSimulator <>4__this;

			[Token(Token = "0x4001584")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TMP_TextInfo <textInfo>5__2;

			[Token(Token = "0x4001585")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <totalVisibleCharacters>5__3;

			[Token(Token = "0x4001586")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <visibleCount>5__4;

			[Token(Token = "0x1700017E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001363")]
				[Address(RVA = "0xCFD328", Offset = "0xCFD328", VA = "0xCFD328", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001365")]
				[Address(RVA = "0xCFD370", Offset = "0xCFD370", VA = "0xCFD370", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001360")]
			[Address(RVA = "0xCFD0D8", Offset = "0xCFD0D8", VA = "0xCFD0D8")]
			[DebuggerHidden]
			public <RevealCharacters>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001361")]
			[Address(RVA = "0xCFD1A4", Offset = "0xCFD1A4", VA = "0xCFD1A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001362")]
			[Address(RVA = "0xCFD1A8", Offset = "0xCFD1A8", VA = "0xCFD1A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001364")]
			[Address(RVA = "0xCFD330", Offset = "0xCFD330", VA = "0xCFD330", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200030F")]
		[CompilerGenerated]
		private sealed class <RevealWords>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001587")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001588")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001589")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TMP_Text textComponent;

			[Token(Token = "0x400158A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <totalWordCount>5__2;

			[Token(Token = "0x400158B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <totalVisibleCharacters>5__3;

			[Token(Token = "0x400158C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <counter>5__4;

			[Token(Token = "0x400158D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <visibleCount>5__5;

			[Token(Token = "0x17000180")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001369")]
				[Address(RVA = "0xCFD550", Offset = "0xCFD550", VA = "0xCFD550", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000181")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600136B")]
				[Address(RVA = "0xCFD598", Offset = "0xCFD598", VA = "0xCFD598", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001366")]
			[Address(RVA = "0xCFD174", Offset = "0xCFD174", VA = "0xCFD174")]
			[DebuggerHidden]
			public <RevealWords>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001367")]
			[Address(RVA = "0xCFD378", Offset = "0xCFD378", VA = "0xCFD378", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001368")]
			[Address(RVA = "0xCFD37C", Offset = "0xCFD37C", VA = "0xCFD37C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600136A")]
			[Address(RVA = "0xCFD558", Offset = "0xCFD558", VA = "0xCFD558", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool hasTextChanged;

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xCFCE18", Offset = "0xCFCE18", VA = "0xCFCE18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xCFCE80", Offset = "0xCFCE80", VA = "0xCFCE80")]
		private void Start()
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xCFCF34", Offset = "0xCFCF34", VA = "0xCFCF34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xCFD000", Offset = "0xCFD000", VA = "0xCFD000")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xCFD0CC", Offset = "0xCFD0CC", VA = "0xCFD0CC")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xCFCEA4", Offset = "0xCFCEA4", VA = "0xCFCEA4")]
		[IteratorStateMachine(typeof(<RevealCharacters>d__7))]
		private IEnumerator RevealCharacters(TMP_Text textComponent)
		{
			return null;
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xCFD100", Offset = "0xCFD100", VA = "0xCFD100")]
		[IteratorStateMachine(typeof(<RevealWords>d__8))]
		private IEnumerator RevealWords(TMP_Text textComponent)
		{
			return null;
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xCFD19C", Offset = "0xCFD19C", VA = "0xCFD19C")]
		public TextConsoleSimulator()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class TextMeshProFloatingText : MonoBehaviour
	{
		[Token(Token = "0x2000311")]
		[CompilerGenerated]
		private sealed class <DisplayTextMeshProFloatingText>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001598")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001599")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400159A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextMeshProFloatingText <>4__this;

			[Token(Token = "0x400159B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <CountDuration>5__2;

			[Token(Token = "0x400159C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <starting_Count>5__3;

			[Token(Token = "0x400159D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <current_Count>5__4;

			[Token(Token = "0x400159E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <start_pos>5__5;

			[Token(Token = "0x400159F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Color32 <start_color>5__6;

			[Token(Token = "0x40015A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <alpha>5__7;

			[Token(Token = "0x40015A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <fadeDuration>5__8;

			[Token(Token = "0x17000182")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001374")]
				[Address(RVA = "0xCFE350", Offset = "0xCFE350", VA = "0xCFE350", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000183")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001376")]
				[Address(RVA = "0xCFE398", Offset = "0xCFE398", VA = "0xCFE398", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001371")]
			[Address(RVA = "0xCFDB78", Offset = "0xCFDB78", VA = "0xCFDB78")]
			[DebuggerHidden]
			public <DisplayTextMeshProFloatingText>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001372")]
			[Address(RVA = "0xCFDC60", Offset = "0xCFDC60", VA = "0xCFDC60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001373")]
			[Address(RVA = "0xCFDC64", Offset = "0xCFDC64", VA = "0xCFDC64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001375")]
			[Address(RVA = "0xCFE358", Offset = "0xCFE358", VA = "0xCFE358", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000312")]
		[CompilerGenerated]
		private sealed class <DisplayTextMeshFloatingText>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextMeshProFloatingText <>4__this;

			[Token(Token = "0x40015A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <CountDuration>5__2;

			[Token(Token = "0x40015A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <starting_Count>5__3;

			[Token(Token = "0x40015A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <current_Count>5__4;

			[Token(Token = "0x40015A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <start_pos>5__5;

			[Token(Token = "0x40015A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Color32 <start_color>5__6;

			[Token(Token = "0x40015AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <alpha>5__7;

			[Token(Token = "0x40015AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <fadeDuration>5__8;

			[Token(Token = "0x17000184")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600137A")]
				[Address(RVA = "0xCFEA78", Offset = "0xCFEA78", VA = "0xCFEA78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000185")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600137C")]
				[Address(RVA = "0xCFEAC0", Offset = "0xCFEAC0", VA = "0xCFEAC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001377")]
			[Address(RVA = "0xCFDBA0", Offset = "0xCFDBA0", VA = "0xCFDBA0")]
			[DebuggerHidden]
			public <DisplayTextMeshFloatingText>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001378")]
			[Address(RVA = "0xCFE3A0", Offset = "0xCFE3A0", VA = "0xCFE3A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001379")]
			[Address(RVA = "0xCFE3A4", Offset = "0xCFE3A4", VA = "0xCFE3A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600137B")]
			[Address(RVA = "0xCFEA80", Offset = "0xCFEA80", VA = "0xCFEA80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Font TheFont;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject m_floatingText;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextMeshPro m_textMeshPro;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMesh m_textMesh;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform m_transform;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform m_floatingText_Transform;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform m_cameraTransform;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 lastPOS;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion lastRotation;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int SpawnType;

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xCFD5A0", Offset = "0xCFD5A0", VA = "0xCFD5A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xCFD688", Offset = "0xCFD688", VA = "0xCFD688")]
		private void Start()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xCFDA90", Offset = "0xCFDA90", VA = "0xCFDA90")]
		[IteratorStateMachine(typeof(<DisplayTextMeshProFloatingText>d__12))]
		public IEnumerator DisplayTextMeshProFloatingText()
		{
			return null;
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xCFDB04", Offset = "0xCFDB04", VA = "0xCFDB04")]
		[IteratorStateMachine(typeof(<DisplayTextMeshFloatingText>d__13))]
		public IEnumerator DisplayTextMeshFloatingText()
		{
			return null;
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xCFDBC8", Offset = "0xCFDBC8", VA = "0xCFDBC8")]
		public TextMeshProFloatingText()
		{
		}
	}
	[Token(Token = "0x2000313")]
	public class TextMeshSpawner : MonoBehaviour
	{
		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SpawnType;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int NumberOfNPC;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Font TheFont;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextMeshProFloatingText floatingText_Script;

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xCFEAC8", Offset = "0xCFEAC8", VA = "0xCFEAC8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xCFEACC", Offset = "0xCFEACC", VA = "0xCFEACC")]
		private void Start()
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xCFEDCC", Offset = "0xCFEDCC", VA = "0xCFEDCC")]
		public TextMeshSpawner()
		{
		}
	}
	[Token(Token = "0x2000314")]
	public class TMPro_InstructionOverlay : MonoBehaviour
	{
		[Token(Token = "0x2000315")]
		public enum FpsCounterAnchorPositions
		{
			[Token(Token = "0x40015B7")]
			TopLeft,
			[Token(Token = "0x40015B8")]
			BottomLeft,
			[Token(Token = "0x40015B9")]
			TopRight,
			[Token(Token = "0x40015BA")]
			BottomRight
		}

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FpsCounterAnchorPositions AnchorPosition;

		[Token(Token = "0x40015B1")]
		private const string instructions = "Camera Control - <#ffff00>Shift + RMB\n</color>Zoom - <#ffff00>Mouse wheel.";

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshPro m_TextMeshPro;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextContainer m_textContainer;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform m_frameCounter_transform;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Camera m_camera;

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xCFEDDC", Offset = "0xCFEDDC", VA = "0xCFEDDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xCFF094", Offset = "0xCFF094", VA = "0xCFF094")]
		private void Set_FrameCounter_Position(FpsCounterAnchorPositions anchor_position)
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xCFF1A8", Offset = "0xCFF1A8", VA = "0xCFF1A8")]
		public TMPro_InstructionOverlay()
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class TMP_ExampleScript_01 : MonoBehaviour
	{
		[Token(Token = "0x2000317")]
		public enum objectType
		{
			[Token(Token = "0x40015C1")]
			TextMeshPro,
			[Token(Token = "0x40015C2")]
			TextMeshProUGUI
		}

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public objectType ObjectType;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isStatic;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TMP_Text m_text;

		[Token(Token = "0x40015BE")]
		private const string k_label = "The count is <#0080ff>{0}</color>";

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int count;

		[Token(Token = "0x6001383")]
		[Address(RVA = "0xCFF1B8", Offset = "0xCFF1B8", VA = "0xCFF1B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xCFF3DC", Offset = "0xCFF3DC", VA = "0xCFF3DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xCFF470", Offset = "0xCFF470", VA = "0xCFF470")]
		public TMP_ExampleScript_01()
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class TMP_FrameRateCounter : MonoBehaviour
	{
		[Token(Token = "0x2000319")]
		public enum FpsCounterAnchorPositions
		{
			[Token(Token = "0x40015CE")]
			TopLeft,
			[Token(Token = "0x40015CF")]
			BottomLeft,
			[Token(Token = "0x40015D0")]
			TopRight,
			[Token(Token = "0x40015D1")]
			BottomRight
		}

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float UpdateInterval;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_LastInterval;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_Frames;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public FpsCounterAnchorPositions AnchorPosition;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string htmlColorTag;

		[Token(Token = "0x40015C8")]
		private const string fpsLabel = "{0:2}</color> <#8080ff>FPS \n<#FF8000>{1:2} <#8080ff>MS";

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshPro m_TextMeshPro;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform m_frameCounter_transform;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Camera m_camera;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FpsCounterAnchorPositions last_AnchorPosition;

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xCFF478", Offset = "0xCFF478", VA = "0xCFF478")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xCFF8C4", Offset = "0xCFF8C4", VA = "0xCFF8C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xCFF8E4", Offset = "0xCFF8E4", VA = "0xCFF8E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xCFF6E8", Offset = "0xCFF6E8", VA = "0xCFF6E8")]
		private void Set_FrameCounter_Position(FpsCounterAnchorPositions anchor_position)
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xCFFA38", Offset = "0xCFFA38", VA = "0xCFFA38")]
		public TMP_FrameRateCounter()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public class TMP_TextEventCheck : MonoBehaviour
	{
		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_TextEventHandler TextEventHandler;

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xCFFA50", Offset = "0xCFFA50", VA = "0xCFFA50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xCFFCEC", Offset = "0xCFFCEC", VA = "0xCFFCEC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xCFFF88", Offset = "0xCFFF88", VA = "0xCFFF88")]
		private void OnCharacterSelection(char c, int index)
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xD001D8", Offset = "0xD001D8", VA = "0xD001D8")]
		private void OnSpriteSelection(char c, int index)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xD00428", Offset = "0xD00428", VA = "0xD00428")]
		private void OnWordSelection(string word, int firstCharacterIndex, int length)
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xD00708", Offset = "0xD00708", VA = "0xD00708")]
		private void OnLineSelection(string lineText, int firstCharacterIndex, int length)
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xD009E8", Offset = "0xD009E8", VA = "0xD009E8")]
		private void OnLinkSelection(string linkID, string linkText, int linkIndex)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xD00CC4", Offset = "0xD00CC4", VA = "0xD00CC4")]
		public TMP_TextEventCheck()
		{
		}
	}
	[Token(Token = "0x200031B")]
	public class TMP_TextInfoDebugTool : MonoBehaviour
	{
		[Token(Token = "0x6001393")]
		[Address(RVA = "0xD00CCC", Offset = "0xD00CCC", VA = "0xD00CCC")]
		public TMP_TextInfoDebugTool()
		{
		}
	}
	[Token(Token = "0x200031C")]
	public class TMP_TextSelector_A : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMeshPro m_TextMeshPro;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera m_Camera;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_isHoveringObject;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int m_selectedLink;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_lastCharIndex;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int m_lastWordIndex;

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xD00CD4", Offset = "0xD00CD4", VA = "0xD00CD4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xD00D78", Offset = "0xD00D78", VA = "0xD00D78")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xD0141C", Offset = "0xD0141C", VA = "0xD0141C", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xD01494", Offset = "0xD01494", VA = "0xD01494", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xD01508", Offset = "0xD01508", VA = "0xD01508")]
		public TMP_TextSelector_A()
		{
		}
	}
	[Token(Token = "0x200031D")]
	public class TMP_TextSelector_B : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, IPointerClickHandler, IPointerUpHandler
	{
		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform TextPopup_Prefab_01;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform m_TextPopup_RectTransform;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextMeshProUGUI m_TextPopup_TMPComponent;

		[Token(Token = "0x40015DC")]
		private const string k_LinkText = "You have selected link <#ffff00>";

		[Token(Token = "0x40015DD")]
		private const string k_WordText = "Word Index: <#ffff00>";

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshProUGUI m_TextMeshPro;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Canvas m_Canvas;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Camera m_Camera;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool isHoveringObject;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int m_selectedWord;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_selectedLink;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_lastIndex;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Matrix4x4 m_matrix;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TMP_MeshInfo[] m_cachedMeshInfoVertexData;

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xD01520", Offset = "0xD01520", VA = "0xD01520")]
		private void Awake()
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xD016E8", Offset = "0xD016E8", VA = "0xD016E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xD017B4", Offset = "0xD017B4", VA = "0xD017B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xD01880", Offset = "0xD01880", VA = "0xD01880")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xD0192C", Offset = "0xD0192C", VA = "0xD0192C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xD02E00", Offset = "0xD02E00", VA = "0xD02E00", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xD02E0C", Offset = "0xD02E0C", VA = "0xD02E0C", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xD02E14", Offset = "0xD02E14", VA = "0xD02E14", Slot = "6")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xD02E18", Offset = "0xD02E18", VA = "0xD02E18", Slot = "7")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xD0257C", Offset = "0xD0257C", VA = "0xD0257C")]
		private void RestoreCachedVertexAttributes(int index)
		{
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xD02E1C", Offset = "0xD02E1C", VA = "0xD02E1C")]
		public TMP_TextSelector_B()
		{
		}
	}
	[Token(Token = "0x200031E")]
	public class TMP_UiFrameRateCounter : MonoBehaviour
	{
		[Token(Token = "0x200031F")]
		public enum FpsCounterAnchorPositions
		{
			[Token(Token = "0x40015F1")]
			TopLeft,
			[Token(Token = "0x40015F2")]
			BottomLeft,
			[Token(Token = "0x40015F3")]
			TopRight,
			[Token(Token = "0x40015F4")]
			BottomRight
		}

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float UpdateInterval;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_LastInterval;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_Frames;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public FpsCounterAnchorPositions AnchorPosition;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string htmlColorTag;

		[Token(Token = "0x40015EC")]
		private const string fpsLabel = "{0:2}</color> <#8080ff>FPS \n<#FF8000>{1:2} <#8080ff>MS";

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshProUGUI m_TextMeshPro;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform m_frameCounter_transform;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private FpsCounterAnchorPositions last_AnchorPosition;

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xD02E34", Offset = "0xD02E34", VA = "0xD02E34")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xD03290", Offset = "0xD03290", VA = "0xD03290")]
		private void Start()
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xD032B0", Offset = "0xD032B0", VA = "0xD032B0")]
		private void Update()
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xD03058", Offset = "0xD03058", VA = "0xD03058")]
		private void Set_FrameCounter_Position(FpsCounterAnchorPositions anchor_position)
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xD03404", Offset = "0xD03404", VA = "0xD03404")]
		public TMP_UiFrameRateCounter()
		{
		}
	}
	[Token(Token = "0x2000320")]
	public class VertexColorCycler : MonoBehaviour
	{
		[Token(Token = "0x2000321")]
		[CompilerGenerated]
		private sealed class <AnimateVertexColors>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VertexColorCycler <>4__this;

			[Token(Token = "0x40015F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private TMP_TextInfo <textInfo>5__2;

			[Token(Token = "0x40015FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <currentCharacter>5__3;

			[Token(Token = "0x17000186")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013B0")]
				[Address(RVA = "0xD03880", Offset = "0xD03880", VA = "0xD03880", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000187")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013B2")]
				[Address(RVA = "0xD038C8", Offset = "0xD038C8", VA = "0xD038C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013AD")]
			[Address(RVA = "0xD03508", Offset = "0xD03508", VA = "0xD03508")]
			[DebuggerHidden]
			public <AnimateVertexColors>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60013AE")]
			[Address(RVA = "0xD03538", Offset = "0xD03538", VA = "0xD03538", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013AF")]
			[Address(RVA = "0xD0353C", Offset = "0xD0353C", VA = "0xD0353C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013B1")]
			[Address(RVA = "0xD03888", Offset = "0xD03888", VA = "0xD03888", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xD0341C", Offset = "0xD0341C", VA = "0xD0341C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xD03474", Offset = "0xD03474", VA = "0xD03474")]
		private void Start()
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xD03494", Offset = "0xD03494", VA = "0xD03494")]
		[IteratorStateMachine(typeof(<AnimateVertexColors>d__3))]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xD03530", Offset = "0xD03530", VA = "0xD03530")]
		public VertexColorCycler()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class VertexJitter : MonoBehaviour
	{
		[Token(Token = "0x2000323")]
		private struct VertexAnim
		{
			[Token(Token = "0x4001600")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float angleRange;

			[Token(Token = "0x4001601")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float angle;

			[Token(Token = "0x4001602")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float speed;
		}

		[Token(Token = "0x2000324")]
		[CompilerGenerated]
		private sealed class <AnimateVertexColors>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001603")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001604")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001605")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VertexJitter <>4__this;

			[Token(Token = "0x4001606")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private TMP_TextInfo <textInfo>5__2;

			[Token(Token = "0x4001607")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <loopCount>5__3;

			[Token(Token = "0x4001608")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private VertexAnim[] <vertexAnim>5__4;

			[Token(Token = "0x4001609")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TMP_MeshInfo[] <cachedMeshInfo>5__5;

			[Token(Token = "0x17000188")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013BD")]
				[Address(RVA = "0xD04530", Offset = "0xD04530", VA = "0xD04530", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000189")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013BF")]
				[Address(RVA = "0xD04578", Offset = "0xD04578", VA = "0xD04578", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013BA")]
			[Address(RVA = "0xD03BD0", Offset = "0xD03BD0", VA = "0xD03BD0")]
			[DebuggerHidden]
			public <AnimateVertexColors>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60013BB")]
			[Address(RVA = "0xD03C10", Offset = "0xD03C10", VA = "0xD03C10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013BC")]
			[Address(RVA = "0xD03C14", Offset = "0xD03C14", VA = "0xD03C14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013BE")]
			[Address(RVA = "0xD04538", Offset = "0xD04538", VA = "0xD04538", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngleMultiplier;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float SpeedMultiplier;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CurveScale;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasTextChanged;

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xD038D0", Offset = "0xD038D0", VA = "0xD038D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xD03928", Offset = "0xD03928", VA = "0xD03928")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xD039F4", Offset = "0xD039F4", VA = "0xD039F4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xD03AC0", Offset = "0xD03AC0", VA = "0xD03AC0")]
		private void Start()
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xD03B54", Offset = "0xD03B54", VA = "0xD03B54")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xD03AE0", Offset = "0xD03AE0", VA = "0xD03AE0")]
		[IteratorStateMachine(typeof(<AnimateVertexColors>d__11))]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xD03BF8", Offset = "0xD03BF8", VA = "0xD03BF8")]
		public VertexJitter()
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class VertexShakeA : MonoBehaviour
	{
		[Token(Token = "0x2000326")]
		[CompilerGenerated]
		private sealed class <AnimateVertexColors>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001610")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001611")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001612")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VertexShakeA <>4__this;

			[Token(Token = "0x4001613")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private TMP_TextInfo <textInfo>5__2;

			[Token(Token = "0x4001614")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3[][] <copyOfVertices>5__3;

			[Token(Token = "0x1700018A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013CA")]
				[Address(RVA = "0xD052E4", Offset = "0xD052E4", VA = "0xD052E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013CC")]
				[Address(RVA = "0xD0532C", Offset = "0xD0532C", VA = "0xD0532C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013C7")]
			[Address(RVA = "0xD04870", Offset = "0xD04870", VA = "0xD04870")]
			[DebuggerHidden]
			public <AnimateVertexColors>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60013C8")]
			[Address(RVA = "0xD048A8", Offset = "0xD048A8", VA = "0xD048A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013C9")]
			[Address(RVA = "0xD048AC", Offset = "0xD048AC", VA = "0xD048AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013CB")]
			[Address(RVA = "0xD052EC", Offset = "0xD052EC", VA = "0xD052EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngleMultiplier;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float SpeedMultiplier;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float ScaleMultiplier;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RotationMultiplier;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasTextChanged;

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xD04580", Offset = "0xD04580", VA = "0xD04580")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xD045D8", Offset = "0xD045D8", VA = "0xD045D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xD046A4", Offset = "0xD046A4", VA = "0xD046A4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xD04770", Offset = "0xD04770", VA = "0xD04770")]
		private void Start()
		{
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xD04804", Offset = "0xD04804", VA = "0xD04804")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xD04790", Offset = "0xD04790", VA = "0xD04790")]
		[IteratorStateMachine(typeof(<AnimateVertexColors>d__11))]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xD04898", Offset = "0xD04898", VA = "0xD04898")]
		public VertexShakeA()
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class VertexShakeB : MonoBehaviour
	{
		[Token(Token = "0x2000328")]
		[CompilerGenerated]
		private sealed class <AnimateVertexColors>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400161A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400161B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400161C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VertexShakeB <>4__this;

			[Token(Token = "0x400161D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private TMP_TextInfo <textInfo>5__2;

			[Token(Token = "0x400161E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3[][] <copyOfVertices>5__3;

			[Token(Token = "0x1700018C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013D7")]
				[Address(RVA = "0xD06588", Offset = "0xD06588", VA = "0xD06588", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013D9")]
				[Address(RVA = "0xD065D0", Offset = "0xD065D0", VA = "0xD065D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013D4")]
			[Address(RVA = "0xD05624", Offset = "0xD05624", VA = "0xD05624")]
			[DebuggerHidden]
			public <AnimateVertexColors>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60013D5")]
			[Address(RVA = "0xD05664", Offset = "0xD05664", VA = "0xD05664", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013D6")]
			[Address(RVA = "0xD05668", Offset = "0xD05668", VA = "0xD05668", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013D8")]
			[Address(RVA = "0xD06590", Offset = "0xD06590", VA = "0xD06590", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngleMultiplier;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float SpeedMultiplier;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CurveScale;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasTextChanged;

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xD05334", Offset = "0xD05334", VA = "0xD05334")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xD0538C", Offset = "0xD0538C", VA = "0xD0538C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xD05458", Offset = "0xD05458", VA = "0xD05458")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xD05524", Offset = "0xD05524", VA = "0xD05524")]
		private void Start()
		{
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xD055B8", Offset = "0xD055B8", VA = "0xD055B8")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xD05544", Offset = "0xD05544", VA = "0xD05544")]
		[IteratorStateMachine(typeof(<AnimateVertexColors>d__10))]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xD0564C", Offset = "0xD0564C", VA = "0xD0564C")]
		public VertexShakeB()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class VertexZoom : MonoBehaviour
	{
		[Token(Token = "0x200032A")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x4001624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<float> modifiedCharScale;

			[Token(Token = "0x4001625")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Comparison<int> <>9__0;

			[Token(Token = "0x60013E1")]
			[Address(RVA = "0xD06918", Offset = "0xD06918", VA = "0xD06918")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x60013E2")]
			[Address(RVA = "0xD06920", Offset = "0xD06920", VA = "0xD06920")]
			internal int <AnimateVertexColors>b__0(int a, int b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x200032B")]
		[CompilerGenerated]
		private sealed class <AnimateVertexColors>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001627")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001628")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VertexZoom <>4__this;

			[Token(Token = "0x4001629")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass10_0 <>8__1;

			[Token(Token = "0x400162A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TMP_TextInfo <textInfo>5__2;

			[Token(Token = "0x400162B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TMP_MeshInfo[] <cachedMeshInfoVertexData>5__3;

			[Token(Token = "0x400162C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<int> <scaleSortingOrder>5__4;

			[Token(Token = "0x1700018E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013E6")]
				[Address(RVA = "0xD07650", Offset = "0xD07650", VA = "0xD07650", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013E8")]
				[Address(RVA = "0xD07698", Offset = "0xD07698", VA = "0xD07698", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013E3")]
			[Address(RVA = "0xD068D8", Offset = "0xD068D8", VA = "0xD068D8")]
			[DebuggerHidden]
			public <AnimateVertexColors>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60013E4")]
			[Address(RVA = "0xD069B0", Offset = "0xD069B0", VA = "0xD069B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013E5")]
			[Address(RVA = "0xD069B4", Offset = "0xD069B4", VA = "0xD069B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013E7")]
			[Address(RVA = "0xD07658", Offset = "0xD07658", VA = "0xD07658", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngleMultiplier;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float SpeedMultiplier;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CurveScale;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasTextChanged;

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xD065D8", Offset = "0xD065D8", VA = "0xD065D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xD06630", Offset = "0xD06630", VA = "0xD06630")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xD066FC", Offset = "0xD066FC", VA = "0xD066FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xD067C8", Offset = "0xD067C8", VA = "0xD067C8")]
		private void Start()
		{
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xD0685C", Offset = "0xD0685C", VA = "0xD0685C")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xD067E8", Offset = "0xD067E8", VA = "0xD067E8")]
		[IteratorStateMachine(typeof(<AnimateVertexColors>d__10))]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xD06900", Offset = "0xD06900", VA = "0xD06900")]
		public VertexZoom()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class WarpTextExample : MonoBehaviour
	{
		[Token(Token = "0x200032D")]
		[CompilerGenerated]
		private sealed class <WarpText>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001632")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001633")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001634")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WarpTextExample <>4__this;

			[Token(Token = "0x4001635")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <old_CurveScale>5__2;

			[Token(Token = "0x4001636")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AnimationCurve <old_curve>5__3;

			[Token(Token = "0x17000190")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013F1")]
				[Address(RVA = "0xD082F8", Offset = "0xD082F8", VA = "0xD082F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000191")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013F3")]
				[Address(RVA = "0xD08340", Offset = "0xD08340", VA = "0xD08340", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013EE")]
			[Address(RVA = "0xD0781C", Offset = "0xD0781C", VA = "0xD0781C")]
			[DebuggerHidden]
			public <WarpText>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60013EF")]
			[Address(RVA = "0xD07A88", Offset = "0xD07A88", VA = "0xD07A88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013F0")]
			[Address(RVA = "0xD07A8C", Offset = "0xD07A8C", VA = "0xD07A8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013F2")]
			[Address(RVA = "0xD08300", Offset = "0xD08300", VA = "0xD08300", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve VertexCurve;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AngleMultiplier;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float SpeedMultiplier;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float CurveScale;

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xD076A0", Offset = "0xD076A0", VA = "0xD076A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xD07708", Offset = "0xD07708", VA = "0xD07708")]
		private void Start()
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xD0779C", Offset = "0xD0779C", VA = "0xD0779C")]
		private AnimationCurve CopyAnimationCurve(AnimationCurve curve)
		{
			return null;
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xD07728", Offset = "0xD07728", VA = "0xD07728")]
		[IteratorStateMachine(typeof(<WarpText>d__8))]
		private IEnumerator WarpText()
		{
			return null;
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xD07844", Offset = "0xD07844", VA = "0xD07844")]
		public WarpTextExample()
		{
		}
	}
}
namespace ES3Types
{
	[Token(Token = "0x200032E")]
	[ES3Properties(new string[] { "localPosition", "localEulerAngles", "localRotation", "localScale", "parent" })]
	[Preserve]
	public class ES3UserType_Transform : ES3ComponentType
	{
		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xD08348", Offset = "0xD08348", VA = "0xD08348")]
		public ES3UserType_Transform()
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xD0840C", Offset = "0xD0840C", VA = "0xD0840C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60013F6")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class ES3UserType_TransformArray : ES3ArrayType
	{
		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xD086B4", Offset = "0xD086B4", VA = "0xD086B4")]
		public ES3UserType_TransformArray()
		{
		}
	}
}
namespace FXLavaShader
{
	[Token(Token = "0x2000330")]
	[RequireComponent(typeof(ParticleSystem))]
	public class ParticleSystemRandomStart : MonoBehaviour
	{
		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 Delay;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 Scale;

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xD0878C", Offset = "0xD0878C", VA = "0xD0878C")]
		private void Start()
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xD088E0", Offset = "0xD088E0", VA = "0xD088E0")]
		public ParticleSystemRandomStart()
		{
		}
	}
}
namespace SciFiArsenal
{
	[Token(Token = "0x2000331")]
	public class SciFiBeamScript : MonoBehaviour
	{
		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Prefabs")]
		public GameObject[] beamLineRendererPrefab;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] beamStartPrefab;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] beamEndPrefab;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int currentBeam;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject beamStart;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject beamEnd;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject beam;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LineRenderer line;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Adjustable Variables")]
		public float beamEndOffset;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float textureScrollSpeed;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float textureLengthScale;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Put Sliders here (Optional)")]
		public Slider endOffSetSlider;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Slider scrollSpeedSlider;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Put UI Text object here to show beam name")]
		public Text textBeamName;

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xD088F4", Offset = "0xD088F4", VA = "0xD088F4")]
		private void Start()
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xD08A34", Offset = "0xD08A34", VA = "0xD08A34")]
		private void Update()
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xD09290", Offset = "0xD09290", VA = "0xD09290")]
		public void nextBeam()
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xD09370", Offset = "0xD09370", VA = "0xD09370")]
		public void previousBeam()
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xD09450", Offset = "0xD09450", VA = "0xD09450")]
		public void UpdateEndOffset()
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xD09480", Offset = "0xD09480", VA = "0xD09480")]
		public void UpdateScrollSpeed()
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xD08E6C", Offset = "0xD08E6C", VA = "0xD08E6C")]
		private void ShootBeamInDir(Vector3 start, Vector3 dir)
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xD094B0", Offset = "0xD094B0", VA = "0xD094B0")]
		public SciFiBeamScript()
		{
		}
	}
	[Token(Token = "0x2000332")]
	public class SciFiButtonScript : MonoBehaviour
	{
		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Button;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text MyButtonText;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string projectileParticleName;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SciFiFireProjectile effectScript;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SciFiProjectileScript projectileScript;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float buttonsX;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float buttonsY;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float buttonsSizeX;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float buttonsSizeY;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float buttonsDistance;

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xD094CC", Offset = "0xD094CC", VA = "0xD094CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xD09688", Offset = "0xD09688", VA = "0xD09688")]
		private void Update()
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xD095D4", Offset = "0xD095D4", VA = "0xD095D4")]
		public void getProjectileNames()
		{
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xD096B4", Offset = "0xD096B4", VA = "0xD096B4")]
		public bool overButton()
		{
			return default(bool);
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xD0978C", Offset = "0xD0978C", VA = "0xD0978C")]
		public SciFiButtonScript()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class SciFiDragMouseOrbit : MonoBehaviour
	{
		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float xSpeed;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ySpeed;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float yMinLimit;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float yMaxLimit;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float distanceMin;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float distanceMax;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float smoothTime;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float rotationYAxis;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float rotationXAxis;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float velocityX;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float velocityY;

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xD09794", Offset = "0xD09794", VA = "0xD09794")]
		private void Start()
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xD09860", Offset = "0xD09860", VA = "0xD09860")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xD09BDC", Offset = "0xD09BDC", VA = "0xD09BDC")]
		public static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xD09C18", Offset = "0xD09C18", VA = "0xD09C18")]
		public SciFiDragMouseOrbit()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class SciFiFireProjectile : MonoBehaviour
	{
		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public GameObject[] projectiles;

		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Missile spawns at attached game object")]
		public Transform spawnPosition;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public int currentProjectile;

		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speed;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SciFiButtonScript selectedProjectileButton;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RaycastHit hit;

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xD09C34", Offset = "0xD09C34", VA = "0xD09C34")]
		private void Start()
		{
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xD09CB0", Offset = "0xD09CB0", VA = "0xD09CB0")]
		private void Update()
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0xD0A080", Offset = "0xD0A080", VA = "0xD0A080")]
		public void nextEffect()
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xD0A0BC", Offset = "0xD0A0BC", VA = "0xD0A0BC")]
		public void previousEffect()
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xD0A0F8", Offset = "0xD0A0F8", VA = "0xD0A0F8")]
		public void AdjustSpeed(float newSpeed)
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xD0A100", Offset = "0xD0A100", VA = "0xD0A100")]
		public SciFiFireProjectile()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class SciFiLoadSceneOnClick : MonoBehaviour
	{
		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool GUIHide;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool GUIHide2;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool GUIHide3;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool GUIHide4;

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xD0A110", Offset = "0xD0A110", VA = "0xD0A110")]
		public void LoadSceneSciFiProjectiles()
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xD0A178", Offset = "0xD0A178", VA = "0xD0A178")]
		public void LoadSceneSciFiBeamup()
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xD0A1E0", Offset = "0xD0A1E0", VA = "0xD0A1E0")]
		public void LoadSceneSciFiBuff()
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0xD0A248", Offset = "0xD0A248", VA = "0xD0A248")]
		public void LoadSceneSciFiFlamethrowers2()
		{
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0xD0A2B0", Offset = "0xD0A2B0", VA = "0xD0A2B0")]
		public void LoadSceneSciFiQuestZone()
		{
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xD0A318", Offset = "0xD0A318", VA = "0xD0A318")]
		public void LoadSceneSciFiLightjump()
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xD0A380", Offset = "0xD0A380", VA = "0xD0A380")]
		public void LoadSceneSciFiLoot()
		{
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xD0A3E8", Offset = "0xD0A3E8", VA = "0xD0A3E8")]
		public void LoadSceneSciFiBeams()
		{
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xD0A450", Offset = "0xD0A450", VA = "0xD0A450")]
		public void LoadSceneSciFiPortals()
		{
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xD0A4B8", Offset = "0xD0A4B8", VA = "0xD0A4B8")]
		public void LoadSceneSciFiRegenerate()
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xD0A520", Offset = "0xD0A520", VA = "0xD0A520")]
		public void LoadSceneSciFiShields()
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xD0A588", Offset = "0xD0A588", VA = "0xD0A588")]
		public void LoadSceneSciFiSwirlyAura()
		{
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xD0A5F0", Offset = "0xD0A5F0", VA = "0xD0A5F0")]
		public void LoadSceneSciFiWarpgates()
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xD0A658", Offset = "0xD0A658", VA = "0xD0A658")]
		public void LoadSceneSciFiJetflame()
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xD0A6C0", Offset = "0xD0A6C0", VA = "0xD0A6C0")]
		public void LoadSceneSciFiUltimateNova()
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xD0A728", Offset = "0xD0A728", VA = "0xD0A728")]
		public void LoadSceneSciFiFire()
		{
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xD0A790", Offset = "0xD0A790", VA = "0xD0A790")]
		public void LoadSceneSciFiUpdate6()
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xD0A7F8", Offset = "0xD0A7F8", VA = "0xD0A7F8")]
		public void LoadSceneSciFiUpdate7()
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xD0A860", Offset = "0xD0A860", VA = "0xD0A860")]
		public void LoadSceneSciFiUpdate8()
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xD0A8C8", Offset = "0xD0A8C8", VA = "0xD0A8C8")]
		public void LoadSceneSciFiUpdate9()
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xD0A930", Offset = "0xD0A930", VA = "0xD0A930")]
		public void LoadSceneSciFiUpdate10()
		{
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xD0A998", Offset = "0xD0A998", VA = "0xD0A998")]
		public void LoadSceneSciFiUpdate11()
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xD0AA00", Offset = "0xD0AA00", VA = "0xD0AA00")]
		public void LoadSceneSciFiUpdate12()
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xD0AA68", Offset = "0xD0AA68", VA = "0xD0AA68")]
		public void LoadSceneSciFiUpdate13()
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xD0AAD0", Offset = "0xD0AAD0", VA = "0xD0AAD0")]
		private void Update()
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xD0AC90", Offset = "0xD0AC90", VA = "0xD0AC90")]
		public SciFiLoadSceneOnClick()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class SciFiLoopScript : MonoBehaviour
	{
		[Token(Token = "0x2000337")]
		[CompilerGenerated]
		private sealed class <EffectLoop>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400166C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400166D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400166E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SciFiLoopScript <>4__this;

			[Token(Token = "0x400166F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <effectPlayer>5__2;

			[Token(Token = "0x17000192")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001432")]
				[Address(RVA = "0xD0AF60", Offset = "0xD0AF60", VA = "0xD0AF60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000193")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001434")]
				[Address(RVA = "0xD0AFA8", Offset = "0xD0AFA8", VA = "0xD0AFA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600142F")]
			[Address(RVA = "0xD0AD5C", Offset = "0xD0AD5C", VA = "0xD0AD5C")]
			[DebuggerHidden]
			public <EffectLoop>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001430")]
			[Address(RVA = "0xD0AD94", Offset = "0xD0AD94", VA = "0xD0AD94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001431")]
			[Address(RVA = "0xD0AD98", Offset = "0xD0AD98", VA = "0xD0AD98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001433")]
			[Address(RVA = "0xD0AF68", Offset = "0xD0AF68", VA = "0xD0AF68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject chosenEffect;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float loopTimeLimit;

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xD0AC98", Offset = "0xD0AC98", VA = "0xD0AC98")]
		private void Start()
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xD0AC9C", Offset = "0xD0AC9C", VA = "0xD0AC9C")]
		public void PlayEffect()
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xD0ACE8", Offset = "0xD0ACE8", VA = "0xD0ACE8")]
		[IteratorStateMachine(typeof(<EffectLoop>d__4))]
		private IEnumerator EffectLoop()
		{
			return null;
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xD0AD84", Offset = "0xD0AD84", VA = "0xD0AD84")]
		public SciFiLoopScript()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class SciFiProjectileScript : MonoBehaviour
	{
		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject impactParticle;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject projectileParticle;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject muzzleParticle;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] trailParticles;

		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Vector3 impactNormal;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool hasCollided;

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xD0AFB0", Offset = "0xD0AFB0", VA = "0xD0AFB0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0xD0B2AC", Offset = "0xD0B2AC", VA = "0xD0B2AC")]
		private void OnCollisionEnter(Collision hit)
		{
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0xD0B6C4", Offset = "0xD0B6C4", VA = "0xD0B6C4")]
		public SciFiProjectileScript()
		{
		}
	}
	[Token(Token = "0x2000339")]
	public class SciFiLightFade : MonoBehaviour
	{
		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Seconds to dim the light")]
		public float life;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool killAfterLife;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light li;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float initIntensity;

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xD0B6CC", Offset = "0xD0B6CC", VA = "0xD0B6CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xD0B7E8", Offset = "0xD0B7E8", VA = "0xD0B7E8")]
		private void Update()
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xD0B924", Offset = "0xD0B924", VA = "0xD0B924")]
		public SciFiLightFade()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class SciFiPitchRandomizer : MonoBehaviour
	{
		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float randomPercent;

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xD0B940", Offset = "0xD0B940", VA = "0xD0B940")]
		private void Start()
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0xD0B9F0", Offset = "0xD0B9F0", VA = "0xD0B9F0")]
		public SciFiPitchRandomizer()
		{
		}
	}
	[Token(Token = "0x200033B")]
	public class SciFiRotation : MonoBehaviour
	{
		[Token(Token = "0x200033C")]
		public enum spaceEnum
		{
			[Token(Token = "0x400167E")]
			Local,
			[Token(Token = "0x400167F")]
			World
		}

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotate axises by degrees per second")]
		public Vector3 rotateVector;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public spaceEnum rotateSpace;

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xD0BA00", Offset = "0xD0BA00", VA = "0xD0BA00")]
		private void Start()
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xD0BA04", Offset = "0xD0BA04", VA = "0xD0BA04")]
		private void Update()
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xD0BAD8", Offset = "0xD0BAD8", VA = "0xD0BAD8")]
		public SciFiRotation()
		{
		}
	}
}
namespace MagicArsenal
{
	[Token(Token = "0x200033D")]
	public class MagicBeamScript : MonoBehaviour
	{
		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Prefabs")]
		public GameObject[] beamLineRendererPrefab;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] beamStartPrefab;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] beamEndPrefab;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int currentBeam;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject beamStart;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject beamEnd;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject beam;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LineRenderer line;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Adjustable Variables")]
		public float beamEndOffset;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float textureScrollSpeed;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float textureLengthScale;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Put Sliders here (Optional)")]
		public Slider endOffSetSlider;

		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Slider scrollSpeedSlider;

		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Put UI Text object here to show beam name")]
		public Text textBeamName;

		[Token(Token = "0x6001440")]
		[Address(RVA = "0xD0BB38", Offset = "0xD0BB38", VA = "0xD0BB38")]
		private void Start()
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xD0BC78", Offset = "0xD0BC78", VA = "0xD0BC78")]
		private void Update()
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xD0C4D4", Offset = "0xD0C4D4", VA = "0xD0C4D4")]
		public void nextBeam()
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0xD0C5B4", Offset = "0xD0C5B4", VA = "0xD0C5B4")]
		public void previousBeam()
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0xD0C694", Offset = "0xD0C694", VA = "0xD0C694")]
		public void UpdateEndOffset()
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xD0C6C4", Offset = "0xD0C6C4", VA = "0xD0C6C4")]
		public void UpdateScrollSpeed()
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xD0C0B0", Offset = "0xD0C0B0", VA = "0xD0C0B0")]
		private void ShootBeamInDir(Vector3 start, Vector3 dir)
		{
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xD0C6F4", Offset = "0xD0C6F4", VA = "0xD0C6F4")]
		public MagicBeamScript()
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class MagicButtonScript : MonoBehaviour
	{
		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Button;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text MyButtonText;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string projectileParticleName;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MagicFireProjectile effectScript;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MagicProjectileScript projectileScript;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float buttonsX;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float buttonsY;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float buttonsSizeX;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float buttonsSizeY;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float buttonsDistance;

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xD0C710", Offset = "0xD0C710", VA = "0xD0C710")]
		private void Start()
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xD0C8CC", Offset = "0xD0C8CC", VA = "0xD0C8CC")]
		private void Update()
		{
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xD0C818", Offset = "0xD0C818", VA = "0xD0C818")]
		public void getProjectileNames()
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xD0C8F8", Offset = "0xD0C8F8", VA = "0xD0C8F8")]
		public bool overButton()
		{
			return default(bool);
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xD0C9D0", Offset = "0xD0C9D0", VA = "0xD0C9D0")]
		public MagicButtonScript()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class MagicDragMouseOrbit : MonoBehaviour
	{
		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float xSpeed;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ySpeed;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float yMinLimit;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float yMaxLimit;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float distanceMin;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float distanceMax;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float smoothTime;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float rotationYAxis;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float rotationXAxis;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float velocityX;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float velocityY;

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xD0C9D8", Offset = "0xD0C9D8", VA = "0xD0C9D8")]
		private void Start()
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xD0CAA4", Offset = "0xD0CAA4", VA = "0xD0CAA4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xD0CE20", Offset = "0xD0CE20", VA = "0xD0CE20")]
		public static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xD0CE5C", Offset = "0xD0CE5C", VA = "0xD0CE5C")]
		public MagicDragMouseOrbit()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public class MagicEffectCycler : MonoBehaviour
	{
		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<GameObject> listOfEffects;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Header("Loop length in seconds")]
		private float loopTimeLength;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float timeOfLastInstantiate;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject instantiatedEffect;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int effectIndex;

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xD0CE78", Offset = "0xD0CE78", VA = "0xD0CE78")]
		private void Start()
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xD0CFD0", Offset = "0xD0CFD0", VA = "0xD0CFD0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xD0D164", Offset = "0xD0D164", VA = "0xD0D164")]
		public MagicEffectCycler()
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class MagicFireProjectile : MonoBehaviour
	{
		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RaycastHit hit;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] projectiles;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform spawnPosition;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public int currentProjectile;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float speed;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MagicButtonScript selectedProjectileButton;

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xD0D174", Offset = "0xD0D174", VA = "0xD0D174")]
		private void Start()
		{
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xD0D1F0", Offset = "0xD0D1F0", VA = "0xD0D1F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xD0D5FC", Offset = "0xD0D5FC", VA = "0xD0D5FC")]
		public void nextEffect()
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xD0D638", Offset = "0xD0D638", VA = "0xD0D638")]
		public void previousEffect()
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xD0D674", Offset = "0xD0D674", VA = "0xD0D674")]
		public void AdjustSpeed(float newSpeed)
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xD0D67C", Offset = "0xD0D67C", VA = "0xD0D67C")]
		public MagicFireProjectile()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class MagicLoadSceneOnClick : MonoBehaviour
	{
		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool GUIHide;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool GUIHide2;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool GUIHide3;

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xD0D68C", Offset = "0xD0D68C", VA = "0xD0D68C")]
		public void LoadSceneProjectiles()
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xD0D6F4", Offset = "0xD0D6F4", VA = "0xD0D6F4")]
		public void LoadSceneSprays()
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xD0D75C", Offset = "0xD0D75C", VA = "0xD0D75C")]
		public void LoadSceneAura()
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xD0D7C4", Offset = "0xD0D7C4", VA = "0xD0D7C4")]
		public void LoadSceneModular()
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xD0D82C", Offset = "0xD0D82C", VA = "0xD0D82C")]
		public void LoadSceneShields2()
		{
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0xD0D894", Offset = "0xD0D894", VA = "0xD0D894")]
		public void LoadSceneShields()
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0xD0D8FC", Offset = "0xD0D8FC", VA = "0xD0D8FC")]
		public void LoadSceneSphereBlast()
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0xD0D964", Offset = "0xD0D964", VA = "0xD0D964")]
		public void LoadSceneEnchant()
		{
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xD0D9CC", Offset = "0xD0D9CC", VA = "0xD0D9CC")]
		public void LoadSceneSlash()
		{
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xD0DA34", Offset = "0xD0DA34", VA = "0xD0DA34")]
		public void LoadSceneCharge()
		{
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0xD0DA9C", Offset = "0xD0DA9C", VA = "0xD0DA9C")]
		public void LoadSceneCleave()
		{
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xD0DB04", Offset = "0xD0DB04", VA = "0xD0DB04")]
		public void LoadSceneAura2()
		{
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xD0DB6C", Offset = "0xD0DB6C", VA = "0xD0DB6C")]
		public void LoadSceneWalls()
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xD0DBD4", Offset = "0xD0DBD4", VA = "0xD0DBD4")]
		public void LoadSceneBeams()
		{
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xD0DC3C", Offset = "0xD0DC3C", VA = "0xD0DC3C")]
		public void LoadSceneMeshGlow()
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xD0DCA4", Offset = "0xD0DCA4", VA = "0xD0DCA4")]
		public void LoadScenePillarBlast()
		{
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xD0DD0C", Offset = "0xD0DD0C", VA = "0xD0DD0C")]
		public void LoadSceneAura3()
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xD0DD74", Offset = "0xD0DD74", VA = "0xD0DD74")]
		public void LoadSceneAuraCast()
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xD0DDDC", Offset = "0xD0DDDC", VA = "0xD0DDDC")]
		public void LoadSceneRain()
		{
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xD0DE44", Offset = "0xD0DE44", VA = "0xD0DE44")]
		public void LoadSceneAOE()
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xD0DEAC", Offset = "0xD0DEAC", VA = "0xD0DEAC")]
		public void LoadSceneNova()
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xD0DF14", Offset = "0xD0DF14", VA = "0xD0DF14")]
		public void LoadSceneFlame()
		{
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xD0DF7C", Offset = "0xD0DF7C", VA = "0xD0DF7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xD0E0DC", Offset = "0xD0E0DC", VA = "0xD0E0DC")]
		public MagicLoadSceneOnClick()
		{
		}
	}
	[Token(Token = "0x2000343")]
	public class MagicLoopScript : MonoBehaviour
	{
		[Token(Token = "0x2000344")]
		[CompilerGenerated]
		private sealed class <EffectLoop>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLoopScript <>4__this;

			[Token(Token = "0x40016B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <effectPlayer>5__2;

			[Token(Token = "0x17000194")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001479")]
				[Address(RVA = "0xD0E3AC", Offset = "0xD0E3AC", VA = "0xD0E3AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000195")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600147B")]
				[Address(RVA = "0xD0E3F4", Offset = "0xD0E3F4", VA = "0xD0E3F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001476")]
			[Address(RVA = "0xD0E1A8", Offset = "0xD0E1A8", VA = "0xD0E1A8")]
			[DebuggerHidden]
			public <EffectLoop>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001477")]
			[Address(RVA = "0xD0E1E0", Offset = "0xD0E1E0", VA = "0xD0E1E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001478")]
			[Address(RVA = "0xD0E1E4", Offset = "0xD0E1E4", VA = "0xD0E1E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600147A")]
			[Address(RVA = "0xD0E3B4", Offset = "0xD0E3B4", VA = "0xD0E3B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject chosenEffect;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float loopTimeLimit;

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xD0E0E4", Offset = "0xD0E0E4", VA = "0xD0E0E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xD0E0E8", Offset = "0xD0E0E8", VA = "0xD0E0E8")]
		public void PlayEffect()
		{
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xD0E134", Offset = "0xD0E134", VA = "0xD0E134")]
		[IteratorStateMachine(typeof(<EffectLoop>d__4))]
		private IEnumerator EffectLoop()
		{
			return null;
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xD0E1D0", Offset = "0xD0E1D0", VA = "0xD0E1D0")]
		public MagicLoopScript()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public class MagicBeamStatic : MonoBehaviour
	{
		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Prefabs")]
		public GameObject beamLineRendererPrefab;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject beamStartPrefab;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject beamEndPrefab;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject beamStart;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject beamEnd;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject beam;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private LineRenderer line;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Beam Options")]
		public bool alwaysOn;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool beamCollides;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float beamLength;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float beamEndOffset;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float textureScrollSpeed;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float textureLengthScale;

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xD0E3FC", Offset = "0xD0E3FC", VA = "0xD0E3FC")]
		private void Start()
		{
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xD0E400", Offset = "0xD0E400", VA = "0xD0E400")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xD0E6E0", Offset = "0xD0E6E0", VA = "0xD0E6E0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0xD0E7F8", Offset = "0xD0E7F8", VA = "0xD0E7F8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xD0E410", Offset = "0xD0E410", VA = "0xD0E410")]
		public void SpawnBeam()
		{
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0xD0E6E4", Offset = "0xD0E6E4", VA = "0xD0E6E4")]
		public void RemoveBeam()
		{
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xD0EBFC", Offset = "0xD0EBFC", VA = "0xD0EBFC")]
		public MagicBeamStatic()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class MagicLightFade : MonoBehaviour
	{
		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Seconds to dim the light")]
		public float life;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool killAfterLife;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light li;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float initIntensity;

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xD0EC1C", Offset = "0xD0EC1C", VA = "0xD0EC1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xD0ED38", Offset = "0xD0ED38", VA = "0xD0ED38")]
		private void Update()
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xD0EE74", Offset = "0xD0EE74", VA = "0xD0EE74")]
		public MagicLightFade()
		{
		}
	}
	[Token(Token = "0x2000347")]
	public class MagicLightFlicker : MonoBehaviour
	{
		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string waveFunction;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float startValue;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float amplitude;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float phase;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float frequency;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color originalColor;

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xD0EE90", Offset = "0xD0EE90", VA = "0xD0EE90")]
		private void Start()
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xD0EEF4", Offset = "0xD0EEF4", VA = "0xD0EEF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xD0EF88", Offset = "0xD0EF88", VA = "0xD0EF88")]
		private float EvalWave()
		{
			return default(float);
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xD0F154", Offset = "0xD0F154", VA = "0xD0F154")]
		public MagicLightFlicker()
		{
		}
	}
	[Token(Token = "0x2000348")]
	public class MagicRotation : MonoBehaviour
	{
		[Token(Token = "0x2000349")]
		public enum spaceEnum
		{
			[Token(Token = "0x40016D3")]
			Local,
			[Token(Token = "0x40016D4")]
			World
		}

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotate axises by degrees per second")]
		public Vector3 rotateVector;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public spaceEnum rotateSpace;

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xD0F1BC", Offset = "0xD0F1BC", VA = "0xD0F1BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xD0F1C0", Offset = "0xD0F1C0", VA = "0xD0F1C0")]
		private void Update()
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xD0F294", Offset = "0xD0F294", VA = "0xD0F294")]
		public MagicRotation()
		{
		}
	}
}
namespace EpicToonFX
{
	[Token(Token = "0x200034A")]
	public class ETFXLightFade : MonoBehaviour
	{
		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Seconds to dim the light")]
		public float life;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool killAfterLife;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light li;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float initIntensity;

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xD0F2F4", Offset = "0xD0F2F4", VA = "0xD0F2F4")]
		private void Start()
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xD0F410", Offset = "0xD0F410", VA = "0xD0F410")]
		private void Update()
		{
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xD0F564", Offset = "0xD0F564", VA = "0xD0F564")]
		public ETFXLightFade()
		{
		}
	}
	[Token(Token = "0x200034B")]
	public class ETFXPitchRandomizer : MonoBehaviour
	{
		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float randomPercent;

		[Token(Token = "0x6001490")]
		[Address(RVA = "0xD0F580", Offset = "0xD0F580", VA = "0xD0F580")]
		private void Start()
		{
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0xD0F630", Offset = "0xD0F630", VA = "0xD0F630")]
		public ETFXPitchRandomizer()
		{
		}
	}
	[Token(Token = "0x200034C")]
	public class ETFXRotation : MonoBehaviour
	{
		[Token(Token = "0x200034D")]
		public enum spaceEnum
		{
			[Token(Token = "0x40016DD")]
			Local,
			[Token(Token = "0x40016DE")]
			World
		}

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotate axises by degrees per second")]
		public Vector3 rotateVector;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public spaceEnum rotateSpace;

		[Token(Token = "0x6001492")]
		[Address(RVA = "0xD0F640", Offset = "0xD0F640", VA = "0xD0F640")]
		private void Start()
		{
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0xD0F644", Offset = "0xD0F644", VA = "0xD0F644")]
		private void Update()
		{
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0xD0F718", Offset = "0xD0F718", VA = "0xD0F718")]
		public ETFXRotation()
		{
		}
	}
}
