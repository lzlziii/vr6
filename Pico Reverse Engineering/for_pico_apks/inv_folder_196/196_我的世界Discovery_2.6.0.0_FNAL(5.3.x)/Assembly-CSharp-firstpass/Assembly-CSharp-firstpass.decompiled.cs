using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Timers;
using System.Xml;
using System.Xml.Linq;
using AnimationOrTween;
using BlockEngine.AI;
using Il2CppDummyDll;
using Microsoft.Xna.Framework;
using NATTraversal;
using NSpeex;
using NWBlockEngine;
using NWCommon;
using NWCommon.Container;
using TObject.Shared;
using TemplatesDatabase;
using TerrainGenerators;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.Networking.NetworkSystem;
using UnityEngine.Networking.Types;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using nn.account;
using nn.hid;
using nn.util;

[assembly: AssemblyVersion("1.0.0.0")]
[Token(Token = "0x2000002")]
[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x232C54", Offset = "0x232C54")]
public class AdvancedMigrationManager : MigrationManager
{
	[Token(Token = "0x6000001")]
	[Address(RVA = "0x4765D0", Offset = "0x4765D0", VA = "0x4765D0")]
	public AdvancedMigrationManager()
	{
	}
}
[Token(Token = "0x2000003")]
[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x232C88", Offset = "0x232C88")]
public class AdvancedNetworkManager : NATTraversal.NetworkManager
{
	[Token(Token = "0x6000002")]
	[Address(RVA = "0x4765D8", Offset = "0x4765D8", VA = "0x4765D8")]
	public AdvancedNetworkManager()
	{
	}
}
namespace NATTraversal
{
	[Token(Token = "0x2000004")]
	public class NATLobbyManager : NetworkManager
	{
		[Token(Token = "0x2000005")]
		private struct PendingPlayer
		{
			[Token(Token = "0x400000E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public NetworkConnection conn;

			[Token(Token = "0x400000F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public GameObject lobbyPlayer;
		}

		[Token(Token = "0x2000006")]
		public class LobbyReadyToBeginMessage : MessageBase
		{
			[Token(Token = "0x4000010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public byte slotId;

			[Token(Token = "0x4000011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool readyState;

			[Token(Token = "0x6000048")]
			[Address(RVA = "0x5AC074", Offset = "0x5AC074", VA = "0x5AC074")]
			public LobbyReadyToBeginMessage()
			{
			}

			[Token(Token = "0x6000049")]
			[Address(RVA = "0x5ADDF0", Offset = "0x5ADDF0", VA = "0x5ADDF0", Slot = "4")]
			public override void Deserialize(NetworkReader reader)
			{
			}

			[Token(Token = "0x600004A")]
			[Address(RVA = "0x5ADE50", Offset = "0x5ADE50", VA = "0x5ADE50", Slot = "5")]
			public override void Serialize(NetworkWriter writer)
			{
			}
		}

		[Token(Token = "0x4000001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[SerializeField]
		private bool m_ShowLobbyGUI;

		[Token(Token = "0x4000002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[SerializeField]
		private int m_MaxPlayers;

		[Token(Token = "0x4000003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		[SerializeField]
		private int m_MaxPlayersPerConnection;

		[Token(Token = "0x4000004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[SerializeField]
		private int m_MinPlayers;

		[Token(Token = "0x4000005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		[SerializeField]
		private NATLobbyPlayer m_LobbyPlayerPrefab;

		[Token(Token = "0x4000006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private GameObject m_GamePlayerPrefab;

		[Token(Token = "0x4000007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[SerializeField]
		private string m_LobbyScene;

		[Token(Token = "0x4000008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private string m_PlayScene;

		[Token(Token = "0x4000009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private List<PendingPlayer> m_PendingPlayers;

		[Token(Token = "0x400000A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public NATLobbyPlayer[] lobbySlots;

		[Token(Token = "0x400000B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LobbyReadyToBeginMessage s_ReadyToBeginMessage;

		[Token(Token = "0x400000C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static IntegerMessage s_SceneLoadedMessage;

		[Token(Token = "0x400000D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static LobbyReadyToBeginMessage s_LobbyReadyToBeginMessage;

		[Token(Token = "0x17000001")]
		public bool showLobbyGUI
		{
			[Token(Token = "0x6000004")]
			[Address(RVA = "0x5A9370", Offset = "0x5A9370", VA = "0x5A9370")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000005")]
			[Address(RVA = "0x5A9378", Offset = "0x5A9378", VA = "0x5A9378")]
			set
			{
			}
		}

		[Token(Token = "0x17000002")]
		public int maxPlayers
		{
			[Token(Token = "0x6000006")]
			[Address(RVA = "0x5A9380", Offset = "0x5A9380", VA = "0x5A9380")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000007")]
			[Address(RVA = "0x5A9388", Offset = "0x5A9388", VA = "0x5A9388")]
			set
			{
			}
		}

		[Token(Token = "0x17000003")]
		public int maxPlayersPerConnection
		{
			[Token(Token = "0x6000008")]
			[Address(RVA = "0x5A9390", Offset = "0x5A9390", VA = "0x5A9390")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000009")]
			[Address(RVA = "0x5A9398", Offset = "0x5A9398", VA = "0x5A9398")]
			set
			{
			}
		}

		[Token(Token = "0x17000004")]
		public int minPlayers
		{
			[Token(Token = "0x600000A")]
			[Address(RVA = "0x5A93A0", Offset = "0x5A93A0", VA = "0x5A93A0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600000B")]
			[Address(RVA = "0x5A93A8", Offset = "0x5A93A8", VA = "0x5A93A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000005")]
		public NATLobbyPlayer lobbyPlayerPrefab
		{
			[Token(Token = "0x600000C")]
			[Address(RVA = "0x5A93B0", Offset = "0x5A93B0", VA = "0x5A93B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600000D")]
			[Address(RVA = "0x5A93B8", Offset = "0x5A93B8", VA = "0x5A93B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000006")]
		public GameObject gamePlayerPrefab
		{
			[Token(Token = "0x600000E")]
			[Address(RVA = "0x5A93C0", Offset = "0x5A93C0", VA = "0x5A93C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600000F")]
			[Address(RVA = "0x5A93C8", Offset = "0x5A93C8", VA = "0x5A93C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000007")]
		public string lobbyScene
		{
			[Token(Token = "0x6000010")]
			[Address(RVA = "0x5A93D0", Offset = "0x5A93D0", VA = "0x5A93D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000011")]
			[Address(RVA = "0x5A93D8", Offset = "0x5A93D8", VA = "0x5A93D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000008")]
		public string playScene
		{
			[Token(Token = "0x6000012")]
			[Address(RVA = "0x5A93E4", Offset = "0x5A93E4", VA = "0x5A93E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000013")]
			[Address(RVA = "0x5A93EC", Offset = "0x5A93EC", VA = "0x5A93EC")]
			set
			{
			}
		}

		[Token(Token = "0x6000003")]
		[Address(RVA = "0x5A927C", Offset = "0x5A927C", VA = "0x5A927C")]
		public NATLobbyManager()
		{
		}

		[Token(Token = "0x6000014")]
		[Address(RVA = "0x5A93F4", Offset = "0x5A93F4", VA = "0x5A93F4", Slot = "33")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000015")]
		[Address(RVA = "0x5A951C", Offset = "0x5A951C", VA = "0x5A951C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000016")]
		[Address(RVA = "0x5A97BC", Offset = "0x5A97BC", VA = "0x5A97BC")]
		private byte FindSlot()
		{
			return default(byte);
		}

		[Token(Token = "0x6000017")]
		[Address(RVA = "0x5A98B4", Offset = "0x5A98B4", VA = "0x5A98B4")]
		private void SceneLoadedForPlayer(NetworkConnection conn, GameObject lobbyPlayerGameObject)
		{
		}

		[Token(Token = "0x6000018")]
		[Address(RVA = "0x5A9F78", Offset = "0x5A9F78", VA = "0x5A9F78")]
		private static int CheckConnectionIsReadyToBegin(NetworkConnection conn)
		{
			return default(int);
		}

		[Token(Token = "0x6000019")]
		[Address(RVA = "0x5AA104", Offset = "0x5AA104", VA = "0x5AA104")]
		public void CheckReadyToBegin()
		{
		}

		[Token(Token = "0x600001A")]
		[Address(RVA = "0x5AA36C", Offset = "0x5AA36C", VA = "0x5AA36C")]
		public void ServerReturnToLobby()
		{
		}

		[Token(Token = "0x600001B")]
		[Address(RVA = "0x5AA454", Offset = "0x5AA454", VA = "0x5AA454")]
		private void CallOnClientEnterLobby()
		{
		}

		[Token(Token = "0x600001C")]
		[Address(RVA = "0x5AA5A4", Offset = "0x5AA5A4", VA = "0x5AA5A4")]
		private void CallOnClientExitLobby()
		{
		}

		[Token(Token = "0x600001D")]
		[Address(RVA = "0x5AA6D0", Offset = "0x5AA6D0", VA = "0x5AA6D0")]
		public bool SendReturnToLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x600001E")]
		[Address(RVA = "0x5AA78C", Offset = "0x5AA78C", VA = "0x5AA78C", Slot = "8")]
		public override void OnServerConnect(NetworkConnection conn)
		{
		}

		[Token(Token = "0x600001F")]
		[Address(RVA = "0x5AAA2C", Offset = "0x5AAA2C", VA = "0x5AAA2C", Slot = "9")]
		public override void OnServerDisconnect(NetworkConnection conn)
		{
		}

		[Token(Token = "0x6000020")]
		[Address(RVA = "0x5AAC10", Offset = "0x5AAC10", VA = "0x5AAC10", Slot = "12")]
		public override void OnServerAddPlayer(NetworkConnection conn, short playerControllerId)
		{
		}

		[Token(Token = "0x6000021")]
		[Address(RVA = "0x5AB17C", Offset = "0x5AB17C", VA = "0x5AB17C", Slot = "13")]
		public override void OnServerRemovePlayer(NetworkConnection conn, PlayerController player)
		{
		}

		[Token(Token = "0x6000022")]
		[Address(RVA = "0x5AB4C8", Offset = "0x5AB4C8", VA = "0x5AB4C8", Slot = "7")]
		public override void ServerChangeScene(string sceneName)
		{
		}

		[Token(Token = "0x6000023")]
		[Address(RVA = "0x5AB848", Offset = "0x5AB848", VA = "0x5AB848")]
		private bool GetPlayerController(NetworkConnection client, short playerControllerId, out PlayerController playerController)
		{
			return default(bool);
		}

		[Token(Token = "0x6000024")]
		[Address(RVA = "0x5ABAA8", Offset = "0x5ABAA8", VA = "0x5ABAA8", Slot = "15")]
		public override void OnServerSceneChanged(string sceneName)
		{
		}

		[Token(Token = "0x6000025")]
		[Address(RVA = "0x5ABC0C", Offset = "0x5ABC0C", VA = "0x5ABC0C")]
		private void OnServerReadyToBeginMessage(NetworkMessage netMsg)
		{
		}

		[Token(Token = "0x6000026")]
		[Address(RVA = "0x5AC07C", Offset = "0x5AC07C", VA = "0x5AC07C")]
		private void OnServerSceneLoadedMessage(NetworkMessage netMsg)
		{
		}

		[Token(Token = "0x6000027")]
		[Address(RVA = "0x5AC39C", Offset = "0x5AC39C", VA = "0x5AC39C")]
		private void OnServerReturnToLobbyMessage(NetworkMessage netMsg)
		{
		}

		[Token(Token = "0x6000028")]
		[Address(RVA = "0x5AC470", Offset = "0x5AC470", VA = "0x5AC470", Slot = "22")]
		public override void OnStartServer()
		{
		}

		[Token(Token = "0x6000029")]
		[Address(RVA = "0x5AC78C", Offset = "0x5AC78C", VA = "0x5AC78C", Slot = "21")]
		public override void OnStartHost()
		{
		}

		[Token(Token = "0x600002A")]
		[Address(RVA = "0x5AC79C", Offset = "0x5AC79C", VA = "0x5AC79C", Slot = "26")]
		public override void OnStopHost()
		{
		}

		[Token(Token = "0x600002B")]
		[Address(RVA = "0x5AC7AC", Offset = "0x5AC7AC", VA = "0x5AC7AC", Slot = "23")]
		public override void OnStartClient(NetworkClient lobbyClient)
		{
		}

		[Token(Token = "0x600002C")]
		[Address(RVA = "0x5ACBA0", Offset = "0x5ACBA0", VA = "0x5ACBA0", Slot = "16")]
		public override void OnClientConnect(NetworkConnection conn)
		{
		}

		[Token(Token = "0x600002D")]
		[Address(RVA = "0x5ACBE0", Offset = "0x5ACBE0", VA = "0x5ACBE0", Slot = "17")]
		public override void OnClientDisconnect(NetworkConnection conn)
		{
		}

		[Token(Token = "0x600002E")]
		[Address(RVA = "0x5ACC18", Offset = "0x5ACC18", VA = "0x5ACC18", Slot = "25")]
		public override void OnStopClient()
		{
		}

		[Token(Token = "0x600002F")]
		[Address(RVA = "0x5ACC44", Offset = "0x5ACC44", VA = "0x5ACC44", Slot = "20")]
		public override void OnClientSceneChanged(NetworkConnection conn)
		{
		}

		[Token(Token = "0x6000030")]
		[Address(RVA = "0x5ACD68", Offset = "0x5ACD68", VA = "0x5ACD68")]
		private void OnClientReadyToBegin(NetworkMessage netMsg)
		{
		}

		[Token(Token = "0x6000031")]
		[Address(RVA = "0x5AD2B0", Offset = "0x5AD2B0", VA = "0x5AD2B0")]
		private void OnClientAddPlayerFailedMessage(NetworkMessage netMsg)
		{
		}

		[Token(Token = "0x6000032")]
		[Address(RVA = "0x5AD390", Offset = "0x5AD390", VA = "0x5AD390", Slot = "69")]
		public virtual void OnLobbyStartHost()
		{
		}

		[Token(Token = "0x6000033")]
		[Address(RVA = "0x5AD394", Offset = "0x5AD394", VA = "0x5AD394", Slot = "70")]
		public virtual void OnLobbyStopHost()
		{
		}

		[Token(Token = "0x6000034")]
		[Address(RVA = "0x5AD398", Offset = "0x5AD398", VA = "0x5AD398", Slot = "71")]
		public virtual void OnLobbyStartServer()
		{
		}

		[Token(Token = "0x6000035")]
		[Address(RVA = "0x5AD39C", Offset = "0x5AD39C", VA = "0x5AD39C", Slot = "72")]
		public virtual void OnLobbyServerConnect(NetworkConnection conn)
		{
		}

		[Token(Token = "0x6000036")]
		[Address(RVA = "0x5AD3A0", Offset = "0x5AD3A0", VA = "0x5AD3A0", Slot = "73")]
		public virtual void OnLobbyServerDisconnect(NetworkConnection conn)
		{
		}

		[Token(Token = "0x6000037")]
		[Address(RVA = "0x5AD3A4", Offset = "0x5AD3A4", VA = "0x5AD3A4", Slot = "74")]
		public virtual void OnLobbyServerSceneChanged(string sceneName)
		{
		}

		[Token(Token = "0x6000038")]
		[Address(RVA = "0x5AD3A8", Offset = "0x5AD3A8", VA = "0x5AD3A8", Slot = "75")]
		public virtual GameObject OnLobbyServerCreateLobbyPlayer(NetworkConnection conn, short playerControllerId)
		{
			return null;
		}

		[Token(Token = "0x6000039")]
		[Address(RVA = "0x5AD3B0", Offset = "0x5AD3B0", VA = "0x5AD3B0", Slot = "76")]
		public virtual GameObject OnLobbyServerCreateGamePlayer(NetworkConnection conn, short playerControllerId)
		{
			return null;
		}

		[Token(Token = "0x600003A")]
		[Address(RVA = "0x5AD3B8", Offset = "0x5AD3B8", VA = "0x5AD3B8", Slot = "77")]
		public virtual void OnLobbyServerPlayerRemoved(NetworkConnection conn, short playerControllerId)
		{
		}

		[Token(Token = "0x600003B")]
		[Address(RVA = "0x5AD3BC", Offset = "0x5AD3BC", VA = "0x5AD3BC", Slot = "78")]
		public virtual bool OnLobbyServerSceneLoadedForPlayer(GameObject lobbyPlayer, GameObject gamePlayer)
		{
			return default(bool);
		}

		[Token(Token = "0x600003C")]
		[Address(RVA = "0x5AD3C4", Offset = "0x5AD3C4", VA = "0x5AD3C4", Slot = "79")]
		public virtual void OnLobbyServerPlayersReady()
		{
		}

		[Token(Token = "0x600003D")]
		[Address(RVA = "0x5AD3D8", Offset = "0x5AD3D8", VA = "0x5AD3D8", Slot = "80")]
		public virtual void OnLobbyClientEnter()
		{
		}

		[Token(Token = "0x600003E")]
		[Address(RVA = "0x5AD3DC", Offset = "0x5AD3DC", VA = "0x5AD3DC", Slot = "81")]
		public virtual void OnLobbyClientExit()
		{
		}

		[Token(Token = "0x600003F")]
		[Address(RVA = "0x5AD3E0", Offset = "0x5AD3E0", VA = "0x5AD3E0", Slot = "82")]
		public virtual void OnLobbyClientConnect(NetworkConnection conn)
		{
		}

		[Token(Token = "0x6000040")]
		[Address(RVA = "0x5AD3E4", Offset = "0x5AD3E4", VA = "0x5AD3E4", Slot = "83")]
		public virtual void OnLobbyClientDisconnect(NetworkConnection conn)
		{
		}

		[Token(Token = "0x6000041")]
		[Address(RVA = "0x5AD3E8", Offset = "0x5AD3E8", VA = "0x5AD3E8", Slot = "84")]
		public virtual void OnLobbyStartClient(NetworkClient lobbyClient)
		{
		}

		[Token(Token = "0x6000042")]
		[Address(RVA = "0x5AD3EC", Offset = "0x5AD3EC", VA = "0x5AD3EC", Slot = "85")]
		public virtual void OnLobbyStopClient()
		{
		}

		[Token(Token = "0x6000043")]
		[Address(RVA = "0x5AD3F0", Offset = "0x5AD3F0", VA = "0x5AD3F0", Slot = "86")]
		public virtual void OnLobbyClientSceneChanged(NetworkConnection conn)
		{
		}

		[Token(Token = "0x6000044")]
		[Address(RVA = "0x5AD3F4", Offset = "0x5AD3F4", VA = "0x5AD3F4", Slot = "87")]
		public virtual void OnLobbyClientAddPlayerFailed()
		{
		}

		[Token(Token = "0x6000045")]
		[Address(RVA = "0x5AD3F8", Offset = "0x5AD3F8", VA = "0x5AD3F8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000046")]
		[Address(RVA = "0x5AD648", Offset = "0x5AD648", VA = "0x5AD648")]
		public void TryToAddPlayer()
		{
		}
	}
	[Token(Token = "0x2000007")]
	[DisallowMultipleComponent]
	public class NATLobbyPlayer : NetworkBehaviour
	{
		[Token(Token = "0x4000012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public bool ShowLobbyGUI;

		[Token(Token = "0x4000013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private byte m_Slot;

		[Token(Token = "0x4000014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		private bool m_ReadyToBegin;

		[Token(Token = "0x17000009")]
		public byte slot
		{
			[Token(Token = "0x600004C")]
			[Address(RVA = "0x5AB4C0", Offset = "0x5AB4C0", VA = "0x5AB4C0")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600004D")]
			[Address(RVA = "0x5AB174", Offset = "0x5AB174", VA = "0x5AB174")]
			set
			{
			}
		}

		[Token(Token = "0x1700000A")]
		public bool readyToBegin
		{
			[Token(Token = "0x600004E")]
			[Address(RVA = "0x5AA0FC", Offset = "0x5AA0FC", VA = "0x5AA0FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600004F")]
			[Address(RVA = "0x5AA59C", Offset = "0x5AA59C", VA = "0x5AA59C")]
			set
			{
			}
		}

		[Token(Token = "0x600004B")]
		[Address(RVA = "0x5ADEB4", Offset = "0x5ADEB4", VA = "0x5ADEB4")]
		public NATLobbyPlayer()
		{
		}

		[Token(Token = "0x6000050")]
		[Address(RVA = "0x5ADF40", Offset = "0x5ADF40", VA = "0x5ADF40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000051")]
		[Address(RVA = "0x5ADFD4", Offset = "0x5ADFD4", VA = "0x5ADFD4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000052")]
		[Address(RVA = "0x5AE070", Offset = "0x5AE070", VA = "0x5AE070")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000053")]
		[Address(RVA = "0x5AE10C", Offset = "0x5AE10C", VA = "0x5AE10C", Slot = "13")]
		public override void OnStartClient()
		{
		}

		[Token(Token = "0x6000054")]
		[Address(RVA = "0x5AE2FC", Offset = "0x5AE2FC", VA = "0x5AE2FC")]
		public void SendReadyToBeginMessage()
		{
		}

		[Token(Token = "0x6000055")]
		[Address(RVA = "0x5AE52C", Offset = "0x5AE52C", VA = "0x5AE52C")]
		public void SendNotReadyToBeginMessage()
		{
		}

		[Token(Token = "0x6000056")]
		[Address(RVA = "0x5AE75C", Offset = "0x5AE75C", VA = "0x5AE75C")]
		public void SendSceneLoadedMessage()
		{
		}

		[Token(Token = "0x6000057")]
		[Address(RVA = "0x5AE960", Offset = "0x5AE960", VA = "0x5AE960")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000058")]
		[Address(RVA = "0x5AEB04", Offset = "0x5AEB04", VA = "0x5AEB04")]
		public void RemovePlayer()
		{
		}

		[Token(Token = "0x6000059")]
		[Address(RVA = "0x5AEC64", Offset = "0x5AEC64", VA = "0x5AEC64", Slot = "22")]
		public virtual void OnClientEnterLobby()
		{
		}

		[Token(Token = "0x600005A")]
		[Address(RVA = "0x5AEC68", Offset = "0x5AEC68", VA = "0x5AEC68", Slot = "23")]
		public virtual void OnClientExitLobby()
		{
		}

		[Token(Token = "0x600005B")]
		[Address(RVA = "0x5AEC6C", Offset = "0x5AEC6C", VA = "0x5AEC6C", Slot = "24")]
		public virtual void OnClientReady(bool readyState)
		{
		}

		[Token(Token = "0x600005C")]
		[Address(RVA = "0x5AEC70", Offset = "0x5AEC70", VA = "0x5AEC70", Slot = "8")]
		public override bool OnSerialize(NetworkWriter writer, bool initialState)
		{
			return default(bool);
		}

		[Token(Token = "0x600005D")]
		[Address(RVA = "0x5AED08", Offset = "0x5AED08", VA = "0x5AED08", Slot = "9")]
		public override void OnDeserialize(NetworkReader reader, bool initialState)
		{
		}

		[Token(Token = "0x600005E")]
		[Address(RVA = "0x5AED8C", Offset = "0x5AED8C", VA = "0x5AED8C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600005F")]
		[Address(RVA = "0x5AF3C0", Offset = "0x5AF3C0", VA = "0x5AF3C0")]
		private void UNetVersion()
		{
		}
	}
	[Token(Token = "0x2000008")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x232CCC", Offset = "0x232CCC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x232CCC", Offset = "0x232CCC")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x232CCC", Offset = "0x232CCC")]
	public class NATNetworkManagerHUD : NetworkManagerHUD
	{
		[Token(Token = "0x4000015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool showServer;

		[Token(Token = "0x6000060")]
		[Address(RVA = "0x5AF3C4", Offset = "0x5AF3C4", VA = "0x5AF3C4")]
		public NATNetworkManagerHUD()
		{
		}

		[Token(Token = "0x6000061")]
		[Address(RVA = "0x5AF3CC", Offset = "0x5AF3CC", VA = "0x5AF3CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000062")]
		[Address(RVA = "0x5AF434", Offset = "0x5AF434", VA = "0x5AF434")]
		private void Update()
		{
		}

		[Token(Token = "0x6000063")]
		[Address(RVA = "0x5AF728", Offset = "0x5AF728", VA = "0x5AF728")]
		private void OnGUI()
		{
		}
	}
}
[Token(Token = "0x2000009")]
internal class Connect
{
	[Token(Token = "0x6000064")]
	[Address(RVA = "0x49A9D8", Offset = "0x49A9D8", VA = "0x49A9D8")]
	public Connect()
	{
	}
}
[Token(Token = "0x200000A")]
internal class Disconnect
{
	[Token(Token = "0x6000065")]
	[Address(RVA = "0x49D3DC", Offset = "0x49D3DC", VA = "0x49D3DC")]
	public Disconnect()
	{
	}
}
[Token(Token = "0x200000B")]
internal class GetMatchName
{
	[Token(Token = "0x6000066")]
	[Address(RVA = "0x4B94A0", Offset = "0x4B94A0", VA = "0x4B94A0")]
	public GetMatchName()
	{
	}
}
[Token(Token = "0x200000C")]
internal class Host
{
	[Token(Token = "0x6000067")]
	[Address(RVA = "0x4B94A8", Offset = "0x4B94A8", VA = "0x4B94A8")]
	public Host()
	{
	}
}
[Token(Token = "0x200000D")]
internal class ListMatches
{
	[Token(Token = "0x6000068")]
	[Address(RVA = "0x6B28A8", Offset = "0x6B28A8", VA = "0x6B28A8")]
	public ListMatches()
	{
	}
}
namespace UnityEngine.Networking.Match
{
	[Token(Token = "0x200000E")]
	public class MatchInfoObject : Object
	{
		[Token(Token = "0x4000016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NetworkID networkId;

		[Token(Token = "0x4000017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NodeID hostNodeId;

		[Token(Token = "0x4000018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public new string name;

		[Token(Token = "0x4000019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int averageEloScore;

		[Token(Token = "0x400001A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxSize;

		[Token(Token = "0x400001B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int currentSize;

		[Token(Token = "0x400001C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isPrivate;

		[Token(Token = "0x400001D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, long> matchAttributes;

		[Token(Token = "0x400001E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public List<MatchInfoSnapshot.MatchInfoDirectConnectSnapshot> directConnectInfos;

		[Token(Token = "0x6000069")]
		[Address(RVA = "0xD1800C", Offset = "0xD1800C", VA = "0xD1800C")]
		public MatchInfoObject()
		{
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0xD18090", Offset = "0xD18090", VA = "0xD18090")]
		public MatchInfoObject(MatchInfoSnapshot snapshot)
		{
		}
	}
}
[Token(Token = "0x200000F")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x232D98", Offset = "0x232D98")]
public class EquipItems : MonoBehaviour
{
	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int[] itemIDs;

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x4ADAD0", Offset = "0x4ADAD0", VA = "0x4ADAD0")]
	public EquipItems()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x4ADAD8", Offset = "0x4ADAD8", VA = "0x4ADAD8")]
	private void Start()
	{
	}
}
[Token(Token = "0x2000010")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x232DE0", Offset = "0x232DE0")]
public class EquipRandomItem : MonoBehaviour
{
	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public InvEquipment equipment;

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x4ADE5C", Offset = "0x4ADE5C", VA = "0x4ADE5C")]
	public EquipRandomItem()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x4ADE64", Offset = "0x4ADE64", VA = "0x4ADE64")]
	private void OnClick()
	{
	}
}
[Token(Token = "0x2000011")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x232E2C", Offset = "0x232E2C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x232E2C", Offset = "0x232E2C")]
public class UICursor : MonoBehaviour
{
	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UICursor instance;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Camera uiCamera;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Transform mTrans;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private UISprite mSprite;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private INGUIAtlas mAtlas;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private string mSpriteName;

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x88958C", Offset = "0x88958C", VA = "0x88958C")]
	public UICursor()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x889594", Offset = "0x889594", VA = "0x889594")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x8895F8", Offset = "0x8895F8", VA = "0x8895F8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x889660", Offset = "0x889660", VA = "0x889660")]
	private void Start()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x88986C", Offset = "0x88986C", VA = "0x88986C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x889DBC", Offset = "0x889DBC", VA = "0x889DBC")]
	public static void Clear()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x889F38", Offset = "0x889F38", VA = "0x889F38")]
	public static void Set(INGUIAtlas atlas, string sprite)
	{
	}
}
[Token(Token = "0x2000012")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x232EDC", Offset = "0x232EDC")]
public class UIEquipmentSlot : UIItemSlot
{
	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public InvEquipment equipment;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public InvBaseItem.Slot slot;

	[Token(Token = "0x1700000B")]
	protected override InvGameItem observedItem
	{
		[Token(Token = "0x6000077")]
		[Address(RVA = "0x898D90", Offset = "0x898D90", VA = "0x898D90", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x898CEC", Offset = "0x898CEC", VA = "0x898CEC")]
	public UIEquipmentSlot()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x898E50", Offset = "0x898E50", VA = "0x898E50", Slot = "5")]
	protected override InvGameItem Replace(InvGameItem item)
	{
		return null;
	}
}
[Token(Token = "0x2000013")]
public abstract class UIItemSlot : MonoBehaviour
{
	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UISprite icon;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UIWidget background;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public UILabel label;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip grabSound;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public AudioClip placeSound;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip errorSound;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private InvGameItem mItem;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string mText;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static InvGameItem mDraggedItem;

	[Token(Token = "0x1700000C")]
	protected abstract InvGameItem observedItem
	{
		[Token(Token = "0x600007A")]
		get;
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x898CF0", Offset = "0x898CF0", VA = "0x898CF0")]
	protected UIItemSlot()
	{
	}

	[Token(Token = "0x600007B")]
	protected abstract InvGameItem Replace(InvGameItem item);

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x8AA6FC", Offset = "0x8AA6FC", VA = "0x8AA6FC")]
	private void OnTooltip(bool show)
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x8AB018", Offset = "0x8AB018", VA = "0x8AB018")]
	private void OnClick()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x8AB370", Offset = "0x8AB370", VA = "0x8AB370")]
	private void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x8AB120", Offset = "0x8AB120", VA = "0x8AB120")]
	private void OnDrop(GameObject go)
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x8AB238", Offset = "0x8AB238", VA = "0x8AB238")]
	private void UpdateCursor()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x8AB4B8", Offset = "0x8AB4B8", VA = "0x8AB4B8")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000014")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x232F28", Offset = "0x232F28")]
public class UIItemStorage : MonoBehaviour
{
	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int maxItemCount;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int maxRows;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int maxColumns;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject template;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UIWidget background;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int spacing;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int padding;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<InvGameItem> mItems;

	[Token(Token = "0x1700000D")]
	public List<InvGameItem> items
	{
		[Token(Token = "0x6000083")]
		[Address(RVA = "0x8AB920", Offset = "0x8AB920", VA = "0x8AB920")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x8AB870", Offset = "0x8AB870", VA = "0x8AB870")]
	public UIItemStorage()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x8AB9DC", Offset = "0x8AB9DC", VA = "0x8AB9DC")]
	public InvGameItem GetItem(int slot)
	{
		return null;
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x8ABAA0", Offset = "0x8ABAA0", VA = "0x8ABAA0")]
	public InvGameItem Replace(int slot, InvGameItem item)
	{
		return null;
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x8ABB7C", Offset = "0x8ABB7C", VA = "0x8ABB7C")]
	private void Start()
	{
	}
}
[Token(Token = "0x2000015")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x232F74", Offset = "0x232F74")]
public class UIStorageSlot : UIItemSlot
{
	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public UIItemStorage storage;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int slot;

	[Token(Token = "0x1700000E")]
	protected override InvGameItem observedItem
	{
		[Token(Token = "0x6000088")]
		[Address(RVA = "0x77FA2C", Offset = "0x77FA2C", VA = "0x77FA2C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x77FA24", Offset = "0x77FA24", VA = "0x77FA24")]
	public UIStorageSlot()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x77FAEC", Offset = "0x77FAEC", VA = "0x77FAEC", Slot = "5")]
	protected override InvGameItem Replace(InvGameItem item)
	{
		return null;
	}
}
[Token(Token = "0x2000016")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x232FC0", Offset = "0x232FC0")]
public class InvAttachmentPoint : MonoBehaviour
{
	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public InvBaseItem.Slot slot;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject mPrefab;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GameObject mChild;

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x6AD068", Offset = "0x6AD068", VA = "0x6AD068")]
	public InvAttachmentPoint()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x6AD070", Offset = "0x6AD070", VA = "0x6AD070")]
	public GameObject Attach(GameObject prefab)
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000017")]
public class InvBaseItem
{
	[Token(Token = "0x2000018")]
	public enum Slot
	{
		[Token(Token = "0x400004B")]
		None,
		[Token(Token = "0x400004C")]
		Weapon,
		[Token(Token = "0x400004D")]
		Shield,
		[Token(Token = "0x400004E")]
		Body,
		[Token(Token = "0x400004F")]
		Shoulders,
		[Token(Token = "0x4000050")]
		Bracers,
		[Token(Token = "0x4000051")]
		Boots,
		[Token(Token = "0x4000052")]
		Trinket,
		[Token(Token = "0x4000053")]
		_LastDoNotUse
	}

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int id16;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string name;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string description;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Slot slot;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int minItemLevel;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int maxItemLevel;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<InvStat> stats;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public GameObject attachment;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color color;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.Object iconAtlas;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public string iconName;

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x6AD3F4", Offset = "0x6AD3F4", VA = "0x6AD3F4")]
	public InvBaseItem()
	{
	}
}
[Token(Token = "0x2000019")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233010", Offset = "0x233010")]
[ExecuteInEditMode]
public class InvDatabase : MonoBehaviour
{
	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static InvDatabase[] mList;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool mIsDirty;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int databaseID;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<InvBaseItem> items;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public UnityEngine.Object iconAtlas;

	[Token(Token = "0x1700000F")]
	public static InvDatabase[] list
	{
		[Token(Token = "0x600008E")]
		[Address(RVA = "0x6AD58C", Offset = "0x6AD58C", VA = "0x6AD58C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x6AD500", Offset = "0x6AD500", VA = "0x6AD500")]
	public InvDatabase()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x6AD6E8", Offset = "0x6AD6E8", VA = "0x6AD6E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x6AD778", Offset = "0x6AD778", VA = "0x6AD778")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x6AD808", Offset = "0x6AD808", VA = "0x6AD808")]
	private InvBaseItem GetItem(int id16)
	{
		return null;
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x6AD8F8", Offset = "0x6AD8F8", VA = "0x6AD8F8")]
	private static InvDatabase GetDatabase(int dbID)
	{
		return null;
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x6ADA30", Offset = "0x6ADA30", VA = "0x6ADA30")]
	public static InvBaseItem FindByID(int id32)
	{
		return null;
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x6ADB18", Offset = "0x6ADB18", VA = "0x6ADB18")]
	public static InvBaseItem FindByName(string exact)
	{
		return null;
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x6ADD40", Offset = "0x6ADD40", VA = "0x6ADD40")]
	public static int FindItemID(InvBaseItem item)
	{
		return default(int);
	}
}
[Token(Token = "0x200001A")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23306C", Offset = "0x23306C")]
public class InvEquipment : MonoBehaviour
{
	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private InvGameItem[] mItems;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private InvAttachmentPoint[] mAttachments;

	[Token(Token = "0x17000010")]
	public InvGameItem[] equippedItems
	{
		[Token(Token = "0x6000098")]
		[Address(RVA = "0x6ADF3C", Offset = "0x6ADF3C", VA = "0x6ADF3C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x6ADF34", Offset = "0x6ADF34", VA = "0x6ADF34")]
	public InvEquipment()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x6ADF44", Offset = "0x6ADF44", VA = "0x6ADF44")]
	public InvGameItem Replace(InvBaseItem.Slot slot, InvGameItem item)
	{
		return null;
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x6AE54C", Offset = "0x6AE54C", VA = "0x6AE54C")]
	public InvGameItem Equip(InvGameItem item)
	{
		return null;
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x6AE690", Offset = "0x6AE690", VA = "0x6AE690")]
	public InvGameItem Unequip(InvGameItem item)
	{
		return null;
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x6AE6D8", Offset = "0x6AE6D8", VA = "0x6AE6D8")]
	public InvGameItem Unequip(InvBaseItem.Slot slot)
	{
		return null;
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x6AE6E0", Offset = "0x6AE6E0", VA = "0x6AE6E0")]
	public bool HasEquipped(InvGameItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x6AE770", Offset = "0x6AE770", VA = "0x6AE770")]
	public bool HasEquipped(InvBaseItem.Slot slot)
	{
		return default(bool);
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x6AE824", Offset = "0x6AE824", VA = "0x6AE824")]
	public InvGameItem GetItem(InvBaseItem.Slot slot)
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x200001B")]
public class InvGameItem
{
	[Token(Token = "0x200001C")]
	public enum Quality
	{
		[Token(Token = "0x4000061")]
		Broken,
		[Token(Token = "0x4000062")]
		Cursed,
		[Token(Token = "0x4000063")]
		Damaged,
		[Token(Token = "0x4000064")]
		Worn,
		[Token(Token = "0x4000065")]
		Sturdy,
		[Token(Token = "0x4000066")]
		Polished,
		[Token(Token = "0x4000067")]
		Improved,
		[Token(Token = "0x4000068")]
		Crafted,
		[Token(Token = "0x4000069")]
		Superior,
		[Token(Token = "0x400006A")]
		Enchanted,
		[Token(Token = "0x400006B")]
		Epic,
		[Token(Token = "0x400006C")]
		Legendary,
		[Token(Token = "0x400006D")]
		_LastDoNotUse
	}

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	private int mBaseItemID;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quality quality;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int itemLevel;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private InvBaseItem mBaseItem;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x238A44", Offset = "0x238A44")]
	private static Comparison<InvStat> <>f__mg$cache0;

	[Token(Token = "0x17000011")]
	public int baseItemID
	{
		[Token(Token = "0x60000A2")]
		[Address(RVA = "0x6AE688", Offset = "0x6AE688", VA = "0x6AE688")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000012")]
	public InvBaseItem baseItem
	{
		[Token(Token = "0x60000A3")]
		[Address(RVA = "0x6AE384", Offset = "0x6AE384", VA = "0x6AE384")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000013")]
	public string name
	{
		[Token(Token = "0x60000A4")]
		[Address(RVA = "0x6AE418", Offset = "0x6AE418", VA = "0x6AE418")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000014")]
	public float statMultiplier
	{
		[Token(Token = "0x60000A5")]
		[Address(RVA = "0x6AE8E8", Offset = "0x6AE8E8", VA = "0x6AE8E8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000015")]
	public Color color
	{
		[Token(Token = "0x60000A6")]
		[Address(RVA = "0x6AE9F4", Offset = "0x6AE9F4", VA = "0x6AE9F4")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x6AE878", Offset = "0x6AE878", VA = "0x6AE878")]
	public InvGameItem(int id)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x6AE8AC", Offset = "0x6AE8AC", VA = "0x6AE8AC")]
	public InvGameItem(int id, InvBaseItem bi)
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x6AEB7C", Offset = "0x6AEB7C", VA = "0x6AEB7C")]
	public List<InvStat> CalculateStats()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x200001D")]
public class InvStat
{
	[Token(Token = "0x200001E")]
	public enum Identifier
	{
		[Token(Token = "0x4000072")]
		Strength,
		[Token(Token = "0x4000073")]
		Constitution,
		[Token(Token = "0x4000074")]
		Agility,
		[Token(Token = "0x4000075")]
		Intelligence,
		[Token(Token = "0x4000076")]
		Damage,
		[Token(Token = "0x4000077")]
		Crit,
		[Token(Token = "0x4000078")]
		Armor,
		[Token(Token = "0x4000079")]
		Health,
		[Token(Token = "0x400007A")]
		Mana,
		[Token(Token = "0x400007B")]
		Other
	}

	[Token(Token = "0x200001F")]
	public enum Modifier
	{
		[Token(Token = "0x400007D")]
		Added,
		[Token(Token = "0x400007E")]
		Percent
	}

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Identifier id;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Modifier modifier;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int amount;

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x6AEF70", Offset = "0x6AEF70", VA = "0x6AEF70")]
	public InvStat()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x6AEF78", Offset = "0x6AEF78", VA = "0x6AEF78")]
	public static string GetName(Identifier i)
	{
		return null;
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x6AF02C", Offset = "0x6AF02C", VA = "0x6AF02C")]
	public static string GetDescription(Identifier i)
	{
		return null;
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x6AF14C", Offset = "0x6AF14C", VA = "0x6AF14C")]
	public static int CompareArmor(InvStat a, InvStat b)
	{
		return default(int);
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x6AF218", Offset = "0x6AF218", VA = "0x6AF218")]
	public static int CompareWeapon(InvStat a, InvStat b)
	{
		return default(int);
	}
}
[Token(Token = "0x2000020")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2330B0", Offset = "0x2330B0")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2330B0", Offset = "0x2330B0")]
public class ChatInput : MonoBehaviour
{
	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UITextList textList;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool fillWithDummyData;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private UIInput mInput;

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x551DA4", Offset = "0x551DA4", VA = "0x551DA4")]
	public ChatInput()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x551DAC", Offset = "0x551DAC", VA = "0x551DAC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x55212C", Offset = "0x55212C", VA = "0x55212C")]
	public void OnSubmit()
	{
	}
}
[Token(Token = "0x2000021")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x233164", Offset = "0x233164")]
public class DownloadTexture : MonoBehaviour
{
	[Token(Token = "0x2000022")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2331DC", Offset = "0x2331DC")]
	private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal UnityWebRequest <www>__0;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal DownloadTexture $this;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x17000016")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60000B5")]
			[Address(RVA = "0x49EB94", Offset = "0x49EB94", VA = "0x49EB94", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000B6")]
			[Address(RVA = "0x49EB9C", Offset = "0x49EB9C", VA = "0x49EB9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x49E884", Offset = "0x49E884", VA = "0x49E884")]
		[DebuggerHidden]
		public <Start>c__Iterator0()
		{
		}

		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x49E95C", Offset = "0x49E95C", VA = "0x49E95C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x49EBA4", Offset = "0x49EBA4", VA = "0x49EBA4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x49EBB8", Offset = "0x49EBB8", VA = "0x49EBB8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string url;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool pixelPerfect;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Texture2D mTex;

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x49E78C", Offset = "0x49E78C", VA = "0x49E78C")]
	public DownloadTexture()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x49E800", Offset = "0x49E800", VA = "0x49E800")]
	[DebuggerHidden]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x49E88C", Offset = "0x49E88C", VA = "0x49E88C")]
	private void OnDestroy()
	{
	}
}
[Token(Token = "0x2000023")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2331EC", Offset = "0x2331EC")]
public class ExampleDragDropItem : UIDragDropItem
{
	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject prefab;

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x4B18CC", Offset = "0x4B18CC", VA = "0x4B18CC")]
	public ExampleDragDropItem()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x4B1950", Offset = "0x4B1950", VA = "0x4B1950", Slot = "18")]
	protected override void OnDragDropRelease(GameObject surface)
	{
	}
}
[Token(Token = "0x2000024")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233244", Offset = "0x233244")]
public class ExampleDragDropSurface : MonoBehaviour
{
	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool rotatePlacedObject;

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x4B1D70", Offset = "0x4B1D70", VA = "0x4B1D70")]
	public ExampleDragDropSurface()
	{
	}
}
[Token(Token = "0x2000025")]
public class LagPosition : MonoBehaviour
{
	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 speed;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool ignoreTimeScale;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Transform mTrans;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 mRelative;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 mAbsolute;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool mStarted;

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x6B03BC", Offset = "0x6B03BC", VA = "0x6B03BC")]
	public LagPosition()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x6B041C", Offset = "0x6B041C", VA = "0x6B041C")]
	public void OnRepositionEnd()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x6B0428", Offset = "0x6B0428", VA = "0x6B0428")]
	private void Interpolate(float delta)
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x6B0700", Offset = "0x6B0700", VA = "0x6B0700")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x6B071C", Offset = "0x6B071C", VA = "0x6B071C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x6B07A8", Offset = "0x6B07A8", VA = "0x6B07A8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x6B072C", Offset = "0x6B072C", VA = "0x6B072C")]
	public void ResetPosition()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x6B07B4", Offset = "0x6B07B4", VA = "0x6B07B4")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000026")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2332A0", Offset = "0x2332A0")]
public class LagRotation : MonoBehaviour
{
	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float speed;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool ignoreTimeScale;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Transform mTrans;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion mRelative;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Quaternion mAbsolute;

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x6B07F0", Offset = "0x6B07F0", VA = "0x6B07F0")]
	public LagRotation()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x6B0804", Offset = "0x6B0804", VA = "0x6B0804")]
	public void OnRepositionEnd()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x6B0810", Offset = "0x6B0810", VA = "0x6B0810")]
	private void Interpolate(float delta)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x6B0A4C", Offset = "0x6B0A4C", VA = "0x6B0A4C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x6B0ADC", Offset = "0x6B0ADC", VA = "0x6B0ADC")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000027")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2332E8", Offset = "0x2332E8")]
public class LoadLevelOnClick : MonoBehaviour
{
	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string levelName;

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x6B28B0", Offset = "0x6B28B0", VA = "0x6B28B0")]
	public LoadLevelOnClick()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x6B28B8", Offset = "0x6B28B8", VA = "0x6B28B8")]
	private void OnClick()
	{
	}
}
[Token(Token = "0x2000028")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233338", Offset = "0x233338")]
public class LookAtTarget : MonoBehaviour
{
	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int level;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform target;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float speed;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform mTrans;

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x6B9734", Offset = "0x6B9734", VA = "0x6B9734")]
	public LookAtTarget()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x6B9744", Offset = "0x6B9744", VA = "0x6B9744")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x6B9760", Offset = "0x6B9760", VA = "0x6B9760")]
	private void LateUpdate()
	{
	}
}
[Token(Token = "0x2000029")]
public class OpenURLOnClick : MonoBehaviour
{
	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x45F5F0", Offset = "0x45F5F0", VA = "0x45F5F0")]
	public OpenURLOnClick()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x45F5F8", Offset = "0x45F5F8", VA = "0x45F5F8")]
	private void OnClick()
	{
	}
}
[Token(Token = "0x200002A")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233384", Offset = "0x233384")]
public class PanWithMouse : MonoBehaviour
{
	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector2 degrees;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float range;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform mTrans;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Quaternion mStart;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector2 mRot;

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x460950", Offset = "0x460950", VA = "0x460950")]
	public PanWithMouse()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x460A30", Offset = "0x460A30", VA = "0x460A30")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x460A8C", Offset = "0x460A8C", VA = "0x460A8C")]
	private void Update()
	{
	}
}
[Token(Token = "0x200002B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2333D0", Offset = "0x2333D0")]
public class PlayIdleAnimations : MonoBehaviour
{
	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Animation mAnim;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AnimationClip mIdle;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private List<AnimationClip> mBreaks;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float mNextBreak;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int mLastIndex;

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x461A10", Offset = "0x461A10", VA = "0x461A10")]
	public PlayIdleAnimations()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x461A9C", Offset = "0x461A9C", VA = "0x461A9C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x4621FC", Offset = "0x4621FC", VA = "0x4621FC")]
	private void Update()
	{
	}
}
[Token(Token = "0x200002C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x233420", Offset = "0x233420")]
public class SetColorPickerColor : MonoBehaviour
{
	[NonSerialized]
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private UIWidget mWidget;

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x46F3C0", Offset = "0x46F3C0", VA = "0x46F3C0")]
	public SetColorPickerColor()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x46F3C8", Offset = "0x46F3C8", VA = "0x46F3C8")]
	public void SetToCurrent()
	{
	}
}
[Token(Token = "0x200002D")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233498", Offset = "0x233498")]
public class Spin : MonoBehaviour
{
	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 rotationsPerSecond;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool ignoreTimeScale;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Rigidbody mRb;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform mTrans;

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x57F1F8", Offset = "0x57F1F8", VA = "0x57F1F8")]
	public Spin()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x57F258", Offset = "0x57F258", VA = "0x57F258")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x57F2D0", Offset = "0x57F2D0", VA = "0x57F2D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x57F63C", Offset = "0x57F63C", VA = "0x57F63C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x57F390", Offset = "0x57F390", VA = "0x57F390")]
	public void ApplyDelta(float delta)
	{
	}
}
[Token(Token = "0x200002E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2334D8", Offset = "0x2334D8")]
public class SpinWithMouse : MonoBehaviour
{
	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform target;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float speed;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Transform mTrans;

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x57F6E4", Offset = "0x57F6E4", VA = "0x57F6E4")]
	public SpinWithMouse()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x57F6F4", Offset = "0x57F6F4", VA = "0x57F6F4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x57F710", Offset = "0x57F710", VA = "0x57F710")]
	private void OnDrag(Vector2 delta)
	{
	}
}
[Token(Token = "0x200002F")]
public class Tutorial5 : MonoBehaviour
{
	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x591E30", Offset = "0x591E30", VA = "0x591E30")]
	public Tutorial5()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x591E38", Offset = "0x591E38", VA = "0x591E38")]
	public void SetDurationToCurrentProgress()
	{
	}
}
[Token(Token = "0x2000030")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233524", Offset = "0x233524")]
public class UISliderColors : MonoBehaviour
{
	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UISprite sprite;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color[] colors;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private UIProgressBar mBar;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UIBasicSprite mSprite;

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x77612C", Offset = "0x77612C", VA = "0x77612C")]
	public UISliderColors()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x776264", Offset = "0x776264", VA = "0x776264")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x7762F0", Offset = "0x7762F0", VA = "0x7762F0")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000031")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23356C", Offset = "0x23356C")]
public class WindowAutoYaw : MonoBehaviour
{
	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int updateOrder;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Camera uiCamera;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float yawAmount;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform mTrans;

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x8ECA7C", Offset = "0x8ECA7C", VA = "0x8ECA7C")]
	public WindowAutoYaw()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x8ECA90", Offset = "0x8ECA90", VA = "0x8ECA90")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x8ECB4C", Offset = "0x8ECB4C", VA = "0x8ECB4C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x8ECC5C", Offset = "0x8ECC5C", VA = "0x8ECC5C")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000032")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2335B8", Offset = "0x2335B8")]
public class WindowDragTilt : MonoBehaviour
{
	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int updateOrder;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float degrees;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3 mLastPos;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform mTrans;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mAngle;

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x8ECDE4", Offset = "0x8ECDE4", VA = "0x8ECDE4")]
	public WindowDragTilt()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x8ECDF8", Offset = "0x8ECDF8", VA = "0x8ECDF8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x8ECE4C", Offset = "0x8ECE4C", VA = "0x8ECE4C")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000033")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x233604", Offset = "0x233604")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233604", Offset = "0x233604")]
public class EnvelopContent : MonoBehaviour
{
	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform targetRoot;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int padLeft;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int padRight;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int padBottom;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int padTop;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool ignoreDisabled;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool mStarted;

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x4AD740", Offset = "0x4AD740", VA = "0x4AD740")]
	public EnvelopContent()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x4AD750", Offset = "0x4AD750", VA = "0x4AD750")]
	private void Start()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x4ADAC0", Offset = "0x4ADAC0", VA = "0x4ADAC0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x4AD75C", Offset = "0x4AD75C", VA = "0x4AD75C")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23C2A8", Offset = "0x23C2A8")]
	public void Execute()
	{
	}
}
[Token(Token = "0x2000034")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2336C0", Offset = "0x2336C0")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2336C0", Offset = "0x2336C0")]
public class LanguageSelection : MonoBehaviour
{
	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private UIPopupList mList;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mStarted;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x238A54", Offset = "0x238A54")]
	private static EventDelegate.Callback <>f__am$cache0;

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x6B0B18", Offset = "0x6B0B18", VA = "0x6B0B18")]
	public LanguageSelection()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x6B0B20", Offset = "0x6B0B20", VA = "0x6B0B20")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x6B0B88", Offset = "0x6B0B88", VA = "0x6B0B88")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x6B0F24", Offset = "0x6B0F24", VA = "0x6B0F24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x6B0CB4", Offset = "0x6B0CB4", VA = "0x6B0CB4")]
	public void Refresh()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x6B1198", Offset = "0x6B1198", VA = "0x6B1198")]
	private void OnLocalize()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x6B119C", Offset = "0x6B119C", VA = "0x6B119C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23C2DC", Offset = "0x23C2DC")]
	private static void <Start>m__0()
	{
	}
}
[Token(Token = "0x2000035")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x23377C", Offset = "0x23377C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23377C", Offset = "0x23377C")]
public class TypewriterEffect : MonoBehaviour
{
	[Token(Token = "0x2000036")]
	private struct FadeEntry
	{
		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int index;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string text;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float alpha;
	}

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TypewriterEffect current;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int charsPerSecond;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float fadeInTime;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float delayOnPeriod;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delayOnNewLine;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UIScrollView scrollView;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool keepFullDimensions;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public List<EventDelegate> onFinished;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UILabel mLabel;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private string mFullText;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int mCurrentOffset;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float mNextChar;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool mReset;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool mActive;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private BetterList<FadeEntry> mFade;

	[Token(Token = "0x17000018")]
	public bool isActive
	{
		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x59B0A8", Offset = "0x59B0A8", VA = "0x59B0A8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x59AF90", Offset = "0x59AF90", VA = "0x59AF90")]
	public TypewriterEffect()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x59B0B0", Offset = "0x59B0B0", VA = "0x59B0B0")]
	public void ResetToBeginning()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x59B0E0", Offset = "0x59B0E0", VA = "0x59B0E0")]
	public void Finish()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x59BEE4", Offset = "0x59BEE4", VA = "0x59BEE4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x59BEF0", Offset = "0x59BEF0", VA = "0x59BEF0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x59B2A8", Offset = "0x59B2A8", VA = "0x59B2A8")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000037")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233838", Offset = "0x233838")]
public class UIButton : UIButtonColor
{
	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIButton current;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool dragHighlight;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public string hoverSprite;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string pressedSprite;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public string disabledSprite;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Sprite hoverSprite2D;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Sprite pressedSprite2D;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Sprite disabledSprite2D;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool pixelSnap;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public List<EventDelegate> onClick;

	[NonSerialized]
	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private UISprite mSprite;

	[NonSerialized]
	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private UI2DSprite mSprite2D;

	[NonSerialized]
	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private string mNormalSprite;

	[NonSerialized]
	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Sprite mNormalSprite2D;

	[Token(Token = "0x17000019")]
	public override bool isEnabled
	{
		[Token(Token = "0x60000FF")]
		[Address(RVA = "0xEF98C0", Offset = "0xEF98C0", VA = "0xEF98C0", Slot = "4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000100")]
		[Address(RVA = "0xEF98DC", Offset = "0xEF98DC", VA = "0xEF98DC", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public string normalSprite
	{
		[Token(Token = "0x6000101")]
		[Address(RVA = "0xEF992C", Offset = "0xEF992C", VA = "0xEF992C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000102")]
		[Address(RVA = "0xEF9960", Offset = "0xEF9960", VA = "0xEF9960")]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public Sprite normalSprite2D
	{
		[Token(Token = "0x6000103")]
		[Address(RVA = "0xEF9CE0", Offset = "0xEF9CE0", VA = "0xEF9CE0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000104")]
		[Address(RVA = "0xEF9D14", Offset = "0xEF9D14", VA = "0xEF9D14")]
		set
		{
		}
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xEF975C", Offset = "0xEF975C", VA = "0xEF975C")]
	public UIButton()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xEFA054", Offset = "0xEFA054", VA = "0xEFA054", Slot = "6")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xEFA5CC", Offset = "0xEFA5CC", VA = "0xEFA5CC", Slot = "7")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xEFA9EC", Offset = "0xEFA9EC", VA = "0xEFA9EC", Slot = "11")]
	protected override void OnDragOver()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xEFAC08", Offset = "0xEFAC08", VA = "0xEFAC08", Slot = "12")]
	protected override void OnDragOut()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xEFAE24", Offset = "0xEFAE24", VA = "0xEFAE24", Slot = "14")]
	protected virtual void OnClick()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xEFAFE0", Offset = "0xEFAFE0", VA = "0xEFAFE0", Slot = "13")]
	public override void SetState(State state, bool immediate)
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xEF9B44", Offset = "0xEF9B44", VA = "0xEF9B44")]
	protected void SetSprite(string sp)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xEF9EB4", Offset = "0xEF9EB4", VA = "0xEF9EB4")]
	protected void SetSprite(Sprite sp)
	{
	}
}
[Token(Token = "0x2000038")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23387C", Offset = "0x23387C")]
public class UIButtonActivate : MonoBehaviour
{
	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject target;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool state;

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xEFB264", Offset = "0xEFB264", VA = "0xEFB264")]
	public UIButtonActivate()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xEFB274", Offset = "0xEFB274", VA = "0xEFB274")]
	private void OnClick()
	{
	}
}
[Token(Token = "0x2000039")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2338CC", Offset = "0x2338CC")]
public class UIButtonColor : UIWidgetContainer
{
	[Token(Token = "0x200003A")]
	[DoNotObfuscateNGUI]
	public enum State
	{
		[Token(Token = "0x40000F2")]
		Normal,
		[Token(Token = "0x40000F3")]
		Hover,
		[Token(Token = "0x40000F4")]
		Pressed,
		[Token(Token = "0x40000F5")]
		Disabled
	}

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject tweenTarget;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color hover;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color pressed;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color disabledColor;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float duration;

	[NonSerialized]
	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected Color mStartingColor;

	[NonSerialized]
	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected Color mDefaultColor;

	[NonSerialized]
	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected bool mInitDone;

	[NonSerialized]
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected UIWidget mWidget;

	[NonSerialized]
	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected State mState;

	[Token(Token = "0x1700001C")]
	public State state
	{
		[Token(Token = "0x6000110")]
		[Address(RVA = "0xEF98D4", Offset = "0xEF98D4", VA = "0xEF98D4")]
		get
		{
			return default(State);
		}
		[Token(Token = "0x6000111")]
		[Address(RVA = "0xEF9918", Offset = "0xEF9918", VA = "0xEF9918")]
		set
		{
		}
	}

	[Token(Token = "0x1700001D")]
	public Color defaultColor
	{
		[Token(Token = "0x6000112")]
		[Address(RVA = "0xEFB354", Offset = "0xEFB354", VA = "0xEFB354")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000113")]
		[Address(RVA = "0xEFB394", Offset = "0xEFB394", VA = "0xEFB394")]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	public virtual bool isEnabled
	{
		[Token(Token = "0x6000114")]
		[Address(RVA = "0xEFB408", Offset = "0xEFB408", VA = "0xEFB408", Slot = "4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000115")]
		[Address(RVA = "0xEFB410", Offset = "0xEFB410", VA = "0xEFB410", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xEF97E4", Offset = "0xEF97E4", VA = "0xEF97E4")]
	public UIButtonColor()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xEFB418", Offset = "0xEFB418", VA = "0xEFB418")]
	public void ResetDefaultColor()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xEFB43C", Offset = "0xEFB43C", VA = "0xEFB43C")]
	public void CacheDefaultColor()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xEFB458", Offset = "0xEFB458", VA = "0xEFB458")]
	private void Start()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xEFA220", Offset = "0xEFA220", VA = "0xEFA220", Slot = "6")]
	protected virtual void OnInit()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xEFB4C0", Offset = "0xEFB4C0", VA = "0xEFB4C0", Slot = "7")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xEFB7F4", Offset = "0xEFB7F4", VA = "0xEFB7F4", Slot = "8")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xEFB9B0", Offset = "0xEFB9B0", VA = "0xEFB9B0", Slot = "9")]
	protected virtual void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xEFBAA4", Offset = "0xEFBAA4", VA = "0xEFBAA4", Slot = "10")]
	protected virtual void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xEFAB18", Offset = "0xEFAB18", VA = "0xEFAB18", Slot = "11")]
	protected virtual void OnDragOver()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xEFAD34", Offset = "0xEFAD34", VA = "0xEFAD34", Slot = "12")]
	protected virtual void OnDragOut()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xEFB208", Offset = "0xEFB208", VA = "0xEFB208", Slot = "13")]
	public virtual void SetState(State state, bool instant)
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xEFC0CC", Offset = "0xEFC0CC", VA = "0xEFC0CC")]
	public void UpdateColor(bool instant)
	{
	}
}
[Token(Token = "0x200003B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23393C", Offset = "0x23393C")]
[ExecuteInEditMode]
public class UIButtonKeys : UIKeyNavigation
{
	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public UIButtonKeys selectOnClick;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UIButtonKeys selectOnUp;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public UIButtonKeys selectOnDown;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UIButtonKeys selectOnLeft;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public UIButtonKeys selectOnRight;

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xEFC2D8", Offset = "0xEFC2D8", VA = "0xEFC2D8")]
	public UIButtonKeys()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xEFC35C", Offset = "0xEFC35C", VA = "0xEFC35C", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xEFC37C", Offset = "0xEFC37C", VA = "0xEFC37C")]
	public void Upgrade()
	{
	}
}
[Token(Token = "0x200003C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2339A4", Offset = "0x2339A4")]
public class UIButtonMessage : MonoBehaviour
{
	[Token(Token = "0x200003D")]
	[DoNotObfuscateNGUI]
	public enum Trigger
	{
		[Token(Token = "0x4000101")]
		OnClick,
		[Token(Token = "0x4000102")]
		OnMouseOver,
		[Token(Token = "0x4000103")]
		OnMouseOut,
		[Token(Token = "0x4000104")]
		OnPress,
		[Token(Token = "0x4000105")]
		OnRelease,
		[Token(Token = "0x4000106")]
		OnDoubleClick
	}

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject target;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string functionName;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Trigger trigger;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool includeChildren;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool mStarted;

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xEFC8E0", Offset = "0xEFC8E0", VA = "0xEFC8E0")]
	public UIButtonMessage()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xEFC8E8", Offset = "0xEFC8E8", VA = "0xEFC8E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xEFC8F4", Offset = "0xEFC8F4", VA = "0xEFC8F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xEFC99C", Offset = "0xEFC99C", VA = "0xEFC99C")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xEFCC24", Offset = "0xEFCC24", VA = "0xEFCC24")]
	private void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xEFCC74", Offset = "0xEFCC74", VA = "0xEFCC74")]
	private void OnSelect(bool isSelected)
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xEFCD28", Offset = "0xEFCD28", VA = "0xEFCD28")]
	private void OnClick()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xEFCD5C", Offset = "0xEFCD5C", VA = "0xEFCD5C")]
	private void OnDoubleClick()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xEFC9EC", Offset = "0xEFC9EC", VA = "0xEFC9EC")]
	private void Send()
	{
	}
}
[Token(Token = "0x200003E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233A0C", Offset = "0x233A0C")]
public class UIButtonOffset : MonoBehaviour
{
	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform tweenTarget;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 hover;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 pressed;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float duration;

	[NonSerialized]
	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 mPos;

	[NonSerialized]
	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool mStarted;

	[NonSerialized]
	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool mPressed;

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xEFCD90", Offset = "0xEFCD90", VA = "0xEFCD90")]
	public UIButtonOffset()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xEFCE70", Offset = "0xEFCE70", VA = "0xEFCE70")]
	private void Start()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xEFCF68", Offset = "0xEFCF68", VA = "0xEFCF68")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xEFD180", Offset = "0xEFD180", VA = "0xEFD180")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xEFD314", Offset = "0xEFD314", VA = "0xEFD314")]
	private void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xEFD010", Offset = "0xEFD010", VA = "0xEFD010")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xEFD538", Offset = "0xEFD538", VA = "0xEFD538")]
	private void OnDragOver()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xEFD66C", Offset = "0xEFD66C", VA = "0xEFD66C")]
	private void OnDragOut()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xEFD6E0", Offset = "0xEFD6E0", VA = "0xEFD6E0")]
	private void OnSelect(bool isSelected)
	{
	}
}
[Token(Token = "0x200003F")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233A58", Offset = "0x233A58")]
public class UIButtonRotation : MonoBehaviour
{
	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform tweenTarget;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 hover;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 pressed;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float duration;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion mRot;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool mStarted;

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xEFD794", Offset = "0xEFD794", VA = "0xEFD794")]
	public UIButtonRotation()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xEFD85C", Offset = "0xEFD85C", VA = "0xEFD85C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xEFD95C", Offset = "0xEFD95C", VA = "0xEFD95C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xEFDBA4", Offset = "0xEFDBA4", VA = "0xEFDBA4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xEFDD3C", Offset = "0xEFDD3C", VA = "0xEFDD3C")]
	private void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xEFDA04", Offset = "0xEFDA04", VA = "0xEFDA04")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xEFDFB4", Offset = "0xEFDFB4", VA = "0xEFDFB4")]
	private void OnSelect(bool isSelected)
	{
	}
}
[Token(Token = "0x2000040")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233AA8", Offset = "0x233AA8")]
public class UIButtonScale : MonoBehaviour
{
	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform tweenTarget;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 hover;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 pressed;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float duration;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 mScale;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool mStarted;

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xEFE068", Offset = "0xEFE068", VA = "0xEFE068")]
	public UIButtonScale()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xEFE108", Offset = "0xEFE108", VA = "0xEFE108")]
	private void Start()
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xEFE200", Offset = "0xEFE200", VA = "0xEFE200")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xEFE418", Offset = "0xEFE418", VA = "0xEFE418")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xEFE5AC", Offset = "0xEFE5AC", VA = "0xEFE5AC")]
	private void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xEFE2A8", Offset = "0xEFE2A8", VA = "0xEFE2A8")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xEFE7CC", Offset = "0xEFE7CC", VA = "0xEFE7CC")]
	private void OnSelect(bool isSelected)
	{
	}
}
[Token(Token = "0x2000041")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233AF4", Offset = "0x233AF4")]
public class UICenterOnChild : MonoBehaviour
{
	[Token(Token = "0x2000042")]
	public delegate void OnCenterCallback(GameObject centeredObject);

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float springStrength;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float nextPageThreshold;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public SpringPanel.OnFinished onFinished;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OnCenterCallback onCenter;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private UIScrollView mScrollView;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject mCenteredObject;

	[Token(Token = "0x1700001F")]
	public GameObject centeredObject
	{
		[Token(Token = "0x6000146")]
		[Address(RVA = "0x884CA8", Offset = "0x884CA8", VA = "0x884CA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x884C98", Offset = "0x884C98", VA = "0x884C98")]
	public UICenterOnChild()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x884CB0", Offset = "0x884CB0", VA = "0x884CB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x886114", Offset = "0x886114", VA = "0x886114")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x8861C4", Offset = "0x8861C4", VA = "0x8861C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x886270", Offset = "0x886270", VA = "0x886270")]
	private void OnDragFinished()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x886298", Offset = "0x886298", VA = "0x886298")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x884CB4", Offset = "0x884CB4", VA = "0x884CB4")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23C2EC", Offset = "0x23C2EC")]
	public void Recenter()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x8867C0", Offset = "0x8867C0", VA = "0x8867C0")]
	private void CenterOn(Transform target, Vector3 panelCenter)
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x886F90", Offset = "0x886F90", VA = "0x886F90")]
	public void CenterOn(Transform target)
	{
	}
}
[Token(Token = "0x2000043")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233B50", Offset = "0x233B50")]
public class UICenterOnClick : MonoBehaviour
{
	[Token(Token = "0x6000153")]
	[Address(RVA = "0x887224", Offset = "0x887224", VA = "0x887224")]
	public UICenterOnClick()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x88722C", Offset = "0x88722C", VA = "0x88722C")]
	private void OnClick()
	{
	}
}
[Token(Token = "0x2000044")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233BAC", Offset = "0x233BAC")]
[ExecuteInEditMode]
public class UIDragCamera : MonoBehaviour
{
	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UIDraggableCamera draggableCamera;

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x88A16C", Offset = "0x88A16C", VA = "0x88A16C")]
	public UIDragCamera()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x88A174", Offset = "0x88A174", VA = "0x88A174")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x88A260", Offset = "0x88A260", VA = "0x88A260")]
	private void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x88A578", Offset = "0x88A578", VA = "0x88A578")]
	private void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x88AA78", Offset = "0x88AA78", VA = "0x88AA78")]
	private void OnScroll(float delta)
	{
	}
}
[Token(Token = "0x2000045")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233C0C", Offset = "0x233C0C")]
public class UIDragDropContainer : MonoBehaviour
{
	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform reparentTarget;

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x88ACFC", Offset = "0x88ACFC", VA = "0x88ACFC")]
	public UIDragDropContainer()
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x88AD04", Offset = "0x88AD04", VA = "0x88AD04", Slot = "4")]
	protected virtual void Start()
	{
	}
}
[Token(Token = "0x2000046")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233C64", Offset = "0x233C64")]
public class UIDragDropItem : MonoBehaviour
{
	[Token(Token = "0x2000047")]
	[DoNotObfuscateNGUI]
	public enum Restriction
	{
		[Token(Token = "0x4000137")]
		None,
		[Token(Token = "0x4000138")]
		Horizontal,
		[Token(Token = "0x4000139")]
		Vertical,
		[Token(Token = "0x400013A")]
		PressAndHold
	}

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x238A64", Offset = "0x238A64")]
	public Restriction restriction;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x238A98", Offset = "0x238A98")]
	public bool clickToDrag;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x238ACC", Offset = "0x238ACC")]
	public bool cloneOnDrag;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x238B00", Offset = "0x238B00")]
	public bool interactable;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x238B34", Offset = "0x238B34")]
	public float pressAndHoldDelay;

	[NonSerialized]
	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Transform mTrans;

	[NonSerialized]
	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected Transform mParent;

	[NonSerialized]
	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Collider mCollider;

	[NonSerialized]
	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected Collider2D mCollider2D;

	[NonSerialized]
	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected UIButton mButton;

	[NonSerialized]
	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected UIRoot mRoot;

	[NonSerialized]
	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected UIGrid mGrid;

	[NonSerialized]
	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected UITable mTable;

	[NonSerialized]
	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected float mDragStartTime;

	[NonSerialized]
	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected UIDragScrollView mDragScrollView;

	[NonSerialized]
	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected bool mPressed;

	[NonSerialized]
	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	protected bool mDragging;

	[NonSerialized]
	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected UICamera.MouseOrTouch mTouch;

	[NonSerialized]
	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<UIDragDropItem> draggedItems;

	[NonSerialized]
	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int mIgnoreClick;

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x88ADA8", Offset = "0x88ADA8", VA = "0x88ADA8")]
	public UIDragDropItem()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x88ADC0", Offset = "0x88ADC0", VA = "0x88ADC0")]
	public static bool IsDragged(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x88AFB8", Offset = "0x88AFB8", VA = "0x88AFB8", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x88B08C", Offset = "0x88B08C", VA = "0x88B08C", Slot = "5")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x88B090", Offset = "0x88B090", VA = "0x88B090", Slot = "6")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x88B40C", Offset = "0x88B40C", VA = "0x88B40C", Slot = "7")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x88B490", Offset = "0x88B490", VA = "0x88B490", Slot = "8")]
	protected virtual void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x88B64C", Offset = "0x88B64C", VA = "0x88B64C", Slot = "9")]
	protected virtual void OnClick()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x88BB70", Offset = "0x88BB70", VA = "0x88BB70")]
	protected void OnGlobalPress(GameObject go, bool state)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x88BF70", Offset = "0x88BF70", VA = "0x88BF70")]
	protected void OnGlobalClick(GameObject go)
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x88C384", Offset = "0x88C384", VA = "0x88C384", Slot = "10")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x88C3F8", Offset = "0x88C3F8", VA = "0x88C3F8", Slot = "11")]
	protected virtual void OnDragStart()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x88C5B8", Offset = "0x88C5B8", VA = "0x88C5B8", Slot = "12")]
	public virtual UIDragDropItem StartDragging()
	{
		return null;
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x88CD28", Offset = "0x88CD28", VA = "0x88CD28", Slot = "13")]
	protected virtual void OnClone(GameObject original)
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x88CD2C", Offset = "0x88CD2C", VA = "0x88CD2C", Slot = "14")]
	protected virtual void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x88CEF4", Offset = "0x88CEF4", VA = "0x88CEF4", Slot = "15")]
	protected virtual void OnDragEnd()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x88B3E8", Offset = "0x88B3E8", VA = "0x88B3E8")]
	public void StopDragging([Optional] GameObject go)
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x88D0D8", Offset = "0x88D0D8", VA = "0x88D0D8", Slot = "16")]
	protected virtual void OnDragDropStart()
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x88D7B8", Offset = "0x88D7B8", VA = "0x88D7B8", Slot = "17")]
	protected virtual void OnDragDropMove(Vector2 delta)
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x88D970", Offset = "0x88D970", VA = "0x88D970", Slot = "18")]
	protected virtual void OnDragDropRelease(GameObject surface)
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x88DFE8", Offset = "0x88DFE8", VA = "0x88DFE8", Slot = "19")]
	protected virtual void DestroySelf()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x88E07C", Offset = "0x88E07C", VA = "0x88E07C", Slot = "20")]
	protected virtual void OnDragDropEnd(GameObject surface)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x88E140", Offset = "0x88E140", VA = "0x88E140")]
	protected void EnableDragScrollView()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x88E1F8", Offset = "0x88E1F8", VA = "0x88E1F8")]
	protected void OnApplicationFocus(bool focus)
	{
	}
}
[Token(Token = "0x2000048")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233CC4", Offset = "0x233CC4")]
public class UIDragDropRoot : MonoBehaviour
{
	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Transform root;

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x88E2CC", Offset = "0x88E2CC", VA = "0x88E2CC")]
	public UIDragDropRoot()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x88E2D4", Offset = "0x88E2D4", VA = "0x88E2D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x88E344", Offset = "0x88E344", VA = "0x88E344")]
	private void OnDisable()
	{
	}
}
[Token(Token = "0x2000049")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233D14", Offset = "0x233D14")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x233D14", Offset = "0x233D14")]
public class UIDraggableCamera : MonoBehaviour
{
	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform rootForBounds;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector2 scale;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scrollWheelFactor;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UIDragObject.DragEffect dragEffect;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool smoothDragStart;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float momentumAmount;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera mCam;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Transform mTrans;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mPressed;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector2 mMomentum;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Bounds mBounds;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float mScroll;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private UIRoot mRoot;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool mDragStarted;

	[Token(Token = "0x17000020")]
	public Vector2 currentMomentum
	{
		[Token(Token = "0x6000179")]
		[Address(RVA = "0x8919CC", Offset = "0x8919CC", VA = "0x8919CC")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x600017A")]
		[Address(RVA = "0x8919E0", Offset = "0x8919E0", VA = "0x8919E0")]
		set
		{
		}
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x8918F0", Offset = "0x8918F0", VA = "0x8918F0")]
	public UIDraggableCamera()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x8919EC", Offset = "0x8919EC", VA = "0x8919EC")]
	private void Start()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x891BE8", Offset = "0x891BE8", VA = "0x891BE8")]
	private Vector3 CalculateConstrainOffset()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x8920A8", Offset = "0x8920A8", VA = "0x8920A8")]
	public bool ConstrainToBounds(bool immediate)
	{
		return default(bool);
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x88A3A8", Offset = "0x88A3A8", VA = "0x88A3A8")]
	public void Press(bool isPressed)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x88A6C8", Offset = "0x88A6C8", VA = "0x88A6C8")]
	public void Drag(Vector2 delta)
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x88ABC0", Offset = "0x88ABC0", VA = "0x88ABC0")]
	public void Scroll(float delta)
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x89237C", Offset = "0x89237C", VA = "0x89237C")]
	private void Update()
	{
	}
}
[Token(Token = "0x200004A")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233DD0", Offset = "0x233DD0")]
[ExecuteInEditMode]
public class UIDragObject : MonoBehaviour
{
	[Token(Token = "0x200004B")]
	[DoNotObfuscateNGUI]
	public enum DragEffect
	{
		[Token(Token = "0x400015D")]
		None,
		[Token(Token = "0x400015E")]
		Momentum,
		[Token(Token = "0x400015F")]
		MomentumAndSpring
	}

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform target;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UIPanel panelRegion;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 scrollMomentum;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool restrictWithinPanel;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UIRect contentRect;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DragEffect dragEffect;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float momentumAmount;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected Vector3 scale;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	[HideInInspector]
	private float scrollWheelFactor;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Plane mPlane;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 mTargetPos;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 mLastPos;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 mMomentum;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 mScroll;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Bounds mBounds;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int mTouchID;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private bool mStarted;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	private bool mPressed;

	[Token(Token = "0x17000021")]
	public Vector3 dragMovement
	{
		[Token(Token = "0x6000183")]
		[Address(RVA = "0x88E544", Offset = "0x88E544", VA = "0x88E544")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000184")]
		[Address(RVA = "0x88E558", Offset = "0x88E558", VA = "0x88E558")]
		set
		{
		}
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x88E418", Offset = "0x88E418", VA = "0x88E418")]
	public UIDragObject()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x88E564", Offset = "0x88E564", VA = "0x88E564")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x88E808", Offset = "0x88E808", VA = "0x88E808")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x88E814", Offset = "0x88E814", VA = "0x88E814")]
	private void FindPanel()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x88E978", Offset = "0x88E978", VA = "0x88E978")]
	private void UpdateBounds()
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x88ECA4", Offset = "0x88ECA4", VA = "0x88ECA4")]
	private void OnPress(bool pressed)
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x88F5A0", Offset = "0x88F5A0", VA = "0x88F5A0")]
	private void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x88FC78", Offset = "0x88FC78", VA = "0x88FC78")]
	private void Move(Vector3 worldDelta)
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x89034C", Offset = "0x89034C", VA = "0x89034C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x88F21C", Offset = "0x88F21C", VA = "0x88F21C")]
	public void CancelMovement()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x88F4C0", Offset = "0x88F4C0", VA = "0x88F4C0")]
	public void CancelSpring()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x8906A8", Offset = "0x8906A8", VA = "0x8906A8")]
	private void OnScroll(float delta)
	{
	}
}
[Token(Token = "0x200004C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233E40", Offset = "0x233E40")]
public class UIDragResize : MonoBehaviour
{
	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UIWidget target;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UIWidget.Pivot pivot;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int minWidth;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int minHeight;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int maxWidth;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxHeight;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool updateAnchors;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Plane mPlane;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 mRayPos;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 mLocalPos;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int mWidth;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int mHeight;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool mDragging;

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x890818", Offset = "0x890818", VA = "0x890818")]
	public UIDragResize()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x890850", Offset = "0x890850", VA = "0x890850")]
	private void OnDragStart()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x890B54", Offset = "0x890B54", VA = "0x890B54")]
	private void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x890FB0", Offset = "0x890FB0", VA = "0x890FB0")]
	private void OnDragEnd()
	{
	}
}
[Token(Token = "0x200004D")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233E90", Offset = "0x233E90")]
public class UIDragScrollView : MonoBehaviour
{
	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UIScrollView scrollView;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[HideInInspector]
	private UIScrollView draggablePanel;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Transform mTrans;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UIScrollView mScroll;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool mAutoFind;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool mStarted;

	[NonSerialized]
	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	private bool mPressed;

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x890FBC", Offset = "0x890FBC", VA = "0x890FBC")]
	public UIDragScrollView()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x890FC4", Offset = "0x890FC4", VA = "0x890FC4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x8912BC", Offset = "0x8912BC", VA = "0x8912BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x891128", Offset = "0x891128", VA = "0x891128")]
	private void FindScrollView()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x8912C8", Offset = "0x8912C8", VA = "0x8912C8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x891408", Offset = "0x891408", VA = "0x891408")]
	private void OnPress(bool pressed)
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x8915FC", Offset = "0x8915FC", VA = "0x8915FC")]
	private void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x8916F0", Offset = "0x8916F0", VA = "0x8916F0")]
	private void OnScroll(float delta)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x8917EC", Offset = "0x8917EC", VA = "0x8917EC")]
	public void OnPan(Vector2 delta)
	{
	}
}
[Token(Token = "0x200004E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233EE0", Offset = "0x233EE0")]
public class UIEventTrigger : MonoBehaviour
{
	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIEventTrigger current;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<EventDelegate> onHoverOver;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<EventDelegate> onHoverOut;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public List<EventDelegate> onPress;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<EventDelegate> onRelease;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public List<EventDelegate> onSelect;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<EventDelegate> onDeselect;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public List<EventDelegate> onClick;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<EventDelegate> onDoubleClick;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public List<EventDelegate> onDragStart;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<EventDelegate> onDragEnd;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public List<EventDelegate> onDragOver;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<EventDelegate> onDragOut;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public List<EventDelegate> onDrag;

	[Token(Token = "0x17000022")]
	public bool isColliderEnabled
	{
		[Token(Token = "0x600019E")]
		[Address(RVA = "0x89B290", Offset = "0x89B290", VA = "0x89B290")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x89B0E4", Offset = "0x89B0E4", VA = "0x89B0E4")]
	public UIEventTrigger()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x89B3DC", Offset = "0x89B3DC", VA = "0x89B3DC")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x89B524", Offset = "0x89B524", VA = "0x89B524")]
	private void OnPress(bool pressed)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x89B66C", Offset = "0x89B66C", VA = "0x89B66C")]
	private void OnSelect(bool selected)
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x89B7B4", Offset = "0x89B7B4", VA = "0x89B7B4")]
	private void OnClick()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x89B8DC", Offset = "0x89B8DC", VA = "0x89B8DC")]
	private void OnDoubleClick()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x89BA04", Offset = "0x89BA04", VA = "0x89BA04")]
	private void OnDragStart()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x89BB1C", Offset = "0x89BB1C", VA = "0x89BB1C")]
	private void OnDragEnd()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x89BC34", Offset = "0x89BC34", VA = "0x89BC34")]
	private void OnDragOver(GameObject go)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x89BD5C", Offset = "0x89BD5C", VA = "0x89BD5C")]
	private void OnDragOut(GameObject go)
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x89BE84", Offset = "0x89BE84", VA = "0x89BE84")]
	private void OnDrag(Vector2 delta)
	{
	}
}
[Token(Token = "0x200004F")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233F2C", Offset = "0x233F2C")]
public class UIForwardEvents : MonoBehaviour
{
	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject target;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool onHover;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool onPress;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool onClick;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool onDoubleClick;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool onSelect;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool onDrag;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool onDrop;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public bool onSubmit;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool onScroll;

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x8A00A4", Offset = "0x8A00A4", VA = "0x8A00A4")]
	public UIForwardEvents()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x8A00AC", Offset = "0x8A00AC", VA = "0x8A00AC")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x8A01B4", Offset = "0x8A01B4", VA = "0x8A01B4")]
	private void OnPress(bool pressed)
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x8A02BC", Offset = "0x8A02BC", VA = "0x8A02BC")]
	private void OnClick()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x8A0394", Offset = "0x8A0394", VA = "0x8A0394")]
	private void OnDoubleClick()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x8A046C", Offset = "0x8A046C", VA = "0x8A046C")]
	private void OnSelect(bool selected)
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x8A0574", Offset = "0x8A0574", VA = "0x8A0574")]
	private void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x8A0684", Offset = "0x8A0684", VA = "0x8A0684")]
	private void OnDrop(GameObject go)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x8A076C", Offset = "0x8A076C", VA = "0x8A076C")]
	private void OnSubmit()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x8A0844", Offset = "0x8A0844", VA = "0x8A0844")]
	private void OnScroll(float delta)
	{
	}
}
[Token(Token = "0x2000050")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233F84", Offset = "0x233F84")]
public class UIGrid : UIWidgetContainer
{
	[Token(Token = "0x2000051")]
	public delegate void OnReposition();

	[Token(Token = "0x2000052")]
	[DoNotObfuscateNGUI]
	public enum Arrangement
	{
		[Token(Token = "0x400019F")]
		Horizontal,
		[Token(Token = "0x40001A0")]
		Vertical,
		[Token(Token = "0x40001A1")]
		CellSnap
	}

	[Token(Token = "0x2000053")]
	[DoNotObfuscateNGUI]
	public enum Sorting
	{
		[Token(Token = "0x40001A3")]
		None,
		[Token(Token = "0x40001A4")]
		Alphabetic,
		[Token(Token = "0x40001A5")]
		Horizontal,
		[Token(Token = "0x40001A6")]
		Vertical,
		[Token(Token = "0x40001A7")]
		Custom
	}

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Arrangement arrangement;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Sorting sorting;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public UIWidget.Pivot pivot;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxPerLine;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float cellWidth;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float cellHeight;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool animateSmoothly;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool hideInactive;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool keepWithinPanel;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OnReposition onReposition;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Comparison<Transform> onCustomSort;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private bool sorted;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	protected bool mReposition;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected UIPanel mPanel;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool mInitDone;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x238C1C", Offset = "0x238C1C")]
	private static Comparison<Transform> <>f__mg$cache0;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x238C2C", Offset = "0x238C2C")]
	private static Comparison<Transform> <>f__mg$cache1;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x238C3C", Offset = "0x238C3C")]
	private static Comparison<Transform> <>f__mg$cache2;

	[Token(Token = "0x17000023")]
	public bool repositionNow
	{
		[Token(Token = "0x60001B4")]
		[Address(RVA = "0x88D79C", Offset = "0x88D79C", VA = "0x88D79C")]
		set
		{
		}
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x8A1AAC", Offset = "0x8A1AAC", VA = "0x8A1AAC")]
	public UIGrid()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x886324", Offset = "0x886324", VA = "0x886324")]
	public List<Transform> GetChildList()
	{
		return null;
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x8A1AC4", Offset = "0x8A1AC4", VA = "0x8A1AC4")]
	public Transform GetChild(int index)
	{
		return null;
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x8A1B84", Offset = "0x8A1B84", VA = "0x8A1B84")]
	public int GetIndex(Transform trans)
	{
		return default(int);
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x8A1C0C", Offset = "0x8A1C0C", VA = "0x8A1C0C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23C320", Offset = "0x23C320")]
	public void AddChild(Transform trans)
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x8A1CF0", Offset = "0x8A1CF0", VA = "0x8A1CF0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23C354", Offset = "0x23C354")]
	public void AddChild(Transform trans, bool sort)
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x8A1DD4", Offset = "0x8A1DD4", VA = "0x8A1DD4")]
	public bool RemoveChild(Transform t)
	{
		return default(bool);
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x8A1E88", Offset = "0x8A1E88", VA = "0x8A1E88", Slot = "4")]
	protected virtual void Init()
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x8A1F34", Offset = "0x8A1F34", VA = "0x8A1F34", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x8A1F98", Offset = "0x8A1F98", VA = "0x8A1F98", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x8A1FCC", Offset = "0x8A1FCC", VA = "0x8A1FCC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x8A2080", Offset = "0x8A2080", VA = "0x8A2080")]
	public static int SortByName(Transform a, Transform b)
	{
		return default(int);
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x8A214C", Offset = "0x8A214C", VA = "0x8A214C")]
	public static int SortHorizontal(Transform a, Transform b)
	{
		return default(int);
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x8A21D8", Offset = "0x8A21D8", VA = "0x8A21D8")]
	public static int SortVertical(Transform a, Transform b)
	{
		return default(int);
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x8A226C", Offset = "0x8A226C", VA = "0x8A226C", Slot = "7")]
	protected virtual void Sort(List<Transform> list)
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x8A2270", Offset = "0x8A2270", VA = "0x8A2270", Slot = "8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23C388", Offset = "0x23C388")]
	public virtual void Reposition()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x8A23EC", Offset = "0x8A23EC", VA = "0x8A23EC")]
	public void ConstrainWithinPanel()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x8A2768", Offset = "0x8A2768", VA = "0x8A2768", Slot = "9")]
	protected virtual void ResetPosition(List<Transform> list)
	{
	}
}
[Token(Token = "0x2000054")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x233FE8", Offset = "0x233FE8")]
public class UIImageButton : MonoBehaviour
{
	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UISprite target;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string normalSprite;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string hoverSprite;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string pressedSprite;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public string disabledSprite;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool pixelSnap;

	[Token(Token = "0x17000024")]
	public bool isEnabled
	{
		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x8A30FC", Offset = "0x8A30FC", VA = "0x8A30FC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x8A31E4", Offset = "0x8A31E4", VA = "0x8A31E4")]
		set
		{
		}
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x8A30EC", Offset = "0x8A30EC", VA = "0x8A30EC")]
	public UIImageButton()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x8A3410", Offset = "0x8A3410", VA = "0x8A3410")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x8A34C8", Offset = "0x8A34C8", VA = "0x8A34C8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x8A3304", Offset = "0x8A3304", VA = "0x8A3304")]
	private void UpdateImage()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x8A3898", Offset = "0x8A3898", VA = "0x8A3898")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x8A395C", Offset = "0x8A395C", VA = "0x8A395C")]
	private void OnPress(bool pressed)
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x8A36FC", Offset = "0x8A36FC", VA = "0x8A36FC")]
	private void SetSprite(string sprite)
	{
	}
}
[Token(Token = "0x2000055")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23402C", Offset = "0x23402C")]
public class UIKeyBinding : MonoBehaviour
{
	[Token(Token = "0x2000056")]
	[DoNotObfuscateNGUI]
	public enum Action
	{
		[Token(Token = "0x40001B6")]
		PressAndClick,
		[Token(Token = "0x40001B7")]
		Select,
		[Token(Token = "0x40001B8")]
		All
	}

	[Token(Token = "0x2000057")]
	[DoNotObfuscateNGUI]
	public enum Modifier
	{
		[Token(Token = "0x40001BA")]
		Any,
		[Token(Token = "0x40001BB")]
		Shift,
		[Token(Token = "0x40001BC")]
		Ctrl,
		[Token(Token = "0x40001BD")]
		Alt,
		[Token(Token = "0x40001BE")]
		None
	}

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<UIKeyBinding> mList;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public KeyCode keyCode;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Modifier modifier;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Action action;

	[NonSerialized]
	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool mIgnoreUp;

	[NonSerialized]
	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool mIsInput;

	[NonSerialized]
	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool mPress;

	[Token(Token = "0x17000025")]
	public string captionText
	{
		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x7F52D8", Offset = "0x7F52D8", VA = "0x7F52D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x7F52D0", Offset = "0x7F52D0", VA = "0x7F52D0")]
	public UIKeyBinding()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x7F53F0", Offset = "0x7F53F0", VA = "0x7F53F0")]
	public static bool IsBound(KeyCode key)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x7F55B4", Offset = "0x7F55B4", VA = "0x7F55B4", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x7F5670", Offset = "0x7F5670", VA = "0x7F5670", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x7F572C", Offset = "0x7F572C", VA = "0x7F572C", Slot = "6")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x7F586C", Offset = "0x7F586C", VA = "0x7F586C", Slot = "7")]
	protected virtual void OnSubmit()
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x7F5918", Offset = "0x7F5918", VA = "0x7F5918", Slot = "8")]
	protected virtual bool IsModifierActive()
	{
		return default(bool);
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x7F599C", Offset = "0x7F599C", VA = "0x7F599C")]
	public static bool IsModifierActive(Modifier modifier)
	{
		return default(bool);
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x7F5F30", Offset = "0x7F5F30", VA = "0x7F5F30", Slot = "9")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x7F6304", Offset = "0x7F6304", VA = "0x7F6304", Slot = "10")]
	protected virtual void OnBindingPress(bool pressed)
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x7F63D8", Offset = "0x7F63D8", VA = "0x7F63D8", Slot = "11")]
	protected virtual void OnBindingClick()
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x7F6480", Offset = "0x7F6480", VA = "0x7F6480", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x7F650C", Offset = "0x7F650C", VA = "0x7F650C")]
	public static string GetString(KeyCode keyCode, Modifier modifier)
	{
		return null;
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x7F6654", Offset = "0x7F6654", VA = "0x7F6654")]
	public static bool GetKeyCode(string text, out KeyCode key, out Modifier modifier)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x7F6AB8", Offset = "0x7F6AB8", VA = "0x7F6AB8")]
	public static Modifier GetActiveModifier()
	{
		return default(Modifier);
	}
}
[Token(Token = "0x2000058")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234098", Offset = "0x234098")]
public class UIKeyNavigation : MonoBehaviour
{
	[Token(Token = "0x2000059")]
	[DoNotObfuscateNGUI]
	public enum Constraint
	{
		[Token(Token = "0x40001CB")]
		None,
		[Token(Token = "0x40001CC")]
		Vertical,
		[Token(Token = "0x40001CD")]
		Horizontal,
		[Token(Token = "0x40001CE")]
		Explicit
	}

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BetterList<UIKeyNavigation> list;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Constraint constraint;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject onUp;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject onDown;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject onLeft;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public GameObject onRight;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject onClick;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public GameObject onTab;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool startsSelected;

	[NonSerialized]
	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool mStarted;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int mLastFrame;

	[Token(Token = "0x17000026")]
	public static UIKeyNavigation current
	{
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x7F6E38", Offset = "0x7F6E38", VA = "0x7F6E38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000027")]
	public bool isColliderEnabled
	{
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x7F6F30", Offset = "0x7F6F30", VA = "0x7F6F30")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x7F6E30", Offset = "0x7F6E30", VA = "0x7F6E30")]
	public UIKeyNavigation()
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x7F70C8", Offset = "0x7F70C8", VA = "0x7F70C8", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x7F71B4", Offset = "0x7F71B4", VA = "0x7F71B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x7F7270", Offset = "0x7F7270", VA = "0x7F7270", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x7F732C", Offset = "0x7F732C", VA = "0x7F732C")]
	private static bool IsActive(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x7F7500", Offset = "0x7F7500", VA = "0x7F7500")]
	public GameObject GetLeft()
	{
		return null;
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x7F7B1C", Offset = "0x7F7B1C", VA = "0x7F7B1C")]
	public GameObject GetRight()
	{
		return null;
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x7F7C24", Offset = "0x7F7C24", VA = "0x7F7C24")]
	public GameObject GetUp()
	{
		return null;
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0x7F7D2C", Offset = "0x7F7D2C", VA = "0x7F7D2C")]
	public GameObject GetDown()
	{
		return null;
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0x7F7608", Offset = "0x7F7608", VA = "0x7F7608")]
	public GameObject Get(Vector3 myDir, float x = 1f, float y = 1f)
	{
		return null;
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0x7F7E34", Offset = "0x7F7E34", VA = "0x7F7E34")]
	protected static Vector3 GetCenter(GameObject go)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0x7F82E8", Offset = "0x7F82E8", VA = "0x7F82E8", Slot = "6")]
	public virtual void OnNavigate(KeyCode key)
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0x7F86C4", Offset = "0x7F86C4", VA = "0x7F86C4", Slot = "7")]
	public virtual void OnKey(KeyCode key)
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0x7F8C2C", Offset = "0x7F8C2C", VA = "0x7F8C2C", Slot = "8")]
	protected virtual void OnClick()
	{
	}
}
[Token(Token = "0x200005A")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2340F4", Offset = "0x2340F4")]
[ExecuteInEditMode]
public class UIPlayAnimation : MonoBehaviour
{
	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIPlayAnimation current;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Animation target;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Animator animator;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string clipName;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Trigger trigger;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Direction playDirection;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool resetOnPlay;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool clearSelection;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public EnableCondition ifDisabledOnPlay;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DisableCondition disableWhenFinished;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public List<EventDelegate> onFinished;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private GameObject eventReceiver;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[HideInInspector]
	private string callWhenFinished;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool mStarted;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool mActivated;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool dragHighlight;

	[Token(Token = "0x17000028")]
	private bool dualState
	{
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x80BAFC", Offset = "0x80BAFC", VA = "0x80BAFC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0x80BA68", Offset = "0x80BA68", VA = "0x80BA68")]
	public UIPlayAnimation()
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x80BB14", Offset = "0x80BB14", VA = "0x80BB14")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x80BC6C", Offset = "0x80BC6C", VA = "0x80BC6C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x80BEE8", Offset = "0x80BEE8", VA = "0x80BEE8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0x80C29C", Offset = "0x80C29C", VA = "0x80C29C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0x80C22C", Offset = "0x80C22C", VA = "0x80C22C")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0x80C79C", Offset = "0x80C79C", VA = "0x80C79C")]
	private void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x80C8D4", Offset = "0x80C8D4", VA = "0x80C8D4")]
	private void OnClick()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x80C9D8", Offset = "0x80C9D8", VA = "0x80C9D8")]
	private void OnDoubleClick()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x80CADC", Offset = "0x80CADC", VA = "0x80CADC")]
	private void OnSelect(bool isSelected)
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x80CB4C", Offset = "0x80CB4C", VA = "0x80CB4C")]
	private void OnToggle()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x80CDAC", Offset = "0x80CDAC", VA = "0x80CDAC")]
	private void OnDragOver()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x80CEF4", Offset = "0x80CEF4", VA = "0x80CEF4")]
	private void OnDragOut()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x80D004", Offset = "0x80D004", VA = "0x80D004")]
	private void OnDrop(GameObject go)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x80D12C", Offset = "0x80D12C", VA = "0x80D12C")]
	public void Play(bool forward)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x80C3D0", Offset = "0x80C3D0", VA = "0x80C3D0")]
	public void Play(bool forward, bool onlyIfDifferent)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x80D134", Offset = "0x80D134", VA = "0x80D134")]
	public void PlayForward()
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x80D140", Offset = "0x80D140", VA = "0x80D140")]
	public void PlayReverse()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x80D14C", Offset = "0x80D14C", VA = "0x80D14C")]
	private void OnFinished()
	{
	}
}
[Token(Token = "0x200005B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234154", Offset = "0x234154")]
public class UIPlaySound : MonoBehaviour
{
	[Token(Token = "0x200005C")]
	[DoNotObfuscateNGUI]
	public enum Trigger
	{
		[Token(Token = "0x40001E5")]
		OnClick,
		[Token(Token = "0x40001E6")]
		OnMouseOver,
		[Token(Token = "0x40001E7")]
		OnMouseOut,
		[Token(Token = "0x40001E8")]
		OnPress,
		[Token(Token = "0x40001E9")]
		OnRelease,
		[Token(Token = "0x40001EA")]
		Custom,
		[Token(Token = "0x40001EB")]
		OnEnable,
		[Token(Token = "0x40001EC")]
		OnDisable
	}

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public AudioClip audioClip;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Trigger trigger;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x238CAC", Offset = "0x238CAC")]
	public float volume;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x238CC4", Offset = "0x238CC4")]
	public float pitch;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool mIsOver;

	[Token(Token = "0x17000029")]
	private bool canPlay
	{
		[Token(Token = "0x600020B")]
		[Address(RVA = "0x80D3C0", Offset = "0x80D3C0", VA = "0x80D3C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x80D3AC", Offset = "0x80D3AC", VA = "0x80D3AC")]
	public UIPlaySound()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x80D4B4", Offset = "0x80D4B4", VA = "0x80D4B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x80D564", Offset = "0x80D564", VA = "0x80D564")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x80D614", Offset = "0x80D614", VA = "0x80D614")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0x80D710", Offset = "0x80D710", VA = "0x80D710")]
	private void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x80D80C", Offset = "0x80D80C", VA = "0x80D80C")]
	private void OnClick()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x80D8CC", Offset = "0x80D8CC", VA = "0x80D8CC")]
	private void OnSelect(bool isSelected)
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x80D980", Offset = "0x80D980", VA = "0x80D980")]
	public void Play()
	{
	}
}
[Token(Token = "0x200005D")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2341AC", Offset = "0x2341AC")]
public class UIPlayTween : MonoBehaviour
{
	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIPlayTween current;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject tweenTarget;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int tweenGroup;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Trigger trigger;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Direction playDirection;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool resetOnPlay;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool resetIfDisabled;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EnableCondition ifDisabledOnPlay;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public DisableCondition disableWhenFinished;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool includeChildren;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public List<EventDelegate> onFinished;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private GameObject eventReceiver;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	[SerializeField]
	private string callWhenFinished;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UITweener[] mTweens;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool mStarted;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int mActive;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool mActivated;

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x80DA20", Offset = "0x80DA20", VA = "0x80DA20")]
	public UIPlayTween()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x80DAB4", Offset = "0x80DAB4", VA = "0x80DAB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x80DB94", Offset = "0x80DB94", VA = "0x80DB94")]
	private void Start()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x80DC40", Offset = "0x80DC40", VA = "0x80DC40")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x80E2A8", Offset = "0x80E2A8", VA = "0x80E2A8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x80E3DC", Offset = "0x80E3DC", VA = "0x80E3DC")]
	private void OnDragOver()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x80DF84", Offset = "0x80DF84", VA = "0x80DF84")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x80E90C", Offset = "0x80E90C", VA = "0x80E90C")]
	private void CustomHoverListener(GameObject go, bool isOver)
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x80EBF4", Offset = "0x80EBF4", VA = "0x80EBF4")]
	private void OnDragOut()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x80EC38", Offset = "0x80EC38", VA = "0x80EC38")]
	private void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x80ECB4", Offset = "0x80ECB4", VA = "0x80ECB4")]
	private void OnClick()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x80ECEC", Offset = "0x80ECEC", VA = "0x80ECEC")]
	private void OnDoubleClick()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x80ED24", Offset = "0x80ED24", VA = "0x80ED24")]
	private void OnSelect(bool isSelected)
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x80EDA0", Offset = "0x80EDA0", VA = "0x80EDA0")]
	private void OnToggle()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x80EFE8", Offset = "0x80EFE8", VA = "0x80EFE8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x80F148", Offset = "0x80F148", VA = "0x80F148")]
	public void Play()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x80E3F0", Offset = "0x80E3F0", VA = "0x80E3F0")]
	public void Play(bool forward)
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x80F150", Offset = "0x80F150", VA = "0x80F150")]
	private void OnFinished()
	{
	}
}
[Token(Token = "0x200005E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234208", Offset = "0x234208")]
[ExecuteInEditMode]
public class UIPopupList : UIWidgetContainer
{
	[Token(Token = "0x200005F")]
	[DoNotObfuscateNGUI]
	public enum Position
	{
		[Token(Token = "0x4000231")]
		Auto,
		[Token(Token = "0x4000232")]
		Above,
		[Token(Token = "0x4000233")]
		Below
	}

	[Token(Token = "0x2000060")]
	[DoNotObfuscateNGUI]
	public enum Selection
	{
		[Token(Token = "0x4000235")]
		OnPress,
		[Token(Token = "0x4000236")]
		OnClick
	}

	[Token(Token = "0x2000061")]
	[DoNotObfuscateNGUI]
	public enum OpenOn
	{
		[Token(Token = "0x4000238")]
		ClickOrTap,
		[Token(Token = "0x4000239")]
		RightClick,
		[Token(Token = "0x400023A")]
		DoubleClick,
		[Token(Token = "0x400023B")]
		Manual
	}

	[Token(Token = "0x2000062")]
	public delegate void LegacyEvent(string val);

	[Token(Token = "0x2000063")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x234294", Offset = "0x234294")]
	private sealed class <UpdateTweenPosition>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal TweenPosition <tp>__1;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal UIPopupList $this;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x17000036")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600025E")]
			[Address(RVA = "0x81671C", Offset = "0x81671C", VA = "0x81671C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600025F")]
			[Address(RVA = "0x816724", Offset = "0x816724", VA = "0x816724", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x811A90", Offset = "0x811A90", VA = "0x811A90")]
		[DebuggerHidden]
		public <UpdateTweenPosition>c__Iterator0()
		{
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0x816488", Offset = "0x816488", VA = "0x816488", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0x81672C", Offset = "0x81672C", VA = "0x81672C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0x816740", Offset = "0x816740", VA = "0x816740", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000064")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2342A4", Offset = "0x2342A4")]
	private sealed class <CloseIfUnselected>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal GameObject <sel>__1;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal UIPopupList $this;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x17000038")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6000264")]
			[Address(RVA = "0x8163DC", Offset = "0x8163DC", VA = "0x8163DC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000039")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000265")]
			[Address(RVA = "0x8163E4", Offset = "0x8163E4", VA = "0x8163E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0x81338C", Offset = "0x81338C", VA = "0x81338C")]
		[DebuggerHidden]
		public <CloseIfUnselected>c__Iterator1()
		{
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0x8160D0", Offset = "0x8160D0", VA = "0x8160D0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0x8163EC", Offset = "0x8163EC", VA = "0x8163EC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000267")]
		[Address(RVA = "0x816400", Offset = "0x816400", VA = "0x816400", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIPopupList current;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	protected static GameObject mChild;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static float mFadeOutComplete;

	[Token(Token = "0x4000201")]
	private const float animSpeed = 0.15f;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEngine.Object atlas;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEngine.Object bitmapFont;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Font trueTypeFont;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int fontSize;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public FontStyle fontStyle;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string backgroundSprite;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public string highlightSprite;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite background2DSprite;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Sprite highlight2DSprite;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Position position;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Selection selection;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public NGUIText.Alignment alignment;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public List<string> items;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<object> itemData;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public List<Action> itemCallbacks;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector2 padding;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Color textColor;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Color backgroundColor;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Color highlightColor;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool isAnimated;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	public bool isLocalized;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public UILabel.Modifier textModifier;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public bool separatePanel;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public int overlap;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public OpenOn openOn;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public List<EventDelegate> onChange;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	[SerializeField]
	protected string mSelectedItem;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[HideInInspector]
	[SerializeField]
	protected UIPanel mPanel;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[HideInInspector]
	protected UIBasicSprite mBackground;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	[HideInInspector]
	protected UIBasicSprite mHighlight;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	[HideInInspector]
	protected UILabel mHighlightedLabel;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[HideInInspector]
	[SerializeField]
	protected List<UILabel> mLabelList;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[HideInInspector]
	[SerializeField]
	protected float mBgBorder;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x238E8C", Offset = "0x238E8C")]
	public bool keepValue;

	[NonSerialized]
	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected GameObject mSelection;

	[NonSerialized]
	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	protected int mOpenFrame;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[HideInInspector]
	private GameObject eventReceiver;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[HideInInspector]
	[SerializeField]
	private string functionName;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[HideInInspector]
	private float textScale;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[HideInInspector]
	[SerializeField]
	private UILabel textLabel;

	[NonSerialized]
	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Vector3 startingPosition;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private LegacyEvent mLegacyEvent;

	[NonSerialized]
	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected bool mExecuting;

	[NonSerialized]
	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	protected bool mStarted;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE2")]
	protected bool mTweening;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public GameObject source;

	[Token(Token = "0x1700002A")]
	public INGUIFont font
	{
		[Token(Token = "0x6000226")]
		[Address(RVA = "0x80F5BC", Offset = "0x80F5BC", VA = "0x80F5BC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000227")]
		[Address(RVA = "0x80F6A8", Offset = "0x80F6A8", VA = "0x80F6A8")]
		set
		{
		}
	}

	[Token(Token = "0x1700002B")]
	public UnityEngine.Object ambigiousFont
	{
		[Token(Token = "0x6000228")]
		[Address(RVA = "0x80F750", Offset = "0x80F750", VA = "0x80F750")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000229")]
		[Address(RVA = "0x80F87C", Offset = "0x80F87C", VA = "0x80F87C")]
		set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23E9B0", Offset = "0x23E9B0")]
	public LegacyEvent onSelectionChange
	{
		[Token(Token = "0x600022A")]
		[Address(RVA = "0x80F974", Offset = "0x80F974", VA = "0x80F974")]
		get
		{
			return null;
		}
		[Token(Token = "0x600022B")]
		[Address(RVA = "0x80F97C", Offset = "0x80F97C", VA = "0x80F97C")]
		set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public static bool isOpen
	{
		[Token(Token = "0x600022C")]
		[Address(RVA = "0x7F84F8", Offset = "0x7F84F8", VA = "0x7F84F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002E")]
	public virtual string value
	{
		[Token(Token = "0x600022D")]
		[Address(RVA = "0x80F984", Offset = "0x80F984", VA = "0x80F984", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600022E")]
		[Address(RVA = "0x80F98C", Offset = "0x80F98C", VA = "0x80F98C", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x1700002F")]
	public virtual object data
	{
		[Token(Token = "0x600022F")]
		[Address(RVA = "0x80FA58", Offset = "0x80FA58", VA = "0x80FA58", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000030")]
	public Action callback
	{
		[Token(Token = "0x6000230")]
		[Address(RVA = "0x80FB50", Offset = "0x80FB50", VA = "0x80FB50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000031")]
	public bool isColliderEnabled
	{
		[Token(Token = "0x6000231")]
		[Address(RVA = "0x80FC4C", Offset = "0x80FC4C", VA = "0x80FC4C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000232")]
		[Address(RVA = "0x80FD98", Offset = "0x80FD98", VA = "0x80FD98")]
		set
		{
		}
	}

	[Token(Token = "0x17000032")]
	protected bool isValid
	{
		[Token(Token = "0x6000233")]
		[Address(RVA = "0x80FEEC", Offset = "0x80FEEC", VA = "0x80FEEC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000033")]
	protected int activeFontSize
	{
		[Token(Token = "0x6000234")]
		[Address(RVA = "0x80FF80", Offset = "0x80FF80", VA = "0x80FF80")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000034")]
	protected float activeFontScale
	{
		[Token(Token = "0x6000235")]
		[Address(RVA = "0x8100A8", Offset = "0x8100A8", VA = "0x8100A8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000035")]
	protected float fitScale
	{
		[Token(Token = "0x6000236")]
		[Address(RVA = "0x8101E8", Offset = "0x8101E8", VA = "0x8101E8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x80F338", Offset = "0x80F338", VA = "0x80F338")]
	public UIPopupList()
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x80F994", Offset = "0x80F994", VA = "0x80F994")]
	public void Set(string value, bool notify = true)
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x8106E4", Offset = "0x8106E4", VA = "0x8106E4", Slot = "7")]
	public virtual void Clear()
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x8107B4", Offset = "0x8107B4", VA = "0x8107B4", Slot = "8")]
	public virtual void AddItem(string text)
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x810894", Offset = "0x810894", VA = "0x810894", Slot = "9")]
	public virtual void AddItem(string text, Action del)
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x810948", Offset = "0x810948", VA = "0x810948", Slot = "10")]
	public virtual void AddItem(string text, object data, [Optional] Action del)
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x810A30", Offset = "0x810A30", VA = "0x810A30", Slot = "11")]
	public virtual void RemoveItem(string text)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x810B84", Offset = "0x810B84", VA = "0x810B84", Slot = "12")]
	public virtual void RemoveItemByData(object data)
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x810474", Offset = "0x810474", VA = "0x810474")]
	protected void TriggerCallbacks()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x811094", Offset = "0x811094", VA = "0x811094", Slot = "13")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x811400", Offset = "0x811400", VA = "0x811400", Slot = "14")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x811568", Offset = "0x811568", VA = "0x811568", Slot = "15")]
	protected virtual void OnLocalize()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x811578", Offset = "0x811578", VA = "0x811578", Slot = "16")]
	protected virtual void Highlight(UILabel lbl, bool instant)
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0x811734", Offset = "0x811734", VA = "0x811734", Slot = "17")]
	protected virtual Vector3 GetHighlightPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x811A0C", Offset = "0x811A0C", VA = "0x811A0C", Slot = "18")]
	[DebuggerHidden]
	protected virtual IEnumerator UpdateTweenPosition()
	{
		return null;
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x811A98", Offset = "0x811A98", VA = "0x811A98", Slot = "19")]
	protected virtual void OnItemHover(GameObject go, bool isOver)
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x811B38", Offset = "0x811B38", VA = "0x811B38", Slot = "20")]
	protected virtual void OnItemPress(GameObject go, bool isPressed)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x811B5C", Offset = "0x811B5C", VA = "0x811B5C", Slot = "21")]
	protected virtual void OnItemClick(GameObject go)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x811D6C", Offset = "0x811D6C", VA = "0x811D6C")]
	private void Select(UILabel lbl, bool instant)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x811D7C", Offset = "0x811D7C", VA = "0x811D7C", Slot = "22")]
	protected virtual void OnNavigate(KeyCode key)
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x811F84", Offset = "0x811F84", VA = "0x811F84", Slot = "23")]
	protected virtual void OnKey(KeyCode key)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x81214C", Offset = "0x81214C", VA = "0x81214C", Slot = "24")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x81215C", Offset = "0x81215C", VA = "0x81215C", Slot = "25")]
	protected virtual void OnSelect(bool isSelected)
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x812464", Offset = "0x812464", VA = "0x812464")]
	public static void Close()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x8125B8", Offset = "0x8125B8", VA = "0x8125B8", Slot = "26")]
	public virtual void CloseSelf()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x812B94", Offset = "0x812B94", VA = "0x812B94", Slot = "27")]
	protected virtual void AnimateColor(UIWidget widget)
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x812C78", Offset = "0x812C78", VA = "0x812C78", Slot = "28")]
	protected virtual void AnimatePosition(UIWidget widget, bool placeAbove, float bottom)
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x812DC8", Offset = "0x812DC8", VA = "0x812DC8", Slot = "29")]
	protected virtual void AnimateScale(UIWidget widget, bool placeAbove, float bottom)
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x8130A4", Offset = "0x8130A4", VA = "0x8130A4")]
	protected void Animate(UIWidget widget, bool placeAbove, float bottom)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x813100", Offset = "0x813100", VA = "0x813100", Slot = "30")]
	protected virtual void OnClick()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x8132EC", Offset = "0x8132EC", VA = "0x8132EC", Slot = "31")]
	protected virtual void OnDoubleClick()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x813308", Offset = "0x813308", VA = "0x813308")]
	[DebuggerHidden]
	private IEnumerator CloseIfUnselected()
	{
		return null;
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x813394", Offset = "0x813394", VA = "0x813394", Slot = "32")]
	public virtual void Show()
	{
	}
}
[Token(Token = "0x2000065")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2342B4", Offset = "0x2342B4")]
[ExecuteInEditMode]
public class UIProgressBar : UIWidgetContainer
{
	[Token(Token = "0x2000066")]
	[DoNotObfuscateNGUI]
	public enum FillDirection
	{
		[Token(Token = "0x4000255")]
		LeftToRight,
		[Token(Token = "0x4000256")]
		RightToLeft,
		[Token(Token = "0x4000257")]
		BottomToTop,
		[Token(Token = "0x4000258")]
		TopToBottom
	}

	[Token(Token = "0x2000067")]
	public delegate void OnDragFinished();

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIProgressBar current;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public OnDragFinished onDragFinished;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform thumb;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	[SerializeField]
	protected UIWidget mBG;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	protected UIWidget mFG;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[HideInInspector]
	protected float mValue;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	protected FillDirection mFill;

	[NonSerialized]
	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected bool mStarted;

	[NonSerialized]
	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected Transform mTrans;

	[NonSerialized]
	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected bool mIsDirty;

	[NonSerialized]
	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Camera mCam;

	[NonSerialized]
	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected float mOffset;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int numberOfSteps;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public List<EventDelegate> onChange;

	[Token(Token = "0x1700003A")]
	public Transform cachedTransform
	{
		[Token(Token = "0x6000269")]
		[Address(RVA = "0x8168A8", Offset = "0x8168A8", VA = "0x8168A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003B")]
	public Camera cachedCamera
	{
		[Token(Token = "0x600026A")]
		[Address(RVA = "0x816950", Offset = "0x816950", VA = "0x816950")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003C")]
	public UIWidget foregroundWidget
	{
		[Token(Token = "0x600026B")]
		[Address(RVA = "0x816A54", Offset = "0x816A54", VA = "0x816A54")]
		get
		{
			return null;
		}
		[Token(Token = "0x600026C")]
		[Address(RVA = "0x816A5C", Offset = "0x816A5C", VA = "0x816A5C")]
		set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public UIWidget backgroundWidget
	{
		[Token(Token = "0x600026D")]
		[Address(RVA = "0x816AFC", Offset = "0x816AFC", VA = "0x816AFC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600026E")]
		[Address(RVA = "0x816B04", Offset = "0x816B04", VA = "0x816B04")]
		set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public FillDirection fillDirection
	{
		[Token(Token = "0x600026F")]
		[Address(RVA = "0x816BA4", Offset = "0x816BA4", VA = "0x816BA4")]
		get
		{
			return default(FillDirection);
		}
		[Token(Token = "0x6000270")]
		[Address(RVA = "0x816BAC", Offset = "0x816BAC", VA = "0x816BAC")]
		set
		{
		}
	}

	[Token(Token = "0x1700003F")]
	public float value
	{
		[Token(Token = "0x6000271")]
		[Address(RVA = "0x800DCC", Offset = "0x800DCC", VA = "0x800DCC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000272")]
		[Address(RVA = "0x816BDC", Offset = "0x816BDC", VA = "0x816BDC")]
		set
		{
		}
	}

	[Token(Token = "0x17000040")]
	public float alpha
	{
		[Token(Token = "0x6000273")]
		[Address(RVA = "0x816DD8", Offset = "0x816DD8", VA = "0x816DD8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000274")]
		[Address(RVA = "0x816EEC", Offset = "0x816EEC", VA = "0x816EEC")]
		set
		{
		}
	}

	[Token(Token = "0x17000041")]
	protected bool isHorizontal
	{
		[Token(Token = "0x6000275")]
		[Address(RVA = "0x817704", Offset = "0x817704", VA = "0x817704")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000042")]
	protected bool isInverted
	{
		[Token(Token = "0x6000276")]
		[Address(RVA = "0x817718", Offset = "0x817718", VA = "0x817718")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x816814", Offset = "0x816814", VA = "0x816814")]
	public UIProgressBar()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0x816BE4", Offset = "0x816BE4", VA = "0x816BE4")]
	public void Set(float val, bool notify = true)
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x817730", Offset = "0x817730", VA = "0x817730")]
	public void Start()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x817918", Offset = "0x817918", VA = "0x817918", Slot = "4")]
	protected virtual void Upgrade()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x81791C", Offset = "0x81791C", VA = "0x81791C", Slot = "5")]
	protected virtual void OnStart()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x817920", Offset = "0x817920", VA = "0x817920")]
	protected void Update()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x81793C", Offset = "0x81793C", VA = "0x81793C")]
	protected void OnValidate()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x817AF0", Offset = "0x817AF0", VA = "0x817AF0")]
	protected float ScreenToValue(Vector2 screenPos)
	{
		return default(float);
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x817DFC", Offset = "0x817DFC", VA = "0x817DFC", Slot = "6")]
	protected virtual float LocalToValue(Vector2 localPos)
	{
		return default(float);
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x818044", Offset = "0x818044", VA = "0x818044", Slot = "7")]
	public virtual void ForceUpdate()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x818C50", Offset = "0x818C50", VA = "0x818C50")]
	protected void SetThumbPosition(Vector3 worldPos)
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0x819024", Offset = "0x819024", VA = "0x819024", Slot = "8")]
	public virtual void OnPan(Vector2 delta)
	{
	}
}
[Token(Token = "0x2000068")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234328", Offset = "0x234328")]
public class UISavedOption : MonoBehaviour
{
	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string keyName;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private UIPopupList mList;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private UIToggle mCheck;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UIProgressBar mSlider;

	[Token(Token = "0x17000043")]
	private string key
	{
		[Token(Token = "0x6000287")]
		[Address(RVA = "0x76DFF0", Offset = "0x76DFF0", VA = "0x76DFF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0x76DFE8", Offset = "0x76DFE8", VA = "0x76DFE8")]
	public UISavedOption()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x76E0DC", Offset = "0x76E0DC", VA = "0x76E0DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x76E17C", Offset = "0x76E17C", VA = "0x76E17C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x76E6E4", Offset = "0x76E6E4", VA = "0x76E6E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x76EA3C", Offset = "0x76EA3C", VA = "0x76EA3C")]
	public void SaveSelection()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x76EB0C", Offset = "0x76EB0C", VA = "0x76EB0C")]
	public void SaveState()
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x76EBD8", Offset = "0x76EBD8", VA = "0x76EBD8")]
	public void SaveProgress()
	{
	}
}
[Token(Token = "0x2000069")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234374", Offset = "0x234374")]
[ExecuteInEditMode]
public class UIScrollBar : UISlider
{
	[Token(Token = "0x200006A")]
	private enum Direction
	{
		[Token(Token = "0x4000261")]
		Horizontal,
		[Token(Token = "0x4000262")]
		Vertical,
		[Token(Token = "0x4000263")]
		Upgraded
	}

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[HideInInspector]
	protected float mSize;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[HideInInspector]
	private float mScroll;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[HideInInspector]
	private Direction mDir;

	[Token(Token = "0x17000044")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23E9E4", Offset = "0x23E9E4")]
	public float scrollValue
	{
		[Token(Token = "0x600028F")]
		[Address(RVA = "0x76ECAC", Offset = "0x76ECAC", VA = "0x76ECAC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000290")]
		[Address(RVA = "0x76ECB4", Offset = "0x76ECB4", VA = "0x76ECB4")]
		set
		{
		}
	}

	[Token(Token = "0x17000045")]
	public float barSize
	{
		[Token(Token = "0x6000291")]
		[Address(RVA = "0x76ECBC", Offset = "0x76ECBC", VA = "0x76ECBC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000292")]
		[Address(RVA = "0x76ECC4", Offset = "0x76ECC4", VA = "0x76ECC4")]
		set
		{
		}
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x76EC74", Offset = "0x76EC74", VA = "0x76EC74")]
	public UIScrollBar()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x76EE9C", Offset = "0x76EE9C", VA = "0x76EE9C", Slot = "4")]
	protected override void Upgrade()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x76EED8", Offset = "0x76EED8", VA = "0x76EED8", Slot = "5")]
	protected override void OnStart()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x76FA80", Offset = "0x76FA80", VA = "0x76FA80", Slot = "6")]
	protected override float LocalToValue(Vector2 localPos)
	{
		return default(float);
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x76FDF8", Offset = "0x76FDF8", VA = "0x76FDF8", Slot = "7")]
	public override void ForceUpdate()
	{
	}
}
[Token(Token = "0x200006B")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2343D8", Offset = "0x2343D8")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2343D8", Offset = "0x2343D8")]
public class UIScrollView : MonoBehaviour
{
	[Token(Token = "0x200006C")]
	[DoNotObfuscateNGUI]
	public enum Movement
	{
		[Token(Token = "0x400028B")]
		Horizontal,
		[Token(Token = "0x400028C")]
		Vertical,
		[Token(Token = "0x400028D")]
		Unrestricted,
		[Token(Token = "0x400028E")]
		Custom
	}

	[Token(Token = "0x200006D")]
	[DoNotObfuscateNGUI]
	public enum DragEffect
	{
		[Token(Token = "0x4000290")]
		None,
		[Token(Token = "0x4000291")]
		Momentum,
		[Token(Token = "0x4000292")]
		MomentumAndSpring
	}

	[Token(Token = "0x200006E")]
	[DoNotObfuscateNGUI]
	public enum ShowCondition
	{
		[Token(Token = "0x4000294")]
		Always,
		[Token(Token = "0x4000295")]
		OnlyIfNeeded,
		[Token(Token = "0x4000296")]
		WhenDragging
	}

	[Token(Token = "0x200006F")]
	public delegate void OnDragNotification();

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BetterList<UIScrollView> list;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Movement movement;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public DragEffect dragEffect;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool restrictWithinPanel;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2390D0", Offset = "0x2390D0")]
	public bool constrainOnDrag;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool disableDragIfFits;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public bool smoothDragStart;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool iOSDragEmulation;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float scrollWheelFactor;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float momentumAmount;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float dampenStrength;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UIProgressBar horizontalScrollBar;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public UIProgressBar verticalScrollBar;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ShowCondition showScrollBars;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector2 customMovement;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public UIWidget.Pivot contentPivot;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public OnDragNotification onDragStarted;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public OnDragNotification onDragFinished;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public OnDragNotification onMomentumMove;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public OnDragNotification onStoppedMoving;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	[SerializeField]
	private Vector3 scale;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[HideInInspector]
	[SerializeField]
	private Vector2 relativePositionOnReset;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected Transform mTrans;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected UIPanel mPanel;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected UnityEngine.Plane mPlane;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	protected Vector3 mLastPos;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected bool mPressed;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected Vector3 mMomentum;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected float mScroll;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected Bounds mBounds;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	protected bool mCalculatedBounds;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
	protected bool mShouldMove;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB6")]
	protected bool mIgnoreCallbacks;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected int mDragID;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	protected Vector2 mDragStartOffset;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	protected bool mDragStarted;

	[NonSerialized]
	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
	private bool mStarted;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[HideInInspector]
	public UICenterOnChild centerOnChild;

	[Token(Token = "0x17000046")]
	public UIPanel panel
	{
		[Token(Token = "0x6000298")]
		[Address(RVA = "0x77046C", Offset = "0x77046C", VA = "0x77046C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000047")]
	public bool isDragging
	{
		[Token(Token = "0x6000299")]
		[Address(RVA = "0x770474", Offset = "0x770474", VA = "0x770474")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000048")]
	public virtual Bounds bounds
	{
		[Token(Token = "0x600029A")]
		[Address(RVA = "0x770494", Offset = "0x770494", VA = "0x770494", Slot = "4")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x17000049")]
	public bool canMoveHorizontally
	{
		[Token(Token = "0x600029B")]
		[Address(RVA = "0x770520", Offset = "0x770520", VA = "0x770520")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004A")]
	public bool canMoveVertically
	{
		[Token(Token = "0x600029C")]
		[Address(RVA = "0x770560", Offset = "0x770560", VA = "0x770560")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004B")]
	public virtual bool shouldMoveHorizontally
	{
		[Token(Token = "0x600029D")]
		[Address(RVA = "0x7705A0", Offset = "0x7705A0", VA = "0x7705A0", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004C")]
	public virtual bool shouldMoveVertically
	{
		[Token(Token = "0x600029E")]
		[Address(RVA = "0x770724", Offset = "0x770724", VA = "0x770724", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004D")]
	protected virtual bool shouldMove
	{
		[Token(Token = "0x600029F")]
		[Address(RVA = "0x7708A8", Offset = "0x7708A8", VA = "0x7708A8", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004E")]
	public Vector3 currentMomentum
	{
		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x770B60", Offset = "0x770B60", VA = "0x770B60")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x770B74", Offset = "0x770B74", VA = "0x770B74")]
		set
		{
		}
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x7702C0", Offset = "0x7702C0", VA = "0x7702C0")]
	public UIScrollView()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x770B88", Offset = "0x770B88", VA = "0x770B88")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x770E58", Offset = "0x770E58", VA = "0x770E58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x771260", Offset = "0x771260", VA = "0x771260")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x770F3C", Offset = "0x770F3C", VA = "0x770F3C")]
	private void CheckScrollbars()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x771290", Offset = "0x771290", VA = "0x771290")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x771354", Offset = "0x771354", VA = "0x771354")]
	public bool RestrictWithinBounds(bool instant)
	{
		return default(bool);
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x771374", Offset = "0x771374", VA = "0x771374")]
	public bool RestrictWithinBounds(bool instant, bool horizontal, bool vertical)
	{
		return default(bool);
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x7718D0", Offset = "0x7718D0", VA = "0x7718D0")]
	public void DisableSpring()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x77199C", Offset = "0x77199C", VA = "0x77199C")]
	public void UpdateScrollbars()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x7719B0", Offset = "0x7719B0", VA = "0x7719B0", Slot = "8")]
	public virtual void UpdateScrollbars(bool recalculateBounds)
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x772034", Offset = "0x772034", VA = "0x772034")]
	protected void UpdateScrollbars(UIProgressBar slider, float contentMin, float contentMax, float contentSize, float viewSize, bool inverted)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x7723A4", Offset = "0x7723A4", VA = "0x7723A4", Slot = "9")]
	public virtual void SetDragAmount(float x, float y, bool updateScrollbars)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x77290C", Offset = "0x77290C", VA = "0x77290C")]
	public void InvalidateBounds()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x772918", Offset = "0x772918", VA = "0x772918")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23C47C", Offset = "0x23C47C")]
	public void ResetPosition()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x772A20", Offset = "0x772A20", VA = "0x772A20")]
	public void UpdatePosition()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x772C68", Offset = "0x772C68", VA = "0x772C68")]
	public void OnScrollBar()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x772DF0", Offset = "0x772DF0", VA = "0x772DF0", Slot = "10")]
	public virtual void MoveRelative(Vector3 relative)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x772F70", Offset = "0x772F70", VA = "0x772F70")]
	public void MoveAbsolute(Vector3 absolute)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x7730BC", Offset = "0x7730BC", VA = "0x7730BC")]
	public void Press(bool pressed)
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x773B6C", Offset = "0x773B6C", VA = "0x773B6C")]
	public void Drag()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x77470C", Offset = "0x77470C", VA = "0x77470C")]
	public void Scroll(float delta)
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x774888", Offset = "0x774888", VA = "0x774888")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x775244", Offset = "0x775244", VA = "0x775244")]
	public void OnPan(Vector2 delta)
	{
	}
}
[Token(Token = "0x2000070")]
public class UIShowControlScheme : MonoBehaviour
{
	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject target;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool mouse;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool touch;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool controller;

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x775560", Offset = "0x775560", VA = "0x775560")]
	public UIShowControlScheme()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x775570", Offset = "0x775570", VA = "0x775570")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x775808", Offset = "0x775808", VA = "0x775808")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x7756E4", Offset = "0x7756E4", VA = "0x7756E4")]
	private void OnScheme()
	{
	}
}
[Token(Token = "0x2000071")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2344D0", Offset = "0x2344D0")]
public class UISlider : UIProgressBar
{
	[Token(Token = "0x2000072")]
	private enum Direction
	{
		[Token(Token = "0x40002A0")]
		Horizontal,
		[Token(Token = "0x40002A1")]
		Vertical,
		[Token(Token = "0x40002A2")]
		Upgraded
	}

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	[SerializeField]
	private Transform foreground;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[HideInInspector]
	private float rawValue;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[SerializeField]
	private Direction direction;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[HideInInspector]
	[SerializeField]
	protected bool mInverted;

	[Token(Token = "0x1700004F")]
	public bool isColliderEnabled
	{
		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x775974", Offset = "0x775974", VA = "0x775974")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000050")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EA18", Offset = "0x23EA18")]
	public float sliderValue
	{
		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x775AC0", Offset = "0x775AC0", VA = "0x775AC0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x775AC8", Offset = "0x775AC8", VA = "0x775AC8")]
		set
		{
		}
	}

	[Token(Token = "0x17000051")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EA4C", Offset = "0x23EA4C")]
	public bool inverted
	{
		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x775AD0", Offset = "0x775AD0", VA = "0x775AD0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x775AD8", Offset = "0x775AD8", VA = "0x775AD8")]
		set
		{
		}
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x76EC94", Offset = "0x76EC94", VA = "0x76EC94")]
	public UISlider()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x775ADC", Offset = "0x775ADC", VA = "0x775ADC", Slot = "4")]
	protected override void Upgrade()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x76F304", Offset = "0x76F304", VA = "0x76F304", Slot = "5")]
	protected override void OnStart()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x775BD8", Offset = "0x775BD8", VA = "0x775BD8")]
	protected void OnPressBackground(GameObject go, bool isPressed)
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x775CF8", Offset = "0x775CF8", VA = "0x775CF8")]
	protected void OnDragBackground(GameObject go, Vector2 delta)
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x775DFC", Offset = "0x775DFC", VA = "0x775DFC")]
	protected void OnPressForeground(GameObject go, bool isPressed)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x775FC4", Offset = "0x775FC4", VA = "0x775FC4")]
	protected void OnDragForeground(GameObject go, Vector2 delta)
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x7760DC", Offset = "0x7760DC", VA = "0x7760DC", Slot = "8")]
	public override void OnPan(Vector2 delta)
	{
	}
}
[Token(Token = "0x2000073")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x234530", Offset = "0x234530")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234530", Offset = "0x234530")]
public class UISoundVolume : MonoBehaviour
{
	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x776870", Offset = "0x776870", VA = "0x776870")]
	public UISoundVolume()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x776878", Offset = "0x776878", VA = "0x776878")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x7769CC", Offset = "0x7769CC", VA = "0x7769CC")]
	private void OnChange()
	{
	}
}
[Token(Token = "0x2000074")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2345E8", Offset = "0x2345E8")]
public class UITable : UIWidgetContainer
{
	[Token(Token = "0x2000075")]
	public delegate void OnReposition();

	[Token(Token = "0x2000076")]
	[DoNotObfuscateNGUI]
	public enum Direction
	{
		[Token(Token = "0x40002B5")]
		Down,
		[Token(Token = "0x40002B6")]
		Up
	}

	[Token(Token = "0x2000077")]
	[DoNotObfuscateNGUI]
	public enum Sorting
	{
		[Token(Token = "0x40002B8")]
		None,
		[Token(Token = "0x40002B9")]
		Alphabetic,
		[Token(Token = "0x40002BA")]
		Horizontal,
		[Token(Token = "0x40002BB")]
		Vertical,
		[Token(Token = "0x40002BC")]
		Custom
	}

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int columns;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Direction direction;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Sorting sorting;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UIWidget.Pivot pivot;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UIWidget.Pivot cellAlignment;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool hideInactive;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool keepWithinPanel;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector2 padding;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public OnReposition onReposition;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Comparison<Transform> onCustomSort;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected UIPanel mPanel;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool mInitDone;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	protected bool mReposition;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x239234", Offset = "0x239234")]
	private static Comparison<Transform> <>f__mg$cache0;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x239244", Offset = "0x239244")]
	private static Comparison<Transform> <>f__mg$cache1;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x239254", Offset = "0x239254")]
	private static Comparison<Transform> <>f__mg$cache2;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x239264", Offset = "0x239264")]
	private static Comparison<Transform> <>f__mg$cache3;

	[Token(Token = "0x17000052")]
	public bool repositionNow
	{
		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x7815D4", Offset = "0x7815D4", VA = "0x7815D4")]
		set
		{
		}
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x781528", Offset = "0x781528", VA = "0x781528")]
	public UITable()
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x7815F0", Offset = "0x7815F0", VA = "0x7815F0")]
	public List<Transform> GetChildList()
	{
		return null;
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x781A34", Offset = "0x781A34", VA = "0x781A34", Slot = "4")]
	protected virtual void Sort(List<Transform> list)
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x781B30", Offset = "0x781B30", VA = "0x781B30", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x781B78", Offset = "0x781B78", VA = "0x781B78", Slot = "6")]
	protected virtual void Init()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x781C24", Offset = "0x781C24", VA = "0x781C24", Slot = "7")]
	protected virtual void LateUpdate()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x781C64", Offset = "0x781C64", VA = "0x781C64")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x781D18", Offset = "0x781D18", VA = "0x781D18")]
	protected void RepositionVariableSize(List<Transform> children)
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x782A58", Offset = "0x782A58", VA = "0x782A58", Slot = "8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23C4C0", Offset = "0x23C4C0")]
	public virtual void Reposition()
	{
	}
}
[Token(Token = "0x2000078")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23464C", Offset = "0x23464C")]
public class UIToggle : UIWidgetContainer
{
	[Token(Token = "0x2000079")]
	public delegate bool Validate(bool choice);

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BetterList<UIToggle> list;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static UIToggle current;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int group;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UIWidget activeSprite;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool invertSpriteState;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animation activeAnimation;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Animator animator;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UITweener tween;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool startsActive;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool instantTween;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool optionCanBeNone;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<EventDelegate> onChange;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Validate validator;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private UISprite checkSprite;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[HideInInspector]
	private Animation checkAnimation;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	private GameObject eventReceiver;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	[HideInInspector]
	private string functionName;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[HideInInspector]
	private bool startsChecked;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool mIsActive;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	private bool mStarted;

	[Token(Token = "0x17000053")]
	public bool value
	{
		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x76EA24", Offset = "0x76EA24", VA = "0x76EA24")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x76E6AC", Offset = "0x76E6AC", VA = "0x76E6AC")]
		set
		{
		}
	}

	[Token(Token = "0x17000054")]
	public bool isColliderEnabled
	{
		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x786B8C", Offset = "0x786B8C", VA = "0x786B8C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000055")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EA94", Offset = "0x23EA94")]
	public bool isChecked
	{
		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x786CD8", Offset = "0x786CD8", VA = "0x786CD8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x786CF0", Offset = "0x786CF0", VA = "0x786CF0")]
		set
		{
		}
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x785EF4", Offset = "0x785EF4", VA = "0x785EF4")]
	public UIToggle()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x786CF4", Offset = "0x786CF4", VA = "0x786CF4")]
	public static UIToggle GetActiveToggle(int group)
	{
		return null;
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x786EBC", Offset = "0x786EBC", VA = "0x786EBC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x786F78", Offset = "0x786F78", VA = "0x786F78")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x787034", Offset = "0x787034", VA = "0x787034")]
	public void Start()
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x787320", Offset = "0x787320", VA = "0x787320")]
	private void OnClick()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x785F9C", Offset = "0x785F9C", VA = "0x785F9C")]
	public void Set(bool state, bool notify = true)
	{
	}
}
[Token(Token = "0x200007A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2346A4", Offset = "0x2346A4")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2346A4", Offset = "0x2346A4")]
[ExecuteInEditMode]
public class UIToggledComponents : MonoBehaviour
{
	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<MonoBehaviour> activate;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<MonoBehaviour> deactivate;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	[SerializeField]
	private MonoBehaviour target;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private bool inverse;

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x787838", Offset = "0x787838", VA = "0x787838")]
	public UIToggledComponents()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x787840", Offset = "0x787840", VA = "0x787840")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x787A54", Offset = "0x787A54", VA = "0x787A54")]
	public void Toggle()
	{
	}
}
[Token(Token = "0x200007B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234770", Offset = "0x234770")]
public class UIToggledObjects : MonoBehaviour
{
	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<GameObject> activate;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<GameObject> deactivate;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	[SerializeField]
	private GameObject target;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private bool inverse;

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x787CDC", Offset = "0x787CDC", VA = "0x787CDC")]
	public UIToggledObjects()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x787CE4", Offset = "0x787CE4", VA = "0x787CE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x787EF8", Offset = "0x787EF8", VA = "0x787EF8")]
	public void Toggle()
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x7880CC", Offset = "0x7880CC", VA = "0x7880CC")]
	private void Set(GameObject go, bool state)
	{
	}
}
[Token(Token = "0x200007C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2347C0", Offset = "0x2347C0")]
public class UIWidgetContainer : MonoBehaviour
{
	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xD155FC", Offset = "0xD155FC", VA = "0xD155FC")]
	public UIWidgetContainer()
	{
	}
}
[Token(Token = "0x200007D")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234810", Offset = "0x234810")]
public class UIWrapContent : MonoBehaviour
{
	[Token(Token = "0x200007E")]
	public delegate void OnInitializeItem(GameObject go, int wrapIndex, int realIndex);

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int itemSize;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool cullContent;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int minIndex;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxIndex;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool hideInactive;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OnInitializeItem onInitializeItem;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected Transform mTrans;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected UIPanel mPanel;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected UIScrollView mScroll;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected bool mHorizontal;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	protected bool mFirstTime;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected List<Transform> mChildren;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x239424", Offset = "0x239424")]
	private static Comparison<Transform> <>f__mg$cache0;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x239434", Offset = "0x239434")]
	private static Comparison<Transform> <>f__mg$cache1;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x239444", Offset = "0x239444")]
	private static Comparison<Transform> <>f__mg$cache2;

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xD15604", Offset = "0xD15604", VA = "0xD15604")]
	public UIWrapContent()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xD156A4", Offset = "0xD156A4", VA = "0xD156A4", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xD157DC", Offset = "0xD157DC", VA = "0xD157DC", Slot = "5")]
	protected virtual void OnMove(UIPanel panel)
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xD157EC", Offset = "0xD157EC", VA = "0xD157EC", Slot = "6")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23C4F4", Offset = "0x23C4F4")]
	public virtual void SortBasedOnScrollMovement()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xD15C40", Offset = "0xD15C40", VA = "0xD15C40", Slot = "7")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23C540", Offset = "0x23C540")]
	public virtual void SortAlphabetically()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xD15AB8", Offset = "0xD15AB8", VA = "0xD15AB8")]
	protected bool CacheScrollView()
	{
		return default(bool);
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xD15E6C", Offset = "0xD15E6C", VA = "0xD15E6C", Slot = "8")]
	protected virtual void ResetChildPositions()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xD1600C", Offset = "0xD1600C", VA = "0xD1600C", Slot = "9")]
	public virtual void WrapContent()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xD16B58", Offset = "0xD16B58", VA = "0xD16B58")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xD16B78", Offset = "0xD16B78", VA = "0xD16B78", Slot = "10")]
	protected virtual void UpdateItem(Transform item, int index)
	{
	}
}
[Token(Token = "0x200007F")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23485C", Offset = "0x23485C")]
public class ActiveAnimation : MonoBehaviour
{
	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ActiveAnimation current;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<EventDelegate> onFinished;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public GameObject eventReceiver;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public string callWhenFinished;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animation mAnim;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Direction mLastDirection;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Direction mDisableDirection;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool mNotify;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator mAnimator;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private string mClip;

	[Token(Token = "0x17000056")]
	private float playbackTime
	{
		[Token(Token = "0x6000308")]
		[Address(RVA = "0x473BDC", Offset = "0x473BDC", VA = "0x473BDC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000057")]
	public bool isPlaying
	{
		[Token(Token = "0x6000309")]
		[Address(RVA = "0x473CD4", Offset = "0x473CD4", VA = "0x473CD4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x473B08", Offset = "0x473B08", VA = "0x473B08")]
	public ActiveAnimation()
	{
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x474230", Offset = "0x474230", VA = "0x474230")]
	public void Finish()
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x4746E4", Offset = "0x4746E4", VA = "0x4746E4")]
	public void Reset()
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x474B70", Offset = "0x474B70", VA = "0x474B70")]
	private void Start()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x474C50", Offset = "0x474C50", VA = "0x474C50")]
	private void Update()
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x475524", Offset = "0x475524", VA = "0x475524")]
	private void Play(string clipName, Direction playDirection)
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x475D78", Offset = "0x475D78", VA = "0x475D78")]
	public static ActiveAnimation Play(Animation anim, string clipName, Direction playDirection, EnableCondition enableBeforePlay, DisableCondition disableCondition)
	{
		return null;
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x476178", Offset = "0x476178", VA = "0x476178")]
	public static ActiveAnimation Play(Animation anim, string clipName, Direction playDirection)
	{
		return null;
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x47619C", Offset = "0x47619C", VA = "0x47619C")]
	public static ActiveAnimation Play(Animation anim, Direction playDirection)
	{
		return null;
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x4761C8", Offset = "0x4761C8", VA = "0x4761C8")]
	public static ActiveAnimation Play(Animator anim, string clipName, Direction playDirection, EnableCondition enableBeforePlay, DisableCondition disableCondition)
	{
		return null;
	}
}
namespace AnimationOrTween
{
	[Token(Token = "0x2000080")]
	[DoNotObfuscateNGUI]
	public enum Trigger
	{
		[Token(Token = "0x40002F3")]
		OnClick,
		[Token(Token = "0x40002F4")]
		OnHover,
		[Token(Token = "0x40002F5")]
		OnPress,
		[Token(Token = "0x40002F6")]
		OnHoverTrue,
		[Token(Token = "0x40002F7")]
		OnHoverFalse,
		[Token(Token = "0x40002F8")]
		OnPressTrue,
		[Token(Token = "0x40002F9")]
		OnPressFalse,
		[Token(Token = "0x40002FA")]
		OnActivate,
		[Token(Token = "0x40002FB")]
		OnActivateTrue,
		[Token(Token = "0x40002FC")]
		OnActivateFalse,
		[Token(Token = "0x40002FD")]
		OnDoubleClick,
		[Token(Token = "0x40002FE")]
		OnSelect,
		[Token(Token = "0x40002FF")]
		OnSelectTrue,
		[Token(Token = "0x4000300")]
		OnSelectFalse,
		[Token(Token = "0x4000301")]
		Manual
	}
	[Token(Token = "0x2000081")]
	[DoNotObfuscateNGUI]
	public enum Direction
	{
		[Token(Token = "0x4000303")]
		Reverse = -1,
		[Token(Token = "0x4000304")]
		Toggle,
		[Token(Token = "0x4000305")]
		Forward
	}
	[Token(Token = "0x2000082")]
	[DoNotObfuscateNGUI]
	public enum EnableCondition
	{
		[Token(Token = "0x4000307")]
		DoNothing,
		[Token(Token = "0x4000308")]
		EnableThenPlay,
		[Token(Token = "0x4000309")]
		IgnoreDisabledState
	}
	[Token(Token = "0x2000083")]
	[DoNotObfuscateNGUI]
	public enum DisableCondition
	{
		[Token(Token = "0x400030B")]
		DisableAfterReverse = -1,
		[Token(Token = "0x400030C")]
		DoNotDisable,
		[Token(Token = "0x400030D")]
		DisableAfterForward
	}
}
[Token(Token = "0x2000084")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2348E8", Offset = "0x2348E8")]
public class BetterList<T>
{
	[Token(Token = "0x2000085")]
	public delegate int CompareFunc(T left, T right);

	[Token(Token = "0x2000086")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23491C", Offset = "0x23491C")]
	private sealed class <GetEnumerator>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<T>
	{
		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <i>__1;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal BetterList<T> $this;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T $current;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal bool $disposing;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int $PC;

		[Token(Token = "0x17000059")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x600032A")]
			[DebuggerHidden]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x1700005A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600032B")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000328")]
		[DebuggerHidden]
		public <GetEnumerator>c__Iterator0()
		{
		}

		[Token(Token = "0x6000329")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600032C")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600032D")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T[] buffer;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int size;

	[Token(Token = "0x17000058")]
	[DebuggerHidden]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EAC8", Offset = "0x23EAC8")]
	public T Item
	{
		[Token(Token = "0x6000315")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x6000316")]
		set
		{
		}
	}

	[Token(Token = "0x6000313")]
	public BetterList()
	{
	}

	[Token(Token = "0x6000314")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public IEnumerator<T> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000317")]
	private void AllocateMore()
	{
	}

	[Token(Token = "0x6000318")]
	private void Trim()
	{
	}

	[Token(Token = "0x6000319")]
	public void Clear()
	{
	}

	[Token(Token = "0x600031A")]
	public void Release()
	{
	}

	[Token(Token = "0x600031B")]
	public void Add(T item)
	{
	}

	[Token(Token = "0x600031C")]
	public void Insert(int index, T item)
	{
	}

	[Token(Token = "0x600031D")]
	public bool Contains(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x600031E")]
	public int IndexOf(T item)
	{
		return default(int);
	}

	[Token(Token = "0x600031F")]
	public bool Remove(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000320")]
	public void RemoveAt(int index)
	{
	}

	[Token(Token = "0x6000321")]
	public T Pop()
	{
		return (T)null;
	}

	[Token(Token = "0x6000322")]
	public T[] ToArray()
	{
		return null;
	}

	[Token(Token = "0x6000323")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public void Sort(CompareFunc comparer)
	{
	}
}
[Serializable]
[Token(Token = "0x2000087")]
public class BMFont
{
	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	[HideInInspector]
	private int mSize;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	[HideInInspector]
	private int mBase;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	[SerializeField]
	private int mWidth;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	[SerializeField]
	private int mHeight;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private string mSpriteName;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[HideInInspector]
	private List<BMGlyph> mSaved;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<int, BMGlyph> mDict;

	[Token(Token = "0x1700005B")]
	public bool isValid
	{
		[Token(Token = "0x600032F")]
		[Address(RVA = "0x48A2C4", Offset = "0x48A2C4", VA = "0x48A2C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005C")]
	public int charSize
	{
		[Token(Token = "0x6000330")]
		[Address(RVA = "0x48A34C", Offset = "0x48A34C", VA = "0x48A34C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000331")]
		[Address(RVA = "0x48A354", Offset = "0x48A354", VA = "0x48A354")]
		set
		{
		}
	}

	[Token(Token = "0x1700005D")]
	public int baseOffset
	{
		[Token(Token = "0x6000332")]
		[Address(RVA = "0x48A35C", Offset = "0x48A35C", VA = "0x48A35C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000333")]
		[Address(RVA = "0x48A364", Offset = "0x48A364", VA = "0x48A364")]
		set
		{
		}
	}

	[Token(Token = "0x1700005E")]
	public int texWidth
	{
		[Token(Token = "0x6000334")]
		[Address(RVA = "0x48A36C", Offset = "0x48A36C", VA = "0x48A36C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000335")]
		[Address(RVA = "0x48A374", Offset = "0x48A374", VA = "0x48A374")]
		set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public int texHeight
	{
		[Token(Token = "0x6000336")]
		[Address(RVA = "0x48A37C", Offset = "0x48A37C", VA = "0x48A37C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000337")]
		[Address(RVA = "0x48A384", Offset = "0x48A384", VA = "0x48A384")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public int glyphCount
	{
		[Token(Token = "0x6000338")]
		[Address(RVA = "0x48A38C", Offset = "0x48A38C", VA = "0x48A38C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000061")]
	public string spriteName
	{
		[Token(Token = "0x6000339")]
		[Address(RVA = "0x48A418", Offset = "0x48A418", VA = "0x48A418")]
		get
		{
			return null;
		}
		[Token(Token = "0x600033A")]
		[Address(RVA = "0x48A420", Offset = "0x48A420", VA = "0x48A420")]
		set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public List<BMGlyph> glyphs
	{
		[Token(Token = "0x600033B")]
		[Address(RVA = "0x48A428", Offset = "0x48A428", VA = "0x48A428")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x48A1FC", Offset = "0x48A1FC", VA = "0x48A1FC")]
	public BMFont()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x48A430", Offset = "0x48A430", VA = "0x48A430")]
	public BMGlyph GetGlyph(int index, bool createIfMissing)
	{
		return null;
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x48A69C", Offset = "0x48A69C", VA = "0x48A69C")]
	public BMGlyph GetGlyph(int index)
	{
		return null;
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x48A6A4", Offset = "0x48A6A4", VA = "0x48A6A4")]
	public void Clear()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x48A748", Offset = "0x48A748", VA = "0x48A748")]
	public void Trim(int xMin, int yMin, int xMax, int yMax)
	{
	}
}
[Serializable]
[Token(Token = "0x2000088")]
public class BMGlyph
{
	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int index;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int x;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int y;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int width;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int height;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int offsetX;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int offsetY;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int advance;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int channel;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public List<int> kerning;

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x48A694", Offset = "0x48A694", VA = "0x48A694")]
	public BMGlyph()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x48A8E8", Offset = "0x48A8E8", VA = "0x48A8E8")]
	public int GetKerning(int previousChar)
	{
		return default(int);
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x48AA00", Offset = "0x48AA00", VA = "0x48AA00")]
	public void SetKerning(int previousChar, int amount)
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x48A850", Offset = "0x48A850", VA = "0x48A850")]
	public void Trim(int xMin, int yMin, int xMax, int yMax)
	{
	}
}
[Serializable]
[Token(Token = "0x2000089")]
public class BMSymbol
{
	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string sequence;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string spriteName;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private UISpriteData mSprite;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool mIsValid;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int mLength;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int mOffsetX;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int mOffsetY;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int mWidth;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int mHeight;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int mAdvance;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rect mUV;

	[Token(Token = "0x17000063")]
	public int length
	{
		[Token(Token = "0x6000345")]
		[Address(RVA = "0x48ABB0", Offset = "0x48ABB0", VA = "0x48ABB0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000064")]
	public int offsetX
	{
		[Token(Token = "0x6000346")]
		[Address(RVA = "0x48ABF0", Offset = "0x48ABF0", VA = "0x48ABF0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000065")]
	public int offsetY
	{
		[Token(Token = "0x6000347")]
		[Address(RVA = "0x48ABF8", Offset = "0x48ABF8", VA = "0x48ABF8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000066")]
	public int width
	{
		[Token(Token = "0x6000348")]
		[Address(RVA = "0x48AC00", Offset = "0x48AC00", VA = "0x48AC00")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000067")]
	public int height
	{
		[Token(Token = "0x6000349")]
		[Address(RVA = "0x48AC08", Offset = "0x48AC08", VA = "0x48AC08")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000068")]
	public int advance
	{
		[Token(Token = "0x600034A")]
		[Address(RVA = "0x48AC10", Offset = "0x48AC10", VA = "0x48AC10")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000069")]
	public Rect uvRect
	{
		[Token(Token = "0x600034B")]
		[Address(RVA = "0x48AC18", Offset = "0x48AC18", VA = "0x48AC18")]
		get
		{
			return default(Rect);
		}
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x48ABA8", Offset = "0x48ABA8", VA = "0x48ABA8")]
	public BMSymbol()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x48AC28", Offset = "0x48AC28", VA = "0x48AC28")]
	public void MarkAsChanged()
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x48AC34", Offset = "0x48AC34", VA = "0x48AC34")]
	public bool Validate(INGUIAtlas atlas)
	{
		return default(bool);
	}
}
[Token(Token = "0x200008A")]
public class ByteReader
{
	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private byte[] mBuffer;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int mOffset;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static BetterList<string> mTemp;

	[Token(Token = "0x1700006A")]
	public bool canRead
	{
		[Token(Token = "0x6000351")]
		[Address(RVA = "0x550EAC", Offset = "0x550EAC", VA = "0x550EAC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x550CBC", Offset = "0x550CBC", VA = "0x550CBC")]
	public ByteReader(byte[] bytes)
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x550CDC", Offset = "0x550CDC", VA = "0x550CDC")]
	public ByteReader(TextAsset asset)
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x550D18", Offset = "0x550D18", VA = "0x550D18")]
	public static ByteReader Open(string path)
	{
		return null;
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x550ED4", Offset = "0x550ED4", VA = "0x550ED4")]
	private static string ReadLine(byte[] buffer, int start, int count)
	{
		return null;
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x550F9C", Offset = "0x550F9C", VA = "0x550F9C")]
	public string ReadLine()
	{
		return null;
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x550FA4", Offset = "0x550FA4", VA = "0x550FA4")]
	public string ReadLine(bool skipEmptyLines)
	{
		return null;
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x551134", Offset = "0x551134", VA = "0x551134")]
	public Dictionary<string, string> ReadDictionary()
	{
		return null;
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x551394", Offset = "0x551394", VA = "0x551394")]
	public BetterList<string> ReadCSV()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x200008B")]
public class EventDelegate
{
	[Serializable]
	[Token(Token = "0x200008C")]
	public class Parameter
	{
		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEngine.Object obj;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string field;

		[NonSerialized]
		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private object mValue;

		[NonSerialized]
		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Type expectedType;

		[NonSerialized]
		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool cached;

		[NonSerialized]
		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PropertyInfo propInfo;

		[NonSerialized]
		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FieldInfo fieldInfo;

		[Token(Token = "0x17000070")]
		public object value
		{
			[Token(Token = "0x600037A")]
			[Address(RVA = "0x4B0374", Offset = "0x4B0374", VA = "0x4B0374")]
			get
			{
				return null;
			}
			[Token(Token = "0x600037B")]
			[Address(RVA = "0x4B0714", Offset = "0x4B0714", VA = "0x4B0714")]
			set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public Type type
		{
			[Token(Token = "0x600037C")]
			[Address(RVA = "0x4B0608", Offset = "0x4B0608", VA = "0x4B0608")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x4AF4B4", Offset = "0x4AF4B4", VA = "0x4AF4B4")]
		public Parameter()
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x4B176C", Offset = "0x4B176C", VA = "0x4B176C")]
		public Parameter(UnityEngine.Object obj, string field)
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0x4B1820", Offset = "0x4B1820", VA = "0x4B1820")]
		public Parameter(object val)
		{
		}
	}

	[Token(Token = "0x200008D")]
	public delegate void Callback();

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	private MonoBehaviour mTarget;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private string mMethodName;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private Parameter[] mParameters;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool oneShot;

	[NonSerialized]
	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Callback mCachedCallback;

	[NonSerialized]
	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool mRawDelegate;

	[NonSerialized]
	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool mCached;

	[NonSerialized]
	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MethodInfo mMethod;

	[NonSerialized]
	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private ParameterInfo[] mParameterInfos;

	[NonSerialized]
	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private object[] mArgs;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_Hash;

	[Token(Token = "0x1700006B")]
	public MonoBehaviour target
	{
		[Token(Token = "0x600035B")]
		[Address(RVA = "0x4AE33C", Offset = "0x4AE33C", VA = "0x4AE33C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600035C")]
		[Address(RVA = "0x4AE344", Offset = "0x4AE344", VA = "0x4AE344")]
		set
		{
		}
	}

	[Token(Token = "0x1700006C")]
	public string methodName
	{
		[Token(Token = "0x600035D")]
		[Address(RVA = "0x4AE364", Offset = "0x4AE364", VA = "0x4AE364")]
		get
		{
			return null;
		}
		[Token(Token = "0x600035E")]
		[Address(RVA = "0x4AE36C", Offset = "0x4AE36C", VA = "0x4AE36C")]
		set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public Parameter[] parameters
	{
		[Token(Token = "0x600035F")]
		[Address(RVA = "0x4AE38C", Offset = "0x4AE38C", VA = "0x4AE38C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006E")]
	public bool isValid
	{
		[Token(Token = "0x6000360")]
		[Address(RVA = "0x4AEEEC", Offset = "0x4AEEEC", VA = "0x4AEEEC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700006F")]
	public bool isEnabled
	{
		[Token(Token = "0x6000361")]
		[Address(RVA = "0x4AEFF0", Offset = "0x4AEFF0", VA = "0x4AEFF0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x4AE0F4", Offset = "0x4AE0F4", VA = "0x4AE0F4")]
	public EventDelegate()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x4AE0FC", Offset = "0x4AE0FC", VA = "0x4AE0FC")]
	public EventDelegate(Callback call)
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x4AE2D4", Offset = "0x4AE2D4", VA = "0x4AE2D4")]
	public EventDelegate(MonoBehaviour target, string methodName)
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x4AF120", Offset = "0x4AF120", VA = "0x4AF120")]
	private static string GetMethodName(Callback callback)
	{
		return null;
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x4AF174", Offset = "0x4AF174", VA = "0x4AF174")]
	private static bool IsValid(Callback callback)
	{
		return default(bool);
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x4AF19C", Offset = "0x4AF19C", VA = "0x4AF19C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x4AF400", Offset = "0x4AF400", VA = "0x4AF400", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x4AE124", Offset = "0x4AE124", VA = "0x4AE124")]
	private void Set(Callback call)
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x4AE318", Offset = "0x4AE318", VA = "0x4AE318")]
	public void Set(MonoBehaviour target, string methodName)
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x4AE3B0", Offset = "0x4AE3B0", VA = "0x4AE3B0")]
	private void Cache()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x4AF558", Offset = "0x4AF558", VA = "0x4AF558")]
	public bool Execute()
	{
		return default(bool);
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x4AF48C", Offset = "0x4AF48C", VA = "0x4AF48C")]
	public void Clear()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x4B071C", Offset = "0x4B071C", VA = "0x4B071C", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x4B094C", Offset = "0x4B094C", VA = "0x4B094C")]
	public static void Execute(List<EventDelegate> list)
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x4B0BFC", Offset = "0x4B0BFC", VA = "0x4B0BFC")]
	public static bool IsValid(List<EventDelegate> list)
	{
		return default(bool);
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x4B0CC8", Offset = "0x4B0CC8", VA = "0x4B0CC8")]
	public static EventDelegate Set(List<EventDelegate> list, Callback callback)
	{
		return null;
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x4B0D8C", Offset = "0x4B0D8C", VA = "0x4B0D8C")]
	public static void Set(List<EventDelegate> list, EventDelegate del)
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x4B0E18", Offset = "0x4B0E18", VA = "0x4B0E18")]
	public static EventDelegate Add(List<EventDelegate> list, Callback callback)
	{
		return null;
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x4B0EA4", Offset = "0x4B0EA4", VA = "0x4B0EA4")]
	public static EventDelegate Add(List<EventDelegate> list, Callback callback, bool oneShot)
	{
		return null;
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x4B1030", Offset = "0x4B1030", VA = "0x4B1030")]
	public static void Add(List<EventDelegate> list, EventDelegate ev)
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x4B10D8", Offset = "0x4B10D8", VA = "0x4B10D8")]
	public static void Add(List<EventDelegate> list, EventDelegate ev, bool oneShot)
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x4B1488", Offset = "0x4B1488", VA = "0x4B1488")]
	public static bool Remove(List<EventDelegate> list, Callback callback)
	{
		return default(bool);
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x4B1584", Offset = "0x4B1584", VA = "0x4B1584")]
	public static bool Remove(List<EventDelegate> list, EventDelegate ev)
	{
		return default(bool);
	}
}
[Token(Token = "0x200008E")]
public static class Localization
{
	[Token(Token = "0x200008F")]
	public delegate byte[] LoadFunction(string path);

	[Token(Token = "0x2000090")]
	public delegate void OnLocalizeNotification();

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LoadFunction loadFunction;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static OnLocalizeNotification onLocalize;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool localizationHasBeenSet;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static string[] mLanguages;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<string, string> mOldDictionary;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static Dictionary<string, string[]> mDictionary;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<string, string> mReplacement;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static int mLanguageIndex;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static string mLanguage;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static bool mMerging;

	[Token(Token = "0x17000072")]
	public static Dictionary<string, string[]> dictionary
	{
		[Token(Token = "0x6000381")]
		[Address(RVA = "0x6B2D1C", Offset = "0x6B2D1C", VA = "0x6B2D1C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000382")]
		[Address(RVA = "0x6B331C", Offset = "0x6B331C", VA = "0x6B331C")]
		set
		{
		}
	}

	[Token(Token = "0x17000073")]
	public static string[] knownLanguages
	{
		[Token(Token = "0x6000383")]
		[Address(RVA = "0x6B0F34", Offset = "0x6B0F34", VA = "0x6B0F34")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000384")]
		[Address(RVA = "0x6B33C0", Offset = "0x6B33C0", VA = "0x6B33C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000074")]
	public static string language
	{
		[Token(Token = "0x6000387")]
		[Address(RVA = "0x6B1034", Offset = "0x6B1034", VA = "0x6B1034")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000388")]
		[Address(RVA = "0x6B1284", Offset = "0x6B1284", VA = "0x6B1284")]
		set
		{
		}
	}

	[Token(Token = "0x17000075")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EB10", Offset = "0x23EB10")]
	public static bool isActive
	{
		[Token(Token = "0x600039F")]
		[Address(RVA = "0x6B87FC", Offset = "0x6B87FC", VA = "0x6B87FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x6B3450", Offset = "0x6B3450", VA = "0x6B3450")]
	public static string GetSystemLanguage()
	{
		return null;
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x6B2E1C", Offset = "0x6B2E1C", VA = "0x6B2E1C")]
	public static string GetSystemOrStoredLanguage()
	{
		return null;
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x6B38A4", Offset = "0x6B38A4", VA = "0x6B38A4")]
	public static bool Reload()
	{
		return default(bool);
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x6B2E94", Offset = "0x6B2E94", VA = "0x6B2E94")]
	private static bool LoadDictionary(string value, bool merge = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0x6B3598", Offset = "0x6B3598", VA = "0x6B3598")]
	private static bool LoadAndSelect(string value)
	{
		return default(bool);
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x6B44C8", Offset = "0x6B44C8", VA = "0x6B44C8")]
	public static void Load(TextAsset asset)
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x6B4090", Offset = "0x6B4090", VA = "0x6B4090")]
	public static void Set(string languageName, byte[] bytes)
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0x6B47D0", Offset = "0x6B47D0", VA = "0x6B47D0")]
	public static void ReplaceKey(string key, string val)
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x6B493C", Offset = "0x6B493C", VA = "0x6B493C")]
	public static void ClearReplacements()
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x6B49F0", Offset = "0x6B49F0", VA = "0x6B49F0")]
	public static bool LoadCSV(TextAsset asset, bool merge = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x6B4008", Offset = "0x6B4008", VA = "0x6B4008")]
	public static bool LoadCSV(byte[] bytes, bool merge = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x6B5B68", Offset = "0x6B5B68", VA = "0x6B5B68")]
	private static bool HasLanguage(string languageName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x6B4A98", Offset = "0x6B4A98", VA = "0x6B4A98")]
	private static bool LoadCSV(byte[] bytes, TextAsset asset, bool merge = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x6B5CF4", Offset = "0x6B5CF4", VA = "0x6B5CF4")]
	private static void AddCSV(BetterList<string> newValues, string[] newLanguages, Dictionary<string, int> languageIndices)
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x6B6140", Offset = "0x6B6140", VA = "0x6B6140")]
	private static string[] ExtractStrings(BetterList<string> added, string[] newLanguages, Dictionary<string, int> languageIndices)
	{
		return null;
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x6B415C", Offset = "0x6B415C", VA = "0x6B415C")]
	private static bool SelectLanguage(string language)
	{
		return default(bool);
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x6B45B0", Offset = "0x6B45B0", VA = "0x6B45B0")]
	public static void Set(string languageName, Dictionary<string, string> dictionary)
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x6B65C4", Offset = "0x6B65C4", VA = "0x6B65C4")]
	public static void Set(string key, string value)
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x6B676C", Offset = "0x6B676C", VA = "0x6B676C")]
	public static bool Has(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x6B7114", Offset = "0x6B7114", VA = "0x6B7114")]
	public static string Get(string key, bool warnIfMissing = true)
	{
		return null;
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x6B7E88", Offset = "0x6B7E88", VA = "0x6B7E88")]
	public static string Format(string key, object parameter)
	{
		return null;
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x6B8068", Offset = "0x6B8068", VA = "0x6B8068")]
	public static string Format(string key, object arg0, object arg1)
	{
		return null;
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x6B8250", Offset = "0x6B8250", VA = "0x6B8250")]
	public static string Format(string key, object arg0, object arg1, object arg2)
	{
		return null;
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x6B844C", Offset = "0x6B844C", VA = "0x6B844C")]
	public static string Format(string key, params object[] parameters)
	{
		return null;
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x6B8804", Offset = "0x6B8804", VA = "0x6B8804")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23C640", Offset = "0x23C640")]
	public static string Localize(string key)
	{
		return null;
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x6B8888", Offset = "0x6B8888", VA = "0x6B8888")]
	public static bool Exists(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x6B8B70", Offset = "0x6B8B70", VA = "0x6B8B70")]
	public static void Set(string language, string key, string text)
	{
	}
}
[Token(Token = "0x2000091")]
public class MinMaxRangeAttribute : PropertyAttribute
{
	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float minLimit;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float maxLimit;

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x5A9254", Offset = "0x5A9254", VA = "0x5A9254")]
	public MinMaxRangeAttribute(float minLimit, float maxLimit)
	{
	}
}
[Token(Token = "0x2000092")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23492C", Offset = "0x23492C")]
public class NGUIDebug : MonoBehaviour
{
	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool mRayDebug;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static List<string> mLines;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static NGUIDebug mInstance;

	[Token(Token = "0x17000076")]
	public static bool debugRaycast
	{
		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x5B3B24", Offset = "0x5B3B24", VA = "0x5B3B24")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x5B3BB0", Offset = "0x5B3BB0", VA = "0x5B3BB0")]
		set
		{
		}
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x5B3B1C", Offset = "0x5B3B1C", VA = "0x5B3B1C")]
	public NGUIDebug()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0x5B3C8C", Offset = "0x5B3C8C", VA = "0x5B3C8C")]
	public static void CreateInstance()
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0x5B3E38", Offset = "0x5B3E38", VA = "0x5B3E38")]
	private static void LogString(string text)
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x5B4028", Offset = "0x5B4028", VA = "0x5B4028")]
	public static void Log(params object[] objs)
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x5B41EC", Offset = "0x5B41EC", VA = "0x5B41EC")]
	public static void Log(string s)
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x5B4368", Offset = "0x5B4368", VA = "0x5B4368")]
	public static void Clear()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x5B441C", Offset = "0x5B441C", VA = "0x5B441C")]
	public static void DrawBounds(Bounds b)
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x5B47F4", Offset = "0x5B47F4", VA = "0x5B47F4")]
	private void OnGUI()
	{
	}
}
[Token(Token = "0x2000093")]
public static class NGUIMath
{
	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x5B99A8", Offset = "0x5B99A8", VA = "0x5B99A8")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static float Lerp(float from, float to, float factor)
	{
		return default(float);
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x5B99D0", Offset = "0x5B99D0", VA = "0x5B99D0")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static int ClampIndex(int val, int max)
	{
		return default(int);
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x5B99E8", Offset = "0x5B99E8", VA = "0x5B99E8")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static int RepeatIndex(int val, int max)
	{
		return default(int);
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x5B9A18", Offset = "0x5B9A18", VA = "0x5B9A18")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static float WrapAngle(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x5B9A7C", Offset = "0x5B9A7C", VA = "0x5B9A7C")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static float Wrap01(float val)
	{
		return default(float);
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x5B9B1C", Offset = "0x5B9B1C", VA = "0x5B9B1C")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static int HexToDecimal(char ch)
	{
		return default(int);
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x5B9C50", Offset = "0x5B9C50", VA = "0x5B9C50")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static char DecimalToHexChar(int num)
	{
		return default(char);
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x5B9C70", Offset = "0x5B9C70", VA = "0x5B9C70")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static string DecimalToHex8(int num)
	{
		return null;
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x5B9CEC", Offset = "0x5B9CEC", VA = "0x5B9CEC")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static string DecimalToHex24(int num)
	{
		return null;
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x5B9D68", Offset = "0x5B9D68", VA = "0x5B9D68")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static string DecimalToHex32(int num)
	{
		return null;
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x5B9DD8", Offset = "0x5B9DD8", VA = "0x5B9DD8")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static int ColorToInt(Color c)
	{
		return default(int);
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x5B9ED8", Offset = "0x5B9ED8", VA = "0x5B9ED8")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static Color IntToColor(int val)
	{
		return default(Color);
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x5B9F48", Offset = "0x5B9F48", VA = "0x5B9F48")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static string IntToBinary(int val, int bits)
	{
		return null;
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0x5BA0E4", Offset = "0x5BA0E4", VA = "0x5BA0E4")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static Color HexToColor(uint val)
	{
		return default(Color);
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x5B8F4C", Offset = "0x5B8F4C", VA = "0x5B8F4C")]
	public static Rect ConvertToTexCoords(Rect rect, int width, int height)
	{
		return default(Rect);
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x5B8BEC", Offset = "0x5B8BEC", VA = "0x5B8BEC")]
	public static Rect ConvertToPixels(Rect rect, int width, int height, bool round)
	{
		return default(Rect);
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x5BA0F4", Offset = "0x5BA0F4", VA = "0x5BA0F4")]
	public static Rect MakePixelPerfect(Rect rect)
	{
		return default(Rect);
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x5BA248", Offset = "0x5BA248", VA = "0x5BA248")]
	public static Rect MakePixelPerfect(Rect rect, int width, int height)
	{
		return default(Rect);
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x5BA3F0", Offset = "0x5BA3F0", VA = "0x5BA3F0")]
	public static Vector2 ConstrainRect(Vector2 minRect, Vector2 maxRect, Vector2 minArea, Vector2 maxArea)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x5BA588", Offset = "0x5BA588", VA = "0x5BA588")]
	public static Bounds CalculateAbsoluteWidgetBounds(Transform trans)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x5BA9C0", Offset = "0x5BA9C0", VA = "0x5BA9C0")]
	public static Bounds CalculateRelativeWidgetBounds(Transform trans)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x5BAD4C", Offset = "0x5BAD4C", VA = "0x5BAD4C")]
	public static Bounds CalculateRelativeWidgetBounds(Transform trans, bool considerInactive)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x5BAD74", Offset = "0x5BAD74", VA = "0x5BAD74")]
	public static Bounds CalculateRelativeWidgetBounds(Transform relativeTo, Transform content)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x5BAA34", Offset = "0x5BAA34", VA = "0x5BAA34")]
	public static Bounds CalculateRelativeWidgetBounds(Transform relativeTo, Transform content, bool considerInactive, bool considerChildren = true)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0x5BADEC", Offset = "0x5BADEC", VA = "0x5BADEC")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	private static void CalculateRelativeWidgetBounds(Transform content, bool considerInactive, bool isRoot, ref Matrix4x4 toLocal, ref Vector3 vMin, ref Vector3 vMax, ref bool isSet, bool considerChildren)
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0x5BB340", Offset = "0x5BB340", VA = "0x5BB340")]
	public static Vector3 SpringDampen(ref Vector3 velocity, float strength, float deltaTime)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0x5BB4E8", Offset = "0x5BB4E8", VA = "0x5BB4E8")]
	public static Vector2 SpringDampen(ref Vector2 velocity, float strength, float deltaTime)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x5BB680", Offset = "0x5BB680", VA = "0x5BB680")]
	public static float SpringLerp(float strength, float deltaTime)
	{
		return default(float);
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0x5BB7A4", Offset = "0x5BB7A4", VA = "0x5BB7A4")]
	public static float SpringLerp(float from, float to, float strength, float deltaTime)
	{
		return default(float);
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0x5BB8C4", Offset = "0x5BB8C4", VA = "0x5BB8C4")]
	public static Vector2 SpringLerp(Vector2 from, Vector2 to, float strength, float deltaTime)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x5BB99C", Offset = "0x5BB99C", VA = "0x5BB99C")]
	public static Vector3 SpringLerp(Vector3 from, Vector3 to, float strength, float deltaTime)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x5BBA8C", Offset = "0x5BBA8C", VA = "0x5BBA8C")]
	public static Quaternion SpringLerp(Quaternion from, Quaternion to, float strength, float deltaTime)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x5BBB88", Offset = "0x5BBB88", VA = "0x5BBB88")]
	public static float RotateTowards(float from, float to, float maxAngle)
	{
		return default(float);
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x5BBCC8", Offset = "0x5BBCC8", VA = "0x5BBCC8")]
	private static float DistancePointToLineSegment(Vector2 point, Vector2 a, Vector2 b)
	{
		return default(float);
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x5BBFE8", Offset = "0x5BBFE8", VA = "0x5BBFE8")]
	public static float DistanceToRectangle(Vector2[] screenPoints, Vector2 mousePos)
	{
		return default(float);
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x5BC32C", Offset = "0x5BC32C", VA = "0x5BC32C")]
	public static float DistanceToRectangle(Vector3[] worldPoints, Vector2 mousePos, Camera cam)
	{
		return default(float);
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x5BC4D8", Offset = "0x5BC4D8", VA = "0x5BC4D8")]
	public static Vector2 GetPivotOffset(UIWidget.Pivot pv)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x5BC5C8", Offset = "0x5BC5C8", VA = "0x5BC5C8")]
	public static UIWidget.Pivot GetPivot(Vector2 offset)
	{
		return default(UIWidget.Pivot);
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x5BC664", Offset = "0x5BC664", VA = "0x5BC664")]
	public static void MoveWidget(UIRect w, float x, float y)
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x5BC668", Offset = "0x5BC668", VA = "0x5BC668")]
	public static void MoveRect(UIRect rect, float x, float y)
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x5BCA8C", Offset = "0x5BCA8C", VA = "0x5BCA8C")]
	public static void ResizeWidget(UIWidget w, UIWidget.Pivot pivot, float x, float y, int minWidth, int minHeight)
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x5BCAC0", Offset = "0x5BCAC0", VA = "0x5BCAC0")]
	public static void ResizeWidget(UIWidget w, UIWidget.Pivot pivot, float x, float y, int minWidth, int minHeight, int maxWidth, int maxHeight)
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x5BDC50", Offset = "0x5BDC50", VA = "0x5BDC50")]
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top)
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0x5BCE9C", Offset = "0x5BCE9C", VA = "0x5BCE9C")]
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top, int minWidth, int minHeight)
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0x5BCED8", Offset = "0x5BCED8", VA = "0x5BCED8")]
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top, int minWidth, int minHeight, int maxWidth, int maxHeight)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x5BDC8C", Offset = "0x5BDC8C", VA = "0x5BDC8C")]
	public static int AdjustByDPI(float height)
	{
		return default(int);
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x5BDD6C", Offset = "0x5BDD6C", VA = "0x5BDD6C")]
	public static Vector2 ScreenToPixels(Vector2 pos, Transform relativeTo)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0x5BDFF0", Offset = "0x5BDFF0", VA = "0x5BDFF0")]
	public static Vector2 ScreenToParentPixels(Vector2 pos, Transform relativeTo)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x5BE37C", Offset = "0x5BE37C", VA = "0x5BE37C")]
	public static Vector3 WorldToLocalPoint(Vector3 worldPos, Camera worldCam, Camera uiCam, Transform relativeTo)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x5BE538", Offset = "0x5BE538", VA = "0x5BE538")]
	public static void OverlayPosition(this Transform trans, Vector3 worldPos, Camera worldCam, Camera myCam)
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x5BE6DC", Offset = "0x5BE6DC", VA = "0x5BE6DC")]
	public static void OverlayPosition(this Transform trans, Vector3 worldPos, Camera worldCam)
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x5BE818", Offset = "0x5BE818", VA = "0x5BE818")]
	public static void OverlayPosition(this Transform trans, Transform target)
	{
	}
}
[Token(Token = "0x2000094")]
public static class NGUIText
{
	[Token(Token = "0x2000095")]
	[DoNotObfuscateNGUI]
	public enum Alignment
	{
		[Token(Token = "0x400037C")]
		Automatic,
		[Token(Token = "0x400037D")]
		Left,
		[Token(Token = "0x400037E")]
		Center,
		[Token(Token = "0x400037F")]
		Right,
		[Token(Token = "0x4000380")]
		Justified
	}

	[Token(Token = "0x2000096")]
	[DoNotObfuscateNGUI]
	public enum SymbolStyle
	{
		[Token(Token = "0x4000382")]
		None,
		[Token(Token = "0x4000383")]
		Normal,
		[Token(Token = "0x4000384")]
		Colored,
		[Token(Token = "0x4000385")]
		NoOutline
	}

	[Token(Token = "0x2000097")]
	public class GlyphInfo
	{
		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 v0;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 v1;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 u0;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 u1;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 u2;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 u3;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float advance;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int channel;

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x6E03C0", Offset = "0x6E03C0", VA = "0x6E03C0")]
		public GlyphInfo()
		{
		}
	}

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static INGUIFont bitmapFont;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static Font dynamicFont;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static GlyphInfo glyph;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int fontSize;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static float fontScale;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static float pixelDensity;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static FontStyle fontStyle;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static Alignment alignment;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Color tint;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static int rectWidth;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public static int rectHeight;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static int regionWidth;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public static int regionHeight;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static int maxLines;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public static bool gradient;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Color gradientBottom;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Color gradientTop;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static bool encoding;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public static float spacingX;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static float spacingY;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public static bool premultiply;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static SymbolStyle symbolStyle;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public static int finalSize;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static float finalSpacingX;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public static float finalLineHeight;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static float baseline;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public static bool useSymbols;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static Color mInvisible;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static BetterList<Color> mColors;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private static float mAlpha;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static CharacterInfo mTempChar;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private static BetterList<float> mSizes;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private static Color s_c0;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private static Color s_c1;

	[Token(Token = "0x4000377")]
	private const float sizeShrinkage = 0.75f;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private static float[] mBoldOffset;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2395C4", Offset = "0x2395C4")]
	private static Dictionary<string, int> <>f__switch$map0;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2395D4", Offset = "0x2395D4")]
	private static Dictionary<string, int> <>f__switch$map1;

	[Token(Token = "0x17000077")]
	public static bool isDynamic
	{
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x5BF918", Offset = "0x5BF918", VA = "0x5BF918")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x5BF9B0", Offset = "0x5BF9B0", VA = "0x5BF9B0")]
	public static void Update()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x5BFA2C", Offset = "0x5BFA2C", VA = "0x5BFA2C")]
	public static void Update(bool request)
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x5C00D0", Offset = "0x5C00D0", VA = "0x5C00D0")]
	public static void Prepare(string text)
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x5C0264", Offset = "0x5C0264", VA = "0x5C0264")]
	public static BMSymbol GetSymbol(string text, int index, int textLength)
	{
		return null;
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x5C03F4", Offset = "0x5C03F4", VA = "0x5C03F4")]
	public static float GetGlyphWidth(int ch, int prev, float fontScale)
	{
		return default(float);
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x5C07C8", Offset = "0x5C07C8", VA = "0x5C07C8")]
	public static GlyphInfo GetGlyph(int ch, int prev, float fontScale = 1f)
	{
		return null;
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x5C199C", Offset = "0x5C199C", VA = "0x5C199C")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static float ParseAlpha(string text, int index)
	{
		return default(float);
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x5C1A8C", Offset = "0x5C1A8C", VA = "0x5C1A8C")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static Color ParseColor(string text, int offset = 0)
	{
		return default(Color);
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x5C1B1C", Offset = "0x5C1B1C", VA = "0x5C1B1C")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static Color ParseColor24(string text, int offset = 0)
	{
		return default(Color);
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x5C1C84", Offset = "0x5C1C84", VA = "0x5C1C84")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static Color ParseColor32(string text, int offset)
	{
		return default(Color);
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x5C1E54", Offset = "0x5C1E54", VA = "0x5C1E54")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static string EncodeColor(Color c)
	{
		return null;
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x5C1F1C", Offset = "0x5C1F1C", VA = "0x5C1F1C")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public static string EncodeColor(string text, Color c)
	{
		return null;
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0x5C2214", Offset = "0x5C2214", VA = "0x5C2214")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static string EncodeAlpha(float a)
	{
		return null;
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x5C1EFC", Offset = "0x5C1EFC", VA = "0x5C1EFC")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static string EncodeColor24(Color c)
	{
		return null;
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x5C22C4", Offset = "0x5C22C4", VA = "0x5C22C4")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static string EncodeColor32(Color c)
	{
		return null;
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x5C22E0", Offset = "0x5C22E0", VA = "0x5C22E0")]
	public static bool ParseSymbol(string text, ref int index)
	{
		return default(bool);
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x5C3AEC", Offset = "0x5C3AEC", VA = "0x5C3AEC")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static bool IsHex(char ch)
	{
		return default(bool);
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x5C23C4", Offset = "0x5C23C4", VA = "0x5C23C4")]
	public static bool ParseSymbol(string text, ref int index, BetterList<Color> colors, bool premultiply, ref int sub, ref bool bold, ref bool italic, ref bool underline, ref bool strike, ref bool ignoreColor)
	{
		return default(bool);
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x5C3B28", Offset = "0x5C3B28", VA = "0x5C3B28")]
	public static string StripSymbols(string text)
	{
		return null;
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x5C3CF4", Offset = "0x5C3CF4", VA = "0x5C3CF4")]
	public static void Align(List<Vector3> verts, int indexOffset, float printedWidth, int elements = 4)
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x5C49A0", Offset = "0x5C49A0", VA = "0x5C49A0")]
	public static int GetExactCharacterIndex(List<Vector3> verts, List<int> indices, Vector2 pos)
	{
		return default(int);
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x5C4BC0", Offset = "0x5C4BC0", VA = "0x5C4BC0")]
	public static int GetApproximateCharacterIndex(List<Vector3> verts, List<int> indices, Vector2 pos)
	{
		return default(int);
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x5C4DE0", Offset = "0x5C4DE0", VA = "0x5C4DE0")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static bool IsSpace(int ch)
	{
		return default(bool);
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x5C4E04", Offset = "0x5C4E04", VA = "0x5C4E04")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static void EndLine(ref StringBuilder s)
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x5C4F38", Offset = "0x5C4F38", VA = "0x5C4F38")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	private static void ReplaceSpaceWithNewline(ref StringBuilder s)
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x5C5048", Offset = "0x5C5048", VA = "0x5C5048")]
	public static Vector2 CalculatePrintedSize(string text)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x5C5A68", Offset = "0x5C5A68", VA = "0x5C5A68")]
	public static int CalculateOffsetToFit(string text)
	{
		return default(int);
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x5C629C", Offset = "0x5C629C", VA = "0x5C629C")]
	public static string GetEndOfLineThatFits(string text)
	{
		return null;
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x5C6364", Offset = "0x5C6364", VA = "0x5C6364")]
	public static bool WrapText(string text, out string finalText, bool wrapLineColors = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x5C6408", Offset = "0x5C6408", VA = "0x5C6408")]
	public static bool WrapText(string text, out string finalText, bool keepCharCount, bool wrapLineColors, bool useEllipsis = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x5C87FC", Offset = "0x5C87FC", VA = "0x5C87FC")]
	public static void Print(string text, List<Vector3> verts, List<Vector2> uvs, List<Color> cols)
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x5CBE5C", Offset = "0x5CBE5C", VA = "0x5CBE5C")]
	public static void PrintApproximateCharacterPositions(string text, List<Vector3> verts, List<int> indices)
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0x5CCB68", Offset = "0x5CCB68", VA = "0x5CCB68")]
	public static void PrintExactCharacterPositions(string text, List<Vector3> verts, List<int> indices)
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0x5CD878", Offset = "0x5CD878", VA = "0x5CD878")]
	public static void PrintCaretAndSelection(string text, int start, int end, List<Vector3> caret, List<Vector3> highlight)
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0x5CEFA4", Offset = "0x5CEFA4", VA = "0x5CEFA4")]
	public static bool ReplaceLink(ref string text, ref int index, string type, [Optional] string prefix, [Optional] string suffix)
	{
		return default(bool);
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0x5CF8B8", Offset = "0x5CF8B8", VA = "0x5CF8B8")]
	public static bool InsertHyperlink(ref string text, ref int index, string keyword, string link, [Optional] string prefix, [Optional] string suffix)
	{
		return default(bool);
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x5CFE0C", Offset = "0x5CFE0C", VA = "0x5CFE0C")]
	public static void ReplaceLinks(ref string text, [Optional] string prefix, [Optional] string suffix)
	{
	}
}
[Token(Token = "0x2000098")]
public class DoNotObfuscateNGUI : Attribute
{
	[Token(Token = "0x6000414")]
	[Address(RVA = "0x49DAB8", Offset = "0x49DAB8", VA = "0x49DAB8")]
	public DoNotObfuscateNGUI()
	{
	}
}
[Token(Token = "0x2000099")]
public static class NGUITools
{
	[Token(Token = "0x200009A")]
	public delegate void OnInitFunc<T>(T w) where T : UIWidget;

	[NonSerialized]
	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AudioListener mListener;

	[NonSerialized]
	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static AudioSource audioSource;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool mLoaded;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static float mGlobalVolume;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static float mLastTimestamp;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static AudioClip mLastClip;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<Type, string> mTypeNames;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static Vector3[] mSides;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static KeyCode[] keys;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static Dictionary<string, UIWidget> mWidgets;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static UIPanel mRoot;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private static GameObject mGo;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static ColorSpace mColorSpace;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2395E4", Offset = "0x2395E4")]
	private static Comparison<UIWidget> <>f__mg$cache0;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2395F4", Offset = "0x2395F4")]
	private static Comparison<UIPanel> <>f__mg$cache1;

	[Token(Token = "0x17000078")]
	public static float soundVolume
	{
		[Token(Token = "0x6000415")]
		[Address(RVA = "0x6E03C8", Offset = "0x6E03C8", VA = "0x6E03C8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000416")]
		[Address(RVA = "0x6E0500", Offset = "0x6E0500", VA = "0x6E0500")]
		set
		{
		}
	}

	[Token(Token = "0x17000079")]
	public static bool fileAccess
	{
		[Token(Token = "0x6000417")]
		[Address(RVA = "0x6E0608", Offset = "0x6E0608", VA = "0x6E0608")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007A")]
	public static string clipboard
	{
		[Token(Token = "0x6000466")]
		[Address(RVA = "0x6E9A58", Offset = "0x6E9A58", VA = "0x6E9A58")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000467")]
		[Address(RVA = "0x6E9B00", Offset = "0x6E9B00", VA = "0x6E9B00")]
		set
		{
		}
	}

	[Token(Token = "0x1700007B")]
	public static Vector2 screenSize
	{
		[Token(Token = "0x6000478")]
		[Address(RVA = "0x6EAB24", Offset = "0x6EAB24", VA = "0x6EAB24")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x6E062C", Offset = "0x6E062C", VA = "0x6E062C")]
	public static AudioSource PlaySound(AudioClip clip)
	{
		return null;
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0x6E11D0", Offset = "0x6E11D0", VA = "0x6E11D0")]
	public static AudioSource PlaySound(AudioClip clip, float volume)
	{
		return null;
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x6E06B4", Offset = "0x6E06B4", VA = "0x6E06B4")]
	public static AudioSource PlaySound(AudioClip clip, float volume, float pitch)
	{
		return null;
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0x6E13FC", Offset = "0x6E13FC", VA = "0x6E13FC")]
	public static int RandomRange(int min, int max)
	{
		return default(int);
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0x6E1410", Offset = "0x6E1410", VA = "0x6E1410")]
	public static string GetHierarchy(GameObject obj)
	{
		return null;
	}

	[Token(Token = "0x600041D")]
	public static T[] FindActive<T>() where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0x6E1664", Offset = "0x6E1664", VA = "0x6E1664")]
	public static Camera FindCameraForLayer(int layer)
	{
		return null;
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0x6E19C8", Offset = "0x6E19C8", VA = "0x6E19C8")]
	public static void AddWidgetCollider(GameObject go)
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0x6E1A4C", Offset = "0x6E1A4C", VA = "0x6E1A4C")]
	public static void AddWidgetCollider(GameObject go, bool considerInactive)
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0x6E2C74", Offset = "0x6E2C74", VA = "0x6E2C74")]
	public static void UpdateWidgetCollider(GameObject go)
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0x6E2CF8", Offset = "0x6E2CF8", VA = "0x6E2CF8")]
	public static void UpdateWidgetCollider(GameObject go, bool considerInactive)
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x6E1F70", Offset = "0x6E1F70", VA = "0x6E1F70")]
	public static void UpdateWidgetCollider(BoxCollider box, bool considerInactive)
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x6E2EE4", Offset = "0x6E2EE4", VA = "0x6E2EE4")]
	public static void UpdateWidgetCollider(UIWidget w)
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x6E3084", Offset = "0x6E3084", VA = "0x6E3084")]
	public static void UpdateWidgetCollider(UIWidget w, BoxCollider box)
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x6E36B0", Offset = "0x6E36B0", VA = "0x6E36B0")]
	public static void UpdateWidgetCollider(UIWidget w, BoxCollider2D box)
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x6E249C", Offset = "0x6E249C", VA = "0x6E249C")]
	public static void UpdateWidgetCollider(BoxCollider2D box, bool considerInactive)
	{
	}

	[Token(Token = "0x6000428")]
	public static string GetTypeName<T>()
	{
		return null;
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x6E3D04", Offset = "0x6E3D04", VA = "0x6E3D04")]
	public static string GetTypeName(UnityEngine.Object obj)
	{
		return null;
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x6E3EAC", Offset = "0x6E3EAC", VA = "0x6E3EAC")]
	public static void RegisterUndo(UnityEngine.Object obj, string name)
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x6E3D00", Offset = "0x6E3D00", VA = "0x6E3D00")]
	public static void SetDirty(UnityEngine.Object obj, string undoName = "last change")
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x6E3EB0", Offset = "0x6E3EB0", VA = "0x6E3EB0")]
	public static void CheckForPrefabStage(GameObject gameObject)
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x6E3EB4", Offset = "0x6E3EB4", VA = "0x6E3EB4")]
	public static GameObject AddChild(GameObject parent)
	{
		return null;
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0x6E41C0", Offset = "0x6E41C0", VA = "0x6E41C0")]
	public static GameObject AddChild(this GameObject parent, int layer)
	{
		return null;
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0x6E424C", Offset = "0x6E424C", VA = "0x6E424C")]
	public static GameObject AddChild(this GameObject parent, bool undo)
	{
		return null;
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0x6E3F3C", Offset = "0x6E3F3C", VA = "0x6E3F3C")]
	public static GameObject AddChild(this GameObject parent, bool undo, int layer)
	{
		return null;
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0x6E42D4", Offset = "0x6E42D4", VA = "0x6E42D4")]
	public static GameObject AddChild(this Transform parent, GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0x6E44F4", Offset = "0x6E44F4", VA = "0x6E44F4")]
	public static GameObject AddChild(this GameObject parent, GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0x6E4580", Offset = "0x6E4580", VA = "0x6E4580")]
	public static GameObject AddChild(this GameObject parent, GameObject prefab, int layer)
	{
		return null;
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x6E4888", Offset = "0x6E4888", VA = "0x6E4888")]
	public static int CalculateRaycastDepth(GameObject go)
	{
		return default(int);
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x6E4AB8", Offset = "0x6E4AB8", VA = "0x6E4AB8")]
	public static int CalculateNextDepth(GameObject go)
	{
		return default(int);
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x6E4C40", Offset = "0x6E4C40", VA = "0x6E4C40")]
	public static int CalculateNextDepth(GameObject go, bool ignoreChildrenWithColliders)
	{
		return default(int);
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x6E4F88", Offset = "0x6E4F88", VA = "0x6E4F88")]
	public static int AdjustDepth(GameObject go, int adjustment)
	{
		return default(int);
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x6E5304", Offset = "0x6E5304", VA = "0x6E5304")]
	public static void BringForward(GameObject go)
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x6E5764", Offset = "0x6E5764", VA = "0x6E5764")]
	public static void PushBack(GameObject go)
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x6E5860", Offset = "0x6E5860", VA = "0x6E5860")]
	public static void NormalizeDepths()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x6E56D8", Offset = "0x6E56D8", VA = "0x6E56D8")]
	public static void NormalizeWidgetDepths()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x6E5B78", Offset = "0x6E5B78", VA = "0x6E5B78")]
	public static void NormalizeWidgetDepths(GameObject go)
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x6E58DC", Offset = "0x6E58DC", VA = "0x6E58DC")]
	public static void NormalizeWidgetDepths(UIWidget[] list)
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x6E53FC", Offset = "0x6E53FC", VA = "0x6E53FC")]
	public static void NormalizePanelDepths()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x6E5C24", Offset = "0x6E5C24", VA = "0x6E5C24")]
	public static UIPanel CreateUI(bool advanced3D)
	{
		return null;
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x6E6EA0", Offset = "0x6E6EA0", VA = "0x6E6EA0")]
	public static UIPanel CreateUI(bool advanced3D, int layer)
	{
		return null;
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x6E5CAC", Offset = "0x6E5CAC", VA = "0x6E5CAC")]
	public static UIPanel CreateUI(Transform trans, bool advanced3D, int layer)
	{
		return null;
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x6E6F60", Offset = "0x6E6F60", VA = "0x6E6F60")]
	public static void SetChildLayer(this Transform t, int layer)
	{
	}

	[Token(Token = "0x6000443")]
	public static T AddChild<T>(this GameObject parent) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000444")]
	public static T AddChild<T>(this GameObject parent, bool undo) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000445")]
	public static T AddWidget<T>(this GameObject go, int depth = int.MaxValue) where T : UIWidget
	{
		return null;
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x6E707C", Offset = "0x6E707C", VA = "0x6E707C")]
	public static UISprite AddSprite(this GameObject go, INGUIAtlas atlas, string spriteName, int depth = int.MaxValue)
	{
		return null;
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x6E7260", Offset = "0x6E7260", VA = "0x6E7260")]
	public static GameObject GetRoot(GameObject go)
	{
		return null;
	}

	[Token(Token = "0x6000448")]
	public static T FindInParents<T>(GameObject go) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000449")]
	public static T FindInParents<T>(Transform trans) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x6E7350", Offset = "0x6E7350", VA = "0x6E7350")]
	public static void Destroy(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x6E75F4", Offset = "0x6E75F4", VA = "0x6E75F4")]
	public static void DestroyChildren(this Transform t)
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x6E7764", Offset = "0x6E7764", VA = "0x6E7764")]
	public static void DestroyImmediate(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x6E786C", Offset = "0x6E786C", VA = "0x6E786C")]
	public static void Broadcast(string funcName)
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x6E79D0", Offset = "0x6E79D0", VA = "0x6E79D0")]
	public static void Broadcast(string funcName, object param)
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x6E6F2C", Offset = "0x6E6F2C", VA = "0x6E6F2C")]
	public static bool IsChild(Transform parent, Transform child)
	{
		return default(bool);
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x6E7B48", Offset = "0x6E7B48", VA = "0x6E7B48")]
	private static void Activate(Transform t)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x6E7BCC", Offset = "0x6E7BCC", VA = "0x6E7BCC")]
	private static void Activate(Transform t, bool compatibilityMode)
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x6E7DE4", Offset = "0x6E7DE4", VA = "0x6E7DE4")]
	private static void Deactivate(Transform t)
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x6E7E9C", Offset = "0x6E7E9C", VA = "0x6E7E9C")]
	public static void SetActive(GameObject go, bool state)
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x6E7F28", Offset = "0x6E7F28", VA = "0x6E7F28")]
	public static void SetActive(GameObject go, bool state, bool compatibilityMode)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x6E8064", Offset = "0x6E8064", VA = "0x6E8064")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	private static void CallCreatePanel(Transform t)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x6E81CC", Offset = "0x6E81CC", VA = "0x6E81CC")]
	public static void SetActiveChildren(GameObject go, bool state)
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x6E8348", Offset = "0x6E8348", VA = "0x6E8348")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23CCEC", Offset = "0x23CCEC")]
	public static bool IsActive(Behaviour mb)
	{
		return default(bool);
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x6E125C", Offset = "0x6E125C", VA = "0x6E125C")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static bool GetActive(Behaviour mb)
	{
		return default(bool);
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x6E1350", Offset = "0x6E1350", VA = "0x6E1350")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static bool GetActive(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0x6E7DB0", Offset = "0x6E7DB0", VA = "0x6E7DB0")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static void SetActiveSelf(GameObject go, bool state)
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x6E8440", Offset = "0x6E8440", VA = "0x6E8440")]
	public static void SetLayer(GameObject go, int layer)
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x6E8590", Offset = "0x6E8590", VA = "0x6E8590")]
	public static Vector3 Round(Vector3 v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x6E8804", Offset = "0x6E8804", VA = "0x6E8804")]
	public static void MakePixelPerfect(Transform t)
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x6E8B38", Offset = "0x6E8B38", VA = "0x6E8B38")]
	public static void FitOnScreen(this Camera cam, Transform t, bool considerInactive = false, bool considerChildren = true)
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x6E8E7C", Offset = "0x6E8E7C", VA = "0x6E8E7C")]
	public static void FitOnScreen(this Camera cam, Transform transform, Vector3 pos)
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x6E8F2C", Offset = "0x6E8F2C", VA = "0x6E8F2C")]
	public static void FitOnScreen(this Camera cam, Transform transform, Transform content, Vector3 pos, bool considerInactive = false)
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x6E9000", Offset = "0x6E9000", VA = "0x6E9000")]
	public static void FitOnScreen(this Camera cam, Transform transform, Transform content, Vector3 pos, out Bounds bounds, bool considerInactive = false)
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x6E9598", Offset = "0x6E9598", VA = "0x6E9598")]
	public static bool Save(string fileName, byte[] bytes)
	{
		return default(bool);
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x6E9818", Offset = "0x6E9818", VA = "0x6E9818")]
	public static byte[] Load(string fileName)
	{
		return null;
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x6E9920", Offset = "0x6E9920", VA = "0x6E9920")]
	public static Color ApplyPMA(Color c)
	{
		return default(Color);
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x6E9964", Offset = "0x6E9964", VA = "0x6E9964")]
	public static void MarkParentAsChanged(GameObject go)
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x6E9BD4", Offset = "0x6E9BD4", VA = "0x6E9BD4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23CE08", Offset = "0x23CE08")]
	public static string EncodeColor(Color c)
	{
		return null;
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x6E9C7C", Offset = "0x6E9C7C", VA = "0x6E9C7C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23CE58", Offset = "0x23CE58")]
	public static Color ParseColor(string text, int offset)
	{
		return default(Color);
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0x6E9D10", Offset = "0x6E9D10", VA = "0x6E9D10")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23CEA4", Offset = "0x23CEA4")]
	public static string StripSymbols(string text)
	{
		return null;
	}

	[Token(Token = "0x600046B")]
	public static T AddMissingComponent<T>(this GameObject go) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0x6E9D94", Offset = "0x6E9D94", VA = "0x6E9D94")]
	public static Vector3[] GetSides(this Camera cam)
	{
		return null;
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x6EA97C", Offset = "0x6EA97C", VA = "0x6EA97C")]
	public static Vector3[] GetSides(this Camera cam, float depth)
	{
		return null;
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0x6EAA08", Offset = "0x6EAA08", VA = "0x6EAA08")]
	public static Vector3[] GetSides(this Camera cam, Transform relativeTo)
	{
		return null;
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0x6E9EAC", Offset = "0x6E9EAC", VA = "0x6E9EAC")]
	public static Vector3[] GetSides(this Camera cam, float depth, Transform relativeTo)
	{
		return null;
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0x6EAB78", Offset = "0x6EAB78", VA = "0x6EAB78")]
	public static Vector3[] GetWorldCorners(this Camera cam)
	{
		return null;
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0x6EB6B8", Offset = "0x6EB6B8", VA = "0x6EB6B8")]
	public static Vector3[] GetWorldCorners(this Camera cam, float depth)
	{
		return null;
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0x6EB744", Offset = "0x6EB744", VA = "0x6EB744")]
	public static Vector3[] GetWorldCorners(this Camera cam, Transform relativeTo)
	{
		return null;
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x6EAC90", Offset = "0x6EAC90", VA = "0x6EAC90")]
	public static Vector3[] GetWorldCorners(this Camera cam, float depth, Transform relativeTo)
	{
		return null;
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x6EB860", Offset = "0x6EB860", VA = "0x6EB860")]
	public static string GetFuncName(object obj, string method)
	{
		return null;
	}

	[Token(Token = "0x6000475")]
	public static void Execute<T>(GameObject go, string funcName) where T : UnityEngine.Component
	{
	}

	[Token(Token = "0x6000476")]
	public static void ExecuteAll<T>(GameObject root, string funcName) where T : UnityEngine.Component
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0x6EB9E4", Offset = "0x6EB9E4", VA = "0x6EB9E4")]
	public static void ImmediatelyCreateDrawCalls(GameObject root)
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0x6EBAE8", Offset = "0x6EBAE8", VA = "0x6EBAE8")]
	public static string KeyToCaption(KeyCode key)
	{
		return null;
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0x6EC830", Offset = "0x6EC830", VA = "0x6EC830")]
	public static KeyCode CaptionToKey(string caption)
	{
		return default(KeyCode);
	}

	[Token(Token = "0x600047B")]
	public static T Draw<T>(string id, [Optional] OnInitFunc<T> onInit) where T : UIWidget
	{
		return null;
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0x6EF95C", Offset = "0x6EF95C", VA = "0x6EF95C")]
	public static Color GammaToLinearSpace(this Color c)
	{
		return default(Color);
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0x6EFB34", Offset = "0x6EFB34", VA = "0x6EFB34")]
	public static Color LinearToGammaSpace(this Color c)
	{
		return default(Color);
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0x6EFD0C", Offset = "0x6EFD0C", VA = "0x6EFD0C")]
	public static bool CheckIfRelated(INGUIAtlas a, INGUIAtlas b)
	{
		return default(bool);
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0x6EFE80", Offset = "0x6EFE80", VA = "0x6EFE80")]
	public static void Replace(INGUIAtlas before, INGUIAtlas after)
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0x6F0224", Offset = "0x6F0224", VA = "0x6F0224")]
	public static bool CheckIfRelated(INGUIFont a, INGUIFont b)
	{
		return default(bool);
	}
}
[Token(Token = "0x200009B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2349AC", Offset = "0x2349AC")]
[ExecuteInEditMode]
public class PropertyBinding : MonoBehaviour
{
	[Token(Token = "0x200009C")]
	[DoNotObfuscateNGUI]
	public enum UpdateCondition
	{
		[Token(Token = "0x40003A4")]
		OnStart,
		[Token(Token = "0x40003A5")]
		OnUpdate,
		[Token(Token = "0x40003A6")]
		OnLateUpdate,
		[Token(Token = "0x40003A7")]
		OnFixedUpdate
	}

	[Token(Token = "0x200009D")]
	[DoNotObfuscateNGUI]
	public enum Direction
	{
		[Token(Token = "0x40003A9")]
		SourceUpdatesTarget,
		[Token(Token = "0x40003AA")]
		TargetUpdatesSource,
		[Token(Token = "0x40003AB")]
		BiDirectional
	}

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public PropertyReference source;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PropertyReference target;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Direction direction;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UpdateCondition update;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool editMode;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private object mLastValue;

	[Token(Token = "0x6000486")]
	[Address(RVA = "0x4691B0", Offset = "0x4691B0", VA = "0x4691B0")]
	public PropertyBinding()
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0x4691C4", Offset = "0x4691C4", VA = "0x4691C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0x4693E0", Offset = "0x4693E0", VA = "0x4693E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0x4693F0", Offset = "0x4693F0", VA = "0x4693F0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x469400", Offset = "0x469400", VA = "0x469400")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x469410", Offset = "0x469410", VA = "0x469410")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x4691F4", Offset = "0x4691F4", VA = "0x4691F4")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23CFA4", Offset = "0x23CFA4")]
	public void UpdateTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x200009E")]
public class PropertyReference
{
	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	private UnityEngine.Component mTarget;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private string mName;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private FieldInfo mField;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private PropertyInfo mProperty;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_Hash;

	[Token(Token = "0x1700007C")]
	public UnityEngine.Component target
	{
		[Token(Token = "0x600048F")]
		[Address(RVA = "0x469C08", Offset = "0x469C08", VA = "0x469C08")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000490")]
		[Address(RVA = "0x469C10", Offset = "0x469C10", VA = "0x469C10")]
		set
		{
		}
	}

	[Token(Token = "0x1700007D")]
	public string name
	{
		[Token(Token = "0x6000491")]
		[Address(RVA = "0x469C24", Offset = "0x469C24", VA = "0x469C24")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000492")]
		[Address(RVA = "0x469C2C", Offset = "0x469C2C", VA = "0x469C2C")]
		set
		{
		}
	}

	[Token(Token = "0x1700007E")]
	public bool isValid
	{
		[Token(Token = "0x6000493")]
		[Address(RVA = "0x46944C", Offset = "0x46944C", VA = "0x46944C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007F")]
	public bool isEnabled
	{
		[Token(Token = "0x6000494")]
		[Address(RVA = "0x469C40", Offset = "0x469C40", VA = "0x469C40")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x469BD8", Offset = "0x469BD8", VA = "0x469BD8")]
	public PropertyReference()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x469BE0", Offset = "0x469BE0", VA = "0x469BE0")]
	public PropertyReference(UnityEngine.Component target, string fieldName)
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0x469AD8", Offset = "0x469AD8", VA = "0x469AD8")]
	public Type GetPropertyType()
	{
		return null;
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x469F0C", Offset = "0x469F0C", VA = "0x469F0C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x46A048", Offset = "0x46A048", VA = "0x46A048", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x46A0D4", Offset = "0x46A0D4", VA = "0x46A0D4")]
	public void Set(UnityEngine.Component target, string methodName)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x46A0E0", Offset = "0x46A0E0", VA = "0x46A0E0")]
	public void Clear()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x46943C", Offset = "0x46943C", VA = "0x46943C")]
	public void Reset()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0x46A0F0", Offset = "0x46A0F0", VA = "0x46A0F0", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0x46A17C", Offset = "0x46A17C", VA = "0x46A17C")]
	public static string ToString(UnityEngine.Component comp, string property)
	{
		return null;
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x469528", Offset = "0x469528", VA = "0x469528")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	public object Get()
	{
		return null;
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0x4695E8", Offset = "0x4695E8", VA = "0x4695E8")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public bool Set(object value)
	{
		return default(bool);
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x469D90", Offset = "0x469D90", VA = "0x469D90")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	private bool Cache()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x46A37C", Offset = "0x46A37C", VA = "0x46A37C")]
	private bool Convert(ref object value)
	{
		return default(bool);
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x46ADE8", Offset = "0x46ADE8", VA = "0x46ADE8")]
	public static bool Convert(Type from, Type to)
	{
		return default(bool);
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x46AE84", Offset = "0x46AE84", VA = "0x46AE84")]
	public static bool Convert(object value, Type to)
	{
		return default(bool);
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x46A4A8", Offset = "0x46A4A8", VA = "0x46A4A8")]
	public static bool Convert(ref object value, Type from, Type to)
	{
		return default(bool);
	}
}
[Token(Token = "0x200009F")]
public class RealTime : MonoBehaviour
{
	[Token(Token = "0x17000080")]
	public static float time
	{
		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x46C078", Offset = "0x46C078", VA = "0x46C078")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000081")]
	public static float deltaTime
	{
		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x460D98", Offset = "0x460D98", VA = "0x460D98")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x46C070", Offset = "0x46C070", VA = "0x46C070")]
	public RealTime()
	{
	}
}
[Token(Token = "0x20000A0")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234A2C", Offset = "0x234A2C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x234A2C", Offset = "0x234A2C")]
public class SpringPanel : MonoBehaviour
{
	[Token(Token = "0x20000A1")]
	public delegate void OnFinished();

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SpringPanel current;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 target;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float strength;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public OnFinished onFinished;

	[NonSerialized]
	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UIPanel mPanel;

	[NonSerialized]
	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Transform mTrans;

	[NonSerialized]
	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UIScrollView mDrag;

	[NonSerialized]
	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float mDelta;

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x57F9A0", Offset = "0x57F9A0", VA = "0x57F9A0")]
	public SpringPanel()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x57FA4C", Offset = "0x57FA4C", VA = "0x57FA4C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x57FAE0", Offset = "0x57FAE0", VA = "0x57FAE0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x57FAF0", Offset = "0x57FAF0", VA = "0x57FAF0", Slot = "4")]
	protected virtual void AdvanceTowardsPosition()
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x580318", Offset = "0x580318", VA = "0x580318")]
	public static SpringPanel Begin(GameObject go, Vector3 pos, float strength)
	{
		return null;
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0x58048C", Offset = "0x58048C", VA = "0x58048C")]
	public static SpringPanel Stop(GameObject go)
	{
		return null;
	}
}
[Token(Token = "0x20000A2")]
public abstract class UIBasicSprite : UIWidget
{
	[Token(Token = "0x20000A3")]
	[DoNotObfuscateNGUI]
	public enum Type
	{
		[Token(Token = "0x40003CB")]
		Simple,
		[Token(Token = "0x40003CC")]
		Sliced,
		[Token(Token = "0x40003CD")]
		Tiled,
		[Token(Token = "0x40003CE")]
		Filled,
		[Token(Token = "0x40003CF")]
		Advanced
	}

	[Token(Token = "0x20000A4")]
	[DoNotObfuscateNGUI]
	public enum FillDirection
	{
		[Token(Token = "0x40003D1")]
		Horizontal,
		[Token(Token = "0x40003D2")]
		Vertical,
		[Token(Token = "0x40003D3")]
		Radial90,
		[Token(Token = "0x40003D4")]
		Radial180,
		[Token(Token = "0x40003D5")]
		Radial360
	}

	[Token(Token = "0x20000A5")]
	[DoNotObfuscateNGUI]
	public enum AdvancedType
	{
		[Token(Token = "0x40003D7")]
		Invisible,
		[Token(Token = "0x40003D8")]
		Sliced,
		[Token(Token = "0x40003D9")]
		Tiled
	}

	[Token(Token = "0x20000A6")]
	[DoNotObfuscateNGUI]
	public enum Flip
	{
		[Token(Token = "0x40003DB")]
		Nothing,
		[Token(Token = "0x40003DC")]
		Horizontally,
		[Token(Token = "0x40003DD")]
		Vertically,
		[Token(Token = "0x40003DE")]
		Both
	}

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[HideInInspector]
	[SerializeField]
	protected Type mType;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	[SerializeField]
	[HideInInspector]
	protected FillDirection mFillDirection;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x239684", Offset = "0x239684")]
	[HideInInspector]
	protected float mFillAmount;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	[HideInInspector]
	[SerializeField]
	protected bool mInvert;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[HideInInspector]
	[SerializeField]
	protected Flip mFlip;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[HideInInspector]
	[SerializeField]
	protected bool mApplyGradient;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[HideInInspector]
	[SerializeField]
	protected Color mGradientTop;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	[HideInInspector]
	protected Color mGradientBottom;

	[NonSerialized]
	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	protected Rect mInnerUV;

	[NonSerialized]
	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	protected Rect mOuterUV;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public AdvancedType centerType;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	public AdvancedType leftType;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public AdvancedType rightType;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	public AdvancedType bottomType;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public AdvancedType topType;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static Vector2[] mTempPos;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	protected static Vector2[] mTempUVs;

	[Token(Token = "0x17000082")]
	public virtual Type type
	{
		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xEF0828", Offset = "0xEF0828", VA = "0xEF0828", Slot = "39")]
		get
		{
			return default(Type);
		}
		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xEF0830", Offset = "0xEF0830", VA = "0xEF0830", Slot = "40")]
		set
		{
		}
	}

	[Token(Token = "0x17000083")]
	public Flip flip
	{
		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xEF0850", Offset = "0xEF0850", VA = "0xEF0850")]
		get
		{
			return default(Flip);
		}
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xEF0858", Offset = "0xEF0858", VA = "0xEF0858")]
		set
		{
		}
	}

	[Token(Token = "0x17000084")]
	public FillDirection fillDirection
	{
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xEF0878", Offset = "0xEF0878", VA = "0xEF0878")]
		get
		{
			return default(FillDirection);
		}
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xEF0880", Offset = "0xEF0880", VA = "0xEF0880")]
		set
		{
		}
	}

	[Token(Token = "0x17000085")]
	public float fillAmount
	{
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xEF0898", Offset = "0xEF0898", VA = "0xEF0898")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xEF08A0", Offset = "0xEF08A0", VA = "0xEF08A0")]
		set
		{
		}
	}

	[Token(Token = "0x17000086")]
	public override int minWidth
	{
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xEF0944", Offset = "0xEF0944", VA = "0xEF0944", Slot = "34")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000087")]
	public override int minHeight
	{
		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xEF0B10", Offset = "0xEF0B10", VA = "0xEF0B10", Slot = "35")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000088")]
	public bool invert
	{
		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xEF0CDC", Offset = "0xEF0CDC", VA = "0xEF0CDC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xEF0CE4", Offset = "0xEF0CE4", VA = "0xEF0CE4")]
		set
		{
		}
	}

	[Token(Token = "0x17000089")]
	public bool hasBorder
	{
		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xEF0D04", Offset = "0xEF0D04", VA = "0xEF0D04")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008A")]
	public virtual bool premultipliedAlpha
	{
		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xEF0D8C", Offset = "0xEF0D8C", VA = "0xEF0D8C", Slot = "41")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008B")]
	public virtual float pixelSize
	{
		[Token(Token = "0x60004C1")]
		[Address(RVA = "0xEF0D94", Offset = "0xEF0D94", VA = "0xEF0D94", Slot = "42")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700008C")]
	protected virtual Vector4 padding
	{
		[Token(Token = "0x60004C2")]
		[Address(RVA = "0xEF0D9C", Offset = "0xEF0D9C", VA = "0xEF0D9C", Slot = "43")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x1700008D")]
	protected Vector4 drawingUVs
	{
		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xEF0DD4", Offset = "0xEF0DD4", VA = "0xEF0DD4")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x1700008E")]
	protected Color drawingColor
	{
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xEF0F0C", Offset = "0xEF0F0C", VA = "0xEF0F0C")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xEF0770", Offset = "0xEF0770", VA = "0xEF0770")]
	protected UIBasicSprite()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xEF1008", Offset = "0xEF1008", VA = "0xEF1008")]
	protected void Fill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols, Rect outer, Rect inner)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xEF1198", Offset = "0xEF1198", VA = "0xEF1198")]
	protected void SimpleFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols, ref Vector4 v, ref Vector4 u, ref Color c)
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xEF1608", Offset = "0xEF1608", VA = "0xEF1608")]
	protected void SlicedFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols, ref Vector4 v, ref Vector4 u, ref Color gc)
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xEF83C8", Offset = "0xEF83C8", VA = "0xEF83C8")]
	[DebuggerHidden]
	[DebuggerStepThrough]
	private void AddVertexColours(List<Color> cols, ref Color color, int x, int y)
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xEF50D8", Offset = "0xEF50D8", VA = "0xEF50D8")]
	protected void TiledFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols, ref Vector4 v, ref Color c)
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xEF2E78", Offset = "0xEF2E78", VA = "0xEF2E78")]
	protected void FilledFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols, ref Vector4 v, ref Vector4 u, ref Color c)
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xEF5AD4", Offset = "0xEF5AD4", VA = "0xEF5AD4")]
	protected void AdvancedFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols, ref Vector4 v, ref Vector4 u, ref Color c)
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xEF87F8", Offset = "0xEF87F8", VA = "0xEF87F8")]
	private static bool RadialCut(Vector2[] xy, Vector2[] uv, float fill, bool invert, int corner)
	{
		return default(bool);
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xEF8E24", Offset = "0xEF8E24", VA = "0xEF8E24")]
	private static void RadialCut(Vector2[] xy, float cos, float sin, bool invert, int corner)
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xEF89B0", Offset = "0xEF89B0", VA = "0xEF89B0")]
	private static void Fill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols, float v0x, float v1x, float v0y, float v1y, float u0x, float u1x, float u0y, float u1y, Color col)
	{
	}
}
[Token(Token = "0x20000A7")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234B20", Offset = "0x234B20")]
[ExecuteInEditMode]
public class UIDrawCall : MonoBehaviour
{
	[Token(Token = "0x20000A8")]
	[DoNotObfuscateNGUI]
	public enum Clipping
	{
		[Token(Token = "0x400040C")]
		None = 0,
		[Token(Token = "0x400040D")]
		TextureMask = 1,
		[Token(Token = "0x400040E")]
		SoftClip = 3,
		[Token(Token = "0x400040F")]
		ConstrainButDontClip = 4
	}

	[Token(Token = "0x20000A9")]
	public delegate void OnRenderCallback(Material mat);

	[Token(Token = "0x20000AA")]
	public delegate void OnCreateDrawCall(UIDrawCall dc, MeshFilter filter, MeshRenderer ren);

	[Token(Token = "0x20000AB")]
	[DoNotObfuscateNGUI]
	public enum ShadowMode
	{
		[Token(Token = "0x4000411")]
		None,
		[Token(Token = "0x4000412")]
		Receive,
		[Token(Token = "0x4000413")]
		CastAndReceive
	}

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static BetterList<UIDrawCall> mActiveList;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static BetterList<UIDrawCall> mInactiveList;

	[NonSerialized]
	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[HideInInspector]
	public int widgetCount;

	[NonSerialized]
	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public int depthStart;

	[NonSerialized]
	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public int depthEnd;

	[NonSerialized]
	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public UIPanel manager;

	[NonSerialized]
	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public UIPanel panel;

	[NonSerialized]
	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public Texture2D clipTexture;

	[NonSerialized]
	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public bool alwaysOnScreen;

	[NonSerialized]
	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public List<Vector3> verts;

	[NonSerialized]
	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public List<Vector3> norms;

	[NonSerialized]
	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public List<Vector4> tans;

	[NonSerialized]
	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public List<Vector2> uvs;

	[NonSerialized]
	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public List<Vector4> uv2;

	[NonSerialized]
	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public List<Color> cols;

	[NonSerialized]
	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material mMaterial;

	[NonSerialized]
	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Texture mTexture;

	[NonSerialized]
	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Shader mShader;

	[NonSerialized]
	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int mClipCount;

	[NonSerialized]
	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform mTrans;

	[NonSerialized]
	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Mesh mMesh;

	[NonSerialized]
	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private MeshFilter mFilter;

	[NonSerialized]
	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private MeshRenderer mRenderer;

	[NonSerialized]
	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material mDynamicMat;

	[NonSerialized]
	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int[] mIndices;

	[NonSerialized]
	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ShadowMode mShadowMode;

	[NonSerialized]
	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool mRebuildMat;

	[NonSerialized]
	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	private bool mLegacyShader;

	[NonSerialized]
	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int mRenderQueue;

	[NonSerialized]
	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int mTriangles;

	[NonSerialized]
	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool isDirty;

	[NonSerialized]
	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool mTextureClip;

	[NonSerialized]
	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	private bool mIsNew;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public OnRenderCallback onRender;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public OnCreateDrawCall onCreateDrawCall;

	[NonSerialized]
	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private string mSortingLayerName;

	[NonSerialized]
	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int mSortingOrder;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ColorSpace mColorSpace;

	[Token(Token = "0x4000405")]
	private const int maxIndexBufferCache = 10;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static List<int[]> mCache;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected MaterialPropertyBlock mBlock;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int[] ClipRange;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static int[] ClipArgs;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int dx9BugWorkaround;

	[Token(Token = "0x1700008F")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EB44", Offset = "0x23EB44")]
	public static BetterList<UIDrawCall> list
	{
		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x8928E0", Offset = "0x8928E0", VA = "0x8928E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000090")]
	public static BetterList<UIDrawCall> activeList
	{
		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x89296C", Offset = "0x89296C", VA = "0x89296C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000091")]
	public static BetterList<UIDrawCall> inactiveList
	{
		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x8929F8", Offset = "0x8929F8", VA = "0x8929F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000092")]
	public int renderQueue
	{
		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x892A84", Offset = "0x892A84", VA = "0x892A84")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x892A8C", Offset = "0x892A8C", VA = "0x892A8C")]
		set
		{
		}
	}

	[Token(Token = "0x17000093")]
	public int sortingOrder
	{
		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x892B5C", Offset = "0x892B5C", VA = "0x892B5C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x892B64", Offset = "0x892B64", VA = "0x892B64")]
		set
		{
		}
	}

	[Token(Token = "0x17000094")]
	public string sortingLayerName
	{
		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x892C34", Offset = "0x892C34", VA = "0x892C34")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x892D44", Offset = "0x892D44", VA = "0x892D44")]
		set
		{
		}
	}

	[Token(Token = "0x17000095")]
	public int finalRenderQueue
	{
		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x892E50", Offset = "0x892E50", VA = "0x892E50")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000096")]
	public Transform cachedTransform
	{
		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x892F08", Offset = "0x892F08", VA = "0x892F08")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000097")]
	public Material baseMaterial
	{
		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x892FB0", Offset = "0x892FB0", VA = "0x892FB0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x892FB8", Offset = "0x892FB8", VA = "0x892FB8")]
		set
		{
		}
	}

	[Token(Token = "0x17000098")]
	public Material dynamicMaterial
	{
		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x893058", Offset = "0x893058", VA = "0x893058")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000099")]
	public Texture mainTexture
	{
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x893060", Offset = "0x893060", VA = "0x893060")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x893068", Offset = "0x893068", VA = "0x893068")]
		set
		{
		}
	}

	[Token(Token = "0x1700009A")]
	public Shader shader
	{
		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x893134", Offset = "0x893134", VA = "0x893134")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x89313C", Offset = "0x89313C", VA = "0x89313C")]
		set
		{
		}
	}

	[Token(Token = "0x1700009B")]
	public ShadowMode shadowMode
	{
		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x8931DC", Offset = "0x8931DC", VA = "0x8931DC")]
		get
		{
			return default(ShadowMode);
		}
		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x8931E4", Offset = "0x8931E4", VA = "0x8931E4")]
		set
		{
		}
	}

	[Token(Token = "0x1700009C")]
	public int triangles
	{
		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x893330", Offset = "0x893330", VA = "0x893330")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700009D")]
	public bool isClipped
	{
		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x8933CC", Offset = "0x8933CC", VA = "0x8933CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x892764", Offset = "0x892764", VA = "0x892764")]
	public UIDrawCall()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x8933DC", Offset = "0x8933DC", VA = "0x8933DC")]
	private void CreateMaterial()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x89423C", Offset = "0x89423C", VA = "0x89423C")]
	private Material RebuildMaterial()
	{
		return null;
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x894434", Offset = "0x894434", VA = "0x894434")]
	private void UpdateMaterials()
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x894594", Offset = "0x894594", VA = "0x894594")]
	public void UpdateGeometry(int widgetCount, bool needsBounds)
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x895638", Offset = "0x895638", VA = "0x895638")]
	private int[] GenerateCachedIndexBuffer(int vertexCount, int indexCount)
	{
		return null;
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x895E5C", Offset = "0x895E5C", VA = "0x895E5C")]
	private void OnWillRenderObject()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0x896B88", Offset = "0x896B88", VA = "0x896B88")]
	private void SetClipping(int index, Vector4 cr, Vector2 soft, float angle)
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x896ED8", Offset = "0x896ED8", VA = "0x896ED8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x897354", Offset = "0x897354", VA = "0x897354")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x897360", Offset = "0x897360", VA = "0x897360")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x8974A0", Offset = "0x8974A0", VA = "0x8974A0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x897530", Offset = "0x897530", VA = "0x897530")]
	public static UIDrawCall Create(UIPanel panel, Material mat, Texture tex, Shader shader)
	{
		return null;
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x8975D4", Offset = "0x8975D4", VA = "0x8975D4")]
	private static UIDrawCall Create(string name, UIPanel pan, Material mat, Texture tex, Shader shader)
	{
		return null;
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x8977CC", Offset = "0x8977CC", VA = "0x8977CC")]
	private static UIDrawCall Create(string name)
	{
		return null;
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x897B20", Offset = "0x897B20", VA = "0x897B20")]
	public static void ClearAll()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x897DC8", Offset = "0x897DC8", VA = "0x897DC8")]
	public static void ReleaseAll()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x897E44", Offset = "0x897E44", VA = "0x897E44")]
	public static void ReleaseInactive()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x8980A0", Offset = "0x8980A0", VA = "0x8980A0")]
	public static int Count(UIPanel panel)
	{
		return default(int);
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x898258", Offset = "0x898258", VA = "0x898258")]
	public static void Destroy(UIDrawCall dc)
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x898568", Offset = "0x898568", VA = "0x898568")]
	public static void MoveToScene(Scene scene)
	{
	}
}
[Token(Token = "0x20000AC")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234B98", Offset = "0x234B98")]
public class UIEventListener : MonoBehaviour
{
	[Token(Token = "0x20000AD")]
	public delegate void VoidDelegate(GameObject go);

	[Token(Token = "0x20000AE")]
	public delegate void BoolDelegate(GameObject go, bool state);

	[Token(Token = "0x20000AF")]
	public delegate void FloatDelegate(GameObject go, float delta);

	[Token(Token = "0x20000B0")]
	public delegate void VectorDelegate(GameObject go, Vector2 delta);

	[Token(Token = "0x20000B1")]
	public delegate void ObjectDelegate(GameObject go, GameObject obj);

	[Token(Token = "0x20000B2")]
	public delegate void KeyCodeDelegate(GameObject go, KeyCode key);

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public object parameter;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public VoidDelegate onSubmit;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public VoidDelegate onClick;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VoidDelegate onDoubleClick;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public BoolDelegate onHover;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BoolDelegate onPress;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public BoolDelegate onSelect;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FloatDelegate onScroll;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public VoidDelegate onDragStart;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VectorDelegate onDrag;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public VoidDelegate onDragOver;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VoidDelegate onDragOut;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public VoidDelegate onDragEnd;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ObjectDelegate onDrop;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public KeyCodeDelegate onKey;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public BoolDelegate onTooltip;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool needsActiveCollider;

	[Token(Token = "0x1700009E")]
	private bool isColliderEnabled
	{
		[Token(Token = "0x6000505")]
		[Address(RVA = "0x898F2C", Offset = "0x898F2C", VA = "0x898F2C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x898F1C", Offset = "0x898F1C", VA = "0x898F1C")]
	public UIEventListener()
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0x899094", Offset = "0x899094", VA = "0x899094")]
	private void OnSubmit()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x899498", Offset = "0x899498", VA = "0x899498")]
	private void OnClick()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x8994E0", Offset = "0x8994E0", VA = "0x8994E0")]
	private void OnDoubleClick()
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x899528", Offset = "0x899528", VA = "0x899528")]
	private void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x899954", Offset = "0x899954", VA = "0x899954")]
	private void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0x8999A4", Offset = "0x8999A4", VA = "0x8999A4")]
	private void OnSelect(bool selected)
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0x8999F4", Offset = "0x8999F4", VA = "0x8999F4")]
	private void OnScroll(float delta)
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0x899E20", Offset = "0x899E20", VA = "0x899E20")]
	private void OnDragStart()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0x899E50", Offset = "0x899E50", VA = "0x899E50")]
	private void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0x89A2C4", Offset = "0x89A2C4", VA = "0x89A2C4")]
	private void OnDragOver()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0x89A30C", Offset = "0x89A30C", VA = "0x89A30C")]
	private void OnDragOut()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0x89A354", Offset = "0x89A354", VA = "0x89A354")]
	private void OnDragEnd()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0x89A384", Offset = "0x89A384", VA = "0x89A384")]
	private void OnDrop(GameObject go)
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0x89A7B0", Offset = "0x89A7B0", VA = "0x89A7B0")]
	private void OnKey(KeyCode key)
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0x89ABDC", Offset = "0x89ABDC", VA = "0x89ABDC")]
	private void OnTooltip(bool show)
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0x89AC2C", Offset = "0x89AC2C", VA = "0x89AC2C")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0x89AC54", Offset = "0x89AC54", VA = "0x89AC54")]
	public static UIEventListener Get(GameObject go)
	{
		return null;
	}
}
[Token(Token = "0x20000B3")]
public class UIGeometry
{
	[Token(Token = "0x20000B4")]
	public delegate void OnCustomWrite(List<Vector3> v, List<Vector2> u, List<Color> c, List<Vector3> n, List<Vector4> t, List<Vector4> u2);

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public List<Vector3> verts;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<Vector2> uvs;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<Color> cols;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public OnCustomWrite onCustomWrite;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Vector3> mRtpVerts;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 mRtpNormal;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector4 mRtpTan;

	[Token(Token = "0x1700009F")]
	public bool hasVertices
	{
		[Token(Token = "0x6000530")]
		[Address(RVA = "0x8A0A5C", Offset = "0x8A0A5C", VA = "0x8A0A5C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A0")]
	public bool hasTransformed
	{
		[Token(Token = "0x6000531")]
		[Address(RVA = "0x8A0AE4", Offset = "0x8A0AE4", VA = "0x8A0AE4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0x8A0950", Offset = "0x8A0950", VA = "0x8A0950")]
	public UIGeometry()
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x8A0BC8", Offset = "0x8A0BC8", VA = "0x8A0BC8")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0x8A0CC4", Offset = "0x8A0CC4", VA = "0x8A0CC4")]
	public void ApplyTransform(Matrix4x4 widgetToPanel, bool generateNormals = true)
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0x8A0FE8", Offset = "0x8A0FE8", VA = "0x8A0FE8")]
	public void WriteToBuffers(List<Vector3> v, List<Vector2> u, List<Color> c, List<Vector3> n, List<Vector4> t, List<Vector4> u2)
	{
	}
}
[Token(Token = "0x20000B5")]
public abstract class UIRect : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000B6")]
	public class AnchorPoint
	{
		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform target;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float relative;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int absolute;

		[NonSerialized]
		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UIRect rect;

		[NonSerialized]
		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera targetCam;

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x76960C", Offset = "0x76960C", VA = "0x76960C")]
		public AnchorPoint()
		{
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x769614", Offset = "0x769614", VA = "0x769614")]
		public AnchorPoint(float relative)
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x76C6E8", Offset = "0x76C6E8", VA = "0x76C6E8")]
		public void Set(float relative, float absolute)
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x76C790", Offset = "0x76C790", VA = "0x76C790")]
		public void Set(Transform target, float relative, float absolute)
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x76C840", Offset = "0x76C840", VA = "0x76C840")]
		public void SetToNearest(float abs0, float abs1, float abs2)
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x76C868", Offset = "0x76C868", VA = "0x76C868")]
		public void SetToNearest(float rel0, float rel1, float rel2, float abs0, float abs1, float abs2)
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x76C964", Offset = "0x76C964", VA = "0x76C964")]
		public void SetHorizontal(Transform parent, float localPos)
		{
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x76CBD0", Offset = "0x76CBD0", VA = "0x76CBD0")]
		public void SetVertical(Transform parent, float localPos)
		{
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x76CE44", Offset = "0x76CE44", VA = "0x76CE44")]
		public Vector3[] GetSides(Transform relativeTo)
		{
			return null;
		}
	}

	[Token(Token = "0x20000B7")]
	[DoNotObfuscateNGUI]
	public enum AnchorUpdate
	{
		[Token(Token = "0x4000446")]
		OnEnable,
		[Token(Token = "0x4000447")]
		OnUpdate,
		[Token(Token = "0x4000448")]
		OnStart
	}

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public AnchorPoint leftAnchor;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AnchorPoint rightAnchor;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public AnchorPoint bottomAnchor;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnchorPoint topAnchor;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public AnchorUpdate updateAnchors;

	[NonSerialized]
	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected GameObject mGo;

	[NonSerialized]
	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected Transform mTrans;

	[NonSerialized]
	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected BetterList<UIRect> mChildren;

	[NonSerialized]
	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected bool mChanged;

	[NonSerialized]
	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	protected bool mParentFound;

	[NonSerialized]
	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	private bool mUpdateAnchors;

	[NonSerialized]
	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int mUpdateFrame;

	[NonSerialized]
	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool mAnchorsCached;

	[NonSerialized]
	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UIRoot mRoot;

	[NonSerialized]
	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private UIRect mParent;

	[NonSerialized]
	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool mRootSet;

	[NonSerialized]
	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected Camera mCam;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected bool mStarted;

	[NonSerialized]
	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float finalAlpha;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static Vector3[] mSides;

	[Token(Token = "0x170000A1")]
	public GameObject cachedGameObject
	{
		[Token(Token = "0x600053A")]
		[Address(RVA = "0x769634", Offset = "0x769634", VA = "0x769634")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A2")]
	public Transform cachedTransform
	{
		[Token(Token = "0x600053B")]
		[Address(RVA = "0x7696DC", Offset = "0x7696DC", VA = "0x7696DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A3")]
	public Camera anchorCamera
	{
		[Token(Token = "0x600053C")]
		[Address(RVA = "0x769784", Offset = "0x769784", VA = "0x769784")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A4")]
	public bool isFullyAnchored
	{
		[Token(Token = "0x600053D")]
		[Address(RVA = "0x769BA0", Offset = "0x769BA0", VA = "0x769BA0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A5")]
	public virtual bool isAnchoredHorizontally
	{
		[Token(Token = "0x600053E")]
		[Address(RVA = "0x769D4C", Offset = "0x769D4C", VA = "0x769D4C", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A6")]
	public virtual bool isAnchoredVertically
	{
		[Token(Token = "0x600053F")]
		[Address(RVA = "0x769E44", Offset = "0x769E44", VA = "0x769E44", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A7")]
	public virtual bool canBeAnchored
	{
		[Token(Token = "0x6000540")]
		[Address(RVA = "0x769F3C", Offset = "0x769F3C", VA = "0x769F3C", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A8")]
	public UIRect parent
	{
		[Token(Token = "0x6000541")]
		[Address(RVA = "0x769F44", Offset = "0x769F44", VA = "0x769F44")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A9")]
	public UIRoot root
	{
		[Token(Token = "0x6000542")]
		[Address(RVA = "0x76A01C", Offset = "0x76A01C", VA = "0x76A01C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AA")]
	public bool isAnchored
	{
		[Token(Token = "0x6000543")]
		[Address(RVA = "0x76A150", Offset = "0x76A150", VA = "0x76A150")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000AB")]
	public abstract float alpha
	{
		[Token(Token = "0x6000544")]
		get;
		[Token(Token = "0x6000545")]
		set;
	}

	[Token(Token = "0x170000AC")]
	public abstract Vector3[] localCorners
	{
		[Token(Token = "0x6000547")]
		get;
	}

	[Token(Token = "0x170000AD")]
	public abstract Vector3[] worldCorners
	{
		[Token(Token = "0x6000548")]
		get;
	}

	[Token(Token = "0x170000AE")]
	protected float cameraRayDistance
	{
		[Token(Token = "0x6000549")]
		[Address(RVA = "0x76A314", Offset = "0x76A314", VA = "0x76A314")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0x7694EC", Offset = "0x7694EC", VA = "0x7694EC")]
	protected UIRect()
	{
	}

	[Token(Token = "0x6000546")]
	public abstract float CalculateFinalAlpha(int frameID);

	[Token(Token = "0x600054A")]
	[Address(RVA = "0x76A6C0", Offset = "0x76A6C0", VA = "0x76A6C0", Slot = "12")]
	public virtual void Invalidate(bool includeChildren)
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0x76A780", Offset = "0x76A780", VA = "0x76A780", Slot = "13")]
	public virtual Vector3[] GetSides(Transform relativeTo)
	{
		return null;
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0x76AB44", Offset = "0x76AB44", VA = "0x76AB44")]
	protected Vector3 GetLocalPos(AnchorPoint ac, Transform trans)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0x76B0BC", Offset = "0x76B0BC", VA = "0x76B0BC", Slot = "14")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0x76B118", Offset = "0x76B118", VA = "0x76B118", Slot = "15")]
	protected virtual void OnInit()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0x76B208", Offset = "0x76B208", VA = "0x76B208", Slot = "16")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0x76B2F0", Offset = "0x76B2F0", VA = "0x76B2F0", Slot = "17")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0x76B3AC", Offset = "0x76B3AC", VA = "0x76B3AC")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0x76B3EC", Offset = "0x76B3EC", VA = "0x76B3EC")]
	public void Update()
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0x76B510", Offset = "0x76B510", VA = "0x76B510")]
	protected void UpdateAnchorsInternal(int frame)
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0x76B9FC", Offset = "0x76B9FC", VA = "0x76B9FC")]
	public void UpdateAnchors()
	{
	}

	[Token(Token = "0x6000555")]
	protected abstract void OnAnchor();

	[Token(Token = "0x6000556")]
	[Address(RVA = "0x76BA3C", Offset = "0x76BA3C", VA = "0x76BA3C")]
	public void SetAnchor(Transform t)
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0x76BAC0", Offset = "0x76BAC0", VA = "0x76BAC0")]
	public void SetAnchor(GameObject go)
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0x76BBE8", Offset = "0x76BBE8", VA = "0x76BBE8")]
	public void SetAnchor(GameObject go, int left, int bottom, int right, int top)
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x76BDF8", Offset = "0x76BDF8", VA = "0x76BDF8")]
	public void SetAnchor(GameObject go, float left, float bottom, float right, float top)
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x76C008", Offset = "0x76C008", VA = "0x76C008")]
	public void SetAnchor(GameObject go, float left, int leftOffset, float bottom, int bottomOffset, float right, int rightOffset, float top, int topOffset)
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0x76C234", Offset = "0x76C234", VA = "0x76C234")]
	public void SetAnchor(float left, int leftOffset, float bottom, int bottomOffset, float right, int rightOffset, float top, int topOffset)
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0x76C3F4", Offset = "0x76C3F4", VA = "0x76C3F4")]
	public void SetScreenRect(int left, int top, int width, int height)
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x76982C", Offset = "0x76982C", VA = "0x76982C")]
	public void ResetAnchors()
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x76B4F4", Offset = "0x76B4F4", VA = "0x76B4F4")]
	public void ResetAndUpdateAnchors()
	{
	}

	[Token(Token = "0x600055F")]
	public abstract void SetRect(float x, float y, float width, float height);

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x76AF44", Offset = "0x76AF44", VA = "0x76AF44")]
	private void FindCameraFor(AnchorPoint ap)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x76C444", Offset = "0x76C444", VA = "0x76C444", Slot = "20")]
	public virtual void ParentHasChanged()
	{
	}

	[Token(Token = "0x6000562")]
	protected abstract void OnStart();

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x76C66C", Offset = "0x76C66C", VA = "0x76C66C", Slot = "22")]
	protected virtual void OnUpdate()
	{
	}
}
[Token(Token = "0x20000B8")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234BF4", Offset = "0x234BF4")]
[ExecuteInEditMode]
public class UISnapshotPoint : MonoBehaviour
{
	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool isOrthographic;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float nearClip;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float farClip;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23988C", Offset = "0x23988C")]
	public int fieldOfView;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float orthoSize;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D thumbnail;

	[Token(Token = "0x600056E")]
	[Address(RVA = "0x77676C", Offset = "0x77676C", VA = "0x77676C")]
	public UISnapshotPoint()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0x7767A8", Offset = "0x7767A8", VA = "0x7767A8")]
	private void Start()
	{
	}
}
[Token(Token = "0x20000B9")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234C54", Offset = "0x234C54")]
public class UIWidget : UIRect
{
	[Token(Token = "0x20000BA")]
	[DoNotObfuscateNGUI]
	public enum Pivot
	{
		[Token(Token = "0x400046F")]
		TopLeft,
		[Token(Token = "0x4000470")]
		Top,
		[Token(Token = "0x4000471")]
		TopRight,
		[Token(Token = "0x4000472")]
		Left,
		[Token(Token = "0x4000473")]
		Center,
		[Token(Token = "0x4000474")]
		Right,
		[Token(Token = "0x4000475")]
		BottomLeft,
		[Token(Token = "0x4000476")]
		Bottom,
		[Token(Token = "0x4000477")]
		BottomRight
	}

	[Token(Token = "0x20000BB")]
	public delegate void OnDimensionsChanged();

	[Token(Token = "0x20000BC")]
	public delegate void OnPostFillCallback(UIWidget widget, int bufferOffset, List<Vector3> verts, List<Vector2> uvs, List<Color> cols);

	[Token(Token = "0x20000BD")]
	[DoNotObfuscateNGUI]
	public enum AspectRatioSource
	{
		[Token(Token = "0x4000479")]
		Free,
		[Token(Token = "0x400047A")]
		BasedOnWidth,
		[Token(Token = "0x400047B")]
		BasedOnHeight
	}

	[Token(Token = "0x20000BE")]
	public delegate bool HitCheck(Vector3 worldPos);

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	[SerializeField]
	protected Color mColor;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[HideInInspector]
	protected Pivot mPivot;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[HideInInspector]
	[SerializeField]
	protected int mWidth;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	[SerializeField]
	protected int mHeight;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	[HideInInspector]
	protected int mDepth;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x23999C", Offset = "0x23999C")]
	protected Material mMat;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public OnDimensionsChanged onChange;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public OnPostFillCallback onPostFill;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public UIDrawCall.OnRenderCallback mOnRender;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool autoResizeBoxCollider;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	public bool hideIfOffScreen;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public AspectRatioSource keepAspectRatio;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float aspectRatio;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public HitCheck hitCheck;

	[NonSerialized]
	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public UIPanel panel;

	[NonSerialized]
	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public UIGeometry geometry;

	[NonSerialized]
	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool fillGeometry;

	[NonSerialized]
	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	protected bool mPlayMode;

	[NonSerialized]
	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected Vector4 mDrawRegion;

	[NonSerialized]
	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Matrix4x4 mLocalToPanel;

	[NonSerialized]
	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool mIsVisibleByAlpha;

	[NonSerialized]
	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
	private bool mIsVisibleByPanel;

	[NonSerialized]
	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEE")]
	private bool mIsInFront;

	[NonSerialized]
	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float mLastAlpha;

	[NonSerialized]
	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private bool mMoved;

	[NonSerialized]
	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public UIDrawCall drawCall;

	[NonSerialized]
	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	protected Vector3[] mCorners;

	[NonSerialized]
	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int mAlphaFrameID;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private int mMatrixFrame;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Vector3 mOldV0;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private Vector3 mOldV1;

	[Token(Token = "0x170000AF")]
	public UIDrawCall.OnRenderCallback onRender
	{
		[Token(Token = "0x6000571")]
		[Address(RVA = "0x78ADA8", Offset = "0x78ADA8", VA = "0x78ADA8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000572")]
		[Address(RVA = "0x78ADB0", Offset = "0x78ADB0", VA = "0x78ADB0")]
		set
		{
		}
	}

	[Token(Token = "0x170000B0")]
	public Vector4 drawRegion
	{
		[Token(Token = "0x6000573")]
		[Address(RVA = "0x77BF04", Offset = "0x77BF04", VA = "0x77BF04")]
		get
		{
			return default(Vector4);
		}
		[Token(Token = "0x6000574")]
		[Address(RVA = "0x7701A0", Offset = "0x7701A0", VA = "0x7701A0")]
		set
		{
		}
	}

	[Token(Token = "0x170000B1")]
	public Vector2 pivotOffset
	{
		[Token(Token = "0x6000575")]
		[Address(RVA = "0x778C24", Offset = "0x778C24", VA = "0x778C24")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x170000B2")]
	public int width
	{
		[Token(Token = "0x6000576")]
		[Address(RVA = "0x781518", Offset = "0x781518", VA = "0x781518")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000577")]
		[Address(RVA = "0x7792FC", Offset = "0x7792FC", VA = "0x7792FC")]
		set
		{
		}
	}

	[Token(Token = "0x170000B3")]
	public int height
	{
		[Token(Token = "0x6000578")]
		[Address(RVA = "0x781520", Offset = "0x781520", VA = "0x781520")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000579")]
		[Address(RVA = "0x7795E0", Offset = "0x7795E0", VA = "0x7795E0")]
		set
		{
		}
	}

	[Token(Token = "0x170000B4")]
	public Color color
	{
		[Token(Token = "0x600057A")]
		[Address(RVA = "0x7766C8", Offset = "0x7766C8", VA = "0x7766C8")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x600057B")]
		[Address(RVA = "0x7766D8", Offset = "0x7766D8", VA = "0x7766D8")]
		set
		{
		}
	}

	[Token(Token = "0x170000B5")]
	public override float alpha
	{
		[Token(Token = "0x600057D")]
		[Address(RVA = "0x78B374", Offset = "0x78B374", VA = "0x78B374", Slot = "7")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600057E")]
		[Address(RVA = "0x78B37C", Offset = "0x78B37C", VA = "0x78B37C", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x170000B6")]
	public bool isVisible
	{
		[Token(Token = "0x600057F")]
		[Address(RVA = "0x78B3A8", Offset = "0x78B3A8", VA = "0x78B3A8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B7")]
	public bool hasVertices
	{
		[Token(Token = "0x6000580")]
		[Address(RVA = "0x78B46C", Offset = "0x78B46C", VA = "0x78B46C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B8")]
	public Pivot rawPivot
	{
		[Token(Token = "0x6000581")]
		[Address(RVA = "0x78B484", Offset = "0x78B484", VA = "0x78B484")]
		get
		{
			return default(Pivot);
		}
		[Token(Token = "0x6000582")]
		[Address(RVA = "0x78B48C", Offset = "0x78B48C", VA = "0x78B48C")]
		set
		{
		}
	}

	[Token(Token = "0x170000B9")]
	public Pivot pivot
	{
		[Token(Token = "0x6000583")]
		[Address(RVA = "0x78B190", Offset = "0x78B190", VA = "0x78B190")]
		get
		{
			return default(Pivot);
		}
		[Token(Token = "0x6000584")]
		[Address(RVA = "0x783BE0", Offset = "0x783BE0", VA = "0x783BE0")]
		set
		{
		}
	}

	[Token(Token = "0x170000BA")]
	public int depth
	{
		[Token(Token = "0x6000585")]
		[Address(RVA = "0x78B4D0", Offset = "0x78B4D0", VA = "0x78B4D0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000586")]
		[Address(RVA = "0x78B4D8", Offset = "0x78B4D8", VA = "0x78B4D8")]
		set
		{
		}
	}

	[Token(Token = "0x170000BB")]
	public int raycastDepth
	{
		[Token(Token = "0x6000587")]
		[Address(RVA = "0x78B664", Offset = "0x78B664", VA = "0x78B664")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000BC")]
	public override Vector3[] localCorners
	{
		[Token(Token = "0x6000588")]
		[Address(RVA = "0x78B98C", Offset = "0x78B98C", VA = "0x78B98C", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BD")]
	public virtual Vector2 localSize
	{
		[Token(Token = "0x6000589")]
		[Address(RVA = "0x78BB90", Offset = "0x78BB90", VA = "0x78BB90", Slot = "23")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x170000BE")]
	public Vector3 localCenter
	{
		[Token(Token = "0x600058A")]
		[Address(RVA = "0x78BCE8", Offset = "0x78BCE8", VA = "0x78BCE8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000BF")]
	public override Vector3[] worldCorners
	{
		[Token(Token = "0x600058B")]
		[Address(RVA = "0x78BE10", Offset = "0x78BE10", VA = "0x78BE10", Slot = "11")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C0")]
	public Vector3 worldCenter
	{
		[Token(Token = "0x600058C")]
		[Address(RVA = "0x78C050", Offset = "0x78C050", VA = "0x78C050")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000C1")]
	public virtual Vector4 drawingDimensions
	{
		[Token(Token = "0x600058D")]
		[Address(RVA = "0x78C0B4", Offset = "0x78C0B4", VA = "0x78C0B4", Slot = "24")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x170000C2")]
	public virtual Material material
	{
		[Token(Token = "0x600058E")]
		[Address(RVA = "0x776EA4", Offset = "0x776EA4", VA = "0x776EA4", Slot = "25")]
		get
		{
			return null;
		}
		[Token(Token = "0x600058F")]
		[Address(RVA = "0x776EB0", Offset = "0x776EB0", VA = "0x776EB0", Slot = "26")]
		set
		{
		}
	}

	[Token(Token = "0x170000C3")]
	public virtual Texture mainTexture
	{
		[Token(Token = "0x6000590")]
		[Address(RVA = "0x78C2D8", Offset = "0x78C2D8", VA = "0x78C2D8", Slot = "27")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000591")]
		[Address(RVA = "0x776C7C", Offset = "0x776C7C", VA = "0x776C7C", Slot = "28")]
		set
		{
		}
	}

	[Token(Token = "0x170000C4")]
	public virtual Shader shader
	{
		[Token(Token = "0x6000592")]
		[Address(RVA = "0x78C3A0", Offset = "0x78C3A0", VA = "0x78C3A0", Slot = "29")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000593")]
		[Address(RVA = "0x78C468", Offset = "0x78C468", VA = "0x78C468", Slot = "30")]
		set
		{
		}
	}

	[Token(Token = "0x170000C5")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EB8C", Offset = "0x23EB8C")]
	public Vector2 relativeSize
	{
		[Token(Token = "0x6000594")]
		[Address(RVA = "0x78C554", Offset = "0x78C554", VA = "0x78C554")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x170000C6")]
	public bool hasBoxCollider
	{
		[Token(Token = "0x6000595")]
		[Address(RVA = "0x78C5D8", Offset = "0x78C5D8", VA = "0x78C5D8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000C7")]
	public virtual int minWidth
	{
		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x78FC94", Offset = "0x78FC94", VA = "0x78FC94", Slot = "34")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000C8")]
	public virtual int minHeight
	{
		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x78FC9C", Offset = "0x78FC9C", VA = "0x78FC9C", Slot = "35")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000C9")]
	public virtual Vector4 border
	{
		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x777F94", Offset = "0x777F94", VA = "0x777F94", Slot = "36")]
		get
		{
			return default(Vector4);
		}
		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x78FCA4", Offset = "0x78FCA4", VA = "0x78FCA4", Slot = "37")]
		set
		{
		}
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0x78AC50", Offset = "0x78AC50", VA = "0x78AC50")]
	public UIWidget()
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0x78B318", Offset = "0x78B318", VA = "0x78B318")]
	public void SetColorNoAlpha(Color c)
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x78B198", Offset = "0x78B198", VA = "0x78B198")]
	public void SetDimensions(int w, int h)
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x78C728", Offset = "0x78C728", VA = "0x78C728", Slot = "13")]
	public override Vector3[] GetSides(Transform relativeTo)
	{
		return null;
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x78CAF0", Offset = "0x78CAF0", VA = "0x78CAF0", Slot = "9")]
	public override float CalculateFinalAlpha(int frameID)
	{
		return default(float);
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0x78CB1C", Offset = "0x78CB1C", VA = "0x78CB1C")]
	protected void UpdateFinalAlpha(int frameID)
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x78CC18", Offset = "0x78CC18", VA = "0x78CC18", Slot = "12")]
	public override void Invalidate(bool includeChildren)
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0x78CDC4", Offset = "0x78CDC4", VA = "0x78CDC4")]
	public float CalculateCumulativeAlpha(int frameID)
	{
		return default(float);
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0x78CEE8", Offset = "0x78CEE8", VA = "0x78CEE8", Slot = "19")]
	public override void SetRect(float x, float y, float width, float height)
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0x78B04C", Offset = "0x78B04C", VA = "0x78B04C")]
	public void ResizeCollider()
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0x78D394", Offset = "0x78D394", VA = "0x78D394")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static int FullCompareFunc(UIWidget left, UIWidget right)
	{
		return default(int);
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0x78D45C", Offset = "0x78D45C", VA = "0x78D45C")]
	[DebuggerStepThrough]
	[DebuggerHidden]
	public static int PanelCompareFunc(UIWidget left, UIWidget right)
	{
		return default(int);
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0x78D64C", Offset = "0x78D64C", VA = "0x78D64C")]
	public Bounds CalculateBounds()
	{
		return default(Bounds);
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0x7811AC", Offset = "0x7811AC", VA = "0x7811AC")]
	public Bounds CalculateBounds(Transform relativeParent)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0x78D660", Offset = "0x78D660", VA = "0x78D660")]
	public void SetDirty()
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0x777338", Offset = "0x777338", VA = "0x777338")]
	public void RemoveFromPanel()
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0x7777DC", Offset = "0x7777DC", VA = "0x7777DC", Slot = "31")]
	public virtual void MarkAsChanged()
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x78B774", Offset = "0x78B774", VA = "0x78B774")]
	public UIPanel CreatePanel()
	{
		return null;
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0x78D74C", Offset = "0x78D74C", VA = "0x78D74C")]
	public void CheckLayer()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0x78D918", Offset = "0x78D918", VA = "0x78D918", Slot = "20")]
	public override void ParentHasChanged()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x78DA8C", Offset = "0x78DA8C", VA = "0x78DA8C", Slot = "17")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x7798C8", Offset = "0x7798C8", VA = "0x7798C8", Slot = "15")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x78DAAC", Offset = "0x78DAAC", VA = "0x78DAAC", Slot = "32")]
	protected virtual void UpgradeFrom265()
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x78DBE8", Offset = "0x78DBE8", VA = "0x78DBE8", Slot = "21")]
	protected override void OnStart()
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x78DBEC", Offset = "0x78DBEC", VA = "0x78DBEC", Slot = "18")]
	protected override void OnAnchor()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x779B2C", Offset = "0x779B2C", VA = "0x779B2C", Slot = "22")]
	protected override void OnUpdate()
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x78EB88", Offset = "0x78EB88", VA = "0x78EB88")]
	private void OnApplicationPause(bool paused)
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0x78EBA0", Offset = "0x78EBA0", VA = "0x78EBA0", Slot = "16")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0x78EBBC", Offset = "0x78EBBC", VA = "0x78EBBC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x78CEA4", Offset = "0x78CEA4", VA = "0x78CEA4")]
	public bool UpdateVisibility(bool visibleByAlpha, bool visibleByPanel)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x78EBC0", Offset = "0x78EBC0", VA = "0x78EBC0")]
	public bool UpdateTransform(int frame)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x78F0B0", Offset = "0x78F0B0", VA = "0x78F0B0")]
	public bool UpdateGeometry(int frame)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x78FC2C", Offset = "0x78FC2C", VA = "0x78FC2C")]
	public void WriteToBuffers(List<Vector3> v, List<Vector2> u, List<Color> c, List<Vector3> n, List<Vector4> t, List<Vector4> u2)
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x778F68", Offset = "0x778F68", VA = "0x778F68", Slot = "33")]
	public virtual void MakePixelPerfect()
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x78FCA8", Offset = "0x78FCA8", VA = "0x78FCA8", Slot = "38")]
	public virtual void OnFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols)
	{
	}
}
[Token(Token = "0x20000BF")]
[ExecuteInEditMode]
public class AnimatedAlpha : MonoBehaviour
{
	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x239A08", Offset = "0x239A08")]
	public float alpha;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private UIWidget mWidget;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private UIPanel mPanel;

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0x476F40", Offset = "0x476F40", VA = "0x476F40")]
	public AnimatedAlpha()
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0x476F50", Offset = "0x476F50", VA = "0x476F50")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0x476FDC", Offset = "0x476FDC", VA = "0x476FDC")]
	private void LateUpdate()
	{
	}
}
[Token(Token = "0x20000C0")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x234CE0", Offset = "0x234CE0")]
[ExecuteInEditMode]
public class AnimatedColor : MonoBehaviour
{
	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Color color;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private UIWidget mWidget;

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0x477124", Offset = "0x477124", VA = "0x477124")]
	public AnimatedColor()
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0x477168", Offset = "0x477168", VA = "0x477168")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0x4771D8", Offset = "0x4771D8", VA = "0x4771D8")]
	private void LateUpdate()
	{
	}
}
[Token(Token = "0x20000C1")]
[ExecuteInEditMode]
public class AnimatedWidget : MonoBehaviour
{
	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float width;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float height;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private UIWidget mWidget;

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0x477230", Offset = "0x477230", VA = "0x477230")]
	public AnimatedWidget()
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0x477244", Offset = "0x477244", VA = "0x477244")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0x4772B4", Offset = "0x4772B4", VA = "0x4772B4")]
	private void LateUpdate()
	{
	}
}
[Token(Token = "0x20000C2")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234D78", Offset = "0x234D78")]
public class SpringPosition : MonoBehaviour
{
	[Token(Token = "0x20000C3")]
	public delegate void OnFinished();

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SpringPosition current;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 target;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float strength;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool worldSpace;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool ignoreTimeScale;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool updateScrollView;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OnFinished onFinished;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[HideInInspector]
	private GameObject eventReceiver;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[HideInInspector]
	public string callWhenFinished;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Transform mTrans;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mThreshold;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private UIScrollView mSv;

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0x5805EC", Offset = "0x5805EC", VA = "0x5805EC")]
	public SpringPosition()
	{
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0x580698", Offset = "0x580698", VA = "0x580698")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0x580758", Offset = "0x580758", VA = "0x580758")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0x580D18", Offset = "0x580D18", VA = "0x580D18")]
	private void NotifyListeners()
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0x581080", Offset = "0x581080", VA = "0x581080")]
	public static SpringPosition Begin(GameObject go, Vector3 pos, float strength)
	{
		return null;
	}
}
[Token(Token = "0x20000C4")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234DC0", Offset = "0x234DC0")]
public class TweenAlpha : UITweener
{
	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x239A80", Offset = "0x239A80")]
	public float from;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x239A98", Offset = "0x239A98")]
	public float to;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool mCached;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private UIRect mRect;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Material mMat;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Light mLight;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private SpriteRenderer mSr;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float mBaseIntensity;

	[Token(Token = "0x170000CA")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EBC0", Offset = "0x23EBC0")]
	public float alpha
	{
		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x591FA0", Offset = "0x591FA0", VA = "0x591FA0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x59216C", Offset = "0x59216C", VA = "0x59216C")]
		set
		{
		}
	}

	[Token(Token = "0x170000CB")]
	public float value
	{
		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x591FA4", Offset = "0x591FA4", VA = "0x591FA4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x592170", Offset = "0x592170", VA = "0x592170")]
		set
		{
		}
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0x591F88", Offset = "0x591F88", VA = "0x591F88")]
	public TweenAlpha()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0x592434", Offset = "0x592434", VA = "0x592434")]
	private void Cache()
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0x5926C8", Offset = "0x5926C8", VA = "0x5926C8", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0x592774", Offset = "0x592774", VA = "0x592774")]
	public static TweenAlpha Begin(GameObject go, float duration, float alpha, float delay = 0f)
	{
		return null;
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0x59287C", Offset = "0x59287C", VA = "0x59287C", Slot = "7")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0x592894", Offset = "0x592894", VA = "0x592894", Slot = "8")]
	public override void SetEndToCurrentValue()
	{
	}
}
[Token(Token = "0x20000C5")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234E04", Offset = "0x234E04")]
public class TweenColor : UITweener
{
	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Color from;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Color to;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool mCached;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private UIWidget mWidget;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Material mMat;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Light mLight;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private SpriteRenderer mSr;

	[Token(Token = "0x170000CC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EBF4", Offset = "0x23EBF4")]
	public Color color
	{
		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x592B2C", Offset = "0x592B2C", VA = "0x592B2C")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x592D68", Offset = "0x592D68", VA = "0x592D68")]
		set
		{
		}
	}

	[Token(Token = "0x170000CD")]
	public Color value
	{
		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x592B3C", Offset = "0x592B3C", VA = "0x592B3C")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x592D88", Offset = "0x592D88", VA = "0x592D88")]
		set
		{
		}
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0x5928AC", Offset = "0x5928AC", VA = "0x5928AC")]
	public TweenColor()
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0x59290C", Offset = "0x59290C", VA = "0x59290C")]
	private void Cache()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0x593058", Offset = "0x593058", VA = "0x593058", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0x5930C8", Offset = "0x5930C8", VA = "0x5930C8")]
	public static TweenColor Begin(GameObject go, float duration, Color color)
	{
		return null;
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0x5931FC", Offset = "0x5931FC", VA = "0x5931FC", Slot = "7")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D0FC", Offset = "0x23D0FC")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0x593234", Offset = "0x593234", VA = "0x593234", Slot = "8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D130", Offset = "0x23D130")]
	public override void SetEndToCurrentValue()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0x59326C", Offset = "0x59326C", VA = "0x59326C")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D164", Offset = "0x23D164")]
	private void SetCurrentValueToStart()
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0x593290", Offset = "0x593290", VA = "0x593290")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D198", Offset = "0x23D198")]
	private void SetCurrentValueToEnd()
	{
	}
}
[Token(Token = "0x20000C6")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234E48", Offset = "0x234E48")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x234E48", Offset = "0x234E48")]
public class TweenFill : UITweener
{
	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x239AB0", Offset = "0x239AB0")]
	public float from;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x239AC8", Offset = "0x239AC8")]
	public float to;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool mCached;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private UIBasicSprite mSprite;

	[Token(Token = "0x170000CE")]
	public float value
	{
		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x5935E0", Offset = "0x5935E0", VA = "0x5935E0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x5936A8", Offset = "0x5936A8", VA = "0x5936A8")]
		set
		{
		}
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0x59355C", Offset = "0x59355C", VA = "0x59355C")]
	public TweenFill()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0x593570", Offset = "0x593570", VA = "0x593570")]
	private void Cache()
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x593774", Offset = "0x593774", VA = "0x593774", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x593820", Offset = "0x593820", VA = "0x593820")]
	public static TweenFill Begin(GameObject go, float duration, float fill)
	{
		return null;
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0x593924", Offset = "0x593924", VA = "0x593924", Slot = "7")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x59393C", Offset = "0x59393C", VA = "0x59393C", Slot = "8")]
	public override void SetEndToCurrentValue()
	{
	}
}
[Token(Token = "0x20000C7")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234EF8", Offset = "0x234EF8")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x234EF8", Offset = "0x234EF8")]
public class TweenFOV : UITweener
{
	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float from;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float to;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Camera mCam;

	[Token(Token = "0x170000CF")]
	public Camera cachedCamera
	{
		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x5932CC", Offset = "0x5932CC", VA = "0x5932CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EC28", Offset = "0x23EC28")]
	public float fov
	{
		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x593380", Offset = "0x593380", VA = "0x593380")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x5933B4", Offset = "0x5933B4", VA = "0x5933B4")]
		set
		{
		}
	}

	[Token(Token = "0x170000D1")]
	public float value
	{
		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x593384", Offset = "0x593384", VA = "0x593384")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x5933B8", Offset = "0x5933B8", VA = "0x5933B8")]
		set
		{
		}
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0x5932B4", Offset = "0x5932B4", VA = "0x5932B4")]
	public TweenFOV()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0x5933F0", Offset = "0x5933F0", VA = "0x5933F0", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0x593418", Offset = "0x593418", VA = "0x593418")]
	public static TweenFOV Begin(GameObject go, float duration, float to)
	{
		return null;
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0x59351C", Offset = "0x59351C", VA = "0x59351C", Slot = "7")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D1CC", Offset = "0x23D1CC")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0x593534", Offset = "0x593534", VA = "0x593534", Slot = "8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D200", Offset = "0x23D200")]
	public override void SetEndToCurrentValue()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0x59354C", Offset = "0x59354C", VA = "0x59354C")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D234", Offset = "0x23D234")]
	private void SetCurrentValueToStart()
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0x593554", Offset = "0x593554", VA = "0x593554")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D268", Offset = "0x23D268")]
	private void SetCurrentValueToEnd()
	{
	}
}
[Token(Token = "0x20000C8")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x234FB0", Offset = "0x234FB0")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x234FB0", Offset = "0x234FB0")]
public class TweenHeight : UITweener
{
	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int from;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int to;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool updateTable;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private UIWidget mWidget;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private UITable mTable;

	[Token(Token = "0x170000D2")]
	public UIWidget cachedWidget
	{
		[Token(Token = "0x6000604")]
		[Address(RVA = "0x593968", Offset = "0x593968", VA = "0x593968")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D3")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EC5C", Offset = "0x23EC5C")]
	public int height
	{
		[Token(Token = "0x6000605")]
		[Address(RVA = "0x593A1C", Offset = "0x593A1C", VA = "0x593A1C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000606")]
		[Address(RVA = "0x593A50", Offset = "0x593A50", VA = "0x593A50")]
		set
		{
		}
	}

	[Token(Token = "0x170000D4")]
	public int value
	{
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x593A20", Offset = "0x593A20", VA = "0x593A20")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000608")]
		[Address(RVA = "0x593A54", Offset = "0x593A54", VA = "0x593A54")]
		set
		{
		}
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0x593954", Offset = "0x593954", VA = "0x593954")]
	public TweenHeight()
	{
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0x593A8C", Offset = "0x593A8C", VA = "0x593A8C", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0x593C80", Offset = "0x593C80", VA = "0x593C80")]
	public static TweenHeight Begin(UIWidget widget, float duration, int height)
	{
		return null;
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0x593D9C", Offset = "0x593D9C", VA = "0x593D9C", Slot = "7")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D29C", Offset = "0x23D29C")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0x593DB4", Offset = "0x593DB4", VA = "0x593DB4", Slot = "8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D2D0", Offset = "0x23D2D0")]
	public override void SetEndToCurrentValue()
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0x593DCC", Offset = "0x593DCC", VA = "0x593DCC")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D304", Offset = "0x23D304")]
	private void SetCurrentValueToStart()
	{
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0x593DD4", Offset = "0x593DD4", VA = "0x593DD4")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D338", Offset = "0x23D338")]
	private void SetCurrentValueToEnd()
	{
	}
}
[Token(Token = "0x20000C9")]
public class TweenLetters : UITweener
{
	[Token(Token = "0x20000CA")]
	[DoNotObfuscateNGUI]
	public enum AnimationLetterOrder
	{
		[Token(Token = "0x40004B3")]
		Forward,
		[Token(Token = "0x40004B4")]
		Reverse,
		[Token(Token = "0x40004B5")]
		Random
	}

	[Token(Token = "0x20000CB")]
	private class LetterProperties
	{
		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float start;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float duration;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 offset;

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x595634", Offset = "0x595634", VA = "0x595634")]
		public LetterProperties()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000CC")]
	public class AnimationProperties
	{
		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AnimationLetterOrder animationOrder;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x239AE0", Offset = "0x239AE0")]
		public float overlap;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool randomDurations;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "MinMaxRangeAttribute", RVA = "0x239AF8", Offset = "0x239AF8")]
		public Vector2 randomness;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 offsetRange;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 pos;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rot;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 scale;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float alpha;

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x595658", Offset = "0x595658", VA = "0x595658")]
		public AnimationProperties()
		{
		}
	}

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationProperties hoverOver;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public AnimationProperties hoverOut;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private UILabel mLabel;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int mVertexCount;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] mLetterOrder;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private LetterProperties[] mLetter;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private AnimationProperties mCurrent;

	[Token(Token = "0x600060F")]
	[Address(RVA = "0x593DDC", Offset = "0x593DDC", VA = "0x593DDC")]
	public TweenLetters()
	{
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0x593DEC", Offset = "0x593DEC", VA = "0x593DEC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0x593F40", Offset = "0x593F40", VA = "0x593F40")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0x59408C", Offset = "0x59408C", VA = "0x59408C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0x5940FC", Offset = "0x5940FC", VA = "0x5940FC", Slot = "5")]
	public override void Play(bool forward)
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0x594144", Offset = "0x594144", VA = "0x594144")]
	private void OnPostFill(UIWidget widget, int bufferOffset, List<Vector3> verts, List<Vector2> uvs, List<Color> cols)
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x595600", Offset = "0x595600", VA = "0x595600", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0x594C7C", Offset = "0x594C7C", VA = "0x594C7C")]
	private void SetLetterOrder(int letterCount)
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0x5950C4", Offset = "0x5950C4", VA = "0x5950C4")]
	private void GetLetterDuration(int letterCount)
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0x59563C", Offset = "0x59563C", VA = "0x59563C")]
	private float ScaleRange(float value, float baseMax, float limitMax)
	{
		return default(float);
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0x595450", Offset = "0x595450", VA = "0x595450")]
	private static Vector3 GetCenter(List<Vector3> verts, int firstVert, int length)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20000CD")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235070", Offset = "0x235070")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235070", Offset = "0x235070")]
public class TweenOrthoSize : UITweener
{
	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float from;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float to;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Camera mCam;

	[Token(Token = "0x170000D5")]
	public Camera cachedCamera
	{
		[Token(Token = "0x600061D")]
		[Address(RVA = "0x5957D4", Offset = "0x5957D4", VA = "0x5957D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D6")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EC90", Offset = "0x23EC90")]
	public float orthoSize
	{
		[Token(Token = "0x600061E")]
		[Address(RVA = "0x595888", Offset = "0x595888", VA = "0x595888")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600061F")]
		[Address(RVA = "0x5958BC", Offset = "0x5958BC", VA = "0x5958BC")]
		set
		{
		}
	}

	[Token(Token = "0x170000D7")]
	public float value
	{
		[Token(Token = "0x6000620")]
		[Address(RVA = "0x59588C", Offset = "0x59588C", VA = "0x59588C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000621")]
		[Address(RVA = "0x5958C0", Offset = "0x5958C0", VA = "0x5958C0")]
		set
		{
		}
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0x5957C0", Offset = "0x5957C0", VA = "0x5957C0")]
	public TweenOrthoSize()
	{
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0x5958F8", Offset = "0x5958F8", VA = "0x5958F8", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0x595920", Offset = "0x595920", VA = "0x595920")]
	public static TweenOrthoSize Begin(GameObject go, float duration, float to)
	{
		return null;
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0x595A24", Offset = "0x595A24", VA = "0x595A24", Slot = "7")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0x595A3C", Offset = "0x595A3C", VA = "0x595A3C", Slot = "8")]
	public override void SetEndToCurrentValue()
	{
	}
}
[Token(Token = "0x20000CE")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23512C", Offset = "0x23512C")]
public class TweenPosition : UITweener
{
	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 from;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Vector3 to;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public bool worldSpace;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Transform mTrans;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private UIRect mRect;

	[Token(Token = "0x170000D8")]
	public Transform cachedTransform
	{
		[Token(Token = "0x6000627")]
		[Address(RVA = "0x595A5C", Offset = "0x595A5C", VA = "0x595A5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D9")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23ECC4", Offset = "0x23ECC4")]
	public Vector3 position
	{
		[Token(Token = "0x6000628")]
		[Address(RVA = "0x595B04", Offset = "0x595B04", VA = "0x595B04")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000629")]
		[Address(RVA = "0x595B8C", Offset = "0x595B8C", VA = "0x595B8C")]
		set
		{
		}
	}

	[Token(Token = "0x170000DA")]
	public Vector3 value
	{
		[Token(Token = "0x600062A")]
		[Address(RVA = "0x595B14", Offset = "0x595B14", VA = "0x595B14")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600062B")]
		[Address(RVA = "0x595BA4", Offset = "0x595BA4", VA = "0x595BA4")]
		set
		{
		}
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x595A54", Offset = "0x595A54", VA = "0x595A54")]
	public TweenPosition()
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0x595D78", Offset = "0x595D78", VA = "0x595D78")]
	private void Awake()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0x595DE0", Offset = "0x595DE0", VA = "0x595DE0", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0x595EF0", Offset = "0x595EF0", VA = "0x595EF0")]
	public static TweenPosition Begin(GameObject go, float duration, Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0x596014", Offset = "0x596014", VA = "0x596014")]
	public static TweenPosition Begin(GameObject go, float duration, Vector3 pos, bool worldSpace)
	{
		return null;
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0x596150", Offset = "0x596150", VA = "0x596150", Slot = "7")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D36C", Offset = "0x23D36C")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0x596180", Offset = "0x596180", VA = "0x596180", Slot = "8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D3A0", Offset = "0x23D3A0")]
	public override void SetEndToCurrentValue()
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0x5961B0", Offset = "0x5961B0", VA = "0x5961B0")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D3D4", Offset = "0x23D3D4")]
	private void SetCurrentValueToStart()
	{
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0x5961D0", Offset = "0x5961D0", VA = "0x5961D0")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D408", Offset = "0x23D408")]
	private void SetCurrentValueToEnd()
	{
	}
}
[Token(Token = "0x20000CF")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235174", Offset = "0x235174")]
public class TweenRotation : UITweener
{
	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 from;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Vector3 to;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool quaternionLerp;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Transform mTrans;

	[Token(Token = "0x170000DB")]
	public Transform cachedTransform
	{
		[Token(Token = "0x6000635")]
		[Address(RVA = "0x5961F8", Offset = "0x5961F8", VA = "0x5961F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000DC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23ECF8", Offset = "0x23ECF8")]
	public Quaternion rotation
	{
		[Token(Token = "0x6000636")]
		[Address(RVA = "0x5962A0", Offset = "0x5962A0", VA = "0x5962A0")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000637")]
		[Address(RVA = "0x5962EC", Offset = "0x5962EC", VA = "0x5962EC")]
		set
		{
		}
	}

	[Token(Token = "0x170000DD")]
	public Quaternion value
	{
		[Token(Token = "0x6000638")]
		[Address(RVA = "0x5962B0", Offset = "0x5962B0", VA = "0x5962B0")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000639")]
		[Address(RVA = "0x59630C", Offset = "0x59630C", VA = "0x59630C")]
		set
		{
		}
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0x5961F0", Offset = "0x5961F0", VA = "0x5961F0")]
	public TweenRotation()
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0x596368", Offset = "0x596368", VA = "0x596368", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0x596580", Offset = "0x596580", VA = "0x596580")]
	public static TweenRotation Begin(GameObject go, float duration, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0x5966E4", Offset = "0x5966E4", VA = "0x5966E4", Slot = "7")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D43C", Offset = "0x23D43C")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0x59673C", Offset = "0x59673C", VA = "0x59673C", Slot = "8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D470", Offset = "0x23D470")]
	public override void SetEndToCurrentValue()
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0x596794", Offset = "0x596794", VA = "0x596794")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D4A4", Offset = "0x23D4A4")]
	private void SetCurrentValueToStart()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0x596850", Offset = "0x596850", VA = "0x596850")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D4D8", Offset = "0x23D4D8")]
	private void SetCurrentValueToEnd()
	{
	}
}
[Token(Token = "0x20000D0")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2351BC", Offset = "0x2351BC")]
public class TweenScale : UITweener
{
	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 from;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Vector3 to;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool updateTable;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Transform mTrans;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private UITable mTable;

	[Token(Token = "0x170000DE")]
	public Transform cachedTransform
	{
		[Token(Token = "0x6000641")]
		[Address(RVA = "0x5969CC", Offset = "0x5969CC", VA = "0x5969CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000DF")]
	public Vector3 value
	{
		[Token(Token = "0x6000642")]
		[Address(RVA = "0x596A74", Offset = "0x596A74", VA = "0x596A74")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000643")]
		[Address(RVA = "0x596AB0", Offset = "0x596AB0", VA = "0x596AB0")]
		set
		{
		}
	}

	[Token(Token = "0x170000E0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23ED2C", Offset = "0x23ED2C")]
	public Vector3 scale
	{
		[Token(Token = "0x6000644")]
		[Address(RVA = "0x596B04", Offset = "0x596B04", VA = "0x596B04")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000645")]
		[Address(RVA = "0x596B14", Offset = "0x596B14", VA = "0x596B14")]
		set
		{
		}
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0x59690C", Offset = "0x59690C", VA = "0x59690C")]
	public TweenScale()
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x596B2C", Offset = "0x596B2C", VA = "0x596B2C", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0x596D60", Offset = "0x596D60", VA = "0x596D60")]
	public static TweenScale Begin(GameObject go, float duration, Vector3 scale)
	{
		return null;
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0x596E84", Offset = "0x596E84", VA = "0x596E84", Slot = "7")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D50C", Offset = "0x23D50C")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x596EB4", Offset = "0x596EB4", VA = "0x596EB4", Slot = "8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D540", Offset = "0x23D540")]
	public override void SetEndToCurrentValue()
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x596EE4", Offset = "0x596EE4", VA = "0x596EE4")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D574", Offset = "0x23D574")]
	private void SetCurrentValueToStart()
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0x596F04", Offset = "0x596F04", VA = "0x596F04")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D5A8", Offset = "0x23D5A8")]
	private void SetCurrentValueToEnd()
	{
	}
}
[Token(Token = "0x20000D1")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235200", Offset = "0x235200")]
public class TweenTransform : UITweener
{
	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform from;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Transform to;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool parentWhenFinished;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Transform mTrans;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 mPos;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Quaternion mRot;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 mScale;

	[Token(Token = "0x600064C")]
	[Address(RVA = "0x596F24", Offset = "0x596F24", VA = "0x596F24")]
	public TweenTransform()
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0x596F2C", Offset = "0x596F2C", VA = "0x596F2C", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0x597658", Offset = "0x597658", VA = "0x597658")]
	public static TweenTransform Begin(GameObject go, float duration, Transform to)
	{
		return null;
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x597678", Offset = "0x597678", VA = "0x597678")]
	public static TweenTransform Begin(GameObject go, float duration, Transform from, Transform to)
	{
		return null;
	}
}
[Token(Token = "0x20000D2")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235248", Offset = "0x235248")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235248", Offset = "0x235248")]
public class TweenVolume : UITweener
{
	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x239B20", Offset = "0x239B20")]
	public float from;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x239B38", Offset = "0x239B38")]
	public float to;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AudioSource mSource;

	[Token(Token = "0x170000E1")]
	public AudioSource audioSource
	{
		[Token(Token = "0x6000651")]
		[Address(RVA = "0x597774", Offset = "0x597774", VA = "0x597774")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000E2")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23ED60", Offset = "0x23ED60")]
	public float volume
	{
		[Token(Token = "0x6000652")]
		[Address(RVA = "0x59792C", Offset = "0x59792C", VA = "0x59792C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000653")]
		[Address(RVA = "0x5979F0", Offset = "0x5979F0", VA = "0x5979F0")]
		set
		{
		}
	}

	[Token(Token = "0x170000E3")]
	public float value
	{
		[Token(Token = "0x6000654")]
		[Address(RVA = "0x597930", Offset = "0x597930", VA = "0x597930")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000655")]
		[Address(RVA = "0x5979F4", Offset = "0x5979F4", VA = "0x5979F4")]
		set
		{
		}
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x597760", Offset = "0x597760", VA = "0x597760")]
	public TweenVolume()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0x597AB8", Offset = "0x597AB8", VA = "0x597AB8", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x597B58", Offset = "0x597B58", VA = "0x597B58")]
	public static TweenVolume Begin(GameObject go, float duration, float targetVolume)
	{
		return null;
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x597C88", Offset = "0x597C88", VA = "0x597C88", Slot = "7")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x597CA0", Offset = "0x597CA0", VA = "0x597CA0", Slot = "8")]
	public override void SetEndToCurrentValue()
	{
	}
}
[Token(Token = "0x20000D3")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2352F8", Offset = "0x2352F8")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2352F8", Offset = "0x2352F8")]
public class TweenWidth : UITweener
{
	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int from;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int to;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool updateTable;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private UIWidget mWidget;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private UITable mTable;

	[Token(Token = "0x170000E4")]
	public UIWidget cachedWidget
	{
		[Token(Token = "0x600065B")]
		[Address(RVA = "0x597CCC", Offset = "0x597CCC", VA = "0x597CCC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000E5")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23ED94", Offset = "0x23ED94")]
	public int width
	{
		[Token(Token = "0x600065C")]
		[Address(RVA = "0x597D80", Offset = "0x597D80", VA = "0x597D80")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600065D")]
		[Address(RVA = "0x597DB4", Offset = "0x597DB4", VA = "0x597DB4")]
		set
		{
		}
	}

	[Token(Token = "0x170000E6")]
	public int value
	{
		[Token(Token = "0x600065E")]
		[Address(RVA = "0x597D84", Offset = "0x597D84", VA = "0x597D84")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x597DB8", Offset = "0x597DB8", VA = "0x597DB8")]
		set
		{
		}
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x597CB8", Offset = "0x597CB8", VA = "0x597CB8")]
	public TweenWidth()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0x597DF0", Offset = "0x597DF0", VA = "0x597DF0", Slot = "6")]
	protected override void OnUpdate(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0x597FE4", Offset = "0x597FE4", VA = "0x597FE4")]
	public static TweenWidth Begin(UIWidget widget, float duration, int width)
	{
		return null;
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0x598100", Offset = "0x598100", VA = "0x598100", Slot = "7")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D5DC", Offset = "0x23D5DC")]
	public override void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0x598118", Offset = "0x598118", VA = "0x598118", Slot = "8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D610", Offset = "0x23D610")]
	public override void SetEndToCurrentValue()
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0x598130", Offset = "0x598130", VA = "0x598130")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D644", Offset = "0x23D644")]
	private void SetCurrentValueToStart()
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x598138", Offset = "0x598138", VA = "0x598138")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D678", Offset = "0x23D678")]
	private void SetCurrentValueToEnd()
	{
	}
}
[Token(Token = "0x20000D4")]
public abstract class UITweener : MonoBehaviour
{
	[Token(Token = "0x20000D5")]
	[DoNotObfuscateNGUI]
	public enum Method
	{
		[Token(Token = "0x40004F7")]
		Linear,
		[Token(Token = "0x40004F8")]
		EaseIn,
		[Token(Token = "0x40004F9")]
		EaseOut,
		[Token(Token = "0x40004FA")]
		EaseInOut,
		[Token(Token = "0x40004FB")]
		BounceIn,
		[Token(Token = "0x40004FC")]
		BounceOut
	}

	[Token(Token = "0x20000D6")]
	[DoNotObfuscateNGUI]
	public enum Style
	{
		[Token(Token = "0x40004FE")]
		Once,
		[Token(Token = "0x40004FF")]
		Loop,
		[Token(Token = "0x4000500")]
		PingPong
	}

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UITweener current;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[HideInInspector]
	public Method method;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public Style style;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public AnimationCurve animationCurve;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool ignoreTimeScale;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public float delay;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public float duration;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public bool steeperCurves;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public int tweenGroup;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x239BD0", Offset = "0x239BD0")]
	public bool useFixedUpdate;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public List<EventDelegate> onFinished;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public GameObject eventReceiver;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public string callWhenFinished;

	[NonSerialized]
	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float timeScale;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool mStarted;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float mStartTime;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float mDuration;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float mAmountPerDelta;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float mFactor;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private List<EventDelegate> mTemp;

	[Token(Token = "0x170000E7")]
	public float amountPerDelta
	{
		[Token(Token = "0x6000667")]
		[Address(RVA = "0x789758", Offset = "0x789758", VA = "0x789758")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000E8")]
	public float tweenFactor
	{
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x789838", Offset = "0x789838", VA = "0x789838")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000669")]
		[Address(RVA = "0x787634", Offset = "0x787634", VA = "0x787634")]
		set
		{
		}
	}

	[Token(Token = "0x170000E9")]
	public Direction direction
	{
		[Token(Token = "0x600066A")]
		[Address(RVA = "0x789840", Offset = "0x789840", VA = "0x789840")]
		get
		{
			return default(Direction);
		}
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x789580", Offset = "0x789580", VA = "0x789580")]
	protected UITweener()
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x789864", Offset = "0x789864", VA = "0x789864")]
	private void Reset()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x7898A8", Offset = "0x7898A8", VA = "0x7898A8", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x789E78", Offset = "0x789E78", VA = "0x789E78")]
	protected void Update()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x789E88", Offset = "0x789E88", VA = "0x789E88")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0x7898AC", Offset = "0x7898AC", VA = "0x7898AC")]
	protected void DoUpdate()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0x78A14C", Offset = "0x78A14C", VA = "0x78A14C")]
	public void SetOnFinished(EventDelegate.Callback del)
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x78A1DC", Offset = "0x78A1DC", VA = "0x78A1DC")]
	public void SetOnFinished(EventDelegate del)
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x78A26C", Offset = "0x78A26C", VA = "0x78A26C")]
	public void AddOnFinished(EventDelegate.Callback del)
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x78A2FC", Offset = "0x78A2FC", VA = "0x78A2FC")]
	public void AddOnFinished(EventDelegate del)
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0x78A38C", Offset = "0x78A38C", VA = "0x78A38C")]
	public void RemoveOnFinished(EventDelegate del)
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0x78A424", Offset = "0x78A424", VA = "0x78A424")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0x78A430", Offset = "0x78A430", VA = "0x78A430")]
	public void Finish()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x789E98", Offset = "0x789E98", VA = "0x789E98")]
	public void Sample(float factor, bool isFinished)
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x78A4A8", Offset = "0x78A4A8", VA = "0x78A4A8")]
	private float BounceLogic(float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0x78A560", Offset = "0x78A560", VA = "0x78A560")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23D6AC", Offset = "0x23D6AC")]
	public void Play()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x78A574", Offset = "0x78A574", VA = "0x78A574")]
	public void PlayForward()
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x78A588", Offset = "0x78A588", VA = "0x78A588")]
	public void PlayReverse()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x78A59C", Offset = "0x78A59C", VA = "0x78A59C", Slot = "5")]
	public virtual void Play(bool forward)
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x78A678", Offset = "0x78A678", VA = "0x78A678")]
	public void ResetToBeginning()
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x78A6E0", Offset = "0x78A6E0", VA = "0x78A6E0")]
	public void Toggle()
	{
	}

	[Token(Token = "0x600067F")]
	protected abstract void OnUpdate(float factor, bool isFinished);

	[Token(Token = "0x6000680")]
	public static T Begin<T>(GameObject go, float duration, float delay = 0f) where T : UITweener
	{
		return null;
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0x78A79C", Offset = "0x78A79C", VA = "0x78A79C", Slot = "7")]
	public virtual void SetStartToCurrentValue()
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x78A7A0", Offset = "0x78A7A0", VA = "0x78A7A0", Slot = "8")]
	public virtual void SetEndToCurrentValue()
	{
	}
}
[Token(Token = "0x20000D7")]
public interface INGUIAtlas
{
	[Token(Token = "0x170000EA")]
	Material spriteMaterial
	{
		[Token(Token = "0x6000683")]
		get;
		[Token(Token = "0x6000684")]
		set;
	}

	[Token(Token = "0x170000EB")]
	List<UISpriteData> spriteList
	{
		[Token(Token = "0x6000685")]
		get;
		[Token(Token = "0x6000686")]
		set;
	}

	[Token(Token = "0x170000EC")]
	Texture texture
	{
		[Token(Token = "0x6000687")]
		get;
	}

	[Token(Token = "0x170000ED")]
	float pixelSize
	{
		[Token(Token = "0x6000688")]
		get;
		[Token(Token = "0x6000689")]
		set;
	}

	[Token(Token = "0x170000EE")]
	bool premultipliedAlpha
	{
		[Token(Token = "0x600068A")]
		get;
	}

	[Token(Token = "0x170000EF")]
	INGUIAtlas replacement
	{
		[Token(Token = "0x600068B")]
		get;
		[Token(Token = "0x600068C")]
		set;
	}

	[Token(Token = "0x600068D")]
	UISpriteData GetSprite(string name);

	[Token(Token = "0x600068E")]
	BetterList<string> GetListOfSprites();

	[Token(Token = "0x600068F")]
	BetterList<string> GetListOfSprites(string match);

	[Token(Token = "0x6000690")]
	bool References(INGUIAtlas atlas);

	[Token(Token = "0x6000691")]
	void MarkAsChanged();

	[Token(Token = "0x6000692")]
	void SortAlphabetically();
}
[Token(Token = "0x20000D8")]
public class NGUIAtlas : ScriptableObject, INGUIAtlas
{
	[Token(Token = "0x20000D9")]
	private enum Coordinates
	{
		[Token(Token = "0x4000509")]
		Pixels,
		[Token(Token = "0x400050A")]
		TexCoords
	}

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	[HideInInspector]
	private Material material;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[HideInInspector]
	private List<UISpriteData> mSprites;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	[HideInInspector]
	private float mPixelSize;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private UnityEngine.Object mReplacement;

	[NonSerialized]
	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int mPMA;

	[NonSerialized]
	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, int> mSpriteIndices;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x239CF4", Offset = "0x239CF4")]
	private static Comparison<UISpriteData> <>f__am$cache0;

	[Token(Token = "0x170000F0")]
	public Material spriteMaterial
	{
		[Token(Token = "0x6000694")]
		[Address(RVA = "0x5B1508", Offset = "0x5B1508", VA = "0x5B1508", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000695")]
		[Address(RVA = "0x5B1698", Offset = "0x5B1698", VA = "0x5B1698", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x170000F1")]
	public bool premultipliedAlpha
	{
		[Token(Token = "0x6000696")]
		[Address(RVA = "0x5B1E90", Offset = "0x5B1E90", VA = "0x5B1E90", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F2")]
	public List<UISpriteData> spriteList
	{
		[Token(Token = "0x6000697")]
		[Address(RVA = "0x5B20BC", Offset = "0x5B20BC", VA = "0x5B20BC", Slot = "6")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x5B219C", Offset = "0x5B219C", VA = "0x5B219C", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x170000F3")]
	public Texture texture
	{
		[Token(Token = "0x6000699")]
		[Address(RVA = "0x5B2284", Offset = "0x5B2284", VA = "0x5B2284", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F4")]
	public float pixelSize
	{
		[Token(Token = "0x600069A")]
		[Address(RVA = "0x5B23D0", Offset = "0x5B23D0", VA = "0x5B23D0", Slot = "9")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x5B24B0", Offset = "0x5B24B0", VA = "0x5B24B0", Slot = "10")]
		set
		{
		}
	}

	[Token(Token = "0x170000F5")]
	public INGUIAtlas replacement
	{
		[Token(Token = "0x600069C")]
		[Address(RVA = "0x5B15E8", Offset = "0x5B15E8", VA = "0x5B15E8", Slot = "12")]
		get
		{
			return null;
		}
		[Token(Token = "0x600069D")]
		[Address(RVA = "0x5B25F8", Offset = "0x5B25F8", VA = "0x5B25F8", Slot = "13")]
		set
		{
		}
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0x5B1438", Offset = "0x5B1438", VA = "0x5B1438")]
	public NGUIAtlas()
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0x5B2820", Offset = "0x5B2820", VA = "0x5B2820", Slot = "14")]
	public UISpriteData GetSprite(string name)
	{
		return null;
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0x5B2C50", Offset = "0x5B2C50", VA = "0x5B2C50")]
	public void MarkSpriteListAsChanged()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0x5B2D94", Offset = "0x5B2D94", VA = "0x5B2D94", Slot = "19")]
	public void SortAlphabetically()
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0x5B2E98", Offset = "0x5B2E98", VA = "0x5B2E98", Slot = "15")]
	public BetterList<string> GetListOfSprites()
	{
		return null;
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0x5B30C0", Offset = "0x5B30C0", VA = "0x5B30C0", Slot = "16")]
	public BetterList<string> GetListOfSprites(string match)
	{
		return null;
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0x5B36A4", Offset = "0x5B36A4", VA = "0x5B36A4", Slot = "17")]
	public bool References(INGUIAtlas atlas)
	{
		return default(bool);
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0x5B17F0", Offset = "0x5B17F0", VA = "0x5B17F0", Slot = "18")]
	public void MarkAsChanged()
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x5B3AC0", Offset = "0x5B3AC0", VA = "0x5B3AC0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D6F4", Offset = "0x23D6F4")]
	private static int <SortAlphabetically>m__0(UISpriteData s1, UISpriteData s2)
	{
		return default(int);
	}
}
[Token(Token = "0x20000DA")]
public interface INGUIFont
{
	[Token(Token = "0x170000F6")]
	BMFont bmFont
	{
		[Token(Token = "0x60006A6")]
		get;
		[Token(Token = "0x60006A7")]
		set;
	}

	[Token(Token = "0x170000F7")]
	int texWidth
	{
		[Token(Token = "0x60006A8")]
		get;
		[Token(Token = "0x60006A9")]
		set;
	}

	[Token(Token = "0x170000F8")]
	int texHeight
	{
		[Token(Token = "0x60006AA")]
		get;
		[Token(Token = "0x60006AB")]
		set;
	}

	[Token(Token = "0x170000F9")]
	bool hasSymbols
	{
		[Token(Token = "0x60006AC")]
		get;
	}

	[Token(Token = "0x170000FA")]
	List<BMSymbol> symbols
	{
		[Token(Token = "0x60006AD")]
		get;
		[Token(Token = "0x60006AE")]
		set;
	}

	[Token(Token = "0x170000FB")]
	INGUIAtlas atlas
	{
		[Token(Token = "0x60006AF")]
		get;
		[Token(Token = "0x60006B0")]
		set;
	}

	[Token(Token = "0x170000FC")]
	Material material
	{
		[Token(Token = "0x60006B2")]
		get;
		[Token(Token = "0x60006B3")]
		set;
	}

	[Token(Token = "0x170000FD")]
	bool premultipliedAlphaShader
	{
		[Token(Token = "0x60006B4")]
		get;
	}

	[Token(Token = "0x170000FE")]
	bool packedFontShader
	{
		[Token(Token = "0x60006B5")]
		get;
	}

	[Token(Token = "0x170000FF")]
	Texture2D texture
	{
		[Token(Token = "0x60006B6")]
		get;
	}

	[Token(Token = "0x17000100")]
	Rect uvRect
	{
		[Token(Token = "0x60006B7")]
		get;
		[Token(Token = "0x60006B8")]
		set;
	}

	[Token(Token = "0x17000101")]
	string spriteName
	{
		[Token(Token = "0x60006B9")]
		get;
		[Token(Token = "0x60006BA")]
		set;
	}

	[Token(Token = "0x17000102")]
	bool isValid
	{
		[Token(Token = "0x60006BB")]
		get;
	}

	[Token(Token = "0x17000103")]
	int defaultSize
	{
		[Token(Token = "0x60006BC")]
		get;
		[Token(Token = "0x60006BD")]
		set;
	}

	[Token(Token = "0x17000104")]
	UISpriteData sprite
	{
		[Token(Token = "0x60006BE")]
		get;
	}

	[Token(Token = "0x17000105")]
	INGUIFont replacement
	{
		[Token(Token = "0x60006BF")]
		get;
		[Token(Token = "0x60006C0")]
		set;
	}

	[Token(Token = "0x17000106")]
	INGUIFont finalFont
	{
		[Token(Token = "0x60006C1")]
		get;
	}

	[Token(Token = "0x17000107")]
	bool isDynamic
	{
		[Token(Token = "0x60006C2")]
		get;
	}

	[Token(Token = "0x17000108")]
	Font dynamicFont
	{
		[Token(Token = "0x60006C3")]
		get;
		[Token(Token = "0x60006C4")]
		set;
	}

	[Token(Token = "0x17000109")]
	FontStyle dynamicFontStyle
	{
		[Token(Token = "0x60006C5")]
		get;
		[Token(Token = "0x60006C6")]
		set;
	}

	[Token(Token = "0x60006B1")]
	UISpriteData GetSprite(string spriteName);

	[Token(Token = "0x60006C7")]
	bool References(INGUIFont font);

	[Token(Token = "0x60006C8")]
	void MarkAsChanged();

	[Token(Token = "0x60006C9")]
	void UpdateUVRect();

	[Token(Token = "0x60006CA")]
	BMSymbol MatchSymbol(string text, int offset, int textLength);

	[Token(Token = "0x60006CB")]
	void AddSymbol(string sequence, string spriteName);

	[Token(Token = "0x60006CC")]
	void RemoveSymbol(string sequence);

	[Token(Token = "0x60006CD")]
	void RenameSymbol(string before, string after);

	[Token(Token = "0x60006CE")]
	bool UsesSprite(string s);
}
[Token(Token = "0x20000DB")]
[ExecuteInEditMode]
public class NGUIFont : ScriptableObject, INGUIFont
{
	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	[HideInInspector]
	private Material mMat;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[HideInInspector]
	private Rect mUVRect;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private BMFont mFont;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[HideInInspector]
	private UnityEngine.Object mAtlas;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[HideInInspector]
	private UnityEngine.Object mReplacement;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[HideInInspector]
	private List<BMSymbol> mSymbols;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private Font mDynamicFont;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[HideInInspector]
	private int mDynamicFontSize;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	private FontStyle mDynamicFontStyle;

	[NonSerialized]
	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private UISpriteData mSprite;

	[NonSerialized]
	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int mPMA;

	[NonSerialized]
	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int mPacked;

	[Token(Token = "0x1700010A")]
	public BMFont bmFont
	{
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x5B5690", Offset = "0x5B5690", VA = "0x5B5690", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x5B5820", Offset = "0x5B5820", VA = "0x5B5820", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x1700010B")]
	public int texWidth
	{
		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x5B5908", Offset = "0x5B5908", VA = "0x5B5908", Slot = "6")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x5B5A00", Offset = "0x5B5A00", VA = "0x5B5A00", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x1700010C")]
	public int texHeight
	{
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x5B5B00", Offset = "0x5B5B00", VA = "0x5B5B00", Slot = "8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x5B5BF8", Offset = "0x5B5BF8", VA = "0x5B5BF8", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x1700010D")]
	public bool hasSymbols
	{
		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x5B5CF8", Offset = "0x5B5CF8", VA = "0x5B5CF8", Slot = "10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700010E")]
	public List<BMSymbol> symbols
	{
		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x5B5E04", Offset = "0x5B5E04", VA = "0x5B5E04", Slot = "11")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x5B5EE4", Offset = "0x5B5EE4", VA = "0x5B5EE4", Slot = "12")]
		set
		{
		}
	}

	[Token(Token = "0x1700010F")]
	public INGUIAtlas atlas
	{
		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x5B37A4", Offset = "0x5B37A4", VA = "0x5B37A4", Slot = "13")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x5B3898", Offset = "0x5B3898", VA = "0x5B3898", Slot = "14")]
		set
		{
		}
	}

	[Token(Token = "0x17000110")]
	public Material material
	{
		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x5B6960", Offset = "0x5B6960", VA = "0x5B6960", Slot = "16")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x5B6C98", Offset = "0x5B6C98", VA = "0x5B6C98", Slot = "17")]
		set
		{
		}
	}

	[Token(Token = "0x17000111")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EDC8", Offset = "0x23EDC8")]
	public bool premultipliedAlpha
	{
		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x5B6DD8", Offset = "0x5B6DD8", VA = "0x5B6DD8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000112")]
	public bool premultipliedAlphaShader
	{
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x5B6DDC", Offset = "0x5B6DDC", VA = "0x5B6DDC", Slot = "18")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000113")]
	public bool packedFontShader
	{
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x5B7094", Offset = "0x5B7094", VA = "0x5B7094", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000114")]
	public Texture2D texture
	{
		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x5B730C", Offset = "0x5B730C", VA = "0x5B730C", Slot = "20")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000115")]
	public Rect uvRect
	{
		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x5B6348", Offset = "0x5B6348", VA = "0x5B6348", Slot = "21")]
		get
		{
			return default(Rect);
		}
		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x5B7488", Offset = "0x5B7488", VA = "0x5B7488", Slot = "22")]
		set
		{
		}
	}

	[Token(Token = "0x17000116")]
	public string spriteName
	{
		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x5B75EC", Offset = "0x5B75EC", VA = "0x5B75EC", Slot = "23")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x5B76E8", Offset = "0x5B76E8", VA = "0x5B76E8", Slot = "24")]
		set
		{
		}
	}

	[Token(Token = "0x17000117")]
	public bool isValid
	{
		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x5B7860", Offset = "0x5B7860", VA = "0x5B7860", Slot = "25")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000118")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EDFC", Offset = "0x23EDFC")]
	public int size
	{
		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x5B7918", Offset = "0x5B7918", VA = "0x5B7918")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x5B7A24", Offset = "0x5B7A24", VA = "0x5B7A24")]
		set
		{
		}
	}

	[Token(Token = "0x17000119")]
	public int defaultSize
	{
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x5B791C", Offset = "0x5B791C", VA = "0x5B791C", Slot = "26")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x5B7A28", Offset = "0x5B7A28", VA = "0x5B7A28", Slot = "27")]
		set
		{
		}
	}

	[Token(Token = "0x1700011A")]
	public UISpriteData sprite
	{
		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x5B5FCC", Offset = "0x5B5FCC", VA = "0x5B5FCC", Slot = "28")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700011B")]
	public INGUIFont replacement
	{
		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x5B5770", Offset = "0x5B5770", VA = "0x5B5770", Slot = "29")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x5B8084", Offset = "0x5B8084", VA = "0x5B8084", Slot = "30")]
		set
		{
		}
	}

	[Token(Token = "0x1700011C")]
	public INGUIFont finalFont
	{
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x5B82BC", Offset = "0x5B82BC", VA = "0x5B82BC", Slot = "31")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700011D")]
	public bool isDynamic
	{
		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x5B7B10", Offset = "0x5B7B10", VA = "0x5B7B10", Slot = "32")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700011E")]
	public Font dynamicFont
	{
		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x5B83AC", Offset = "0x5B83AC", VA = "0x5B83AC", Slot = "33")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x5B848C", Offset = "0x5B848C", VA = "0x5B848C", Slot = "34")]
		set
		{
		}
	}

	[Token(Token = "0x1700011F")]
	public FontStyle dynamicFontStyle
	{
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x5B8618", Offset = "0x5B8618", VA = "0x5B8618", Slot = "35")]
		get
		{
			return default(FontStyle);
		}
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x5B86F8", Offset = "0x5B86F8", VA = "0x5B86F8", Slot = "36")]
		set
		{
		}
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x5B5584", Offset = "0x5B5584", VA = "0x5B5584")]
	public NGUIFont()
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x5B6878", Offset = "0x5B6878", VA = "0x5B6878", Slot = "15")]
	public UISpriteData GetSprite(string spriteName)
	{
		return null;
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0x5B87F4", Offset = "0x5B87F4", VA = "0x5B87F4")]
	private void Trim()
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0x5B8E4C", Offset = "0x5B8E4C", VA = "0x5B8E4C", Slot = "37")]
	public bool References(INGUIFont font)
	{
		return default(bool);
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0x5B64E0", Offset = "0x5B64E0", VA = "0x5B64E0", Slot = "38")]
	public void MarkAsChanged()
	{
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0x5B7C2C", Offset = "0x5B7C2C", VA = "0x5B7C2C", Slot = "39")]
	public void UpdateUVRect()
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0x5B9060", Offset = "0x5B9060", VA = "0x5B9060")]
	private BMSymbol GetSymbol(string sequence, bool createIfMissing)
	{
		return null;
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0x5B920C", Offset = "0x5B920C", VA = "0x5B920C", Slot = "40")]
	public BMSymbol MatchSymbol(string text, int offset, int textLength)
	{
		return null;
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0x5B94A8", Offset = "0x5B94A8", VA = "0x5B94A8", Slot = "41")]
	public void AddSymbol(string sequence, string spriteName)
	{
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0x5B95C4", Offset = "0x5B95C4", VA = "0x5B95C4", Slot = "42")]
	public void RemoveSymbol(string sequence)
	{
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0x5B9704", Offset = "0x5B9704", VA = "0x5B9704", Slot = "43")]
	public void RenameSymbol(string before, string after)
	{
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0x5B9810", Offset = "0x5B9810", VA = "0x5B9810", Slot = "44")]
	public bool UsesSprite(string s)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000DC")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2353D8", Offset = "0x2353D8")]
public class UI2DSprite : UIBasicSprite
{
	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	[HideInInspector]
	[SerializeField]
	private Sprite mSprite;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	[HideInInspector]
	private Shader mShader;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	[SerializeField]
	[HideInInspector]
	private Vector4 mBorder;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	[SerializeField]
	[HideInInspector]
	private bool mFixedAspect;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	[HideInInspector]
	private float mPixelSize;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	public Sprite nextSprite;

	[NonSerialized]
	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private int mPMA;

	[Token(Token = "0x17000120")]
	public Sprite sprite2D
	{
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x59C2BC", Offset = "0x59C2BC", VA = "0x59C2BC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000700")]
		[Address(RVA = "0x59C2C4", Offset = "0x59C2C4", VA = "0x59C2C4")]
		set
		{
		}
	}

	[Token(Token = "0x17000121")]
	public override Material material
	{
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x59C380", Offset = "0x59C380", VA = "0x59C380", Slot = "25")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000702")]
		[Address(RVA = "0x59C388", Offset = "0x59C388", VA = "0x59C388", Slot = "26")]
		set
		{
		}
	}

	[Token(Token = "0x17000122")]
	public override Shader shader
	{
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x59C44C", Offset = "0x59C44C", VA = "0x59C44C", Slot = "29")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000704")]
		[Address(RVA = "0x59C56C", Offset = "0x59C56C", VA = "0x59C56C", Slot = "30")]
		set
		{
		}
	}

	[Token(Token = "0x17000123")]
	public override Texture mainTexture
	{
		[Token(Token = "0x6000705")]
		[Address(RVA = "0x59C67C", Offset = "0x59C67C", VA = "0x59C67C", Slot = "27")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000124")]
	public bool fixedAspect
	{
		[Token(Token = "0x6000706")]
		[Address(RVA = "0x59C7AC", Offset = "0x59C7AC", VA = "0x59C7AC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000707")]
		[Address(RVA = "0x59C7B4", Offset = "0x59C7B4", VA = "0x59C7B4")]
		set
		{
		}
	}

	[Token(Token = "0x17000125")]
	public override bool premultipliedAlpha
	{
		[Token(Token = "0x6000708")]
		[Address(RVA = "0x59C838", Offset = "0x59C838", VA = "0x59C838", Slot = "41")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000126")]
	public override float pixelSize
	{
		[Token(Token = "0x6000709")]
		[Address(RVA = "0x59C95C", Offset = "0x59C95C", VA = "0x59C95C", Slot = "42")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000127")]
	public override Vector4 drawingDimensions
	{
		[Token(Token = "0x600070A")]
		[Address(RVA = "0x59C964", Offset = "0x59C964", VA = "0x59C964", Slot = "24")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x17000128")]
	public override Vector4 border
	{
		[Token(Token = "0x600070B")]
		[Address(RVA = "0x59CFC4", Offset = "0x59CFC4", VA = "0x59CFC4", Slot = "36")]
		get
		{
			return default(Vector4);
		}
		[Token(Token = "0x600070C")]
		[Address(RVA = "0x59CFD4", Offset = "0x59CFD4", VA = "0x59CFD4", Slot = "37")]
		set
		{
		}
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0x59C1D4", Offset = "0x59C1D4", VA = "0x59C1D4")]
	public UI2DSprite()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0x59D0E4", Offset = "0x59D0E4", VA = "0x59D0E4", Slot = "22")]
	protected override void OnUpdate()
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0x59D654", Offset = "0x59D654", VA = "0x59D654", Slot = "33")]
	public override void MakePixelPerfect()
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0x59D89C", Offset = "0x59D89C", VA = "0x59D89C", Slot = "38")]
	public override void OnFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols)
	{
	}
}
[Token(Token = "0x20000DD")]
public class UI2DSpriteAnimation : MonoBehaviour
{
	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int frameIndex;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	protected int framerate;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool ignoreTimeScale;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool loop;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite[] frames;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private SpriteRenderer mUnitySprite;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UI2DSprite mNguiSprite;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mUpdate;

	[Token(Token = "0x17000129")]
	public bool isPlaying
	{
		[Token(Token = "0x6000711")]
		[Address(RVA = "0x59DDB4", Offset = "0x59DDB4", VA = "0x59DDB4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700012A")]
	public int framesPerSecond
	{
		[Token(Token = "0x6000712")]
		[Address(RVA = "0x59DDBC", Offset = "0x59DDBC", VA = "0x59DDBC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000713")]
		[Address(RVA = "0x59DDC4", Offset = "0x59DDC4", VA = "0x59DDC4")]
		set
		{
		}
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0x59DD9C", Offset = "0x59DD9C", VA = "0x59DD9C")]
	public UI2DSpriteAnimation()
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0x59DDCC", Offset = "0x59DDCC", VA = "0x59DDCC")]
	public void Play()
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0x59E224", Offset = "0x59E224", VA = "0x59E224")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x59E230", Offset = "0x59E230", VA = "0x59E230")]
	public void ResetToBeginning()
	{
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0x59E278", Offset = "0x59E278", VA = "0x59E278")]
	private void Start()
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0x59E27C", Offset = "0x59E27C", VA = "0x59E27C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0x59DE9C", Offset = "0x59DE9C", VA = "0x59DE9C")]
	private void UpdateSprite()
	{
	}
}
[Token(Token = "0x20000DE")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235430", Offset = "0x235430")]
[ExecuteInEditMode]
public class UIAnchor : MonoBehaviour
{
	[Token(Token = "0x20000DF")]
	[DoNotObfuscateNGUI]
	public enum Side
	{
		[Token(Token = "0x4000533")]
		BottomLeft,
		[Token(Token = "0x4000534")]
		Left,
		[Token(Token = "0x4000535")]
		TopLeft,
		[Token(Token = "0x4000536")]
		Top,
		[Token(Token = "0x4000537")]
		TopRight,
		[Token(Token = "0x4000538")]
		Right,
		[Token(Token = "0x4000539")]
		BottomRight,
		[Token(Token = "0x400053A")]
		Bottom,
		[Token(Token = "0x400053B")]
		Center
	}

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Camera uiCamera;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject container;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Side side;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool runOnlyOnce;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 relativeOffset;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector2 pixelOffset;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[HideInInspector]
	private UIWidget widgetContainer;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform mTrans;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Animation mAnim;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rect mRect;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UIRoot mRoot;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool mStarted;

	[Token(Token = "0x600071A")]
	[Address(RVA = "0x59E378", Offset = "0x59E378", VA = "0x59E378")]
	public UIAnchor()
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0x59E454", Offset = "0x59E454", VA = "0x59E454")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0x59E5EC", Offset = "0x59E5EC", VA = "0x59E5EC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0x59E758", Offset = "0x59E758", VA = "0x59E758")]
	private void ScreenSizeChanged()
	{
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0x59F9FC", Offset = "0x59F9FC", VA = "0x59F9FC")]
	private void Start()
	{
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0x59E774", Offset = "0x59E774", VA = "0x59E774")]
	private void Update()
	{
	}
}
[Token(Token = "0x20000E0")]
public class UIAtlas : MonoBehaviour, INGUIAtlas
{
	[Serializable]
	[Token(Token = "0x20000E1")]
	private class Sprite
	{
		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Rect outer;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Rect inner;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool rotated;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float paddingLeft;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float paddingRight;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float paddingTop;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float paddingBottom;

		[Token(Token = "0x17000131")]
		public bool hasPadding
		{
			[Token(Token = "0x6000735")]
			[Address(RVA = "0xEF0724", Offset = "0xEF0724", VA = "0xEF0724")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xEF0638", Offset = "0xEF0638", VA = "0xEF0638")]
		public Sprite()
		{
		}
	}

	[Token(Token = "0x20000E2")]
	private enum Coordinates
	{
		[Token(Token = "0x400054E")]
		Pixels,
		[Token(Token = "0x400054F")]
		TexCoords
	}

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	[HideInInspector]
	private Material material;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[HideInInspector]
	private List<UISpriteData> mSprites;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	[HideInInspector]
	private float mPixelSize;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private UnityEngine.Object mReplacement;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[HideInInspector]
	private Coordinates mCoordinates;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private List<Sprite> sprites;

	[NonSerialized]
	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int mPMA;

	[NonSerialized]
	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<string, int> mSpriteIndices;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23A104", Offset = "0x23A104")]
	private static Comparison<UISpriteData> <>f__am$cache0;

	[Token(Token = "0x1700012B")]
	public Material spriteMaterial
	{
		[Token(Token = "0x6000721")]
		[Address(RVA = "0x59FD24", Offset = "0x59FD24", VA = "0x59FD24", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000722")]
		[Address(RVA = "0x59FE68", Offset = "0x59FE68", VA = "0x59FE68", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x1700012C")]
	public bool premultipliedAlpha
	{
		[Token(Token = "0x6000723")]
		[Address(RVA = "0x5A067C", Offset = "0x5A067C", VA = "0x5A067C", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700012D")]
	public List<UISpriteData> spriteList
	{
		[Token(Token = "0x6000724")]
		[Address(RVA = "0x5A08A8", Offset = "0x5A08A8", VA = "0x5A08A8", Slot = "6")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000725")]
		[Address(RVA = "0x5A10C0", Offset = "0x5A10C0", VA = "0x5A10C0", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x1700012E")]
	public Texture texture
	{
		[Token(Token = "0x6000726")]
		[Address(RVA = "0x5A11A8", Offset = "0x5A11A8", VA = "0x5A11A8", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700012F")]
	public float pixelSize
	{
		[Token(Token = "0x6000727")]
		[Address(RVA = "0x5A12F4", Offset = "0x5A12F4", VA = "0x5A12F4", Slot = "9")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x5A13D4", Offset = "0x5A13D4", VA = "0x5A13D4", Slot = "10")]
		set
		{
		}
	}

	[Token(Token = "0x17000130")]
	public INGUIAtlas replacement
	{
		[Token(Token = "0x6000729")]
		[Address(RVA = "0x59FE04", Offset = "0x59FE04", VA = "0x59FE04", Slot = "12")]
		get
		{
			return null;
		}
		[Token(Token = "0x600072A")]
		[Address(RVA = "0x5A151C", Offset = "0x5A151C", VA = "0x5A151C", Slot = "13")]
		set
		{
		}
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0x59FC20", Offset = "0x59FC20", VA = "0x59FC20")]
	public UIAtlas()
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0x5A1744", Offset = "0x5A1744", VA = "0x5A1744", Slot = "14")]
	public UISpriteData GetSprite(string name)
	{
		return null;
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0x5A1BAC", Offset = "0x5A1BAC", VA = "0x5A1BAC")]
	public void MarkSpriteListAsChanged()
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0x5A1CF0", Offset = "0x5A1CF0", VA = "0x5A1CF0", Slot = "19")]
	public void SortAlphabetically()
	{
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0x5A1DF4", Offset = "0x5A1DF4", VA = "0x5A1DF4", Slot = "15")]
	public BetterList<string> GetListOfSprites()
	{
		return null;
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0x5A2054", Offset = "0x5A2054", VA = "0x5A2054", Slot = "16")]
	public BetterList<string> GetListOfSprites(string match)
	{
		return null;
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0x5A2674", Offset = "0x5A2674", VA = "0x5A2674", Slot = "17")]
	public bool References(INGUIAtlas atlas)
	{
		return default(bool);
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0x59FFC0", Offset = "0x59FFC0", VA = "0x59FFC0", Slot = "18")]
	public void MarkAsChanged()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0x5A09C0", Offset = "0x5A09C0", VA = "0x5A09C0")]
	private bool Upgrade()
	{
		return default(bool);
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0x5A2774", Offset = "0x5A2774", VA = "0x5A2774")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D704", Offset = "0x23D704")]
	private static int <SortAlphabetically>m__0(UISpriteData s1, UISpriteData s2)
	{
		return default(int);
	}
}
[Token(Token = "0x20000E3")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235490", Offset = "0x235490")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235490", Offset = "0x235490")]
[ExecuteInEditMode]
public class UICamera : MonoBehaviour
{
	[Token(Token = "0x20000E4")]
	[DoNotObfuscateNGUI]
	public enum ControlScheme
	{
		[Token(Token = "0x40005BF")]
		Mouse,
		[Token(Token = "0x40005C0")]
		Touch,
		[Token(Token = "0x40005C1")]
		Controller
	}

	[Token(Token = "0x20000E5")]
	[DoNotObfuscateNGUI]
	public enum ClickNotification
	{
		[Token(Token = "0x40005C3")]
		None,
		[Token(Token = "0x40005C4")]
		Always,
		[Token(Token = "0x40005C5")]
		BasedOnDelta
	}

	[Token(Token = "0x20000E6")]
	public class MouseOrTouch
	{
		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public KeyCode key;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector2 pos;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector2 lastPos;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 delta;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 totalDelta;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Camera pressedCam;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject last;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public GameObject current;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject pressed;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public GameObject dragged;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pressTime;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float clickTime;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ClickNotification clickNotification;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool touchBegan;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool pressStarted;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool dragStarted;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int ignoreDelta;

		[Token(Token = "0x1700014C")]
		public float deltaTime
		{
			[Token(Token = "0x600078D")]
			[Address(RVA = "0xF162BC", Offset = "0xF162BC", VA = "0xF162BC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700014D")]
		public bool isOverUI
		{
			[Token(Token = "0x600078E")]
			[Address(RVA = "0xF01598", Offset = "0xF01598", VA = "0xF01598")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xF16BA4", Offset = "0xF16BA4", VA = "0xF16BA4")]
		public MouseOrTouch()
		{
		}
	}

	[Token(Token = "0x20000E7")]
	[DoNotObfuscateNGUI]
	public enum EventType
	{
		[Token(Token = "0x40005D8")]
		World_3D,
		[Token(Token = "0x40005D9")]
		UI_3D,
		[Token(Token = "0x40005DA")]
		World_2D,
		[Token(Token = "0x40005DB")]
		UI_2D
	}

	[Token(Token = "0x20000E8")]
	public delegate bool GetKeyStateFunc(KeyCode key);

	[Token(Token = "0x20000E9")]
	public delegate float GetAxisFunc(string name);

	[Token(Token = "0x20000EA")]
	public delegate bool GetAnyKeyFunc();

	[Token(Token = "0x20000EB")]
	public delegate MouseOrTouch GetMouseDelegate(int button);

	[Token(Token = "0x20000EC")]
	public delegate MouseOrTouch GetTouchDelegate(int id, bool createIfMissing);

	[Token(Token = "0x20000ED")]
	public delegate void RemoveTouchDelegate(int id);

	[Token(Token = "0x20000EE")]
	public delegate void OnScreenResize();

	[Token(Token = "0x20000EF")]
	[DoNotObfuscateNGUI]
	public enum ProcessEventsIn
	{
		[Token(Token = "0x40005DD")]
		Update,
		[Token(Token = "0x40005DE")]
		LateUpdate
	}

	[Token(Token = "0x20000F0")]
	public delegate void OnCustomInput();

	[Token(Token = "0x20000F1")]
	public delegate void OnSchemeChange();

	[Token(Token = "0x20000F2")]
	public delegate void MoveDelegate(Vector2 delta);

	[Token(Token = "0x20000F3")]
	public delegate void VoidDelegate(GameObject go);

	[Token(Token = "0x20000F4")]
	public delegate void BoolDelegate(GameObject go, bool state);

	[Token(Token = "0x20000F5")]
	public delegate void FloatDelegate(GameObject go, float delta);

	[Token(Token = "0x20000F6")]
	public delegate void VectorDelegate(GameObject go, Vector2 delta);

	[Token(Token = "0x20000F7")]
	public delegate void ObjectDelegate(GameObject go, GameObject obj);

	[Token(Token = "0x20000F8")]
	public delegate void KeyCodeDelegate(GameObject go, KeyCode key);

	[Token(Token = "0x20000F9")]
	private struct DepthEntry
	{
		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int depth;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public RaycastHit hit;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 point;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public GameObject go;
	}

	[Token(Token = "0x20000FA")]
	public class Touch
	{
		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int fingerId;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TouchPhase phase;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 position;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int tapCount;

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xF18218", Offset = "0xF18218", VA = "0xF18218")]
		public Touch()
		{
		}
	}

	[Token(Token = "0x20000FB")]
	public delegate int GetTouchCountCallback();

	[Token(Token = "0x20000FC")]
	public delegate Touch GetTouchCallback(int index);

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BetterList<UICamera> list;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static GetKeyStateFunc GetKeyDown;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static GetKeyStateFunc GetKeyUp;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static GetKeyStateFunc GetKey;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static GetAxisFunc GetAxis;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static GetAnyKeyFunc GetAnyKeyDown;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static GetMouseDelegate GetMouse;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static GetTouchDelegate GetTouch;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static RemoveTouchDelegate RemoveTouch;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static OnScreenResize onScreenResize;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public EventType eventType;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool eventsGoToColliders;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public LayerMask eventReceiverMask;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ProcessEventsIn processEventsIn;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool debug;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool useMouse;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool useTouch;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	public bool allowMultiTouch;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool useKeyboard;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool useController;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool stickyTooltip;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tooltipDelay;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool longPressTooltip;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float mouseDragThreshold;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float mouseClickThreshold;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float touchDragThreshold;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float touchClickThreshold;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float rangeDistance;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string horizontalAxisName;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public string verticalAxisName;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string horizontalPanAxisName;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public string verticalPanAxisName;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string scrollAxisName;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x23A114", Offset = "0x23A114")]
	public bool commandClick;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public KeyCode submitKey0;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public KeyCode submitKey1;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public KeyCode cancelKey0;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public KeyCode cancelKey1;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool autoHideCursor;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static OnCustomInput onCustomInput;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static bool showTooltips;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public static bool ignoreAllEvents;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public static bool ignoreControllerInput;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	private static bool mDisableController;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Vector2 mLastPos;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Vector3 lastWorldPosition;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public static UnityEngine.Ray lastWorldRay;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public static RaycastHit lastHit;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static UICamera current;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public static Camera currentCamera;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static OnSchemeChange onSchemeChange;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private static ControlScheme mLastScheme;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static int currentTouchID;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private static KeyCode mCurrentKey;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static MouseOrTouch currentTouch;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private static bool mInputFocus;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static GameObject mGenericHandler;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public static GameObject fallThrough;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static VoidDelegate onClick;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public static VoidDelegate onDoubleClick;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static BoolDelegate onHover;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public static BoolDelegate onPress;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static BoolDelegate onSelect;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public static FloatDelegate onScroll;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public static VectorDelegate onDrag;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public static VoidDelegate onDragStart;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public static ObjectDelegate onDragOver;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public static ObjectDelegate onDragOut;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public static VoidDelegate onDragEnd;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public static ObjectDelegate onDrop;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static KeyCodeDelegate onKey;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public static KeyCodeDelegate onNavigate;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static VectorDelegate onPan;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public static BoolDelegate onTooltip;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static MoveDelegate onMouseMove;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private static MouseOrTouch[] mMouse;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public static MouseOrTouch controller;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public static List<MouseOrTouch> activeTouches;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private static List<int> mTouchIDs;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private static int mWidth;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private static int mHeight;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private static GameObject mTooltip;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Camera mCam;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private static float mTooltipTime;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float mNextRaycast;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public static bool isDragging;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private static int mLastInteractionCheck;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private static bool mLastInteractionResult;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private static int mLastFocusCheck;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private static bool mLastFocusResult;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private static int mLastOverCheck;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private static bool mLastOverResult;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private static GameObject mRayHitObject;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private static GameObject mHover;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private static GameObject mSelected;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private static DepthEntry mHit;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private static BetterList<DepthEntry> mHits;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private static RaycastHit[] mRayHits;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private static Collider2D[] mOverlap;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private static UnityEngine.Plane m2DPlane;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private static float mNextEvent;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	private static int mNotifying;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private static bool mUsingTouchEvents;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	public static GetTouchCountCallback GetInputTouchCount;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public static GetTouchCallback GetInputTouch;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23A148", Offset = "0x23A148")]
	private static BetterList<DepthEntry>.CompareFunc <>f__am$cache0;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23A158", Offset = "0x23A158")]
	private static BetterList<DepthEntry>.CompareFunc <>f__am$cache1;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23A168", Offset = "0x23A168")]
	private static BetterList<DepthEntry>.CompareFunc <>f__am$cache2;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23A178", Offset = "0x23A178")]
	private static BetterList<UICamera>.CompareFunc <>f__mg$cache0;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23A188", Offset = "0x23A188")]
	private static BetterList<UICamera>.CompareFunc <>f__mg$cache1;

	[Token(Token = "0x17000132")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EE30", Offset = "0x23EE30")]
	public bool stickyPress
	{
		[Token(Token = "0x6000737")]
		[Address(RVA = "0xEFE9A0", Offset = "0xEFE9A0", VA = "0xEFE9A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000133")]
	public static bool disableController
	{
		[Token(Token = "0x6000738")]
		[Address(RVA = "0xEFE9A8", Offset = "0xEFE9A8", VA = "0xEFE9A8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000739")]
		[Address(RVA = "0xEFEA78", Offset = "0xEFEA78", VA = "0xEFEA78")]
		set
		{
		}
	}

	[Token(Token = "0x17000134")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EE64", Offset = "0x23EE64")]
	public static Vector2 lastTouchPosition
	{
		[Token(Token = "0x600073A")]
		[Address(RVA = "0xEFEB08", Offset = "0xEFEB08", VA = "0xEFEB08")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x600073B")]
		[Address(RVA = "0xEFEBA4", Offset = "0xEFEBA4", VA = "0xEFEBA4")]
		set
		{
		}
	}

	[Token(Token = "0x17000135")]
	public static Vector2 lastEventPosition
	{
		[Token(Token = "0x600073C")]
		[Address(RVA = "0xEFEC3C", Offset = "0xEFEC3C", VA = "0xEFEC3C")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x600073D")]
		[Address(RVA = "0xEFEED0", Offset = "0xEFEED0", VA = "0xEFEED0")]
		set
		{
		}
	}

	[Token(Token = "0x17000136")]
	public static UICamera first
	{
		[Token(Token = "0x600073E")]
		[Address(RVA = "0xEFEF68", Offset = "0xEFEF68", VA = "0xEFEF68")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000137")]
	public static ControlScheme currentScheme
	{
		[Token(Token = "0x600073F")]
		[Address(RVA = "0xEFBD9C", Offset = "0xEFBD9C", VA = "0xEFBD9C")]
		get
		{
			return default(ControlScheme);
		}
		[Token(Token = "0x6000740")]
		[Address(RVA = "0xEFF0E0", Offset = "0xEFF0E0", VA = "0xEFF0E0")]
		set
		{
		}
	}

	[Token(Token = "0x17000138")]
	public static KeyCode currentKey
	{
		[Token(Token = "0x6000741")]
		[Address(RVA = "0xEFF5E0", Offset = "0xEFF5E0", VA = "0xEFF5E0")]
		get
		{
			return default(KeyCode);
		}
		[Token(Token = "0x6000742")]
		[Address(RVA = "0xEFF264", Offset = "0xEFF264", VA = "0xEFF264")]
		set
		{
		}
	}

	[Token(Token = "0x17000139")]
	public static UnityEngine.Ray currentRay
	{
		[Token(Token = "0x6000743")]
		[Address(RVA = "0xEFF8F8", Offset = "0xEFF8F8", VA = "0xEFF8F8")]
		get
		{
			return default(UnityEngine.Ray);
		}
	}

	[Token(Token = "0x1700013A")]
	public static bool inputHasFocus
	{
		[Token(Token = "0x6000744")]
		[Address(RVA = "0xEFFB28", Offset = "0xEFFB28", VA = "0xEFFB28")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700013B")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EE98", Offset = "0x23EE98")]
	public static GameObject genericEventHandler
	{
		[Token(Token = "0x6000745")]
		[Address(RVA = "0xEFFCA8", Offset = "0xEFFCA8", VA = "0xEFFCA8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000746")]
		[Address(RVA = "0xEFFD34", Offset = "0xEFFD34", VA = "0xEFFD34")]
		set
		{
		}
	}

	[Token(Token = "0x1700013C")]
	public static MouseOrTouch mouse0
	{
		[Token(Token = "0x6000747")]
		[Address(RVA = "0xEFFDC4", Offset = "0xEFFDC4", VA = "0xEFFDC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700013D")]
	public static MouseOrTouch mouse1
	{
		[Token(Token = "0x6000748")]
		[Address(RVA = "0xEFFE80", Offset = "0xEFFE80", VA = "0xEFFE80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700013E")]
	public static MouseOrTouch mouse2
	{
		[Token(Token = "0x6000749")]
		[Address(RVA = "0xEFFF3C", Offset = "0xEFFF3C", VA = "0xEFFF3C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700013F")]
	private bool handlesEvents
	{
		[Token(Token = "0x600074A")]
		[Address(RVA = "0xEFFFF8", Offset = "0xEFFFF8", VA = "0xEFFFF8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000140")]
	public Camera cachedCamera
	{
		[Token(Token = "0x600074B")]
		[Address(RVA = "0xF002DC", Offset = "0xF002DC", VA = "0xF002DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000141")]
	public static GameObject tooltipObject
	{
		[Token(Token = "0x600074C")]
		[Address(RVA = "0xF00390", Offset = "0xF00390", VA = "0xF00390")]
		get
		{
			return null;
		}
		[Token(Token = "0x600074D")]
		[Address(RVA = "0xF0041C", Offset = "0xF0041C", VA = "0xF0041C")]
		set
		{
		}
	}

	[Token(Token = "0x17000142")]
	public static bool isOverUI
	{
		[Token(Token = "0x600074F")]
		[Address(RVA = "0xF00AB4", Offset = "0xF00AB4", VA = "0xF00AB4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000143")]
	public static bool uiHasFocus
	{
		[Token(Token = "0x6000750")]
		[Address(RVA = "0xF01094", Offset = "0xF01094", VA = "0xF01094")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000144")]
	public static bool interactingWithUI
	{
		[Token(Token = "0x6000751")]
		[Address(RVA = "0xF01748", Offset = "0xF01748", VA = "0xF01748")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000145")]
	public static GameObject hoveredObject
	{
		[Token(Token = "0x6000752")]
		[Address(RVA = "0xEFA6F8", Offset = "0xEFA6F8", VA = "0xEFA6F8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000753")]
		[Address(RVA = "0xF01B5C", Offset = "0xF01B5C", VA = "0xF01B5C")]
		set
		{
		}
	}

	[Token(Token = "0x17000146")]
	public static GameObject controllerNavigationObject
	{
		[Token(Token = "0x6000754")]
		[Address(RVA = "0xF031D4", Offset = "0xF031D4", VA = "0xF031D4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000755")]
		[Address(RVA = "0xF03A08", Offset = "0xF03A08", VA = "0xF03A08")]
		set
		{
		}
	}

	[Token(Token = "0x17000147")]
	public static GameObject selectedObject
	{
		[Token(Token = "0x6000756")]
		[Address(RVA = "0xF03D44", Offset = "0xF03D44", VA = "0xF03D44")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000757")]
		[Address(RVA = "0xF03F08", Offset = "0xF03F08", VA = "0xF03F08")]
		set
		{
		}
	}

	[Token(Token = "0x17000148")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EECC", Offset = "0x23EECC")]
	public static int touchCount
	{
		[Token(Token = "0x6000759")]
		[Address(RVA = "0xF04DB8", Offset = "0xF04DB8", VA = "0xF04DB8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000149")]
	public static int dragCount
	{
		[Token(Token = "0x600075B")]
		[Address(RVA = "0xF051B0", Offset = "0xF051B0", VA = "0xF051B0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700014A")]
	public static Camera mainCamera
	{
		[Token(Token = "0x600075C")]
		[Address(RVA = "0xF05530", Offset = "0xF05530", VA = "0xF05530")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700014B")]
	public static UICamera eventHandler
	{
		[Token(Token = "0x600075D")]
		[Address(RVA = "0xF000B4", Offset = "0xF000B4", VA = "0xF000B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0xEFE880", Offset = "0xEFE880", VA = "0xEFE880")]
	public UICamera()
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xF00910", Offset = "0xF00910", VA = "0xF00910")]
	public static bool IsPartOfUI(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xF04A70", Offset = "0xF04A70", VA = "0xF04A70")]
	public static bool IsPressed(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xF04E30", Offset = "0xF04E30", VA = "0xF04E30")]
	public static int CountInputSources()
	{
		return default(int);
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0xF0560C", Offset = "0xF0560C", VA = "0xF0560C")]
	private static int CompareFunc(UICamera a, UICamera b)
	{
		return default(int);
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0xF0574C", Offset = "0xF0574C", VA = "0xF0574C")]
	private static Rigidbody FindRootRigidbody(Transform trans)
	{
		return null;
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0xF058EC", Offset = "0xF058EC", VA = "0xF058EC")]
	private static Rigidbody2D FindRootRigidbody2D(Transform trans)
	{
		return null;
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0xF05A8C", Offset = "0xF05A8C", VA = "0xF05A8C")]
	public static void Raycast(MouseOrTouch touch)
	{
	}

	[Token(Token = "0x6000762")]
	[Address(RVA = "0xF05CD8", Offset = "0xF05CD8", VA = "0xF05CD8")]
	public static bool Raycast(Vector3 inPos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0xF08DFC", Offset = "0xF08DFC", VA = "0xF08DFC")]
	public static GameObject RaycastSimple(Vector3 inPos)
	{
		return null;
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0xF08CB0", Offset = "0xF08CB0", VA = "0xF08CB0")]
	private static bool IsVisible(Vector3 worldPoint, GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0xF08B60", Offset = "0xF08B60", VA = "0xF08B60")]
	private static bool IsVisible(ref DepthEntry de)
	{
		return default(bool);
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0xEFB738", Offset = "0xEFB738", VA = "0xEFB738")]
	public static bool IsHighlighted(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0xF02FE0", Offset = "0xF02FE0", VA = "0xF02FE0")]
	public static UICamera FindCameraForLayer(int layer)
	{
		return null;
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0xF0A414", Offset = "0xF0A414", VA = "0xF0A414")]
	private static int GetDirection(KeyCode up, KeyCode down)
	{
		return default(int);
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0xF0A7D8", Offset = "0xF0A7D8", VA = "0xF0A7D8")]
	private static int GetDirection(KeyCode up0, KeyCode up1, KeyCode down0, KeyCode down1)
	{
		return default(int);
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xF0AAA0", Offset = "0xF0AAA0", VA = "0xF0AAA0")]
	private static int GetDirection(string axis)
	{
		return default(int);
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xF02740", Offset = "0xF02740", VA = "0xF02740")]
	public static void Notify(GameObject go, string funcName, object obj)
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0xF0B090", Offset = "0xF0B090", VA = "0xF0B090")]
	private void Awake()
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0xF0B494", Offset = "0xF0B494", VA = "0xF0B494")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0xF0B65C", Offset = "0xF0B65C", VA = "0xF0B65C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0xF0B718", Offset = "0xF0B718", VA = "0xF0B718")]
	private void Start()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xF0BACC", Offset = "0xF0BACC", VA = "0xF0BACC")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D714", Offset = "0x23D714")]
	private void StartIgnoring()
	{
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xF0BB5C", Offset = "0xF0BB5C", VA = "0xF0BB5C")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D758", Offset = "0x23D758")]
	private void StopIgnoring()
	{
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0xF0BBEC", Offset = "0xF0BBEC", VA = "0xF0BBEC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0xF0C6B0", Offset = "0xF0C6B0", VA = "0xF0C6B0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0xF0BCA8", Offset = "0xF0BCA8", VA = "0xF0BCA8")]
	private void ProcessEvents()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xF0D480", Offset = "0xF0D480", VA = "0xF0D480")]
	public void ProcessMouse()
	{
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xF0CAC4", Offset = "0xF0CAC4", VA = "0xF0CAC4")]
	public void ProcessTouches()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0xF116F8", Offset = "0xF116F8", VA = "0xF116F8")]
	private void ProcessFakeTouches()
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xF0EBCC", Offset = "0xF0EBCC", VA = "0xF0EBCC")]
	public void ProcessOthers()
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xF126E8", Offset = "0xF126E8", VA = "0xF126E8")]
	private void ProcessPress(bool pressed, float click, float drag)
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xF1504C", Offset = "0xF1504C", VA = "0xF1504C")]
	private void ProcessRelease(bool isMouse, float drag)
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0xF16108", Offset = "0xF16108", VA = "0xF16108")]
	private bool HasCollider(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xF108DC", Offset = "0xF108DC", VA = "0xF108DC")]
	public void ProcessTouch(bool pressed, bool released)
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xF162E4", Offset = "0xF162E4", VA = "0xF162E4")]
	public static void CancelNextTooltip()
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xF0049C", Offset = "0xF0049C", VA = "0xF0049C")]
	public static bool ShowTooltip(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0xEFF66C", Offset = "0xEFF66C", VA = "0xEFF66C")]
	public static bool HideTooltip()
	{
		return default(bool);
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0xF16374", Offset = "0xF16374", VA = "0xF16374")]
	public static void ResetTooltip(float delay = 0.5f)
	{
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0xF16BB8", Offset = "0xF16BB8", VA = "0xF16BB8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D79C", Offset = "0x23D79C")]
	private static int <Raycast>m__0(DepthEntry r1, DepthEntry r2)
	{
		return default(int);
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0xF16C58", Offset = "0xF16C58", VA = "0xF16C58")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D7AC", Offset = "0x23D7AC")]
	private static int <Raycast>m__1(DepthEntry r1, DepthEntry r2)
	{
		return default(int);
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0xF16CF8", Offset = "0xF16CF8", VA = "0xF16CF8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D7BC", Offset = "0x23D7BC")]
	private static int <RaycastSimple>m__2(DepthEntry r1, DepthEntry r2)
	{
		return default(int);
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0xF16D98", Offset = "0xF16D98", VA = "0xF16D98")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D7CC", Offset = "0x23D7CC")]
	private static bool <GetKeyDown>m__3(KeyCode key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0xF16E4C", Offset = "0xF16E4C", VA = "0xF16E4C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D7DC", Offset = "0x23D7DC")]
	private static bool <GetKeyUp>m__4(KeyCode key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0xF16F00", Offset = "0xF16F00", VA = "0xF16F00")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D7EC", Offset = "0x23D7EC")]
	private static bool <GetKey>m__5(KeyCode key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0xF16FB4", Offset = "0xF16FB4", VA = "0xF16FB4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D7FC", Offset = "0x23D7FC")]
	private static float <GetAxis>m__6(string axis)
	{
		return default(float);
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0xF1705C", Offset = "0xF1705C", VA = "0xF1705C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D80C", Offset = "0x23D80C")]
	private static MouseOrTouch <GetMouse>m__7(int button)
	{
		return null;
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0xF17120", Offset = "0xF17120", VA = "0xF17120")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D81C", Offset = "0x23D81C")]
	private static MouseOrTouch <GetTouch>m__8(int id, bool createIfMissing)
	{
		return null;
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xF176D0", Offset = "0xF176D0", VA = "0xF176D0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D82C", Offset = "0x23D82C")]
	private static void <RemoveTouch>m__9(int id)
	{
	}
}
[Token(Token = "0x20000FD")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235598", Offset = "0x235598")]
public class UIColorPicker : MonoBehaviour
{
	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIColorPicker current;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Color value;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UIWidget selectionWidget;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<EventDelegate> onChange;

	[NonSerialized]
	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Transform mTrans;

	[NonSerialized]
	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UITexture mUITex;

	[NonSerialized]
	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Texture2D mTex;

	[NonSerialized]
	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UICamera mCam;

	[NonSerialized]
	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector2 mPos;

	[NonSerialized]
	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int mWidth;

	[NonSerialized]
	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int mHeight;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static AnimationCurve mRed;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static AnimationCurve mGreen;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static AnimationCurve mBlue;

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0x887620", Offset = "0x887620", VA = "0x887620")]
	public UIColorPicker()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0x8876D4", Offset = "0x8876D4", VA = "0x8876D4")]
	private void Start()
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0x888AC0", Offset = "0x888AC0", VA = "0x888AC0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0x888B50", Offset = "0x888B50", VA = "0x888B50")]
	private void OnPress(bool pressed)
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0x8890CC", Offset = "0x8890CC", VA = "0x8890CC")]
	private void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0x8890F4", Offset = "0x8890F4", VA = "0x8890F4")]
	private void OnPan(Vector2 delta)
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0x888C00", Offset = "0x888C00", VA = "0x888C00")]
	private void Sample()
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0x8891E4", Offset = "0x8891E4", VA = "0x8891E4")]
	public void Select(Vector2 v)
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0x888664", Offset = "0x888664", VA = "0x888664")]
	public Vector2 Select(Color c)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0x887A1C", Offset = "0x887A1C", VA = "0x887A1C")]
	public static Color Sample(float x, float y)
	{
		return default(Color);
	}
}
[Token(Token = "0x20000FE")]
[ExecuteInEditMode]
public class UIFont : MonoBehaviour, INGUIFont
{
	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	[HideInInspector]
	private Material mMat;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[HideInInspector]
	private Rect mUVRect;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private BMFont mFont;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[HideInInspector]
	private UnityEngine.Object mAtlas;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[HideInInspector]
	private UnityEngine.Object mReplacement;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[HideInInspector]
	private List<BMSymbol> mSymbols;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private Font mDynamicFont;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[HideInInspector]
	private int mDynamicFontSize;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	private FontStyle mDynamicFontStyle;

	[NonSerialized]
	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private UISpriteData mSprite;

	[NonSerialized]
	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int mPMA;

	[NonSerialized]
	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int mPacked;

	[Token(Token = "0x1700014E")]
	public BMFont bmFont
	{
		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x89C0A8", Offset = "0x89C0A8", VA = "0x89C0A8", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x89C238", Offset = "0x89C238", VA = "0x89C238", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x1700014F")]
	public int texWidth
	{
		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x89C320", Offset = "0x89C320", VA = "0x89C320", Slot = "6")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x89C418", Offset = "0x89C418", VA = "0x89C418", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x17000150")]
	public int texHeight
	{
		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x89C518", Offset = "0x89C518", VA = "0x89C518", Slot = "8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x89C610", Offset = "0x89C610", VA = "0x89C610", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x17000151")]
	public bool hasSymbols
	{
		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x89C710", Offset = "0x89C710", VA = "0x89C710", Slot = "10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000152")]
	public List<BMSymbol> symbols
	{
		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x89C81C", Offset = "0x89C81C", VA = "0x89C81C", Slot = "11")]
		get
		{
			return null;
		}
		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x89C8FC", Offset = "0x89C8FC", VA = "0x89C8FC", Slot = "12")]
		set
		{
		}
	}

	[Token(Token = "0x17000153")]
	public INGUIAtlas atlas
	{
		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x89C9E4", Offset = "0x89C9E4", VA = "0x89C9E4", Slot = "13")]
		get
		{
			return null;
		}
		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x89CAD8", Offset = "0x89CAD8", VA = "0x89CAD8", Slot = "14")]
		set
		{
		}
	}

	[Token(Token = "0x17000154")]
	public Material material
	{
		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x89D694", Offset = "0x89D694", VA = "0x89D694", Slot = "16")]
		get
		{
			return null;
		}
		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x89D9CC", Offset = "0x89D9CC", VA = "0x89D9CC", Slot = "17")]
		set
		{
		}
	}

	[Token(Token = "0x17000155")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EF34", Offset = "0x23EF34")]
	public bool premultipliedAlpha
	{
		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x89DB0C", Offset = "0x89DB0C", VA = "0x89DB0C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000156")]
	public bool premultipliedAlphaShader
	{
		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x89DB10", Offset = "0x89DB10", VA = "0x89DB10", Slot = "18")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000157")]
	public bool packedFontShader
	{
		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x89DDC8", Offset = "0x89DDC8", VA = "0x89DDC8", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000158")]
	public Texture2D texture
	{
		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x89E040", Offset = "0x89E040", VA = "0x89E040", Slot = "20")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000159")]
	public Rect uvRect
	{
		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x89D07C", Offset = "0x89D07C", VA = "0x89D07C", Slot = "21")]
		get
		{
			return default(Rect);
		}
		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x89E1BC", Offset = "0x89E1BC", VA = "0x89E1BC", Slot = "22")]
		set
		{
		}
	}

	[Token(Token = "0x1700015A")]
	public string spriteName
	{
		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x89E320", Offset = "0x89E320", VA = "0x89E320", Slot = "23")]
		get
		{
			return null;
		}
		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x89E41C", Offset = "0x89E41C", VA = "0x89E41C", Slot = "24")]
		set
		{
		}
	}

	[Token(Token = "0x1700015B")]
	public bool isValid
	{
		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x89E594", Offset = "0x89E594", VA = "0x89E594", Slot = "25")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700015C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EF68", Offset = "0x23EF68")]
	public int size
	{
		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x89E64C", Offset = "0x89E64C", VA = "0x89E64C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x89E758", Offset = "0x89E758", VA = "0x89E758")]
		set
		{
		}
	}

	[Token(Token = "0x1700015D")]
	public int defaultSize
	{
		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x89E650", Offset = "0x89E650", VA = "0x89E650", Slot = "26")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x89E75C", Offset = "0x89E75C", VA = "0x89E75C", Slot = "27")]
		set
		{
		}
	}

	[Token(Token = "0x1700015E")]
	public UISpriteData sprite
	{
		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x89CD00", Offset = "0x89CD00", VA = "0x89CD00", Slot = "28")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700015F")]
	public INGUIFont replacement
	{
		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x89C188", Offset = "0x89C188", VA = "0x89C188", Slot = "29")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000800")]
		[Address(RVA = "0x89EDC0", Offset = "0x89EDC0", VA = "0x89EDC0", Slot = "30")]
		set
		{
		}
	}

	[Token(Token = "0x17000160")]
	public INGUIFont finalFont
	{
		[Token(Token = "0x6000801")]
		[Address(RVA = "0x89EFF8", Offset = "0x89EFF8", VA = "0x89EFF8", Slot = "31")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000161")]
	public bool isDynamic
	{
		[Token(Token = "0x6000802")]
		[Address(RVA = "0x89E844", Offset = "0x89E844", VA = "0x89E844", Slot = "32")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000162")]
	public Font dynamicFont
	{
		[Token(Token = "0x6000803")]
		[Address(RVA = "0x89F0E8", Offset = "0x89F0E8", VA = "0x89F0E8", Slot = "33")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000804")]
		[Address(RVA = "0x89F1C8", Offset = "0x89F1C8", VA = "0x89F1C8", Slot = "34")]
		set
		{
		}
	}

	[Token(Token = "0x17000163")]
	public FontStyle dynamicFontStyle
	{
		[Token(Token = "0x6000805")]
		[Address(RVA = "0x89F354", Offset = "0x89F354", VA = "0x89F354", Slot = "35")]
		get
		{
			return default(FontStyle);
		}
		[Token(Token = "0x6000806")]
		[Address(RVA = "0x89F434", Offset = "0x89F434", VA = "0x89F434", Slot = "36")]
		set
		{
		}
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0x89BF9C", Offset = "0x89BF9C", VA = "0x89BF9C")]
	public UIFont()
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x89D5AC", Offset = "0x89D5AC", VA = "0x89D5AC", Slot = "15")]
	public UISpriteData GetSprite(string spriteName)
	{
		return null;
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0x89F530", Offset = "0x89F530", VA = "0x89F530")]
	private void Trim()
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x89F944", Offset = "0x89F944", VA = "0x89F944", Slot = "37")]
	public bool References(INGUIFont font)
	{
		return default(bool);
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x89D214", Offset = "0x89D214", VA = "0x89D214", Slot = "38")]
	public void MarkAsChanged()
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0x89E960", Offset = "0x89E960", VA = "0x89E960", Slot = "39")]
	public void UpdateUVRect()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0x89FA44", Offset = "0x89FA44", VA = "0x89FA44")]
	private BMSymbol GetSymbol(string sequence, bool createIfMissing)
	{
		return null;
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0x89FBF0", Offset = "0x89FBF0", VA = "0x89FBF0", Slot = "40")]
	public BMSymbol MatchSymbol(string text, int offset, int textLength)
	{
		return null;
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0x89FDEC", Offset = "0x89FDEC", VA = "0x89FDEC", Slot = "41")]
	public void AddSymbol(string sequence, string spriteName)
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x89FE28", Offset = "0x89FE28", VA = "0x89FE28", Slot = "42")]
	public void RemoveSymbol(string sequence)
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0x89FED4", Offset = "0x89FED4", VA = "0x89FED4", Slot = "43")]
	public void RenameSymbol(string before, string after)
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0x89FF00", Offset = "0x89FF00", VA = "0x89FF00", Slot = "44")]
	public bool UsesSprite(string s)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000FF")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235620", Offset = "0x235620")]
public class UIInput : MonoBehaviour
{
	[Token(Token = "0x2000100")]
	[DoNotObfuscateNGUI]
	public enum InputType
	{
		[Token(Token = "0x4000630")]
		Standard,
		[Token(Token = "0x4000631")]
		AutoCorrect,
		[Token(Token = "0x4000632")]
		Password
	}

	[Token(Token = "0x2000101")]
	[DoNotObfuscateNGUI]
	public enum Validation
	{
		[Token(Token = "0x4000634")]
		None,
		[Token(Token = "0x4000635")]
		Integer,
		[Token(Token = "0x4000636")]
		Float,
		[Token(Token = "0x4000637")]
		Alphanumeric,
		[Token(Token = "0x4000638")]
		Username,
		[Token(Token = "0x4000639")]
		Name,
		[Token(Token = "0x400063A")]
		Filename
	}

	[Token(Token = "0x2000102")]
	[DoNotObfuscateNGUI]
	public enum KeyboardType
	{
		[Token(Token = "0x400063C")]
		Default,
		[Token(Token = "0x400063D")]
		ASCIICapable,
		[Token(Token = "0x400063E")]
		NumbersAndPunctuation,
		[Token(Token = "0x400063F")]
		URL,
		[Token(Token = "0x4000640")]
		NumberPad,
		[Token(Token = "0x4000641")]
		PhonePad,
		[Token(Token = "0x4000642")]
		NamePhonePad,
		[Token(Token = "0x4000643")]
		EmailAddress
	}

	[Token(Token = "0x2000103")]
	[DoNotObfuscateNGUI]
	public enum OnReturnKey
	{
		[Token(Token = "0x4000645")]
		Default,
		[Token(Token = "0x4000646")]
		Submit,
		[Token(Token = "0x4000647")]
		NewLine
	}

	[Token(Token = "0x2000104")]
	public delegate char OnValidate(string text, int charIndex, char addedChar);

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIInput current;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static UIInput selection;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UILabel label;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public InputType inputType;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public OnReturnKey onReturnKey;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyboardType keyboardType;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool hideInput;

	[NonSerialized]
	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool selectAllTextOnFocus;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool submitOnUnselect;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Validation validation;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int characterLimit;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string savedAs;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[HideInInspector]
	private GameObject selectOnTab;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color activeTextColor;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color caretColor;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Color selectionColor;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<EventDelegate> onSubmit;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public List<EventDelegate> onChange;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public OnValidate onValidate;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[HideInInspector]
	[SerializeField]
	protected string mValue;

	[NonSerialized]
	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected string mDefaultText;

	[NonSerialized]
	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected Color mDefaultColor;

	[NonSerialized]
	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected float mPosition;

	[NonSerialized]
	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected bool mDoInit;

	[NonSerialized]
	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected NGUIText.Alignment mAlignment;

	[NonSerialized]
	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected bool mLoadSavedValue;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static int mDrawStart;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected static string mLastIME;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected static TouchScreenKeyboard mKeyboard;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static bool mWaitForKeyboard;

	[NonSerialized]
	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected int mSelectionStart;

	[NonSerialized]
	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected int mSelectionEnd;

	[NonSerialized]
	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected UITexture mHighlight;

	[NonSerialized]
	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected UITexture mCaret;

	[NonSerialized]
	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	protected Texture2D mBlankTex;

	[NonSerialized]
	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected float mNextBlink;

	[NonSerialized]
	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	protected float mLastAlpha;

	[NonSerialized]
	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected string mCached;

	[NonSerialized]
	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	protected int mSelectMe;

	[NonSerialized]
	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected int mSelectTime;

	[NonSerialized]
	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	protected bool mStarted;

	[NonSerialized]
	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private UICamera mCam;

	[NonSerialized]
	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private bool mEllipsis;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int mIgnoreKey;

	[NonSerialized]
	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Action onUpArrow;

	[NonSerialized]
	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public Action onDownArrow;

	[Token(Token = "0x17000164")]
	public string defaultText
	{
		[Token(Token = "0x6000812")]
		[Address(RVA = "0x8A3B58", Offset = "0x8A3B58", VA = "0x8A3B58")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000813")]
		[Address(RVA = "0x8A3DB8", Offset = "0x8A3DB8", VA = "0x8A3DB8")]
		set
		{
		}
	}

	[Token(Token = "0x17000165")]
	public Color defaultColor
	{
		[Token(Token = "0x6000814")]
		[Address(RVA = "0x8A518C", Offset = "0x8A518C", VA = "0x8A518C")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000815")]
		[Address(RVA = "0x8A51BC", Offset = "0x8A51BC", VA = "0x8A51BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000166")]
	public bool inputShouldBeHidden
	{
		[Token(Token = "0x6000816")]
		[Address(RVA = "0x8A5300", Offset = "0x8A5300", VA = "0x8A5300")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000167")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EF9C", Offset = "0x23EF9C")]
	public string text
	{
		[Token(Token = "0x6000817")]
		[Address(RVA = "0x8A53EC", Offset = "0x8A53EC", VA = "0x8A53EC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000818")]
		[Address(RVA = "0x8A5434", Offset = "0x8A5434", VA = "0x8A5434")]
		set
		{
		}
	}

	[Token(Token = "0x17000168")]
	public string value
	{
		[Token(Token = "0x6000819")]
		[Address(RVA = "0x8A5410", Offset = "0x8A5410", VA = "0x8A5410")]
		get
		{
			return null;
		}
		[Token(Token = "0x600081A")]
		[Address(RVA = "0x8A543C", Offset = "0x8A543C", VA = "0x8A543C")]
		set
		{
		}
	}

	[Token(Token = "0x17000169")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23EFE4", Offset = "0x23EFE4")]
	public bool selected
	{
		[Token(Token = "0x600081C")]
		[Address(RVA = "0x8A5D1C", Offset = "0x8A5D1C", VA = "0x8A5D1C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600081D")]
		[Address(RVA = "0x8A5D20", Offset = "0x8A5D20", VA = "0x8A5D20")]
		set
		{
		}
	}

	[Token(Token = "0x1700016A")]
	public bool isSelected
	{
		[Token(Token = "0x600081E")]
		[Address(RVA = "0x8A5234", Offset = "0x8A5234", VA = "0x8A5234")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600081F")]
		[Address(RVA = "0x8A5D24", Offset = "0x8A5D24", VA = "0x8A5D24")]
		set
		{
		}
	}

	[Token(Token = "0x1700016B")]
	public int cursorPosition
	{
		[Token(Token = "0x6000820")]
		[Address(RVA = "0x8A5E04", Offset = "0x8A5E04", VA = "0x8A5E04")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000821")]
		[Address(RVA = "0x8A5EF0", Offset = "0x8A5EF0", VA = "0x8A5EF0")]
		set
		{
		}
	}

	[Token(Token = "0x1700016C")]
	public int selectionStart
	{
		[Token(Token = "0x6000822")]
		[Address(RVA = "0x8A5FBC", Offset = "0x8A5FBC", VA = "0x8A5FBC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000823")]
		[Address(RVA = "0x8A60B4", Offset = "0x8A60B4", VA = "0x8A60B4")]
		set
		{
		}
	}

	[Token(Token = "0x1700016D")]
	public int selectionEnd
	{
		[Token(Token = "0x6000824")]
		[Address(RVA = "0x8A6180", Offset = "0x8A6180", VA = "0x8A6180")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000825")]
		[Address(RVA = "0x8A626C", Offset = "0x8A626C", VA = "0x8A626C")]
		set
		{
		}
	}

	[Token(Token = "0x1700016E")]
	public UITexture caret
	{
		[Token(Token = "0x6000826")]
		[Address(RVA = "0x8A6338", Offset = "0x8A6338", VA = "0x8A6338")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0x8A3970", Offset = "0x8A3970", VA = "0x8A3970")]
	public UIInput()
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0x8A5444", Offset = "0x8A5444", VA = "0x8A5444")]
	public void Set(string value, bool notify = true)
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0x8A5774", Offset = "0x8A5774", VA = "0x8A5774")]
	public string Validate(string val)
	{
		return null;
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0x8A6BEC", Offset = "0x8A6BEC", VA = "0x8A6BEC")]
	public void Start()
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0x8A3B7C", Offset = "0x8A3B7C", VA = "0x8A3B7C")]
	protected void Init()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0x8A5A74", Offset = "0x8A5A74", VA = "0x8A5A74")]
	protected void SaveToPlayerPrefs(string val)
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0x8A6F94", Offset = "0x8A6F94", VA = "0x8A6F94", Slot = "4")]
	protected virtual void OnSelect(bool isSelected)
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x8A706C", Offset = "0x8A706C", VA = "0x8A706C")]
	protected void OnSelectEvent()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x8A723C", Offset = "0x8A723C", VA = "0x8A723C")]
	protected void OnDeselectEvent()
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x8A77B4", Offset = "0x8A77B4", VA = "0x8A77B4", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x8A9278", Offset = "0x8A9278", VA = "0x8A9278")]
	private void OnKey(KeyCode key)
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x8A916C", Offset = "0x8A916C", VA = "0x8A916C")]
	protected void DoBackspace()
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x8A94E0", Offset = "0x8A94E0", VA = "0x8A94E0", Slot = "6")]
	protected virtual void Insert(string text)
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x8A99A4", Offset = "0x8A99A4", VA = "0x8A99A4")]
	protected string GetLeftText()
	{
		return null;
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x8A9BA0", Offset = "0x8A9BA0", VA = "0x8A9BA0")]
	protected string GetRightText()
	{
		return null;
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0x8A9D0C", Offset = "0x8A9D0C", VA = "0x8A9D0C")]
	protected string GetSelection()
	{
		return null;
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0x8A9E70", Offset = "0x8A9E70", VA = "0x8A9E70")]
	protected int GetCharUnderMouse()
	{
		return default(int);
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0x8AA0E4", Offset = "0x8AA0E4", VA = "0x8AA0E4", Slot = "7")]
	protected virtual void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0x8AA258", Offset = "0x8AA258", VA = "0x8AA258", Slot = "8")]
	protected virtual void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x8AA37C", Offset = "0x8AA37C", VA = "0x8AA37C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x8AA38C", Offset = "0x8AA38C", VA = "0x8AA38C", Slot = "9")]
	protected virtual void Cleanup()
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0x8A75E8", Offset = "0x8A75E8", VA = "0x8A75E8")]
	public void Submit()
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0x8A3DE8", Offset = "0x8A3DE8", VA = "0x8A3DE8")]
	public void UpdateLabel()
	{
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x8A6778", Offset = "0x8A6778", VA = "0x8A6778")]
	protected char Validate(string text, int pos, char ch)
	{
		return default(char);
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x8A5B68", Offset = "0x8A5B68", VA = "0x8A5B68")]
	protected void ExecuteOnChange()
	{
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0x8AA530", Offset = "0x8AA530", VA = "0x8AA530")]
	public void RemoveFocus()
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0x8AA538", Offset = "0x8AA538", VA = "0x8AA538")]
	public void SaveValue()
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0x8A6E44", Offset = "0x8A6E44", VA = "0x8A6E44")]
	public void LoadValue()
	{
	}
}
[Token(Token = "0x2000105")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2356A0", Offset = "0x2356A0")]
public class UIInputOnGUI : MonoBehaviour
{
	[Token(Token = "0x6000846")]
	[Address(RVA = "0x8AA6F4", Offset = "0x8AA6F4", VA = "0x8AA6F4")]
	public UIInputOnGUI()
	{
	}
}
[Token(Token = "0x2000106")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235718", Offset = "0x235718")]
[ExecuteInEditMode]
public class UILabel : UIWidget
{
	[Token(Token = "0x2000107")]
	[DoNotObfuscateNGUI]
	public enum Effect
	{
		[Token(Token = "0x400067A")]
		None,
		[Token(Token = "0x400067B")]
		Shadow,
		[Token(Token = "0x400067C")]
		Outline,
		[Token(Token = "0x400067D")]
		Outline8
	}

	[Token(Token = "0x2000108")]
	[DoNotObfuscateNGUI]
	public enum Overflow
	{
		[Token(Token = "0x400067F")]
		ShrinkContent,
		[Token(Token = "0x4000680")]
		ClampContent,
		[Token(Token = "0x4000681")]
		ResizeFreely,
		[Token(Token = "0x4000682")]
		ResizeHeight
	}

	[Token(Token = "0x2000109")]
	[DoNotObfuscateNGUI]
	public enum Crispness
	{
		[Token(Token = "0x4000684")]
		Never,
		[Token(Token = "0x4000685")]
		OnDesktop,
		[Token(Token = "0x4000686")]
		Always
	}

	[Token(Token = "0x200010A")]
	[DoNotObfuscateNGUI]
	public enum Modifier
	{
		[Token(Token = "0x4000688")]
		None = 0,
		[Token(Token = "0x4000689")]
		ToUppercase = 1,
		[Token(Token = "0x400068A")]
		ToLowercase = 2,
		[Token(Token = "0x400068B")]
		Custom = 255
	}

	[Token(Token = "0x200010B")]
	public delegate string ModifierFunc(string s);

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Crispness keepCrispWhenShrunk;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	[SerializeField]
	[HideInInspector]
	private Font mTrueTypeFont;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[HideInInspector]
	[SerializeField]
	private UnityEngine.Object mFont;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	[SerializeField]
	[AttributeAttribute(Name = "MultilineAttribute", RVA = "0x23A408", Offset = "0x23A408")]
	[HideInInspector]
	private string mText;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	[HideInInspector]
	private int mFontSize;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[HideInInspector]
	[SerializeField]
	private FontStyle mFontStyle;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[HideInInspector]
	[SerializeField]
	private NGUIText.Alignment mAlignment;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	[SerializeField]
	[HideInInspector]
	private bool mEncoding;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[HideInInspector]
	[SerializeField]
	private int mMaxLineCount;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	[HideInInspector]
	[SerializeField]
	private Effect mEffectStyle;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	[HideInInspector]
	private Color mEffectColor;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	[HideInInspector]
	private NGUIText.SymbolStyle mSymbols;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	[SerializeField]
	[HideInInspector]
	private Vector2 mEffectDistance;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	[SerializeField]
	[HideInInspector]
	private Overflow mOverflow;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	[HideInInspector]
	private bool mApplyGradient;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	[SerializeField]
	[HideInInspector]
	private Color mGradientTop;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	[SerializeField]
	[HideInInspector]
	private Color mGradientBottom;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	[SerializeField]
	[HideInInspector]
	private int mSpacingX;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	[HideInInspector]
	private int mSpacingY;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	[SerializeField]
	[HideInInspector]
	private bool mUseFloatSpacing;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	[HideInInspector]
	private float mFloatSpacingX;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	[SerializeField]
	[HideInInspector]
	private float mFloatSpacingY;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	[HideInInspector]
	private bool mOverflowEllipsis;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	[SerializeField]
	[HideInInspector]
	private int mOverflowWidth;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	[HideInInspector]
	private int mOverflowHeight;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	[SerializeField]
	[HideInInspector]
	private Modifier mModifier;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	[HideInInspector]
	private bool mShrinkToFit;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	[SerializeField]
	[HideInInspector]
	private int mMaxLineWidth;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[SerializeField]
	[HideInInspector]
	private int mMaxLineHeight;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	[HideInInspector]
	[SerializeField]
	private float mLineWidth;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	[HideInInspector]
	private bool mMultiline;

	[NonSerialized]
	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	private Font mActiveTTF;

	[NonSerialized]
	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private float mDensity;

	[NonSerialized]
	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private bool mShouldBeProcessed;

	[NonSerialized]
	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private string mProcessedText;

	[NonSerialized]
	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private bool mPremultiply;

	[NonSerialized]
	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private Vector2 mCalculatedSize;

	[NonSerialized]
	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private float mScale;

	[NonSerialized]
	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	private int mFinalFontSize;

	[NonSerialized]
	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private int mLastWidth;

	[NonSerialized]
	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	private int mLastHeight;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public ModifierFunc customModifier;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static BetterList<UILabel> mList;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Dictionary<Font, int> mFontUsage;

	[NonSerialized]
	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static BetterList<UIDrawCall> mTempDrawcalls;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static bool mTexRebuildAdded;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static List<Vector3> mTempVerts;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static List<int> mTempIndices;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23A95C", Offset = "0x23A95C")]
	private static Action<Font> <>f__mg$cache0;

	[Token(Token = "0x1700016F")]
	public int finalFontSize
	{
		[Token(Token = "0x6000848")]
		[Address(RVA = "0x7F8F44", Offset = "0x7F8F44", VA = "0x7F8F44")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000170")]
	private bool shouldBeProcessed
	{
		[Token(Token = "0x6000849")]
		[Address(RVA = "0x7F91A4", Offset = "0x7F91A4", VA = "0x7F91A4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600084A")]
		[Address(RVA = "0x7F91AC", Offset = "0x7F91AC", VA = "0x7F91AC")]
		set
		{
		}
	}

	[Token(Token = "0x17000171")]
	public override bool isAnchoredHorizontally
	{
		[Token(Token = "0x600084B")]
		[Address(RVA = "0x7F91C4", Offset = "0x7F91C4", VA = "0x7F91C4", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000172")]
	public override bool isAnchoredVertically
	{
		[Token(Token = "0x600084C")]
		[Address(RVA = "0x7F9200", Offset = "0x7F9200", VA = "0x7F9200", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000173")]
	public override Material material
	{
		[Token(Token = "0x600084D")]
		[Address(RVA = "0x7F923C", Offset = "0x7F923C", VA = "0x7F923C", Slot = "25")]
		get
		{
			return null;
		}
		[Token(Token = "0x600084E")]
		[Address(RVA = "0x7F943C", Offset = "0x7F943C", VA = "0x7F943C", Slot = "26")]
		set
		{
		}
	}

	[Token(Token = "0x17000174")]
	public override Texture mainTexture
	{
		[Token(Token = "0x600084F")]
		[Address(RVA = "0x7F9444", Offset = "0x7F9444", VA = "0x7F9444", Slot = "27")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000850")]
		[Address(RVA = "0x7F95FC", Offset = "0x7F95FC", VA = "0x7F95FC", Slot = "28")]
		set
		{
		}
	}

	[Token(Token = "0x17000175")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23F030", Offset = "0x23F030")]
	public UnityEngine.Object font
	{
		[Token(Token = "0x6000851")]
		[Address(RVA = "0x7F9604", Offset = "0x7F9604", VA = "0x7F9604")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000852")]
		[Address(RVA = "0x7F96A4", Offset = "0x7F96A4", VA = "0x7F96A4")]
		set
		{
		}
	}

	[Token(Token = "0x17000176")]
	public INGUIFont bitmapFont
	{
		[Token(Token = "0x6000853")]
		[Address(RVA = "0x7F93D8", Offset = "0x7F93D8", VA = "0x7F93D8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000854")]
		[Address(RVA = "0x7F9718", Offset = "0x7F9718", VA = "0x7F9718")]
		set
		{
		}
	}

	[Token(Token = "0x17000177")]
	public INGUIAtlas atlas
	{
		[Token(Token = "0x6000855")]
		[Address(RVA = "0x7F9800", Offset = "0x7F9800", VA = "0x7F9800")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000856")]
		[Address(RVA = "0x7F98E0", Offset = "0x7F98E0", VA = "0x7F98E0")]
		set
		{
		}
	}

	[Token(Token = "0x17000178")]
	public Font trueTypeFont
	{
		[Token(Token = "0x6000857")]
		[Address(RVA = "0x7F9070", Offset = "0x7F9070", VA = "0x7F9070")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000858")]
		[Address(RVA = "0x7F99C4", Offset = "0x7F99C4", VA = "0x7F99C4")]
		set
		{
		}
	}

	[Token(Token = "0x17000179")]
	public UnityEngine.Object ambigiousFont
	{
		[Token(Token = "0x6000859")]
		[Address(RVA = "0x7F9F00", Offset = "0x7F9F00", VA = "0x7F9F00")]
		get
		{
			return null;
		}
		[Token(Token = "0x600085A")]
		[Address(RVA = "0x7F9F98", Offset = "0x7F9F98", VA = "0x7F9F98")]
		set
		{
		}
	}

	[Token(Token = "0x1700017A")]
	public string text
	{
		[Token(Token = "0x600085B")]
		[Address(RVA = "0x7FA050", Offset = "0x7FA050", VA = "0x7FA050")]
		get
		{
			return null;
		}
		[Token(Token = "0x600085C")]
		[Address(RVA = "0x7FA058", Offset = "0x7FA058", VA = "0x7FA058")]
		set
		{
		}
	}

	[Token(Token = "0x1700017B")]
	public int defaultFontSize
	{
		[Token(Token = "0x600085D")]
		[Address(RVA = "0x7FA240", Offset = "0x7FA240", VA = "0x7FA240")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700017C")]
	public int fontSize
	{
		[Token(Token = "0x600085E")]
		[Address(RVA = "0x7FA378", Offset = "0x7FA378", VA = "0x7FA378")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600085F")]
		[Address(RVA = "0x7FA380", Offset = "0x7FA380", VA = "0x7FA380")]
		set
		{
		}
	}

	[Token(Token = "0x1700017D")]
	public FontStyle fontStyle
	{
		[Token(Token = "0x6000860")]
		[Address(RVA = "0x7FA434", Offset = "0x7FA434", VA = "0x7FA434")]
		get
		{
			return default(FontStyle);
		}
		[Token(Token = "0x6000861")]
		[Address(RVA = "0x7FA43C", Offset = "0x7FA43C", VA = "0x7FA43C")]
		set
		{
		}
	}

	[Token(Token = "0x1700017E")]
	public NGUIText.Alignment alignment
	{
		[Token(Token = "0x6000862")]
		[Address(RVA = "0x7FA45C", Offset = "0x7FA45C", VA = "0x7FA45C")]
		get
		{
			return default(NGUIText.Alignment);
		}
		[Token(Token = "0x6000863")]
		[Address(RVA = "0x7FA464", Offset = "0x7FA464", VA = "0x7FA464")]
		set
		{
		}
	}

	[Token(Token = "0x1700017F")]
	public bool applyGradient
	{
		[Token(Token = "0x6000864")]
		[Address(RVA = "0x7FA484", Offset = "0x7FA484", VA = "0x7FA484")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000865")]
		[Address(RVA = "0x7FA48C", Offset = "0x7FA48C", VA = "0x7FA48C")]
		set
		{
		}
	}

	[Token(Token = "0x17000180")]
	public Color gradientTop
	{
		[Token(Token = "0x6000866")]
		[Address(RVA = "0x7FA4B4", Offset = "0x7FA4B4", VA = "0x7FA4B4")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000867")]
		[Address(RVA = "0x7FA4C4", Offset = "0x7FA4C4", VA = "0x7FA4C4")]
		set
		{
		}
	}

	[Token(Token = "0x17000181")]
	public Color gradientBottom
	{
		[Token(Token = "0x6000868")]
		[Address(RVA = "0x7FA54C", Offset = "0x7FA54C", VA = "0x7FA54C")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000869")]
		[Address(RVA = "0x7FA55C", Offset = "0x7FA55C", VA = "0x7FA55C")]
		set
		{
		}
	}

	[Token(Token = "0x17000182")]
	public int spacingX
	{
		[Token(Token = "0x600086A")]
		[Address(RVA = "0x7FA5E4", Offset = "0x7FA5E4", VA = "0x7FA5E4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600086B")]
		[Address(RVA = "0x7FA5EC", Offset = "0x7FA5EC", VA = "0x7FA5EC")]
		set
		{
		}
	}

	[Token(Token = "0x17000183")]
	public int spacingY
	{
		[Token(Token = "0x600086C")]
		[Address(RVA = "0x7FA60C", Offset = "0x7FA60C", VA = "0x7FA60C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600086D")]
		[Address(RVA = "0x7FA614", Offset = "0x7FA614", VA = "0x7FA614")]
		set
		{
		}
	}

	[Token(Token = "0x17000184")]
	public bool useFloatSpacing
	{
		[Token(Token = "0x600086E")]
		[Address(RVA = "0x7FA634", Offset = "0x7FA634", VA = "0x7FA634")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600086F")]
		[Address(RVA = "0x7FA63C", Offset = "0x7FA63C", VA = "0x7FA63C")]
		set
		{
		}
	}

	[Token(Token = "0x17000185")]
	public float floatSpacingX
	{
		[Token(Token = "0x6000870")]
		[Address(RVA = "0x7FA660", Offset = "0x7FA660", VA = "0x7FA660")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000871")]
		[Address(RVA = "0x7FA668", Offset = "0x7FA668", VA = "0x7FA668")]
		set
		{
		}
	}

	[Token(Token = "0x17000186")]
	public float floatSpacingY
	{
		[Token(Token = "0x6000872")]
		[Address(RVA = "0x7FA728", Offset = "0x7FA728", VA = "0x7FA728")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000873")]
		[Address(RVA = "0x7FA730", Offset = "0x7FA730", VA = "0x7FA730")]
		set
		{
		}
	}

	[Token(Token = "0x17000187")]
	public float effectiveSpacingY
	{
		[Token(Token = "0x6000874")]
		[Address(RVA = "0x7FA7F0", Offset = "0x7FA7F0", VA = "0x7FA7F0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000188")]
	public float effectiveSpacingX
	{
		[Token(Token = "0x6000875")]
		[Address(RVA = "0x7FA80C", Offset = "0x7FA80C", VA = "0x7FA80C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000189")]
	public bool overflowEllipsis
	{
		[Token(Token = "0x6000876")]
		[Address(RVA = "0x7FA828", Offset = "0x7FA828", VA = "0x7FA828")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000877")]
		[Address(RVA = "0x7FA830", Offset = "0x7FA830", VA = "0x7FA830")]
		set
		{
		}
	}

	[Token(Token = "0x1700018A")]
	public int overflowWidth
	{
		[Token(Token = "0x6000878")]
		[Address(RVA = "0x7FA858", Offset = "0x7FA858", VA = "0x7FA858")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000879")]
		[Address(RVA = "0x7FA860", Offset = "0x7FA860", VA = "0x7FA860")]
		set
		{
		}
	}

	[Token(Token = "0x1700018B")]
	public int overflowHeight
	{
		[Token(Token = "0x600087A")]
		[Address(RVA = "0x7FA888", Offset = "0x7FA888", VA = "0x7FA888")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600087B")]
		[Address(RVA = "0x7FA890", Offset = "0x7FA890", VA = "0x7FA890")]
		set
		{
		}
	}

	[Token(Token = "0x1700018C")]
	private bool keepCrisp
	{
		[Token(Token = "0x600087C")]
		[Address(RVA = "0x7FA8B8", Offset = "0x7FA8B8", VA = "0x7FA8B8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700018D")]
	public bool supportEncoding
	{
		[Token(Token = "0x600087D")]
		[Address(RVA = "0x7FA970", Offset = "0x7FA970", VA = "0x7FA970")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600087E")]
		[Address(RVA = "0x7FA978", Offset = "0x7FA978", VA = "0x7FA978")]
		set
		{
		}
	}

	[Token(Token = "0x1700018E")]
	public NGUIText.SymbolStyle symbolStyle
	{
		[Token(Token = "0x600087F")]
		[Address(RVA = "0x7FA99C", Offset = "0x7FA99C", VA = "0x7FA99C")]
		get
		{
			return default(NGUIText.SymbolStyle);
		}
		[Token(Token = "0x6000880")]
		[Address(RVA = "0x7FA9A4", Offset = "0x7FA9A4", VA = "0x7FA9A4")]
		set
		{
		}
	}

	[Token(Token = "0x1700018F")]
	public Overflow overflowMethod
	{
		[Token(Token = "0x6000881")]
		[Address(RVA = "0x7FA9C0", Offset = "0x7FA9C0", VA = "0x7FA9C0")]
		get
		{
			return default(Overflow);
		}
		[Token(Token = "0x6000882")]
		[Address(RVA = "0x7FA9C8", Offset = "0x7FA9C8", VA = "0x7FA9C8")]
		set
		{
		}
	}

	[Token(Token = "0x17000190")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23F07C", Offset = "0x23F07C")]
	public int lineWidth
	{
		[Token(Token = "0x6000883")]
		[Address(RVA = "0x7FA9E4", Offset = "0x7FA9E4", VA = "0x7FA9E4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000884")]
		[Address(RVA = "0x7FA9EC", Offset = "0x7FA9EC", VA = "0x7FA9EC")]
		set
		{
		}
	}

	[Token(Token = "0x17000191")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23F0BC", Offset = "0x23F0BC")]
	public int lineHeight
	{
		[Token(Token = "0x6000885")]
		[Address(RVA = "0x7FA9F4", Offset = "0x7FA9F4", VA = "0x7FA9F4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000886")]
		[Address(RVA = "0x7FA9FC", Offset = "0x7FA9FC", VA = "0x7FA9FC")]
		set
		{
		}
	}

	[Token(Token = "0x17000192")]
	public bool multiLine
	{
		[Token(Token = "0x6000887")]
		[Address(RVA = "0x7FAA04", Offset = "0x7FAA04", VA = "0x7FAA04")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000888")]
		[Address(RVA = "0x7FAA18", Offset = "0x7FAA18", VA = "0x7FAA18")]
		set
		{
		}
	}

	[Token(Token = "0x17000193")]
	public override Vector3[] localCorners
	{
		[Token(Token = "0x6000889")]
		[Address(RVA = "0x7FAA48", Offset = "0x7FAA48", VA = "0x7FAA48", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000194")]
	public override Vector3[] worldCorners
	{
		[Token(Token = "0x600088A")]
		[Address(RVA = "0x7FBA74", Offset = "0x7FBA74", VA = "0x7FBA74", Slot = "11")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000195")]
	public override Vector4 drawingDimensions
	{
		[Token(Token = "0x600088B")]
		[Address(RVA = "0x7FBAAC", Offset = "0x7FBAAC", VA = "0x7FBAAC", Slot = "24")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x17000196")]
	public int maxLineCount
	{
		[Token(Token = "0x600088C")]
		[Address(RVA = "0x7FBAEC", Offset = "0x7FBAEC", VA = "0x7FBAEC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600088D")]
		[Address(RVA = "0x7FBAF4", Offset = "0x7FBAF4", VA = "0x7FBAF4")]
		set
		{
		}
	}

	[Token(Token = "0x17000197")]
	public Effect effectStyle
	{
		[Token(Token = "0x600088E")]
		[Address(RVA = "0x7FBBC0", Offset = "0x7FBBC0", VA = "0x7FBBC0")]
		get
		{
			return default(Effect);
		}
		[Token(Token = "0x600088F")]
		[Address(RVA = "0x7FBBC8", Offset = "0x7FBBC8", VA = "0x7FBBC8")]
		set
		{
		}
	}

	[Token(Token = "0x17000198")]
	public Color effectColor
	{
		[Token(Token = "0x6000890")]
		[Address(RVA = "0x7FBBE4", Offset = "0x7FBBE4", VA = "0x7FBBE4")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000891")]
		[Address(RVA = "0x7FBBF4", Offset = "0x7FBBF4", VA = "0x7FBBF4")]
		set
		{
		}
	}

	[Token(Token = "0x17000199")]
	public Vector2 effectDistance
	{
		[Token(Token = "0x6000892")]
		[Address(RVA = "0x7FBC68", Offset = "0x7FBC68", VA = "0x7FBC68")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000893")]
		[Address(RVA = "0x7FBC7C", Offset = "0x7FBC7C", VA = "0x7FBC7C")]
		set
		{
		}
	}

	[Token(Token = "0x1700019A")]
	public int quadsPerCharacter
	{
		[Token(Token = "0x6000894")]
		[Address(RVA = "0x7FBD44", Offset = "0x7FBD44", VA = "0x7FBD44")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700019B")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23F100", Offset = "0x23F100")]
	public bool shrinkToFit
	{
		[Token(Token = "0x6000895")]
		[Address(RVA = "0x7FBD70", Offset = "0x7FBD70", VA = "0x7FBD70")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000896")]
		[Address(RVA = "0x7FBD84", Offset = "0x7FBD84", VA = "0x7FBD84")]
		set
		{
		}
	}

	[Token(Token = "0x1700019C")]
	public string processedText
	{
		[Token(Token = "0x6000897")]
		[Address(RVA = "0x7FBDAC", Offset = "0x7FBDAC", VA = "0x7FBDAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700019D")]
	public Vector2 printedSize
	{
		[Token(Token = "0x6000898")]
		[Address(RVA = "0x7FBE14", Offset = "0x7FBE14", VA = "0x7FBE14")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x1700019E")]
	public override Vector2 localSize
	{
		[Token(Token = "0x6000899")]
		[Address(RVA = "0x7FBE50", Offset = "0x7FBE50", VA = "0x7FBE50", Slot = "23")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x1700019F")]
	private bool isValid
	{
		[Token(Token = "0x600089A")]
		[Address(RVA = "0x7FBE90", Offset = "0x7FBE90", VA = "0x7FBE90")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001A0")]
	public Modifier modifier
	{
		[Token(Token = "0x600089B")]
		[Address(RVA = "0x7FBF68", Offset = "0x7FBF68", VA = "0x7FBF68")]
		get
		{
			return default(Modifier);
		}
		[Token(Token = "0x600089C")]
		[Address(RVA = "0x7FBF70", Offset = "0x7FBF70", VA = "0x7FBF70")]
		set
		{
		}
	}

	[Token(Token = "0x170001A1")]
	public string printedText
	{
		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x7FC15C", Offset = "0x7FC15C", VA = "0x7FC15C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001A2")]
	private bool premultipliedAlphaShader
	{
		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x7FFF2C", Offset = "0x7FFF2C", VA = "0x7FFF2C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001A3")]
	private bool packedFontShader
	{
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x80000C", Offset = "0x80000C", VA = "0x80000C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0x7F8D98", Offset = "0x7F8D98", VA = "0x7F8D98")]
	public UILabel()
	{
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0x7FBFAC", Offset = "0x7FBFAC", VA = "0x7FBFAC", Slot = "15")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0x7FC088", Offset = "0x7FC088", VA = "0x7FC088", Slot = "16")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0x7F9AF8", Offset = "0x7F9AF8", VA = "0x7F9AF8")]
	protected void SetActiveFont(Font fnt)
	{
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0x7FC640", Offset = "0x7FC640", VA = "0x7FC640")]
	private static void OnFontChanged(Font font)
	{
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0x7FCE74", Offset = "0x7FCE74", VA = "0x7FCE74", Slot = "13")]
	public override Vector3[] GetSides(Transform relativeTo)
	{
		return null;
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0x7FCEB4", Offset = "0x7FCEB4", VA = "0x7FCEB4", Slot = "32")]
	protected override void UpgradeFrom265()
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0x7FD0A0", Offset = "0x7FD0A0", VA = "0x7FD0A0", Slot = "18")]
	protected override void OnAnchor()
	{
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0x7F9E54", Offset = "0x7F9E54", VA = "0x7F9E54")]
	private void ProcessAndRequest()
	{
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0x7FD1E4", Offset = "0x7FD1E4", VA = "0x7FD1E4", Slot = "14")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0x7FD394", Offset = "0x7FD394", VA = "0x7FD394", Slot = "21")]
	protected override void OnStart()
	{
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0x7FD5D0", Offset = "0x7FD5D0", VA = "0x7FD5D0", Slot = "31")]
	public override void MarkAsChanged()
	{
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0x7FAA80", Offset = "0x7FAA80", VA = "0x7FAA80")]
	public void ProcessText(bool legacyMode = false, bool full = true)
	{
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0x7FDEC4", Offset = "0x7FDEC4", VA = "0x7FDEC4", Slot = "33")]
	public override void MakePixelPerfect()
	{
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0x7FE260", Offset = "0x7FE260", VA = "0x7FE260")]
	public void AssumeNaturalSize()
	{
	}

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0x7FE3AC", Offset = "0x7FE3AC", VA = "0x7FE3AC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23D83C", Offset = "0x23D83C")]
	public int GetCharacterIndex(Vector3 worldPos)
	{
		return default(int);
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0x7FE4C4", Offset = "0x7FE4C4", VA = "0x7FE4C4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23D870", Offset = "0x23D870")]
	public int GetCharacterIndex(Vector2 localPos)
	{
		return default(int);
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0x7FE3CC", Offset = "0x7FE3CC", VA = "0x7FE3CC")]
	public int GetCharacterIndexAtPosition(Vector3 worldPos, bool precise)
	{
		return default(int);
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0x7FE4E0", Offset = "0x7FE4E0", VA = "0x7FE4E0")]
	public int GetCharacterIndexAtPosition(Vector2 localPos, bool precise)
	{
		return default(int);
	}

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0x7FED70", Offset = "0x7FED70", VA = "0x7FED70")]
	public string GetWordAtPosition(Vector3 worldPos)
	{
		return null;
	}

	[Token(Token = "0x60008B1")]
	[Address(RVA = "0x7FEFC8", Offset = "0x7FEFC8", VA = "0x7FEFC8")]
	public string GetWordAtPosition(Vector2 localPos)
	{
		return null;
	}

	[Token(Token = "0x60008B2")]
	[Address(RVA = "0x7FEDA4", Offset = "0x7FEDA4", VA = "0x7FEDA4")]
	public string GetWordAtCharacterIndex(int characterIndex)
	{
		return null;
	}

	[Token(Token = "0x60008B3")]
	[Address(RVA = "0x7FEFF4", Offset = "0x7FEFF4", VA = "0x7FEFF4")]
	public string GetUrlAtPosition(Vector3 worldPos)
	{
		return null;
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0x7FF264", Offset = "0x7FF264", VA = "0x7FF264")]
	public string GetUrlAtPosition(Vector2 localPos)
	{
		return null;
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0x7FF028", Offset = "0x7FF028", VA = "0x7FF028")]
	public string GetUrlAtCharacterIndex(int characterIndex)
	{
		return null;
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0x7FF290", Offset = "0x7FF290", VA = "0x7FF290")]
	public int GetCharacterIndex(int currentIndex, KeyCode key)
	{
		return default(int);
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0x7FF9D4", Offset = "0x7FF9D4", VA = "0x7FF9D4")]
	public void PrintOverlay(int start, int end, UIGeometry caret, UIGeometry highlight, Color caretColor, Color highlightColor)
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0x8000EC", Offset = "0x8000EC", VA = "0x8000EC", Slot = "38")]
	public override void OnFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols)
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0x7FEA14", Offset = "0x7FEA14", VA = "0x7FEA14")]
	public Vector2 ApplyOffset(List<Vector3> verts, int start)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0x800760", Offset = "0x800760", VA = "0x800760")]
	public void ApplyShadow(List<Vector3> verts, List<Vector2> uvs, List<Color> cols, int start, int end, float x, float y)
	{
	}

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0x800BE0", Offset = "0x800BE0", VA = "0x800BE0")]
	public int CalculateOffsetToFit(string text)
	{
		return default(int);
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0x800CB8", Offset = "0x800CB8", VA = "0x800CB8")]
	public void SetCurrentProgress()
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0x800F24", Offset = "0x800F24", VA = "0x800F24")]
	public void SetCurrentPercent()
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0x8010D0", Offset = "0x8010D0", VA = "0x8010D0")]
	public void SetCurrentSelection()
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0x801328", Offset = "0x801328", VA = "0x801328")]
	public bool Wrap(string text, out string final)
	{
		return default(bool);
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0x801348", Offset = "0x801348", VA = "0x801348")]
	public bool Wrap(string text, out string final, int height)
	{
		return default(bool);
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0x7FD5E4", Offset = "0x7FD5E4", VA = "0x7FD5E4")]
	public void UpdateNGUIText()
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0x801430", Offset = "0x801430", VA = "0x801430")]
	private void OnApplicationPause(bool paused)
	{
	}
}
[Token(Token = "0x200010C")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2357A8", Offset = "0x2357A8")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2357A8", Offset = "0x2357A8")]
public class UILocalize : MonoBehaviour
{
	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string key;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mStarted;

	[Token(Token = "0x170001A4")]
	public string value
	{
		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x801690", Offset = "0x801690", VA = "0x801690")]
		set
		{
		}
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0x801688", Offset = "0x801688", VA = "0x801688")]
	public UILocalize()
	{
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0x801B08", Offset = "0x801B08", VA = "0x801B08")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0x801CB0", Offset = "0x801CB0", VA = "0x801CB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0x801B18", Offset = "0x801B18", VA = "0x801B18")]
	private void OnLocalize()
	{
	}
}
[Token(Token = "0x200010D")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235864", Offset = "0x235864")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235864", Offset = "0x235864")]
[ExecuteInEditMode]
public class UIOrthoCamera : MonoBehaviour
{
	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Camera mCam;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Transform mTrans;

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0x801CBC", Offset = "0x801CBC", VA = "0x801CBC")]
	public UIOrthoCamera()
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0x801CC4", Offset = "0x801CC4", VA = "0x801CC4")]
	private void Start()
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0x801D60", Offset = "0x801D60", VA = "0x801D60")]
	private void Update()
	{
	}
}
[Token(Token = "0x200010E")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235928", Offset = "0x235928")]
public class UIPanel : UIRect
{
	[Token(Token = "0x200010F")]
	[DoNotObfuscateNGUI]
	public enum RenderQueue
	{
		[Token(Token = "0x40006C2")]
		Automatic,
		[Token(Token = "0x40006C3")]
		StartAt,
		[Token(Token = "0x40006C4")]
		Explicit
	}

	[Token(Token = "0x2000110")]
	public delegate void OnGeometryUpdated();

	[Token(Token = "0x2000111")]
	public delegate void OnClippingMoved(UIPanel panel);

	[Token(Token = "0x2000112")]
	public delegate Material OnCreateMaterial(UIWidget widget, Material mat);

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<UIPanel> list;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public OnGeometryUpdated onGeometryUpdated;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool showInPanelTool;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool generateNormals;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool generateUV2;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UIDrawCall.ShadowMode shadowMode;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool widgetsAreStatic;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	public bool cullWhileDragging;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	public bool alwaysOnScreen;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	public bool anchorOffset;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool softBorderPadding;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public RenderQueue renderQueue;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int startingRenderQueue;

	[NonSerialized]
	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public List<UIWidget> widgets;

	[NonSerialized]
	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<UIDrawCall> drawCalls;

	[NonSerialized]
	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Matrix4x4 worldToLocal;

	[NonSerialized]
	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public Vector4 drawCallClipRange;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public OnClippingMoved onClipMove;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OnCreateMaterial onCreateMaterial;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public UIDrawCall.OnCreateDrawCall onCreateDrawCall;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	[HideInInspector]
	private Texture2D mClipTexture;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[HideInInspector]
	[SerializeField]
	private float mAlpha;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	[HideInInspector]
	private UIDrawCall.Clipping mClipping;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[HideInInspector]
	[SerializeField]
	private Vector4 mClipRange;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[SerializeField]
	[HideInInspector]
	private Vector2 mClipSoftness;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[HideInInspector]
	[SerializeField]
	private int mDepth;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[HideInInspector]
	[SerializeField]
	private int mSortingOrder;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	[SerializeField]
	[HideInInspector]
	private string mSortingLayerName;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool mRebuild;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	private bool mResized;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[SerializeField]
	private Vector2 mClipOffset;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private int mMatrixFrame;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private int mAlphaFrameID;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private int mLayer;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static float[] mTemp;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Vector2 mMin;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Vector2 mMax;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool mSortWidgets;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
	private bool mUpdateScroll;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12A")]
	public bool useSortingOrder;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private UIPanel mParentPanel;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Vector3[] mCorners;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int mUpdateFrame;

	[NonSerialized]
	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private bool mHasMoved;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private UIDrawCall.OnRenderCallback mOnRender;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private bool mForced;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23AAFC", Offset = "0x23AAFC")]
	private static Comparison<UIPanel> <>f__mg$cache0;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23AB0C", Offset = "0x23AB0C")]
	private static Comparison<UIPanel> <>f__mg$cache1;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23AB1C", Offset = "0x23AB1C")]
	private static Comparison<UIWidget> <>f__mg$cache2;

	[Token(Token = "0x170001A5")]
	public string sortingLayerName
	{
		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x802208", Offset = "0x802208", VA = "0x802208")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x802210", Offset = "0x802210", VA = "0x802210")]
		set
		{
		}
	}

	[Token(Token = "0x170001A6")]
	public static int nextUnusedDepth
	{
		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x802950", Offset = "0x802950", VA = "0x802950")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001A7")]
	public override bool canBeAnchored
	{
		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x802B18", Offset = "0x802B18", VA = "0x802B18", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001A8")]
	public override float alpha
	{
		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x802B28", Offset = "0x802B28", VA = "0x802B28", Slot = "7")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x802B30", Offset = "0x802B30", VA = "0x802B30", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x170001A9")]
	public int depth
	{
		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x802B10", Offset = "0x802B10", VA = "0x802B10")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x802CC4", Offset = "0x802CC4", VA = "0x802CC4")]
		set
		{
		}
	}

	[Token(Token = "0x170001AA")]
	public int sortingOrder
	{
		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x802E5C", Offset = "0x802E5C", VA = "0x802E5C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x802E64", Offset = "0x802E64", VA = "0x802E64")]
		set
		{
		}
	}

	[Token(Token = "0x170001AB")]
	public float width
	{
		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x8030E0", Offset = "0x8030E0", VA = "0x8030E0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001AC")]
	public float height
	{
		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x8031D0", Offset = "0x8031D0", VA = "0x8031D0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001AD")]
	public bool halfPixelOffset
	{
		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x8031F4", Offset = "0x8031F4", VA = "0x8031F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001AE")]
	public bool usedForUI
	{
		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x8031FC", Offset = "0x8031FC", VA = "0x8031FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001AF")]
	public Vector3 drawCallOffset
	{
		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x8032C0", Offset = "0x8032C0", VA = "0x8032C0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170001B0")]
	public UIDrawCall.Clipping clipping
	{
		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x803704", Offset = "0x803704", VA = "0x803704")]
		get
		{
			return default(UIDrawCall.Clipping);
		}
		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x80370C", Offset = "0x80370C", VA = "0x80370C")]
		set
		{
		}
	}

	[Token(Token = "0x170001B1")]
	public UIPanel parentPanel
	{
		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x803730", Offset = "0x803730", VA = "0x803730")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001B2")]
	public int clipCount
	{
		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x803738", Offset = "0x803738", VA = "0x803738")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001B3")]
	public bool hasClipping
	{
		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x8037F8", Offset = "0x8037F8", VA = "0x8037F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001B4")]
	public bool hasCumulativeClipping
	{
		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x803810", Offset = "0x803810", VA = "0x803810")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001B5")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23F16C", Offset = "0x23F16C")]
	public bool clipsChildren
	{
		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x803828", Offset = "0x803828", VA = "0x803828")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001B6")]
	public Vector2 clipOffset
	{
		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x803840", Offset = "0x803840", VA = "0x803840")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x803854", Offset = "0x803854", VA = "0x803854")]
		set
		{
		}
	}

	[Token(Token = "0x170001B7")]
	public Texture2D clipTexture
	{
		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x803F4C", Offset = "0x803F4C", VA = "0x803F4C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x803F54", Offset = "0x803F54", VA = "0x803F54")]
		set
		{
		}
	}

	[Token(Token = "0x170001B8")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23F1D0", Offset = "0x23F1D0")]
	public Vector4 clipRange
	{
		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x803FEC", Offset = "0x803FEC", VA = "0x803FEC")]
		get
		{
			return default(Vector4);
		}
		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x80400C", Offset = "0x80400C", VA = "0x80400C")]
		set
		{
		}
	}

	[Token(Token = "0x170001B9")]
	public Vector4 baseClipRegion
	{
		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x803FFC", Offset = "0x803FFC", VA = "0x803FFC")]
		get
		{
			return default(Vector4);
		}
		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x80402C", Offset = "0x80402C", VA = "0x80402C")]
		set
		{
		}
	}

	[Token(Token = "0x170001BA")]
	public Vector4 finalClipRegion
	{
		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x804274", Offset = "0x804274", VA = "0x804274")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x170001BB")]
	public Vector2 clipSoftness
	{
		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x8043D8", Offset = "0x8043D8", VA = "0x8043D8")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x8043EC", Offset = "0x8043EC", VA = "0x8043EC")]
		set
		{
		}
	}

	[Token(Token = "0x170001BC")]
	public override Vector3[] localCorners
	{
		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x8044A4", Offset = "0x8044A4", VA = "0x8044A4", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001BD")]
	public override Vector3[] worldCorners
	{
		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x80486C", Offset = "0x80486C", VA = "0x80486C", Slot = "11")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0x801F48", Offset = "0x801F48", VA = "0x801F48")]
	public UIPanel()
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0x802F40", Offset = "0x802F40", VA = "0x802F40")]
	public static int CompareFunc(UIPanel a, UIPanel b)
	{
		return default(int);
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0x803978", Offset = "0x803978", VA = "0x803978")]
	private void InvalidateClipping()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0x8050FC", Offset = "0x8050FC", VA = "0x8050FC", Slot = "13")]
	public override Vector3[] GetSides(Transform relativeTo)
	{
		return null;
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0x8058C0", Offset = "0x8058C0", VA = "0x8058C0", Slot = "12")]
	public override void Invalidate(bool includeChildren)
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0x8058D0", Offset = "0x8058D0", VA = "0x8058D0", Slot = "9")]
	public override float CalculateFinalAlpha(int frameID)
	{
		return default(float);
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0x8059E0", Offset = "0x8059E0", VA = "0x8059E0", Slot = "19")]
	public override void SetRect(float x, float y, float width, float height)
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0x805DB8", Offset = "0x805DB8", VA = "0x805DB8")]
	public bool IsVisible(Vector3 a, Vector3 b, Vector3 c, Vector3 d)
	{
		return default(bool);
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0x8063C8", Offset = "0x8063C8", VA = "0x8063C8")]
	public bool IsVisible(Vector3 worldPos)
	{
		return default(bool);
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0x806494", Offset = "0x806494", VA = "0x806494")]
	public bool IsVisible(UIWidget w)
	{
		return default(bool);
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0x8066BC", Offset = "0x8066BC", VA = "0x8066BC")]
	public bool Affects(UIWidget w)
	{
		return default(bool);
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0x806880", Offset = "0x806880", VA = "0x806880")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D8A4", Offset = "0x23D8A4")]
	public void RebuildAllDrawCalls()
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0x80688C", Offset = "0x80688C", VA = "0x80688C")]
	public void SetDirty()
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0x806984", Offset = "0x806984", VA = "0x806984", Slot = "17")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0x80698C", Offset = "0x80698C", VA = "0x80698C")]
	private void FindParent()
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0x806ACC", Offset = "0x806ACC", VA = "0x806ACC", Slot = "20")]
	public override void ParentHasChanged()
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0x806AEC", Offset = "0x806AEC", VA = "0x806AEC", Slot = "21")]
	protected override void OnStart()
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0x806B28", Offset = "0x806B28", VA = "0x806B28", Slot = "14")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0x806B70", Offset = "0x806B70", VA = "0x806B70", Slot = "15")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0x806FF0", Offset = "0x806FF0", VA = "0x806FF0", Slot = "16")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0x806250", Offset = "0x806250", VA = "0x806250")]
	private void UpdateTransformMatrix()
	{
	}

	[Token(Token = "0x600090A")]
	[Address(RVA = "0x80729C", Offset = "0x80729C", VA = "0x80729C", Slot = "18")]
	protected override void OnAnchor()
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0x807F64", Offset = "0x807F64", VA = "0x807F64")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0x808460", Offset = "0x808460", VA = "0x808460")]
	private void UpdateSelf()
	{
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0x809D6C", Offset = "0x809D6C", VA = "0x809D6C")]
	public void SortWidgets()
	{
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0x808F64", Offset = "0x808F64", VA = "0x808F64")]
	private void FillAllDrawCalls()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0x7FCDA8", Offset = "0x7FCDA8", VA = "0x7FCDA8")]
	public bool FillDrawCall(UIDrawCall dc)
	{
		return default(bool);
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0x809920", Offset = "0x809920", VA = "0x809920")]
	public bool FillDrawCall(UIDrawCall dc, bool needsCulling)
	{
		return default(bool);
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0x802328", Offset = "0x802328", VA = "0x802328")]
	private void UpdateDrawCalls(int sortOrder)
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0x808774", Offset = "0x808774", VA = "0x808774")]
	private void UpdateLayers()
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0x808A54", Offset = "0x808A54", VA = "0x808A54")]
	private void UpdateWidgets()
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0x80A2D8", Offset = "0x80A2D8", VA = "0x80A2D8")]
	public UIDrawCall FindDrawCall(UIWidget w)
	{
		return null;
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0x80A938", Offset = "0x80A938", VA = "0x80A938")]
	public void AddWidget(UIWidget w)
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0x80AB5C", Offset = "0x80AB5C", VA = "0x80AB5C")]
	public void RemoveWidget(UIWidget w)
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0x80ACB8", Offset = "0x80ACB8", VA = "0x80ACB8")]
	public void Refresh()
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0x80AE10", Offset = "0x80AE10", VA = "0x80AE10", Slot = "23")]
	public virtual Vector3 CalculateConstrainOffset(Vector2 min, Vector2 max)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x80AFF4", Offset = "0x80AFF4", VA = "0x80AFF4")]
	public bool ConstrainTargetToBounds(Transform target, ref Bounds targetBounds, bool immediate)
	{
		return default(bool);
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x80B540", Offset = "0x80B540", VA = "0x80B540")]
	public bool ConstrainTargetToBounds(Transform target, bool immediate)
	{
		return default(bool);
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x80B5C4", Offset = "0x80B5C4", VA = "0x80B5C4")]
	public static UIPanel Find(Transform trans)
	{
		return null;
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x80B808", Offset = "0x80B808", VA = "0x80B808")]
	public static UIPanel Find(Transform trans, bool createIfMissing)
	{
		return null;
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x80B64C", Offset = "0x80B64C", VA = "0x80B64C")]
	public static UIPanel Find(Transform trans, bool createIfMissing, int layer)
	{
		return null;
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x803560", Offset = "0x803560", VA = "0x803560")]
	public Vector2 GetWindowSize()
	{
		return default(Vector2);
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x803104", Offset = "0x803104", VA = "0x803104")]
	public Vector2 GetViewSize()
	{
		return default(Vector2);
	}
}
[Token(Token = "0x2000113")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235988", Offset = "0x235988")]
[ExecuteInEditMode]
public class UIRoot : MonoBehaviour
{
	[Token(Token = "0x2000114")]
	[DoNotObfuscateNGUI]
	public enum Scaling
	{
		[Token(Token = "0x40006D1")]
		Flexible,
		[Token(Token = "0x40006D2")]
		Constrained,
		[Token(Token = "0x40006D3")]
		ConstrainedOnMobiles
	}

	[Token(Token = "0x2000115")]
	[DoNotObfuscateNGUI]
	public enum Constraint
	{
		[Token(Token = "0x40006D5")]
		Fit,
		[Token(Token = "0x40006D6")]
		Fill,
		[Token(Token = "0x40006D7")]
		FitWidth,
		[Token(Token = "0x40006D8")]
		FitHeight
	}

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<UIRoot> list;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Scaling scalingStyle;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int manualWidth;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int manualHeight;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int minimumHeight;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int maximumHeight;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool fitWidth;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool fitHeight;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool adjustByDPI;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool shrinkPortraitUI;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Transform mTrans;

	[Token(Token = "0x170001BE")]
	public Constraint constraint
	{
		[Token(Token = "0x600092E")]
		[Address(RVA = "0x76D040", Offset = "0x76D040", VA = "0x76D040")]
		get
		{
			return default(Constraint);
		}
	}

	[Token(Token = "0x170001BF")]
	public Scaling activeScaling
	{
		[Token(Token = "0x600092F")]
		[Address(RVA = "0x76D070", Offset = "0x76D070", VA = "0x76D070")]
		get
		{
			return default(Scaling);
		}
	}

	[Token(Token = "0x170001C0")]
	public int activeHeight
	{
		[Token(Token = "0x6000930")]
		[Address(RVA = "0x76D080", Offset = "0x76D080", VA = "0x76D080")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001C1")]
	public float pixelSizeAdjustment
	{
		[Token(Token = "0x6000931")]
		[Address(RVA = "0x76D304", Offset = "0x76D304", VA = "0x76D304")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0x76D010", Offset = "0x76D010", VA = "0x76D010")]
	public UIRoot()
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0x76D4DC", Offset = "0x76D4DC", VA = "0x76D4DC")]
	public static float GetPixelSizeAdjustment(GameObject go)
	{
		return default(float);
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x76D3F8", Offset = "0x76D3F8", VA = "0x76D3F8")]
	public float GetPixelSizeAdjustment(int height)
	{
		return default(float);
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0x76D5D0", Offset = "0x76D5D0", VA = "0x76D5D0", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x76D5EC", Offset = "0x76D5EC", VA = "0x76D5EC", Slot = "5")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0x76D6A8", Offset = "0x76D6A8", VA = "0x76D6A8", Slot = "6")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0x76D764", Offset = "0x76D764", VA = "0x76D764", Slot = "7")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0x76DB70", Offset = "0x76DB70", VA = "0x76DB70")]
	private void Update()
	{
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0x76D938", Offset = "0x76D938", VA = "0x76D938")]
	public void UpdateScale(bool updateAnchors = true)
	{
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0x76DB78", Offset = "0x76DB78", VA = "0x76DB78")]
	public static void Broadcast(string funcName)
	{
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0x76DD38", Offset = "0x76DD38", VA = "0x76DD38")]
	public static void Broadcast(string funcName, object param)
	{
	}
}
[Token(Token = "0x2000116")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2359F8", Offset = "0x2359F8")]
[ExecuteInEditMode]
public class UISprite : UIBasicSprite
{
	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	[SerializeField]
	[HideInInspector]
	private UnityEngine.Object mAtlas;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	[HideInInspector]
	private string mSpriteName;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	[SerializeField]
	[HideInInspector]
	private bool mFixedAspect;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x195")]
	[HideInInspector]
	[SerializeField]
	private bool mFillCenter;

	[NonSerialized]
	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	protected UISpriteData mSprite;

	[NonSerialized]
	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	private bool mSpriteSet;

	[Token(Token = "0x170001C2")]
	public override Texture mainTexture
	{
		[Token(Token = "0x600093E")]
		[Address(RVA = "0x776B10", Offset = "0x776B10", VA = "0x776B10", Slot = "27")]
		get
		{
			return null;
		}
		[Token(Token = "0x600093F")]
		[Address(RVA = "0x776C6C", Offset = "0x776C6C", VA = "0x776C6C", Slot = "28")]
		set
		{
		}
	}

	[Token(Token = "0x170001C3")]
	public override Material material
	{
		[Token(Token = "0x6000940")]
		[Address(RVA = "0x776D68", Offset = "0x776D68", VA = "0x776D68", Slot = "25")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000941")]
		[Address(RVA = "0x776EAC", Offset = "0x776EAC", VA = "0x776EAC", Slot = "26")]
		set
		{
		}
	}

	[Token(Token = "0x170001C4")]
	public INGUIAtlas atlas
	{
		[Token(Token = "0x6000942")]
		[Address(RVA = "0x776F68", Offset = "0x776F68", VA = "0x776F68")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000943")]
		[Address(RVA = "0x776FCC", Offset = "0x776FCC", VA = "0x776FCC")]
		set
		{
		}
	}

	[Token(Token = "0x170001C5")]
	public bool fixedAspect
	{
		[Token(Token = "0x6000944")]
		[Address(RVA = "0x777658", Offset = "0x777658", VA = "0x777658")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000945")]
		[Address(RVA = "0x777660", Offset = "0x777660", VA = "0x777660")]
		set
		{
		}
	}

	[Token(Token = "0x170001C6")]
	public string spriteName
	{
		[Token(Token = "0x6000948")]
		[Address(RVA = "0x777938", Offset = "0x777938", VA = "0x777938")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000949")]
		[Address(RVA = "0x7774D4", Offset = "0x7774D4", VA = "0x7774D4")]
		set
		{
		}
	}

	[Token(Token = "0x170001C7")]
	public bool isValid
	{
		[Token(Token = "0x600094A")]
		[Address(RVA = "0x777940", Offset = "0x777940", VA = "0x777940")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001C8")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23F230", Offset = "0x23F230")]
	public bool fillCenter
	{
		[Token(Token = "0x600094B")]
		[Address(RVA = "0x777D7C", Offset = "0x777D7C", VA = "0x777D7C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600094C")]
		[Address(RVA = "0x777D8C", Offset = "0x777D8C", VA = "0x777D8C")]
		set
		{
		}
	}

	[Token(Token = "0x170001C9")]
	public bool applyGradient
	{
		[Token(Token = "0x600094D")]
		[Address(RVA = "0x777DB4", Offset = "0x777DB4", VA = "0x777DB4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600094E")]
		[Address(RVA = "0x777DBC", Offset = "0x777DBC", VA = "0x777DBC")]
		set
		{
		}
	}

	[Token(Token = "0x170001CA")]
	public Color gradientTop
	{
		[Token(Token = "0x600094F")]
		[Address(RVA = "0x777DE4", Offset = "0x777DE4", VA = "0x777DE4")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000950")]
		[Address(RVA = "0x777DF4", Offset = "0x777DF4", VA = "0x777DF4")]
		set
		{
		}
	}

	[Token(Token = "0x170001CB")]
	public Color gradientBottom
	{
		[Token(Token = "0x6000951")]
		[Address(RVA = "0x777E7C", Offset = "0x777E7C", VA = "0x777E7C")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000952")]
		[Address(RVA = "0x777E8C", Offset = "0x777E8C", VA = "0x777E8C")]
		set
		{
		}
	}

	[Token(Token = "0x170001CC")]
	public override Vector4 border
	{
		[Token(Token = "0x6000953")]
		[Address(RVA = "0x777F14", Offset = "0x777F14", VA = "0x777F14", Slot = "36")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x170001CD")]
	protected override Vector4 padding
	{
		[Token(Token = "0x6000954")]
		[Address(RVA = "0x778018", Offset = "0x778018", VA = "0x778018", Slot = "43")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x170001CE")]
	public override float pixelSize
	{
		[Token(Token = "0x6000955")]
		[Address(RVA = "0x7780A8", Offset = "0x7780A8", VA = "0x7780A8", Slot = "42")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001CF")]
	public override int minWidth
	{
		[Token(Token = "0x6000956")]
		[Address(RVA = "0x7781E0", Offset = "0x7781E0", VA = "0x7781E0", Slot = "34")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001D0")]
	public override int minHeight
	{
		[Token(Token = "0x6000957")]
		[Address(RVA = "0x778430", Offset = "0x778430", VA = "0x778430", Slot = "35")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001D1")]
	public override Vector4 drawingDimensions
	{
		[Token(Token = "0x6000958")]
		[Address(RVA = "0x778680", Offset = "0x778680", VA = "0x778680", Slot = "24")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x170001D2")]
	public override bool premultipliedAlpha
	{
		[Token(Token = "0x6000959")]
		[Address(RVA = "0x778C3C", Offset = "0x778C3C", VA = "0x778C3C", Slot = "41")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0x776A84", Offset = "0x776A84", VA = "0x776A84")]
	public UISprite()
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0x7776E4", Offset = "0x7776E4", VA = "0x7776E4")]
	public UISpriteData GetSprite(string spriteName)
	{
		return null;
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0x7777CC", Offset = "0x7777CC", VA = "0x7777CC", Slot = "31")]
	public override void MarkAsChanged()
	{
	}

	[Token(Token = "0x600095A")]
	[Address(RVA = "0x777958", Offset = "0x777958", VA = "0x777958")]
	public UISpriteData GetAtlasSprite()
	{
		return null;
	}

	[Token(Token = "0x600095B")]
	[Address(RVA = "0x777400", Offset = "0x777400", VA = "0x777400")]
	protected void SetAtlasSprite(UISpriteData sp)
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0x778D2C", Offset = "0x778D2C", VA = "0x778D2C", Slot = "33")]
	public override void MakePixelPerfect()
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0x7798A4", Offset = "0x7798A4", VA = "0x7798A4", Slot = "15")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0x7798F4", Offset = "0x7798F4", VA = "0x7798F4", Slot = "22")]
	protected override void OnUpdate()
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0x779BC8", Offset = "0x779BC8", VA = "0x779BC8", Slot = "38")]
	public override void OnFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols)
	{
	}
}
[Token(Token = "0x2000117")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235A48", Offset = "0x235A48")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235A48", Offset = "0x235A48")]
public class UISpriteAnimation : MonoBehaviour
{
	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int frameIndex;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	[SerializeField]
	protected int mFPS;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	[SerializeField]
	protected string mPrefix;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	protected bool mLoop;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	[HideInInspector]
	protected bool mSnap;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected UISprite mSprite;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected float mDelta;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected bool mActive;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected List<string> mSpriteNames;

	[Token(Token = "0x170001D3")]
	public int frames
	{
		[Token(Token = "0x6000961")]
		[Address(RVA = "0x77A23C", Offset = "0x77A23C", VA = "0x77A23C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001D4")]
	public int framesPerSecond
	{
		[Token(Token = "0x6000962")]
		[Address(RVA = "0x77A2B4", Offset = "0x77A2B4", VA = "0x77A2B4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000963")]
		[Address(RVA = "0x77A2BC", Offset = "0x77A2BC", VA = "0x77A2BC")]
		set
		{
		}
	}

	[Token(Token = "0x170001D5")]
	public string namePrefix
	{
		[Token(Token = "0x6000964")]
		[Address(RVA = "0x77A2C4", Offset = "0x77A2C4", VA = "0x77A2C4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000965")]
		[Address(RVA = "0x77A2CC", Offset = "0x77A2CC", VA = "0x77A2CC")]
		set
		{
		}
	}

	[Token(Token = "0x170001D6")]
	public bool loop
	{
		[Token(Token = "0x6000966")]
		[Address(RVA = "0x77A6D0", Offset = "0x77A6D0", VA = "0x77A6D0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000967")]
		[Address(RVA = "0x77A6D8", Offset = "0x77A6D8", VA = "0x77A6D8")]
		set
		{
		}
	}

	[Token(Token = "0x170001D7")]
	public bool isPlaying
	{
		[Token(Token = "0x6000968")]
		[Address(RVA = "0x77A6E0", Offset = "0x77A6E0", VA = "0x77A6E0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0x77A150", Offset = "0x77A150", VA = "0x77A150")]
	public UISpriteAnimation()
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0x77A6E8", Offset = "0x77A6E8", VA = "0x77A6E8", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0x77A6EC", Offset = "0x77A6EC", VA = "0x77A6EC", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0x77A370", Offset = "0x77A370", VA = "0x77A370")]
	public void RebuildSpriteList()
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0x77A934", Offset = "0x77A934", VA = "0x77A934")]
	public void Play()
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0x77A940", Offset = "0x77A940", VA = "0x77A940")]
	public void Pause()
	{
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0x77A94C", Offset = "0x77A94C", VA = "0x77A94C")]
	public void ResetToBeginning()
	{
	}
}
[Token(Token = "0x2000118")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235B0C", Offset = "0x235B0C")]
public class UISpriteCollection : UIBasicSprite
{
	[Token(Token = "0x2000119")]
	public struct Sprite
	{
		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UISpriteData sprite;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector2 pos;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rot;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float width;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float height;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color32 color;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 pivot;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Type type;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Flip flip;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool enabled;

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x2BFC44", Offset = "0x2BFC44", VA = "0x2BFC44")]
		public Vector4 GetDrawingDimensions(float pixelSize)
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x200011A")]
	public delegate void OnHoverCB(object obj, bool isOver);

	[Token(Token = "0x200011B")]
	public delegate void OnPressCB(object obj, bool isPressed);

	[Token(Token = "0x200011C")]
	public delegate void OnClickCB(object obj);

	[Token(Token = "0x200011D")]
	public delegate void OnDragCB(object obj, Vector2 delta);

	[Token(Token = "0x200011E")]
	public delegate void OnTooltipCB(object obj, bool show);

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	[HideInInspector]
	[SerializeField]
	private UnityEngine.Object mAtlas;

	[NonSerialized]
	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Dictionary<object, Sprite> mSprites;

	[NonSerialized]
	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private UISpriteData mSprite;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public OnHoverCB onHover;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	public OnPressCB onPress;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public OnClickCB onClick;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	public OnDragCB onDrag;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public OnTooltipCB onTooltip;

	[NonSerialized]
	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private object mLastHover;

	[NonSerialized]
	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private object mLastPress;

	[NonSerialized]
	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	private object mLastTooltip;

	[Token(Token = "0x170001D8")]
	public override Texture mainTexture
	{
		[Token(Token = "0x6000970")]
		[Address(RVA = "0x77AB6C", Offset = "0x77AB6C", VA = "0x77AB6C", Slot = "27")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000971")]
		[Address(RVA = "0x77AD1C", Offset = "0x77AD1C", VA = "0x77AD1C", Slot = "28")]
		set
		{
		}
	}

	[Token(Token = "0x170001D9")]
	public override Material material
	{
		[Token(Token = "0x6000972")]
		[Address(RVA = "0x77AD2C", Offset = "0x77AD2C", VA = "0x77AD2C", Slot = "25")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000973")]
		[Address(RVA = "0x77AE58", Offset = "0x77AE58", VA = "0x77AE58", Slot = "26")]
		set
		{
		}
	}

	[Token(Token = "0x170001DA")]
	public INGUIAtlas atlas
	{
		[Token(Token = "0x6000974")]
		[Address(RVA = "0x77ACB8", Offset = "0x77ACB8", VA = "0x77ACB8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000975")]
		[Address(RVA = "0x77AE5C", Offset = "0x77AE5C", VA = "0x77AE5C")]
		set
		{
		}
	}

	[Token(Token = "0x170001DB")]
	public override float pixelSize
	{
		[Token(Token = "0x6000976")]
		[Address(RVA = "0x77AF60", Offset = "0x77AF60", VA = "0x77AF60", Slot = "42")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001DC")]
	public override bool premultipliedAlpha
	{
		[Token(Token = "0x6000977")]
		[Address(RVA = "0x77B040", Offset = "0x77B040", VA = "0x77B040", Slot = "41")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001DD")]
	public override Vector4 border
	{
		[Token(Token = "0x6000978")]
		[Address(RVA = "0x77B120", Offset = "0x77B120", VA = "0x77B120", Slot = "36")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x170001DE")]
	protected override Vector4 padding
	{
		[Token(Token = "0x6000979")]
		[Address(RVA = "0x77B190", Offset = "0x77B190", VA = "0x77B190", Slot = "43")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0x77AAB4", Offset = "0x77AAB4", VA = "0x77AAB4")]
	public UISpriteCollection()
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0x77B21C", Offset = "0x77B21C", VA = "0x77B21C", Slot = "38")]
	public override void OnFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols)
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0x77C1D0", Offset = "0x77C1D0", VA = "0x77C1D0")]
	public void Add(object obj, string spriteName, Vector2 pos, float width, float height)
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0x77C538", Offset = "0x77C538", VA = "0x77C538")]
	public void Add(object obj, string spriteName, Vector2 pos, float width, float height, Color32 color)
	{
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0x77C288", Offset = "0x77C288", VA = "0x77C288")]
	public void AddSprite(object id, string spriteName, Vector2 pos, float width, float height, Color32 color, Vector2 pivot, float rot = 0f, Type type = Type.Simple, Flip flip = Flip.Nothing, bool enabled = true)
	{
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0x77C5D0", Offset = "0x77C5D0", VA = "0x77C5D0")]
	public Sprite? GetSprite(object id)
	{
		return null;
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0x77C738", Offset = "0x77C738", VA = "0x77C738")]
	public bool RemoveSprite(object id)
	{
		return default(bool);
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0x77C7EC", Offset = "0x77C7EC", VA = "0x77C7EC")]
	public bool SetSprite(object id, Sprite sp)
	{
		return default(bool);
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0x77C938", Offset = "0x77C938", VA = "0x77C938")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x23D8E0", Offset = "0x23D8E0")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0x77C9F8", Offset = "0x77C9F8", VA = "0x77C9F8")]
	public bool IsActive(object id)
	{
		return default(bool);
	}

	[Token(Token = "0x6000983")]
	[Address(RVA = "0x77CAAC", Offset = "0x77CAAC", VA = "0x77CAAC")]
	public bool SetActive(object id, bool visible)
	{
		return default(bool);
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0x77CC70", Offset = "0x77CC70", VA = "0x77CC70")]
	public bool SetPosition(object id, Vector2 pos, bool visible = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0x77CF80", Offset = "0x77CF80", VA = "0x77CF80")]
	private static Vector2 Rotate(Vector2 pos, float rot)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0x77D090", Offset = "0x77D090", VA = "0x77D090")]
	public object GetCurrentSpriteID()
	{
		return null;
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0x77D528", Offset = "0x77D528", VA = "0x77D528")]
	public Sprite? GetCurrentSprite()
	{
		return null;
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0x77D134", Offset = "0x77D134", VA = "0x77D134")]
	public object GetCurrentSpriteID(Vector3 worldPos)
	{
		return null;
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0x77D5DC", Offset = "0x77D5DC", VA = "0x77D5DC")]
	public Sprite? GetCurrentSprite(Vector3 worldPos)
	{
		return null;
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0x77DAE4", Offset = "0x77DAE4", VA = "0x77DAE4")]
	protected void OnClick()
	{
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0x77DEF8", Offset = "0x77DEF8", VA = "0x77DEF8")]
	protected void OnPress(bool isPressed)
	{
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0x77E368", Offset = "0x77E368", VA = "0x77E368")]
	protected void OnHover(bool isOver)
	{
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0x77E630", Offset = "0x77E630", VA = "0x77E630")]
	protected void OnMove(Vector2 delta)
	{
	}

	[Token(Token = "0x600098E")]
	[Address(RVA = "0x77EB24", Offset = "0x77EB24", VA = "0x77EB24")]
	protected void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0x77EF94", Offset = "0x77EF94", VA = "0x77EF94")]
	protected void OnTooltip(bool show)
	{
	}
}
[Serializable]
[Token(Token = "0x200011F")]
public class UISpriteData
{
	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string name;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int x;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int y;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int width;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int height;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int borderLeft;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int borderRight;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int borderTop;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int borderBottom;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int paddingLeft;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int paddingRight;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int paddingTop;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int paddingBottom;

	[Token(Token = "0x170001DF")]
	public bool hasBorder
	{
		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x7792DC", Offset = "0x7792DC", VA = "0x7792DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001E0")]
	public bool hasPadding
	{
		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x77F7C0", Offset = "0x77F7C0", VA = "0x77F7C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0x77F754", Offset = "0x77F754", VA = "0x77F754")]
	public UISpriteData()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0x77F7E0", Offset = "0x77F7E0", VA = "0x77F7E0")]
	public void SetRect(int x, int y, int width, int height)
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0x77F7F0", Offset = "0x77F7F0", VA = "0x77F7F0")]
	public void SetPadding(int left, int bottom, int right, int top)
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0x77F808", Offset = "0x77F808", VA = "0x77F808")]
	public void SetBorder(int left, int bottom, int right, int top)
	{
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0x77F820", Offset = "0x77F820", VA = "0x77F820")]
	public void CopyFrom(UISpriteData sd)
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0x77F9A0", Offset = "0x77F9A0", VA = "0x77F9A0")]
	public void CopyBorderFrom(UISpriteData sd)
	{
	}
}
[Token(Token = "0x2000120")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235B68", Offset = "0x235B68")]
[ExecuteInEditMode]
public class UIStretch : MonoBehaviour
{
	[Token(Token = "0x2000121")]
	[DoNotObfuscateNGUI]
	public enum Style
	{
		[Token(Token = "0x400071B")]
		None,
		[Token(Token = "0x400071C")]
		Horizontal,
		[Token(Token = "0x400071D")]
		Vertical,
		[Token(Token = "0x400071E")]
		Both,
		[Token(Token = "0x400071F")]
		BasedOnHeight,
		[Token(Token = "0x4000720")]
		FillKeepingRatio,
		[Token(Token = "0x4000721")]
		FitInternalKeepingRatio
	}

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Camera uiCamera;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject container;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Style style;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool runOnlyOnce;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 relativeSize;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector2 initialSize;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector2 borderPadding;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	[SerializeField]
	private UIWidget widgetContainer;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform mTrans;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private UIWidget mWidget;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UISprite mSprite;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UIPanel mPanel;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UIRoot mRoot;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Animation mAnim;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Rect mRect;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool mStarted;

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0x77FBB8", Offset = "0x77FBB8", VA = "0x77FBB8")]
	public UIStretch()
	{
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0x77FC9C", Offset = "0x77FC9C", VA = "0x77FC9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0x77FE94", Offset = "0x77FE94", VA = "0x77FE94")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0x780000", Offset = "0x780000", VA = "0x780000")]
	private void ScreenSizeChanged()
	{
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0x780F88", Offset = "0x780F88", VA = "0x780F88")]
	private void Start()
	{
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0x78001C", Offset = "0x78001C", VA = "0x78001C")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000122")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235BC8", Offset = "0x235BC8")]
public class UITextList : MonoBehaviour
{
	[Token(Token = "0x2000123")]
	[DoNotObfuscateNGUI]
	public enum Style
	{
		[Token(Token = "0x400072E")]
		Text,
		[Token(Token = "0x400072F")]
		Chat
	}

	[Token(Token = "0x2000124")]
	protected class Paragraph
	{
		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string text;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string[] lines;

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x784754", Offset = "0x784754", VA = "0x784754")]
		public Paragraph()
		{
		}
	}

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UILabel textLabel;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UIProgressBar scrollBar;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Style style;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int paragraphHistory;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected char[] mSeparator;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected float mScroll;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected int mTotalLines;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected int mLastWidth;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected int mLastHeight;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BetterList<Paragraph> mParagraphs;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, BetterList<Paragraph>> mHistory;

	[Token(Token = "0x170001E1")]
	protected BetterList<Paragraph> paragraphs
	{
		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x782FAC", Offset = "0x782FAC", VA = "0x782FAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001E2")]
	public int paragraphCount
	{
		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x783154", Offset = "0x783154", VA = "0x783154")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001E3")]
	public bool isValid
	{
		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x78317C", Offset = "0x78317C", VA = "0x78317C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001E4")]
	public float scrollValue
	{
		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x783274", Offset = "0x783274", VA = "0x783274")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x78327C", Offset = "0x78327C", VA = "0x78327C")]
		set
		{
		}
	}

	[Token(Token = "0x170001E5")]
	protected float lineHeight
	{
		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x78377C", Offset = "0x78377C", VA = "0x78377C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001E6")]
	protected int scrollHeight
	{
		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x783870", Offset = "0x783870", VA = "0x783870")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0x782EF8", Offset = "0x782EF8", VA = "0x782EF8")]
	public UITextList()
	{
	}

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0x783960", Offset = "0x783960", VA = "0x783960")]
	public void Clear()
	{
	}

	[Token(Token = "0x60009BC")]
	[Address(RVA = "0x7839E8", Offset = "0x7839E8", VA = "0x7839E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0x783F74", Offset = "0x783F74", VA = "0x783F74")]
	private void Update()
	{
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0x78449C", Offset = "0x78449C", VA = "0x78449C")]
	public void OnScroll(float val)
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0x784504", Offset = "0x784504", VA = "0x784504")]
	public void OnDrag(Vector2 delta)
	{
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0x78455C", Offset = "0x78455C", VA = "0x78455C")]
	private void OnScrollBar()
	{
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0x7845E8", Offset = "0x7845E8", VA = "0x7845E8")]
	public void Add(string text)
	{
	}

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0x7845F0", Offset = "0x7845F0", VA = "0x7845F0")]
	protected void Add(string text, bool updateVisible)
	{
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0x783FE4", Offset = "0x783FE4", VA = "0x783FE4")]
	protected void Rebuild()
	{
	}

	[Token(Token = "0x60009C4")]
	[Address(RVA = "0x7833BC", Offset = "0x7833BC", VA = "0x7833BC")]
	protected void UpdateVisibleText()
	{
	}
}
[Token(Token = "0x2000125")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235C18", Offset = "0x235C18")]
[ExecuteInEditMode]
public class UITexture : UIBasicSprite
{
	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	[SerializeField]
	[HideInInspector]
	private Rect mRect;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	[SerializeField]
	[HideInInspector]
	private Texture mTexture;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	[HideInInspector]
	private Shader mShader;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	[SerializeField]
	[HideInInspector]
	private Vector4 mBorder;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	[SerializeField]
	[HideInInspector]
	private bool mFixedAspect;

	[NonSerialized]
	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private int mPMA;

	[Token(Token = "0x170001E7")]
	public override Texture mainTexture
	{
		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x784908", Offset = "0x784908", VA = "0x784908", Slot = "27")]
		get
		{
			return null;
		}
		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x784A18", Offset = "0x784A18", VA = "0x784A18", Slot = "28")]
		set
		{
		}
	}

	[Token(Token = "0x170001E8")]
	public override Material material
	{
		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x784BB4", Offset = "0x784BB4", VA = "0x784BB4", Slot = "25")]
		get
		{
			return null;
		}
		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x784BBC", Offset = "0x784BBC", VA = "0x784BBC", Slot = "26")]
		set
		{
		}
	}

	[Token(Token = "0x170001E9")]
	public override Shader shader
	{
		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x784C84", Offset = "0x784C84", VA = "0x784C84", Slot = "29")]
		get
		{
			return null;
		}
		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x784DA4", Offset = "0x784DA4", VA = "0x784DA4", Slot = "30")]
		set
		{
		}
	}

	[Token(Token = "0x170001EA")]
	public override bool premultipliedAlpha
	{
		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x784F48", Offset = "0x784F48", VA = "0x784F48", Slot = "41")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001EB")]
	public override Vector4 border
	{
		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x7850F0", Offset = "0x7850F0", VA = "0x7850F0", Slot = "36")]
		get
		{
			return default(Vector4);
		}
		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x785100", Offset = "0x785100", VA = "0x785100", Slot = "37")]
		set
		{
		}
	}

	[Token(Token = "0x170001EC")]
	public Rect uvRect
	{
		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x785210", Offset = "0x785210", VA = "0x785210")]
		get
		{
			return default(Rect);
		}
		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x785220", Offset = "0x785220", VA = "0x785220")]
		set
		{
		}
	}

	[Token(Token = "0x170001ED")]
	public override Vector4 drawingDimensions
	{
		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x78529C", Offset = "0x78529C", VA = "0x78529C", Slot = "24")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x170001EE")]
	public bool fixedAspect
	{
		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x7855A4", Offset = "0x7855A4", VA = "0x7855A4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x7855AC", Offset = "0x7855AC", VA = "0x7855AC")]
		set
		{
		}
	}

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0x7847EC", Offset = "0x7847EC", VA = "0x7847EC")]
	public UITexture()
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0x785630", Offset = "0x785630", VA = "0x785630", Slot = "33")]
	public override void MakePixelPerfect()
	{
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0x7857C8", Offset = "0x7857C8", VA = "0x7857C8", Slot = "22")]
	protected override void OnUpdate()
	{
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0x7859C4", Offset = "0x7859C4", VA = "0x7859C4", Slot = "38")]
	public override void OnFill(List<Vector3> verts, List<Vector2> uvs, List<Color> cols)
	{
	}
}
[Token(Token = "0x2000126")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235C68", Offset = "0x235C68")]
public class UITooltip : MonoBehaviour
{
	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static UITooltip mInstance;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Camera uiCamera;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UILabel text;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject tooltipRoot;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UISprite background;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float appearSpeed;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool scalingTransitions;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected GameObject mTooltip;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected Transform mTrans;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected float mTarget;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected float mCurrent;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected Vector3 mPos;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Vector3 mSize;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected UIWidget[] mWidgets;

	[Token(Token = "0x170001EF")]
	public static bool isVisible
	{
		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x788254", Offset = "0x788254", VA = "0x788254")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60009D9")]
	[Address(RVA = "0x78819C", Offset = "0x78819C", VA = "0x78819C")]
	public UITooltip()
	{
	}

	[Token(Token = "0x60009DB")]
	[Address(RVA = "0x788340", Offset = "0x788340", VA = "0x788340")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009DC")]
	[Address(RVA = "0x7883A4", Offset = "0x7883A4", VA = "0x7883A4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0x78840C", Offset = "0x78840C", VA = "0x78840C", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0x788588", Offset = "0x788588", VA = "0x788588", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0x7888A8", Offset = "0x7888A8", VA = "0x7888A8", Slot = "6")]
	protected virtual void SetAlpha(float val)
	{
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0x78897C", Offset = "0x78897C", VA = "0x78897C", Slot = "7")]
	protected virtual void SetText(string tooltipText)
	{
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0x7892B0", Offset = "0x7892B0", VA = "0x7892B0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23D914", Offset = "0x23D914")]
	public static void ShowText(string text)
	{
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0x789398", Offset = "0x789398", VA = "0x789398")]
	public static void Show(string text)
	{
	}

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0x789480", Offset = "0x789480", VA = "0x789480")]
	public static void Hide()
	{
	}
}
[Token(Token = "0x2000127")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235CA4", Offset = "0x235CA4")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x235CA4", Offset = "0x235CA4")]
public class UIViewport : MonoBehaviour
{
	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Camera sourceCamera;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform topLeft;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Transform bottomRight;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fullSize;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Camera mCam;

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0x78A7A4", Offset = "0x78A7A4", VA = "0x78A7A4")]
	public UIViewport()
	{
	}

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0x78A7B4", Offset = "0x78A7B4", VA = "0x78A7B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0x78A870", Offset = "0x78A870", VA = "0x78A870")]
	private void LateUpdate()
	{
	}
}
namespace nn.account
{
	[Token(Token = "0x2000128")]
	public static class Account
	{
		[Token(Token = "0x400074B")]
		public const int UserCountMax = 8;

		[Token(Token = "0x400074C")]
		public const int ProfileImageBytesMax = 131072;

		[Token(Token = "0x400074D")]
		public const int SaveDataThumbnailImageBytesMax = 147456;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultCancelled;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly ErrorRange ResultCancelledByUser;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly ErrorRange ResultUserNotExist;

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x8EDDD4", Offset = "0x8EDDD4", VA = "0x8EDDD4")]
		public static Result GetUserCount(ref int pOutCount)
		{
			return default(Result);
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x8EDDE4", Offset = "0x8EDDE4", VA = "0x8EDDE4")]
		public static Result GetUserExistence(ref bool pOutExistence, Uid user)
		{
			return default(Result);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x8EDDF4", Offset = "0x8EDDF4", VA = "0x8EDDF4")]
		public static Result ListAllUsers(ref int pOutActualLength, Uid[] outUsers)
		{
			return default(Result);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x8EDE04", Offset = "0x8EDE04", VA = "0x8EDE04")]
		public static Result ListOpenUsers(ref int pOutActualLength, Uid[] outUsers)
		{
			return default(Result);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x8EDE14", Offset = "0x8EDE14", VA = "0x8EDE14")]
		public static Result GetLastOpenedUser(ref Uid pOutUser)
		{
			return default(Result);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x8EDE1C", Offset = "0x8EDE1C", VA = "0x8EDE1C")]
		public static Result GetNickname(ref Nickname pOut, Uid user)
		{
			return default(Result);
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x8EDE24", Offset = "0x8EDE24", VA = "0x8EDE24")]
		public static Result LoadProfileImage(ref long pOutActualSize, byte[] outImage, Uid user)
		{
			return default(Result);
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x8EDE2C", Offset = "0x8EDE2C", VA = "0x8EDE2C")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x8EDE30", Offset = "0x8EDE30", VA = "0x8EDE30")]
		public static Result OpenUser(ref UserHandle pOutHandle, Uid user)
		{
			return default(Result);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x8EDE38", Offset = "0x8EDE38", VA = "0x8EDE38")]
		public static Result OpenPreselectedUser(ref UserHandle pOutHandle)
		{
			return default(Result);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x8EDE40", Offset = "0x8EDE40", VA = "0x8EDE40")]
		public static void CloseUser(UserHandle handle)
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x8EDE44", Offset = "0x8EDE44", VA = "0x8EDE44")]
		public static Result GetUserId(ref Uid pOut, UserHandle handle)
		{
			return default(Result);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x8EDE4C", Offset = "0x8EDE4C", VA = "0x8EDE4C")]
		public static Result StoreSaveDataThumbnailImage(Uid user, byte[] imageBuffer)
		{
			return default(Result);
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x8EDE54", Offset = "0x8EDE54", VA = "0x8EDE54")]
		public static Result DeleteSaveDataThumbnailImage(Uid user)
		{
			return default(Result);
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x8EDE5C", Offset = "0x8EDE5C", VA = "0x8EDE5C")]
		public static Result ShowUserSelector(ref Uid pOut, UserSelectionSettings arg)
		{
			return default(Result);
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x8EDE64", Offset = "0x8EDE64", VA = "0x8EDE64")]
		public static Result ShowUserSelector(ref Uid pOut)
		{
			return default(Result);
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x8EDE6C", Offset = "0x8EDE6C", VA = "0x8EDE6C")]
		public static Result ShowUserCreator()
		{
			return default(Result);
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x8EDE74", Offset = "0x8EDE74", VA = "0x8EDE74")]
		public static Result ShowUserSelector(ref Uid pOut, UserSelectionSettings arg, bool suspendUnityThreads)
		{
			return default(Result);
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x8EDEEC", Offset = "0x8EDEEC", VA = "0x8EDEEC")]
		public static Result ShowUserSelector(ref Uid pOut, bool suspendUnityThreads)
		{
			return default(Result);
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x8EDF64", Offset = "0x8EDF64", VA = "0x8EDF64")]
		public static Result ShowUserCreator(bool suspendUnityThreads)
		{
			return default(Result);
		}
	}
	[Token(Token = "0x2000129")]
	public static class NetworkServiceAccount
	{
		[Token(Token = "0x4000751")]
		public const int IdTokenLengthMax = 3072;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultNetworkServiceAccountUnavailable;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly ErrorRange ResultTokenCacheUnavailable;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly ErrorRange ResultNetworkCommunicationError;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly ErrorRange ResultSslService;

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x8EE16C", Offset = "0x8EE16C", VA = "0x8EE16C")]
		public static Result EnsureAvailable(UserHandle handle)
		{
			return default(Result);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x8EE174", Offset = "0x8EE174", VA = "0x8EE174")]
		public static Result IsAvailable(ref bool pOut, UserHandle handle)
		{
			return default(Result);
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x8EE184", Offset = "0x8EE184", VA = "0x8EE184")]
		public static Result GetId(ref NetworkServiceAccountId pOutId, UserHandle handle)
		{
			return default(Result);
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x8EE18C", Offset = "0x8EE18C", VA = "0x8EE18C")]
		public static Result EnsurIdTokenCacheAsync(AsyncContext pOutContext, UserHandle handle)
		{
			return default(Result);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x8EE194", Offset = "0x8EE194", VA = "0x8EE194")]
		public static Result LoadIdTokenCache(ref int pOutActualSize, byte[] buffer, UserHandle handle)
		{
			return default(Result);
		}
	}
	[Token(Token = "0x200012A")]
	public sealed class AsyncContext : IDisposable
	{
		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal IntPtr _context;

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x8EE0D8", Offset = "0x8EE0D8", VA = "0x8EE0D8")]
		public AsyncContext()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x8EE138", Offset = "0x8EE138", VA = "0x8EE138", Slot = "1")]
		~AsyncContext()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x8EE144", Offset = "0x8EE144", VA = "0x8EE144", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x8EE140", Offset = "0x8EE140", VA = "0x8EE140")]
		private void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x8EE14C", Offset = "0x8EE14C", VA = "0x8EE14C")]
		public Result Cancel()
		{
			return default(Result);
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x8EE154", Offset = "0x8EE154", VA = "0x8EE154")]
		public Result HasDone(ref bool pOut)
		{
			return default(Result);
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x8EE164", Offset = "0x8EE164", VA = "0x8EE164")]
		public Result GetResult()
		{
			return default(Result);
		}
	}
	[Token(Token = "0x200012B")]
	public struct UserSelectionSettings
	{
		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Uid[] invalidUidList;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool isSkipEnabled;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool isNetworkServiceAccountRequired;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public bool showSkipButton;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public bool additionalSelect;

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x2C3B64", Offset = "0x2C3B64", VA = "0x2C3B64")]
		public void SetDefault()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x2C3B6C", Offset = "0x2C3B6C", VA = "0x2C3B6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x2C3B74", Offset = "0x2C3B74", VA = "0x2C3B74", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x2C3B7C", Offset = "0x2C3B7C", VA = "0x2C3B7C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x8EF0B0", Offset = "0x8EF0B0", VA = "0x8EF0B0")]
		public static bool operator ==(UserSelectionSettings lhs, UserSelectionSettings rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x8EF138", Offset = "0x8EF138", VA = "0x8EF138")]
		public static bool operator !=(UserSelectionSettings lhs, UserSelectionSettings rhs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200012C")]
	public struct Uid
	{
		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Uid Invalid;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong _data0;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong _data1;

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x2C3988", Offset = "0x2C3988", VA = "0x2C3988")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x2C39B0", Offset = "0x2C39B0", VA = "0x2C39B0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x2C39B8", Offset = "0x2C39B8", VA = "0x2C39B8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x2C39C0", Offset = "0x2C39C0", VA = "0x2C39C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x8EE7AC", Offset = "0x8EE7AC", VA = "0x8EE7AC")]
		public static bool operator ==(Uid lhs, Uid rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x8EE854", Offset = "0x8EE854", VA = "0x8EE854")]
		public static bool operator !=(Uid lhs, Uid rhs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200012D")]
	public struct UserHandle
	{
		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong _data0;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong _data1;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong _context;

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x2C39C8", Offset = "0x2C39C8", VA = "0x2C39C8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200012E")]
	public struct Nickname
	{
		[Token(Token = "0x4000762")]
		public const int NameBytesMax = 32;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x2C3980", Offset = "0x2C3980", VA = "0x2C3980", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200012F")]
	public struct NetworkServiceAccountId
	{
		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong id;

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x2C3940", Offset = "0x2C3940", VA = "0x2C3940", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x2C3948", Offset = "0x2C3948", VA = "0x2C3948", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x2C3950", Offset = "0x2C3950", VA = "0x2C3950", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x8EE4CC", Offset = "0x8EE4CC", VA = "0x8EE4CC")]
		public static bool operator ==(NetworkServiceAccountId lhs, NetworkServiceAccountId rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x8EE554", Offset = "0x8EE554", VA = "0x8EE554")]
		public static bool operator !=(NetworkServiceAccountId lhs, NetworkServiceAccountId rhs)
		{
			return default(bool);
		}
	}
}
namespace nn.aoc
{
	[Token(Token = "0x2000130")]
	public static class Aoc
	{
		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x8EF154", Offset = "0x8EF154", VA = "0x8EF154")]
		public static int CountAddOnContent()
		{
			return default(int);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x8EF15C", Offset = "0x8EF15C", VA = "0x8EF15C")]
		public static int ListAddOnContent(int[] outIndices, int offset, int count)
		{
			return default(int);
		}
	}
}
namespace nn.err
{
	[Token(Token = "0x2000131")]
	public static class Error
	{
		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x8EF164", Offset = "0x8EF164", VA = "0x8EF164")]
		public static void Show(Result result)
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x8EF168", Offset = "0x8EF168", VA = "0x8EF168")]
		public static void Show(ErrorCode errorCode)
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x8EF16C", Offset = "0x8EF16C", VA = "0x8EF16C")]
		public static void Show(Result result, bool suspendUnityThreads)
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x8EF170", Offset = "0x8EF170", VA = "0x8EF170")]
		public static void Show(ErrorCode errorCode, bool suspendUnityThreads)
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x8EF174", Offset = "0x8EF174", VA = "0x8EF174")]
		public static void ShowUnacceptableApplicationVersion()
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x8EF178", Offset = "0x8EF178", VA = "0x8EF178")]
		public static void ShowUnacceptableApplicationVersion(bool suspendUnityThreads)
		{
		}
	}
	[Token(Token = "0x2000132")]
	public struct ErrorCode
	{
		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint category;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint number;

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x2C3B84", Offset = "0x2C3B84", VA = "0x2C3B84", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x2C3B8C", Offset = "0x2C3B8C", VA = "0x2C3B8C")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x8EF260", Offset = "0x8EF260", VA = "0x8EF260")]
		public static ErrorCode GetInvalidErrorCode()
		{
			return default(ErrorCode);
		}
	}
}
namespace nn.fs
{
	[Token(Token = "0x2000133")]
	public static class AddOnContent
	{
		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x8EF270", Offset = "0x8EF270", VA = "0x8EF270")]
		public static Result QueryMountCacheSize(ref long pOutValue, int targetIndex)
		{
			return default(Result);
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x8EF284", Offset = "0x8EF284", VA = "0x8EF284")]
		public static Result Mount(string name, int targetIndex, byte[] pCacheBuffer, long cacheBufferSize)
		{
			return default(Result);
		}
	}
	[Token(Token = "0x2000134")]
	public struct DirectoryHandle
	{
		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;
	}
	[Token(Token = "0x2000135")]
	public struct DirectoryEntry
	{
		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private byte _reserved0;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		private byte _reserved1;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		private byte _reserved2;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		private sbyte _entryType;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private byte _reserved3;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private byte _reserved4;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		private byte _reserved5;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long fileSize;

		[Token(Token = "0x170001F0")]
		public EntryType entryType
		{
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0x2C3C5C", Offset = "0x2C3C5C", VA = "0x2C3C5C")]
			get
			{
				return default(EntryType);
			}
			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0x2C3C64", Offset = "0x2C3C64", VA = "0x2C3C64")]
			set
			{
			}
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x2C3C6C", Offset = "0x2C3C6C", VA = "0x2C3C6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000136")]
	public static class Directory
	{
		[Token(Token = "0x4000771")]
		public const int EntryNameLengthMax = 768;

		[PreserveSig]
		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x8EF290", Offset = "0x8EF290", VA = "0x8EF290")]
		public static extern Result Read(ref long outValue, [Out] DirectoryEntry[] entryBuffer, DirectoryHandle handle, long entryBufferCount);

		[PreserveSig]
		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x8EF448", Offset = "0x8EF448", VA = "0x8EF448")]
		public static extern Result GetEntryCount(ref long outValue, DirectoryHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x8EF560", Offset = "0x8EF560", VA = "0x8EF560")]
		public static extern void Close(DirectoryHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x8EF638", Offset = "0x8EF638", VA = "0x8EF638")]
		public static extern Result Create(string path);

		[PreserveSig]
		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x8EF738", Offset = "0x8EF738", VA = "0x8EF738")]
		public static extern Result Delete(string path);

		[PreserveSig]
		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x8EF838", Offset = "0x8EF838", VA = "0x8EF838")]
		public static extern Result DeleteRecursively(string path);

		[PreserveSig]
		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x8EF978", Offset = "0x8EF978", VA = "0x8EF978")]
		public static extern Result CleanRecursively(string path);

		[PreserveSig]
		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x8EFAB0", Offset = "0x8EFAB0", VA = "0x8EFAB0")]
		public static extern Result Rename(string currentPath, string newPath);

		[PreserveSig]
		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x8EFBD0", Offset = "0x8EFBD0", VA = "0x8EFBD0")]
		public static extern Result Open(ref DirectoryHandle outValue, string path, OpenDirectoryMode mode);
	}
	[Token(Token = "0x2000137")]
	[Flags]
	public enum ReadOption
	{
		[Token(Token = "0x4000773")]
		None = 0
	}
	[Token(Token = "0x2000138")]
	[Flags]
	public enum WriteOption
	{
		[Token(Token = "0x4000775")]
		None = 0,
		[Token(Token = "0x4000776")]
		Flush = 1
	}
	[Token(Token = "0x2000139")]
	public struct FileHandle
	{
		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;
	}
	[Token(Token = "0x200013A")]
	public static class File
	{
		[PreserveSig]
		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x8EFE10", Offset = "0x8EFE10", VA = "0x8EFE10")]
		public static extern Result Read(FileHandle handle, long offset, byte[] buffer, long size, ReadOption option);

		[PreserveSig]
		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x8EFF18", Offset = "0x8EFF18", VA = "0x8EFF18")]
		public static extern Result Read(FileHandle handle, long offset, byte[] buffer, long size);

		[PreserveSig]
		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x8F0018", Offset = "0x8F0018", VA = "0x8F0018")]
		public static extern Result Read(ref long outValue, FileHandle handle, long offset, byte[] buffer, long size, ReadOption option);

		[PreserveSig]
		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x8F0128", Offset = "0x8F0128", VA = "0x8F0128")]
		public static extern Result Read(ref long outValue, FileHandle handle, long offset, byte[] buffer, long size);

		[PreserveSig]
		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x8F0230", Offset = "0x8F0230", VA = "0x8F0230")]
		public static extern Result Write(FileHandle handle, long offset, byte[] buffer, long size, WriteOption option);

		[PreserveSig]
		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x8F0360", Offset = "0x8F0360", VA = "0x8F0360")]
		public static extern Result Flush(FileHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x8F0458", Offset = "0x8F0458", VA = "0x8F0458")]
		public static extern Result SetSize(FileHandle handle, long size);

		[PreserveSig]
		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x8F0568", Offset = "0x8F0568", VA = "0x8F0568")]
		public static extern Result GetSize(ref long outValue, FileHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x8F0670", Offset = "0x8F0670", VA = "0x8F0670")]
		public static extern OpenFileMode GetOpenMode(FileHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x8F0778", Offset = "0x8F0778", VA = "0x8F0778")]
		public static extern void Close(FileHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x8F0848", Offset = "0x8F0848", VA = "0x8F0848")]
		public static extern Result Create(string path, long size);

		[PreserveSig]
		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x8F0950", Offset = "0x8F0950", VA = "0x8F0950")]
		public static extern Result Delete(string path);

		[PreserveSig]
		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x8F0A48", Offset = "0x8F0A48", VA = "0x8F0A48")]
		public static extern Result Rename(string currentPath, string newPath);

		[PreserveSig]
		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x8F0B60", Offset = "0x8F0B60", VA = "0x8F0B60")]
		public static extern Result Open(ref FileHandle outValue, string path, OpenFileMode mode);
	}
	[Token(Token = "0x200013B")]
	public enum EntryType
	{
		[Token(Token = "0x4000779")]
		Directory,
		[Token(Token = "0x400077A")]
		File
	}
	[Token(Token = "0x200013C")]
	public static class FileSystem
	{
		[Token(Token = "0x400077B")]
		public const int MountNameLengthMax = 15;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultHandledByAllProcess;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly ErrorRange ResultPathNotFound;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly ErrorRange ResultPathAlreadyExists;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly ErrorRange ResultTargetLocked;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly ErrorRange ResultDirectoryNotEmpty;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly ErrorRange ResultDirectoryStatusChanged;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly ErrorRange ResultUsableSpaceNotEnough;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly ErrorRange ResultUnsupportedSdkVersion;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly ErrorRange ResultMountNameAlreadyExists;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly ErrorRange ResultTargetNotFound;

		[PreserveSig]
		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x8F0C68", Offset = "0x8F0C68", VA = "0x8F0C68")]
		public static extern Result GetEntryType(ref EntryType outValue, string path);

		[PreserveSig]
		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x8F0D98", Offset = "0x8F0D98", VA = "0x8F0D98")]
		public static extern void Unmount(string name);
	}
	[Token(Token = "0x200013D")]
	[Flags]
	public enum OpenFileMode
	{
		[Token(Token = "0x4000787")]
		Read = 1,
		[Token(Token = "0x4000788")]
		Write = 2,
		[Token(Token = "0x4000789")]
		AllowAppend = 4
	}
	[Token(Token = "0x200013E")]
	[Flags]
	public enum OpenDirectoryMode
	{
		[Token(Token = "0x400078B")]
		Directory = 1,
		[Token(Token = "0x400078C")]
		File = 2,
		[Token(Token = "0x400078D")]
		All = 3
	}
	[Token(Token = "0x200013F")]
	public static class Host
	{
		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultSaveDataHostFileSystemCorrupted;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly ErrorRange ResultSaveDataHostEntryCorrupted;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly ErrorRange ResultSaveDataHostFileDataCorrupted;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly ErrorRange ResultSaveDataHostFileCorrupted;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly ErrorRange ResultInvalidSaveDataHostHandle;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly ErrorRange ResultHostFileSystemCorrupted;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly ErrorRange ResultHostEntryCorrupted;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly ErrorRange ResultHostFileDataCorrupted;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly ErrorRange ResultHostFileCorrupted;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly ErrorRange ResultInvalidHostHandle;

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x8F1110", Offset = "0x8F1110", VA = "0x8F1110")]
		public static Result MountHost(string name, string rootPath)
		{
			return default(Result);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x8F1118", Offset = "0x8F1118", VA = "0x8F1118")]
		public static Result MountHostRoot()
		{
			return default(Result);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x8F1120", Offset = "0x8F1120", VA = "0x8F1120")]
		public static void UnMountHostRoot()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public static class SaveData
	{
		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultUsableSpaceNotEnoughForSaveData;

		[PreserveSig]
		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x8F1740", Offset = "0x8F1740", VA = "0x8F1740")]
		public static extern Result Ensure(Uid user);

		[PreserveSig]
		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x8F1860", Offset = "0x8F1860", VA = "0x8F1860")]
		public static extern Result Mount(string name, Uid user);

		[PreserveSig]
		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x8F1998", Offset = "0x8F1998", VA = "0x8F1998")]
		public static extern Result MountSaveDataReadOnly(string name, ulong applicationId, Uid user);

		[PreserveSig]
		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x8F1AF0", Offset = "0x8F1AF0", VA = "0x8F1AF0")]
		public static extern bool IsExisting(Uid user);

		[PreserveSig]
		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x8F1BF0", Offset = "0x8F1BF0", VA = "0x8F1BF0")]
		public static extern bool IsExisting(ulong applicationId, Uid user);

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x8F1CFC", Offset = "0x8F1CFC", VA = "0x8F1CFC")]
		public static void SetRootPath(string rootPath)
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x8F1D00", Offset = "0x8F1D00", VA = "0x8F1D00")]
		public static Result MountForDebug(string name)
		{
			return default(Result);
		}

		[PreserveSig]
		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x8F1D08", Offset = "0x8F1D08", VA = "0x8F1D08")]
		public static extern Result Commit(string name);
	}
	[Token(Token = "0x2000141")]
	public static class Rom
	{
		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultRomHostFileSystemCorrupted;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly ErrorRange ResultRomHostEntryCorrupted;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly ErrorRange ResultRomHostFileDataCorrupted;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly ErrorRange ResultRomHostFileCorrupted;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly ErrorRange ResultInvalidRomHostHandle;

		[PreserveSig]
		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x8F1378", Offset = "0x8F1378", VA = "0x8F1378")]
		public static extern Result QueryMountRomCacheSize(ref long pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x8F1498", Offset = "0x8F1498", VA = "0x8F1498")]
		public static extern Result MountRom(string name, byte[] pCacheBuffer, long chacheBufferSize);

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x8F15D8", Offset = "0x8F15D8", VA = "0x8F15D8")]
		public static bool CanMountRomForDebug()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000142")]
	public static class SdCard
	{
		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x8F1EC8", Offset = "0x8F1EC8", VA = "0x8F1EC8")]
		public static Result MountForDebug(string name)
		{
			return default(Result);
		}
	}
}
namespace nn.hid
{
	[Token(Token = "0x2000143")]
	public struct AnalogStickState
	{
		[Token(Token = "0x400079E")]
		public const int Max = 32767;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x170001F1")]
		public float fx
		{
			[Token(Token = "0x6000A59")]
			[Address(RVA = "0x2C3C74", Offset = "0x2C3C74", VA = "0x2C3C74")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001F2")]
		public float fy
		{
			[Token(Token = "0x6000A5A")]
			[Address(RVA = "0x2C3C90", Offset = "0x2C3C90", VA = "0x2C3C90")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x2C3CAC", Offset = "0x2C3CAC", VA = "0x2C3CAC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000144")]
	public struct ControllerSupportArg
	{
		[Token(Token = "0x40007A1")]
		private const int ExplainTextSize = 516;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte playerCountMin;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte playerCountMax;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public bool enableTakeOverConnection;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public bool enableLeftJustify;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool enablePermitJoyDual;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool enableSingleMode;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public bool enableIdentificationColor;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Color4u8[] identificationColor;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool enableExplainText;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] explainText;

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x2C3F2C", Offset = "0x2C3F2C", VA = "0x2C3F2C")]
		public void SetDefault()
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x2C3F34", Offset = "0x2C3F34", VA = "0x2C3F34", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000145")]
	public struct ControllerFirmwareUpdateArg
	{
		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool enableForceUpdate;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private byte _padding0;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private byte _padding1;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		private byte _padding2;

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x2C3CB4", Offset = "0x2C3CB4", VA = "0x2C3CB4")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000146")]
	public struct ControllerSupportResultInfo
	{
		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte playerCount;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public NpadId selectedId;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private byte _padding0;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private byte _padding1;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		private byte _padding2;

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x2C3F3C", Offset = "0x2C3F3C", VA = "0x2C3F3C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000147")]
	public static class ControllerSupport
	{
		[Token(Token = "0x40007B5")]
		public const int ExplainTextMaxLength = 32;

		[Token(Token = "0x40007B6")]
		public const int Utf8ByteSize = 4;

		[Token(Token = "0x40007B7")]
		public const int ExplainTextMaxBufferSize = 129;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultCanceled;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly ErrorRange ResultNotSupportedNpadStyle;

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x8F214C", Offset = "0x8F214C", VA = "0x8F214C")]
		public static Result Show(ControllerSupportArg showControllerSupportArg)
		{
			return default(Result);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x8F2154", Offset = "0x8F2154", VA = "0x8F2154")]
		public static Result Show(ref ControllerSupportResultInfo pOutValue, ControllerSupportArg showControllerSupportArg)
		{
			return default(Result);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x8F215C", Offset = "0x8F215C", VA = "0x8F215C")]
		public static void SetExplainText(ref ControllerSupportArg pOutControllerSupportArg, string pStr, NpadId napdId)
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x8F2160", Offset = "0x8F2160", VA = "0x8F2160")]
		public static Result Show(ControllerSupportArg showControllerSupportArg, bool suspendUnityThreads)
		{
			return default(Result);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x8F21D8", Offset = "0x8F21D8", VA = "0x8F21D8")]
		public static Result Show(ref ControllerSupportResultInfo pOutValue, ControllerSupportArg showControllerSupportArg, bool suspendUnityThreads)
		{
			return default(Result);
		}
	}
	[Token(Token = "0x2000148")]
	public static class ControllerStrapGuide
	{
		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x8F213C", Offset = "0x8F213C", VA = "0x8F213C")]
		public static Result Show()
		{
			return default(Result);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x8F2144", Offset = "0x8F2144", VA = "0x8F2144")]
		public static Result Show(bool suspendUnityThreads)
		{
			return default(Result);
		}
	}
	[Token(Token = "0x2000149")]
	public static class ControllerFirmwareUpdate
	{
		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultControllerFirmwareUpdateError;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly ErrorRange ResultControllerFirmwareUpdateFailed;

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x8F1FE4", Offset = "0x8F1FE4", VA = "0x8F1FE4")]
		public static Result Show(ControllerFirmwareUpdateArg showControllerFirmwareUpdateArg)
		{
			return default(Result);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x8F1FEC", Offset = "0x8F1FEC", VA = "0x8F1FEC")]
		public static Result Show(ControllerFirmwareUpdateArg showControllerFirmwareUpdateArg, bool suspendUnityThreads)
		{
			return default(Result);
		}
	}
	[Token(Token = "0x200014A")]
	[Flags]
	public enum DebugPadButton
	{
		[Token(Token = "0x40007BD")]
		A = 1,
		[Token(Token = "0x40007BE")]
		B = 2,
		[Token(Token = "0x40007BF")]
		X = 4,
		[Token(Token = "0x40007C0")]
		Y = 8,
		[Token(Token = "0x40007C1")]
		L = 0x10,
		[Token(Token = "0x40007C2")]
		R = 0x20,
		[Token(Token = "0x40007C3")]
		ZL = 0x40,
		[Token(Token = "0x40007C4")]
		ZR = 0x80,
		[Token(Token = "0x40007C5")]
		Start = 0x100,
		[Token(Token = "0x40007C6")]
		Select = 0x200,
		[Token(Token = "0x40007C7")]
		Left = 0x400,
		[Token(Token = "0x40007C8")]
		Up = 0x800,
		[Token(Token = "0x40007C9")]
		Right = 0x1000,
		[Token(Token = "0x40007CA")]
		Down = 0x2000
	}
	[Token(Token = "0x200014B")]
	[Flags]
	public enum DebugPadAttribute
	{
		[Token(Token = "0x40007CC")]
		IsConnected = 1
	}
	[Token(Token = "0x200014C")]
	public struct DebugPadState
	{
		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DebugPadAttribute attributes;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public DebugPadButton buttons;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnalogStickState analogStickR;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnalogStickState analogStickL;

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x2C3F44", Offset = "0x2C3F44", VA = "0x2C3F44", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200014D")]
	public static class DebugPad
	{
		[Token(Token = "0x40007D2")]
		public const int StateCountMax = 16;

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x8F2B9C", Offset = "0x8F2B9C", VA = "0x8F2B9C")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x8F2BA0", Offset = "0x8F2BA0", VA = "0x8F2BA0")]
		public static void GetState(ref DebugPadState pOutValue)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x8F2BA4", Offset = "0x8F2BA4", VA = "0x8F2BA4")]
		public static int GetStates([Out] DebugPadState[] pOutValues, int count)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200014E")]
	public enum GestureType
	{
		[Token(Token = "0x40007D4")]
		Idle,
		[Token(Token = "0x40007D5")]
		Complete,
		[Token(Token = "0x40007D6")]
		Cancel,
		[Token(Token = "0x40007D7")]
		Touch,
		[Token(Token = "0x40007D8")]
		Press,
		[Token(Token = "0x40007D9")]
		Tap,
		[Token(Token = "0x40007DA")]
		Pan,
		[Token(Token = "0x40007DB")]
		Swipe,
		[Token(Token = "0x40007DC")]
		Pinch,
		[Token(Token = "0x40007DD")]
		Rotate
	}
	[Token(Token = "0x200014F")]
	public enum GestureDirection
	{
		[Token(Token = "0x40007DF")]
		None,
		[Token(Token = "0x40007E0")]
		Left,
		[Token(Token = "0x40007E1")]
		Up,
		[Token(Token = "0x40007E2")]
		Right,
		[Token(Token = "0x40007E3")]
		Down
	}
	[Token(Token = "0x2000150")]
	[Flags]
	public enum GestureAttribute
	{
		[Token(Token = "0x40007E5")]
		IsNewTouch = 0x10,
		[Token(Token = "0x40007E6")]
		IsDoubleTap = 0x100
	}
	[Token(Token = "0x2000151")]
	public struct GesturePoint
	{
		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x2C4074", Offset = "0x2C4074", VA = "0x2C4074", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000152")]
	public struct GestureState
	{
		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long eventNumber;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long contextNumber;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int _type;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int _direction;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int x;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int y;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int deltaX;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int deltaY;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Float2 velocity;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GestureAttribute attributes;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float scale;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rotationAngle;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int pointCount;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GesturePoint[] points;

		[Token(Token = "0x170001F3")]
		public GestureType type
		{
			[Token(Token = "0x6000A71")]
			[Address(RVA = "0x2C4190", Offset = "0x2C4190", VA = "0x2C4190")]
			get
			{
				return default(GestureType);
			}
		}

		[Token(Token = "0x170001F4")]
		public GestureDirection direction
		{
			[Token(Token = "0x6000A72")]
			[Address(RVA = "0x2C4198", Offset = "0x2C4198", VA = "0x2C4198")]
			get
			{
				return default(GestureDirection);
			}
		}

		[Token(Token = "0x170001F5")]
		public bool isDoubleTap
		{
			[Token(Token = "0x6000A73")]
			[Address(RVA = "0x2C41A0", Offset = "0x2C41A0", VA = "0x2C41A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x2C4188", Offset = "0x2C4188", VA = "0x2C4188")]
		public void SetDefault()
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x2C41AC", Offset = "0x2C41AC", VA = "0x2C41AC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000153")]
	public static class Gesture
	{
		[Token(Token = "0x40007F7")]
		public const int PointCountMax = 4;

		[Token(Token = "0x40007F8")]
		public const int StateCountMax = 16;

		[PreserveSig]
		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x8F2FE0", Offset = "0x8F2FE0", VA = "0x8F2FE0")]
		public static extern void Initialize();

		[PreserveSig]
		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x8F30B8", Offset = "0x8F30B8", VA = "0x8F30B8")]
		public static extern int GetStates([Out] GestureState[] pOutValues, int count);
	}
	[Token(Token = "0x2000154")]
	[Flags]
	public enum NpadStyle
	{
		[Token(Token = "0x40007FA")]
		None = 0,
		[Token(Token = "0x40007FB")]
		FullKey = 1,
		[Token(Token = "0x40007FC")]
		Handheld = 2,
		[Token(Token = "0x40007FD")]
		JoyDual = 4,
		[Token(Token = "0x40007FE")]
		JoyLeft = 8,
		[Token(Token = "0x40007FF")]
		JoyRight = 0x10,
		[Token(Token = "0x4000800")]
		Invalid = 0x20
	}
	[Token(Token = "0x2000155")]
	public enum NpadId
	{
		[Token(Token = "0x4000802")]
		No1 = 0,
		[Token(Token = "0x4000803")]
		No2 = 1,
		[Token(Token = "0x4000804")]
		No3 = 2,
		[Token(Token = "0x4000805")]
		No4 = 3,
		[Token(Token = "0x4000806")]
		No5 = 4,
		[Token(Token = "0x4000807")]
		No6 = 5,
		[Token(Token = "0x4000808")]
		No7 = 6,
		[Token(Token = "0x4000809")]
		No8 = 7,
		[Token(Token = "0x400080A")]
		Handheld = 32,
		[Token(Token = "0x400080B")]
		Invalid = 64
	}
	[Token(Token = "0x2000156")]
	[Flags]
	public enum NpadButton : long
	{
		[Token(Token = "0x400080D")]
		A = 1L,
		[Token(Token = "0x400080E")]
		B = 2L,
		[Token(Token = "0x400080F")]
		X = 4L,
		[Token(Token = "0x4000810")]
		Y = 8L,
		[Token(Token = "0x4000811")]
		StickL = 0x10L,
		[Token(Token = "0x4000812")]
		StickR = 0x20L,
		[Token(Token = "0x4000813")]
		L = 0x40L,
		[Token(Token = "0x4000814")]
		R = 0x80L,
		[Token(Token = "0x4000815")]
		ZL = 0x100L,
		[Token(Token = "0x4000816")]
		ZR = 0x200L,
		[Token(Token = "0x4000817")]
		Plus = 0x400L,
		[Token(Token = "0x4000818")]
		Minus = 0x800L,
		[Token(Token = "0x4000819")]
		Left = 0x1000L,
		[Token(Token = "0x400081A")]
		Up = 0x2000L,
		[Token(Token = "0x400081B")]
		Right = 0x4000L,
		[Token(Token = "0x400081C")]
		Down = 0x8000L,
		[Token(Token = "0x400081D")]
		StickLLeft = 0x10000L,
		[Token(Token = "0x400081E")]
		StickLUp = 0x20000L,
		[Token(Token = "0x400081F")]
		StickLRight = 0x40000L,
		[Token(Token = "0x4000820")]
		StickLDown = 0x80000L,
		[Token(Token = "0x4000821")]
		StickRLeft = 0x100000L,
		[Token(Token = "0x4000822")]
		StickRUp = 0x200000L,
		[Token(Token = "0x4000823")]
		StickRRight = 0x400000L,
		[Token(Token = "0x4000824")]
		StickRDown = 0x800000L,
		[Token(Token = "0x4000825")]
		LeftSL = 0x1000000L,
		[Token(Token = "0x4000826")]
		LeftSR = 0x2000000L,
		[Token(Token = "0x4000827")]
		RightSL = 0x4000000L,
		[Token(Token = "0x4000828")]
		RightSR = 0x8000000L
	}
	[Token(Token = "0x2000157")]
	[Flags]
	public enum NpadAttribute
	{
		[Token(Token = "0x400082A")]
		IsConnected = 1,
		[Token(Token = "0x400082B")]
		IsWired = 2,
		[Token(Token = "0x400082C")]
		IsLeftConnected = 4,
		[Token(Token = "0x400082D")]
		IsLeftWired = 8,
		[Token(Token = "0x400082E")]
		IsRightConnected = 0x10,
		[Token(Token = "0x400082F")]
		IsRightWired = 0x20
	}
	[Token(Token = "0x2000158")]
	public struct NpadControllerColor
	{
		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Color4u8 main;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color4u8 sub;

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x2C41B4", Offset = "0x2C41B4", VA = "0x2C41B4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000159")]
	public static class Npad
	{
		[Token(Token = "0x4000832")]
		public const int StateCountMax = 16;

		[PreserveSig]
		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x8F3DE0", Offset = "0x8F3DE0", VA = "0x8F3DE0")]
		public static extern void Initialize();

		[PreserveSig]
		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x8F3EB0", Offset = "0x8F3EB0", VA = "0x8F3EB0")]
		public static extern void SetSupportedStyleSet(NpadStyle npadStyle);

		[PreserveSig]
		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x8F3FC8", Offset = "0x8F3FC8", VA = "0x8F3FC8")]
		public static extern NpadStyle GetSupportedStyleSet();

		[PreserveSig]
		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x8F40D0", Offset = "0x8F40D0", VA = "0x8F40D0")]
		public static extern void SetSupportedIdType(NpadId[] npadIds, int count);

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x8F41F8", Offset = "0x8F41F8", VA = "0x8F41F8")]
		public static void SetSupportedIdType(NpadId[] npadIds)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x8F4228", Offset = "0x8F4228", VA = "0x8F4228")]
		public static extern void BindStyleSetUpdateEvent(NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x8F4348", Offset = "0x8F4348", VA = "0x8F4348")]
		public static extern bool IsStyleSetUpdated(NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x8F4468", Offset = "0x8F4468", VA = "0x8F4468")]
		public static extern void DestroyStyleSetUpdateEvent(NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x8F4550", Offset = "0x8F4550", VA = "0x8F4550")]
		public static extern NpadStyle GetStyleSet(NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x8F4658", Offset = "0x8F4658", VA = "0x8F4658")]
		public static extern void Disconnect(NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x8F4760", Offset = "0x8F4760", VA = "0x8F4760")]
		public static extern byte GetPlayerLedPattern(NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x8F4878", Offset = "0x8F4878", VA = "0x8F4878")]
		public static extern Result GetControllerColor(ref NpadControllerColor pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x8F4960", Offset = "0x8F4960", VA = "0x8F4960")]
		public static extern Result GetControllerColor(ref NpadControllerColor pOutLeftColor, ref NpadControllerColor pOutRightColor, NpadId npadId);

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x8F4A50", Offset = "0x8F4A50", VA = "0x8F4A50")]
		public static void GetState(ref NpadState pOutValue, NpadId npadId, NpadStyle npadStyle)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x8F4F1C", Offset = "0x8F4F1C", VA = "0x8F4F1C")]
		public static int GetStates([Out] NpadStateArrayItem[] pOutValues, int count, NpadId npadId, NpadStyle npadStyle)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200015A")]
	public struct NpadState
	{
		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public NpadButton buttons;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnalogStickState analogStickL;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnalogStickState analogStickR;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NpadAttribute attributes;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NpadButton preButtons;

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x2C41E4", Offset = "0x2C41E4", VA = "0x2C41E4")]
		public bool GetButton(NpadButton button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x2C41FC", Offset = "0x2C41FC", VA = "0x2C41FC")]
		public bool GetButtonDown(NpadButton button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x2C4238", Offset = "0x2C4238", VA = "0x2C4238")]
		public bool GetButtonUp(NpadButton button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x2C4278", Offset = "0x2C4278", VA = "0x2C4278", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200015B")]
	public struct NpadStateArrayItem
	{
		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public NpadButton buttons;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnalogStickState analogStickL;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnalogStickState analogStickR;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NpadAttribute attributes;

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x2C4280", Offset = "0x2C4280", VA = "0x2C4280", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200015C")]
	public struct NpadFullKeyState
	{
		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public NpadButton buttons;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnalogStickState analogStickL;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnalogStickState analogStickR;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NpadAttribute attributes;

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x2C41BC", Offset = "0x2C41BC", VA = "0x2C41BC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200015D")]
	public static class NpadFullKey
	{
		[PreserveSig]
		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x8F5870", Offset = "0x8F5870", VA = "0x8F5870")]
		public static extern void GetState(ref NpadFullKeyState pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x8F4AE8", Offset = "0x8F4AE8", VA = "0x8F4AE8")]
		public static extern void GetState(ref NpadState pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x8F5948", Offset = "0x8F5948", VA = "0x8F5948")]
		public static extern int GetStates([Out] NpadFullKeyState[] pOutValues, int count, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x8F4F98", Offset = "0x8F4F98", VA = "0x8F4F98")]
		public static extern int GetStates([Out] NpadStateArrayItem[] pOutValues, int count, NpadId npadId);
	}
	[Token(Token = "0x200015E")]
	public struct NpadHandheldState
	{
		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public NpadButton buttons;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnalogStickState analogStickL;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnalogStickState analogStickR;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NpadAttribute attributes;

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x2C41C4", Offset = "0x2C41C4", VA = "0x2C41C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200015F")]
	public static class NpadHandheld
	{
		[PreserveSig]
		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x8F5E00", Offset = "0x8F5E00", VA = "0x8F5E00")]
		public static extern void GetState(ref NpadHandheldState pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x8F4BC0", Offset = "0x8F4BC0", VA = "0x8F4BC0")]
		public static extern void GetState(ref NpadState pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x8F5ED8", Offset = "0x8F5ED8", VA = "0x8F5ED8")]
		public static extern int GetStates([Out] NpadHandheldState[] pOutValues, int count, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x8F5130", Offset = "0x8F5130", VA = "0x8F5130")]
		public static extern int GetStates([Out] NpadStateArrayItem[] pOutValues, int count, NpadId npadId);
	}
	[Token(Token = "0x2000160")]
	public enum NpadJoyAssignmentMode
	{
		[Token(Token = "0x4000849")]
		Dual,
		[Token(Token = "0x400084A")]
		Single
	}
	[Token(Token = "0x2000161")]
	public enum NpadHandheldActivationMode
	{
		[Token(Token = "0x400084C")]
		Dual,
		[Token(Token = "0x400084D")]
		Single,
		[Token(Token = "0x400084E")]
		None
	}
	[Token(Token = "0x2000162")]
	public enum NpadJoyDeviceType
	{
		[Token(Token = "0x4000850")]
		Left,
		[Token(Token = "0x4000851")]
		Right
	}
	[Token(Token = "0x2000163")]
	public enum NpadJoyHoldType
	{
		[Token(Token = "0x4000853")]
		Vertical,
		[Token(Token = "0x4000854")]
		Horizontal
	}
	[Token(Token = "0x2000164")]
	public enum NpadCommunicationMode
	{
		[Token(Token = "0x4000856")]
		Mode5ms,
		[Token(Token = "0x4000857")]
		Mode10ms,
		[Token(Token = "0x4000858")]
		Mode15ms,
		[Token(Token = "0x4000859")]
		ModeDefault
	}
	[Token(Token = "0x2000165")]
	public static class NpadJoy
	{
		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultDualConnected;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly ErrorRange ResultSameJoyTypeConnected;

		[PreserveSig]
		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x8F6390", Offset = "0x8F6390", VA = "0x8F6390")]
		public static extern NpadJoyAssignmentMode GetAssignment(NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x8F64A0", Offset = "0x8F64A0", VA = "0x8F64A0")]
		public static extern void SetAssignmentModeSingle(NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x8F6588", Offset = "0x8F6588", VA = "0x8F6588")]
		public static extern void SetAssignmentModeSingle(NpadId npadId, NpadJoyDeviceType deviceType);

		[PreserveSig]
		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x8F6678", Offset = "0x8F6678", VA = "0x8F6678")]
		public static extern void SetAssignmentModeDual(NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x8F6798", Offset = "0x8F6798", VA = "0x8F6798")]
		public static extern Result MergeSingleAsDual(NpadId npadId1, NpadId npadId2);

		[PreserveSig]
		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x8F68B8", Offset = "0x8F68B8", VA = "0x8F68B8")]
		public static extern void SwapAssignment(NpadId npadId1, NpadId npadId2);

		[PreserveSig]
		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x8F69D0", Offset = "0x8F69D0", VA = "0x8F69D0")]
		public static extern void SetHoldType(NpadJoyHoldType holdType);

		[PreserveSig]
		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x8F6AE0", Offset = "0x8F6AE0", VA = "0x8F6AE0")]
		public static extern NpadJoyHoldType GetHoldType();

		[PreserveSig]
		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x8F6BE0", Offset = "0x8F6BE0", VA = "0x8F6BE0")]
		public static extern void StartLrAssignmentMode();

		[PreserveSig]
		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x8F6CE8", Offset = "0x8F6CE8", VA = "0x8F6CE8")]
		public static extern void StopLrAssignmentMode();

		[PreserveSig]
		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x8F6DF0", Offset = "0x8F6DF0", VA = "0x8F6DF0")]
		public static extern void SetHandheldActivationMode(NpadHandheldActivationMode activationMode);

		[PreserveSig]
		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x8F6F18", Offset = "0x8F6F18", VA = "0x8F6F18")]
		public static extern NpadHandheldActivationMode GetHandheldActivationMode();

		[PreserveSig]
		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x8F7030", Offset = "0x8F7030", VA = "0x8F7030")]
		public static extern void SetCommunicationMode(NpadCommunicationMode mode);

		[PreserveSig]
		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x8F7148", Offset = "0x8F7148", VA = "0x8F7148")]
		public static extern NpadCommunicationMode GetCommunicationMode();
	}
	[Token(Token = "0x2000166")]
	public struct NpadJoyDualState
	{
		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public NpadButton buttons;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnalogStickState analogStickL;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnalogStickState analogStickR;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NpadAttribute attributes;

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x2C41CC", Offset = "0x2C41CC", VA = "0x2C41CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000167")]
	public static class NpadJoyDual
	{
		[PreserveSig]
		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x8F7318", Offset = "0x8F7318", VA = "0x8F7318")]
		public static extern void GetState(ref NpadJoyDualState pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x8F4C98", Offset = "0x8F4C98", VA = "0x8F4C98")]
		public static extern void GetState(ref NpadState pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x8F73F0", Offset = "0x8F73F0", VA = "0x8F73F0")]
		public static extern int GetStates([Out] NpadJoyDualState[] pOutValues, int count, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x8F52C8", Offset = "0x8F52C8", VA = "0x8F52C8")]
		public static extern int GetStates([Out] NpadStateArrayItem[] pOutValues, int count, NpadId npadId);
	}
	[Token(Token = "0x2000168")]
	public struct NpadJoyLeftState
	{
		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public NpadButton buttons;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnalogStickState analogStickL;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnalogStickState analogStickR;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NpadAttribute attributes;

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x2C41D4", Offset = "0x2C41D4", VA = "0x2C41D4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000169")]
	public static class NpadJoyLeft
	{
		[PreserveSig]
		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x8F78A8", Offset = "0x8F78A8", VA = "0x8F78A8")]
		public static extern void GetState(ref NpadJoyLeftState pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x8F4D70", Offset = "0x8F4D70", VA = "0x8F4D70")]
		public static extern void GetState(ref NpadState pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x8F7980", Offset = "0x8F7980", VA = "0x8F7980")]
		public static extern int GetStates([Out] NpadJoyLeftState[] pOutValues, int count, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x8F5460", Offset = "0x8F5460", VA = "0x8F5460")]
		public static extern int GetStates([Out] NpadStateArrayItem[] pOutValues, int count, NpadId npadId);
	}
	[Token(Token = "0x200016A")]
	public struct NpadJoyRightState
	{
		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public NpadButton buttons;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnalogStickState analogStickL;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnalogStickState analogStickR;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NpadAttribute attributes;

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x2C41DC", Offset = "0x2C41DC", VA = "0x2C41DC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200016B")]
	public static class NpadJoyRight
	{
		[PreserveSig]
		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x8F7E38", Offset = "0x8F7E38", VA = "0x8F7E38")]
		public static extern void GetState(ref NpadJoyRightState pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x8F4E48", Offset = "0x8F4E48", VA = "0x8F4E48")]
		public static extern void GetState(ref NpadState pOutValue, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x8F7F10", Offset = "0x8F7F10", VA = "0x8F7F10")]
		public static extern int GetStates([Out] NpadJoyRightState[] pOutValues, int count, NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x8F55F8", Offset = "0x8F55F8", VA = "0x8F55F8")]
		public static extern int GetStates([Out] NpadStateArrayItem[] pOutValues, int count, NpadId npadId);
	}
	[Token(Token = "0x200016C")]
	public static class Napd
	{
		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultColorNotAvailable;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly ErrorRange ResultControllerNotConnected;
	}
	[Token(Token = "0x200016D")]
	public static class VibrationFile
	{
		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultInvalid;

		[PreserveSig]
		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x8FE230", Offset = "0x8FE230", VA = "0x8FE230")]
		public static extern Result Parse(ref VibrationFileInfo pOutInfo, ref VibrationFileParserContext pOutContext, byte[] address, int fileSize);

		[PreserveSig]
		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x8FE3A8", Offset = "0x8FE3A8", VA = "0x8FE3A8")]
		public static extern void RetrieveValue(ref VibrationValue pOutValue, int position, ref VibrationFileParserContext pContext);
	}
	[Token(Token = "0x200016E")]
	public struct SixAxisSensorHandle
	{
		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int _storage;
	}
	[Token(Token = "0x200016F")]
	public struct DirectionState
	{
		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Float3 x;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Float3 y;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Float3 z;

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x2C3F4C", Offset = "0x2C3F4C", VA = "0x2C3F4C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000170")]
	[Flags]
	public enum SixAxisSensorAttribute
	{
		[Token(Token = "0x4000873")]
		IsConnected = 1,
		[Token(Token = "0x4000874")]
		IsInterpolated = 2
	}
	[Token(Token = "0x2000171")]
	public struct SixAxisSensorState
	{
		[Token(Token = "0x4000875")]
		public const float AccelerometerMax = 7f;

		[Token(Token = "0x4000876")]
		public const float AngularVelocityMax = 5f;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long deltaTimeNanoSeconds;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long samplingNumber;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Float3 acceleration;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Float3 angularVelocity;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Float3 angle;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public DirectionState direction;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SixAxisSensorAttribute attributes;

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x2C4288", Offset = "0x2C4288", VA = "0x2C4288", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x2C4290", Offset = "0x2C4290", VA = "0x2C4290")]
		public void GetQuaternion(ref float x, ref float y, ref float z, ref float w)
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x2C42B4", Offset = "0x2C42B4", VA = "0x2C42B4")]
		public void GetQuaternion(ref Float4 quaternion)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x8F9DA0", Offset = "0x8F9DA0", VA = "0x8F9DA0")]
		private static extern void GetQuaternionImpl(ref SixAxisSensorState state, ref float pOutX, ref float pOutY, ref float pOutZ, ref float pOutW);
	}
	[Token(Token = "0x2000172")]
	public enum GyroscopeZeroDriftMode
	{
		[Token(Token = "0x400087F")]
		Loose,
		[Token(Token = "0x4000880")]
		Standard,
		[Token(Token = "0x4000881")]
		Tight
	}
	[Token(Token = "0x2000173")]
	public static class SixAxisSensor
	{
		[Token(Token = "0x4000882")]
		public const int StateCountMax = 16;

		[Token(Token = "0x4000883")]
		public const int HandleCountMax = 8;

		[PreserveSig]
		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x8F8AA0", Offset = "0x8F8AA0", VA = "0x8F8AA0")]
		public static extern int GetHandles(SixAxisSensorHandle[] pOutValues, int count, NpadId npadId, NpadStyle npadStyle);

		[PreserveSig]
		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x8F8BD0", Offset = "0x8F8BD0", VA = "0x8F8BD0")]
		public static extern void Start(SixAxisSensorHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x8F8CD8", Offset = "0x8F8CD8", VA = "0x8F8CD8")]
		public static extern void Stop(SixAxisSensorHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x8F8DB8", Offset = "0x8F8DB8", VA = "0x8F8DB8")]
		public static extern bool IsRest(SixAxisSensorHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x8F8ED0", Offset = "0x8F8ED0", VA = "0x8F8ED0")]
		public static extern void GetState(ref SixAxisSensorState pOutValue, SixAxisSensorHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x8F8FB8", Offset = "0x8F8FB8", VA = "0x8F8FB8")]
		public static extern int GetStates([Out] SixAxisSensorState[] pOutValues, int count, SixAxisSensorHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x8F9150", Offset = "0x8F9150", VA = "0x8F9150")]
		public static extern bool IsFusionEnabled(SixAxisSensorHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x8F9270", Offset = "0x8F9270", VA = "0x8F9270")]
		public static extern void EnableFusion(SixAxisSensorHandle handle, bool enable);

		[PreserveSig]
		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x8F9390", Offset = "0x8F9390", VA = "0x8F9390")]
		public static extern void SetFusionParameters(SixAxisSensorHandle handle, float revisePower, float reviseRange);

		[PreserveSig]
		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x8F94C0", Offset = "0x8F94C0", VA = "0x8F94C0")]
		public static extern void GetFusionParameters(ref float pOutRevisePower, ref float pOutReviseRange, SixAxisSensorHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x8F95F0", Offset = "0x8F95F0", VA = "0x8F95F0")]
		public static extern void ResetFusionParameters(SixAxisSensorHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x8F9718", Offset = "0x8F9718", VA = "0x8F9718")]
		public static extern void SetGyroscopeZeroDriftMode(SixAxisSensorHandle handle, GyroscopeZeroDriftMode mode);

		[PreserveSig]
		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x8F9840", Offset = "0x8F9840", VA = "0x8F9840")]
		public static extern GyroscopeZeroDriftMode GetGyroscopeZeroDriftMode(SixAxisSensorHandle handle);
	}
	[Token(Token = "0x2000174")]
	[Flags]
	public enum TouchAttribute
	{
		[Token(Token = "0x4000885")]
		Start = 1,
		[Token(Token = "0x4000886")]
		End = 2
	}
	[Token(Token = "0x2000175")]
	public struct TouchState
	{
		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long deltaTimeNanoSeconds;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TouchAttribute attributes;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int fingerId;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int x;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int y;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int diameterX;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int diameterY;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int rotationAngle;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _reserved;

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x2C5A4C", Offset = "0x2C5A4C", VA = "0x2C5A4C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000176")]
	public struct TouchScreenState1
	{
		[Token(Token = "0x4000890")]
		public const int TouchCount = 1;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x2C59CC", Offset = "0x2C59CC", VA = "0x2C59CC")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000177")]
	public struct TouchScreenState2
	{
		[Token(Token = "0x4000895")]
		public const int TouchCount = 2;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x2C5A0C", Offset = "0x2C5A0C", VA = "0x2C5A0C")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000178")]
	public struct TouchScreenState3
	{
		[Token(Token = "0x400089A")]
		public const int TouchCount = 3;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x2C5A14", Offset = "0x2C5A14", VA = "0x2C5A14")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000179")]
	public struct TouchScreenState4
	{
		[Token(Token = "0x400089F")]
		public const int TouchCount = 4;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x2C5A1C", Offset = "0x2C5A1C", VA = "0x2C5A1C")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x200017A")]
	public struct TouchScreenState5
	{
		[Token(Token = "0x40008A4")]
		public const int TouchCount = 5;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x2C5A24", Offset = "0x2C5A24", VA = "0x2C5A24")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x200017B")]
	public struct TouchScreenState6
	{
		[Token(Token = "0x40008A9")]
		public const int TouchCount = 6;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x2C5A2C", Offset = "0x2C5A2C", VA = "0x2C5A2C")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x200017C")]
	public struct TouchScreenState7
	{
		[Token(Token = "0x40008AE")]
		public const int TouchCount = 7;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x2C5A34", Offset = "0x2C5A34", VA = "0x2C5A34")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x200017D")]
	public struct TouchScreenState8
	{
		[Token(Token = "0x40008B3")]
		public const int TouchCount = 8;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x2C5A3C", Offset = "0x2C5A3C", VA = "0x2C5A3C")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x200017E")]
	public struct TouchScreenState9
	{
		[Token(Token = "0x40008B8")]
		public const int TouchCount = 9;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x2C5A44", Offset = "0x2C5A44", VA = "0x2C5A44")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x200017F")]
	public struct TouchScreenState10
	{
		[Token(Token = "0x40008BD")]
		public const int TouchCount = 10;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x2C59D4", Offset = "0x2C59D4", VA = "0x2C59D4")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000180")]
	public struct TouchScreenState11
	{
		[Token(Token = "0x40008C2")]
		public const int TouchCount = 11;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x2C59DC", Offset = "0x2C59DC", VA = "0x2C59DC")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public struct TouchScreenState12
	{
		[Token(Token = "0x40008C7")]
		public const int TouchCount = 12;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x2C59E4", Offset = "0x2C59E4", VA = "0x2C59E4")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public struct TouchScreenState13
	{
		[Token(Token = "0x40008CC")]
		public const int TouchCount = 13;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x2C59EC", Offset = "0x2C59EC", VA = "0x2C59EC")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000183")]
	public struct TouchScreenState14
	{
		[Token(Token = "0x40008D1")]
		public const int TouchCount = 14;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x2C59F4", Offset = "0x2C59F4", VA = "0x2C59F4")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000184")]
	public struct TouchScreenState15
	{
		[Token(Token = "0x40008D6")]
		public const int TouchCount = 15;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x2C59FC", Offset = "0x2C59FC", VA = "0x2C59FC")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000185")]
	public struct TouchScreenState16
	{
		[Token(Token = "0x40008DB")]
		public const int TouchCount = 16;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int count;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _reserved;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TouchState[] touches;

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x2C5A04", Offset = "0x2C5A04", VA = "0x2C5A04")]
		public void SetDefault()
		{
		}
	}
	[Token(Token = "0x2000186")]
	public static class TouchScreen
	{
		[Token(Token = "0x40008E0")]
		public const int TouchCountMax = 16;

		[Token(Token = "0x40008E1")]
		public const int StateCountMax = 16;

		[PreserveSig]
		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x8F9F08", Offset = "0x8F9F08", VA = "0x8F9F08")]
		public static extern void Initialize();

		[PreserveSig]
		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x8F9FE0", Offset = "0x8F9FE0", VA = "0x8F9FE0")]
		public static extern void GetState(ref TouchScreenState1 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x8FA130", Offset = "0x8FA130", VA = "0x8FA130")]
		public static extern void GetState(ref TouchScreenState2 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x8FA268", Offset = "0x8FA268", VA = "0x8FA268")]
		public static extern void GetState(ref TouchScreenState3 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x8FA3A0", Offset = "0x8FA3A0", VA = "0x8FA3A0")]
		public static extern void GetState(ref TouchScreenState4 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x8FA4D8", Offset = "0x8FA4D8", VA = "0x8FA4D8")]
		public static extern void GetState(ref TouchScreenState5 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x8FA610", Offset = "0x8FA610", VA = "0x8FA610")]
		public static extern void GetState(ref TouchScreenState6 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x8FA748", Offset = "0x8FA748", VA = "0x8FA748")]
		public static extern void GetState(ref TouchScreenState7 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x8FA880", Offset = "0x8FA880", VA = "0x8FA880")]
		public static extern void GetState(ref TouchScreenState8 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x8FA9B8", Offset = "0x8FA9B8", VA = "0x8FA9B8")]
		public static extern void GetState(ref TouchScreenState9 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x8FAAF0", Offset = "0x8FAAF0", VA = "0x8FAAF0")]
		public static extern void GetState(ref TouchScreenState10 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x8FAC30", Offset = "0x8FAC30", VA = "0x8FAC30")]
		public static extern void GetState(ref TouchScreenState11 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x8FAD70", Offset = "0x8FAD70", VA = "0x8FAD70")]
		public static extern void GetState(ref TouchScreenState12 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x8FAEB0", Offset = "0x8FAEB0", VA = "0x8FAEB0")]
		public static extern void GetState(ref TouchScreenState13 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x8FAFF0", Offset = "0x8FAFF0", VA = "0x8FAFF0")]
		public static extern void GetState(ref TouchScreenState14 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x8FB130", Offset = "0x8FB130", VA = "0x8FB130")]
		public static extern void GetState(ref TouchScreenState15 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x8FB270", Offset = "0x8FB270", VA = "0x8FB270")]
		public static extern void GetState(ref TouchScreenState16 pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x8FB3B0", Offset = "0x8FB3B0", VA = "0x8FB3B0")]
		public static extern int GetStates([Out] TouchScreenState1[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x8FB570", Offset = "0x8FB570", VA = "0x8FB570")]
		public static extern int GetStates([Out] TouchScreenState2[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x8FB730", Offset = "0x8FB730", VA = "0x8FB730")]
		public static extern int GetStates([Out] TouchScreenState3[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x8FB8F0", Offset = "0x8FB8F0", VA = "0x8FB8F0")]
		public static extern int GetStates([Out] TouchScreenState4[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x8FBAB0", Offset = "0x8FBAB0", VA = "0x8FBAB0")]
		public static extern int GetStates([Out] TouchScreenState5[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x8FBC70", Offset = "0x8FBC70", VA = "0x8FBC70")]
		public static extern int GetStates([Out] TouchScreenState6[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x8FBE28", Offset = "0x8FBE28", VA = "0x8FBE28")]
		public static extern int GetStates([Out] TouchScreenState7[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x8FBFE8", Offset = "0x8FBFE8", VA = "0x8FBFE8")]
		public static extern int GetStates([Out] TouchScreenState8[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x8FC1A8", Offset = "0x8FC1A8", VA = "0x8FC1A8")]
		public static extern int GetStates([Out] TouchScreenState9[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x8FC368", Offset = "0x8FC368", VA = "0x8FC368")]
		public static extern int GetStates([Out] TouchScreenState10[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x8FC528", Offset = "0x8FC528", VA = "0x8FC528")]
		public static extern int GetStates([Out] TouchScreenState11[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x8FC6E8", Offset = "0x8FC6E8", VA = "0x8FC6E8")]
		public static extern int GetStates([Out] TouchScreenState12[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x8FC8A8", Offset = "0x8FC8A8", VA = "0x8FC8A8")]
		public static extern int GetStates([Out] TouchScreenState13[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x8FCA68", Offset = "0x8FCA68", VA = "0x8FCA68")]
		public static extern int GetStates([Out] TouchScreenState14[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x8FCC28", Offset = "0x8FCC28", VA = "0x8FCC28")]
		public static extern int GetStates([Out] TouchScreenState15[] pOutValues, int count);

		[PreserveSig]
		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x8FCDE8", Offset = "0x8FCDE8", VA = "0x8FCDE8")]
		public static extern int GetStates([Out] TouchScreenState16[] pOutValues, int count);
	}
	[Token(Token = "0x2000187")]
	public struct VibrationDeviceHandle
	{
		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint _storage;
	}
	[Token(Token = "0x2000188")]
	public enum VibrationDeviceType
	{
		[Token(Token = "0x40008E4")]
		Unknown,
		[Token(Token = "0x40008E5")]
		LinearResonantActuator
	}
	[Token(Token = "0x2000189")]
	public enum VibrationDevicePosition
	{
		[Token(Token = "0x40008E7")]
		None,
		[Token(Token = "0x40008E8")]
		Left,
		[Token(Token = "0x40008E9")]
		Right
	}
	[Token(Token = "0x200018A")]
	public struct VibrationDeviceInfo
	{
		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VibrationDeviceType deviceType;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public VibrationDevicePosition position;

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x2C5A54", Offset = "0x2C5A54", VA = "0x2C5A54", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200018B")]
	public static class Vibration
	{
		[PreserveSig]
		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x8FDA90", Offset = "0x8FDA90", VA = "0x8FDA90")]
		public static extern int GetDeviceHandles(VibrationDeviceHandle[] pOutValues, int count, NpadId npadId, NpadStyle npadStyle);

		[PreserveSig]
		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x8FDBC8", Offset = "0x8FDBC8", VA = "0x8FDBC8")]
		public static extern void GetDeviceInfo(ref VibrationDeviceInfo pOutValue, VibrationDeviceHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x8FDCE0", Offset = "0x8FDCE0", VA = "0x8FDCE0")]
		public static extern void InitializeDevice(VibrationDeviceHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x8FDDF8", Offset = "0x8FDDF8", VA = "0x8FDDF8")]
		public static extern void SendValue(VibrationDeviceHandle handle, VibrationValue value);

		[PreserveSig]
		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x8FDF20", Offset = "0x8FDF20", VA = "0x8FDF20")]
		public static extern void GetActualValue(ref VibrationValue pOutValue, VibrationDeviceHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x8FE040", Offset = "0x8FE040", VA = "0x8FE040")]
		public static extern bool IsPermitted();
	}
	[Token(Token = "0x200018C")]
	public struct VibrationFileInfo
	{
		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint metaDataSize;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ushort formatId;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public ushort samplingRate;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint dataSize;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int sampleLength;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int isLoop;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint loopStartPosition;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint loopEndPosition;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint loopInterval;

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x2C5B70", Offset = "0x2C5B70", VA = "0x2C5B70", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200018D")]
	public struct VibrationFileParserContext
	{
		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr[] _storage;
	}
	[Token(Token = "0x200018E")]
	public struct VibrationValue
	{
		[Token(Token = "0x40008F6")]
		public const int FrequencyLowDefault = 160;

		[Token(Token = "0x40008F7")]
		public const int FrequencyHighDefault = 320;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float amplitudeLow;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float frequencyLow;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float amplitudeHigh;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float frequencyHigh;

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x2C5B78", Offset = "0x2C5B78", VA = "0x2C5B78")]
		public VibrationValue(float amplitudeLow, float frequencyLow, float amplitudeHigh, float frequencyHigh)
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x8FEA98", Offset = "0x8FEA98", VA = "0x8FEA98")]
		public static VibrationValue Make()
		{
			return default(VibrationValue);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x8FEAB8", Offset = "0x8FEAB8", VA = "0x8FEAB8")]
		public static VibrationValue Make(float amplitudeLow, float frequencyLow, float amplitudeHigh, float frequencyHigh)
		{
			return default(VibrationValue);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x2C5B8C", Offset = "0x2C5B8C", VA = "0x2C5B8C")]
		public void Set(float amplitudeLow, float frequencyLow, float amplitudeHigh, float frequencyHigh)
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x2C5BA0", Offset = "0x2C5BA0", VA = "0x2C5BA0")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x2C5BC8", Offset = "0x2C5BC8", VA = "0x2C5BC8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace nn.irsensor
{
	[Token(Token = "0x200018F")]
	public static class ClusteringProcessor
	{
		[Token(Token = "0x40008FC")]
		public const int StateCountMax = 5;

		[Token(Token = "0x40008FD")]
		public const int ObjectCountMax = 16;

		[Token(Token = "0x40008FE")]
		public const int ObjectPixelCountMax = 76800;

		[Token(Token = "0x40008FF")]
		public const int OutObjectPixelCountMax = 65535;

		[Token(Token = "0x4000900")]
		public const long ExposureTimeMinNanoSeconds = 7000L;

		[Token(Token = "0x4000901")]
		public const long ExposureTimeMaxNanoSeconds = 600000L;

		[PreserveSig]
		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x8FF370", Offset = "0x8FF370", VA = "0x8FF370")]
		public static extern void GetDefaultConfig(ref ClusteringProcessorConfig pOutValue);

		[PreserveSig]
		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x8FF498", Offset = "0x8FF498", VA = "0x8FF498")]
		public static extern void Run(IrCameraHandle handle, ClusteringProcessorConfig config);

		[PreserveSig]
		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x8FF5F8", Offset = "0x8FF5F8", VA = "0x8FF5F8")]
		public static extern Result GetState(ref ClusteringProcessorState pOutValue, IrCameraHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x8FF748", Offset = "0x8FF748", VA = "0x8FF748")]
		public static extern Result GetStates([Out] ClusteringProcessorState[] pOutStates, ref int pOutCount, int countMax, IrCameraHandle handle);
	}
	[Token(Token = "0x2000190")]
	public struct ClusteringProcessorConfig
	{
		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IrCameraConfig irCameraConfig;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rect windowOfInterest;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int objectPixelCountMin;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int objectPixelCountMax;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int objectIntensityMin;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isExternalLightFilterEnabled;

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x2C5DA0", Offset = "0x2C5DA0", VA = "0x2C5DA0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000191")]
	public struct ClusteringData
	{
		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float averageIntensity;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Float2 centroid;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int pixelCount;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rect bound;

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x2C5BD0", Offset = "0x2C5BD0", VA = "0x2C5BD0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000192")]
	public struct ClusteringProcessorState
	{
		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long samplingNumber;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long timeStampNanoSeconds;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public sbyte objectCount;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public byte _reserved0;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public byte _reserved1;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public byte _reserved2;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IrCameraAmbientNoiseLevel ambientNoiseLevel;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ClusteringData[] objects;

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x2C5DA8", Offset = "0x2C5DA8", VA = "0x2C5DA8")]
		public void SetDefault()
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x2C5DB0", Offset = "0x2C5DB0", VA = "0x2C5DB0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000193")]
	public static class ImageProcessor
	{
		[PreserveSig]
		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x900358", Offset = "0x900358", VA = "0x900358")]
		public static extern void Stop(IrCameraHandle handle);
	}
	[Token(Token = "0x2000194")]
	public static class IrCamera
	{
		[Token(Token = "0x4000914")]
		public const int IntensityMax = 255;

		[Token(Token = "0x4000915")]
		public const int ImageWidth = 320;

		[Token(Token = "0x4000916")]
		public const int ImageHeight = 240;

		[Token(Token = "0x4000917")]
		public const int GainMin = 1;

		[Token(Token = "0x4000918")]
		public const int GainMax = 16;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ErrorRange ResultIrsensorUnavailable;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly ErrorRange ResultIrsensorUnconnected;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly ErrorRange ResultIrsensorUnsupported;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly ErrorRange ResultIrsensorNotReady;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly ErrorRange ResultIrsensorDeviceError;

		[PreserveSig]
		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x900438", Offset = "0x900438", VA = "0x900438")]
		public static extern IrCameraHandle GetHandle(NpadId npadId);

		[PreserveSig]
		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x900548", Offset = "0x900548", VA = "0x900548")]
		public static extern void Initialize(IrCameraHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x900620", Offset = "0x900620", VA = "0x900620")]
		public static extern void Finalize(IrCameraHandle handle);

		[PreserveSig]
		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x900728", Offset = "0x900728", VA = "0x900728")]
		public static extern IrCameraStatus GetStatus(IrCameraHandle handle);
	}
	[Token(Token = "0x2000195")]
	public struct Rect
	{
		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short x;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public short y;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public short width;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public short height;

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x2C5DC0", Offset = "0x2C5DC0", VA = "0x2C5DC0")]
		public Rect(short x, short y, short width, short height)
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x2C5DD8", Offset = "0x2C5DD8", VA = "0x2C5DD8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000196")]
	public struct IrCameraHandle
	{
		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint _handle;
	}
	[Token(Token = "0x2000197")]
	public enum IrCameraStatus
	{
		[Token(Token = "0x4000924")]
		Available,
		[Token(Token = "0x4000925")]
		Unsupported,
		[Token(Token = "0x4000926")]
		Unconnected
	}
	[Token(Token = "0x2000198")]
	public enum IrCameraAmbientNoiseLevel
	{
		[Token(Token = "0x4000928")]
		Low,
		[Token(Token = "0x4000929")]
		Middle,
		[Token(Token = "0x400092A")]
		High,
		[Token(Token = "0x400092B")]
		Unknown
	}
	[Token(Token = "0x2000199")]
	public enum IrCameraLightTarget
	{
		[Token(Token = "0x400092D")]
		AllObjects,
		[Token(Token = "0x400092E")]
		FarObjects,
		[Token(Token = "0x400092F")]
		NearObjects,
		[Token(Token = "0x4000930")]
		None
	}
	[Token(Token = "0x200019A")]
	public struct IrCameraConfig
	{
		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long exposureTimeNanoSeconds;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IrCameraLightTarget lightTarget;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int gain;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isNegativeImageUsed;

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x2C5DB8", Offset = "0x2C5DB8", VA = "0x2C5DB8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace nn
{
	[Token(Token = "0x200019B")]
	public static class Nn
	{
		[Token(Token = "0x4000935")]
		internal const string DllName = "NintendoSDKPlugin";

		[Token(Token = "0x6000B1B")]
		internal static bool OperatorEquals<T>(T lhs, T rhs)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x8ED888", Offset = "0x8ED888", VA = "0x8ED888")]
		public static extern void Abort(string message);

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x8ED998", Offset = "0x8ED998", VA = "0x8ED998")]
		public static void Abort(string message, params object[] args)
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x8EDA28", Offset = "0x8EDA28", VA = "0x8EDA28")]
		public static void Abort(bool condition, string message)
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x8EDA38", Offset = "0x8EDA38", VA = "0x8EDA38")]
		public static void Abort(bool condition, string message, params object[] args)
		{
		}
	}
	[Token(Token = "0x200019C")]
	public struct Result
	{
		[Token(Token = "0x4000936")]
		public const int ModuleBitsOffset = 0;

		[Token(Token = "0x4000937")]
		public const int ModuleBitsCount = 9;

		[Token(Token = "0x4000938")]
		public const int ModuleBitsMask = 511;

		[Token(Token = "0x4000939")]
		public const int DescriptionBitsOffset = 9;

		[Token(Token = "0x400093A")]
		public const int DescriptionBitsCount = 13;

		[Token(Token = "0x400093B")]
		public const int DescriptionBitsMask = 8191;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint innerValue;

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x2C38E8", Offset = "0x2C38E8", VA = "0x2C38E8")]
		public Result(int module, int description)
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x2C38F4", Offset = "0x2C38F4", VA = "0x2C38F4")]
		public bool IsSuccess()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x2C3908", Offset = "0x2C3908", VA = "0x2C3908")]
		public void abortUnlessSuccess()
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x2C3910", Offset = "0x2C3910", VA = "0x2C3910")]
		public int GetModule()
		{
			return default(int);
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x2C391C", Offset = "0x2C391C", VA = "0x2C391C")]
		public int GetDescription()
		{
			return default(int);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x2C3928", Offset = "0x2C3928", VA = "0x2C3928", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x2C3930", Offset = "0x2C3930", VA = "0x2C3930", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x2C3938", Offset = "0x2C3938", VA = "0x2C3938", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x8EDD54", Offset = "0x8EDD54", VA = "0x8EDD54")]
		public static bool operator ==(Result lhs, Result rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x8EDDC0", Offset = "0x8EDDC0", VA = "0x8EDDC0")]
		public static bool operator !=(Result lhs, Result rhs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200019D")]
	public class ErrorRange
	{
		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int _module;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _descriptionBegin;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _descriptionEnd;

		[Token(Token = "0x170001F6")]
		public int Module
		{
			[Token(Token = "0x6000B2B")]
			[Address(RVA = "0x8ED814", Offset = "0x8ED814", VA = "0x8ED814")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F7")]
		public int DescriptionBegin
		{
			[Token(Token = "0x6000B2C")]
			[Address(RVA = "0x8ED81C", Offset = "0x8ED81C", VA = "0x8ED81C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F8")]
		public int DescriptionEnd
		{
			[Token(Token = "0x6000B2D")]
			[Address(RVA = "0x8ED824", Offset = "0x8ED824", VA = "0x8ED824")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x8ED7E4", Offset = "0x8ED7E4", VA = "0x8ED7E4")]
		internal ErrorRange(int Module, int DescriptionBegin, int DescriptionEnd)
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x8ED82C", Offset = "0x8ED82C", VA = "0x8ED82C")]
		public bool Includes(Result result)
		{
			return default(bool);
		}
	}
}
namespace nn.oe
{
	[Token(Token = "0x200019E")]
	public static class Language
	{
		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x9009B0", Offset = "0x9009B0", VA = "0x9009B0")]
		public static string GetDesired()
		{
			return null;
		}
	}
}
namespace nn.util
{
	[Token(Token = "0x200019F")]
	public struct Color4u8
	{
		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte r;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte g;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte b;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte a;

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x2C5DE0", Offset = "0x2C5DE0", VA = "0x2C5DE0")]
		public void Set(byte r, byte g, byte b, byte a)
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x2C5DF8", Offset = "0x2C5DF8", VA = "0x2C5DF8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001A0")]
	public struct Float2
	{
		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x2C5E00", Offset = "0x2C5E00", VA = "0x2C5E00")]
		public Float2(float x, float y)
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x2C5E0C", Offset = "0x2C5E0C", VA = "0x2C5E0C")]
		public void Set(float x, float y)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x2C5E18", Offset = "0x2C5E18", VA = "0x2C5E18", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001A1")]
	public struct Float3
	{
		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x2C5E20", Offset = "0x2C5E20", VA = "0x2C5E20")]
		public Float3(float x, float y, float z)
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x2C5E2C", Offset = "0x2C5E2C", VA = "0x2C5E2C")]
		public void Set(float x, float y, float z)
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x2C5E38", Offset = "0x2C5E38", VA = "0x2C5E38", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001A2")]
	public struct Float4
	{
		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x2C5E40", Offset = "0x2C5E40", VA = "0x2C5E40")]
		public Float4(float x, float y, float z, float w)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x2C5E54", Offset = "0x2C5E54", VA = "0x2C5E54")]
		public void Set(float x, float y, float z, float w)
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x2C5E68", Offset = "0x2C5E68", VA = "0x2C5E68", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace BlockEngine.AI
{
	[Token(Token = "0x20001A3")]
	public class AIWorkerThread
	{
		[Token(Token = "0x20001A4")]
		public delegate void AdditionalWorkFunc(bool searchCountIsZero);

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public List<Exception> exceptions;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int steps;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Thread mThread;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool mRunning;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object lockObj;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private List<AStarSearch> searches;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdditionalWorkFunc addWorkCallback;

		[Token(Token = "0x170001F9")]
		public bool Running
		{
			[Token(Token = "0x6000B3C")]
			[Address(RVA = "0x48FF64", Offset = "0x48FF64", VA = "0x48FF64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B3D")]
			[Address(RVA = "0x48FF98", Offset = "0x48FF98", VA = "0x48FF98")]
			set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public List<AStarSearch> Searches
		{
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0x48FFCC", Offset = "0x48FFCC", VA = "0x48FFCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x48FE78", Offset = "0x48FE78", VA = "0x48FE78")]
		public AIWorkerThread()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x490000", Offset = "0x490000", VA = "0x490000")]
		public void Start()
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x490130", Offset = "0x490130", VA = "0x490130")]
		public static void Sleep(int ms)
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x4901B4", Offset = "0x4901B4", VA = "0x4901B4")]
		private void Run()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	public class AStarSearch
	{
		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private PriorityQueue<float, PathNode> mOpenNodes;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private System.Collections.Generic.HashSet<PathNode> mClosedNodes;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private INodeComparer mFinishTest;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Dictionary<PathNode, KeyValuePair<float, PathNode>> mNodeAccessCache;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<PathNode> mPathResult;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private BlockTerrain mTerrain;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23ADFC", Offset = "0x23ADFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23ADFC", Offset = "0x23ADFC")]
		private Vector3 <Start>k__BackingField;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23AE30", Offset = "0x23AE30")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23AE30", Offset = "0x23AE30")]
		private Vector3 <End>k__BackingField;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23AE64", Offset = "0x23AE64")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23AE64", Offset = "0x23AE64")]
		private PathNode <StartNode>k__BackingField;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23AE98", Offset = "0x23AE98")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23AE98", Offset = "0x23AE98")]
		private PathNode <EndNode>k__BackingField;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mHeuristicFactor;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mAirMode;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static Vector3 cubeHalfOffset;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private LoopParameter[] mStaticExpandParams;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static SearchConfig sDefaultSearchConfig;

		[Token(Token = "0x170001FB")]
		public List<PathNode> PathResult
		{
			[Token(Token = "0x6000B48")]
			[Address(RVA = "0x492120", Offset = "0x492120", VA = "0x492120")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FC")]
		public float PathCosts
		{
			[Token(Token = "0x6000B49")]
			[Address(RVA = "0x492128", Offset = "0x492128", VA = "0x492128")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FD")]
		public bool IsFinished
		{
			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0x4921DC", Offset = "0x4921DC", VA = "0x4921DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FE")]
		public Vector3 Start
		{
			[Token(Token = "0x6000B4B")]
			[Address(RVA = "0x492274", Offset = "0x492274", VA = "0x492274")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D95C", Offset = "0x23D95C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0x49189C", Offset = "0x49189C", VA = "0x49189C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D96C", Offset = "0x23D96C")]
			private set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public Vector3 End
		{
			[Token(Token = "0x6000B4D")]
			[Address(RVA = "0x492288", Offset = "0x492288", VA = "0x492288")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D97C", Offset = "0x23D97C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B4E")]
			[Address(RVA = "0x4918A8", Offset = "0x4918A8", VA = "0x4918A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D98C", Offset = "0x23D98C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public PathNode StartNode
		{
			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0x49229C", Offset = "0x49229C", VA = "0x49229C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D99C", Offset = "0x23D99C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0x4919A0", Offset = "0x4919A0", VA = "0x4919A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D9AC", Offset = "0x23D9AC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public PathNode EndNode
		{
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0x4922A4", Offset = "0x4922A4", VA = "0x4922A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D9BC", Offset = "0x23D9BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0x4919A8", Offset = "0x4919A8", VA = "0x4919A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23D9CC", Offset = "0x23D9CC")]
			private set
			{
			}
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x491204", Offset = "0x491204", VA = "0x491204")]
		public AStarSearch(BlockTerrain terrain, Vector3 start, Vector3 end, float heuristicFactor, SearchConnection sc, INodeComparer finishTest, bool airMode)
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x492038", Offset = "0x492038", VA = "0x492038")]
		public AStarSearch(BlockTerrain terrain, Vector3 start, Vector3 end, float heuristicFactor, SearchConnection sc)
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x491674", Offset = "0x491674", VA = "0x491674")]
		public void InitDefaultSearchConfig()
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x491D5C", Offset = "0x491D5C", VA = "0x491D5C")]
		private void AddNodeToOpenList(PathNode node)
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x4919B0", Offset = "0x4919B0", VA = "0x4919B0")]
		public static bool IsWalkableIndex(BlockTerrain terrain, int x, int y, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x4922B4", Offset = "0x4922B4", VA = "0x4922B4")]
		public static bool IsWalkableIndex(BlockTerrain terrain, Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x491E70", Offset = "0x491E70", VA = "0x491E70")]
		public static bool IsBlockedIndex(BlockTerrain terrain, int x, int y, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x4923B0", Offset = "0x4923B0", VA = "0x4923B0")]
		private void ExpandNode(PathNode node)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x490C14", Offset = "0x490C14", VA = "0x490C14")]
		public bool Run(int steps)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x492FF4", Offset = "0x492FF4", VA = "0x492FF4")]
		public void Draw()
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x492FF8", Offset = "0x492FF8", VA = "0x492FF8")]
		public static void DrawPath(List<PathNode> pathResult)
		{
		}
	}
	[Token(Token = "0x20001A6")]
	public interface INodeComparer
	{
		[Token(Token = "0x6000B5D")]
		bool Equals(PathNode n1, PathNode n2);
	}
	[Token(Token = "0x20001A7")]
	public class PositionFoundTest : INodeComparer
	{
		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x492118", Offset = "0x492118", VA = "0x492118")]
		public PositionFoundTest()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x493674", Offset = "0x493674", VA = "0x493674", Slot = "4")]
		public bool Equals(PathNode n1, PathNode n2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001A8")]
	public class MaterialFoundTest : INodeComparer
	{
		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public List<uint> mTargetMaterials;

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x4932E0", Offset = "0x4932E0", VA = "0x4932E0")]
		public MaterialFoundTest(List<uint> targetMaterials)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x493374", Offset = "0x493374", VA = "0x493374", Slot = "4")]
		public bool Equals(PathNode n1, PathNode n2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001A9")]
	public class PathCostReachTest : INodeComparer
	{
		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float mTargetPathCost;

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x493408", Offset = "0x493408", VA = "0x493408")]
		public PathCostReachTest(float targetPathCost)
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x493428", Offset = "0x493428", VA = "0x493428", Slot = "4")]
		public bool Equals(PathNode n1, PathNode n2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001AA")]
	public struct Vec3i
	{
		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int z;

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x2B8010", Offset = "0x2B8010", VA = "0x2B8010")]
		public Vec3i(int x_, int y_, int z_)
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public class SearchConfig
	{
		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] mPathCost;

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x4922AC", Offset = "0x4922AC", VA = "0x4922AC")]
		public SearchConfig()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public class PathNode : IComparable<PathNode>
	{
		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PathNode mParent;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float mEstimatedCosts;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float mCost;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int x;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int y;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int z;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 mPosition;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint mMaterial;

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x493464", Offset = "0x493464", VA = "0x493464")]
		public PathNode(int x_, int y_, int z_, float cost, float estimatedcost, PathNode parent)
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x4918B4", Offset = "0x4918B4", VA = "0x4918B4")]
		public PathNode(Vector3 pos, float cost, float estimatedcost, PathNode parent)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x493508", Offset = "0x493508", VA = "0x493508", Slot = "4")]
		public int CompareTo(PathNode b)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001AD")]
	internal class PathNodeEqualityComparer : IEqualityComparer<PathNode>
	{
		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x491894", Offset = "0x491894", VA = "0x491894")]
		public PathNodeEqualityComparer()
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x493568", Offset = "0x493568", VA = "0x493568", Slot = "4")]
		public bool Equals(PathNode n1, PathNode n2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x4935FC", Offset = "0x4935FC", VA = "0x4935FC", Slot = "5")]
		public int GetHashCode(PathNode pn)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001AE")]
	public struct LoopParameter
	{
		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<Vec3i> mOffsetList;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public List<Vec3i> mAdditionalRequiredNonBlockersList;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float mCostOffset;

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x2B7FF4", Offset = "0x2B7FF4", VA = "0x2B7FF4")]
		public LoopParameter(List<Vec3i> offsetList, List<Vec3i> nonBlockersList, float co)
		{
		}
	}
	[Token(Token = "0x20001AF")]
	public class SearchConnection
	{
		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public LoopParameter[] mGroundCharacterExpandParams;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public LoopParameter[] mAirCharacterExpandParams;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SearchConnection mInstance;

		[Token(Token = "0x17000202")]
		public static SearchConnection Instance
		{
			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0x494E78", Offset = "0x494E78", VA = "0x494E78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x493754", Offset = "0x493754", VA = "0x493754")]
		private SearchConnection()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	public class SearchHeuristic
	{
		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x494FA4", Offset = "0x494FA4", VA = "0x494FA4")]
		public SearchHeuristic()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x494FAC", Offset = "0x494FAC", VA = "0x494FAC")]
		public static float ManhattenDistance(PathNode node, PathNode goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x49505C", Offset = "0x49505C", VA = "0x49505C")]
		public static float DiagonalDistance(PathNode node, PathNode goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x492EE8", Offset = "0x492EE8", VA = "0x492EE8")]
		public static float EuclidianDistance(PathNode node, PathNode goal)
		{
			return default(float);
		}
	}
}
[Token(Token = "0x20001B1")]
[ExecuteInEditMode]
public class SearchTest : MonoBehaviour
{
	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform start;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform target;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public BlockTerrain terrain;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool airMode;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 lastStartPos;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 lastTargetPos;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private AStarSearch assearch;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Curve4D camCurve;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private List<Vector3> optimizedPath;

	[Token(Token = "0x6000B74")]
	[Address(RVA = "0x46E134", Offset = "0x46E134", VA = "0x46E134")]
	public SearchTest()
	{
	}

	[Token(Token = "0x6000B75")]
	[Address(RVA = "0x46E13C", Offset = "0x46E13C", VA = "0x46E13C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B76")]
	[Address(RVA = "0x46E140", Offset = "0x46E140", VA = "0x46E140")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0x46E714", Offset = "0x46E714", VA = "0x46E714")]
	private List<Vector3> OptimizePath(List<PathNode> path)
	{
		return null;
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0x46EBBC", Offset = "0x46EBBC", VA = "0x46EBBC")]
	private void OnDrawGizmos()
	{
	}
}
namespace BlockEngine.AI
{
	[Token(Token = "0x20001B2")]
	internal class ShortestPath
	{
		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x495104", Offset = "0x495104", VA = "0x495104")]
		public ShortestPath()
		{
		}
	}
}
[Token(Token = "0x20001B3")]
public class BlockBase : MonoBehaviour
{
	[Token(Token = "0x20001B4")]
	public enum AttachmentPoint
	{
		[Token(Token = "0x40009B0")]
		Bottom,
		[Token(Token = "0x40009B1")]
		Top,
		[Token(Token = "0x40009B2")]
		Front,
		[Token(Token = "0x40009B3")]
		Back,
		[Token(Token = "0x40009B4")]
		Left,
		[Token(Token = "0x40009B5")]
		Right,
		[Token(Token = "0x40009B6")]
		InBlock,
		[Token(Token = "0x40009B7")]
		None
	}

	[Token(Token = "0x20001B5")]
	public enum Category
	{
		[Token(Token = "0x40009B9")]
		Undefined = 65536,
		[Token(Token = "0x40009BA")]
		Air = 0,
		[Token(Token = "0x40009BB")]
		Cubic = 1,
		[Token(Token = "0x40009BC")]
		Fluid = 10,
		[Token(Token = "0x40009BD")]
		Fence = 20,
		[Token(Token = "0x40009BE")]
		Door = 30,
		[Token(Token = "0x40009BF")]
		Stair = 40,
		[Token(Token = "0x40009C0")]
		Slope = 50,
		[Token(Token = "0x40009C1")]
		Light = 60,
		[Token(Token = "0x40009C2")]
		Vegetation = 70,
		[Token(Token = "0x40009C3")]
		Items = 80,
		[Token(Token = "0x40009C4")]
		Tools = 90,
		[Token(Token = "0x40009C5")]
		Electrics = 100,
		[Token(Token = "0x40009C6")]
		Decoration = 110,
		[Token(Token = "0x40009C7")]
		Entity = 1000,
		[Token(Token = "0x40009C8")]
		Object = 2000
	}

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static Vector3[] attachOffsets;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	protected static AttachmentPoint[] attachmentInversed;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	internal Quintuple<Vector3[], Vector2[], int[], Vector3[], Vector4[]>[] mTriangleData;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal Vector3[][] mTriangleNormals;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	internal List<List<int>>[] mLightData;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal List<List<Vector3>>[] mLightDataDebug;

	[NonSerialized]
	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Texture2D iconTexture;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rect uvRect;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Category category;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool selectableMaterial;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool editorOnly;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool liteLocked;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool pipetteExact;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool generatorMaterial;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool stainable;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public byte defaultColorIndex;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public string materialName;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool Solid;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool SolidSameVariant;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool SolidSameID;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public AttachmentPoint RequiredAttach;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool IsCollider;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool IsBlocking;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 navigationOffset;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool IgnoreRayCast;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool ForceLightBlock;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public uint mBlockID;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public uint mVariant;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public uint mValue;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int mLightRedux;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool mEmitsLight;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Color mLightColor;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Color mFluidFogColor;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public string walkSound;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Vector3 gravity;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Material blockMaterial;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public Material meshPreviewMaterial;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	internal int materialIndex;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public Vector3 instancedScaleFactor;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<GameObject> chunkLocalPrefabs;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public List<GameObject> globalPrefabs;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject alternativeIconMesh;

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public GameObject destroyEffectPrefab;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Texture2D useIconTexture;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public bool useLightProbes;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
	public bool debugLightProbes;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
	public bool unLit;

	[Token(Token = "0x17000203")]
	public virtual bool IsTrigger
	{
		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x48C4A4", Offset = "0x48C4A4", VA = "0x48C4A4", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000204")]
	public virtual bool IsTool
	{
		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x48C4AC", Offset = "0x48C4AC", VA = "0x48C4AC", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000B7A")]
	[Address(RVA = "0x48C2E4", Offset = "0x48C2E4", VA = "0x48C2E4")]
	public BlockBase()
	{
	}

	[Token(Token = "0x6000B7D")]
	[Address(RVA = "0x48C4B4", Offset = "0x48C4B4", VA = "0x48C4B4", Slot = "6")]
	public virtual void Compile()
	{
	}

	[Token(Token = "0x6000B7E")]
	[Address(RVA = "0x48C4C8", Offset = "0x48C4C8", VA = "0x48C4C8", Slot = "7")]
	public virtual GameObject CreateGameObject()
	{
		return null;
	}

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0x48C4D0", Offset = "0x48C4D0", VA = "0x48C4D0")]
	internal void EncodeVertexAttributesToTextureCoords(Mesh mesh, float ambient, byte colorIndex, List<Vector3> normals, List<Vector4> tangents)
	{
	}

	[Token(Token = "0x6000B80")]
	[Address(RVA = "0x48C8F0", Offset = "0x48C8F0", VA = "0x48C8F0", Slot = "8")]
	public virtual void DrawSpecial(Chunk ch, GeometryBuffer gb, int index1D, ref Vector3 posOffset)
	{
	}

	[Token(Token = "0x6000B81")]
	[Address(RVA = "0x48C8F4", Offset = "0x48C8F4", VA = "0x48C8F4", Slot = "9")]
	public virtual void LightSpecial(Chunk ch, GeometryBuffer gb, int index1D, uint colorIndex, ref Color blockCol)
	{
	}

	[Token(Token = "0x6000B82")]
	[Address(RVA = "0x48C8F8", Offset = "0x48C8F8", VA = "0x48C8F8")]
	public bool Raycast(UnityEngine.Ray ray, out RaycastHit hitInfo, float distance)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B83")]
	[Address(RVA = "0x48D03C", Offset = "0x48D03C", VA = "0x48D03C")]
	protected bool RayIntersectTriangle(Vector3 rayPosition, Vector3 rayDirection, Vector3 tri0, Vector3 tri1, Vector3 tri2, out float pickDistance, out float barycentricU, out float barycentricV)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0x48D3A8", Offset = "0x48D3A8", VA = "0x48D3A8", Slot = "10")]
	public virtual bool IsPointInside(Vector3 pos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0x48D3B0", Offset = "0x48D3B0", VA = "0x48D3B0")]
	protected AttachmentPoint GetAttachmentByHitPos(Vector3 pos)
	{
		return default(AttachmentPoint);
	}

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0x48D6E0", Offset = "0x48D6E0", VA = "0x48D6E0", Slot = "11")]
	public virtual Chunk SetOrRemove(BlockTerrain t, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return null;
	}

	[Token(Token = "0x6000B87")]
	[Address(RVA = "0x48DA24", Offset = "0x48DA24", VA = "0x48DA24", Slot = "12")]
	public virtual Chunk SetOrRemove(BlockTerrain t, Vector3 pos, bool addToChunk)
	{
		return null;
	}

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0x48DC94", Offset = "0x48DC94", VA = "0x48DC94", Slot = "13")]
	public virtual bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0x48DD20", Offset = "0x48DD20", VA = "0x48DD20", Slot = "14")]
	internal virtual bool IsAttachmentValid(Chunk ch, Vector3 pos, RaycastHit hit, RaycastHit hit_sub)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0x48DF24", Offset = "0x48DF24", VA = "0x48DF24", Slot = "15")]
	internal virtual void NeighbourChanged(Chunk ch, Vector3 pos, AttachmentPoint neighbourSide, BlockBase newNeighbour)
	{
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0x48E054", Offset = "0x48E054", VA = "0x48E054", Slot = "16")]
	public virtual bool PreSetOrRemove(Chunk ch, Vector3 pos, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0x48E138", Offset = "0x48E138", VA = "0x48E138", Slot = "17")]
	public virtual bool PreSetOrRemove(Chunk ch, Vector3 pos, RaycastHit hit, RaycastHit hit_sub, bool addToChunk, bool checkElectricity)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0x48E4F8", Offset = "0x48E4F8", VA = "0x48E4F8", Slot = "18")]
	public virtual void PostSetOrRemove(Chunk ch, Vector3 pos, bool addToChunk)
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0x48E880", Offset = "0x48E880", VA = "0x48E880", Slot = "19")]
	public virtual Chunk Trigger(BlockTerrain t, Vector3 pos)
	{
		return null;
	}
}
[Token(Token = "0x20001B6")]
[ExecuteInEditMode]
public class BlockCharacterController : MonoBehaviour
{
	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float slopeLimit;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float stepOffset;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float skinWidth;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minMoveDistance;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 center;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float radius;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float height;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool detectCollisions;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public BlockTerrain terrain;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform t;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 feetPos;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool correct;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool executeInEdit;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int pushBackSteps;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CharacterController cc;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BlockSphereCollider upperSphere;

	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private BlockSphereCollider lowerSphere;

	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool grounded;

	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool headed;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	public bool checkThisRound;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	public bool lowerCollisionPrecision;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CollisionFlags cf;

	[Token(Token = "0x17000205")]
	public CharacterController CharController
	{
		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x48EC34", Offset = "0x48EC34", VA = "0x48EC34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000206")]
	public bool isGrounded
	{
		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x48EC3C", Offset = "0x48EC3C", VA = "0x48EC3C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000207")]
	public bool isHeaded
	{
		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x48EC44", Offset = "0x48EC44", VA = "0x48EC44")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0x48EB4C", Offset = "0x48EB4C", VA = "0x48EB4C")]
	public BlockCharacterController()
	{
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0x48EC4C", Offset = "0x48EC4C", VA = "0x48EC4C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0x48EDC0", Offset = "0x48EDC0", VA = "0x48EDC0")]
	protected void OnDrawGizmosInternal()
	{
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0x48EF30", Offset = "0x48EF30", VA = "0x48EF30")]
	public static Vector3 SnapPos(Vector3 pos, float snapValue)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0x48EF80", Offset = "0x48EF80", VA = "0x48EF80")]
	public Vector3 GetFreePosition(Vector3 pos)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B98")]
	[Address(RVA = "0x48F13C", Offset = "0x48F13C", VA = "0x48F13C")]
	public CollisionFlags Move(Vector3 motion)
	{
		return default(CollisionFlags);
	}
}
[Token(Token = "0x20001B7")]
public class BlockPhysicsConnector : MonoBehaviour
{
	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public BlockTerrain terrain;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float forceMulti;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public ForceMode forceMode;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody rb;

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0x49510C", Offset = "0x49510C", VA = "0x49510C")]
	public BlockPhysicsConnector()
	{
	}

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0x49511C", Offset = "0x49511C", VA = "0x49511C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0x495184", Offset = "0x495184", VA = "0x495184")]
	private void FixedUpdate()
	{
	}
}
[Token(Token = "0x20001B8")]
public static class TransformExtension
{
	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0x591C1C", Offset = "0x591C1C", VA = "0x591C1C")]
	public static void SetRotationAround(this Transform tf, Transform tfChild, Vector3 axis, float angle)
	{
	}
}
[Token(Token = "0x20001B9")]
public class BlockPlayerModelMotor : NetworkBehaviour
{
	[Token(Token = "0x20001BA")]
	public enum VRRotationType
	{
		[Token(Token = "0x4000A2C")]
		Snap,
		[Token(Token = "0x4000A2D")]
		SmoothSnap,
		[Token(Token = "0x4000A2E")]
		Smooth
	}

	[Token(Token = "0x20001BB")]
	public enum CharacterState
	{
		[Token(Token = "0x4000A30")]
		Undefined,
		[Token(Token = "0x4000A31")]
		Spectator,
		[Token(Token = "0x4000A32")]
		Active,
		[Token(Token = "0x4000A33")]
		Death
	}

	[Token(Token = "0x20001BC")]
	public delegate void FireDelegate();

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	internal bool paused;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int controllerIndex;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool hasControl;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool activated;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool coopPlayer;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool flyMode;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool autoJump;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animator animator;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private BlockCharacterController charController;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 verticalSpeed;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _yaw;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float _pitch;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 finalMoveVec;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SyncVar]
	public Quaternion packedHeadRotation;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Bounds limitingBounds;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform mainTransform;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Transform headTransform;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform fwdTransform;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public Transform camAttachTransform;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform neckTransform;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Transform bodyTransform;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float lookSensitivity;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float yFactor;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float vrMoveSpeed;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static VRRotationType vrRotationType;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Vector3 CamAttachOffset;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public Vector3 CamAttachRotation;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected Vector3 mLastPosition;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	protected Vector3 mLastJumpPosition;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected float mLastJumpTest;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	protected float mJumpCheckTimer;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected float mJumpThreshold;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	internal bool mInWater;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDD")]
	internal bool mInWaterHeadAir;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Vector3 initialHeadPosition;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float mHeadBobAmount;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float mHeadBobFrequency;

	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public float mHeadShakeAmount;

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float mHeadBobOffset;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public bool mHeadBobActive;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float mHeadBobAngle;

	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private int mLastHeadBobSign;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float mLeftRightStep;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private bool vrMode;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool vrJump;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public float vrRotAngle;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public bool enableHeadShake;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
	public bool debugMode;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	internal int jumpButton;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private CharacterState currentState;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private CharacterState oldState;

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private SkinnedMeshRenderer[] rendererComponents;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Quaternion fwdStart;

	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Quaternion armatureStart;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Transform armatureTransform;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float yawDelta;

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private float pitchDelta;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private float yDelta;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float startYaw;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float targetYaw;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private float rotationTime;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private long offsetCounter;

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private uint lastBlockType;

	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private CollisionFlags cf;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private bool groundedBackup;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private Vector3 smoothedGravity;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private float headShake;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	public float jumpTestOffset;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int kCmdCmdUpdateAnimationModifier;

	[Token(Token = "0x17000208")]
	public bool Paused
	{
		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x49567C", Offset = "0x49567C", VA = "0x49567C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x495684", Offset = "0x495684", VA = "0x495684")]
		set
		{
		}
	}

	[Token(Token = "0x17000209")]
	public bool VrMode
	{
		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x49568C", Offset = "0x49568C", VA = "0x49568C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x495694", Offset = "0x495694", VA = "0x495694")]
		set
		{
		}
	}

	[Token(Token = "0x1700020A")]
	public int JumpButton
	{
		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x4958C4", Offset = "0x4958C4", VA = "0x4958C4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x4958CC", Offset = "0x4958CC", VA = "0x4958CC")]
		set
		{
		}
	}

	[Token(Token = "0x1700020B")]
	public CharacterState CurrentState
	{
		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x4958D4", Offset = "0x4958D4", VA = "0x4958D4")]
		get
		{
			return default(CharacterState);
		}
		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x4958DC", Offset = "0x4958DC", VA = "0x4958DC")]
		set
		{
		}
	}

	[Token(Token = "0x1700020C")]
	public bool IsCamAttached
	{
		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x4963A4", Offset = "0x4963A4", VA = "0x4963A4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700020D")]
	public bool IsGrounded
	{
		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x4963AC", Offset = "0x4963AC", VA = "0x4963AC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700020E")]
	public bool IsHeaded
	{
		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x4963EC", Offset = "0x4963EC", VA = "0x4963EC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700020F")]
	public float MotionSicknessFactor
	{
		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x496410", Offset = "0x496410", VA = "0x496410")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000210")]
	public Quaternion NetworkpackedHeadRotation
	{
		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x49A5F4", Offset = "0x49A5F4", VA = "0x49A5F4")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x49975C", Offset = "0x49975C", VA = "0x49975C")]
		[param: In]
		set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public event FireDelegate FirePressed
	{
		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x495AD0", Offset = "0x495AD0", VA = "0x495AD0")]
		add
		{
		}
		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x495BDC", Offset = "0x495BDC", VA = "0x495BDC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event FireDelegate FireReleased
	{
		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x495CE8", Offset = "0x495CE8", VA = "0x495CE8")]
		add
		{
		}
		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x495DF4", Offset = "0x495DF4", VA = "0x495DF4")]
		remove
		{
		}
	}

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0x4953F8", Offset = "0x4953F8", VA = "0x4953F8")]
	public BlockPlayerModelMotor()
	{
	}

	[Token(Token = "0x6000BAA")]
	[Address(RVA = "0x495F00", Offset = "0x495F00", VA = "0x495F00")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BAB")]
	[Address(RVA = "0x495F04", Offset = "0x495F04", VA = "0x495F04")]
	public void Init()
	{
	}

	[Token(Token = "0x6000BAC")]
	[Address(RVA = "0x4960F4", Offset = "0x4960F4", VA = "0x4960F4")]
	public void SetRotation(Quaternion rot)
	{
	}

	[Token(Token = "0x6000BAD")]
	[Address(RVA = "0x4961B4", Offset = "0x4961B4", VA = "0x4961B4")]
	public Quaternion GetRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000BAE")]
	[Address(RVA = "0x4961E8", Offset = "0x4961E8", VA = "0x4961E8")]
	public void AttachCamera(Transform cam)
	{
	}

	[Token(Token = "0x6000BB3")]
	[Address(RVA = "0x4964C8", Offset = "0x4964C8", VA = "0x4964C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BB4")]
	[Address(RVA = "0x49973C", Offset = "0x49973C", VA = "0x49973C")]
	[Command]
	public void CmdUpdateAnimationModifier(Quaternion packedHeadRotation_)
	{
	}

	[Token(Token = "0x6000BB5")]
	[Address(RVA = "0x4997FC", Offset = "0x4997FC", VA = "0x4997FC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000BB6")]
	[Address(RVA = "0x498B78", Offset = "0x498B78", VA = "0x498B78")]
	public void Jump()
	{
	}

	[Token(Token = "0x6000BB7")]
	[Address(RVA = "0x498CA0", Offset = "0x498CA0", VA = "0x498CA0")]
	private bool JumpPossible(Vector3 dir)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BB8")]
	[Address(RVA = "0x49A480", Offset = "0x49A480", VA = "0x49A480")]
	static BlockPlayerModelMotor()
	{
	}

	[Token(Token = "0x6000BB9")]
	[Address(RVA = "0x49A5F0", Offset = "0x49A5F0", VA = "0x49A5F0")]
	private void UNetVersion()
	{
	}

	[Token(Token = "0x6000BBC")]
	[Address(RVA = "0x49A604", Offset = "0x49A604", VA = "0x49A604")]
	protected static void InvokeCmdCmdUpdateAnimationModifier(NetworkBehaviour obj, NetworkReader reader)
	{
	}

	[Token(Token = "0x6000BBD")]
	[Address(RVA = "0x49A1D4", Offset = "0x49A1D4", VA = "0x49A1D4")]
	public void CallCmdUpdateAnimationModifier(Quaternion packedHeadRotation_)
	{
	}

	[Token(Token = "0x6000BBE")]
	[Address(RVA = "0x49A848", Offset = "0x49A848", VA = "0x49A848", Slot = "8")]
	public override bool OnSerialize(NetworkWriter writer, bool forceAll)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BBF")]
	[Address(RVA = "0x49A948", Offset = "0x49A948", VA = "0x49A948", Slot = "9")]
	public override void OnDeserialize(NetworkReader reader, bool initialState)
	{
	}
}
[Token(Token = "0x20001BD")]
public class Animal : MeshBlock
{
	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0x4765E0", Offset = "0x4765E0", VA = "0x4765E0")]
	public Animal()
	{
	}

	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0x476664", Offset = "0x476664", VA = "0x476664", Slot = "20")]
	public override void CreateIconTexture()
	{
	}

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0x476DAC", Offset = "0x476DAC", VA = "0x476DAC", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001BE")]
public class Decal : MeshBlock
{
	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private PriorityQueue<int, int> variantPriority;

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0x49C298", Offset = "0x49C298", VA = "0x49C298")]
	public Decal()
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0x49C350", Offset = "0x49C350", VA = "0x49C350", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0x49D03C", Offset = "0x49D03C", VA = "0x49D03C", Slot = "14")]
	internal override bool IsAttachmentValid(Chunk ch, Vector3 pos, RaycastHit hit, RaycastHit hit_sub)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0x49CB74", Offset = "0x49CB74", VA = "0x49CB74")]
	private bool IsAttachmentValidInner(Chunk ch, Vector3 pos)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001BF")]
public class Door : MeshBlock
{
	[Token(Token = "0x17000211")]
	public override bool IsTrigger
	{
		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x49DB44", Offset = "0x49DB44", VA = "0x49DB44", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0x49DAC0", Offset = "0x49DAC0", VA = "0x49DAC0")]
	public Door()
	{
	}

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0x49DB4C", Offset = "0x49DB4C", VA = "0x49DB4C", Slot = "19")]
	public override Chunk Trigger(BlockTerrain t, Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0x49DD80", Offset = "0x49DD80", VA = "0x49DD80", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BCF")]
	[Address(RVA = "0x49E3D4", Offset = "0x49E3D4", VA = "0x49E3D4", Slot = "15")]
	internal override void NeighbourChanged(Chunk ch, Vector3 pos, AttachmentPoint neighbourSide, BlockBase newNeighbour)
	{
	}
}
[Token(Token = "0x20001C0")]
public class EB_Sensor : ElectricsBlock
{
	[Token(Token = "0x6000BD0")]
	[Address(RVA = "0x49F86C", Offset = "0x49F86C", VA = "0x49F86C")]
	public EB_Sensor()
	{
	}

	[Token(Token = "0x6000BD1")]
	[Address(RVA = "0x4A0B40", Offset = "0x4A0B40", VA = "0x4A0B40", Slot = "23")]
	public override Chunk UpdateLogic(BlockTerrain t, ElectricNode en)
	{
		return null;
	}
}
[Token(Token = "0x20001C1")]
public class ElectricConsumer : ElectricsBlock
{
	[Token(Token = "0x6000BD2")]
	[Address(RVA = "0x4A1408", Offset = "0x4A1408", VA = "0x4A1408")]
	public ElectricConsumer()
	{
	}

	[Token(Token = "0x6000BD3")]
	[Address(RVA = "0x4A1488", Offset = "0x4A1488", VA = "0x4A1488", Slot = "22")]
	public override Chunk Signalize(BlockTerrain t, Vector3 pos, int eLevel, out uint nextBlockType)
	{
		return null;
	}
}
[Token(Token = "0x20001C2")]
public class ElectricsBlock : MeshBlock
{
	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] sideNames;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Vector3[] blockOffsets;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<List<int>> connectableSides;

	[Token(Token = "0x4000A38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private int[][][,] connectableBlocks;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Dictionary<string, int> sideNameIndexMap;

	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public bool electricTest;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public int energyLevel;

	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public bool isSource;

	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
	public bool isConsumer;

	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
	public bool multiVariant;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private Transform[][] sourceTransforms;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal static Quintuple<Vector3[], Vector2[], int[], Vector3[], Vector4[]>[][] sTriangleDataExt;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public bool generateCombinations;

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0x49F8EC", Offset = "0x49F8EC", VA = "0x49F8EC")]
	public ElectricsBlock()
	{
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0x4A81C4", Offset = "0x4A81C4", VA = "0x4A81C4", Slot = "6")]
	public override void Compile()
	{
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0x4A9AA0", Offset = "0x4A9AA0", VA = "0x4A9AA0", Slot = "15")]
	internal override void NeighbourChanged(Chunk ch, Vector3 pos, AttachmentPoint neighbourSide, BlockBase newNeighbour)
	{
	}

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0x4A9C90", Offset = "0x4A9C90", VA = "0x4A9C90")]
	internal bool IsAttachmentValidInner(Chunk ch, Vector3 pos, RaycastHit hit, RaycastHit hit_sub)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BD8")]
	[Address(RVA = "0x4A9F64", Offset = "0x4A9F64", VA = "0x4A9F64", Slot = "14")]
	internal override bool IsAttachmentValid(Chunk ch, Vector3 pos, RaycastHit hit, RaycastHit hit_sub)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BD9")]
	[Address(RVA = "0x4AA0E8", Offset = "0x4AA0E8", VA = "0x4AA0E8", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BDA")]
	[Address(RVA = "0x4AA7C0", Offset = "0x4AA7C0", VA = "0x4AA7C0", Slot = "12")]
	public override Chunk SetOrRemove(BlockTerrain t, Vector3 pos, bool addToChunk)
	{
		return null;
	}

	[Token(Token = "0x6000BDB")]
	[Address(RVA = "0x4AA848", Offset = "0x4AA848", VA = "0x4AA848", Slot = "8")]
	public override void DrawSpecial(Chunk ch, GeometryBuffer gb, int index1D, ref Vector3 posOffset)
	{
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0x4AB574", Offset = "0x4AB574", VA = "0x4AB574", Slot = "9")]
	public override void LightSpecial(Chunk ch, GeometryBuffer gb, int index1D, uint colorIndex, ref Color c)
	{
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0x4AC000", Offset = "0x4AC000", VA = "0x4AC000", Slot = "21")]
	public virtual void SetElectrics(BlockTerrain t, Vector3 pos, uint value, bool addToChunk)
	{
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0x4AC2E4", Offset = "0x4AC2E4", VA = "0x4AC2E4", Slot = "22")]
	public virtual Chunk Signalize(BlockTerrain t, Vector3 pos, int eLevel, out uint nextBlockType)
	{
		return null;
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0x4AC380", Offset = "0x4AC380", VA = "0x4AC380", Slot = "23")]
	public virtual Chunk UpdateLogic(BlockTerrain t, ElectricNode en)
	{
		return null;
	}
}
[Token(Token = "0x20001C3")]
public class Facing : MeshBlock
{
	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public bool facing;

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
	public bool supportVertical;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13E")]
	public bool supportStacking;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public uint topVariant;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public uint baseVariant;

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0x4B1D78", Offset = "0x4B1D78", VA = "0x4B1D78")]
	public Facing()
	{
	}

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0x4B1E08", Offset = "0x4B1E08", VA = "0x4B1E08", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0x4B28E0", Offset = "0x4B28E0", VA = "0x4B28E0", Slot = "14")]
	internal override bool IsAttachmentValid(Chunk ch, Vector3 pos, RaycastHit hit, RaycastHit hit_sub)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0x4B26DC", Offset = "0x4B26DC", VA = "0x4B26DC")]
	private bool IsAttachmentValidInner(Chunk ch, Vector3 pos)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001C4")]
public class Fence : MeshBlock
{
	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0x4B28E8", Offset = "0x4B28E8", VA = "0x4B28E8")]
	public Fence()
	{
	}

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0x4B296C", Offset = "0x4B296C", VA = "0x4B296C", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001C5")]
public class FireflyControl : MonoBehaviour
{
	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ParticleSystem pSystem;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool IsNight;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool wasNight;

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0x4B493C", Offset = "0x4B493C", VA = "0x4B493C")]
	public FireflyControl()
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0x4B4944", Offset = "0x4B4944", VA = "0x4B4944")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0x4B4948", Offset = "0x4B4948", VA = "0x4B4948")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0x4B494C", Offset = "0x4B494C", VA = "0x4B494C")]
	private void Update()
	{
	}
}
[Token(Token = "0x20001C6")]
public class InkTool : MeshBlock
{
	[Token(Token = "0x17000212")]
	public override bool IsTool
	{
		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x4C1E44", Offset = "0x4C1E44", VA = "0x4C1E44", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0x4C1DC0", Offset = "0x4C1DC0", VA = "0x4C1DC0")]
	public InkTool()
	{
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0x4C1E4C", Offset = "0x4C1E4C", VA = "0x4C1E4C", Slot = "20")]
	public override void CreateIconTexture()
	{
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0x4C27A0", Offset = "0x4C27A0", VA = "0x4C27A0", Slot = "11")]
	public override Chunk SetOrRemove(BlockTerrain t, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return null;
	}

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0x4C290C", Offset = "0x4C290C", VA = "0x4C290C", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001C7")]
public class LightBlock : MeshBlock
{
	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0x6B131C", Offset = "0x6B131C", VA = "0x6B131C")]
	public LightBlock()
	{
	}
}
[Token(Token = "0x20001C8")]
public class Lighter : MeshBlock
{
	[Token(Token = "0x17000213")]
	public override bool IsTool
	{
		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x6B25D8", Offset = "0x6B25D8", VA = "0x6B25D8", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0x6B2558", Offset = "0x6B2558", VA = "0x6B2558")]
	public Lighter()
	{
	}

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0x6B25E0", Offset = "0x6B25E0", VA = "0x6B25E0", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001C9")]
public class Objects : MeshBlock
{
	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public float speed;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public bool useRandomDir;

	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
	public bool useAngularVelocity;

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0x45C9F0", Offset = "0x45C9F0", VA = "0x45C9F0")]
	public Objects()
	{
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0x45CA7C", Offset = "0x45CA7C", VA = "0x45CA7C", Slot = "20")]
	public override void CreateIconTexture()
	{
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0x45D1C4", Offset = "0x45D1C4", VA = "0x45D1C4", Slot = "11")]
	public override Chunk SetOrRemove(BlockTerrain t, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return null;
	}
}
[Token(Token = "0x20001CA")]
public class PickAxe : MeshBlock
{
	[Token(Token = "0x17000214")]
	public override bool IsTool
	{
		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x461094", Offset = "0x461094", VA = "0x461094", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0x461010", Offset = "0x461010", VA = "0x461010")]
	public PickAxe()
	{
	}

	[Token(Token = "0x6000BFA")]
	[Address(RVA = "0x46109C", Offset = "0x46109C", VA = "0x46109C", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001CB")]
public class Stair : MeshBlock
{
	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private PriorityQueue<int, int> variantPriority;

	[Token(Token = "0x6000BFB")]
	[Address(RVA = "0x581264", Offset = "0x581264", VA = "0x581264")]
	public Stair()
	{
	}

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0x58131C", Offset = "0x58131C", VA = "0x58131C", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001CC")]
public class Toggle : ElectricsBlock
{
	[Token(Token = "0x17000215")]
	public override bool IsTrigger
	{
		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x5915AC", Offset = "0x5915AC", VA = "0x5915AC", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BFD")]
	[Address(RVA = "0x591528", Offset = "0x591528", VA = "0x591528")]
	public Toggle()
	{
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0x5915B4", Offset = "0x5915B4", VA = "0x5915B4", Slot = "19")]
	public override Chunk Trigger(BlockTerrain t, Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0x5916B0", Offset = "0x5916B0", VA = "0x5916B0", Slot = "23")]
	public override Chunk UpdateLogic(BlockTerrain t, ElectricNode en)
	{
		return null;
	}
}
[Token(Token = "0x20001CD")]
public class Torch : MeshBlock
{
	[Token(Token = "0x6000C01")]
	[Address(RVA = "0x5916B8", Offset = "0x5916B8", VA = "0x5916B8")]
	public Torch()
	{
	}

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0x59173C", Offset = "0x59173C", VA = "0x59173C", Slot = "14")]
	internal override bool IsAttachmentValid(Chunk ch, Vector3 pos, RaycastHit hit, RaycastHit hit_sub)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0x591940", Offset = "0x591940", VA = "0x591940", Slot = "11")]
	public override Chunk SetOrRemove(BlockTerrain t, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return null;
	}
}
[Token(Token = "0x20001CE")]
public class WaterBlock : MeshBlock
{
	[Token(Token = "0x6000C04")]
	[Address(RVA = "0x8EAD88", Offset = "0x8EAD88", VA = "0x8EAD88")]
	public WaterBlock()
	{
	}

	[Token(Token = "0x6000C05")]
	[Address(RVA = "0x8EAE0C", Offset = "0x8EAE0C", VA = "0x8EAE0C", Slot = "13")]
	public override bool SetOrRemoveInner(BlockTerrain t, Chunk ch, Vector3 pos, UnityEngine.Ray r, RaycastHit hit, RaycastHit hit_sub, bool addToChunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0x8EB150", Offset = "0x8EB150", VA = "0x8EB150", Slot = "10")]
	public override bool IsPointInside(Vector3 pos)
	{
		return default(bool);
	}
}
namespace NWBlockEngine
{
	[Token(Token = "0x20001CF")]
	public class SortedIntersectionHelper
	{
		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] distance;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Touple<Vector3, Vector3>[] hitPointsNormals;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int entries;

		[Token(Token = "0x17000216")]
		public int Count
		{
			[Token(Token = "0x6000C08")]
			[Address(RVA = "0x6F2BA8", Offset = "0x6F2BA8", VA = "0x6F2BA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x6F2270", Offset = "0x6F2270", VA = "0x6F2270")]
		public SortedIntersectionHelper(int count)
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x6F34B8", Offset = "0x6F34B8", VA = "0x6F34B8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x6F4960", Offset = "0x6F4960", VA = "0x6F4960")]
		public void Add(float d, Vector3 pos, Vector3 nrm)
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class BlockSphereCollider
	{
		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private SortedIntersectionHelper sortedIntersections;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int early;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int late;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private BlockTerrain terrain;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 origin;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float radius;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int pushBackSteps;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 repulseVec;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Triangle> collisionTriangles;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private List<Vector3> testPoints;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float oldRadius;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3[] terrainBlockPositions;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int terrainBlockPositionsLength;

		[Token(Token = "0x17000217")]
		public SortedIntersectionHelper SortedIntersections
		{
			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0x6F244C", Offset = "0x6F244C", VA = "0x6F244C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000218")]
		public Vector3 RepulseVec
		{
			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0x6F2454", Offset = "0x6F2454", VA = "0x6F2454")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x6F2124", Offset = "0x6F2124", VA = "0x6F2124")]
		public BlockSphereCollider(BlockTerrain ter)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x6F2468", Offset = "0x6F2468", VA = "0x6F2468")]
		public void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x6F2BB0", Offset = "0x6F2BB0", VA = "0x6F2BB0")]
		public CollisionFlags Set(Vector3 pos, float r)
		{
			return default(CollisionFlags);
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x6F3670", Offset = "0x6F3670", VA = "0x6F3670")]
		private void CalculateTerrainBlockPositionsToTestForCollision(Vector3 basePos)
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x6F3960", Offset = "0x6F3960", VA = "0x6F3960")]
		public bool SphereIntersect(BlockBase block, Vector3 offset)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x6F3A98", Offset = "0x6F3A98", VA = "0x6F3A98")]
		public bool SphereIntersect(Quintuple<Vector3[], Vector2[], int[], Vector3[], Vector4[]> geomSideData, Vector3[] geomSideNormals, Vector3 offset)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x6F4D4C", Offset = "0x6F4D4C", VA = "0x6F4D4C")]
		public static bool SphereIntersectLine(ref Vector3 l0, ref Vector3 l1, ref Vector3 sOrigin, float sqrRadius, out Vector3 cp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x6F501C", Offset = "0x6F501C", VA = "0x6F501C")]
		public static bool SphereIntersectLine(ref Vector3 l0, ref Vector3 l1, ref Vector3 sOrigin, float sqrRadius)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x6F463C", Offset = "0x6F463C", VA = "0x6F463C")]
		public static bool TestInSphere(ref Vector3 p, ref Vector3 origin, float radiusSqr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x6F4E10", Offset = "0x6F4E10", VA = "0x6F4E10")]
		public static Vector3 ClosestPointOnLine(ref Vector3 A, ref Vector3 B, ref Vector3 P)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x6F44FC", Offset = "0x6F44FC", VA = "0x6F44FC")]
		public static Vector3 ClosestPointOnPlane(ref Vector3 planePoint, ref Vector3 planeNormal, ref Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x6F50EC", Offset = "0x6F50EC", VA = "0x6F50EC")]
		public static bool SameSide(Vector3 p1, Vector3 p2, Vector3 a, Vector3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x6F474C", Offset = "0x6F474C", VA = "0x6F474C")]
		public static bool PointLiesInTriangle(Vector3 pt, Vector3 a, Vector3 b, Vector3 c)
		{
			return default(bool);
		}
	}
}
[Token(Token = "0x20001D1")]
public class BlockTerrain : MonoBehaviour
{
	[Token(Token = "0x20001D2")]
	public enum TerrainGenerationType
	{
		[Token(Token = "0x4000AB7")]
		TG_Basic,
		[Token(Token = "0x4000AB8")]
		TG_Extended,
		[Token(Token = "0x4000AB9")]
		TG_FlatLand,
		[Token(Token = "0x4000ABA")]
		TG_Continental
	}

	[Token(Token = "0x20001D3")]
	public delegate void ModifiedBlocksHandler(object sender, EventArgs<Queue<Touple<Vector3, uint>>> e);

	[Token(Token = "0x20001D4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x235E54", Offset = "0x235E54")]
	private sealed class <ProcessQueue>c__AnonStorey0
	{
		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Chunk ch;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal BlockTerrain $this;

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x53BB10", Offset = "0x53BB10", VA = "0x53BB10")]
		public <ProcessQueue>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x54F78C", Offset = "0x54F78C", VA = "0x54F78C")]
		internal void <>m__0()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x54F81C", Offset = "0x54F81C", VA = "0x54F81C")]
		internal void <>m__1()
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x54F884", Offset = "0x54F884", VA = "0x54F884")]
		internal void <>m__2()
		{
		}
	}

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string filename;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string importfilename;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Stream worldDataStream;

	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Transform> activeTargets;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool update;

	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TerrainGenerationType mChunkGenerationType;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float baseHeight;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int seed;

	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color SkyColor;

	[Token(Token = "0x4000A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ambientIntensity;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public byte SunValue;

	[Token(Token = "0x4000A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float unLitFactor;

	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject chunkPrefab;

	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Materials materials;

	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ElectricGraph electricGraph;

	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool useShader;

	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int maxVisibilityRange;

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int lastVisibilityRange;

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int visibilityRange;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool enableChunkCollider;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material terrainSolid;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float textureBias;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int chunkBlocksPerHeightSegment;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public bool useMultiThreading;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int multiThreadDelayMS;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int relightDelayMS;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int rebuildDelayMS;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public object mIOLock;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<ChunkWorkerThread> threadPool;

	[Token(Token = "0x4000A7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public int threadCount;

	[Token(Token = "0x4000A7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Dictionary<long, int> mChunkFileOffset;

	[Token(Token = "0x4000A7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Dictionary<long, Chunk> mChunkHashMap;

	[Token(Token = "0x4000A7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public List<Chunk> visibleChunks;

	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public System.Collections.Generic.HashSet<long> visibleChunkIndeces;

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public System.Collections.Generic.HashSet<long> additionalChunks;

	[NonSerialized]
	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public Queue<Chunk> chunkPool;

	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<Chunk> neighboursLoaded;

	[NonSerialized]
	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public LinkedList<Touple<long, Chunk.ChunkTask>> chunksToProcess;

	[NonSerialized]
	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public List<Action> dispatchedActions;

	[NonSerialized]
	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public LinkedList<Touple<long, Chunk.ChunkTask>> neededChunks;

	[NonSerialized]
	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public System.Collections.Generic.HashSet<long> unNeededChunks;

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public LinkedList<long> chunksToProcessQueued;

	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<Chunk> volatileChunks;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static long[] neighbourIndexOffsets;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static long mMaxWorldChunkCountPerDimension;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static long mMaxWorldChunkCountPerDimensionHalf;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static long mMaxWorldChunkCountPerDimensionFixOffset;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<int, Vector2[]> mRadiusOffsets;

	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static Dictionary<int, long[]> mDiskIndexOffsets;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Dictionary<int, long[]> mCircleIndexOffsets;

	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public TerrainGenBase[] terrainGenerators;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Queue<Touple<Vector3, uint>> modifiedBlocks;

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public bool volatileMode;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private NWRandom mNonDetermRand;

	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public bool showGizmos;

	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static Vector3 chunkCenterOffset;

	[Token(Token = "0x4000A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Vector3 chunkBBSize;

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
	private bool wasLoading;

	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float finishTime;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float startTime;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float stopTime;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public Vector3 resetPos;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Vector3 updateStep;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public bool movePosition;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
	public bool disableSunLightPropagation;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float lastActiveOmega;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	internal int updateCount;

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	internal int dispatchDelay;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private List<long> pc1_temp;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private List<long> lastActiveIndeces;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private LinkedList<Chunk> rebuildQueue;

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	internal LinkedList<Chunk> relightQueue;

	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private List<long> processedChunks;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private List<Touple<Chunk, Vector3>> chunksModified;

	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	internal Queue<Chunk> chunksToReset;

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private List<Chunk> rebuildChunkNeighbours;

	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private List<Chunk> relightChunkNeighbours;

	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool m_IsDone;

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private object m_Handle;

	[Token(Token = "0x4000AB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public int maxItemsToLoad;

	[Token(Token = "0x4000AB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	internal Dictionary<long, Dictionary<Vector3, uint>> deferredSetBlock;

	[Token(Token = "0x4000AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Dictionary<Vector3, List<int>> neighbourRebuildMapping;

	[Token(Token = "0x17000219")]
	public int VisibilityRange
	{
		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x534F24", Offset = "0x534F24", VA = "0x534F24")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x534F2C", Offset = "0x534F2C", VA = "0x534F2C")]
		set
		{
		}
	}

	[Token(Token = "0x1700021A")]
	public bool UseMultiThreading
	{
		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x535018", Offset = "0x535018", VA = "0x535018")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x535020", Offset = "0x535020", VA = "0x535020")]
		set
		{
		}
	}

	[Token(Token = "0x1700021B")]
	public NWRandom NonDetermRand
	{
		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x535CB8", Offset = "0x535CB8", VA = "0x535CB8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700021C")]
	public bool IsDone
	{
		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x54B204", Offset = "0x54B204", VA = "0x54B204")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x54B238", Offset = "0x54B238", VA = "0x54B238")]
		set
		{
		}
	}

	[Token(Token = "0x1700021D")]
	public bool Loading
	{
		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x54B26C", Offset = "0x54B26C", VA = "0x54B26C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700021E")]
	public int ItemsToLoad
	{
		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x54B28C", Offset = "0x54B28C", VA = "0x54B28C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700021F")]
	public int LoadProgress
	{
		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x54B36C", Offset = "0x54B36C", VA = "0x54B36C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000220")]
	public bool Initialized
	{
		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x54B3AC", Offset = "0x54B3AC", VA = "0x54B3AC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000003")]
	public event ModifiedBlocksHandler ModifiedBlocksReceived
	{
		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x535028", Offset = "0x535028", VA = "0x535028")]
		add
		{
		}
		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x535134", Offset = "0x535134", VA = "0x535134")]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event EventHandler<EventArgs<Chunk>> ChunkDataLoaded
	{
		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x535240", Offset = "0x535240", VA = "0x535240")]
		add
		{
		}
		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x53534C", Offset = "0x53534C", VA = "0x53534C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event EventHandler<EventArgs<Chunk>> ChunkSaved
	{
		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x535458", Offset = "0x535458", VA = "0x535458")]
		add
		{
		}
		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x535564", Offset = "0x535564", VA = "0x535564")]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event EventHandler<EventArgs<Chunk>> ChunkReleased
	{
		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x535670", Offset = "0x535670", VA = "0x535670")]
		add
		{
		}
		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x53577C", Offset = "0x53577C", VA = "0x53577C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event EventHandler<EventArgs<Touple<Vector3, BlockBase>>> BlockDestroyEvent
	{
		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x535888", Offset = "0x535888", VA = "0x535888")]
		add
		{
		}
		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x535994", Offset = "0x535994", VA = "0x535994")]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event EventHandler<EventArgs<Touple<Vector3, uint>>> BlockChangeEvent
	{
		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x535AA0", Offset = "0x535AA0", VA = "0x535AA0")]
		add
		{
		}
		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x535BAC", Offset = "0x535BAC", VA = "0x535BAC")]
		remove
		{
		}
	}

	[Token(Token = "0x6000C1B")]
	[Address(RVA = "0x5348C4", Offset = "0x5348C4", VA = "0x5348C4")]
	public BlockTerrain()
	{
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0x535CC0", Offset = "0x535CC0", VA = "0x535CC0")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0x535CC4", Offset = "0x535CC4", VA = "0x535CC4")]
	public void ClearChunks()
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0x537688", Offset = "0x537688", VA = "0x537688")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0x534F48", Offset = "0x534F48", VA = "0x534F48")]
	private void ResetLastActiveIndeces()
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0x5384A8", Offset = "0x5384A8", VA = "0x5384A8")]
	private Chunk FindOrCreateChunk(long chunkIndex, out bool newlyCreated)
	{
		return null;
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0x539578", Offset = "0x539578", VA = "0x539578")]
	private Chunk FindOrCreateChunk(long chunkIndex)
	{
		return null;
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0x5395A0", Offset = "0x5395A0", VA = "0x5395A0")]
	internal void LoadOrGenerateChunk(Chunk chunkToLoad)
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0x53AA6C", Offset = "0x53AA6C", VA = "0x53AA6C")]
	private string GetChunkCoordStringByIndex(long index)
	{
		return null;
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0x53AB74", Offset = "0x53AB74", VA = "0x53AB74")]
	private bool ConnectChunks(Chunk ch)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0x53AD60", Offset = "0x53AD60", VA = "0x53AD60")]
	private void ProcessQueue(int threadID)
	{
	}

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0x542FC8", Offset = "0x542FC8", VA = "0x542FC8")]
	private void InformNeighbours(Chunk ch)
	{
	}

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0x53770C", Offset = "0x53770C", VA = "0x53770C")]
	public int InternalUpdate()
	{
		return default(int);
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0x544CD4", Offset = "0x544CD4", VA = "0x544CD4")]
	private int RecalcNeededChunks(List<long> activeIndeces)
	{
		return default(int);
	}

	[Token(Token = "0x6000C3A")]
	[Address(RVA = "0x5438E4", Offset = "0x5438E4", VA = "0x5438E4")]
	private void ApplyBlockModifications()
	{
	}

	[Token(Token = "0x6000C3B")]
	[Address(RVA = "0x544574", Offset = "0x544574", VA = "0x544574")]
	private void ProcessNeededChunks()
	{
	}

	[Token(Token = "0x6000C3C")]
	[Address(RVA = "0x5447F0", Offset = "0x5447F0", VA = "0x5447F0")]
	private void RemoveUnNeededChunks()
	{
	}

	[Token(Token = "0x6000C3D")]
	[Address(RVA = "0x54708C", Offset = "0x54708C", VA = "0x54708C")]
	private void DeleteChunk(Chunk finishChunk)
	{
	}

	[Token(Token = "0x6000C3E")]
	[Address(RVA = "0x546F64", Offset = "0x546F64", VA = "0x546F64")]
	public bool AddChunkToProcessQueue(Chunk ch, Chunk.ChunkTask task, bool highPrio)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C3F")]
	[Address(RVA = "0x5464B0", Offset = "0x5464B0", VA = "0x5464B0")]
	public Touple<List<Chunk>, List<Chunk>> GetRebuildLists(List<Touple<Chunk, Vector3>> visitedChunks)
	{
		return null;
	}

	[Token(Token = "0x6000C40")]
	[Address(RVA = "0x5472D4", Offset = "0x5472D4", VA = "0x5472D4")]
	private void StartThreads()
	{
	}

	[Token(Token = "0x6000C41")]
	[Address(RVA = "0x536328", Offset = "0x536328", VA = "0x536328")]
	private void StopThreads()
	{
	}

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0x5476AC", Offset = "0x5476AC", VA = "0x5476AC")]
	public void Close()
	{
	}

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0x547784", Offset = "0x547784", VA = "0x547784")]
	public void Init()
	{
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0x544C14", Offset = "0x544C14", VA = "0x544C14")]
	public static long GetIndexByChunkCoord(int chunkX, int chunkZ)
	{
		return default(long);
	}

	[Token(Token = "0x6000C45")]
	[Address(RVA = "0x5497AC", Offset = "0x5497AC", VA = "0x5497AC")]
	public long GetIndexByPosition(Vector3 pos)
	{
		return default(long);
	}

	[Token(Token = "0x6000C46")]
	[Address(RVA = "0x538818", Offset = "0x538818", VA = "0x538818")]
	public void GetChunkCoordByIndex(long index, out int chunkX, out int chunkZ)
	{
	}

	[Token(Token = "0x6000C47")]
	[Address(RVA = "0x549898", Offset = "0x549898", VA = "0x549898")]
	public void InitFromDataStream(Stream s)
	{
	}

	[Token(Token = "0x6000C48")]
	[Address(RVA = "0x549BA0", Offset = "0x549BA0", VA = "0x549BA0")]
	public bool Raycast(UnityEngine.Ray ray, out RaycastHit hitInfo, out RaycastHit hitInfo_sub, float distance, bool ignoreNonWalkable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C4F")]
	[Address(RVA = "0x54B430", Offset = "0x54B430", VA = "0x54B430")]
	public void FlushWorkingQueues(long maxFlushTime)
	{
	}

	[Token(Token = "0x6000C50")]
	[Address(RVA = "0x5433C4", Offset = "0x5433C4", VA = "0x5433C4")]
	private void CheckThreadPool()
	{
	}

	[Token(Token = "0x6000C51")]
	[Address(RVA = "0x54B644", Offset = "0x54B644", VA = "0x54B644")]
	private void PrintFileAndLineNumber(int i)
	{
	}

	[Token(Token = "0x6000C52")]
	[Address(RVA = "0x54B648", Offset = "0x54B648", VA = "0x54B648")]
	public Chunk GetChunkByPos(Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x6000C53")]
	[Address(RVA = "0x54B70C", Offset = "0x54B70C", VA = "0x54B70C")]
	public bool GetChunkByPos(Vector3 pos, out Chunk ch)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C54")]
	[Address(RVA = "0x54B7C4", Offset = "0x54B7C4", VA = "0x54B7C4")]
	public bool GetChunkNormalizedPosition(ref int x, ref int y, ref int z, out Chunk targetChunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C55")]
	[Address(RVA = "0x54B9AC", Offset = "0x54B9AC", VA = "0x54B9AC")]
	public void ImportMCA()
	{
	}

	[Token(Token = "0x6000C56")]
	[Address(RVA = "0x54B9B0", Offset = "0x54B9B0", VA = "0x54B9B0")]
	public Chunk SetBlock(Vector3 pos, uint newBlockID)
	{
		return null;
	}

	[Token(Token = "0x6000C57")]
	[Address(RVA = "0x54BB0C", Offset = "0x54BB0C", VA = "0x54BB0C")]
	public long SetBlockReal(Vector3 pos, uint newBlockID)
	{
		return default(long);
	}

	[Token(Token = "0x6000C58")]
	[Address(RVA = "0x54BCE8", Offset = "0x54BCE8", VA = "0x54BCE8")]
	public List<long> SetBlockRealList(List<Touple<Vector3, uint>> modifyList)
	{
		return null;
	}

	[Token(Token = "0x6000C59")]
	[Address(RVA = "0x54C144", Offset = "0x54C144", VA = "0x54C144")]
	internal Chunk SetBlockInstantly(Vector3 pos, uint newBlockID)
	{
		return null;
	}

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0x54C2AC", Offset = "0x54C2AC", VA = "0x54C2AC")]
	public void SetBlockWithObjects(Vector3 pos, uint type)
	{
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0x54C448", Offset = "0x54C448", VA = "0x54C448")]
	public BlockBase GetBlockBase(Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0x54C4D4", Offset = "0x54C4D4", VA = "0x54C4D4")]
	public uint GetBlockFull(Vector3 pos)
	{
		return default(uint);
	}

	[Token(Token = "0x6000C5D")]
	[Address(RVA = "0x54C4B8", Offset = "0x54C4B8", VA = "0x54C4B8")]
	public uint GetBlock(Vector3 pos)
	{
		return default(uint);
	}

	[Token(Token = "0x6000C5E")]
	[Address(RVA = "0x54C9E0", Offset = "0x54C9E0", VA = "0x54C9E0")]
	public float GetHeight(Vector3 pos)
	{
		return default(float);
	}

	[Token(Token = "0x6000C5F")]
	[Address(RVA = "0x54CBA8", Offset = "0x54CBA8", VA = "0x54CBA8")]
	internal void RaiseChunkLoadedEvent(Chunk ch)
	{
	}

	[Token(Token = "0x6000C60")]
	[Address(RVA = "0x54CC58", Offset = "0x54CC58", VA = "0x54CC58")]
	internal void RaiseChunkSavedEvent(Chunk ch)
	{
	}

	[Token(Token = "0x6000C61")]
	[Address(RVA = "0x54CD08", Offset = "0x54CD08", VA = "0x54CD08")]
	internal void RaiseChunkReleasedEvent(Chunk ch)
	{
	}

	[Token(Token = "0x6000C62")]
	[Address(RVA = "0x54CDB8", Offset = "0x54CDB8", VA = "0x54CDB8")]
	internal void RaiseBlockDestroyedEvent(Vector3 pos, BlockBase block)
	{
	}

	[Token(Token = "0x6000C63")]
	[Address(RVA = "0x548B18", Offset = "0x548B18", VA = "0x548B18")]
	public void PreCalcRadiusOffsets()
	{
	}

	[Token(Token = "0x6000C64")]
	[Address(RVA = "0x548250", Offset = "0x548250", VA = "0x548250")]
	private void InitNeighbourRebuildMapping()
	{
	}

	[Token(Token = "0x6000C65")]
	[Address(RVA = "0x54CEC8", Offset = "0x54CEC8", VA = "0x54CEC8")]
	public void CreateStaticMeshes()
	{
	}

	[Token(Token = "0x6000C66")]
	[Address(RVA = "0x54F494", Offset = "0x54F494", VA = "0x54F494")]
	private void DrawChunk(long index, float bbScale, Color col)
	{
	}
}
[Token(Token = "0x20001D5")]
public class ListContainer<T> where T : struct
{
	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private List<T> _list;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private FieldInfo itemsInfo;

	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private FieldInfo sizeInfo;

	[Token(Token = "0x17000221")]
	public List<T> List
	{
		[Token(Token = "0x6000C72")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000222")]
	public T[] Array
	{
		[Token(Token = "0x6000C73")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000C70")]
	public ListContainer()
	{
	}

	[Token(Token = "0x6000C71")]
	public ListContainer(T[] newArray, int length)
	{
	}

	[Token(Token = "0x6000C74")]
	public void SetArray(T[] newArray)
	{
	}

	[Token(Token = "0x6000C75")]
	public void SetArray(T[] newArray, int length)
	{
	}
}
[Token(Token = "0x20001D6")]
public class GeometryBuffer
{
	[Token(Token = "0x4000AC0")]
	private const int sChunkDim = 16;

	[Token(Token = "0x4000AC1")]
	private const int sChunkDimTimes2 = 32;

	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int sChunkHeight;

	[Token(Token = "0x4000AC3")]
	private const int chunkDimAndMask = 15;

	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	internal static int[] trivialMeshIndices;

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int xdim;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int ydim;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int zdim;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static int zoffset;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int xoffset;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static int xdimXL;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int ydimXL;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static int zdimXL;

	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	internal int segmentIndex;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	internal Vector2[][] UVs;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal Vector3[][] Normals;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	internal Vector4[][] Tangents;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal Vector4[][] UVs2;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	internal Color[][] Colors;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal int[][][] Indeces;

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	internal Vector3[][] Vertices;

	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	internal Vector3[][] VerticesCollision;

	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	internal int[][] IndecesCollision;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	internal Vector2[] chunkUVs;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	internal Vector3[] chunkNormals;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	internal Vector4[] chunkTangents;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	internal Vector4[] chunkUVs2;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	internal Color[] chunkColors;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	internal int[][] chunkIndeces;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	internal Vector3[] chunkVertices;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	internal Vector3[] chunkVerticesCollision;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	internal int[] chunkIndecesCollision;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	internal List<int> vertexMarker;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	internal List<int[]> indexMarker;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	internal List<int> collisionVertexMarker;

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	internal List<int> collisionIndexMarker;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	internal int vertexCount;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	internal int[] indexCount;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	internal float[] LA_Sun_float;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	internal Color[] LA_Lights_float;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	internal int materialCount;

	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	internal int vertexCountCollision;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	internal int indexCountCollision;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	internal Queue<LightNode> lightBfsQueue;

	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	internal Queue<LightRemovalNode> lightRemovalBfsQueue;

	[Token(Token = "0x4000AED")]
	public const int maxVerticesPerSegment = 5256;

	[Token(Token = "0x4000AEE")]
	public const int safetyBuffer = 1024;

	[Token(Token = "0x4000AEF")]
	private const int maxTriangleIndecesCount = 26280;

	[Token(Token = "0x4000AF0")]
	public const int maxVerticesPerChunk = 32768;

	[Token(Token = "0x4000AF1")]
	public const int segmentCount = 8;

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0x4B8218", Offset = "0x4B8218", VA = "0x4B8218")]
	public GeometryBuffer(int materialCount_)
	{
	}

	[Token(Token = "0x6000C77")]
	[Address(RVA = "0x4B8B3C", Offset = "0x4B8B3C", VA = "0x4B8B3C")]
	internal void Reset()
	{
	}

	[Token(Token = "0x6000C78")]
	[Address(RVA = "0x4B8CFC", Offset = "0x4B8CFC", VA = "0x4B8CFC")]
	internal void SwitchSegment(int index)
	{
	}

	[Token(Token = "0x6000C79")]
	[Address(RVA = "0x4B8FF8", Offset = "0x4B8FF8", VA = "0x4B8FF8")]
	internal void SetMarker()
	{
	}

	[Token(Token = "0x6000C7A")]
	[Address(RVA = "0x4B9208", Offset = "0x4B9208", VA = "0x4B9208")]
	internal List<int> GetSubMeshIndeces(int segment)
	{
		return null;
	}
}
[Token(Token = "0x20001D7")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235E64", Offset = "0x235E64")]
public class Chunk : MonoBehaviour
{
	[Token(Token = "0x20001D8")]
	public enum ChunkState
	{
		[Token(Token = "0x4000B5A")]
		Released,
		[Token(Token = "0x4000B5B")]
		UnInitialized,
		[Token(Token = "0x4000B5C")]
		BlockDataLoaded,
		[Token(Token = "0x4000B5D")]
		WaitingForDependencies,
		[Token(Token = "0x4000B5E")]
		NeighboursLoaded,
		[Token(Token = "0x4000B5F")]
		FinishGeometryBuild,
		[Token(Token = "0x4000B60")]
		WaitingForRelight,
		[Token(Token = "0x4000B61")]
		WaitingForRecolor,
		[Token(Token = "0x4000B62")]
		FinishLight,
		[Token(Token = "0x4000B63")]
		Lighted
	}

	[Token(Token = "0x20001D9")]
	public enum ChunkTask
	{
		[Token(Token = "0x4000B65")]
		Load,
		[Token(Token = "0x4000B66")]
		BuildAndLight,
		[Token(Token = "0x4000B67")]
		CalcLight,
		[Token(Token = "0x4000B68")]
		Relight,
		[Token(Token = "0x4000B69")]
		Save,
		[Token(Token = "0x4000B6A")]
		Release,
		[Token(Token = "0x4000B6B")]
		None
	}

	[Token(Token = "0x4000AF2")]
	private const int MAGIC_CHUNK_NUMBER_OLD = 1234567890;

	[Token(Token = "0x4000AF3")]
	private const int MAGIC_CHUNK_NUMBER_PC = 1234567891;

	[Token(Token = "0x4000AF4")]
	private const int chunkDataFV = 1;

	[Token(Token = "0x4000AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	internal BlockTerrain terrain;

	[Token(Token = "0x4000AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int mChunkX;

	[Token(Token = "0x4000AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int mChunkY;

	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int mChunkZ;

	[Token(Token = "0x4000AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public long mChunkIndex;

	[Token(Token = "0x4000AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int referenceCount;

	[Token(Token = "0x4000AFB")]
	public const int sChunkDim = 16;

	[Token(Token = "0x4000AFC")]
	public const int sChunkDimTimes2 = 32;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int sChunkHeight;

	[Token(Token = "0x4000AFE")]
	private const int chunkDimAndMask = 15;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int xdim;

	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int ydim;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int zdim;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int zoffset;

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static int xoffset;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool dataResetted;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int xdimXL;

	[Token(Token = "0x4000B06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static int ydimXL;

	[Token(Token = "0x4000B07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int zdimXL;

	[Token(Token = "0x4000B08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static int zoffsetXL;

	[Token(Token = "0x4000B09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static int xoffsetXL;

	[Token(Token = "0x4000B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 chunkBasePos;

	[Token(Token = "0x4000B0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Bounds mBoundingBox;

	[Token(Token = "0x4000B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public List<Touple<Vector3, BlockBase>> deferredCreation;

	[Token(Token = "0x4000B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public uint[] mBlockData;

	[Token(Token = "0x4000B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public ushort[] mLightMap;

	[Token(Token = "0x4000B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int maxAll;

	[Token(Token = "0x4000B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int maxHeight;

	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	internal int[] heightMap;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	internal float lastLightTime;

	[Token(Token = "0x4000B13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Renderer renderComponent;

	[Token(Token = "0x4000B14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static Materials materials;

	[Token(Token = "0x4000B15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static object queueLock;

	[Token(Token = "0x4000B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public static int activeBuffers;

	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Queue<GeometryBuffer> geomBuffers;

	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private GeometryBuffer currentGeomBuffer;

	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	internal bool ownsGeometryBuffer;

	[Token(Token = "0x4000B1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	internal int rebuildCount;

	[Token(Token = "0x4000B1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static Transform subMeshPoolRoot;

	[Token(Token = "0x4000B1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Queue<ChunkMeshUnity> meshPool;

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	internal List<ChunkMeshUnity> subMeshes;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public static int meshCreateCount;

	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static int globalMaxVertices;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Transform subMeshRoot;

	[Token(Token = "0x4000B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float[] LA_Sun_float;

	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Color[] LA_Lights_float;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int[] neighbourOffsets;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Chunk[] chunkNeighbours;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float[] mChunkTemperature;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Queue<Triple<ElectricsBlock, Vector3, int>> deferredElectrics;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Queue<Touple<Vector3, BlockBase>> deferredChunkGameObjects;

	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Dictionary<Vector3, List<GameObject>> additionalGameObjects;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform additionalObjectsRoot;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private static int[] adjacentSideInfo;

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool debugRebuild;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
	public bool debugBlockLight;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
	public bool debugSunlight;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private NWRandom chunkRand;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	internal int subLoopCount;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public bool IsLocked;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	public bool InProcessQueue;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	public bool InNeededQueue;

	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private ChunkTask chunkTask;

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private ChunkState chunkState;

	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public List<string> mPreviousStates;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public List<string> mAddedLog;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private ChunkState targetChunkState;

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	internal bool dirty;

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Color waitingForNeighbours;

	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public bool debugLightPropagation;

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public int lightPropagationDebugStep;

	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private List<Touple<Vector3, int>> lightPropagationDebugHistory;

	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private List<int> lightPropagationDebugHistoryIndeces;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static int propCount;

	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private List<Touple<int, ushort>> addLight;

	[Token(Token = "0x4000B40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private List<int> removeLight;

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private List<Quintuple<int, uint, uint, ushort, int>> modifiedBlocks;

	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool disableGreedy;

	[Token(Token = "0x4000B43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static int SOUTH;

	[Token(Token = "0x4000B44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static int NORTH;

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private static int EAST;

	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static int WEST;

	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static int TOP;

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static int BOTTOM;

	[Token(Token = "0x4000B49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private static List<Color> inkColors;

	[Token(Token = "0x4000B4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public int chunkVertexCount;

	[Token(Token = "0x4000B4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public int chunkTriangleCount;

	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	protected float darkFactor;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static long unsafeTicks;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static long safeTicks;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private StringReference chunkName;

	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static uint[] blockArray;

	[Token(Token = "0x4000B51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private Vector3 editorCamPos;

	[Token(Token = "0x4000B52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private byte chunkChannelShift;

	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x122")]
	private ushort chunkChannelMask;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public int needsRelight;

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private List<Triple<Chunk, int, BlockBase>> reAddLights;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	internal List<Bounds> debugBB;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	internal List<Bounds> blockBB;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private Bounds bb2;

	[Token(Token = "0x17000223")]
	public int[] HeightMap
	{
		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x552EE0", Offset = "0x552EE0", VA = "0x552EE0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000224")]
	public bool RenderComponent
	{
		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x545BD4", Offset = "0x545BD4", VA = "0x545BD4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x545CA8", Offset = "0x545CA8", VA = "0x545CA8")]
		set
		{
		}
	}

	[Token(Token = "0x17000225")]
	public bool ColliderComponent
	{
		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x553240", Offset = "0x553240", VA = "0x553240")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x5533CC", Offset = "0x5533CC", VA = "0x5533CC")]
		set
		{
		}
	}

	[Token(Token = "0x17000226")]
	internal Queue<Touple<Vector3, BlockBase>> DeferredChunkGameObjects
	{
		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x5534B0", Offset = "0x5534B0", VA = "0x5534B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000227")]
	internal bool NeighboursLoaded
	{
		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x54324C", Offset = "0x54324C", VA = "0x54324C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000228")]
	public NWRandom ChunkRand
	{
		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x5534B8", Offset = "0x5534B8", VA = "0x5534B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000229")]
	public bool CanDataBeModified
	{
		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x5534C0", Offset = "0x5534C0", VA = "0x5534C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700022A")]
	public ChunkTask CurrentChunkTask
	{
		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x5535EC", Offset = "0x5535EC", VA = "0x5535EC")]
		get
		{
			return default(ChunkTask);
		}
		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x5535F4", Offset = "0x5535F4", VA = "0x5535F4")]
		set
		{
		}
	}

	[Token(Token = "0x1700022B")]
	public ChunkState CurrentChunkState
	{
		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x53BB18", Offset = "0x53BB18", VA = "0x53BB18")]
		get
		{
			return default(ChunkState);
		}
		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x53A7D4", Offset = "0x53A7D4", VA = "0x53A7D4")]
		set
		{
		}
	}

	[Token(Token = "0x1700022C")]
	public ChunkState TargetChunkState
	{
		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x553614", Offset = "0x553614", VA = "0x553614")]
		get
		{
			return default(ChunkState);
		}
		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x55361C", Offset = "0x55361C", VA = "0x55361C")]
		set
		{
		}
	}

	[Token(Token = "0x6000C7C")]
	[Address(RVA = "0x5525F4", Offset = "0x5525F4", VA = "0x5525F4")]
	public Chunk()
	{
	}

	[Token(Token = "0x6000C7D")]
	[Address(RVA = "0x54C940", Offset = "0x54C940", VA = "0x54C940")]
	public static int get1DIndex(int x, int y, int z)
	{
		return default(int);
	}

	[Token(Token = "0x6000C7E")]
	[Address(RVA = "0x552B34", Offset = "0x552B34", VA = "0x552B34")]
	public static Vector3 getPosBy1DIndex(int index)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C7F")]
	[Address(RVA = "0x552C44", Offset = "0x552C44", VA = "0x552C44")]
	public static void getPosBy1DIndex(int index, out int x, out int y, out int z)
	{
	}

	[Token(Token = "0x6000C80")]
	[Address(RVA = "0x552D2C", Offset = "0x552D2C", VA = "0x552D2C")]
	public static int get1DIndex(Vector3 v)
	{
		return default(int);
	}

	[Token(Token = "0x6000C81")]
	[Address(RVA = "0x552E3C", Offset = "0x552E3C", VA = "0x552E3C")]
	public static int get1DIndexXL(int x, int y, int z)
	{
		return default(int);
	}

	[Token(Token = "0x6000C8F")]
	[Address(RVA = "0x553604", Offset = "0x553604", VA = "0x553604")]
	public void AddLog(string log)
	{
	}

	[Token(Token = "0x6000C92")]
	[Address(RVA = "0x53BB20", Offset = "0x53BB20", VA = "0x53BB20")]
	internal void GetGeometryBuffer()
	{
	}

	[Token(Token = "0x6000C93")]
	[Address(RVA = "0x536E8C", Offset = "0x536E8C", VA = "0x536E8C")]
	internal void FreeGeometryBuffer()
	{
	}

	[Token(Token = "0x6000C94")]
	[Address(RVA = "0x55362C", Offset = "0x55362C", VA = "0x55362C")]
	public void ShowDebug()
	{
	}

	[Token(Token = "0x6000C95")]
	[Address(RVA = "0x5538BC", Offset = "0x5538BC", VA = "0x5538BC")]
	public new string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000C96")]
	[Address(RVA = "0x544A78", Offset = "0x544A78", VA = "0x544A78")]
	public static Vector3 GetChunkPos(Vector3 pos)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C97")]
	[Address(RVA = "0x553D44", Offset = "0x553D44", VA = "0x553D44")]
	public int GetXZHeight(int x, int z)
	{
		return default(int);
	}

	[Token(Token = "0x6000C98")]
	[Address(RVA = "0x54CB40", Offset = "0x54CB40", VA = "0x54CB40")]
	public int GetXZHeight(Vector3 pos)
	{
		return default(int);
	}

	[Token(Token = "0x6000C99")]
	[Address(RVA = "0x545ED4", Offset = "0x545ED4", VA = "0x545ED4")]
	public static Vector3 GetPosInChunkCoords(Vector3 pos)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C9A")]
	[Address(RVA = "0x553D94", Offset = "0x553D94", VA = "0x553D94")]
	public LightCube AddLight(int x, int y, int z, Color lightColor)
	{
		return null;
	}

	[Token(Token = "0x6000C9B")]
	[Address(RVA = "0x553D9C", Offset = "0x553D9C", VA = "0x553D9C")]
	public void RemoveLight(int x, int y, int z)
	{
	}

	[Token(Token = "0x6000C9C")]
	[Address(RVA = "0x553DA0", Offset = "0x553DA0", VA = "0x553DA0")]
	private uint GetCubeType(int x, int y, int z)
	{
		return default(uint);
	}

	[Token(Token = "0x6000C9D")]
	[Address(RVA = "0x553F38", Offset = "0x553F38", VA = "0x553F38")]
	private bool GetNormalizedXYZinChunk(ref int x, ref int y, ref int z, ref Chunk chunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C9E")]
	[Address(RVA = "0x546030", Offset = "0x546030", VA = "0x546030")]
	internal void SetBlockWithHeightUpdate(int x, int y, int z, uint newBlockID)
	{
	}

	[Token(Token = "0x6000C9F")]
	[Address(RVA = "0x5540C4", Offset = "0x5540C4", VA = "0x5540C4")]
	internal void UpdateLightMap(int index, uint oldBlock, uint newBlock)
	{
	}

	[Token(Token = "0x6000CA0")]
	[Address(RVA = "0x53BE7C", Offset = "0x53BE7C", VA = "0x53BE7C")]
	public void BlendInNeighbourChunks(bool light)
	{
	}

	[Token(Token = "0x6000CA1")]
	[Address(RVA = "0x540D30", Offset = "0x540D30", VA = "0x540D30")]
	public void RebuildMeshGeometry()
	{
	}

	[Token(Token = "0x6000CA2")]
	[Address(RVA = "0x5544C4", Offset = "0x5544C4", VA = "0x5544C4")]
	public void CreateGreedyMesh()
	{
	}

	[Token(Token = "0x6000CA3")]
	[Address(RVA = "0x5550A0", Offset = "0x5550A0", VA = "0x5550A0")]
	private bool data(int x, int y, int z)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CA4")]
	[Address(RVA = "0x54DB7C", Offset = "0x54DB7C", VA = "0x54DB7C")]
	public void FinishRebuild(bool relightOnly)
	{
	}

	[Token(Token = "0x6000CA5")]
	[Address(RVA = "0x53D014", Offset = "0x53D014", VA = "0x53D014")]
	public void Relight()
	{
	}

	[Token(Token = "0x6000CA6")]
	[Address(RVA = "0x555204", Offset = "0x555204", VA = "0x555204")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000CA7")]
	[Address(RVA = "0x5366B8", Offset = "0x5366B8", VA = "0x5366B8")]
	public void Release()
	{
	}

	[Token(Token = "0x6000CA8")]
	[Address(RVA = "0x55578C", Offset = "0x55578C", VA = "0x55578C")]
	public static void DestroyMeshPool()
	{
	}

	[Token(Token = "0x6000CA9")]
	[Address(RVA = "0x54F484", Offset = "0x54F484", VA = "0x54F484")]
	internal void FreeChunkData()
	{
	}

	[Token(Token = "0x6000CAA")]
	[Address(RVA = "0x542AF4", Offset = "0x542AF4", VA = "0x542AF4")]
	public string ToString2()
	{
		return null;
	}

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0x5388F8", Offset = "0x5388F8", VA = "0x5388F8")]
	internal void Init(BlockTerrain parentTerrain, int chunkX, int chunkY, int chunkZ, long index)
	{
	}

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0x537024", Offset = "0x537024", VA = "0x537024")]
	public void ResetData()
	{
	}

	[Token(Token = "0x6000CAD")]
	[Address(RVA = "0x5396F8", Offset = "0x5396F8", VA = "0x5396F8")]
	public bool Load(Stream worldDataStream, int filePos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CAE")]
	[Address(RVA = "0x53A7E4", Offset = "0x53A7E4", VA = "0x53A7E4")]
	public void GenerateHeightMap()
	{
	}

	[Token(Token = "0x6000CAF")]
	[Address(RVA = "0x555208", Offset = "0x555208", VA = "0x555208")]
	public void Save()
	{
	}

	[Token(Token = "0x6000CB0")]
	[Address(RVA = "0x54D7BC", Offset = "0x54D7BC", VA = "0x54D7BC")]
	internal void InstantiateDeferredGameObjects()
	{
	}

	[Token(Token = "0x6000CB1")]
	[Address(RVA = "0x555D50", Offset = "0x555D50", VA = "0x555D50")]
	internal void CreateGameObjectsAt(BlockBase block, Vector3 pos)
	{
	}

	[Token(Token = "0x6000CB2")]
	[Address(RVA = "0x556190", Offset = "0x556190", VA = "0x556190")]
	internal void DeleteGameObjectsAt(Vector3 pos)
	{
	}

	[Token(Token = "0x6000CB3")]
	[Address(RVA = "0x556394", Offset = "0x556394", VA = "0x556394")]
	public uint GetBlock(Vector3 pos)
	{
		return default(uint);
	}

	[Token(Token = "0x6000CB4")]
	[Address(RVA = "0x5564A4", Offset = "0x5564A4", VA = "0x5564A4")]
	public ushort GetLight(Vector3 pos)
	{
		return default(ushort);
	}

	[Token(Token = "0x6000CB5")]
	[Address(RVA = "0x5565B0", Offset = "0x5565B0", VA = "0x5565B0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000CB6")]
	[Address(RVA = "0x557284", Offset = "0x557284", VA = "0x557284")]
	public void AddLight(int index, byte val, byte channel)
	{
	}

	[Token(Token = "0x6000CB7")]
	[Address(RVA = "0x55740C", Offset = "0x55740C", VA = "0x55740C")]
	public void RemoveLight(int index, byte channel)
	{
	}

	[Token(Token = "0x6000CB8")]
	[Address(RVA = "0x557590", Offset = "0x557590", VA = "0x557590")]
	public byte GetLight(int x, int y, int z, byte channelShift)
	{
		return default(byte);
	}

	[Token(Token = "0x6000CB9")]
	[Address(RVA = "0x5576D8", Offset = "0x5576D8", VA = "0x5576D8")]
	public byte GetAdjLight(int index, byte channel)
	{
		return default(byte);
	}

	[Token(Token = "0x6000CBA")]
	[Address(RVA = "0x53F560", Offset = "0x53F560", VA = "0x53F560")]
	public void PropagateLightNew(byte channel)
	{
	}

	[Token(Token = "0x6000CBB")]
	[Address(RVA = "0x557D88", Offset = "0x557D88", VA = "0x557D88")]
	private void PropagateBrightnessToXYZNew(Chunk ch, int x, int y, int z, int brightnesslevel)
	{
	}

	[Token(Token = "0x6000CBC")]
	[Address(RVA = "0x5578D0", Offset = "0x5578D0", VA = "0x5578D0")]
	private void RemoveBrightnessAtXYZ(Chunk ch, int x, int y, int z, byte lightLevel)
	{
	}

	[Token(Token = "0x6000CBD")]
	[Address(RVA = "0x54A0EC", Offset = "0x54A0EC", VA = "0x54A0EC")]
	public bool Raycast(UnityEngine.Ray ray, out RaycastHit rs, out RaycastHit rs_sub, float maxDistance, bool ignoreNonWalkable)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001DA")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235EDC", Offset = "0x235EDC")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235EDC", Offset = "0x235EDC")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x235EDC", Offset = "0x235EDC")]
public class ChunkMeshUnity : MonoBehaviour
{
	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	internal MeshFilter meshFilter;

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal MeshRenderer meshRenderer;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	internal Mesh visualMesh;

	[Token(Token = "0x4000B6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal MeshCollider meshCollider;

	[Token(Token = "0x4000B70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	internal Mesh colliderMesh;

	[Token(Token = "0x1700022D")]
	public bool RenderComponent
	{
		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x552EE8", Offset = "0x552EE8", VA = "0x552EE8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x552FA0", Offset = "0x552FA0", VA = "0x552FA0")]
		set
		{
		}
	}

	[Token(Token = "0x1700022E")]
	public bool ColliderComponent
	{
		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x553314", Offset = "0x553314", VA = "0x553314")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x55305C", Offset = "0x55305C", VA = "0x55305C")]
		set
		{
		}
	}

	[Token(Token = "0x6000CBF")]
	[Address(RVA = "0x558860", Offset = "0x558860", VA = "0x558860")]
	public ChunkMeshUnity()
	{
	}

	[Token(Token = "0x6000CC0")]
	[Address(RVA = "0x555BB4", Offset = "0x555BB4", VA = "0x555BB4")]
	internal void Init()
	{
	}

	[Token(Token = "0x6000CC1")]
	[Address(RVA = "0x555A48", Offset = "0x555A48", VA = "0x555A48")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20001DB")]
[ExecuteInEditMode]
public class ChunkPosCalculator : MonoBehaviour
{
	[Token(Token = "0x4000B71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 ChunkRel;

	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 ChunkCoords;

	[Token(Token = "0x4000B73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public BlockBase block;

	[Token(Token = "0x4000B74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BlockTerrain terrain;

	[Token(Token = "0x6000CC6")]
	[Address(RVA = "0x558868", Offset = "0x558868", VA = "0x558868")]
	public ChunkPosCalculator()
	{
	}
}
[Token(Token = "0x20001DC")]
public class ChunkWorkerThread
{
	[Token(Token = "0x20001DD")]
	public delegate void ThreadFunc(int threadNum);

	[Token(Token = "0x4000B75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public List<Exception> exceptions;

	[Token(Token = "0x4000B76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int mIndex;

	[Token(Token = "0x4000B77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Thread mThread;

	[Token(Token = "0x4000B78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool mRunning;

	[Token(Token = "0x4000B79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private object lockObj;

	[Token(Token = "0x4000B7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool start;

	[Token(Token = "0x4000B7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ThreadFunc mFunc;

	[Token(Token = "0x1700022F")]
	public bool Start
	{
		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x547678", Offset = "0x547678", VA = "0x547678")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x5438B0", Offset = "0x5438B0", VA = "0x5438B0")]
		set
		{
		}
	}

	[Token(Token = "0x17000230")]
	public bool Running
	{
		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x547644", Offset = "0x547644", VA = "0x547644")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x54758C", Offset = "0x54758C", VA = "0x54758C")]
		set
		{
		}
	}

	[Token(Token = "0x6000CC7")]
	[Address(RVA = "0x547424", Offset = "0x547424", VA = "0x547424")]
	public ChunkWorkerThread(int index, ThreadFunc func)
	{
	}

	[Token(Token = "0x6000CCC")]
	[Address(RVA = "0x5475C0", Offset = "0x5475C0", VA = "0x5475C0")]
	public static void Sleep(int ms)
	{
	}

	[Token(Token = "0x6000CCD")]
	[Address(RVA = "0x558928", Offset = "0x558928", VA = "0x558928")]
	public void Run()
	{
	}

	[Token(Token = "0x6000CCE")]
	[Address(RVA = "0x558E24", Offset = "0x558E24", VA = "0x558E24")]
	public void Abort()
	{
	}
}
[Token(Token = "0x20001DE")]
public class DistanceCull : MonoBehaviour
{
	[Token(Token = "0x4000B7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject activeTarget;

	[Token(Token = "0x4000B7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float CullDistance;

	[Token(Token = "0x4000B7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float sqrCullDistance;

	[Token(Token = "0x4000B7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Culled;

	[Token(Token = "0x6000CD3")]
	[Address(RVA = "0x49D7D0", Offset = "0x49D7D0", VA = "0x49D7D0")]
	public DistanceCull()
	{
	}

	[Token(Token = "0x6000CD4")]
	[Address(RVA = "0x49D7E4", Offset = "0x49D7E4", VA = "0x49D7E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CD5")]
	[Address(RVA = "0x49D8B8", Offset = "0x49D8B8", VA = "0x49D8B8")]
	private void Update()
	{
	}
}
[Token(Token = "0x20001DF")]
public class EditorMaterialScreen : MonoBehaviour
{
	[Token(Token = "0x20001E0")]
	public delegate void MaterialSelectedDelegate(uint matSelected);

	[Token(Token = "0x4000B80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private InGameEditor editor;

	[Token(Token = "0x4000B81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public MaterialSelectedDelegate materialSelectedCallback;

	[Token(Token = "0x6000CD6")]
	[Address(RVA = "0x4A0C90", Offset = "0x4A0C90", VA = "0x4A0C90")]
	public EditorMaterialScreen()
	{
	}

	[Token(Token = "0x6000CD7")]
	[Address(RVA = "0x4A0C98", Offset = "0x4A0C98", VA = "0x4A0C98")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CD8")]
	[Address(RVA = "0x4A0D20", Offset = "0x4A0D20", VA = "0x4A0D20")]
	internal void OnGUIInternal(uint material)
	{
	}
}
[Token(Token = "0x20001E1")]
public class ElectricGraph : MonoBehaviour
{
	[Token(Token = "0x4000B82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] sideNames;

	[Token(Token = "0x4000B83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Vector3[] posOffsets;

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Vector3[] blockOffsets;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static List<List<int>> connectableSides;

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int[][][,] connectableBlocks;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<string, int> sideNameIndexMap;

	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal Dictionary<Vector3, ElectricNode> nodes;

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Dictionary<long, List<ElectricNode>> chunkNodeMapping;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal System.Collections.Generic.HashSet<ElectricNode> electricSource;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	internal List<ElectricNode> electricConsumer;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BlockTerrain terrain;

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool simluate;

	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int ticksPerSecond;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float nextUpdate;

	[Token(Token = "0x4000B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastUpdateTime;

	[Token(Token = "0x4000B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int simulationDelay;

	[Token(Token = "0x4000B92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Queue<ElectricNode> nodesToVisit;

	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool[] visitedNodes;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int maxConsumerUpdate;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int consumerIndex;

	[Token(Token = "0x14000009")]
	public event EventHandler<EventArgs<Triple<uint, Vector3, int>>> ConsumerSignalized
	{
		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x4A61B4", Offset = "0x4A61B4", VA = "0x4A61B4")]
		add
		{
		}
		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x4A62C0", Offset = "0x4A62C0", VA = "0x4A62C0")]
		remove
		{
		}
	}

	[Token(Token = "0x6000CDD")]
	[Address(RVA = "0x4A1840", Offset = "0x4A1840", VA = "0x4A1840")]
	public ElectricGraph()
	{
	}

	[Token(Token = "0x6000CDE")]
	[Address(RVA = "0x4A2B88", Offset = "0x4A2B88", VA = "0x4A2B88")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000CDF")]
	[Address(RVA = "0x4A2C84", Offset = "0x4A2C84", VA = "0x4A2C84")]
	public ElectricNode GetNode(Vector3 pos, uint value)
	{
		return null;
	}

	[Token(Token = "0x6000CE0")]
	[Address(RVA = "0x4A2ED8", Offset = "0x4A2ED8", VA = "0x4A2ED8")]
	public void AddNode(Vector3 pos, int value, int energyLevel)
	{
	}

	[Token(Token = "0x6000CE1")]
	[Address(RVA = "0x4A40D4", Offset = "0x4A40D4", VA = "0x4A40D4")]
	public void RemoveNode(Vector3 pos, int value)
	{
	}

	[Token(Token = "0x6000CE2")]
	[Address(RVA = "0x4A4C10", Offset = "0x4A4C10", VA = "0x4A4C10")]
	public void RemoveChunkNodes(Chunk ch)
	{
	}

	[Token(Token = "0x6000CE3")]
	[Address(RVA = "0x4A5250", Offset = "0x4A5250", VA = "0x4A5250")]
	public void InternalUpdate()
	{
	}

	[Token(Token = "0x6000CE4")]
	[Address(RVA = "0x4A52C0", Offset = "0x4A52C0", VA = "0x4A52C0")]
	public void Simulate()
	{
	}

	[Token(Token = "0x6000CE5")]
	[Address(RVA = "0x4A5CAC", Offset = "0x4A5CAC", VA = "0x4A5CAC")]
	private void UpdateConsumer()
	{
	}

	[Token(Token = "0x6000CE8")]
	[Address(RVA = "0x4A63CC", Offset = "0x4A63CC", VA = "0x4A63CC")]
	public void Signalize(uint block, Vector3 pos, int energyLevel)
	{
	}

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0x4A5B84", Offset = "0x4A5B84", VA = "0x4A5B84")]
	private void ResizeAndClearNodeHashArray()
	{
	}

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0x4A6644", Offset = "0x4A6644", VA = "0x4A6644")]
	private void OnDrawGizmos()
	{
	}
}
[Token(Token = "0x20001E2")]
internal class ElectricNodeEqualityComparer : IEqualityComparer<ElectricNode>
{
	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0x4A8084", Offset = "0x4A8084", VA = "0x4A8084")]
	public ElectricNodeEqualityComparer()
	{
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0x4A808C", Offset = "0x4A808C", VA = "0x4A808C", Slot = "4")]
	public bool Equals(ElectricNode n1, ElectricNode n2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0x4A8190", Offset = "0x4A8190", VA = "0x4A8190", Slot = "5")]
	public int GetHashCode(ElectricNode pn)
	{
		return default(int);
	}
}
[Token(Token = "0x20001E3")]
public class ElectricNode
{
	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int index;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 pos;

	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int energyLevel;

	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int side;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<ElectricNode> connectedNodes;

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0x4A4010", Offset = "0x4A4010", VA = "0x4A4010")]
	public ElectricNode(Vector3 pos_, int var)
	{
	}
}
namespace GameEvents
{
	[Token(Token = "0x20001E4")]
	public class Explosion : MonoBehaviour
	{
		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected float mMSec;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lifeTime;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3[] mSphereOffsets;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject mParticleSystem;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string explosionSound;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public BlockTerrain terrain;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool mFirstUpdate;

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x4B5F90", Offset = "0x4B5F90", VA = "0x4B5F90")]
		public Explosion()
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x4B5FAC", Offset = "0x4B5FAC", VA = "0x4B5FAC")]
		public static void PreCalcSphereOffsets()
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x4B620C", Offset = "0x4B620C", VA = "0x4B620C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x4B6438", Offset = "0x4B6438", VA = "0x4B6438")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x4B64C8", Offset = "0x4B64C8", VA = "0x4B64C8")]
		private void DoExposion(Vector3 center, float expansionRadius)
		{
		}
	}
}
[Token(Token = "0x20001E5")]
public interface IChunkMesh
{
}
[Token(Token = "0x20001E6")]
public class InGameEditor : MonoBehaviour
{
	[Token(Token = "0x20001E7")]
	public delegate string[] ListFilesMethod();

	[Token(Token = "0x20001E8")]
	public delegate bool LoadProjectMethod(string projectName);

	[Token(Token = "0x20001E9")]
	public delegate string QuickSaveMethod();

	[Token(Token = "0x20001EA")]
	public delegate bool CreateProjectMethod(string projectName);

	[Token(Token = "0x20001EB")]
	public delegate void EditorExtensionOnGUI();

	[Token(Token = "0x4000BA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public BlockTerrain terrain;

	[Token(Token = "0x4000BA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Camera editorCam;

	[Token(Token = "0x4000BA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject selectionCubePrefab;

	[Token(Token = "0x4000BA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material selectionCubeMaterial;

	[Token(Token = "0x4000BA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool hasControl;

	[Token(Token = "0x4000BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool editMode;

	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool defaultPositionOnStart;

	[Token(Token = "0x4000BAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	public bool autoSaveOnExit;

	[Token(Token = "0x4000BAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float keyspeed;

	[Token(Token = "0x4000BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private string message;

	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float displaytime;

	[Token(Token = "0x4000BAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int butwitdh;

	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	internal bool showMaterialScreen;

	[Token(Token = "0x4000BB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	internal bool showMaterialScreenNextUpdate;

	[Token(Token = "0x4000BB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	internal bool showConfigScreen;

	[Token(Token = "0x4000BB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	internal bool showEditorExtension;

	[Token(Token = "0x4000BB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 middleMouseStart;

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 leftMouseStart;

	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 rightMouseStart;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 cameraStart;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float camDistance;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float roty;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float rotx;

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public uint material;

	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private List<GameObject> showObjects;

	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Queue<GameObject> showObjectsPool;

	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 lastPos;

	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 curLineLength;

	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private List<Touple<MemoryStream, List<Chunk>>> undoSteps;

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int undoRedoPointer;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int wallHeight;

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform activeTarget;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public EditorMaterialScreen materialScreen;

	[Token(Token = "0x4000BC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public ListFilesMethod listFileCallBack;

	[Token(Token = "0x4000BC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public LoadProjectMethod loadProjectCallBack;

	[Token(Token = "0x4000BC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public QuickSaveMethod quickSaveCallBack;

	[Token(Token = "0x4000BC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public CreateProjectMethod createProjectCallBack;

	[Token(Token = "0x4000BC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public EditorExtensionOnGUI editorExtensionCallback;

	[Token(Token = "0x4000BCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public KeyCode pickKey;

	[Token(Token = "0x4000BCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public Vector2 scrollPosition;

	[Token(Token = "0x4000BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public Vector2 scrollPosition2;

	[Token(Token = "0x4000BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private string[] files;

	[Token(Token = "0x1400000A")]
	public event EventHandler<EventArgs<string>> TextureLoaded
	{
		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x4B974C", Offset = "0x4B974C", VA = "0x4B974C")]
		add
		{
		}
		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x4B9858", Offset = "0x4B9858", VA = "0x4B9858")]
		remove
		{
		}
	}

	[Token(Token = "0x6000CF6")]
	[Address(RVA = "0x4B94B0", Offset = "0x4B94B0", VA = "0x4B94B0")]
	public InGameEditor()
	{
	}

	[Token(Token = "0x6000CF9")]
	[Address(RVA = "0x4B9964", Offset = "0x4B9964", VA = "0x4B9964")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CFA")]
	[Address(RVA = "0x4B9CEC", Offset = "0x4B9CEC", VA = "0x4B9CEC")]
	private void ModifyStreamReceived(object sender, EventArgs<byte[]> e)
	{
	}

	[Token(Token = "0x6000CFB")]
	[Address(RVA = "0x4BA0A0", Offset = "0x4BA0A0", VA = "0x4BA0A0")]
	public void terrain_ModifiedBlocksReceived(object sender, EventArgs<Queue<Touple<Vector3, uint>>> e)
	{
	}

	[Token(Token = "0x6000CFC")]
	[Address(RVA = "0x4BA308", Offset = "0x4BA308", VA = "0x4BA308")]
	private void OnSetColor(Color color)
	{
	}

	[Token(Token = "0x6000CFD")]
	[Address(RVA = "0x4BA524", Offset = "0x4BA524", VA = "0x4BA524")]
	private void OnGetColor(ColorPicker picker)
	{
	}

	[Token(Token = "0x6000CFE")]
	[Address(RVA = "0x4BA590", Offset = "0x4BA590", VA = "0x4BA590")]
	internal void OnMaterialSelected(uint mat)
	{
	}

	[Token(Token = "0x6000CFF")]
	[Address(RVA = "0x4BA5A0", Offset = "0x4BA5A0", VA = "0x4BA5A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D00")]
	[Address(RVA = "0x4BE1F0", Offset = "0x4BE1F0", VA = "0x4BE1F0")]
	private List<Vector3> GetFloodedPosList(Vector3 rootSeed, int maxCount, uint seedMatchMaterial, List<uint> validMaterials)
	{
		return null;
	}

	[Token(Token = "0x6000D01")]
	[Address(RVA = "0x4BDFDC", Offset = "0x4BDFDC", VA = "0x4BDFDC")]
	private GameObject GetPreviewObject()
	{
		return null;
	}

	[Token(Token = "0x6000D02")]
	[Address(RVA = "0x4BDE1C", Offset = "0x4BDE1C", VA = "0x4BDE1C")]
	private void ClearPreviewObjectPool()
	{
	}

	[Token(Token = "0x6000D03")]
	[Address(RVA = "0x4BF754", Offset = "0x4BF754", VA = "0x4BF754")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000D04")]
	[Address(RVA = "0x4BE964", Offset = "0x4BE964", VA = "0x4BE964")]
	private void AddUndoStep(List<Chunk> modifiedChunks)
	{
	}

	[Token(Token = "0x6000D05")]
	[Address(RVA = "0x4BF750", Offset = "0x4BF750", VA = "0x4BF750")]
	private void Undo()
	{
	}

	[Token(Token = "0x6000D06")]
	[Address(RVA = "0x4BE968", Offset = "0x4BE968", VA = "0x4BE968")]
	private void QuickSave()
	{
	}

	[Token(Token = "0x6000D07")]
	[Address(RVA = "0x4BF410", Offset = "0x4BF410", VA = "0x4BF410")]
	private void QuickLoad()
	{
	}

	[Token(Token = "0x6000D08")]
	[Address(RVA = "0x4BFD38", Offset = "0x4BFD38", VA = "0x4BFD38")]
	private void OnGUI()
	{
	}
}
[Token(Token = "0x20001EC")]
public class JumpScript : MonoBehaviour
{
	[Token(Token = "0x6000D1D")]
	[Address(RVA = "0x6AF2E4", Offset = "0x6AF2E4", VA = "0x6AF2E4")]
	public JumpScript()
	{
	}

	[Token(Token = "0x6000D1E")]
	[Address(RVA = "0x6AF2EC", Offset = "0x6AF2EC", VA = "0x6AF2EC")]
	private void OnTriggerEnter(Collider other)
	{
	}
}
[Token(Token = "0x20001ED")]
internal struct LightNode
{
	[Token(Token = "0x4000BCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int index;

	[Token(Token = "0x4000BCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public Chunk chunk;

	[Token(Token = "0x6000D1F")]
	[Address(RVA = "0x2BD6C0", Offset = "0x2BD6C0", VA = "0x2BD6C0")]
	public LightNode(int indx, Chunk ch)
	{
	}
}
[Token(Token = "0x20001EE")]
internal struct LightRemovalNode
{
	[Token(Token = "0x4000BD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int index;

	[Token(Token = "0x4000BD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public byte val;

	[Token(Token = "0x4000BD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Chunk chunk;

	[Token(Token = "0x6000D20")]
	[Address(RVA = "0x2BD728", Offset = "0x2BD728", VA = "0x2BD728")]
	public LightRemovalNode(int indx, byte vl, Chunk ch)
	{
	}
}
[Token(Token = "0x20001EF")]
public class LightCube : IDisposable
{
	[Token(Token = "0x4000BD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Vector3 mOffset;

	[Token(Token = "0x4000BD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 mChunkBasePos;

	[Token(Token = "0x4000BD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color mColor;

	[Token(Token = "0x6000D21")]
	[Address(RVA = "0x6B142C", Offset = "0x6B142C", VA = "0x6B142C")]
	public LightCube(Vector3 offsetPos, Color color, Vector3 chunkBasePos, bool fire)
	{
	}

	[Token(Token = "0x6000D22")]
	[Address(RVA = "0x6B1484", Offset = "0x6B1484", VA = "0x6B1484", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20001F0")]
public class LightProbe : MonoBehaviour
{
	[Token(Token = "0x4000BD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int assignedVertexIndex;

	[Token(Token = "0x4000BD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<Vector3> probeVectors;

	[Token(Token = "0x6000D23")]
	[Address(RVA = "0x6B1490", Offset = "0x6B1490", VA = "0x6B1490")]
	public LightProbe()
	{
	}

	[Token(Token = "0x6000D24")]
	[Address(RVA = "0x6B1524", Offset = "0x6B1524", VA = "0x6B1524")]
	internal void DrawGizmos(Transform additionalTranslation)
	{
	}

	[Token(Token = "0x6000D25")]
	[Address(RVA = "0x6B2528", Offset = "0x6B2528", VA = "0x6B2528")]
	private void OnDrawGizmosSelected()
	{
	}
}
[Token(Token = "0x20001F1")]
public class LightProbeCollection : MonoBehaviour
{
	[Token(Token = "0x4000BD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform sourceMeshTransform;

	[Token(Token = "0x4000BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform additionalParentTransform;

	[Token(Token = "0x4000BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float borderDistance;

	[Token(Token = "0x4000BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool usePosition;

	[Token(Token = "0x4000BDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool removeInnerProbes;

	[Token(Token = "0x6000D26")]
	[Address(RVA = "0x6B252C", Offset = "0x6B252C", VA = "0x6B252C")]
	public LightProbeCollection()
	{
	}
}
[Token(Token = "0x20001F2")]
public class LODParticles : MonoBehaviour
{
	[Token(Token = "0x4000BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private ParticleSystem[] pss;

	[Token(Token = "0x4000BDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LODParticles mainInstance;

	[Token(Token = "0x4000BDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int maxParticleSystems;

	[Token(Token = "0x4000BE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<LODParticles>[] priorityQueue;

	[Token(Token = "0x4000BE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool psEnabled;

	[Token(Token = "0x4000BE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int frameCount;

	[Token(Token = "0x4000BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Transform mainCam;

	[Token(Token = "0x4000BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int checkInterval;

	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public GameObject simplifiedObject;

	[Token(Token = "0x4000BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int lastDistance;

	[Token(Token = "0x1400000B")]
	public event EventHandler<EventArgs<bool>> LODChanged
	{
		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x6AF424", Offset = "0x6AF424", VA = "0x6AF424")]
		add
		{
		}
		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x6AF530", Offset = "0x6AF530", VA = "0x6AF530")]
		remove
		{
		}
	}

	[Token(Token = "0x6000D27")]
	[Address(RVA = "0x6AF40C", Offset = "0x6AF40C", VA = "0x6AF40C")]
	public LODParticles()
	{
	}

	[Token(Token = "0x6000D2A")]
	[Address(RVA = "0x6AF63C", Offset = "0x6AF63C", VA = "0x6AF63C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D2B")]
	[Address(RVA = "0x6AF7B0", Offset = "0x6AF7B0", VA = "0x6AF7B0")]
	private void RemoveFromPQ()
	{
	}

	[Token(Token = "0x6000D2C")]
	[Address(RVA = "0x6AF8FC", Offset = "0x6AF8FC", VA = "0x6AF8FC")]
	private void UpdateInPQ()
	{
	}

	[Token(Token = "0x6000D2D")]
	[Address(RVA = "0x6AFE08", Offset = "0x6AFE08", VA = "0x6AFE08")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D2E")]
	[Address(RVA = "0x6AFC58", Offset = "0x6AFC58", VA = "0x6AFC58")]
	private void SetEnabled(bool enablePS)
	{
	}

	[Token(Token = "0x6000D2F")]
	[Address(RVA = "0x6AFF2C", Offset = "0x6AFF2C", VA = "0x6AFF2C")]
	private void Update()
	{
	}
}
[Serializable]
[Token(Token = "0x20001F3")]
public class PermutationConfig
{
	[Token(Token = "0x4000BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string materialName;

	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public uint baseBlockID;

	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool useBlockIDAsVariant;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool editorOnly;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool liteLocked;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public byte defaultColorIndex;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int lightRedux;

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool emitsLight;

	[Token(Token = "0x4000BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color lightColor;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Material blockMaterial;

	[Token(Token = "0x4000BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string walkSound;

	[Token(Token = "0x4000BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public GameObject alternativeIconMesh;

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useLightProbes;

	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool unLit;

	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector2 baseUVOffset;

	[Token(Token = "0x4000BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool useOffsets;

	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool relativeOffsets;

	[Token(Token = "0x6000D31")]
	[Address(RVA = "0x460F34", Offset = "0x460F34", VA = "0x460F34")]
	public PermutationConfig()
	{
	}
}
[Token(Token = "0x20001F4")]
public class MaterialPermutator : MonoBehaviour
{
	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform sourceMaterial;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<PermutationConfig> permutationList;

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0x6B9A08", Offset = "0x6B9A08", VA = "0x6B9A08")]
	public MaterialPermutator()
	{
	}

	[Token(Token = "0x6000D33")]
	[Address(RVA = "0x6B9A10", Offset = "0x6B9A10", VA = "0x6B9A10")]
	public void RemovePermutations()
	{
	}

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0x6B9D4C", Offset = "0x6B9D4C", VA = "0x6B9D4C")]
	public void GeneratePermutations()
	{
	}

	[Token(Token = "0x6000D35")]
	[Address(RVA = "0x6BA450", Offset = "0x6BA450", VA = "0x6BA450")]
	public void AddNewEntry()
	{
	}
}
[Token(Token = "0x20001F5")]
public class Materials : MonoBehaviour
{
	[Token(Token = "0x4000BFB")]
	public const int MAXMATERIALS = 8388608;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Materials _instance;

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool EditorMode;

	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal Dictionary<Transform, List<LightProbe>> mLPC;

	[Token(Token = "0x4000BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	internal BlockBase[] blockTypes;

	[Token(Token = "0x4000C00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal int[] neighbourOffsets;

	[Token(Token = "0x4000C01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Dictionary<Material, int> materialsDB;

	[Token(Token = "0x4000C02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal Material[] blockMaterials;

	[Token(Token = "0x4000C03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public List<Color> inkColors;

	[Token(Token = "0x4000C04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	internal List<uint> selectableIDs;

	[Token(Token = "0x4000C05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	internal List<uint> generatorIDs;

	[Token(Token = "0x4000C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool autoCompile;

	[Token(Token = "0x4000C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool supportMultiMaterial;

	[Token(Token = "0x4000C08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Camera iconCam;

	[Token(Token = "0x4000C09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Light iconLight;

	[Token(Token = "0x4000C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool renderIcons;

	[Token(Token = "0x4000C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int iconSize;

	[Token(Token = "0x4000C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float iconAmbient;

	[Token(Token = "0x4000C0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float texMaxEpsilon;

	[Token(Token = "0x4000C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Material mainPreviewMaterial;

	[Token(Token = "0x4000C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Texture2D materialIconTexture;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Texture2D materialTexturePadded;

	[Token(Token = "0x4000C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Texture2D materialAtlas;

	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int materialCount;

	[Token(Token = "0x4000C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Touple<Light, bool>> lightStates;

	[Token(Token = "0x4000C14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Texture2D colorPalette;

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject instancedBlocks;

	[Token(Token = "0x4000C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B118", Offset = "0x23B118")]
	private static Comparison<BlockBase> <>f__am$cache0;

	[Token(Token = "0x17000231")]
	public static Materials Instance
	{
		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x6B2414", Offset = "0x6B2414", VA = "0x6B2414")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000232")]
	public BlockBase[] BlockTypes
	{
		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x6BA8C0", Offset = "0x6BA8C0", VA = "0x6BA8C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000233")]
	public Material[] BlockMaterials
	{
		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x6BA8C8", Offset = "0x6BA8C8", VA = "0x6BA8C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000234")]
	public List<uint> SelectableIDs
	{
		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x6BA98C", Offset = "0x6BA98C", VA = "0x6BA98C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000235")]
	public List<uint> GeneratorIDs
	{
		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x6BA994", Offset = "0x6BA994", VA = "0x6BA994")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000236")]
	public bool Compiled
	{
		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x6BAC54", Offset = "0x6BAC54", VA = "0x6BAC54")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000D36")]
	[Address(RVA = "0x6BA754", Offset = "0x6BA754", VA = "0x6BA754")]
	public Materials()
	{
	}

	[Token(Token = "0x6000D3A")]
	[Address(RVA = "0x6BA8D0", Offset = "0x6BA8D0", VA = "0x6BA8D0")]
	public Material GetRealtimeMaterial(Material origMat)
	{
		return null;
	}

	[Token(Token = "0x6000D3D")]
	[Address(RVA = "0x6BA99C", Offset = "0x6BA99C", VA = "0x6BA99C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D3E")]
	[Address(RVA = "0x6BC5C4", Offset = "0x6BC5C4", VA = "0x6BC5C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D40")]
	[Address(RVA = "0x6BD3B8", Offset = "0x6BD3B8", VA = "0x6BD3B8")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000D41")]
	[Address(RVA = "0x6BD740", Offset = "0x6BD740", VA = "0x6BD740")]
	public static Color hexToColor(string hex)
	{
		return default(Color);
	}

	[Token(Token = "0x6000D42")]
	[Address(RVA = "0x6BAC84", Offset = "0x6BAC84", VA = "0x6BAC84")]
	public void Compile()
	{
	}

	[Token(Token = "0x6000D43")]
	[Address(RVA = "0x6BF270", Offset = "0x6BF270", VA = "0x6BF270")]
	public void ResetIconLight()
	{
	}

	[Token(Token = "0x6000D44")]
	[Address(RVA = "0x6BD984", Offset = "0x6BD984", VA = "0x6BD984")]
	public void SetupIconLight()
	{
	}

	[Token(Token = "0x6000D45")]
	[Address(RVA = "0x6BDBE8", Offset = "0x6BDBE8", VA = "0x6BDBE8")]
	private void GetLightProbesFromTransform(Transform t)
	{
	}

	[Token(Token = "0x6000D46")]
	[Address(RVA = "0x6BE11C", Offset = "0x6BE11C", VA = "0x6BE11C")]
	private void GetMaterialFromTransform(Transform t)
	{
	}

	[Token(Token = "0x6000D47")]
	[Address(RVA = "0x6BF45C", Offset = "0x6BF45C", VA = "0x6BF45C")]
	public string GetMaterialKeyName(uint valueID)
	{
		return null;
	}

	[Token(Token = "0x6000D48")]
	[Address(RVA = "0x6BC5C8", Offset = "0x6BC5C8", VA = "0x6BC5C8")]
	public void CreateMaterialPrototypes()
	{
	}

	[Token(Token = "0x6000D49")]
	[Address(RVA = "0x6BF630", Offset = "0x6BF630", VA = "0x6BF630")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000D4A")]
	[Address(RVA = "0x6BF634", Offset = "0x6BF634", VA = "0x6BF634")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DA14", Offset = "0x23DA14")]
	private static int <Compile>m__0(BlockBase a, BlockBase b)
	{
		return default(int);
	}
}
[Token(Token = "0x20001F6")]
public class MeshBlock : BlockBase
{
	[Token(Token = "0x4000C17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public List<Transform> centerSourceMesh;

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public List<Transform> leftSourceMesh;

	[Token(Token = "0x4000C19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public List<Transform> rightSourceMesh;

	[Token(Token = "0x4000C1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public List<Transform> frontSourceMesh;

	[Token(Token = "0x4000C1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public List<Transform> backSourceMesh;

	[Token(Token = "0x4000C1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public List<Transform> topSourceMesh;

	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public List<Transform> bottomSourceMesh;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public Vector2 iconUVShift;

	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public Vector2 centerUVOffsets;

	[Token(Token = "0x4000C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public Vector2 leftUVOffsets;

	[Token(Token = "0x4000C21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public Vector2 rightUVOffsets;

	[Token(Token = "0x4000C22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public Vector2 frontUVOffsets;

	[Token(Token = "0x4000C23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public Vector2 backUVOffsets;

	[Token(Token = "0x4000C24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public Vector2 topUVOffsets;

	[Token(Token = "0x4000C25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public Vector2 bottomUVOffsets;

	[Token(Token = "0x4000C26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public float mDTX;

	[Token(Token = "0x4000C27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public float mDTY;

	[Token(Token = "0x4000C28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public bool useOffsets;

	[Token(Token = "0x4000C29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x135")]
	public bool forcePadding;

	[Token(Token = "0x4000C2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	internal Mesh meshPreview;

	[Token(Token = "0x4000C2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	internal static float maxIndexVertRatio;

	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Vector2[] uvs2;

	[Token(Token = "0x6000D4B")]
	[Address(RVA = "0x6B139C", Offset = "0x6B139C", VA = "0x6B139C")]
	public MeshBlock()
	{
	}

	[Token(Token = "0x6000D4C")]
	[Address(RVA = "0x6C2374", Offset = "0x6C2374", VA = "0x6C2374")]
	public Vector2 SwapTexY(Vector2 orig)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000D4D")]
	[Address(RVA = "0x6C23C4", Offset = "0x6C23C4", VA = "0x6C23C4")]
	private void CreateTriangleNormals(Quintuple<Vector3[], Vector2[], int[], Vector3[], Vector4[]> geomSideData, out Vector3[] triNormalsArray)
	{
	}

	[Token(Token = "0x6000D4E")]
	[Address(RVA = "0x6C2714", Offset = "0x6C2714", VA = "0x6C2714", Slot = "6")]
	public override void Compile()
	{
	}

	[Token(Token = "0x6000D4F")]
	[Address(RVA = "0x6C6B20", Offset = "0x6C6B20", VA = "0x6C6B20", Slot = "7")]
	public override GameObject CreateGameObject()
	{
		return null;
	}

	[Token(Token = "0x6000D50")]
	[Address(RVA = "0x6C7358", Offset = "0x6C7358", VA = "0x6C7358", Slot = "20")]
	public virtual void CreateIconTexture()
	{
	}

	[Token(Token = "0x6000D51")]
	[Address(RVA = "0x6C3B7C", Offset = "0x6C3B7C", VA = "0x6C3B7C")]
	public Quintuple<Vector3[], Vector2[], int[], Vector3[], Vector4[]> ConvertMeshFilterList(List<Transform> transformList, Vector2 uvOffset, Materials materials, int sideIndex)
	{
		return default(Quintuple<Vector3[], Vector2[], int[], Vector3[], Vector4[]>);
	}

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0x6C8120", Offset = "0x6C8120", VA = "0x6C8120")]
	private LightProbe GetLightProbeForVertex(int vertexIndex, List<LightProbe> allLPS)
	{
		return null;
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0x6C8288", Offset = "0x6C8288", VA = "0x6C8288")]
	public static void ChangeTextureCoordinates(Vector2[] uvs, int[] triangles, Vector2 texdt, Vector2 newTexStart, int adjustPaddingType = 1)
	{
	}

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0x6C8A4C", Offset = "0x6C8A4C", VA = "0x6C8A4C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000D55")]
	[Address(RVA = "0x6C8A50", Offset = "0x6C8A50", VA = "0x6C8A50")]
	internal void DrawCompiledMesh()
	{
	}
}
[Token(Token = "0x20001F7")]
public struct Pair
{
	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ListContainer<Vector3> v;

	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ListContainer<int> t;
}
[Token(Token = "0x20001F8")]
public class MeshColliderManager : MonoBehaviour
{
	[Token(Token = "0x4000C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Dictionary<GameObject, List<GameObject>> collisionMeshes;

	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<GameObject, List<Pair>> collisionMeshesToBuild;

	[Token(Token = "0x4000C31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Dictionary<GameObject, List<GameObject>> toBeRemoved;

	[Token(Token = "0x4000C32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static MeshColliderManager instance;

	[Token(Token = "0x4000C33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int subMeshIndexCount;

	[Token(Token = "0x4000C34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int maxMeshesToBuild;

	[Token(Token = "0x4000C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3[][] vertexBuffers;

	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int[][] indexBuffers;

	[Token(Token = "0x4000C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int curBufferIndex;

	[Token(Token = "0x4000C38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Stopwatch sw;

	[Token(Token = "0x4000C39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Stopwatch sw2;

	[Token(Token = "0x4000C3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool noGarbage;

	[Token(Token = "0x17000237")]
	public static MeshColliderManager Instance
	{
		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x6C9300", Offset = "0x6C9300", VA = "0x6C9300")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000238")]
	public bool Building
	{
		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x6C9670", Offset = "0x6C9670", VA = "0x6C9670")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000239")]
	public int BuildProgress
	{
		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x6C96F8", Offset = "0x6C96F8", VA = "0x6C96F8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000D57")]
	[Address(RVA = "0x6C91A4", Offset = "0x6C91A4", VA = "0x6C91A4")]
	public MeshColliderManager()
	{
	}

	[Token(Token = "0x6000D5B")]
	[Address(RVA = "0x6C97D4", Offset = "0x6C97D4", VA = "0x6C97D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D5C")]
	[Address(RVA = "0x6C9438", Offset = "0x6C9438", VA = "0x6C9438")]
	private void Init()
	{
	}

	[Token(Token = "0x6000D5D")]
	[Address(RVA = "0x6C9838", Offset = "0x6C9838", VA = "0x6C9838")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0x6C983C", Offset = "0x6C983C", VA = "0x6C983C")]
	private void InternalUpdate()
	{
	}

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0x6CA178", Offset = "0x6CA178", VA = "0x6CA178")]
	public void Flush()
	{
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0x6C9F08", Offset = "0x6C9F08", VA = "0x6C9F08")]
	private void RemoveMeshes(List<GameObject> meshesToRemove)
	{
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0x6CA200", Offset = "0x6CA200", VA = "0x6CA200")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0x6CA520", Offset = "0x6CA520", VA = "0x6CA520")]
	public void SetMesh(GameObject source, List<Vector3> verts, List<int> triangles)
	{
	}

	[Token(Token = "0x6000D63")]
	[Address(RVA = "0x6CAE24", Offset = "0x6CAE24", VA = "0x6CAE24")]
	public void SetMeshFast(GameObject source, Vector3[] verts, int vertCount, int[] indices, int indecesCount)
	{
	}
}
[Token(Token = "0x20001F9")]
public class Project
{
	[Token(Token = "0x20001FA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x235FBC", Offset = "0x235FBC")]
	private sealed class <LoadFromStreamAsync>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x20001FB")]
		private sealed class <LoadFromStreamAsync>c__AnonStorey1
		{
			[Token(Token = "0x4000C51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Stream projectMetaStream;

			[Token(Token = "0x4000C52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal <LoadFromStreamAsync>c__Iterator0 <>f__ref$0;

			[Token(Token = "0x6000D78")]
			[Address(RVA = "0x468484", Offset = "0x468484", VA = "0x468484")]
			public <LoadFromStreamAsync>c__AnonStorey1()
			{
			}

			[Token(Token = "0x6000D79")]
			[Address(RVA = "0x468538", Offset = "0x468538", VA = "0x468538")]
			internal void <>m__0(object o, DoWorkEventArgs e)
			{
			}
		}

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal BackgroundWorker <bw>__0;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal Stream projectMetaStream;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Project $this;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private <LoadFromStreamAsync>c__AnonStorey1 $locvar0;

		[Token(Token = "0x1700023B")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0x46848C", Offset = "0x46848C", VA = "0x46848C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x468494", Offset = "0x468494", VA = "0x468494", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x4662F4", Offset = "0x4662F4", VA = "0x4662F4")]
		[DebuggerHidden]
		public <LoadFromStreamAsync>c__Iterator0()
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x4682AC", Offset = "0x4682AC", VA = "0x4682AC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x46849C", Offset = "0x46849C", VA = "0x46849C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x4684B0", Offset = "0x4684B0", VA = "0x4684B0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string mFileVersion;

	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool mPreferCompression;

	[Token(Token = "0x4000C3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int mCreatorAccountID;

	[Token(Token = "0x4000C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Guid mCurrentGUID;

	[Token(Token = "0x4000C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int mPerlinSeed;

	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int mMaxWorldChunkCountPerDimension;

	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public string mWorldName;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 mPlayerPos;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Quaternion mPlayerRot;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public double mElapsedTime;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public double mSkyTime;

	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public uint[] mMaterials;

	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool mFlyMode;

	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public BlockTerrain.TerrainGenerationType ChunkGenerationType;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool lastLoadRes;

	[Token(Token = "0x1700023A")]
	public virtual string CurrentFileVersion
	{
		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x464928", Offset = "0x464928", VA = "0x464928", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000D64")]
	[Address(RVA = "0x4647B0", Offset = "0x4647B0", VA = "0x4647B0")]
	public Project()
	{
	}

	[Token(Token = "0x6000D65")]
	[Address(RVA = "0x464924", Offset = "0x464924", VA = "0x464924", Slot = "4")]
	protected virtual void Init()
	{
	}

	[Token(Token = "0x6000D67")]
	[Address(RVA = "0x464984", Offset = "0x464984", VA = "0x464984")]
	public bool Create(string projectname)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D68")]
	[Address(RVA = "0x4653D8", Offset = "0x4653D8", VA = "0x4653D8")]
	public ValuesDictionary GetValuesDictionary(Stream projectMetaStream, string containerName)
	{
		return null;
	}

	[Token(Token = "0x6000D69")]
	[Address(RVA = "0x465B64", Offset = "0x465B64", VA = "0x465B64", Slot = "6")]
	protected virtual void RecursiveConvert(XElement node)
	{
	}

	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0x465B68", Offset = "0x465B68", VA = "0x465B68")]
	public bool LoadFromStream(Stream projectMetaStream)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D6B")]
	[Address(RVA = "0x466254", Offset = "0x466254", VA = "0x466254")]
	[DebuggerHidden]
	public IEnumerator LoadFromStreamAsync(Stream projectMetaStream)
	{
		return null;
	}

	[Token(Token = "0x6000D6C")]
	[Address(RVA = "0x4662FC", Offset = "0x4662FC", VA = "0x4662FC")]
	public bool LoadProjectHeader(Stream projectMetaStream)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D6D")]
	[Address(RVA = "0x46678C", Offset = "0x46678C", VA = "0x46678C")]
	public bool LoadProjectHeaderFast(Stream projectMetaStream)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0x4669C8", Offset = "0x4669C8", VA = "0x4669C8")]
	public bool Save(string projectname)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0x464CBC", Offset = "0x464CBC", VA = "0x464CBC")]
	public bool SaveToStream(Stream projectMetaStream)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D70")]
	[Address(RVA = "0x466CA4", Offset = "0x466CA4", VA = "0x466CA4", Slot = "7")]
	protected virtual void SyncFromDataContainer(ValuesDictionary project)
	{
	}

	[Token(Token = "0x6000D71")]
	[Address(RVA = "0x467854", Offset = "0x467854", VA = "0x467854", Slot = "8")]
	protected virtual ValuesDictionary SyncToDataContainer()
	{
		return null;
	}
}
[Token(Token = "0x20001FC")]
[ExecuteInEditMode]
public class RayTest : MonoBehaviour
{
	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Transform start;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Transform end;

	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool ignoreNonWalkable;

	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool returnSubBlockPosition;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool drawStartEnd;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Ray testray;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RaycastHit testrayresult;

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private RaycastHit testrayresult_sub;

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool hit;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public BlockTerrain terrain;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Chunk testChunk;

	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0x46B7FC", Offset = "0x46B7FC", VA = "0x46B7FC")]
	public RayTest()
	{
	}

	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0x46B814", Offset = "0x46B814", VA = "0x46B814")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D7C")]
	[Address(RVA = "0x46B958", Offset = "0x46B958", VA = "0x46B958")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D7D")]
	[Address(RVA = "0x46BD94", Offset = "0x46BD94", VA = "0x46BD94")]
	private void OnDrawGizmos()
	{
	}
}
[Token(Token = "0x20001FD")]
public class RealtimeBlockLight : MonoBehaviour
{
	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public BlockTerrain testTerrain;

	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Chunk currChunk;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public byte intensity;

	[Token(Token = "0x6000D7E")]
	[Address(RVA = "0x46C080", Offset = "0x46C080", VA = "0x46C080")]
	public RealtimeBlockLight()
	{
	}

	[Token(Token = "0x6000D7F")]
	[Address(RVA = "0x46C090", Offset = "0x46C090", VA = "0x46C090")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D80")]
	[Address(RVA = "0x46C094", Offset = "0x46C094", VA = "0x46C094")]
	private void LateUpdate()
	{
	}
}
namespace TerrainGenerators
{
	[Token(Token = "0x20001FE")]
	public class BasicTerrain : TerrainGenBase
	{
		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Perlin perlinFunc1;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Perlin perlinFunc2;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float mBaseHeight;

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x58A400", Offset = "0x58A400", VA = "0x58A400")]
		public BasicTerrain(int seed, float baseHeight)
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x58A560", Offset = "0x58A560", VA = "0x58A560", Slot = "4")]
		public override void GenerateChunk(Chunk ch)
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class ContinentalTerrain : TerrainGenBase
	{
		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float mBaseHeight;

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x58BDFC", Offset = "0x58BDFC", VA = "0x58BDFC")]
		public ContinentalTerrain(int seed, float baseHeight)
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x58BEB0", Offset = "0x58BEB0", VA = "0x58BEB0", Slot = "4")]
		public override void GenerateChunk(Chunk ch)
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class ExtendedTerrain : TerrainGenBase
	{
		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Perlin perlinFunc1;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Perlin perlinFunc2;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float mBaseHeight;

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x58CEA8", Offset = "0x58CEA8", VA = "0x58CEA8")]
		public ExtendedTerrain(int seed, float baseHeight)
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x58CFE8", Offset = "0x58CFE8", VA = "0x58CFE8", Slot = "4")]
		public override void GenerateChunk(Chunk ch)
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class FlatLand : TerrainGenBase
	{
		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float mBaseHeight;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] mDefaultMaterial;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<DeferredCreation> mDeferredObjects;

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x58ED98", Offset = "0x58ED98", VA = "0x58ED98")]
		public FlatLand(int seed, float baseHeight, uint[] defaultMaterial)
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x58EE9C", Offset = "0x58EE9C", VA = "0x58EE9C", Slot = "4")]
		public override void GenerateChunk(Chunk ch)
		{
		}
	}
	[Token(Token = "0x2000202")]
	public static class SimplexNoise
	{
		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[][] grad3;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int[] p;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int[] p0;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int[] perm;

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x58F6B4", Offset = "0x58F6B4", VA = "0x58F6B4")]
		static SimplexNoise()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x590084", Offset = "0x590084", VA = "0x590084")]
		public static void Init(int seed)
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x59032C", Offset = "0x59032C", VA = "0x59032C")]
		private static int fastfloor(double x)
		{
			return default(int);
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x590348", Offset = "0x590348", VA = "0x590348")]
		private static double dot(int[] g, double x, double y)
		{
			return default(double);
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x5903DC", Offset = "0x5903DC", VA = "0x5903DC")]
		private static double dot(int[] g, double x, double y, double z)
		{
			return default(double);
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x5904A4", Offset = "0x5904A4", VA = "0x5904A4")]
		private static double dot(int[] g, double x, double y, double z, double w)
		{
			return default(double);
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x58B800", Offset = "0x58B800", VA = "0x58B800")]
		public static float GetNoise(double xin, double yin)
		{
			return default(float);
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x58C4E0", Offset = "0x58C4E0", VA = "0x58C4E0")]
		public static float GetNoise(double pX, double pY, double pZ)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000203")]
	internal class DeferredCreation
	{
		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int x;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int y;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int z;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint material;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int additional1;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int additional2;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int additional3;

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x58BDB4", Offset = "0x58BDB4", VA = "0x58BDB4")]
		public DeferredCreation(int x_, int y_, int z_, uint material_, int additional1_, int additional2_, int additional3_)
		{
		}
	}
	[Token(Token = "0x2000204")]
	public abstract class TerrainGenBase
	{
		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int baseHeight;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float baseTemperature;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int baseMaterialID;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float arcticTreshhold;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float desertTreshhold;

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x58A53C", Offset = "0x58A53C", VA = "0x58A53C")]
		protected TerrainGenBase()
		{
		}

		[Token(Token = "0x6000D93")]
		public abstract void GenerateChunk(Chunk ch);
	}
}
[Token(Token = "0x2000205")]
public class ThirdPersonCam : MonoBehaviour
{
	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform target;

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 dir;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float pickDistance;

	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float camOffsetDistance;

	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float camRadius;

	[Token(Token = "0x4000C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float addOffestLenght;

	[Token(Token = "0x4000C81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private BlockTerrain terrain;

	[Token(Token = "0x6000D95")]
	[Address(RVA = "0x590FD8", Offset = "0x590FD8", VA = "0x590FD8")]
	public ThirdPersonCam()
	{
	}

	[Token(Token = "0x6000D96")]
	[Address(RVA = "0x591058", Offset = "0x591058", VA = "0x591058")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D97")]
	[Address(RVA = "0x5910F4", Offset = "0x5910F4", VA = "0x5910F4")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000206")]
public class CameraBgColor : MonoBehaviour
{
	[Token(Token = "0x6000D98")]
	[Address(RVA = "0x551BD4", Offset = "0x551BD4", VA = "0x551BD4")]
	public CameraBgColor()
	{
	}

	[Token(Token = "0x6000D99")]
	[Address(RVA = "0x551BDC", Offset = "0x551BDC", VA = "0x551BDC")]
	private void OnSetColor(Color color)
	{
	}

	[Token(Token = "0x6000D9A")]
	[Address(RVA = "0x551C8C", Offset = "0x551C8C", VA = "0x551C8C")]
	private void OnGetColor(ColorPicker picker)
	{
	}
}
[Token(Token = "0x2000207")]
public class ColorPicker : MonoBehaviour
{
	[Token(Token = "0x2000208")]
	private enum ESTATE
	{
		[Token(Token = "0x4000CA1")]
		Hidden,
		[Token(Token = "0x4000CA2")]
		Showed,
		[Token(Token = "0x4000CA3")]
		Showing,
		[Token(Token = "0x4000CA4")]
		Hidding
	}

	[Token(Token = "0x4000C82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Texture2D colorSpace;

	[Token(Token = "0x4000C83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Texture2D alphaGradient;

	[Token(Token = "0x4000C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string Title;

	[Token(Token = "0x4000C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 startPos;

	[Token(Token = "0x4000C86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject receiver;

	[Token(Token = "0x4000C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public string colorSetFunctionName;

	[Token(Token = "0x4000C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string colorGetFunctionName;

	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool useExternalDrawer;

	[Token(Token = "0x4000C8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int drawOrder;

	[Token(Token = "0x4000C8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Color TempColor;

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Color SelectedColor;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ColorPicker activeColorPicker;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private ESTATE mState;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	internal int sizeFull;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int sizeHidden;

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float animTime;

	[Token(Token = "0x4000C92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float dt;

	[Token(Token = "0x4000C93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float sizeCurr;

	[Token(Token = "0x4000C94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float alphaGradientHeight;

	[Token(Token = "0x4000C95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int fontSize;

	[Token(Token = "0x4000C96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Color textColor;

	[Token(Token = "0x4000C97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Texture2D txColorDisplay;

	[Token(Token = "0x4000C98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private string txtR;

	[Token(Token = "0x4000C99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private string txtG;

	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private string txtB;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private string txtA;

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float valR;

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float valG;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float valB;

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float valA;

	[Token(Token = "0x6000D9B")]
	[Address(RVA = "0x558FC0", Offset = "0x558FC0", VA = "0x558FC0")]
	public ColorPicker()
	{
	}

	[Token(Token = "0x6000D9C")]
	[Address(RVA = "0x551D48", Offset = "0x551D48", VA = "0x551D48")]
	public void NotifyColor(Color color)
	{
	}

	[Token(Token = "0x6000D9D")]
	[Address(RVA = "0x559518", Offset = "0x559518", VA = "0x559518")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D9E")]
	[Address(RVA = "0x55962C", Offset = "0x55962C", VA = "0x55962C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000D9F")]
	[Address(RVA = "0x5594A4", Offset = "0x5594A4", VA = "0x5594A4")]
	private void UpdateColorSliders(bool isFocused)
	{
	}

	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0x5591F8", Offset = "0x5591F8", VA = "0x5591F8")]
	private void UpdateColorEditFields(bool isFocused)
	{
	}

	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0x55963C", Offset = "0x55963C", VA = "0x55963C")]
	public void _DrawGUI()
	{
	}

	[Token(Token = "0x6000DA2")]
	[Address(RVA = "0x5590DC", Offset = "0x5590DC", VA = "0x5590DC")]
	public void SetColor(Color color)
	{
	}

	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0x55AB8C", Offset = "0x55AB8C", VA = "0x55AB8C")]
	public Color GetColor()
	{
		return default(Color);
	}

	[Token(Token = "0x6000DA4")]
	[Address(RVA = "0x55AB9C", Offset = "0x55AB9C", VA = "0x55AB9C")]
	public void SetTitle(string title, int fontSize, Color textColor)
	{
	}

	[Token(Token = "0x6000DA5")]
	[Address(RVA = "0x55AA8C", Offset = "0x55AA8C", VA = "0x55AA8C")]
	public void ApplyColor()
	{
	}
}
[Token(Token = "0x2000209")]
public class DemoGUI_ColorPickerDemo : MonoBehaviour
{
	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float cameraDistance;

	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0x49D184", Offset = "0x49D184", VA = "0x49D184")]
	public DemoGUI_ColorPickerDemo()
	{
	}

	[Token(Token = "0x6000DA8")]
	[Address(RVA = "0x49D198", Offset = "0x49D198", VA = "0x49D198")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DA9")]
	[Address(RVA = "0x49D220", Offset = "0x49D220", VA = "0x49D220")]
	private void OnGUI()
	{
	}
}
[Token(Token = "0x200020A")]
public class DrawGUIOrderColorPicker : MonoBehaviour
{
	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool loadFromScene;

	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ColorPicker[] colorPicker;

	[Token(Token = "0x4000CA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private List<ColorPicker> mColorPickerList;

	[Token(Token = "0x4000CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B128", Offset = "0x23B128")]
	private static Func<ColorPicker, int> <>f__am$cache0;

	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0x49F3A8", Offset = "0x49F3A8", VA = "0x49F3A8")]
	public DrawGUIOrderColorPicker()
	{
	}

	[Token(Token = "0x6000DAB")]
	[Address(RVA = "0x49F3B8", Offset = "0x49F3B8", VA = "0x49F3B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DAC")]
	[Address(RVA = "0x49F6EC", Offset = "0x49F6EC", VA = "0x49F6EC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000DAD")]
	[Address(RVA = "0x49F848", Offset = "0x49F848", VA = "0x49F848")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DA84", Offset = "0x23DA84")]
	private static int <Start>m__0(ColorPicker item)
	{
		return default(int);
	}
}
[Token(Token = "0x200020B")]
public class ObjectColor : MonoBehaviour
{
	[Token(Token = "0x6000DAE")]
	[Address(RVA = "0x4595F4", Offset = "0x4595F4", VA = "0x4595F4")]
	public ObjectColor()
	{
	}

	[Token(Token = "0x6000DAF")]
	[Address(RVA = "0x4595FC", Offset = "0x4595FC", VA = "0x4595FC")]
	private void OnSetColor(Color color)
	{
	}

	[Token(Token = "0x6000DB0")]
	[Address(RVA = "0x45972C", Offset = "0x45972C", VA = "0x45972C")]
	private void OnGetColor(ColorPicker picker)
	{
	}
}
[Token(Token = "0x200020C")]
public class PSColor : MonoBehaviour
{
	[Token(Token = "0x6000DB1")]
	[Address(RVA = "0x45F778", Offset = "0x45F778", VA = "0x45F778")]
	public PSColor()
	{
	}

	[Token(Token = "0x6000DB2")]
	[Address(RVA = "0x45F780", Offset = "0x45F780", VA = "0x45F780")]
	private void OnSetColor(Color color)
	{
	}

	[Token(Token = "0x6000DB3")]
	[Address(RVA = "0x45F888", Offset = "0x45F888", VA = "0x45F888")]
	private void OnGetColor(ColorPicker picker)
	{
	}
}
[Token(Token = "0x200020D")]
[ExecuteInEditMode]
public class MeasureIt : MonoBehaviour
{
	[Token(Token = "0x4000CAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int StoredValues;

	[Token(Token = "0x4000CAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float UpdateTime;

	[Token(Token = "0x4000CAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool ShowMinMax;

	[Token(Token = "0x4000CAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeasureUnit Unit;

	[Token(Token = "0x4000CAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 GUIPosition;

	[Token(Token = "0x4000CAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool Mute;

	[Token(Token = "0x4000CB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<string> MuteGroups;

	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static MeasureIt _instance;

	[Token(Token = "0x4000CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Dictionary<string, MeasureItTimer> Timers;

	[Token(Token = "0x4000CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<string, int> Counters;

	[Token(Token = "0x4000CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Dictionary<string, object> Values;

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private DateTime mUpdateTime;

	[Token(Token = "0x1700023D")]
	private static MeasureIt Instance
	{
		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x6BF9AC", Offset = "0x6BF9AC", VA = "0x6BF9AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700023E")]
	public static bool IsHighResolutionTimer
	{
		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x6C0EE4", Offset = "0x6C0EE4", VA = "0x6C0EE4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700023F")]
	public static long ResolutionNs
	{
		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x6C19C8", Offset = "0x6C19C8", VA = "0x6C19C8")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x6000DB4")]
	[Address(RVA = "0x6BF830", Offset = "0x6BF830", VA = "0x6BF830")]
	public MeasureIt()
	{
	}

	[Token(Token = "0x6000DB6")]
	[Address(RVA = "0x6BFA10", Offset = "0x6BFA10", VA = "0x6BFA10")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0x6BFA74", Offset = "0x6BFA74", VA = "0x6BFA74")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000DB8")]
	[Address(RVA = "0x6BFADC", Offset = "0x6BFADC", VA = "0x6BFADC")]
	public static void InitInstance()
	{
	}

	[Token(Token = "0x6000DB9")]
	[Address(RVA = "0x6BFD1C", Offset = "0x6BFD1C", VA = "0x6BFD1C")]
	public static void Begin(string slotName)
	{
	}

	[Token(Token = "0x6000DBA")]
	[Address(RVA = "0x6C00C8", Offset = "0x6C00C8", VA = "0x6C00C8")]
	public static void Begin(string slotname, string group)
	{
	}

	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0x6C01BC", Offset = "0x6C01BC", VA = "0x6C01BC")]
	public static void Clear(string slotName)
	{
	}

	[Token(Token = "0x6000DBC")]
	[Address(RVA = "0x6C0598", Offset = "0x6C0598", VA = "0x6C0598")]
	public static void Clear()
	{
	}

	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0x6C0790", Offset = "0x6C0790", VA = "0x6C0790")]
	public static int Count(string slotName)
	{
		return default(int);
	}

	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0x6C09FC", Offset = "0x6C09FC", VA = "0x6C09FC")]
	public static int Count(string slotName, string group)
	{
		return default(int);
	}

	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0x6C0AF8", Offset = "0x6C0AF8", VA = "0x6C0AF8")]
	public static float End(string slotName)
	{
		return default(float);
	}

	[Token(Token = "0x6000DC1")]
	[Address(RVA = "0x6C0F70", Offset = "0x6C0F70", VA = "0x6C0F70")]
	public static void Log(object message)
	{
	}

	[Token(Token = "0x6000DC2")]
	[Address(RVA = "0x6C12B0", Offset = "0x6C12B0", VA = "0x6C12B0")]
	public static void Log(object message, string group)
	{
	}

	[Token(Token = "0x6000DC3")]
	[Address(RVA = "0x6C12D4", Offset = "0x6C12D4", VA = "0x6C12D4")]
	public static void Log(object message, UnityEngine.Object context, string group)
	{
	}

	[Token(Token = "0x6000DC4")]
	[Address(RVA = "0x6C1018", Offset = "0x6C1018", VA = "0x6C1018")]
	public static void Log(object message, UnityEngine.Object context, LogType type, string group)
	{
	}

	[Token(Token = "0x6000DC5")]
	[Address(RVA = "0x6C12F4", Offset = "0x6C12F4", VA = "0x6C12F4")]
	public static void LogWarning(object message)
	{
	}

	[Token(Token = "0x6000DC6")]
	[Address(RVA = "0x6C139C", Offset = "0x6C139C", VA = "0x6C139C")]
	public static void LogWarning(object message, string group)
	{
	}

	[Token(Token = "0x6000DC7")]
	[Address(RVA = "0x6C13C0", Offset = "0x6C13C0", VA = "0x6C13C0")]
	public static void LogWarning(object message, UnityEngine.Object context, string group)
	{
	}

	[Token(Token = "0x6000DC8")]
	[Address(RVA = "0x6C13E0", Offset = "0x6C13E0", VA = "0x6C13E0")]
	public static void LogError(object message)
	{
	}

	[Token(Token = "0x6000DC9")]
	[Address(RVA = "0x6C1488", Offset = "0x6C1488", VA = "0x6C1488")]
	public static void LogError(object message, string group)
	{
	}

	[Token(Token = "0x6000DCA")]
	[Address(RVA = "0x6C14AC", Offset = "0x6C14AC", VA = "0x6C14AC")]
	public static void LogError(object message, UnityEngine.Object context, string group)
	{
	}

	[Token(Token = "0x6000DCB")]
	[Address(RVA = "0x6C14CC", Offset = "0x6C14CC", VA = "0x6C14CC")]
	public static void MuteGroup(string groupName)
	{
	}

	[Token(Token = "0x6000DCC")]
	[Address(RVA = "0x6C1648", Offset = "0x6C1648", VA = "0x6C1648")]
	public static void UnMuteAllGroups()
	{
	}

	[Token(Token = "0x6000DCD")]
	[Address(RVA = "0x6C1720", Offset = "0x6C1720", VA = "0x6C1720")]
	public static void Set(string slotName, object obj)
	{
	}

	[Token(Token = "0x6000DCE")]
	[Address(RVA = "0x6C18CC", Offset = "0x6C18CC", VA = "0x6C18CC")]
	public static void Set(string slotName, object obj, string group)
	{
	}

	[Token(Token = "0x6000DD0")]
	[Address(RVA = "0x6C1A64", Offset = "0x6C1A64", VA = "0x6C1A64")]
	private void CalcStats()
	{
	}
}
[Token(Token = "0x200020E")]
internal class MeasureItTimer
{
	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	internal Stopwatch Watch;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	internal float[] Times;

	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal int Idx;

	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	internal float Min;

	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal float Max;

	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	internal float Avg;

	[Token(Token = "0x6000DD1")]
	[Address(RVA = "0x6BFFC4", Offset = "0x6BFFC4", VA = "0x6BFFC4")]
	public MeasureItTimer(int size)
	{
	}
}
[Token(Token = "0x200020F")]
public enum MeasureUnit
{
	[Token(Token = "0x4000CBD")]
	Ticks,
	[Token(Token = "0x4000CBE")]
	Milliseconds,
	[Token(Token = "0x4000CBF")]
	Seconds
}
[Token(Token = "0x2000210")]
public class MeasureItDemo : MonoBehaviour
{
	[Token(Token = "0x6000DD2")]
	[Address(RVA = "0x6C1E8C", Offset = "0x6C1E8C", VA = "0x6C1E8C")]
	public MeasureItDemo()
	{
	}

	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0x6C1E94", Offset = "0x6C1E94", VA = "0x6C1E94")]
	private void Update()
	{
	}

	[Token(Token = "0x6000DD4")]
	[Address(RVA = "0x6C2100", Offset = "0x6C2100", VA = "0x6C2100")]
	private void OnGUI()
	{
	}
}
namespace TObject.Shared
{
	[Token(Token = "0x2000211")]
	public class NanoXMLBase
	{
		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x5834C0", Offset = "0x5834C0", VA = "0x5834C0")]
		public NanoXMLBase()
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x5834C8", Offset = "0x5834C8", VA = "0x5834C8")]
		protected static bool IsSpace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x5834F0", Offset = "0x5834F0", VA = "0x5834F0")]
		protected static void SkipSpaces(string str, ref int i)
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x583704", Offset = "0x583704", VA = "0x583704")]
		protected static string GetValue(string str, ref int i, char endChar, char endChar2, bool stopOnSpace)
		{
			return null;
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x58380C", Offset = "0x58380C", VA = "0x58380C")]
		protected static bool IsQuote(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x58382C", Offset = "0x58382C", VA = "0x58382C")]
		protected static string ParseAttributes(string str, ref int i, List<NanoXMLAttribute> attributes, char endChar, char endChar2)
		{
			return null;
		}
	}
	[Token(Token = "0x2000212")]
	public class NanoXMLDocument : NanoXMLBase
	{
		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private NanoXMLNode rootNode;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private List<NanoXMLAttribute> declarations;

		[Token(Token = "0x17000240")]
		public NanoXMLNode RootNode
		{
			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0x584274", Offset = "0x584274", VA = "0x584274")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000241")]
		public IEnumerable<NanoXMLAttribute> Declarations
		{
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x58427C", Offset = "0x58427C", VA = "0x58427C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x583ADC", Offset = "0x583ADC", VA = "0x583ADC")]
		public NanoXMLDocument(string xmlString)
		{
		}
	}
	[Token(Token = "0x2000213")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x235FEC", Offset = "0x235FEC")]
	public class NanoXMLNode : NanoXMLBase
	{
		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string value;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string name;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<NanoXMLNode> subNodes;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private List<NanoXMLAttribute> attributes;

		[Token(Token = "0x17000242")]
		public string Value
		{
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0x584284", Offset = "0x584284", VA = "0x584284")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000243")]
		public string Name
		{
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0x58428C", Offset = "0x58428C", VA = "0x58428C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000244")]
		public List<NanoXMLNode> SubNodes
		{
			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0x584294", Offset = "0x584294", VA = "0x584294")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000245")]
		public List<NanoXMLAttribute> Attributes
		{
			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0x58429C", Offset = "0x58429C", VA = "0x58429C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000246")]
		public NanoXMLNode Item
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0x5842A4", Offset = "0x5842A4", VA = "0x5842A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x583CF4", Offset = "0x583CF4", VA = "0x583CF4")]
		public NanoXMLNode(string str, ref int i)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x584450", Offset = "0x584450", VA = "0x584450")]
		public NanoXMLAttribute GetAttribute(string attributeName)
		{
			return null;
		}
	}
	[Token(Token = "0x2000214")]
	public class NanoXMLAttribute
	{
		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string name;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string value;

		[Token(Token = "0x17000247")]
		public string Name
		{
			[Token(Token = "0x6000DE6")]
			[Address(RVA = "0x5834B0", Offset = "0x5834B0", VA = "0x5834B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000248")]
		public string Value
		{
			[Token(Token = "0x6000DE7")]
			[Address(RVA = "0x5834B8", Offset = "0x5834B8", VA = "0x5834B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x583488", Offset = "0x583488", VA = "0x583488")]
		internal NanoXMLAttribute(string name, string value)
		{
		}
	}
	[Token(Token = "0x2000215")]
	internal class XMLParsingException : Exception
	{
		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x583AD4", Offset = "0x583AD4", VA = "0x583AD4")]
		public XMLParsingException(string message)
		{
		}
	}
}
[Token(Token = "0x2000216")]
public class TextGizmo
{
	[Token(Token = "0x4000CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TextGizmo tg;

	[Token(Token = "0x4000CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Dictionary<char, string> texturePathLookup;

	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Camera editorCamera;

	[Token(Token = "0x4000CCB")]
	private const int CHAR_TEXTURE_HEIGHT = 8;

	[Token(Token = "0x4000CCC")]
	private const int CHAR_TEXTURE_WIDTH = 6;

	[Token(Token = "0x4000CCD")]
	private const string characters = "abcdefghijklmnopqrstuvwxyz0123456789_-() ";

	[Token(Token = "0x6000DE9")]
	[Address(RVA = "0x590898", Offset = "0x590898", VA = "0x590898")]
	private TextGizmo()
	{
	}

	[Token(Token = "0x6000DEA")]
	[Address(RVA = "0x590AFC", Offset = "0x590AFC", VA = "0x590AFC")]
	public static void Init()
	{
	}

	[Token(Token = "0x6000DEB")]
	[Address(RVA = "0x590B98", Offset = "0x590B98", VA = "0x590B98")]
	public static void Draw(Vector3 position, string text)
	{
	}
}
[Token(Token = "0x2000217")]
[ExecuteInEditMode]
public class ApplicationSettings : MonoBehaviour
{
	[Token(Token = "0x2000218")]
	public enum ConfigState
	{
		[Token(Token = "0x4000CDC")]
		Release,
		[Token(Token = "0x4000CDD")]
		Debug
	}

	[Token(Token = "0x2000219")]
	public enum NWSpecialBuildPlatform
	{
		[Token(Token = "0x4000CDF")]
		Default,
		[Token(Token = "0x4000CE0")]
		Amazon,
		[Token(Token = "0x4000CE1")]
		Switch,
		[Token(Token = "0x4000CE2")]
		WiiU,
		[Token(Token = "0x4000CE3")]
		PS4,
		[Token(Token = "0x4000CE4")]
		Oculus_Quest_Rift,
		[Token(Token = "0x4000CE5")]
		Pico
	}

	[Token(Token = "0x200021A")]
	public enum NWLocalization
	{
		[Token(Token = "0x4000CE7")]
		US,
		[Token(Token = "0x4000CE8")]
		Europe,
		[Token(Token = "0x4000CE9")]
		Japan,
		[Token(Token = "0x4000CEA")]
		MobileVR
	}

	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ApplicationSettings _instance;

	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool simulatePlatform;

	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ConfigState currentConfig;

	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public NWSpecialBuildPlatform specialization;

	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NWLocalization localization;

	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public string[] configfile;

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public string warning;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public string AssemblyInfo;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLite;

	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool entitlementOK;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private string buildDate;

	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<GameObject> debugObjects;

	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public bool useHostFS;

	[Token(Token = "0x17000249")]
	public static ApplicationSettings instance
	{
		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x4774C4", Offset = "0x4774C4", VA = "0x4774C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700024A")]
	public static RuntimePlatform Platform
	{
		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x4775D8", Offset = "0x4775D8", VA = "0x4775D8")]
		get
		{
			return default(RuntimePlatform);
		}
	}

	[Token(Token = "0x1700024B")]
	public string BuildDate
	{
		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x477700", Offset = "0x477700", VA = "0x477700")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000DED")]
	[Address(RVA = "0x4773EC", Offset = "0x4773EC", VA = "0x4773EC")]
	public ApplicationSettings()
	{
	}

	[Token(Token = "0x6000DF1")]
	[Address(RVA = "0x477708", Offset = "0x477708", VA = "0x477708", Slot = "4")]
	public virtual void InitApplicationSettings()
	{
	}

	[Token(Token = "0x6000DF2")]
	[Address(RVA = "0x47770C", Offset = "0x47770C", VA = "0x47770C", Slot = "5")]
	public virtual void ApplyConfig()
	{
	}

	[Token(Token = "0x6000DF3")]
	[Address(RVA = "0x477878", Offset = "0x477878", VA = "0x477878", Slot = "6")]
	public virtual void OnValidate()
	{
	}
}
namespace NWCommon
{
	[Token(Token = "0x200021B")]
	public class ApplicationStorage
	{
		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string mWorldDataPath;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string mCachePath;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static string mSettingsPath;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string sPathDelimiter;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static Dictionary<string, Stream> knownStreams;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int maxSlots;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static Dictionary<string, int> nameSlotMap;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static long virtualDiskQuota;

		[Token(Token = "0x1700024C")]
		public static string WorldDataPath
		{
			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0x6F54F4", Offset = "0x6F54F4", VA = "0x6F54F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024D")]
		public static string FileVersion
		{
			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0x6F5580", Offset = "0x6F5580", VA = "0x6F5580")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024E")]
		public static bool IsBusy
		{
			[Token(Token = "0x6000DF7")]
			[Address(RVA = "0x6F55DC", Offset = "0x6F55DC", VA = "0x6F55DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x6F52AC", Offset = "0x6F52AC", VA = "0x6F52AC")]
		public ApplicationStorage()
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x6F5470", Offset = "0x6F5470", VA = "0x6F5470")]
		public static string GetFullPath(string path)
		{
			return null;
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x6F55E4", Offset = "0x6F55E4", VA = "0x6F55E4")]
		public static byte[] ReadAllBytes(string path)
		{
			return null;
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x6F573C", Offset = "0x6F573C", VA = "0x6F573C")]
		public static Stream GetFile(string fileNameWithPath, FileMode fmode, FileAccess faccess)
		{
			return null;
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x6F5948", Offset = "0x6F5948", VA = "0x6F5948")]
		public static void Close(Stream s)
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x6F5960", Offset = "0x6F5960", VA = "0x6F5960")]
		public static void CopyFile(string sourceFile, string targetFile)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x6F5968", Offset = "0x6F5968", VA = "0x6F5968")]
		public static void MoveFile(string sourceFile, string targetFile)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x6F5970", Offset = "0x6F5970", VA = "0x6F5970")]
		public static bool ExistsFile(string fileToCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x6F5978", Offset = "0x6F5978", VA = "0x6F5978")]
		public static bool ExistsDirectory(string dirToCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x6F5980", Offset = "0x6F5980", VA = "0x6F5980")]
		public static void CreateDirectory(string dirToCreate)
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x6F5988", Offset = "0x6F5988", VA = "0x6F5988")]
		public static string[] GetDirectoryFiles(string path)
		{
			return null;
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x6F5990", Offset = "0x6F5990", VA = "0x6F5990")]
		public static string[] GetDirectoryFiles(string path, string pattern)
		{
			return null;
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x6F5C6C", Offset = "0x6F5C6C", VA = "0x6F5C6C")]
		public static long GetFreeSpace()
		{
			return default(long);
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x6F5CF8", Offset = "0x6F5CF8", VA = "0x6F5CF8")]
		public static bool CompressStream(Stream streamCompressed, Stream streamSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x6F615C", Offset = "0x6F615C", VA = "0x6F615C")]
		public static bool DecompressStream(Stream streamCompressed, ref Stream streamUncompressed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x6F637C", Offset = "0x6F637C", VA = "0x6F637C")]
		public static void DeleteFile(string fileName)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x6F64BC", Offset = "0x6F64BC", VA = "0x6F64BC")]
		public string GetWorldInfo(string fileName)
		{
			return null;
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x6F69AC", Offset = "0x6F69AC", VA = "0x6F69AC")]
		public long GetFileSize(string filename)
		{
			return default(long);
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x6F6C74", Offset = "0x6F6C74", VA = "0x6F6C74")]
		public bool DeleteCacheFilesSmart(string folder, int count)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x6F6C7C", Offset = "0x6F6C7C", VA = "0x6F6C7C")]
		public long GetUsedCacheSize(string folder)
		{
			return default(long);
		}
	}
}
[Token(Token = "0x200021C")]
public static class SavWav
{
	[Token(Token = "0x4000CF3")]
	private const int HEADER_SIZE = 44;

	[Token(Token = "0x6000E0C")]
	[Address(RVA = "0x46D1BC", Offset = "0x46D1BC", VA = "0x46D1BC")]
	public static bool Save(string filename, AudioClip clip)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E0D")]
	[Address(RVA = "0x46DC68", Offset = "0x46DC68", VA = "0x46DC68")]
	public static AudioClip TrimSilence(AudioClip clip, float min)
	{
		return null;
	}

	[Token(Token = "0x6000E0E")]
	[Address(RVA = "0x46DDB8", Offset = "0x46DDB8", VA = "0x46DDB8")]
	public static AudioClip TrimSilence(List<float> samples, float min, int channels, int hz)
	{
		return null;
	}

	[Token(Token = "0x6000E0F")]
	[Address(RVA = "0x46DDDC", Offset = "0x46DDDC", VA = "0x46DDDC")]
	public static AudioClip TrimSilence(List<float> samples, float min, int channels, int hz, bool _3D, bool stream)
	{
		return null;
	}

	[Token(Token = "0x6000E10")]
	[Address(RVA = "0x46D448", Offset = "0x46D448", VA = "0x46D448")]
	private static FileStream CreateEmpty(string filepath)
	{
		return null;
	}

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0x46D4F4", Offset = "0x46D4F4", VA = "0x46D4F4")]
	private static void ConvertAndWrite(FileStream fileStream, AudioClip clip)
	{
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0x46D7A8", Offset = "0x46D7A8", VA = "0x46D7A8")]
	private static void WriteHeader(FileStream fileStream, AudioClip clip)
	{
	}
}
[Token(Token = "0x200021D")]
public class VoiceChat : MonoBehaviour
{
	[Token(Token = "0x200021E")]
	public enum VC_Frequency
	{
		[Token(Token = "0x4000D08")]
		Freq_4000 = 4000,
		[Token(Token = "0x4000D09")]
		Freq_8000 = 8000,
		[Token(Token = "0x4000D0A")]
		Freq_11025 = 11025,
		[Token(Token = "0x4000D0B")]
		Freq_16000_PS4 = 16000
	}

	[Token(Token = "0x200021F")]
	public delegate void VoiceIn(byte[] data, int samples);

	[Token(Token = "0x4000CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public VoiceChatChannel vccPrefab;

	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AudioClip clip;

	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float[] audioBuffer;

	[Token(Token = "0x4000CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private short[] speexIn;

	[Token(Token = "0x4000CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private byte[] encodedData;

	[Token(Token = "0x4000CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private byte[] decodedData;

	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int pos;

	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int readIndex;

	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int clipLength;

	[Token(Token = "0x4000CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VC_Frequency frequency;

	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public KeyCode voiceKey;

	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float timeOut;

	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public VoiceIn voiceInCallback;

	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool useSpeex;

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private SpeexEncoder encoder;

	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SpeexDecoder decoder;

	[Token(Token = "0x4000D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public BandMode bandMode;

	[Token(Token = "0x4000D05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool recording;

	[Token(Token = "0x4000D06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Dictionary<int, VoiceChatChannel> activeChannels;

	[Token(Token = "0x1700024F")]
	public Dictionary<int, VoiceChatChannel> ActiveChannels
	{
		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x8EA308", Offset = "0x8EA308", VA = "0x8EA308")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0x8E963C", Offset = "0x8E963C", VA = "0x8E963C")]
	public VoiceChat()
	{
	}

	[Token(Token = "0x6000E14")]
	[Address(RVA = "0x8E96E8", Offset = "0x8E96E8", VA = "0x8E96E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E15")]
	[Address(RVA = "0x8E9814", Offset = "0x8E9814", VA = "0x8E9814")]
	public void StartRecording()
	{
	}

	[Token(Token = "0x6000E16")]
	[Address(RVA = "0x8E9918", Offset = "0x8E9918", VA = "0x8E9918")]
	public void StopRecording()
	{
	}

	[Token(Token = "0x6000E17")]
	[Address(RVA = "0x8E9924", Offset = "0x8E9924", VA = "0x8E9924")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E19")]
	[Address(RVA = "0x8EA310", Offset = "0x8EA310", VA = "0x8EA310")]
	public void VoiceOut(int voiceIndex, byte[] data, int samples)
	{
	}
}
[Token(Token = "0x2000220")]
public class VoiceChatChannel : MonoBehaviour
{
	[Token(Token = "0x4000D0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public AudioSource audioSource;

	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioClip clip;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private VoiceChat channelManager;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int channelIndex;

	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float lastStreamInput;

	[Token(Token = "0x4000D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int bufferWriteIndex;

	[Token(Token = "0x4000D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int bufferReadIndex;

	[Token(Token = "0x4000D13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] audioBuffer;

	[Token(Token = "0x4000D14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timeOut;

	[Token(Token = "0x4000D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int writeLoopCount;

	[Token(Token = "0x4000D16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int readLoopCount;

	[Token(Token = "0x6000E1E")]
	[Address(RVA = "0x8EAA14", Offset = "0x8EAA14", VA = "0x8EAA14")]
	public VoiceChatChannel()
	{
	}

	[Token(Token = "0x6000E1F")]
	[Address(RVA = "0x8EA660", Offset = "0x8EA660", VA = "0x8EA660")]
	internal void Init(VoiceChat channelManager_, int channelIndex_, int frequency, float timeOut_)
	{
	}

	[Token(Token = "0x6000E20")]
	[Address(RVA = "0x8EAA1C", Offset = "0x8EAA1C", VA = "0x8EAA1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E21")]
	[Address(RVA = "0x8EA798", Offset = "0x8EA798", VA = "0x8EA798")]
	internal void Stream(float[] data)
	{
	}

	[Token(Token = "0x6000E22")]
	[Address(RVA = "0x8EABF8", Offset = "0x8EABF8", VA = "0x8EABF8")]
	private void OnAudioRead(float[] data)
	{
	}
}
[Token(Token = "0x2000221")]
public class BinaryDataContainer : ScriptableObject
{
	[Token(Token = "0x4000D17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string fileName;

	[Token(Token = "0x4000D18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool compressedUsingZip;

	[Token(Token = "0x4000D19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	[HideInInspector]
	public byte[] mSerializedData;

	[Token(Token = "0x6000E23")]
	[Address(RVA = "0x48C244", Offset = "0x48C244", VA = "0x48C244")]
	public BinaryDataContainer()
	{
	}
}
[Token(Token = "0x2000222")]
public class Bresenham3D : IEnumerable
{
	[Token(Token = "0x2000223")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236030", Offset = "0x236030")]
	private sealed class <GetEnumerator>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int <dx>__0;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int <dy>__0;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int <dz>__0;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int <ax>__0;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int <ay>__0;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int <az>__0;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int <sx>__0;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int <sy>__0;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int <sz>__0;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int <x>__0;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int <y>__0;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int <z>__0;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal int <yd>__1;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal int <zd>__1;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal Vector3 <result>__2;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal int <xd>__3;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal Bresenham3D $this;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal object $current;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal bool $disposing;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal int $PC;

		[Token(Token = "0x17000250")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0x55056C", Offset = "0x55056C", VA = "0x55056C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000251")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0x550574", Offset = "0x550574", VA = "0x550574", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x54FCF0", Offset = "0x54FCF0", VA = "0x54FCF0")]
		[DebuggerHidden]
		public <GetEnumerator>c__Iterator0()
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x54FCF8", Offset = "0x54FCF8", VA = "0x54FCF8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x55057C", Offset = "0x55057C", VA = "0x55057C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x550590", Offset = "0x550590", VA = "0x550590", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000D1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Vector3 start;

	[Token(Token = "0x4000D1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3 end;

	[Token(Token = "0x4000D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float steps;

	[Token(Token = "0x6000E24")]
	[Address(RVA = "0x54FAF8", Offset = "0x54FAF8", VA = "0x54FAF8")]
	public Bresenham3D(Vector3 p_start, Vector3 p_end)
	{
	}

	[Token(Token = "0x6000E25")]
	[Address(RVA = "0x54FB4C", Offset = "0x54FB4C", VA = "0x54FB4C")]
	public Bresenham3D(Vector3 p_start, Vector3 p_end, float p_steps)
	{
	}

	[Token(Token = "0x6000E26")]
	[Address(RVA = "0x54FC6C", Offset = "0x54FC6C", VA = "0x54FC6C", Slot = "4")]
	[DebuggerHidden]
	public IEnumerator GetEnumerator()
	{
		return null;
	}
}
namespace NWCommon
{
	[Token(Token = "0x2000224")]
	public class CameraPath : MonoBehaviour
	{
		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Curve4D cameraCurvePosition;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Curve4D cameraCurveRotation;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject pathObject;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float mMSec;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float pathTime;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preview;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool close;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int previewSubdivisions;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool compiled;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private List<CameraPathControlPoint> cps;

		[Token(Token = "0x17000252")]
		public bool Compiled
		{
			[Token(Token = "0x6000E2E")]
			[Address(RVA = "0x6F807C", Offset = "0x6F807C", VA = "0x6F807C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000253")]
		public List<CameraPathControlPoint> ControlPoints
		{
			[Token(Token = "0x6000E2F")]
			[Address(RVA = "0x6F809C", Offset = "0x6F809C", VA = "0x6F809C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x6F7FD4", Offset = "0x6F7FD4", VA = "0x6F7FD4")]
		public CameraPath()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x6F82A0", Offset = "0x6F82A0", VA = "0x6F82A0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x6F8CF0", Offset = "0x6F8CF0", VA = "0x6F8CF0")]
		private void AddEntry(Vector3 pos, Vector3 rot, float time)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x6F92A4", Offset = "0x6F92A4", VA = "0x6F92A4")]
		private void AddEntry(Vector3 pos, Quaternion rot, float time)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x6F93E8", Offset = "0x6F93E8", VA = "0x6F93E8")]
		public void InternalUpdate(float msec)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x6F96CC", Offset = "0x6F96CC", VA = "0x6F96CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x6F850C", Offset = "0x6F850C", VA = "0x6F850C")]
		public bool Compile()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x6F9CCC", Offset = "0x6F9CCC", VA = "0x6F9CCC")]
		public void Save()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x6FA45C", Offset = "0x6FA45C", VA = "0x6FA45C")]
		public void Load()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x6FADD4", Offset = "0x6FADD4", VA = "0x6FADD4")]
		private void OnDrawGizmos()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class CameraPathControlPoint : MonoBehaviour
	{
		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x6FAFFC", Offset = "0x6FAFFC", VA = "0x6FAFFC")]
		public CameraPathControlPoint()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x6FB004", Offset = "0x6FB004", VA = "0x6FB004")]
		private void OnDrawGizmos()
		{
		}
	}
}
namespace UnityEngine
{
	[Token(Token = "0x2000226")]
	public static class ColorExtensions
	{
		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xD17FE0", Offset = "0xD17FE0", VA = "0xD17FE0")]
		public static Vector4 ToVector4(this Color col)
		{
			return default(Vector4);
		}
	}
	[Token(Token = "0x2000227")]
	public class ColorExt
	{
		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Color temp;

		[Token(Token = "0x17000254")]
		public static Color TransparentBlack
		{
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0xD172C4", Offset = "0xD172C4", VA = "0xD172C4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000255")]
		public static Color Transparent
		{
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0xD172D8", Offset = "0xD172D8", VA = "0xD172D8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000256")]
		public static Color AliceBlue
		{
			[Token(Token = "0x6000E40")]
			[Address(RVA = "0xD172EC", Offset = "0xD172EC", VA = "0xD172EC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000257")]
		public static Color AntiqueWhite
		{
			[Token(Token = "0x6000E41")]
			[Address(RVA = "0xD17304", Offset = "0xD17304", VA = "0xD17304")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000258")]
		public static Color Aqua
		{
			[Token(Token = "0x6000E42")]
			[Address(RVA = "0xD1731C", Offset = "0xD1731C", VA = "0xD1731C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000259")]
		public static Color Aquamarine
		{
			[Token(Token = "0x6000E43")]
			[Address(RVA = "0xD17330", Offset = "0xD17330", VA = "0xD17330")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700025A")]
		public static Color Azure
		{
			[Token(Token = "0x6000E44")]
			[Address(RVA = "0xD17348", Offset = "0xD17348", VA = "0xD17348")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700025B")]
		public static Color Beige
		{
			[Token(Token = "0x6000E45")]
			[Address(RVA = "0xD1735C", Offset = "0xD1735C", VA = "0xD1735C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700025C")]
		public static Color Bisque
		{
			[Token(Token = "0x6000E46")]
			[Address(RVA = "0xD17374", Offset = "0xD17374", VA = "0xD17374")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700025D")]
		public static Color Black
		{
			[Token(Token = "0x6000E47")]
			[Address(RVA = "0xD1738C", Offset = "0xD1738C", VA = "0xD1738C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700025E")]
		public static Color BlanchedAlmond
		{
			[Token(Token = "0x6000E48")]
			[Address(RVA = "0xD173A0", Offset = "0xD173A0", VA = "0xD173A0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700025F")]
		public static Color Blue
		{
			[Token(Token = "0x6000E49")]
			[Address(RVA = "0xD173B8", Offset = "0xD173B8", VA = "0xD173B8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000260")]
		public static Color BlueViolet
		{
			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0xD173D0", Offset = "0xD173D0", VA = "0xD173D0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000261")]
		public static Color Brown
		{
			[Token(Token = "0x6000E4B")]
			[Address(RVA = "0xD173E8", Offset = "0xD173E8", VA = "0xD173E8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000262")]
		public static Color BurlyWood
		{
			[Token(Token = "0x6000E4C")]
			[Address(RVA = "0xD17400", Offset = "0xD17400", VA = "0xD17400")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000263")]
		public static Color CadetBlue
		{
			[Token(Token = "0x6000E4D")]
			[Address(RVA = "0xD17418", Offset = "0xD17418", VA = "0xD17418")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000264")]
		public static Color Chartreuse
		{
			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0xD17430", Offset = "0xD17430", VA = "0xD17430")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000265")]
		public static Color Chocolate
		{
			[Token(Token = "0x6000E4F")]
			[Address(RVA = "0xD17448", Offset = "0xD17448", VA = "0xD17448")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000266")]
		public static Color Coral
		{
			[Token(Token = "0x6000E50")]
			[Address(RVA = "0xD17460", Offset = "0xD17460", VA = "0xD17460")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000267")]
		public static Color CornflowerBlue
		{
			[Token(Token = "0x6000E51")]
			[Address(RVA = "0xD17478", Offset = "0xD17478", VA = "0xD17478")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000268")]
		public static Color Cornsilk
		{
			[Token(Token = "0x6000E52")]
			[Address(RVA = "0xD17490", Offset = "0xD17490", VA = "0xD17490")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000269")]
		public static Color Crimson
		{
			[Token(Token = "0x6000E53")]
			[Address(RVA = "0xD174A8", Offset = "0xD174A8", VA = "0xD174A8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700026A")]
		public static Color Cyan
		{
			[Token(Token = "0x6000E54")]
			[Address(RVA = "0xD174C0", Offset = "0xD174C0", VA = "0xD174C0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700026B")]
		public static Color DarkBlue
		{
			[Token(Token = "0x6000E55")]
			[Address(RVA = "0xD174D4", Offset = "0xD174D4", VA = "0xD174D4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700026C")]
		public static Color DarkCyan
		{
			[Token(Token = "0x6000E56")]
			[Address(RVA = "0xD174EC", Offset = "0xD174EC", VA = "0xD174EC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700026D")]
		public static Color DarkGoldenrod
		{
			[Token(Token = "0x6000E57")]
			[Address(RVA = "0xD17504", Offset = "0xD17504", VA = "0xD17504")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700026E")]
		public static Color DarkGray
		{
			[Token(Token = "0x6000E58")]
			[Address(RVA = "0xD1751C", Offset = "0xD1751C", VA = "0xD1751C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700026F")]
		public static Color DarkGreen
		{
			[Token(Token = "0x6000E59")]
			[Address(RVA = "0xD17534", Offset = "0xD17534", VA = "0xD17534")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000270")]
		public static Color DarkKhaki
		{
			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0xD1754C", Offset = "0xD1754C", VA = "0xD1754C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000271")]
		public static Color DarkMagenta
		{
			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0xD17564", Offset = "0xD17564", VA = "0xD17564")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000272")]
		public static Color DarkOliveGreen
		{
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0xD1757C", Offset = "0xD1757C", VA = "0xD1757C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000273")]
		public static Color DarkOrange
		{
			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0xD17594", Offset = "0xD17594", VA = "0xD17594")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000274")]
		public static Color DarkOrchid
		{
			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0xD175AC", Offset = "0xD175AC", VA = "0xD175AC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000275")]
		public static Color DarkRed
		{
			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0xD175C4", Offset = "0xD175C4", VA = "0xD175C4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000276")]
		public static Color DarkSalmon
		{
			[Token(Token = "0x6000E60")]
			[Address(RVA = "0xD175DC", Offset = "0xD175DC", VA = "0xD175DC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000277")]
		public static Color DarkSeaGreen
		{
			[Token(Token = "0x6000E61")]
			[Address(RVA = "0xD175F4", Offset = "0xD175F4", VA = "0xD175F4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000278")]
		public static Color DarkSlateBlue
		{
			[Token(Token = "0x6000E62")]
			[Address(RVA = "0xD1760C", Offset = "0xD1760C", VA = "0xD1760C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000279")]
		public static Color DarkSlateGray
		{
			[Token(Token = "0x6000E63")]
			[Address(RVA = "0xD17624", Offset = "0xD17624", VA = "0xD17624")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700027A")]
		public static Color DarkTurquoise
		{
			[Token(Token = "0x6000E64")]
			[Address(RVA = "0xD1763C", Offset = "0xD1763C", VA = "0xD1763C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700027B")]
		public static Color DarkViolet
		{
			[Token(Token = "0x6000E65")]
			[Address(RVA = "0xD17654", Offset = "0xD17654", VA = "0xD17654")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700027C")]
		public static Color DeepPink
		{
			[Token(Token = "0x6000E66")]
			[Address(RVA = "0xD1766C", Offset = "0xD1766C", VA = "0xD1766C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700027D")]
		public static Color DeepSkyBlue
		{
			[Token(Token = "0x6000E67")]
			[Address(RVA = "0xD17684", Offset = "0xD17684", VA = "0xD17684")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700027E")]
		public static Color DimGray
		{
			[Token(Token = "0x6000E68")]
			[Address(RVA = "0xD1769C", Offset = "0xD1769C", VA = "0xD1769C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700027F")]
		public static Color DodgerBlue
		{
			[Token(Token = "0x6000E69")]
			[Address(RVA = "0xD176B4", Offset = "0xD176B4", VA = "0xD176B4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000280")]
		public static Color Firebrick
		{
			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0xD176CC", Offset = "0xD176CC", VA = "0xD176CC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000281")]
		public static Color FloralWhite
		{
			[Token(Token = "0x6000E6B")]
			[Address(RVA = "0xD176E4", Offset = "0xD176E4", VA = "0xD176E4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000282")]
		public static Color ForestGreen
		{
			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0xD176FC", Offset = "0xD176FC", VA = "0xD176FC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000283")]
		public static Color Fuchsia
		{
			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0xD17714", Offset = "0xD17714", VA = "0xD17714")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000284")]
		public static Color Gainsboro
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0xD17728", Offset = "0xD17728", VA = "0xD17728")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000285")]
		public static Color GhostWhite
		{
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0xD17740", Offset = "0xD17740", VA = "0xD17740")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000286")]
		public static Color Gold
		{
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0xD17758", Offset = "0xD17758", VA = "0xD17758")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000287")]
		public static Color Goldenrod
		{
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xD17770", Offset = "0xD17770", VA = "0xD17770")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000288")]
		public static Color Gray
		{
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0xD17788", Offset = "0xD17788", VA = "0xD17788")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000289")]
		public static Color Green
		{
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0xD177A0", Offset = "0xD177A0", VA = "0xD177A0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700028A")]
		public static Color GreenYellow
		{
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0xD177B8", Offset = "0xD177B8", VA = "0xD177B8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700028B")]
		public static Color Honeydew
		{
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0xD177D0", Offset = "0xD177D0", VA = "0xD177D0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700028C")]
		public static Color HotPink
		{
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0xD177E8", Offset = "0xD177E8", VA = "0xD177E8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700028D")]
		public static Color IndianRed
		{
			[Token(Token = "0x6000E77")]
			[Address(RVA = "0xD17800", Offset = "0xD17800", VA = "0xD17800")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700028E")]
		public static Color Indigo
		{
			[Token(Token = "0x6000E78")]
			[Address(RVA = "0xD17818", Offset = "0xD17818", VA = "0xD17818")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700028F")]
		public static Color Ivory
		{
			[Token(Token = "0x6000E79")]
			[Address(RVA = "0xD17830", Offset = "0xD17830", VA = "0xD17830")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000290")]
		public static Color Khaki
		{
			[Token(Token = "0x6000E7A")]
			[Address(RVA = "0xD17844", Offset = "0xD17844", VA = "0xD17844")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000291")]
		public static Color Lavender
		{
			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0xD1785C", Offset = "0xD1785C", VA = "0xD1785C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000292")]
		public static Color LavenderBlush
		{
			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0xD17874", Offset = "0xD17874", VA = "0xD17874")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000293")]
		public static Color LawnGreen
		{
			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0xD1788C", Offset = "0xD1788C", VA = "0xD1788C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000294")]
		public static Color LemonChiffon
		{
			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0xD178A4", Offset = "0xD178A4", VA = "0xD178A4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000295")]
		public static Color LightBlue
		{
			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0xD178BC", Offset = "0xD178BC", VA = "0xD178BC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000296")]
		public static Color LightCoral
		{
			[Token(Token = "0x6000E80")]
			[Address(RVA = "0xD178D4", Offset = "0xD178D4", VA = "0xD178D4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000297")]
		public static Color LightCyan
		{
			[Token(Token = "0x6000E81")]
			[Address(RVA = "0xD178EC", Offset = "0xD178EC", VA = "0xD178EC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000298")]
		public static Color LightGoldenrodYellow
		{
			[Token(Token = "0x6000E82")]
			[Address(RVA = "0xD17900", Offset = "0xD17900", VA = "0xD17900")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000299")]
		public static Color LightGray
		{
			[Token(Token = "0x6000E83")]
			[Address(RVA = "0xD17918", Offset = "0xD17918", VA = "0xD17918")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700029A")]
		public static Color LightGreen
		{
			[Token(Token = "0x6000E84")]
			[Address(RVA = "0xD17930", Offset = "0xD17930", VA = "0xD17930")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700029B")]
		public static Color LightPink
		{
			[Token(Token = "0x6000E85")]
			[Address(RVA = "0xD17948", Offset = "0xD17948", VA = "0xD17948")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700029C")]
		public static Color LightSalmon
		{
			[Token(Token = "0x6000E86")]
			[Address(RVA = "0xD17960", Offset = "0xD17960", VA = "0xD17960")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700029D")]
		public static Color LightSeaGreen
		{
			[Token(Token = "0x6000E87")]
			[Address(RVA = "0xD17978", Offset = "0xD17978", VA = "0xD17978")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700029E")]
		public static Color LightSkyBlue
		{
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0xD17990", Offset = "0xD17990", VA = "0xD17990")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700029F")]
		public static Color LightSlateGray
		{
			[Token(Token = "0x6000E89")]
			[Address(RVA = "0xD179A8", Offset = "0xD179A8", VA = "0xD179A8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002A0")]
		public static Color LightSteelBlue
		{
			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0xD179C0", Offset = "0xD179C0", VA = "0xD179C0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002A1")]
		public static Color LightYellow
		{
			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0xD179D8", Offset = "0xD179D8", VA = "0xD179D8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002A2")]
		public static Color Lime
		{
			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0xD179EC", Offset = "0xD179EC", VA = "0xD179EC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002A3")]
		public static Color LimeGreen
		{
			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0xD17A04", Offset = "0xD17A04", VA = "0xD17A04")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002A4")]
		public static Color Linen
		{
			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0xD17A1C", Offset = "0xD17A1C", VA = "0xD17A1C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002A5")]
		public static Color Magenta
		{
			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0xD17A34", Offset = "0xD17A34", VA = "0xD17A34")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002A6")]
		public static Color Maroon
		{
			[Token(Token = "0x6000E90")]
			[Address(RVA = "0xD17A48", Offset = "0xD17A48", VA = "0xD17A48")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002A7")]
		public static Color MediumAquamarine
		{
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0xD17A60", Offset = "0xD17A60", VA = "0xD17A60")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002A8")]
		public static Color MediumBlue
		{
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0xD17A78", Offset = "0xD17A78", VA = "0xD17A78")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002A9")]
		public static Color MediumOrchid
		{
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0xD17A90", Offset = "0xD17A90", VA = "0xD17A90")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002AA")]
		public static Color MediumPurple
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0xD17AA8", Offset = "0xD17AA8", VA = "0xD17AA8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002AB")]
		public static Color MediumSeaGreen
		{
			[Token(Token = "0x6000E95")]
			[Address(RVA = "0xD17AC0", Offset = "0xD17AC0", VA = "0xD17AC0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002AC")]
		public static Color MediumSlateBlue
		{
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xD17AD8", Offset = "0xD17AD8", VA = "0xD17AD8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002AD")]
		public static Color MediumSpringGreen
		{
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xD17AF0", Offset = "0xD17AF0", VA = "0xD17AF0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002AE")]
		public static Color MediumTurquoise
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xD17B08", Offset = "0xD17B08", VA = "0xD17B08")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002AF")]
		public static Color MediumVioletRed
		{
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xD17B20", Offset = "0xD17B20", VA = "0xD17B20")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002B0")]
		public static Color MidnightBlue
		{
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0xD17B38", Offset = "0xD17B38", VA = "0xD17B38")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002B1")]
		public static Color MintCream
		{
			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0xD17B50", Offset = "0xD17B50", VA = "0xD17B50")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002B2")]
		public static Color MistyRose
		{
			[Token(Token = "0x6000E9C")]
			[Address(RVA = "0xD17B68", Offset = "0xD17B68", VA = "0xD17B68")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002B3")]
		public static Color Moccasin
		{
			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0xD17B80", Offset = "0xD17B80", VA = "0xD17B80")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002B4")]
		public static Color NavajoWhite
		{
			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0xD17B98", Offset = "0xD17B98", VA = "0xD17B98")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002B5")]
		public static Color Navy
		{
			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0xD17BB0", Offset = "0xD17BB0", VA = "0xD17BB0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002B6")]
		public static Color OldLace
		{
			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0xD17BC8", Offset = "0xD17BC8", VA = "0xD17BC8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002B7")]
		public static Color Olive
		{
			[Token(Token = "0x6000EA1")]
			[Address(RVA = "0xD17BE0", Offset = "0xD17BE0", VA = "0xD17BE0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002B8")]
		public static Color OliveDrab
		{
			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0xD17BF8", Offset = "0xD17BF8", VA = "0xD17BF8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002B9")]
		public static Color Orange
		{
			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0xD17C10", Offset = "0xD17C10", VA = "0xD17C10")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002BA")]
		public static Color OrangeRed
		{
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0xD17C28", Offset = "0xD17C28", VA = "0xD17C28")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002BB")]
		public static Color Orchid
		{
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0xD17C40", Offset = "0xD17C40", VA = "0xD17C40")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002BC")]
		public static Color PaleGoldenrod
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xD17C58", Offset = "0xD17C58", VA = "0xD17C58")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002BD")]
		public static Color PaleGreen
		{
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0xD17C70", Offset = "0xD17C70", VA = "0xD17C70")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002BE")]
		public static Color PaleTurquoise
		{
			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0xD17C88", Offset = "0xD17C88", VA = "0xD17C88")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002BF")]
		public static Color PaleVioletRed
		{
			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0xD17CA0", Offset = "0xD17CA0", VA = "0xD17CA0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002C0")]
		public static Color PapayaWhip
		{
			[Token(Token = "0x6000EAA")]
			[Address(RVA = "0xD17CB8", Offset = "0xD17CB8", VA = "0xD17CB8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002C1")]
		public static Color PeachPuff
		{
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0xD17CD0", Offset = "0xD17CD0", VA = "0xD17CD0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002C2")]
		public static Color Peru
		{
			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0xD17CE8", Offset = "0xD17CE8", VA = "0xD17CE8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002C3")]
		public static Color Pink
		{
			[Token(Token = "0x6000EAD")]
			[Address(RVA = "0xD17D00", Offset = "0xD17D00", VA = "0xD17D00")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002C4")]
		public static Color Plum
		{
			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0xD17D18", Offset = "0xD17D18", VA = "0xD17D18")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002C5")]
		public static Color PowderBlue
		{
			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0xD17D30", Offset = "0xD17D30", VA = "0xD17D30")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002C6")]
		public static Color Purple
		{
			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0xD17D48", Offset = "0xD17D48", VA = "0xD17D48")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002C7")]
		public static Color Red
		{
			[Token(Token = "0x6000EB1")]
			[Address(RVA = "0xD17D60", Offset = "0xD17D60", VA = "0xD17D60")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002C8")]
		public static Color RosyBrown
		{
			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xD17D78", Offset = "0xD17D78", VA = "0xD17D78")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002C9")]
		public static Color RoyalBlue
		{
			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0xD17D90", Offset = "0xD17D90", VA = "0xD17D90")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002CA")]
		public static Color SaddleBrown
		{
			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0xD17DA8", Offset = "0xD17DA8", VA = "0xD17DA8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002CB")]
		public static Color Salmon
		{
			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0xD17DC0", Offset = "0xD17DC0", VA = "0xD17DC0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002CC")]
		public static Color SandyBrown
		{
			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0xD17DD8", Offset = "0xD17DD8", VA = "0xD17DD8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002CD")]
		public static Color SeaGreen
		{
			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0xD17DF0", Offset = "0xD17DF0", VA = "0xD17DF0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002CE")]
		public static Color SeaShell
		{
			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0xD17E08", Offset = "0xD17E08", VA = "0xD17E08")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002CF")]
		public static Color Sienna
		{
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xD17E20", Offset = "0xD17E20", VA = "0xD17E20")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002D0")]
		public static Color Silver
		{
			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0xD17E38", Offset = "0xD17E38", VA = "0xD17E38")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002D1")]
		public static Color SkyBlue
		{
			[Token(Token = "0x6000EBB")]
			[Address(RVA = "0xD17E50", Offset = "0xD17E50", VA = "0xD17E50")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002D2")]
		public static Color SlateBlue
		{
			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0xD17E68", Offset = "0xD17E68", VA = "0xD17E68")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002D3")]
		public static Color SlateGray
		{
			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0xD17E80", Offset = "0xD17E80", VA = "0xD17E80")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002D4")]
		public static Color Snow
		{
			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0xD17E98", Offset = "0xD17E98", VA = "0xD17E98")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002D5")]
		public static Color SpringGreen
		{
			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0xD17EB0", Offset = "0xD17EB0", VA = "0xD17EB0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002D6")]
		public static Color SteelBlue
		{
			[Token(Token = "0x6000EC0")]
			[Address(RVA = "0xD17EC8", Offset = "0xD17EC8", VA = "0xD17EC8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002D7")]
		public static Color Tan
		{
			[Token(Token = "0x6000EC1")]
			[Address(RVA = "0xD17EE0", Offset = "0xD17EE0", VA = "0xD17EE0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002D8")]
		public static Color Teal
		{
			[Token(Token = "0x6000EC2")]
			[Address(RVA = "0xD17EF8", Offset = "0xD17EF8", VA = "0xD17EF8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002D9")]
		public static Color Thistle
		{
			[Token(Token = "0x6000EC3")]
			[Address(RVA = "0xD17F10", Offset = "0xD17F10", VA = "0xD17F10")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002DA")]
		public static Color Tomato
		{
			[Token(Token = "0x6000EC4")]
			[Address(RVA = "0xD17F28", Offset = "0xD17F28", VA = "0xD17F28")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002DB")]
		public static Color Turquoise
		{
			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0xD17F40", Offset = "0xD17F40", VA = "0xD17F40")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002DC")]
		public static Color Violet
		{
			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0xD17F58", Offset = "0xD17F58", VA = "0xD17F58")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002DD")]
		public static Color Wheat
		{
			[Token(Token = "0x6000EC7")]
			[Address(RVA = "0xD17F70", Offset = "0xD17F70", VA = "0xD17F70")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002DE")]
		public static Color White
		{
			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0xD17F88", Offset = "0xD17F88", VA = "0xD17F88")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002DF")]
		public static Color WhiteSmoke
		{
			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0xD17F9C", Offset = "0xD17F9C", VA = "0xD17F9C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002E0")]
		public static Color Yellow
		{
			[Token(Token = "0x6000ECA")]
			[Address(RVA = "0xD17FB4", Offset = "0xD17FB4", VA = "0xD17FB4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170002E1")]
		public static Color YellowGreen
		{
			[Token(Token = "0x6000ECB")]
			[Address(RVA = "0xD17FC8", Offset = "0xD17FC8", VA = "0xD17FC8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xD171E4", Offset = "0xD171E4", VA = "0xD171E4")]
		public ColorExt()
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xD171EC", Offset = "0xD171EC", VA = "0xD171EC")]
		private static Color ColorFromUINT(uint packedValue)
		{
			return default(Color);
		}
	}
}
namespace NWCommon.Container
{
	[Token(Token = "0x2000228")]
	public class BinaryArray<K, T> where K : IComparable
	{
		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<K> mKeyList;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mValueList;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int maxEntries;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCurrIndex;

		[Token(Token = "0x170002E2")]
		public List<K> KeyList
		{
			[Token(Token = "0x6000ECE")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E3")]
		public List<T> ValueList
		{
			[Token(Token = "0x6000ECF")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ECC")]
		public BinaryArray()
		{
		}

		[Token(Token = "0x6000ECD")]
		public BinaryArray(int maxEntries)
		{
		}

		[Token(Token = "0x6000ED0")]
		public void Add(K key, T val)
		{
		}

		[Token(Token = "0x6000ED1")]
		public int GetFloorIndex(ref K key)
		{
			return default(int);
		}

		[Token(Token = "0x6000ED2")]
		public T Search(K key)
		{
			return (T)null;
		}

		[Token(Token = "0x6000ED3")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class BinaryIntArray<T> : BinaryArray<int, T> where T : new()
	{
		[Token(Token = "0x6000ED4")]
		public BinaryIntArray()
		{
		}

		[Token(Token = "0x6000ED5")]
		public void GetInterpolatorsByKey(int key, out T a, out T b, out float t)
		{
		}
	}
	[Token(Token = "0x200022A")]
	public class BinaryFloatArray<T>
	{
		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<float> mKeyList;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mValueList;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int maxEntries;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCurrIndex;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCurrSize;

		[Token(Token = "0x170002E4")]
		public List<float> KeyList
		{
			[Token(Token = "0x6000ED8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E5")]
		public List<T> ValueList
		{
			[Token(Token = "0x6000ED9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ED6")]
		public BinaryFloatArray()
		{
		}

		[Token(Token = "0x6000ED7")]
		public BinaryFloatArray(int maxEntries)
		{
		}

		[Token(Token = "0x6000EDA")]
		public void Add(float key, T val)
		{
		}

		[Token(Token = "0x6000EDB")]
		public int GetFloorIndex(float key)
		{
			return default(int);
		}

		[Token(Token = "0x6000EDC")]
		public T Search(float key)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EDD")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class DynamicArray<T>
	{
		[Token(Token = "0x4000D45")]
		private const int MinCapacity = 4;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] m_array;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int m_count;

		[Token(Token = "0x170002E6")]
		public int Capacity
		{
			[Token(Token = "0x6000EE1")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EE2")]
			set
			{
			}
		}

		[Token(Token = "0x170002E7")]
		public int Count
		{
			[Token(Token = "0x6000EE3")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002E8")]
		public T[] Array
		{
			[Token(Token = "0x6000EE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EDE")]
		public DynamicArray()
		{
		}

		[Token(Token = "0x6000EDF")]
		public DynamicArray(int capacity)
		{
		}

		[Token(Token = "0x6000EE0")]
		public DynamicArray(IEnumerable<T> items)
		{
		}

		[Token(Token = "0x6000EE5")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6000EE6")]
		public void AddRange(IEnumerable<T> items)
		{
		}

		[Token(Token = "0x6000EE7")]
		public void RemoveAtEnd()
		{
		}

		[Token(Token = "0x6000EE8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000EE9")]
		public List<T> ToList()
		{
			return null;
		}
	}
	[Token(Token = "0x200022C")]
	public class HashSet<T> : ICollection<T>, IEnumerable, IEnumerable<T>
	{
		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<T, short> _dict;

		[Token(Token = "0x170002E9")]
		public int Count
		{
			[Token(Token = "0x6000EF3")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002EA")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000EF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EEA")]
		public HashSet(int capacity)
		{
		}

		[Token(Token = "0x6000EEB")]
		public HashSet()
		{
		}

		[Token(Token = "0x6000EEC")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6000EED")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000EEE")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EEF")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000EF0")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF1")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EF2")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x200022D")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x236050", Offset = "0x236050")]
	public class InstancesPool<T> : IEnumerable<T>, IEnumerable where T : class, new()
	{
		[Token(Token = "0x200022E")]
		public struct Enumerator : IEnumerator<T>, IDisposable, IEnumerator
		{
			[Token(Token = "0x4000D4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private InstancesPool<T> m_collection;

			[Token(Token = "0x4000D4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T m_current;

			[Token(Token = "0x4000D4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int m_index;

			[Token(Token = "0x4000D50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int m_version;

			[Token(Token = "0x170002ED")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EFF")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002EE")]
			public T Current
			{
				[Token(Token = "0x6000EFE")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EFD")]
			internal Enumerator(InstancesPool<T> collection)
			{
			}

			[Token(Token = "0x6000F00")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000F01")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F02")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T m_dummyInstance;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] m_instances;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool[] m_used;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int m_version;

		[Token(Token = "0x170002EB")]
		public int Capacity
		{
			[Token(Token = "0x6000EF6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002EC")]
		public T Item
		{
			[Token(Token = "0x6000EF7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EF5")]
		public InstancesPool(int capacity)
		{
		}

		[Token(Token = "0x6000EF8")]
		public T New()
		{
			return null;
		}

		[Token(Token = "0x6000EF9")]
		public void Delete(T instance)
		{
		}

		[Token(Token = "0x6000EFA")]
		public Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6000EFB")]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EFC")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
}
[Serializable]
[Token(Token = "0x200022F")]
public sealed class ObjectKvp : UnityNameValuePair<UnityEngine.Object>
{
	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public UnityEngine.Object value;

	[Token(Token = "0x170002EF")]
	public override UnityEngine.Object Value
	{
		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x459EE4", Offset = "0x459EE4", VA = "0x459EE4", Slot = "6")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x459EEC", Offset = "0x459EEC", VA = "0x459EEC", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x6000F03")]
	[Address(RVA = "0x459CF0", Offset = "0x459CF0", VA = "0x459CF0")]
	public ObjectKvp(string key, UnityEngine.Object value)
	{
	}
}
[Serializable]
[Token(Token = "0x2000230")]
public class ObjectDictionary : UnityDictionary<UnityEngine.Object>
{
	[Token(Token = "0x2000231")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236084", Offset = "0x236084")]
	private sealed class <SetKeyValuePair>c__AnonStorey0
	{
		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string k;

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x459CE8", Offset = "0x459CE8", VA = "0x459CE8")]
		public <SetKeyValuePair>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x459E2C", Offset = "0x459E2C", VA = "0x459E2C")]
		internal bool <>m__0(ObjectKvp x)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public List<ObjectKvp> values;

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B1A8", Offset = "0x23B1A8")]
	private static Converter<ObjectKvp, UnityKeyValuePair<string, UnityEngine.Object>> <>f__am$cache0;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B1B8", Offset = "0x23B1B8")]
	private static Converter<UnityKeyValuePair<string, UnityEngine.Object>, ObjectKvp> <>f__am$cache1;

	[Token(Token = "0x170002F0")]
	protected override List<UnityKeyValuePair<string, UnityEngine.Object>> KeyValuePairs
	{
		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x459870", Offset = "0x459870", VA = "0x459870", Slot = "17")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x459974", Offset = "0x459974", VA = "0x459974", Slot = "18")]
		set
		{
		}
	}

	[Token(Token = "0x6000F06")]
	[Address(RVA = "0x45980C", Offset = "0x45980C", VA = "0x45980C")]
	public ObjectDictionary()
	{
	}

	[Token(Token = "0x6000F09")]
	[Address(RVA = "0x459AB4", Offset = "0x459AB4", VA = "0x459AB4", Slot = "19")]
	protected override void SetKeyValuePair(string k, UnityEngine.Object v)
	{
	}

	[Token(Token = "0x6000F0A")]
	[Address(RVA = "0x459D64", Offset = "0x459D64", VA = "0x459D64")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DB04", Offset = "0x23DB04")]
	private static UnityKeyValuePair<string, UnityEngine.Object> <get_KeyValuePairs>m__0(ObjectKvp x)
	{
		return null;
	}

	[Token(Token = "0x6000F0B")]
	[Address(RVA = "0x459D68", Offset = "0x459D68", VA = "0x459D68")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DB14", Offset = "0x23DB14")]
	private static ObjectKvp <set_KeyValuePairs>m__1(UnityKeyValuePair<string, UnityEngine.Object> x)
	{
		return null;
	}
}
namespace NWCommon.Container
{
	[Token(Token = "0x2000232")]
	public class PriorityQueue<TPriority, TValue> : ICollection<KeyValuePair<TPriority, TValue>>, IEnumerable, IEnumerable<KeyValuePair<TPriority, TValue>>
	{
		[Token(Token = "0x2000233")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236094", Offset = "0x236094")]
		private sealed class <Contains>c__AnonStorey0
		{
			[Token(Token = "0x4000D58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal TValue val;

			[Token(Token = "0x6000F2B")]
			public <Contains>c__AnonStorey0()
			{
			}

			[Token(Token = "0x6000F2C")]
			internal bool <>m__0(KeyValuePair<TPriority, TValue> item)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<KeyValuePair<TPriority, TValue>> _baseHeap;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IComparer<TPriority> _comparer;

		[Token(Token = "0x170002F1")]
		public bool IsEmpty
		{
			[Token(Token = "0x6000F1B")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F2")]
		public int Count
		{
			[Token(Token = "0x6000F24")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002F3")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000F26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F0E")]
		public PriorityQueue()
		{
		}

		[Token(Token = "0x6000F0F")]
		public PriorityQueue(int capacity)
		{
		}

		[Token(Token = "0x6000F10")]
		public PriorityQueue(int capacity, IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000F11")]
		public PriorityQueue(IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000F12")]
		public PriorityQueue(IEnumerable<KeyValuePair<TPriority, TValue>> data)
		{
		}

		[Token(Token = "0x6000F13")]
		public PriorityQueue(IEnumerable<KeyValuePair<TPriority, TValue>> data, IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000F14")]
		public static PriorityQueue<TPriority, TValue> MergeQueues(PriorityQueue<TPriority, TValue> pq1, PriorityQueue<TPriority, TValue> pq2)
		{
			return null;
		}

		[Token(Token = "0x6000F15")]
		public static PriorityQueue<TPriority, TValue> MergeQueues(PriorityQueue<TPriority, TValue> pq1, PriorityQueue<TPriority, TValue> pq2, IComparer<TPriority> comparer)
		{
			return null;
		}

		[Token(Token = "0x6000F16")]
		public void Enqueue(TPriority priority, TValue value)
		{
		}

		[Token(Token = "0x6000F17")]
		public KeyValuePair<TPriority, TValue> Dequeue()
		{
			return default(KeyValuePair<TPriority, TValue>);
		}

		[Token(Token = "0x6000F18")]
		public TValue DequeueValue()
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000F19")]
		public KeyValuePair<TPriority, TValue> Peek()
		{
			return default(KeyValuePair<TPriority, TValue>);
		}

		[Token(Token = "0x6000F1A")]
		public TValue PeekValue()
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000F1C")]
		private void ExchangeElements(int pos1, int pos2)
		{
		}

		[Token(Token = "0x6000F1D")]
		private void Insert(TPriority priority, TValue value)
		{
		}

		[Token(Token = "0x6000F1E")]
		private int HeapifyFromEndToBeginning(int pos)
		{
			return default(int);
		}

		[Token(Token = "0x6000F1F")]
		private void DeleteRoot()
		{
		}

		[Token(Token = "0x6000F20")]
		private void HeapifyFromBeginningToEnd(int pos)
		{
		}

		[Token(Token = "0x6000F21")]
		public void Add(KeyValuePair<TPriority, TValue> item)
		{
		}

		[Token(Token = "0x6000F22")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000F23")]
		public bool Contains(KeyValuePair<TPriority, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F25")]
		public void CopyTo(KeyValuePair<TPriority, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000F27")]
		public bool Remove(KeyValuePair<TPriority, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F28")]
		public bool Contains(TValue val)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F29")]
		public IEnumerator<KeyValuePair<TPriority, TValue>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F2A")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000234")]
	public struct Quintuple<A, B, C, D, E>
	{
		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public A mA;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public B mB;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public C mC;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public D mD;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public E mE;

		[Token(Token = "0x6000F2D")]
		public Quintuple(A a, B b, C c, D d, E e)
		{
		}
	}
}
namespace CollectionUtilities
{
	[Token(Token = "0x2000235")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2360A4", Offset = "0x2360A4")]
	public class SortedMultiCollection<TKey, TValue> : IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable
	{
		[Token(Token = "0x2000236")]
		public struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, IEnumerator
		{
			[Token(Token = "0x4000D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SortedMultiCollection<TKey, TValue> m_collection;

			[Token(Token = "0x4000D64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private KeyValuePair<TKey, TValue> m_current;

			[Token(Token = "0x4000D65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int m_index;

			[Token(Token = "0x4000D66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int m_version;

			[Token(Token = "0x170002F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F43")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F8")]
			public KeyValuePair<TKey, TValue> Current
			{
				[Token(Token = "0x6000F42")]
				get
				{
					return default(KeyValuePair<TKey, TValue>);
				}
			}

			[Token(Token = "0x6000F41")]
			internal Enumerator(SortedMultiCollection<TKey, TValue> collection)
			{
			}

			[Token(Token = "0x6000F44")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000F45")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F46")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000D5E")]
		private const int MinCapacity = 4;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private KeyValuePair<TKey, TValue>[] m_array;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int m_count;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int m_version;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IComparer<TKey> m_comparer;

		[Token(Token = "0x170002F4")]
		public int Count
		{
			[Token(Token = "0x6000F32")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002F5")]
		public int Capacity
		{
			[Token(Token = "0x6000F33")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F34")]
			set
			{
			}
		}

		[Token(Token = "0x170002F6")]
		public KeyValuePair<TKey, TValue> Item
		{
			[Token(Token = "0x6000F35")]
			get
			{
				return default(KeyValuePair<TKey, TValue>);
			}
		}

		[Token(Token = "0x6000F2E")]
		public SortedMultiCollection()
		{
		}

		[Token(Token = "0x6000F2F")]
		public SortedMultiCollection(IComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000F30")]
		public SortedMultiCollection(int capacity)
		{
		}

		[Token(Token = "0x6000F31")]
		public SortedMultiCollection(int capacity, IComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000F36")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000F37")]
		public void AddRange(IEnumerable<KeyValuePair<TKey, TValue>> items)
		{
		}

		[Token(Token = "0x6000F38")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F39")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000F3A")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3B")]
		public bool ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3C")]
		public Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6000F3D")]
		private IEnumerator<KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F3E")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F3F")]
		private void EnsureCapacity(int capacity)
		{
		}

		[Token(Token = "0x6000F40")]
		private int Find(TKey key)
		{
			return default(int);
		}
	}
}
namespace NWCommon.Container
{
	[Token(Token = "0x2000237")]
	public class Touple<A, B>
	{
		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public A mA;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public B mB;

		[Token(Token = "0x6000F47")]
		public Touple(A a, B b)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000238")]
	public class Triple<A, B, C>
	{
		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public A mA;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public B mB;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public C mC;

		[Token(Token = "0x6000F48")]
		public Triple(A a, B b, C c)
		{
		}
	}
}
namespace UnityEngine
{
	[Token(Token = "0x2000239")]
	public class UnityNameValuePair<V> : UnityKeyValuePair<string, V>
	{
		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x170002F9")]
		public override string Key
		{
			[Token(Token = "0x6000F4B")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F4C")]
			set
			{
			}
		}

		[Token(Token = "0x6000F49")]
		public UnityNameValuePair()
		{
		}

		[Token(Token = "0x6000F4A")]
		public UnityNameValuePair(string key, V value)
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class UnityKeyValuePair<K, V>
	{
		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B1C8", Offset = "0x23B1C8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B1C8", Offset = "0x23B1C8")]
		private K <Key>k__BackingField;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B1FC", Offset = "0x23B1FC")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B1FC", Offset = "0x23B1FC")]
		private V <Value>k__BackingField;

		[Token(Token = "0x170002FA")]
		public virtual K Key
		{
			[Token(Token = "0x6000F4F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DB24", Offset = "0x23DB24")]
			get
			{
				return (K)null;
			}
			[Token(Token = "0x6000F50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DB34", Offset = "0x23DB34")]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public virtual V Value
		{
			[Token(Token = "0x6000F51")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DB44", Offset = "0x23DB44")]
			get
			{
				return (V)null;
			}
			[Token(Token = "0x6000F52")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DB54", Offset = "0x23DB54")]
			set
			{
			}
		}

		[Token(Token = "0x6000F4D")]
		public UnityKeyValuePair()
		{
		}

		[Token(Token = "0x6000F4E")]
		public UnityKeyValuePair(K key, V value)
		{
		}
	}
	[Token(Token = "0x200023B")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2360D8", Offset = "0x2360D8")]
	public abstract class UnityDictionary<K, V> : IDictionary<K, V>, IEnumerable, ICollection<KeyValuePair<K, V>>, IEnumerable<KeyValuePair<K, V>>
	{
		[Token(Token = "0x200023C")]
		internal sealed class UnityDictionaryEnumerator : IEnumerator<KeyValuePair<K, V>>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private KeyValuePair<K, V>[] items;

			[Token(Token = "0x4000D74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x17000306")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F72")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000307")]
			public KeyValuePair<K, V> Current
			{
				[Token(Token = "0x6000F73")]
				get
				{
					return default(KeyValuePair<K, V>);
				}
			}

			[Token(Token = "0x17000308")]
			public KeyValuePair<K, V> Entry
			{
				[Token(Token = "0x6000F74")]
				get
				{
					return default(KeyValuePair<K, V>);
				}
			}

			[Token(Token = "0x17000309")]
			public K Key
			{
				[Token(Token = "0x6000F76")]
				get
				{
					return (K)null;
				}
			}

			[Token(Token = "0x1700030A")]
			public V Value
			{
				[Token(Token = "0x6000F77")]
				get
				{
					return (V)null;
				}
			}

			[Token(Token = "0x6000F70")]
			internal UnityDictionaryEnumerator()
			{
			}

			[Token(Token = "0x6000F71")]
			internal UnityDictionaryEnumerator(UnityDictionary<K, V> ud)
			{
			}

			[Token(Token = "0x6000F75")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000F78")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F79")]
			private void ValidateIndex()
			{
			}

			[Token(Token = "0x6000F7A")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200023D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23610C", Offset = "0x23610C")]
		private sealed class <>c__AnonStorey0
		{
			[Token(Token = "0x4000D75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal K key;

			[Token(Token = "0x6000F7B")]
			public <>c__AnonStorey0()
			{
			}

			[Token(Token = "0x6000F7C")]
			internal bool <>m__0(UnityKeyValuePair<K, V> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200023E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23611C", Offset = "0x23611C")]
		private sealed class <Remove>c__AnonStorey1
		{
			[Token(Token = "0x4000D76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal K key;

			[Token(Token = "0x6000F7D")]
			public <Remove>c__AnonStorey1()
			{
			}

			[Token(Token = "0x6000F7E")]
			internal bool <>m__0(UnityKeyValuePair<K, V> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200023F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23612C", Offset = "0x23612C")]
		private sealed class <ContainsKey>c__AnonStorey2
		{
			[Token(Token = "0x4000D77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal K key;

			[Token(Token = "0x6000F7F")]
			public <ContainsKey>c__AnonStorey2()
			{
			}

			[Token(Token = "0x6000F80")]
			internal bool <>m__0(UnityKeyValuePair<K, V> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B230", Offset = "0x23B230")]
		private static Converter<UnityKeyValuePair<K, V>, KeyValuePair<K, V>> <>f__am$cache0;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B240", Offset = "0x23B240")]
		private static Converter<UnityKeyValuePair<K, V>, K> <>f__am$cache1;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B250", Offset = "0x23B250")]
		private static Converter<UnityKeyValuePair<K, V>, V> <>f__am$cache2;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B260", Offset = "0x23B260")]
		private static Converter<UnityKeyValuePair<K, V>, KeyValuePair<K, V>> <>f__am$cache3;

		[Token(Token = "0x170002FC")]
		protected abstract List<UnityKeyValuePair<K, V>> KeyValuePairs
		{
			[Token(Token = "0x6000F54")]
			get;
			[Token(Token = "0x6000F55")]
			set;
		}

		[Token(Token = "0x170002FD")]
		public virtual V Item
		{
			[Token(Token = "0x6000F57")]
			get
			{
				return (V)null;
			}
			[Token(Token = "0x6000F58")]
			set
			{
			}
		}

		[Token(Token = "0x170002FE")]
		public int Count
		{
			[Token(Token = "0x6000F61")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002FF")]
		public ICollection<K> Keys
		{
			[Token(Token = "0x6000F65")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000300")]
		public ICollection<V> Values
		{
			[Token(Token = "0x6000F66")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000301")]
		public ICollection<KeyValuePair<K, V>> Items
		{
			[Token(Token = "0x6000F67")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000302")]
		public V SyncRoot
		{
			[Token(Token = "0x6000F68")]
			get
			{
				return (V)null;
			}
		}

		[Token(Token = "0x17000303")]
		public bool IsFixedSize
		{
			[Token(Token = "0x6000F69")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000304")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000F6A")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000305")]
		public bool IsSynchronized
		{
			[Token(Token = "0x6000F6B")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F53")]
		protected UnityDictionary()
		{
		}

		[Token(Token = "0x6000F56")]
		protected abstract void SetKeyValuePair(K k, V v);

		[Token(Token = "0x6000F59")]
		public void Add(K key, V value)
		{
		}

		[Token(Token = "0x6000F5A")]
		public void Add(KeyValuePair<K, V> kvp)
		{
		}

		[Token(Token = "0x6000F5B")]
		public bool TryGetValue(K key, out V value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5C")]
		public bool Remove(KeyValuePair<K, V> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5D")]
		public bool Remove(K key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5E")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000F5F")]
		public bool ContainsKey(K key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F60")]
		public bool Contains(KeyValuePair<K, V> kvp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F62")]
		public void CopyTo(KeyValuePair<K, V>[] array, int index)
		{
		}

		[Token(Token = "0x6000F63")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F64")]
		public IEnumerator<KeyValuePair<K, V>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DB64", Offset = "0x23DB64")]
		private static KeyValuePair<K, V> <CopyTo>m__0(UnityKeyValuePair<K, V> x)
		{
			return default(KeyValuePair<K, V>);
		}

		[Token(Token = "0x6000F6D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DB74", Offset = "0x23DB74")]
		private static K <get_Keys>m__1(UnityKeyValuePair<K, V> x)
		{
			return (K)null;
		}

		[Token(Token = "0x6000F6E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DB84", Offset = "0x23DB84")]
		private static V <get_Values>m__2(UnityKeyValuePair<K, V> x)
		{
			return (V)null;
		}

		[Token(Token = "0x6000F6F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DB94", Offset = "0x23DB94")]
		private static KeyValuePair<K, V> <get_Items>m__3(UnityKeyValuePair<K, V> x)
		{
			return default(KeyValuePair<K, V>);
		}
	}
	[Token(Token = "0x2000240")]
	public abstract class UnityDictionary<V> : UnityDictionary<string, V>
	{
		[Token(Token = "0x6000F81")]
		protected UnityDictionary()
		{
		}
	}
}
[Token(Token = "0x2000241")]
public static class CoroutineUtils
{
	[Token(Token = "0x2000242")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23613C", Offset = "0x23613C")]
	private sealed class <Chain>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal IEnumerator[] actions;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal IEnumerator[] $locvar0;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int $locvar1;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal IEnumerator <action>__1;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal MonoBehaviour mb;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal object $current;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x1700030B")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6000F89")]
			[Address(RVA = "0x49ADF4", Offset = "0x49ADF4", VA = "0x49ADF4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F8A")]
			[Address(RVA = "0x49ADFC", Offset = "0x49ADFC", VA = "0x49ADFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x49AA80", Offset = "0x49AA80", VA = "0x49AA80")]
		[DebuggerHidden]
		public <Chain>c__Iterator0()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x49ACD4", Offset = "0x49ACD4", VA = "0x49ACD4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x49AE04", Offset = "0x49AE04", VA = "0x49AE04", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x49AE18", Offset = "0x49AE18", VA = "0x49AE18", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000243")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23614C", Offset = "0x23614C")]
	private sealed class <DelaySeconds>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float delay;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal Action action;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x1700030D")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0x49AF94", Offset = "0x49AF94", VA = "0x49AF94", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F90")]
			[Address(RVA = "0x49AF9C", Offset = "0x49AF9C", VA = "0x49AF9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x49AB34", Offset = "0x49AB34", VA = "0x49AB34")]
		[DebuggerHidden]
		public <DelaySeconds>c__Iterator1()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x49AEA0", Offset = "0x49AEA0", VA = "0x49AEA0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x49AFA4", Offset = "0x49AFA4", VA = "0x49AFA4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x49AFB8", Offset = "0x49AFB8", VA = "0x49AFB8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000244")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23615C", Offset = "0x23615C")]
	private sealed class <WaitForSeconds>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float time;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x1700030F")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6000F95")]
			[Address(RVA = "0x49B410", Offset = "0x49B410", VA = "0x49B410", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000310")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0x49B418", Offset = "0x49B418", VA = "0x49B418", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x49ABCC", Offset = "0x49ABCC", VA = "0x49ABCC")]
		[DebuggerHidden]
		public <WaitForSeconds>c__Iterator2()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x49B344", Offset = "0x49B344", VA = "0x49B344", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x49B420", Offset = "0x49B420", VA = "0x49B420", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x49B434", Offset = "0x49B434", VA = "0x49B434", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000245")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23616C", Offset = "0x23616C")]
	private sealed class <WaitForEndOfFrame>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal object $current;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal bool $disposing;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int $PC;

		[Token(Token = "0x17000311")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6000F9B")]
			[Address(RVA = "0x49B298", Offset = "0x49B298", VA = "0x49B298", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000312")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F9C")]
			[Address(RVA = "0x49B2A0", Offset = "0x49B2A0", VA = "0x49B2A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x49AC40", Offset = "0x49AC40", VA = "0x49AC40")]
		[DebuggerHidden]
		public <WaitForEndOfFrame>c__Iterator3()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x49B1D4", Offset = "0x49B1D4", VA = "0x49B1D4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x49B2A8", Offset = "0x49B2A8", VA = "0x49B2A8", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x49B2BC", Offset = "0x49B2BC", VA = "0x49B2BC", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000246")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23617C", Offset = "0x23617C")]
	private sealed class <Do>c__Iterator4 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Action action;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x17000313")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6000FA1")]
			[Address(RVA = "0x49B128", Offset = "0x49B128", VA = "0x49B128", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000314")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0x49B130", Offset = "0x49B130", VA = "0x49B130", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x49ACCC", Offset = "0x49ACCC", VA = "0x49ACCC")]
		[DebuggerHidden]
		public <Do>c__Iterator4()
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x49B040", Offset = "0x49B040", VA = "0x49B040", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x49B138", Offset = "0x49B138", VA = "0x49B138", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x49B14C", Offset = "0x49B14C", VA = "0x49B14C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x6000F82")]
	[Address(RVA = "0x49A9E0", Offset = "0x49A9E0", VA = "0x49A9E0")]
	[DebuggerHidden]
	public static IEnumerator Chain(MonoBehaviour mb, params IEnumerator[] actions)
	{
		return null;
	}

	[Token(Token = "0x6000F83")]
	[Address(RVA = "0x49AA88", Offset = "0x49AA88", VA = "0x49AA88")]
	[DebuggerHidden]
	public static IEnumerator DelaySeconds(Action action, float delay)
	{
		return null;
	}

	[Token(Token = "0x6000F84")]
	[Address(RVA = "0x49AB3C", Offset = "0x49AB3C", VA = "0x49AB3C")]
	[DebuggerHidden]
	public static IEnumerator WaitForSeconds(float time)
	{
		return null;
	}

	[Token(Token = "0x6000F85")]
	[Address(RVA = "0x49ABD4", Offset = "0x49ABD4", VA = "0x49ABD4")]
	[DebuggerHidden]
	public static IEnumerator WaitForEndOfFrame()
	{
		return null;
	}

	[Token(Token = "0x6000F86")]
	[Address(RVA = "0x49AC48", Offset = "0x49AC48", VA = "0x49AC48")]
	[DebuggerHidden]
	public static IEnumerator Do(Action action)
	{
		return null;
	}
}
namespace NWCommon
{
	[Token(Token = "0x2000247")]
	public class Curve1D
	{
		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Curve curveX;

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x6FB168", Offset = "0x6FB168", VA = "0x6FB168")]
		public Curve1D()
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x6FB22C", Offset = "0x6FB22C", VA = "0x6FB22C")]
		public void SetTangents()
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x6FB43C", Offset = "0x6FB43C", VA = "0x6FB43C")]
		private static void SetCurveKeyTangent(ref CurveKey prev, ref CurveKey cur, ref CurveKey next)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x6FB640", Offset = "0x6FB640", VA = "0x6FB640")]
		public void AddPoint(float value, float time)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x6FB700", Offset = "0x6FB700", VA = "0x6FB700")]
		public float GetPointOnCurve(float time)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000248")]
	public class Curve4D
	{
		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Curve curveX;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Curve curveY;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Curve curveZ;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Curve curveW;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Length;

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x6F8328", Offset = "0x6F8328", VA = "0x6F8328")]
		public Curve4D()
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x6F96F0", Offset = "0x6F96F0", VA = "0x6F96F0")]
		public void SetTangents()
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x6FB734", Offset = "0x6FB734", VA = "0x6FB734")]
		private static void SetCurveKeyTangent(ref CurveKey prev, ref CurveKey cur, ref CurveKey next)
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x6F8E28", Offset = "0x6F8E28", VA = "0x6F8E28")]
		public void AddPoint(Vector4 point, float time)
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x6F95F8", Offset = "0x6F95F8", VA = "0x6F95F8")]
		public Vector4 GetPointOnCurve(float time)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x6FB938", Offset = "0x6FB938", VA = "0x6FB938")]
		public void AddPoint(Color point, float time)
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x6FBB68", Offset = "0x6FBB68", VA = "0x6FBB68")]
		public Color GetColorOnCurve(float time)
		{
			return default(Color);
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x6FBC58", Offset = "0x6FBC58", VA = "0x6FBC58")]
		public static void DrawCurve(Curve4D curve, int subDivisions)
		{
		}
	}
}
namespace Discovery.DebugCode
{
	[Token(Token = "0x2000249")]
	public class DebugBox
	{
		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public BoundingBox mAABB;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color mColor;

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x49D3E4", Offset = "0x49D3E4", VA = "0x49D3E4")]
		public DebugBox()
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x49D3EC", Offset = "0x49D3EC", VA = "0x49D3EC")]
		public DebugBox(Vector3 min, Vector3 max, Color col)
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x49D488", Offset = "0x49D488", VA = "0x49D488")]
		public DebugBox(BoundingBox bb, Color col)
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x49D4F0", Offset = "0x49D4F0", VA = "0x49D4F0")]
		public void Draw()
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x49D4F4", Offset = "0x49D4F4", VA = "0x49D4F4")]
		private void DrawBoundingBox(BoundingBox bb, Color col)
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class DebugLine
	{
		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 mStart;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 mEnd;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color mColor;

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x49D4F8", Offset = "0x49D4F8", VA = "0x49D4F8")]
		public DebugLine()
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x49D500", Offset = "0x49D500", VA = "0x49D500")]
		public DebugLine(Vector3 start, Vector3 end, Color col)
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x49D558", Offset = "0x49D558", VA = "0x49D558")]
		public void Draw()
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x49D55C", Offset = "0x49D55C", VA = "0x49D55C")]
		private void DrawLine(Vector3 start, Vector3 end, Color col)
		{
		}
	}
	[Token(Token = "0x200024B")]
	public class DebugText
	{
		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 mPosition;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float mSize;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string mText;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Color mColor;

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x49D560", Offset = "0x49D560", VA = "0x49D560")]
		public DebugText()
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x49D628", Offset = "0x49D628", VA = "0x49D628")]
		public DebugText(Vector3 position, string text, float size, Color col)
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x49D748", Offset = "0x49D748", VA = "0x49D748")]
		public void Draw()
		{
		}
	}
}
namespace NWCommon
{
	[Token(Token = "0x200024C")]
	public class EventArgs<T> : EventArgs
	{
		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T m_Value;

		[Token(Token = "0x17000315")]
		public T Value
		{
			[Token(Token = "0x6000FC0")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000FC1")]
			private set
			{
			}
		}

		[Token(Token = "0x6000FBE")]
		public EventArgs()
		{
		}

		[Token(Token = "0x6000FBF")]
		public EventArgs(T value)
		{
		}
	}
}
namespace Utils
{
	[Token(Token = "0x200024D")]
	public class ColladaExporter : IDisposable
	{
		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected string path;

		[Token(Token = "0x4000DA1")]
		public const string COLLADA = "http://www.collada.org/2005/11/COLLADASchema";

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B270", Offset = "0x23B270")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B270", Offset = "0x23B270")]
		private XmlDocument <xml>k__BackingField;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B2A4", Offset = "0x23B2A4")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B2A4", Offset = "0x23B2A4")]
		private XmlNamespaceManager <nsManager>k__BackingField;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected XmlNode root;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected XmlNode cameras;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected XmlNode lights;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected XmlNode images;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected XmlNode effects;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected XmlNode materials;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected XmlNode geometries;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected XmlNode animations;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected XmlNode controllers;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected XmlNode visual_scenes;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected XmlNode default_scene;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected XmlNode scene;

		[Token(Token = "0x17000316")]
		public XmlDocument xml
		{
			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0x8E49F8", Offset = "0x8E49F8", VA = "0x8E49F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DD84", Offset = "0x23DD84")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0x8E49F0", Offset = "0x8E49F0", VA = "0x8E49F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DD94", Offset = "0x23DD94")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000317")]
		public XmlNamespaceManager nsManager
		{
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0x8E4A08", Offset = "0x8E4A08", VA = "0x8E4A08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DDA4", Offset = "0x23DDA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0x8E4A00", Offset = "0x8E4A00", VA = "0x8E4A00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DDB4", Offset = "0x23DDB4")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x8E32F4", Offset = "0x8E32F4", VA = "0x8E32F4")]
		public ColladaExporter(string path)
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x8E32FC", Offset = "0x8E32FC", VA = "0x8E32FC")]
		public ColladaExporter(string path, bool replace)
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x8E4A10", Offset = "0x8E4A10", VA = "0x8E4A10", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x8E4A14", Offset = "0x8E4A14", VA = "0x8E4A14")]
		public void Save()
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x8E4A50", Offset = "0x8E4A50", VA = "0x8E4A50")]
		public XmlNode AddGeometry(string id, Mesh sourceMesh)
		{
			return null;
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x8E8880", Offset = "0x8E8880", VA = "0x8E8880")]
		public XmlNode AddGeometryToScene(string id, string name)
		{
			return null;
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x8E8F84", Offset = "0x8E8F84", VA = "0x8E8F84")]
		public XmlNode AddGeometryToScene(string id, string name, Matrix4x4 matrix)
		{
			return null;
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x8E899C", Offset = "0x8E899C", VA = "0x8E899C")]
		public XmlNode AddGeometryToScene(string id, string name, Matrix4x4 matrix, XmlNode parent)
		{
			return null;
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x8E900C", Offset = "0x8E900C", VA = "0x8E900C")]
		public XmlNode AddEmptyToScene(string id, string name)
		{
			return null;
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x8E95B4", Offset = "0x8E95B4", VA = "0x8E95B4")]
		public XmlNode AddEmptyToScene(string id, string name, Matrix4x4 matrix)
		{
			return null;
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x8E9128", Offset = "0x8E9128", VA = "0x8E9128")]
		public XmlNode AddEmptyToScene(string id, string name, Matrix4x4 matrix, XmlNode parent)
		{
			return null;
		}
	}
}
[Token(Token = "0x200024E")]
public class ObjExporter
{
	[Token(Token = "0x6000FD1")]
	[Address(RVA = "0x45868C", Offset = "0x45868C", VA = "0x45868C")]
	public ObjExporter()
	{
	}

	[Token(Token = "0x6000FD2")]
	[Address(RVA = "0x458694", Offset = "0x458694", VA = "0x458694")]
	public static string MeshToString(MeshFilter mf)
	{
		return null;
	}

	[Token(Token = "0x6000FD3")]
	[Address(RVA = "0x459478", Offset = "0x459478", VA = "0x459478")]
	public static void MeshToFile(MeshFilter mf, string filename)
	{
	}
}
[Token(Token = "0x200024F")]
public class FpsCounter : MonoBehaviour
{
	[Token(Token = "0x4000DB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float updateInterval;

	[Token(Token = "0x4000DB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float accum;

	[Token(Token = "0x4000DB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int frames;

	[Token(Token = "0x4000DB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float timeleft;

	[Token(Token = "0x4000DB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int width;

	[Token(Token = "0x4000DB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int height;

	[Token(Token = "0x4000DB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int superSize;

	[Token(Token = "0x4000DB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool screenShotOnC;

	[Token(Token = "0x4000DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool mainCameraAlpha;

	[Token(Token = "0x4000DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private BinaryFloatArray<float> binArray;

	[Token(Token = "0x4000DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private StringReference fpsStr;

	[Token(Token = "0x4000DBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private StringReference sysStr;

	[Token(Token = "0x4000DBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int makeScreenShot;

	[Token(Token = "0x4000DBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool showResourceUsage;

	[Token(Token = "0x4000DBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool extendedInfo;

	[Token(Token = "0x4000DBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RenderTexture rt;

	[Token(Token = "0x6000FD4")]
	[Address(RVA = "0x4B4C48", Offset = "0x4B4C48", VA = "0x4B4C48")]
	public FpsCounter()
	{
	}

	[Token(Token = "0x6000FD5")]
	[Address(RVA = "0x4B4D28", Offset = "0x4B4D28", VA = "0x4B4D28")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FD6")]
	[Address(RVA = "0x4B4D2C", Offset = "0x4B4D2C", VA = "0x4B4D2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FD7")]
	[Address(RVA = "0x4B4E68", Offset = "0x4B4E68", VA = "0x4B4E68")]
	private string ResourceDisplay()
	{
		return null;
	}

	[Token(Token = "0x6000FD8")]
	[Address(RVA = "0x4B51FC", Offset = "0x4B51FC", VA = "0x4B51FC")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000250")]
public class GameObjectAutoDestroy : MonoBehaviour
{
	[Token(Token = "0x4000DC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float lifeTime;

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float msec;

	[Token(Token = "0x6000FD9")]
	[Address(RVA = "0x4B6A4C", Offset = "0x4B6A4C", VA = "0x4B6A4C")]
	public GameObjectAutoDestroy()
	{
	}

	[Token(Token = "0x6000FDA")]
	[Address(RVA = "0x4B6A5C", Offset = "0x4B6A5C", VA = "0x4B6A5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FDB")]
	[Address(RVA = "0x4B6A68", Offset = "0x4B6A68", VA = "0x4B6A68")]
	private void LateUpdate()
	{
	}
}
[Token(Token = "0x2000251")]
[ExecuteInEditMode]
public class BloomComponent : MonoBehaviour
{
	[Token(Token = "0x6000FDC")]
	[Address(RVA = "0x54FAF0", Offset = "0x54FAF0", VA = "0x54FAF0")]
	public BloomComponent()
	{
	}
}
[Token(Token = "0x2000252")]
public class FogOverride : MonoBehaviour
{
	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float previousFogStartDistance;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float previousFogEndDistance;

	[Token(Token = "0x4000DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Color previousFogColor;

	[Token(Token = "0x4000DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float customFogStartDistance;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float customFogEndDistance;

	[Token(Token = "0x4000DC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color customFogColor;

	[Token(Token = "0x6000FDD")]
	[Address(RVA = "0x4B4B10", Offset = "0x4B4B10", VA = "0x4B4B10")]
	public FogOverride()
	{
	}

	[Token(Token = "0x6000FDE")]
	[Address(RVA = "0x4B4B6C", Offset = "0x4B4B6C", VA = "0x4B4B6C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FDF")]
	[Address(RVA = "0x4B4B70", Offset = "0x4B4B70", VA = "0x4B4B70")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FE0")]
	[Address(RVA = "0x4B4B74", Offset = "0x4B4B74", VA = "0x4B4B74")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x6000FE1")]
	[Address(RVA = "0x4B4C04", Offset = "0x4B4C04", VA = "0x4B4C04")]
	private void OnPostRender()
	{
	}
}
namespace NWCommon
{
	[Token(Token = "0x2000253")]
	public class IntervalCounterFloat
	{
		[Token(Token = "0x2000254")]
		public delegate void IntervalReachedHandler(object sender, EventArgs e);

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float value;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float interval;

		[Token(Token = "0x17000318")]
		public bool Odd
		{
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0x6FD398", Offset = "0x6FD398", VA = "0x6FD398")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000319")]
		public int IntervalCount
		{
			[Token(Token = "0x6000FE4")]
			[Address(RVA = "0x6FD3C4", Offset = "0x6FD3C4", VA = "0x6FD3C4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1400000C")]
		public event IntervalReachedHandler IntervalReached
		{
			[Token(Token = "0x6000FE5")]
			[Address(RVA = "0x6FD3DC", Offset = "0x6FD3DC", VA = "0x6FD3DC")]
			add
			{
			}
			[Token(Token = "0x6000FE6")]
			[Address(RVA = "0x6FD4E8", Offset = "0x6FD4E8", VA = "0x6FD4E8")]
			remove
			{
			}
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x6FD370", Offset = "0x6FD370", VA = "0x6FD370")]
		public IntervalCounterFloat(float initValue, float intervalValue)
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x6FD5F4", Offset = "0x6FD5F4", VA = "0x6FD5F4")]
		public void Update(float change)
		{
		}
	}
	[Token(Token = "0x2000255")]
	public class MarkovNameGenerator
	{
		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] data;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Dictionary<string, List<char>> _chains;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private List<string> _samples;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<string> _used;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private System.Random _rnd;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _order;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int _minLength;

		[Token(Token = "0x1700031A")]
		public string NextName
		{
			[Token(Token = "0x6000FED")]
			[Address(RVA = "0x6FE310", Offset = "0x6FE310", VA = "0x6FE310")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x6FDA80", Offset = "0x6FDA80", VA = "0x6FDA80")]
		public MarkovNameGenerator(IEnumerable<string> sampleNames, int order, int minLength)
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x6FED9C", Offset = "0x6FED9C", VA = "0x6FED9C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x6FEC50", Offset = "0x6FEC50", VA = "0x6FEC50")]
		private char GetLetter(string token)
		{
			return default(char);
		}
	}
}
namespace MessengerExtensions
{
	[Token(Token = "0x2000256")]
	public static class MessengerThatIncludesInactiveElements
	{
		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x6CB44C", Offset = "0x6CB44C", VA = "0x6CB44C")]
		private static void InvokeIfExists(this object objectToCheck, string methodName, params object[] parameters)
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x6CB508", Offset = "0x6CB508", VA = "0x6CB508")]
		public static void BroadcastToAll(this GameObject gameobject, string methodName, params object[] parameters)
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x6CB5E0", Offset = "0x6CB5E0", VA = "0x6CB5E0")]
		public static void BroadcastToAll(this UnityEngine.Component component, string methodName, params object[] parameters)
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x6CB620", Offset = "0x6CB620", VA = "0x6CB620")]
		public static void SendMessageToAll(this GameObject gameobject, string methodName, params object[] parameters)
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x6CB6F8", Offset = "0x6CB6F8", VA = "0x6CB6F8")]
		public static void SendMessageToAll(this UnityEngine.Component component, string methodName, params object[] parameters)
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x6CB738", Offset = "0x6CB738", VA = "0x6CB738")]
		public static void SendMessageUpwardsToAll(this GameObject gameobject, string methodName, params object[] parameters)
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x6CB850", Offset = "0x6CB850", VA = "0x6CB850")]
		public static void SendMessageUpwardsToAll(this UnityEngine.Component component, string methodName, params object[] parameters)
		{
		}
	}
}
namespace NWNetwork
{
	[Token(Token = "0x2000257")]
	public class NWSocket
	{
		[Token(Token = "0x2000258")]
		public delegate void Log(string t);

		[Token(Token = "0x2000259")]
		public class State
		{
			[Token(Token = "0x4000DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public byte[] buffer;

			[Token(Token = "0x6001002")]
			[Address(RVA = "0x45598C", Offset = "0x45598C", VA = "0x45598C")]
			public State()
			{
			}
		}

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Socket _socket;

		[Token(Token = "0x4000DD3")]
		private const int bufSize = 8192;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private State state;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private EndPoint epFrom;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private EndPoint epTo;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AsyncCallback recv;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Log logCB;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isServer;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B30C", Offset = "0x23B30C")]
		private static Log <>f__am$cache0;

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x4557AC", Offset = "0x4557AC", VA = "0x4557AC")]
		public NWSocket()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x455A14", Offset = "0x455A14", VA = "0x455A14")]
		public void Server(string address, int port, bool blocking = true)
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x455B58", Offset = "0x455B58", VA = "0x455B58")]
		public void Client(string address, int port, bool blocking = true)
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x455C44", Offset = "0x455C44", VA = "0x455C44")]
		public int Receive(byte[] buffer)
		{
			return default(int);
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x45612C", Offset = "0x45612C", VA = "0x45612C")]
		public int Send(byte[] data)
		{
			return default(int);
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x456168", Offset = "0x456168", VA = "0x456168")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DE34", Offset = "0x23DE34")]
		private static void <NWSocket>m__0(string a)
		{
		}
	}
}
[Token(Token = "0x200025A")]
public class NWNetworkHelper : MonoBehaviour
{
	[Token(Token = "0x1700031B")]
	public static bool isClient
	{
		[Token(Token = "0x6001004")]
		[Address(RVA = "0x45622C", Offset = "0x45622C", VA = "0x45622C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700031C")]
	public static bool isServer
	{
		[Token(Token = "0x6001005")]
		[Address(RVA = "0x456234", Offset = "0x456234", VA = "0x456234")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700031D")]
	public static string ipAddress
	{
		[Token(Token = "0x6001006")]
		[Address(RVA = "0x45623C", Offset = "0x45623C", VA = "0x45623C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001003")]
	[Address(RVA = "0x456224", Offset = "0x456224", VA = "0x456224")]
	public NWNetworkHelper()
	{
	}
}
namespace NWNetworkTest.Properties
{
	[Token(Token = "0x200025B")]
	[DebuggerNonUserCode]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2361AC", Offset = "0x2361AC")]
	[AttributeAttribute(Name = "GeneratedCodeAttribute", RVA = "0x2361AC", Offset = "0x2361AC")]
	internal class Resources
	{
		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ResourceManager resourceMan;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static CultureInfo resourceCulture;

		[Token(Token = "0x1700031E")]
		[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x23F278", Offset = "0x23F278")]
		internal static ResourceManager ResourceManager
		{
			[Token(Token = "0x6001008")]
			[Address(RVA = "0x4562A0", Offset = "0x4562A0", VA = "0x4562A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031F")]
		[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x23F28C", Offset = "0x23F28C")]
		internal static CultureInfo Culture
		{
			[Token(Token = "0x6001009")]
			[Address(RVA = "0x4563D8", Offset = "0x4563D8", VA = "0x4563D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100A")]
			[Address(RVA = "0x45643C", Offset = "0x45643C", VA = "0x45643C")]
			set
			{
			}
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x456298", Offset = "0x456298", VA = "0x456298")]
		internal Resources()
		{
		}
	}
}
namespace NWCommon
{
	[Token(Token = "0x200025C")]
	public static class NWBitConverter
	{
		[Token(Token = "0x4000DDE")]
		private const int numBuffers = 1024;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte[][] buf1;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static byte[][] buf2;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static byte[][] buf4;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static byte[][] buf8;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly bool IsLittleEndian;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static int currentIndex;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static object threadLock;

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x6FF854", Offset = "0x6FF854", VA = "0x6FF854")]
		static NWBitConverter()
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0x6FFBF4", Offset = "0x6FFBF4", VA = "0x6FFBF4")]
		public static long DoubleToInt64Bits(double value)
		{
			return default(long);
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x6FFBF8", Offset = "0x6FFBF8", VA = "0x6FFBF8")]
		public static byte[] GetBytes(bool value)
		{
			return null;
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x6FFD54", Offset = "0x6FFD54", VA = "0x6FFD54")]
		public static byte[] GetBytes(char value)
		{
			return null;
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x6FFF38", Offset = "0x6FFF38", VA = "0x6FFF38")]
		public static byte[] GetBytes(double value)
		{
			return null;
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x6FFDD4", Offset = "0x6FFDD4", VA = "0x6FFDD4")]
		public static byte[] GetBytes(short value)
		{
			return null;
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0x70012C", Offset = "0x70012C", VA = "0x70012C")]
		public static byte[] GetBytes(int value)
		{
			return null;
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0x6FFFC0", Offset = "0x6FFFC0", VA = "0x6FFFC0")]
		public static byte[] GetBytes(long value)
		{
			return null;
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0x700290", Offset = "0x700290", VA = "0x700290")]
		public static byte[] GetBytes(float value)
		{
			return null;
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0x700310", Offset = "0x700310", VA = "0x700310")]
		public static byte[] GetBytes(ushort value)
		{
			return null;
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0x700390", Offset = "0x700390", VA = "0x700390")]
		public static byte[] GetBytes(uint value)
		{
			return null;
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x700410", Offset = "0x700410", VA = "0x700410")]
		public static byte[] GetBytes(ulong value)
		{
			return null;
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x700498", Offset = "0x700498", VA = "0x700498")]
		private static char GetHexValue(int i)
		{
			return default(char);
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0x7004B0", Offset = "0x7004B0", VA = "0x7004B0")]
		public static double Int64BitsToDouble(long value)
		{
			return default(double);
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x7004B4", Offset = "0x7004B4", VA = "0x7004B4")]
		public static bool ToBoolean(byte[] value, int startIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x700504", Offset = "0x700504", VA = "0x700504")]
		public static char ToChar(byte[] value, int startIndex)
		{
			return default(char);
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x700680", Offset = "0x700680", VA = "0x700680")]
		public static double ToDouble(byte[] value, int startIndex)
		{
			return default(double);
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x700590", Offset = "0x700590", VA = "0x700590")]
		public static short ToInt16(byte[] value, int startIndex)
		{
			return default(short);
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x70085C", Offset = "0x70085C", VA = "0x70085C")]
		public static int ToInt32(byte[] value, int startIndex)
		{
			return default(int);
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x700708", Offset = "0x700708", VA = "0x700708")]
		public static long ToInt64(byte[] value, int startIndex)
		{
			return default(long);
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x700968", Offset = "0x700968", VA = "0x700968")]
		public static float ToSingle(byte[] value, int startIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x7009F0", Offset = "0x7009F0", VA = "0x7009F0")]
		public static string ToString(byte[] value)
		{
			return null;
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x700D68", Offset = "0x700D68", VA = "0x700D68")]
		public static string ToString(byte[] value, int startIndex)
		{
			return null;
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x700AD8", Offset = "0x700AD8", VA = "0x700AD8")]
		public static string ToString(byte[] value, int startIndex, int length)
		{
			return null;
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x700E58", Offset = "0x700E58", VA = "0x700E58")]
		public static ushort ToUInt16(byte[] value, int startIndex)
		{
			return default(ushort);
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x700EE4", Offset = "0x700EE4", VA = "0x700EE4")]
		public static uint ToUInt32(byte[] value, int startIndex)
		{
			return default(uint);
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x700F6C", Offset = "0x700F6C", VA = "0x700F6C")]
		public static ulong ToUInt64(byte[] value, int startIndex)
		{
			return default(ulong);
		}
	}
}
[Token(Token = "0x200025D")]
public class NWCommonHelper
{
	[Token(Token = "0x4000DE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static NWRandom guidrand;

	[Token(Token = "0x4000DE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static byte[] guidDestinationArray;

	[Token(Token = "0x4000DE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static List<string> todoLog;

	[Token(Token = "0x6001026")]
	[Address(RVA = "0x7077A8", Offset = "0x7077A8", VA = "0x7077A8")]
	public NWCommonHelper()
	{
	}

	[Token(Token = "0x6001027")]
	[Address(RVA = "0x7077B0", Offset = "0x7077B0", VA = "0x7077B0")]
	public static void BroadcastMessageExt(GameObject targetObj, string methodName)
	{
	}

	[Token(Token = "0x6001028")]
	[Address(RVA = "0x7078F0", Offset = "0x7078F0", VA = "0x7078F0")]
	public static Guid GenerateComb()
	{
		return default(Guid);
	}

	[Token(Token = "0x6001029")]
	[Address(RVA = "0x707BB0", Offset = "0x707BB0", VA = "0x707BB0")]
	public static Guid GenerateCombUnity()
	{
		return default(Guid);
	}

	[Token(Token = "0x600102A")]
	[Address(RVA = "0x708210", Offset = "0x708210", VA = "0x708210")]
	public static void MemSetBool(bool[] array, bool value)
	{
	}

	[Token(Token = "0x600102B")]
	[Address(RVA = "0x708370", Offset = "0x708370", VA = "0x708370")]
	public static void MemSetByte(byte[] array, byte value)
	{
	}

	[Token(Token = "0x600102C")]
	[Address(RVA = "0x7084D0", Offset = "0x7084D0", VA = "0x7084D0")]
	public static void MemSetUShort(ushort[] array, ushort value)
	{
	}

	[Token(Token = "0x600102D")]
	[Address(RVA = "0x708634", Offset = "0x708634", VA = "0x708634")]
	public static void MemSetInt(int[] array, int value)
	{
	}

	[Token(Token = "0x600102E")]
	[Address(RVA = "0x708798", Offset = "0x708798", VA = "0x708798")]
	public static void MemSetUInt(uint[] array, uint value)
	{
	}

	[Token(Token = "0x600102F")]
	[Address(RVA = "0x7088FC", Offset = "0x7088FC", VA = "0x7088FC")]
	public static void ToDo(string log)
	{
	}
}
namespace NWCommon
{
	[Token(Token = "0x200025E")]
	public static class NWStaticHelper
	{
		[Token(Token = "0x6001031")]
		public static string ToDebugString<TKey, TValue>(this IDictionary<TKey, TValue> dictionary)
		{
			return null;
		}

		[Token(Token = "0x6001032")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23DE54", Offset = "0x23DE54")]
		private static string <ToDebugString`2>m__0<TKey, TValue>(KeyValuePair<TKey, TValue> kv)
		{
			return null;
		}
	}
	[Token(Token = "0x200025F")]
	public static class NWMathHelper
	{
		[Token(Token = "0x6001033")]
		[Address(RVA = "0x700FF4", Offset = "0x700FF4", VA = "0x700FF4")]
		public static Matrix4x4 GetRotationMatrix(this Vector3 source, Vector3 target)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x70107C", Offset = "0x70107C", VA = "0x70107C")]
		public static Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x7011CC", Offset = "0x7011CC", VA = "0x7011CC")]
		public static void GetYawPitch(Vector3 fromVector, Vector3 toVector, out float yawInDegree, out float pitchInDegree)
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x701334", Offset = "0x701334", VA = "0x701334")]
		public static float InvSqrt(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x70136C", Offset = "0x70136C", VA = "0x70136C")]
		public static void FastNormalize(this Vector3 a)
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x701460", Offset = "0x701460", VA = "0x701460")]
		public static bool FastApproximately(float a, float b, float threshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x701494", Offset = "0x701494", VA = "0x701494")]
		public static Vector3 GetFloorVector(Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x701590", Offset = "0x701590", VA = "0x701590")]
		public static Vector3 GetIntVector(Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x701820", Offset = "0x701820", VA = "0x701820")]
		public static Vector3 GetVectorFraction(Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x701904", Offset = "0x701904", VA = "0x701904")]
		public static float fract(float value)
		{
			return default(float);
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x70190C", Offset = "0x70190C", VA = "0x70190C")]
		public static int FastFloorShort(float fp)
		{
			return default(int);
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x701930", Offset = "0x701930", VA = "0x701930")]
		public static float PackNormal(Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x7019EC", Offset = "0x7019EC", VA = "0x7019EC")]
		public static Vector3 UnpackNormal(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0x701A88", Offset = "0x701A88", VA = "0x701A88")]
		public static float PackColor(Vector4 color)
		{
			return default(float);
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x701B58", Offset = "0x701B58", VA = "0x701B58")]
		public static Vector4 UnpackColor(float f)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x701BE8", Offset = "0x701BE8", VA = "0x701BE8")]
		public static float PackTangent(Vector4 tangent)
		{
			return default(float);
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x701CD4", Offset = "0x701CD4", VA = "0x701CD4")]
		public static Vector4 UnpackTangent(float f)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x701D74", Offset = "0x701D74", VA = "0x701D74")]
		public static Vector3 GetDominatingAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x7018D4", Offset = "0x7018D4", VA = "0x7018D4")]
		public static float PositiveFloatMod(float x, float m)
		{
			return default(float);
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x7020EC", Offset = "0x7020EC", VA = "0x7020EC")]
		public static void RecalculateTangents(Mesh theMesh, Vector3[] vertices, Vector3[] normals, Vector2[] texcoords)
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x702A88", Offset = "0x702A88", VA = "0x702A88")]
		public static bool IntersectsBox(Vector3 a, Vector3 b, Vector3 c, Vector3 boxCenter, Vector3 boxExtents)
		{
			return default(bool);
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x703A2C", Offset = "0x703A2C", VA = "0x703A2C")]
		private static float fmin(float a, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x7039FC", Offset = "0x7039FC", VA = "0x7039FC")]
		private static float fmax(float a, float b, float c)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000260")]
	public static class NWPlatformSpecific
	{
		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte[] buffer;

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x703A5C", Offset = "0x703A5C", VA = "0x703A5C")]
		public static Guid GetRandomGuid()
		{
			return default(Guid);
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x703AE0", Offset = "0x703AE0", VA = "0x703AE0")]
		public static string EncodeMD5(string str)
		{
			return null;
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x6F5FF4", Offset = "0x6F5FF4", VA = "0x6F5FF4")]
		public static void CopyStream(Stream input, Stream output)
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x703B7C", Offset = "0x703B7C", VA = "0x703B7C")]
		public static byte[] GetBuffer(this MemoryStream s)
		{
			return null;
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x703BB0", Offset = "0x703BB0", VA = "0x703BB0")]
		public static byte[] GetBytes(this Stream s)
		{
			return null;
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x703CD4", Offset = "0x703CD4", VA = "0x703CD4")]
		public static int GetEnumCount(Type enumtype)
		{
			return default(int);
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x703D74", Offset = "0x703D74", VA = "0x703D74")]
		public static Type[] GetTypes(this Assembly asm)
		{
			return null;
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x703DA8", Offset = "0x703DA8", VA = "0x703DA8")]
		public static Type[] GetInterfaces(this Type o)
		{
			return null;
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x703DDC", Offset = "0x703DDC", VA = "0x703DDC")]
		public static bool IsGenericType(this Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x703E10", Offset = "0x703E10", VA = "0x703E10")]
		public static bool IsSubclassOf(this Type a, Type b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001054")]
		public static T[] GetArray<T>(this List<T> _list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000261")]
	public class NWPool : MonoBehaviour
	{
		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Queue<GameObject> pool;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject _prefab;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool useUnityActivate;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool useUnityParenting;

		[Token(Token = "0x17000320")]
		public bool UseUnityActivate
		{
			[Token(Token = "0x6001056")]
			[Address(RVA = "0x703E5C", Offset = "0x703E5C", VA = "0x703E5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000321")]
		public int PoolSize
		{
			[Token(Token = "0x6001057")]
			[Address(RVA = "0x703E64", Offset = "0x703E64", VA = "0x703E64")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0x703E4C", Offset = "0x703E4C", VA = "0x703E4C")]
		public NWPool()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x703EDC", Offset = "0x703EDC", VA = "0x703EDC")]
		public static NWPool CreatePool(GameObject prefab, int capacity, bool unityActivate, bool useParenting)
		{
			return null;
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x704050", Offset = "0x704050", VA = "0x704050")]
		private void Init(GameObject prefab, int capacity)
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x7041F8", Offset = "0x7041F8", VA = "0x7041F8")]
		public GameObject Get()
		{
			return null;
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x704370", Offset = "0x704370", VA = "0x704370")]
		public void Free(GameObject go)
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class NWRandom
	{
		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private uint m_w;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private uint m_z;

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x704478", Offset = "0x704478", VA = "0x704478")]
		public NWRandom()
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x704498", Offset = "0x704498", VA = "0x704498")]
		public NWRandom(uint seed)
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x704500", Offset = "0x704500", VA = "0x704500")]
		public NWRandom(int seed)
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x7044DC", Offset = "0x7044DC", VA = "0x7044DC")]
		public void SetSeed(uint seed)
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x704544", Offset = "0x704544", VA = "0x704544")]
		private uint GetUint()
		{
			return default(uint);
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0x704588", Offset = "0x704588", VA = "0x704588")]
		public double NextDouble()
		{
			return default(double);
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0x7045F0", Offset = "0x7045F0", VA = "0x7045F0")]
		public Vector3 NextVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0x7046F8", Offset = "0x7046F8", VA = "0x7046F8")]
		public int Next(int intRange)
		{
			return default(int);
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0x704770", Offset = "0x704770", VA = "0x704770")]
		public int Next(int min, int max)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000263")]
	public class Perlin
	{
		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int mSize;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int mMask;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] mPermutationTable;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float[] mGradientX;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] mGradientY;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float[] mGradientZ;

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x7047F0", Offset = "0x7047F0", VA = "0x7047F0")]
		public Perlin()
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0x6F7124", Offset = "0x6F7124", VA = "0x6F7124")]
		public Perlin(int seed)
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x7048B0", Offset = "0x7048B0", VA = "0x7048B0")]
		public void Initialize(int nSeed)
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x704D0C", Offset = "0x704D0C", VA = "0x704D0C")]
		public float Noise1(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x704E00", Offset = "0x704E00", VA = "0x704E00")]
		public float Noise2(float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x6F7148", Offset = "0x6F7148", VA = "0x6F7148")]
		public float Noise3(float x, float y, float z)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000264")]
	public class CachedNoise
	{
		[Token(Token = "0x4000DF6")]
		private const int dim = 256;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float factor;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Perlin p;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float[] noiseField;

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x6F6F60", Offset = "0x6F6F60", VA = "0x6F6F60")]
		public CachedNoise(int seed)
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x6F7F20", Offset = "0x6F7F20", VA = "0x6F7F20")]
		public float Noise3(float x, float y, float z)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000265")]
	public class ImprovedNoise
	{
		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] p;

		[Token(Token = "0x600106D")]
		[Address(RVA = "0x6FBE4C", Offset = "0x6FBE4C", VA = "0x6FBE4C")]
		public ImprovedNoise()
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0x6FBE54", Offset = "0x6FBE54", VA = "0x6FBE54")]
		public static double Noise3(double x, double y)
		{
			return default(double);
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0x6FBF00", Offset = "0x6FBF00", VA = "0x6FBF00")]
		public static double Noise3(double x, double y, double z)
		{
			return default(double);
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0x6FC88C", Offset = "0x6FC88C", VA = "0x6FC88C")]
		private static double fade(double t)
		{
			return default(double);
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0x6FC918", Offset = "0x6FC918", VA = "0x6FC918")]
		private static double lerp(double t, double a, double b)
		{
			return default(double);
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x6FC8C0", Offset = "0x6FC8C0", VA = "0x6FC8C0")]
		private static double grad(int hash, double x, double y, double z)
		{
			return default(double);
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x6FC938", Offset = "0x6FC938", VA = "0x6FC938")]
		public static float Noise3(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0x6FD22C", Offset = "0x6FD22C", VA = "0x6FD22C")]
		private static float fade(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x6FD2B8", Offset = "0x6FD2B8", VA = "0x6FD2B8")]
		private static float lerp(float t, float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x6FD260", Offset = "0x6FD260", VA = "0x6FD260")]
		private static float grad(int hash, float x, float y, float z)
		{
			return default(float);
		}
	}
}
[Token(Token = "0x2000266")]
public class QuadTextureUV : MonoBehaviour
{
	[Token(Token = "0x4000DFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector2 start;

	[Token(Token = "0x4000DFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector2 size;

	[Token(Token = "0x4000DFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color col;

	[Token(Token = "0x4000DFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Mesh mQuadMesh;

	[Token(Token = "0x4000DFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshFilter meshFilter;

	[Token(Token = "0x4000E00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Material quadMat;

	[Token(Token = "0x4000E01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool createMaterialCopy;

	[Token(Token = "0x17000322")]
	public Material QuadMat
	{
		[Token(Token = "0x6001079")]
		[Address(RVA = "0x46B104", Offset = "0x46B104", VA = "0x46B104")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001078")]
	[Address(RVA = "0x46B018", Offset = "0x46B018", VA = "0x46B018")]
	public QuadTextureUV()
	{
	}

	[Token(Token = "0x600107A")]
	[Address(RVA = "0x46B10C", Offset = "0x46B10C", VA = "0x46B10C")]
	private void Start()
	{
	}

	[Token(Token = "0x600107B")]
	[Address(RVA = "0x46B254", Offset = "0x46B254", VA = "0x46B254")]
	public void Apply()
	{
	}
}
[Token(Token = "0x2000267")]
internal static class RLE<T> where T : struct, IConvertible
{
	[Token(Token = "0x2000268")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236278", Offset = "0x236278")]
	private sealed class <Encode>c__Iterator0 : IEnumerable, IEnumerable<T>, IEnumerator, IDisposable, IEnumerator<T>
	{
		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IEnumerable<T> data;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IEnumerator<T> <enumerator>__0;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T <firstRunValue>__0;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal ulong <runLength>__0;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T <currentValue>__1;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IEnumerator<T> $locvar0;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T <item>__2;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IEnumerator<T> $locvar1;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T <item>__3;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IEnumerator<T> $locvar2;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T <item>__4;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T $current;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal bool $disposing;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int $PC;

		[Token(Token = "0x17000323")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x6001084")]
			[DebuggerHidden]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000324")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001085")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001082")]
		[DebuggerHidden]
		public <Encode>c__Iterator0()
		{
		}

		[Token(Token = "0x6001083")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001086")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001087")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x6001088")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001089")]
		[DebuggerHidden]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x2000269")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236288", Offset = "0x236288")]
	private sealed class <Decode>c__Iterator1 : IEnumerable, IEnumerable<T>, IEnumerator, IDisposable, IEnumerator<T>
	{
		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IEnumerable<T> data;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IEnumerator<T> <enumerator>__0;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T <value>__1;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal long <length>__2;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T <val>__2;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <j>__3;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T $current;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal bool $disposing;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int $PC;

		[Token(Token = "0x17000325")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x600108C")]
			[DebuggerHidden]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000326")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600108D")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600108A")]
		[DebuggerHidden]
		public <Decode>c__Iterator1()
		{
		}

		[Token(Token = "0x600108B")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600108E")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600108F")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x6001090")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001091")]
		[DebuggerHidden]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x200026A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236298", Offset = "0x236298")]
	private sealed class <MakeRun>c__Iterator2 : IEnumerable, IEnumerable<T>, IEnumerator, IDisposable, IEnumerator<T>
	{
		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal ulong length;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T value;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal ulong <i>__1;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T $current;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal bool $disposing;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int $PC;

		[Token(Token = "0x17000327")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x6001094")]
			[DebuggerHidden]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000328")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001095")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001092")]
		[DebuggerHidden]
		public <MakeRun>c__Iterator2()
		{
		}

		[Token(Token = "0x6001093")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001096")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001097")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x6001098")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001099")]
		[DebuggerHidden]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000E02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T rleMarker;

	[Token(Token = "0x4000E03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ulong maxLength;

	[Token(Token = "0x600107C")]
	static RLE()
	{
	}

	[Token(Token = "0x600107D")]
	[DebuggerHidden]
	public static IEnumerable<T> Encode(IEnumerable<T> data)
	{
		return null;
	}

	[Token(Token = "0x600107E")]
	[DebuggerHidden]
	public static IEnumerable<T> Decode(IEnumerable<T> data)
	{
		return null;
	}

	[Token(Token = "0x600107F")]
	[DebuggerHidden]
	private static IEnumerable<T> MakeRun(T value, ulong length)
	{
		return null;
	}

	[Token(Token = "0x6001080")]
	private static T LoadIntoTypeT(object value)
	{
		return (T)null;
	}

	[Token(Token = "0x6001081")]
	private static void GetMaxValues()
	{
	}
}
namespace NWCommon
{
	[Token(Token = "0x200026B")]
	public class StreamHelpers
	{
		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte[] buffer;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int[] ia;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static uint[] uia;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int fileID;

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x7052C8", Offset = "0x7052C8", VA = "0x7052C8")]
		public StreamHelpers()
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x7052D0", Offset = "0x7052D0", VA = "0x7052D0")]
		public static Stream GetStream(string str)
		{
			return null;
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0x705380", Offset = "0x705380", VA = "0x705380")]
		public static string GetString(Stream s)
		{
			return null;
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0x7054E4", Offset = "0x7054E4", VA = "0x7054E4")]
		public static byte[] GetBytes(string str)
		{
			return null;
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0x7055C8", Offset = "0x7055C8", VA = "0x7055C8")]
		public static byte[] GetBytes(Stream str)
		{
			return null;
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x7056F8", Offset = "0x7056F8", VA = "0x7056F8")]
		public static string GetString(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x7057C0", Offset = "0x7057C0", VA = "0x7057C0")]
		public static int ReadInt32(Stream mDataStream)
		{
			return default(int);
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x7058F8", Offset = "0x7058F8", VA = "0x7058F8")]
		public static void WriteInt32(Stream mDataStream, int val)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x6FAB40", Offset = "0x6FAB40", VA = "0x6FAB40")]
		public static uint ReadUInt32(Stream mDataStream)
		{
			return default(uint);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x6FA1D0", Offset = "0x6FA1D0", VA = "0x6FA1D0")]
		public static void WriteUInt32(Stream mDataStream, uint val)
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x705A24", Offset = "0x705A24", VA = "0x705A24")]
		public static float ReadFloat(Stream mDataStream)
		{
			return default(float);
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x705B04", Offset = "0x705B04", VA = "0x705B04")]
		public static void WriteFloat(Stream mDataStream, float val)
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x705BD8", Offset = "0x705BD8", VA = "0x705BD8")]
		public static string ReadString(Stream mDataStream)
		{
			return null;
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x705D20", Offset = "0x705D20", VA = "0x705D20")]
		public static void WriteString(Stream mDataStream, string val)
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x6FAC78", Offset = "0x6FAC78", VA = "0x6FAC78")]
		public static Vector3 ReadVector(Stream mDataStream)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x6FAD1C", Offset = "0x6FAD1C", VA = "0x6FAD1C")]
		public static Quaternion ReadQuaternion(Stream mDataStream)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x6FA2FC", Offset = "0x6FA2FC", VA = "0x6FA2FC")]
		public static void WriteVector(Stream mDataStream, Vector3 val)
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x6FA3A4", Offset = "0x6FA3A4", VA = "0x6FA3A4")]
		public static void WriteQuaternion(Stream mDataStream, Quaternion val)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x705E78", Offset = "0x705E78", VA = "0x705E78")]
		public static Color ReadColor(Stream mDataStream)
		{
			return default(Color);
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x706000", Offset = "0x706000", VA = "0x706000")]
		public static Color[] ReadColorArray(Stream mDataStream, int length)
		{
			return null;
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x70621C", Offset = "0x70621C", VA = "0x70621C")]
		public static int[] ReadInt32Array(Stream mDataStream, out int len)
		{
			return null;
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x706550", Offset = "0x706550", VA = "0x706550")]
		public static void WriteInt32Array(Stream mDataStream, int[] val)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x7068CC", Offset = "0x7068CC", VA = "0x7068CC")]
		public static uint[] ReadUInt32Array(Stream mDataStream, out int len)
		{
			return null;
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x706C04", Offset = "0x706C04", VA = "0x706C04")]
		public static void WriteUInt32Array(Stream mDataStream, uint[] val)
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x706F80", Offset = "0x706F80", VA = "0x706F80")]
		public static Vector3[] ReadVectorArray(Stream mDataStream)
		{
			return null;
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x7070C0", Offset = "0x7070C0", VA = "0x7070C0")]
		public static void WriteVectorArray(Stream mDataStream, Vector3[] val)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x7071E4", Offset = "0x7071E4", VA = "0x7071E4")]
		public static void WriteStreamToFileStream(string filename, string extension, Stream source)
		{
		}
	}
}
namespace StringLeakTest
{
	[Token(Token = "0x200026C")]
	public static class StringBuilderExtensions
	{
		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly char[] ms_digits;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly uint ms_default_decimal_places;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly char ms_default_pad_char;

		[Token(Token = "0x60010B6")]
		public static StringBuilder ConcatFormat<A>(this StringBuilder string_builder, string format_string, A arg1) where A : IConvertible
		{
			return null;
		}

		[Token(Token = "0x60010B7")]
		public static StringBuilder ConcatFormat<A, B>(this StringBuilder string_builder, string format_string, A arg1, B arg2) where A : IConvertible where B : IConvertible
		{
			return null;
		}

		[Token(Token = "0x60010B8")]
		public static StringBuilder ConcatFormat<A, B, C>(this StringBuilder string_builder, string format_string, A arg1, B arg2, C arg3) where A : IConvertible where B : IConvertible where C : IConvertible
		{
			return null;
		}

		[Token(Token = "0x60010B9")]
		public static StringBuilder ConcatFormat<A, B, C, D>(this StringBuilder string_builder, string format_string, A arg1, B arg2, C arg3, D arg4) where A : IConvertible where B : IConvertible where C : IConvertible where D : IConvertible
		{
			return null;
		}

		[Token(Token = "0x60010BA")]
		private static void ConcatFormatValue<T>(this StringBuilder string_builder, T arg, uint padding, uint base_value, uint decimal_places) where T : IConvertible
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x581E20", Offset = "0x581E20", VA = "0x581E20")]
		public static StringBuilder Concat(this StringBuilder string_builder, uint uint_val, uint pad_amount, char pad_char, uint base_val)
		{
			return null;
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x582014", Offset = "0x582014", VA = "0x582014")]
		public static StringBuilder Concat(this StringBuilder string_builder, uint uint_val)
		{
			return null;
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x5820C8", Offset = "0x5820C8", VA = "0x5820C8")]
		public static StringBuilder Concat(this StringBuilder string_builder, uint uint_val, uint pad_amount)
		{
			return null;
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x582180", Offset = "0x582180", VA = "0x582180")]
		public static StringBuilder Concat(this StringBuilder string_builder, uint uint_val, uint pad_amount, char pad_char)
		{
			return null;
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x582228", Offset = "0x582228", VA = "0x582228")]
		public static StringBuilder Concat(this StringBuilder string_builder, int int_val, uint pad_amount, char pad_char, uint base_val)
		{
			return null;
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x58230C", Offset = "0x58230C", VA = "0x58230C")]
		public static StringBuilder Concat(this StringBuilder string_builder, int int_val)
		{
			return null;
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x5823C0", Offset = "0x5823C0", VA = "0x5823C0")]
		public static StringBuilder Concat(this StringBuilder string_builder, int int_val, uint pad_amount)
		{
			return null;
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x582478", Offset = "0x582478", VA = "0x582478")]
		public static StringBuilder Concat(this StringBuilder string_builder, int int_val, uint pad_amount, char pad_char)
		{
			return null;
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x582520", Offset = "0x582520", VA = "0x582520")]
		public static StringBuilder Concat(this StringBuilder string_builder, float float_val, uint decimal_places, uint pad_amount, char pad_char)
		{
			return null;
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x5826FC", Offset = "0x5826FC", VA = "0x5826FC")]
		public static StringBuilder Concat(this StringBuilder string_builder, float float_val)
		{
			return null;
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x5827B0", Offset = "0x5827B0", VA = "0x5827B0")]
		public static StringBuilder Concat(this StringBuilder string_builder, float float_val, uint decimal_places)
		{
			return null;
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x582868", Offset = "0x582868", VA = "0x582868")]
		public static StringBuilder Concat(this StringBuilder string_builder, float float_val, uint decimal_places, uint pad_amount)
		{
			return null;
		}
	}
}
[Token(Token = "0x200026D")]
public class StringReference
{
	[Token(Token = "0x4000E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B31C", Offset = "0x23B31C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B31C", Offset = "0x23B31C")]
	private int <MaxSize>k__BackingField;

	[Token(Token = "0x4000E29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B350", Offset = "0x23B350")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B350", Offset = "0x23B350")]
	private string <StringHandle>k__BackingField;

	[Token(Token = "0x4000E2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B384", Offset = "0x23B384")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B384", Offset = "0x23B384")]
	private StringBuilder <StringBuilder>k__BackingField;

	[Token(Token = "0x17000329")]
	public int MaxSize
	{
		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x582F24", Offset = "0x582F24", VA = "0x582F24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E184", Offset = "0x23E184")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x582F2C", Offset = "0x582F2C", VA = "0x582F2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E194", Offset = "0x23E194")]
		private set
		{
		}
	}

	[Token(Token = "0x1700032A")]
	public int SpaceLeft
	{
		[Token(Token = "0x60010CB")]
		[Address(RVA = "0x582F34", Offset = "0x582F34", VA = "0x582F34")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700032B")]
	public int StringLength
	{
		[Token(Token = "0x60010CC")]
		[Address(RVA = "0x582F4C", Offset = "0x582F4C", VA = "0x582F4C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700032C")]
	public string StringHandle
	{
		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x582F80", Offset = "0x582F80", VA = "0x582F80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E1A4", Offset = "0x23E1A4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x582F88", Offset = "0x582F88", VA = "0x582F88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E1B4", Offset = "0x23E1B4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700032D")]
	public StringBuilder StringBuilder
	{
		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x582F78", Offset = "0x582F78", VA = "0x582F78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E1C4", Offset = "0x23E1C4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x582F90", Offset = "0x582F90", VA = "0x582F90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E1D4", Offset = "0x23E1D4")]
		private set
		{
		}
	}

	[Token(Token = "0x60010C8")]
	[Address(RVA = "0x5829D8", Offset = "0x5829D8", VA = "0x5829D8")]
	public StringReference(int maxSize = 32)
	{
	}

	[Token(Token = "0x60010D1")]
	[Address(RVA = "0x582F98", Offset = "0x582F98", VA = "0x582F98")]
	public new string ToString()
	{
		return null;
	}

	[Token(Token = "0x60010D2")]
	[Address(RVA = "0x582A00", Offset = "0x582A00", VA = "0x582A00")]
	public void Resize(int maxSize)
	{
	}

	[Token(Token = "0x60010D3")]
	[Address(RVA = "0x583004", Offset = "0x583004", VA = "0x583004")]
	public void Clear()
	{
	}

	[Token(Token = "0x60010D4")]
	[Address(RVA = "0x583064", Offset = "0x583064", VA = "0x583064")]
	public void SetText(string text, bool fillOverflow = true)
	{
	}

	[Token(Token = "0x60010D5")]
	[Address(RVA = "0x583084", Offset = "0x583084", VA = "0x583084")]
	public void SetText(ref string text, bool fillOverflow = true)
	{
	}

	[Token(Token = "0x60010D6")]
	[Address(RVA = "0x583160", Offset = "0x583160", VA = "0x583160")]
	public void Append(ref string text)
	{
	}

	[Token(Token = "0x60010D7")]
	[Address(RVA = "0x583210", Offset = "0x583210", VA = "0x583210")]
	public void Append(string text)
	{
	}

	[Token(Token = "0x60010D8")]
	[Address(RVA = "0x582FB4", Offset = "0x582FB4", VA = "0x582FB4")]
	public void FillOverflow(char character = '\0')
	{
	}
}
[Token(Token = "0x200026E")]
public class TestContainer : ScriptableObject
{
	[Token(Token = "0x4000E2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public byte[] test;

	[Token(Token = "0x60010D9")]
	[Address(RVA = "0x590620", Offset = "0x590620", VA = "0x590620")]
	public TestContainer()
	{
	}
}
namespace NWCommon
{
	[Token(Token = "0x200026F")]
	public class Triangle
	{
		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 mA;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 mB;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 mC;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 mNormal;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color mColor;

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x707620", Offset = "0x707620", VA = "0x707620")]
		public Triangle(Vector3 a, Vector3 b, Vector3 c)
		{
		}
	}
}
namespace TypeUtilities
{
	[Token(Token = "0x2000270")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x2362B8", Offset = "0x2362B8")]
	internal class BooleanStringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x598140", Offset = "0x598140", VA = "0x598140")]
		public BooleanStringConverter()
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x598148", Offset = "0x598148", VA = "0x598148", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x5981D0", Offset = "0x5981D0", VA = "0x5981D0", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000271")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236330", Offset = "0x236330")]
	internal class ByteArrayStringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x5983B4", Offset = "0x5983B4", VA = "0x5983B4")]
		public ByteArrayStringConverter()
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x5983BC", Offset = "0x5983BC", VA = "0x5983BC", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x5984D8", Offset = "0x5984D8", VA = "0x5984D8", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000272")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x2363A8", Offset = "0x2363A8")]
	internal class ByteStringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x59855C", Offset = "0x59855C", VA = "0x59855C")]
		public ByteStringConverter()
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x598564", Offset = "0x598564", VA = "0x598564", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x598598", Offset = "0x598598", VA = "0x598598", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000273")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236420", Offset = "0x236420")]
	internal class CharStringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x598618", Offset = "0x598618", VA = "0x598618")]
		public CharStringConverter()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x598620", Offset = "0x598620", VA = "0x598620", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x598654", Offset = "0x598654", VA = "0x598654", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000274")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236498", Offset = "0x236498")]
	internal class DecimalStringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x5986E8", Offset = "0x5986E8", VA = "0x5986E8")]
		public DecimalStringConverter()
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x5986F0", Offset = "0x5986F0", VA = "0x5986F0", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x598724", Offset = "0x598724", VA = "0x598724", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000275")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236510", Offset = "0x236510")]
	internal class DoubleStringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x598814", Offset = "0x598814", VA = "0x598814")]
		public DoubleStringConverter()
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x59881C", Offset = "0x59881C", VA = "0x59881C", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x5988F0", Offset = "0x5988F0", VA = "0x5988F0", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000276")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236588", Offset = "0x236588")]
	internal class EnumStringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x5989A8", Offset = "0x5989A8", VA = "0x5989A8")]
		public EnumStringConverter()
		{
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x5989B0", Offset = "0x5989B0", VA = "0x5989B0", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x5989E4", Offset = "0x5989E4", VA = "0x5989E4", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000277")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236600", Offset = "0x236600")]
	internal class GuidStringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x598A74", Offset = "0x598A74", VA = "0x598A74")]
		public GuidStringConverter()
		{
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0x598A7C", Offset = "0x598A7C", VA = "0x598A7C", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x598AB0", Offset = "0x598AB0", VA = "0x598AB0", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000278")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236678", Offset = "0x236678")]
	internal class Int16StringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x598B40", Offset = "0x598B40", VA = "0x598B40")]
		public Int16StringConverter()
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0x598B48", Offset = "0x598B48", VA = "0x598B48", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x598B7C", Offset = "0x598B7C", VA = "0x598B7C", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000279")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x2366F0", Offset = "0x2366F0")]
	internal class Int32StringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x598BFC", Offset = "0x598BFC", VA = "0x598BFC")]
		public Int32StringConverter()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x598C04", Offset = "0x598C04", VA = "0x598C04", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x598C38", Offset = "0x598C38", VA = "0x598C38", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x200027A")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236768", Offset = "0x236768")]
	internal class Int64StringConverter : IValueStringConverter
	{
		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x598CB8", Offset = "0x598CB8", VA = "0x598CB8")]
		public Int64StringConverter()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x598CC0", Offset = "0x598CC0", VA = "0x598CC0", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x598CF4", Offset = "0x598CF4", VA = "0x598CF4", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x200027B")]
	public interface IValueStringConverter
	{
		[Token(Token = "0x60010FC")]
		string ConvertToString(object value);

		[Token(Token = "0x60010FD")]
		object ConvertFromString(Type type, string data);
	}
	[Token(Token = "0x200027C")]
	public class ListConversionHelper
	{
		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x598D74", Offset = "0x598D74", VA = "0x598D74")]
		public ListConversionHelper()
		{
		}

		[Token(Token = "0x60010FF")]
		public static string ValuesListToString<T>(char separator, params T[] values)
		{
			return null;
		}

		[Token(Token = "0x6001100")]
		public static T[] StringToValuesList<T>(char separator, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x200027D")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x2367E0", Offset = "0x2367E0")]
	internal class QuaternionStringConverter : IValueStringConverter
	{
		[Token(Token = "0x6001101")]
		[Address(RVA = "0x598D7C", Offset = "0x598D7C", VA = "0x598D7C")]
		public QuaternionStringConverter()
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x598D84", Offset = "0x598D84", VA = "0x598D84", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x598EBC", Offset = "0x598EBC", VA = "0x598EBC", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x200027E")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236858", Offset = "0x236858")]
	internal class SingleStringConverter : IValueStringConverter
	{
		[Token(Token = "0x6001104")]
		[Address(RVA = "0x59905C", Offset = "0x59905C", VA = "0x59905C")]
		public SingleStringConverter()
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x599064", Offset = "0x599064", VA = "0x599064", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x599138", Offset = "0x599138", VA = "0x599138", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x200027F")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x2368D0", Offset = "0x2368D0")]
	internal class StringStringConverter : IValueStringConverter
	{
		[Token(Token = "0x6001107")]
		[Address(RVA = "0x5991F0", Offset = "0x5991F0", VA = "0x5991F0")]
		public StringStringConverter()
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x5991F8", Offset = "0x5991F8", VA = "0x5991F8", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x5992CC", Offset = "0x5992CC", VA = "0x5992CC", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000280")]
	public static class TypeCache
	{
		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, Type> m_typesByName;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Dictionary<Assembly, bool> m_assemblies;

		[Token(Token = "0x1700032E")]
		public static ICollection<Assembly> Assemblies
		{
			[Token(Token = "0x600110B")]
			[Address(RVA = "0x5993A0", Offset = "0x5993A0", VA = "0x5993A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x5992D4", Offset = "0x5992D4", VA = "0x5992D4")]
		static TypeCache()
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x584988", Offset = "0x584988", VA = "0x584988")]
		public static void AddAssembly(Assembly assembly)
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x599454", Offset = "0x599454", VA = "0x599454")]
		public static void AddAssemblies(IEnumerable<Assembly> assemblies)
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x587104", Offset = "0x587104", VA = "0x587104")]
		public static Type FindType(string typeName, bool throwOnError)
		{
			return null;
		}
	}
	[Token(Token = "0x2000281")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236948", Offset = "0x236948")]
	internal class UInt16StringConverter : IValueStringConverter
	{
		[Token(Token = "0x600110F")]
		[Address(RVA = "0x59976C", Offset = "0x59976C", VA = "0x59976C")]
		public UInt16StringConverter()
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x599774", Offset = "0x599774", VA = "0x599774", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x5997A8", Offset = "0x5997A8", VA = "0x5997A8", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000282")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x2369C0", Offset = "0x2369C0")]
	internal class UInt32StringConverter : IValueStringConverter
	{
		[Token(Token = "0x6001112")]
		[Address(RVA = "0x599828", Offset = "0x599828", VA = "0x599828")]
		public UInt32StringConverter()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x599830", Offset = "0x599830", VA = "0x599830", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x599864", Offset = "0x599864", VA = "0x599864", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x2000283")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236A38", Offset = "0x236A38")]
	internal class UInt64StringConverter : IValueStringConverter
	{
		[Token(Token = "0x6001115")]
		[Address(RVA = "0x5998E4", Offset = "0x5998E4", VA = "0x5998E4")]
		public UInt64StringConverter()
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x5998EC", Offset = "0x5998EC", VA = "0x5998EC", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0x599920", Offset = "0x599920", VA = "0x599920", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
}
namespace TemplatesDatabase
{
	[Token(Token = "0x2000284")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x236AB0", Offset = "0x236AB0")]
	public class ValuesDictionary
	{
		[Token(Token = "0x2000285")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236AE4", Offset = "0x236AE4")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<KeyValuePair<string, object>>, IEnumerator, IDisposable, IEnumerator<KeyValuePair<string, object>>
		{
			[Token(Token = "0x4000E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int <i>__1;

			[Token(Token = "0x4000E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal int <index>__2;

			[Token(Token = "0x4000E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal ValuesDictionary $this;

			[Token(Token = "0x4000E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal KeyValuePair<string, object> $current;

			[Token(Token = "0x4000E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal bool $disposing;

			[Token(Token = "0x4000E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int $PC;

			[Token(Token = "0x17000337")]
			private KeyValuePair<string, object> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,object>>.Current
			{
				[Token(Token = "0x600113D")]
				[Address(RVA = "0x58859C", Offset = "0x58859C", VA = "0x58859C", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return default(KeyValuePair<string, object>);
				}
			}

			[Token(Token = "0x17000338")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600113E")]
				[Address(RVA = "0x5885B0", Offset = "0x5885B0", VA = "0x5885B0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600113B")]
			[Address(RVA = "0x584F0C", Offset = "0x584F0C", VA = "0x584F0C")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x600113C")]
			[Address(RVA = "0x588388", Offset = "0x588388", VA = "0x588388", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600113F")]
			[Address(RVA = "0x588628", Offset = "0x588628", VA = "0x588628", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001140")]
			[Address(RVA = "0x58863C", Offset = "0x58863C", VA = "0x58863C", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6001141")]
			[Address(RVA = "0x5886C4", Offset = "0x5886C4", VA = "0x5886C4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001142")]
			[Address(RVA = "0x5886C8", Offset = "0x5886C8", VA = "0x5886C8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<KeyValuePair<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000286")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236AF4", Offset = "0x236AF4")]
		private sealed class <>c__Iterator1 : IEnumerable, IEnumerable<string>, IEnumerator, IDisposable, IEnumerator<string>
		{
			[Token(Token = "0x4000E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int <i>__1;

			[Token(Token = "0x4000E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal int <index>__2;

			[Token(Token = "0x4000E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal ValuesDictionary $this;

			[Token(Token = "0x4000E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal string $current;

			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal bool $disposing;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $PC;

			[Token(Token = "0x17000339")]
			private string System.Collections.Generic.IEnumerator<string>.Current
			{
				[Token(Token = "0x6001145")]
				[Address(RVA = "0x5888C4", Offset = "0x5888C4", VA = "0x5888C4", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001146")]
				[Address(RVA = "0x5888CC", Offset = "0x5888CC", VA = "0x5888CC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001143")]
			[Address(RVA = "0x584FB4", Offset = "0x584FB4", VA = "0x584FB4")]
			[DebuggerHidden]
			public <>c__Iterator1()
			{
			}

			[Token(Token = "0x6001144")]
			[Address(RVA = "0x588774", Offset = "0x588774", VA = "0x588774", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001147")]
			[Address(RVA = "0x5888D4", Offset = "0x5888D4", VA = "0x5888D4", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001148")]
			[Address(RVA = "0x5888E8", Offset = "0x5888E8", VA = "0x5888E8", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6001149")]
			[Address(RVA = "0x588970", Offset = "0x588970", VA = "0x588970", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600114A")]
			[Address(RVA = "0x588974", Offset = "0x588974", VA = "0x588974", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000287")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236B04", Offset = "0x236B04")]
		private sealed class <>c__Iterator2 : IEnumerable, IEnumerable<object>, IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4000E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int <i>__1;

			[Token(Token = "0x4000E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal int <index>__2;

			[Token(Token = "0x4000E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal ValuesDictionary $this;

			[Token(Token = "0x4000E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal object $current;

			[Token(Token = "0x4000E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal bool $disposing;

			[Token(Token = "0x4000E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $PC;

			[Token(Token = "0x1700033B")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600114D")]
				[Address(RVA = "0x588B70", Offset = "0x588B70", VA = "0x588B70", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600114E")]
				[Address(RVA = "0x588B78", Offset = "0x588B78", VA = "0x588B78", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600114B")]
			[Address(RVA = "0x58505C", Offset = "0x58505C", VA = "0x58505C")]
			[DebuggerHidden]
			public <>c__Iterator2()
			{
			}

			[Token(Token = "0x600114C")]
			[Address(RVA = "0x588A20", Offset = "0x588A20", VA = "0x588A20", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600114F")]
			[Address(RVA = "0x588B80", Offset = "0x588B80", VA = "0x588B80", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001150")]
			[Address(RVA = "0x588B94", Offset = "0x588B94", VA = "0x588B94", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6001151")]
			[Address(RVA = "0x588C1C", Offset = "0x588C1C", VA = "0x588C1C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001152")]
			[Address(RVA = "0x588C20", Offset = "0x588C20", VA = "0x588C20", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<object> System.Collections.Generic.IEnumerable<object>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000288")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236B14", Offset = "0x236B14")]
		private sealed class <>c__Iterator3 : IEnumerable, IEnumerable<KeyValuePair<string, object>>, IEnumerator, IDisposable, IEnumerator<KeyValuePair<string, object>>
		{
			[Token(Token = "0x4000E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int <i>__1;

			[Token(Token = "0x4000E50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal int <index>__2;

			[Token(Token = "0x4000E51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal ValuesDictionary <childValuesDictionary>__2;

			[Token(Token = "0x4000E52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal IEnumerator<KeyValuePair<string, object>> $locvar0;

			[Token(Token = "0x4000E53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal KeyValuePair<string, object> <keyValuePair>__3;

			[Token(Token = "0x4000E54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal ValuesDictionary $this;

			[Token(Token = "0x4000E55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal KeyValuePair<string, object> $current;

			[Token(Token = "0x4000E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal bool $disposing;

			[Token(Token = "0x4000E57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int $PC;

			[Token(Token = "0x1700033D")]
			private KeyValuePair<string, object> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,object>>.Current
			{
				[Token(Token = "0x6001155")]
				[Address(RVA = "0x58928C", Offset = "0x58928C", VA = "0x58928C", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return default(KeyValuePair<string, object>);
				}
			}

			[Token(Token = "0x1700033E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001156")]
				[Address(RVA = "0x5892A0", Offset = "0x5892A0", VA = "0x5892A0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001153")]
			[Address(RVA = "0x585104", Offset = "0x585104", VA = "0x585104")]
			[DebuggerHidden]
			public <>c__Iterator3()
			{
			}

			[Token(Token = "0x6001154")]
			[Address(RVA = "0x588CCC", Offset = "0x588CCC", VA = "0x588CCC", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001157")]
			[Address(RVA = "0x589318", Offset = "0x589318", VA = "0x589318", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001158")]
			[Address(RVA = "0x589408", Offset = "0x589408", VA = "0x589408", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6001159")]
			[Address(RVA = "0x589490", Offset = "0x589490", VA = "0x589490", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600115A")]
			[Address(RVA = "0x589494", Offset = "0x589494", VA = "0x589494", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<KeyValuePair<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000289")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236B24", Offset = "0x236B24")]
		private sealed class <>c__Iterator4 : IEnumerable, IEnumerable<string>, IEnumerator, IDisposable, IEnumerator<string>
		{
			[Token(Token = "0x4000E58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int <i>__1;

			[Token(Token = "0x4000E59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal int <index>__2;

			[Token(Token = "0x4000E5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal ValuesDictionary <childValuesDictionary>__2;

			[Token(Token = "0x4000E5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal IEnumerator<string> $locvar0;

			[Token(Token = "0x4000E5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal string <str>__3;

			[Token(Token = "0x4000E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal ValuesDictionary $this;

			[Token(Token = "0x4000E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal string $current;

			[Token(Token = "0x4000E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool $disposing;

			[Token(Token = "0x4000E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int $PC;

			[Token(Token = "0x1700033F")]
			private string System.Collections.Generic.IEnumerator<string>.Current
			{
				[Token(Token = "0x600115D")]
				[Address(RVA = "0x589A68", Offset = "0x589A68", VA = "0x589A68", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000340")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600115E")]
				[Address(RVA = "0x589A70", Offset = "0x589A70", VA = "0x589A70", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600115B")]
			[Address(RVA = "0x5851AC", Offset = "0x5851AC", VA = "0x5851AC")]
			[DebuggerHidden]
			public <>c__Iterator4()
			{
			}

			[Token(Token = "0x600115C")]
			[Address(RVA = "0x589540", Offset = "0x589540", VA = "0x589540", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600115F")]
			[Address(RVA = "0x589A78", Offset = "0x589A78", VA = "0x589A78", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001160")]
			[Address(RVA = "0x589B68", Offset = "0x589B68", VA = "0x589B68", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6001161")]
			[Address(RVA = "0x589BF0", Offset = "0x589BF0", VA = "0x589BF0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001162")]
			[Address(RVA = "0x589BF4", Offset = "0x589BF4", VA = "0x589BF4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200028A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236B34", Offset = "0x236B34")]
		private sealed class <>c__Iterator5 : IEnumerable, IEnumerable<object>, IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4000E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int <i>__1;

			[Token(Token = "0x4000E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal int <index>__2;

			[Token(Token = "0x4000E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal ValuesDictionary <childValuesDictionary>__2;

			[Token(Token = "0x4000E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal IEnumerator<object> $locvar0;

			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object <obj>__3;

			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal ValuesDictionary $this;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x4000E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool $disposing;

			[Token(Token = "0x4000E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int $PC;

			[Token(Token = "0x17000341")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001165")]
				[Address(RVA = "0x58A1C8", Offset = "0x58A1C8", VA = "0x58A1C8", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000342")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001166")]
				[Address(RVA = "0x58A1D0", Offset = "0x58A1D0", VA = "0x58A1D0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001163")]
			[Address(RVA = "0x585254", Offset = "0x585254", VA = "0x585254")]
			[DebuggerHidden]
			public <>c__Iterator5()
			{
			}

			[Token(Token = "0x6001164")]
			[Address(RVA = "0x589CA0", Offset = "0x589CA0", VA = "0x589CA0", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001167")]
			[Address(RVA = "0x58A1D8", Offset = "0x58A1D8", VA = "0x58A1D8", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001168")]
			[Address(RVA = "0x58A2C8", Offset = "0x58A2C8", VA = "0x58A2C8", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6001169")]
			[Address(RVA = "0x58A350", Offset = "0x58A350", VA = "0x58A350", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600116A")]
			[Address(RVA = "0x58A354", Offset = "0x58A354", VA = "0x58A354", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<object> System.Collections.Generic.IEnumerable<object>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool TypeCacheInitiated;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string[] m_keys;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object[] m_values;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] m_indices;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int m_mask;

		[Token(Token = "0x4000E38")]
		private const int m_initialCapacity = 8;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_count;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private List<string> typeConverter;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<string> nameConverter;

		[Token(Token = "0x1700032F")]
		public int Count
		{
			[Token(Token = "0x600111C")]
			[Address(RVA = "0x584CD8", Offset = "0x584CD8", VA = "0x584CD8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000330")]
		public KeyValuePair<string, object> Item
		{
			[Token(Token = "0x600111D")]
			[Address(RVA = "0x584CE0", Offset = "0x584CE0", VA = "0x584CE0")]
			get
			{
				return default(KeyValuePair<string, object>);
			}
		}

		[Token(Token = "0x17000331")]
		public IEnumerable<KeyValuePair<string, object>> Items
		{
			[Token(Token = "0x600111E")]
			[Address(RVA = "0x584E6C", Offset = "0x584E6C", VA = "0x584E6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000332")]
		public IEnumerable<string> Keys
		{
			[Token(Token = "0x600111F")]
			[Address(RVA = "0x584F14", Offset = "0x584F14", VA = "0x584F14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000333")]
		public IEnumerable<object> Values
		{
			[Token(Token = "0x6001120")]
			[Address(RVA = "0x584FBC", Offset = "0x584FBC", VA = "0x584FBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000334")]
		public IEnumerable<KeyValuePair<string, object>> AllItems
		{
			[Token(Token = "0x6001121")]
			[Address(RVA = "0x585064", Offset = "0x585064", VA = "0x585064")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000335")]
		public IEnumerable<string> AllKeys
		{
			[Token(Token = "0x6001122")]
			[Address(RVA = "0x58510C", Offset = "0x58510C", VA = "0x58510C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000336")]
		public IEnumerable<object> AllValues
		{
			[Token(Token = "0x6001123")]
			[Address(RVA = "0x5851B4", Offset = "0x5851B4", VA = "0x5851B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400000D")]
		public event EventHandler<EventArgs<string>> NodeConvertEvent
		{
			[Token(Token = "0x600111A")]
			[Address(RVA = "0x584AC0", Offset = "0x584AC0", VA = "0x584AC0")]
			add
			{
			}
			[Token(Token = "0x600111B")]
			[Address(RVA = "0x584BCC", Offset = "0x584BCC", VA = "0x584BCC")]
			remove
			{
			}
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x5845FC", Offset = "0x5845FC", VA = "0x5845FC")]
		public ValuesDictionary()
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x58471C", Offset = "0x58471C", VA = "0x58471C")]
		public static void InitiateTypeConverters()
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x58525C", Offset = "0x58525C", VA = "0x58525C")]
		public bool ContainsKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001125")]
		public T GetValue<T>(string key)
		{
			return (T)null;
		}

		[Token(Token = "0x6001126")]
		public T GetValue<T>(string key, T defaultValue)
		{
			return (T)null;
		}

		[Token(Token = "0x6001127")]
		public void SetValue<T>(string key, T value)
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0x5854F4", Offset = "0x5854F4", VA = "0x5854F4")]
		public XElement AddElement(XElement parentNode, string name)
		{
			return null;
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x58559C", Offset = "0x58559C", VA = "0x58559C")]
		public object GetAttributeValue(XElement node, string attributeName, Type type)
		{
			return null;
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0x5856CC", Offset = "0x5856CC", VA = "0x5856CC")]
		public object GetAttributeValue(XElement node, string attributeName, Type type, object defaultValue)
		{
			return null;
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0x585D00", Offset = "0x585D00", VA = "0x585D00")]
		public object GetAttributeValue(NanoXMLNode node, string attributeName, Type type)
		{
			return null;
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x585E24", Offset = "0x585E24", VA = "0x585E24")]
		public object GetAttributeValue(NanoXMLNode node, string attributeName, Type type, object defaultValue)
		{
			return null;
		}

		[Token(Token = "0x600112D")]
		public T GetAttributeValue<T>(XElement node, string attributeName)
		{
			return (T)null;
		}

		[Token(Token = "0x600112E")]
		public T GetAttributeValue<T>(XElement node, string attributeName, T defaultValue)
		{
			return (T)null;
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x5861B4", Offset = "0x5861B4", VA = "0x5861B4")]
		public void SetAttributeValue(XElement node, string attributeName, object value)
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x58655C", Offset = "0x58655C", VA = "0x58655C")]
		public void Save(XElement node)
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x5867C4", Offset = "0x5867C4", VA = "0x5867C4")]
		public void Load(XElement node)
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x5867CC", Offset = "0x5867CC", VA = "0x5867CC")]
		public void Load(XElement node, List<string> ignored)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x587498", Offset = "0x587498", VA = "0x587498")]
		public void Load(NanoXMLNode node)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x5874A0", Offset = "0x5874A0", VA = "0x5874A0")]
		public void Load(NanoXMLNode node, List<string> ignored)
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x58793C", Offset = "0x58793C", VA = "0x58793C")]
		public void LoadFromStream(Stream s)
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x587ACC", Offset = "0x587ACC", VA = "0x587ACC")]
		public void SaveToStream(Stream s)
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x587CCC", Offset = "0x587CCC", VA = "0x587CCC")]
		public void ApplyOverrides(ValuesDictionary overridesValuesDictionary)
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x5881F0", Offset = "0x5881F0", VA = "0x5881F0")]
		private void Grow()
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0x585430", Offset = "0x585430", VA = "0x585430")]
		private static int Hash(string s)
		{
			return default(int);
		}
	}
}
namespace TypeUtilities
{
	[Token(Token = "0x200028B")]
	public static class ValueStringConverter
	{
		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Type, IValueStringConverter> m_valueStringConverters;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Dictionary<Assembly, bool> m_scannedAssemblies;

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x5999A0", Offset = "0x5999A0", VA = "0x5999A0")]
		static ValueStringConverter()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0x5862E0", Offset = "0x5862E0", VA = "0x5862E0")]
		public static string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0x599F00", Offset = "0x599F00", VA = "0x599F00")]
		public static bool TryConvertFromString(Type type, string data, out object result)
		{
			return default(bool);
		}

		[Token(Token = "0x600116E")]
		public static bool TryConvertFromString<T>(string data, out T result)
		{
			return default(bool);
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0x585A98", Offset = "0x585A98", VA = "0x585A98")]
		public static object ConvertFromString(Type type, string data)
		{
			return null;
		}

		[Token(Token = "0x6001170")]
		public static T ConvertFromString<T>(string data)
		{
			return (T)null;
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0x59A0C8", Offset = "0x59A0C8", VA = "0x59A0C8")]
		public static bool IsTypeSupported(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x599A6C", Offset = "0x599A6C", VA = "0x599A6C")]
		private static IValueStringConverter GetConverter(Type type, bool throwOnError)
		{
			return null;
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x59A154", Offset = "0x59A154", VA = "0x59A154")]
		private static void ScanAssembliesForConverters()
		{
		}
	}
	[Token(Token = "0x200028C")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x236B44", Offset = "0x236B44")]
	public class ValueStringConverterAttribute : Attribute
	{
		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Type Type;

		[Token(Token = "0x6001174")]
		[Address(RVA = "0x59A73C", Offset = "0x59A73C", VA = "0x59A73C")]
		public ValueStringConverterAttribute(Type type)
		{
		}
	}
	[Token(Token = "0x200028D")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236B78", Offset = "0x236B78")]
	internal class Vector2StringConverter : IValueStringConverter
	{
		[Token(Token = "0x6001175")]
		[Address(RVA = "0x59A75C", Offset = "0x59A75C", VA = "0x59A75C")]
		public Vector2StringConverter()
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0x59A764", Offset = "0x59A764", VA = "0x59A764", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x59A858", Offset = "0x59A858", VA = "0x59A858", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x200028E")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236BF0", Offset = "0x236BF0")]
	internal class Vector3StringConverter : IValueStringConverter
	{
		[Token(Token = "0x6001178")]
		[Address(RVA = "0x59A9F0", Offset = "0x59A9F0", VA = "0x59A9F0")]
		public Vector3StringConverter()
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x59A9F8", Offset = "0x59A9F8", VA = "0x59A9F8", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x59AB10", Offset = "0x59AB10", VA = "0x59AB10", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
	[Token(Token = "0x200028F")]
	[AttributeAttribute(Name = "ValueStringConverterAttribute", RVA = "0x236C68", Offset = "0x236C68")]
	internal class Vector4StringConverter : IValueStringConverter
	{
		[Token(Token = "0x600117B")]
		[Address(RVA = "0x59ACB0", Offset = "0x59ACB0", VA = "0x59ACB0")]
		public Vector4StringConverter()
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x59ACB8", Offset = "0x59ACB8", VA = "0x59ACB8", Slot = "4")]
		public string ConvertToString(object value)
		{
			return null;
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x59ADF0", Offset = "0x59ADF0", VA = "0x59ADF0", Slot = "5")]
		public object ConvertFromString(Type type, string data)
		{
			return null;
		}
	}
}
namespace Microsoft.Xna.Framework
{
	[Token(Token = "0x2000290")]
	public struct BoundingBox : IEquatable<BoundingBox>
	{
		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Min;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 Max;

		[Token(Token = "0x4000E6F")]
		public const int CornerCount = 8;

		[Token(Token = "0x17000343")]
		public float Width
		{
			[Token(Token = "0x600117F")]
			[Address(RVA = "0x2BD81C", Offset = "0x2BD81C", VA = "0x2BD81C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000344")]
		public float Height
		{
			[Token(Token = "0x6001180")]
			[Address(RVA = "0x2BD830", Offset = "0x2BD830", VA = "0x2BD830")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x2BD7F8", Offset = "0x2BD7F8", VA = "0x2BD7F8")]
		public BoundingBox(Vector3 min, Vector3 max)
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x2BD844", Offset = "0x2BD844", VA = "0x2BD844")]
		public ContainmentType Contains(BoundingBox box)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x2BD874", Offset = "0x2BD874", VA = "0x2BD874")]
		public void Contains(ref BoundingBox box, out ContainmentType result)
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x2BD8B0", Offset = "0x2BD8B0", VA = "0x2BD8B0")]
		public ContainmentType Contains(BoundingFrustum frustum)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x2BD8B8", Offset = "0x2BD8B8", VA = "0x2BD8B8")]
		public ContainmentType Contains(BoundingSphere sphere)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x2BD8DC", Offset = "0x2BD8DC", VA = "0x2BD8DC")]
		public void Contains(ref BoundingSphere sphere, out ContainmentType result)
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x2BD914", Offset = "0x2BD914", VA = "0x2BD914")]
		public ContainmentType Contains(Vector3 point)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x2BD948", Offset = "0x2BD948", VA = "0x2BD948")]
		public void Contains(ref Vector3 point, out ContainmentType result)
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x6CBE20", Offset = "0x6CBE20", VA = "0x6CBE20")]
		public static BoundingBox CreateFromPoints(IEnumerable<Vector3> points)
		{
			return default(BoundingBox);
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x6CBEA8", Offset = "0x6CBEA8", VA = "0x6CBEA8")]
		public static BoundingBox CreateFromSphere(BoundingSphere sphere)
		{
			return default(BoundingBox);
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x6CBFC4", Offset = "0x6CBFC4", VA = "0x6CBFC4")]
		public static void CreateFromSphere(ref BoundingSphere sphere, out BoundingBox result)
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x6CC004", Offset = "0x6CC004", VA = "0x6CC004")]
		public static BoundingBox CreateMerged(BoundingBox original, BoundingBox additional)
		{
			return default(BoundingBox);
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x6CC114", Offset = "0x6CC114", VA = "0x6CC114")]
		public static void CreateMerged(ref BoundingBox original, ref BoundingBox additional, out BoundingBox result)
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x2BD950", Offset = "0x2BD950", VA = "0x2BD950", Slot = "4")]
		public bool Equals(BoundingBox other)
		{
			return default(bool);
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x2BD980", Offset = "0x2BD980", VA = "0x2BD980", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x2BD988", Offset = "0x2BD988", VA = "0x2BD988")]
		public Vector3[] GetCorners()
		{
			return null;
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x2BD990", Offset = "0x2BD990", VA = "0x2BD990")]
		public void GetCorners(Vector3[] corners)
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x2BD998", Offset = "0x2BD998", VA = "0x2BD998", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x2BD9C8", Offset = "0x2BD9C8", VA = "0x2BD9C8")]
		public bool Intersects(BoundingBox box)
		{
			return default(bool);
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x2BD9F8", Offset = "0x2BD9F8", VA = "0x2BD9F8")]
		public void Intersects(ref BoundingBox box, out bool result)
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x2BDA00", Offset = "0x2BDA00", VA = "0x2BDA00")]
		public bool Intersects(BoundingFrustum frustum)
		{
			return default(bool);
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x2BDA08", Offset = "0x2BDA08", VA = "0x2BDA08")]
		public bool Intersects(BoundingSphere sphere)
		{
			return default(bool);
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x2BDA2C", Offset = "0x2BDA2C", VA = "0x2BDA2C")]
		public void Intersects(ref BoundingSphere sphere, out bool result)
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x2BDA64", Offset = "0x2BDA64", VA = "0x2BDA64")]
		public PlaneIntersectionType Intersects(Plane plane)
		{
			return default(PlaneIntersectionType);
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x2BDA84", Offset = "0x2BDA84", VA = "0x2BDA84")]
		public void Intersects(ref Plane plane, out PlaneIntersectionType result)
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x2BDA94", Offset = "0x2BDA94", VA = "0x2BDA94")]
		public float? Intersects(Ray ray)
		{
			return null;
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x2BDAA8", Offset = "0x2BDAA8", VA = "0x2BDAA8")]
		public void Intersects(ref Ray ray, out float? result)
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0x6CCC78", Offset = "0x6CCC78", VA = "0x6CCC78")]
		public static bool operator ==(BoundingBox a, BoundingBox b)
		{
			return default(bool);
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0x6CCCCC", Offset = "0x6CCCCC", VA = "0x6CCCCC")]
		public static bool operator !=(BoundingBox a, BoundingBox b)
		{
			return default(bool);
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x2BDABC", Offset = "0x2BDABC", VA = "0x2BDABC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000291")]
	public class BoundingFrustum : IEquatable<BoundingFrustum>
	{
		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Matrix4x4 matrix;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Vector3[] corners;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private readonly Plane[] planes;

		[Token(Token = "0x4000E73")]
		private const int PlaneCount = 6;

		[Token(Token = "0x4000E74")]
		public const int CornerCount = 8;

		[Token(Token = "0x17000345")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x600119F")]
			[Address(RVA = "0x5A2F3C", Offset = "0x5A2F3C", VA = "0x5A2F3C")]
			get
			{
				return default(Matrix4x4);
			}
			[Token(Token = "0x60011A0")]
			[Address(RVA = "0x5A2F64", Offset = "0x5A2F64", VA = "0x5A2F64")]
			set
			{
			}
		}

		[Token(Token = "0x17000346")]
		public Plane Near
		{
			[Token(Token = "0x60011A1")]
			[Address(RVA = "0x5A2FE8", Offset = "0x5A2FE8", VA = "0x5A2FE8")]
			get
			{
				return default(Plane);
			}
		}

		[Token(Token = "0x17000347")]
		public Plane Far
		{
			[Token(Token = "0x60011A2")]
			[Address(RVA = "0x5A3034", Offset = "0x5A3034", VA = "0x5A3034")]
			get
			{
				return default(Plane);
			}
		}

		[Token(Token = "0x17000348")]
		public Plane Left
		{
			[Token(Token = "0x60011A3")]
			[Address(RVA = "0x5A3080", Offset = "0x5A3080", VA = "0x5A3080")]
			get
			{
				return default(Plane);
			}
		}

		[Token(Token = "0x17000349")]
		public Plane Right
		{
			[Token(Token = "0x60011A4")]
			[Address(RVA = "0x5A30CC", Offset = "0x5A30CC", VA = "0x5A30CC")]
			get
			{
				return default(Plane);
			}
		}

		[Token(Token = "0x1700034A")]
		public Plane Top
		{
			[Token(Token = "0x60011A5")]
			[Address(RVA = "0x5A3118", Offset = "0x5A3118", VA = "0x5A3118")]
			get
			{
				return default(Plane);
			}
		}

		[Token(Token = "0x1700034B")]
		public Plane Bottom
		{
			[Token(Token = "0x60011A6")]
			[Address(RVA = "0x5A3164", Offset = "0x5A3164", VA = "0x5A3164")]
			get
			{
				return default(Plane);
			}
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x5A27D0", Offset = "0x5A27D0", VA = "0x5A27D0")]
		public BoundingFrustum(Matrix4x4 value)
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x5A31B0", Offset = "0x5A31B0", VA = "0x5A31B0")]
		public static bool operator ==(BoundingFrustum a, BoundingFrustum b)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x5A3490", Offset = "0x5A3490", VA = "0x5A3490")]
		public static bool operator !=(BoundingFrustum a, BoundingFrustum b)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x5A34A4", Offset = "0x5A34A4", VA = "0x5A34A4")]
		public ContainmentType Contains(BoundingBox box)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x5A34E8", Offset = "0x5A34E8", VA = "0x5A34E8")]
		public void Contains(ref BoundingBox box, out ContainmentType result)
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x5A35AC", Offset = "0x5A35AC", VA = "0x5A35AC")]
		public ContainmentType Contains(BoundingFrustum frustum)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x5A3654", Offset = "0x5A3654", VA = "0x5A3654")]
		public ContainmentType Contains(BoundingSphere sphere)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x5A3680", Offset = "0x5A3680", VA = "0x5A3680")]
		public void Contains(ref BoundingSphere sphere, out ContainmentType result)
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x5A3734", Offset = "0x5A3734", VA = "0x5A3734")]
		public ContainmentType Contains(Vector3 point)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x5A3764", Offset = "0x5A3764", VA = "0x5A3764")]
		public void Contains(ref Vector3 point, out ContainmentType result)
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x5A3854", Offset = "0x5A3854", VA = "0x5A3854", Slot = "4")]
		public bool Equals(BoundingFrustum other)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x5A3858", Offset = "0x5A3858", VA = "0x5A3858", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x5A391C", Offset = "0x5A391C", VA = "0x5A391C")]
		public Vector3[] GetCorners()
		{
			return null;
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x5A3A24", Offset = "0x5A3A24", VA = "0x5A3A24")]
		public void GetCorners(Vector3[] corners)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x5A3B4C", Offset = "0x5A3B4C", VA = "0x5A3B4C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x5A3B58", Offset = "0x5A3B58", VA = "0x5A3B58")]
		public bool Intersects(BoundingBox box)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x5A3BA0", Offset = "0x5A3BA0", VA = "0x5A3BA0")]
		public void Intersects(ref BoundingBox box, out bool result)
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x5A3BD8", Offset = "0x5A3BD8", VA = "0x5A3BD8")]
		public bool Intersects(BoundingFrustum frustum)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x5A3C60", Offset = "0x5A3C60", VA = "0x5A3C60")]
		public bool Intersects(BoundingSphere sphere)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x5A3C94", Offset = "0x5A3C94", VA = "0x5A3C94")]
		public void Intersects(ref BoundingSphere sphere, out bool result)
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x5A3CCC", Offset = "0x5A3CCC", VA = "0x5A3CCC")]
		public PlaneIntersectionType Intersects(Plane plane)
		{
			return default(PlaneIntersectionType);
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x5A3D54", Offset = "0x5A3D54", VA = "0x5A3D54")]
		public void Intersects(ref Plane plane, out PlaneIntersectionType result)
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x5A3DDC", Offset = "0x5A3DDC", VA = "0x5A3DDC")]
		public float? Intersects(Ray ray)
		{
			return null;
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x5A3E64", Offset = "0x5A3E64", VA = "0x5A3E64")]
		public void Intersects(ref Ray ray, out float? result)
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x5A3EEC", Offset = "0x5A3EEC", VA = "0x5A3EEC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x5A2EB4", Offset = "0x5A2EB4", VA = "0x5A2EB4")]
		private void CreateCorners()
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x5A28F0", Offset = "0x5A28F0", VA = "0x5A28F0")]
		private void CreatePlanes()
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x5A4428", Offset = "0x5A4428", VA = "0x5A4428")]
		private static void IntersectionPoint(ref Plane a, ref Plane b, ref Plane c, out Vector3 result)
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x5A44F8", Offset = "0x5A44F8", VA = "0x5A44F8")]
		private void NormalizePlane(ref Plane p)
		{
		}
	}
	[Token(Token = "0x2000292")]
	public struct BoundingSphere : IEquatable<BoundingSphere>
	{
		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Center;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float Radius;

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x2B8CB0", Offset = "0x2B8CB0", VA = "0x2B8CB0")]
		public BoundingSphere(Vector3 center, float radius)
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x2B8CC4", Offset = "0x2B8CC4", VA = "0x2B8CC4")]
		public BoundingSphere Transform(Matrix4x4 matrix)
		{
			return default(BoundingSphere);
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x2B8CD8", Offset = "0x2B8CD8", VA = "0x2B8CD8")]
		public void Transform(ref Matrix4x4 matrix, out BoundingSphere result)
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x2B8CE8", Offset = "0x2B8CE8", VA = "0x2B8CE8")]
		public ContainmentType Contains(BoundingFrustum frustum)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x2B8CF0", Offset = "0x2B8CF0", VA = "0x2B8CF0")]
		public ContainmentType Contains(BoundingSphere sphere)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x2B8D14", Offset = "0x2B8D14", VA = "0x2B8D14")]
		public void Contains(ref BoundingSphere sphere, out ContainmentType result)
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x2B8D4C", Offset = "0x2B8D4C", VA = "0x2B8D4C")]
		public ContainmentType Contains(Vector3 point)
		{
			return default(ContainmentType);
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x2B8D68", Offset = "0x2B8D68", VA = "0x2B8D68")]
		public void Contains(ref Vector3 point, out ContainmentType result)
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x5A4928", Offset = "0x5A4928", VA = "0x5A4928")]
		public static BoundingSphere CreateFromBoundingBox(BoundingBox box)
		{
			return default(BoundingSphere);
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x5A49B0", Offset = "0x5A49B0", VA = "0x5A49B0")]
		public static void CreateFromBoundingBox(ref BoundingBox box, out BoundingSphere result)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x5A49C4", Offset = "0x5A49C4", VA = "0x5A49C4")]
		public static BoundingSphere CreateFromFrustum(BoundingFrustum frustum)
		{
			return default(BoundingSphere);
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x5A49EC", Offset = "0x5A49EC", VA = "0x5A49EC")]
		public static BoundingSphere CreateFromPoints(IEnumerable<Vector3> points)
		{
			return default(BoundingSphere);
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x5A4A74", Offset = "0x5A4A74", VA = "0x5A4A74")]
		public static BoundingSphere CreateMerged(BoundingSphere original, BoundingSphere additional)
		{
			return default(BoundingSphere);
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x5A4AFC", Offset = "0x5A4AFC", VA = "0x5A4AFC")]
		public static void CreateMerged(ref BoundingSphere original, ref BoundingSphere additional, out BoundingSphere result)
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x2B8D98", Offset = "0x2B8D98", VA = "0x2B8D98", Slot = "4")]
		public bool Equals(BoundingSphere other)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x2B8DBC", Offset = "0x2B8DBC", VA = "0x2B8DBC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x2B8DC4", Offset = "0x2B8DC4", VA = "0x2B8DC4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x2B8DF4", Offset = "0x2B8DF4", VA = "0x2B8DF4")]
		public bool Intersects(BoundingBox box)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x2B8E24", Offset = "0x2B8E24", VA = "0x2B8E24")]
		public void Intersects(ref BoundingBox box, out bool result)
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x2B8E60", Offset = "0x2B8E60", VA = "0x2B8E60")]
		public bool Intersects(BoundingFrustum frustum)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x2B8E70", Offset = "0x2B8E70", VA = "0x2B8E70")]
		public bool Intersects(BoundingSphere sphere)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x2B8E94", Offset = "0x2B8E94", VA = "0x2B8E94")]
		public void Intersects(ref BoundingSphere sphere, out bool result)
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x2B8ECC", Offset = "0x2B8ECC", VA = "0x2B8ECC")]
		public PlaneIntersectionType Intersects(Plane plane)
		{
			return default(PlaneIntersectionType);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x2B8EE8", Offset = "0x2B8EE8", VA = "0x2B8EE8")]
		public void Intersects(ref Plane plane, out PlaneIntersectionType result)
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x2B8EF8", Offset = "0x2B8EF8", VA = "0x2B8EF8")]
		public float? Intersects(Ray ray)
		{
			return null;
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x2B8F0C", Offset = "0x2B8F0C", VA = "0x2B8F0C")]
		public void Intersects(ref Ray ray, out float? result)
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x5A4FDC", Offset = "0x5A4FDC", VA = "0x5A4FDC")]
		public static bool operator ==(BoundingSphere a, BoundingSphere b)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x5A5028", Offset = "0x5A5028", VA = "0x5A5028")]
		public static bool operator !=(BoundingSphere a, BoundingSphere b)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x2B8F20", Offset = "0x2B8F20", VA = "0x2B8F20", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000293")]
	public enum ContainmentType
	{
		[Token(Token = "0x4000E78")]
		Disjoint,
		[Token(Token = "0x4000E79")]
		Contains,
		[Token(Token = "0x4000E7A")]
		Intersects
	}
	[Token(Token = "0x2000294")]
	public class Curve
	{
		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private CurveKeyCollection keys;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private CurveLoopType postLoop;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CurveLoopType preLoop;

		[Token(Token = "0x1700034C")]
		public bool IsConstant
		{
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0x5A5338", Offset = "0x5A5338", VA = "0x5A5338")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700034D")]
		public CurveKeyCollection Keys
		{
			[Token(Token = "0x60011E2")]
			[Address(RVA = "0x5A53E8", Offset = "0x5A53E8", VA = "0x5A53E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034E")]
		public CurveLoopType PostLoop
		{
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0x5A53F0", Offset = "0x5A53F0", VA = "0x5A53F0")]
			get
			{
				return default(CurveLoopType);
			}
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0x5A53F8", Offset = "0x5A53F8", VA = "0x5A53F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700034F")]
		public CurveLoopType PreLoop
		{
			[Token(Token = "0x60011E5")]
			[Address(RVA = "0x5A5400", Offset = "0x5A5400", VA = "0x5A5400")]
			get
			{
				return default(CurveLoopType);
			}
			[Token(Token = "0x60011E6")]
			[Address(RVA = "0x5A5408", Offset = "0x5A5408", VA = "0x5A5408")]
			set
			{
			}
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x5A5234", Offset = "0x5A5234", VA = "0x5A5234")]
		public Curve()
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x5A5410", Offset = "0x5A5410", VA = "0x5A5410")]
		public Curve Clone()
		{
			return null;
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x5A5668", Offset = "0x5A5668", VA = "0x5A5668")]
		public float Evaluate(float position)
		{
			return default(float);
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x5A5CCC", Offset = "0x5A5CCC", VA = "0x5A5CCC")]
		public void ComputeTangents(CurveTangent tangentType)
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x5A5CD4", Offset = "0x5A5CD4", VA = "0x5A5CD4")]
		public void ComputeTangents(CurveTangent tangentInType, CurveTangent tangentOutType)
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x5A5F9C", Offset = "0x5A5F9C", VA = "0x5A5F9C")]
		public void ComputeTangent(int keyIndex, CurveTangent tangentType)
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x5A5D38", Offset = "0x5A5D38", VA = "0x5A5D38")]
		public void ComputeTangent(int keyIndex, CurveTangent tangentInType, CurveTangent tangentOutType)
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x5A5A44", Offset = "0x5A5A44", VA = "0x5A5A44")]
		private int GetNumberOfCycle(float position)
		{
			return default(int);
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x5A5B58", Offset = "0x5A5B58", VA = "0x5A5B58")]
		private float GetCurvePosition(float position)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000295")]
	public enum CurveContinuity
	{
		[Token(Token = "0x4000E7F")]
		Smooth,
		[Token(Token = "0x4000E80")]
		Step
	}
	[Token(Token = "0x2000296")]
	public class CurveKey : IEquatable<CurveKey>, IComparable<CurveKey>
	{
		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private CurveContinuity continuity;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float position;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float tangentIn;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float tangentOut;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float value;

		[Token(Token = "0x17000350")]
		public CurveContinuity Continuity
		{
			[Token(Token = "0x60011F2")]
			[Address(RVA = "0x5A5FC8", Offset = "0x5A5FC8", VA = "0x5A5FC8")]
			get
			{
				return default(CurveContinuity);
			}
			[Token(Token = "0x60011F3")]
			[Address(RVA = "0x5A6088", Offset = "0x5A6088", VA = "0x5A6088")]
			set
			{
			}
		}

		[Token(Token = "0x17000351")]
		public float Position
		{
			[Token(Token = "0x60011F4")]
			[Address(RVA = "0x5A5A2C", Offset = "0x5A5A2C", VA = "0x5A5A2C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000352")]
		public float TangentIn
		{
			[Token(Token = "0x60011F5")]
			[Address(RVA = "0x5A5A3C", Offset = "0x5A5A3C", VA = "0x5A5A3C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011F6")]
			[Address(RVA = "0x5A5FB8", Offset = "0x5A5FB8", VA = "0x5A5FB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000353")]
		public float TangentOut
		{
			[Token(Token = "0x60011F7")]
			[Address(RVA = "0x5A5CC4", Offset = "0x5A5CC4", VA = "0x5A5CC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011F8")]
			[Address(RVA = "0x5A5FC0", Offset = "0x5A5FC0", VA = "0x5A5FC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000354")]
		public float Value
		{
			[Token(Token = "0x60011F9")]
			[Address(RVA = "0x5A5A34", Offset = "0x5A5A34", VA = "0x5A5A34")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011FA")]
			[Address(RVA = "0x5A6090", Offset = "0x5A6090", VA = "0x5A6090")]
			set
			{
			}
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x5A5FD0", Offset = "0x5A5FD0", VA = "0x5A5FD0")]
		public CurveKey(float position, float value)
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x5A6048", Offset = "0x5A6048", VA = "0x5A6048")]
		public CurveKey(float position, float value, float tangentIn, float tangentOut)
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x5A6008", Offset = "0x5A6008", VA = "0x5A6008")]
		public CurveKey(float position, float value, float tangentIn, float tangentOut, CurveContinuity continuity)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x5A6098", Offset = "0x5A6098", VA = "0x5A6098")]
		public static bool operator !=(CurveKey a, CurveKey b)
		{
			return default(bool);
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x5A60AC", Offset = "0x5A60AC", VA = "0x5A60AC")]
		public static bool operator ==(CurveKey a, CurveKey b)
		{
			return default(bool);
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x5A619C", Offset = "0x5A619C", VA = "0x5A619C")]
		public CurveKey Clone()
		{
			return null;
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x5A622C", Offset = "0x5A622C", VA = "0x5A622C", Slot = "5")]
		public int CompareTo(CurveKey other)
		{
			return default(int);
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x5A6260", Offset = "0x5A6260", VA = "0x5A6260", Slot = "4")]
		public bool Equals(CurveKey other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x5A6264", Offset = "0x5A6264", VA = "0x5A6264", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x5A6304", Offset = "0x5A6304", VA = "0x5A6304", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000297")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x236CE0", Offset = "0x236CE0")]
	public class CurveKeyCollection : ICollection<CurveKey>, IEnumerable<CurveKey>, IEnumerable
	{
		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool isReadOnly;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private List<CurveKey> innerlist;

		[Token(Token = "0x17000355")]
		public int Count
		{
			[Token(Token = "0x6001203")]
			[Address(RVA = "0x5A5370", Offset = "0x5A5370", VA = "0x5A5370", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000356")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6001204")]
			[Address(RVA = "0x5A6364", Offset = "0x5A6364", VA = "0x5A6364", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000357")]
		public CurveKey Item
		{
			[Token(Token = "0x6001205")]
			[Address(RVA = "0x5A59AC", Offset = "0x5A59AC", VA = "0x5A59AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001206")]
			[Address(RVA = "0x5A636C", Offset = "0x5A636C", VA = "0x5A636C")]
			set
			{
			}
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x5A52AC", Offset = "0x5A52AC", VA = "0x5A52AC")]
		public CurveKeyCollection()
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x5A6574", Offset = "0x5A6574", VA = "0x5A6574", Slot = "6")]
		public void Add(CurveKey item)
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x5A6790", Offset = "0x5A6790", VA = "0x5A6790", Slot = "7")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0x5A54EC", Offset = "0x5A54EC", VA = "0x5A54EC")]
		public CurveKeyCollection Clone()
		{
			return null;
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x5A6808", Offset = "0x5A6808", VA = "0x5A6808", Slot = "8")]
		public bool Contains(CurveKey item)
		{
			return default(bool);
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0x5A6888", Offset = "0x5A6888", VA = "0x5A6888", Slot = "9")]
		public void CopyTo(CurveKey[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x5A6910", Offset = "0x5A6910", VA = "0x5A6910", Slot = "12")]
		public IEnumerator<CurveKey> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x5A69B8", Offset = "0x5A69B8", VA = "0x5A69B8")]
		public int IndexOf(CurveKey item)
		{
			return default(int);
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x5A6A38", Offset = "0x5A6A38", VA = "0x5A6A38", Slot = "10")]
		public bool Remove(CurveKey item)
		{
			return default(bool);
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x5A6AB8", Offset = "0x5A6AB8", VA = "0x5A6AB8")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x5A6B38", Offset = "0x5A6B38", VA = "0x5A6B38", Slot = "11")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000298")]
	public enum CurveLoopType
	{
		[Token(Token = "0x4000E89")]
		Constant,
		[Token(Token = "0x4000E8A")]
		Cycle,
		[Token(Token = "0x4000E8B")]
		CycleOffset,
		[Token(Token = "0x4000E8C")]
		Oscillate,
		[Token(Token = "0x4000E8D")]
		Linear
	}
	[Token(Token = "0x2000299")]
	public enum CurveTangent
	{
		[Token(Token = "0x4000E8F")]
		Flat,
		[Token(Token = "0x4000E90")]
		Linear,
		[Token(Token = "0x4000E91")]
		Smooth
	}
}
namespace Microsoft.Xna.Framework.Graphics
{
	[Token(Token = "0x200029A")]
	public class GraphicsDevice
	{
		[Token(Token = "0x6001211")]
		[Address(RVA = "0x5A6BF8", Offset = "0x5A6BF8", VA = "0x5A6BF8")]
		public GraphicsDevice()
		{
		}
	}
	[Token(Token = "0x200029B")]
	public class BasicEffect
	{
		[Token(Token = "0x6001212")]
		[Address(RVA = "0x5A6BE0", Offset = "0x5A6BE0", VA = "0x5A6BE0")]
		public BasicEffect()
		{
		}
	}
	[Token(Token = "0x200029C")]
	public struct VertexPositionColorTexture
	{
		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Position;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Color Color;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 TextureCoordinate;

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x2B8F28", Offset = "0x2B8F28", VA = "0x2B8F28")]
		public VertexPositionColorTexture(Vector3 pos, Color col, Vector2 tex)
		{
		}
	}
	[Token(Token = "0x200029D")]
	public class DynamicVertexBuffer
	{
		[Token(Token = "0x6001214")]
		[Address(RVA = "0x5A6BF0", Offset = "0x5A6BF0", VA = "0x5A6BF0")]
		public DynamicVertexBuffer()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class DynamicIndexBuffer
	{
		[Token(Token = "0x6001215")]
		[Address(RVA = "0x5A6BE8", Offset = "0x5A6BE8", VA = "0x5A6BE8")]
		public DynamicIndexBuffer()
		{
		}
	}
}
namespace Microsoft.Xna.Framework.Audio
{
	[Token(Token = "0x200029F")]
	public class SoundEffect
	{
		[Token(Token = "0x6001216")]
		[Address(RVA = "0x6CB8A0", Offset = "0x6CB8A0", VA = "0x6CB8A0")]
		public SoundEffect()
		{
		}
	}
}
namespace Microsoft.Xna.Framework
{
	[Token(Token = "0x20002A0")]
	public class AlphaTestEffect
	{
		[Token(Token = "0x6001217")]
		[Address(RVA = "0x6CB890", Offset = "0x6CB890", VA = "0x6CB890")]
		public AlphaTestEffect()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public class Model
	{
		[Token(Token = "0x6001218")]
		[Address(RVA = "0x5A6C38", Offset = "0x5A6C38", VA = "0x5A6C38")]
		public Model()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public class SkinningData
	{
		[Token(Token = "0x6001219")]
		[Address(RVA = "0x5A924C", Offset = "0x5A924C", VA = "0x5A924C")]
		public SkinningData()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	public class AnimationPlayer
	{
		[Token(Token = "0x600121A")]
		[Address(RVA = "0x6CB898", Offset = "0x6CB898", VA = "0x6CB898")]
		public AnimationPlayer()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class SamplerState
	{
		[Token(Token = "0x600121B")]
		[Address(RVA = "0x5A9244", Offset = "0x5A9244", VA = "0x5A9244")]
		public SamplerState()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	internal class PlaneHelper
	{
		[Token(Token = "0x600121C")]
		[Address(RVA = "0x5A759C", Offset = "0x5A759C", VA = "0x5A759C")]
		public PlaneHelper()
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0x5A3818", Offset = "0x5A3818", VA = "0x5A3818")]
		public static float ClassifyPoint(ref Vector3 point, ref Plane plane)
		{
			return default(float);
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0x5A75A4", Offset = "0x5A75A4", VA = "0x5A75A4")]
		public static float PerpendicularDistance(ref Vector3 point, ref Plane plane)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20002A6")]
	public struct Plane : IEquatable<Plane>
	{
		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float D;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 Normal;

		[Token(Token = "0x600121F")]
		[Address(RVA = "0x2B8F70", Offset = "0x2B8F70", VA = "0x2B8F70")]
		public Plane(Vector4 value)
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x2B8F94", Offset = "0x2B8F94", VA = "0x2B8F94")]
		public Plane(Vector3 normal, float d)
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x2B8FA8", Offset = "0x2B8FA8", VA = "0x2B8FA8")]
		public Plane(Vector3 a, Vector3 b, Vector3 c)
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0x2B8FF0", Offset = "0x2B8FF0", VA = "0x2B8FF0")]
		public Plane(float a, float b, float c, float d)
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x2B903C", Offset = "0x2B903C", VA = "0x2B903C")]
		public float Dot(Vector4 value)
		{
			return default(float);
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x2B9080", Offset = "0x2B9080", VA = "0x2B9080")]
		public void Dot(ref Vector4 value, out float result)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x2B90C4", Offset = "0x2B90C4", VA = "0x2B90C4")]
		public float DotCoordinate(Vector3 value)
		{
			return default(float);
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x2B9100", Offset = "0x2B9100", VA = "0x2B9100")]
		public void DotCoordinate(ref Vector3 value, out float result)
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x2B913C", Offset = "0x2B913C", VA = "0x2B913C")]
		public float DotNormal(Vector3 value)
		{
			return default(float);
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0x2B9170", Offset = "0x2B9170", VA = "0x2B9170")]
		public void DotNormal(ref Vector3 value, out float result)
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x5A6F60", Offset = "0x5A6F60", VA = "0x5A6F60")]
		public static void Transform(ref Plane plane, ref Quaternion rotation, out Plane result)
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x5A6FE8", Offset = "0x5A6FE8", VA = "0x5A6FE8")]
		public static void Transform(ref Plane plane, ref Matrix4x4 matrix, out Plane result)
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0x5A7070", Offset = "0x5A7070", VA = "0x5A7070")]
		public static Plane Transform(Plane plane, Quaternion rotation)
		{
			return default(Plane);
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x5A70F8", Offset = "0x5A70F8", VA = "0x5A70F8")]
		public static Plane Transform(Plane plane, Matrix4x4 matrix)
		{
			return default(Plane);
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0x2B91A4", Offset = "0x2B91A4", VA = "0x2B91A4")]
		public void Normalize()
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0x5A7208", Offset = "0x5A7208", VA = "0x5A7208")]
		public static Plane Normalize(Plane value)
		{
			return default(Plane);
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x5A7218", Offset = "0x5A7218", VA = "0x5A7218")]
		public static void Normalize(ref Plane value, out Plane result)
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x5A72A0", Offset = "0x5A72A0", VA = "0x5A72A0")]
		public static bool operator !=(Plane plane1, Plane plane2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x5A73D4", Offset = "0x5A73D4", VA = "0x5A73D4")]
		public static bool operator ==(Plane plane1, Plane plane2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x2B91B4", Offset = "0x2B91B4", VA = "0x2B91B4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x2B91BC", Offset = "0x2B91BC", VA = "0x2B91BC", Slot = "4")]
		public bool Equals(Plane other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x2B91E0", Offset = "0x2B91E0", VA = "0x2B91E0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x2B9210", Offset = "0x2B9210", VA = "0x2B9210")]
		public PlaneIntersectionType Intersects(BoundingBox box)
		{
			return default(PlaneIntersectionType);
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x2B9240", Offset = "0x2B9240", VA = "0x2B9240")]
		public void Intersects(ref BoundingBox box, out PlaneIntersectionType result)
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x2B9254", Offset = "0x2B9254", VA = "0x2B9254")]
		public PlaneIntersectionType Intersects(BoundingFrustum frustum)
		{
			return default(PlaneIntersectionType);
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x2B9268", Offset = "0x2B9268", VA = "0x2B9268")]
		public PlaneIntersectionType Intersects(BoundingSphere sphere)
		{
			return default(PlaneIntersectionType);
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x2B9288", Offset = "0x2B9288", VA = "0x2B9288")]
		public void Intersects(ref BoundingSphere sphere, out PlaneIntersectionType result)
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x2B9298", Offset = "0x2B9298", VA = "0x2B9298", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002A7")]
	public enum PlaneIntersectionType
	{
		[Token(Token = "0x4000E98")]
		Front,
		[Token(Token = "0x4000E99")]
		Back,
		[Token(Token = "0x4000E9A")]
		Intersecting
	}
	[Token(Token = "0x20002A8")]
	public enum PlayerIndex
	{
		[Token(Token = "0x4000E9C")]
		One,
		[Token(Token = "0x4000E9D")]
		Two,
		[Token(Token = "0x4000E9E")]
		Three,
		[Token(Token = "0x4000E9F")]
		Four
	}
	[Token(Token = "0x20002A9")]
	public struct Ray : IEquatable<Ray>
	{
		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Direction;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 Position;

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x2B92A0", Offset = "0x2B92A0", VA = "0x2B92A0")]
		public Ray(Vector3 position, Vector3 direction)
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x2B92CC", Offset = "0x2B92CC", VA = "0x2B92CC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x2B92D4", Offset = "0x2B92D4", VA = "0x2B92D4", Slot = "4")]
		public bool Equals(Ray other)
		{
			return default(bool);
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x2B9304", Offset = "0x2B9304", VA = "0x2B9304", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0x2B9334", Offset = "0x2B9334", VA = "0x2B9334")]
		public float? Intersects(BoundingBox box)
		{
			return null;
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x2B9370", Offset = "0x2B9370", VA = "0x2B9370")]
		public void Intersects(ref BoundingBox box, out float? result)
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0x2B9378", Offset = "0x2B9378", VA = "0x2B9378")]
		public float? Intersects(BoundingFrustum frustum)
		{
			return null;
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x2B938C", Offset = "0x2B938C", VA = "0x2B938C")]
		public float? Intersects(BoundingSphere sphere)
		{
			return null;
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x2B93E0", Offset = "0x2B93E0", VA = "0x2B93E0")]
		public float? Intersects(Plane plane)
		{
			return null;
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0x2B93F0", Offset = "0x2B93F0", VA = "0x2B93F0")]
		public void Intersects(ref Plane plane, out float? result)
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0x2B9400", Offset = "0x2B9400", VA = "0x2B9400")]
		public void Intersects(ref BoundingSphere sphere, out float? result)
		{
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0x5A8488", Offset = "0x5A8488", VA = "0x5A8488")]
		public static bool operator !=(Ray a, Ray b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0x5A84E0", Offset = "0x5A84E0", VA = "0x5A84E0")]
		public static bool operator ==(Ray a, Ray b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0x2B9408", Offset = "0x2B9408", VA = "0x2B9408", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002AA")]
	public struct Rectangle : IEquatable<Rectangle>
	{
		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Rectangle emptyRectangle;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int X;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Y;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Width;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int Height;

		[Token(Token = "0x17000358")]
		public static Rectangle Empty
		{
			[Token(Token = "0x600124A")]
			[Address(RVA = "0x5A85F8", Offset = "0x5A85F8", VA = "0x5A85F8")]
			get
			{
				return default(Rectangle);
			}
		}

		[Token(Token = "0x17000359")]
		public int Left
		{
			[Token(Token = "0x600124B")]
			[Address(RVA = "0x2B9420", Offset = "0x2B9420", VA = "0x2B9420")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700035A")]
		public int Right
		{
			[Token(Token = "0x600124C")]
			[Address(RVA = "0x2B9428", Offset = "0x2B9428", VA = "0x2B9428")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700035B")]
		public int Top
		{
			[Token(Token = "0x600124D")]
			[Address(RVA = "0x2B9438", Offset = "0x2B9438", VA = "0x2B9438")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700035C")]
		public int Bottom
		{
			[Token(Token = "0x600124E")]
			[Address(RVA = "0x2B9440", Offset = "0x2B9440", VA = "0x2B9440")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700035D")]
		public bool IsEmpty
		{
			[Token(Token = "0x6001257")]
			[Address(RVA = "0x2B95A0", Offset = "0x2B95A0", VA = "0x2B95A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0x2B9410", Offset = "0x2B9410", VA = "0x2B9410")]
		public Rectangle(int x, int y, int width, int height)
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x5A86BC", Offset = "0x5A86BC", VA = "0x5A86BC")]
		public static bool operator ==(Rectangle a, Rectangle b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x2B9450", Offset = "0x2B9450", VA = "0x2B9450")]
		public bool Contains(int x, int y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x2B94A0", Offset = "0x2B94A0", VA = "0x2B94A0")]
		public bool Contains(float x, float y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x2B9520", Offset = "0x2B9520", VA = "0x2B9520")]
		public bool Contains(Vector2 value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x2B9528", Offset = "0x2B9528", VA = "0x2B9528")]
		public bool Contains(Rectangle value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x5A88A4", Offset = "0x5A88A4", VA = "0x5A88A4")]
		public static bool operator !=(Rectangle a, Rectangle b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x2B954C", Offset = "0x2B954C", VA = "0x2B954C")]
		public void Offset(int offsetX, int offsetY)
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x2B9568", Offset = "0x2B9568", VA = "0x2B9568")]
		public void Inflate(int horizontalValue, int verticalValue)
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x2B95E0", Offset = "0x2B95E0", VA = "0x2B95E0", Slot = "4")]
		public bool Equals(Rectangle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x2B9604", Offset = "0x2B9604", VA = "0x2B9604", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x2B960C", Offset = "0x2B960C", VA = "0x2B960C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x2B9614", Offset = "0x2B9614", VA = "0x2B9614", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x2B9630", Offset = "0x2B9630", VA = "0x2B9630")]
		public bool Intersects(Rectangle value)
		{
			return default(bool);
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x2B9654", Offset = "0x2B9654", VA = "0x2B9654")]
		public void Intersects(ref Rectangle value, out bool result)
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x5A8F04", Offset = "0x5A8F04", VA = "0x5A8F04")]
		public static Rectangle Intersect(Rectangle value1, Rectangle value2)
		{
			return default(Rectangle);
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x5A8FD8", Offset = "0x5A8FD8", VA = "0x5A8FD8")]
		public static void Intersect(ref Rectangle value1, ref Rectangle value2, out Rectangle result)
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x5A90AC", Offset = "0x5A90AC", VA = "0x5A90AC")]
		public static Rectangle Union(Rectangle value1, Rectangle value2)
		{
			return default(Rectangle);
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x5A9144", Offset = "0x5A9144", VA = "0x5A9144")]
		public static void Union(ref Rectangle value1, ref Rectangle value2, out Rectangle result)
		{
		}
	}
}
[Token(Token = "0x20002AB")]
public delegate void CheckPlusCallback(bool authorized);
[Token(Token = "0x20002AC")]
public delegate void NetworkAllowedCallback(bool authorized);
[Token(Token = "0x20002AD")]
public delegate void UGCChatAllowedCallback(int restriction);
[Token(Token = "0x20002AE")]
public delegate void SessionLeavedCallback();
[Token(Token = "0x20002AF")]
public delegate void SessionCreatedCallback();
[Token(Token = "0x20002B0")]
internal interface IMatchMaking
{
	[Token(Token = "0x1700035E")]
	int AppVersion
	{
		[Token(Token = "0x6001277")]
		get;
		[Token(Token = "0x6001278")]
		set;
	}

	[Token(Token = "0x1700035F")]
	int NetCodeVersion
	{
		[Token(Token = "0x6001279")]
		get;
		[Token(Token = "0x600127A")]
		set;
	}

	[Token(Token = "0x17000360")]
	bool SignedIn
	{
		[Token(Token = "0x600127B")]
		get;
	}

	[Token(Token = "0x17000361")]
	string ProfileName
	{
		[Token(Token = "0x600127C")]
		get;
	}

	[Token(Token = "0x17000362")]
	bool MatchingAvailable
	{
		[Token(Token = "0x600127D")]
		get;
	}

	[Token(Token = "0x17000363")]
	bool InSession
	{
		[Token(Token = "0x600127E")]
		get;
	}

	[Token(Token = "0x17000364")]
	bool IsHosting
	{
		[Token(Token = "0x600127F")]
		get;
	}

	[Token(Token = "0x17000365")]
	bool SessionBusy
	{
		[Token(Token = "0x6001280")]
		get;
	}

	[Token(Token = "0x17000366")]
	bool FoundSessions
	{
		[Token(Token = "0x6001281")]
		get;
	}

	[Token(Token = "0x17000367")]
	List<NWSessionInfo> SessionList
	{
		[Token(Token = "0x6001282")]
		get;
	}

	[Token(Token = "0x17000368")]
	NWSessionInfo CurrentSession
	{
		[Token(Token = "0x6001283")]
		get;
	}

	[Token(Token = "0x17000369")]
	List<NWMember> FriendList
	{
		[Token(Token = "0x6001284")]
		get;
	}

	[Token(Token = "0x6001285")]
	void Initialize();

	[Token(Token = "0x6001286")]
	void CheckOnlineAvailable(NetworkAllowedCallback cb);

	[Token(Token = "0x6001287")]
	void CheckUGCAllowed(UGCChatAllowedCallback cb);

	[Token(Token = "0x6001288")]
	void ShowRestrictionMessage(int restriction);

	[Token(Token = "0x6001289")]
	void CheckPlus(bool async, CheckPlusCallback cb);

	[Token(Token = "0x600128A")]
	void Abort();

	[Token(Token = "0x600128B")]
	void CreateSession(bool publicSession, string password, SessionCreatedCallback cb);

	[Token(Token = "0x600128C")]
	void FindSessions();

	[Token(Token = "0x600128D")]
	void JoinSession(int sessionIndex);

	[Token(Token = "0x600128E")]
	void KickOut(int memberIndex, bool allowRejoin);

	[Token(Token = "0x600128F")]
	void LeaveSession(SessionLeavedCallback cb);

	[Token(Token = "0x6001290")]
	void FindFriends();

	[Token(Token = "0x6001291")]
	void InviteFriend(int friendIndex);

	[Token(Token = "0x6001292")]
	void SendInvitation();

	[Token(Token = "0x6001293")]
	void UnlockTrophyRequest(int trophyID);
}
[Token(Token = "0x20002B1")]
public class NetworkSyncTransform : NetworkBehaviour
{
	[Token(Token = "0x4000EA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool rotateSyncX;

	[Token(Token = "0x4000EA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool rotateSyncY;

	[Token(Token = "0x4000EA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool rotateSyncZ;

	[Token(Token = "0x4000EAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float lerpRatePos;

	[Token(Token = "0x4000EAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float lerpRateRot;

	[Token(Token = "0x4000EAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float serverPosDistanceThreshold;

	[Token(Token = "0x4000EAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float serverRotDeltaThreshold;

	[Token(Token = "0x4000EAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 _lastPos;

	[Token(Token = "0x4000EAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float _lastRotX;

	[Token(Token = "0x4000EB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float _lastRotY;

	[Token(Token = "0x4000EB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _lastRotZ;

	[Token(Token = "0x4000EB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 _targetPos;

	[Token(Token = "0x4000EB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float _targetRotX;

	[Token(Token = "0x4000EB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _targetRotY;

	[Token(Token = "0x4000EB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float _targetRotZ;

	[Token(Token = "0x4000EB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int kRpcRpcSetPosition;

	[Token(Token = "0x4000EB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int kRpcRpcSetRotX;

	[Token(Token = "0x4000EB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int kRpcRpcSetRotY;

	[Token(Token = "0x4000EB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int kRpcRpcSetRotZ;

	[Token(Token = "0x6001294")]
	[Address(RVA = "0x456708", Offset = "0x456708", VA = "0x456708")]
	public NetworkSyncTransform()
	{
	}

	[Token(Token = "0x6001295")]
	[Address(RVA = "0x45680C", Offset = "0x45680C", VA = "0x45680C", Slot = "13")]
	public override void OnStartClient()
	{
	}

	[Token(Token = "0x6001296")]
	[Address(RVA = "0x456868", Offset = "0x456868", VA = "0x456868")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001297")]
	[Address(RVA = "0x45704C", Offset = "0x45704C", VA = "0x45704C")]
	private Vector3 AngleLerp(Vector3 StartAngle, Vector3 FinishAngle, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001298")]
	[Address(RVA = "0x456D48", Offset = "0x456D48", VA = "0x456D48")]
	private void LerpToTargetPosition()
	{
	}

	[Token(Token = "0x6001299")]
	[Address(RVA = "0x456E80", Offset = "0x456E80", VA = "0x456E80")]
	private void LerpToTargetRotation()
	{
	}

	[Token(Token = "0x600129A")]
	[Address(RVA = "0x4568B0", Offset = "0x4568B0", VA = "0x4568B0")]
	private void UpdatePosRotDeltas()
	{
	}

	[Token(Token = "0x600129B")]
	[Address(RVA = "0x457B10", Offset = "0x457B10", VA = "0x457B10")]
	[ClientRpc]
	private void RpcSetPosition(Vector3 position)
	{
	}

	[Token(Token = "0x600129C")]
	[Address(RVA = "0x457B1C", Offset = "0x457B1C", VA = "0x457B1C")]
	[ClientRpc]
	private void RpcSetRotX(float rotX)
	{
	}

	[Token(Token = "0x600129D")]
	[Address(RVA = "0x457B24", Offset = "0x457B24", VA = "0x457B24")]
	[ClientRpc]
	private void RpcSetRotY(float rotY)
	{
	}

	[Token(Token = "0x600129E")]
	[Address(RVA = "0x457B2C", Offset = "0x457B2C", VA = "0x457B2C")]
	[ClientRpc]
	private void RpcSetRotZ(float rotZ)
	{
	}

	[Token(Token = "0x600129F")]
	[Address(RVA = "0x457B34", Offset = "0x457B34", VA = "0x457B34")]
	private void UNetVersion()
	{
	}

	[Token(Token = "0x60012A0")]
	[Address(RVA = "0x457B38", Offset = "0x457B38", VA = "0x457B38")]
	protected static void InvokeRpcRpcSetPosition(NetworkBehaviour obj, NetworkReader reader)
	{
	}

	[Token(Token = "0x60012A1")]
	[Address(RVA = "0x457D70", Offset = "0x457D70", VA = "0x457D70")]
	protected static void InvokeRpcRpcSetRotX(NetworkBehaviour obj, NetworkReader reader)
	{
	}

	[Token(Token = "0x60012A2")]
	[Address(RVA = "0x457F84", Offset = "0x457F84", VA = "0x457F84")]
	protected static void InvokeRpcRpcSetRotY(NetworkBehaviour obj, NetworkReader reader)
	{
	}

	[Token(Token = "0x60012A3")]
	[Address(RVA = "0x458198", Offset = "0x458198", VA = "0x458198")]
	protected static void InvokeRpcRpcSetRotZ(NetworkBehaviour obj, NetworkReader reader)
	{
	}

	[Token(Token = "0x60012A4")]
	[Address(RVA = "0x457180", Offset = "0x457180", VA = "0x457180")]
	public void CallRpcSetPosition(Vector3 position)
	{
	}

	[Token(Token = "0x60012A5")]
	[Address(RVA = "0x4573F0", Offset = "0x4573F0", VA = "0x4573F0")]
	public void CallRpcSetRotX(float rotX)
	{
	}

	[Token(Token = "0x60012A6")]
	[Address(RVA = "0x457650", Offset = "0x457650", VA = "0x457650")]
	public void CallRpcSetRotY(float rotY)
	{
	}

	[Token(Token = "0x60012A7")]
	[Address(RVA = "0x4578B0", Offset = "0x4578B0", VA = "0x4578B0")]
	public void CallRpcSetRotZ(float rotZ)
	{
	}

	[Token(Token = "0x60012A8")]
	[Address(RVA = "0x4583AC", Offset = "0x4583AC", VA = "0x4583AC")]
	static NetworkSyncTransform()
	{
	}

	[Token(Token = "0x60012A9")]
	[Address(RVA = "0x458680", Offset = "0x458680", VA = "0x458680", Slot = "8")]
	public override bool OnSerialize(NetworkWriter writer, bool forceAll)
	{
		return default(bool);
	}

	[Token(Token = "0x60012AA")]
	[Address(RVA = "0x458688", Offset = "0x458688", VA = "0x458688", Slot = "9")]
	public override void OnDeserialize(NetworkReader reader, bool initialState)
	{
	}
}
[Token(Token = "0x20002B2")]
public class NWSessionInfo
{
	[Token(Token = "0x20002B3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236D14", Offset = "0x236D14")]
	private sealed class <FindMember>c__AnonStorey0
	{
		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string name;

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x456598", Offset = "0x456598", VA = "0x456598")]
		public <FindMember>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x4565A0", Offset = "0x4565A0", VA = "0x4565A0")]
		internal bool <>m__0(NWMember a)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000EBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool hostInfoValid;

	[Token(Token = "0x4000EBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string ip;

	[Token(Token = "0x4000EBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int signalingPort;

	[Token(Token = "0x4000EBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public List<NWMember> members;

	[Token(Token = "0x60012AB")]
	[Address(RVA = "0x453178", Offset = "0x453178", VA = "0x453178")]
	public NWSessionInfo()
	{
	}

	[Token(Token = "0x60012AC")]
	[Address(RVA = "0x452A50", Offset = "0x452A50", VA = "0x452A50")]
	public NWMember FindMember(int roomMemberId)
	{
		return null;
	}

	[Token(Token = "0x60012AD")]
	[Address(RVA = "0x4550E8", Offset = "0x4550E8", VA = "0x4550E8")]
	public NWMember RemoveMember(int roomMemberId)
	{
		return null;
	}

	[Token(Token = "0x60012AE")]
	[Address(RVA = "0x4564A0", Offset = "0x4564A0", VA = "0x4564A0")]
	public NWMember FindMember(string name)
	{
		return null;
	}
}
[Token(Token = "0x20002B4")]
public class NWMember
{
	[Token(Token = "0x4000EBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string name;

	[Token(Token = "0x4000EC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int id;

	[Token(Token = "0x4000EC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool isOwner;

	[Token(Token = "0x4000EC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public NetworkIdentity networkIdentity;

	[Token(Token = "0x60012B1")]
	[Address(RVA = "0x452B68", Offset = "0x452B68", VA = "0x452B68")]
	public NWMember()
	{
	}
}
[Token(Token = "0x20002B5")]
public class NWMatchMaking : MonoBehaviour, IMatchMaking
{
	[Token(Token = "0x20002B6")]
	public delegate void LogCallback(string s);

	[Token(Token = "0x20002B7")]
	public delegate void InvokeIntoMainThreadMethod(Action a);

	[Token(Token = "0x20002B8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236D24", Offset = "0x236D24")]
	private sealed class <KickOutDummy>c__AnonStorey0
	{
		[Token(Token = "0x20002B9")]
		private sealed class <KickOutDummy>c__AnonStorey1
		{
			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal NWMember nwMember;

			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal <KickOutDummy>c__AnonStorey0 <>f__ref$0;

			[Token(Token = "0x6001315")]
			[Address(RVA = "0x4550E0", Offset = "0x4550E0", VA = "0x4550E0")]
			public <KickOutDummy>c__AnonStorey1()
			{
			}

			[Token(Token = "0x6001316")]
			[Address(RVA = "0x455184", Offset = "0x455184", VA = "0x455184")]
			internal void <>m__0()
			{
			}
		}

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int memberIndex;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal NWMatchMaking $this;

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x453B1C", Offset = "0x453B1C", VA = "0x453B1C")]
		public <KickOutDummy>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x454EE8", Offset = "0x454EE8", VA = "0x454EE8")]
		internal void <>m__0(object source, ElapsedEventArgs e)
		{
		}
	}

	[Token(Token = "0x4000EC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LogCallback logCallback;

	[Token(Token = "0x4000EC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public InvokeIntoMainThreadMethod invokeIntoMainThreadCallback;

	[Token(Token = "0x4000ED0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool forceDummy;

	[Token(Token = "0x4000ED1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float dummyTime;

	[Token(Token = "0x4000ED2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string externalIP;

	[Token(Token = "0x4000ED3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public string sessionPassword;

	[Token(Token = "0x4000ED4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int serverMaxConnections;

	[Token(Token = "0x4000ED5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int serverPort;

	[Token(Token = "0x4000ED6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int appVersion;

	[Token(Token = "0x4000ED7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public string matchName;

	[Token(Token = "0x4000ED8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string invitationMessage;

	[Token(Token = "0x4000ED9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int netCodeVersion;

	[Token(Token = "0x4000EDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private NWSessionInfo currentSession;

	[Token(Token = "0x4000EDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private NetworkAllowedCallback networkAllowedCallback;

	[Token(Token = "0x4000EDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private UGCChatAllowedCallback ugcAllowedCallback;

	[Token(Token = "0x4000EDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private CheckPlusCallback checkPlusCallback;

	[Token(Token = "0x4000EDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private SessionLeavedCallback sessionLeavedCallback;

	[Token(Token = "0x4000EDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private SessionCreatedCallback sessionCreatedCallback;

	[Token(Token = "0x4000EE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool createSessionPending;

	[Token(Token = "0x4000EE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool dummySessionBusy;

	[Token(Token = "0x4000EE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	private bool dummyInSession;

	[Token(Token = "0x4000EE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
	private bool dummyIsHosting;

	[Token(Token = "0x4000EE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool dummyFoundSessions;

	[Token(Token = "0x4000EE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private string dummyProfileName;

	[Token(Token = "0x4000EE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private MarkovNameGenerator nameGen;

	[Token(Token = "0x4000EE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool[] trophyUnlocked;

	[Token(Token = "0x4000EE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool trophiesRegistered;

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	private bool useDummy;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
	private bool isHosting;

	[Token(Token = "0x1700036A")]
	public int AppVersion
	{
		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x4524BC", Offset = "0x4524BC", VA = "0x4524BC", Slot = "4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x4524C4", Offset = "0x4524C4", VA = "0x4524C4", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x1700036B")]
	public int NetCodeVersion
	{
		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x4524CC", Offset = "0x4524CC", VA = "0x4524CC", Slot = "6")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x4524D4", Offset = "0x4524D4", VA = "0x4524D4", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x1700036C")]
	public NWSessionInfo CurrentSession
	{
		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x4524DC", Offset = "0x4524DC", VA = "0x4524DC", Slot = "16")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700036D")]
	public bool CheckPlusPending
	{
		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x4524F8", Offset = "0x4524F8", VA = "0x4524F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700036E")]
	public bool CreateSessionPending
	{
		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x45251C", Offset = "0x45251C", VA = "0x45251C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700036F")]
	private bool PlusAvailableDummy
	{
		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x45301C", Offset = "0x45301C", VA = "0x45301C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000370")]
	private bool SignedInDummy
	{
		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x453024", Offset = "0x453024", VA = "0x453024")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000371")]
	private string ProfileNameDummy
	{
		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x45302C", Offset = "0x45302C", VA = "0x45302C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000372")]
	private bool MatchingAvailableDummy
	{
		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x453034", Offset = "0x453034", VA = "0x453034")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000373")]
	private bool InSessionDummy
	{
		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x45303C", Offset = "0x45303C", VA = "0x45303C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000374")]
	private bool IsHostingDummy
	{
		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x453044", Offset = "0x453044", VA = "0x453044")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000375")]
	private bool SessionBusyDummy
	{
		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x45304C", Offset = "0x45304C", VA = "0x45304C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000376")]
	private bool FoundSessionsDummy
	{
		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x453054", Offset = "0x453054", VA = "0x453054")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000377")]
	private List<NWSessionInfo> SessionListDummy
	{
		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x453090", Offset = "0x453090", VA = "0x453090")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000378")]
	private List<NWMember> FriendListDummy
	{
		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x453204", Offset = "0x453204", VA = "0x453204")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000379")]
	private bool CheckMainThreadInvokeSet
	{
		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x4533B8", Offset = "0x4533B8", VA = "0x4533B8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700037A")]
	public bool[] TrophyUnlocked
	{
		[Token(Token = "0x60012E9")]
		[Address(RVA = "0x453EA8", Offset = "0x453EA8", VA = "0x453EA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700037B")]
	public bool TrophiesRegistered
	{
		[Token(Token = "0x60012EA")]
		[Address(RVA = "0x453EB0", Offset = "0x453EB0", VA = "0x453EB0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700037C")]
	public bool SignedIn
	{
		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x453EB8", Offset = "0x453EB8", VA = "0x453EB8", Slot = "8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700037D")]
	public string ProfileName
	{
		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x453EC0", Offset = "0x453EC0", VA = "0x453EC0", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700037E")]
	public bool MatchingAvailable
	{
		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x453EC8", Offset = "0x453EC8", VA = "0x453EC8", Slot = "10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700037F")]
	public bool InSession
	{
		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x4524F0", Offset = "0x4524F0", VA = "0x4524F0", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000380")]
	public bool FoundSessions
	{
		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x453ED0", Offset = "0x453ED0", VA = "0x453ED0", Slot = "14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000381")]
	public bool SessionBusy
	{
		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x453ED8", Offset = "0x453ED8", VA = "0x453ED8", Slot = "13")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000382")]
	public bool IsHosting
	{
		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x453EE0", Offset = "0x453EE0", VA = "0x453EE0", Slot = "12")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000383")]
	public List<NWSessionInfo> SessionList
	{
		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x453EE8", Offset = "0x453EE8", VA = "0x453EE8", Slot = "15")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000384")]
	public List<NWMember> FriendList
	{
		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x453EEC", Offset = "0x453EEC", VA = "0x453EEC", Slot = "17")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1400000E")]
	public event EventHandler<EventArgs> SessionCreate
	{
		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x450DB4", Offset = "0x450DB4", VA = "0x450DB4")]
		add
		{
		}
		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x450EC0", Offset = "0x450EC0", VA = "0x450EC0")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public event EventHandler<EventArgs> SessionsFound
	{
		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x450FCC", Offset = "0x450FCC", VA = "0x450FCC")]
		add
		{
		}
		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x4510D8", Offset = "0x4510D8", VA = "0x4510D8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public event EventHandler<EventArgs> SessionsUpdated
	{
		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x4511E4", Offset = "0x4511E4", VA = "0x4511E4")]
		add
		{
		}
		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x4512F0", Offset = "0x4512F0", VA = "0x4512F0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000011")]
	public event EventHandler<EventArgs> SessionJoined
	{
		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x4513FC", Offset = "0x4513FC", VA = "0x4513FC")]
		add
		{
		}
		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x451508", Offset = "0x451508", VA = "0x451508")]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public event EventHandler<EventArgs> SessionLeft
	{
		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x451614", Offset = "0x451614", VA = "0x451614")]
		add
		{
		}
		[Token(Token = "0x60012BC")]
		[Address(RVA = "0x451720", Offset = "0x451720", VA = "0x451720")]
		remove
		{
		}
	}

	[Token(Token = "0x14000013")]
	public event EventHandler<EventArgs> SessionDestroyed
	{
		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x45182C", Offset = "0x45182C", VA = "0x45182C")]
		add
		{
		}
		[Token(Token = "0x60012BE")]
		[Address(RVA = "0x451938", Offset = "0x451938", VA = "0x451938")]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	public event EventHandler<EventArgs<Touple<string, bool>>> SessionError
	{
		[Token(Token = "0x60012BF")]
		[Address(RVA = "0x451A44", Offset = "0x451A44", VA = "0x451A44")]
		add
		{
		}
		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x451B50", Offset = "0x451B50", VA = "0x451B50")]
		remove
		{
		}
	}

	[Token(Token = "0x14000015")]
	public event EventHandler<EventArgs<object>> SessionInvite
	{
		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x451C5C", Offset = "0x451C5C", VA = "0x451C5C")]
		add
		{
		}
		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x451D68", Offset = "0x451D68", VA = "0x451D68")]
		remove
		{
		}
	}

	[Token(Token = "0x14000016")]
	public event EventHandler<EventArgs<object>> SessionPlayTogether
	{
		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x451E74", Offset = "0x451E74", VA = "0x451E74")]
		add
		{
		}
		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x451F80", Offset = "0x451F80", VA = "0x451F80")]
		remove
		{
		}
	}

	[Token(Token = "0x14000017")]
	public event EventHandler<EventArgs<NWMember>> MemberJoined
	{
		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x45208C", Offset = "0x45208C", VA = "0x45208C")]
		add
		{
		}
		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x452198", Offset = "0x452198", VA = "0x452198")]
		remove
		{
		}
	}

	[Token(Token = "0x14000018")]
	public event EventHandler<EventArgs<NWMember>> MemberLeft
	{
		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x4522A4", Offset = "0x4522A4", VA = "0x4522A4")]
		add
		{
		}
		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x4523B0", Offset = "0x4523B0", VA = "0x4523B0")]
		remove
		{
		}
	}

	[Token(Token = "0x60012B2")]
	[Address(RVA = "0x450C38", Offset = "0x450C38", VA = "0x450C38")]
	public NWMatchMaking()
	{
	}

	[Token(Token = "0x60012D0")]
	[Address(RVA = "0x452524", Offset = "0x452524", VA = "0x452524")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012D1")]
	[Address(RVA = "0x452600", Offset = "0x452600", VA = "0x452600")]
	public NWMember AddMember(int memberID, string memberName)
	{
		return null;
	}

	[Token(Token = "0x60012D2")]
	[Address(RVA = "0x4529A0", Offset = "0x4529A0", VA = "0x4529A0")]
	private void AddLog(string s, bool callbackAlso = true)
	{
	}

	[Token(Token = "0x60012D3")]
	[Address(RVA = "0x452F2C", Offset = "0x452F2C", VA = "0x452F2C")]
	private void AddError(string s)
	{
	}

	[Token(Token = "0x60012DC")]
	[Address(RVA = "0x45305C", Offset = "0x45305C", VA = "0x45305C")]
	private void InitDummy()
	{
	}

	[Token(Token = "0x60012E0")]
	[Address(RVA = "0x453460", Offset = "0x453460", VA = "0x453460")]
	private void CreateSessionDummy(bool publicSession, string password)
	{
	}

	[Token(Token = "0x60012E1")]
	[Address(RVA = "0x453604", Offset = "0x453604", VA = "0x453604")]
	private void FindSessionsDummy()
	{
	}

	[Token(Token = "0x60012E2")]
	[Address(RVA = "0x4537A0", Offset = "0x4537A0", VA = "0x4537A0")]
	private void JoinSessionDummy()
	{
	}

	[Token(Token = "0x60012E3")]
	[Address(RVA = "0x45393C", Offset = "0x45393C", VA = "0x45393C")]
	private void KickOutDummy(int memberIndex)
	{
	}

	[Token(Token = "0x60012E4")]
	[Address(RVA = "0x453B24", Offset = "0x453B24", VA = "0x453B24")]
	private void LeaveSessionDummy()
	{
	}

	[Token(Token = "0x60012E5")]
	[Address(RVA = "0x453BD4", Offset = "0x453BD4", VA = "0x453BD4")]
	private void FindFriendsDummy()
	{
	}

	[Token(Token = "0x60012E6")]
	[Address(RVA = "0x453C4C", Offset = "0x453C4C", VA = "0x453C4C")]
	private void InviteFriendDummy(int friendIndex)
	{
	}

	[Token(Token = "0x60012E7")]
	[Address(RVA = "0x453D08", Offset = "0x453D08", VA = "0x453D08")]
	private void SendInvitationDummy()
	{
	}

	[Token(Token = "0x60012E8")]
	[Address(RVA = "0x453EA4", Offset = "0x453EA4", VA = "0x453EA4")]
	private void UnlockTrophyRequestDummy(int trophyID)
	{
	}

	[Token(Token = "0x60012F4")]
	[Address(RVA = "0x453EF0", Offset = "0x453EF0", VA = "0x453EF0", Slot = "18")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60012F5")]
	[Address(RVA = "0x453F60", Offset = "0x453F60", VA = "0x453F60", Slot = "19")]
	public void CheckOnlineAvailable(NetworkAllowedCallback cb)
	{
	}

	[Token(Token = "0x60012F6")]
	[Address(RVA = "0x45419C", Offset = "0x45419C", VA = "0x45419C", Slot = "20")]
	public void CheckUGCAllowed(UGCChatAllowedCallback cb)
	{
	}

	[Token(Token = "0x60012F7")]
	[Address(RVA = "0x4541B4", Offset = "0x4541B4", VA = "0x4541B4", Slot = "21")]
	public void ShowRestrictionMessage(int restriction)
	{
	}

	[Token(Token = "0x60012F8")]
	[Address(RVA = "0x4541B8", Offset = "0x4541B8", VA = "0x4541B8", Slot = "22")]
	public void CheckPlus(bool async, CheckPlusCallback cb)
	{
	}

	[Token(Token = "0x60012F9")]
	[Address(RVA = "0x4541D0", Offset = "0x4541D0", VA = "0x4541D0", Slot = "23")]
	public void Abort()
	{
	}

	[Token(Token = "0x60012FA")]
	[Address(RVA = "0x454238", Offset = "0x454238", VA = "0x454238", Slot = "24")]
	public void CreateSession(bool publicSession, string password, [Optional] SessionCreatedCallback cb)
	{
	}

	[Token(Token = "0x60012FB")]
	[Address(RVA = "0x4542E4", Offset = "0x4542E4", VA = "0x4542E4", Slot = "25")]
	public void FindSessions()
	{
	}

	[Token(Token = "0x60012FC")]
	[Address(RVA = "0x4542E8", Offset = "0x4542E8", VA = "0x4542E8", Slot = "26")]
	public void JoinSession(int sessionIndex)
	{
	}

	[Token(Token = "0x60012FD")]
	[Address(RVA = "0x4542EC", Offset = "0x4542EC", VA = "0x4542EC", Slot = "27")]
	public void KickOut(int memberIndex, bool allowRejoin)
	{
	}

	[Token(Token = "0x60012FE")]
	[Address(RVA = "0x4542F0", Offset = "0x4542F0", VA = "0x4542F0", Slot = "28")]
	public void LeaveSession([Optional] SessionLeavedCallback cb)
	{
	}

	[Token(Token = "0x60012FF")]
	[Address(RVA = "0x4542F4", Offset = "0x4542F4", VA = "0x4542F4", Slot = "29")]
	public void FindFriends()
	{
	}

	[Token(Token = "0x6001300")]
	[Address(RVA = "0x454364", Offset = "0x454364", VA = "0x454364", Slot = "30")]
	public void InviteFriend(int friendIndex)
	{
	}

	[Token(Token = "0x6001301")]
	[Address(RVA = "0x4543D4", Offset = "0x4543D4", VA = "0x4543D4", Slot = "31")]
	public void SendInvitation()
	{
	}

	[Token(Token = "0x6001302")]
	[Address(RVA = "0x4543D8", Offset = "0x4543D8", VA = "0x4543D8", Slot = "32")]
	public void UnlockTrophyRequest(int trophyID)
	{
	}

	[Token(Token = "0x6001303")]
	[Address(RVA = "0x4543DC", Offset = "0x4543DC", VA = "0x4543DC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E524", Offset = "0x23E524")]
	private void <CreateSessionDummy>m__0(object source, ElapsedEventArgs e)
	{
	}

	[Token(Token = "0x6001304")]
	[Address(RVA = "0x45491C", Offset = "0x45491C", VA = "0x45491C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E534", Offset = "0x23E534")]
	private void <FindSessionsDummy>m__1(object source, ElapsedEventArgs e)
	{
	}

	[Token(Token = "0x6001305")]
	[Address(RVA = "0x454A30", Offset = "0x454A30", VA = "0x454A30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E544", Offset = "0x23E544")]
	private void <JoinSessionDummy>m__2(object source, ElapsedEventArgs e)
	{
	}

	[Token(Token = "0x6001306")]
	[Address(RVA = "0x454BCC", Offset = "0x454BCC", VA = "0x454BCC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E554", Offset = "0x23E554")]
	private void <SendInvitationDummy>m__3(object source, ElapsedEventArgs e)
	{
	}

	[Token(Token = "0x6001307")]
	[Address(RVA = "0x454CD0", Offset = "0x454CD0", VA = "0x454CD0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E564", Offset = "0x23E564")]
	private void <CreateSessionDummy>m__4()
	{
	}

	[Token(Token = "0x6001308")]
	[Address(RVA = "0x454D60", Offset = "0x454D60", VA = "0x454D60")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E574", Offset = "0x23E574")]
	private void <FindSessionsDummy>m__5()
	{
	}

	[Token(Token = "0x6001309")]
	[Address(RVA = "0x454DE0", Offset = "0x454DE0", VA = "0x454DE0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E584", Offset = "0x23E584")]
	private void <JoinSessionDummy>m__6()
	{
	}

	[Token(Token = "0x600130A")]
	[Address(RVA = "0x454E94", Offset = "0x454E94", VA = "0x454E94")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E594", Offset = "0x23E594")]
	private void <SendInvitationDummy>m__7()
	{
	}
}
[Token(Token = "0x20002BA")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x236D34", Offset = "0x236D34")]
public class AudioController : SingletonMonoBehaviour<AudioController>, ISerializationCallbackReceiver
{
	[Token(Token = "0x4000EEF")]
	public const string AUDIO_TOOLKIT_VERSION = "8.2";

	[Token(Token = "0x4000EF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject AudioObjectPrefab;

	[Token(Token = "0x4000EF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool Persistent;

	[Token(Token = "0x4000EF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool UnloadAudioClipsOnDestroy;

	[Token(Token = "0x4000EF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool UsePooledAudioObjects;

	[Token(Token = "0x4000EF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool PlayWithZeroVolume;

	[Token(Token = "0x4000EF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool EqualPowerCrossfade;

	[Token(Token = "0x4000EF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float musicCrossFadeTime;

	[Token(Token = "0x4000EF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ambienceSoundCrossFadeTime;

	[Token(Token = "0x4000EF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool specifyCrossFadeInAndOutSeperately;

	[Token(Token = "0x4000EF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float _musicCrossFadeTime_In;

	[Token(Token = "0x4000EFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float _musicCrossFadeTime_Out;

	[Token(Token = "0x4000EFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float _ambienceSoundCrossFadeTime_In;

	[Token(Token = "0x4000EFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float _ambienceSoundCrossFadeTime_Out;

	[Token(Token = "0x4000EFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public AudioCategory[] AudioCategories;

	[Token(Token = "0x4000EFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Playlist[] musicPlaylists;

	[Token(Token = "0x4000EFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23B6A8", Offset = "0x23B6A8")]
	public string[] musicPlaylist;

	[Token(Token = "0x4000F00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool loopPlaylist;

	[Token(Token = "0x4000F01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool shufflePlaylist;

	[Token(Token = "0x4000F02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool crossfadePlaylist;

	[Token(Token = "0x4000F03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float delayBetweenPlaylistTracks;

	[Token(Token = "0x4000F04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static PoolableReference<AudioObject> _currentMusicReference;

	[Token(Token = "0x4000F05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	protected static PoolableReference<AudioObject> _currentAmbienceReference;

	[Token(Token = "0x4000F06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string _currentPlaylistName;

	[Token(Token = "0x4000F07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected AudioListener _currentAudioListener;

	[Token(Token = "0x4000F08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _musicEnabled;

	[Token(Token = "0x4000F09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool _ambienceSoundEnabled;

	[Token(Token = "0x4000F0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	private bool _soundMuted;

	[Token(Token = "0x4000F0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	private bool _categoriesValidated;

	[Token(Token = "0x4000F0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private bool _isAdditionalAudioController;

	[Token(Token = "0x4000F0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	[SerializeField]
	private bool _audioDisabled;

	[Token(Token = "0x4000F0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<string, AudioItem> _audioItems;

	[Token(Token = "0x4000F0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<int> _playlistPlayed;

	[Token(Token = "0x4000F10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static bool _isPlaylistPlaying;

	[Token(Token = "0x4000F11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float _volume;

	[Token(Token = "0x4000F12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static double _systemTime;

	[Token(Token = "0x4000F13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static double _lastSystemTime;

	[Token(Token = "0x4000F14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static double _systemDeltaTime;

	[Token(Token = "0x4000F15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<AudioController> _additionalAudioControllers;

	[Token(Token = "0x4000F16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public AudioController_CurrentInspectorSelection _currentInspectorSelection;

	[Token(Token = "0x17000385")]
	public bool DisableAudio
	{
		[Token(Token = "0x6001319")]
		[Address(RVA = "0x478EB8", Offset = "0x478EB8", VA = "0x478EB8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001318")]
		[Address(RVA = "0x478EA0", Offset = "0x478EA0", VA = "0x478EA0")]
		set
		{
		}
	}

	[Token(Token = "0x17000386")]
	public bool isAdditionalAudioController
	{
		[Token(Token = "0x600131A")]
		[Address(RVA = "0x478EC0", Offset = "0x478EC0", VA = "0x478EC0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600131B")]
		[Address(RVA = "0x478EC8", Offset = "0x478EC8", VA = "0x478EC8")]
		set
		{
		}
	}

	[Token(Token = "0x17000387")]
	public float Volume
	{
		[Token(Token = "0x600131C")]
		[Address(RVA = "0x478ED0", Offset = "0x478ED0", VA = "0x478ED0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600131D")]
		[Address(RVA = "0x478ED8", Offset = "0x478ED8", VA = "0x478ED8")]
		set
		{
		}
	}

	[Token(Token = "0x17000388")]
	public bool musicEnabled
	{
		[Token(Token = "0x600131E")]
		[Address(RVA = "0x47903C", Offset = "0x47903C", VA = "0x47903C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600131F")]
		[Address(RVA = "0x479044", Offset = "0x479044", VA = "0x479044")]
		set
		{
		}
	}

	[Token(Token = "0x17000389")]
	public bool ambienceSoundEnabled
	{
		[Token(Token = "0x6001320")]
		[Address(RVA = "0x47931C", Offset = "0x47931C", VA = "0x47931C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001321")]
		[Address(RVA = "0x479324", Offset = "0x479324", VA = "0x479324")]
		set
		{
		}
	}

	[Token(Token = "0x1700038A")]
	public bool soundMuted
	{
		[Token(Token = "0x6001322")]
		[Address(RVA = "0x4795B4", Offset = "0x4795B4", VA = "0x4795B4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001323")]
		[Address(RVA = "0x4795BC", Offset = "0x4795BC", VA = "0x4795BC")]
		set
		{
		}
	}

	[Token(Token = "0x1700038B")]
	public float musicCrossFadeTime_In
	{
		[Token(Token = "0x6001324")]
		[Address(RVA = "0x4795C4", Offset = "0x4795C4", VA = "0x4795C4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001325")]
		[Address(RVA = "0x4795DC", Offset = "0x4795DC", VA = "0x4795DC")]
		set
		{
		}
	}

	[Token(Token = "0x1700038C")]
	public float musicCrossFadeTime_Out
	{
		[Token(Token = "0x6001326")]
		[Address(RVA = "0x4795E4", Offset = "0x4795E4", VA = "0x4795E4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001327")]
		[Address(RVA = "0x4795FC", Offset = "0x4795FC", VA = "0x4795FC")]
		set
		{
		}
	}

	[Token(Token = "0x1700038D")]
	public float ambienceSoundCrossFadeTime_In
	{
		[Token(Token = "0x6001328")]
		[Address(RVA = "0x479604", Offset = "0x479604", VA = "0x479604")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001329")]
		[Address(RVA = "0x47961C", Offset = "0x47961C", VA = "0x47961C")]
		set
		{
		}
	}

	[Token(Token = "0x1700038E")]
	public float ambienceSoundCrossFadeTime_Out
	{
		[Token(Token = "0x600132A")]
		[Address(RVA = "0x479624", Offset = "0x479624", VA = "0x479624")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600132B")]
		[Address(RVA = "0x47963C", Offset = "0x47963C", VA = "0x47963C")]
		set
		{
		}
	}

	[Token(Token = "0x1700038F")]
	public static double systemTime
	{
		[Token(Token = "0x600132C")]
		[Address(RVA = "0x478A10", Offset = "0x478A10", VA = "0x478A10")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x17000390")]
	public static double systemDeltaTime
	{
		[Token(Token = "0x600132D")]
		[Address(RVA = "0x479644", Offset = "0x479644", VA = "0x479644")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x17000391")]
	private static AudioObject _currentMusic
	{
		[Token(Token = "0x600137A")]
		[Address(RVA = "0x479220", Offset = "0x479220", VA = "0x479220")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001379")]
		[Address(RVA = "0x481144", Offset = "0x481144", VA = "0x481144")]
		set
		{
		}
	}

	[Token(Token = "0x17000392")]
	private static AudioObject _currentAmbienceSound
	{
		[Token(Token = "0x600137C")]
		[Address(RVA = "0x479500", Offset = "0x479500", VA = "0x479500")]
		get
		{
			return null;
		}
		[Token(Token = "0x600137B")]
		[Address(RVA = "0x481204", Offset = "0x481204", VA = "0x481204")]
		set
		{
		}
	}

	[Token(Token = "0x17000393")]
	public override bool isSingletonObject
	{
		[Token(Token = "0x600139E")]
		[Address(RVA = "0x483F00", Offset = "0x483F00", VA = "0x483F00", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001317")]
	[Address(RVA = "0x478D7C", Offset = "0x478D7C", VA = "0x478D7C")]
	public AudioController()
	{
	}

	[Token(Token = "0x600132E")]
	[Address(RVA = "0x4796D4", Offset = "0x4796D4", VA = "0x4796D4")]
	public static AudioObject PlayMusic(string audioID, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x600132F")]
	[Address(RVA = "0x479A08", Offset = "0x479A08", VA = "0x479A08")]
	public static AudioObject PlayMusic(string audioID, Vector3 worldPosition, [Optional] Transform parentObj, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6001330")]
	[Address(RVA = "0x479F2C", Offset = "0x479F2C", VA = "0x479F2C")]
	public static AudioObject PlayMusic(string audioID, Transform parentObj, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6001331")]
	[Address(RVA = "0x47A058", Offset = "0x47A058", VA = "0x47A058")]
	public static bool StopMusic()
	{
		return default(bool);
	}

	[Token(Token = "0x6001332")]
	[Address(RVA = "0x47A1F8", Offset = "0x47A1F8", VA = "0x47A1F8")]
	public static bool StopMusic(float fadeOut)
	{
		return default(bool);
	}

	[Token(Token = "0x6001333")]
	[Address(RVA = "0x47A270", Offset = "0x47A270", VA = "0x47A270")]
	public static bool PauseMusic(float fadeOut = 0f)
	{
		return default(bool);
	}

	[Token(Token = "0x6001334")]
	[Address(RVA = "0x47A408", Offset = "0x47A408", VA = "0x47A408")]
	public static bool IsMusicPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x6001335")]
	[Address(RVA = "0x47A520", Offset = "0x47A520", VA = "0x47A520")]
	public static bool UnpauseMusic(float fadeIn = 0f)
	{
		return default(bool);
	}

	[Token(Token = "0x6001336")]
	[Address(RVA = "0x47A720", Offset = "0x47A720", VA = "0x47A720")]
	public static AudioObject PlayAmbienceSound(string audioID, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6001337")]
	[Address(RVA = "0x47AA0C", Offset = "0x47AA0C", VA = "0x47AA0C")]
	public static AudioObject PlayAmbienceSound(string audioID, Vector3 worldPosition, [Optional] Transform parentObj, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6001338")]
	[Address(RVA = "0x47AEE8", Offset = "0x47AEE8", VA = "0x47AEE8")]
	public static AudioObject PlayAmbienceSound(string audioID, Transform parentObj, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6001339")]
	[Address(RVA = "0x47AFCC", Offset = "0x47AFCC", VA = "0x47AFCC")]
	public static bool StopAmbienceSound()
	{
		return default(bool);
	}

	[Token(Token = "0x600133A")]
	[Address(RVA = "0x47B16C", Offset = "0x47B16C", VA = "0x47B16C")]
	public static bool StopAmbienceSound(float fadeOut)
	{
		return default(bool);
	}

	[Token(Token = "0x600133B")]
	[Address(RVA = "0x47B1E4", Offset = "0x47B1E4", VA = "0x47B1E4")]
	public static bool PauseAmbienceSound(float fadeOut = 0f)
	{
		return default(bool);
	}

	[Token(Token = "0x600133C")]
	[Address(RVA = "0x47B37C", Offset = "0x47B37C", VA = "0x47B37C")]
	public static bool IsAmbienceSoundPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x600133D")]
	[Address(RVA = "0x47B494", Offset = "0x47B494", VA = "0x47B494")]
	public static bool UnpauseAmbienceSound(float fadeIn = 0f)
	{
		return default(bool);
	}

	[Token(Token = "0x600133E")]
	[Address(RVA = "0x47B640", Offset = "0x47B640", VA = "0x47B640")]
	public static int EnqueueMusic(string audioID)
	{
		return default(int);
	}

	[Token(Token = "0x600133F")]
	[Address(RVA = "0x47B828", Offset = "0x47B828", VA = "0x47B828")]
	private Playlist _GetCurrentPlaylist()
	{
		return null;
	}

	[Token(Token = "0x6001340")]
	[Address(RVA = "0x47B8C8", Offset = "0x47B8C8", VA = "0x47B8C8")]
	public Playlist GetPlaylistByName(string playlistName)
	{
		return null;
	}

	[Token(Token = "0x6001341")]
	[Address(RVA = "0x47BBC4", Offset = "0x47BBC4", VA = "0x47BBC4")]
	public static string[] GetMusicPlaylist([Optional] string playlistName)
	{
		return null;
	}

	[Token(Token = "0x6001342")]
	[Address(RVA = "0x47BCFC", Offset = "0x47BCFC", VA = "0x47BCFC")]
	public static bool SetCurrentMusicPlaylist(string playlistName)
	{
		return default(bool);
	}

	[Token(Token = "0x6001343")]
	[Address(RVA = "0x47BE54", Offset = "0x47BE54", VA = "0x47BE54")]
	public static AudioObject PlayMusicPlaylist([Optional] string playlistName)
	{
		return null;
	}

	[Token(Token = "0x6001344")]
	[Address(RVA = "0x47BF88", Offset = "0x47BF88", VA = "0x47BF88")]
	public static AudioObject PlayNextMusicOnPlaylist()
	{
		return null;
	}

	[Token(Token = "0x6001345")]
	[Address(RVA = "0x47C1E4", Offset = "0x47C1E4", VA = "0x47C1E4")]
	public static AudioObject PlayPreviousMusicOnPlaylist()
	{
		return null;
	}

	[Token(Token = "0x6001346")]
	[Address(RVA = "0x47C060", Offset = "0x47C060", VA = "0x47C060")]
	public static bool IsPlaylistPlaying()
	{
		return default(bool);
	}

	[Token(Token = "0x6001347")]
	[Address(RVA = "0x47C2F0", Offset = "0x47C2F0", VA = "0x47C2F0")]
	public static void ClearPlaylists()
	{
	}

	[Token(Token = "0x6001348")]
	[Address(RVA = "0x47C368", Offset = "0x47C368", VA = "0x47C368")]
	public static void AddPlaylist(string playlistName, string[] audioItemIDs)
	{
	}

	[Token(Token = "0x6001349")]
	[Address(RVA = "0x47C424", Offset = "0x47C424", VA = "0x47C424")]
	public static AudioObject Play(string audioID)
	{
		return null;
	}

	[Token(Token = "0x600134A")]
	[Address(RVA = "0x47C9D8", Offset = "0x47C9D8", VA = "0x47C9D8")]
	public static AudioObject Play(string audioID, float volume, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x600134B")]
	[Address(RVA = "0x47CC40", Offset = "0x47CC40", VA = "0x47CC40")]
	public static AudioObject Play(string audioID, Transform parentObj)
	{
		return null;
	}

	[Token(Token = "0x600134C")]
	[Address(RVA = "0x47CD08", Offset = "0x47CD08", VA = "0x47CD08")]
	public static AudioObject Play(string audioID, Transform parentObj, float volume, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x600134D")]
	[Address(RVA = "0x47CDE8", Offset = "0x47CDE8", VA = "0x47CDE8")]
	public static AudioObject Play(string audioID, Vector3 worldPosition, [Optional] Transform parentObj)
	{
		return null;
	}

	[Token(Token = "0x600134E")]
	[Address(RVA = "0x47C8F4", Offset = "0x47C8F4", VA = "0x47C8F4")]
	public static AudioObject Play(string audioID, Vector3 worldPosition, Transform parentObj, float volume, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x600134F")]
	[Address(RVA = "0x47CF14", Offset = "0x47CF14", VA = "0x47CF14")]
	public static AudioObject PlayScheduled(string audioID, double dspTime, Vector3 worldPosition, [Optional] Transform parentObj, float volume = 1f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6001350")]
	[Address(RVA = "0x47D008", Offset = "0x47D008", VA = "0x47D008")]
	public static AudioObject PlayAfter(string audioID, AudioObject playingAudio, double deltaDspTime = 0.0, float volume = 1f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6001351")]
	[Address(RVA = "0x47D224", Offset = "0x47D224", VA = "0x47D224")]
	public static bool Stop(string audioID, float fadeOutLength)
	{
		return default(bool);
	}

	[Token(Token = "0x6001352")]
	[Address(RVA = "0x47D788", Offset = "0x47D788", VA = "0x47D788")]
	public static bool Stop(string audioID)
	{
		return default(bool);
	}

	[Token(Token = "0x6001353")]
	[Address(RVA = "0x47D810", Offset = "0x47D810", VA = "0x47D810")]
	public static void StopAll(float fadeOutLength)
	{
	}

	[Token(Token = "0x6001354")]
	[Address(RVA = "0x47D9C4", Offset = "0x47D9C4", VA = "0x47D9C4")]
	public static void StopAll()
	{
	}

	[Token(Token = "0x6001355")]
	[Address(RVA = "0x47DA44", Offset = "0x47DA44", VA = "0x47DA44")]
	public static void PauseAll(float fadeOutLength = 0f)
	{
	}

	[Token(Token = "0x6001356")]
	[Address(RVA = "0x47DC74", Offset = "0x47DC74", VA = "0x47DC74")]
	public static void UnpauseAll(float fadeInLength = 0f)
	{
	}

	[Token(Token = "0x6001357")]
	[Address(RVA = "0x47DF48", Offset = "0x47DF48", VA = "0x47DF48")]
	public static void PauseCategory(string categoryName, float fadeOutLength = 0f)
	{
	}

	[Token(Token = "0x6001358")]
	[Address(RVA = "0x47E4F0", Offset = "0x47E4F0", VA = "0x47E4F0")]
	public static void UnpauseCategory(string categoryName, float fadeInLength = 0f)
	{
	}

	[Token(Token = "0x6001359")]
	[Address(RVA = "0x47E8A4", Offset = "0x47E8A4", VA = "0x47E8A4")]
	public static void StopCategory(string categoryName, float fadeOutLength = 0f)
	{
	}

	[Token(Token = "0x600135A")]
	[Address(RVA = "0x47EC54", Offset = "0x47EC54", VA = "0x47EC54")]
	public static bool IsPlaying(string audioID)
	{
		return default(bool);
	}

	[Token(Token = "0x600135B")]
	[Address(RVA = "0x47D538", Offset = "0x47D538", VA = "0x47D538")]
	public static List<AudioObject> GetPlayingAudioObjects(string audioID, bool includePausedAudio = false)
	{
		return null;
	}

	[Token(Token = "0x600135C")]
	[Address(RVA = "0x47E2F4", Offset = "0x47E2F4", VA = "0x47E2F4")]
	public static List<AudioObject> GetPlayingAudioObjectsInCategory(string categoryName, bool includePausedAudio = false)
	{
		return null;
	}

	[Token(Token = "0x600135D")]
	[Address(RVA = "0x478344", Offset = "0x478344", VA = "0x478344")]
	public static List<AudioObject> GetPlayingAudioObjects(bool includePausedAudio = false)
	{
		return null;
	}

	[Token(Token = "0x600135E")]
	[Address(RVA = "0x47EDE0", Offset = "0x47EDE0", VA = "0x47EDE0")]
	public static int GetPlayingAudioObjectsCount(string audioID, bool includePausedAudio = false)
	{
		return default(int);
	}

	[Token(Token = "0x600135F")]
	[Address(RVA = "0x47EF84", Offset = "0x47EF84", VA = "0x47EF84")]
	public static void EnableMusic(bool b)
	{
	}

	[Token(Token = "0x6001360")]
	[Address(RVA = "0x47F004", Offset = "0x47F004", VA = "0x47F004")]
	public static void EnableAmbienceSound(bool b)
	{
	}

	[Token(Token = "0x6001361")]
	[Address(RVA = "0x47F084", Offset = "0x47F084", VA = "0x47F084")]
	public static void MuteSound(bool b)
	{
	}

	[Token(Token = "0x6001362")]
	[Address(RVA = "0x47F100", Offset = "0x47F100", VA = "0x47F100")]
	public static bool IsMusicEnabled()
	{
		return default(bool);
	}

	[Token(Token = "0x6001363")]
	[Address(RVA = "0x47F174", Offset = "0x47F174", VA = "0x47F174")]
	public static bool IsAmbienceSoundEnabled()
	{
		return default(bool);
	}

	[Token(Token = "0x6001364")]
	[Address(RVA = "0x47F1E8", Offset = "0x47F1E8", VA = "0x47F1E8")]
	public static bool IsSoundMuted()
	{
		return default(bool);
	}

	[Token(Token = "0x6001365")]
	[Address(RVA = "0x47C66C", Offset = "0x47C66C", VA = "0x47C66C")]
	public static AudioListener GetCurrentAudioListener()
	{
		return null;
	}

	[Token(Token = "0x6001366")]
	[Address(RVA = "0x47F25C", Offset = "0x47F25C", VA = "0x47F25C")]
	public static AudioObject GetCurrentMusic()
	{
		return null;
	}

	[Token(Token = "0x6001367")]
	[Address(RVA = "0x47F2D4", Offset = "0x47F2D4", VA = "0x47F2D4")]
	public static AudioObject GetCurrentAmbienceSound()
	{
		return null;
	}

	[Token(Token = "0x6001368")]
	[Address(RVA = "0x47F34C", Offset = "0x47F34C", VA = "0x47F34C")]
	public static AudioCategory GetCategory(string name)
	{
		return null;
	}

	[Token(Token = "0x6001369")]
	[Address(RVA = "0x47F48C", Offset = "0x47F48C", VA = "0x47F48C")]
	public static void SetCategoryVolume(string name, float volume)
	{
	}

	[Token(Token = "0x600136A")]
	[Address(RVA = "0x47F838", Offset = "0x47F838", VA = "0x47F838")]
	public static float GetCategoryVolume(string name)
	{
		return default(float);
	}

	[Token(Token = "0x600136B")]
	[Address(RVA = "0x47F958", Offset = "0x47F958", VA = "0x47F958")]
	public static void FadeOutCategory(string name, float fadeOutLength, float startToFadeTime = 0f)
	{
	}

	[Token(Token = "0x600136C")]
	[Address(RVA = "0x47FB34", Offset = "0x47FB34", VA = "0x47FB34")]
	public static void FadeInCategory(string name, float fadeInTime, bool stopCurrentFadeOut = true)
	{
	}

	[Token(Token = "0x600136D")]
	[Address(RVA = "0x47FD10", Offset = "0x47FD10", VA = "0x47FD10")]
	public static void SetGlobalVolume(float volume)
	{
	}

	[Token(Token = "0x600136E")]
	[Address(RVA = "0x47FE48", Offset = "0x47FE48", VA = "0x47FE48")]
	public static float GetGlobalVolume()
	{
		return default(float);
	}

	[Token(Token = "0x600136F")]
	[Address(RVA = "0x47FEBC", Offset = "0x47FEBC", VA = "0x47FEBC")]
	public static AudioCategory NewCategory(string categoryName)
	{
		return null;
	}

	[Token(Token = "0x6001370")]
	[Address(RVA = "0x480174", Offset = "0x480174", VA = "0x480174")]
	public static void RemoveCategory(string categoryName)
	{
	}

	[Token(Token = "0x6001371")]
	[Address(RVA = "0x480644", Offset = "0x480644", VA = "0x480644")]
	public static void AddToCategory(AudioCategory category, AudioItem audioItem)
	{
	}

	[Token(Token = "0x6001372")]
	[Address(RVA = "0x48079C", Offset = "0x48079C", VA = "0x48079C")]
	public static AudioItem AddToCategory(AudioCategory category, AudioClip audioClip, string audioID)
	{
		return null;
	}

	[Token(Token = "0x6001373")]
	[Address(RVA = "0x480A64", Offset = "0x480A64", VA = "0x480A64")]
	public static bool RemoveAudioItem(string audioID)
	{
		return default(bool);
	}

	[Token(Token = "0x6001374")]
	[Address(RVA = "0x480D84", Offset = "0x480D84", VA = "0x480D84")]
	public static bool IsValidAudioID(string audioID)
	{
		return default(bool);
	}

	[Token(Token = "0x6001375")]
	[Address(RVA = "0x480E0C", Offset = "0x480E0C", VA = "0x480E0C")]
	public static AudioItem GetAudioItem(string audioID)
	{
		return null;
	}

	[Token(Token = "0x6001376")]
	[Address(RVA = "0x480E8C", Offset = "0x480E8C", VA = "0x480E8C")]
	public static void DetachAllAudios(GameObject gameObjectWithAudios)
	{
	}

	[Token(Token = "0x6001377")]
	[Address(RVA = "0x480F90", Offset = "0x480F90", VA = "0x480F90")]
	public static float GetAudioItemMaxDistance(string audioID)
	{
		return default(float);
	}

	[Token(Token = "0x6001378")]
	[Address(RVA = "0x4810B8", Offset = "0x4810B8", VA = "0x4810B8")]
	public void UnloadAllAudioClips()
	{
	}

	[Token(Token = "0x600137D")]
	[Address(RVA = "0x478EF4", Offset = "0x478EF4", VA = "0x478EF4")]
	private void _ApplyVolumeChange()
	{
	}

	[Token(Token = "0x600137E")]
	[Address(RVA = "0x47D47C", Offset = "0x47D47C", VA = "0x47D47C")]
	internal AudioItem _GetAudioItem(string audioID)
	{
		return null;
	}

	[Token(Token = "0x600137F")]
	[Address(RVA = "0x4797C8", Offset = "0x4797C8", VA = "0x4797C8")]
	protected AudioObject _PlayMusic(string audioID, float volume, float delay, float startTime)
	{
		return null;
	}

	[Token(Token = "0x6001380")]
	[Address(RVA = "0x47A7CC", Offset = "0x47A7CC", VA = "0x47A7CC")]
	protected AudioObject _PlayAmbienceSound(string audioID, float volume, float delay, float startTime)
	{
		return null;
	}

	[Token(Token = "0x6001381")]
	[Address(RVA = "0x47A0CC", Offset = "0x47A0CC", VA = "0x47A0CC")]
	protected bool _StopMusic(float fadeOutLength)
	{
		return default(bool);
	}

	[Token(Token = "0x6001382")]
	[Address(RVA = "0x47A2E8", Offset = "0x47A2E8", VA = "0x47A2E8")]
	protected bool _PauseMusic(float fadeOut)
	{
		return default(bool);
	}

	[Token(Token = "0x6001383")]
	[Address(RVA = "0x47B040", Offset = "0x47B040", VA = "0x47B040")]
	protected bool _StopAmbienceSound(float fadeOutLength)
	{
		return default(bool);
	}

	[Token(Token = "0x6001384")]
	[Address(RVA = "0x47B25C", Offset = "0x47B25C", VA = "0x47B25C")]
	protected bool _PauseAmbienceSound(float fadeOut)
	{
		return default(bool);
	}

	[Token(Token = "0x6001385")]
	[Address(RVA = "0x479B14", Offset = "0x479B14", VA = "0x479B14")]
	protected AudioObject _PlayMusic(string audioID, Vector3 position, Transform parentObj, float volume, float delay, float startTime)
	{
		return null;
	}

	[Token(Token = "0x6001386")]
	[Address(RVA = "0x47AAD0", Offset = "0x47AAD0", VA = "0x47AAD0")]
	protected AudioObject _PlayAmbienceSound(string audioID, Vector3 position, Transform parentObj, float volume, float delay, float startTime)
	{
		return null;
	}

	[Token(Token = "0x6001387")]
	[Address(RVA = "0x47B6C0", Offset = "0x47B6C0", VA = "0x47B6C0")]
	protected int _EnqueueMusic(string audioID)
	{
		return default(int);
	}

	[Token(Token = "0x6001388")]
	[Address(RVA = "0x47BF50", Offset = "0x47BF50", VA = "0x47BF50")]
	protected AudioObject _PlayMusicPlaylist()
	{
		return null;
	}

	[Token(Token = "0x6001389")]
	[Address(RVA = "0x4814C0", Offset = "0x4814C0", VA = "0x4814C0")]
	private AudioObject _PlayMusicTrackWithID(int nextTrack, float delay, bool addToPlayedList)
	{
		return null;
	}

	[Token(Token = "0x600138A")]
	[Address(RVA = "0x47C1B0", Offset = "0x47C1B0", VA = "0x47C1B0")]
	internal AudioObject _PlayNextMusicOnPlaylist(float delay)
	{
		return null;
	}

	[Token(Token = "0x600138B")]
	[Address(RVA = "0x47C2BC", Offset = "0x47C2BC", VA = "0x47C2BC")]
	internal AudioObject _PlayPreviousMusicOnPlaylist(float delay)
	{
		return null;
	}

	[Token(Token = "0x600138C")]
	[Address(RVA = "0x48140C", Offset = "0x48140C", VA = "0x48140C")]
	private void _ResetLastPlayedList()
	{
	}

	[Token(Token = "0x600138D")]
	[Address(RVA = "0x4816CC", Offset = "0x4816CC", VA = "0x4816CC")]
	protected int _GetNextMusicTrack()
	{
		return default(int);
	}

	[Token(Token = "0x600138E")]
	[Address(RVA = "0x4817AC", Offset = "0x4817AC", VA = "0x4817AC")]
	protected int _GetPreviousMusicTrack()
	{
		return default(int);
	}

	[Token(Token = "0x600138F")]
	[Address(RVA = "0x481E30", Offset = "0x481E30", VA = "0x481E30")]
	private int _GetPreviousMusicTrackShuffled()
	{
		return default(int);
	}

	[Token(Token = "0x6001390")]
	[Address(RVA = "0x48218C", Offset = "0x48218C", VA = "0x48218C")]
	private void _RemoveLastPlayedOnList()
	{
	}

	[Token(Token = "0x6001391")]
	[Address(RVA = "0x481818", Offset = "0x481818", VA = "0x481818")]
	private int _GetNextMusicTrackShuffled()
	{
		return default(int);
	}

	[Token(Token = "0x6001392")]
	[Address(RVA = "0x481C5C", Offset = "0x481C5C", VA = "0x481C5C")]
	private int _GetNextMusicTrackInOrder()
	{
		return default(int);
	}

	[Token(Token = "0x6001393")]
	[Address(RVA = "0x481FB4", Offset = "0x481FB4", VA = "0x481FB4")]
	private int _GetPreviousMusicTrackInOrder()
	{
		return default(int);
	}

	[Token(Token = "0x6001394")]
	[Address(RVA = "0x47CEB8", Offset = "0x47CEB8", VA = "0x47CEB8")]
	protected AudioObject _PlayAsSound(string audioID, float volume, Vector3 worldPosition, Transform parentObj, float delay, float startTime, bool playWithoutAudioObject, double dspTime = 0.0, [Optional] AudioObject useExistingAudioObject)
	{
		return null;
	}

	[Token(Token = "0x6001395")]
	[Address(RVA = "0x4812F0", Offset = "0x4812F0", VA = "0x4812F0")]
	protected AudioObject _PlayAsMusicOrAmbienceSound(string audioID, float volume, Vector3 worldPosition, Transform parentObj, float delay, float startTime, bool playWithoutAudioObject, double dspTime = 0.0, [Optional] AudioObject useExistingAudioObject, float startVolumeMultiplier = 1f)
	{
		return null;
	}

	[Token(Token = "0x6001396")]
	[Address(RVA = "0x482288", Offset = "0x482288", VA = "0x482288")]
	protected AudioObject _PlayEx(string audioID, float volume, Vector3 worldPosition, Transform parentObj, float delay, float startTime, bool playWithoutAudioObject, double dspTime = 0.0, [Optional] AudioObject useExistingAudioObject, bool playAsMusicOrAmbienceSound = false, float startVolumeMultiplier = 1f)
	{
		return null;
	}

	[Token(Token = "0x6001397")]
	[Address(RVA = "0x482800", Offset = "0x482800", VA = "0x482800")]
	public AudioObject PlayAudioItem(AudioItem sndItem, float volume, Vector3 worldPosition, [Optional] Transform parentObj, float delay = 0f, float startTime = 0f, bool playWithoutAudioObject = false, [Optional] AudioObject useExistingAudioObj, double dspTime = 0.0, bool playAsMusicOrAmbienceSound = false, float startVolumeMultiplier = 1f)
	{
		return null;
	}

	[Token(Token = "0x6001398")]
	[Address(RVA = "0x477E24", Offset = "0x477E24", VA = "0x477E24")]
	internal AudioCategory _GetCategory(string name)
	{
		return null;
	}

	[Token(Token = "0x6001399")]
	[Address(RVA = "0x4836EC", Offset = "0x4836EC", VA = "0x4836EC")]
	private void Update()
	{
	}

	[Token(Token = "0x600139A")]
	[Address(RVA = "0x483774", Offset = "0x483774", VA = "0x483774")]
	private static void _UpdateSystemTime()
	{
	}

	[Token(Token = "0x600139B")]
	[Address(RVA = "0x4839EC", Offset = "0x4839EC", VA = "0x4839EC", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600139C")]
	[Address(RVA = "0x483AA4", Offset = "0x483AA4", VA = "0x483AA4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600139D")]
	[Address(RVA = "0x483C04", Offset = "0x483C04", VA = "0x483C04")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600139F")]
	[Address(RVA = "0x483F14", Offset = "0x483F14", VA = "0x483F14", Slot = "6")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60013A0")]
	[Address(RVA = "0x483F88", Offset = "0x483F88", VA = "0x483F88")]
	private void AwakeSingleton()
	{
	}

	[Token(Token = "0x60013A1")]
	[Address(RVA = "0x4812C4", Offset = "0x4812C4", VA = "0x4812C4")]
	protected void _ValidateCategories()
	{
	}

	[Token(Token = "0x60013A2")]
	[Address(RVA = "0x480168", Offset = "0x480168", VA = "0x480168")]
	protected void _InvalidateCategories()
	{
	}

	[Token(Token = "0x60013A3")]
	[Address(RVA = "0x484410", Offset = "0x484410", VA = "0x484410")]
	public void InitializeAudioItems()
	{
	}

	[Token(Token = "0x60013A4")]
	[Address(RVA = "0x484578", Offset = "0x484578", VA = "0x484578")]
	private void _InitializeAudioItems(AudioController audioController)
	{
	}

	[Token(Token = "0x60013A5")]
	[Address(RVA = "0x483B30", Offset = "0x483B30", VA = "0x483B30")]
	private void _RegisterAdditionalAudioController(AudioController ac)
	{
	}

	[Token(Token = "0x60013A6")]
	[Address(RVA = "0x4846E0", Offset = "0x4846E0", VA = "0x4846E0")]
	private void _SyncCategoryVolumes(AudioController toSync, AudioController syncWith)
	{
	}

	[Token(Token = "0x60013A7")]
	[Address(RVA = "0x483CEC", Offset = "0x483CEC", VA = "0x483CEC")]
	private void _UnregisterAdditionalAudioController(AudioController ac)
	{
	}

	[Token(Token = "0x60013A8")]
	[Address(RVA = "0x47F664", Offset = "0x47F664", VA = "0x47F664")]
	private static List<AudioCategory> _GetAllCategories(string name)
	{
		return null;
	}

	[Token(Token = "0x60013A9")]
	[Address(RVA = "0x482B80", Offset = "0x482B80", VA = "0x482B80")]
	public AudioObject PlayAudioSubItem(AudioSubItem subItem, float volume, Vector3 worldPosition, Transform parentObj, float delay, float startTime, bool playWithoutAudioObject, AudioObject useExistingAudioObj, double dspTime = 0.0, bool playAsMusicOrAmbienceSound = false, float startVolumeMultiplier = 1f)
	{
		return null;
	}

	[Token(Token = "0x60013AA")]
	[Address(RVA = "0x4847B8", Offset = "0x4847B8", VA = "0x4847B8")]
	private AudioController _GetAudioController(AudioSubItem subItem)
	{
		return null;
	}

	[Token(Token = "0x60013AB")]
	[Address(RVA = "0x484B24", Offset = "0x484B24", VA = "0x484B24")]
	internal void _NotifyPlaylistTrackCompleteleyPlayed(AudioObject audioObject)
	{
	}

	[Token(Token = "0x60013AC")]
	[Address(RVA = "0x484190", Offset = "0x484190", VA = "0x484190")]
	private void _ValidateAudioObjectPrefab(GameObject audioPrefab)
	{
	}

	[Token(Token = "0x60013AD")]
	[Address(RVA = "0x484CF4", Offset = "0x484CF4", VA = "0x484CF4", Slot = "9")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x60013AE")]
	[Address(RVA = "0x484E88", Offset = "0x484E88", VA = "0x484E88", Slot = "8")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x60013AF")]
	[Address(RVA = "0x484390", Offset = "0x484390", VA = "0x484390")]
	private void _SetDefaultCurrentPlaylist()
	{
	}
}
[Serializable]
[Token(Token = "0x20002BB")]
public class AudioController_CurrentInspectorSelection
{
	[Token(Token = "0x4000F17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int currentCategoryIndex;

	[Token(Token = "0x4000F18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int currentItemIndex;

	[Token(Token = "0x4000F19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int currentSubitemIndex;

	[Token(Token = "0x4000F1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int currentPlaylistEntryIndex;

	[Token(Token = "0x4000F1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int currentPlaylistIndex;

	[Token(Token = "0x60013B1")]
	[Address(RVA = "0x478E98", Offset = "0x478E98", VA = "0x478E98")]
	public AudioController_CurrentInspectorSelection()
	{
	}
}
[Token(Token = "0x20002BC")]
public static class AudioControllerHelper
{
	[Token(Token = "0x60013B2")]
	[Address(RVA = "0x482B4C", Offset = "0x482B4C", VA = "0x482B4C")]
	public static AudioSubItem[] _ChooseSubItems(AudioItem audioItem, AudioObject useExistingAudioObj)
	{
		return null;
	}

	[Token(Token = "0x60013B3")]
	[Address(RVA = "0x485378", Offset = "0x485378", VA = "0x485378")]
	public static AudioSubItem _ChooseSingleSubItem(AudioItem audioItem, AudioPickSubItemMode pickMode, AudioObject useExistingAudioObj)
	{
		return null;
	}

	[Token(Token = "0x60013B4")]
	[Address(RVA = "0x4853BC", Offset = "0x4853BC", VA = "0x4853BC")]
	public static AudioSubItem _ChooseSingleSubItem(AudioItem audioItem)
	{
		return null;
	}

	[Token(Token = "0x60013B5")]
	[Address(RVA = "0x484F60", Offset = "0x484F60", VA = "0x484F60")]
	private static AudioSubItem[] _ChooseSubItems(AudioItem audioItem, AudioPickSubItemMode pickMode, AudioObject useExistingAudioObj)
	{
		return null;
	}

	[Token(Token = "0x60013B6")]
	[Address(RVA = "0x4853EC", Offset = "0x4853EC", VA = "0x4853EC")]
	private static int _ChooseRandomSubitem(AudioItem audioItem, bool allowSameElementTwiceInRow, int lastChosen, bool switchOddsEvens = false)
	{
		return default(int);
	}

	[Token(Token = "0x60013B7")]
	[Address(RVA = "0x485680", Offset = "0x485680", VA = "0x485680")]
	private static bool isOdd(int i)
	{
		return default(bool);
	}
}
[Token(Token = "0x20002BD")]
public class AudioFader
{
	[Token(Token = "0x4000F1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private float _fadeOutTotalTime;

	[Token(Token = "0x4000F1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private double _fadeOutStartTime;

	[Token(Token = "0x4000F1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float _fadeInTotalTime;

	[Token(Token = "0x4000F1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private double _fadeInStartTime;

	[Token(Token = "0x4000F20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B6E8", Offset = "0x23B6E8")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B6E8", Offset = "0x23B6E8")]
	private double <time>k__BackingField;

	[Token(Token = "0x17000394")]
	public double time
	{
		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x485688", Offset = "0x485688", VA = "0x485688")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E5A4", Offset = "0x23E5A4")]
		get
		{
			return default(double);
		}
		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x478AA0", Offset = "0x478AA0", VA = "0x478AA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E5B4", Offset = "0x23E5B4")]
		set
		{
		}
	}

	[Token(Token = "0x17000395")]
	public bool isFadingOutComplete
	{
		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x478D20", Offset = "0x478D20", VA = "0x478D20")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000396")]
	public bool isFadingOut
	{
		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x478C3C", Offset = "0x478C3C", VA = "0x478C3C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000397")]
	public bool isFadingOutOrScheduled
	{
		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x485694", Offset = "0x485694", VA = "0x485694")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000398")]
	public bool isFadingIn
	{
		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x478B40", Offset = "0x478B40", VA = "0x478B40")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60013B8")]
	[Address(RVA = "0x477F38", Offset = "0x477F38", VA = "0x477F38")]
	public AudioFader()
	{
	}

	[Token(Token = "0x60013BF")]
	[Address(RVA = "0x4856AC", Offset = "0x4856AC", VA = "0x4856AC")]
	public void Set0()
	{
	}

	[Token(Token = "0x60013C0")]
	[Address(RVA = "0x478904", Offset = "0x478904", VA = "0x478904")]
	public void FadeIn(float fadeInTime, bool stopCurrentFadeOut = false)
	{
	}

	[Token(Token = "0x60013C1")]
	[Address(RVA = "0x4856E0", Offset = "0x4856E0", VA = "0x4856E0")]
	public void FadeIn(float fadeInTime, double startToFadeTime, bool stopCurrentFadeOut = false)
	{
	}

	[Token(Token = "0x60013C2")]
	[Address(RVA = "0x478974", Offset = "0x478974", VA = "0x478974")]
	public void FadeOut(float fadeOutLength, float startToFadeTime)
	{
	}

	[Token(Token = "0x60013C3")]
	[Address(RVA = "0x477C7C", Offset = "0x477C7C", VA = "0x477C7C")]
	public float Get()
	{
		return default(float);
	}

	[Token(Token = "0x60013C4")]
	[Address(RVA = "0x4857AC", Offset = "0x4857AC", VA = "0x4857AC")]
	public float Get(out bool finishedFadeOut)
	{
		return default(float);
	}

	[Token(Token = "0x60013C5")]
	[Address(RVA = "0x485774", Offset = "0x485774", VA = "0x485774")]
	private float _GetFadeOutValue()
	{
		return default(float);
	}

	[Token(Token = "0x60013C6")]
	[Address(RVA = "0x4858B0", Offset = "0x4858B0", VA = "0x4858B0")]
	private float _GetFadeInValue()
	{
		return default(float);
	}

	[Token(Token = "0x60013C7")]
	[Address(RVA = "0x4858CC", Offset = "0x4858CC", VA = "0x4858CC")]
	private float _GetFadeValue(float t, float dt)
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x20002BE")]
public class AudioCategory
{
	[Token(Token = "0x4000F21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string Name;

	[Token(Token = "0x4000F22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private AudioCategory _parentCategory;

	[Token(Token = "0x4000F23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AudioFader _audioFader;

	[Token(Token = "0x4000F24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private string _parentCategoryName;

	[Token(Token = "0x4000F25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B72C", Offset = "0x23B72C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B72C", Offset = "0x23B72C")]
	private AudioController <audioController>k__BackingField;

	[Token(Token = "0x4000F26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public GameObject AudioObjectPrefab;

	[Token(Token = "0x4000F27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioItem[] AudioItems;

	[Token(Token = "0x4000F28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float _volume;

	[Token(Token = "0x17000399")]
	public float Volume
	{
		[Token(Token = "0x60013C9")]
		[Address(RVA = "0x477940", Offset = "0x477940", VA = "0x477940")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60013CA")]
		[Address(RVA = "0x477948", Offset = "0x477948", VA = "0x477948")]
		set
		{
		}
	}

	[Token(Token = "0x1700039A")]
	public float VolumeTotal
	{
		[Token(Token = "0x60013CB")]
		[Address(RVA = "0x477A84", Offset = "0x477A84", VA = "0x477A84")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700039B")]
	public AudioCategory parentCategory
	{
		[Token(Token = "0x60013CD")]
		[Address(RVA = "0x477CA0", Offset = "0x477CA0", VA = "0x477CA0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013CC")]
		[Address(RVA = "0x477E04", Offset = "0x477E04", VA = "0x477E04")]
		set
		{
		}
	}

	[Token(Token = "0x1700039C")]
	private AudioFader audioFader
	{
		[Token(Token = "0x60013CE")]
		[Address(RVA = "0x477BD4", Offset = "0x477BD4", VA = "0x477BD4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700039D")]
	public AudioController audioController
	{
		[Token(Token = "0x60013CF")]
		[Address(RVA = "0x477E1C", Offset = "0x477E1C", VA = "0x477E1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E5C4", Offset = "0x23E5C4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013D0")]
		[Address(RVA = "0x477938", Offset = "0x477938", VA = "0x477938")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E5D4", Offset = "0x23E5D4")]
		set
		{
		}
	}

	[Token(Token = "0x1700039E")]
	public bool isFadingIn
	{
		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x478AB0", Offset = "0x478AB0", VA = "0x478AB0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700039F")]
	public bool isFadingOut
	{
		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x478BB4", Offset = "0x478BB4", VA = "0x478BB4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003A0")]
	public bool isFadeOutComplete
	{
		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x478CA8", Offset = "0x478CA8", VA = "0x478CA8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60013C8")]
	[Address(RVA = "0x47790C", Offset = "0x47790C", VA = "0x47790C")]
	public AudioCategory(AudioController audioController)
	{
	}

	[Token(Token = "0x60013D1")]
	[Address(RVA = "0x477F6C", Offset = "0x477F6C", VA = "0x477F6C")]
	public GameObject GetAudioObjectPrefab()
	{
		return null;
	}

	[Token(Token = "0x60013D2")]
	[Address(RVA = "0x478064", Offset = "0x478064", VA = "0x478064")]
	internal void _AnalyseAudioItems(Dictionary<string, AudioItem> audioItemsDict)
	{
	}

	[Token(Token = "0x60013D3")]
	[Address(RVA = "0x4782A8", Offset = "0x4782A8", VA = "0x4782A8")]
	internal int _GetIndexOf(AudioItem audioItem)
	{
		return default(int);
	}

	[Token(Token = "0x60013D4")]
	[Address(RVA = "0x477950", Offset = "0x477950", VA = "0x477950")]
	private void _ApplyVolumeChange()
	{
	}

	[Token(Token = "0x60013D5")]
	[Address(RVA = "0x4785D4", Offset = "0x4785D4", VA = "0x4785D4")]
	private bool _IsCategoryParentOf(AudioCategory toTest, AudioCategory parent)
	{
		return default(bool);
	}

	[Token(Token = "0x60013D6")]
	[Address(RVA = "0x478728", Offset = "0x478728", VA = "0x478728")]
	public void UnloadAllAudioClips()
	{
	}

	[Token(Token = "0x60013D7")]
	[Address(RVA = "0x4788AC", Offset = "0x4788AC", VA = "0x4788AC")]
	public void FadeIn(float fadeInTime, bool stopCurrentFadeOut = true)
	{
	}

	[Token(Token = "0x60013D8")]
	[Address(RVA = "0x47892C", Offset = "0x47892C", VA = "0x47892C")]
	public void FadeOut(float fadeOutLength, float startToFadeTime = 0f)
	{
	}

	[Token(Token = "0x60013D9")]
	[Address(RVA = "0x477B2C", Offset = "0x477B2C", VA = "0x477B2C")]
	private void _UpdateFadeTime()
	{
	}
}
[Token(Token = "0x20002BF")]
public enum AudioPickSubItemMode
{
	[Token(Token = "0x4000F2A")]
	Disabled,
	[Token(Token = "0x4000F2B")]
	Random,
	[Token(Token = "0x4000F2C")]
	RandomNotSameTwice,
	[Token(Token = "0x4000F2D")]
	Sequence,
	[Token(Token = "0x4000F2E")]
	SequenceWithRandomStart,
	[Token(Token = "0x4000F2F")]
	AllSimultaneously,
	[Token(Token = "0x4000F30")]
	TwoSimultaneously,
	[Token(Token = "0x4000F31")]
	StartLoopSequenceWithFirst,
	[Token(Token = "0x4000F32")]
	RandomNotSameTwiceOddsEvens
}
[Serializable]
[Token(Token = "0x20002C0")]
public class AudioItem
{
	[Serializable]
	[Token(Token = "0x20002C1")]
	public enum LoopMode
	{
		[Token(Token = "0x4000F4C")]
		DoNotLoop = 0,
		[Token(Token = "0x4000F4D")]
		LoopSubitem = 1,
		[Token(Token = "0x4000F4E")]
		LoopSequence = 2,
		[Token(Token = "0x4000F4F")]
		PlaySequenceAndLoopLast = 4,
		[Token(Token = "0x4000F50")]
		IntroLoopOutroSequence = 5
	}

	[Token(Token = "0x4000F33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string Name;

	[Token(Token = "0x4000F34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LoopMode Loop;

	[Token(Token = "0x4000F35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int loopSequenceCount;

	[Token(Token = "0x4000F36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float loopSequenceOverlap;

	[Token(Token = "0x4000F37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float loopSequenceRandomDelay;

	[Token(Token = "0x4000F38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float loopSequenceRandomPitch;

	[Token(Token = "0x4000F39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float loopSequenceRandomVolume;

	[Token(Token = "0x4000F3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool DestroyOnLoad;

	[Token(Token = "0x4000F3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Volume;

	[Token(Token = "0x4000F3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public AudioPickSubItemMode SubItemPickMode;

	[Token(Token = "0x4000F3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float MinTimeBetweenPlayCalls;

	[Token(Token = "0x4000F3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int MaxInstanceCount;

	[Token(Token = "0x4000F3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float Delay;

	[Token(Token = "0x4000F40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float RandomVolume;

	[Token(Token = "0x4000F41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float RandomPitch;

	[Token(Token = "0x4000F42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float RandomDelay;

	[Token(Token = "0x4000F43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool overrideAudioSourceSettings;

	[Token(Token = "0x4000F44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float audioSource_MinDistance;

	[Token(Token = "0x4000F45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float audioSource_MaxDistance;

	[Token(Token = "0x4000F46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float spatialBlend;

	[Token(Token = "0x4000F47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSubItem[] subItems;

	[Token(Token = "0x4000F48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	internal int _lastChosen;

	[Token(Token = "0x4000F49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	internal double _lastPlayedTime;

	[NonSerialized]
	[Token(Token = "0x4000F4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AudioCategory _category;

	[Token(Token = "0x170003A1")]
	public AudioCategory category
	{
		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x480D7C", Offset = "0x480D7C", VA = "0x480D7C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x485F48", Offset = "0x485F48", VA = "0x485F48")]
		private set
		{
		}
	}

	[Token(Token = "0x60013DD")]
	[Address(RVA = "0x48096C", Offset = "0x48096C", VA = "0x48096C")]
	public AudioItem()
	{
	}

	[Token(Token = "0x60013DE")]
	[Address(RVA = "0x48599C", Offset = "0x48599C", VA = "0x48599C")]
	public AudioItem(AudioItem orig)
	{
	}

	[Token(Token = "0x60013E1")]
	[Address(RVA = "0x485F50", Offset = "0x485F50", VA = "0x485F50")]
	private void Awake()
	{
	}

	[Token(Token = "0x60013E2")]
	[Address(RVA = "0x485F6C", Offset = "0x485F6C", VA = "0x485F6C")]
	public void ResetSequence()
	{
	}

	[Token(Token = "0x60013E3")]
	[Address(RVA = "0x4782A0", Offset = "0x4782A0", VA = "0x4782A0")]
	internal void _Initialize(AudioCategory categ)
	{
	}

	[Token(Token = "0x60013E4")]
	[Address(RVA = "0x485F78", Offset = "0x485F78", VA = "0x485F78")]
	private void _NormalizeSubItems()
	{
	}

	[Token(Token = "0x60013E5")]
	[Address(RVA = "0x486148", Offset = "0x486148", VA = "0x486148")]
	private static bool _IsValidSubItem(AudioSubItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x60013E6")]
	[Address(RVA = "0x4787B4", Offset = "0x4787B4", VA = "0x4787B4")]
	public void UnloadAudioClip()
	{
	}
}
[Token(Token = "0x20002C2")]
public enum AudioSubItemType
{
	[Token(Token = "0x4000F52")]
	Clip,
	[Token(Token = "0x4000F53")]
	Item
}
[Serializable]
[Token(Token = "0x20002C3")]
public class AudioSubItem
{
	[Token(Token = "0x4000F54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public AudioSubItemType SubItemType;

	[Token(Token = "0x4000F55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float Probability;

	[Token(Token = "0x4000F56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool DisableOtherSubitems;

	[Token(Token = "0x4000F57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string ItemModeAudioID;

	[Token(Token = "0x4000F58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip Clip;

	[Token(Token = "0x4000F59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Volume;

	[Token(Token = "0x4000F5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float PitchShift;

	[Token(Token = "0x4000F5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Pan2D;

	[Token(Token = "0x4000F5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Delay;

	[Token(Token = "0x4000F5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float RandomPitch;

	[Token(Token = "0x4000F5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float RandomVolume;

	[Token(Token = "0x4000F5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float RandomDelay;

	[Token(Token = "0x4000F60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float ClipStopTime;

	[Token(Token = "0x4000F61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ClipStartTime;

	[Token(Token = "0x4000F62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float FadeIn;

	[Token(Token = "0x4000F63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float FadeOut;

	[Token(Token = "0x4000F64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool RandomStartPosition;

	[Token(Token = "0x4000F65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public List<string> individualSettings;

	[Token(Token = "0x4000F66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float _summedProbability;

	[Token(Token = "0x4000F67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	internal int _subItemID;

	[NonSerialized]
	[Token(Token = "0x4000F68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioItem _item;

	[Token(Token = "0x170003A2")]
	internal float _SummedProbability
	{
		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x485678", Offset = "0x485678", VA = "0x485678")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x48622C", Offset = "0x48622C", VA = "0x48622C")]
		set
		{
		}
	}

	[Token(Token = "0x170003A3")]
	public AudioItem item
	{
		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x4847B0", Offset = "0x4847B0", VA = "0x4847B0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x486224", Offset = "0x486224", VA = "0x486224")]
		internal set
		{
		}
	}

	[Token(Token = "0x60013E7")]
	[Address(RVA = "0x4809C0", Offset = "0x4809C0", VA = "0x4809C0")]
	public AudioSubItem()
	{
	}

	[Token(Token = "0x60013E8")]
	[Address(RVA = "0x485D30", Offset = "0x485D30", VA = "0x485D30")]
	public AudioSubItem(AudioSubItem orig, AudioItem item)
	{
	}

	[Token(Token = "0x60013ED")]
	[Address(RVA = "0x489F50", Offset = "0x489F50", VA = "0x489F50", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x20002C4")]
public class Playlist
{
	[Token(Token = "0x4000F69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string name;

	[Token(Token = "0x4000F6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string[] playlistItems;

	[Token(Token = "0x60013EE")]
	[Address(RVA = "0x464100", Offset = "0x464100", VA = "0x464100")]
	public Playlist()
	{
	}

	[Token(Token = "0x60013EF")]
	[Address(RVA = "0x464174", Offset = "0x464174", VA = "0x464174")]
	public Playlist(string name, string[] playlistItems)
	{
	}
}
[Token(Token = "0x20002C5")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x236D84", Offset = "0x236D84")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x236D84", Offset = "0x236D84")]
public class AudioObject : RegisteredComponent
{
	[Token(Token = "0x20002C6")]
	public delegate void AudioEventDelegate(AudioObject audioObject);

	[Token(Token = "0x20002C7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236E3C", Offset = "0x236E3C")]
	private sealed class <_WaitForSecondsThenStop>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float startToFadeTime;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float fadeOutLength;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal AudioObject $this;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170003C3")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001458")]
			[Address(RVA = "0x489C7C", Offset = "0x489C7C", VA = "0x489C7C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001459")]
			[Address(RVA = "0x489C84", Offset = "0x489C84", VA = "0x489C84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0x4877AC", Offset = "0x4877AC", VA = "0x4877AC")]
		[DebuggerHidden]
		public <_WaitForSecondsThenStop>c__Iterator0()
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0x489B5C", Offset = "0x489B5C", VA = "0x489B5C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0x489C8C", Offset = "0x489C8C", VA = "0x489C8C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0x489CA0", Offset = "0x489CA0", VA = "0x489CA0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20002C8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236E4C", Offset = "0x236E4C")]
	private sealed class <_WaitThenPause>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float waitTime;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int counter;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal AudioObject $this;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170003C5")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600145E")]
			[Address(RVA = "0x489E58", Offset = "0x489E58", VA = "0x489E58", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003C6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600145F")]
			[Address(RVA = "0x489E60", Offset = "0x489E60", VA = "0x489E60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0x487C7C", Offset = "0x487C7C", VA = "0x487C7C")]
		[DebuggerHidden]
		public <_WaitThenPause>c__Iterator1()
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0x489D28", Offset = "0x489D28", VA = "0x489D28", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x489E68", Offset = "0x489E68", VA = "0x489E68", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x489E7C", Offset = "0x489E7C", VA = "0x489E7C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000F6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B770", Offset = "0x23B770")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B770", Offset = "0x23B770")]
	private string <audioID>k__BackingField;

	[NonSerialized]
	[Token(Token = "0x4000F6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private AudioCategory _category;

	[Token(Token = "0x4000F6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B7A4", Offset = "0x23B7A4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B7A4", Offset = "0x23B7A4")]
	private bool <isPlayedAsMusicOrAmbienceSound>k__BackingField;

	[Token(Token = "0x4000F6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private AudioSubItem _subItemPrimary;

	[Token(Token = "0x4000F6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSubItem _subItemSecondary;

	[Token(Token = "0x4000F70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private AudioEventDelegate _completelyPlayedDelegate;

	[Token(Token = "0x4000F71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int _pauseCoroutineCounter;

	[Token(Token = "0x4000F72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool areSources1and2Swapped;

	[Token(Token = "0x4000F73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	internal float _volumeExcludingCategory;

	[Token(Token = "0x4000F74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float _volumeFromPrimaryFade;

	[Token(Token = "0x4000F75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float _volumeFromSecondaryFade;

	[Token(Token = "0x4000F76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	internal float _volumeFromScriptCall;

	[Token(Token = "0x4000F77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool _paused;

	[Token(Token = "0x4000F78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool _applicationPaused;

	[Token(Token = "0x4000F79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private AudioFader _primaryFader;

	[Token(Token = "0x4000F7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioFader _secondaryFader;

	[Token(Token = "0x4000F7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private double _playTime;

	[Token(Token = "0x4000F7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private double _playStartTimeLocal;

	[Token(Token = "0x4000F7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private double _playStartTimeSystem;

	[Token(Token = "0x4000F7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private double _playScheduledTimeDsp;

	[Token(Token = "0x4000F7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private double _audioObjectTime;

	[Token(Token = "0x4000F80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool _IsInactive;

	[Token(Token = "0x4000F81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool _stopRequested;

	[Token(Token = "0x4000F82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	private bool _finishSequence;

	[Token(Token = "0x4000F83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int _loopSequenceCount;

	[Token(Token = "0x4000F84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool _stopAfterFadeoutUserSetting;

	[Token(Token = "0x4000F85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool _pauseWithFadeOutRequested;

	[Token(Token = "0x4000F86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private double _dspTimeRemainingAtPause;

	[Token(Token = "0x4000F87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private AudioController _audioController;

	[Token(Token = "0x4000F88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	internal bool _isCurrentPlaylistTrack;

	[Token(Token = "0x4000F89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	internal float _audioSource_MinDistance_Saved;

	[Token(Token = "0x4000F8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	internal float _audioSource_MaxDistance_Saved;

	[Token(Token = "0x4000F8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	internal float _audioSource_SpatialBlend_Saved;

	[Token(Token = "0x4000F8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	internal int _lastChosenSubItemIndex;

	[Token(Token = "0x4000F8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private AudioSource _audioSource1;

	[Token(Token = "0x4000F8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private AudioSource _audioSource2;

	[Token(Token = "0x4000F8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool _primaryAudioSourcePaused;

	[Token(Token = "0x4000F90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	private bool _secondaryAudioSourcePaused;

	[Token(Token = "0x4000F91")]
	private const float VOLUME_TRANSFORM_POWER = 1.6f;

	[Token(Token = "0x170003A4")]
	public string audioID
	{
		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x47ED14", Offset = "0x47ED14", VA = "0x47ED14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E5E4", Offset = "0x23E5E4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x4836DC", Offset = "0x4836DC", VA = "0x4836DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E5F4", Offset = "0x23E5F4")]
		internal set
		{
		}
	}

	[Token(Token = "0x170003A5")]
	public AudioCategory category
	{
		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x4785CC", Offset = "0x4785CC", VA = "0x4785CC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x484A5C", Offset = "0x484A5C", VA = "0x484A5C")]
		internal set
		{
		}
	}

	[Token(Token = "0x170003A6")]
	public AudioSubItem subItem
	{
		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x486294", Offset = "0x486294", VA = "0x486294")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x484880", Offset = "0x484880", VA = "0x484880")]
		internal set
		{
		}
	}

	[Token(Token = "0x170003A7")]
	public bool isPlayedAsMusicOrAmbienceSound
	{
		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x48629C", Offset = "0x48629C", VA = "0x48629C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E604", Offset = "0x23E604")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x484A64", Offset = "0x484A64", VA = "0x484A64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E614", Offset = "0x23E614")]
		internal set
		{
		}
	}

	[Token(Token = "0x170003A8")]
	public AudioItem audioItem
	{
		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x4862A4", Offset = "0x4862A4", VA = "0x4862A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003A9")]
	public AudioEventDelegate completelyPlayedDelegate
	{
		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x4862C0", Offset = "0x4862C0", VA = "0x4862C0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x4862B8", Offset = "0x4862B8", VA = "0x4862B8")]
		set
		{
		}
	}

	[Token(Token = "0x170003AA")]
	public float volume
	{
		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x4862C8", Offset = "0x4862C8", VA = "0x4862C8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x486338", Offset = "0x486338", VA = "0x486338")]
		set
		{
		}
	}

	[Token(Token = "0x170003AB")]
	public float volumeItem
	{
		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x4863A0", Offset = "0x4863A0", VA = "0x4863A0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x4863C0", Offset = "0x4863C0", VA = "0x4863C0")]
		set
		{
		}
	}

	[Token(Token = "0x170003AC")]
	public float volumeTotal
	{
		[Token(Token = "0x6001400")]
		[Address(RVA = "0x4863D4", Offset = "0x4863D4", VA = "0x4863D4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003AD")]
	public float volumeTotalWithoutFade
	{
		[Token(Token = "0x6001401")]
		[Address(RVA = "0x4863F8", Offset = "0x4863F8", VA = "0x4863F8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003AE")]
	public double playCalledAtTime
	{
		[Token(Token = "0x6001402")]
		[Address(RVA = "0x48651C", Offset = "0x48651C", VA = "0x48651C")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x170003AF")]
	public double startedPlayingAtTime
	{
		[Token(Token = "0x6001403")]
		[Address(RVA = "0x4827F4", Offset = "0x4827F4", VA = "0x4827F4")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x170003B0")]
	public float timeUntilEnd
	{
		[Token(Token = "0x6001404")]
		[Address(RVA = "0x47D1F0", Offset = "0x47D1F0", VA = "0x47D1F0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003B1")]
	public double scheduledPlayingAtDspTime
	{
		[Token(Token = "0x6001405")]
		[Address(RVA = "0x486578", Offset = "0x486578", VA = "0x486578")]
		get
		{
			return default(double);
		}
		[Token(Token = "0x6001406")]
		[Address(RVA = "0x486584", Offset = "0x486584", VA = "0x486584")]
		set
		{
		}
	}

	[Token(Token = "0x170003B2")]
	public float clipLength
	{
		[Token(Token = "0x6001407")]
		[Address(RVA = "0x48491C", Offset = "0x48491C", VA = "0x48491C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003B3")]
	public float audioTime
	{
		[Token(Token = "0x6001408")]
		[Address(RVA = "0x486528", Offset = "0x486528", VA = "0x486528")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001409")]
		[Address(RVA = "0x48660C", Offset = "0x48660C", VA = "0x48660C")]
		set
		{
		}
	}

	[Token(Token = "0x170003B4")]
	public bool isFadingOut
	{
		[Token(Token = "0x600140A")]
		[Address(RVA = "0x482770", Offset = "0x482770", VA = "0x482770")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B5")]
	public bool isFadeOutComplete
	{
		[Token(Token = "0x600140B")]
		[Address(RVA = "0x486660", Offset = "0x486660", VA = "0x486660")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B6")]
	public bool isFadingOutOrScheduled
	{
		[Token(Token = "0x600140C")]
		[Address(RVA = "0x4866D4", Offset = "0x4866D4", VA = "0x4866D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B7")]
	public bool isFadingIn
	{
		[Token(Token = "0x600140D")]
		[Address(RVA = "0x486708", Offset = "0x486708", VA = "0x486708")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B8")]
	public float pitch
	{
		[Token(Token = "0x600140E")]
		[Address(RVA = "0x486794", Offset = "0x486794", VA = "0x486794")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600140F")]
		[Address(RVA = "0x4867C0", Offset = "0x4867C0", VA = "0x4867C0")]
		set
		{
		}
	}

	[Token(Token = "0x170003B9")]
	public float pan
	{
		[Token(Token = "0x6001410")]
		[Address(RVA = "0x4867F4", Offset = "0x4867F4", VA = "0x4867F4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001411")]
		[Address(RVA = "0x486820", Offset = "0x486820", VA = "0x486820")]
		set
		{
		}
	}

	[Token(Token = "0x170003BA")]
	public double audioObjectTime
	{
		[Token(Token = "0x6001412")]
		[Address(RVA = "0x486854", Offset = "0x486854", VA = "0x486854")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x170003BB")]
	public bool stopAfterFadeOut
	{
		[Token(Token = "0x6001413")]
		[Address(RVA = "0x486860", Offset = "0x486860", VA = "0x486860")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001414")]
		[Address(RVA = "0x486868", Offset = "0x486868", VA = "0x486868")]
		set
		{
		}
	}

	[Token(Token = "0x170003BC")]
	public AudioSource primaryAudioSource
	{
		[Token(Token = "0x600142D")]
		[Address(RVA = "0x4816C4", Offset = "0x4816C4", VA = "0x4816C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003BD")]
	public AudioSource secondaryAudioSource
	{
		[Token(Token = "0x600142E")]
		[Address(RVA = "0x4836E4", Offset = "0x4836E4", VA = "0x4836E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003BE")]
	internal float _volumeFromCategory
	{
		[Token(Token = "0x6001431")]
		[Address(RVA = "0x48638C", Offset = "0x48638C", VA = "0x48638C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003BF")]
	internal float _volumeWithCategory
	{
		[Token(Token = "0x6001432")]
		[Address(RVA = "0x486300", Offset = "0x486300", VA = "0x486300")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003C0")]
	private float _stopClipAtTime
	{
		[Token(Token = "0x6001433")]
		[Address(RVA = "0x4865D4", Offset = "0x4865D4", VA = "0x4865D4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003C1")]
	private float _startClipAtTime
	{
		[Token(Token = "0x6001434")]
		[Address(RVA = "0x4865F0", Offset = "0x4865F0", VA = "0x4865F0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003C2")]
	private bool _shouldStopIfPrimaryFadedOut
	{
		[Token(Token = "0x6001443")]
		[Address(RVA = "0x486A34", Offset = "0x486A34", VA = "0x486A34")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60013F0")]
	[Address(RVA = "0x486234", Offset = "0x486234", VA = "0x486234")]
	public AudioObject()
	{
	}

	[Token(Token = "0x6001415")]
	[Address(RVA = "0x481354", Offset = "0x481354", VA = "0x481354")]
	public void FadeIn(float fadeInTime)
	{
	}

	[Token(Token = "0x6001416")]
	[Address(RVA = "0x484B0C", Offset = "0x484B0C", VA = "0x484B0C")]
	public void PlayScheduled(double dspTime)
	{
	}

	[Token(Token = "0x6001417")]
	[Address(RVA = "0x486C74", Offset = "0x486C74", VA = "0x486C74")]
	public void PlayAfter(string audioID, double deltaDspTime = 0.0, float volume = 1f, float startTime = 0f)
	{
	}

	[Token(Token = "0x6001418")]
	[Address(RVA = "0x486D2C", Offset = "0x486D2C", VA = "0x486D2C")]
	public void PlayNow(string audioID, float delay = 0f, float volume = 1f, float startTime = 0f)
	{
	}

	[Token(Token = "0x6001419")]
	[Address(RVA = "0x479300", Offset = "0x479300", VA = "0x479300")]
	public void Play(float delay = 0f)
	{
	}

	[Token(Token = "0x600141A")]
	[Address(RVA = "0x47D770", Offset = "0x47D770", VA = "0x47D770")]
	public void Stop()
	{
	}

	[Token(Token = "0x600141B")]
	[Address(RVA = "0x47D780", Offset = "0x47D780", VA = "0x47D780")]
	public void Stop(float fadeOutLength)
	{
	}

	[Token(Token = "0x600141C")]
	[Address(RVA = "0x487148", Offset = "0x487148", VA = "0x487148")]
	public void Stop(float fadeOutLength, float startToFadeTime)
	{
	}

	[Token(Token = "0x600141D")]
	[Address(RVA = "0x487730", Offset = "0x487730", VA = "0x487730")]
	public void FinishSequence()
	{
	}

	[Token(Token = "0x600141E")]
	[Address(RVA = "0x487254", Offset = "0x487254", VA = "0x487254")]
	[DebuggerHidden]
	private IEnumerator _WaitForSecondsThenStop(float startToFadeTime, float fadeOutLength)
	{
		return null;
	}

	[Token(Token = "0x600141F")]
	[Address(RVA = "0x4877B4", Offset = "0x4877B4", VA = "0x4877B4")]
	public void FadeOut(float fadeOutLength)
	{
	}

	[Token(Token = "0x6001420")]
	[Address(RVA = "0x487478", Offset = "0x487478", VA = "0x487478")]
	public void FadeOut(float fadeOutLength, float startToFadeTime)
	{
	}

	[Token(Token = "0x6001421")]
	[Address(RVA = "0x479304", Offset = "0x479304", VA = "0x479304")]
	public void Pause()
	{
	}

	[Token(Token = "0x6001422")]
	[Address(RVA = "0x47DBF4", Offset = "0x47DBF4", VA = "0x47DBF4")]
	public void Pause(float fadeOutTime)
	{
	}

	[Token(Token = "0x6001423")]
	[Address(RVA = "0x487880", Offset = "0x487880", VA = "0x487880")]
	private void _PauseNow()
	{
	}

	[Token(Token = "0x6001424")]
	[Address(RVA = "0x487A88", Offset = "0x487A88", VA = "0x487A88")]
	public void Unpause()
	{
	}

	[Token(Token = "0x6001425")]
	[Address(RVA = "0x47A6CC", Offset = "0x47A6CC", VA = "0x47A6CC")]
	public void Unpause(float fadeInTime)
	{
	}

	[Token(Token = "0x6001426")]
	[Address(RVA = "0x487AB4", Offset = "0x487AB4", VA = "0x487AB4")]
	private void _UnpauseNow()
	{
	}

	[Token(Token = "0x6001427")]
	[Address(RVA = "0x4877BC", Offset = "0x4877BC", VA = "0x4877BC")]
	[DebuggerHidden]
	private IEnumerator _WaitThenPause(float waitTime, int counter)
	{
		return null;
	}

	[Token(Token = "0x6001428")]
	[Address(RVA = "0x487940", Offset = "0x487940", VA = "0x487940")]
	private void _PauseAudioSources()
	{
	}

	[Token(Token = "0x6001429")]
	[Address(RVA = "0x4792D4", Offset = "0x4792D4", VA = "0x4792D4")]
	public bool IsPaused(bool returnTrueIfStillFadingOut = true)
	{
		return default(bool);
	}

	[Token(Token = "0x600142A")]
	[Address(RVA = "0x47D1C8", Offset = "0x47D1C8", VA = "0x47D1C8")]
	public bool IsPlaying()
	{
		return default(bool);
	}

	[Token(Token = "0x600142B")]
	[Address(RVA = "0x487C84", Offset = "0x487C84", VA = "0x487C84")]
	public bool IsPrimaryPlaying()
	{
		return default(bool);
	}

	[Token(Token = "0x600142C")]
	[Address(RVA = "0x487550", Offset = "0x487550", VA = "0x487550")]
	public bool IsSecondaryPlaying()
	{
		return default(bool);
	}

	[Token(Token = "0x600142F")]
	[Address(RVA = "0x487608", Offset = "0x487608", VA = "0x487608")]
	public void SwitchAudioSources()
	{
	}

	[Token(Token = "0x6001430")]
	private void _SwitchValues<T>(ref T v1, ref T v2)
	{
	}

	[Token(Token = "0x6001435")]
	[Address(RVA = "0x488118", Offset = "0x488118", VA = "0x488118", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001436")]
	[Address(RVA = "0x487CB0", Offset = "0x487CB0", VA = "0x487CB0")]
	private void _CreateSecondAudioSource()
	{
	}

	[Token(Token = "0x6001437")]
	[Address(RVA = "0x4883E4", Offset = "0x4883E4", VA = "0x4883E4")]
	private void _Set0()
	{
	}

	[Token(Token = "0x6001438")]
	[Address(RVA = "0x4885A4", Offset = "0x4885A4", VA = "0x4885A4")]
	private void _SetReferences0()
	{
	}

	[Token(Token = "0x6001439")]
	[Address(RVA = "0x486A58", Offset = "0x486A58", VA = "0x486A58")]
	private void _PlayScheduled(double dspTime)
	{
	}

	[Token(Token = "0x600143A")]
	[Address(RVA = "0x486F44", Offset = "0x486F44", VA = "0x486F44")]
	private void _PlayDelayed(float delay)
	{
	}

	[Token(Token = "0x600143B")]
	[Address(RVA = "0x4886BC", Offset = "0x4886BC", VA = "0x4886BC")]
	private void _OnPlay()
	{
	}

	[Token(Token = "0x600143C")]
	[Address(RVA = "0x48731C", Offset = "0x48731C", VA = "0x48731C")]
	private void _Stop()
	{
	}

	[Token(Token = "0x600143D")]
	[Address(RVA = "0x488728", Offset = "0x488728", VA = "0x488728")]
	private void Update()
	{
	}

	[Token(Token = "0x600143E")]
	[Address(RVA = "0x489498", Offset = "0x489498", VA = "0x489498")]
	private void _StartFadeOutIfNecessary()
	{
	}

	[Token(Token = "0x600143F")]
	[Address(RVA = "0x489084", Offset = "0x489084", VA = "0x489084")]
	private bool _IsAudioLoopSequenceMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6001440")]
	[Address(RVA = "0x4890F8", Offset = "0x4890F8", VA = "0x4890F8")]
	private bool _ScheduleNextInLoopSequence()
	{
		return default(bool);
	}

	[Token(Token = "0x6001441")]
	[Address(RVA = "0x486870", Offset = "0x486870", VA = "0x486870")]
	private void _UpdateFadeVolume()
	{
	}

	[Token(Token = "0x6001442")]
	[Address(RVA = "0x4896AC", Offset = "0x4896AC", VA = "0x4896AC")]
	private float _EqualizePowerForCrossfading(float v)
	{
		return default(float);
	}

	[Token(Token = "0x6001444")]
	[Address(RVA = "0x48992C", Offset = "0x48992C", VA = "0x48992C")]
	private void OnApplicationPause(bool b)
	{
	}

	[Token(Token = "0x6001445")]
	[Address(RVA = "0x489934", Offset = "0x489934", VA = "0x489934")]
	private void SetApplicationPaused(bool isPaused)
	{
	}

	[Token(Token = "0x6001446")]
	[Address(RVA = "0x488FC0", Offset = "0x488FC0", VA = "0x488FC0")]
	public void DestroyAudioObject()
	{
	}

	[Token(Token = "0x6001447")]
	[Address(RVA = "0x4847F8", Offset = "0x4847F8", VA = "0x4847F8")]
	public static float TransformVolume(float volume)
	{
		return default(float);
	}

	[Token(Token = "0x6001448")]
	[Address(RVA = "0x4898A4", Offset = "0x4898A4", VA = "0x4898A4")]
	public static float InverseTransformVolume(float volume)
	{
		return default(float);
	}

	[Token(Token = "0x6001449")]
	[Address(RVA = "0x484888", Offset = "0x484888", VA = "0x484888")]
	public static float TransformPitch(float pitchSemiTones)
	{
		return default(float);
	}

	[Token(Token = "0x600144A")]
	[Address(RVA = "0x48993C", Offset = "0x48993C", VA = "0x48993C")]
	public static float InverseTransformPitch(float pitch)
	{
		return default(float);
	}

	[Token(Token = "0x600144B")]
	[Address(RVA = "0x478610", Offset = "0x478610", VA = "0x478610")]
	internal void _ApplyVolumeBoth()
	{
	}

	[Token(Token = "0x600144C")]
	[Address(RVA = "0x484A6C", Offset = "0x484A6C", VA = "0x484A6C")]
	internal void _ApplyVolumePrimary(float volumeMultiplier = 1f)
	{
	}

	[Token(Token = "0x600144D")]
	[Address(RVA = "0x489780", Offset = "0x489780", VA = "0x489780")]
	internal void _ApplyVolumeSecondary(float volumeMultiplier = 1f)
	{
	}

	[Token(Token = "0x600144E")]
	[Address(RVA = "0x4899D8", Offset = "0x4899D8", VA = "0x4899D8", Slot = "6")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600144F")]
	[Address(RVA = "0x489A1C", Offset = "0x489A1C", VA = "0x489A1C")]
	private void _RestoreOverrideAudioSourceSettings()
	{
	}

	[Token(Token = "0x6001450")]
	[Address(RVA = "0x47ED1C", Offset = "0x47ED1C", VA = "0x47ED1C")]
	public bool DoesBelongToCategory(string categoryName)
	{
		return default(bool);
	}

	[Token(Token = "0x6001451")]
	[Address(RVA = "0x489634", Offset = "0x489634", VA = "0x489634")]
	private float _GetRandomLoopSequenceDelay(AudioItem audioItem)
	{
		return default(float);
	}
}
[Token(Token = "0x20002C9")]
public abstract class AudioTriggerBase : MonoBehaviour
{
	[Token(Token = "0x20002CA")]
	public enum EventType
	{
		[Token(Token = "0x4000FA0")]
		Start,
		[Token(Token = "0x4000FA1")]
		Awake,
		[Token(Token = "0x4000FA2")]
		OnDestroy,
		[Token(Token = "0x4000FA3")]
		OnCollisionEnter,
		[Token(Token = "0x4000FA4")]
		OnCollisionExit,
		[Token(Token = "0x4000FA5")]
		OnEnable,
		[Token(Token = "0x4000FA6")]
		OnDisable
	}

	[Token(Token = "0x4000F9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public EventType triggerEvent;

	[Token(Token = "0x6001462")]
	[Address(RVA = "0x48A094", Offset = "0x48A094", VA = "0x48A094")]
	protected AudioTriggerBase()
	{
	}

	[Token(Token = "0x6001463")]
	[Address(RVA = "0x48A09C", Offset = "0x48A09C", VA = "0x48A09C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001464")]
	[Address(RVA = "0x48A0B0", Offset = "0x48A0B0", VA = "0x48A0B0", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6001465")]
	[Address(RVA = "0x48A0C4", Offset = "0x48A0C4", VA = "0x48A0C4", Slot = "6")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6001466")]
	[Address(RVA = "0x48A190", Offset = "0x48A190", VA = "0x48A190", Slot = "7")]
	protected virtual void OnCollisionEnter()
	{
	}

	[Token(Token = "0x6001467")]
	[Address(RVA = "0x48A1A4", Offset = "0x48A1A4", VA = "0x48A1A4", Slot = "8")]
	protected virtual void OnCollisionExit()
	{
	}

	[Token(Token = "0x6001468")]
	[Address(RVA = "0x48A1B8", Offset = "0x48A1B8", VA = "0x48A1B8", Slot = "9")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6001469")]
	[Address(RVA = "0x48A1CC", Offset = "0x48A1CC", VA = "0x48A1CC", Slot = "10")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x600146A")]
	protected abstract void _OnEventTriggered();

	[Token(Token = "0x600146B")]
	[Address(RVA = "0x48A1E0", Offset = "0x48A1E0", VA = "0x48A1E0", Slot = "12")]
	protected virtual void _CheckEvent(EventType eventType)
	{
	}
}
[Token(Token = "0x20002CB")]
public class PauseAllAudio : AudioTriggerBase
{
	[Token(Token = "0x20002CC")]
	public enum PauseType
	{
		[Token(Token = "0x4000FAB")]
		All,
		[Token(Token = "0x4000FAC")]
		MusicOnly,
		[Token(Token = "0x4000FAD")]
		AmbienceOnly,
		[Token(Token = "0x4000FAE")]
		Category
	}

	[Token(Token = "0x4000FA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PauseType pauseType;

	[Token(Token = "0x4000FA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float fadeOut;

	[Token(Token = "0x4000FA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string categoryName;

	[Token(Token = "0x600146C")]
	[Address(RVA = "0x460DA0", Offset = "0x460DA0", VA = "0x460DA0")]
	public PauseAllAudio()
	{
	}

	[Token(Token = "0x600146D")]
	[Address(RVA = "0x460DA8", Offset = "0x460DA8", VA = "0x460DA8", Slot = "11")]
	protected override void _OnEventTriggered()
	{
	}
}
[Token(Token = "0x20002CD")]
public class PlayAudio : AudioTriggerBase
{
	[Token(Token = "0x20002CE")]
	public enum PlayPosition
	{
		[Token(Token = "0x4000FB6")]
		Global,
		[Token(Token = "0x4000FB7")]
		ChildObject,
		[Token(Token = "0x4000FB8")]
		ObjectPosition
	}

	[Token(Token = "0x20002CF")]
	public enum SoundType
	{
		[Token(Token = "0x4000FBA")]
		SFX,
		[Token(Token = "0x4000FBB")]
		Music,
		[Token(Token = "0x4000FBC")]
		AmbienceSound
	}

	[Token(Token = "0x4000FAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string audioID;

	[Token(Token = "0x4000FB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public SoundType soundType;

	[Token(Token = "0x4000FB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayPosition position;

	[Token(Token = "0x4000FB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float volume;

	[Token(Token = "0x4000FB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float delay;

	[Token(Token = "0x4000FB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float startTime;

	[Token(Token = "0x600146E")]
	[Address(RVA = "0x4612F0", Offset = "0x4612F0", VA = "0x4612F0")]
	public PlayAudio()
	{
	}

	[Token(Token = "0x600146F")]
	[Address(RVA = "0x461300", Offset = "0x461300", VA = "0x461300", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001470")]
	[Address(RVA = "0x4613B8", Offset = "0x4613B8", VA = "0x4613B8")]
	private void _Play()
	{
	}

	[Token(Token = "0x6001471")]
	[Address(RVA = "0x461590", Offset = "0x461590", VA = "0x461590", Slot = "11")]
	protected override void _OnEventTriggered()
	{
	}

	[Token(Token = "0x6001472")]
	[Address(RVA = "0x461660", Offset = "0x461660", VA = "0x461660")]
	private void _PlayMusic()
	{
	}

	[Token(Token = "0x6001473")]
	[Address(RVA = "0x461838", Offset = "0x461838", VA = "0x461838")]
	private void _PlayAmbienceSound()
	{
	}
}
[Token(Token = "0x20002D0")]
public class PlayMusicOnStart : MonoBehaviour
{
	[Token(Token = "0x4000FBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string audioID;

	[Token(Token = "0x6001474")]
	[Address(RVA = "0x462458", Offset = "0x462458", VA = "0x462458")]
	public PlayMusicOnStart()
	{
	}

	[Token(Token = "0x6001475")]
	[Address(RVA = "0x462460", Offset = "0x462460", VA = "0x462460")]
	private void Start()
	{
	}
}
[Token(Token = "0x20002D1")]
public class PlayMusicPlaylist : AudioTriggerBase
{
	[Token(Token = "0x4000FBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string playListName;

	[Token(Token = "0x6001476")]
	[Address(RVA = "0x462544", Offset = "0x462544", VA = "0x462544")]
	public PlayMusicPlaylist()
	{
	}

	[Token(Token = "0x6001477")]
	[Address(RVA = "0x4625B0", Offset = "0x4625B0", VA = "0x4625B0", Slot = "11")]
	protected override void _OnEventTriggered()
	{
	}
}
[Token(Token = "0x20002D2")]
public class PlaySoundOnStart : MonoBehaviour
{
	[Token(Token = "0x4000FBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string audioID;

	[Token(Token = "0x6001478")]
	[Address(RVA = "0x462638", Offset = "0x462638", VA = "0x462638")]
	public PlaySoundOnStart()
	{
	}

	[Token(Token = "0x6001479")]
	[Address(RVA = "0x462640", Offset = "0x462640", VA = "0x462640")]
	private void Start()
	{
	}
}
[Token(Token = "0x20002D3")]
public class StopAllAudio : AudioTriggerBase
{
	[Token(Token = "0x4000FC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float fadeOut;

	[Token(Token = "0x600147A")]
	[Address(RVA = "0x581CE8", Offset = "0x581CE8", VA = "0x581CE8")]
	public StopAllAudio()
	{
	}

	[Token(Token = "0x600147B")]
	[Address(RVA = "0x581CF0", Offset = "0x581CF0", VA = "0x581CF0", Slot = "11")]
	protected override void _OnEventTriggered()
	{
	}
}
[Token(Token = "0x20002D4")]
public class StopAudio : AudioTriggerBase
{
	[Token(Token = "0x4000FC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string audioID;

	[Token(Token = "0x4000FC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float fadeOut;

	[Token(Token = "0x600147C")]
	[Address(RVA = "0x581D80", Offset = "0x581D80", VA = "0x581D80")]
	public StopAudio()
	{
	}

	[Token(Token = "0x600147D")]
	[Address(RVA = "0x581D88", Offset = "0x581D88", VA = "0x581D88", Slot = "11")]
	protected override void _OnEventTriggered()
	{
	}
}
[Token(Token = "0x20002D5")]
public class UnpauseAllAudio : AudioTriggerBase
{
	[Token(Token = "0x20002D6")]
	public enum PauseType
	{
		[Token(Token = "0x4000FC7")]
		All,
		[Token(Token = "0x4000FC8")]
		MusicOnly,
		[Token(Token = "0x4000FC9")]
		AmbienceOnly,
		[Token(Token = "0x4000FCA")]
		Category
	}

	[Token(Token = "0x4000FC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PauseType pauseType;

	[Token(Token = "0x4000FC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float fadeIn;

	[Token(Token = "0x4000FC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string categoryName;

	[Token(Token = "0x600147E")]
	[Address(RVA = "0x8E3160", Offset = "0x8E3160", VA = "0x8E3160")]
	public UnpauseAllAudio()
	{
	}

	[Token(Token = "0x600147F")]
	[Address(RVA = "0x8E3168", Offset = "0x8E3168", VA = "0x8E3168", Slot = "11")]
	protected override void _OnEventTriggered()
	{
	}
}
[Token(Token = "0x20002D7")]
public static class ArrayHelper
{
	[Token(Token = "0x6001480")]
	public static T AddArrayElement<T>(ref T[] array) where T : new()
	{
		return (T)null;
	}

	[Token(Token = "0x6001481")]
	public static T AddArrayElement<T>(ref T[] array, T elToAdd)
	{
		return (T)null;
	}

	[Token(Token = "0x6001482")]
	public static void DeleteArrayElement<T>(ref T[] array, int index)
	{
	}
}
[Token(Token = "0x20002D8")]
public class HashSet_Flash<T> : System.Collections.Generic.HashSet<T>
{
	[Token(Token = "0x6001483")]
	public HashSet_Flash()
	{
	}
}
[Token(Token = "0x20002D9")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x236E5C", Offset = "0x236E5C")]
public class PoolableObject : MonoBehaviour
{
	[Token(Token = "0x4000FCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int maxPoolSize;

	[Token(Token = "0x4000FCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int preloadCount;

	[Token(Token = "0x4000FCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool doNotDestroyOnLoad;

	[Token(Token = "0x4000FCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool sendAwakeStartOnDestroyMessage;

	[Token(Token = "0x4000FCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool sendPoolableActivateDeactivateMessages;

	[Token(Token = "0x4000FD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	internal bool _isAvailableForPooling;

	[Token(Token = "0x4000FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal bool _createdWithPoolController;

	[Token(Token = "0x4000FD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	internal bool _destroyMessageFromPoolController;

	[Token(Token = "0x4000FD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	internal bool _wasPreloaded;

	[Token(Token = "0x4000FD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	internal bool _wasStartCalledByUnity;

	[Token(Token = "0x4000FD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	internal ObjectPoolController.ObjectPool _myPool;

	[Token(Token = "0x4000FD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal int _serialNumber;

	[Token(Token = "0x4000FD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	internal int _usageCount;

	[Token(Token = "0x6001484")]
	[Address(RVA = "0x46419C", Offset = "0x46419C", VA = "0x46419C")]
	public PoolableObject()
	{
	}

	[Token(Token = "0x6001485")]
	[Address(RVA = "0x4641B4", Offset = "0x4641B4", VA = "0x4641B4")]
	protected void Start()
	{
	}

	[Token(Token = "0x6001486")]
	[Address(RVA = "0x4641C0", Offset = "0x4641C0", VA = "0x4641C0")]
	private static void _InvokeMethodByName(MonoBehaviour behaviour, string methodName)
	{
	}

	[Token(Token = "0x6001487")]
	[Address(RVA = "0x464230", Offset = "0x464230", VA = "0x464230")]
	private static void _BroadcastMessageToGameObject(GameObject go, string message)
	{
	}

	[Token(Token = "0x6001488")]
	[Address(RVA = "0x464430", Offset = "0x464430", VA = "0x464430")]
	private static void _BroadcastMessageToAllChildren(GameObject go, string message)
	{
	}

	[Token(Token = "0x6001489")]
	[Address(RVA = "0x4646D0", Offset = "0x4646D0", VA = "0x4646D0")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x600148A")]
	[Address(RVA = "0x464770", Offset = "0x464770", VA = "0x464770")]
	public int GetSerialNumber()
	{
		return default(int);
	}

	[Token(Token = "0x600148B")]
	[Address(RVA = "0x464778", Offset = "0x464778", VA = "0x464778")]
	public int GetUsageCount()
	{
		return default(int);
	}

	[Token(Token = "0x600148C")]
	[Address(RVA = "0x464780", Offset = "0x464780", VA = "0x464780")]
	public int DeactivateAllPoolableObjectsOfMyKind()
	{
		return default(int);
	}

	[Token(Token = "0x600148D")]
	[Address(RVA = "0x464794", Offset = "0x464794", VA = "0x464794")]
	public bool IsDeactivated()
	{
		return default(bool);
	}

	[Token(Token = "0x600148E")]
	[Address(RVA = "0x46479C", Offset = "0x46479C", VA = "0x46479C")]
	public PoolableObject[] GetAllPoolableObjectsOfMyKind(bool includeInactiveObjects)
	{
		return null;
	}
}
[Token(Token = "0x20002DA")]
public static class ObjectPoolController
{
	[Token(Token = "0x20002DB")]
	internal class ObjectPool
	{
		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private HashSet_Flash<PoolableObject> _pool;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private PoolableObject _prefabPoolObj;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform _poolParentDummy;

		[Token(Token = "0x170003C8")]
		internal Transform poolParentDummy
		{
			[Token(Token = "0x600149B")]
			[Address(RVA = "0x45B95C", Offset = "0x45B95C", VA = "0x45B95C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0x45B82C", Offset = "0x45B82C", VA = "0x45B82C")]
		public ObjectPool(GameObject prefab)
		{
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0x45B974", Offset = "0x45B974", VA = "0x45B974")]
		private void _ValidatePoolParentDummy()
		{
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0x45BB74", Offset = "0x45BB74", VA = "0x45BB74")]
		private void _ValidatePooledObjectDataContainer()
		{
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0x45BC08", Offset = "0x45BC08", VA = "0x45BC08")]
		internal void Remove(PoolableObject poolObj)
		{
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0x45B73C", Offset = "0x45B73C", VA = "0x45B73C")]
		internal int GetObjectCount()
		{
			return default(int);
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0x45A3B4", Offset = "0x45A3B4", VA = "0x45A3B4")]
		internal GameObject GetPooledInstance(Vector3? position, Quaternion? rotation)
		{
			return null;
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0x45B7B0", Offset = "0x45B7B0", VA = "0x45B7B0")]
		internal PoolableObject PreloadInstance()
		{
			return null;
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0x45BC88", Offset = "0x45BC88", VA = "0x45BC88")]
		private PoolableObject _NewPooledInstance(Vector3? position, Quaternion? rotation)
		{
			return null;
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0x45C0B0", Offset = "0x45C0B0", VA = "0x45C0B0")]
		internal int _SetAllAvailable()
		{
			return default(int);
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0x45C274", Offset = "0x45C274", VA = "0x45C274")]
		internal PoolableObject[] _GetAllObjects(bool includeInactiveObjects)
		{
			return null;
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0x45B31C", Offset = "0x45B31C", VA = "0x45B31C")]
		internal void _SetAvailable(PoolableObject poolObj, bool b)
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0x45BB40", Offset = "0x45BB40", VA = "0x45BB40")]
		private void _SetActive(GameObject obj, bool active)
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0x45C9C4", Offset = "0x45C9C4", VA = "0x45C9C4")]
		private bool _GetActive(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0x45C828", Offset = "0x45C828", VA = "0x45C828")]
		private void _SetActiveAndSendMessages(GameObject obj, PoolableObject parentPoolObj)
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0x45C4B0", Offset = "0x45C4B0", VA = "0x45C4B0")]
		private void _RecursivelySetInactiveAndSendMessages(GameObject obj, PoolableObject parentPoolObj, bool recursiveCall)
		{
		}
	}

	[Token(Token = "0x4000FD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x23B7D8", Offset = "0x23B7D8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B7D8", Offset = "0x23B7D8")]
	private static bool <isDuringPreload>k__BackingField;

	[Token(Token = "0x4000FD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	internal static int _globalSerialNumber;

	[Token(Token = "0x4000FDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	internal static bool _isDuringInstantiate;

	[Token(Token = "0x4000FDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Dictionary<GameObject, ObjectPool> _pools;

	[Token(Token = "0x170003C7")]
	public static bool isDuringPreload
	{
		[Token(Token = "0x600148F")]
		[Address(RVA = "0x459EF4", Offset = "0x459EF4", VA = "0x459EF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E6E4", Offset = "0x23E6E4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001490")]
		[Address(RVA = "0x459F80", Offset = "0x459F80", VA = "0x459F80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E6F4", Offset = "0x23E6F4")]
		private set
		{
		}
	}

	[Token(Token = "0x6001491")]
	[Address(RVA = "0x45A010", Offset = "0x45A010", VA = "0x45A010")]
	public static GameObject Instantiate(GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x6001492")]
	[Address(RVA = "0x45A9A0", Offset = "0x45A9A0", VA = "0x45A9A0")]
	public static GameObject Instantiate(GameObject prefab, Vector3 position, Quaternion quaternion)
	{
		return null;
	}

	[Token(Token = "0x6001493")]
	[Address(RVA = "0x45A8A4", Offset = "0x45A8A4", VA = "0x45A8A4")]
	public static GameObject InstantiateWithoutPool(GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x6001494")]
	[Address(RVA = "0x45AC7C", Offset = "0x45AC7C", VA = "0x45AC7C")]
	public static GameObject InstantiateWithoutPool(GameObject prefab, Vector3 position, Quaternion quaternion)
	{
		return null;
	}

	[Token(Token = "0x6001495")]
	[Address(RVA = "0x45AE8C", Offset = "0x45AE8C", VA = "0x45AE8C")]
	public static void Destroy(GameObject obj)
	{
	}

	[Token(Token = "0x6001496")]
	[Address(RVA = "0x45B470", Offset = "0x45B470", VA = "0x45B470")]
	public static void Preload(GameObject prefab)
	{
	}

	[Token(Token = "0x6001497")]
	[Address(RVA = "0x45A21C", Offset = "0x45A21C", VA = "0x45A21C")]
	internal static ObjectPool _GetPool(PoolableObject prefabPoolComponent)
	{
		return null;
	}

	[Token(Token = "0x6001498")]
	[Address(RVA = "0x45B108", Offset = "0x45B108", VA = "0x45B108")]
	private static void _DetachChildrenAndDestroy(Transform transform)
	{
	}
}
[Token(Token = "0x20002DC")]
public class PoolableReference<T> where T : UnityEngine.Component
{
	[Token(Token = "0x4000FDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private PoolableObject _pooledObj;

	[Token(Token = "0x4000FE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private int _initialUsageCount;

	[Token(Token = "0x4000FE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private T _objComponent;

	[Token(Token = "0x60014AA")]
	public PoolableReference()
	{
	}

	[Token(Token = "0x60014AB")]
	public PoolableReference(T componentOfPoolableObject)
	{
	}

	[Token(Token = "0x60014AC")]
	public PoolableReference(PoolableReference<T> poolableReference)
	{
	}

	[Token(Token = "0x60014AD")]
	public void Reset()
	{
	}

	[Token(Token = "0x60014AE")]
	public T Get()
	{
		return null;
	}

	[Token(Token = "0x60014AF")]
	public void Set(T componentOfPoolableObject)
	{
	}

	[Token(Token = "0x60014B0")]
	public void Set(T componentOfPoolableObject, bool allowNonePoolable)
	{
	}
}
[Token(Token = "0x20002DD")]
public interface IRegisteredComponent
{
	[Token(Token = "0x60014B1")]
	Type GetRegisteredComponentBaseClassType();
}
[Token(Token = "0x20002DE")]
public abstract class RegisteredComponent : MonoBehaviour, IRegisteredComponent
{
	[Token(Token = "0x4000FE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool isRegistered;

	[Token(Token = "0x4000FE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	private bool isUnregistered;

	[Token(Token = "0x60014B2")]
	[Address(RVA = "0x46C248", Offset = "0x46C248", VA = "0x46C248")]
	protected RegisteredComponent()
	{
	}

	[Token(Token = "0x60014B3")]
	[Address(RVA = "0x46C250", Offset = "0x46C250", VA = "0x46C250", Slot = "5")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60014B4")]
	[Address(RVA = "0x46C4E0", Offset = "0x46C4E0", VA = "0x46C4E0", Slot = "6")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x60014B5")]
	[Address(RVA = "0x46CA24", Offset = "0x46CA24", VA = "0x46CA24", Slot = "4")]
	public Type GetRegisteredComponentBaseClassType()
	{
		return null;
	}
}
[Token(Token = "0x20002DF")]
public static class RegisteredComponentController
{
	[Token(Token = "0x20002E0")]
	public class InstanceContainer : HashSet_Flash<IRegisteredComponent>
	{
		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x46CEC8", Offset = "0x46CEC8", VA = "0x46CEC8")]
		public InstanceContainer()
		{
		}
	}

	[Token(Token = "0x4000FE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<Type, InstanceContainer> _instanceContainers;

	[Token(Token = "0x60014B6")]
	public static T[] GetAllOfType<T>() where T : IRegisteredComponent
	{
		return null;
	}

	[Token(Token = "0x60014B7")]
	[Address(RVA = "0x46CAB4", Offset = "0x46CAB4", VA = "0x46CAB4")]
	public static object[] GetAllOfType(Type type)
	{
		return null;
	}

	[Token(Token = "0x60014B8")]
	public static int InstanceCountOfType<T>() where T : IRegisteredComponent
	{
		return default(int);
	}

	[Token(Token = "0x60014B9")]
	[Address(RVA = "0x46CD54", Offset = "0x46CD54", VA = "0x46CD54")]
	private static InstanceContainer _GetInstanceContainer(Type type)
	{
		return null;
	}

	[Token(Token = "0x60014BA")]
	[Address(RVA = "0x46CF2C", Offset = "0x46CF2C", VA = "0x46CF2C")]
	private static void _RegisterType(IRegisteredComponent component, Type type)
	{
	}

	[Token(Token = "0x60014BB")]
	[Address(RVA = "0x46C37C", Offset = "0x46C37C", VA = "0x46C37C")]
	internal static void _Register(IRegisteredComponent component)
	{
	}

	[Token(Token = "0x60014BC")]
	[Address(RVA = "0x46D02C", Offset = "0x46D02C", VA = "0x46D02C")]
	internal static void _UnregisterType(IRegisteredComponent component, Type type)
	{
	}

	[Token(Token = "0x60014BD")]
	[Address(RVA = "0x46C8C0", Offset = "0x46C8C0", VA = "0x46C8C0")]
	internal static void _Unregister(IRegisteredComponent component)
	{
	}
}
[Token(Token = "0x20002E1")]
public static class SystemTime
{
	[Token(Token = "0x4000FE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static double _timeAtLaunch;

	[Token(Token = "0x170003C9")]
	public static double time
	{
		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x5832C0", Offset = "0x5832C0", VA = "0x5832C0")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x170003CA")]
	public static double timeSinceLaunch
	{
		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x583388", Offset = "0x583388", VA = "0x583388")]
		get
		{
			return default(double);
		}
	}
}
[Token(Token = "0x20002E2")]
public class UnitySingleton<T> where T : MonoBehaviour
{
	[Token(Token = "0x4000FE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T _instance;

	[Token(Token = "0x4000FE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	internal static Type _myType;

	[Token(Token = "0x4000FE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	internal static GameObject _autoCreatePrefab;

	[Token(Token = "0x4000FE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int _GlobalInstanceCount;

	[Token(Token = "0x4000FEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool _awakeSingletonCalled;

	[Token(Token = "0x60014C3")]
	private UnitySingleton()
	{
	}

	[Token(Token = "0x60014C4")]
	public static T GetSingleton(bool throwErrorIfNotFound, bool autoCreate)
	{
		return null;
	}

	[Token(Token = "0x60014C5")]
	internal static void _Awake(T instance)
	{
	}

	[Token(Token = "0x60014C6")]
	internal static void _Destroy()
	{
	}

	[Token(Token = "0x60014C7")]
	private static void _AwakeSingleton(T instance)
	{
	}
}
[Token(Token = "0x20002E3")]
internal interface ISingletonMonoBehaviour
{
	[Token(Token = "0x170003CB")]
	bool isSingletonObject
	{
		[Token(Token = "0x60014C9")]
		get;
	}
}
[Token(Token = "0x20002E4")]
public abstract class SingletonMonoBehaviour<T> : MonoBehaviour, ISingletonMonoBehaviour where T : MonoBehaviour
{
	[Token(Token = "0x170003CC")]
	public static T Instance
	{
		[Token(Token = "0x60014CB")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003CD")]
	public virtual bool isSingletonObject
	{
		[Token(Token = "0x60014D2")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60014CA")]
	protected SingletonMonoBehaviour()
	{
	}

	[Token(Token = "0x60014CC")]
	public static T DoesInstanceExist()
	{
		return null;
	}

	[Token(Token = "0x60014CD")]
	public static void ActivateSingletonInstance()
	{
	}

	[Token(Token = "0x60014CE")]
	public static void SetSingletonAutoCreate(GameObject autoCreatePrefab)
	{
	}

	[Token(Token = "0x60014CF")]
	public static void SetSingletonType(Type type)
	{
	}

	[Token(Token = "0x60014D0")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60014D1")]
	protected virtual void OnDestroy()
	{
	}
}
[Token(Token = "0x20002E5")]
public class GenericGamePad : NWGamePadProxy
{
	[Token(Token = "0x4000FEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float analogButThreshold;

	[Token(Token = "0x4000FEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static int kco;

	[Token(Token = "0x4000FED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected int thisKCO;

	[Token(Token = "0x4000FEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected string[] axisList;

	[Token(Token = "0x4000FEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected KeyValuePair<string, KeyCode>[] buttonList;

	[Token(Token = "0x170003CE")]
	public override bool IsRealDevice
	{
		[Token(Token = "0x60014D4")]
		[Address(RVA = "0x4B6DF8", Offset = "0x4B6DF8", VA = "0x4B6DF8", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003CF")]
	public override string GamePadName
	{
		[Token(Token = "0x60014D5")]
		[Address(RVA = "0x4B6E00", Offset = "0x4B6E00", VA = "0x4B6E00", Slot = "5")]
		get
		{
			return null;
		}
		[Token(Token = "0x60014D6")]
		[Address(RVA = "0x4B6E08", Offset = "0x4B6E08", VA = "0x4B6E08", Slot = "6")]
		set
		{
		}
	}

	[Token(Token = "0x170003D0")]
	public override int GamePadIndex
	{
		[Token(Token = "0x60014D7")]
		[Address(RVA = "0x4B788C", Offset = "0x4B788C", VA = "0x4B788C", Slot = "7")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60014D8")]
		[Address(RVA = "0x4B7894", Offset = "0x4B7894", VA = "0x4B7894", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x170003D1")]
	public KeyValuePair<string, KeyCode>[] ButtonList
	{
		[Token(Token = "0x60014D9")]
		[Address(RVA = "0x4B7934", Offset = "0x4B7934", VA = "0x4B7934")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60014D3")]
	[Address(RVA = "0x4B6B30", Offset = "0x4B6B30", VA = "0x4B6B30")]
	public GenericGamePad(int index)
	{
	}

	[Token(Token = "0x60014DA")]
	[Address(RVA = "0x4B793C", Offset = "0x4B793C", VA = "0x4B793C", Slot = "9")]
	public override void Update()
	{
	}
}
[Token(Token = "0x20002E6")]
public class OculusController : GenericGamePad
{
	[Token(Token = "0x4000FF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool isLeft;

	[Token(Token = "0x4000FF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	private bool isGOController;

	[Token(Token = "0x4000FF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	private bool simulateRemoteWithTouch;

	[Token(Token = "0x170003D2")]
	public override bool IsRealDevice
	{
		[Token(Token = "0x60014DD")]
		[Address(RVA = "0x45D6FC", Offset = "0x45D6FC", VA = "0x45D6FC", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003D3")]
	public override string GamePadName
	{
		[Token(Token = "0x60014DE")]
		[Address(RVA = "0x45D704", Offset = "0x45D704", VA = "0x45D704", Slot = "5")]
		get
		{
			return null;
		}
		[Token(Token = "0x60014DF")]
		[Address(RVA = "0x45D70C", Offset = "0x45D70C", VA = "0x45D70C", Slot = "6")]
		set
		{
		}
	}

	[Token(Token = "0x60014DC")]
	[Address(RVA = "0x45D654", Offset = "0x45D654", VA = "0x45D654")]
	public OculusController(int index, string gpName)
	{
	}

	[Token(Token = "0x60014E0")]
	[Address(RVA = "0x45EE00", Offset = "0x45EE00", VA = "0x45EE00", Slot = "9")]
	public override void Update()
	{
	}
}
[Token(Token = "0x20002E7")]
public class PSMoveController : NWGamePadProxy
{
	[Token(Token = "0x4000FF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool isLeft;

	[Token(Token = "0x170003D4")]
	public override bool IsRealDevice
	{
		[Token(Token = "0x60014E2")]
		[Address(RVA = "0x45FA40", Offset = "0x45FA40", VA = "0x45FA40", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003D5")]
	public override string GamePadName
	{
		[Token(Token = "0x60014E3")]
		[Address(RVA = "0x45FA48", Offset = "0x45FA48", VA = "0x45FA48", Slot = "5")]
		get
		{
			return null;
		}
		[Token(Token = "0x60014E4")]
		[Address(RVA = "0x45FA50", Offset = "0x45FA50", VA = "0x45FA50", Slot = "6")]
		set
		{
		}
	}

	[Token(Token = "0x60014E1")]
	[Address(RVA = "0x45F9A4", Offset = "0x45F9A4", VA = "0x45F9A4")]
	public PSMoveController(string gpName)
	{
	}

	[Token(Token = "0x60014E5")]
	[Address(RVA = "0x45FADC", Offset = "0x45FADC", VA = "0x45FADC", Slot = "9")]
	public override void Update()
	{
	}
}
[Token(Token = "0x20002E8")]
public class SwitchGamePad : NWGamePadProxy
{
	[Token(Token = "0x170003D6")]
	public override bool IsRealDevice
	{
		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x5832B4", Offset = "0x5832B4", VA = "0x5832B4", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60014E6")]
	[Address(RVA = "0x583230", Offset = "0x583230", VA = "0x583230")]
	public SwitchGamePad()
	{
	}
}
[Token(Token = "0x20002E9")]
public class InputEnumerator : MonoBehaviour
{
	[Token(Token = "0x20002EA")]
	public delegate void JoyStickConnectEvent(int index, string nameLowerCase);

	[Token(Token = "0x20002EB")]
	public delegate string[] JoyStickEnumCallback();

	[Token(Token = "0x4000FF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static InputEnumerator _instance;

	[Token(Token = "0x4000FF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private string[] currentControllers;

	[Token(Token = "0x4000FF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float controllerCheckTimer;

	[Token(Token = "0x4000FF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float controllerCheckTimerOG;

	[Token(Token = "0x4000FFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string[] gpsbuffer;

	[Token(Token = "0x4000FFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public JoyStickEnumCallback JoyEnumCB;

	[Token(Token = "0x170003D7")]
	public static InputEnumerator instance
	{
		[Token(Token = "0x60014E9")]
		[Address(RVA = "0x6A7F00", Offset = "0x6A7F00", VA = "0x6A7F00")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000019")]
	public event JoyStickConnectEvent OnJoyStickConnected
	{
		[Token(Token = "0x60014EA")]
		[Address(RVA = "0x6A8014", Offset = "0x6A8014", VA = "0x6A8014")]
		add
		{
		}
		[Token(Token = "0x60014EB")]
		[Address(RVA = "0x6A8120", Offset = "0x6A8120", VA = "0x6A8120")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001A")]
	public event JoyStickConnectEvent OnJoyStickDisconnected
	{
		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x6A822C", Offset = "0x6A822C", VA = "0x6A822C")]
		add
		{
		}
		[Token(Token = "0x60014ED")]
		[Address(RVA = "0x6A8338", Offset = "0x6A8338", VA = "0x6A8338")]
		remove
		{
		}
	}

	[Token(Token = "0x60014E8")]
	[Address(RVA = "0x6A74B8", Offset = "0x6A74B8", VA = "0x6A74B8")]
	public InputEnumerator()
	{
	}

	[Token(Token = "0x60014EE")]
	[Address(RVA = "0x6A8444", Offset = "0x6A8444", VA = "0x6A8444")]
	private void Update()
	{
	}

	[Token(Token = "0x60014EF")]
	[Address(RVA = "0x6A8758", Offset = "0x6A8758", VA = "0x6A8758")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014F0")]
	[Address(RVA = "0x6A8490", Offset = "0x6A8490", VA = "0x6A8490")]
	private void RefreshController()
	{
	}

	[Token(Token = "0x60014F1")]
	[Address(RVA = "0x6A875C", Offset = "0x6A875C", VA = "0x6A875C")]
	private string[] GetJoystickNames()
	{
		return null;
	}
}
[Token(Token = "0x20002EC")]
public enum NWInputIdentifier
{
	[Token(Token = "0x4000FFD")]
	None = 32,
	[Token(Token = "0x4000FFE")]
	Action1 = 0,
	[Token(Token = "0x4000FFF")]
	Action2 = 1,
	[Token(Token = "0x4001000")]
	Action3 = 2,
	[Token(Token = "0x4001001")]
	Action4 = 3,
	[Token(Token = "0x4001002")]
	Start = 4,
	[Token(Token = "0x4001003")]
	Menu = 5,
	[Token(Token = "0x4001004")]
	LeftStickButton = 6,
	[Token(Token = "0x4001005")]
	RightStickButton = 7,
	[Token(Token = "0x4001006")]
	DPadLeft = 8,
	[Token(Token = "0x4001007")]
	DPadRight = 9,
	[Token(Token = "0x4001008")]
	DPadDown = 10,
	[Token(Token = "0x4001009")]
	DPadUp = 11,
	[Token(Token = "0x400100A")]
	LeftBumper = 12,
	[Token(Token = "0x400100B")]
	RightBumper = 13,
	[Token(Token = "0x400100C")]
	LeftTrigger = 14,
	[Token(Token = "0x400100D")]
	RightTrigger = 15,
	[Token(Token = "0x400100E")]
	LeftStickLeft = 16,
	[Token(Token = "0x400100F")]
	LeftStickRight = 17,
	[Token(Token = "0x4001010")]
	LeftStickDown = 18,
	[Token(Token = "0x4001011")]
	LeftStickUp = 19,
	[Token(Token = "0x4001012")]
	RightStickLeft = 20,
	[Token(Token = "0x4001013")]
	RightStickRight = 21,
	[Token(Token = "0x4001014")]
	RightStickDown = 22,
	[Token(Token = "0x4001015")]
	RightStickUp = 23,
	[Token(Token = "0x4001016")]
	Command = 24,
	[Token(Token = "0x4001017")]
	Back = 25,
	[Token(Token = "0x4001018")]
	Select = 26,
	[Token(Token = "0x4001019")]
	System = 27,
	[Token(Token = "0x400101A")]
	Options = 28,
	[Token(Token = "0x400101B")]
	Pause = 29,
	[Token(Token = "0x400101C")]
	Share = 30,
	[Token(Token = "0x400101D")]
	Home = 31,
	[Token(Token = "0x400101E")]
	View = 32,
	[Token(Token = "0x400101F")]
	TiltX = 33,
	[Token(Token = "0x4001020")]
	TiltY = 34,
	[Token(Token = "0x4001021")]
	TiltZ = 35,
	[Token(Token = "0x4001022")]
	ScrollWheel = 36,
	[Token(Token = "0x4001023")]
	TouchPadTap = 37,
	[Token(Token = "0x4001024")]
	TouchPadXAxis = 38,
	[Token(Token = "0x4001025")]
	TouchPadYAxis = 39,
	[Token(Token = "0x4001026")]
	Analog0 = 40,
	[Token(Token = "0x4001027")]
	Analog1 = 41,
	[Token(Token = "0x4001028")]
	Analog2 = 42,
	[Token(Token = "0x4001029")]
	Analog3 = 43,
	[Token(Token = "0x400102A")]
	Analog4 = 44,
	[Token(Token = "0x400102B")]
	Analog5 = 45,
	[Token(Token = "0x400102C")]
	Analog6 = 46,
	[Token(Token = "0x400102D")]
	Analog7 = 47,
	[Token(Token = "0x400102E")]
	Analog8 = 48,
	[Token(Token = "0x400102F")]
	Analog9 = 49,
	[Token(Token = "0x4001030")]
	Analog10 = 50,
	[Token(Token = "0x4001031")]
	Analog11 = 51,
	[Token(Token = "0x4001032")]
	Analog12 = 52,
	[Token(Token = "0x4001033")]
	Analog13 = 53,
	[Token(Token = "0x4001034")]
	Analog14 = 54,
	[Token(Token = "0x4001035")]
	Analog15 = 55,
	[Token(Token = "0x4001036")]
	Analog16 = 56,
	[Token(Token = "0x4001037")]
	Analog17 = 57,
	[Token(Token = "0x4001038")]
	Analog18 = 58,
	[Token(Token = "0x4001039")]
	Analog19 = 59,
	[Token(Token = "0x400103A")]
	Button0 = 60,
	[Token(Token = "0x400103B")]
	Button1 = 61,
	[Token(Token = "0x400103C")]
	Button2 = 62,
	[Token(Token = "0x400103D")]
	Button3 = 63,
	[Token(Token = "0x400103E")]
	Button4 = 64,
	[Token(Token = "0x400103F")]
	Button5 = 65,
	[Token(Token = "0x4001040")]
	Button6 = 66,
	[Token(Token = "0x4001041")]
	Button7 = 67,
	[Token(Token = "0x4001042")]
	Button8 = 68,
	[Token(Token = "0x4001043")]
	Button9 = 69,
	[Token(Token = "0x4001044")]
	Button10 = 70,
	[Token(Token = "0x4001045")]
	Button11 = 71,
	[Token(Token = "0x4001046")]
	Button12 = 72,
	[Token(Token = "0x4001047")]
	Button13 = 73,
	[Token(Token = "0x4001048")]
	Button14 = 74,
	[Token(Token = "0x4001049")]
	Button15 = 75,
	[Token(Token = "0x400104A")]
	Button16 = 76,
	[Token(Token = "0x400104B")]
	Button17 = 77,
	[Token(Token = "0x400104C")]
	Button18 = 78,
	[Token(Token = "0x400104D")]
	Button19 = 79,
	[Token(Token = "0x400104E")]
	Count = 80
}
[Token(Token = "0x20002ED")]
public class NWGamePadButton
{
	[Token(Token = "0x400104F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool IsPressed;

	[Token(Token = "0x4001050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	public bool IsTriggered;

	[Token(Token = "0x4001051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
	public bool IsReleased;

	[Token(Token = "0x4001052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int butID;

	[Token(Token = "0x60014FA")]
	[Address(RVA = "0x44ED7C", Offset = "0x44ED7C", VA = "0x44ED7C")]
	public NWGamePadButton()
	{
	}

	[Token(Token = "0x60014FB")]
	[Address(RVA = "0x44ED84", Offset = "0x44ED84", VA = "0x44ED84")]
	public void Reset()
	{
	}
}
[Token(Token = "0x20002EE")]
public class NWMouseProxy
{
	[Token(Token = "0x4001053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	internal Vector3 lastMousePos;

	[Token(Token = "0x4001054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector2 moveDelta;

	[Token(Token = "0x4001055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int wheelDelta;

	[Token(Token = "0x4001056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NWGamePadButton[] button;

	[Token(Token = "0x170003D8")]
	public NWGamePadButton Left
	{
		[Token(Token = "0x60014FD")]
		[Address(RVA = "0x45554C", Offset = "0x45554C", VA = "0x45554C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003D9")]
	public NWGamePadButton Right
	{
		[Token(Token = "0x60014FE")]
		[Address(RVA = "0x45558C", Offset = "0x45558C", VA = "0x45558C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60014FC")]
	[Address(RVA = "0x455348", Offset = "0x455348", VA = "0x455348")]
	public NWMouseProxy()
	{
	}

	[Token(Token = "0x60014FF")]
	[Address(RVA = "0x4555CC", Offset = "0x4555CC", VA = "0x4555CC")]
	internal void Update()
	{
	}
}
[Token(Token = "0x20002EF")]
public class NWGamePadProxy
{
	[Token(Token = "0x4001057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int[] dynamicMap;

	[Token(Token = "0x4001058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected string gamePadName;

	[Token(Token = "0x4001059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected int gpIndex;

	[Token(Token = "0x400105A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool active;

	[Token(Token = "0x400105B")]
	public const int BUTTONCOUNT = 33;

	[Token(Token = "0x400105C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 leftStick;

	[Token(Token = "0x400105D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 rightStick;

	[Token(Token = "0x400105E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 lastLeftStick;

	[Token(Token = "0x400105F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2 lastRightStick;

	[Token(Token = "0x4001060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector2 touchpad;

	[Token(Token = "0x4001061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public NWGamePadButton MenuAccept;

	[Token(Token = "0x4001062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public NWGamePadButton[] button;

	[Token(Token = "0x4001063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float digitalThreshold;

	[Token(Token = "0x4001064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool InterpretLeftAnalogAlsoDigital;

	[Token(Token = "0x4001065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool anyKeyPressed;

	[Token(Token = "0x4001066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	public bool anyKeyPressedSingle;

	[Token(Token = "0x4001067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
	public bool anyKeyTriggered;

	[Token(Token = "0x4001068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool anyKeyReleased;

	[Token(Token = "0x4001069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float deadZone;

	[Token(Token = "0x400106A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float sqrDeadZone;

	[Token(Token = "0x400106B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float deadZoneNormalize;

	[Token(Token = "0x170003DA")]
	public virtual bool IsRealDevice
	{
		[Token(Token = "0x6001501")]
		[Address(RVA = "0x44F02C", Offset = "0x44F02C", VA = "0x44F02C", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003DB")]
	public virtual string GamePadName
	{
		[Token(Token = "0x6001502")]
		[Address(RVA = "0x44F034", Offset = "0x44F034", VA = "0x44F034", Slot = "5")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001503")]
		[Address(RVA = "0x44F03C", Offset = "0x44F03C", VA = "0x44F03C", Slot = "6")]
		set
		{
		}
	}

	[Token(Token = "0x170003DC")]
	public virtual int GamePadIndex
	{
		[Token(Token = "0x6001504")]
		[Address(RVA = "0x44F044", Offset = "0x44F044", VA = "0x44F044", Slot = "7")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001505")]
		[Address(RVA = "0x44F04C", Offset = "0x44F04C", VA = "0x44F04C", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x170003DD")]
	public NWGamePadButton Start
	{
		[Token(Token = "0x6001506")]
		[Address(RVA = "0x44F054", Offset = "0x44F054", VA = "0x44F054")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003DE")]
	public NWGamePadButton Menu
	{
		[Token(Token = "0x6001507")]
		[Address(RVA = "0x44F094", Offset = "0x44F094", VA = "0x44F094")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003DF")]
	public NWGamePadButton LeftStickButton
	{
		[Token(Token = "0x6001508")]
		[Address(RVA = "0x44F0D4", Offset = "0x44F0D4", VA = "0x44F0D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E0")]
	public NWGamePadButton RightStickButton
	{
		[Token(Token = "0x6001509")]
		[Address(RVA = "0x44F114", Offset = "0x44F114", VA = "0x44F114")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E1")]
	public NWGamePadButton DPadLeft
	{
		[Token(Token = "0x600150A")]
		[Address(RVA = "0x44F154", Offset = "0x44F154", VA = "0x44F154")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E2")]
	public NWGamePadButton DPadRight
	{
		[Token(Token = "0x600150B")]
		[Address(RVA = "0x44F194", Offset = "0x44F194", VA = "0x44F194")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E3")]
	public NWGamePadButton DPadDown
	{
		[Token(Token = "0x600150C")]
		[Address(RVA = "0x44F1D4", Offset = "0x44F1D4", VA = "0x44F1D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E4")]
	public NWGamePadButton DPadUp
	{
		[Token(Token = "0x600150D")]
		[Address(RVA = "0x44F214", Offset = "0x44F214", VA = "0x44F214")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E5")]
	public NWGamePadButton LeftBumper
	{
		[Token(Token = "0x600150E")]
		[Address(RVA = "0x44F254", Offset = "0x44F254", VA = "0x44F254")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E6")]
	public NWGamePadButton RightBumper
	{
		[Token(Token = "0x600150F")]
		[Address(RVA = "0x44F294", Offset = "0x44F294", VA = "0x44F294")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E7")]
	public NWGamePadButton LeftTrigger
	{
		[Token(Token = "0x6001510")]
		[Address(RVA = "0x44F2D4", Offset = "0x44F2D4", VA = "0x44F2D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E8")]
	public NWGamePadButton RightTrigger
	{
		[Token(Token = "0x6001511")]
		[Address(RVA = "0x44F314", Offset = "0x44F314", VA = "0x44F314")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E9")]
	public NWGamePadButton LeftAnalogLeft
	{
		[Token(Token = "0x6001512")]
		[Address(RVA = "0x44F354", Offset = "0x44F354", VA = "0x44F354")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003EA")]
	public NWGamePadButton LeftAnalogRight
	{
		[Token(Token = "0x6001513")]
		[Address(RVA = "0x44F394", Offset = "0x44F394", VA = "0x44F394")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003EB")]
	public NWGamePadButton LeftAnalogDown
	{
		[Token(Token = "0x6001514")]
		[Address(RVA = "0x44F3D4", Offset = "0x44F3D4", VA = "0x44F3D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003EC")]
	public NWGamePadButton LeftAnalogUp
	{
		[Token(Token = "0x6001515")]
		[Address(RVA = "0x44F414", Offset = "0x44F414", VA = "0x44F414")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003ED")]
	public NWGamePadButton RightAnalogLeft
	{
		[Token(Token = "0x6001516")]
		[Address(RVA = "0x44F454", Offset = "0x44F454", VA = "0x44F454")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003EE")]
	public NWGamePadButton RightAnalogRight
	{
		[Token(Token = "0x6001517")]
		[Address(RVA = "0x44F494", Offset = "0x44F494", VA = "0x44F494")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003EF")]
	public NWGamePadButton RightAnalogDown
	{
		[Token(Token = "0x6001518")]
		[Address(RVA = "0x44F4D4", Offset = "0x44F4D4", VA = "0x44F4D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F0")]
	public NWGamePadButton RightAnalogUp
	{
		[Token(Token = "0x6001519")]
		[Address(RVA = "0x44F514", Offset = "0x44F514", VA = "0x44F514")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F1")]
	public NWGamePadButton Dynamic0
	{
		[Token(Token = "0x600151A")]
		[Address(RVA = "0x44F554", Offset = "0x44F554", VA = "0x44F554")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F2")]
	public NWGamePadButton Dynamic1
	{
		[Token(Token = "0x600151B")]
		[Address(RVA = "0x44F594", Offset = "0x44F594", VA = "0x44F594")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F3")]
	public NWGamePadButton Dynamic2
	{
		[Token(Token = "0x600151C")]
		[Address(RVA = "0x44F5D4", Offset = "0x44F5D4", VA = "0x44F5D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F4")]
	public NWGamePadButton Dynamic3
	{
		[Token(Token = "0x600151D")]
		[Address(RVA = "0x44F614", Offset = "0x44F614", VA = "0x44F614")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F5")]
	public NWGamePadButton Dynamic4
	{
		[Token(Token = "0x600151E")]
		[Address(RVA = "0x44F654", Offset = "0x44F654", VA = "0x44F654")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F6")]
	public NWGamePadButton Dynamic5
	{
		[Token(Token = "0x600151F")]
		[Address(RVA = "0x44F694", Offset = "0x44F694", VA = "0x44F694")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F7")]
	public NWGamePadButton Dynamic6
	{
		[Token(Token = "0x6001520")]
		[Address(RVA = "0x44F6D4", Offset = "0x44F6D4", VA = "0x44F6D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F8")]
	public NWGamePadButton Dynamic7
	{
		[Token(Token = "0x6001521")]
		[Address(RVA = "0x44F714", Offset = "0x44F714", VA = "0x44F714")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F9")]
	public NWGamePadButton None
	{
		[Token(Token = "0x6001522")]
		[Address(RVA = "0x44F754", Offset = "0x44F754", VA = "0x44F754")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001500")]
	[Address(RVA = "0x44ED94", Offset = "0x44ED94", VA = "0x44ED94")]
	public NWGamePadProxy()
	{
	}

	[Token(Token = "0x6001523")]
	[Address(RVA = "0x44F794", Offset = "0x44F794", VA = "0x44F794")]
	public static Vector2 GetProcessedStickInput(Vector2 raw)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6001524")]
	[Address(RVA = "0x44F984", Offset = "0x44F984", VA = "0x44F984")]
	protected void ProcessInputToDigital()
	{
	}

	[Token(Token = "0x6001525")]
	[Address(RVA = "0x450A04", Offset = "0x450A04", VA = "0x450A04", Slot = "9")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x6001526")]
	[Address(RVA = "0x450A08", Offset = "0x450A08", VA = "0x450A08", Slot = "10")]
	public virtual void Reset()
	{
	}
}
[Token(Token = "0x20002F0")]
public class InputSimplifier : MonoBehaviour
{
	[Token(Token = "0x20002F1")]
	public delegate void InputChangeDelegate();

	[Token(Token = "0x20002F2")]
	public delegate void GamepadConnectEvent(int index, NWGamePadProxy gp);

	[Token(Token = "0x20002F3")]
	public enum InputMethod
	{
		[Token(Token = "0x4001081")]
		None,
		[Token(Token = "0x4001082")]
		Desktop,
		[Token(Token = "0x4001083")]
		Touch,
		[Token(Token = "0x4001084")]
		Gamepad
	}

	[Token(Token = "0x20002F4")]
	public delegate NWGamePadProxy GGPIFCallback(int index, string nameLowerCase);

	[Token(Token = "0x400106F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool simulateTouches;

	[Token(Token = "0x4001070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool lockCursor;

	[Token(Token = "0x4001071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool guiMode;

	[Token(Token = "0x4001072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool debugStats;

	[Token(Token = "0x4001073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool pause;

	[Token(Token = "0x4001074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NWMouseProxy mouse;

	[Token(Token = "0x4001075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Dictionary<string, NWGamePadProxy> input2controllerMapping;

	[Token(Token = "0x4001076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public NWGamePadProxy[] playerSlots;

	[Token(Token = "0x4001077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public List<NWGamePadProxy>[] assignedController;

	[Token(Token = "0x4001078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<NWGamePadProxy> unassignedController;

	[Token(Token = "0x4001079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public NWGamePadProxy allInput;

	[Token(Token = "0x400107A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public NWGamePadProxy keyboard;

	[Token(Token = "0x400107B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 screenDim;

	[Token(Token = "0x400107C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float deadZone;

	[Token(Token = "0x400107D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public InputMethod ActiveInput;

	[Token(Token = "0x400107E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static InputSimplifier _instance;

	[Token(Token = "0x400107F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GGPIFCallback GamePadInstaceCB;

	[Token(Token = "0x170003FA")]
	public bool Pause
	{
		[Token(Token = "0x600152F")]
		[Address(RVA = "0x6A9490", Offset = "0x6A9490", VA = "0x6A9490")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001530")]
		[Address(RVA = "0x6A9498", Offset = "0x6A9498", VA = "0x6A9498")]
		set
		{
		}
	}

	[Token(Token = "0x170003FB")]
	public static InputSimplifier instance
	{
		[Token(Token = "0x6001531")]
		[Address(RVA = "0x6A73A4", Offset = "0x6A73A4", VA = "0x6A73A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1400001B")]
	public event InputChangeDelegate OnInputChanged
	{
		[Token(Token = "0x6001529")]
		[Address(RVA = "0x6A8E48", Offset = "0x6A8E48", VA = "0x6A8E48")]
		add
		{
		}
		[Token(Token = "0x600152A")]
		[Address(RVA = "0x6A8F54", Offset = "0x6A8F54", VA = "0x6A8F54")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001C")]
	public event GamepadConnectEvent OnGamepadConnected
	{
		[Token(Token = "0x600152B")]
		[Address(RVA = "0x6A9060", Offset = "0x6A9060", VA = "0x6A9060")]
		add
		{
		}
		[Token(Token = "0x600152C")]
		[Address(RVA = "0x6A916C", Offset = "0x6A916C", VA = "0x6A916C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001D")]
	public event GamepadConnectEvent OnGamepadDisconnected
	{
		[Token(Token = "0x600152D")]
		[Address(RVA = "0x6A9278", Offset = "0x6A9278", VA = "0x6A9278")]
		add
		{
		}
		[Token(Token = "0x600152E")]
		[Address(RVA = "0x6A9384", Offset = "0x6A9384", VA = "0x6A9384")]
		remove
		{
		}
	}

	[Token(Token = "0x6001528")]
	[Address(RVA = "0x6A8CDC", Offset = "0x6A8CDC", VA = "0x6A8CDC")]
	public InputSimplifier()
	{
	}

	[Token(Token = "0x6001532")]
	[Address(RVA = "0x6A97A0", Offset = "0x6A97A0", VA = "0x6A97A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001533")]
	[Address(RVA = "0x6A9A74", Offset = "0x6A9A74", VA = "0x6A9A74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001534")]
	[Address(RVA = "0x6A9B80", Offset = "0x6A9B80", VA = "0x6A9B80")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001535")]
	[Address(RVA = "0x6A9C9C", Offset = "0x6A9C9C", VA = "0x6A9C9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001536")]
	[Address(RVA = "0x6AB0A0", Offset = "0x6AB0A0", VA = "0x6AB0A0")]
	private NWGamePadProxy GetGamePadInstanceFor(int index, string nameLowerCase)
	{
		return null;
	}

	[Token(Token = "0x6001537")]
	[Address(RVA = "0x6ABA28", Offset = "0x6ABA28", VA = "0x6ABA28")]
	private void Instance_OnJoyStickConnected(int index, string nameLowerCase)
	{
	}

	[Token(Token = "0x6001538")]
	[Address(RVA = "0x6ABFD8", Offset = "0x6ABFD8", VA = "0x6ABFD8")]
	private void Instance_OnJoyStickDisconnected(int index, string nameLowerCase)
	{
	}

	[Token(Token = "0x6001539")]
	[Address(RVA = "0x6AC850", Offset = "0x6AC850", VA = "0x6AC850")]
	public void AssignGamePadToPlayerSlot(NWGamePadProxy gp, int playerSlot)
	{
	}

	[Token(Token = "0x600153A")]
	[Address(RVA = "0x6AA8C4", Offset = "0x6AA8C4", VA = "0x6AA8C4")]
	private void SetActiveInput(InputMethod newInput)
	{
	}

	[Token(Token = "0x600153B")]
	[Address(RVA = "0x6AAB2C", Offset = "0x6AAB2C", VA = "0x6AAB2C")]
	private void UpdateAllInputWith(NWGamePadProxy gp)
	{
	}
}
[Token(Token = "0x20002F5")]
public class Sky : MonoBehaviour
{
	[Token(Token = "0x4001085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public double time;

	[Token(Token = "0x4001086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float timeMultiplier;

	[Token(Token = "0x4001087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private double mHorizonTime;

	[Token(Token = "0x4001088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float clock;

	[Token(Token = "0x4001089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool initDefaultGradients;

	[Token(Token = "0x400108A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 windDir;

	[Token(Token = "0x400108B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject clouds;

	[Token(Token = "0x400108C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector2 cloudDim;

	[Token(Token = "0x400108D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 cloudMove;

	[Token(Token = "0x400108E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject Sun;

	[Token(Token = "0x400108F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public GameObject Moon;

	[Token(Token = "0x4001090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject Planet;

	[Token(Token = "0x4001091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public GameObject Stars;

	[Token(Token = "0x4001092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject GradientSphere;

	[Token(Token = "0x4001093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public GameObject AuroraLayer1;

	[Token(Token = "0x4001094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject AuroraLayer2;

	[Token(Token = "0x4001095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public GameObject AuroraLayer3;

	[Token(Token = "0x4001096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Light LightSource;

	[Token(Token = "0x4001097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public GameObject LightShaftObject;

	[Token(Token = "0x4001098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool lightShadowsEnabled;

	[Token(Token = "0x4001099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool useAtmosphereForAmbient;

	[Token(Token = "0x400109A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float lightIntensity;

	[Token(Token = "0x400109B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float terrainIntensity;

	[Token(Token = "0x400109C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float lightDistance;

	[Token(Token = "0x400109D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float summerTimeRatio;

	[Token(Token = "0x400109E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float hemisphereFactor;

	[Token(Token = "0x400109F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float hdrIntensityClamp;

	[Token(Token = "0x40010A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Gradient mUpperSkyCurve;

	[Token(Token = "0x40010A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Gradient mLowerSkyCurve;

	[Token(Token = "0x40010A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public Gradient mAtmosphereCurve;

	[Token(Token = "0x40010A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Gradient mLightCurve;

	[Token(Token = "0x40010A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public Color ambientColor;

	[Token(Token = "0x40010A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public Color lightColor;

	[Token(Token = "0x40010A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public Color stars;

	[Token(Token = "0x40010A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Material skyGradientMaterial;

	[Token(Token = "0x40010A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Shader gradientTextureShader;

	[Token(Token = "0x40010A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Material starMaterial;

	[Token(Token = "0x40010AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Material moonMaterial;

	[Token(Token = "0x40010AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Material planetMaterial;

	[Token(Token = "0x40010AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Material planetRingMaterial;

	[Token(Token = "0x40010AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private Material auroraMaterial;

	[Token(Token = "0x40010AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private int starColorID;

	[Token(Token = "0x40010AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private int moonColorID;

	[Token(Token = "0x40010B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int planetRimColorID;

	[Token(Token = "0x40010B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int planetRimStrengthID;

	[Token(Token = "0x40010B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int auroraColorID;

	[Token(Token = "0x40010B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Texture2D skyGradientTexture;

	[Token(Token = "0x40010B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	internal Texture2D skyGradientTextureWater;

	[Token(Token = "0x40010B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private Curve1D mStarsCurve;

	[Token(Token = "0x40010B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Curve1D mSunCurve;

	[Token(Token = "0x40010B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public AnimationCurve mAuroraCurve;

	[Token(Token = "0x40010B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public float brightnessFactor;

	[Token(Token = "0x40010B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private Color rimColor;

	[Token(Token = "0x40010BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public Color auroraDefaultColor;

	[Token(Token = "0x40010BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public float rotationPrecision;

	[Token(Token = "0x40010BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public int sunUpdateIntervall;

	[Token(Token = "0x170003FC")]
	public double HorizonTime
	{
		[Token(Token = "0x6001549")]
		[Address(RVA = "0x46FA14", Offset = "0x46FA14", VA = "0x46FA14")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x170003FD")]
	public float Time24
	{
		[Token(Token = "0x600154A")]
		[Address(RVA = "0x46FA20", Offset = "0x46FA20", VA = "0x46FA20")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001548")]
	[Address(RVA = "0x46F830", Offset = "0x46F830", VA = "0x46F830")]
	public Sky()
	{
	}

	[Token(Token = "0x600154B")]
	[Address(RVA = "0x46FA28", Offset = "0x46FA28", VA = "0x46FA28")]
	private void Start()
	{
	}

	[Token(Token = "0x600154C")]
	[Address(RVA = "0x4712FC", Offset = "0x4712FC", VA = "0x4712FC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600154D")]
	[Address(RVA = "0x472790", Offset = "0x472790", VA = "0x472790")]
	public void Resize(float visRange)
	{
	}

	[Token(Token = "0x600154E")]
	[Address(RVA = "0x471300", Offset = "0x471300", VA = "0x471300")]
	public void InternalUpdate()
	{
	}
}
[Token(Token = "0x20002F6")]
[ExecuteInEditMode]
public class WaterSimple : MonoBehaviour
{
	[Token(Token = "0x40010BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Sky sky;

	[Token(Token = "0x40010BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Materials mats;

	[Token(Token = "0x40010BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Material mat;

	[Token(Token = "0x40010C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23B910", Offset = "0x23B910")]
	private static Predicate<Material> <>f__am$cache0;

	[Token(Token = "0x600154F")]
	[Address(RVA = "0x8EB184", Offset = "0x8EB184", VA = "0x8EB184")]
	public WaterSimple()
	{
	}

	[Token(Token = "0x6001550")]
	[Address(RVA = "0x8EB18C", Offset = "0x8EB18C", VA = "0x8EB18C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001551")]
	[Address(RVA = "0x8EBA38", Offset = "0x8EBA38", VA = "0x8EBA38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x23E704", Offset = "0x23E704")]
	private static bool <Update>m__0(Material a)
	{
		return default(bool);
	}
}
[Token(Token = "0x20002F7")]
public class CustomInputCamera : MonoBehaviour
{
	[Token(Token = "0x40010C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int frameCount;

	[Token(Token = "0x40010C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int gamePadIndex;

	[Token(Token = "0x6001552")]
	[Address(RVA = "0x49B4BC", Offset = "0x49B4BC", VA = "0x49B4BC")]
	public CustomInputCamera()
	{
	}

	[Token(Token = "0x6001553")]
	[Address(RVA = "0x49B4CC", Offset = "0x49B4CC", VA = "0x49B4CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001554")]
	[Address(RVA = "0x49B598", Offset = "0x49B598", VA = "0x49B598")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001555")]
	[Address(RVA = "0x49B4D0", Offset = "0x49B4D0", VA = "0x49B4D0")]
	public void SetCustomInput()
	{
	}

	[Token(Token = "0x6001556")]
	[Address(RVA = "0x49B628", Offset = "0x49B628", VA = "0x49B628")]
	private void Update()
	{
	}

	[Token(Token = "0x6001557")]
	[Address(RVA = "0x49B6E8", Offset = "0x49B6E8", VA = "0x49B6E8")]
	private GameObject GetSelectedObject()
	{
		return null;
	}

	[Token(Token = "0x6001558")]
	[Address(RVA = "0x49BA28", Offset = "0x49BA28", VA = "0x49BA28")]
	public void CustomInput()
	{
	}
}
[Token(Token = "0x20002F8")]
public class ClickedEventArgs : EventArgs
{
	[Token(Token = "0x40010C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private NWInputIdentifier mButton;

	[Token(Token = "0x40010C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Vector3 mPos;

	[Token(Token = "0x170003FE")]
	public NWInputIdentifier Button
	{
		[Token(Token = "0x600155A")]
		[Address(RVA = "0x558FA4", Offset = "0x558FA4", VA = "0x558FA4")]
		get
		{
			return default(NWInputIdentifier);
		}
	}

	[Token(Token = "0x170003FF")]
	public Vector3 Pos
	{
		[Token(Token = "0x600155B")]
		[Address(RVA = "0x558FAC", Offset = "0x558FAC", VA = "0x558FAC")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6001559")]
	[Address(RVA = "0x558F00", Offset = "0x558F00", VA = "0x558F00")]
	public ClickedEventArgs(NWInputIdentifier but, Vector3 mousePos)
	{
	}
}
[Token(Token = "0x20002F9")]
public class TouchTrackControl
{
	[Token(Token = "0x600155C")]
	[Address(RVA = "0x591C14", Offset = "0x591C14", VA = "0x591C14")]
	public TouchTrackControl()
	{
	}
}
[Token(Token = "0x20002FA")]
public class NWTouch
{
	[Token(Token = "0x40010C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Vector3 position;

	[Token(Token = "0x600155D")]
	[Address(RVA = "0x456644", Offset = "0x456644", VA = "0x456644")]
	public NWTouch()
	{
	}
}
[Token(Token = "0x20002FB")]
public class InputActionHandler : MonoBehaviour
{
	[Token(Token = "0x40010C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool activated;

	[Token(Token = "0x40010C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int controllerIndex;

	[Token(Token = "0x40010C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Texture icon;

	[Token(Token = "0x40010C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 txStart;

	[Token(Token = "0x40010CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 txSize;

	[Token(Token = "0x40010CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float iconSize;

	[Token(Token = "0x40010CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float cancelThreshold;

	[Token(Token = "0x40010CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float secondaryModeThresholdTime;

	[Token(Token = "0x40010CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float secondaryModeRepeatTime;

	[Token(Token = "0x40010CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public NWInputIdentifier primaryAction;

	[Token(Token = "0x40010D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public NWInputIdentifier secondaryAction;

	[Token(Token = "0x40010D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public NWInputIdentifier tertiaryAction;

	[Token(Token = "0x40010D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public NWInputIdentifier Action4;

	[Token(Token = "0x40010D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public NWInputIdentifier abortAction;

	[Token(Token = "0x40010D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public TouchTrackControl lookStick;

	[Token(Token = "0x40010D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private NWTouch touch;

	[Token(Token = "0x40010D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private string touchState;

	[Token(Token = "0x40010D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float accumulatedMove;

	[Token(Token = "0x40010DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool secondaryMode;

	[Token(Token = "0x40010DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	private bool canceled;

	[Token(Token = "0x40010DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float pressDuration1;

	[Token(Token = "0x40010DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float pressDuration2;

	[Token(Token = "0x40010DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool secondaryMode1;

	[Token(Token = "0x40010DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool secondaryMode2;

	[Token(Token = "0x40010E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float touchDuration;

	[Token(Token = "0x40010E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rect texRect;

	[Token(Token = "0x1400001E")]
	public event EventHandler<ClickedEventArgs> Pressed
	{
		[Token(Token = "0x600155F")]
		[Address(RVA = "0x6A6118", Offset = "0x6A6118", VA = "0x6A6118")]
		add
		{
		}
		[Token(Token = "0x6001560")]
		[Address(RVA = "0x6A6224", Offset = "0x6A6224", VA = "0x6A6224")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001F")]
	public event EventHandler<ClickedEventArgs> Clicked
	{
		[Token(Token = "0x6001561")]
		[Address(RVA = "0x6A6330", Offset = "0x6A6330", VA = "0x6A6330")]
		add
		{
		}
		[Token(Token = "0x6001562")]
		[Address(RVA = "0x6A643C", Offset = "0x6A643C", VA = "0x6A643C")]
		remove
		{
		}
	}

	[Token(Token = "0x600155E")]
	[Address(RVA = "0x6A5FC8", Offset = "0x6A5FC8", VA = "0x6A5FC8")]
	public InputActionHandler()
	{
	}

	[Token(Token = "0x6001563")]
	[Address(RVA = "0x6A6548", Offset = "0x6A6548", VA = "0x6A6548")]
	private void Start()
	{
	}

	[Token(Token = "0x6001564")]
	[Address(RVA = "0x6A659C", Offset = "0x6A659C", VA = "0x6A659C")]
	private void Update()
	{
	}
}
[Token(Token = "0x20002FC")]
public class NGUIPanelLogic : MonoBehaviour
{
	[Token(Token = "0x20002FD")]
	public class UITransformYComparer : IComparer<Transform>
	{
		[Token(Token = "0x600156D")]
		[Address(RVA = "0x5BF0FC", Offset = "0x5BF0FC", VA = "0x5BF0FC")]
		public UITransformYComparer()
		{
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0x5BF840", Offset = "0x5BF840", VA = "0x5BF840", Slot = "4")]
		public int Compare(Transform x, Transform y)
		{
			return default(int);
		}
	}

	[Token(Token = "0x20002FE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x236EB4", Offset = "0x236EB4")]
	private sealed class <RemoveAndRelayout>c__AnonStorey0
	{
		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal UIWidgetContainer wToRemove;

		[Token(Token = "0x600156F")]
		[Address(RVA = "0x5BF3F4", Offset = "0x5BF3F4", VA = "0x5BF3F4")]
		public <RemoveAndRelayout>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0x5BF790", Offset = "0x5BF790", VA = "0x5BF790")]
		internal bool <>m__0(Transform a)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40010E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected List<Transform> widgetsOrdered;

	[Token(Token = "0x6001565")]
	[Address(RVA = "0x5BE9F4", Offset = "0x5BE9F4", VA = "0x5BE9F4")]
	public NGUIPanelLogic()
	{
	}

	[Token(Token = "0x6001566")]
	[Address(RVA = "0x5BEA80", Offset = "0x5BEA80", VA = "0x5BEA80")]
	public UIRoot GetUIRoot()
	{
		return null;
	}

	[Token(Token = "0x6001567")]
	[Address(RVA = "0x5BEBEC", Offset = "0x5BEBEC", VA = "0x5BEBEC")]
	public void BuildWidgetListOrderedByY()
	{
	}

	[Token(Token = "0x6001568")]
	[Address(RVA = "0x5BF104", Offset = "0x5BF104", VA = "0x5BF104")]
	public void RemoveAndRelayout(UIWidgetContainer wToRemove)
	{
	}

	[Token(Token = "0x6001569")]
	[Address(RVA = "0x5BF3FC", Offset = "0x5BF3FC", VA = "0x5BF3FC")]
	public static void MoveAnchors(GameObject src, GameObject dst)
	{
	}

	[Token(Token = "0x600156A")]
	[Address(RVA = "0x5BF574", Offset = "0x5BF574", VA = "0x5BF574")]
	public static void MoveAnchors(GameObject src, Vector2 move)
	{
	}

	[Token(Token = "0x600156B")]
	[Address(RVA = "0x5BF784", Offset = "0x5BF784", VA = "0x5BF784", Slot = "4")]
	public virtual void OnFocusChanged(bool hasFocus, NGUIPanelLogic previousPanel)
	{
	}

	[Token(Token = "0x600156C")]
	[Address(RVA = "0x5BF788", Offset = "0x5BF788", VA = "0x5BF788", Slot = "5")]
	public virtual bool OnBack()
	{
		return default(bool);
	}
}
[Token(Token = "0x20002FF")]
public class NWAudioController : MonoBehaviour
{
	[Token(Token = "0x40010E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<AudioClip> music;

	[Token(Token = "0x40010E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<AudioClip> sounds;

	[Token(Token = "0x40010E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	internal static Dictionary<string, Touple<AudioClip, int>> clipNameMatching;

	[Token(Token = "0x40010E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static AudioSource[] audioSources;

	[Token(Token = "0x40010E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<Transform> listeners;

	[Token(Token = "0x40010E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static float maxDistance;

	[Token(Token = "0x40010EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static NWAudioController instance;

	[Token(Token = "0x40010EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static string lastMusic;

	[Token(Token = "0x40010EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static bool pause;

	[Token(Token = "0x17000400")]
	public static Dictionary<string, Touple<AudioClip, int>> ClipNameMatching
	{
		[Token(Token = "0x6001572")]
		[Address(RVA = "0x6F07F8", Offset = "0x6F07F8", VA = "0x6F07F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000401")]
	public static AudioSource[] AudioSources
	{
		[Token(Token = "0x6001573")]
		[Address(RVA = "0x6F0884", Offset = "0x6F0884", VA = "0x6F0884")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000402")]
	public static List<Transform> Listeners
	{
		[Token(Token = "0x6001574")]
		[Address(RVA = "0x6F0910", Offset = "0x6F0910", VA = "0x6F0910")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001571")]
	[Address(RVA = "0x6F07F0", Offset = "0x6F07F0", VA = "0x6F07F0")]
	public NWAudioController()
	{
	}

	[Token(Token = "0x6001575")]
	[Address(RVA = "0x6F099C", Offset = "0x6F099C", VA = "0x6F099C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001576")]
	[Address(RVA = "0x6F0E5C", Offset = "0x6F0E5C", VA = "0x6F0E5C")]
	public static void SetMusicVolume(float vol)
	{
	}

	[Token(Token = "0x6001577")]
	[Address(RVA = "0x6F0F3C", Offset = "0x6F0F3C", VA = "0x6F0F3C")]
	public static void SetSoundVolume(float vol)
	{
	}

	[Token(Token = "0x6001578")]
	[Address(RVA = "0x6F101C", Offset = "0x6F101C", VA = "0x6F101C")]
	public static void Play(string sound)
	{
	}

	[Token(Token = "0x6001579")]
	[Address(RVA = "0x6F13E4", Offset = "0x6F13E4", VA = "0x6F13E4")]
	public static void PlayMusic(string sound, bool looped)
	{
	}

	[Token(Token = "0x600157A")]
	[Address(RVA = "0x6F14EC", Offset = "0x6F14EC", VA = "0x6F14EC")]
	public static AudioObject PlaySoundAt(string sound, Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x600157B")]
	[Address(RVA = "0x6F19DC", Offset = "0x6F19DC", VA = "0x6F19DC")]
	public static void StopMusic()
	{
	}

	[Token(Token = "0x600157C")]
	[Address(RVA = "0x6F1A58", Offset = "0x6F1A58", VA = "0x6F1A58")]
	public static void StopMusic(bool softOnly)
	{
	}

	[Token(Token = "0x600157D")]
	[Address(RVA = "0x6F1C38", Offset = "0x6F1C38", VA = "0x6F1C38")]
	public static void UnpauseMusic()
	{
	}

	[Token(Token = "0x600157E")]
	[Address(RVA = "0x6F1DF0", Offset = "0x6F1DF0", VA = "0x6F1DF0")]
	public static void PauseMusic()
	{
	}

	[Token(Token = "0x600157F")]
	[Address(RVA = "0x6F1D64", Offset = "0x6F1D64", VA = "0x6F1D64")]
	public static bool IsMusicPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x6001580")]
	[Address(RVA = "0x6F1F50", Offset = "0x6F1F50", VA = "0x6F1F50")]
	public static bool IsPlaying(string music)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000300")]
public class NWCommonUnity
{
	[Token(Token = "0x40010ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int screenMaxWidth;

	[Token(Token = "0x40010EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int screenMaxHeight;

	[Token(Token = "0x40010EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Color kEncodeMul;

	[Token(Token = "0x40010F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static float kEncodeBit;

	[Token(Token = "0x40010F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static Color kDecodeDot;

	[Token(Token = "0x6001582")]
	[Address(RVA = "0x44DF10", Offset = "0x44DF10", VA = "0x44DF10")]
	public NWCommonUnity()
	{
	}

	[Token(Token = "0x6001583")]
	[Address(RVA = "0x44DF18", Offset = "0x44DF18", VA = "0x44DF18")]
	public static Touple<int, int>[] GetResolutions()
	{
		return null;
	}

	[Token(Token = "0x6001584")]
	[Address(RVA = "0x44E284", Offset = "0x44E284", VA = "0x44E284")]
	public static Color Frac(Color col)
	{
		return default(Color);
	}

	[Token(Token = "0x6001585")]
	[Address(RVA = "0x44E378", Offset = "0x44E378", VA = "0x44E378")]
	public static float Dot(Color a, Color b)
	{
		return default(float);
	}

	[Token(Token = "0x6001586")]
	[Address(RVA = "0x44E3BC", Offset = "0x44E3BC", VA = "0x44E3BC")]
	public static Color EncodeFloatRGBA(float v)
	{
		return default(Color);
	}

	[Token(Token = "0x6001587")]
	[Address(RVA = "0x44E534", Offset = "0x44E534", VA = "0x44E534")]
	public static float DecodeFloatRGBA(Color enc)
	{
		return default(float);
	}

	[Token(Token = "0x6001588")]
	[Address(RVA = "0x44E60C", Offset = "0x44E60C", VA = "0x44E60C")]
	public static Vector4 Frac2(Vector4 vector_a)
	{
		return default(Vector4);
	}

	[Token(Token = "0x6001589")]
	[Address(RVA = "0x44E6D4", Offset = "0x44E6D4", VA = "0x44E6D4")]
	public static double Dot2(Vector4 vector_a, Vector4 vector_b)
	{
		return default(double);
	}

	[Token(Token = "0x600158A")]
	[Address(RVA = "0x44E7A8", Offset = "0x44E7A8", VA = "0x44E7A8")]
	public static Vector4 EncodeFloatRGBA2(float v)
	{
		return default(Vector4);
	}

	[Token(Token = "0x600158B")]
	[Address(RVA = "0x44E980", Offset = "0x44E980", VA = "0x44E980")]
	public static float DecodeFloatRGBA2(Vector4 enc)
	{
		return default(float);
	}

	[Token(Token = "0x600158C")]
	[Address(RVA = "0x44EA9C", Offset = "0x44EA9C", VA = "0x44EA9C")]
	public static void SetRenderers(GameObject go, bool visible)
	{
	}

	[Token(Token = "0x600158D")]
	[Address(RVA = "0x44EB8C", Offset = "0x44EB8C", VA = "0x44EB8C")]
	public static void SetRenderersRecursive(GameObject go, bool visible)
	{
	}
}
[Token(Token = "0x2000301")]
public class PlayerComponentInfo : MonoBehaviour
{
	[Token(Token = "0x40010F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int slot;

	[Token(Token = "0x40010F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject playerObject;

	[Token(Token = "0x40010F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Camera playerCam;

	[Token(Token = "0x40010F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera uiCam;

	[Token(Token = "0x40010F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UIRoot playerUIRoot;

	[Token(Token = "0x40010F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform CamParentNonVR;

	[Token(Token = "0x40010F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Transform CamParentVR;

	[Token(Token = "0x40010F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isVRPlayer;

	[Token(Token = "0x600158F")]
	[Address(RVA = "0x462720", Offset = "0x462720", VA = "0x462720")]
	public PlayerComponentInfo()
	{
	}

	[Token(Token = "0x6001590")]
	[Address(RVA = "0x462728", Offset = "0x462728", VA = "0x462728")]
	private void Start()
	{
	}

	[Token(Token = "0x6001591")]
	[Address(RVA = "0x46272C", Offset = "0x46272C", VA = "0x46272C")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000302")]
public class PlayerModelMotor : MonoBehaviour
{
	[Token(Token = "0x2000303")]
	public enum CharacterState
	{
		[Token(Token = "0x4001113")]
		Undefined,
		[Token(Token = "0x4001114")]
		Spectator,
		[Token(Token = "0x4001115")]
		Active,
		[Token(Token = "0x4001116")]
		Death
	}

	[Token(Token = "0x2000304")]
	public delegate void FireDelegate();

	[Token(Token = "0x40010FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool hasControl;

	[Token(Token = "0x40010FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public bool activated;

	[Token(Token = "0x40010FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float speed;

	[Token(Token = "0x40010FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool flyMode;

	[Token(Token = "0x40010FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x40010FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private CharacterController charController;

	[Token(Token = "0x4001100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 verticalSpeed;

	[Token(Token = "0x4001101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _yaw;

	[Token(Token = "0x4001102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _pitch;

	[Token(Token = "0x4001103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool vrMode;

	[Token(Token = "0x4001104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform mainTransform;

	[Token(Token = "0x4001105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Transform headTransform;

	[Token(Token = "0x4001106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform bodyTransform;

	[Token(Token = "0x4001107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float MOUSE_SENSITIVITY;

	[Token(Token = "0x4001108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 CamAttachOffset;

	[Token(Token = "0x4001109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 CamAttachRotation;

	[Token(Token = "0x400110A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CharacterState currentState;

	[Token(Token = "0x400110B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private CharacterState oldState;

	[Token(Token = "0x400110C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private SkinnedMeshRenderer[] rendererComponents;

	[Token(Token = "0x400110F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private string touchState;

	[Token(Token = "0x4001110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isGrounded;

	[Token(Token = "0x4001111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private CollisionFlags cf;

	[Token(Token = "0x17000403")]
	public CharacterState CurrentState
	{
		[Token(Token = "0x6001593")]
		[Address(RVA = "0x4628B8", Offset = "0x4628B8", VA = "0x4628B8")]
		get
		{
			return default(CharacterState);
		}
		[Token(Token = "0x6001594")]
		[Address(RVA = "0x4628C0", Offset = "0x4628C0", VA = "0x4628C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000404")]
	public bool IsGrounded
	{
		[Token(Token = "0x600159E")]
		[Address(RVA = "0x463210", Offset = "0x463210", VA = "0x463210")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000020")]
	public event FireDelegate FirePressed
	{
		[Token(Token = "0x6001595")]
		[Address(RVA = "0x462AB4", Offset = "0x462AB4", VA = "0x462AB4")]
		add
		{
		}
		[Token(Token = "0x6001596")]
		[Address(RVA = "0x462BC0", Offset = "0x462BC0", VA = "0x462BC0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000021")]
	public event FireDelegate FireReleased
	{
		[Token(Token = "0x6001597")]
		[Address(RVA = "0x462CCC", Offset = "0x462CCC", VA = "0x462CCC")]
		add
		{
		}
		[Token(Token = "0x6001598")]
		[Address(RVA = "0x462DD8", Offset = "0x462DD8", VA = "0x462DD8")]
		remove
		{
		}
	}

	[Token(Token = "0x6001592")]
	[Address(RVA = "0x462730", Offset = "0x462730", VA = "0x462730")]
	public PlayerModelMotor()
	{
	}

	[Token(Token = "0x6001599")]
	[Address(RVA = "0x462EE4", Offset = "0x462EE4", VA = "0x462EE4")]
	private void Start()
	{
	}

	[Token(Token = "0x600159A")]
	[Address(RVA = "0x462EE8", Offset = "0x462EE8", VA = "0x462EE8")]
	public void Init()
	{
	}

	[Token(Token = "0x600159B")]
	[Address(RVA = "0x462F8C", Offset = "0x462F8C", VA = "0x462F8C")]
	internal void SetRotation(Quaternion rot)
	{
	}

	[Token(Token = "0x600159C")]
	[Address(RVA = "0x46304C", Offset = "0x46304C", VA = "0x46304C")]
	internal Quaternion GetRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600159D")]
	[Address(RVA = "0x463080", Offset = "0x463080", VA = "0x463080")]
	public void AttachCamera(Camera cam)
	{
	}

	[Token(Token = "0x600159F")]
	[Address(RVA = "0x463218", Offset = "0x463218", VA = "0x463218")]
	private void OnJump()
	{
	}

	[Token(Token = "0x60015A0")]
	[Address(RVA = "0x463228", Offset = "0x463228", VA = "0x463228")]
	private void Update()
	{
	}

	[Token(Token = "0x60015A1")]
	[Address(RVA = "0x463F0C", Offset = "0x463F0C", VA = "0x463F0C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60015A2")]
	[Address(RVA = "0x463C34", Offset = "0x463C34", VA = "0x463C34")]
	public void Jump()
	{
	}
}
[Token(Token = "0x2000305")]
public class ShadowToggler : MonoBehaviour
{
	[Token(Token = "0x4001117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Light[] SoftLights;

	[Token(Token = "0x4001118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Light[] HardLights;

	[Token(Token = "0x60015A7")]
	[Address(RVA = "0x46F548", Offset = "0x46F548", VA = "0x46F548")]
	public ShadowToggler()
	{
	}

	[Token(Token = "0x60015A8")]
	[Address(RVA = "0x46F550", Offset = "0x46F550", VA = "0x46F550")]
	private void Start()
	{
	}

	[Token(Token = "0x60015A9")]
	[Address(RVA = "0x46F660", Offset = "0x46F660", VA = "0x46F660")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x60015AA")]
	[Address(RVA = "0x46F748", Offset = "0x46F748", VA = "0x46F748")]
	private void OnPostRender()
	{
	}
}
[Token(Token = "0x2000306")]
public class TextAutoBillboard : MonoBehaviour
{
	[Token(Token = "0x60015AB")]
	[Address(RVA = "0x590694", Offset = "0x590694", VA = "0x590694")]
	public TextAutoBillboard()
	{
	}

	[Token(Token = "0x60015AC")]
	[Address(RVA = "0x59069C", Offset = "0x59069C", VA = "0x59069C")]
	private void OnWillRenderObject()
	{
	}
}
[Token(Token = "0x2000307")]
public class Weapon : MonoBehaviour
{
	[Token(Token = "0x2000308")]
	public enum WeaponState
	{
		[Token(Token = "0x4001135")]
		Ready,
		[Token(Token = "0x4001136")]
		WaitingForRecover,
		[Token(Token = "0x4001137")]
		Empty,
		[Token(Token = "0x4001138")]
		EmptyNoAmmo,
		[Token(Token = "0x4001139")]
		Reloading
	}

	[Token(Token = "0x4001119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int weaponTypeID;

	[Token(Token = "0x400111A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int weaponID;

	[Token(Token = "0x400111B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public WeaponState weaponState;

	[Token(Token = "0x400111C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fireRate;

	[Token(Token = "0x400111D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int bulletsPerShoot;

	[Token(Token = "0x400111E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float magazine;

	[Token(Token = "0x400111F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float capacity;

	[Token(Token = "0x4001120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float damageMultiplier;

	[Token(Token = "0x4001121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float accurracy;

	[Token(Token = "0x4001122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float reloadDuration;

	[Token(Token = "0x4001123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool recoverOnReleased;

	[Token(Token = "0x4001124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool autoReload;

	[Token(Token = "0x4001125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool weaponEnabled;

	[Token(Token = "0x4001126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool unlimitedAmmo;

	[Token(Token = "0x4001127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string shootSoundName;

	[Token(Token = "0x4001128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public string hitSoundName;

	[Token(Token = "0x4001129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string emptySoundName;

	[Token(Token = "0x400112A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public string reloadSoundName;

	[Token(Token = "0x400112B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform ShootOutput;

	[Token(Token = "0x400112C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Transform WeaponHandle;

	[Token(Token = "0x400112D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject weaponModel;

	[Token(Token = "0x400112E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public GameObject trailPrefab;

	[Token(Token = "0x400112F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float lastShootTime;

	[Token(Token = "0x4001130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float reloadStartTime;

	[Token(Token = "0x4001131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float mSec;

	[Token(Token = "0x4001133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AudioObject emptySound;

	[Token(Token = "0x14000022")]
	public event EventHandler<EventArgs> StateChanged
	{
		[Token(Token = "0x60015AE")]
		[Address(RVA = "0x8EBC04", Offset = "0x8EBC04", VA = "0x8EBC04")]
		add
		{
		}
		[Token(Token = "0x60015AF")]
		[Address(RVA = "0x8EBD10", Offset = "0x8EBD10", VA = "0x8EBD10")]
		remove
		{
		}
	}

	[Token(Token = "0x60015AD")]
	[Address(RVA = "0x8EBAF0", Offset = "0x8EBAF0", VA = "0x8EBAF0")]
	public Weapon()
	{
	}

	[Token(Token = "0x60015B0")]
	[Address(RVA = "0x8EBE1C", Offset = "0x8EBE1C", VA = "0x8EBE1C")]
	public void UpdateWeapon(float msec)
	{
	}

	[Token(Token = "0x60015B1")]
	[Address(RVA = "0x8EBF78", Offset = "0x8EBF78", VA = "0x8EBF78")]
	private void SwitchState(WeaponState newState)
	{
	}

	[Token(Token = "0x60015B2")]
	[Address(RVA = "0x8EBFF4", Offset = "0x8EBFF4", VA = "0x8EBFF4")]
	public bool Fire()
	{
		return default(bool);
	}

	[Token(Token = "0x60015B3")]
	[Address(RVA = "0x8EBEB0", Offset = "0x8EBEB0", VA = "0x8EBEB0")]
	public void Reload()
	{
	}

	[Token(Token = "0x60015B4")]
	[Address(RVA = "0x8EC1D0", Offset = "0x8EC1D0", VA = "0x8EC1D0")]
	public void Released()
	{
	}
}
[Token(Token = "0x2000309")]
public class Weapons : MonoBehaviour
{
	[Token(Token = "0x400113A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Weapons _instance;

	[Token(Token = "0x400113B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Dictionary<int, Weapon> mWeapons;

	[Token(Token = "0x17000405")]
	public static Weapons Instance
	{
		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x8EC220", Offset = "0x8EC220", VA = "0x8EC220")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60015B5")]
	[Address(RVA = "0x8EC218", Offset = "0x8EC218", VA = "0x8EC218")]
	public Weapons()
	{
	}

	[Token(Token = "0x60015B7")]
	[Address(RVA = "0x8EC334", Offset = "0x8EC334", VA = "0x8EC334")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015B8")]
	[Address(RVA = "0x8EC414", Offset = "0x8EC414", VA = "0x8EC414")]
	private void Start()
	{
	}

	[Token(Token = "0x60015B9")]
	[Address(RVA = "0x8EC338", Offset = "0x8EC338", VA = "0x8EC338")]
	public void Compile()
	{
	}

	[Token(Token = "0x60015BA")]
	[Address(RVA = "0x8EC418", Offset = "0x8EC418", VA = "0x8EC418")]
	public void GetWeaponFromTransform(Transform t)
	{
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x200030A")]
	public enum AAMode
	{
		[Token(Token = "0x400113D")]
		FXAA2,
		[Token(Token = "0x400113E")]
		FXAA3Console,
		[Token(Token = "0x400113F")]
		FXAA1PresetA,
		[Token(Token = "0x4001140")]
		FXAA1PresetB,
		[Token(Token = "0x4001141")]
		NFAA,
		[Token(Token = "0x4001142")]
		SSAA,
		[Token(Token = "0x4001143")]
		DLAA
	}
	[Token(Token = "0x200030B")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x236EC4", Offset = "0x236EC4")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x236EC4", Offset = "0x236EC4")]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AAMode mode;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showGeneratedNormals;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float offsetScale;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float blurRadius;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float edgeThresholdMin;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float edgeThreshold;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeSharpness;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool dlaaSharp;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Shader ssaaShader;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material ssaa;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Shader dlaaShader;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material dlaa;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Shader nfaaShader;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material nfaa;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Shader shaderFXAAII;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material materialFXAAII;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material materialFXAAIII;

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xD18278", Offset = "0xD18278", VA = "0xD18278")]
		public Antialiasing()
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xD18348", Offset = "0xD18348", VA = "0xD18348")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xD183C0", Offset = "0xD183C0", VA = "0xD183C0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xD189D4", Offset = "0xD189D4", VA = "0xD189D4")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x200030C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x236F90", Offset = "0x236F90")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x236F90", Offset = "0x236F90")]
	[ExecuteInEditMode]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x200030D")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4001179")]
			Ghosting,
			[Token(Token = "0x400117A")]
			Anamorphic,
			[Token(Token = "0x400117B")]
			Combined
		}

		[Token(Token = "0x200030E")]
		public enum TweakMode
		{
			[Token(Token = "0x400117D")]
			Basic,
			[Token(Token = "0x400117E")]
			Complex
		}

		[Token(Token = "0x200030F")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4001180")]
			Auto,
			[Token(Token = "0x4001181")]
			On,
			[Token(Token = "0x4001182")]
			Off
		}

		[Token(Token = "0x2000310")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4001184")]
			Screen,
			[Token(Token = "0x4001185")]
			Add
		}

		[Token(Token = "0x2000311")]
		public enum BloomQuality
		{
			[Token(Token = "0x4001187")]
			Cheap,
			[Token(Token = "0x4001188")]
			High
		}

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TweakMode tweakMode;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HDRBloomMode hdr;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool doHdr;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sepBlurSpread;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BloomQuality quality;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float bloomIntensity;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float bloomThreshold;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color bloomThresholdColor;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int bloomBlurIterations;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float flareRotation;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float hollyStretchWidth;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float lensflareIntensity;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float lensflareThreshold;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensFlareSaturation;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color flareColorA;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color flareColorB;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Color flareColorC;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Color flareColorD;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Shader lensFlareShader;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader screenBlendShader;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Material screenBlend;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xD190F0", Offset = "0xD190F0", VA = "0xD190F0")]
		public Bloom()
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xD1925C", Offset = "0xD1925C", VA = "0xD1925C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xD19878", Offset = "0xD19878", VA = "0xD19878")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xD1B3E8", Offset = "0xD1B3E8", VA = "0xD1B3E8")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xD1B0D8", Offset = "0xD1B0D8", VA = "0xD1B0D8")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xD1AD20", Offset = "0xD1AD20", VA = "0xD1AD20")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xD1AC10", Offset = "0xD1AC10", VA = "0xD1AC10")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xD1AE40", Offset = "0xD1AE40", VA = "0xD1AE40")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}
	}
	[Token(Token = "0x2000312")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x23705C", Offset = "0x23705C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23705C", Offset = "0x23705C")]
	public class Bloom_SP : PostEffectsBase
	{
		[Token(Token = "0x2000313")]
		public enum TweakMode
		{
			[Token(Token = "0x400119B")]
			Basic,
			[Token(Token = "0x400119C")]
			Complex
		}

		[Token(Token = "0x2000314")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x400119E")]
			Screen,
			[Token(Token = "0x400119F")]
			Add
		}

		[Token(Token = "0x2000315")]
		public enum BloomQuality
		{
			[Token(Token = "0x40011A1")]
			Cheap,
			[Token(Token = "0x40011A2")]
			High
		}

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TweakMode tweakMode;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float sepBlurSpread;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomQuality quality;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float bloomIntensity;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float bloomThreshold;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader screenBlendShader;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Material screenBlend;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool downSample;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool brightFilter;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool blurring;

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xD1D4F0", Offset = "0xD1D4F0", VA = "0xD1D4F0")]
		public Bloom_SP()
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xD1D568", Offset = "0xD1D568", VA = "0xD1D568", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xD1D5E0", Offset = "0xD1D5E0", VA = "0xD1D5E0")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xD1DC84", Offset = "0xD1DC84", VA = "0xD1DC84")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}
	}
	[Token(Token = "0x2000316")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x40011A4")]
		Ghosting,
		[Token(Token = "0x40011A5")]
		Anamorphic,
		[Token(Token = "0x40011A6")]
		Combined
	}
	[Token(Token = "0x2000317")]
	public enum TweakMode34
	{
		[Token(Token = "0x40011A8")]
		Basic,
		[Token(Token = "0x40011A9")]
		Complex
	}
	[Token(Token = "0x2000318")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x40011AB")]
		Auto,
		[Token(Token = "0x40011AC")]
		On,
		[Token(Token = "0x40011AD")]
		Off
	}
	[Token(Token = "0x2000319")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x40011AF")]
		Screen,
		[Token(Token = "0x40011B0")]
		Add
	}
	[Token(Token = "0x200031A")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23712C", Offset = "0x23712C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x23712C", Offset = "0x23712C")]
	[ExecuteInEditMode]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HDRBloomMode hdr;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool doHdr;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sepBlurSpread;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float bloomIntensity;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float bloomThreshold;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int bloomBlurIterations;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool lensflares;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float hollyStretchWidth;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float lensflareIntensity;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float lensflareThreshold;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color flareColorA;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color flareColorB;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Color flareColorC;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Color flareColorD;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Shader lensFlareShader;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material lensFlareMaterial;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Shader vignetteShader;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material vignetteMaterial;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Shader separableBlurShader;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Shader screenBlendShader;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material screenBlend;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xD1B4E8", Offset = "0xD1B4E8", VA = "0xD1B4E8")]
		public BloomAndFlares()
		{
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xD1B640", Offset = "0xD1B640", VA = "0xD1B640", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xD1B708", Offset = "0xD1B708", VA = "0xD1B708")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xD1CD60", Offset = "0xD1CD60", VA = "0xD1CD60")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xD1CA5C", Offset = "0xD1CA5C", VA = "0xD1CA5C")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xD1C70C", Offset = "0xD1C70C", VA = "0xD1C70C")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xD1C8B4", Offset = "0xD1C8B4", VA = "0xD1C8B4")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}
	}
	[Token(Token = "0x200031B")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237214", Offset = "0x237214")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237214", Offset = "0x237214")]
	[ExecuteInEditMode]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x200031C")]
		public enum Resolution
		{
			[Token(Token = "0x40011DC")]
			Low,
			[Token(Token = "0x40011DD")]
			High
		}

		[Token(Token = "0x200031D")]
		public enum BlurType
		{
			[Token(Token = "0x40011DF")]
			Standard,
			[Token(Token = "0x40011E0")]
			Sgx
		}

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BA24", Offset = "0x23BA24")]
		public float threshold;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BA3C", Offset = "0x23BA3C")]
		public float intensity;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BA58", Offset = "0x23BA58")]
		public float blurSize;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Resolution resolution;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BA74", Offset = "0x23BA74")]
		public int blurIterations;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlurType blurType;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Shader fastBloomShader;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material fastBloomMaterial;

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xD1CE30", Offset = "0xD1CE30", VA = "0xD1CE30")]
		public BloomOptimized()
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xD1CE54", Offset = "0xD1CE54", VA = "0xD1CE54", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xD1CEA4", Offset = "0xD1CEA4", VA = "0xD1CEA4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xD1CF70", Offset = "0xD1CF70", VA = "0xD1CF70")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x200031E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2372EC", Offset = "0x2372EC")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BA90", Offset = "0x23BA90")]
		public int iterations;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BAAC", Offset = "0x23BAAC")]
		public float blurSpread;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Shader blurShader;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x17000406")]
		protected Material material
		{
			[Token(Token = "0x60015D7")]
			[Address(RVA = "0xD1DDB0", Offset = "0xD1DDB0", VA = "0xD1DDB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xD1DD94", Offset = "0xD1DD94", VA = "0xD1DD94")]
		public Blur()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xD1DF6C", Offset = "0xD1DF6C", VA = "0xD1DF6C")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xD1E0B4", Offset = "0xD1E0B4", VA = "0xD1E0B4")]
		protected void Start()
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xD1E1B4", Offset = "0xD1E1B4", VA = "0xD1E1B4")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xD1E3F0", Offset = "0xD1E3F0", VA = "0xD1E3F0")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xD1E600", Offset = "0xD1E600", VA = "0xD1E600")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x200031F")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237344", Offset = "0x237344")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237344", Offset = "0x237344")]
	[ExecuteInEditMode]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000320")]
		public enum BlurType
		{
			[Token(Token = "0x40011EC")]
			StandardGauss,
			[Token(Token = "0x40011ED")]
			SgxGauss
		}

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BAC4", Offset = "0x23BAC4")]
		public int downsample;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BADC", Offset = "0x23BADC")]
		public float blurSize;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BAF8", Offset = "0x23BAF8")]
		public int blurIterations;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlurType blurType;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Shader blurShader;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material blurMaterial;

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xD1E794", Offset = "0xD1E794", VA = "0xD1E794")]
		public BlurOptimized()
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xD1E7B4", Offset = "0xD1E7B4", VA = "0xD1E7B4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xD1E804", Offset = "0xD1E804", VA = "0xD1E804")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xD1E8D0", Offset = "0xD1E8D0", VA = "0xD1E8D0")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000321")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237410", Offset = "0x237410")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237410", Offset = "0x237410")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x2000322")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x400120F")]
			CameraMotion,
			[Token(Token = "0x4001210")]
			LocalBlur,
			[Token(Token = "0x4001211")]
			Reconstruction,
			[Token(Token = "0x4001212")]
			ReconstructionDX11,
			[Token(Token = "0x4001213")]
			ReconstructionDisc
		}

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool preview;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 previewScale;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float movementScale;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float rotationScale;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxVelocity;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minVelocity;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float velocityScale;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float softZDistance;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int velocityDownsample;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LayerMask excludeLayers;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject tmpCam;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Shader shader;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Shader replacementClear;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material motionBlurMaterial;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float jitter;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool showVelocity;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float showVelocityScale;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Matrix4x4[] currentStereoViewProjMat;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Matrix4x4[] prevStereoViewProjMat;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private int prevFrameCount;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool wasActive;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 prevFramePos;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Camera _camera;

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xD1EDF0", Offset = "0xD1EDF0", VA = "0xD1EDF0")]
		public CameraMotionBlur()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xD1EF48", Offset = "0xD1EF48", VA = "0xD1EF48")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xD1F698", Offset = "0xD1F698", VA = "0xD1F698")]
		private new void Start()
		{
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xD1FA24", Offset = "0xD1FA24", VA = "0xD1FA24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xD1FB2C", Offset = "0xD1FB2C", VA = "0xD1FB2C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xD1FD1C", Offset = "0xD1FD1C", VA = "0xD1FD1C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xD1FDF4", Offset = "0xD1FDF4", VA = "0xD1FDF4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xD1F7D0", Offset = "0xD1F7D0", VA = "0xD1F7D0")]
		private void Remember()
		{
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xD22D54", Offset = "0xD22D54", VA = "0xD22D54")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xD22C54", Offset = "0xD22C54", VA = "0xD22C54")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xD22D48", Offset = "0xD22D48", VA = "0xD22D48")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000323")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2374E0", Offset = "0x2374E0")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x2000324")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x400122D")]
			Simple,
			[Token(Token = "0x400122E")]
			Advanced
		}

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AnimationCurve redChannel;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useDepthCorrection;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public AnimationCurve zCurve;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Material ccMaterial;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material ccDepthMaterial;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Texture2D zCurveTex;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float saturation;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool selectiveCc;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color selectiveFromColor;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color selectiveToColor;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool updateTextures;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xD2336C", Offset = "0xD2336C", VA = "0xD2336C")]
		public ColorCorrectionCurves()
		{
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xD23B58", Offset = "0xD23B58", VA = "0xD23B58")]
		private new void Start()
		{
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0xD23B94", Offset = "0xD23B94", VA = "0xD23B94")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xD23B98", Offset = "0xD23B98", VA = "0xD23B98", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xD23EC8", Offset = "0xD23EC8", VA = "0xD23EC8")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0xD24410", Offset = "0xD24410", VA = "0xD24410")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xD24414", Offset = "0xD24414", VA = "0xD24414")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000325")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237528", Offset = "0x237528")]
	[ExecuteInEditMode]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Shader shader;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material material;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Texture3D converted3DLut;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string basedOnTempTex;

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xD248A4", Offset = "0xD248A4", VA = "0xD248A4")]
		public ColorCorrectionLookup()
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xD24940", Offset = "0xD24940", VA = "0xD24940", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xD24994", Offset = "0xD24994", VA = "0xD24994")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xD24A68", Offset = "0xD24A68", VA = "0xD24A68")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0xD24B3C", Offset = "0xD24B3C", VA = "0xD24B3C")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xD24E08", Offset = "0xD24E08", VA = "0xD24E08")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xD24F54", Offset = "0xD24F54", VA = "0xD24F54")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xD2545C", Offset = "0xD2545C", VA = "0xD2545C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000326")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237570", Offset = "0x237570")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Texture textureRamp;

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xD256F4", Offset = "0xD256F4", VA = "0xD256F4")]
		public ColorCorrectionRamp()
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xD25704", Offset = "0xD25704", VA = "0xD25704")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000327")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2375E8", Offset = "0x2375E8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2375E8", Offset = "0x2375E8")]
	[ExecuteInEditMode]
	public class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BB14", Offset = "0x23BB14")]
		public float intensity;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BB2C", Offset = "0x23BB2C")]
		public float threshold;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BB48", Offset = "0x23BB48")]
		public float blurSpread;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader separableBlurShader;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xD258C8", Offset = "0xD258C8", VA = "0xD258C8")]
		public ContrastEnhance()
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xD258DC", Offset = "0xD258DC", VA = "0xD258DC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xD25940", Offset = "0xD25940", VA = "0xD25940")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000328")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2376D0", Offset = "0x2376D0")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BB60", Offset = "0x23BB60")]
		public float adaptationSpeed;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BB7C", Offset = "0x23BB7C")]
		public float limitMinimum;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BB94", Offset = "0x23BB94")]
		public float limitMaximum;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int curAdaptIndex;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shaderLum;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Material m_materialLum;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shaderReduce;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Material m_materialReduce;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader shaderAdapt;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Material m_materialAdapt;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderApply;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Material m_materialApply;

		[Token(Token = "0x17000407")]
		protected Material materialLum
		{
			[Token(Token = "0x6001603")]
			[Address(RVA = "0xD25E10", Offset = "0xD25E10", VA = "0xD25E10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000408")]
		protected Material materialReduce
		{
			[Token(Token = "0x6001604")]
			[Address(RVA = "0xD25EF4", Offset = "0xD25EF4", VA = "0xD25EF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000409")]
		protected Material materialAdapt
		{
			[Token(Token = "0x6001605")]
			[Address(RVA = "0xD25FD8", Offset = "0xD25FD8", VA = "0xD25FD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700040A")]
		protected Material materialApply
		{
			[Token(Token = "0x6001606")]
			[Address(RVA = "0xD260BC", Offset = "0xD260BC", VA = "0xD260BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xD25D78", Offset = "0xD25D78", VA = "0xD25D78")]
		public ContrastStretch()
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xD261A0", Offset = "0xD261A0", VA = "0xD261A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xD26270", Offset = "0xD26270", VA = "0xD26270")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xD26438", Offset = "0xD26438", VA = "0xD26438")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xD2673C", Offset = "0xD2673C", VA = "0xD2673C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xD26A20", Offset = "0xD26A20", VA = "0xD26A20")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}
	}
	[Token(Token = "0x2000329")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237744", Offset = "0x237744")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237744", Offset = "0x237744")]
	public class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float intensity;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int softness;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float spread;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Material blurMaterial;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader depthFetchShader;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Material depthFetchMaterial;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader creaseApplyShader;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xD26D00", Offset = "0xD26D00", VA = "0xD26D00")]
		public CreaseShading()
		{
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xD26D1C", Offset = "0xD26D1C", VA = "0xD26D1C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xD26D98", Offset = "0xD26D98", VA = "0xD26D98")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x200032A")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237818", Offset = "0x237818")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237818", Offset = "0x237818")]
	[ExecuteInEditMode]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x200032B")]
		public enum BlurType
		{
			[Token(Token = "0x400126B")]
			DiscBlur,
			[Token(Token = "0x400126C")]
			DX11
		}

		[Token(Token = "0x200032C")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x400126E")]
			Low,
			[Token(Token = "0x400126F")]
			Medium,
			[Token(Token = "0x4001270")]
			High
		}

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool visualizeFocus;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float focalLength;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float focalSize;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float aperture;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Transform focalTransform;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxBlurSize;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool highResolution;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BlurType blurType;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool nearBlur;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float foregroundOverlap;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader dofHdrShader;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Material dofHdrMaterial;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader dx11BokehShader;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float dx11BokehThreshold;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float dx11BokehScale;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float dx11BokehIntensity;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float focalDistance01;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float internalBlurWidth;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Camera cachedCamera;

		[Token(Token = "0x600160F")]
		[Address(RVA = "0xD27238", Offset = "0xD27238", VA = "0xD27238")]
		public DepthOfField()
		{
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0xD272A4", Offset = "0xD272A4", VA = "0xD272A4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0xD274E8", Offset = "0xD274E8", VA = "0xD274E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0xD275A0", Offset = "0xD275A0", VA = "0xD275A0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0xD27704", Offset = "0xD27704", VA = "0xD27704")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0xD2732C", Offset = "0xD2732C", VA = "0xD2732C")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xD27748", Offset = "0xD27748", VA = "0xD27748")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xD27954", Offset = "0xD27954", VA = "0xD27954")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xD27D5C", Offset = "0xD27D5C", VA = "0xD27D5C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x200032D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237900", Offset = "0x237900")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237900", Offset = "0x237900")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x200032E")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x400129D")]
			OnlyBackground = 1,
			[Token(Token = "0x400129E")]
			BackgroundAndForeground
		}

		[Token(Token = "0x200032F")]
		public enum DofResolution
		{
			[Token(Token = "0x40012A0")]
			High = 2,
			[Token(Token = "0x40012A1")]
			Medium,
			[Token(Token = "0x40012A2")]
			Low
		}

		[Token(Token = "0x2000330")]
		public enum DofBlurriness
		{
			[Token(Token = "0x40012A4")]
			Low = 1,
			[Token(Token = "0x40012A5")]
			High = 2,
			[Token(Token = "0x40012A6")]
			VeryHigh = 4
		}

		[Token(Token = "0x2000331")]
		public enum BokehDestination
		{
			[Token(Token = "0x40012A8")]
			Background = 1,
			[Token(Token = "0x40012A9")]
			Foreground,
			[Token(Token = "0x40012AA")]
			BackgroundAndForeground
		}

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DofResolution resolution;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool simpleTweakMode;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float focalPoint;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float smoothness;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float focalZDistance;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float focalZStartCurve;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalZEndCurve;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float focalStartCurve;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float focalEndCurve;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float focalDistance01;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform objectFocus;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float focalSize;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DofBlurriness bluriness;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float maxBlurSpread;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Shader dofBlurShader;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material dofBlurMaterial;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Shader dofShader;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dofMaterial;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool visualize;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float widthOverHeight;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float oneOverBaseSize;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool bokeh;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool bokehSupport;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader bokehShader;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Texture2D bokehTexture;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float bokehScale;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float bokehIntensity;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float bokehThresholdContrast;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int bokehDownsample;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Material bokehMaterial;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera _camera;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private RenderTexture bokehSource;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xD29E30", Offset = "0xD29E30", VA = "0xD29E30")]
		public DepthOfFieldDeprecated()
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xD29EE8", Offset = "0xD29EE8", VA = "0xD29EE8")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xD29FE8", Offset = "0xD29FE8", VA = "0xD29FE8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xD2A118", Offset = "0xD2A118", VA = "0xD2A118")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xD2A4AC", Offset = "0xD2A4AC", VA = "0xD2A4AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xD2A564", Offset = "0xD2A564", VA = "0xD2A564")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xD2A770", Offset = "0xD2A770", VA = "0xD2A770")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0xD2A790", Offset = "0xD2A790", VA = "0xD2A790")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xD2A7B4", Offset = "0xD2A7B4", VA = "0xD2A7B4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xD2BBC4", Offset = "0xD2BBC4", VA = "0xD2BBC4")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xD2C5A8", Offset = "0xD2C5A8", VA = "0xD2C5A8")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xD2CBB8", Offset = "0xD2CBB8", VA = "0xD2CBB8")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xD2BA0C", Offset = "0xD2BA0C", VA = "0xD2BA0C")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xD2BF60", Offset = "0xD2BF60", VA = "0xD2BF60")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xD2C98C", Offset = "0xD2C98C", VA = "0xD2C98C")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xD2B51C", Offset = "0xD2B51C", VA = "0xD2B51C")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}
	}
	[Token(Token = "0x2000332")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2379DC", Offset = "0x2379DC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2379DC", Offset = "0x2379DC")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x2000333")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x40012B7")]
			TriangleDepthNormals,
			[Token(Token = "0x40012B8")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x40012B9")]
			SobelDepth,
			[Token(Token = "0x40012BA")]
			SobelDepthThin,
			[Token(Token = "0x40012BB")]
			TriangleLuminance
		}

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public EdgeDetectMode mode;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float sensitivityDepth;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float sensitivityNormals;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float lumThreshold;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float edgeExp;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float sampleDist;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgesOnly;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader edgeDetectShader;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xD2D270", Offset = "0xD2D270", VA = "0xD2D270")]
		public EdgeDetection()
		{
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xD2D2E8", Offset = "0xD2D2E8", VA = "0xD2D2E8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xD2D488", Offset = "0xD2D488", VA = "0xD2D488")]
		private new void Start()
		{
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0xD2D35C", Offset = "0xD2D35C", VA = "0xD2D35C")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x600162D")]
		[Address(RVA = "0xD2D494", Offset = "0xD2D494", VA = "0xD2D494")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xD2D498", Offset = "0xD2D498", VA = "0xD2D498")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000334")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237AB0", Offset = "0x237AB0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237AB0", Offset = "0x237AB0")]
	[ExecuteInEditMode]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BBAC", Offset = "0x23BBAC")]
		public float strengthX;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BBC4", Offset = "0x23BBC4")]
		public float strengthY;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Shader fishEyeShader;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material fisheyeMaterial;

		[Token(Token = "0x600162F")]
		[Address(RVA = "0xD2D774", Offset = "0xD2D774", VA = "0xD2D774")]
		public Fisheye()
		{
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xD2D788", Offset = "0xD2D788", VA = "0xD2D788", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xD2D7D8", Offset = "0xD2D7D8", VA = "0xD2D7D8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000335")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237B7C", Offset = "0x237B7C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237B7C", Offset = "0x237B7C")]
	internal class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x23BBDC", Offset = "0x23BBDC")]
		public bool distanceFog;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x23BC24", Offset = "0x23BC24")]
		public bool excludeFarPixels;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x23BC58", Offset = "0x23BC58")]
		public bool useRadialDistance;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x23BC8C", Offset = "0x23BC8C")]
		public bool heightFog;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x23BCD0", Offset = "0x23BCD0")]
		public float height;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BD14", Offset = "0x23BD14")]
		public float heightDensity;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x23BD34", Offset = "0x23BD34")]
		public float startDistance;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Shader fogShader;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material fogMaterial;

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xD2D9B0", Offset = "0xD2D9B0", VA = "0xD2D9B0")]
		public GlobalFog()
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xD2D9D4", Offset = "0xD2D9D4", VA = "0xD2D9D4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0xD2DA28", Offset = "0xD2DA28", VA = "0xD2DA28")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xD2E71C", Offset = "0xD2E71C", VA = "0xD2E71C")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
		{
		}
	}
	[Token(Token = "0x2000336")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237C48", Offset = "0x237C48")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Texture textureRamp;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BD90", Offset = "0x23BD90")]
		public float rampOffset;

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xD2E8CC", Offset = "0xD2E8CC", VA = "0xD2E8CC")]
		public Grayscale()
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xD2E8D4", Offset = "0xD2E8D4", VA = "0xD2E8D4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000337")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237CB4", Offset = "0x237CB4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237CB4", Offset = "0x237CB4")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Shader shader;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Material m_Material;

		[Token(Token = "0x1700040B")]
		protected Material material
		{
			[Token(Token = "0x600163A")]
			[Address(RVA = "0xD257E4", Offset = "0xD257E4", VA = "0xD257E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0xD256FC", Offset = "0xD256FC", VA = "0xD256FC")]
		public ImageEffectBase()
		{
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0xD2E9FC", Offset = "0xD2E9FC", VA = "0xD2E9FC", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0xD2EAD4", Offset = "0xD2EAD4", VA = "0xD2EAD4", Slot = "5")]
		protected virtual void OnDisable()
		{
		}
	}
	[Token(Token = "0x2000338")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237D54", Offset = "0x237D54")]
	public class ImageEffects
	{
		[Token(Token = "0x600163C")]
		[Address(RVA = "0xD2EBA0", Offset = "0xD2EBA0", VA = "0xD2EBA0")]
		public ImageEffects()
		{
		}

		[Token(Token = "0x600163D")]
		[Address(RVA = "0xD2EBA8", Offset = "0xD2EBA8", VA = "0xD2EBA8")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0xD2EF54", Offset = "0xD2EF54", VA = "0xD2EF54")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23E734", Offset = "0x23E734")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0xD2EFE0", Offset = "0xD2EFE0", VA = "0xD2EFE0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x23E788", Offset = "0x23E788")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}
	}
	[Token(Token = "0x2000339")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237D88", Offset = "0x237D88")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237D88", Offset = "0x237D88")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BDAC", Offset = "0x23BDAC")]
		public float blurAmount;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool extraBlur;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private RenderTexture accumTexture;

		[Token(Token = "0x6001640")]
		[Address(RVA = "0xD2F074", Offset = "0xD2F074", VA = "0xD2F074")]
		public MotionBlur()
		{
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0xD2F088", Offset = "0xD2F088", VA = "0xD2F088", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0xD2F0C4", Offset = "0xD2F0C4", VA = "0xD2F0C4", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0xD2F154", Offset = "0xD2F154", VA = "0xD2F154")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x200033A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237E64", Offset = "0x237E64")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237E64", Offset = "0x237E64")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float intensityMultiplier;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float generalIntensity;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blackIntensity;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float whiteIntensity;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float midGrey;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool dx11Grain;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float softness;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool monochrome;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 intensities;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 tiling;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float monochromeTiling;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FilterMode filterMode;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Texture2D noiseTexture;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader noiseShader;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Material noiseMaterial;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Mesh mesh;

		[Token(Token = "0x6001644")]
		[Address(RVA = "0xD2F5F8", Offset = "0xD2F5F8", VA = "0xD2F5F8")]
		public NoiseAndGrain()
		{
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0xD2F6C0", Offset = "0xD2F6C0", VA = "0xD2F6C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xD2F730", Offset = "0xD2F730", VA = "0xD2F730", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xD2F7A8", Offset = "0xD2F7A8", VA = "0xD2F7A8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0xD304E8", Offset = "0xD304E8", VA = "0xD304E8")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, Mesh mesh, int passNr)
		{
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xD308E8", Offset = "0xD308E8", VA = "0xD308E8")]
		private static void BuildMesh(Mesh mesh, RenderTexture source, Texture2D noise)
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xD310A4", Offset = "0xD310A4", VA = "0xD310A4")]
		private static void BuildMeshUV0(Mesh mesh, int width, int height, float noiseSize, int noiseWidth)
		{
		}
	}
	[Token(Token = "0x200033B")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x237F3C", Offset = "0x237F3C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x237F3C", Offset = "0x237F3C")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool monochrome;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		private bool rgbFallback;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BDC8", Offset = "0x23BDC8")]
		public float grainIntensityMin;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BDE4", Offset = "0x23BDE4")]
		public float grainIntensityMax;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BE00", Offset = "0x23BE00")]
		public float grainSize;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BE20", Offset = "0x23BE20")]
		public float scratchIntensityMin;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BE3C", Offset = "0x23BE3C")]
		public float scratchIntensityMax;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BE58", Offset = "0x23BE58")]
		public float scratchFPS;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BE74", Offset = "0x23BE74")]
		public float scratchJitter;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Texture grainTexture;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture scratchTexture;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Shader shaderRGB;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderYUV;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Material m_MaterialRGB;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_MaterialYUV;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float scratchTimeLeft;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float scratchX;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float scratchY;

		[Token(Token = "0x1700040C")]
		protected Material material
		{
			[Token(Token = "0x600164E")]
			[Address(RVA = "0xD315E0", Offset = "0xD315E0", VA = "0xD315E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xD313F8", Offset = "0xD313F8", VA = "0xD313F8")]
		public NoiseAndScratches()
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xD31448", Offset = "0xD31448", VA = "0xD31448")]
		protected void Start()
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0xD3178C", Offset = "0xD3178C", VA = "0xD3178C")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xD318D8", Offset = "0xD318D8", VA = "0xD318D8")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0xD31A30", Offset = "0xD31A30", VA = "0xD31A30")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x200033C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x23800C", Offset = "0x23800C")]
	[ExecuteInEditMode]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected bool supportHDRTextures;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		protected bool supportDX11;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		protected bool isSupported;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Material> createdMaterials;

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xD182B0", Offset = "0xD182B0", VA = "0xD182B0")]
		public PostEffectsBase()
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xD192E8", Offset = "0xD192E8", VA = "0xD192E8")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xD18618", Offset = "0xD18618", VA = "0xD18618")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0xD31EA0", Offset = "0xD31EA0", VA = "0xD31EA0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0xD31EAC", Offset = "0xD31EAC", VA = "0xD31EAC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0xD31EB0", Offset = "0xD31EB0", VA = "0xD31EB0")]
		private void RemoveCreatedMaterials()
		{
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0xD31FD0", Offset = "0xD31FD0", VA = "0xD31FD0")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0xD31FD8", Offset = "0xD31FD8", VA = "0xD31FD8", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0xD23B84", Offset = "0xD23B84", VA = "0xD23B84")]
		protected void Start()
		{
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0xD184BC", Offset = "0xD184BC", VA = "0xD184BC")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0xD1FDA0", Offset = "0xD1FDA0", VA = "0xD1FDA0")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xD320D4", Offset = "0xD320D4", VA = "0xD320D4")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xD188DC", Offset = "0xD188DC", VA = "0xD188DC")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xD320DC", Offset = "0xD320DC", VA = "0xD320DC")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xD188B8", Offset = "0xD188B8", VA = "0xD188B8")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0xD32420", Offset = "0xD32420", VA = "0xD32420")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}
	}
	[Token(Token = "0x200033D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x238094", Offset = "0x238094")]
	[ExecuteInEditMode]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x6001662")]
		[Address(RVA = "0xD327F8", Offset = "0xD327F8", VA = "0xD327F8")]
		public PostEffectsHelper()
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0xD32800", Offset = "0xD32800", VA = "0xD32800")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0xD3288C", Offset = "0xD3288C", VA = "0xD3288C")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0xD32BD8", Offset = "0xD32BD8", VA = "0xD32BD8")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0xD32FAC", Offset = "0xD32FAC", VA = "0xD32FAC")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}
	}
	[Token(Token = "0x200033E")]
	internal class Quads
	{
		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int currentQuads;

		[Token(Token = "0x6001667")]
		[Address(RVA = "0xD3316C", Offset = "0xD3316C", VA = "0xD3316C")]
		public Quads()
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0xD33174", Offset = "0xD33174", VA = "0xD33174")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0xD2A190", Offset = "0xD2A190", VA = "0xD2A190")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xD2CEB0", Offset = "0xD2CEB0", VA = "0xD2CEB0")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0xD332DC", Offset = "0xD332DC", VA = "0xD332DC")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}
	}
	[Token(Token = "0x200033F")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x23811C", Offset = "0x23811C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x23811C", Offset = "0x23811C")]
	[ExecuteInEditMode]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x2000340")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x4001301")]
			Additive,
			[Token(Token = "0x4001302")]
			ScreenBlend,
			[Token(Token = "0x4001303")]
			Multiply,
			[Token(Token = "0x4001304")]
			Overlay,
			[Token(Token = "0x4001305")]
			AlphaBlend
		}

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float intensity;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Texture2D texture;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader overlayShader;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Material overlayMaterial;

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xD33AD4", Offset = "0xD33AD4", VA = "0xD33AD4")]
		public ScreenOverlay()
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xD33AE8", Offset = "0xD33AE8", VA = "0xD33AE8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0xD33B38", Offset = "0xD33B38", VA = "0xD33B38")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000341")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2381E8", Offset = "0x2381E8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2381E8", Offset = "0x2381E8")]
	[ExecuteInEditMode]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BE8C", Offset = "0x23BE8C")]
		public float intensity;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BEA8", Offset = "0x23BEA8")]
		public float radius;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BEC8", Offset = "0x23BEC8")]
		public int blurIterations;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BEE4", Offset = "0x23BEE4")]
		public float blurFilterDistance;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BF00", Offset = "0x23BF00")]
		public int downsample;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture2D rand;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Shader aoShader;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material aoMaterial;

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xD33D38", Offset = "0xD33D38", VA = "0xD33D38")]
		public ScreenSpaceAmbientObscurance()
		{
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0xD33D64", Offset = "0xD33D64", VA = "0xD33D64", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0xD33DB8", Offset = "0xD33DB8", VA = "0xD33DB8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xD33E8C", Offset = "0xD33E8C", VA = "0xD33E8C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000342")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2382C8", Offset = "0x2382C8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2382C8", Offset = "0x2382C8")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x2000343")]
		public enum SSAOSamples
		{
			[Token(Token = "0x400131A")]
			Low,
			[Token(Token = "0x400131B")]
			Medium,
			[Token(Token = "0x400131C")]
			High
		}

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BF18", Offset = "0x23BF18")]
		public float m_Radius;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BF34", Offset = "0x23BF34")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BF50", Offset = "0x23BF50")]
		public int m_Blur;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BF6C", Offset = "0x23BF6C")]
		public int m_Downsampling;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BF88", Offset = "0x23BF88")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BFA4", Offset = "0x23BFA4")]
		public float m_MinZ;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader m_SSAOShader;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool m_Supported;

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xD34AC4", Offset = "0xD34AC4", VA = "0xD34AC4")]
		public ScreenSpaceAmbientOcclusion()
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xD34B14", Offset = "0xD34B14", VA = "0xD34B14")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xD34BEC", Offset = "0xD34BEC", VA = "0xD34BEC")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0xD34CB0", Offset = "0xD34CB0", VA = "0xD34CB0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xD34CB8", Offset = "0xD34CB8", VA = "0xD34CB8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xD34ECC", Offset = "0xD34ECC", VA = "0xD34ECC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0xD34DCC", Offset = "0xD34DCC", VA = "0xD34DCC")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0xD34F80", Offset = "0xD34F80", VA = "0xD34F80")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000344")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2383A8", Offset = "0x2383A8")]
	[ExecuteInEditMode]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x600167C")]
		[Address(RVA = "0xD3590C", Offset = "0xD3590C", VA = "0xD3590C")]
		public SepiaTone()
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xD35914", Offset = "0xD35914", VA = "0xD35914")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000345")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x238414", Offset = "0x238414")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x238414", Offset = "0x238414")]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x2000346")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x400132C")]
			Low,
			[Token(Token = "0x400132D")]
			Normal,
			[Token(Token = "0x400132E")]
			High
		}

		[Token(Token = "0x2000347")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4001330")]
			Screen,
			[Token(Token = "0x4001331")]
			Add
		}

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Transform sunTransform;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int radialBlurIterations;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color sunColor;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color sunThreshold;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float sunShaftIntensity;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float maxRadius;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useDepthTexture;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Shader sunShaftsShader;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Shader simpleClearShader;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material simpleClearMaterial;

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xD359B4", Offset = "0xD359B4", VA = "0xD359B4")]
		public SunShafts()
		{
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xD35A64", Offset = "0xD35A64", VA = "0xD35A64", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xD35AC8", Offset = "0xD35AC8", VA = "0xD35AC8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000348")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2384E0", Offset = "0x2384E0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2384E0", Offset = "0x2384E0")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x2000349")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x400133A")]
			TiltShiftMode,
			[Token(Token = "0x400133B")]
			IrisMode
		}

		[Token(Token = "0x200034A")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x400133D")]
			Preview,
			[Token(Token = "0x400133E")]
			Normal,
			[Token(Token = "0x400133F")]
			High
		}

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TiltShiftMode mode;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TiltShiftQuality quality;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BFC0", Offset = "0x23BFC0")]
		public float blurArea;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BFDC", Offset = "0x23BFDC")]
		public float maxBlurSize;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23BFF8", Offset = "0x23BFF8")]
		public int downsample;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader tiltShiftShader;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x6001681")]
		[Address(RVA = "0xD368F4", Offset = "0xD368F4", VA = "0xD368F4")]
		public TiltShift()
		{
		}

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xD36914", Offset = "0xD36914", VA = "0xD36914", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xD36968", Offset = "0xD36968", VA = "0xD36968")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x200034B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2385A4", Offset = "0x2385A4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2385A4", Offset = "0x2385A4")]
	[ImageEffectAllowedInSceneView]
	[ExecuteInEditMode]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x200034C")]
		public enum TonemapperType
		{
			[Token(Token = "0x400134E")]
			SimpleReinhard,
			[Token(Token = "0x400134F")]
			UserCurve,
			[Token(Token = "0x4001350")]
			Hable,
			[Token(Token = "0x4001351")]
			Photographic,
			[Token(Token = "0x4001352")]
			OptimizedHejiDawson,
			[Token(Token = "0x4001353")]
			AdaptiveReinhard,
			[Token(Token = "0x4001354")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x200034D")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x4001356")]
			Square16 = 0x10,
			[Token(Token = "0x4001357")]
			Square32 = 0x20,
			[Token(Token = "0x4001358")]
			Square64 = 0x40,
			[Token(Token = "0x4001359")]
			Square128 = 0x80,
			[Token(Token = "0x400135A")]
			Square256 = 0x100,
			[Token(Token = "0x400135B")]
			Square512 = 0x200,
			[Token(Token = "0x400135C")]
			Square1024 = 0x400
		}

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TonemapperType type;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Texture2D curveTex;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float exposureAdjustment;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float middleGrey;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float white;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float adaptionSpeed;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Shader tonemapper;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Material tonemapMaterial;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture rt;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xD36D08", Offset = "0xD36D08", VA = "0xD36D08")]
		public Tonemapping()
		{
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xD36D50", Offset = "0xD36D50", VA = "0xD36D50", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0xD36EE0", Offset = "0xD36EE0", VA = "0xD36EE0")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xD37268", Offset = "0xD37268", VA = "0xD37268")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xD3744C", Offset = "0xD3744C", VA = "0xD3744C")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xD37564", Offset = "0xD37564", VA = "0xD37564")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x200034E")]
	internal class Triangles
	{
		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int currentTris;

		[Token(Token = "0x600168A")]
		[Address(RVA = "0x8E17F0", Offset = "0x8E17F0", VA = "0x8E17F0")]
		public Triangles()
		{
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0x8E17F8", Offset = "0x8E17F8", VA = "0x8E17F8")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0x8E19D8", Offset = "0x8E19D8", VA = "0x8E19D8")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0x8E1CF4", Offset = "0x8E1CF4", VA = "0x8E1CF4")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0x8E2038", Offset = "0x8E2038", VA = "0x8E2038")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}
	}
	[Token(Token = "0x200034F")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x238688", Offset = "0x238688")]
	[ExecuteInEditMode]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector2 radius;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23C010", Offset = "0x23C010")]
		public float angle;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 center;

		[Token(Token = "0x6001690")]
		[Address(RVA = "0x8E2674", Offset = "0x8E2674", VA = "0x8E2674")]
		public Twirl()
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0x8E26FC", Offset = "0x8E26FC", VA = "0x8E26FC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000350")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2386EC", Offset = "0x2386EC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2386EC", Offset = "0x2386EC")]
	[ExecuteInEditMode]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x2000351")]
		public enum AberrationMode
		{
			[Token(Token = "0x4001371")]
			Simple,
			[Token(Token = "0x4001372")]
			Advanced
		}

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AberrationMode mode;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float intensity;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float chromaticAberration;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axialAberration;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blur;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurSpread;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float luminanceDependency;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blurDistance;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Shader vignetteShader;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader separableBlurShader;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Shader chromAberrationShader;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6001692")]
		[Address(RVA = "0x8E2750", Offset = "0x8E2750", VA = "0x8E2750")]
		public VignetteAndChromaticAberration()
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0x8E2790", Offset = "0x8E2790", VA = "0x8E2790", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0x8E281C", Offset = "0x8E281C", VA = "0x8E281C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x2000352")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2387CC", Offset = "0x2387CC")]
	[ExecuteInEditMode]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector2 radius;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float angle;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 center;

		[Token(Token = "0x6001695")]
		[Address(RVA = "0x8E3084", Offset = "0x8E3084", VA = "0x8E3084")]
		public Vortex()
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0x8E310C", Offset = "0x8E310C", VA = "0x8E310C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
}
[Token(Token = "0x2000353")]
public class ButtonScript : MonoBehaviour
{
	[Token(Token = "0x4001376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject Button;

	[Token(Token = "0x4001377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Text MyButtonText;

	[Token(Token = "0x4001378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private string projectileParticleName;

	[Token(Token = "0x4001379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private FireProjectile effectScript;

	[Token(Token = "0x400137A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private ProjectileScript projectileScript;

	[Token(Token = "0x400137B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float buttonsX;

	[Token(Token = "0x400137C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float buttonsY;

	[Token(Token = "0x400137D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float buttonsSizeX;

	[Token(Token = "0x400137E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float buttonsSizeY;

	[Token(Token = "0x400137F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float buttonsDistance;

	[Token(Token = "0x6001697")]
	[Address(RVA = "0x550618", Offset = "0x550618", VA = "0x550618")]
	public ButtonScript()
	{
	}

	[Token(Token = "0x6001698")]
	[Address(RVA = "0x550620", Offset = "0x550620", VA = "0x550620")]
	private void Start()
	{
	}

	[Token(Token = "0x6001699")]
	[Address(RVA = "0x550888", Offset = "0x550888", VA = "0x550888")]
	private void Update()
	{
	}

	[Token(Token = "0x600169A")]
	[Address(RVA = "0x55076C", Offset = "0x55076C", VA = "0x55076C")]
	public void getProjectileNames()
	{
	}

	[Token(Token = "0x600169B")]
	[Address(RVA = "0x5508C4", Offset = "0x5508C4", VA = "0x5508C4")]
	public bool overButton()
	{
		return default(bool);
	}

	[Token(Token = "0x600169C")]
	[Address(RVA = "0x550A1C", Offset = "0x550A1C", VA = "0x550A1C")]
	public void LoadStage1()
	{
	}

	[Token(Token = "0x600169D")]
	[Address(RVA = "0x550A7C", Offset = "0x550A7C", VA = "0x550A7C")]
	public void LoadStage2()
	{
	}

	[Token(Token = "0x600169E")]
	[Address(RVA = "0x550ADC", Offset = "0x550ADC", VA = "0x550ADC")]
	public void LoadStage3()
	{
	}

	[Token(Token = "0x600169F")]
	[Address(RVA = "0x550B3C", Offset = "0x550B3C", VA = "0x550B3C")]
	public void LoadStage4()
	{
	}

	[Token(Token = "0x60016A0")]
	[Address(RVA = "0x550B9C", Offset = "0x550B9C", VA = "0x550B9C")]
	public void LoadStage5()
	{
	}

	[Token(Token = "0x60016A1")]
	[Address(RVA = "0x550BFC", Offset = "0x550BFC", VA = "0x550BFC")]
	public void LoadStage6()
	{
	}

	[Token(Token = "0x60016A2")]
	[Address(RVA = "0x550C5C", Offset = "0x550C5C", VA = "0x550C5C")]
	public void LoadStage7()
	{
	}
}
[Token(Token = "0x2000354")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x238830", Offset = "0x238830")]
public class DragMouseOrbit : MonoBehaviour
{
	[Token(Token = "0x4001380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform target;

	[Token(Token = "0x4001381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float distance;

	[Token(Token = "0x4001382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float xSpeed;

	[Token(Token = "0x4001383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ySpeed;

	[Token(Token = "0x4001384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float yMinLimit;

	[Token(Token = "0x4001385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float yMaxLimit;

	[Token(Token = "0x4001386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float distanceMin;

	[Token(Token = "0x4001387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distanceMax;

	[Token(Token = "0x4001388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float smoothTime;

	[Token(Token = "0x4001389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float rotationYAxis;

	[Token(Token = "0x400138A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationXAxis;

	[Token(Token = "0x400138B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float velocityX;

	[Token(Token = "0x400138C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float velocityY;

	[Token(Token = "0x60016A3")]
	[Address(RVA = "0x49EC40", Offset = "0x49EC40", VA = "0x49EC40")]
	public DragMouseOrbit()
	{
	}

	[Token(Token = "0x60016A4")]
	[Address(RVA = "0x49EC88", Offset = "0x49EC88", VA = "0x49EC88")]
	private void Start()
	{
	}

	[Token(Token = "0x60016A5")]
	[Address(RVA = "0x49EDB0", Offset = "0x49EDB0", VA = "0x49EDB0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60016A6")]
	[Address(RVA = "0x49F2DC", Offset = "0x49F2DC", VA = "0x49F2DC")]
	public static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}
}
[Token(Token = "0x2000355")]
public class FireProjectile : MonoBehaviour
{
	[Token(Token = "0x400138D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private RaycastHit hit;

	[Token(Token = "0x400138E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] projectiles;

	[Token(Token = "0x400138F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Transform spawnPosition;

	[Token(Token = "0x4001390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public int currentProjectile;

	[Token(Token = "0x4001391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float speed;

	[Token(Token = "0x4001392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ButtonScript selectedProjectileButton;

	[Token(Token = "0x60016A7")]
	[Address(RVA = "0x4B4170", Offset = "0x4B4170", VA = "0x4B4170")]
	public FireProjectile()
	{
	}

	[Token(Token = "0x60016A8")]
	[Address(RVA = "0x4B4184", Offset = "0x4B4184", VA = "0x4B4184")]
	private void Start()
	{
	}

	[Token(Token = "0x60016A9")]
	[Address(RVA = "0x4B4218", Offset = "0x4B4218", VA = "0x4B4218")]
	private void Update()
	{
	}

	[Token(Token = "0x60016AA")]
	[Address(RVA = "0x4B48B4", Offset = "0x4B48B4", VA = "0x4B48B4")]
	public void nextEffect()
	{
	}

	[Token(Token = "0x60016AB")]
	[Address(RVA = "0x4B48F8", Offset = "0x4B48F8", VA = "0x4B48F8")]
	public void previousEffect()
	{
	}

	[Token(Token = "0x60016AC")]
	[Address(RVA = "0x4B4934", Offset = "0x4B4934", VA = "0x4B4934")]
	public void AdjustSpeed(float newSpeed)
	{
	}
}
[Token(Token = "0x2000356")]
public class LoadSceneOnClickPA : MonoBehaviour
{
	[Token(Token = "0x60016AD")]
	[Address(RVA = "0x6B2954", Offset = "0x6B2954", VA = "0x6B2954")]
	public LoadSceneOnClickPA()
	{
	}

	[Token(Token = "0x60016AE")]
	[Address(RVA = "0x6B295C", Offset = "0x6B295C", VA = "0x6B295C")]
	public void LoadSceneDemo1()
	{
	}

	[Token(Token = "0x60016AF")]
	[Address(RVA = "0x6B29BC", Offset = "0x6B29BC", VA = "0x6B29BC")]
	public void LoadSceneDemo2()
	{
	}

	[Token(Token = "0x60016B0")]
	[Address(RVA = "0x6B2A1C", Offset = "0x6B2A1C", VA = "0x6B2A1C")]
	public void LoadSceneDemo3()
	{
	}

	[Token(Token = "0x60016B1")]
	[Address(RVA = "0x6B2A7C", Offset = "0x6B2A7C", VA = "0x6B2A7C")]
	public void LoadSceneDemo4()
	{
	}

	[Token(Token = "0x60016B2")]
	[Address(RVA = "0x6B2ADC", Offset = "0x6B2ADC", VA = "0x6B2ADC")]
	public void LoadSceneDemo5()
	{
	}

	[Token(Token = "0x60016B3")]
	[Address(RVA = "0x6B2B3C", Offset = "0x6B2B3C", VA = "0x6B2B3C")]
	public void LoadSceneDemo6()
	{
	}

	[Token(Token = "0x60016B4")]
	[Address(RVA = "0x6B2B9C", Offset = "0x6B2B9C", VA = "0x6B2B9C")]
	public void LoadSceneDemo7()
	{
	}

	[Token(Token = "0x60016B5")]
	[Address(RVA = "0x6B2BFC", Offset = "0x6B2BFC", VA = "0x6B2BFC")]
	public void LoadSceneDemo8()
	{
	}

	[Token(Token = "0x60016B6")]
	[Address(RVA = "0x6B2C5C", Offset = "0x6B2C5C", VA = "0x6B2C5C")]
	public void LoadSceneDemo9()
	{
	}

	[Token(Token = "0x60016B7")]
	[Address(RVA = "0x6B2CBC", Offset = "0x6B2CBC", VA = "0x6B2CBC")]
	public void LoadSceneDemo10()
	{
	}
}
[Token(Token = "0x2000357")]
public class Projectile : MonoBehaviour
{
	[Token(Token = "0x60016B8")]
	[Address(RVA = "0x468580", Offset = "0x468580", VA = "0x468580")]
	public Projectile()
	{
	}

	[Token(Token = "0x60016B9")]
	[Address(RVA = "0x468588", Offset = "0x468588", VA = "0x468588")]
	private void Start()
	{
	}

	[Token(Token = "0x60016BA")]
	[Address(RVA = "0x46858C", Offset = "0x46858C", VA = "0x46858C")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000358")]
public class ProjectileScript : MonoBehaviour
{
	[Token(Token = "0x2000359")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x238888", Offset = "0x238888")]
	private sealed class <DestroyCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal ProjectileScript $this;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x1700040D")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60016C3")]
			[Address(RVA = "0x469104", Offset = "0x469104", VA = "0x469104", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700040E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016C4")]
			[Address(RVA = "0x46910C", Offset = "0x46910C", VA = "0x46910C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0x468F10", Offset = "0x468F10", VA = "0x468F10")]
		[DebuggerHidden]
		public <DestroyCoroutine>c__Iterator0()
		{
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x468F18", Offset = "0x468F18", VA = "0x468F18", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0x469114", Offset = "0x469114", VA = "0x469114", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0x469128", Offset = "0x469128", VA = "0x469128", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject impactParticle;

	[Token(Token = "0x4001394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject projectileParticle;

	[Token(Token = "0x4001395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject[] trailParticles;

	[Token(Token = "0x4001396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask ignoreLayers;

	[Token(Token = "0x4001397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public Vector3 impactNormal;

	[Token(Token = "0x4001398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool hasCollided;

	[Token(Token = "0x4001399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 lastPos;

	[Token(Token = "0x60016BB")]
	[Address(RVA = "0x468590", Offset = "0x468590", VA = "0x468590")]
	public ProjectileScript()
	{
	}

	[Token(Token = "0x60016BC")]
	[Address(RVA = "0x468598", Offset = "0x468598", VA = "0x468598")]
	private void Start()
	{
	}

	[Token(Token = "0x60016BD")]
	[Address(RVA = "0x468740", Offset = "0x468740", VA = "0x468740")]
	private void Update()
	{
	}

	[Token(Token = "0x60016BE")]
	[Address(RVA = "0x468DF8", Offset = "0x468DF8", VA = "0x468DF8")]
	private void OnCollisionEnter(Collision hit)
	{
	}

	[Token(Token = "0x60016BF")]
	[Address(RVA = "0x4689EC", Offset = "0x4689EC", VA = "0x4689EC")]
	private void HandleCollision(GameObject go, Vector3 impact)
	{
	}

	[Token(Token = "0x60016C0")]
	[Address(RVA = "0x468E8C", Offset = "0x468E8C", VA = "0x468E8C")]
	[DebuggerHidden]
	private IEnumerator DestroyCoroutine()
	{
		return null;
	}
}
[Token(Token = "0x200035A")]
public class BeamScript : MonoBehaviour
{
	[Token(Token = "0x400139E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x23C04C", Offset = "0x23C04C")]
	public GameObject[] beamLineRendererPrefab;

	[Token(Token = "0x400139F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject[] beamStartPrefab;

	[Token(Token = "0x40013A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject[] beamEndPrefab;

	[Token(Token = "0x40013A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentBeam;

	[Token(Token = "0x40013A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GameObject beamStart;

	[Token(Token = "0x40013A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject beamEnd;

	[Token(Token = "0x40013A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private GameObject beam;

	[Token(Token = "0x40013A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LineRenderer line;

	[Token(Token = "0x40013A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x23C080", Offset = "0x23C080")]
	public float beamEndOffset;

	[Token(Token = "0x40013A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float textureScrollSpeed;

	[Token(Token = "0x40013A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float textureLengthScale;

	[Token(Token = "0x40013A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x23C0C4", Offset = "0x23C0C4")]
	public Slider endOffSetSlider;

	[Token(Token = "0x40013AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Slider scrollSpeedSlider;

	[Token(Token = "0x40013AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x23C10C", Offset = "0x23C10C")]
	public Text textBeamName;

	[Token(Token = "0x60016C7")]
	[Address(RVA = "0x48B0CC", Offset = "0x48B0CC", VA = "0x48B0CC")]
	public BeamScript()
	{
	}

	[Token(Token = "0x60016C8")]
	[Address(RVA = "0x48B0F0", Offset = "0x48B0F0", VA = "0x48B0F0")]
	private void Start()
	{
	}

	[Token(Token = "0x60016C9")]
	[Address(RVA = "0x48B2FC", Offset = "0x48B2FC", VA = "0x48B2FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60016CA")]
	[Address(RVA = "0x48BF3C", Offset = "0x48BF3C", VA = "0x48BF3C")]
	public void nextBeam()
	{
	}

	[Token(Token = "0x60016CB")]
	[Address(RVA = "0x48C088", Offset = "0x48C088", VA = "0x48C088")]
	public void previousBeam()
	{
	}

	[Token(Token = "0x60016CC")]
	[Address(RVA = "0x48C1CC", Offset = "0x48C1CC", VA = "0x48C1CC")]
	public void UpdateEndOffset()
	{
	}

	[Token(Token = "0x60016CD")]
	[Address(RVA = "0x48C208", Offset = "0x48C208", VA = "0x48C208")]
	public void UpdateScrollSpeed()
	{
	}

	[Token(Token = "0x60016CE")]
	[Address(RVA = "0x48B8D4", Offset = "0x48B8D4", VA = "0x48B8D4")]
	private void ShootBeamInDir(Vector3 start, Vector3 dir)
	{
	}
}
[Token(Token = "0x200035B")]
public class lightScript : MonoBehaviour
{
	[Token(Token = "0x40013AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool Impact;

	[Token(Token = "0x40013AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float Sqr;

	[Token(Token = "0x60016CF")]
	[Address(RVA = "0x8ED014", Offset = "0x8ED014", VA = "0x8ED014")]
	public lightScript()
	{
	}

	[Token(Token = "0x60016D0")]
	[Address(RVA = "0x8ED01C", Offset = "0x8ED01C", VA = "0x8ED01C")]
	private void Start()
	{
	}

	[Token(Token = "0x60016D1")]
	[Address(RVA = "0x8ED214", Offset = "0x8ED214", VA = "0x8ED214")]
	private void Update()
	{
	}
}
[Token(Token = "0x200035C")]
public class loopScript : MonoBehaviour
{
	[Token(Token = "0x200035D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x238898", Offset = "0x238898")]
	private sealed class <EffectLoop>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal GameObject <effectPlayer>__0;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal loopScript $this;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x1700040F")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60016D8")]
			[Address(RVA = "0x8ED738", Offset = "0x8ED738", VA = "0x8ED738", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000410")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016D9")]
			[Address(RVA = "0x8ED740", Offset = "0x8ED740", VA = "0x8ED740", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x8ED4D4", Offset = "0x8ED4D4", VA = "0x8ED4D4")]
		[DebuggerHidden]
		public <EffectLoop>c__Iterator0()
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x8ED4DC", Offset = "0x8ED4DC", VA = "0x8ED4DC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x8ED748", Offset = "0x8ED748", VA = "0x8ED748", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0x8ED75C", Offset = "0x8ED75C", VA = "0x8ED75C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40013AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject chosenEffect;

	[Token(Token = "0x40013AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float loopTimeLimit;

	[Token(Token = "0x60016D2")]
	[Address(RVA = "0x8ED3D4", Offset = "0x8ED3D4", VA = "0x8ED3D4")]
	public loopScript()
	{
	}

	[Token(Token = "0x60016D3")]
	[Address(RVA = "0x8ED3E4", Offset = "0x8ED3E4", VA = "0x8ED3E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60016D4")]
	[Address(RVA = "0x8ED3E8", Offset = "0x8ED3E8", VA = "0x8ED3E8")]
	public void PlayLoopingPEffect()
	{
	}

	[Token(Token = "0x60016D5")]
	[Address(RVA = "0x8ED450", Offset = "0x8ED450", VA = "0x8ED450")]
	[DebuggerHidden]
	private IEnumerator EffectLoop()
	{
		return null;
	}
}
namespace Smaa
{
	[Token(Token = "0x200035E")]
	public enum DebugPass
	{
		[Token(Token = "0x40013B6")]
		Off,
		[Token(Token = "0x40013B7")]
		Edges,
		[Token(Token = "0x40013B8")]
		Weights
	}
	[Token(Token = "0x200035F")]
	public enum EdgeDetectionMethod
	{
		[Token(Token = "0x40013BA")]
		Luma = 1,
		[Token(Token = "0x40013BB")]
		Color,
		[Token(Token = "0x40013BC")]
		Depth
	}
	[Token(Token = "0x2000360")]
	public enum HDRMode
	{
		[Token(Token = "0x40013BE")]
		Auto,
		[Token(Token = "0x40013BF")]
		On,
		[Token(Token = "0x40013C0")]
		Off
	}
	[Token(Token = "0x2000361")]
	public sealed class MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float min;

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0x472794", Offset = "0x472794", VA = "0x472794")]
		public MinAttribute(float min)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000362")]
	public class PredicationPreset
	{
		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x23C164", Offset = "0x23C164")]
		public float Threshold;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23C17C", Offset = "0x23C17C")]
		public float Scale;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23C198", Offset = "0x23C198")]
		public float Strength;

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0x4727B4", Offset = "0x4727B4", VA = "0x4727B4")]
		public PredicationPreset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000363")]
	public class Preset
	{
		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool DiagDetection;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool CornerDetection;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23C1B0", Offset = "0x23C1B0")]
		public float Threshold;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x23C1C8", Offset = "0x23C1C8")]
		public float DepthThreshold;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23C1E0", Offset = "0x23C1E0")]
		public int MaxSearchSteps;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23C1FC", Offset = "0x23C1FC")]
		public int MaxSearchStepsDiag;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x23C218", Offset = "0x23C218")]
		public int CornerRounding;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x23C234", Offset = "0x23C234")]
		public float LocalContrastAdaptationFactor;

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0x4727DC", Offset = "0x4727DC", VA = "0x4727DC")]
		public Preset()
		{
		}
	}
	[Token(Token = "0x2000364")]
	public enum QualityPreset
	{
		[Token(Token = "0x40013CE")]
		Low,
		[Token(Token = "0x40013CF")]
		Medium,
		[Token(Token = "0x40013D0")]
		High,
		[Token(Token = "0x40013D1")]
		Ultra,
		[Token(Token = "0x40013D2")]
		Custom
	}
	[Token(Token = "0x2000365")]
	[ExecuteInEditMode]
	[ImageEffectAllowedInSceneView]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2388A8", Offset = "0x2388A8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2388A8", Offset = "0x2388A8")]
	public class SMAA : MonoBehaviour
	{
		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HDRMode Hdr;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DebugPass DebugPass;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public QualityPreset Quality;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EdgeDetectionMethod DetectionMethod;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool UsePredication;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Preset CustomPreset;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public PredicationPreset CustomPredicationPreset;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader Shader;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Texture2D AreaTex;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D SearchTex;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected Camera m_Camera;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Preset[] m_StdPresets;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Material m_Material;

		[Token(Token = "0x17000411")]
		public Material Material
		{
			[Token(Token = "0x60016E0")]
			[Address(RVA = "0x472848", Offset = "0x472848", VA = "0x472848")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0x472830", Offset = "0x472830", VA = "0x472830")]
		public SMAA()
		{
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0x47292C", Offset = "0x47292C", VA = "0x47292C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0x472FF0", Offset = "0x472FF0", VA = "0x472FF0")]
		private void Start()
		{
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x4730C8", Offset = "0x4730C8", VA = "0x4730C8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x473198", Offset = "0x473198", VA = "0x473198")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0x473A58", Offset = "0x473A58", VA = "0x473A58")]
		private void Clear(RenderTexture rt)
		{
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0x473A28", Offset = "0x473A28", VA = "0x473A28")]
		private RenderTexture TempRT(int width, int height, RenderTextureFormat format)
		{
			return null;
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0x472A7C", Offset = "0x472A7C", VA = "0x472A7C")]
		private void CreatePresets()
		{
		}
	}
}
